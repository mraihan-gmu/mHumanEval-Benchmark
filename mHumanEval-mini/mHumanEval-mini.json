{"nl":"ace_Arab","prompt":"\ndef do_algebra(operator, operand):\n    \"\"\"\n    \u00d8\u00af\u00d8\u00a8\u00d8\u00b1\u00d9\u008a \u00d8\u00af\u00d9\u0088\u00d8\u00a7 \u00d9\u0084\u00d9\u0086\u00d8\u00aa\u00d8\u00b3 \u00d8\u00a7\u00d9\u0088\u00da\u00a4\u00d8\u00b1\u00d8\u00a7\u00d8\u00aa\u00d9\u0088\u00d8\u00b1\u00d8\u008c \u00d8\u00af\u00d8\u00a7\u00d9\u0086 \u00d8\u00a7\u00d9\u0088\u00da\u00a4\u00d8\u00b1\u00d9\u0086. \u00d9\u0084\u00d9\u0086\u00d8\u00aa\u00d8\u00b3 \u00da\u00a4\u00d8\u00b1\u00d8\u00aa\u00d8\u00a7\u00d9\u0085 \u00d8\u00a7\u00d8\u00af \u00d8\u00a7\u00d9\u0088\u00da\u00a4\u00d8\u00b1\u00d8\u00a7\u00d8\u00b3\u00d9\u008a \u00d8\u00ac\u00d8\u00a8\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b3\u00d8\u00a7\u00d8\u00b3\u00d8\u008c \u00d8\u00af\u00d8\u00a7\u00d9\u0086 \u00d9\u0084\u00d9\u0086\u00d8\u00aa\u00d8\u00b3 \u00d9\u0083\u00d8\u00af\u00d9\u0088\u00d8\u00a7 \u00d8\u00a7\u00d8\u00af\u00d8\u00a7\u00d9\u0084\u00d9\u0087 \u00d9\u0084\u00d9\u0086\u00d8\u00aa\u00d8\u00b3 \u00d8\u00a7\u00d9\u008a\u00d9\u0086\u00d8\u00aa\u00d9\u008a\u00da\u00ac\u00d8\u00b1. \u00d9\u0085\u00da\u00a0\u00da\u00ac\u00d9\u0088\u00d9\u0086\u00d8\u00a7\u00d9\u0083\u00d9\u0086 \u00d8\u00af\u00d9\u0088\u00d8\u00a7 \u00d9\u0084\u00d9\u0086\u00d8\u00aa\u00d8\u00b3 \u00d8\u00af\u00d8\u00a8\u00d8\u00b1\u00d9\u008a \u00d8\u00a7\u00d9\u0088\u00d9\u0086\u00d8\u00aa\u00d9\u0088\u00d9\u0082 \u00d9\u0085\u00d9\u0085\u00d8\u00a8\u00d9\u008a\u00d9\u0086\u00d8\u00a7 \u00d8\u00a7\u00d9\u008a\u00d9\u0083\u00d8\u00b3\u00da\u00a4\u00d8\u00b1\u00d9\u008a\u00d8\u00b3\u00d9\u008a \u00d8\u00ac\u00d8\u00a8\u00d8\u00b1 \u00d8\u00af\u00d8\u00a7\u00d9\u0086 \u00d9\u0085\u00da\u00bd\u00d8\u00a7\u00d8\u00aa\u00d8\u00a7\u00d9\u0083\u00d9\u0086 \u00da\u00a4\u00da\u00a0\u00d8\u00aa\u00d8\u00a7\u00d9\u0087\u00d9\u0088\u00d8\u00a7\u00d9\u0086 \u00d8\u00a7\u00d9\u008a\u00d9\u0083\u00d8\u00b3\u00da\u00a4\u00d8\u00b1\u00d9\u008a\u00d8\u00b3\u00d9\u008a \u00d8\u00a7\u00d9\u008a\u00d9\u0086. \u00d8\u00a7\u00d9\u0088\u00da\u00a4\u00d8\u00b1\u00d8\u00a7\u00d8\u00b3\u00d9\u008a \u00d8\u00ac\u00d8\u00a8\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b3\u00d8\u00a7\u00d8\u00b3: \u00da\u00a4\u00da\u00a0\u00d9\u0084\u00d9\u0088\u00d8\u00a7\u00d8\u00b1\u00d9\u0086 (+) \u00da\u00a4\u00da\u00a0\u00d9\u0084\u00d9\u0088\u00d8\u00a7\u00d8\u00b1\u00d9\u0086 (-)) \u00da\u00a4\u00da\u00a0\u00d9\u0084\u00d9\u0088\u00d8\u00a7\u00d8\u00b1\u00d9\u0086 (*) \u00da\u00a4\u00da\u00a0\u00d9\u0084\u00d9\u0088\u00d8\u00a7\u00d8\u00b1\u00d9\u0086 (\/\/) \u00da\u00a4\u00da\u00a0\u00d9\u0084\u00d9\u0088\u00d8\u00a7\u00d8\u00b1\u00d9\u0086 (**) \u00da\u0086\u00d9\u0088\u00d9\u0086\u00d8\u00aa\u00d9\u0088\u00d9\u0087: \u00d8\u00a7\u00d9\u0088\u00da\u00a4\u00d8\u00b1\u00d8\u00a7\u00d8\u00aa\u00d9\u0088\u00d8\u00b1['+', '*', '-'] \u00d8\u00a7\u00d8\u00b1\u00d8\u00b1\u00d9\u008a = [2, 3, 4, 5] \u00d8\u00b1\u00d9\u008a\u00d8\u00b3\u00d9\u0084\u00d9\u0088\u00d8\u00aa = 2 + 3 * 4 - 5 => \u00d8\u00b1\u00d9\u008a\u00d8\u00b3\u00d9\u0084\u00d9\u0088\u00d8\u00aa = 9 \u00d8\u00aa\u00d9\u008a\u00d8\u00aa\u00d9\u0082: \u00d9\u0084\u00d9\u0086\u00d8\u00aa\u00d8\u00b3 \u00d8\u00a7\u00d9\u0088\u00da\u00a4\u00d8\u00b1\u00d8\u00a7\u00d8\u00aa\u00d9\u0088\u00d8\u00b1 \u00d8\u00b3\u00d8\u00a7\u00d9\u0085 \u00d8\u00af\u00da\u00a0\u00d9\u0086 \u00d9\u0084\u00d9\u0086\u00d8\u00aa\u00d8\u00b3\n\n    \"\"\"\n","canonical_solution":"    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['\/\/', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"ace_Latn","prompt":"\n\ndef sum_squares(lst):\n    \"\"\"Contoh: Untuk lst = [1,2,3] outputnya harus 14 Untuk lst = [1,4,9] outputnya harus 98 Untuk lst = [1,3,5,7] outputnya harus 84 Untuk lst = [1.4,4.2,0] outputnya harus 29 Untuk lst = [-2.4,1,1] outputnya harus 6\n    \n\n    \"\"\"\n","canonical_solution":"    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"acm_Arab","prompt":"\ndef split_words(txt):\n    '''\n    ___ _____ _____ __ ________ ___ _____ __ _______ _____ ___ ________ ________ ___ __ ____ ______ _____ __ ____ ___ __ ____ ___ _______ ',' ___ __ ____ _____ ___ __ ____ ___ ______ _______ ___ _______ ______ __ _________ ord('a') = 0, ord('b') = 1, ... ord('z') = 25    Examples\n    split_words(\"Hello world!\") \u00c3\u00a2 -> [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u00c3\u00a2 -> [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n","canonical_solution":"    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n","test":"def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n"}
{"nl":"acq_Arab","prompt":"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" \u00d8\u00a7\u00d8\u00ae\u00d8\u00aa\u00d8\u00a8\u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b0\u00d8\u00a7 \u00d8\u00a7\u00d9\u0084\u00d8\u00b3\u00d9\u0084\u00d8\u00b3\u00d9\u0084\u00d8\u00a9 \u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d8\u00b9\u00d8\u00b7\u00d9\u008a\u00d9\u0087 \u00d9\u0087\u00d9\u008a \u00d8\u00a8\u00d8\u00a7\u00d9\u0084\u00d9\u0086\u00d8\u00af\u00d8\u00b1\u00d9\u0088\u00d9\u0085 \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n","canonical_solution":"    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n","test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n"}
{"nl":"aeb_Arab","prompt":"\ndef words_string(s):\n    \"\"\"\n    \u00d9\u0088\u00d9\u0092\u00d8\u00aa\u00d9\u0090\u00d8\u00aa\u00d9\u0092\u00d8\u00b9\u00d9\u0092\u00d8\u00b7\u00d9\u008e\u00d9\u0089 \u00d9\u0084\u00d9\u0090\u00d9\u008a\u00d9\u0083\u00d9\u0092 \u00d8\u00b3\u00d9\u0090\u00d9\u0084\u00d8\u00a7\u00d9\u008e\u00d9\u0084\u00d9\u0092 \u00d9\u0085\u00d9\u0092\u00d8\u00aa\u00d9\u008e\u00d8\u00a7\u00d8\u00b9\u00d9\u0092 \u00d8\u00a7\u00d9\u0084\u00d9\u0083\u00d9\u0092\u00d9\u0084\u00d8\u00a7\u00d9\u008e\u00d9\u0085\u00d9\u0092 \u00d9\u0085\u00d9\u0092\u00d9\u0081\u00d9\u008e\u00d8\u00a7\u00d8\u00b1\u00d9\u0092\u00d9\u0082\u00d9\u0090\u00d9\u008a\u00d9\u0086\u00d9\u0092 \u00d8\u00a8\u00d9\u0090\u00d8\u00a7\u00d9\u0084\u00d9\u0083\u00d9\u008f\u00d9\u0088\u00d9\u0085\u00d9\u008e\u00d8\u00a7 \u00d9\u0088\u00d9\u0090\u00d9\u0084\u00d8\u00a7\u00d9\u008e\u00d9\u0091 \u00d8\u00a8\u00d9\u0090\u00d8\u00a7\u00d9\u0084\u00d9\u0081\u00d9\u008f\u00d8\u00b1\u00d9\u0092\u00d9\u0082\u00d9\u008e\u00d8\u00a9. \u00d9\u0088\u00d9\u0092\u00d8\u00aa\u00d9\u0090\u00d8\u00aa\u00d9\u0092\u00d8\u00ad\u00d9\u008e\u00d8\u00b7\u00d9\u0092 \u00d8\u00b3\u00d9\u0090\u00d9\u0084\u00d8\u00a7\u00d9\u008e\u00d9\u0084\u00d9\u0092 \u00d9\u0085\u00d9\u0092\u00d8\u00aa\u00d9\u008e\u00d8\u00a7\u00d8\u00b9\u00d9\u0092 \u00d8\u00a7\u00d9\u0084\u00d9\u0083\u00d9\u0092\u00d9\u0084\u00d8\u00a7\u00d9\u008e\u00d9\u0085\u00d9\u0092 \u00d9\u0081\u00d9\u0090\u00d9\u008a \u00d8\u00a7\u00d9\u0084\u00d9\u0083\u00d9\u0092\u00d9\u0084\u00d8\u00a7\u00d9\u008e\u00d9\u0085\u00d9\u0092 \u00d9\u0088\u00d9\u0090\u00d8\u00aa\u00d9\u0092\u00d8\u00b1\u00d9\u008e\u00d8\u00ac\u00d9\u008e\u00d9\u0091\u00d8\u00b9\u00d9\u0092 \u00d9\u0085\u00d9\u008e\u00d8\u00aa\u00d9\u0092\u00d8\u00b9\u00d9\u008e\u00d8\u00a9 \u00d9\u0085\u00d9\u0092\u00d8\u00aa\u00d9\u008e\u00d8\u00a7\u00d8\u00b9\u00d9\u0092 \u00d8\u00a7\u00d9\u0084\u00d9\u0083\u00d9\u0092\u00d9\u0084\u00d8\u00a7\u00d9\u008e\u00d9\u0085\u00d9\u0092. \u00d9\u0085\u00d9\u0092\u00d8\u00ab\u00d9\u008e\u00d8\u00a7\u00d9\u0084\u00d9\u0092: words_string ((\"\u00d8\u00b3\u00d9\u008e\u00d9\u0085\u00d9\u0092\u00d8\u00aa\u00d9\u0090\u00d9\u008a \u00d9\u008a\u00d9\u008f\u00d9\u0088\u00d8\u00ad\u00d9\u008e\u00d9\u0086\u00d9\u008e\u00d9\u0091\u00d8\u00a7\") == [\"\u00d8\u00b3\u00d9\u008e\u00d9\u0085\u00d9\u0092\u00d8\u00aa\u00d9\u0090\u00d9\u008a \u00d9\u008a\u00d9\u008f\u00d9\u0088\u00d8\u00ad\u00d9\u008e\u00d9\u0086\u00d9\u008e\u00d9\u0091\u00d8\u00a7\"\u00d8\u008c \"\u00d8\u00b3\u00d9\u008e\u00d9\u0085\u00d9\u0092\u00d8\u00aa\u00d9\u0090\u00d9\u008a\"\u00d8\u008c \"\u00d8\u00a5\u00d9\u0090\u00d8\u00b3\u00d9\u0092\u00d9\u0085\u00d9\u0090\u00d9\u008a\"\u00d8\u008c \"\u00d9\u0087\u00d9\u008f\u00d9\u0088\u00d9\u008e\n    \"\"\"\n","canonical_solution":"    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n"}
{"nl":"afr_Latn","prompt":"\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is 'n funksie wat string neem en string sonder vokale teruggee.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n","canonical_solution":"    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n","test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n"}
{"nl":"ajp_Arab","prompt":"\ndef specialFilter(nums):\n    \"\"\"\u00d8\u00a7\u00d9\u0083\u00d8\u00aa\u00d8\u00a8 \u00d8\u00af\u00d8\u00a7\u00d9\u0084\u00d8\u00a9 \u00d8\u00a8\u00d8\u00aa\u00d8\u00a3\u00d8\u00ae\u00d8\u00b0 \u00d8\u00b5\u00d9\u0081 \u00d9\u0085\u00d9\u0086 \u00d8\u00a7\u00d9\u0084\u00d8\u00a7\u00d8\u00b1\u00d9\u0082\u00d8\u00a7\u00d9\u0085 \u00d9\u0083\u00d9\u0085\u00d8\u00af\u00d8\u00ae\u00d9\u0084 \u00d9\u0088\u00d8\u00aa\u00d8\u00b9\u00d9\u008a\u00d8\u00af \u00d8\u00b9\u00d8\u00af\u00d8\u00af \u00d8\u00a7\u00d9\u0084\u00d8\u00b9\u00d9\u0086\u00d8\u00a7\u00d8\u00b5\u00d8\u00b1 \u00d9\u0081\u00d9\u008a \u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d8\u00b5\u00d9\u0081 \u00d8\u00a7\u00d9\u0083\u00d8\u00a8\u00d8\u00b1 \u00d9\u0085\u00d9\u0086 10 \u00d9\u0088\u00d8\u00a7\u00d9\u0084\u00d8\u00a7\u00d8\u00b9\u00d8\u00af\u00d8\u00a7\u00d8\u00af \u00d8\u00a7\u00d9\u0084\u00d8\u00a3\u00d9\u0088\u00d9\u0084 \u00d9\u0088\u00d8\u00a7\u00d9\u0084\u00d8\u00a7\u00d8\u00ae\u00d9\u008a\u00d8\u00b1 \u00d9\u0085\u00d9\u0086 \u00d8\u00a7\u00d9\u0084\u00d8\u00b1\u00d9\u0082\u00d9\u0085 \u00d8\u00ba\u00d9\u008a\u00d8\u00b1 \u00d9\u0081\u00d8\u00b1\u00d8\u00af\u00d9\u008a (1, 3, 5, 7, 9). \u00d9\u0085\u00d8\u00ab\u00d9\u0084\u00d8\u00a7: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n","canonical_solution":"    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n"}
{"nl":"aka_Latn","prompt":"\ndef solve(N):\n    \"\"\"S\u00c9\u009b wode \u00c9\u0094f\u00c3\u00a3 bi a \u00c9\u009by\u00c9\u009b \u00c9\u0094f\u00c3\u00a3 biara a \u00c9\u009by\u00c9\u009b N ma a, fa ne nyinaa ka no w\u00c9\u0094 \u00c9\u0094f\u00c3\u00a3 a \u00c9\u009by\u00c9\u009b binary mu. S\u00c9\u009bnkyer\u00c9\u009bnne no ma N = 1000, a \u00c9\u0094f\u00c3\u00a3 no ka b\u00c9\u009by\u00c9\u009b 1 a \u00c9\u009bs\u00c9\u009b s\u00c9\u009b \u00c9\u009by\u00c9\u009b \"1\". S\u00c9\u009b N = 150, a \u00c9\u0094f\u00c3\u00a3 no ka b\u00c9\u009by\u00c9\u009b 6 a \u00c9\u009bs\u00c9\u009b s\u00c9\u009b \u00c9\u009by\u00c9\u009b \"110\". S\u00c9\u009b N = 147, a \u00c9\u0094f\u00c3\u00a3 no ka y\u00c9\u009b 12 a \u00c9\u009bs\u00c9\u009b s\u00c9\u009b \u00c9\u009by\u00c9\u009b \"1100\". Nkyereso: @N integer Constraints: 0 \u00c3\u00a2\u00e2\u0080\u00b0\u00c2\u00a4 N \u00c3\u00a2\u00e2\u0080\u00b0\u00c2\u00a4 10000.\n    \"\"\"\n","canonical_solution":"    return bin(sum(int(i) for i in str(N)))[2:]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n"}
{"nl":"als_Latn","prompt":"from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input \u00c3\u00absht\u00c3\u00ab nj\u00c3\u00ab varg i numrave t\u00c3\u00ab kufizuar nga hap\u00c3\u00absira nga 'zero' deri n\u00c3\u00ab 'n\u00c3\u00abnt\u00c3\u00ab'. Zgjedhjet e vlefshme jan\u00c3\u00ab 'zero', 'nj\u00c3\u00ab', 'dy', 'tre', 'kat\u00c3\u00abr', 'pes\u00c3\u00ab', 'gjasht\u00c3\u00ab', 'gjasht\u00c3\u00ab', 'gjasht\u00c3\u00ab', 'gjasht\u00c3\u00ab' dhe 'n\u00c3\u00abnt\u00c3\u00ab'. Kthehet vargu me numra t\u00c3\u00ab renditur nga m\u00c3\u00ab i vog\u00c3\u00abl n\u00c3\u00ab m\u00c3\u00ab i madh\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n","canonical_solution":"    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n","test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n"}
{"nl":"amh_Ethi","prompt":"\ndef count_nums(arr):\n    \"\"\"\n    \u00e1\u008b\u00a8\u00e1\u0089\u0081\u00e1\u008c\u00a5\u00e1\u0088\u00ad \u00e1\u008b\u00b5\u00e1\u0088\u009d\u00e1\u0088\u00ad > 0 \u00e1\u008b\u00a8\u00e1\u0088\u0086\u00e1\u008a\u0090\u00e1\u008a\u0095 \u00e1\u008b\u00a8\u00e1\u0089\u0081\u00e1\u008c\u00a5\u00e1\u0088\u00ad \u00e1\u0089\u00a5\u00e1\u008b\u009b\u00e1\u0089\u00b5 \u00e1\u008b\u00a8\u00e1\u0088\u009a\u00e1\u008b\u0088\u00e1\u0088\u00b5\u00e1\u008b\u00b5 \u00e1\u008a\u00a5\u00e1\u008a\u0093 \u00e1\u008b\u00a8\u00e1\u0089\u0081\u00e1\u008c\u00a5\u00e1\u0088\u00ad \u00e1\u008b\u00b5\u00e1\u0088\u009d\u00e1\u0088\u00ad \u00e1\u008b\u00ab\u00e1\u0088\u0088\u00e1\u008b\u008d \u00e1\u008b\u00a8\u00e1\u0089\u0081\u00e1\u008c\u00a5\u00e1\u0088\u00ad \u00e1\u0089\u00a5\u00e1\u008b\u009b\u00e1\u0089\u00b5 \u00e1\u008b\u00a8\u00e1\u0088\u009a\u00e1\u0088\u0098\u00e1\u0088\u008d\u00e1\u0088\u00b5 \u00e1\u008b\u00a8\u00e1\u0089\u0081\u00e1\u008c\u00a5\u00e1\u0088\u00ad \u00e1\u0089\u00a5\u00e1\u008b\u009b\u00e1\u0089\u00b5_\u00e1\u0089\u0081\u00e1\u008c\u00a5\u00e1\u0088\u00ad \u00e1\u0089\u00b0\u00e1\u008c\u008d\u00e1\u0089\u00a3\u00e1\u0088\u00ad \u00e1\u008b\u00ad\u00e1\u008c\u00bb\u00e1\u008d\u0089: \u00e1\u0088\u0088\u00e1\u0088\u009d\u00e1\u0088\u00b3\u00e1\u0088\u008c -123 \u00e1\u008b\u00a8\u00e1\u0089\u0081\u00e1\u008c\u00a5\u00e1\u0088\u00ad \u00e1\u0089\u0081\u00e1\u008c\u00a5\u00e1\u0088\u00ae\u00e1\u0089\u00bd -1, 2 \u00e1\u008a\u00a5\u00e1\u008a\u0093 3 \u00e1\u0088\u009d\u00e1\u0088\u008d\u00e1\u008a\u00ad\u00e1\u0089\u00b5 \u00e1\u008b\u00a8\u00e1\u0089\u00b0\u00e1\u008b\u00b0\u00e1\u0088\u00a8\u00e1\u008c\u0088\u00e1\u0089\u00a0\u00e1\u0089\u00b5 \u00e1\u008a\u0090\u00e1\u008b\u008d\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n","canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"apc_Arab","prompt":"from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" \u00d9\u008a\u00d8\u00b1\u00d8\u00ac\u00d8\u00b9 \u00d9\u0082\u00d8\u00a7\u00d8\u00a6\u00d9\u0085\u00d8\u00a9 \u00d9\u0083\u00d9\u0084 \u00d8\u00a7\u00d9\u0084\u00d8\u00a8\u00d8\u00b1\u00d9\u0081\u00d9\u008a\u00d8\u00b3\u00d8\u00a7\u00d8\u00aa \u00d9\u0085\u00d9\u0086 \u00d8\u00a7\u00d9\u0084\u00d8\u00a3\u00d9\u0082\u00d8\u00b5\u00d8\u00b1 \u00d9\u0084\u00d8\u00a3\u00d8\u00b7\u00d9\u0088\u00d9\u0084 \u00d9\u0085\u00d9\u0086 \u00d8\u00b3\u00d9\u0084\u00d8\u00b3\u00d9\u0084\u00d8\u00a9 \u00d8\u00a7\u00d9\u0084\u00d8\u00a5\u00d8\u00af\u00d8\u00ae\u00d8\u00a7\u00d9\u0084\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n","canonical_solution":"    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n","test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n"}
{"nl":"arb_Arab","prompt":"\ndef by_length(arr):\n    \"\"\"\n    \u00d9\u0085\u00d8\u00b9 \u00d8\u00a5\u00d8\u00b9\u00d8\u00b7\u00d8\u00a7\u00d8\u00a1 \u00d8\u00b5\u00d9\u0081 \u00d9\u0085\u00d9\u0086 \u00d8\u00a7\u00d9\u0084\u00d8\u00a3\u00d8\u00b9\u00d8\u00af\u00d8\u00a7\u00d8\u00af \u00d8\u00a7\u00d9\u0084\u00d8\u00b5\u00d8\u00ad\u00d9\u008a\u00d8\u00ad\u00d8\u00a9\u00d8\u008c \u00d9\u0082\u00d9\u0085 \u00d8\u00a8\u00d8\u00aa\u00d8\u00b5\u00d9\u0086\u00d9\u008a\u00d9\u0081 \u00d8\u00a7\u00d9\u0084\u00d8\u00a3\u00d8\u00b9\u00d8\u00af\u00d8\u00a7\u00d8\u00af \u00d8\u00a7\u00d9\u0084\u00d8\u00b5\u00d8\u00ad\u00d9\u008a\u00d8\u00ad\u00d8\u00a9 \u00d8\u00a7\u00d9\u0084\u00d8\u00aa\u00d9\u008a \u00d8\u00aa\u00d8\u00aa\u00d8\u00b1\u00d8\u00a7\u00d9\u0088\u00d8\u00ad \u00d8\u00a8\u00d9\u008a\u00d9\u0086 1 \u00d9\u0088 9\u00d8\u008c \u00d9\u0088\u00d8\u00b9\u00d9\u0083\u00d8\u00b3 \u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d8\u00b5\u00d9\u0081\u00d9\u0088\u00d9\u0081\u00d8\u00a9 \u00d8\u00a7\u00d9\u0084\u00d9\u0086\u00d8\u00a7\u00d8\u00aa\u00d8\u00ac\u00d8\u00a9\u00d8\u008c \u00d8\u00ab\u00d9\u0085 \u00d8\u00a7\u00d8\u00b3\u00d8\u00aa\u00d8\u00a8\u00d8\u00af\u00d9\u0084 \u00d9\u0083\u00d9\u0084 \u00d8\u00b1\u00d9\u0082\u00d9\u0085 \u00d8\u00a8\u00d8\u00a7\u00d8\u00b3\u00d9\u0085\u00d9\u0087 \u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d9\u0082\u00d8\u00a7\u00d8\u00a8\u00d9\u0084 \u00d9\u0085\u00d9\u0086 \"\u00d9\u0088\u00d8\u00a7\u00d8\u00ad\u00d8\u00af\"\u00d8\u008c \"\u00d8\u00a7\u00d8\u00ab\u00d9\u0086\u00d8\u00a7\u00d9\u0086\"\u00d8\u008c \"\u00d8\u00ab\u00d9\u0084\u00d8\u00a7\u00d8\u00ab\u00d8\u00a9\"\u00d8\u008c \"\u00d8\u00a3\u00d8\u00b1\u00d8\u00a8\u00d8\u00b9\u00d8\u00a9\"\u00d8\u008c \"\u00d8\u00ae\u00d9\u0085\u00d8\u00b3\u00d8\u00a9\"\u00d8\u008c \"\u00d8\u00b3\u00d8\u00aa\u00d8\u00a9\"\u00d8\u008c \"\u00d8\u00b3\u00d8\u00a8\u00d8\u00b9\u00d8\u00a9\"\u00d8\u008c \"\u00d8\u00ab\u00d9\u0085\u00d8\u00a7\u00d9\u0086\u00d9\u008a\u00d8\u00a9\"\u00d8\u008c \"\u00d8\u00aa\u00d8\u00b3\u00d8\u00b9\u00d8\u00a9\". \u00d8\u00b9\u00d9\u0084\u00d9\u0089 \u00d8\u00b3\u00d8\u00a8\u00d9\u008a\u00d9\u0084 \u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d8\u00ab\u00d8\u00a7\u00d9\u0084: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> \u00d8\u00aa\u00d8\u00b1\u00d8\u00aa\u00d9\u008a\u00d8\u00a8 arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> \u00d8\u00aa\u00d8\u00b1\u00d8\u00aa\u00d9\u008a\u00d8\u00a8 arr \u00d8\u00a7\u00d9\u0084\u00d8\u00b9\u00d9\u0083\u00d8\u00b3\u00d9\u008a -> [8, 5, 4, 3, 2, 2, 1, 1] return [\"\u00d8\u00ab\u00d9\u0085\u00d8\u00a7\u00d9\u0086\u00d9\u008a\u00d8\u00a9\"\u00d8\u008c \"\u00d8\u00a3\u00d8\u00b1\u00d8\u00a8\u00d8\u00b9\u00d8\u00a9\"\u00d8\u008c \"\u00d8\u00ab\u00d9\u0084\u00d8\u00a7\u00d8\u00ab\u00d8\u00a9\"\u00d8\u008c \"\u00d8\u00a7\u00d8\u00ab\u00d9\u0086\u00d8\u00a7\u00d9\u0086\"\u00d8\u008c \"\u00d8\u00a7\u00d8\u00ab\u00d9\u0086\u00d8\u00a7\u00d9\u0086\"\u00d8\u008c \"\u00d8\u00a7\u00d8\u00ab\u00d9\u0086\u00d8\u00a7\u00d9\u0086\"\u00d8\u008c \"\u00d9\u0088\u00d8\u00a7\u00d8\u00ad\u00d8\u00af\"\u00d8\u008c \"\u00d9\u0088\u00d8\u00a7\u00d8\u00ad\u00d8\u00af\"] \u00d8\u00a5\u00d8\u00b0\u00d8\u00a7 \u00d9\u0083\u00d8\u00a7\u00d9\u0086\u00d8\u00aa \u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d8\u00b5\u00d9\u0081\u00d9\u0088\u00d9\u0081\u00d8\u00a9 \u00d9\u0081\u00d8\u00a7\u00d8\u00b1\u00d8\u00ba\u00d8\u00a9\u00d8\u008c \u00d8\u00a5\u00d8\u00b1\u00d8\u00ac\u00d8\u00a7\u00d8\u00b9 \u00d8\u00b5\u00d9\u0081: arr = [] return [] \u00d8\u00a5\u00d8\u00b0\u00d8\u00a7\n    \"\"\"\n","canonical_solution":"    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n"}
{"nl":"arb_Latn","prompt":"\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    hadhihi alwazifa sa-tatakhid qaimat min al'aadad al-sahih. lijami' al-mudakhalat fi alqaimat, sawfa taqom al-wazifa bitarbii' al-mudakhal al-sahih 'iidha kan fa-harisuh 'adad mudaa'af l-3 wa sawfa taqoom bitak'iib al-mudakhal al-sahih 'iidha kan fa-harisuh 'adad mudaa'af l-4 wa lays mudaa'af l-3. alwazifa lan tughayir almudakhalat fi alqaimat alati laysat 'adad mudaa'af l-3 aw 4. sawfa taqoom alwazifa ba'ada dhalik bi'aadat jumlat almudakhalat.\n    \n    amthila:\n    li lst = [1,2,3] yakun almukhraj 6\n    li lst = [] yakun almukhraj 0\n    li lst = [-1,-5,2,-1,-5] yakun almukhraj -126\n    \"\"\"\n","canonical_solution":"    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n"}
{"nl":"ars_Arab","prompt":"\ndef smallest_change(arr):\n    \"\"\"\n    \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d8\u00b1\n    \"\"\"\n","canonical_solution":"    ans = 0\n    for i in range(len(arr) \/\/ 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n"}
{"nl":"ary_Arab","prompt":"\n\ndef fib(n: int):\n    \"\"\"\u00d8\u00a7\u00d8\u00b1\u00d8\u00ac\u00d8\u00b9 \u00d8\u00b1\u00d9\u0082\u00d9\u0085 \u00d9\u0081\u00d9\u008a\u00d8\u00a8\u00d9\u0088\u00d9\u0086\u00d8\u00a7\u00d8\u00aa\u00d8\u00b4\u00d9\u008a \u00d8\u00a7\u00d9\u0084\u00d8\u00aa\u00d8\u00a7\u00d8\u00b3\u00d8\u00b9.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n","canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n","test":"def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n"}
{"nl":"arz_Arab","prompt":"\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels \u00d9\u0087\u00d9\u008a \u00d8\u00af\u00d8\u00a7\u00d9\u0084\u00d8\u00a9 \u00d8\u00a8\u00d8\u00aa\u00d8\u00a3\u00d8\u00ae\u00d8\u00b0 \u00d8\u00a7\u00d9\u0084\u00d8\u00b3\u00d9\u0084\u00d8\u00b3\u00d9\u0084\u00d8\u00a9 \u00d9\u0088\u00d8\u00aa\u00d8\u00b9\u00d9\u008a\u00d8\u00af \u00d8\u00a7\u00d9\u0084\u00d8\u00b3\u00d9\u0084\u00d8\u00b3\u00d9\u0084\u00d8\u00a9 \u00d8\u00a8\u00d8\u00af\u00d9\u0088\u00d9\u0086 \u00d8\u00ad\u00d8\u00b1\u00d9\u0088\u00d9\u0081 \u00d8\u00b9\u00d9\u0084\u00d8\u00a9.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n","canonical_solution":"    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n","test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n"}
{"nl":"asm_Beng","prompt":"\ndef any_int(x, y, z):\n    '''\n    ___ _____ ______ ___ __ _ __ ______ ___\n ___ ______ ____ ___ ____ ____ _______ ______ ____ __, ___ ____ _______ _____ ______ __ ______ true _____ ___ ____\n __ ______ ________ false _____ _____\n    \n    Examples\n    any_int(5, 2, 7) \u00c3\u00a2 -> True\n    \n    any_int(3, 2, 2) \u00c3\u00a2 -> False\n\n    any_int(3, -2, 1) \u00c3\u00a2 -> True\n    \n    any_int(3.6, -2.2, 2) \u00c3\u00a2 -> False\n  \n\n    \n    '''\n","canonical_solution":"    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n"}
{"nl":"ast_Latn","prompt":"\ndef even_odd_count(num):\n    \"\"\"D\u00c3\u00a1u un enteru, devuelve un tuple que tien el n\u00c3\u00bamberu de d\u00c3\u00adxitos par y impar respectivamente.\n    \"\"\"\n","canonical_solution":"    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"awa_Deva","prompt":"from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" \u00e0\u00a4\u00aa\u00e0\u00a5\u0082\u00e0\u00a4\u00b0\u00e0\u00a5\u008d\u00e0\u00a4\u00a3\u00e0\u00a4\u00be\u00e0\u00a4\u0082\u00e0\u00a4\u0095 \u00e0\u00a4\u0095\u00e0\u00a4\u00af \u00e0\u00a4\u00a6\u00e0\u00a5\u0087\u00e0\u00a4\u00b5\u00e0\u00a4\u00b2 \u00e0\u00a4\u00b8\u00e0\u00a5\u0082\u00e0\u00a4\u009a\u00e0\u00a5\u0080 \u00e0\u00a4\u0095\u00e0\u00a4\u00af \u00e0\u00a4\u00b2\u00e0\u00a4\u00bf\u00e0\u00a4\u008f, \u00e0\u00a4\u008f\u00e0\u00a4\u0095 \u00e0\u00a4\u00af\u00e0\u00a5\u008b\u00e0\u00a4\u0097 \u00e0\u00a4\u0085\u00e0\u00a4\u0089\u00e0\u00a4\u00b0 \u00e0\u00a4\u00b8\u00e0\u00a5\u0082\u00e0\u00a4\u009a\u00e0\u00a5\u0080 \u00e0\u00a4\u00ae\u00e0\u00a5\u0087\u00e0\u00a4\u0082 \u00e0\u00a4\u00b8\u00e0\u00a4\u00ac \u00e0\u00a4\u00aa\u00e0\u00a5\u0082\u00e0\u00a4\u00b0\u00e0\u00a5\u008d\u00e0\u00a4\u00a3\u00e0\u00a4\u00be\u00e0\u00a4\u0082\u00e0\u00a4\u0095 \u00e0\u00a4\u0095\u00e0\u00a4\u00af \u00e0\u00a4\u0097\u00e0\u00a5\u0081\u00e0\u00a4\u00a3\u00e0\u00a4\u00a8\u00e0\u00a4\u00ab\u00e0\u00a4\u00b2 \u00e0\u00a4\u00b8\u00e0\u00a5\u0087 \u00e0\u00a4\u00af\u00e0\u00a5\u0081\u00e0\u00a4\u0095\u00e0\u00a5\u008d\u00e0\u00a4\u00a4 \u00e0\u00a4\u008f\u00e0\u00a4\u0095 \u00e0\u00a4\u009f\u00e0\u00a5\u008d\u00e0\u00a4\u00af\u00e0\u00a5\u0082\u00e0\u00a4\u00aa\u00e0\u00a4\u00b2 \u00e0\u00a4\u00b2\u00e0\u00a5\u008c\u00e0\u00a4\u009f\u00e0\u00a4\u00be\u00e0\u00a4\u00af \u00e0\u00a5\u00a4 \u00e0\u00a4\u0096\u00e0\u00a4\u00be\u00e0\u00a4\u00b2\u00e0\u00a5\u0080 \u00e0\u00a4\u00af\u00e0\u00a5\u008b\u00e0\u00a4\u0097 0 \u00e0\u00a4\u0095\u00e0\u00a4\u00af \u00e0\u00a4\u00ac\u00e0\u00a4\u00b0\u00e0\u00a4\u00be\u00e0\u00a4\u00ac\u00e0\u00a4\u00b0 \u00e0\u00a4\u0085\u00e0\u00a4\u0089\u00e0\u00a4\u00b0 \u00e0\u00a4\u0096\u00e0\u00a4\u00be\u00e0\u00a4\u00b2\u00e0\u00a5\u0080 \u00e0\u00a4\u0097\u00e0\u00a5\u0081\u00e0\u00a4\u00a3\u00e0\u00a4\u00a8\u00e0\u00a4\u00ab\u00e0\u00a4\u00b2 1 \u00e0\u00a4\u0095\u00e0\u00a4\u00af \u00e0\u00a4\u00ac\u00e0\u00a4\u00b0\u00e0\u00a4\u00be\u00e0\u00a4\u00ac\u00e0\u00a4\u00b0 \u00e0\u00a4\u00b9\u00e0\u00a5\u008b\u00e0\u00a4\u0087 \u00e0\u00a4\u009a\u00e0\u00a4\u00be\u00e0\u00a4\u00b9\u00e0\u00a5\u0080 \u00e0\u00a5\u00a4\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n","canonical_solution":"    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n","test":"def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n"}
{"nl":"ayr_Latn","prompt":"\ndef prime_length(string):\n    \"\"\"M\u00c3\u00a4 funci\u00c3\u00b3n qillqa\u00c3\u00b1a, ukax m\u00c3\u00a4 cadena ukatx True ukaruw kutt'ayi, ukax m\u00c3\u00a4 n\u00c3\u00bamero primo ukch'akiwa, jan ukax False ukch'akirakiwa. Ejemplos prime_length{\"Hello\") == True prime_length{\"abcdcba\") == True prime_length{\"kittens\") == True prime_length{\"orange\") == False\n    \"\"\"\n","canonical_solution":"    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n"}
{"nl":"azb_Arab","prompt":"\ndef pluck(arr):\n    \"\"\"\n    \"\u00d8\u00a8\u00db\u008c\u00d8\u00b1 \u00d8\u00a2\u00d8\u00b1\u00d8\u00a7\u00db\u008c\u00d9\u0087 \u00d9\u0086\u00db\u008c\u00d9\u0086 \u00d8\u00a8\u00db\u008c\u00d8\u00b1 \u00d8\u00b4\u00d8\u00a7\u00d8\u00ae\u00d9\u0087 \u00d8\u00b3\u00db\u008c \u00d8\u00a7\u00d9\u0088\u00d9\u0084\u00d8\u00a7\u00d9\u0086 \u00d8\u00a8\u00db\u008c\u00d8\u00b1 \u00d8\u00a2\u00d8\u00ba\u00d8\u00a7\u00d8\u00ac\u00db\u008c\u00d9\u0086 \u00d9\u0085\u00d9\u0086\u00d9\u0081\u00db\u008c \u00d8\u00a7\u00d9\u0088\u00d9\u0084\u00d9\u0085\u00d8\u00a7\u00db\u008c\u00d8\u00a7\u00d9\u0086 \u00d8\u00b3\u00d8\u00a7\u00db\u008c\u00db\u008c \u00da\u00af\u00d8\u00b1\u00d9\u0087 \u00da\u00a9\u00d9\u0084\u00d8\u00b1\u00db\u008c\u00d9\u0086 \u00d8\u00a7\u00d9\u0088\u00d9\u0084\u00d9\u0085\u00d8\u00a7\u00d8\u00b3\u00db\u008c \u00d8\u00a7\u00d9\u0088\u00da\u0086\u00d9\u0088\u00d9\u0086 \u00d9\u0088\u00d8\u00b8\u00db\u008c\u00d9\u0081\u00d9\u0087 \u00d8\u00b3\u00db\u008c \u00da\u00af\u00d8\u00b1\u00d9\u0087 \u00da\u00a9\u00d9\u0084\u00d8\u00b1\u00db\u008c\u00d9\u0086 \u00d8\u00a8\u00db\u008c\u00d8\u00b1\u00db\u008c \u00d8\u00b3\u00db\u008c\u00d9\u0086\u00db\u008c \u00d8\u00a2\u00d9\u0084\u00db\u008c\u00d8\u00a8 \u00da\u00af\u00d8\u00a6\u00d8\u00b1\u00db\u008c \u00d9\u0082\u00d8\u00a7\u00db\u008c\u00d8\u00aa\u00d8\u00a7\u00d8\u00b1\u00d9\u0085\u00d8\u00a7\u00d9\u0082\u00d8\u00af\u00db\u008c\u00d8\u00b1. \u00d8\u00a2\u00d9\u0084\u00db\u008c\u00d8\u00a8 \u00da\u00af\u00d8\u00a6\u00d8\u00b1\u00db\u008c \u00d9\u0082\u00d8\u00a7\u00db\u008c\u00d8\u00aa\u00d8\u00a7\u00d8\u00b1\u00db\u008c\u00d9\u0084\u00d8\u00a7\u00d9\u0086 \u00da\u00af\u00d8\u00b1\u00d9\u0087 \u00da\u00a9\u00d9\u0084\u00d8\u00b1 \u00d8\u00a7\u00d9\u0086 \u00da\u00a9\u00db\u008c\u00da\u0086\u00db\u008c\u00da\u00a9 \u00d8\u00ac\u00d9\u0088\u00d9\u0085\u00d9\u0084\u00d9\u0087 \u00d9\u0082\u00d8\u00af\u00d8\u00b1\u00d9\u0084\u00db\u008c \u00da\u00af\u00d8\u00b1\u00d9\u0087 \u00da\u00a9 \u00d8\u00a7\u00d9\u0088\u00d9\u0084\u00d9\u0085\u00d8\u00a7\u00d9\u0084\u00db\u008c\u00d8\u00af\u00db\u008c\u00d8\u00b1. \u00d8\u00a7\u00da\u00af\u00d8\u00b1 \u00da\u00a9\u00db\u008c\u00da\u0086\u00db\u008c\u00da\u00a9 \u00d8\u00ac\u00d9\u0088\u00d9\u0085\u00d9\u0084\u00d9\u0087 \u00d9\u0082\u00d8\u00af\u00d8\u00b1\u00d9\u0084\u00db\u008c \u00d8\u00a8\u00db\u008c\u00d8\u00b1 \u00da\u0086\u00d9\u0088\u00d8\u00ae \u00da\u00af\u00d8\u00b1\u00d9\u0087 \u00da\u00a9\u00d9\u0084\u00d8\u00b1 \u00d8\u00aa\u00d8\u00a7\u00d9\u00be\u00db\u008c\u00d9\u0084\u00d8\u00b3\u00d8\u00a7 \u00d8\u00a7\u00d9\u0086 \u00da\u00a9\u00db\u008c\u00da\u0086\u00db\u008c\u00da\u00a9 \u00d8\u00a7\u00db\u008c\u00d9\u0086\u00d8\u00af\u00da\u00a9\u00d8\u00b3 \u00d8\u00a7\u00d9\u0088\u00d9\u0084\u00d8\u00a7\u00d9\u0086 \u00da\u00af\u00d8\u00b1\u00d9\u0087 \u00da\u00a9\u00d9\u0084\u00d8\u00b1\u00db\u008c\u00d9\u0086 \u00d9\u0082\u00d8\u00a7\u00db\u008c\u00d8\u00aa\u00d8\u00a7\u00d8\u00b1\u00db\u008c\u00d9\u0084\u00d9\u0085\u00d8\u00a7\u00d9\u0084\u00db\u008c\u00d8\u00af\u00db\u008c\u00d8\u00b1. \u00d8\u00a2\u00d9\u0084\u00db\u008c\u00d8\u00a8 \u00da\u00af\u00d8\u00a6\u00d8\u00b1\u00db\u008c \u00d9\u0082\u00d8\u00a7\u00db\u008c\u00d8\u00aa\u00d8\u00a7\u00d8\u00b1\u00db\u008c\u00d9\u0084\u00d8\u00a7\u00d9\u0086 \u00da\u00af\u00d8\u00b1\u00d9\u0087 \u00da\u00a9\u00d9\u0084\u00d8\u00b1 \u00d8\u00a8\u00db\u008c\u00d8\u00b1 \u00d9\u0084\u00db\u008c\u00d8\u00b3\u00d8\u00aa\u00d8\u00af\u00d9\u0087\u00d8\u008c [smallest_value\u00d8\u008c its index]\u00d8\u008c \u00d8\u00a7\u00da\u00af\u00d8\u00b1 \u00d8\u00ac\u00d9\u0088\u00d9\u0085\u00d9\u0084\u00d9\u0087 \u00d9\u0082\u00d8\u00af\u00d8\u00b1\u00d9\u0084\u00d8\u00b1\u00db\u008c \u00db\u008c\u00d9\u0088\u00d8\u00ae\u00d8\u00b3\u00d8\u00a7 \u00d9\u0088 \u00db\u008c\u00d8\u00a7 \u00d9\u0088\u00d8\u00a6\u00d8\u00b1\u00db\u008c\u00d9\u0084\u00d9\u0086 \u00d8\u00a2\u00d8\u00b1\u00d8\u00a7\u00db\u008c\u00d9\u0087 \u00d8\u00a8\u00d9\u0088\u00d8\u00b4 \u00d8\u00a7\u00d9\u0088\u00d9\u0084\u00d8\u00b3\u00d8\u00a7\u00d8\u008c \u00d9\u0082\u00d8\u00a7\u00db\u008c\u00d8\u00aa\u00d8\u00a7\u00d8\u00b1\u00db\u008c\u00d9\u0084 []. \u00d9\u0085\u00d8\u00ab\u00d8\u00a7\u00d9\u0084: 1: \u00d8\u00a2\u00d8\u00ae\u00db\u008c\u00d8\u00aa: [4,2,3] \u00da\u0086\u00db\u008c\u00d8\u00ae\u00db\u008c\u00d8\u00b4: [2, 1] \u00d8\u00a7\u00db\u008c\u00d8\u00b6\u00d8\u00a7\u00d8\u00ad: 2\n    \"\"\"\n","canonical_solution":"    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n"}
{"nl":"azj_Latn","prompt":"\n\ndef truncate_number(number: float) -> float:\n    \"\"\" M\u00c3\u00bcsb\u00c9\u0099t bir \u00c3\u00bcz\u00c9\u0099n n\u00c3\u00b6qt\u00c9\u0099 n\u00c3\u00b6mr\u00c9\u0099si verildikd\u00c9\u0099, tam \u00c9\u0099d\u00c9\u0099d hiss\u00c9\u0099sin\u00c9\u0099 (\u00c9\u0099ld\u00c9\u0099 olunan saydan ki\u00c3\u00a7ik olan \u00c9\u0099n b\u00c3\u00b6y\u00c3\u00bck tam \u00c9\u0099d\u00c9\u0099d) v\u00c9\u0099 onluqlara (qalan hiss\u00c9\u0099 h\u00c9\u0099mi\u00c5\u009f\u00c9\u0099 1-d\u00c9\u0099n ki\u00c3\u00a7ikdir) par\u00c3\u00a7alana bil\u00c9\u0099r.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n","canonical_solution":"    return number % 1.0\n","test":"def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n"}
{"nl":"bak_Cyrl","prompt":"\ndef unique_digits(x):\n    \"\"\"\u00d0\u009f\u00d0\u00be\u00d0\u00b7\u00d0\u00b8\u00d1\u0082\u00d0\u00b8\u00d0\u00b2 \u00d0\u00b1\u00d3\u00a9\u00d1\u0082\u00d3\u00a9\u00d0\u00bd \u00d2\u00bb\u00d0\u00b0\u00d0\u00bd\u00d0\u00b4\u00d0\u00b0\u00d1\u0080 \u00d0\u00b8\u00d1\u0081\u00d0\u00b5\u00d0\u00bc\u00d0\u00bb\u00d0\u00b5\u00d0\u00b3\u00d0\u00b5\u00d0\u00bd\u00d3\u0099\u00d0\u00bd x. \u00d0\u00b1\u00d3\u00a9\u00d1\u0082\u00d3\u0099 \u00d1\u008d\u00d0\u00bb\u00d0\u00b5\u00d0\u00bc\u00d0\u00b5\u00d0\u00bd\u00d1\u0082\u00d1\u0082\u00d0\u00b0\u00d1\u0080\u00d2\u0099\u00d1\u008b\u00d2\u00a3 \u00d0\u00bf\u00d0\u00b0\u00d1\u0080 \u00d1\u0086\u00d0\u00b8\u00d1\u0084\u00d1\u0080\u00d2\u0099\u00d0\u00b0\u00d1\u0080\u00d1\u008b \u00d0\u00b1\u00d1\u0083\u00d0\u00bb\u00d0\u00bc\u00d0\u00b0\u00d2\u0093\u00d0\u00b0\u00d0\u00bd \u00d1\u0082\u00d3\u0099\u00d1\u0080\u00d1\u0082\u00d0\u00b8\u00d0\u00bf\u00d0\u00ba\u00d3\u0099 \u00d2\u00bb\u00d0\u00b0\u00d0\u00bb\u00d1\u008b\u00d0\u00bd\u00d2\u0093\u00d0\u00b0\u00d0\u00bd \u00d0\u00b8\u00d1\u0081\u00d0\u00b5\u00d0\u00bc\u00d0\u00bb\u00d0\u00b5\u00d0\u00b3\u00d0\u00b5\u00d0\u00bd \u00d0\u00ba\u00d0\u00b8\u00d1\u0080\u00d0\u00b5 \u00d2\u00a1\u00d0\u00b0\u00d0\u00b9\u00d1\u0082\u00d0\u00b0\u00d1\u0080\u00d1\u008b\u00d1\u0083. \u00d0\u0098\u00d2\u00ab\u00d0\u00ba\u00d3\u0099\u00d1\u0080\u00d0\u00bc\u00d3\u0099: \u00d0\u009a\u00d0\u00b8\u00d1\u0080\u00d0\u00b5 \u00d2\u00a1\u00d0\u00b0\u00d0\u00b9\u00d1\u0082\u00d0\u00b0\u00d1\u0080\u00d1\u008b\u00d0\u00bb\u00d2\u0093\u00d0\u00b0\u00d0\u00bd \u00d0\u00b8\u00d1\u0081\u00d0\u00b5\u00d0\u00bc\u00d0\u00bb\u00d0\u00b5\u00d0\u00ba \u00d0\u00b0\u00d1\u0080\u00d1\u0082\u00d0\u00b0 \u00d0\u00b1\u00d0\u00b0\u00d1\u0080\u00d1\u008b\u00d1\u0083\u00d1\u0081\u00d1\u008b \u00d1\u0082\u00d3\u0099\u00d1\u0080\u00d1\u0082\u00d0\u00b8\u00d0\u00bf\u00d1\u0082\u00d3\u0099 \u00d1\u0082\u00d3\u0099\u00d1\u0080\u00d1\u0082\u00d0\u00b8\u00d0\u00bf\u00d0\u00ba\u00d3\u0099 \u00d2\u00bb\u00d0\u00b0\u00d0\u00bb\u00d1\u008b\u00d1\u0080\u00d2\u0093\u00d0\u00b0 \u00d1\u0082\u00d0\u00b5\u00d0\u00b9\u00d0\u00b5\u00d1\u0088. \u00d0\u009c\u00d3\u0099\u00d2\u00ab\u00d3\u0099\u00d0\u00bb\u00d3\u0099\u00d0\u00bd:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n","canonical_solution":"    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"bam_Latn","prompt":"\ndef is_happy(s):\n    \"\"\"Aw b\u00c9\u009b n'a s\u00c9\u0094r\u00c9\u0094 n'a janya ye 3 ye ani n'a s\u00c9\u009bb\u00c9\u009bncogo ye kelen ye. Misali: is_happy (a) => False is_happy (a) => False is_happy (bcd) => True is_happy (a) => False is_happy (adb) => True is_happy (xyy) => False\n    \"\"\"\n","canonical_solution":"    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n"}
{"nl":"ban_Latn","prompt":"\n\ndef fib(n: int):\n    \"\"\"Mawalikan wilangan Fibonacci san\u00c3\u00a9 kaping-n.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n","canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n","test":"def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n"}
{"nl":"bel_Cyrl","prompt":"from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" \u00d0\u0097 \u00d0\u00bf\u00d0\u00b0\u00d0\u00b4\u00d0\u00b0\u00d0\u00b4\u00d0\u00b7\u00d0\u00b5\u00d0\u00bd\u00d0\u00b0\u00d0\u00b3\u00d0\u00b0 \u00d1\u0081\u00d0\u00bf\u00d1\u0096\u00d1\u0081\u00d1\u0083 \u00d0\u00bb\u00d1\u0096\u00d1\u0087\u00d0\u00b1\u00d0\u00b0\u00d1\u009e (\u00d0\u00bf\u00d0\u00b0 \u00d0\u00b4\u00d0\u00b0\u00d1\u009e\u00d0\u00b6\u00d1\u008b\u00d0\u00bd\u00d1\u0096 \u00d0\u00bd\u00d0\u00b5 \u00d0\u00bc\u00d0\u00b5\u00d0\u00bd\u00d1\u0088 \u00d0\u00b7\u00d0\u00b0 \u00d0\u00b4\u00d0\u00b2\u00d0\u00b0) \u00d0\u00b2\u00d1\u008b\u00d0\u00b1\u00d1\u0080\u00d0\u00b0\u00d1\u0086\u00d1\u008c \u00d1\u0096 \u00d0\u00b2\u00d1\u008f\u00d1\u0080\u00d0\u00bd\u00d1\u0083\u00d1\u0086\u00d1\u008c \u00d0\u00b4\u00d0\u00b2\u00d0\u00b0, \u00d1\u008f\u00d0\u00ba\u00d1\u0096\u00d1\u008f \u00d0\u00bd\u00d0\u00b0\u00d0\u00b9\u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d1\u008c\u00d1\u0088 \u00d0\u00b1\u00d0\u00bb\u00d1\u0096\u00d0\u00b7\u00d0\u00ba\u00d1\u0096\u00d1\u008f \u00d0\u00b0\u00d0\u00b4\u00d0\u00b7\u00d1\u0096\u00d0\u00bd \u00d0\u00b4\u00d0\u00b0 \u00d0\u00b0\u00d0\u00b4\u00d0\u00bd\u00d0\u00b0\u00d0\u00b3\u00d0\u00be \u00d1\u0096 \u00d0\u00b2\u00d1\u008f\u00d1\u0080\u00d0\u00bd\u00d1\u0083\u00d1\u0086\u00d1\u008c \u00d1\u0096\u00d1\u0085 \u00d1\u0083 \u00d0\u00bf\u00d0\u00b0\u00d1\u0080\u00d0\u00b0\u00d0\u00b4\u00d0\u00ba\u00d1\u0083 (\u00d0\u00bc\u00d0\u00b5\u00d0\u00bd\u00d1\u0088, \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d1\u008c\u00d1\u0088\u00d0\u00b0\u00d0\u00b5).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n","canonical_solution":"    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n","test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n"}
{"nl":"bem_Latn","prompt":"from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Ukusala ifyalinga ifya Python ifyalinga fye ku manambala yonse\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n","canonical_solution":"    return [x for x in values if isinstance(x, int)]\n","test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n"}
{"nl":"ben_Beng","prompt":"from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" \u00e0\u00a6\u00aa\u00e0\u00a7\u0082\u00e0\u00a6\u00b0\u00e0\u00a7\u008d\u00e0\u00a6\u00a3\u00e0\u00a6\u00b8\u00e0\u00a6\u0082\u00e0\u00a6\u0096\u00e0\u00a7\u008d\u00e0\u00a6\u00af\u00e0\u00a6\u00be\u00e0\u00a6\u00b0 \u00e0\u00a6\u008f\u00e0\u00a6\u0095\u00e0\u00a6\u009f\u00e0\u00a6\u00bf \u00e0\u00a6\u00a4\u00e0\u00a6\u00be\u00e0\u00a6\u00b2\u00e0\u00a6\u00bf\u00e0\u00a6\u0095\u00e0\u00a6\u00be \u00e0\u00a6\u00a5\u00e0\u00a7\u0087\u00e0\u00a6\u0095\u00e0\u00a7\u0087, \u00e0\u00a6\u0095\u00e0\u00a7\u008d\u00e0\u00a6\u00b0\u00e0\u00a6\u00ae\u00e0\u00a7\u0087\u00e0\u00a6\u00b0 \u00e0\u00a6\u008f\u00e0\u00a6\u0095\u00e0\u00a6\u009f\u00e0\u00a6\u00bf \u00e0\u00a6\u00a8\u00e0\u00a6\u00bf\u00e0\u00a6\u00b0\u00e0\u00a7\u008d\u00e0\u00a6\u00a6\u00e0\u00a6\u00bf\u00e0\u00a6\u00b7\u00e0\u00a7\u008d\u00e0\u00a6\u009f \u00e0\u00a6\u00ae\u00e0\u00a7\u0081\u00e0\u00a6\u00b9\u00e0\u00a7\u0081\u00e0\u00a6\u00b0\u00e0\u00a7\u008d\u00e0\u00a6\u00a4 \u00e0\u00a6\u00aa\u00e0\u00a6\u00b0\u00e0\u00a7\u008d\u00e0\u00a6\u00af\u00e0\u00a6\u00a8\u00e0\u00a7\u008d\u00e0\u00a6\u00a4 \u00e0\u00a6\u00aa\u00e0\u00a6\u00be\u00e0\u00a6\u0093\u00e0\u00a6\u00af\u00e0\u00a6\u00bc\u00e0\u00a6\u00be \u00e0\u00a6\u00b0\u00e0\u00a7\u008b\u00e0\u00a6\u00b2\u00e0\u00a6\u00bf\u00e0\u00a6\u0082 \u00e0\u00a6\u00b8\u00e0\u00a6\u00b0\u00e0\u00a7\u008d\u00e0\u00a6\u00ac\u00e0\u00a7\u008b\u00e0\u00a6\u009a\u00e0\u00a7\u008d\u00e0\u00a6\u009a \u00e0\u00a6\u0089\u00e0\u00a6\u00aa\u00e0\u00a6\u00be\u00e0\u00a6\u00a6\u00e0\u00a6\u00be\u00e0\u00a6\u00a8\u00e0\u00a6\u0097\u00e0\u00a7\u0081\u00e0\u00a6\u00b2\u00e0\u00a6\u00bf\u00e0\u00a6\u00b0 \u00e0\u00a6\u008f\u00e0\u00a6\u0095\u00e0\u00a6\u009f\u00e0\u00a6\u00bf \u00e0\u00a6\u00a4\u00e0\u00a6\u00be\u00e0\u00a6\u00b2\u00e0\u00a6\u00bf\u00e0\u00a6\u0095\u00e0\u00a6\u00be \u00e0\u00a6\u00a4\u00e0\u00a7\u0088\u00e0\u00a6\u00b0\u00e0\u00a6\u00bf \u00e0\u00a6\u0095\u00e0\u00a6\u00b0\u00e0\u00a7\u0081\u00e0\u00a6\u00a8\u00e0\u00a5\u00a4\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n","canonical_solution":"    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n","test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n"}
{"nl":"bho_Deva","prompt":"\n\ndef fibfib(n: int):\n    \"\"\"\u00e0\u00a4\u00ab\u00e0\u00a4\u00bf\u00e0\u00a4\u00ac\u00e0\u00a4\u00ab\u00e0\u00a4\u00bf\u00e0\u00a4\u00ac \u00e0\u00a4\u00b8\u00e0\u00a4\u0082\u00e0\u00a4\u0096\u00e0\u00a5\u008d\u00e0\u00a4\u00af\u00e0\u00a4\u00be \u00e0\u00a4\u0095\u00e0\u00a5\u008d\u00e0\u00a4\u00b0\u00e0\u00a4\u00ae \u00e0\u00a4\u008f\u00e0\u00a4\u0097\u00e0\u00a5\u008b \u00e0\u00a4\u0085\u00e0\u00a4\u0087\u00e0\u00a4\u00b8\u00e0\u00a4\u00a8 \u00e0\u00a4\u0095\u00e0\u00a5\u008d\u00e0\u00a4\u00b0\u00e0\u00a4\u00ae \u00e0\u00a4\u00ac\u00e0\u00a4\u00be \u00e0\u00a4\u009c\u00e0\u00a5\u0087 \u00e0\u00a4\u00ab\u00e0\u00a4\u00bf\u00e0\u00a4\u00ac\u00e0\u00a5\u008b\u00e0\u00a4\u00a8\u00e0\u00a5\u0088\u00e0\u00a4\u0095\u00e0\u00a5\u0080 \u00e0\u00a4\u0095\u00e0\u00a5\u008d\u00e0\u00a4\u00b0\u00e0\u00a4\u00ae \u00e0\u00a4\u0095\u00e0\u00a5\u0087 \u00e0\u00a4\u00b8\u00e0\u00a4\u00ae\u00e0\u00a4\u00be\u00e0\u00a4\u00a8 \u00e0\u00a4\u00ac\u00e0\u00a4\u00be \u00e0\u00a4\u009c\u00e0\u00a5\u0087\u00e0\u00a4\u0095\u00e0\u00a4\u00b0 \u00e0\u00a4\u00aa\u00e0\u00a4\u00b0\u00e0\u00a4\u00bf\u00e0\u00a4\u00ad\u00e0\u00a4\u00be\u00e0\u00a4\u00b7\u00e0\u00a4\u00be \u00e0\u00a4\u00a8\u00e0\u00a5\u0080\u00e0\u00a4\u009a\u00e0\u00a5\u0087 \u00e0\u00a4\u00a6\u00e0\u00a4\u00bf\u00e0\u00a4\u00b9\u00e0\u00a4\u00b2 \u00e0\u00a4\u0097\u00e0\u00a4\u0087\u00e0\u00a4\u00b2 \u00e0\u00a4\u00ac\u00e0\u00a4\u00be: \u00e0\u00a4\u00ab\u00e0\u00a4\u00bf\u00e0\u00a4\u00ac\u00e0\u00a4\u00ab\u00e0\u00a4\u00bf\u00e0\u00a4\u00ac (n-1) + \u00e0\u00a4\u00ab\u00e0\u00a4\u00bf\u00e0\u00a4\u00ac\u00e0\u00a4\u00ab\u00e0\u00a4\u00bf\u00e0\u00a4\u00ac (n-2) + \u00e0\u00a4\u00ab\u00e0\u00a4\u00bf\u00e0\u00a4\u00ac\u00e0\u00a4\u00ab\u00e0\u00a4\u00bf\u00e0\u00a4\u00ac (n-3) \u00e0\u00a5\u00a4\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n","canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n","test":"def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n"}
{"nl":"bjn_Arab","prompt":"\ndef solve(N):\n    \"\"\"\u00d8\u00af\u00d9\u008a\u00d8\u00a8\u00d8\u00a7\u00da\u00a0\u00d9\u0088\u00d9\u0086\u00d8\u00a7\u00d9\u0083\u00d9\u0086 \u00d8\u00b3\u00d8\u00a7\u00d8\u00a8\u00d9\u0088\u00d8\u00a1\u00d9\u0087 \u00d8\u00a7\u00d9\u0086\u00d8\u00aa\u00d9\u008a\u00da\u00ac\u00d8\u00b1 \u00da\u00a4\u00d9\u0088\u00d8\u00b3\u00d9\u008a\u00d8\u00aa\u00d9\u008a\u00d9\u0081 N\u00d8\u008c \u00d9\u0085\u00d8\u00a7\u00d9\u0088\u00d9\u0084\u00d8\u00a7\u00d9\u0087 \u00d8\u00b3\u00d9\u0088\u00d9\u0085\u00d8\u00a8\u00da\u00a0\u00d9\u0086 \u00da\u00ac\u00d8\u00b1\u00d9\u0082\u00d9\u0086\u00da\u00bd \u00d8\u00af\u00d8\u00a7\u00d9\u0084\u00d9\u0085 \u00d8\u00a8\u00d9\u008a\u00d9\u0086\u00d9\u008a\u00d8\u00a7\u00d8\u00b1. \u00da\u0086\u00d9\u0088\u00d9\u0086\u00d8\u00aa\u00d9\u0088\u00d9\u0087 \u00d9\u0086 = 1000\u00d8\u008c \u00d8\u00b3\u00d9\u0088\u00d9\u0085\u00d8\u00a8\u00da\u00a0\u00d9\u0086 \u00da\u00ac\u00d8\u00b1\u00d9\u0082\u00d9\u0086 \u00d9\u0087\u00d8\u00a7\u00da\u00bd \u00d8\u00ac\u00d8\u00a7\u00d8\u00af\u00d9\u008a 1 \u00da\u00a4\u00d8\u00b1\u00d9\u0084\u00d9\u0088 \u00d8\u00ac\u00d8\u00a7\u00d8\u00af\u00d9\u008a \"1\". \u00d9\u0086 = 150\u00d8\u008c \u00d8\u00b3\u00d9\u0088\u00d9\u0085\u00d8\u00a8\u00da\u00a0\u00d9\u0086 \u00da\u00ac\u00d8\u00b1\u00d9\u0082\u00d9\u0086 \u00d9\u0087\u00d8\u00a7\u00da\u00bd \u00d8\u00ac\u00d8\u00a7\u00d8\u00af\u00d9\u008a 6 \u00da\u00a4\u00d8\u00b1\u00d9\u0084\u00d9\u0088 \u00d8\u00ac\u00d8\u00a7\u00d8\u00af\u00d9\u008a \"110\". \u00d9\u0086 = 147\u00d8\u008c \u00d8\u00b3\u00d9\u0088\u00d9\u0085\u00d8\u00a8\u00da\u00a0\u00d9\u0086 \u00da\u00ac\u00d8\u00b1\u00d9\u0082\u00d9\u0086 \u00d9\u0087\u00d8\u00a7\u00da\u00bd \u00d8\u00ac\u00d8\u00a7\u00d8\u00af\u00d9\u008a 12 \u00da\u00a4\u00d8\u00b1\u00d9\u0084\u00d9\u0088 \u00d8\u00ac\u00d8\u00a7\u00d8\u00af\u00d9\u008a \"1100\". \u00da\u00a4\u00d8\u00a7\u00d8\u00b1\u00d8\u00a7\u00d8\u00a8\u00d9\u008a\u00d9\u0084: @N \u00d8\u00a7\u00d9\u0086\u00d8\u00aa\u00d9\u008a\u00da\u00ac\u00d8\u00b1 \u00d9\u0083\u00d9\u0088\u00d9\u0086\u00d8\u00b3\u00d8\u00aa\u00d8\u00b1\u00d9\u008a\u00d9\u0083\u00d8\u00aa\u00d8\u00b3: 0 \u00c3\u00a2\u00e2\u0080\u00b0\u00c2\u00a4 \u00d9\u0086 \u00c3\u00a2\u00e2\u0080\u00b0\u00c2\u00a4 10000. \u00da\u00a4\u00d8\u00b1\u00d9\u0084\u00d9\u0088 \u00d8\u00ac\u00d8\u00a7\u00d8\u00af\u00d9\u008a: \u00d8\u00b3\u00d8\u00a7\u00d8\u00a8\u00d9\u0088\u00d8\u00a1\u00d9\u0087 \u00d8\u00b3\u00d8\u00a7\u00d8\u00a1\u00d9\u0088\u00d8\u00b1\u00da\u00a0 \u00d8\u00a7\u00d8\u00b1\u00d9\u0082 \u00d8\u00a8\u00d8\u00a7\u00d9\u008a\u00d9\u0086\u00d8\u00b1\u00d9\u008a\n    \"\"\"\n","canonical_solution":"    return bin(sum(int(i) for i in str(N)))[2:]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n"}
{"nl":"bjn_Latn","prompt":"\ndef is_nested(string):\n    '''\n    Buat fungsi yang menerima string sebagai input yang hanya mengandung kurung siku.\nFungsi harus mengembalikan True jika dan hanya jika ada subsekuen kurung yang valid di mana setidaknya satu kurung dalam subsekuen tersebut bersarang.\n\n    is_nested('[[]]') \u00c3\u00a2 -> True\n    is_nested('[]]]]]]][[[[[]') \u00c3\u00a2 -> False\n    is_nested('[][]') \u00c3\u00a2 -> False\n    is_nested('[]') \u00c3\u00a2 -> False\n    is_nested('[[][]]') \u00c3\u00a2 -> True\n    is_nested('[[]][[') \u00c3\u00a2 -> True\n    '''\n","canonical_solution":"    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n"}
{"nl":"bod_Tibt","prompt":"\ndef minSubArraySum(nums):\n    \"\"\"\n    \u00e0\u00bd\u00a8\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u0082\u00e0\u00be\u00b2\u00e0\u00bd\u0084\u00e0\u00bd\u00a6\u00e0\u00bc\u008b\u00e0\u00bd\u00a7\u00e0\u00be\u00b2\u00e0\u00bd\u00b2\u00e0\u00bd\u00a3\u00e0\u00bc\u008b\u00e0\u00bd\u0094\u00e0\u00bd\u00bc\u00e0\u00bc\u008b n \u00e0\u00bd\u0082\u00e0\u00bd\u00b2\u00e0\u00bc\u008b\u00e0\u00bd\u00a2\u00e0\u00bd\u00b2\u00e0\u00bd\u0098\u00e0\u00bc\u008b\u00e0\u00bd\u0094\u00e0\u00bc\u008b\u00e0\u00bd\u0090\u00e0\u00bd\u00bc\u00e0\u00bd\u0096\u00e0\u00bc\u008b\u00e0\u00bd\u0093\u00e0\u00bc\u008d \u00e0\u00bd\u00a8\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u0082\u00e0\u00be\u00b2\u00e0\u00bd\u0084\u00e0\u00bd\u00a6\u00e0\u00bc\u008b\u00e0\u00bd\u0082\u00e0\u00be\u00b1\u00e0\u00bd\u00b2\u00e0\u00bc\u008b\u00e0\u00bd\u00a2\u00e0\u00bd\u00b2\u00e0\u00bd\u0098\u00e0\u00bc\u008b\u00e0\u00bd\u0094\u00e0\u00bc\u008b\u00e0\u00bd\u0082\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u00a2\u00e0\u00bd\u00b4\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u0082\u00e0\u00be\u00b1\u00e0\u00bd\u00b2\u00e0\u00bc\u008b\u00e0\u00bd\u0082\u00e0\u00be\u00b2\u00e0\u00bd\u0084\u00e0\u00bd\u00a6\u00e0\u00bc\u008b\u00e0\u00bd\u00a6\u00e0\u00bd\u00b4\u00e0\u00bc\u008b\u00e0\u00bd\u0098\u00e0\u00bd\u00ba\u00e0\u00bd\u0091\u00e0\u00bc\u008b\u00e0\u00bd\u0094\u00e0\u00bd\u00a0\u00e0\u00bd\u00b2\u00e0\u00bc\u008b\u00e0\u00bd\u00a2\u00e0\u00bd\u00b2\u00e0\u00bd\u0098\u00e0\u00bc\u008b\u00e0\u00bd\u0094\u00e0\u00bc\u008b\u00e0\u00bd\u0086\u00e0\u00bd\u00b4\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u00a4\u00e0\u00bd\u00bc\u00e0\u00bd\u00a6\u00e0\u00bc\u008b\u00e0\u00bd\u00a0\u00e0\u00bd\u009a\u00e0\u00bd\u00bc\u00e0\u00bd\u00a3\u00e0\u00bc\u008b\u00e0\u00bd\u0091\u00e0\u00bd\u0082\u00e0\u00bd\u00bc\u00e0\u00bd\u00a6\u00e0\u00bc\u008d \u00e0\u00bd\u0091\u00e0\u00bd\u0094\u00e0\u00bd\u00ba\u00e0\u00bc\u008b\u00e0\u00bd\u0082\u00e0\u00bd\u009e\u00e0\u00bd\u00b2\u00e0\u00bc\u008b minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6\n    \"\"\"\n","canonical_solution":"    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n"}
{"nl":"bos_Latn","prompt":"from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Iz liste niza, vrati najdu\u00c5\u00bei. Vrati prvi u slu\u00c4\u008daju vi\u00c5\u00a1e niza iste du\u00c5\u00beine. Vrati Niti jedan u slu\u00c4\u008daju ulazne liste je prazan.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n","canonical_solution":"    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n","test":"def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n"}
{"nl":"bug_Latn","prompt":"\n\ndef fizz_buzz(n: int):\n    \"\"\"Mappalisui siare wettuna digit 7 cumpa ri bilangang makkalepu lebbi cedde pole n iya dibage sibawa 11 iyarega 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n","canonical_solution":"    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n","test":"def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n"}
{"nl":"bul_Cyrl","prompt":"from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" \u00d0\u0092\u00d0\u00bc\u00d1\u008a\u00d0\u00ba\u00d0\u00bd\u00d0\u00b5\u00d1\u0082\u00d0\u00b5 \u00d1\u0087\u00d0\u00b8\u00d1\u0081\u00d0\u00bb\u00d0\u00be \"\u00d0\u00b4\u00d0\u00b5\u00d0\u00bb\u00d0\u00b8\u00d0\u00bc\u00d0\u00b5\u00d1\u0082\u00d1\u008a\u00d1\u0080\" \u00d0\u00bc\u00d0\u00b5\u00d0\u00b6\u00d0\u00b4\u00d1\u0083 \u00d0\u00b2\u00d1\u0081\u00d0\u00b5\u00d0\u00ba\u00d0\u00b8 \u00d0\u00b4\u00d0\u00b2\u00d0\u00b0 \u00d0\u00bf\u00d0\u00be\u00d1\u0081\u00d0\u00bb\u00d0\u00b5\u00d0\u00b4\u00d0\u00be\u00d0\u00b2\u00d0\u00b0\u00d1\u0082\u00d0\u00b5\u00d0\u00bb\u00d0\u00bd\u00d0\u00b8 \u00d0\u00b5\u00d0\u00bb\u00d0\u00b5\u00d0\u00bc\u00d0\u00b5\u00d0\u00bd\u00d1\u0082\u00d0\u00b0 \u00d0\u00be\u00d1\u0082 \u00d1\u0081\u00d0\u00bf\u00d0\u00b8\u00d1\u0081\u00d1\u008a\u00d0\u00ba\u00d0\u00b0 \u00d0\u00bd\u00d0\u00b0 \u00d0\u00b2\u00d1\u0085\u00d0\u00be\u00d0\u00b4\u00d1\u008f\u00d1\u0089\u00d0\u00b8\u00d1\u0082\u00d0\u00b5 \u00d0\u00b4\u00d0\u00b0\u00d0\u00bd\u00d0\u00bd\u00d0\u00b8 \u00e2\u0088\u0080\u00d1\u0086\u00d0\u00b8\u00d1\u0084\u00d1\u0080\u00d0\u00b8\"\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n","canonical_solution":"    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n","test":"def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n"}
{"nl":"cat_Latn","prompt":"\n\ndef largest_prime_factor(n: int):\n    \"\"\"Retorna el factor primer m\u00c3\u00a9s gran de n. Suposem que n > 1 i no \u00c3\u00a9s un nombre primer.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n","canonical_solution":"    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n","test":"def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n"}
{"nl":"ceb_Latn","prompt":"\ndef specialFilter(nums):\n    \"\"\"Isulat ang usa ka function nga nagkuha sa usa ka array sa mga numero ingon nga input ug mobalik sa gidaghanon sa mga elemento sa array nga mas dako kay sa 10 ug ang duha sa unang ug sa katapusan nga mga numero sa usa ka numero mao ang mga ganon (1, 3, 5, 7, 9). Pananglitan: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n","canonical_solution":"    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n"}
{"nl":"ces_Latn","prompt":"\ndef minPath(grid, k):\n    \"\"\"\n    V p\u00c5\u0099\u00c3\u00adpad\u00c4\u009b m\u00c5\u0099\u00c3\u00ad\u00c5\u00beky s N \u00c5\u0099\u00c3\u00a1dky a N sloupci (N >= 2) a s kladn\u00c3\u00bdm celkem k obsahuje ka\u00c5\u00bed\u00c3\u00a1 bu\u00c5\u0088ka m\u00c5\u0099\u00c3\u00ad\u00c5\u00beky hodnotu. Ka\u00c5\u00bed\u00c3\u00a1 cel\u00c3\u00a1 hodnota v rozsahu [1, N * N] se objev\u00c3\u00ad p\u00c5\u0099esn\u00c4\u009b jednou v bu\u00c5\u0088k\u00c3\u00a1ch m\u00c5\u0099\u00c3\u00ad\u00c5\u00beky. Mus\u00c3\u00adte naj\u00c3\u00adt minim\u00c3\u00a1ln\u00c3\u00ad cestu d\u00c3\u00a9lky k v m\u00c5\u0099\u00c3\u00ad\u00c5\u00bece. M\u00c5\u00af\u00c5\u00beete za\u00c4\u008d\u00c3\u00adt z jak\u00c3\u00a9koli bu\u00c5\u0088ky a v ka\u00c5\u00bed\u00c3\u00a9m kroku se m\u00c5\u00af\u00c5\u00beete p\u00c5\u0099esunout do kter\u00c3\u00a9hokoli sousedn\u00c3\u00adho bu\u00c5\u0088ky, jin\u00c3\u00bdmi slovy, m\u00c5\u00af\u00c5\u00beete j\u00c3\u00adt do bu\u00c5\u0088ky, kter\u00c3\u00a9 sd\u00c3\u00adlej\u00c3\u00ad okraj s va\u00c5\u00a1\u00c3\u00ad sou\u00c4\u008dasnou bu\u00c5\u0088kou. Vezm\u00c4\u009bte pros\u00c3\u00adm na v\u00c4\u009bdom\u00c3\u00ad, \u00c5\u00bee cesta d\u00c3\u00a9lky k znamen\u00c3\u00a1 n\u00c3\u00a1v\u00c5\u00a1t\u00c4\u009bvu p\u00c5\u0099esn\u00c4\u009b k bu\u00c5\u0088k\u00c3\u00a1m (ne nutn\u00c4\u009b odli\u00c5\u00a1n\u00c3\u00bdch). NEMU\u00c5\u00bdETE j\u00c3\u00adt mimo m\u00c5\u0099\u00c3\u00ad\u00c5\u00beku. Cesta A (d\u00c3\u00a9lka k) je pova\u00c5\u00beov\u00c3\u00a1na za men\u00c5\u00a1\u00c3\u00ad\n    \"\"\"\n","canonical_solution":"    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n","test":"def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n"}
{"nl":"cjk_Latn","prompt":"\ndef search(lst):\n    '''\n  Guaha un lista ti mamf\u008ctto nu positibu na entero. Ayuda i entero i mas dangkulu ke zero, ya guaha mas pat parehu na numiru gi i lista. I frecuencia ni un entero i numiru di i tiempo ni gaige gi i lista. Si taya\u00d5 m\u008cs-m\u008c\u00d5pos na entero, ayuda -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n","canonical_solution":"    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n","test":"def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n"}
{"nl":"ckb_Arab","prompt":"\ndef even_odd_palindrome(n):\n    \"\"\"\n    \u00d8\u00a8\u00db\u0095 \u00d8\u00af\u00d8\u00a7\u00d9\u0086\u00d8\u00a7\u00d9\u0086\u00db\u008c \u00da\u0098\u00d9\u0085\u00d8\u00a7\u00d8\u00b1\u00db\u0095\u00db\u008c\u00db\u0095\u00da\u00a9\u00db\u008c \u00d9\u00be\u00db\u0086\u00d8\u00b2\u00db\u0095\u00d8\u00aa\u00db\u008c\u00da\u00a4 n\u00d8\u008c \u00da\u00af\u00db\u0095\u00da\u0095\u00d8\u00a7\u00d9\u0086\u00d8\u00af\u00d9\u0086\u00db\u0095\u00d9\u0088\u00db\u0095\u00db\u008c \u00d8\u00aa\u00d9\u0088\u00d9\u00be\u00d9\u0084\u00db\u008e\u00da\u00a9 \u00da\u00a9\u00db\u0095 \u00da\u0098\u00d9\u0085\u00d8\u00a7\u00d8\u00b1\u00db\u0095\u00db\u008c palindromes \u00db\u008c \u00d8\u00aa\u00db\u0095\u00d9\u0088\u00d8\u00a7\u00d9\u0088 \u00d9\u0088 \u00d8\u00aa\u00db\u0095\u00d9\u0088\u00d8\u00a7\u00d9\u0088 \u00d9\u0088 \u00d8\u00aa\u00db\u0095\u00d9\u0088\u00d8\u00a7\u00d9\u0088 \u00d9\u0084\u00db\u0095 \u00d9\u0086\u00db\u008e\u00d9\u0088 \u00d9\u0085\u00db\u0095\u00d9\u0088\u00d8\u00af\u00d8\u00a7\u00d8\u00af\u00d8\u00a7 \u00d8\u00a8\u00db\u008e\u00d8\u00aa ((\u00d9\u00a1\u00d8\u008c \u00d9\u0086) \u00d8\u008c \u00d8\u00a8\u00db\u0095 \u00d8\u00b4\u00d9\u0085\u00d9\u0088\u00d9\u0084. \u00d9\u0086\u00d9\u0085\u00d9\u0088\u00d9\u0088\u00d9\u0086\u00db\u0095 \u00d9\u00a1: Input: \u00d9\u00a3 Output: (\u00d9\u00a1\u00d8\u008c \u00d9\u00a2) \u00da\u0095\u00d9\u0088\u00d9\u0088\u00d9\u0086\u00da\u00a9\u00d8\u00b1\u00d8\u00af\u00d9\u0086\u00db\u0095\u00d9\u0088\u00db\u0095: Palindromes \u00db\u008c \u00d8\u00aa\u00db\u0095\u00d9\u0088\u00d8\u00a7\u00d9\u0088 \u00d9\u0084\u00db\u0095 \u00d9\u00a1\u00d8\u008c \u00d9\u00a2\u00d8\u008c \u00d9\u00a3 \u00d8\u00af\u00d8\u00a7\u00d9\u0086\u00db\u0095 \u00da\u00a9\u00db\u0095 \u00db\u008c\u00db\u0095\u00da\u00a9\u00db\u008e\u00da\u00a9\u00db\u008c\u00d8\u00a7\u00d9\u0086 \u00d8\u00ac\u00d9\u0088\u00d9\u0088\u00d8\u00aa \u00d9\u0088 \u00d8\u00af\u00d9\u0088\u00d9\u0088\u00db\u008c\u00d8\u00a7\u00d9\u0086 \u00d8\u00ac\u00d9\u0088\u00d9\u0088\u00d8\u00aa\u00d9\u0086. \u00d9\u0086\u00d9\u0085\u00d9\u0088\u00d9\u0088\u00d9\u0086\u00db\u0095 \u00d9\u00a2: Input: \u00d9\u00a1\u00d9\u00a2 Output: (\u00d9\u00a4\u00d8\u008c \u00d9\u00a6) \u00da\u0095\u00d9\u0088\u00d9\u0088\u00d9\u0086\u00da\u00a9\u00d8\u00b1\u00d8\u00af\u00d9\u0086\u00db\u0095\u00d9\u0088\u00db\u0095: Palindromes \u00db\u008c \u00d8\u00aa\u00db\u0095\u00d9\u0088\u00d8\u00a7\u00d9\u0088 \u00d9\u0084\u00db\u0095 \u00d9\u00a1\u00d8\u008c \u00d9\u00a2\u00d8\u008c \u00d9\u00a3\u00d8\u008c \u00d9\u00a4\u00d8\u008c \u00d9\u00a5\u00d8\u008c \u00d9\u00a6\u00d8\u008c \u00d9\u00a7\u00d8\u008c \u00d9\u00a8\u00d8\u008c \u00d9\u00a9\u00d8\u008c \u00d9\u00a1\u00d9\u00a1 \u00d8\u00af\u00d8\u00a7\u00d9\u0086\u00db\u0095 \u00da\u00a9\u00db\u0095 \u00da\u0086\u00d9\u0088\u00d8\u00a7\u00d8\u00b1\u00db\u008c\u00d8\u00a7\u00d9\u0086 \u00d8\u00ac\u00d9\u0088\u00d9\u0088\u00d8\u00aa \u00d9\u0088 \u00d9\u00a6 \u00db\u008c\u00d8\u00a7\u00d9\u0086 \u00d8\u00ac\u00d9\u0088\u00d9\u0088\u00d8\u00aa\u00d9\u0086. \u00d8\u00aa\u00db\u008e\u00d8\u00a8\u00db\u008c\u00d9\u0086\u00db\u008c: \u00d9\u00a1. <= n <= \u00d9\u00a1\u00d9\u00a0^\u00d9\u00a3 \u00d9\u00a2. tuple \u00da\u00af\u00db\u0095\u00da\u0095\u00d8\u00a7\u00d9\u0086\u00d8\u00af\u00d9\u0086\u00db\u0095\u00d9\u0088\u00db\u0095\u00db\u008c \u00da\u0098\u00d9\u0085\u00d8\u00a7\u00d8\u00b1\u00db\u0095\u00db\u008c palindromes \u00db\u008c \u00d8\u00aa\u00db\u0095\u00d9\u0088\u00d8\u00a7\u00d9\u0088 \u00d9\u0088 \u00d8\u00aa\u00db\u0095\u00d9\u0088\u00d8\u00a7\u00d9\u0088 \u00d9\u0088 \u00d8\u00aa\u00db\u0095\u00d9\u0088\u00d8\u00a7\u00d9\u0088 \u00d9\u0088 \u00d8\u00aa\u00db\u0095\u00d9\u0088\u00d8\u00a7\u00d9\u0088 \u00d9\u0088 \u00d8\u00ac\u00d9\u0088\u00d9\u0088\u00d8\u00aa \u00d9\u0088 \u00d8\u00ac\u00d9\u0088\u00d8\u00af\u00db\u0095 \u00d8\u00a8\u00db\u0095 \u00db\u008c\u00db\u0095\u00da\u00a9\u00db\u0095\u00d9\u0088\u00db\u0095.\n    \"\"\"\n","canonical_solution":"    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"crh_Latn","prompt":"\ndef special_factorial(n):\n    \"\"\"Braziliya faktoriali b\u00c3\u00b6yle belgilene: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! *... * 1! m\u00c4\u00b1nda n > 0 Mesel\u00c3\u00a2:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n","canonical_solution":"    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n"}
{"nl":"cym_Latn","prompt":"\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Dychwelyd y rhanydd cyffredin mwyaf o ddau rhif cyflawn a a b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n","canonical_solution":"    while b:\n        a, b = b, a % b\n    return a\n","test":"def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n"}
{"nl":"dan_Latn","prompt":"\nFIX = \"\"\"\nTilf\u00c3\u00b8j flere testtilf\u00c3\u00a6lde.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n","canonical_solution":"    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"deu_Latn","prompt":"\n\n\ndef sum_squares(lst):\n    \"\"\"\" Diese Funktion nimmt eine Liste von Ganzzahlen. F\u00c3\u00bcr alle Eintr\u00c3\u00a4ge in der Liste wird die Funktion den Ganzzahlen-Eintrag quadrieren, wenn sein Index ein Vielfaches von 3 ist, und den Ganzzahlen-Eintrag kubisieren, wenn sein Index ein Vielfaches von 4 und nicht ein Vielfaches von 3 ist. Die Funktion \u00c3\u00a4ndert nicht die Eintr\u00c3\u00a4ge in der Liste, deren Indizes nicht ein Vielfaches von 3 oder 4 sind. Die Funktion gibt dann die Summe aller Eintr\u00c3\u00a4ge zur\u00c3\u00bcck.\n    \"\"\"\n","canonical_solution":"    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n"}
{"nl":"dik_Latn","prompt":"\ndef largest_smallest_integers(lst):\n    '''\nM\u0091th adu___l _ k_ l\u0091u__th tuple (a, b), yin 'a' _ k_ _ut l\u0091u__th ap\u008ath, k_ 'b' _ k_ _ut l\u0091u__th ad\u008ath k_c _th yi_____ ku__th.\nK_n_ k_ l\u0091u__th ap\u008ath aci_ k_n_ l\u0091u__th ad\u008ath, w\u0091th _ an as None.\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n","canonical_solution":"    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n"}
{"nl":"dyu_Latn","prompt":"\ndef minPath(grid, k):\n    \"\"\"\n    S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri d\u00c9\u0094 be yen min k\u00c9\u0094n\u00c9\u0094 l\u00c9\u0094nin lo tuma b\u00c9\u009b\u00c9\u009b. S\u00c9\u009bb\u00c9\u009bri\n    \"\"\"\n","canonical_solution":"    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n","test":"def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n"}
{"nl":"dzo_Tibt","prompt":"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" \u00e0\u00bd\u00a0\u00e0\u00bc\u008b\u00e0\u00bd\u0093\u00e0\u00bd\u00b2\u00e0\u00bc\u008b\u00e0\u00bd\u00a3\u00e0\u00bd\u00a6\u00e0\u00bc\u008b\u00e0\u00bd\u00a0\u00e0\u00bd\u0082\u00e0\u00bd\u0093\u00e0\u00bc\u008b\u00e0\u00bd\u0093\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u00a8\u00e0\u00bd\u00ba\u00e0\u00bd\u0096\u00e0\u00bc\u008b\u00e0\u00bd\u0082\u00e0\u00bd\u008f\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u00a0\u00e0\u00bd\u0096\u00e0\u00bd\u0091\u00e0\u00bc\u008b\u00e0\u00bd\u0098\u00e0\u00bd\u00b2\u00e0\u00bc\u008b\u00e0\u00bd\u00a0\u00e0\u00bd\u0091\u00e0\u00bd\u00b2\u00e0\u00bc\u008b \u00e0\u00bd\u0093\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u0090\u00e0\u00bd\u00b2\u00e0\u00bd\u0082\u00e0\u00bc\u008b\u00e0\u00bd\u0093\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u00a1\u00e0\u00bd\u00bc\u00e0\u00bd\u0091\u00e0\u00bc\u008b\u00e0\u00bd\u0094\u00e0\u00bd\u00a0\u00e0\u00bd\u00b2\u00e0\u00bc\u008b \u00e0\u00bd\u0080\u00e0\u00bd\u00ba\u00e0\u00bd\u00a2\u00e0\u00bc\u008b\u00e0\u00bd\u0090\u00e0\u00bd\u00b2\u00e0\u00bd\u0082\u00e0\u00bc\u008b\u00e0\u00bd\u00a6\u00e0\u00be\u00a1\u00e0\u00bd\u00ba\u00e0\u00bc\u008b\u00e0\u00bd\u009a\u00e0\u00bd\u0093\u00e0\u00bc\u008b\u00e0\u00bd\u00a3\u00e0\u00bd\u00ba\u00e0\u00bc\u008b\u00e0\u00bd\u00a4\u00e0\u00bc\u008b\u00e0\u00bd\u00a1\u00e0\u00bd\u00bc\u00e0\u00bd\u0091\u00e0\u00bc\u008b\u00e0\u00bd\u0094\u00e0\u00bd\u00a0\u00e0\u00bd\u00b2\u00e0\u00bc\u008b \u00e0\u00bd\u0080\u00e0\u00bd\u00ba\u00e0\u00bd\u00a2\u00e0\u00bc\u008b\u00e0\u00bd\u0090\u00e0\u00bd\u00b2\u00e0\u00bd\u0082\u00e0\u00bc\u008b\u00e0\u00bd\u00a8\u00e0\u00bd\u00b2\u00e0\u00bd\u0093\u00e0\u00bc\u008d \u00e0\u00bd\u0081\u00e0\u00be\u00b1\u00e0\u00bd\u00bc\u00e0\u00bd\u0091\u00e0\u00bc\u008b\u00e0\u00bd\u0080\u00e0\u00be\u00b1\u00e0\u00bd\u00b2\u00e0\u00bc\u008b\u00e0\u00bd\u0091\u00e0\u00bd\u0098\u00e0\u00bd\u00b2\u00e0\u00bd\u0082\u00e0\u00bd\u00a6\u00e0\u00bc\u008b\u00e0\u00bd\u00a1\u00e0\u00bd\u00b4\u00e0\u00bd\u00a3\u00e0\u00bc\u008b\u00e0\u00bd\u00a0\u00e0\u00bd\u0091\u00e0\u00bd\u00b2\u00e0\u00bc\u008b \u00e0\u00bd\u00a6\u00e0\u00be\u00a1\u00e0\u00bd\u00ba\u00e0\u00bc\u008b\u00e0\u00bd\u009a\u00e0\u00bd\u0093\u00e0\u00bc\u008b\u00e0\u00bd\u0091\u00e0\u00bd\u00ba\u00e0\u00bc\u008b\u00e0\u00bd\u00a6\u00e0\u00bd\u00bc\u00e0\u00bc\u008b\u00e0\u00bd\u00a6\u00e0\u00bd\u00bc\u00e0\u00bd\u00a2\u00e0\u00bc\u008b\u00e0\u00bd\u00a6\u00e0\u00be\u00a6\u00e0\u00bd\u00ba\u00e0\u00bc\u008b \u00e0\u00bd\u0095\u00e0\u00be\u00b2\u00e0\u00bc\u008b\u00e0\u00bd\u00a2\u00e0\u00bd\u00b2\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u0093\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u0091\u00e0\u00bd\u0096\u00e0\u00be\u00b1\u00e0\u00bd\u00ba\u00e0\u00bc\u008b\u00e0\u00bd\u0096\u00e0\u00bc\u008b\u00e0\u00bd\u0095\u00e0\u00be\u00b1\u00e0\u00bd\u00ba\u00e0\u00bc\u008b\u00e0\u00bd\u0093\u00e0\u00bd\u00b2\u00e0\u00bc\u008b\u00e0\u00bd\u0091\u00e0\u00bd\u0084\u00e0\u00bc\u008b \u00e0\u00bd\u00a0\u00e0\u00bd\u0091\u00e0\u00bd\u00b2\u00e0\u00bc\u008b\u00e0\u00bd\u009a\u00e0\u00bd\u00b4\u00e0\u00bc\u008b\u00e0\u00bd\u0082\u00e0\u00bd\u00b2\u00e0\u00bc\u008b\u00e0\u00bd\u0090\u00e0\u00bd\u00bc\u00e0\u00bc\u008b\u00e0\u00bd\u0091\u00e0\u00bd\u00ba\u00e0\u00bc\u008b\u00e0\u00bd\u00a6\u00e0\u00be\u00b3\u00e0\u00bd\u00a2\u00e0\u00bc\u008b\u00e0\u00bd\u00a3\u00e0\u00bd\u00bc\u00e0\u00bd\u0082\u00e0\u00bc\u008b\u00e0\u00bd\u00a0\u00e0\u00bd\u0096\u00e0\u00bd\u0091\u00e0\u00bd\u009d\u00e0\u00bc\u008b\u00e0\u00bd\u00a8\u00e0\u00bd\u00b2\u00e0\u00bd\u0093\u00e0\u00bc\u008d \u00e0\u00bd\u00a6\u00e0\u00be\u00a1\u00e0\u00bd\u00ba\u00e0\u00bc\u008b\u00e0\u00bd\u009a\u00e0\u00bd\u0093\u00e0\u00bc\u008b\u00e0\u00bd\u00a6\u00e0\u00bd\u00bc\u00e0\u00bc\u008b\u00e0\u00bd\u00a6\u00e0\u00bd\u00bc\u00e0\u00bd\u00a2\u00e0\u00bc\u008b\u00e0\u00bd\u009a\u00e0\u00bd\u00b4\u00e0\u00bc\u008b \u00e0\u00bd\u009a\u00e0\u00bd\u0091\u00e0\u00bc\u008b\u00e0\u00bd\u00a3\u00e0\u00be\u00a1\u00e0\u00bd\u0093\u00e0\u00bc\u008b\u00e0\u00bd\u0096\u00e0\u00bd\u009f\u00e0\u00bd\u00bc\u00e0\u00bc\u008b\u00e0\u00bd\u00a6\u00e0\u00be\u009f\u00e0\u00bd\u00ba\u00e0\u00bc\u008b (\u00e0\u00bd\u00a6\u00e0\u00be\u0092\u00e0\u00bd\u00bc\u00e0\u00bc\u008b\u00e0\u00bd\u00a6\u00e0\u00be\u0092\u00e0\u00be\u00b2\u00e0\u00bd\u00b2\u00e0\u00bd\u0082\u00e0\u00bc\u008b\u00e0\u00bd\u00a2\u00e0\u00bd\u00ba\u00e0\u00bc\u008b\u00e0\u00bd\u00a2\u00e0\u00bd\u00ba\u00e0\u00bd\u00a0\u00e0\u00bd\u00b2\u00e0\u00bc\u008b \u00e0\u00bd\u0080\u00e0\u00bd\u00ba\u00e0\u00bd\u00a2\u00e0\u00bc\u008b\u00e0\u00bd\u0090\u00e0\u00bd\u00b2\u00e0\u00bd\u0082\u00e0\u00bc\u008b\u00e0\u00bd\u00a0\u00e0\u00bd\u0091\u00e0\u00bd\u00b2\u00e0\u00bc\u008b \u00e0\u00bd\u00a3\u00e0\u00bd\u00ba\u00e0\u00bd\u0082\u00e0\u00bd\u00a6\u00e0\u00bc\u008b\u00e0\u00bd\u00a4\u00e0\u00bd\u00bc\u00e0\u00bd\u0098\u00e0\u00bc\u008b\u00e0\u00bd\u00a6\u00e0\u00be\u00a6\u00e0\u00bd\u00ba\u00e0\u00bc\u008b\u00e0\u00bd\u0096\u00e0\u00bd\u00a6\u00e0\u00be\u00a1\u00e0\u00bd\u0098\u00e0\u00bc\u008b\u00e0\u00bd\u00a1\u00e0\u00bd\u00bc\u00e0\u00bd\u0091\u00e0\u00bd\u0094\u00e0\u00bc\u008b) \u00e0\u00bd\u0091\u00e0\u00bd\u0084\u00e0\u00bc\u008b \u00e0\u00bd\u0082\u00e0\u00bd\u0085\u00e0\u00bd\u00b2\u00e0\u00bd\u0082\u00e0\u00bc\u008b\u00e0\u00bd\u0082\u00e0\u00bd\u00b2\u00e0\u00bd\u00a6\u00e0\u00bc\u008b\u00e0\u00bd\u0082\u00e0\u00bd\u0085\u00e0\u00bd\u00b2\u00e0\u00bd\u0082\u00e0\u00bc\u008b\u00e0\u00bd\u00a3\u00e0\u00bd\u00b4\u00e0\u00bc\u008b \u00e0\u00bd\u0093\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u0090\u00e0\u00bd\u00b2\u00e0\u00bd\u0082\u00e0\u00bc\u008b\u00e0\u00bd\u0093\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u0098\u00e0\u00bc\u008b\u00e0\u00bd\u009a\u00e0\u00bd\u00b4\u00e0\u00bd\u0091\u00e0\u00bc\u008b\u00e0\u00bd\u0091\u00e0\u00bd\u00ba\u00e0\u00bc\u008b\u00e0\u00bd\u00a1\u00e0\u00bd\u00bc\u00e0\u00bd\u0091\u00e0\u00bc\u008d \u00e0\u00bd\u00a8\u00e0\u00bd\u00ba\u00e0\u00bd\u0096\u00e0\u00bc\u008b\u00e0\u00bd\u0082\u00e0\u00bd\u008f\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u0090\u00e0\u00bd\u00b2\u00e0\u00bd\u0082\u00e0\u00bc\u008b\u00e0\u00bd\u0093\u00e0\u00bd\u0084\u00e0\u00bc\u008b \u00e0\u00bd\u0096\u00e0\u00bd\u00a2\u00e0\u00bc\u008b\u00e0\u00bd\u00a6\u00e0\u00be\u009f\u00e0\u00bd\u00bc\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u009a\u00e0\u00bd\u00b4\u00e0\u00bc\u008b\u00e0\u00bd\u00a6\u00e0\u00be\u00a3\u00e0\u00bd\u0084\u00e0\u00bc\u008b\u00e0\u00bd\u0098\u00e0\u00bd\u00ba\u00e0\u00bd\u0091\u00e0\u00bc\u008b\u00e0\u00bd\u0096\u00e0\u00bd\u009f\u00e0\u00bd\u00bc\u00e0\u00bc\u008b\u00e0\u00bd\u0091\u00e0\u00bd\u0082\u00e0\u00bd\u00bc\u00e0\u00bc\u008d \u00e0\u00bd\u0091\u00e0\u00bd\u0094\u00e0\u00bd\u00ba\u00e0\u00bc\u008b:\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n","canonical_solution":"    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n","test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"}
{"nl":"ell_Grek","prompt":"\ndef right_angle_triangle(a, b, c):\n    '''\n    _________ ___ _____ ___ _____ \u00b9______ ____ ________. _\u00b9________ True __ __ _____ \u00b9______ ___________ ___ _________ _______, ______ _\u00b9________ False.\n___ _________ _______ _____ ___ _______ ___ _\u00b9___ ___ _____ _____ ____ _____ _ 90 ______.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n","canonical_solution":"    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n"}
{"nl":"epo_Latn","prompt":"\ndef is_nested(string):\n    '''\nKreu funkcion kiu prenas _nuron kiel eniron kiu enhavas nur kvadratajn krampojn.\nLa funkcio devas redoni True se kaj nur se ekzistas valida subsekvenco de krampoj\nkie almena_ unu krampo en la subsekvenco estas enigita.\n    is_nested('[[]]') \u00c3\u00a2 -> True\n    is_nested('[]]]]]]][[[[[]') \u00c3\u00a2 -> False\n    is_nested('[][]') \u00c3\u00a2 -> False\n    is_nested('[]') \u00c3\u00a2 -> False\n    is_nested('[[][]]') \u00c3\u00a2 -> True\n    is_nested('[[]][[') \u00c3\u00a2 -> True\n    '''\n","canonical_solution":"    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n"}
{"nl":"est_Latn","prompt":"\n\ndef triangle_area(a, h):\n    \"\"\"Triangli k\u00c3\u00bclje pikkus ja suur p\u00c3\u00b6\u00c3\u00b6rde pindala.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n","canonical_solution":"    return a * h \/ 2.0\n","test":"def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n"}
{"nl":"eus_Latn","prompt":"\ndef bf(planet1, planet2):\n    '''\nGure eguzki sisteman zortzi planeta daude: Eguzkitik hurbilen dagoena Merkurioa da, hurrengoa Artizarra, gero Lurra, Marte, Jupiter, Saturno, Urano eta Neptuno.\nIdatzi funtzio bat bi planeta izen hartzen dituena, string gisa planet1 eta planet2. \nFuntzioak itzuli behar du tupla bat planet1 eta planet2 arteko orbitak dituzten planeta guztiekin, Eguzkitik hurbil dagoenetik ordenatuta.\nFuntzioak tupla huts bat itzuli behar du planet1 edo planet2 planeten izen zuzenak ez badira.    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n","canonical_solution":"    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n"}
{"nl":"ewe_Latn","prompt":"\n\ndef encode_shift(s: str):\n    \"\"\"\n    tr\u00c9\u0094a asi le \u00c5\u008b\u00c9\u0094\u00c5\u008bl\u00c9\u0094dzesi \u00c9\u0096esia\u00c9\u0096e \u00c5\u008bu 5 le alfabeta me ts\u00c9\u0094 tr\u00c9\u0094a asi le \u00c5\u008b\u00c9\u0094\u00c5\u008bl\u00c9\u0094dzesi si wots\u00c9\u0094 de dzesie \u00c5\u008bu.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n","canonical_solution":"    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n","test":"def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n"}
{"nl":"fao_Latn","prompt":"from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filtrar ein inngangslista av stringum bert fyri stringum, sum byrja vi\u00c3\u00b0 einum givnum forfiksi.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n","canonical_solution":"    return [x for x in strings if x.startswith(prefix)]\n","test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n"}
{"nl":"fij_Latn","prompt":"\n\ndef monotonic(l: list):\n    \"\"\"Dau lesu True kevaka na veika e tu ena lisi e sa tubu tiko se sa lutu sobu tiko.. E dina ni sa tubu tiko se lailai tiko na veika e tiko ena lisi.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n","canonical_solution":"    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n","test":"def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n"}
{"nl":"fin_Latn","prompt":"\ndef decimal_to_binary(decimal):\n    \"\"\"Funktiossa on numero, joka on kymmenenumeroinen, ja teht\u00c3\u00a4v\u00c3\u00a4si on muuntaa se bin\u00c3\u00a4\u00c3\u00a4riseen muotoon. Funktion pit\u00c3\u00a4isi palauttaa ketju, jossa jokainen merkki edustaa bin\u00c3\u00a4\u00c3\u00a4rist\u00c3\u00a4 numeroa. Jokainen merkki on \"0\" tai \"1\". Ketjun alussa ja lopussa on ylim\u00c3\u00a4\u00c3\u00a4r\u00c3\u00a4inen pari merkki\u00c3\u00a4 \"db\". Ylim\u00c3\u00a4\u00c3\u00a4r\u00c3\u00a4iset merkkej\u00c3\u00a4 ovat olemassa helpottaakseen muotoilua. Esimerkkej\u00c3\u00a4: decimal_to_binary(15) # palauttaa \"db1111db\" decimal_to_binary32) # palauttaa \"db100000db\"\n    \"\"\"\n","canonical_solution":"    return \"db\" + bin(decimal)[2:] + \"db\"\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"fon_Latn","prompt":"\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n ny\u00c3\u00ad az\u00c9\u0094\u00cc\u0080 e n\u00c9\u0094\u00cc\u0081 s\u00c9\u0094\u00cc\u0081 n\u00c3\u00b9\u00c9\u0096\u00c3\u00a9 l\u00c9\u009b\u00cc\u0081\u00c9\u009b \u00c9\u0096\u00c3\u00b3 kp\u00c9\u0094\u00cc\u0081 s\u00c3\u00adn 1 j\u00c9\u009b n j\u00c3\u00ad \u00c3\u00a9.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n","canonical_solution":"    return sum(range(n + 1))\n","test":"def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n"}
{"nl":"fra_Latn","prompt":"\ndef sort_array(array):\n    \"\"\"\n    Donn\u00c3\u00a9 un tableau d'entiers non n\u00c3\u00a9gatifs, renvoyez une copie du tableau donn\u00c3\u00a9 apr\u00c3\u00a8s le tri, vous trierez le tableau donn\u00c3\u00a9 dans l'ordre croissant si la somme (la premi\u00c3\u00a8re valeur d'index, la derni\u00c3\u00a8re valeur d'index) est impaire, ou le trier dans l'ordre d\u00c3\u00a9croissant si la somme (la premi\u00c3\u00a8re valeur d'index, la derni\u00c3\u00a8re valeur d'index) est paire.\n    \"\"\"\n","canonical_solution":"    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n"}
{"nl":"fur_Latn","prompt":"\ndef is_simple_power(x, n):\n    \"\"\"Il to compit al \u00c3\u00a8 di scrivi une funzion che e torne true se un numar x al \u00c3\u00a8 une semplice potence di n e false in altris c\u00c3\u00a2s. x al \u00c3\u00a8 une semplice potence di n se n**int=x Par esempli: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false\n    \"\"\"\n","canonical_solution":"    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"fuv_Latn","prompt":"from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filtir limgal ko hokkata nder ko woni nder Python ngam intejairji tan\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n","canonical_solution":"    return [x for x in values if isinstance(x, int)]\n","test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n"}
{"nl":"gaz_Latn","prompt":"from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Seenaa qubee galmeessise keessaa, qubee duraa kennamee jalqabuuf qofa filtaraa.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n","canonical_solution":"    return [x for x in strings if x.startswith(prefix)]\n","test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n"}
{"nl":"gla_Latn","prompt":"\ndef is_sorted(lst):\n    '''\nMa tha liosta de dh'\u0088ireamhan agad, till a bheil iad air an r\u008fiteachadh ann an \u0098rdugh ag \u008firigh. Ma tha barrachd air aon lethbhreac den aon \u0088ireamh sa liosta, till False. Gabhaidh ris nach eil \u0088ireamhan \u0088icheil ann agus a-mh\u0088in \u0088ireamhan sl\u0088n.\n    Examples\n    is_sorted([5]) \u00c3\u00a2 -> True\n    is_sorted([1, 2, 3, 4, 5]) \u00c3\u00a2 -> True\n    is_sorted([1, 3, 2, 4, 5]) \u00c3\u00a2 -> False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u00c3\u00a2 -> True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u00c3\u00a2 -> True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u00c3\u00a2 -> False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u00c3\u00a2 -> True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u00c3\u00a2 -> False\n    '''\n","canonical_solution":"    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n"}
{"nl":"gle_Latn","prompt":"\n\ndef skjkasdkd(lst):\n    \"\"\"T\u00c3\u00a1 liosta de l\u00c3\u00adon ioml\u00c3\u00a1n tugtha duit. N\u00c3\u00ad m\u00c3\u00b3r duit an luach pr\u00c3\u00adomh is m\u00c3\u00b3 a aimsi\u00c3\u00ba agus suim a dhigit\u00c3\u00ad a thabhairt ar ais. Sampla\u00c3\u00ad: Le haghaidh lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ba ch\u00c3\u00b3ir go mbeadh an toradh 10 Le haghaidh lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ba ch\u00c3\u00b3ir go mbeadh an toradh 25 Le haghaidh lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ba ch\u00c3\u00b3ir go mbeadh an toradh 13 Le haghaidh lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ba ch\u00c3\u00b3ir go mbeadh an toradh 11 Le haghaidh lst = [0,81,12,31,21] ba\n    \"\"\"\n","canonical_solution":"    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n"}
{"nl":"glg_Latn","prompt":"\ndef choose_num(x, y):\n    \"\"\"Esta funci\u00c3\u00b3n toma dous n\u00c3\u00bameros positivos x e y e devolve o maior n\u00c3\u00bamero par que est\u00c3\u00a1 no rango [x, y] inclusive. Se non hai tal n\u00c3\u00bamero, ent\u00c3\u00b3n a funci\u00c3\u00b3n deber\u00c3\u00ada devolver -1. Por exemplo: choose_num(12, 15) = 14 choose_num(13, 12) = -1\n    \"\"\"\n","canonical_solution":"    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n"}
{"nl":"grn_Latn","prompt":"\ndef prod_signs(arr):\n    \"\"\"\n    O\u00c3\u00b1eme'\u00e1\u00ba\u00bd nd\u00c3\u00a9ve pete\u00c4\u00a9 array entero rehegua ha eguereko va'er\u00c3\u00a3 suma de magnitudes de los enteros multiplicada por producto de todos los signos de cada n\u00c3\u00bamero de la matriz, representado por 1, -1 o 0.\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n","canonical_solution":"    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"guj_Gujr","prompt":"\ndef make_a_pile(n):\n    \"\"\"\n    \u00e0\u00aa\u00b8\u00e0\u00aa\u0095\u00e0\u00aa\u00be\u00e0\u00aa\u00b0\u00e0\u00aa\u00be\u00e0\u00aa\u00a4\u00e0\u00ab\u008d\u00e0\u00aa\u00ae\u00e0\u00aa\u0095 \u00e0\u00aa\u00aa\u00e0\u00ab\u0082\u00e0\u00aa\u00b0\u00e0\u00ab\u008d\u00e0\u00aa\u00a3\u00e0\u00aa\u00be\u00e0\u00aa\u0082\u00e0\u00aa\u0095 n \u00e0\u00aa\u0086\u00e0\u00aa\u00aa\u00e0\u00aa\u00b5\u00e0\u00aa\u00be\u00e0\u00aa\u00ae\u00e0\u00aa\u00be\u00e0\u00aa\u0082 \u00e0\u00aa\u0086\u00e0\u00aa\u00b5\u00e0\u00ab\u0087 \u00e0\u00aa\u009b\u00e0\u00ab\u0087, \u00e0\u00aa\u00a4\u00e0\u00aa\u00ae\u00e0\u00aa\u00be\u00e0\u00aa\u00b0\u00e0\u00ab\u0087 \u00e0\u00aa\u00aa\u00e0\u00aa\u00a5\u00e0\u00ab\u008d\u00e0\u00aa\u00a5\u00e0\u00aa\u00b0\u00e0\u00ab\u008b\u00e0\u00aa\u00a8\u00e0\u00aa\u00be n \u00e0\u00aa\u00b8\u00e0\u00ab\u008d\u00e0\u00aa\u00a4\u00e0\u00aa\u00b0\u00e0\u00ab\u008b\u00e0\u00aa\u00a8\u00e0\u00ab\u008b \u00e0\u00aa\u00a2\u00e0\u00aa\u0097\u00e0\u00aa\u00b2\u00e0\u00ab\u008b \u00e0\u00aa\u00ac\u00e0\u00aa\u00a8\u00e0\u00aa\u00be\u00e0\u00aa\u00b5\u00e0\u00aa\u00b5\u00e0\u00ab\u008b \u00e0\u00aa\u00aa\u00e0\u00aa\u00a1\u00e0\u00aa\u00b6\u00e0\u00ab\u0087. \u00e0\u00aa\u00aa\u00e0\u00ab\u008d\u00e0\u00aa\u00b0\u00e0\u00aa\u00a5\u00e0\u00aa\u00ae \u00e0\u00aa\u00b8\u00e0\u00ab\u008d\u00e0\u00aa\u00a4\u00e0\u00aa\u00b0\u00e0\u00aa\u00ae\u00e0\u00aa\u00be\u00e0\u00aa\u0082 n \u00e0\u00aa\u00aa\u00e0\u00aa\u00a5\u00e0\u00ab\u008d\u00e0\u00aa\u00a5\u00e0\u00aa\u00b0\u00e0\u00ab\u008b \u00e0\u00aa\u009b\u00e0\u00ab\u0087. \u00e0\u00aa\u0086\u00e0\u00aa\u0097\u00e0\u00aa\u00b2\u00e0\u00aa\u00be \u00e0\u00aa\u00b8\u00e0\u00ab\u008d\u00e0\u00aa\u00a4\u00e0\u00aa\u00b0\u00e0\u00aa\u00ae\u00e0\u00aa\u00be\u00e0\u00aa\u0082 \u00e0\u00aa\u00aa\u00e0\u00aa\u00a5\u00e0\u00ab\u008d\u00e0\u00aa\u00a5\u00e0\u00aa\u00b0\u00e0\u00ab\u008b\u00e0\u00aa\u00a8\u00e0\u00ab\u0080 \u00e0\u00aa\u00b8\u00e0\u00aa\u0082\u00e0\u00aa\u0096\u00e0\u00ab\u008d\u00e0\u00aa\u00af\u00e0\u00aa\u00be \u00e0\u00aa\u009b\u00e0\u00ab\u0087\u00e0\u00aa\u0083 - \u00e0\u00aa\u0086\u00e0\u00aa\u0097\u00e0\u00aa\u00be\u00e0\u00aa\u00ae\u00e0\u00ab\u0080 \u00e0\u00aa\u00b5\u00e0\u00aa\u00bf\u00e0\u00aa\u009a\u00e0\u00aa\u00bf\u00e0\u00aa\u00a4\u00e0\u00ab\u008d\u00e0\u00aa\u00b0 \u00e0\u00aa\u00b8\u00e0\u00aa\u0082\u00e0\u00aa\u0096\u00e0\u00ab\u008d\u00e0\u00aa\u00af\u00e0\u00aa\u00be \u00e0\u00aa\u009c\u00e0\u00ab\u008b n \u00e0\u00aa\u00b5\u00e0\u00aa\u00bf\u00e0\u00aa\u009a\u00e0\u00aa\u00bf\u00e0\u00aa\u00a4\u00e0\u00ab\u008d\u00e0\u00aa\u00b0 \u00e0\u00aa\u00b9\u00e0\u00ab\u008b\u00e0\u00aa\u00af \u00e0\u00aa\u00a4\u00e0\u00ab\u008b - \u00e0\u00aa\u0086\u00e0\u00aa\u0097\u00e0\u00aa\u00be\u00e0\u00aa\u00ae\u00e0\u00ab\u0080 \u00e0\u00aa\u00b8\u00e0\u00aa\u0082\u00e0\u00aa\u0096\u00e0\u00ab\u008d\u00e0\u00aa\u00af\u00e0\u00aa\u00be \u00e0\u00aa\u009c\u00e0\u00ab\u008b n \u00e0\u00aa\u00aa\u00e0\u00aa\u00a3 \u00e0\u00aa\u00b9\u00e0\u00ab\u008b\u00e0\u00aa\u00af \u00e0\u00aa\u00a4\u00e0\u00ab\u008b. \u00e0\u00aa\u00a6\u00e0\u00aa\u00b0\u00e0\u00ab\u0087\u00e0\u00aa\u0095 \u00e0\u00aa\u00b8\u00e0\u00ab\u008d\u00e0\u00aa\u00a4\u00e0\u00aa\u00b0\u00e0\u00aa\u00ae\u00e0\u00aa\u00be\u00e0\u00aa\u0082 \u00e0\u00aa\u00aa\u00e0\u00aa\u00a5\u00e0\u00ab\u008d\u00e0\u00aa\u00a5\u00e0\u00aa\u00b0\u00e0\u00ab\u008b\u00e0\u00aa\u00a8\u00e0\u00ab\u0080 \u00e0\u00aa\u00b8\u00e0\u00aa\u0082\u00e0\u00aa\u0096\u00e0\u00ab\u008d\u00e0\u00aa\u00af\u00e0\u00aa\u00be\u00e0\u00aa\u00a8\u00e0\u00ab\u0087 \u00e0\u00aa\u00b8\u00e0\u00ab\u0082\u00e0\u00aa\u009a\u00e0\u00aa\u00bf\u00e0\u00aa\u00ae\u00e0\u00aa\u00be\u00e0\u00aa\u0082 \u00e0\u00aa\u00aa\u00e0\u00aa\u00b0\u00e0\u00aa\u00a4 \u00e0\u00aa\u0095\u00e0\u00aa\u00b0\u00e0\u00ab\u008b, \u00e0\u00aa\u009c\u00e0\u00ab\u008d\u00e0\u00aa\u00af\u00e0\u00aa\u00be\u00e0\u00aa\u0082 \u00e0\u00aa\u0087\u00e0\u00aa\u00a8\u00e0\u00ab\u008d\u00e0\u00aa\u00a1\u00e0\u00ab\u0087\u00e0\u00aa\u0095\u00e0\u00ab\u008d\u00e0\u00aa\u00b8 i \u00e0\u00aa\u00aa\u00e0\u00aa\u00b0 \u00e0\u00aa\u00a4\u00e0\u00aa\u00a4\u00e0\u00ab\u008d\u00e0\u00aa\u00b5 \u00e0\u00aa\u00b8\u00e0\u00ab\u008d\u00e0\u00aa\u00a4\u00e0\u00aa\u00b0 (i + 1) \u00e0\u00aa\u00ae\u00e0\u00aa\u00be\u00e0\u00aa\u0082 \u00e0\u00aa\u00aa\u00e0\u00aa\u00a5\u00e0\u00ab\u008d\u00e0\u00aa\u00a5\u00e0\u00aa\u00b0\u00e0\u00ab\u008b\u00e0\u00aa\u00a8\u00e0\u00ab\u0080 \u00e0\u00aa\u00b8\u00e0\u00aa\u0082\u00e0\u00aa\u0096\u00e0\u00ab\u008d\u00e0\u00aa\u00af\u00e0\u00aa\u00be\u00e0\u00aa\u00a8\u00e0\u00ab\u0081\u00e0\u00aa\u0082 \u00e0\u00aa\u00aa\u00e0\u00ab\u008d\u00e0\u00aa\u00b0\u00e0\u00aa\u00a4\u00e0\u00aa\u00bf\u00e0\u00aa\u00a8\u00e0\u00aa\u00bf\u00e0\u00aa\u00a7\u00e0\u00aa\u00bf\u00e0\u00aa\u00a4\u00e0\u00ab\u008d\u00e0\u00aa\u00b5 \u00e0\u00aa\u0095\u00e0\u00aa\u00b0\u00e0\u00ab\u0087 \u00e0\u00aa\u009b\u00e0\u00ab\u0087. \u00e0\u00aa\u0089\u00e0\u00aa\u00a6\u00e0\u00aa\u00be\u00e0\u00aa\u00b9\u00e0\u00aa\u00b0\u00e0\u00aa\u00a3\u00e0\u00ab\u008b:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n","canonical_solution":"    return [n + 2*i for i in range(n)]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"hat_Latn","prompt":"from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" Pou yon lis bay nan nimewo opinyon, kalkile Mean Absolute Deviation alantou mway\u00c3\u00a8n nan seri done sa a. Mean Absolute Deviation se mway\u00c3\u00a8n diferans absoli ant chak eleman ak yon pwen sant (medan nan ka sa a): MAD = mway\u00c3\u00a8n. x - x_mean. Egzanp:\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n","canonical_solution":"    mean = sum(numbers) \/ len(numbers)\n    return sum(abs(x - mean) for x in numbers) \/ len(numbers)\n","test":"def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0\/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0\/5.0) < 1e-6\n\n"}
{"nl":"hau_Latn","prompt":"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Shigarwa zuwa wannan aikin shine kirtani wanda ya \u00c6\u0099unshi \u00c6\u0099ungiyoyi da yawa na \u00c6\u0099u\u00c6\u0099walwar \u00c6\u0099u\u00c6\u0099walwa. Manufarka ita ce ka raba wa\u00c9\u0097annan rukunin zuwa cikin jerin tsararru daban-daban kuma ka dawo da jerin wa\u00c9\u0097anda. \u00c6\u0098ungiyoyi daban-daban suna daidaita (kowane bu\u00c9\u0097e \u00c6\u0099u\u00c6\u0099walwa an rufe shi da kyau) kuma ba a ha\u00c9\u0097e cikin juna ba. Ka yi watsi da kowane sarari a cikin kirtani na shigarwa. Misali:\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n","canonical_solution":"    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n","test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"}
{"nl":"heb_Hebr","prompt":"\ndef words_in_sentence(sentence):\n    \"\"\"\n    \u00d7\u00a0\u00d7\u0099\u00d7\u00aa\u00d7\u009f \u00d7\u009c\u00d7\u009a \u00d7\u009e\u00d7\u0097\u00d7\u00a8\u00d7\u0095\u00d7\u0096\u00d7\u00aa \u00d7\u0094\u00d7\u009e\u00d7\u0099\u00d7\u0099\u00d7\u00a6\u00d7\u0092\u00d7\u00aa \u00d7\u009e\u00d7\u00a9\u00d7\u00a4\u00d7\u0098, \u00d7\u0094\u00d7\u009e\u00d7\u00a9\u00d7\u00a4\u00d7\u0098 \u00d7\u009e\u00d7\u009b\u00d7\u0099\u00d7\u009c \u00d7\u009b\u00d7\u009e\u00d7\u0094 \u00d7\u009e\u00d7\u0099\u00d7\u009c\u00d7\u0099\u00d7\u009d \u00d7\u0094\u00d7\u009e\u00d7\u0095\u00d7\u00a4\u00d7\u00a8\u00d7\u0093\u00d7\u0095\u00d7\u00aa \u00d7\u00a2\u00d7\u009c \u00d7\u0099\u00d7\u0093\u00d7\u0099 \u00d7\u0097\u00d7\u009c\u00d7\u009c, \u00d7\u0095\u00d7\u0090\u00d7\u00aa\u00d7\u0094 \u00d7\u00a6\u00d7\u00a8\u00d7\u0099\u00d7\u009a \u00d7\u009c\u00d7\u0094\u00d7\u0097\u00d7\u0096\u00d7\u0099\u00d7\u00a8 \u00d7\u009e\u00d7\u0097\u00d7\u00a8\u00d7\u0095\u00d7\u0096\u00d7\u00aa \u00d7\u0094\u00d7\u009e\u00d7\u009b\u00d7\u0099\u00d7\u009c\u00d7\u0094 \u00d7\u0090\u00d7\u00aa \u00d7\u0094\u00d7\u009e\u00d7\u0099\u00d7\u009c\u00d7\u0099\u00d7\u009d \u00d7\u009e\u00d7\u0094\u00d7\u009e\u00d7\u00a9\u00d7\u00a4\u00d7\u0098 \u00d7\u0094\u00d7\u009e\u00d7\u00a7\u00d7\u0095\u00d7\u00a8\u00d7\u0099, \u00d7\u00a9\u00d7\u0090\u00d7\u0095\u00d7\u00a8\u00d7\u009b\u00d7\u0095 \u00d7\u0094\u00d7\u009d \u00d7\u009e\u00d7\u00a1\u00d7\u00a4\u00d7\u00a8\u00d7\u0099\u00d7\u009d \u00d7\u00a8\u00d7\u0090\u00d7\u00a9\u00d7\u0095\u00d7\u00a0\u00d7\u0099\u00d7\u0099\u00d7\u009d, \u00d7\u00a1\u00d7\u0093\u00d7\u00a8 \u00d7\u0094\u00d7\u009e\u00d7\u0099\u00d7\u009c\u00d7\u0099\u00d7\u009d \u00d7\u0091\u00d7\u00a9\u00d7\u00a8\u00d7\u00a9\u00d7\u00a8\u00d7\u00aa \u00d7\u0094\u00d7\u0097\u00d7\u0093\u00d7\u00a9\u00d7\u0094 \u00d7\u00a6\u00d7\u00a8\u00d7\u0099\u00d7\u009a \u00d7\u009c\u00d7\u0094\u00d7\u0099\u00d7\u0095\u00d7\u00aa \u00d7\u0096\u00d7\u0094\u00d7\u0094 \u00d7\u009c\u00d7\u0096\u00d7\u0094 \u00d7\u0094\u00d7\u009e\u00d7\u00a7\u00d7\u0095\u00d7\u00a8\u00d7\u0099. \u00d7\u0093\u00d7\u0095\u00d7\u0092\u00d7\u009e\u00d7\u00941: \u00d7\u0094\u00d7\u009b\u00d7\u00a0\u00d7\u0099\u00d7\u00a1\u00d7\u0094: \u00d7\u009e\u00d7\u00a9\u00d7\u00a4\u00d7\u0098 = \"\u00d7\u0096\u00d7\u0094 \u00d7\u009e\u00d7\u0091\u00d7\u0097\u00d7\u009f\" \u00d7\u0094\u00d7\u00a4\u00d7\u009c\u00d7\u0098: \"\u00d7\u0094\u00d7\u0095\u00d7\u0090\" \u00d7\u0093\u00d7\u0095\u00d7\u0092\u00d7\u009e\u00d7\u00942: \u00d7\u0094\u00d7\u009b\u00d7\u00a0\u00d7\u0099\u00d7\u00a1\u00d7\u0094: \u00d7\u009e\u00d7\u00a9\u00d7\u00a4\u00d7\u0098 = \"\u00d7\u0094\u00d7\u0095\u00d7\u00a8\u00d7\u00a9\u00d7\u0094 \u00d7\u009c\u00d7\u009a \u00d7\u009c\u00d7\u009c\u00d7\u009b\u00d7\u00aa \u00d7\u009c\u00d7\u00a9\u00d7\u0097\u00d7\u0095\u00d7\u00aa\" \u00d7\u0094\u00d7\u00a4\u00d7\u009c\u00d7\u0098: \"\u00d7\u009c\u00d7\u009c\u00d7\u009b\u00d7\u00aa\" \u00d7\u009e\u00d7\u0092\u00d7\u0091\u00d7\u009c\u00d7\u0095\u00d7\u00aa: * 1 <= len(sentence) <= 100 * \u00d7\u009e\u00d7\u00a9\u00d7\u00a4\u00d7\u0098 \u00d7\u009e\u00d7\u009b\u00d7\u0099\u00d7\u009c \u00d7\u00a8\u00d7\u00a7 \u00d7\u0090\u00d7\u0095\u00d7\u00aa\u00d7\u0099\u00d7\u0095\u00d7\u00aa\n    \"\"\"\n","canonical_solution":"    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n"}
{"nl":"hin_Deva","prompt":"\n\ndef largest_prime_factor(n: int):\n    \"\"\"n \u00e0\u00a4\u0095\u00e0\u00a4\u00be \u00e0\u00a4\u00b8\u00e0\u00a4\u00ac\u00e0\u00a4\u00b8\u00e0\u00a5\u0087 \u00e0\u00a4\u00ac\u00e0\u00a4\u00a1\u00e0\u00a4\u00bc\u00e0\u00a4\u00be \u00e0\u00a4\u0085\u00e0\u00a4\u00ad\u00e0\u00a4\u00be\u00e0\u00a4\u009c\u00e0\u00a5\u008d\u00e0\u00a4\u00af \u00e0\u00a4\u0097\u00e0\u00a5\u0081\u00e0\u00a4\u00a3\u00e0\u00a4\u0095 \u00e0\u00a4\u00b2\u00e0\u00a5\u008c\u00e0\u00a4\u009f\u00e0\u00a4\u00be\u00e0\u00a4\u008f\u00e0\u00a4\u0081. \u00e0\u00a4\u00ae\u00e0\u00a4\u00be\u00e0\u00a4\u00a8 \u00e0\u00a4\u00b2\u00e0\u00a5\u0087\u00e0\u00a4\u0082 \u00e0\u00a4\u0095\u00e0\u00a4\u00bf n > 1 \u00e0\u00a4\u00b9\u00e0\u00a5\u0088 \u00e0\u00a4\u0094\u00e0\u00a4\u00b0 \u00e0\u00a4\u0085\u00e0\u00a4\u00ad\u00e0\u00a4\u00be\u00e0\u00a4\u009c\u00e0\u00a5\u008d\u00e0\u00a4\u00af \u00e0\u00a4\u00a8\u00e0\u00a4\u00b9\u00e0\u00a5\u0080\u00e0\u00a4\u0082 \u00e0\u00a4\u00b9\u00e0\u00a5\u0088.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n","canonical_solution":"    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n","test":"def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n"}
{"nl":"hne_Deva","prompt":"from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" \u00e0\u00a4\u0086\u00e0\u00a4\u00aa\u00e0\u00a4\u0095\u00e0\u00a5\u0087 \u00e0\u00a4\u0095\u00e0\u00a4\u00b0\u00e0\u00a4\u00be \u00e0\u00a4\u008f\u00e0\u00a4\u0095 \u00e0\u00a4\u00ac\u00e0\u00a5\u0088\u00e0\u00a4\u0082\u00e0\u00a4\u0095 \u00e0\u00a4\u0096\u00e0\u00a4\u00be\u00e0\u00a4\u00a4\u00e0\u00a4\u00be \u00e0\u00a4\u00ae \u00e0\u00a4\u009c\u00e0\u00a4\u00ae\u00e0\u00a4\u00be \u00e0\u00a4\u0085\u00e0\u00a4\u0089 \u00e0\u00a4\u00a8\u00e0\u00a4\u00bf\u00e0\u00a4\u0095\u00e0\u00a4\u00be\u00e0\u00a4\u00b8\u00e0\u00a5\u0080 \u00e0\u00a4\u00b8\u00e0\u00a4\u0082\u00e0\u00a4\u009a\u00e0\u00a4\u00be\u00e0\u00a4\u00b2\u00e0\u00a4\u00a8 \u00e0\u00a4\u0095\u00e0\u00a5\u0087 \u00e0\u00a4\u008f\u00e0\u00a4\u0095 \u00e0\u00a4\u00b8\u00e0\u00a5\u0082\u00e0\u00a4\u009a\u00e0\u00a5\u0080 \u00e0\u00a4\u00a6\u00e0\u00a4\u00bf\u00e0\u00a4\u008f \u00e0\u00a4\u009c\u00e0\u00a4\u00be\u00e0\u00a4\u00a4 \u00e0\u00a4\u00b9\u00e0\u00a4\u00b5\u00e0\u00a4\u00af \u00e0\u00a4\u009c\u00e0\u00a5\u0087\u00e0\u00a4\u00b9\u00e0\u00a4\u00b0 \u00e0\u00a4\u00b6\u00e0\u00a5\u0082\u00e0\u00a4\u00a8\u00e0\u00a5\u008d\u00e0\u00a4\u00af \u00e0\u00a4\u00b6\u00e0\u00a5\u0087\u00e0\u00a4\u00b7 \u00e0\u00a4\u00b0\u00e0\u00a4\u00be\u00e0\u00a4\u00b6\u00e0\u00a4\u00bf \u00e0\u00a4\u0095\u00e0\u00a5\u0087 \u00e0\u00a4\u00b8\u00e0\u00a4\u00be\u00e0\u00a4\u00a5 \u00e0\u00a4\u00b6\u00e0\u00a5\u0081\u00e0\u00a4\u00b0\u00e0\u00a5\u0082 \u00e0\u00a4\u00b9\u00e0\u00a5\u008b\u00e0\u00a4\u00a4 \u00e0\u00a4\u00b9\u00e0\u00a4\u00b5\u00e0\u00a4\u00af\u00e0\u00a5\u00a4 \u00e0\u00a4\u0086\u00e0\u00a4\u00aa\u00e0\u00a4\u0095\u00e0\u00a5\u0087 \u00e0\u00a4\u0095\u00e0\u00a4\u00be\u00e0\u00a4\u00ae \u00e0\u00a4\u008f\u00e0\u00a4\u00b9\u00e0\u00a4\u00b0 \u00e0\u00a4\u00aa\u00e0\u00a4\u00a4\u00e0\u00a4\u00be \u00e0\u00a4\u00b2\u00e0\u00a4\u0097\u00e0\u00a4\u00be\u00e0\u00a4\u00a8\u00e0\u00a4\u00be \u00e0\u00a4\u00b9\u00e0\u00a4\u00b5\u00e0\u00a4\u00af \u00e0\u00a4\u0095\u00e0\u00a4\u00bf \u00e0\u00a4\u0095\u00e0\u00a4\u00be\u00e0\u00a4\u0096\u00e0\u00a4\u00b0\u00e0\u00a5\u008b \u00e0\u00a4\u0098\u00e0\u00a4\u00b2\u00e0\u00a5\u008b \u00e0\u00a4\u00ac\u00e0\u00a4\u00bf\u00e0\u00a4\u0082\u00e0\u00a4\u00a6\u00e0\u00a5\u0081 \u00e0\u00a4\u00ae \u00e0\u00a4\u0096\u00e0\u00a4\u00be\u00e0\u00a4\u00a4\u00e0\u00a4\u00be \u00e0\u00a4\u00b6\u00e0\u00a5\u0087\u00e0\u00a4\u00b7 \u00e0\u00a4\u00b6\u00e0\u00a5\u0082\u00e0\u00a4\u00a8\u00e0\u00a5\u008d\u00e0\u00a4\u00af \u00e0\u00a4\u00b2\u00e0\u00a5\u0087 \u00e0\u00a4\u00a8\u00e0\u00a5\u0080\u00e0\u00a4\u009a\u00e0\u00a5\u0087 \u00e0\u00a4\u0097\u00e0\u00a4\u00bf\u00e0\u00a4\u00b0 \u00e0\u00a4\u009c\u00e0\u00a4\u00be\u00e0\u00a4\u00a4 \u00e0\u00a4\u00b9\u00e0\u00a4\u00b5\u00e0\u00a4\u00af, \u00e0\u00a4\u0085\u00e0\u00a4\u0089 \u00e0\u00a4\u0093 \u00e0\u00a4\u00ac\u00e0\u00a4\u00bf\u00e0\u00a4\u0082\u00e0\u00a4\u00a6\u00e0\u00a5\u0081 \u00e0\u00a4\u00ae \u00e0\u00a4\u00ab\u00e0\u00a4\u00bc\u00e0\u00a4\u0082\u00e0\u00a4\u0095\u00e0\u00a5\u008d\u00e0\u00a4\u00b6\u00e0\u00a4\u00a8 \u00e0\u00a4\u00b2 \u00e0\u00a4\u00b8\u00e0\u00a4\u00a4\u00e0\u00a5\u008d\u00e0\u00a4\u00af \u00e0\u00a4\u00b2\u00e0\u00a5\u008c\u00e0\u00a4\u009f\u00e0\u00a4\u00be \u00e0\u00a4\u00a6\u00e0\u00a5\u0087\u00e0\u00a4\u00a8\u00e0\u00a4\u00be \u00e0\u00a4\u009a\u00e0\u00a4\u00be\u00e0\u00a4\u00b9\u00e0\u00a4\u00bf\u00e0\u00a5\u00a4 \u00e0\u00a4\u0085\u00e0\u00a4\u00a8\u00e0\u00a5\u008d\u00e0\u00a4\u00af\u00e0\u00a4\u00a5\u00e0\u00a4\u00be \u00e0\u00a4\u008f\u00e0\u00a4\u00b2\u00e0\u00a4\u00be \u00e0\u00a4\u0097\u00e0\u00a4\u00b2\u00e0\u00a4\u00a4 \u00e0\u00a4\u00b2\u00e0\u00a5\u008c\u00e0\u00a4\u009f\u00e0\u00a4\u00be \u00e0\u00a4\u00a6\u00e0\u00a5\u0087\u00e0\u00a4\u00a8\u00e0\u00a4\u00be \u00e0\u00a4\u009a\u00e0\u00a4\u00be\u00e0\u00a4\u00b9\u00e0\u00a4\u00bf\u00e0\u00a5\u00a4 \u00e0\u00a4\u0089\u00e0\u00a4\u00a6\u00e0\u00a4\u00be\u00e0\u00a4\u00b9\u00e0\u00a4\u00b0\u00e0\u00a4\u00a3:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n","canonical_solution":"    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n","test":"def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n"}
{"nl":"hrv_Latn","prompt":"\n\ndef flip_case(string: str) -> str:\n    \"\"\" Za dat niz, prebacite male znakove u velike i velike u male.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n","canonical_solution":"    return string.swapcase()\n","test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n"}
{"nl":"hun_Latn","prompt":"\ndef circular_shift(x, shift):\n    \"\"\"K\u00c3\u00b6rbe helyezz\u00c3\u00bck az x eg\u00c3\u00a9sz sz\u00c3\u00a1m sz\u00c3\u00a1mjegyeit, a sz\u00c3\u00a1mjegyek jobbra helyezz\u00c3\u00bck el, \u00c3\u00a9s a sztring form\u00c3\u00a1j\u00c3\u00a1ban adja vissza az eredm\u00c3\u00a9nyt. Ha a shift > sz\u00c3\u00a1mjegyek sz\u00c3\u00a1ma, akkor a sz\u00c3\u00a1mjegyek visszaford\u00c3\u00adtva.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n","canonical_solution":"    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"hye_Armn","prompt":"\ndef anti_shuffle(s):\n    \"\"\"\n    \u00d4\u00b3\u00d6\u0080\u00d5\u00a5\u00d6\u0084 \u00d6\u0086\u00d5\u00b8\u00d6\u0082\u00d5\u00b6\u00d5\u00af\u00d6\u0081\u00d5\u00ab\u00d5\u00a1, \u00d5\u00b8\u00d6\u0080\u00d5\u00a8 \u00d5\u00be\u00d5\u00a5\u00d6\u0080\u00d6\u0081\u00d5\u00b6\u00d5\u00b8\u00d6\u0082\u00d5\u00b4 \u00d5\u00a7 \u00d5\u00bf\u00d5\u00b8\u00d5\u00b2 \u00d5\u00a5\u00d6\u0082 \u00d5\u00be\u00d5\u00a5\u00d6\u0080\u00d5\u00a1\u00d5\u00a4\u00d5\u00a1\u00d6\u0080\u00d5\u00b1\u00d5\u00b6\u00d5\u00b8\u00d6\u0082\u00d5\u00b4 \u00d5\u00a7 \u00d5\u00a4\u00d6\u0080\u00d5\u00a1 \u00d5\u00af\u00d5\u00a1\u00d6\u0080\u00d5\u00a3\u00d5\u00a1\u00d5\u00be\u00d5\u00b8\u00d6\u0080\u00d5\u00be\u00d5\u00a1\u00d5\u00ae \u00d5\u00bf\u00d5\u00a1\u00d6\u0080\u00d5\u00a2\u00d5\u00a5\u00d6\u0080\u00d5\u00a1\u00d5\u00af\u00d5\u00a8: \u00d5\u008f\u00d5\u00b8\u00d5\u00b2\u00d5\u00ab \u00d5\u00af\u00d5\u00a1\u00d6\u0080\u00d5\u00a3\u00d5\u00a1\u00d5\u00be\u00d5\u00b8\u00d6\u0080\u00d5\u00be\u00d5\u00a1\u00d5\u00ae \u00d5\u00bf\u00d5\u00a1\u00d6\u0080\u00d5\u00a2\u00d5\u00a5\u00d6\u0080\u00d5\u00a1\u00d5\u00af\u00d5\u00a8, \u00d5\u00a1\u00d5\u00b5\u00d5\u00b6 \u00d5\u00bf\u00d5\u00b8\u00d5\u00b2\u00d5\u00b6 \u00d5\u00a7, \u00d5\u00b8\u00d6\u0080\u00d5\u00bf\u00d5\u00a5\u00d5\u00b2 \u00d5\u00a2\u00d5\u00b8\u00d5\u00ac\u00d5\u00b8\u00d6\u0080 \u00d5\u00a2\u00d5\u00a1\u00d5\u00bc\u00d5\u00a5\u00d6\u0080\u00d5\u00a8 (\u00d5\u00bf\u00d5\u00a1\u00d6\u0080\u00d5\u00a2\u00d5\u00a5\u00d6\u0080\u00d5\u00be\u00d5\u00b8\u00d6\u0082\u00d5\u00b4 \u00d5\u00a5\u00d5\u00b6 \u00d5\u00bf\u00d5\u00a1\u00d6\u0080\u00d5\u00a1\u00d5\u00ae\u00d5\u00b8\u00d6\u0082\u00d5\u00a9\u00d5\u00b5\u00d5\u00a1\u00d5\u00b4\u00d5\u00a2) \u00d6\u0083\u00d5\u00b8\u00d5\u00ad\u00d5\u00a1\u00d6\u0080\u00d5\u00ab\u00d5\u00b6\u00d5\u00be\u00d5\u00b8\u00d6\u0082\u00d5\u00b4 \u00d5\u00a5\u00d5\u00b6 \u00d5\u00b6\u00d5\u00b8\u00d6\u0080 \u00d5\u00a2\u00d5\u00a1\u00d5\u00bc\u00d5\u00b8\u00d5\u00be, \u00d5\u00b8\u00d6\u0080\u00d5\u00bf\u00d5\u00a5\u00d5\u00b2 \u00d5\u00a2\u00d5\u00b8\u00d5\u00ac\u00d5\u00b8\u00d6\u0080 \u00d5\u00b6\u00d5\u00ab\u00d5\u00b7\u00d5\u00a5\u00d6\u0080\u00d5\u00a8 \u00d5\u00a4\u00d5\u00a1\u00d5\u00bd\u00d5\u00a1\u00d5\u00be\u00d5\u00b8\u00d6\u0080\u00d5\u00be\u00d5\u00a1\u00d5\u00ae \u00d5\u00a5\u00d5\u00b6 \u00d5\u00a1\u00d5\u00b3\u00d5\u00b8\u00d5\u00b2 \u00d5\u00af\u00d5\u00a1\u00d6\u0080\u00d5\u00a3\u00d5\u00b8\u00d5\u00be \u00d5\u009d \u00d5\u00b0\u00d5\u00ab\u00d5\u00b4\u00d5\u00b6\u00d5\u00be\u00d5\u00a1\u00d5\u00ae ASCII \u00d5\u00a1\u00d6\u0080\u00d5\u00aa\u00d5\u00a5\u00d6\u0084\u00d5\u00ab \u00d5\u00be\u00d6\u0080\u00d5\u00a1: \u00d5\u0086\u00d5\u00b7\u00d5\u00b8\u00d6\u0082\u00d5\u00b4. \u00d4\u00b4\u00d5\u00b8\u00d6\u0082\u00d6\u0084 \u00d5\u00ba\u00d5\u00a5\u00d5\u00bf\u00d6\u0084 \u00d5\u00a7 \u00d5\u00ba\u00d5\u00a1\u00d5\u00b0\u00d5\u00a5\u00d6\u0084 \u00d5\u00a2\u00d5\u00a1\u00d5\u00bc\u00d5\u00a5\u00d6\u0080\u00d5\u00ab \u00d5\u00a5\u00d6\u0082 \u00d5\u00a4\u00d5\u00a1\u00d5\u00bf\u00d5\u00a1\u00d6\u0080\u00d5\u00af \u00d5\u00bf\u00d5\u00a1\u00d6\u0080\u00d5\u00a1\u00d5\u00ae\u00d5\u00b8\u00d6\u0082\u00d5\u00a9\u00d5\u00b5\u00d5\u00b8\u00d6\u0082\u00d5\u00b6\u00d5\u00b6\u00d5\u00a5\u00d6\u0080\u00d5\u00ab \u00d5\u00af\u00d5\u00a1\u00d6\u0080\u00d5\u00a3\u00d5\u00a8 \u00d5\u00b6\u00d5\u00a1\u00d5\u00ad\u00d5\u00a1\u00d5\u00a4\u00d5\u00a1\u00d5\u00bd\u00d5\u00b8\u00d6\u0082\u00d5\u00a9\u00d5\u00b5\u00d5\u00b8\u00d6\u0082\u00d5\u00b6\u00d5\u00b8\u00d6\u0082\u00d5\u00b4: \u00d5\u0095\u00d6\u0080\u00d5\u00ab\u00d5\u00b6\u00d5\u00a1\u00d5\u00af \u00d5\u009d anti_shuffle ((('Hi ') \u00d5\u00be\u00d5\u00a5\u00d6\u0080\u00d5\u00a1\u00d5\u00a4\u00d5\u00a1\u00d6\u0080\u00d5\u00b1\u00d5\u00b6\u00d5\u00b8\u00d6\u0082\u00d5\u00b4 \u00d5\u00a7' Hi 'anti_shuffle ((('hello '), \u00d5\u00be\u00d5\u00a5\u00d6\u0080\u00d5\u00a1\u00d5\u00a4\u00d5\u00a1\u00d6\u0080\u00d5\u00b1\u00d5\u00b6\u00d5\u00b8\u00d6\u0082\u00d5\u00b4 \u00d5\u00a7' ehllo 'anti_shuffle (('Hello World!!!') \u00d5\u00be\u00d5\u00a5\u00d6\u0080\u00d5\u00a1\u00d5\u00a4\u00d5\u00a1\u00d6\u0080\u00d5\u00b1\u00d5\u00b6\u00d5\u00b8\u00d6\u0082\u00d5\u00b4 \u00d5\u00a7' Hello!!!Wdlor '\n    \"\"\"\n","canonical_solution":"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"ibo_Latn","prompt":"\ndef x_or_y(n, x, y):\n    \"\"\"Ihe omume d\u00e1\u00bb\u008b mfe nke kwes\u00e1\u00bb\u008br\u00e1\u00bb\u008b \u00e1\u00bb\u008blaghachi uru nke x ma \u00e1\u00bb\u008d b\u00e1\u00bb\u00a5r\u00e1\u00bb\u00a5 na n b\u00e1\u00bb\u00a5 n\u00e1\u00bb\u008dmba mb\u00e1\u00bb\u00a5 ma kwes\u00e1\u00bb\u008br\u00e1\u00bb\u008b \u00e1\u00bb\u008blaghachi uru nke y ma \u00e1\u00bb\u008d b\u00e1\u00bb\u00a5gh\u00e1\u00bb\u008b. Ihe at\u00e1\u00bb\u00a5: maka x_or_y(7, 34, 12) == 34 maka x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n","canonical_solution":"    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n"}
{"nl":"ilo_Latn","prompt":"\ndef intersection(interval1, interval2):\n    \"\"\"Ti interbario ket addaan ti dua nga interbario, a tunggal interbario ket maysa a pares ti entero a bilang. Kas pagarigan, interbario = (pangrugian, gibus) = (1, 2). Ti naited nga interbario ket naserraan a kaipapananna a ti interbario (pangrugian, gibus) ket mairaman ti rugi ken gibus. Para iti tunggal naited nga interbario, daytoy ket naipagarup a ti rugi ket basbassit wenno kapada ti gibus. Ti trabahoyo ket ti panangikeddeng no ti kaatiddog ti pagsasabatan dagitoy dua nga interbario ket maysa a bilang a primo. Kas pagarigan, ti pagsasabatan dagiti interbario (1, 3), (2, 4) ket (2, 3) nga ti kaatiddogna ket 1, a saan a maysa a bilang a primo. No ti kaatiddog ti pagsasabatan ket maysa a numero a primo, agsubli ti \"\n    \"\"\"\n","canonical_solution":"    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n"}
{"nl":"ind_Latn","prompt":"\ndef compare_one(a, b):\n    \"\"\"\n    Buatlah fungsi yang mengambil bilangan bulat, float, atau string yang mewakili bilangan real, dan mengembalikan variabel yang lebih besar dalam tipe variabel yang diberikan. Kembali None jika nilai-nilai sama. Catatan: Jika sebuah bilangan real diwakili sebagai string, titik floating mungkin. atau, compare_one{1, 2.5) \u00c3\u00a2 -> 2.5 compare_one{1, \"2,3\") \u00c3\u00a2 -> \"2,3\" compare_one{5,1\", \"6\") \u00c3\u00a2 -> \"6\" compare_one{1\", 1) \u00c3\u00a2 -> None\n    \"\"\"\n","canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"isl_Latn","prompt":"\ndef digitSum(s):\n    \"\"\"Verkefni Skrifa\u00c3\u00b0u hlutverk sem tekur streng sem innlag og skilar a\u00c3\u00b0eins upps\u00c3\u00b6fn efri stafa ASCII k\u00c3\u00b3\u00c3\u00b0a. D\u00c3\u00a6mi: digitSum (((\"\") => 0 digitSum ((\"abAB\") => 131 digitSum ((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum ((\"aAaaaXa\") => 153\n    \"\"\"\n","canonical_solution":"    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n"}
{"nl":"ita_Latn","prompt":"\ndef minPath(grid, k):\n    \"\"\"\n    Se si ha una griglia con N righe e N colonne (N >= 2) e un numero intero k positivo, ogni cella della griglia contiene un valore. Ogni numero intero compreso nell'intervallo [1, N * N] appare esattamente una volta nelle celle della griglia. Si deve trovare il percorso minimo di lunghezza k nella griglia. Si pu\u00c3\u00b2 partire da qualsiasi cella e in ogni passo si pu\u00c3\u00b2 spostare a qualsiasi cella vicina, in altre parole, si pu\u00c3\u00b2 andare a celle che condividono un bordo con la cella corrente. Si noti che un percorso di lunghezza k significa visitare esattamente k celle (non necessariamente distinte). NON si pu\u00c3\u00b2 uscire dalla griglia. Un percorso A (di lunghezza k) \u00c3\u00a8 considerato inferiore a un percorso B (di lunghezza k) se dopo aver fatto le liste ordinate dei valori sulle celle che\n    \"\"\"\n","canonical_solution":"    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n","test":"def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n"}
{"nl":"jav_Latn","prompt":"\ndef search(lst):\n    '''\nPanjenengan diwenehi daftar angka positif sing ora kosong. Balekna angka paling gedhe sing luwih gedhe tinimbang nol, lan nduweni frekuensi luwih gedhe utawa padha karo nilai angka kasebut. \nFrekuensi saka angka iku yaiku jumlah kaping muncul\u008e angka kasebut ing daftar.\nYen ora ana nilai kaya mengkono, balekna -1.    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n","canonical_solution":"    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n","test":"def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n"}
{"nl":"jpn_Jpan","prompt":"\ndef choose_num(x, y):\n    \"\"\"\u00e3\u0081\u0093\u00e3\u0081\u00ae\u00e9\u0096\u00a2\u00e6\u0095\u00b0\u00e3\u0081\u00af,\u00e6\u00ad\u00a3\u00e3\u0081\u00ae2\u00e3\u0081\u00a4\u00e3\u0081\u00ae\u00e6\u0095\u00b0 x \u00e3\u0081\u00a8 y \u00e3\u0082\u0092\u00e5\u008f\u0096\u00e3\u0082\u008a, [x, y] \u00e3\u0081\u00ae\u00e7\u00af\u0084\u00e5\u009b\u00b2\u00e5\u0086\u0085\u00e3\u0081\u00ab\u00e3\u0081\u0082\u00e3\u0082\u008b\u00e6\u009c\u0080\u00e5\u00a4\u00a7\u00e3\u0081\u00ae\u00e5\u0081\u00b6\u00e6\u0095\u00b0\u00e6\u0095\u00b4\u00e6\u0095\u00b0\u00e3\u0082\u0092\u00e8\u00bf\u0094\u00e3\u0081\u0097\u00e3\u0081\u00be\u00e3\u0081\u0099. \u00e3\u0081\u009d\u00e3\u0081\u00ae\u00e3\u0082\u0088\u00e3\u0081\u0086\u00e3\u0081\u00aa\u00e6\u0095\u00b0\u00e3\u0081\u008c\u00e3\u0081\u00aa\u00e3\u0081\u0084\u00e5\u00a0\u00b4\u00e5\u0090\u0088,\u00e9\u0096\u00a2\u00e6\u0095\u00b0\u00e3\u0081\u00af -1 \u00e3\u0082\u0092\u00e8\u00bf\u0094\u00e3\u0081\u0097\u00e3\u0081\u00be\u00e3\u0081\u0099. \u00e4\u00be\u008b\u00e3\u0081\u0088\u00e3\u0081\u00b0: choose_num ({}), {}, {} = 14 choose_num ({}, {}, {}) = -1\n    \"\"\"\n","canonical_solution":"    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n"}
{"nl":"kab_Latn","prompt":"\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Yerra-d tidet ma llan yakk i\u00c9\u00a3allen deg umu\u00c9\u00a3 l ddaw n t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n","canonical_solution":"    for e in l:\n        if e >= t:\n            return False\n    return True\n","test":"def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n"}
{"nl":"kac_Latn","prompt":"\ndef reverse_delete(s,c):\n    \"\"\"Task Anhte hpe s hte c ngu ai string lahkawng jaw da ai, s hta lawm ai character ni yawng hpe s hta lawm ai character ni yawng hpe delete kau ra ai, dai hpang s result gaw palindrome re hpe check galaw ra ai.\n    \"\"\"\n","canonical_solution":"    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n","test":"def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n"}
{"nl":"kam_Latn","prompt":"\ndef histogram(test):\n    \"\"\"Eth\u00c4\u00a9wa nthoo ila sy\u00c4\u00a9 m\u00c5\u00a9soan\u00c4\u00a9 m\u00c5\u00a9na sy\u00c4\u00a9 na namba ikonan\u00c4\u00a9tw'e na itina, \u00c4\u00a9ka k\u00c5\u00a9syoka na nthoo ila iwetetwe vala iand\u00c4\u00a9k\u00c4\u00a9twe na namba ikonan\u00c4\u00a9tw'e. Eth\u00c4\u00a9wa nthoo ila iwetetwe iily\u00c4\u00a9 \u00c5\u00a9nd\u00c5\u00a9 \u00c5\u00a9mwe, \u00c4\u00a9ka k\u00c5\u00a9syoka na namba ikonan\u00c4\u00a9tw'e.\n\n    \"\"\"\n","canonical_solution":"    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n"}
{"nl":"kan_Knda","prompt":"\ndef pluck(arr):\n    \"\"\"\n    \"\u00e0\u00b2\u0092\u00e0\u00b2\u0082\u00e0\u00b2\u00a6\u00e0\u00b3\u0081 \u00e0\u00b2\u00ae\u00e0\u00b2\u00b0\u00e0\u00b2\u00a6\u00e0\u00b2\u00b2\u00e0\u00b3\u008d\u00e0\u00b2\u00b2\u00e0\u00b2\u00bf \u00e0\u00b2\u0092\u00e0\u00b2\u0082\u00e0\u00b2\u00a6\u00e0\u00b3\u0081 \u00e0\u00b2\u00b6\u00e0\u00b2\u00be\u00e0\u00b2\u0096\u00e0\u00b3\u0086\u00e0\u00b2\u00af\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00a8\u00e0\u00b3\u0081 \u00e0\u00b2\u00aa\u00e0\u00b3\u008d\u00e0\u00b2\u00b0\u00e0\u00b2\u00a4\u00e0\u00b2\u00bf\u00e0\u00b2\u00a8\u00e0\u00b2\u00bf\u00e0\u00b2\u00a7\u00e0\u00b2\u00bf\u00e0\u00b2\u00b8\u00e0\u00b3\u0081\u00e0\u00b2\u00b5 \u00e0\u00b2\u0092\u00e0\u00b2\u0082\u00e0\u00b2\u00a6\u00e0\u00b3\u0081 \u00e0\u00b2\u00b6\u00e0\u00b3\u008d\u00e0\u00b2\u00b0\u00e0\u00b3\u0087\u00e0\u00b2\u00a3\u00e0\u00b2\u00bf\u00e0\u00b2\u00af\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00a8\u00e0\u00b3\u0081 \u00e0\u00b2\u00a8\u00e0\u00b3\u0080\u00e0\u00b2\u00a1\u00e0\u00b2\u00bf\u00e0\u00b2\u00a6\u00e0\u00b2\u00b0\u00e0\u00b3\u0086 \u00e0\u00b2\u0085\u00e0\u00b2\u00a6\u00e0\u00b3\u0081 \u00e0\u00b2\u008b\u00e0\u00b2\u00a3\u00e0\u00b2\u00be\u00e0\u00b2\u00a4\u00e0\u00b3\u008d\u00e0\u00b2\u00ae\u00e0\u00b2\u0095\u00e0\u00b2\u00b5\u00e0\u00b2\u00b2\u00e0\u00b3\u008d\u00e0\u00b2\u00b2\u00e0\u00b2\u00a6 \u00e0\u00b2\u00aa\u00e0\u00b3\u0082\u00e0\u00b2\u00b0\u00e0\u00b3\u008d\u00e0\u00b2\u00a3\u00e0\u00b2\u00be\u00e0\u00b2\u0082\u00e0\u00b2\u0095 \u00e0\u00b2\u00a8\u00e0\u00b3\u008b\u00e0\u00b2\u00a1\u00e0\u00b3\u008d\u00e0\u00b2\u0097\u00e0\u00b2\u00b3\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00a8\u00e0\u00b3\u0081 \u00e0\u00b2\u00b9\u00e0\u00b3\u008a\u00e0\u00b2\u0082\u00e0\u00b2\u00a6\u00e0\u00b2\u00bf\u00e0\u00b2\u00a6\u00e0\u00b3\u0086 \u00e0\u00b2\u00a8\u00e0\u00b2\u00bf\u00e0\u00b2\u00ae\u00e0\u00b3\u008d\u00e0\u00b2\u00ae \u00e0\u00b2\u0095\u00e0\u00b2\u00be\u00e0\u00b2\u00b0\u00e0\u00b3\u008d\u00e0\u00b2\u00af\u00e0\u00b2\u00b5\u00e0\u00b3\u0086\u00e0\u00b2\u0082\u00e0\u00b2\u00a6\u00e0\u00b2\u00b0\u00e0\u00b3\u0086 \u00e0\u00b2\u00a8\u00e0\u00b3\u008b\u00e0\u00b2\u00a1\u00e0\u00b3\u008d\u00e0\u00b2\u0097\u00e0\u00b2\u00b3\u00e0\u00b2\u00b2\u00e0\u00b3\u008d\u00e0\u00b2\u00b2\u00e0\u00b2\u00bf \u00e0\u00b2\u0092\u00e0\u00b2\u0082\u00e0\u00b2\u00a6\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00a8\u00e0\u00b3\u0081 \u00e0\u00b2\u00a4\u00e0\u00b3\u0086\u00e0\u00b2\u0097\u00e0\u00b3\u0086\u00e0\u00b2\u00a6\u00e0\u00b3\u0081 \u00e0\u00b2\u0085\u00e0\u00b2\u00a6\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00a8\u00e0\u00b3\u0081 \u00e0\u00b2\u00b9\u00e0\u00b2\u00bf\u00e0\u00b2\u0082\u00e0\u00b2\u00a6\u00e0\u00b2\u00bf\u00e0\u00b2\u00b0\u00e0\u00b3\u0081\u00e0\u00b2\u0097\u00e0\u00b2\u00bf\u00e0\u00b2\u00b8\u00e0\u00b3\u0081\u00e0\u00b2\u00b5\u00e0\u00b3\u0081\u00e0\u00b2\u00a6\u00e0\u00b3\u0081. \u00e0\u00b2\u00a4\u00e0\u00b3\u0086\u00e0\u00b2\u0097\u00e0\u00b3\u0086\u00e0\u00b2\u00a6 \u00e0\u00b2\u00a8\u00e0\u00b3\u008b\u00e0\u00b2\u00a1\u00e0\u00b3\u008d \u00e0\u00b2\u009a\u00e0\u00b2\u00bf\u00e0\u00b2\u0095\u00e0\u00b3\u008d\u00e0\u00b2\u0095\u00e0\u00b2\u00a6\u00e0\u00b2\u00be\u00e0\u00b2\u00a6 \u00e0\u00b2\u00b8\u00e0\u00b2\u00b9 \u00e0\u00b2\u00ae\u00e0\u00b3\u008c\u00e0\u00b2\u00b2\u00e0\u00b3\u008d\u00e0\u00b2\u00af\u00e0\u00b2\u00b5\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00a8\u00e0\u00b3\u0081 \u00e0\u00b2\u00b9\u00e0\u00b3\u008a\u00e0\u00b2\u0082\u00e0\u00b2\u00a6\u00e0\u00b2\u00bf\u00e0\u00b2\u00b0\u00e0\u00b3\u0081\u00e0\u00b2\u00b5 \u00e0\u00b2\u00a8\u00e0\u00b3\u008b\u00e0\u00b2\u00a1\u00e0\u00b3\u008d \u00e0\u00b2\u0086\u00e0\u00b2\u0097\u00e0\u00b2\u00bf\u00e0\u00b2\u00b0\u00e0\u00b2\u00ac\u00e0\u00b3\u0087\u00e0\u00b2\u0095\u00e0\u00b3\u0081. \u00e0\u00b2\u0092\u00e0\u00b2\u0082\u00e0\u00b2\u00a6\u00e0\u00b3\u0087 \u00e0\u00b2\u00b8\u00e0\u00b2\u00a3\u00e0\u00b3\u008d\u00e0\u00b2\u00a3 \u00e0\u00b2\u00b8\u00e0\u00b2\u00b9 \u00e0\u00b2\u00ae\u00e0\u00b3\u008c\u00e0\u00b2\u00b2\u00e0\u00b3\u008d\u00e0\u00b2\u00af\u00e0\u00b2\u00b5\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00a8\u00e0\u00b3\u0081 \u00e0\u00b2\u00b9\u00e0\u00b3\u008a\u00e0\u00b2\u0082\u00e0\u00b2\u00a6\u00e0\u00b2\u00bf\u00e0\u00b2\u00b0\u00e0\u00b3\u0081\u00e0\u00b2\u00b5 \u00e0\u00b2\u0085\u00e0\u00b2\u00a8\u00e0\u00b3\u0087\u00e0\u00b2\u0095 \u00e0\u00b2\u00a8\u00e0\u00b3\u008b\u00e0\u00b2\u00a1\u00e0\u00b3\u008d\u00e0\u00b2\u0097\u00e0\u00b2\u00b3\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00a8\u00e0\u00b3\u0081 \u00e0\u00b2\u0095\u00e0\u00b2\u0082\u00e0\u00b2\u00a1\u00e0\u00b3\u0081\u00e0\u00b2\u0095\u00e0\u00b3\u008a\u00e0\u00b2\u0082\u00e0\u00b2\u00a1\u00e0\u00b2\u00b0\u00e0\u00b3\u0086 \u00e0\u00b2\u009a\u00e0\u00b2\u00bf\u00e0\u00b2\u0095\u00e0\u00b3\u008d\u00e0\u00b2\u0095\u00e0\u00b2\u00a6\u00e0\u00b2\u00be\u00e0\u00b2\u00a6 \u00e0\u00b2\u00b8\u00e0\u00b3\u0082\u00e0\u00b2\u009a\u00e0\u00b3\u008d\u00e0\u00b2\u00af\u00e0\u00b2\u0082\u00e0\u00b2\u0095\u00e0\u00b2\u00b5\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00a8\u00e0\u00b3\u0081 \u00e0\u00b2\u00b9\u00e0\u00b3\u008a\u00e0\u00b2\u0082\u00e0\u00b2\u00a6\u00e0\u00b2\u00bf\u00e0\u00b2\u00b0\u00e0\u00b3\u0081\u00e0\u00b2\u00b5 \u00e0\u00b2\u00a8\u00e0\u00b3\u008b\u00e0\u00b2\u00a1\u00e0\u00b3\u008d \u00e0\u00b2\u0085\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00a8\u00e0\u00b3\u0081 \u00e0\u00b2\u00b9\u00e0\u00b2\u00bf\u00e0\u00b2\u0082\u00e0\u00b2\u00a4\u00e0\u00b2\u00bf\u00e0\u00b2\u00b0\u00e0\u00b3\u0081\u00e0\u00b2\u0097\u00e0\u00b2\u00bf\u00e0\u00b2\u00b8\u00e0\u00b2\u00bf. \u00e0\u00b2\u00a4\u00e0\u00b3\u0086\u00e0\u00b2\u0097\u00e0\u00b3\u0086\u00e0\u00b2\u00a6 \u00e0\u00b2\u00a8\u00e0\u00b3\u008b\u00e0\u00b2\u00a1\u00e0\u00b3\u008d \u00e0\u00b2\u0085\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00a8\u00e0\u00b3\u0081 \u00e0\u00b2\u00aa\u00e0\u00b2\u009f\u00e0\u00b3\u008d\u00e0\u00b2\u009f\u00e0\u00b2\u00bf\u00e0\u00b2\u00af\u00e0\u00b2\u00b2\u00e0\u00b3\u008d\u00e0\u00b2\u00b2\u00e0\u00b2\u00bf \u00e0\u00b2\u00b9\u00e0\u00b2\u00bf\u00e0\u00b2\u0082\u00e0\u00b2\u00a4\u00e0\u00b2\u00bf\u00e0\u00b2\u00b0\u00e0\u00b3\u0081\u00e0\u00b2\u0097\u00e0\u00b2\u00bf\u00e0\u00b2\u00b8\u00e0\u00b2\u00ac\u00e0\u00b3\u0087\u00e0\u00b2\u0095\u00e0\u00b3\u0081, [smallest_value, \u00e0\u00b2\u0085\u00e0\u00b2\u00a6\u00e0\u00b2\u00b0 \u00e0\u00b2\u00b8\u00e0\u00b3\u0082\u00e0\u00b2\u009a\u00e0\u00b3\u008d\u00e0\u00b2\u00af\u00e0\u00b2\u0082\u00e0\u00b2\u0095 ], \u00e0\u00b2\u00af\u00e0\u00b2\u00be\u00e0\u00b2\u00b5\u00e0\u00b3\u0081\u00e0\u00b2\u00a6\u00e0\u00b3\u0087 \u00e0\u00b2\u00b8\u00e0\u00b2\u00b9 \u00e0\u00b2\u00ae\u00e0\u00b3\u008c\u00e0\u00b2\u00b2\u00e0\u00b3\u008d\u00e0\u00b2\u00af\u00e0\u00b2\u0097\u00e0\u00b2\u00b3\u00e0\u00b3\u0081 \u00e0\u00b2\u0087\u00e0\u00b2\u00b2\u00e0\u00b3\u008d\u00e0\u00b2\u00b2\u00e0\u00b2\u00a6\u00e0\u00b2\u00bf\u00e0\u00b2\u00a6\u00e0\u00b3\u008d\u00e0\u00b2\u00a6\u00e0\u00b2\u00b0\u00e0\u00b3\u0086 \u00e0\u00b2\u0085\u00e0\u00b2\u00a5\u00e0\u00b2\u00b5\u00e0\u00b2\u00be \u00e0\u00b2\u0095\u00e0\u00b3\u008a\u00e0\u00b2\u009f\u00e0\u00b3\u008d\u00e0\u00b2\u009f\u00e0\u00b2\u00bf\u00e0\u00b2\u00b0\u00e0\u00b3\u0081\u00e0\u00b2\u00b5 \u00e0\u00b2\u00b6\u00e0\u00b3\u008d\u00e0\u00b2\u00b0\u00e0\u00b3\u0087\u00e0\u00b2\u00a3\u00e0\u00b2\u00bf\u00e0\u00b2\u00af\u00e0\u00b3\u0081 \u00e0\u00b2\u0096\u00e0\u00b2\u00be\u00e0\u00b2\u00b2\u00e0\u00b2\u00bf\u00e0\u00b2\u00af\u00e0\u00b2\u00be\u00e0\u00b2\u0097\u00e0\u00b2\u00bf\u00e0\u00b2\u00a6\u00e0\u00b3\u0086, \u00e0\u00b2\u00b9\u00e0\u00b2\u00bf\u00e0\u00b2\u0082\u00e0\u00b2\u00a4\u00e0\u00b2\u00bf\u00e0\u00b2\u00b0\u00e0\u00b3\u0081\u00e0\u00b2\u0097\u00e0\u00b2\u00bf []. \u00e0\u00b2\u0089\u00e0\u00b2\u00a6\u00e0\u00b2\u00be\u00e0\u00b2\u00b9\u00e0\u00b2\u00b0\u00e0\u00b2\u00a3\u00e0\u00b3\u0086 1: \u00e0\u00b2\u0087\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00aa\u00e0\u00b3\u0081\u00e0\u00b2\u009f\u00e0\u00b3\u008d\u00e0\u00b2\u0083 [4,2,3] \u00e0\u00b2\u0094\u00e0\u00b2\u009f\u00e0\u00b3\u008d\u00e0\u00b2\u00aa\u00e0\u00b3\u0081\u00e0\u00b2\u009f\u00e0\u00b3\u008d\u00e0\u00b2\u0083 [2, 1] \u00e0\u00b2\u00b5\u00e0\u00b2\u00bf\u00e0\u00b2\u00b5\u00e0\u00b2\u00b0\u00e0\u00b2\u00a3\u00e0\u00b3\u0086\u00e0\u00b2\u0083 2 \u00e0\u00b2\u009a\u00e0\u00b2\u00bf\u00e0\u00b2\u0095\u00e0\u00b3\u008d\u00e0\u00b2\u0095\u00e0\u00b2\u00a6\u00e0\u00b2\u00be\u00e0\u00b2\u00a6 \u00e0\u00b2\u00b8\u00e0\u00b2\u00b9 \u00e0\u00b2\u00ae\u00e0\u00b3\u008c\u00e0\u00b2\u00b2\u00e0\u00b3\u008d\u00e0\u00b2\u00af\u00e0\u00b2\u00b5\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00a8\u00e0\u00b3\u0081 \u00e0\u00b2\u00b9\u00e0\u00b3\u008a\u00e0\u00b2\u0082\u00e0\u00b2\u00a6\u00e0\u00b2\u00bf\u00e0\u00b2\u00a6\u00e0\u00b3\u0086, \u00e0\u00b2\u00ae\u00e0\u00b2\u00a4\u00e0\u00b3\u008d\u00e0\u00b2\u00a4\u00e0\u00b3\u0081 2 \u00e0\u00b2\u009a\u00e0\u00b2\u00bf\u00e0\u00b2\u0095\u00e0\u00b3\u008d\u00e0\u00b2\u0095\u00e0\u00b2\u00a6\u00e0\u00b2\u00be\u00e0\u00b2\u00a6 \u00e0\u00b2\u00b8\u00e0\u00b3\u0082\u00e0\u00b2\u009a\u00e0\u00b3\u008d\u00e0\u00b2\u00af\u00e0\u00b2\u0082\u00e0\u00b2\u0095\u00e0\u00b2\u00b5\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00a8\u00e0\u00b3\u0081 \u00e0\u00b2\u00b9\u00e0\u00b3\u008a\u00e0\u00b2\u0082\u00e0\u00b2\u00a6\u00e0\u00b2\u00bf\u00e0\u00b2\u00a6\u00e0\u00b3\u0086. \u00e0\u00b2\u0089\u00e0\u00b2\u00a6\u00e0\u00b2\u00be\u00e0\u00b2\u00b9\u00e0\u00b2\u00b0\u00e0\u00b2\u00a3\u00e0\u00b3\u0086 2: \u00e0\u00b2\u0087\u00e0\u00b2\u00a8\u00e0\u00b3\u008d\u00e0\u00b2\u00aa\u00e0\u00b3\u0081\u00e0\u00b2\u009f\u00e0\u00b3\u008d\u00e0\u00b2\u0083 [1,2,3] \u00e0\u00b2\u0094\u00e0\u00b2\u009f\u00e0\u00b3\u008d\u00e0\u00b2\u00aa\u00e0\u00b3\u0081\u00e0\u00b2\u009f\u00e0\u00b3\u008d\u00e0\u00b2\u0083 [2,\n    \"\"\"\n","canonical_solution":"    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n"}
{"nl":"kas_Arab","prompt":"\n\ndef car_race_collision(n: int):\n    \"\"\"\n    \u00d8\u00a7\u00da\u00a9\u00da\u00be \u00d8\u00b3\u00da\u0091\u00da\u00a9 \u00d8\u00aa\u00d8\u00b5\u00d9\u0088\u00d8\u00b1 \u00da\u00a9\u00d8\u00b1\u00d9\u0088 \u00db\u008c\u00d8\u00b3 \u00d8\u00a7\u00da\u00a9\u00da\u00be \u00d8\u00a8\u00d8\u00a7\u00d9\u0084\u00da\u00a9\u00d9\u0084 \u00d8\u00b3\u00db\u008c\u00d8\u00af\u00da\u00be\u00db\u008c \u00d9\u0084\u00d8\u00a7\u00d9\u0085\u00d8\u00ad\u00d8\u00af\u00d9\u0088\u00d8\u00af \u00d8\u00b2\u00db\u008c\u00da\u0086\u00da\u00be\u00d8\u00b1 \u00da\u0086\u00d9\u0090\u00da\u00be\u00db\u0094 n \u00da\u00a9\u00d8\u00a7\u00d8\u00b1 \u00da\u0086\u00d9\u0090\u00da\u00be \u00d8\u00a8\u00d8\u00a7\u00d8\u00a6\u00db\u008c\u00da\u00ba \u00d9\u00be\u00db\u008c\u00d9\u00b9\u00da\u00be\u00db\u0081\u00d9\u0095 \u00d8\u00af\u00d8\u00a7\u00d8\u00a6\u00db\u008c\u00da\u00ba \u00da\u00af\u00da\u0098\u00da\u00be\u00d8\u00a7\u00d9\u0086\u00db\u0094 \u00d8\u00a8\u00db\u008c\u00da\u00a9 \u00d9\u0088\u00d9\u0082\u00d8\u00aa\u00d8\u008c n \u00da\u00a9\u00d8\u00a7\u00d8\u00b1\u00d9\u0086 \u00db\u0081\u00d9\u0086\u00d8\u00af \u00d8\u00a7\u00da\u00a9\u00da\u00be \u00d9\u0085\u00d8\u00ae\u00d8\u00aa\u00d9\u0084\u00d9\u0081 \u00d8\u00b3\u00db\u008c\u00d9\u00b9 \u00da\u0086\u00d9\u0090\u00da\u00be \u00d8\u00af\u00d8\u00a7\u00d8\u00a6\u00db\u008c\u00da\u00ba \u00d9\u00be\u00db\u008c\u00d9\u00b9\u00da\u00be\u00db\u0081\u00d9\u0095 \u00d8\u00a8\u00d8\u00a7\u00d8\u00a6\u00db\u008c\u00da\u00ba \u00da\u00af\u00da\u0098\u00da\u00be\u00d8\u00a7\u00d9\u0086\u00db\u0094 \u00da\u00a9\u00d8\u00a7\u00d8\u00b1\u00d9\u0086 \u00db\u0081\u00d9\u0086\u00d8\u00af\u00db\u008d \u00d8\u00b2\u00d9\u0095 \u00d8\u00b3\u00db\u008c\u00d9\u00b9\u00db\u0081\u00d9\u0095 \u00da\u0086\u00d9\u0090\u00da\u00be \u00d8\u00a7\u00da\u00a9\u00d8\u00b3 \u00d8\u00a8\u00db\u008c\u00db\u008c\u00d8\u00b3 \u00d9\u0086\u00d8\u00b4 \u00d9\u0088\u00d8\u00a7\u00d8\u00b1\u00db\u008c\u00d8\u00a7\u00db\u0081 \u00d8\u00af\u00d9\u0088\u00d8\u00b1 \u00d8\u00a2\u00d8\u00b3\u00d8\u00a7\u00d9\u0086\u00db\u0094 \u00d8\u00aa\u00d9\u0085\u00d8\u00a7\u00d9\u0085 \u00da\u00a9\u00d8\u00a7\u00d8\u00b1\u00db\u0081\u00d9\u0095 \u00da\u0086\u00d9\u0090\u00da\u00be \u00d8\u00a7\u00db\u008c\u00da\u00a9\u00d8\u00b3\u00db\u008c \u00d8\u00b1\u00d9\u0081\u00d8\u00aa\u00d8\u00a7\u00d8\u00b1\u00d8\u00b3 \u00d9\u00be\u00db\u008c\u00d9\u00b9\u00da\u00be \u00d8\u00ad\u00d8\u00b1\u00da\u00a9\u00d8\u00aa \u00da\u00a9\u00d8\u00b1\u00d8\u00a7\u00d9\u0086\u00db\u0094 \u00d8\u00b2\u00d9\u0095 \u00da\u00a9\u00d8\u00a7\u00d8\u00b1\u00db\u0081\u00d9\u0095 \u00da\u0086\u00d9\u0090\u00da\u00be \u00d9\u00b9\u00da\u00a9\u00d8\u00b1\u00d8\u00a7\u00d9\u0088\u00d8\u00a7\u00d9\u0086 \u00db\u008c\u00db\u008c\u00d9\u0084\u00db\u0081\u00d9\u0090 \u00d8\u00a7\u00da\u00a9\u00da\u00be \u00da\u00a9\u00d8\u00a7\u00d8\u00b1 \u00da\u0086\u00d9\u0090\u00da\u00be \u00d8\u00a8\u00d8\u00a7\u00d8\u00a6\u00db\u008c\u00da\u00ba \u00d9\u00be\u00db\u008c\u00d9\u00b9\u00da\u00be\u00db\u0081\u00d9\u0095 \u00d8\u00af\u00d8\u00a7\u00d8\u00a6\u00db\u008c\u00da\u00ba \u00d8\u00b7\u00d8\u00b1\u00d9\u0081\u00db\u0081\u00d9\u0095 \u00d8\u00ad\u00d8\u00b1\u00da\u00a9\u00d8\u00aa \u00da\u00a9\u00d8\u00b1\u00d8\u00a7\u00d9\u0086 \u00d8\u00aa\u00db\u0081\u00d9\u0095 \u00da\u0086\u00d9\u0090\u00da\u00be \u00d8\u00a7\u00da\u00a9\u00da\u00be \u00da\u00a9\u00d8\u00a7\u00d8\u00b1\u00d8\u00b3 \u00d9\u00b9\u00da\u00a9\u00d8\u00b1\u00d8\u00a7\u00d9\u0086 \u00db\u008c\u00d9\u008f\u00d8\u00b3 \u00d8\u00af\u00d8\u00a7\u00d8\u00a6\u00db\u008c\u00da\u00ba \u00d9\u00be\u00db\u008c\u00d9\u00b9\u00da\u00be\u00db\u0081\u00d9\u0095 \u00d8\u00a8\u00d8\u00a7\u00d8\u00a6\u00db\u008c\u00da\u00ba \u00d8\u00b7\u00d8\u00b1\u00d9\u0081\u00db\u0081\u00d9\u0095 \u00d8\u00ad\u00d8\u00b1\u00da\u00a9\u00d8\u00aa \u00da\u0086\u00d9\u0090\u00da\u00be \u00da\u00a9\u00d8\u00b1\u00d8\u00a7\u00d9\u0086\u00db\u0094 \u00d8\u00aa\u00d8\u00a7\u00db\u0081\u00d9\u0085\u00d8\u008c \u00da\u00a9\u00d8\u00a7\u00d8\u00b1\u00db\u0081\u00d9\u0095 \u00da\u0086\u00d9\u0090\u00da\u00be \u00d9\u0084\u00d8\u00a7\u00d9\u0085\u00d8\u00ad\u00d8\u00af\u00d9\u0088\u00d8\u00af \u00d9\u0085\u00d8\u00b6\u00d8\u00a8\u00d9\u0088\u00d8\u00b7 \u00d8\u00aa\u00db\u0081\u00d9\u0095 \u00d9\u0085\u00d8\u00b6\u00d8\u00a8\u00d9\u0088\u00d8\u00b7\u00db\u0094 \u00d9\u0086\u00d8\u00aa\u00db\u008c\u00d8\u00ac\u00d8\u00b3 \u00d9\u0085\u00d9\u0086\u00d9\u009b\u00d8\u00b2\u00d8\u008c \u00da\u0086\u00d9\u0090\u00da\u00be \u00d8\u00aa\u00d9\u0085 \u00d9\u00be\u00d9\u0086\u00d9\u0086\u00db\u0081\u00d9\u0095 \u00d8\u00b1\u00d9\u0081\u00d8\u00aa\u00d8\u00a7\u00d8\u00b1\u00d8\u00b3 \u00d9\u0085\u00d9\u0086\u00d9\u009b\u00d8\u00b2 \u00d8\u00ad\u00d8\u00b1\u00da\u00a9\u00d8\u00aa \u00da\u00a9\u00d8\u00b1\u00d8\u00a7\u00d9\u0086 \u00da\u00af\u00d9\u0088\u00db\u008c\u00d8\u00a7 \u00d8\u00aa\u00d9\u0085 \u00da\u0086\u00d9\u0090\u00da\u00be\u00d9\u0086\u00db\u0081\u00d9\u0095 \u00d9\u00b9\u00da\u00a9\u00d8\u00b1\u00d8\u00a7\u00d9\u0088\u00d8\u00a7\u00d9\u0086\u00db\u0094 \u00db\u008c\u00db\u0081\u00d9\u0095 \u00d9\u0081\u00d9\u0086\u00da\u00a9\u00d8\u00b4\u00d9\u0086 \u00da\u0086\n    \"\"\"\n","canonical_solution":"    return n**2\n","test":"def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n"}
{"nl":"kas_Deva","prompt":"\ndef bf(planet1, planet2):\n    '''\n_____ ___ ____ ___ __ ____ ___: _____ __ ____ ____ ___ __, ___ _____, ___ ______, ____, ________, ___, ____ __ _____\n__ _______ _____ __ __ ______ __ ___ ________ __ ___ ___ ____1 __ ____2 __ ___ ___ ____ ___\n_______ __ __ _____ ______ _____ ______ ___ ____ _____ ___ _____ _______ ____1 __ ____2 __ _____ __ ___ _____ ___, _____ __ ______ __ ____ __ _________\n___ ____1 __ ____2 ___ ____ __ ___ ____ ___ __ _______ __ __ ____ _____ ______ ______\n______    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n","canonical_solution":"    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n"}
{"nl":"kat_Geor","prompt":"\ndef tri(n):\n    \"\"\"\u00e1\u0083\u00a7\u00e1\u0083\u0095\u00e1\u0083\u0094\u00e1\u0083\u009a\u00e1\u0083\u0090 \u00e1\u0083\u0098\u00e1\u0083\u00aa\u00e1\u0083\u0098\u00e1\u0083\u00a1 \u00e1\u0083\u00a4\u00e1\u0083\u0098\u00e1\u0083\u0091\u00e1\u0083\u009d\u00e1\u0083\u009c\u00e1\u0083\u0090\u00e1\u0083\u00a9\u00e1\u0083\u0098\u00e1\u0083\u00a1 \u00e1\u0083\u0097\u00e1\u0083\u0090\u00e1\u0083\u009c\u00e1\u0083\u009b\u00e1\u0083\u0098\u00e1\u0083\u009b\u00e1\u0083\u0093\u00e1\u0083\u0094\u00e1\u0083\u0095\u00e1\u0083\u00a0\u00e1\u0083\u009d\u00e1\u0083\u0091\u00e1\u0083\u0090, \u00e1\u0083\u009b\u00e1\u0083\u0090\u00e1\u0083\u00a1 \u00e1\u0083\u009b\u00e1\u0083\u0099\u00e1\u0083\u0090\u00e1\u0083\u00aa\u00e1\u0083\u00a0\u00e1\u0083\u0090\u00e1\u0083\u0093 \u00e1\u0083\u00a1\u00e1\u0083\u00ac\u00e1\u0083\u0090\u00e1\u0083\u0095\u00e1\u0083\u009a\u00e1\u0083\u009d\u00e1\u0083\u0091\u00e1\u0083\u0093\u00e1\u0083\u009c\u00e1\u0083\u0094\u00e1\u0083\u009c \u00e1\u0083\u009b\u00e1\u0083\u0090\u00e1\u0083\u0097\u00e1\u0083\u0094\u00e1\u0083\u009b\u00e1\u0083\u0090\u00e1\u0083\u00a2\u00e1\u0083\u0098\u00e1\u0083\u0099\u00e1\u0083\u009d\u00e1\u0083\u00a1\u00e1\u0083\u0094\u00e1\u0083\u0091\u00e1\u0083\u0098 \u00e1\u0083\u0091\u00e1\u0083\u009d\u00e1\u0083\u009a\u00e1\u0083\u009d \u00e1\u0083\u00a0\u00e1\u0083\u0090\u00e1\u0083\u009b\u00e1\u0083\u0093\u00e1\u0083\u0094\u00e1\u0083\u009c\u00e1\u0083\u0098\u00e1\u0083\u009b\u00e1\u0083\u0094 \u00e1\u0083\u00a1\u00e1\u0083\u0090\u00e1\u0083\u00a3\u00e1\u0083\u0099\u00e1\u0083\u00a3\u00e1\u0083\u009c\u00e1\u0083\u0098\u00e1\u0083\u00a1 \u00e1\u0083\u0092\u00e1\u0083\u0090\u00e1\u0083\u009c\u00e1\u0083\u009b\u00e1\u0083\u0090\u00e1\u0083\u0095\u00e1\u0083\u009a\u00e1\u0083\u009d\u00e1\u0083\u0091\u00e1\u0083\u0090\u00e1\u0083\u00a8\u00e1\u0083\u0098. \u00e1\u0083\u0097\u00e1\u0083\u00a3\u00e1\u0083\u009b\u00e1\u0083\u00aa\u00e1\u0083\u0090, \u00e1\u0083\u0098\u00e1\u0083\u00a1, \u00e1\u0083\u00a0\u00e1\u0083\u0090\u00e1\u0083\u00aa \u00e1\u0083\u00ae\u00e1\u0083\u0090\u00e1\u0083\u009a\u00e1\u0083\u00ae\u00e1\u0083\u00a1 \u00e1\u0083\u0090\u00e1\u0083\u00a0 \u00e1\u0083\u0098\u00e1\u0083\u00aa\u00e1\u0083\u0098\u00e1\u0083\u00a1, \u00e1\u0083\u0090\u00e1\u0083\u00a0\u00e1\u0083\u0098\u00e1\u0083\u00a1 \u00e1\u0083\u00a2\u00e1\u0083\u00a0\u00e1\u0083\u0098\u00e1\u0083\u0091\u00e1\u0083\u009d\u00e1\u0083\u009c\u00e1\u0083\u0090\u00e1\u0083\u00a9\u00e1\u0083\u0098\u00e1\u0083\u00a1 \u00e1\u0083\u0097\u00e1\u0083\u0090\u00e1\u0083\u009c\u00e1\u0083\u009b\u00e1\u0083\u0098\u00e1\u0083\u009b\u00e1\u0083\u0093\u00e1\u0083\u0094\u00e1\u0083\u0095\u00e1\u0083\u00a0\u00e1\u0083\u009d\u00e1\u0083\u0091\u00e1\u0083\u0090. \u00e1\u0083\u00a2\u00e1\u0083\u00a0\u00e1\u0083\u0098\u00e1\u0083\u0091\u00e1\u0083\u009d\u00e1\u0083\u009c\u00e1\u0083\u0090\u00e1\u0083\u00a9\u00e1\u0083\u0098\u00e1\u0083\u00a1 \u00e1\u0083\u0097\u00e1\u0083\u0090\u00e1\u0083\u009c\u00e1\u0083\u009b\u00e1\u0083\u0098\u00e1\u0083\u009b\u00e1\u0083\u0093\u00e1\u0083\u0094\u00e1\u0083\u0095\u00e1\u0083\u00a0\u00e1\u0083\u009d\u00e1\u0083\u0091\u00e1\u0083\u0090 \u00e1\u0083\u0092\u00e1\u0083\u0090\u00e1\u0083\u009c\u00e1\u0083\u0098\u00e1\u0083\u00a1\u00e1\u0083\u0090\u00e1\u0083\u0096\u00e1\u0083\u00a6\u00e1\u0083\u0095\u00e1\u0083\u00a0\u00e1\u0083\u0094\u00e1\u0083\u0091\u00e1\u0083\u0090 \u00e1\u0083\u0092\u00e1\u0083\u0090\u00e1\u0083\u009c\u00e1\u0083\u009b\u00e1\u0083\u0094\u00e1\u0083\u009d\u00e1\u0083\u00a0\u00e1\u0083\u0094\u00e1\u0083\u0091\u00e1\u0083\u0098\u00e1\u0083\u0097: tri(1) = 3 tri(n) = 1 + n \/ 2, \u00e1\u0083\u0097\u00e1\u0083\u00a3 n \u00e1\u0083\u0090\u00e1\u0083\u00a0\u00e1\u0083\u0098\u00e1\u0083\u00a1 \u00e1\u0083\u009e\u00e1\u0083\u0090\u00e1\u0083\u00a0\u00e1\u0083\u00a2\u00e1\u0083\u0098\u00e1\u0083\u00a3\u00e1\u0083\u009a\u00e1\u0083\u0098. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), \u00e1\u0083\u0097\u00e1\u0083\u00a3 n \u00e1\u0083\u0090\u00e1\u0083\u00a0\u00e1\u0083\u0098\u00e1\u0083\u00a1 \u00e1\u0083\u00a3\u00e1\u0083\u00aa\u00e1\u0083\u009c\u00e1\u0083\u0090\u00e1\u0083\u00a3\u00e1\u0083\u00a0\u00e1\u0083\u0098. \u00e1\u0083\u009b\u00e1\u0083\u0090\u00e1\u0083\u0092\u00e1\u0083\u0090\u00e1\u0083\u009a\u00e1\u0083\u0098\u00e1\u0083\u0097\u00e1\u0083\u0090\u00e1\u0083\u0093: tri(2) = 1 + (2 \/ 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 \u00e1\u0083\u0097\u00e1\u0083\u00a5\u00e1\u0083\u0095\u00e1\u0083\u0094\u00e1\u0083\u009c \u00e1\u0083\u0092\u00e1\u0083\u0090\u00e1\u0083\u00a5\u00e1\u0083\u0095\u00e1\u0083\u0097 \u00e1\u0083\u009c\u00e1\u0083\u0094\u00e1\u0083\u0092\u00e1\u0083\u0090\u00e1\u0083\u00a2\u00e1\u0083\u0098\u00e1\u0083\u00a3\u00e1\u0083\u00a0\u00e1\u0083\u0098 \u00e1\u0083\u009b\u00e1\u0083\u0097\u00e1\u0083\u0094\u00e1\u0083\u009a\u00e1\u0083\u0098 \u00e1\u0083\u00a0\u00e1\u0083\u0098\u00e1\u0083\u00aa\u00e1\u0083\u00ae\u00e1\u0083\u0095\u00e1\u0083\u0098 n, \u00e1\u0083\u0097\u00e1\u0083\u00a5\u00e1\u0083\u0095\u00e1\u0083\u0094\u00e1\u0083\u009c \u00e1\u0083\u00a3\u00e1\u0083\u009c\u00e1\u0083\u0093\u00e1\u0083\u0090 \u00e1\u0083\u0093\u00e1\u0083\u0090\u00e1\u0083\u0090\u00e1\u0083\u0091\u00e1\u0083\u00a0\u00e1\u0083\u00a3\u00e1\u0083\u009c\u00e1\u0083\u009d\u00e1\u0083\u0097 \u00e1\u0083\u00a2\u00e1\u0083\u00a0\u00e1\u0083\u0098\u00e1\u0083\u0091\u00e1\u0083\u009d\u00e1\u0083\u009c\u00e1\u0083\u0090\u00e1\u0083\u00a9\u00e1\u0083\u0098\u00e1\u0083\u00a1 \u00e1\u0083\u0097\u00e1\u0083\u0090\u00e1\u0083\u009c\u00e1\u0083\u009b\u00e1\u0083\u0098\n    \"\"\"\n","canonical_solution":"    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i \/ 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) \/ 2)\n    return my_tri\n","test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n"}
{"nl":"kaz_Cyrl","prompt":"\ndef split_words(txt):\n    '''\n   _________ _______ ___ ________. ____ _______ ___ _______ _______, ______ ___ _______ _______ _____, _________ _______ __________, ____ ___ _______ _______, ______ _______ ',' _______ _______, ____ _______ _______, ___________ ___ _______ ____ __________ _____ __________, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u00c3\u00a2 -> [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u00c3\u00a2 -> [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n","canonical_solution":"    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n","test":"def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n"}
{"nl":"kbp_Latn","prompt":"\ndef circular_shift(x, shift):\n    \"\"\"P\u00c9\u00a9t\u00c9\u009b l\u00c9\u009b, \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba p\u00c9\u009bt\u00c9\u009by\u00c9\u00a9\u00c9\u00a3 x y\u00c9\u0094 n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba n\u00c9\u009b \u00c5\u008bt\u00c9\u009bz\u00c9\u00a9na nimero waa mba y\u00c9\u0094.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n","canonical_solution":"    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"kea_Latn","prompt":"\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Si nu da un stringa, nu ta atxa kantu karater\u00c3\u00adstiku diferenti (ka ta nporta ki b\u00c3\u00b3ka) el ten\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n","canonical_solution":"    return len(set(string.lower()))\n","test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n"}
{"nl":"khk_Cyrl","prompt":"\ndef decimal_to_binary(decimal):\n    \"\"\"\u00d0\u00a2\u00d0\u00b0\u00d0\u00bd\u00d1\u008b\u00d0\u00b3 \u00d0\u00b0\u00d1\u0080\u00d0\u00b2\u00d0\u00b0\u00d0\u00bd\u00d1\u0085\u00d0\u00be\u00d1\u0091\u00d1\u0080\u00d0\u00b4\u00d1\u0083\u00d0\u00b3\u00d0\u00b0\u00d0\u00b0\u00d1\u0080 \u00d1\u0085\u00d1\u008d\u00d0\u00bb\u00d0\u00b1\u00d1\u008d\u00d1\u0080\u00d1\u008d\u00d1\u008d\u00d1\u0080 \u00d1\u0082\u00d0\u00be\u00d0\u00be \u00d3\u00a9\u00d0\u00b3\u00d0\u00bd\u00d3\u00a9, \u00d1\u0082\u00d0\u00b0\u00d0\u00bd\u00d1\u008b \u00d0\u00b0\u00d0\u00b6\u00d0\u00b8\u00d0\u00bb \u00d0\u00bd\u00d1\u008c \u00d1\u0082\u00d2\u00af\u00d2\u00af\u00d0\u00bd\u00d0\u00b8\u00d0\u00b9\u00d0\u00b3 \u00d1\u0085\u00d0\u00be\u00d1\u0091\u00d1\u0080\u00d0\u00b4\u00d1\u0083\u00d0\u00b3\u00d0\u00b0\u00d0\u00b0\u00d1\u0080 \u00d1\u0085\u00d1\u008d\u00d0\u00bb\u00d0\u00b1\u00d1\u008d\u00d1\u0080\u00d1\u0082 \u00d1\u0085\u00d1\u0083\u00d0\u00b2\u00d0\u00b8\u00d1\u0080\u00d0\u00b3\u00d0\u00b0\u00d1\u0085 \u00d1\u008f\u00d0\u00b2\u00d0\u00b4\u00d0\u00b0\u00d0\u00bb \u00d1\u008e\u00d0\u00bc. \u00d0\u00a4\u00d1\u0083\u00d0\u00bd\u00d0\u00ba\u00d1\u0086 \u00d0\u00bd\u00d1\u008c \u00d0\u00bd\u00d1\u008d\u00d0\u00b3 \u00d2\u00af\u00d1\u0081\u00d1\u008d\u00d0\u00b3 \u00d0\u00b1\u00d1\u0083\u00d1\u0086\u00d0\u00b0\u00d0\u00b0\u00d0\u00b6 \u00d3\u00a9\u00d0\u00b3\u00d3\u00a9\u00d1\u0085 \u00d1\u0091\u00d1\u0081\u00d1\u0082\u00d0\u00be\u00d0\u00b9, \u00d2\u00af\u00d1\u0081\u00d1\u008d\u00d0\u00b3 \u00d0\u00b1\u00d2\u00af\u00d1\u0080 \u00d1\u0085\u00d0\u00be\u00d1\u0091\u00d1\u0080\u00d0\u00b4\u00d1\u0083\u00d0\u00b3\u00d0\u00b0\u00d0\u00b0\u00d1\u0080 \u00d1\u0082\u00d0\u00be\u00d0\u00be\u00d0\u00b3 \u00d0\u00b8\u00d0\u00bb\u00d1\u008d\u00d1\u0080\u00d1\u0085\u00d0\u00b8\u00d0\u00b9\u00d0\u00bb\u00d1\u008d\u00d1\u0085. \u00d2\u00ae\u00d1\u0081\u00d1\u008d\u00d0\u00b3 \u00d0\u00b1\u00d2\u00af\u00d1\u0080 \u00d0\u00bd\u00d1\u008c '0' \u00d1\u008d\u00d1\u0081\u00d0\u00b2\u00d1\u008d\u00d0\u00bb '1' \u00d0\u00b1\u00d0\u00b0\u00d0\u00b9\u00d1\u0085 \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d0\u00bd\u00d0\u00be. \u00d2\u00ae\u00d1\u0081\u00d1\u008d\u00d0\u00b3\u00d0\u00bd\u00d0\u00b8\u00d0\u00b9 \u00d1\u008d\u00d1\u0085\u00d1\u008d\u00d0\u00bd\u00d0\u00b4 \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d0\u00be\u00d0\u00bd \u00d1\u0082\u00d3\u00a9\u00d0\u00b3\u00d1\u0081\u00d0\u00b3\u00d3\u00a9\u00d0\u00bb\u00d0\u00b4 \u00d0\u00bd\u00d1\u008d\u00d0\u00bc\u00d1\u008d\u00d0\u00bb\u00d1\u0082 \u00d1\u0085\u00d0\u00be\u00d1\u0081 'db' \u00d1\u0082\u00d1\u008d\u00d0\u00bc\u00d0\u00b4\u00d1\u008d\u00d0\u00b3\u00d1\u0082 \u00d0\u00b1\u00d0\u00b0\u00d0\u00b9\u00d1\u0085 \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d0\u00bd\u00d0\u00be. \u00d2\u00ae\u00d2\u00af\u00d0\u00bd\u00d1\u008d\u00d1\u008d\u00d1\u0081 \u00d0\u00b3\u00d0\u00b0\u00d0\u00b4\u00d0\u00bd\u00d0\u00b0 \u00d2\u00af\u00d1\u0081\u00d1\u008d\u00d0\u00b3 \u00d0\u00bd\u00d1\u008c \u00d1\u0085\u00d1\u008d\u00d0\u00bb\u00d0\u00b1\u00d1\u008d\u00d1\u0080\u00d1\u0082 \u00d1\u0082\u00d1\u0083\u00d1\u0081\u00d0\u00bb\u00d0\u00b0\u00d1\u0085 \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d0\u00bd\u00d0\u00be. \u00d0\u0096\u00d0\u00b8\u00d1\u0088\u00d1\u008d\u00d1\u008d \u00d0\u00bd\u00d1\u008c: decimal_to_binary(15) # \"db1111db\" decimal_to_binary32) # \"db100000db\" \u00d0\u00b1\u00d1\u0083\u00d1\u0086\u00d0\u00b0\u00d0\u00b0\u00d0\u00b6 \u00d3\u00a9\u00d0\u00b3\u00d0\u00bd\u00d3\u00a9\n    \"\"\"\n","canonical_solution":"    return \"db\" + bin(decimal)[2:] + \"db\"\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"khm_Khmr","prompt":"from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" \u00e1\u009e\u0094\u00e1\u009e\u0089\u00e1\u009f\u0092\u00e1\u009e\u0085\u00e1\u009e\u00bc\u00e1\u009e\u009b\u00e1\u009e\u0094\u00e1\u009e\u0089\u00e1\u009f\u0092\u00e1\u009e\u0087\u00e1\u009e\u00b8\u00e1\u009e\u0093\u00e1\u009f\u0083\u00e1\u009e\u0081\u00e1\u009f\u0092\u00e1\u009e\u009f\u00e1\u009f\u0082\u00e1\u009e\u009f\u00e1\u009e\u0084\u00e1\u009f\u0092\u00e1\u009e\u009c\u00e1\u009e\u00b6\u00e1\u009e\u0080\u00e1\u009f\u008b\u00e1\u009e\u0091\u00e1\u009f\u0085\u00e1\u009e\u0087\u00e1\u009e\u00b6\u00e1\u009e\u0081\u00e1\u009f\u0092\u00e1\u009e\u009f\u00e1\u009f\u0082\u00e1\u009e\u009f\u00e1\u009e\u0084\u00e1\u009f\u0092\u00e1\u009e\u009c\u00e1\u009e\u00b6\u00e1\u009e\u0080\u00e1\u009f\u008b\u00e1\u009e\u008f\u00e1\u009f\u0082\u00e1\u009e\u0098\u00e1\u009e\u00bd\u00e1\u009e\u0099\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n","canonical_solution":"    return ''.join(strings)\n","test":"def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n"}
{"nl":"kik_Latn","prompt":"\ndef even_odd_count(num):\n    \"\"\"G\u00c4\u00a9k\u00c4\u00a9 k\u00c4\u00a9he namba \u00c4\u00a9tar\u00c4\u00a9 ya m\u00c5\u00a9igana. g\u00c5\u00a9cokia namba \u00c4\u00a9tar\u00c4\u00a9 ya m\u00c5\u00a9igana na ya m\u00c5\u00a9igana. Ngerekano: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2)\n    \"\"\"\n","canonical_solution":"    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"kin_Latn","prompt":"\ndef get_row(lst, x):\n    \"\"\"\n    Uhabwa amakuru yo mu byiciro 2, nk'urutonde rwashyizwe mu ishyingurano, risa na matrice, ariko bitandukanye na matrice, buri murongo ushobora kuba urimo umubare utandukanye w'inkingi. Gutanga lst, na integer x, shaka integer x kurutonde, hanyuma usubize urutonde rwa tuples, [(x1, y1), (x2, y2)...] kuburyo buri tuple ari coordinate - (umurongo, inkingi), itangira na 0. Gutegura ibipimo by'ibanze mu mibare muburyo bw'inyongera. Nanone, gutondekanya ibipimo by'umurongo mu nkingi muburyo bwamanuka. Ingero: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 0, 1, 4], 0 (2, 5), (2, 0, 0\n    \"\"\"\n","canonical_solution":"    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"kir_Cyrl","prompt":"\n\n\ndef sum_squares(lst):\n    \"\"\"\" \u00d0\u0091\u00d1\u0083\u00d0\u00bb \u00d1\u0084\u00d1\u0083\u00d0\u00bd\u00d0\u00ba\u00d1\u0086\u00d0\u00b8\u00d1\u008f \u00d0\u00b1\u00d2\u00af\u00d1\u0082\u00d2\u00af\u00d0\u00bd \u00d1\u0081\u00d0\u00b0\u00d0\u00bd\u00d0\u00b4\u00d0\u00b0\u00d1\u0080\u00d0\u00b4\u00d1\u008b\u00d0\u00bd \u00d1\u0082\u00d0\u00b8\u00d0\u00b7\u00d0\u00bc\u00d0\u00b5\u00d1\u0081\u00d0\u00b8\u00d0\u00bd \u00d0\u00b0\u00d0\u00bb\u00d0\u00b0\u00d1\u0082. \u00d1\u0082\u00d0\u00b8\u00d0\u00b7\u00d0\u00bc\u00d0\u00b5\u00d0\u00b4\u00d0\u00b5\u00d0\u00b3\u00d0\u00b8 \u00d0\u00b1\u00d0\u00b0\u00d1\u0080\u00d0\u00b4\u00d1\u008b\u00d0\u00ba \u00d0\u00b6\u00d0\u00b0\u00d0\u00b7\u00d1\u0083\u00d1\u0083\u00d0\u00bb\u00d0\u00b0\u00d1\u0080 \u00d2\u00af\u00d1\u0087\u00d2\u00af\u00d0\u00bd, \u00d1\u0084\u00d1\u0083\u00d0\u00bd\u00d0\u00ba\u00d1\u0086\u00d0\u00b8\u00d1\u008f \u00d0\u00b0\u00d0\u00bd\u00d1\u008b\u00d0\u00bd \u00d0\u00b8\u00d0\u00bd\u00d0\u00b4\u00d0\u00b5\u00d0\u00ba\u00d1\u0081\u00d0\u00b8 3 \u00d1\u008d\u00d1\u0081\u00d0\u00b5\u00d0\u00b1\u00d0\u00b8 \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d1\u0081\u00d0\u00be, \u00d0\u00b0\u00d0\u00bd\u00d0\u00b4\u00d0\u00b0 \u00d0\u00b1\u00d2\u00af\u00d1\u0082\u00d2\u00af\u00d0\u00bd \u00d1\u0081\u00d0\u00b0\u00d0\u00bd\u00d0\u00b4\u00d1\u008b\u00d0\u00bd \u00d0\u00b6\u00d0\u00b0\u00d0\u00b7\u00d1\u0083\u00d1\u0083\u00d1\u0081\u00d1\u0083\u00d0\u00bd \u00d0\u00ba\u00d0\u00b2\u00d0\u00b0\u00d0\u00b4\u00d1\u0080\u00d0\u00b0\u00d1\u0082\u00d1\u008b\u00d0\u00bd\u00d0\u00b0 \u00d1\u0087\u00d1\u008b\u00d0\u00b3\u00d0\u00b0\u00d1\u0080\u00d0\u00b0\u00d1\u0082 \u00d0\u00b6\u00d0\u00b0\u00d0\u00bd\u00d0\u00b0 \u00d0\u00b0\u00d0\u00bd\u00d1\u008b\u00d0\u00bd \u00d0\u00b8\u00d0\u00bd\u00d0\u00b4\u00d0\u00b5\u00d0\u00ba\u00d1\u0081\u00d0\u00b8 4 \u00d1\u008d\u00d1\u0081\u00d0\u00b5\u00d0\u00b1\u00d0\u00b8 \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d1\u0081\u00d0\u00be, \u00d0\u00b0\u00d0\u00bd\u00d0\u00b4\u00d0\u00b0 \u00d0\u00b1\u00d2\u00af\u00d1\u0082\u00d2\u00af\u00d0\u00bd \u00d1\u0081\u00d0\u00b0\u00d0\u00bd\u00d0\u00b4\u00d1\u008b\u00d0\u00bd \u00d0\u00b6\u00d0\u00b0\u00d0\u00b7\u00d1\u0083\u00d1\u0083\u00d1\u0081\u00d1\u0083\u00d0\u00bd \u00d0\u00ba\u00d1\u0083\u00d0\u00b1 \u00d0\u00ba\u00d1\u008b\u00d0\u00bb\u00d0\u00b0\u00d1\u0082. \u00d1\u0084\u00d1\u0083\u00d0\u00bd\u00d0\u00ba\u00d1\u0086\u00d0\u00b8\u00d1\u008f \u00d1\u0082\u00d0\u00b8\u00d0\u00b7\u00d0\u00bc\u00d0\u00b5\u00d0\u00b4\u00d0\u00b5\u00d0\u00b3\u00d0\u00b8 \u00d0\u00b6\u00d0\u00b0\u00d0\u00b7\u00d1\u0083\u00d1\u0083\u00d0\u00bb\u00d0\u00b0\u00d1\u0080\u00d0\u00b4\u00d1\u008b \u00d3\u00a9\u00d0\u00b7\u00d0\u00b3\u00d3\u00a9\u00d1\u0080\u00d1\u0082\u00d0\u00bf\u00d3\u00a9\u00d0\u00b9\u00d1\u0082, \u00d0\u00b0\u00d0\u00bd\u00d1\u008b\u00d0\u00bd \u00d0\u00b8\u00d0\u00bd\u00d0\u00b4\u00d0\u00b5\u00d0\u00ba\u00d1\u0081\u00d0\u00b8 3 \u00d0\u00b6\u00d0\u00b5 4 \u00d1\u008d\u00d1\u0081\u00d0\u00b5\u00d0\u00b1\u00d0\u00b8 \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d0\u00b1\u00d0\u00be\u00d1\u0081\u00d0\u00be. \u00d1\u0084\u00d1\u0083\u00d0\u00bd\u00d0\u00ba\u00d1\u0086\u00d0\u00b8\u00d1\u008f \u00d0\u00b0\u00d0\u00bd\u00d0\u00b4\u00d0\u00b0\u00d0\u00bd \u00d0\u00ba\u00d0\u00b8\u00d0\u00b9\u00d0\u00b8\u00d0\u00bd \u00d0\u00b1\u00d0\u00b0\u00d1\u0080\u00d0\u00b4\u00d1\u008b\u00d0\u00ba \u00d0\u00b6\u00d0\u00b0\u00d0\u00b7\u00d1\u0083\u00d1\u0083\u00d0\u00bb\u00d0\u00b0\u00d1\u0080\u00d0\u00b4\u00d1\u008b\u00d0\u00bd \u00d1\u0081\u00d1\u0083\u00d0\u00bc\u00d0\u00bc\u00d0\u00b0\u00d1\u0081\u00d1\u008b\u00d0\u00bd \u00d0\u00ba\u00d0\u00b0\u00d0\u00b9\u00d1\u0082\u00d0\u00b0\u00d1\u0080\u00d0\u00b0\u00d1\u0082. \u00d0\u009c\u00d0\u00b8\u00d1\u0081\u00d0\u00b0\u00d0\u00bb\u00d1\u008b: lst = [1,2,3] \u00d2\u00af\u00d1\u0087\u00d2\u00af\u00d0\u00bd \u00d1\u0087\u00d1\u008b\u00d0\u00b3\u00d0\u00b0\u00d1\u0080\u00d1\u0083\u00d1\u0083 6 \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d1\u0083\u00d1\u0088\u00d1\u0083 \u00d0\u00ba\u00d0\u00b5\u00d1\u0080\u00d0\u00b5\u00d0\u00ba lst = [] \u00d2\u00af\u00d1\u0087\u00d2\u00af\u00d0\u00bd \u00d1\u0087\u00d1\u008b\u00d0\u00b3\u00d0\u00b0\u00d1\u0080\u00d1\u0083\u00d1\u0083 0 \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d1\u0083\u00d1\u0088\u00d1\u0083 \u00d0\u00ba\u00d0\u00b5\u00d1\u0080\u00d0\u00b5\u00d0\u00ba lst = [-1,-5,2,-1,-5] \u00d2\u00af\u00d1\u0087\u00d2\u00af\u00d0\u00bd \u00d1\u0087\u00d1\u008b\u00d0\u00b3\u00d0\u00b0\u00d1\u0080\u00d1\u0083\u00d1\u0083 -126 \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d1\u0083\u00d1\u0088\u00d1\u0083 \u00d0\u00ba\u00d0\u00b5\u00d1\u0080\u00d0\u00b5\u00d0\u00ba\n    \"\"\"\n","canonical_solution":"    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n"}
{"nl":"kmb_Latn","prompt":"\ndef exchange(lst1, lst2):\n    \"\"\"Mu kibhwidisu kiki, wa-nda sola funzyo i sola o izwelu ya-nda londekesa o izwelu ya beta kota, phala kubhanga o mbandu ya lst1 ni ya lst2. Se o izwelu ya beta kota, o izwelu \"KIA\". Se ki kiene, soneka \"KIA\". Mu kifika: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"KIA\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"KIA\" Se ki kiene, soneka \"KIA\".\n    \"\"\"\n","canonical_solution":"    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n"}
{"nl":"kmr_Latn","prompt":"\ndef starts_one_ends(n):\n    \"\"\"\n    Given a integer er\u00c3\u00aan\u00c3\u00ae n, vegerandina hejmara hejmara integer er\u00c3\u00aan\u00c3\u00ae n-digit ku dest p\u00c3\u00aa bike an bi daw\u00c3\u00ae bi 1.\n    \"\"\"\n","canonical_solution":"    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"knc_Arab","prompt":"from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" \u00d9\u0084\u00d9\u008e\u00d9\u0088\u00d9\u0092 \u00d8\u00a3\u00d9\u008e\u00d9\u0086\u00d9\u008e\u00d9\u0091 \u00d9\u0084\u00d9\u0090\u00d8\u00b3\u00d9\u008e\u00d8\u00a7\u00d9\u0086\u00d9\u008e\u00d9\u0083\u00d9\u008e \u00d9\u0084\u00d9\u008e\u00d9\u008a\u00d9\u0092\u00d8\u00b3\u00d9\u008e \u00d8\u00a8\u00d9\u0090\u00d9\u0085\u00d9\u008e\u00d8\u00b9\u00d9\u0092\u00d9\u0086\u00d9\u008e\u00d9\u0089 \u00d9\u0084\u00d9\u008e\u00d9\u0083\u00d9\u008e\u00d8\u008c \u00d9\u0084\u00d9\u008e\u00d9\u0083\u00d9\u008e\u00d8\u00a7\u00d9\u0086\u00d9\u008e \u00d9\u0084\u00d9\u0090\u00d8\u00b3\u00d9\u008e\u00d8\u00a7\u00d9\u0086\u00d9\u008f\u00d9\u0083\u00d9\u008e \u00d9\u0084\u00d9\u008e\u00d9\u008a\u00d9\u0092\u00d8\u00b3\u00d9\u008e \u00d8\u00a8\u00d9\u0090\u00d9\u0085\u00d9\u008e\u00d8\u00b9\u00d9\u0092\u00d9\u0086\u00d9\u008e\u00d9\u0089 \u00d9\u0084\u00d9\u008e\u00d9\u0083\u00d9\u008e.\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n","canonical_solution":"    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) \/ (max_number - min_number) for x in numbers]\n","test":"def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n"}
{"nl":"knc_Latn","prompt":"from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" Lambawa k\u00d3\u0099la k\u00d3\u0099labe d\u00d3\u0099n, k\u00d3\u0099la k\u00d3\u0099n\u00d3\u0099ngalan n\u00d3\u0099m k\u00d3\u0099la k\u00d3\u0099n\u00d3\u0099ngalan k\u00d3\u0099la dataset d\u00d3\u0099n. K\u00d3\u0099n\u00d3\u0099ngalan n\u00d3\u0099m k\u00d3\u0099n\u00d3\u0099ngalan n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099m n\u00d3\u0099\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n","canonical_solution":"    mean = sum(numbers) \/ len(numbers)\n    return sum(abs(x - mean) for x in numbers) \/ len(numbers)\n","test":"def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0\/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0\/5.0) < 1e-6\n\n"}
{"nl":"kon_Latn","prompt":"\ndef digits(n):\n    \"\"\"Pesa ntalu ya mvimba ya mbote n, vutula ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu\n    \"\"\"\n","canonical_solution":"    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n"}
{"nl":"kor_Hang","prompt":"\ndef is_multiply_prime(a):\n    \"\"\"\u00ec\u00a3\u00bc\u00ec\u0096\u00b4\u00ec\u00a7\u0084 \u00ec\u0088\u00ab\u00ec\u009e\u0090\u00ea\u00b0\u0080 3\u00ea\u00b0\u009c\u00ec\u009d\u0098 \u00ec\u0086\u008c\u00ec\u0088\u0098\u00eb\u0093\u00a4\u00ec\u009d\u0098 \u00ea\u00b3\u00b1\u00ec\u009d\u00b4\u00ea\u00b3\u00a0, \u00ea\u00b7\u00b8\u00eb\u00a0\u0087\u00ec\u00a7\u0080 \u00ec\u0095\u008a\u00ec\u009c\u00bc\u00eb\u00a9\u00b4 \u00ea\u00b1\u00b0\u00ec\u00a7\u0093\u00ec\u009d\u00b8 \u00ea\u00b2\u00bd\u00ec\u009a\u00b0\u00eb\u00a5\u00bc \u00ec\u00b0\u00b8\u00ec\u009c\u00bc\u00eb\u00a1\u009c \u00eb\u00b0\u0098\u00ed\u0099\u0098\u00ed\u0095\u0098\u00eb\u008a\u0094 \u00ed\u0095\u00a8\u00ec\u0088\u0098\u00eb\u00a5\u00bc \u00ec\u009e\u0091\u00ec\u0084\u00b1\u00ed\u0095\u009c\u00eb\u008b\u00a4. (a) \u00ea\u00b0\u0080 100\u00eb\u00b3\u00b4\u00eb\u008b\u00a4 \u00ec\u009e\u0091\u00eb\u008b\u00a4\u00eb\u008a\u0094 \u00ea\u00b2\u0083\u00ec\u009d\u0084 \u00ec\u0095\u008c\u00ea\u00b3\u00a0 \u00ec\u009e\u0088\u00eb\u008b\u00a4. \u00ec\u0098\u0088: is_multiply_prime(30) == True 30 = 2 * 3 * 5\n    \"\"\"\n","canonical_solution":"    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n","test":"def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n"}
{"nl":"lao_Laoo","prompt":"\n\ndef fibfib(n: int):\n    \"\"\"\u00e0\u00ba\u00a5\u00e0\u00bb\u008d\u00e0\u00ba\u00b2\u00e0\u00ba\u0094\u00e0\u00ba\u00b1\u00e0\u00ba\u009a\u00e0\u00bb\u0080\u00e0\u00ba\u00a5\u00e0\u00ba\u0081 FibFib \u00e0\u00bb\u0081\u00e0\u00ba\u00a1\u00e0\u00bb\u0088\u00e0\u00ba\u0099\u00e0\u00ba\u00a5\u00e0\u00bb\u008d\u00e0\u00ba\u00b2\u00e0\u00ba\u0094\u00e0\u00ba\u00b1\u00e0\u00ba\u009a\u00e0\u00ba\u0097\u00e0\u00ba\u00b5\u00e0\u00bb\u0088\u00e0\u00ba\u0084\u00e0\u00bb\u0089\u00e0\u00ba\u00b2\u00e0\u00ba\u008d\u00e0\u00ba\u0084\u00e0\u00ba\u00b7\u00e0\u00ba\u0081\u00e0\u00ba\u00b1\u00e0\u00ba\u0099\u00e0\u00ba\u0081\u00e0\u00ba\u00b1\u00e0\u00ba\u009a\u00e0\u00ba\u00a5\u00e0\u00bb\u008d\u00e0\u00ba\u00b2\u00e0\u00ba\u0094\u00e0\u00ba\u00b1\u00e0\u00ba\u009a Fibbonacci \u00e0\u00ba\u0097\u00e0\u00ba\u00b5\u00e0\u00bb\u0088\u00e0\u00ba\u0096\u00e0\u00ba\u00b7\u00e0\u00ba\u0081 \u00e0\u00ba\u0081\u00e0\u00bb\u008d\u00e0\u00ba\u00b2 \u00e0\u00ba\u0099\u00e0\u00ba\u00bb\u00e0\u00ba\u0094\u00e0\u00ba\u0094\u00e0\u00ba\u00b1\u00e0\u00bb\u0088\u00e0\u00ba\u0087\u00e0\u00ba\u0095\u00e0\u00bb\u008d\u00e0\u00bb\u0088\u00e0\u00bb\u0084\u00e0\u00ba\u009b\u00e0\u00ba\u0099\u00e0\u00ba\u00b5\u00e0\u00bb\u0089: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). \u00e0\u00ba\u0081\u00e0\u00ba\u00b0\u00e0\u00ba\u00a5\u00e0\u00ba\u00b8\u00e0\u00ba\u0099\u00e0\u00ba\u00b2\u00e0\u00ba\u0082\u00e0\u00ba\u00bd\u00e0\u00ba\u0099 \u00e0\u00ba\u00ab\u00e0\u00ba\u0099\u00e0\u00bb\u0089\u00e0\u00ba\u00b2 \u00e0\u00ba\u0097\u00e0\u00ba\u00b5\u00e0\u00bb\u0088\u00e0\u00bb\u0080\u00e0\u00ba\u009e\u00e0\u00ba\u00b7\u00e0\u00bb\u0088\u00e0\u00ba\u00ad\u00e0\u00ba\u0084\u00e0\u00ba\u00b4\u00e0\u00ba\u0094\u00e0\u00bb\u0084\u00e0\u00ba\u00a5\u00e0\u00bb\u0088\u00e0\u00ba\u00ad\u00e0\u00ba\u00bb\u00e0\u00ba\u0087\u00e0\u00ba\u009b\u00e0\u00ba\u00b0\u00e0\u00ba\u0081\u00e0\u00ba\u00ad\u00e0\u00ba\u009a n \u00e0\u00ba\u0082\u00e0\u00ba\u00ad\u00e0\u00ba\u0087\u00e0\u00ba\u00a5\u00e0\u00bb\u008d\u00e0\u00ba\u00b2\u00e0\u00ba\u0094\u00e0\u00ba\u00b1\u00e0\u00ba\u009a\u00e0\u00bb\u0080\u00e0\u00ba\u00a5\u00e0\u00ba\u0081 fibfib.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n","canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n","test":"def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n"}
{"nl":"lij_Latn","prompt":"\ndef is_equal_to_sum_even(n):\n    \"\"\"Evalu\u00c3\u00a2 se o numero d\u00c3\u00a6to n o peu \u00c3\u00abse scrito comme a somma de 4 numeri pari positivi exempio is_equal_to_sum_even ((4) == Falso is_equal_to_sum_even ((6) == Falso is_equal_to_sum_even ((8) == Vero\n    \"\"\"\n","canonical_solution":"    return n%2 == 0 and n >= 8\n","test":"def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n"}
{"nl":"lim_Latn","prompt":"\ndef eat(number, need, remaining):\n    \"\"\"\n    Geer zeet 'n hongerig konijn en geer h\u00c3\u00b6b al 'n bepaold aantal wortels gegete, meh noe m\u00c3\u00b3t geer nog meer wortels ete um de daag vol te make. Geer moot 'n reeks van [total aantal gegete wortels nao de maaltijden, 't aantal wortels dat nao de maaltijden nog blief] retourne es d'r neet gen\u00c3\u00b3g aafgebleve wortels zeen, dan z\u00c3\u00a8t geer alle aafgebleve wortels op, meh geer z\u00c3\u00a8t nog ummer hongerig. Beveurbeeld: * eet ((5, 6, 10) -> [11, 4] * eet ((4, 8, 9) -> [12, 1] * eet ((1, 10, 10) -> [11, 0] * eet ((2, 11, 5) -> [7, 0] Variabele: @nummer: intjer aantal wortels die geer al gegete h\u00c3\u00b6b. @behoef\n    \"\"\"\n","canonical_solution":"    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n"}
{"nl":"lin_Latn","prompt":"\ndef special_factorial(n):\n    \"\"\"Factoriale ya Br\u00c3\u00a9sil elimbolami lokola: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! *... * 1! esika n > 0 Na ndakisa:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n","canonical_solution":"    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n"}
{"nl":"lit_Latn","prompt":"\ndef unique_digits(x):\n    \"\"\"Jei pateikiamas teigiam\u00c5\u00b3 skai\u00c4\u008di\u00c5\u00b3 x s\u00c4\u0085ra\u00c5\u00a1as, gr\u00c4\u0085\u00c5\u00beina visus elementus, kuriuose n\u00c4\u0097ra poraini\u00c5\u00b3 skaitmen\u00c5\u00b3, sur\u00c5\u00ab\u00c5\u00a1iuot\u00c4\u0085 s\u00c4\u0085ra\u00c5\u00a1\u00c4\u0085.\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n","canonical_solution":"    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"lmo_Latn","prompt":"\ndef x_or_y(n, x, y):\n    \"\"\"Un program simpl che al dovariss rend el valor de x se n l'\u00c3\u00a8 un numer prim e al dovariss rend el valor de y se no. Esempi: per x_or_y(7, 34, 12) == 34 per x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n","canonical_solution":"    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n"}
{"nl":"ltg_Latn","prompt":"\ndef can_arrange(arr):\n    \"\"\"Sagatavuot funkceju, kas atd\u00c5\u00abd leluok\u00c5\u00ab indeksu elementu, kas nav leluoks voi v\u00c4\u00abnaids ar t\u00c5\u00ab po\u00c5\u00a1u \u00c4\u00abpr\u00c4\u00abk\u00c5\u00a1ej\u00c5\u00ab elementu. Ka taidu elementu nav, tod atsoka -1. D\u00c4\u0081ts kuorteibuos nabyus dublikatu vierteibys. P\u00c4\u00abm\u00c4\u0081ri: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1\n    \"\"\"\n","canonical_solution":"    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n"}
{"nl":"ltz_Latn","prompt":"\ndef compare_one(a, b):\n    \"\"\"\n    Eng Funktioun kre\u00c3\u00a9ieren, d\u00c3\u00a9i ganz Zuelen, Floats oder Str\u00c3\u00a4ng, d\u00c3\u00a9i real Zuelen represent\u00c3\u00a9ieren, h\u00c3\u00ablt an d\u00c3\u00a9i m\u00c3\u00a9i grouss Variabel an hirem best\u00c3\u00abmmte Variabeltyp zr\u00c3\u00a9ckginn. Returne None wann d'W\u00c3\u00a4erter gl\u00c3\u00a4ich sinn.\n    \"\"\"\n","canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"lua_Latn","prompt":"\ndef check_dict_case(dict):\n    \"\"\"\n    Muaku wa muaku, return True if all keys are strings in lower case or all keys are strings in upper case, otherwise return False. The function should return False is the given dictionary is empty. Example: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) should return True. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False. check_dict_case{\"NC\":\"STATE\", \"Z\n    \"\"\"\n","canonical_solution":"    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n"}
{"nl":"lug_Latn","prompt":"from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" Oweebwa olukalala lw'ebikolwa by'okuteeka n'okufulumya ku akaawunti ya bbanka etandika n'omutindo gwa zero. Omulimu gwo kwe kukebera oba nga mu kiseera kyonna omutindo gwa akaawunti guva wansi wa zero, era mu kiseera ekyo enkola erina okudda True. Bwe kitaba bwe kityo, erina okudda False. Ekyokulabirako:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n","canonical_solution":"    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n","test":"def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n"}
{"nl":"luo_Latn","prompt":"\n\ndef get_positive(l: list):\n    \"\"\"Duok mana kwan mag namba mabeyo e listno.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n","canonical_solution":"    return [e for e in l if e > 0]\n","test":"def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n"}
{"nl":"lus_Latn","prompt":"\ndef right_angle_triangle(a, b, c):\n    '''\n    Thumlek leitek te hmanah an length siam chhuak. Heng thumlek te chu right-angled triangle a ni theih chuan, True return rawh, a ni loh chuan False return rawh.\nRight-angled triangle chu a tluk vanga zat a ni, a ni ang 90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n","canonical_solution":"    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n"}
{"nl":"lvs_Latn","prompt":"\ndef is_bored(S):\n    \"\"\"\n    Jums tiks dota v\u00c4\u0081rdu virkne, un j\u00c5\u00absu uzdevums ir saskait\u00c4\u00abt garlaic\u00c4\u00abbu skaitu. Garlaic\u00c4\u00abba ir teikums, kas s\u00c4\u0081kas ar v\u00c4\u0081rdu \"I\". teikumi tiek sadal\u00c4\u00abti ar '.', '?' vai '!'.\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n","canonical_solution":"    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"mag_Deva","prompt":"\n\ndef monotonic(l: list):\n    \"\"\"True \u00e0\u00a4\u00b2\u00e0\u00a5\u008c\u00e0\u00a4\u009f\u00e0\u00a4\u00be\u00e0\u00a4\u00b5\u00e0\u00a5\u0087 \u00e0\u00a4\u00b9\u00e0\u00a4\u00bf\u00e0\u00a4\u00af\u00e0\u00a4\u0088 \u00e0\u00a4\u0095\u00e0\u00a4\u00bf \u00e0\u00a4\u00b8\u00e0\u00a5\u0082\u00e0\u00a4\u009a\u00e0\u00a5\u0080 \u00e0\u00a4\u00a4\u00e0\u00a4\u00a4\u00e0\u00a5\u008d\u00e0\u00a4\u00b5 \u00e0\u00a4\u00ae\u00e0\u00a4\u00a8\u00e0\u00a5\u008b\u00e0\u00a4\u00a8\u00e0\u00a4\u00bf\u00e0\u00a4\u00a4 \u00e0\u00a4\u00b0\u00e0\u00a5\u0082\u00e0\u00a4\u00aa \u00e0\u00a4\u00b8\u00e0\u00a5\u0087 \u00e0\u00a4\u00ac\u00e0\u00a4\u00a2\u00e0\u00a4\u00bc\u00e0\u00a4\u0088 \u00e0\u00a4\u00b9\u00e0\u00a4\u0088 \u00e0\u00a4\u009a\u00e0\u00a4\u00be\u00e0\u00a4\u00b9\u00e0\u00a5\u0087 \u00e0\u00a4\u0098\u00e0\u00a4\u009f\u00e0\u00a4\u0088 \u00e0\u00a4\u00b9\u00e0\u00a4\u0088\u00e0\u00a5\u00a4\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n","canonical_solution":"    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n","test":"def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n"}
{"nl":"mai_Deva","prompt":"from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" \u00e0\u00a4\u0085\u00e0\u00a4\u00b9\u00e0\u00a4\u00be\u00e0\u00a4\u0081\u00e0\u00a4\u0095\u00e0\u00a5\u0087\u00e0\u00a4\u0081 \u00e0\u00a4\u00ac\u00e0\u00a5\u0088\u00e0\u00a4\u0082\u00e0\u00a4\u0095 \u00e0\u00a4\u0096\u00e0\u00a4\u00be\u00e0\u00a4\u00a4\u00e0\u00a4\u00be \u00e0\u00a4\u00aa\u00e0\u00a4\u00b0 \u00e0\u00a4\u009c\u00e0\u00a4\u00ae\u00e0\u00a4\u00be \u00e0\u00a4\u0086 \u00e0\u00a4\u00a8\u00e0\u00a4\u00bf\u00e0\u00a4\u0095\u00e0\u00a4\u00be\u00e0\u00a4\u00b8\u00e0\u00a5\u0080 \u00e0\u00a4\u00aa\u00e0\u00a4\u00b0\u00e0\u00a4\u00bf\u00e0\u00a4\u009a\u00e0\u00a4\u00be\u00e0\u00a4\u00b2\u00e0\u00a4\u00a8\u00e0\u00a4\u0095 \u00e0\u00a4\u00b8\u00e0\u00a5\u0082\u00e0\u00a4\u009a\u00e0\u00a5\u0080 \u00e0\u00a4\u00a6\u00e0\u00a5\u0087\u00e0\u00a4\u00b2 \u00e0\u00a4\u0097\u00e0\u00a5\u0087\u00e0\u00a4\u00b2 \u00e0\u00a4\u0085\u00e0\u00a4\u009b\u00e0\u00a4\u00bf \u00e0\u00a4\u009c\u00e0\u00a5\u0087 \u00e0\u00a4\u00b6\u00e0\u00a5\u0082\u00e0\u00a4\u00a8\u00e0\u00a5\u008d\u00e0\u00a4\u00af \u00e0\u00a4\u00b6\u00e0\u00a5\u0087\u00e0\u00a4\u00b7 \u00e0\u00a4\u00b8\u00e0\u00a4\u0081 \u00e0\u00a4\u00b6\u00e0\u00a5\u0081\u00e0\u00a4\u00b0\u00e0\u00a5\u0082 \u00e0\u00a4\u00b9\u00e0\u00a5\u008b\u00e0\u00a4\u0087\u00e0\u00a4\u00a4 \u00e0\u00a4\u0085\u00e0\u00a4\u009b\u00e0\u00a4\u00bf. \u00e0\u00a4\u0085\u00e0\u00a4\u00b9\u00e0\u00a4\u00be\u00e0\u00a4\u0081\u00e0\u00a4\u0095 \u00e0\u00a4\u0095\u00e0\u00a4\u00be\u00e0\u00a4\u009c \u00e0\u00a4\u0088 \u00e0\u00a4\u00aa\u00e0\u00a4\u00a4\u00e0\u00a4\u00be \u00e0\u00a4\u00b2\u00e0\u00a4\u0097\u00e0\u00a4\u00be\u00e0\u00a4\u00a8\u00e0\u00a4\u00be \u00e0\u00a4\u0085\u00e0\u00a4\u009b\u00e0\u00a4\u00bf \u00e0\u00a4\u009c\u00e0\u00a5\u0087 \u00e0\u00a4\u0095\u00e0\u00a5\u008b\u00e0\u00a4\u00a8\u00e0\u00a5\u008b \u00e0\u00a4\u00b8\u00e0\u00a4\u00ae\u00e0\u00a4\u00af \u00e0\u00a4\u0096\u00e0\u00a4\u00be\u00e0\u00a4\u00a4\u00e0\u00a4\u00be\u00e0\u00a4\u0095 \u00e0\u00a4\u00b6\u00e0\u00a5\u0087\u00e0\u00a4\u00b7 \u00e0\u00a4\u00b6\u00e0\u00a5\u0082\u00e0\u00a4\u00a8\u00e0\u00a5\u008d\u00e0\u00a4\u00af \u00e0\u00a4\u00b8\u00e0\u00a4\u0081 \u00e0\u00a4\u0095\u00e0\u00a4\u00ae \u00e0\u00a4\u0085\u00e0\u00a4\u009b\u00e0\u00a4\u00bf, \u00e0\u00a4\u0086 \u00e0\u00a4\u0093\u00e0\u00a4\u00b9\u00e0\u00a4\u00bf \u00e0\u00a4\u00b8\u00e0\u00a4\u00ae\u00e0\u00a4\u00af \u00e0\u00a4\u00ab\u00e0\u00a4\u00b2\u00e0\u00a4\u00a8\u00e0\u00a4\u0095\u00e0\u00a5\u0087\u00e0\u00a4\u0081 \u00e0\u00a4\u00b8\u00e0\u00a4\u00b9\u00e0\u00a5\u0080 \u00e0\u00a4\u00b2\u00e0\u00a5\u008c\u00e0\u00a4\u009f\u00e0\u00a4\u00be\u00e0\u00a4\u00ac\u00e0\u00a4\u008f \u00e0\u00a4\u009a\u00e0\u00a4\u00be\u00e0\u00a4\u00b9\u00e0\u00a5\u0080. \u00e0\u00a4\u0085\u00e0\u00a4\u00a8\u00e0\u00a5\u008d\u00e0\u00a4\u00af\u00e0\u00a4\u00a5\u00e0\u00a4\u00be \u00e0\u00a4\u0088 \u00e0\u00a4\u0097\u00e0\u00a4\u00b2\u00e0\u00a4\u00a4 \u00e0\u00a4\u00b2\u00e0\u00a5\u008c\u00e0\u00a4\u009f\u00e0\u00a4\u00be\u00e0\u00a4\u00ac\u00e0\u00a4\u008f \u00e0\u00a4\u009a\u00e0\u00a4\u00be\u00e0\u00a4\u00b9\u00e0\u00a5\u0080. \u00e0\u00a4\u0089\u00e0\u00a4\u00a6\u00e0\u00a4\u00be\u00e0\u00a4\u00b9\u00e0\u00a4\u00b0\u00e0\u00a4\u00a3:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n","canonical_solution":"    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n","test":"def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n"}
{"nl":"mal_Mlym","prompt":"\ndef solve(s):\n    \"\"\"\u00e0\u00b4\u00a8\u00e0\u00b4\u00bf\u00e0\u00b4\u0099\u00e0\u00b5\u008d\u00e0\u00b4\u0099\u00e0\u00b5\u00be\u00e0\u00b4\u0095\u00e0\u00b5\u008d\u00e0\u00b4\u0095\u00e0\u00b5\u008d \u00e0\u00b4\u0092\u00e0\u00b4\u00b0\u00e0\u00b5\u0081 \u00e0\u00b4\u00b8\u00e0\u00b5\u008d\u00e0\u00b4\u009f\u00e0\u00b5\u008d\u00e0\u00b4\u00b0\u00e0\u00b4\u00bf\u00e0\u00b4\u0082\u00e0\u00b4\u0097\u00e0\u00b5\u008d s \u00e0\u00b4\u00a8\u00e0\u00b5\u00bd\u00e0\u00b4\u0095\u00e0\u00b4\u00bf\u00e0\u00b4\u00af\u00e0\u00b4\u00bf\u00e0\u00b4\u00b0\u00e0\u00b4\u00bf\u00e0\u00b4\u0095\u00e0\u00b5\u008d\u00e0\u00b4\u0095\u00e0\u00b5\u0081\u00e0\u00b4\u00a8\u00e0\u00b5\u008d\u00e0\u00b4\u00a8\u00e0\u00b5\u0081. s[i] \u00e0\u00b4\u0092\u00e0\u00b4\u00b0\u00e0\u00b5\u0081 \u00e0\u00b4\u0085\u00e0\u00b4\u0095\u00e0\u00b5\u008d\u00e0\u00b4\u00b7\u00e0\u00b4\u00b0\u00e0\u00b4\u00ae\u00e0\u00b4\u00be\u00e0\u00b4\u00a3\u00e0\u00b5\u0086\u00e0\u00b4\u0099\u00e0\u00b5\u008d\u00e0\u00b4\u0095\u00e0\u00b4\u00bf\u00e0\u00b5\u00bd, \u00e0\u00b4\u0085\u00e0\u00b4\u00a4\u00e0\u00b4\u00bf\u00e0\u00b4\u00a8\u00e0\u00b5\u008d\u00e0\u00b4\u00b1\u00e0\u00b5\u0086 \u00e0\u00b4\u0095\u00e0\u00b5\u0087\u00e0\u00b4\u00b8\u00e0\u00b5\u008d \u00e0\u00b4\u00a4\u00e0\u00b4\u00be\u00e0\u00b4\u00b4\u00e0\u00b5\u0087 \u00e0\u00b4\u00a8\u00e0\u00b4\u00bf\u00e0\u00b4\u00a8\u00e0\u00b5\u008d\u00e0\u00b4\u00a8\u00e0\u00b5\u008d \u00e0\u00b4\u00ae\u00e0\u00b5\u0081\u00e0\u00b4\u0095\u00e0\u00b4\u00b3\u00e0\u00b4\u00bf\u00e0\u00b4\u00b2\u00e0\u00b5\u0087\u00e0\u00b4\u0095\u00e0\u00b5\u008d\u00e0\u00b4\u0095\u00e0\u00b5\u008d \u00e0\u00b4\u0085\u00e0\u00b4\u00b2\u00e0\u00b5\u008d\u00e0\u00b4\u00b2\u00e0\u00b5\u0086\u00e0\u00b4\u0099\u00e0\u00b5\u008d\u00e0\u00b4\u0095\u00e0\u00b4\u00bf\u00e0\u00b5\u00bd \u00e0\u00b4\u00b5\u00e0\u00b4\u00bf\u00e0\u00b4\u00aa\u00e0\u00b4\u00b0\u00e0\u00b5\u0080\u00e0\u00b4\u00a4\u00e0\u00b4\u00ae\u00e0\u00b4\u00be\u00e0\u00b4\u00af\u00e0\u00b4\u00bf \u00e0\u00b4\u00ae\u00e0\u00b4\u00be\u00e0\u00b4\u00b1\u00e0\u00b5\u008d\u00e0\u00b4\u00b1\u00e0\u00b5\u0081\u00e0\u00b4\u0095, \u00e0\u00b4\u0085\u00e0\u00b4\u00b2\u00e0\u00b5\u008d\u00e0\u00b4\u00b2\u00e0\u00b5\u0086\u00e0\u00b4\u0099\u00e0\u00b5\u008d\u00e0\u00b4\u0095\u00e0\u00b4\u00bf\u00e0\u00b5\u00bd \u00e0\u00b4\u0085\u00e0\u00b4\u00a4\u00e0\u00b5\u008d \u00e0\u00b4\u00aa\u00e0\u00b5\u008b\u00e0\u00b4\u00b2\u00e0\u00b5\u0086 \u00e0\u00b4\u00a4\u00e0\u00b4\u00a8\u00e0\u00b5\u008d\u00e0\u00b4\u00a8\u00e0\u00b5\u0086 \u00e0\u00b4\u00b8\u00e0\u00b5\u0082\u00e0\u00b4\u0095\u00e0\u00b5\u008d\u00e0\u00b4\u00b7\u00e0\u00b4\u00bf\u00e0\u00b4\u0095\u00e0\u00b5\u008d\u00e0\u00b4\u0095\u00e0\u00b5\u0081\u00e0\u00b4\u0095. \u00e0\u00b4\u00b8\u00e0\u00b5\u008d\u00e0\u00b4\u009f\u00e0\u00b5\u008d\u00e0\u00b4\u00b0\u00e0\u00b4\u00bf\u00e0\u00b4\u0082\u00e0\u00b4\u0097\u00e0\u00b4\u00bf\u00e0\u00b5\u00bd \u00e0\u00b4\u0085\u00e0\u00b4\u0095\u00e0\u00b5\u008d\u00e0\u00b4\u00b7\u00e0\u00b4\u00b0\u00e0\u00b4\u0099\u00e0\u00b5\u008d\u00e0\u00b4\u0099\u00e0\u00b4\u00b3\u00e0\u00b5\u008a\u00e0\u00b4\u00a8\u00e0\u00b5\u008d\u00e0\u00b4\u00a8\u00e0\u00b5\u0081\u00e0\u00b4\u0082 \u00e0\u00b4\u0085\u00e0\u00b4\u009f\u00e0\u00b4\u0099\u00e0\u00b5\u008d\u00e0\u00b4\u0099\u00e0\u00b4\u00bf\u00e0\u00b4\u00af\u00e0\u00b4\u00bf\u00e0\u00b4\u009f\u00e0\u00b5\u008d\u00e0\u00b4\u009f\u00e0\u00b4\u00bf\u00e0\u00b4\u00b2\u00e0\u00b5\u008d\u00e0\u00b4\u00b2\u00e0\u00b5\u0086\u00e0\u00b4\u0099\u00e0\u00b5\u008d\u00e0\u00b4\u0095\u00e0\u00b4\u00bf\u00e0\u00b5\u00bd, \u00e0\u00b4\u00b8\u00e0\u00b5\u008d\u00e0\u00b4\u009f\u00e0\u00b5\u008d\u00e0\u00b4\u00b0\u00e0\u00b4\u00bf\u00e0\u00b4\u0082\u00e0\u00b4\u0097\u00e0\u00b5\u008d \u00e0\u00b4\u00b5\u00e0\u00b4\u00bf\u00e0\u00b4\u00aa\u00e0\u00b4\u00b0\u00e0\u00b5\u0080\u00e0\u00b4\u00a4\u00e0\u00b4\u00ae\u00e0\u00b4\u00be\u00e0\u00b4\u0095\u00e0\u00b5\u008d\u00e0\u00b4\u0095\u00e0\u00b5\u0081\u00e0\u00b4\u0095. \u00e0\u00b4\u00ab\u00e0\u00b4\u0082\u00e0\u00b4\u0097\u00e0\u00b5\u008d\u00e0\u00b4\u00b7\u00e0\u00b5\u00bb \u00e0\u00b4\u00ab\u00e0\u00b4\u00b2\u00e0\u00b4\u00ae\u00e0\u00b4\u00be\u00e0\u00b4\u00af\u00e0\u00b4\u00bf \u00e0\u00b4\u00b8\u00e0\u00b5\u008d\u00e0\u00b4\u009f\u00e0\u00b5\u008d\u00e0\u00b4\u00b0\u00e0\u00b4\u00bf\u00e0\u00b4\u0082\u00e0\u00b4\u0097\u00e0\u00b5\u008d \u00e0\u00b4\u00a8\u00e0\u00b5\u00bd\u00e0\u00b4\u0095\u00e0\u00b4\u00a3\u00e0\u00b4\u0082. \u00e0\u00b4\u0089\u00e0\u00b4\u00a6\u00e0\u00b4\u00be\u00e0\u00b4\u00b9\u00e0\u00b4\u00b0\u00e0\u00b4\u00a3\u00e0\u00b4\u0099\u00e0\u00b5\u008d\u00e0\u00b4\u0099\u00e0\u00b5\u00be solve(\"1234\") = \"4321\" solve(\"ab\") = \"AB\" solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n","canonical_solution":"    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n"}
{"nl":"mar_Deva","prompt":"\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero \u00e0\u00a4\u00aa\u00e0\u00a5\u0082\u00e0\u00a4\u00b0\u00e0\u00a5\u008d\u00e0\u00a4\u00a3\u00e0\u00a4\u00be\u00e0\u00a4\u0082\u00e0\u00a4\u0095 \u00e0\u00a4\u00af\u00e0\u00a4\u00be\u00e0\u00a4\u00a6\u00e0\u00a5\u0080 \u00e0\u00a4\u0087\u00e0\u00a4\u00a8\u00e0\u00a4\u00aa\u00e0\u00a5\u0081\u00e0\u00a4\u009f \u00e0\u00a4\u00ae\u00e0\u00a5\u008d\u00e0\u00a4\u00b9\u00e0\u00a4\u00a3\u00e0\u00a5\u0082\u00e0\u00a4\u00a8 \u00e0\u00a4\u0098\u00e0\u00a5\u0087\u00e0\u00a4\u00a4\u00e0\u00a5\u0087. \u00e0\u00a4\u009c\u00e0\u00a4\u00b0 \u00e0\u00a4\u00af\u00e0\u00a4\u00be\u00e0\u00a4\u00a6\u00e0\u00a5\u0080\u00e0\u00a4\u00ae\u00e0\u00a4\u00a7\u00e0\u00a5\u008d\u00e0\u00a4\u00af\u00e0\u00a5\u0087 \u00e0\u00a4\u00a4\u00e0\u00a5\u0080\u00e0\u00a4\u00a8 \u00e0\u00a4\u00ad\u00e0\u00a4\u00bf\u00e0\u00a4\u00a8\u00e0\u00a5\u008d\u00e0\u00a4\u00a8 \u00e0\u00a4\u0098\u00e0\u00a4\u009f\u00e0\u00a4\u0095 \u00e0\u00a4\u0085\u00e0\u00a4\u00b8\u00e0\u00a4\u00a4\u00e0\u00a5\u0080\u00e0\u00a4\u00b2 \u00e0\u00a4\u00a4\u00e0\u00a4\u00b0 \u00e0\u00a4\u00a4\u00e0\u00a5\u0087 \u00e0\u00a4\u00b8\u00e0\u00a4\u00a4\u00e0\u00a5\u008d\u00e0\u00a4\u00af \u00e0\u00a4\u00aa\u00e0\u00a4\u00b0\u00e0\u00a4\u00a4 \u00e0\u00a4\u0095\u00e0\u00a4\u00b0\u00e0\u00a4\u00a4\u00e0\u00a5\u0087 \u00e0\u00a4\u009c\u00e0\u00a5\u0087 \u00e0\u00a4\u00b6\u00e0\u00a5\u0082\u00e0\u00a4\u00a8\u00e0\u00a5\u008d\u00e0\u00a4\u00af \u00e0\u00a4\u00aa\u00e0\u00a4\u00b0\u00e0\u00a5\u008d\u00e0\u00a4\u00af\u00e0\u00a4\u0082\u00e0\u00a4\u00a4 \u00e0\u00a4\u008f\u00e0\u00a4\u0095\u00e0\u00a4\u00a4\u00e0\u00a5\u008d\u00e0\u00a4\u00b0\u00e0\u00a4\u00bf\u00e0\u00a4\u00a4 \u00e0\u00a4\u00b9\u00e0\u00a5\u008b\u00e0\u00a4\u00a4\u00e0\u00a5\u0087, \u00e0\u00a4\u0086\u00e0\u00a4\u00a3\u00e0\u00a4\u00bf \u00e0\u00a4\u0085\u00e0\u00a4\u00a8\u00e0\u00a5\u008d\u00e0\u00a4\u00af\u00e0\u00a4\u00a5\u00e0\u00a4\u00be \u00e0\u00a4\u0096\u00e0\u00a5\u008b\u00e0\u00a4\u009f\u00e0\u00a5\u0087.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n","canonical_solution":"    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n","test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n"}
{"nl":"min_Arab","prompt":"\n\ndef sum_to_n(n: int):\n    \"\"\"\u00d8\u00b3\u00d9\u008f\u00d9\u0085 \u00d8\u00aa\u00d9\u0088 \u00d9\u0086 \u00d8\u00a7\u00d8\u00af\u00d8\u00a7\u00d9\u0084\u00d9\u0087 \u00d9\u0081\u00d9\u0088\u00d9\u0086\u00d8\u00b3\u00d9\u008a\u00d9\u0086 \u00d8\u00b9\u00d9\u0086\u00d9\u0083 \u00d8\u00ac\u00d9\u0088\u00d9\u0085\u00d8\u00a7\u00d9\u0087\u00d9\u0086 \u00d8\u00a3\u00d9\u0086\u00d9\u0083 \u00d8\u00af\u00d8\u00a7\u00d8\u00b1\u00d9\u008a \u00d9\u00a1 \u00d8\u00b3\u00d8\u00a7\u00d9\u0085\u00d8\u00a8\u00d8\u00a7\u00d9\u008a \u00d9\u0089\u00d9\u0083 \u00d9\u0086.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n","canonical_solution":"    return sum(range(n + 1))\n","test":"def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n"}
{"nl":"min_Latn","prompt":"from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Daptar bulik dari faktor-faktor utamo dari bilangan bulat nan diagiah dalam urutan dari nan paliang ketek ka nan paliang gadang. Satiok faktor harus didaptarkan jumlah kali nan sasuai jo sabanyak kali inyo muncua dalam faktorisasi. Jumlah masukan harus samo jo hasil kali dari sado faktor\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n","canonical_solution":"    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n \/\/= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n","test":"def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n"}
{"nl":"mkd_Cyrl","prompt":"\n\ndef add(x: int, y: int):\n    \"\"\"\u00d0\u0094\u00d0\u00be\u00d0\u00b4\u00d0\u00b0\u00d0\u00b4\u00d0\u00b5\u00d1\u0082\u00d0\u00b5 \u00d0\u00b4\u00d0\u00b2\u00d0\u00b0 \u00d0\u00b1\u00d1\u0080\u00d0\u00be\u00d1\u0098\u00d0\u00b0 x \u00d0\u00b8 y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n","canonical_solution":"    return x + y\n","test":"def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n"}
{"nl":"mlt_Latn","prompt":"\n\ndef unique(l: list):\n    \"\"\"Irtira elementi uni\u00c4\u008bi f'lista li \u00c4\u00a1ew issortjati\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n","canonical_solution":"    return sorted(list(set(l)))\n","test":"def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n"}
{"nl":"mni_Beng","prompt":"\n\ndef fizz_buzz(n: int):\n    \"\"\"\u00e0\u00a6\u00a6\u00e0\u00a6\u00bf\u00e0\u00a6\u009c\u00e0\u00a6\u00bf\u00e0\u00a6\u00a4 7 \u00e0\u00a6\u0085\u00e0\u00a6\u00b8\u00e0\u00a6\u00bf 11 \u00e0\u00a6\u00a8\u00e0\u00a6\u00a4\u00e0\u00a7\u008d\u00e0\u00a6\u00a4\u00e0\u00a7\u008d\u00e0\u00a6\u00b0\u00e0\u00a6\u0097\u00e0\u00a6\u00be 13 \u00e0\u00a6\u00a6\u00e0\u00a6\u00be \u00e0\u00a6\u00af\u00e0\u00a6\u00bc\u00e0\u00a7\u0087\u00e0\u00a6\u00a8\u00e0\u00a7\u008d\u00e0\u00a6\u00a5\u00e0\u00a7\u008b\u00e0\u00a6\u0095\u00e0\u00a6\u00aa\u00e0\u00a6\u00be \u00e0\u00a6\u00af\u00e0\u00a6\u00bc\u00e0\u00a6\u00be\u00e0\u00a6\u00ac\u00e0\u00a6\u00be n\u00e0\u00a6\u00a6\u00e0\u00a6\u0097\u00e0\u00a7\u0080 \u00e0\u00a6\u00b9\u00e0\u00a6\u00a8\u00e0\u00a7\u008d\u00e0\u00a6\u00a5\u00e0\u00a6\u00ac\u00e0\u00a6\u00be \u00e0\u00a6\u0087\u00e0\u00a6\u00a8\u00e0\u00a7\u008d\u00e0\u00a6\u00a4\u00e0\u00a6\u00bf\u00e0\u00a6\u009c\u00e0\u00a6\u00b0\u00e0\u00a6\u00b6\u00e0\u00a6\u00bf\u00e0\u00a6\u0082\u00e0\u00a6\u00a6\u00e0\u00a6\u00be \u00e0\u00a6\u00a5\u00e0\u00a7\u008b\u00e0\u00a6\u0095\u00e0\u00a6\u00aa\u00e0\u00a6\u00be \u00e0\u00a6\u00ae\u00e0\u00a6\u00b6\u00e0\u00a7\u0080\u00e0\u00a6\u0082\u00e0\u00a6\u00a6\u00e0\u00a7\u0081 \u00e0\u00a6\u00b9\u00e0\u00a6\u00b2\u00e0\u00a7\u008d\u00e0\u00a6\u00b2\u00e0\u00a6\u0095\u00e0\u00a6\u0087\u00e0\u00a5\u00a4\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n","canonical_solution":"    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n","test":"def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n"}
{"nl":"mos_Latn","prompt":"\ndef compare_one(a, b):\n    \"\"\"\n    B na n maana t\u00ca\u008b\u00ca\u008bm-noor s\u00e1\u00ba\u00bdn na n d\u00c9\u00a9k nimero r\u00c3\u00a3mb s\u00e1\u00ba\u00bdn yaa zuloees b\u00c9\u00a9 n lebg n wa ne nimero r\u00c3\u00a3mb s\u00e1\u00ba\u00bdn yaa zuloees n lebg n wa ne s\u00e1\u00ba\u00bdn yaa zuloees n y\u00c9\u00a9\u00c9\u00a9d a s\u00e1\u00ba\u00bdn k\u00c3\u00b5-a w\u00c3\u00a3. B s\u00c3\u00a3 n lebg n wa ne a ye, yaa t\u00c9\u00a9l\u00c9\u009b t\u00c9\u00a9 b lebg n wa ne a ye.\n    \"\"\"\n","canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"mri_Latn","prompt":"\ndef is_simple_power(x, n):\n    \"\"\"Ko t\u00c5\u008d mahi he tuhi i t\u00c4\u0093tahi taumahi e hoki mai ana ki te pono m\u00c4\u0093n\u00c4\u0081 he tau x he mana m\u00c4\u0081m\u00c4\u0081 o n, he teka hoki i \u00c4\u0093tahi atu take. he mana m\u00c4\u0081m\u00c4\u0081 o n m\u00c4\u0093n\u00c4\u0081 n**int=x Hei tauira: is_simple_power(1, 4) => pono is_simple_power(2, 2) => pono is_simple_power(8, 2) => pono is_simple_power(3, 2) => teka is_simple_power(3, 1) teka => he_simple_power(5, 3) => teka\n    \"\"\"\n","canonical_solution":"    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"mya_Mymr","prompt":"from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" \u00e1\u0080\u0098\u00e1\u0080\u008f\u00e1\u0080\u00ba\u00e1\u0080\u0085\u00e1\u0080\u00ac\u00e1\u0080\u009b\u00e1\u0080\u0084\u00e1\u0080\u00ba\u00e1\u0080\u00b8\u00e1\u0080\u0090\u00e1\u0080\u0085\u00e1\u0080\u00ba\u00e1\u0080\u0081\u00e1\u0080\u00af\u00e1\u0080\u0095\u00e1\u0080\u00b1\u00e1\u0080\u00ab\u00e1\u0080\u00ba\u00e1\u0080\u0080 \u00e1\u0080\u0084\u00e1\u0080\u00bd\u00e1\u0080\u00b1\u00e1\u0080\u009e\u00e1\u0080\u00bd\u00e1\u0080\u0084\u00e1\u0080\u00ba\u00e1\u0080\u00b8\u00e1\u0080\u0081\u00e1\u0080\u00bc\u00e1\u0080\u0084\u00e1\u0080\u00ba\u00e1\u0080\u00b8\u00e1\u0080\u0094\u00e1\u0080\u00b2\u00e1\u0080\u00b7 \u00e1\u0080\u0091\u00e1\u0080\u00af\u00e1\u0080\u0090\u00e1\u0080\u00ba\u00e1\u0080\u009a\u00e1\u0080\u00b0\u00e1\u0080\u0081\u00e1\u0080\u00bc\u00e1\u0080\u0084\u00e1\u0080\u00ba\u00e1\u0080\u00b8 \u00e1\u0080\u009c\u00e1\u0080\u00af\u00e1\u0080\u0095\u00e1\u0080\u00ba\u00e1\u0080\u0084\u00e1\u0080\u0094\u00e1\u0080\u00ba\u00e1\u0080\u00b8\u00e1\u0080\u0085\u00e1\u0080\u0089\u00e1\u0080\u00ba\u00e1\u0080\u0085\u00e1\u0080\u00ac\u00e1\u0080\u009b\u00e1\u0080\u0084\u00e1\u0080\u00ba\u00e1\u0080\u00b8\u00e1\u0080\u0080\u00e1\u0080\u00ad\u00e1\u0080\u00af \u00e1\u0080\u009e\u00e1\u0080\u00af\u00e1\u0080\u008a\u00e1\u0080\u0094\u00e1\u0080\u00b2\u00e1\u0080\u00b7\u00e1\u0080\u0085\u00e1\u0080\u0090\u00e1\u0080\u0084\u00e1\u0080\u00ba\u00e1\u0080\u0095\u00e1\u0080\u00bc\u00e1\u0080\u00ae\u00e1\u0080\u00b8 \u00e1\u0080\u009e\u00e1\u0080\u0084\u00e1\u0080\u00ba\u00e1\u0080\u0095\u00e1\u0080\u00b1\u00e1\u0080\u00b8\u00e1\u0080\u0091\u00e1\u0080\u00ac\u00e1\u0080\u00b8\u00e1\u0080\u0095\u00e1\u0080\u00ab\u00e1\u0080\u0090\u00e1\u0080\u009a\u00e1\u0080\u00ba\u00e1\u0081\u008b \u00e1\u0080\u009e\u00e1\u0080\u0084\u00e1\u0080\u00b7\u00e1\u0080\u00ba\u00e1\u0080\u00a1\u00e1\u0080\u009c\u00e1\u0080\u00af\u00e1\u0080\u0095\u00e1\u0080\u00ba\u00e1\u0080\u0080 \u00e1\u0080\u0084\u00e1\u0080\u00bd\u00e1\u0080\u00b1\u00e1\u0080\u0085\u00e1\u0080\u00ac\u00e1\u0080\u009b\u00e1\u0080\u0084\u00e1\u0080\u00ba\u00e1\u0080\u00b8\u00e1\u0080\u009b\u00e1\u0080\u00b2\u00e1\u0080\u00b7 \u00e1\u0080\u00a1\u00e1\u0080\u0080\u00e1\u0080\u00bc\u00e1\u0080\u00bd\u00e1\u0080\u00b1\u00e1\u0080\u00b8\u00e1\u0080\u009f\u00e1\u0080\u00ac \u00e1\u0080\u009e\u00e1\u0080\u00af\u00e1\u0080\u008a\u00e1\u0080\u00a1\u00e1\u0080\u00b1\u00e1\u0080\u00ac\u00e1\u0080\u0080\u00e1\u0080\u00ba\u00e1\u0080\u0080\u00e1\u0080\u00ad\u00e1\u0080\u00af \u00e1\u0080\u0080\u00e1\u0080\u00bb\u00e1\u0080\u009e\u00e1\u0080\u00bd\u00e1\u0080\u00ac\u00e1\u0080\u00b8\u00e1\u0080\u009b\u00e1\u0080\u0084\u00e1\u0080\u00ba \u00e1\u0080\u009b\u00e1\u0080\u00be\u00e1\u0080\u00ac\u00e1\u0080\u0096\u00e1\u0080\u00bd\u00e1\u0080\u00b1\u00e1\u0080\u0096\u00e1\u0080\u00ad\u00e1\u0080\u00af\u00e1\u0080\u00b7\u00e1\u0080\u0095\u00e1\u0080\u00ab\u00e1\u0081\u008b \u00e1\u0080\u00a1\u00e1\u0080\u00b2\u00e1\u0080\u0092\u00e1\u0080\u00ae\u00e1\u0080\u00a1\u00e1\u0080\u0081\u00e1\u0080\u00bb\u00e1\u0080\u00ad\u00e1\u0080\u0094\u00e1\u0080\u00ba\u00e1\u0080\u0099\u00e1\u0080\u00be\u00e1\u0080\u00ac function \u00e1\u0080\u0080 True \u00e1\u0080\u0095\u00e1\u0080\u00bc\u00e1\u0080\u0094\u00e1\u0080\u00ba\u00e1\u0080\u0095\u00e1\u0080\u00b1\u00e1\u0080\u00b8\u00e1\u0080\u009b\u00e1\u0080\u0095\u00e1\u0080\u00ab\u00e1\u0080\u0099\u00e1\u0080\u009a\u00e1\u0080\u00ba\u00e1\u0081\u008b \u00e1\u0080\u0099\u00e1\u0080\u009f\u00e1\u0080\u00af\u00e1\u0080\u0090\u00e1\u0080\u00ba\u00e1\u0080\u009b\u00e1\u0080\u0084\u00e1\u0080\u00ba False \u00e1\u0080\u0095\u00e1\u0080\u00bc\u00e1\u0080\u0094\u00e1\u0080\u00ba\u00e1\u0080\u0095\u00e1\u0080\u00b1\u00e1\u0080\u00b8\u00e1\u0080\u009b\u00e1\u0080\u0095\u00e1\u0080\u00ab\u00e1\u0080\u0099\u00e1\u0080\u009a\u00e1\u0080\u00ba\u00e1\u0081\u008b \u00e1\u0080\u00a5\u00e1\u0080\u0095\u00e1\u0080\u0099\u00e1\u0080\u00ac:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n","canonical_solution":"    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n","test":"def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n"}
{"nl":"nld_Latn","prompt":"\ndef double_the_difference(lst):\n    '''\nGegeven een lijst met getallen, retourneer de som van de kwadraten van de getallen\nin de lijst die oneven zijn. Negeer getallen die negatief zijn of geen gehele getallen zijn.    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n","canonical_solution":"    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n"}
{"nl":"nno_Latn","prompt":"from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Gjeve ei liste med tal (av minst to element), bruk ein line\u00c3\u00a6r omdanning til denne lista, slik at det minste talet blir 0 og det st\u00c3\u00b8rste blir 1.\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n","canonical_solution":"    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) \/ (max_number - min_number) for x in numbers]\n","test":"def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n"}
{"nl":"nob_Latn","prompt":"\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For et gitt tall n, finn det st\u00c3\u00b8rste tallet som deler n jevnt, mindre enn n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n","canonical_solution":"    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n","test":"def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n"}
{"nl":"npi_Deva","prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    \u00e0\u00a4\u00ac\u00e0\u00a4\u00b9\u00e0\u00a5\u0081\u00e0\u00a4\u00aa\u00e0\u00a4\u00a6\u00e0\u00a4\u0095\u00e0\u00a5\u008b \u00e0\u00a4\u00ae\u00e0\u00a5\u0082\u00e0\u00a4\u00b2\u00e0\u00a5\u008d\u00e0\u00a4\u00af\u00e0\u00a4\u00be\u00e0\u00a4\u0082\u00e0\u00a4\u0095\u00e0\u00a4\u00a8 \u00e0\u00a4\u0097\u00e0\u00a4\u00b0\u00e0\u00a5\u008d\u00e0\u00a4\u00a6\u00e0\u00a4\u009b \u00e0\u00a4\u0097\u00e0\u00a5\u0081\u00e0\u00a4\u00a3\u00e0\u00a4\u00be\u00e0\u00a4\u0082\u00e0\u00a4\u0095 xs \u00e0\u00a4\u00ac\u00e0\u00a4\u00bf\u00e0\u00a4\u00a8\u00e0\u00a5\u008d\u00e0\u00a4\u00a6\u00e0\u00a5\u0081 x \u00e0\u00a4\u00ae\u00e0\u00a4\u00be\u00e0\u00a5\u00a4 \u00e0\u00a4\u00ab\u00e0\u00a4\u00bf\u00e0\u00a4\u00b0\u00e0\u00a5\u008d\u00e0\u00a4\u00a4\u00e0\u00a5\u0080 xs [\u00e0\u00a5\u00a6] + xs [\u00e0\u00a5\u00a7] * x + xs [\u00e0\u00a5\u00a7] * x ^ \u00e0\u00a5\u00a8 +.... xs [n] * x ^ n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n","canonical_solution":"    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) \/ 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n","test":"def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n"}
{"nl":"nso_Latn","prompt":"from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Tsenya nomoro ya 'go lekanyet\u00c5\u00a1a' magareng ga dikarolo t\u00c5\u00a1e pedi t\u00c5\u00a1e di latelanago t\u00c5\u00a1a lenane la go tsenya \u00e2\u0088\u0080nomoro'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n","canonical_solution":"    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n","test":"def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n"}
{"nl":"nus_Latn","prompt":"\n\ndef max_element(l: list):\n    \"\"\"Mi\u00cc\u00b1 ci\u00cc\u00b1k\u00c9\u009b lu\u00c9\u0094\u00cc\u00b1c j\u00c9\u0094k \u00c9\u009b la ti\u00cc\u00b1 \u00c5\u008buan \u00c9\u009bl\u00c9\u0094\u00cc\u00b1\u00c5\u008b r\u00c9\u009by li\u00cc\u00b1th\u00c3\u00a4.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n","canonical_solution":"    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n","test":"def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n"}
{"nl":"nya_Latn","prompt":"\ndef find_max(words):\n    \"\"\"Lembani ntchito kuti amavomereza mndandanda wa zingwe. Mndandanda lili ndi mawu osiyana. Kubwerera mawu ndi nambala pazipita zizindikiro wapadera. Ngati zingwe angapo ndi nambala pazipita zizindikiro wapadera, kubwerera amene akubwera choyamba mu dongosolo lexicographical. find_max (([\"dzina\", \"a\", \"chingwe\"]) == \"chingwe\" find_max (([\"dzina\", \"enam\", \"masewera\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\", \"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n","canonical_solution":"    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n"}
{"nl":"oci_Latn","prompt":"\ndef decimal_to_binary(decimal):\n    \"\"\"Se vos donar\u00c3\u00a0 un nombre en forma decimala e v\u00c3\u00b2stra t\u00c3\u00b2ca es de lo convertir en format binari. La foncion deu tornar una cadena, amb cada caract\u00c3\u00a8r representant un nombre binari. Cada caract\u00c3\u00a8r dins la cadena ser\u00c3\u00a0 '0' o '1'. I aur\u00c3\u00a0 un parelh de caract\u00c3\u00a8rs suplementaris 'db' al comen\u00c3\u00a7ament e a la fin de la cadena. Los caract\u00c3\u00a8rs suplementaris son per ajudar amb lo format. Exemples: decimal_to_binary ((15) # torna \"db1111db\" decimal_to_binary32) # torna \"db100000db\"\n    \"\"\"\n","canonical_solution":"    return \"db\" + bin(decimal)[2:] + \"db\"\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"ory_Orya","prompt":"from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" \u00e0\u00ac\u008f\u00e0\u00ac\u00b9\u00e0\u00ac\u00bf \u00e0\u00ac\u00ab\u00e0\u00ac\u00b3\u00e0\u00ac\u00a8 \u00e0\u00ac\u00aa\u00e0\u00ac\u00be\u00e0\u00ac\u0087\u00e0\u00ac\u0081 \u00e0\u00ac\u0087\u00e0\u00ac\u00a8\u00e0\u00ac\u00aa\u00e0\u00ad\u0081\u00e0\u00ac\u009f\u00e0\u00ad\u008d \u00e0\u00ac\u00b9\u00e0\u00ad\u0087\u00e0\u00ac\u0089\u00e0\u00ac\u009b\u00e0\u00ac\u00bf \u00e0\u00ac\u008f\u00e0\u00ac\u0095 \u00e0\u00ac\u00b7\u00e0\u00ad\u008d\u00e0\u00ac\u009f\u00e0\u00ad\u008d\u00e0\u00ac\u00b0\u00e0\u00ac\u00bf\u00e0\u00ac\u0099\u00e0\u00ad\u008d\u00e0\u00ac\u0097 \u00e0\u00ac\u00af\u00e0\u00ac\u00be\u00e0\u00ac\u00b9\u00e0\u00ac\u00be \u00e0\u00ac\u0085\u00e0\u00ac\u00a8\u00e0\u00ad\u008d\u00e0\u00ac\u00a4\u00e0\u00ac\u0083\u00e0\u00ac\u00b8\u00e0\u00ad\u008d\u00e0\u00ac\u00a5 \u00e0\u00ac\u00ac\u00e0\u00ac\u00a8\u00e0\u00ad\u008d\u00e0\u00ac\u00a7\u00e0\u00ac\u00a8\u00e0\u00ad\u0080 \u00e0\u00ac\u00aa\u00e0\u00ac\u00be\u00e0\u00ac\u0087\u00e0\u00ac\u0081 \u00e0\u00ac\u008f\u00e0\u00ac\u0095\u00e0\u00ac\u00be\u00e0\u00ac\u00a7\u00e0\u00ac\u00bf\u00e0\u00ac\u0095 \u00e0\u00ac\u0097\u00e0\u00ad\u008b\u00e0\u00ac\u00b7\u00e0\u00ad\u008d\u00e0\u00ac\u00a0\u00e0\u00ad\u0080\u00e0\u00ac\u0095\u00e0\u00ad\u0081 \u00e0\u00ac\u00aa\u00e0\u00ad\u008d\u00e0\u00ac\u00b0\u00e0\u00ac\u00a4\u00e0\u00ac\u00bf\u00e0\u00ac\u00a8\u00e0\u00ac\u00bf\u00e0\u00ac\u00a7\u00e0\u00ac\u00bf\u00e0\u00ac\u00a4\u00e0\u00ad\u008d\u00e0\u00ad\u00b1 \u00e0\u00ac\u0095\u00e0\u00ac\u00b0\u00e0\u00ad\u0087 \u00e0\u00ac\u00af\u00e0\u00ac\u00be\u00e0\u00ac\u00b9\u00e0\u00ac\u00be \u00e0\u00ac\u00b8\u00e0\u00ad\u008d\u00e0\u00ac\u00aa\u00e0\u00ad\u0087\u00e0\u00ac\u00b8\u00e0\u00ad\u008d \u00e0\u00ac\u00a6\u00e0\u00ad\u008d\u00e0\u00ad\u00b1\u00e0\u00ac\u00be\u00e0\u00ac\u00b0\u00e0\u00ac\u00be \u00e0\u00ac\u00aa\u00e0\u00ad\u0083\u00e0\u00ac\u00a5\u00e0\u00ac\u0095 \u00e0\u00ac\u00b9\u00e0\u00ad\u008b\u00e0\u00ac\u0087\u00e0\u00ac\u00a5\u00e0\u00ac\u00be\u00e0\u00ac\u008f \u00e0\u00a5\u00a4 \u00e0\u00ac\u00aa\u00e0\u00ad\u008d\u00e0\u00ac\u00b0\u00e0\u00ac\u00a4\u00e0\u00ad\u008d\u00e0\u00ad\u009f\u00e0\u00ad\u0087\u00e0\u00ac\u0095 \u00e0\u00ac\u0097\u00e0\u00ad\u008b\u00e0\u00ac\u00b7\u00e0\u00ad\u008d\u00e0\u00ac\u00a0\u00e0\u00ad\u0080 \u00e0\u00ac\u00aa\u00e0\u00ac\u00be\u00e0\u00ac\u0087\u00e0\u00ac\u0081, \u00e0\u00ac\u00ac\u00e0\u00ac\u00a8\u00e0\u00ad\u008d\u00e0\u00ac\u00a7\u00e0\u00ac\u00a8\u00e0\u00ad\u0080\u00e0\u00ac\u00b0 \u00e0\u00ac\u0097\u00e0\u00ac\u00ad\u00e0\u00ad\u0080\u00e0\u00ac\u00b0\u00e0\u00ac\u00a4\u00e0\u00ac\u00ae \u00e0\u00ac\u00b8\u00e0\u00ad\u008d\u00e0\u00ac\u00a4\u00e0\u00ac\u00b0\u00e0\u00ac\u0095\u00e0\u00ad\u0081 \u00e0\u00ac\u0086\u00e0\u00ac\u0089\u00e0\u00ac\u009f\u00e0\u00ac\u00aa\u00e0\u00ad\u0081\u00e0\u00ac\u009f\u00e0\u00ad\u008d \u00e0\u00ac\u0095\u00e0\u00ac\u00b0\u00e0\u00ac\u00a8\u00e0\u00ad\u008d\u00e0\u00ac\u00a4\u00e0\u00ad\u0081 \u00e0\u00a5\u00a4 \u00e0\u00ac\u0089\u00e0\u00ac\u00a6\u00e0\u00ac\u00be\u00e0\u00ac\u00b9\u00e0\u00ac\u00b0\u00e0\u00ac\u00a3 \u00e0\u00ac\u00b8\u00e0\u00ad\u008d\u00e0\u00ad\u00b1\u00e0\u00ac\u00b0\u00e0\u00ad\u0082\u00e0\u00ac\u00aa (() (()) \u00e0\u00ac\u00b0\u00e0\u00ad\u0087 \u00e0\u00ac\u00b8\u00e0\u00ac\u00b0\u00e0\u00ad\u008d\u00e0\u00ac\u00ac\u00e0\u00ac\u00be\u00e0\u00ac\u00a7\u00e0\u00ac\u00bf\u00e0\u00ac\u0095 \u00e0\u00ac\u00a6\u00e0\u00ad\u0081\u00e0\u00ac\u0087\u00e0\u00ac\u009f\u00e0\u00ac\u00bf \u00e0\u00ac\u00b8\u00e0\u00ad\u008d\u00e0\u00ac\u00a4\u00e0\u00ac\u00b0 \u00e0\u00ac\u0085\u00e0\u00ac\u009b\u00e0\u00ac\u00bf \u00e0\u00ac\u00af\u00e0\u00ad\u0087\u00e0\u00ac\u00a4\u00e0\u00ad\u0087\u00e0\u00ac\u00ac\u00e0\u00ad\u0087\u00e0\u00ac\u00b3\u00e0\u00ad\u0087 ((())) \u00e0\u00ac\u00b0\u00e0\u00ad\u0087 \u00e0\u00ac\u00a4\u00e0\u00ac\u00bf\u00e0\u00ac\u00a8\u00e0\u00ad\u008b\u00e0\u00ac\u009f\u00e0\u00ac\u00bf \u00e0\u00ac\u0085\u00e0\u00ac\u009b\u00e0\u00ac\u00bf \u00e0\u00a5\u00a4\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n","canonical_solution":"    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n","test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n"}
{"nl":"pag_Latn","prompt":"\ndef count_upper(s):\n    \"\"\"\n    Diad string s, bilangen so bilang na saray mabetbet ya bokal ed saray parin index. Alimbawa: count_upper (('aBCdEf') so ompawil na 1 count_upper (('abcdefg') so ompawil na 0 count_upper (('dBBE') so ompawil na 0\n    \"\"\"\n","canonical_solution":"    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"pan_Guru","prompt":"\ndef words_in_sentence(sentence):\n    \"\"\"\n    \u00e0\u00a8\u00a4\u00e0\u00a9\u0081\u00e0\u00a8\u00b9\u00e0\u00a8\u00be\u00e0\u00a8\u00a8\u00e0\u00a9\u0082\u00e0\u00a9\u00b0 \u00e0\u00a8\u0087\u00e0\u00a9\u00b1\u00e0\u00a8\u0095 \u00e0\u00a8\u00b5\u00e0\u00a8\u00be\u00e0\u00a8\u0095 \u00e0\u00a8\u00a8\u00e0\u00a9\u0082\u00e0\u00a9\u00b0 \u00e0\u00a8\u00a6\u00e0\u00a8\u00b0\u00e0\u00a8\u00b8\u00e0\u00a8\u00be\u00e0\u00a8\u0089\u00e0\u00a8\u00a3 \u00e0\u00a8\u00b5\u00e0\u00a8\u00be\u00e0\u00a8\u00b2\u00e0\u00a9\u0080 \u00e0\u00a8\u00b8\u00e0\u00a8\u00a4\u00e0\u00a8\u00b0 \u00e0\u00a8\u00a6\u00e0\u00a8\u00bf\u00e0\u00a9\u00b1\u00e0\u00a8\u00a4\u00e0\u00a9\u0080 \u00e0\u00a8\u0097\u00e0\u00a8\u0088 \u00e0\u00a8\u00b9\u00e0\u00a9\u0088, \u00e0\u00a8\u00b5\u00e0\u00a8\u00be\u00e0\u00a8\u0095 \u00e0\u00a8\u00b5\u00e0\u00a8\u00bf\u00e0\u00a9\u00b1\u00e0\u00a8\u009a \u00e0\u00a8\u0095\u00e0\u00a9\u0081\u00e0\u00a8\u009d \u00e0\u00a8\u00b8\u00e0\u00a8\u00bc\u00e0\u00a8\u00ac\u00e0\u00a8\u00a6 \u00e0\u00a8\u00b9\u00e0\u00a8\u00a8 \u00e0\u00a8\u009c\u00e0\u00a9\u008b \u00e0\u00a8\u0087\u00e0\u00a9\u00b1\u00e0\u00a8\u0095 \u00e0\u00a8\u00b8\u00e0\u00a8\u00aa\u00e0\u00a9\u0087\u00e0\u00a8\u00b8 \u00e0\u00a8\u00a6\u00e0\u00a9\u0081\u00e0\u00a8\u0086\u00e0\u00a8\u00b0\u00e0\u00a8\u00be \u00e0\u00a8\u00b5\u00e0\u00a9\u00b1\u00e0\u00a8\u0096 \u00e0\u00a8\u0095\u00e0\u00a9\u0080\u00e0\u00a8\u00a4\u00e0\u00a9\u0087 \u00e0\u00a8\u0097\u00e0\u00a8\u008f \u00e0\u00a8\u00b9\u00e0\u00a8\u00a8, \u00e0\u00a8\u0085\u00e0\u00a8\u00a4\u00e0\u00a9\u0087 \u00e0\u00a8\u00a4\u00e0\u00a9\u0081\u00e0\u00a8\u00b9\u00e0\u00a8\u00be\u00e0\u00a8\u00a8\u00e0\u00a9\u0082\u00e0\u00a9\u00b0 \u00e0\u00a8\u0087\u00e0\u00a9\u00b1\u00e0\u00a8\u0095 \u00e0\u00a8\u00b8\u00e0\u00a8\u00a4\u00e0\u00a8\u00b0 \u00e0\u00a8\u00b5\u00e0\u00a8\u00be\u00e0\u00a8\u00aa\u00e0\u00a8\u00b8 \u00e0\u00a8\u0095\u00e0\u00a8\u00b0\u00e0\u00a8\u00a8\u00e0\u00a9\u0080 \u00e0\u00a8\u00aa\u00e0\u00a8\u00b5\u00e0\u00a9\u0087\u00e0\u00a8\u0097\u00e0\u00a9\u0080 \u00e0\u00a8\u009c\u00e0\u00a8\u00bf\u00e0\u00a8\u00b8 \u00e0\u00a8\u00b5\u00e0\u00a8\u00bf\u00e0\u00a9\u00b1\u00e0\u00a8\u009a \u00e0\u00a8\u00ae\u00e0\u00a9\u0082\u00e0\u00a8\u00b2 \u00e0\u00a8\u00b5\u00e0\u00a8\u00be\u00e0\u00a8\u0095 \u00e0\u00a8\u00a6\u00e0\u00a9\u0087 \u00e0\u00a8\u00b8\u00e0\u00a8\u00bc\u00e0\u00a8\u00ac\u00e0\u00a8\u00a6 \u00e0\u00a8\u00b9\u00e0\u00a8\u00a8, \u00e0\u00a8\u009c\u00e0\u00a8\u00bf\u00e0\u00a8\u00b8 \u00e0\u00a8\u00a6\u00e0\u00a9\u0080 \u00e0\u00a8\u00b2\u00e0\u00a9\u00b0\u00e0\u00a8\u00ac\u00e0\u00a8\u00be\u00e0\u00a8\u0088 \u00e0\u00a8\u00aa\u00e0\u00a9\u008d\u00e0\u00a8\u00b0\u00e0\u00a8\u00be\u00e0\u00a8\u0087\u00e0\u00a8\u00ae \u00e0\u00a8\u00a8\u00e0\u00a9\u00b0\u00e0\u00a8\u00ac\u00e0\u00a8\u00b0 \u00e0\u00a8\u00b9\u00e0\u00a8\u00a8, \u00e0\u00a8\u00a8\u00e0\u00a8\u00b5\u00e0\u00a9\u0080\u00e0\u00a8\u0082 \u00e0\u00a8\u00b8\u00e0\u00a8\u00a4\u00e0\u00a8\u00b0 \u00e0\u00a8\u00b5\u00e0\u00a8\u00bf\u00e0\u00a9\u00b1\u00e0\u00a8\u009a \u00e0\u00a8\u00b8\u00e0\u00a8\u00bc\u00e0\u00a8\u00ac\u00e0\u00a8\u00a6\u00e0\u00a8\u00be\u00e0\u00a8\u0082 \u00e0\u00a8\u00a6\u00e0\u00a8\u00be \u00e0\u00a8\u0095\u00e0\u00a9\u008d\u00e0\u00a8\u00b0\u00e0\u00a8\u00ae \u00e0\u00a8\u00ae\u00e0\u00a9\u0082\u00e0\u00a8\u00b2 \u00e0\u00a8\u00a6\u00e0\u00a9\u0087 \u00e0\u00a8\u00b8\u00e0\u00a8\u00ae\u00e0\u00a8\u00be\u00e0\u00a8\u00a8 \u00e0\u00a8\u00b9\u00e0\u00a9\u008b\u00e0\u00a8\u00a3\u00e0\u00a8\u00be \u00e0\u00a8\u009a\u00e0\u00a8\u00be\u00e0\u00a8\u00b9\u00e0\u00a9\u0080\u00e0\u00a8\u00a6\u00e0\u00a8\u00be \u00e0\u00a8\u00b9\u00e0\u00a9\u0088. \u00e0\u00a8\u0089\u00e0\u00a8\u00a6\u00e0\u00a8\u00be\u00e0\u00a8\u00b9\u00e0\u00a8\u00b0\u00e0\u00a8\u00a8 1: \u00e0\u00a8\u0087\u00e0\u00a8\u00a8\u00e0\u00a8\u00aa\u00e0\u00a9\u0081\u00e0\u00a8\u009f\u00e0\u00a8\u0083 \u00e0\u00a8\u00b5\u00e0\u00a8\u00be\u00e0\u00a8\u0095 = \"\u00e0\u00a8\u0087\u00e0\u00a8\u00b9 \u00e0\u00a8\u0087\u00e0\u00a9\u00b1\u00e0\u00a8\u0095 \u00e0\u00a8\u009f\u00e0\u00a9\u0088\u00e0\u00a8\u00b8\u00e0\u00a8\u009f \u00e0\u00a8\u00b9\u00e0\u00a9\u0088\" \u00e0\u00a8\u0086\u00e0\u00a8\u0089\u00e0\u00a8\u009f\u00e0\u00a8\u00aa\u00e0\u00a9\u0081\u00e0\u00a9\u00b1\u00e0\u00a8\u009f\u00e0\u00a8\u0083 \"\u00e0\u00a8\u00b9\u00e0\u00a9\u0088\" \u00e0\u00a8\u0089\u00e0\u00a8\u00a6\u00e0\u00a8\u00be\u00e0\u00a8\u00b9\u00e0\u00a8\u00b0\u00e0\u00a8\u00a8 2: \u00e0\u00a8\u0087\u00e0\u00a8\u00a8\u00e0\u00a8\u00aa\u00e0\u00a9\u0081\u00e0\u00a8\u009f\u00e0\u00a8\u0083 \u00e0\u00a8\u00b5\u00e0\u00a8\u00be\u00e0\u00a8\u0095 = \"\u00e0\u00a8\u00b8\u00e0\u00a9\u0081\u00e0\u00a8\u0086\u00e0\u00a8\u0087\u00e0\u00a9\u00b0\u00e0\u00a8\u0097 \u00e0\u00a8\u00b2\u00e0\u00a8\u0088 \u00e0\u00a8\u009c\u00e0\u00a8\u00be\u00e0\u00a8\u00a3 \u00e0\u00a8\u00a6\u00e0\u00a8\u00bf\u00e0\u00a8\u0093\" \u00e0\u00a8\u0086\u00e0\u00a8\u0089\u00e0\u00a8\u009f\u00e0\u00a8\u00aa\u00e0\u00a9\u0081\u00e0\u00a9\u00b1\u00e0\u00a8\u009f\u00e0\u00a8\u0083 \"\u00e0\u00a8\u009c\u00e0\u00a8\u00be\u00e0\u00a8\u0093\" \u00e0\u00a8\u00aa\u00e0\u00a8\u00be\u00e0\u00a8\u00ac\u00e0\u00a9\u00b0\u00e0\u00a8\u00a6\u00e0\u00a9\u0080\u00e0\u00a8\u0086\u00e0\u00a8\u0082\u00e0\u00a8\u0083 * 1 <= len(sentence) <= 100 * \u00e0\u00a8\u00b5\u00e0\u00a8\u00be\u00e0\u00a8\u0095 \u00e0\u00a8\u00b5\u00e0\u00a8\u00bf\u00e0\u00a9\u00b1\u00e0\u00a8\u009a \u00e0\u00a8\u00b8\u00e0\u00a8\u00bf\u00e0\u00a8\u00b0\u00e0\u00a8\u00ab \u00e0\u00a8\u0085\u00e0\u00a9\u00b1\u00e0\u00a8\u0096\u00e0\u00a8\u00b0 \u00e0\u00a8\u00b9\u00e0\u00a8\u00a8\n    \"\"\"\n","canonical_solution":"    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n"}
{"nl":"pap_Latn","prompt":"\n\ndef string_sequence(n: int) -> str:\n    \"\"\" E ta duna un string ku ta konten\u00c3\u00a9 numeronan ku ta keda limit\u00c3\u00a1 pa un espasio, kuminsando for di 0 te n inkluso.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n","canonical_solution":"    return ' '.join([str(x) for x in range(n + 1)])\n","test":"def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n"}
{"nl":"pbt_Arab","prompt":"\ndef largest_smallest_integers(lst):\n    '''\n        ___ ____ ____ ___ __ __ ____ (a, b) _____ ______ ____ __ 'a' _ ____ ______ ___ ______ ___ ___ __ 'b' _ _____ ______ ___ ______ _____ __.\n    __ __ ____ __ ____ __ ____ ______ __ ___ __ ____ None __ ____ _____ _____.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n","canonical_solution":"    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n"}
{"nl":"pes_Arab","prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets \u00db\u008c\u00da\u00a9 \u00d8\u00b1\u00d8\u00b4\u00d8\u00aa\u00d9\u0087 \u00d8\u00a7\u00d8\u00b2 \"<\" \u00d9\u0088 \">\" \u00d8\u00a7\u00d8\u00b3\u00d8\u00aa. \u00d8\u00a7\u00da\u00af\u00d8\u00b1 \u00d9\u0087\u00d8\u00b1 \u00d8\u00a8\u00d8\u00b1\u00d8\u00a7\u00da\u00a9\u00d8\u00aa \u00d8\u00a8\u00d8\u00a7\u00d8\u00b2 \u00d8\u00b4\u00d8\u00af\u00d9\u0087 \u00d8\u00af\u00d8\u00a7\u00d8\u00b1\u00d8\u00a7\u00db\u008c \u00d8\u00a8\u00d8\u00b1\u00d8\u00a7\u00da\u00a9\u00d8\u00aa \u00d8\u00a8\u00d8\u00b3\u00d8\u00aa\u00d9\u0087 \u00d8\u00b4\u00d8\u00af\u00d9\u0087 \u00d8\u00a8\u00d8\u00a7\u00d8\u00b4\u00d8\u00af\u00d8\u008c True \u00d8\u00b1\u00d8\u00a7 \u00d8\u00a8\u00d8\u00a7\u00d8\u00b2 \u00d9\u0085\u00db\u008c \u00da\u00af\u00d8\u00b1\u00d8\u00af\u00d8\u00a7\u00d9\u0086\u00d8\u00af.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n","canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n","test":"def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n"}
{"nl":"plt_Latn","prompt":"\n\ndef max_element(l: list):\n    \"\"\"Miverina ny singa lehibe indrindra ao amin'ny lisitra.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n","canonical_solution":"    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n","test":"def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n"}
{"nl":"pol_Latn","prompt":"\ndef total_match(lst1, lst2):\n    '''\nNapisz funkcj_, kt\u0097ra akceptuje dwie listy ci_g\u0097w znak\u0097w i zwraca list_, kt\u0097ra ma __cznie mniej znak\u0097w we wszystkich ci_gach na li_cie ni_ druga lista.\n\nJe_li obie listy maj_ t_ sam_ liczb_ znak\u0097w, zwr\u0097_ pierwsz_ list_.\n    Examples\n    total_match([], []) \u00c3\u00a2 -> []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u00c3\u00a2 -> ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u00c3\u00a2 -> ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u00c3\u00a2 -> ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u00c3\u00a2 -> ['4']\n    '''\n","canonical_solution":"    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n"}
{"nl":"por_Latn","prompt":"\ndef compare_one(a, b):\n    \"\"\"\n    Criar uma fun\u00c3\u00a7\u00c3\u00a3o que recebe n\u00c3\u00bameros inteiros, floats ou strings representando n\u00c3\u00bameros reais e retorna a vari\u00c3\u00a1vel maior em seu tipo de vari\u00c3\u00a1vel. Retorna None se os valores forem iguais. Nota: Se um n\u00c3\u00bamero real for representado como uma string, o ponto flutuante pode ser. ou, compare_one{1, 2.5) \u00c3\u00a2 -> 2.5 compare_one{1, \"2,3\") \u00c3\u00a2 -> \"2,3\" compare_one{5,1\", \"6\") \u00c3\u00a2 -> \"6\" compare_one{1\", 1) \u00c3\u00a2 -> None\n    \"\"\"\n","canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"prs_Arab","prompt":"\ndef string_to_md5(text):\n    \"\"\"\n    \u00d8\u00a7\u00da\u00af\u00d8\u00b1 \u00db\u008c\u00da\u00a9 \u00d8\u00b1\u00d8\u00b4\u00d8\u00aa\u00d9\u0087 'text' \u00d8\u00af\u00d8\u00a7\u00d8\u00af\u00d9\u0087 \u00d8\u00b4\u00d8\u00af\u00d9\u0087 \u00d8\u00a8\u00d8\u00a7\u00d8\u00b4\u00d8\u00af\u00d8\u008c \u00d8\u00b1\u00d8\u00b4\u00d8\u00aa\u00d9\u0087 \u00d9\u0085\u00d8\u00b9\u00d8\u00a7\u00d8\u00af\u00d9\u0084 \u00d9\u0087\u00d8\u00b4 md5 \u00d8\u00a2\u00d9\u0086 \u00d8\u00b1\u00d8\u00a7 \u00d8\u00a8\u00d8\u00a7\u00d8\u00b2\u00da\u00af\u00d8\u00b1\u00d8\u00af\u00d8\u00a7\u00d9\u0086\u00db\u008c\u00d8\u00af. \u00d8\u00a7\u00da\u00af\u00d8\u00b1 'text' \u00db\u008c\u00da\u00a9 \u00d8\u00b1\u00d8\u00b4\u00d8\u00aa\u00d9\u0087 \u00d8\u00ae\u00d8\u00a7\u00d9\u0084\u00db\u008c \u00d8\u00a8\u00d8\u00a7\u00d8\u00b4\u00d8\u00af\u00d8\u008c None \u00d8\u00b1\u00d8\u00a7 \u00d8\u00a8\u00d8\u00a7\u00d8\u00b2\u00da\u00af\u00d8\u00b1\u00d8\u00af\u00d8\u00a7\u00d9\u0086\u00db\u008c\u00d8\u00af.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n","canonical_solution":"    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"quy_Latn","prompt":"\ndef search(lst):\n    '''\nAma hina waqaychasqa, allin yachay \u0096awi kawsaywan sumaq yachaykamachiqkunawan. Tukuy \u0096awi kawsaykuna \u0096awpaq pacha kipukusqaykuna imayna karqankupaq \u0096awpaq yachaykamachiq. Qhapaq \u0096awi kawsay llapa\u0096a sumaqmi chay yachaykamachiqpa sumaqpi karqa\u0096a, ima hina yachaykamachiq sumaq yachaywan. \nChay \u0096awi kawsaypa yachaykamachiq\u0096ataq, chaypin ama kaykunachu, -1 kutimuy.    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n","canonical_solution":"    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n","test":"def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n"}
{"nl":"ron_Latn","prompt":"\ndef count_up_to(n):\n    \"\"\"Implementarea unei func\u00c8\u009bii care ia un \u00c3\u00aentreg non-negativ \u00c8\u0099i returneaz\u00c4\u0083 o matrice a primelor n de numere prime mai mici de n. de exemplu: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n","canonical_solution":"    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n","test":"def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n"}
{"nl":"run_Latn","prompt":"\ndef count_upper(s):\n    \"\"\"\n    Dufise urutonde s, duharure igitigiri c'indome nkuru mu bisomwa vy'indome z'igiharuro. Nk'akarorero: count_upper (('aBCdEf') igarukana 1 count_upper (('abcdefg') igarukana 0 count_upper (('dBBE') igarukana 0\n    \"\"\"\n","canonical_solution":"    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"rus_Cyrl","prompt":"from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" \u00d0\u00a4\u00d0\u00b8\u00d0\u00bb\u00d1\u008c\u00d1\u0082\u00d1\u0080\u00d0\u00be\u00d0\u00b2\u00d0\u00b0\u00d1\u0082\u00d1\u008c \u00d0\u00b2\u00d1\u0085\u00d0\u00be\u00d0\u00b4\u00d0\u00bd\u00d1\u008b\u00d0\u00b9 \u00d1\u0081\u00d0\u00bf\u00d0\u00b8\u00d1\u0081\u00d0\u00be\u00d0\u00ba \u00d1\u0081\u00d1\u0082\u00d1\u0080\u00d0\u00be\u00d0\u00ba \u00d1\u0082\u00d0\u00be\u00d0\u00bb\u00d1\u008c\u00d0\u00ba\u00d0\u00be \u00d0\u00b4\u00d0\u00bb\u00d1\u008f \u00d1\u0082\u00d0\u00b5\u00d1\u0085, \u00d0\u00ba\u00d0\u00be\u00d1\u0082\u00d0\u00be\u00d1\u0080\u00d1\u008b\u00d0\u00b5 \u00d1\u0081\u00d0\u00be\u00d0\u00b4\u00d0\u00b5\u00d1\u0080\u00d0\u00b6\u00d0\u00b0\u00d1\u0082 \u00d0\u00b4\u00d0\u00b0\u00d0\u00bd\u00d0\u00bd\u00d1\u0083\u00d1\u008e \u00d0\u00bf\u00d0\u00be\u00d0\u00b4\u00d1\u0081\u00d1\u0082\u00d1\u0080\u00d1\u0083\u00d0\u00bd\u00d0\u00ba\u00d1\u0083\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n","canonical_solution":"    return [x for x in strings if substring in x]\n","test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n"}
{"nl":"sag_Latn","prompt":"\ndef solve(N):\n    \"\"\"Na peko ti so a mu na mo mbeni nzoni wungo ti N, kiri na wungo ti a-digit ti lo na lege ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti mol\n    \"\"\"\n","canonical_solution":"    return bin(sum(int(i) for i in str(N)))[2:]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n"}
{"nl":"san_Deva","prompt":"\n\ndef fibfib(n: int):\n    \"\"\"FibFib \u00e0\u00a4\u00b8\u00e0\u00a4\u0082\u00e0\u00a4\u0096\u00e0\u00a5\u008d\u00e0\u00a4\u00af\u00e0\u00a4\u00be\u00e0\u00a4\u0095\u00e0\u00a5\u008d\u00e0\u00a4\u00b0\u00e0\u00a4\u00ae\u00e0\u00a4\u0083 Fibbonacci \u00e0\u00a4\u0085\u00e0\u00a4\u00a8\u00e0\u00a5\u0081\u00e0\u00a4\u0095\u00e0\u00a5\u008d\u00e0\u00a4\u00b0\u00e0\u00a4\u00ae\u00e0\u00a4\u00b8\u00e0\u00a5\u008d\u00e0\u00a4\u00af \u00e0\u00a4\u00b8\u00e0\u00a4\u00a6\u00e0\u00a5\u0083\u00e0\u00a4\u00b6\u00e0\u00a4\u0083 \u00e0\u00a4\u0085\u00e0\u00a4\u00a8\u00e0\u00a5\u0081\u00e0\u00a4\u0095\u00e0\u00a5\u008d\u00e0\u00a4\u00b0\u00e0\u00a4\u00ae\u00e0\u00a4\u0083 \u00e0\u00a4\u0085\u00e0\u00a4\u00b8\u00e0\u00a5\u008d\u00e0\u00a4\u00a4\u00e0\u00a4\u00bf \u00e0\u00a4\u00af\u00e0\u00a4\u00a4\u00e0\u00a5\u008d \u00e0\u00a4\u00a8\u00e0\u00a4\u00bf\u00e0\u00a4\u00ae\u00e0\u00a5\u008d\u00e0\u00a4\u00a8\u00e0\u00a4\u00b2\u00e0\u00a4\u00bf\u00e0\u00a4\u0096\u00e0\u00a4\u00bf\u00e0\u00a4\u00a4\u00e0\u00a4\u00aa\u00e0\u00a5\u008d\u00e0\u00a4\u00b0\u00e0\u00a4\u0095\u00e0\u00a4\u00be\u00e0\u00a4\u00b0\u00e0\u00a5\u0087\u00e0\u00a4\u00a3 \u00e0\u00a4\u00aa\u00e0\u00a4\u00b0\u00e0\u00a4\u00bf\u00e0\u00a4\u00ad\u00e0\u00a4\u00be\u00e0\u00a4\u00b7\u00e0\u00a4\u00bf\u00e0\u00a4\u00a4\u00e0\u00a4\u00ae\u00e0\u00a5\u008d \u00e0\u00a4\u0085\u00e0\u00a4\u00b8\u00e0\u00a5\u008d\u00e0\u00a4\u00a4\u00e0\u00a4\u00bf: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). \u00e0\u00a4\u0095\u00e0\u00a5\u0083\u00e0\u00a4\u00aa\u00e0\u00a4\u00af\u00e0\u00a4\u00be \u00e0\u00a4\u008f\u00e0\u00a4\u0095\u00e0\u00a4\u0082 \u00e0\u00a4\u00ab\u00e0\u00a4\u00b2\u00e0\u00a4\u00a8\u00e0\u00a4\u0082 \u00e0\u00a4\u00b2\u00e0\u00a4\u00bf\u00e0\u00a4\u0096\u00e0\u00a4\u00a4 \u00e0\u00a4\u00af\u00e0\u00a4\u00a4\u00e0\u00a5\u008d \u00e0\u00a4\u008f\u00e0\u00a4\u00a8-\u00e0\u00a4\u0085\u00e0\u00a4\u0082\u00e0\u00a4\u00b6\u00e0\u00a4\u0082 \u00e0\u00a4\u00a4\u00e0\u00a4\u00a4\u00e0\u00a5\u008d\u00e0\u00a4\u00b5\u00e0\u00a4\u0082 \u00e0\u00a4\u0095\u00e0\u00a5\u0081\u00e0\u00a4\u00b6\u00e0\u00a4\u00b2\u00e0\u00a4\u00a4\u00e0\u00a4\u00af\u00e0\u00a4\u00be \u00e0\u00a4\u0097\u00e0\u00a4\u00a3\u00e0\u00a4\u00a8\u00e0\u00a4\u00be\u00e0\u00a4\u00af \u00e0\u00a4\u00b6\u00e0\u00a4\u0095\u00e0\u00a5\u008d\u00e0\u00a4\u00a8\u00e0\u00a5\u008b\u00e0\u00a4\u00a4\u00e0\u00a4\u00bf \u00e0\u00a5\u00a4\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n","canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n","test":"def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n"}
{"nl":"sat_Olck","prompt":"\ndef odd_count(lst):\n    \"\"\"List re\u00e1\u00b9\u00ade strings nena, jena leko string digits re chemda, list re\u00e1\u00b9\u00ade return kar.\n    Output re\u00e1\u00b9\u00ade element i \"the number of odd elements in the string i of the input.\"\n    ke\u00e1\u00b9\u00ade hena, jena i's sab hena replace kar te number of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n","canonical_solution":"    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"scn_Latn","prompt":"\ndef histogram(test):\n    \"\"\"Datu na stringa ca rapprisenta na littra minuri separata di spazziu, riturnari nu dizziunariu d\u00c3\u00a2 littra cu la ripitizzioni cchi\u00c3\u00b9 granni e chi cunteni lu cuntu currispunnenti. Se diversi littri hannu la stissa prisenza, riturnari tutti. Esempiu: istogramma\n\n    \"\"\"\n","canonical_solution":"    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n"}
{"nl":"shn_Mymr","prompt":"\ndef f(n):\n    \"\"\" \u00e1\u0082\u0081\u00e1\u0080\u00b5\u00e1\u0080\u0090\u00e1\u0080\u00ba\u00e1\u0080\u00b8\u00e1\u0080\u009e\u00e1\u0081\u00a2\u00e1\u0080\u0084\u00e1\u0080\u00ba\u00e1\u0082\u0088\u00e1\u0081\u00bc\u00e1\u0082\u0083\u00e1\u0082\u0088\u00e1\u0081\u00b5\u00e1\u0081\u00a2\u00e1\u0081\u00bc\u00e1\u0080\u00ba f \u00e1\u0080\u00a2\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0080\u00a2\u00e1\u0080\u009d\u00e1\u0080\u00ba n \u00e1\u0080\u0095\u00e1\u0080\u00b5\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0080\u0090\u00e1\u0080\u00b0\u00e1\u0080\u009d\u00e1\u0080\u00ba\u00e1\u0081\u00bc\u00e1\u0080\u0095\u00e1\u0080\u00ba\u00e1\u0082\u0089\u00e1\u0080\u009e\u00e1\u0080\u00b1 \u00e1\u0080\u0099\u00e1\u0080\u00ad\u00e1\u0080\u00b0\u00e1\u0080\u009d\u00e1\u0080\u00ba\u00e1\u0080\u00b8\u00e1\u0081\u00b6\u00e1\u0080\u00ad\u00e1\u0080\u00af\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0080\u00b8 \u00e1\u0080\u009e\u00e1\u0080\u00b5\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0082\u0088\u00e1\u0080\u0099\u00e1\u0081\u00a2\u00e1\u0082\u0086\u00e1\u0080\u00a2\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0080\u009a\u00e1\u0082\u0082\u00e1\u0080\u00ba\u00e1\u0082\u0087 n \u00e1\u0081\u00bc\u00e1\u0080\u0084\u00e1\u0080\u00ba\u00e1\u0082\u0087\u00e1\u0081\u00b5\u00e1\u0082\u0083\u00e1\u0082\u0088\u00e1\u0081\u00b6\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0081\u00b6\u00e1\u0080\u00bd\u00e1\u0080\u0084\u00e1\u0080\u00ba \u00e1\u0080\u0090\u00e1\u0080\u00b0\u00e1\u0080\u009d\u00e1\u0080\u00ba\u00e1\u0081\u00bc\u00e1\u0080\u0095\u00e1\u0080\u00ba\u00e1\u0082\u0089\u00e1\u0080\u00a2\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0080\u0099\u00e1\u0080\u00ae\u00e1\u0080\u00b8\u00e1\u0080\u0090\u00e1\u0080\u00ae\u00e1\u0082\u0088 index i \u00e1\u0081\u00bc\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0082\u0089\u00e1\u0080\u0095\u00e1\u0080\u00b5\u00e1\u0081\u00bc\u00e1\u0080\u00ba \u00e1\u0080\u0090\u00e1\u0080\u00b0\u00e1\u0080\u009d\u00e1\u0080\u00ba\u00e1\u0081\u00bc\u00e1\u0080\u0095\u00e1\u0080\u00ba\u00e1\u0082\u0089\u00e1\u0080\u00a2\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0080\u0090\u00e1\u0080\u00b5\u00e1\u0080\u0099\u00e1\u0080\u00ba\u00e1\u0080\u0091\u00e1\u0080\u00b0\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0082\u0088\u00e1\u0081\u00b6\u00e1\u0080\u00bd\u00e1\u0080\u0084\u00e1\u0080\u00ba i \u00e1\u0080\u009e\u00e1\u0080\u0084\u00e1\u0080\u00ba\u00e1\u0080\u009d\u00e1\u0082\u0083\u00e1\u0082\u0088 i \u00e1\u0081\u00bc\u00e1\u0082\u0086\u00e1\u0082\u0089\u00e1\u0080\u0095\u00e1\u0080\u00b5\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0080\u0090\u00e1\u0080\u00b0\u00e1\u0080\u009d\u00e1\u0080\u00ba\u00e1\u0081\u00bc\u00e1\u0080\u0095\u00e1\u0080\u00ba\u00e1\u0082\u0089\u00e1\u0080\u00a2\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0080\u0090\u00e1\u0080\u00b5\u00e1\u0080\u0099\u00e1\u0080\u00ba\u00e1\u0080\u0091\u00e1\u0080\u00b0\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0082\u0088 \u00e1\u0080\u00a2\u00e1\u0080\u0099\u00e1\u0080\u00ba\u00e1\u0082\u0087\u00e1\u0081\u00bc\u00e1\u0081\u00bc\u00e1\u0080\u00ba \u00e1\u0080\u0090\u00e1\u0080\u00b0\u00e1\u0080\u009d\u00e1\u0080\u00ba\u00e1\u0081\u00bc\u00e1\u0080\u0095\u00e1\u0080\u00ba\u00e1\u0082\u0089\u00e1\u0080\u00a2\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0080\u0090\u00e1\u0080\u00b5\u00e1\u0080\u0099\u00e1\u0080\u00ba\u00e1\u0080\u0091\u00e1\u0080\u00b0\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0082\u0088\u00e1\u0081\u00b6\u00e1\u0080\u00bd\u00e1\u0080\u0084\u00e1\u0080\u00ba \u00e1\u0080\u0090\u00e1\u0080\u00b0\u00e1\u0080\u009d\u00e1\u0080\u00ba\u00e1\u0081\u00bc\u00e1\u0080\u0095\u00e1\u0080\u00ba\u00e1\u0082\u0089\u00e1\u0080\u00a2\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0080\u0099\u00e1\u0080\u00ae\u00e1\u0080\u00b8\u00e1\u0080\u0090\u00e1\u0080\u00ae\u00e1\u0082\u0088 1 \u00e1\u0080\u0090\u00e1\u0080\u00b1\u00e1\u0082\u0083\u00e1\u0082\u0087\u00e1\u0080\u0091\u00e1\u0080\u00ad\u00e1\u0080\u00af\u00e1\u0080\u0084\u00e1\u0080\u00ba i \u00e1\u0080\u0095\u00e1\u0080\u00b1\u00e1\u0082\u0083\u00e1\u0080\u00b8\u00e1\u0080\u00a2\u00e1\u0080\u0099\u00e1\u0080\u00ba\u00e1\u0082\u0087\u00e1\u0081\u00bc\u00e1\u0081\u00bc\u00e1\u0080\u00ba i \u00e1\u0080\u0090\u00e1\u0082\u0084\u00e1\u0082\u0087\u00e1\u0080\u0090\u00e1\u0080\u00ae\u00e1\u0082\u0088 1. \u00e1\u0080\u0090\u00e1\u0080\u00b0\u00e1\u0080\u009d\u00e1\u0080\u00ba\u00e1\u0081\u00bc\u00e1\u0080\u0095\u00e1\u0080\u00ba\u00e1\u0082\u0089\u00e1\u0080\u00a2\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0080\u0090\u00e1\u0080\u00b5\u00e1\u0080\u0099\u00e1\u0080\u00ba\u00e1\u0080\u0091\u00e1\u0080\u00b0\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0082\u0088\u00e1\u0081\u00b6\u00e1\u0080\u00bd\u00e1\u0080\u0084\u00e1\u0080\u00ba i \u00e1\u0081\u00bc\u00e1\u0082\u0086\u00e1\u0082\u0089\u00e1\u0080\u0095\u00e1\u0080\u00b5\u00e1\u0081\u00bc\u00e1\u0080\u00ba \u00e1\u0080\u0090\u00e1\u0080\u00b0\u00e1\u0080\u009d\u00e1\u0080\u00ba\u00e1\u0081\u00bc\u00e1\u0080\u0095\u00e1\u0080\u00ba\u00e1\u0082\u0089\u00e1\u0080\u00a2\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0080\u0090\u00e1\u0080\u00b5\u00e1\u0080\u0099\u00e1\u0080\u00ba\u00e1\u0080\u0091\u00e1\u0080\u00b0\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0082\u0088\u00e1\u0081\u00b6\u00e1\u0080\u00bd\u00e1\u0080\u0084\u00e1\u0080\u00ba \u00e1\u0080\u0090\u00e1\u0080\u00b0\u00e1\u0080\u009d\u00e1\u0080\u00ba\u00e1\u0081\u00bc\u00e1\u0080\u0095\u00e1\u0080\u00ba\u00e1\u0082\u0089\u00e1\u0080\u00a2\u00e1\u0081\u00bc\u00e1\u0080\u00ba\u00e1\u0080\u0099\u00e1\u0080\u00ae\u00e1\u0080\u00b8\u00e1\u0080\u0090\u00e1\u0080\u00ae\u00e1\u0082\u0088 1 \u00e1\u0080\u0090\u00e1\u0080\u00b1\u00e1\u0082\u0083\u00e1\u0082\u0087\u00e1\u0080\u0091\u00e1\u0080\u00ad\u00e1\u0080\u00af\u00e1\u0080\u0084\u00e1\u0080\u00ba i (1 * 2 *... * i) \u00e1\u0080\u0090\u00e1\u0080\u00b0\u00e1\u0080\u009d\u00e1\u0080\u00ba\u00e1\u0080\u009a\u00e1\u0081\u00a2\u00e1\u0080\u0084\u00e1\u0080\u00ba\u00e1\u0082\u0087: f (n) == [1, 2, 6, 24, 15]\n    \"\"\"\n","canonical_solution":"    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n","test":"def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n"}
{"nl":"sin_Sinh","prompt":"\n\ndef fibfib(n: int):\n    \"\"\"FibFib \u00e0\u00b6\u0085\u00e0\u00b6\u0082\u00e0\u00b6\u009a \u00e0\u00b6\u0085\u00e0\u00b6\u00b1\u00e0\u00b7\u0094\u00e0\u00b6\u009a\u00e0\u00b7\u008a \u00e0\u00b6\u00bb\u00e0\u00b6\u00b8\u00e0\u00b6\u00ba Fibbonacci \u00e0\u00b6\u0085\u00e0\u00b6\u00b1\u00e0\u00b7\u0094\u00e0\u00b6\u009a\u00e0\u00b7\u008a \u00e0\u00b6\u00bb\u00e0\u00b6\u00b8\u00e0\u00b6\u00ba \u00e0\u00b7\u0084\u00e0\u00b7\u008f \u00e0\u00b7\u0083\u00e0\u00b6\u00b8\u00e0\u00b7\u008f\u00e0\u00b6\u00b1 \u00e0\u00b6\u0085\u00e0\u00b6\u00b1\u00e0\u00b7\u0094\u00e0\u00b6\u009a\u00e0\u00b7\u008a \u00e0\u00b6\u00bb\u00e0\u00b6\u00b8\u00e0\u00b6\u00ba\u00e0\u00b6\u009a\u00e0\u00b7\u0092. \u00e0\u00b6\u0091\u00e0\u00b6\u00ba \u00e0\u00b6\u00b4\u00e0\u00b7\u0084\u00e0\u00b6\u00ad \u00e0\u00b6\u00b4\u00e0\u00b6\u00bb\u00e0\u00b7\u0092\u00e0\u00b6\u00af\u00e0\u00b7\u0092 \u00e0\u00b6\u0085\u00e0\u00b6\u00bb\u00e0\u00b7\u008a\u00e0\u00b6\u00ae \u00e0\u00b6\u00af\u00e0\u00b6\u009a\u00e0\u00b7\u008a\u00e0\u00b7\u0080\u00e0\u00b7\u008f \u00e0\u00b6\u0087\u00e0\u00b6\u00ad: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). \u00e0\u00b6\u009a\u00e0\u00b6\u00bb\u00e0\u00b7\u0094\u00e0\u00b6\u00ab\u00e0\u00b7\u008f\u00e0\u00b6\u009a\u00e0\u00b6\u00bb fibfib \u00e0\u00b6\u0085\u00e0\u00b6\u0082\u00e0\u00b6\u009a \u00e0\u00b6\u0085\u00e0\u00b6\u00b1\u00e0\u00b7\u0094\u00e0\u00b6\u009a\u00e0\u00b7\u008a \u00e0\u00b6\u00bb\u00e0\u00b6\u00b8\u00e0\u00b6\u00ba\u00e0\u00b7\u0099\u00e0\u00b7\u0084\u00e0\u00b7\u0092 n \u00e0\u00b7\u0080\u00e0\u00b6\u00b1 \u00e0\u00b6\u0085\u00e0\u00b6\u0082\u00e0\u00b6\u009c\u00e0\u00b6\u00ba \u00e0\u00b6\u009a\u00e0\u00b7\u008f\u00e0\u00b6\u00bb\u00e0\u00b7\u008a\u00e0\u00b6\u00ba\u00e0\u00b6\u009a\u00e0\u00b7\u008a\u00e0\u00b7\u0082\u00e0\u00b6\u00b8\u00e0\u00b7\u0080 \u00e0\u00b6\u009c\u00e0\u00b6\u00ab\u00e0\u00b6\u00b1\u00e0\u00b6\u00ba \u00e0\u00b6\u009a\u00e0\u00b7\u0092\u00e0\u00b6\u00bb\u00e0\u00b7\u0093\u00e0\u00b6\u00b8 \u00e0\u00b7\u0083\u00e0\u00b6\u00b3\u00e0\u00b7\u0084\u00e0\u00b7\u008f \u00e0\u00b7\u0081\u00e0\u00b7\u008a \u00e0\u00b6\u00bb\u00e0\u00b7\u0092\u00e0\u00b6\u00ad\u00e0\u00b6\u00ba\u00e0\u00b6\u009a\u00e0\u00b7\u008a \u00e0\u00b6\u00bd\u00e0\u00b7\u0092\u00e0\u00b6\u00ba\u00e0\u00b6\u00b1\u00e0\u00b7\u008a\u00e0\u00b6\u00b1.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n","canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n","test":"def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n"}
{"nl":"slk_Latn","prompt":"\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Vr\u00c3\u00a1ti hodnotu True, ak s\u00c3\u00ba v\u00c5\u00a1etky \u00c4\u008d\u00c3\u00adsla v zozname l pod prahom t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n","canonical_solution":"    for e in l:\n        if e >= t:\n            return False\n    return True\n","test":"def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n"}
{"nl":"slv_Latn","prompt":"\ndef decimal_to_binary(decimal):\n    \"\"\"Funkcija bo vrnila niz, pri \u00c4\u008demer bo vsak znak predstavljal binarno \u00c5\u00a1tevilo. Vsak znak v nizu bo \"0\" ali \"1\". Na za\u00c4\u008detku in koncu niza bo dodatnih nekaj znakov \"db\". Dodatni znaki so tam, da pomagajo pri formatu. Primeri: decimal_to_binary ((15) # vrne \"db1111db\" decimal_to_binary32) # vrne \"db100000db\"\n    \"\"\"\n","canonical_solution":"    return \"db\" + bin(decimal)[2:] + \"db\"\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"smo_Latn","prompt":"\ndef hex_key(num):\n    \"\"\"Ua tofia oe e tusi se galuega tauave e maua ai se numera hexadecimal o se manoa ma faitauina le aofai o hexadecimal digits e muamua (numera muamua, po o se muamua, o se numera moni e sili atu nai lo le 1 e le o se oloa o le lua laiti numera moni). hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Numera muamua e 2, 3, 5, 7, 11, 13, 17,... O lea e tatau ona e fuafuaina se numera o le numera nei: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13). Fa\u00ca\u00bbaaliga: e mafai ona e manatu o le sao o taimi uma sa\u00ca\u00bbo pe leai se manoa, ma faailoga A, B, C, D, E, F, e masani lava ona uppercase. Faataitaiga: Mo num \"\n    \"\"\"\n","canonical_solution":"    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n"}
{"nl":"sna_Latn","prompt":"\ndef prime_length(string):\n    \"\"\"Nyora basa rinotora tambo uye rinodzosera Chokwadi kana tambo urefu iri nhamba yekutanga kana Nhema zvimwe Mienzaniso prime_length (('Hello') == Chokwadi prime_length (('abcdcba') == Chokwadi prime_length (('kittens') == Chokwadi prime_length (('orange') == Nhema\n    \"\"\"\n","canonical_solution":"    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n"}
{"nl":"snd_Arab","prompt":"\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels \u00d9\u0087\u00da\u00aa \u00d9\u0081\u00d9\u0086\u00da\u00aa\u00d8\u00b4\u00d9\u0086 \u00d8\u00a2\u00d9\u0087\u00d9\u008a \u00d8\u00ac\u00d9\u008a\u00da\u00aa\u00d9\u0088 \u00d8\u00b3\u00d9\u00bd\u00d8\u00b1\u00d9\u0086\u00da\u00af \u00d9\u0088\u00d9\u00ba\u00d9\u008a \u00d9\u00bf\u00d9\u0088 \u00db\u00bd \u00d8\u00a8\u00d8\u00ba\u00d9\u008a\u00d8\u00b1 \u00d8\u00a2\u00d9\u0088\u00d8\u00a7\u00d8\u00b2\u00d9\u0086 \u00d8\u00ac\u00d9\u008a \u00d8\u00b3\u00d9\u00bd\u00d8\u00b1\u00d9\u0086\u00da\u00af \u00d9\u0088\u00d8\u00a7\u00d9\u00be\u00d8\u00b3 \u00da\u00aa\u00d8\u00b1\u00d9\u008a \u00d9\u00bf\u00d9\u0088.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n","canonical_solution":"    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n","test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n"}
{"nl":"som_Latn","prompt":"\n\ndef is_prime(n):\n    \"\"\"Soo celi run haddii lambarka la siiyey uu yahay tiro koowaad, iyo been haddii kale.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n","canonical_solution":"    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n","test":"def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n"}
{"nl":"sot_Latn","prompt":"\ndef numerical_letter_grade(grades):\n    \"\"\"Ke beke ea ho qetela ea semesetara'me tichere e lokela ho fa liithuti limaraka. Mosuoe o ntse a etsa algorithm ea hae ea ho beha limaraka. Bothata feela ke hore o lahlehetsoe ke khoutu eo a e sebelisitseng ho beha limaraka. O u file lenane la limaraka tsa liithuti tse ling'me u tlameha ho ngola mosebetsi o ka hlahisang lenane la limaraka tsa lengolo u sebelisa tafole e latelang: GPA.\n    \"\"\"\n","canonical_solution":"\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"spa_Latn","prompt":"from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Compruebe si en la lista de n\u00c3\u00bameros dada, hay dos n\u00c3\u00bameros m\u00c3\u00a1s cercanos entre s\u00c3\u00ad que el umbral dado.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n","canonical_solution":"for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n","test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n"}
{"nl":"srd_Latn","prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Avalutat su polin\u00c3\u00b2miu cun sos coefitzientes xs in su puntu x. torrat xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n","canonical_solution":"    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) \/ 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n","test":"def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n"}
{"nl":"srp_Cyrl","prompt":"\ndef rounded_avg(n, m):\n    \"\"\"\u00d0\u0094\u00d0\u00b0\u00d1\u0082\u00d0\u00b8 \u00d1\u0081\u00d1\u0083 \u00d0\u00b2\u00d0\u00b0\u00d0\u00bc \u00d0\u00b4\u00d0\u00b2\u00d0\u00b0 \u00d0\u00bf\u00d0\u00be\u00d0\u00b7\u00d0\u00b8\u00d1\u0082\u00d0\u00b8\u00d0\u00b2\u00d0\u00bd\u00d0\u00b0 \u00d1\u0086\u00d0\u00b5\u00d0\u00bb\u00d0\u00be\u00d0\u00b3 \u00d0\u00b1\u00d1\u0080\u00d0\u00be\u00d1\u0098\u00d0\u00b0 n \u00d0\u00b8 m, \u00d0\u00b0 \u00d0\u00b2\u00d0\u00b0\u00d1\u0088 \u00d0\u00b7\u00d0\u00b0\u00d0\u00b4\u00d0\u00b0\u00d1\u0082\u00d0\u00b0\u00d0\u00ba \u00d1\u0098\u00d0\u00b5 \u00d0\u00b4\u00d0\u00b0 \u00d0\u00b8\u00d0\u00b7\u00d1\u0080\u00d0\u00b0\u00d1\u0087\u00d1\u0083\u00d0\u00bd\u00d0\u00b0\u00d1\u0082\u00d0\u00b5 \u00d0\u00bf\u00d1\u0080\u00d0\u00be\u00d1\u0081\u00d0\u00b5\u00d0\u00ba\u00d1\u0083 \u00d1\u0086\u00d0\u00b5\u00d0\u00bb\u00d0\u00be\u00d0\u00b3 \u00d0\u00b1\u00d1\u0080\u00d0\u00be\u00d1\u0098\u00d0\u00b0 \u00d0\u00be\u00d0\u00b4 n \u00d0\u00b4\u00d0\u00be m (\u00d1\u0083\u00d0\u00ba\u00d1\u0099\u00d1\u0083\u00d1\u0087\u00d1\u0083\u00d1\u0098\u00d1\u0083\u00d1\u009b\u00d0\u00b8 n \u00d0\u00b8 m). \u00d0\u009e\u00d0\u00ba\u00d1\u0080\u00d1\u0083\u00d0\u00b6\u00d0\u00b8\u00d1\u0082\u00d0\u00b5 \u00d0\u00be\u00d0\u00b4\u00d0\u00b3\u00d0\u00be\u00d0\u00b2\u00d0\u00be\u00d1\u0080 \u00d0\u00bd\u00d0\u00b0 \u00d0\u00bd\u00d0\u00b0\u00d1\u0098\u00d0\u00b1\u00d0\u00bb\u00d0\u00b8\u00d0\u00b6\u00d0\u00b8 \u00d1\u0086\u00d0\u00b5\u00d0\u00bb\u00d0\u00b8 \u00d0\u00b1\u00d1\u0080\u00d0\u00be\u00d1\u0098 \u00d0\u00b8 \u00d0\u00bf\u00d1\u0080\u00d0\u00b5\u00d1\u0082\u00d0\u00b2\u00d0\u00be\u00d1\u0080\u00d0\u00b8\u00d1\u0082\u00d0\u00b5 \u00d0\u00b3\u00d0\u00b0 \u00d1\u0083 \u00d0\u00b1\u00d0\u00b8\u00d0\u00bd\u00d0\u00b0\u00d1\u0080\u00d0\u00bd\u00d0\u00b8. \u00d0\u0090\u00d0\u00ba\u00d0\u00be \u00d1\u0098\u00d0\u00b5 n \u00d0\u00b2\u00d0\u00b5\u00d1\u009b\u00d0\u00b8 \u00d0\u00be\u00d0\u00b4 m, \u00d0\u00b2\u00d1\u0080\u00d0\u00b0\u00d1\u0082\u00d0\u00b8\u00d1\u0082\u00d0\u00b5 -1.\n    \"\"\"\n","canonical_solution":"    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation\/(m - n + 1)))\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n"}
{"nl":"ssw_Latn","prompt":"\ndef split_words(txt):\n    '''\n    Nanikwa intfo lentambo yemagama, buyisela luhlu lwemagama luhlukaniswe ngetikhala letimhlophe, uma kute tikhala letimhlophe embhalweni kufanele uhlukanise ngeticoco ',' uma kute ticoco kufanele ubuyisele linani letinhlamvu letincane letinemiyalo lemingcingo kuluhlaza, ord('a') = 0, ord('b') = 1, ... ord('z') = 25    Examples\n    split_words(\"Hello world!\") \u00c3\u00a2 -> [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u00c3\u00a2 -> [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n","canonical_solution":"    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n","test":"def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n"}
{"nl":"sun_Latn","prompt":"\n\ndef flip_case(string: str) -> str:\n    \"\"\" Pikeun string nu dibikeun, ganti aksara leutik jadi aksara ged\u00c3\u00a9 jeung aksara ged\u00c3\u00a9 jadi aksara leutik.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n","canonical_solution":"    return string.swapcase()\n","test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n"}
{"nl":"swe_Latn","prompt":"\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returnerar kodad str\u00c3\u00a4ng med cykelgrupper p\u00c3\u00a5 tre tecken.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) \/\/ 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n","canonical_solution":"    return encode_cyclic(encode_cyclic(s))\n","test":"def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n"}
{"nl":"swh_Latn","prompt":"\ndef anti_shuffle(s):\n    \"\"\"\n    Andika kazi ambayo inachukua kamba na anarudi toleo iliyosimamiwa yake. Ordered toleo la kamba, ni kamba ambapo maneno yote (kutengwa na nafasi) ni kubadilishwa na neno jipya ambapo wahusika wote zimepangwa kwa kuongezeka kwa msingi wa ascii thamani. Kumbuka: Unapaswa kuweka utaratibu wa maneno na nafasi tupu katika hukumu. Kwa mfano: anti_shuffle ((('Hi') anarudi 'Hi' anti_shuffle ((('hello') anarudi 'ehllo' anti_shuffle (('Hello World!!!') anarudi 'Hello!!!Wdlor'\n    \"\"\"\n","canonical_solution":"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"szl_Latn","prompt":"\ndef string_to_md5(text):\n    \"\"\"\n    Je\u00c5\u00bali je dany wiersz 'text', wymiy\u00c5\u0084 jego r\u00c5\u008dwnowa\u00c5\u00bcny wiersz hashu md5. Je\u00c5\u00bali 'text' je pusty wiersz, wymiy\u00c5\u0084 None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n","canonical_solution":"    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"tam_Taml","prompt":"\ndef select_words(s, n):\n    \"\"\"\u00e0\u00ae\u0092\u00e0\u00ae\u00b0\u00e0\u00af\u0081 \u00e0\u00ae\u009a\u00e0\u00ae\u00b0\u00e0\u00ae\u00ae\u00e0\u00af\u008d s \u00e0\u00ae\u00ae\u00e0\u00ae\u00b1\u00e0\u00af\u008d\u00e0\u00ae\u00b1\u00e0\u00af\u0081\u00e0\u00ae\u00ae\u00e0\u00af\u008d \u00e0\u00ae\u0092\u00e0\u00ae\u00b0\u00e0\u00af\u0081 \u00e0\u00ae\u0087\u00e0\u00ae\u00af\u00e0\u00ae\u00b1\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00af\u0088 \u00e0\u00ae\u008e\u00e0\u00ae\u00a3\u00e0\u00af\u008d n \u00e0\u00ae\u0095\u00e0\u00af\u008a\u00e0\u00ae\u009f\u00e0\u00af\u0081\u00e0\u00ae\u0095\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00ae\u00aa\u00e0\u00af\u008d\u00e0\u00ae\u00aa\u00e0\u00ae\u009f\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00ae\u00be\u00e0\u00ae\u00b2\u00e0\u00af\u008d, \u00e0\u00ae\u0087\u00e0\u00ae\u00a8\u00e0\u00af\u008d\u00e0\u00ae\u00a4 \u00e0\u00ae\u009a\u00e0\u00af\u008a\u00e0\u00ae\u00b1\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00ae\u00b3\u00e0\u00af\u008d \u00e0\u00ae\u009a\u00e0\u00ae\u00b0\u00e0\u00ae\u00ae\u00e0\u00af\u008d s \u00e0\u00ae\u0087\u00e0\u00ae\u00b2\u00e0\u00af\u008d \u00e0\u00ae\u00a4\u00e0\u00af\u008b\u00e0\u00ae\u00a9\u00e0\u00af\u008d\u00e0\u00ae\u00b1\u00e0\u00af\u0081\u00e0\u00ae\u00ae\u00e0\u00af\u008d \u00e0\u00ae\u00aa\u00e0\u00af\u008a\u00e0\u00ae\u00b0\u00e0\u00af\u0081\u00e0\u00ae\u009f\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00af\u0081, \u00e0\u00ae\u009a\u00e0\u00ae\u00b0\u00e0\u00ae\u00ae\u00e0\u00af\u008d s \u00e0\u00ae\u0087\u00e0\u00ae\u00b2\u00e0\u00ae\u00bf\u00e0\u00ae\u00b0\u00e0\u00af\u0081\u00e0\u00ae\u00a8\u00e0\u00af\u008d\u00e0\u00ae\u00a4\u00e0\u00af\u0081 \u00e0\u00ae\u009a\u00e0\u00ae\u00b0\u00e0\u00ae\u00bf\u00e0\u00ae\u00af\u00e0\u00ae\u00be\u00e0\u00ae\u0095 n \u00e0\u00ae\u00a4\u00e0\u00af\u0081\u00e0\u00ae\u00a3\u00e0\u00af\u0088\u00e0\u00ae\u0095\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00af\u0081\u00e0\u00ae\u00b1\u00e0\u00ae\u00bf\u00e0\u00ae\u0095\u00e0\u00ae\u00b3\u00e0\u00af\u0088\u00e0\u00ae\u0095\u00e0\u00af\u008d \u00e0\u00ae\u0095\u00e0\u00af\u008a\u00e0\u00ae\u00a3\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00ae\u00bf\u00e0\u00ae\u00b0\u00e0\u00af\u0081\u00e0\u00ae\u0095\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00af\u0081\u00e0\u00ae\u00ae\u00e0\u00af\u008d \u00e0\u00ae\u0085\u00e0\u00ae\u00a9\u00e0\u00af\u0088\u00e0\u00ae\u00a4\u00e0\u00af\u008d\u00e0\u00ae\u00a4\u00e0\u00af\u0081 \u00e0\u00ae\u009a\u00e0\u00af\u008a\u00e0\u00ae\u00b1\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00ae\u00b3\u00e0\u00ae\u00bf\u00e0\u00ae\u00a9\u00e0\u00af\u008d \u00e0\u00ae\u00aa\u00e0\u00ae\u009f\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00ae\u00bf\u00e0\u00ae\u00af\u00e0\u00ae\u00b2\u00e0\u00af\u0088\u00e0\u00ae\u00a4\u00e0\u00af\u008d \u00e0\u00ae\u00a4\u00e0\u00ae\u00bf\u00e0\u00ae\u00b0\u00e0\u00af\u0081\u00e0\u00ae\u00ae\u00e0\u00af\u008d\u00e0\u00ae\u00aa\u00e0\u00ae\u00aa\u00e0\u00af\u008d \u00e0\u00ae\u00aa\u00e0\u00af\u0086\u00e0\u00ae\u00b1\u00e0\u00af\u0081\u00e0\u00ae\u00ae\u00e0\u00af\u008d \u00e0\u00ae\u0092\u00e0\u00ae\u00b0\u00e0\u00af\u0081 \u00e0\u00ae\u009a\u00e0\u00af\u0086\u00e0\u00ae\u00af\u00e0\u00ae\u00b2\u00e0\u00af\u008d\u00e0\u00ae\u00aa\u00e0\u00ae\u00be\u00e0\u00ae\u009f\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00af\u0088 \u00e0\u00ae\u009a\u00e0\u00af\u0086\u00e0\u00ae\u00af\u00e0\u00ae\u00b2\u00e0\u00af\u008d\u00e0\u00ae\u00aa\u00e0\u00ae\u009f\u00e0\u00af\u0081\u00e0\u00ae\u00a4\u00e0\u00af\u008d\u00e0\u00ae\u00a4 \u00e0\u00ae\u0089\u00e0\u00ae\u0099\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00ae\u00b3\u00e0\u00af\u0081\u00e0\u00ae\u0095\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00af\u0081 \u00e0\u00ae\u00aa\u00e0\u00ae\u00a3\u00e0\u00ae\u00bf \u00e0\u00ae\u00b5\u00e0\u00ae\u00b4\u00e0\u00ae\u0099\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00ae\u00aa\u00e0\u00af\u008d\u00e0\u00ae\u00aa\u00e0\u00ae\u009f\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00af\u0081\u00e0\u00ae\u00b3\u00e0\u00af\u008d\u00e0\u00ae\u00b3\u00e0\u00ae\u00a4\u00e0\u00af\u0081. \u00e0\u00ae\u009a\u00e0\u00ae\u00b0\u00e0\u00ae\u00ae\u00e0\u00af\u008d s \u00e0\u00ae\u0095\u00e0\u00ae\u00be\u00e0\u00ae\u00b2\u00e0\u00ae\u00bf\u00e0\u00ae\u00af\u00e0\u00ae\u00be\u00e0\u00ae\u0095 \u00e0\u00ae\u0087\u00e0\u00ae\u00b0\u00e0\u00af\u0081\u00e0\u00ae\u00a8\u00e0\u00af\u008d\u00e0\u00ae\u00a4\u00e0\u00ae\u00be\u00e0\u00ae\u00b2\u00e0\u00af\u008d, \u00e0\u00ae\u009a\u00e0\u00af\u0086\u00e0\u00ae\u00af\u00e0\u00ae\u00b2\u00e0\u00af\u008d\u00e0\u00ae\u00aa\u00e0\u00ae\u00be\u00e0\u00ae\u009f\u00e0\u00af\u0081 \u00e0\u00ae\u0092\u00e0\u00ae\u00b0\u00e0\u00af\u0081 \u00e0\u00ae\u0095\u00e0\u00ae\u00be\u00e0\u00ae\u00b2\u00e0\u00ae\u00bf\u00e0\u00ae\u00af\u00e0\u00ae\u00be\u00e0\u00ae\u00a9 \u00e0\u00ae\u00aa\u00e0\u00ae\u009f\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00ae\u00bf\u00e0\u00ae\u00af\u00e0\u00ae\u00b2\u00e0\u00af\u0088\u00e0\u00ae\u00a4\u00e0\u00af\u008d \u00e0\u00ae\u00a4\u00e0\u00ae\u00bf\u00e0\u00ae\u00b0\u00e0\u00af\u0081\u00e0\u00ae\u00ae\u00e0\u00af\u008d\u00e0\u00ae\u00aa\u00e0\u00ae\u00aa\u00e0\u00af\u008d \u00e0\u00ae\u00aa\u00e0\u00af\u0086\u00e0\u00ae\u00b1 \u00e0\u00ae\u00b5\u00e0\u00af\u0087\u00e0\u00ae\u00a3\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00af\u0081\u00e0\u00ae\u00ae\u00e0\u00af\u008d. \u00e0\u00ae\u0095\u00e0\u00af\u0081\u00e0\u00ae\u00b1\u00e0\u00ae\u00bf\u00e0\u00ae\u00aa\u00e0\u00af\u008d\u00e0\u00ae\u00aa\u00e0\u00af\u0081\u00e0\u00ae\u0083 \u00e0\u00ae\u0089\u00e0\u00ae\u00b3\u00e0\u00af\u008d\u00e0\u00ae\u00b3\u00e0\u00af\u0080\u00e0\u00ae\u009f\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00af\u0081 \u00e0\u00ae\u009a\u00e0\u00ae\u00b0\u00e0\u00ae\u00ae\u00e0\u00af\u008d \u00e0\u00ae\u0095\u00e0\u00ae\u009f\u00e0\u00ae\u00bf\u00e0\u00ae\u00a4\u00e0\u00ae\u0099\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00ae\u00b3\u00e0\u00af\u008d \u00e0\u00ae\u00ae\u00e0\u00ae\u00b1\u00e0\u00af\u008d\u00e0\u00ae\u00b1\u00e0\u00af\u0081\u00e0\u00ae\u00ae\u00e0\u00af\u008d \u00e0\u00ae\u0087\u00e0\u00ae\u009f\u00e0\u00af\u0088\u00e0\u00ae\u00b5\u00e0\u00af\u0086\u00e0\u00ae\u00b3\u00e0\u00ae\u00bf\u00e0\u00ae\u0095\u00e0\u00ae\u00b3\u00e0\u00af\u008d \u00e0\u00ae\u00ae\u00e0\u00ae\u009f\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00af\u0081\u00e0\u00ae\u00ae\u00e0\u00af\u0087 \u00e0\u00ae\u0095\u00e0\u00af\u008a\u00e0\u00ae\u00a3\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00ae\u00bf\u00e0\u00ae\u00b0\u00e0\u00af\u0081\u00e0\u00ae\u00aa\u00e0\u00af\u008d\u00e0\u00ae\u00aa\u00e0\u00ae\u00a4\u00e0\u00ae\u00be\u00e0\u00ae\u0095 \u00e0\u00ae\u00a8\u00e0\u00af\u0080\u00e0\u00ae\u0099\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00ae\u00b3\u00e0\u00af\u008d \u00e0\u00ae\u0095\u00e0\u00ae\u00b0\u00e0\u00af\u0081\u00e0\u00ae\u00a4\u00e0\u00ae\u00b2\u00e0\u00ae\u00be\u00e0\u00ae\u00ae\u00e0\u00af\u008d. \u00e0\u00ae\u008e\u00e0\u00ae\u009f\u00e0\u00af\u0081\u00e0\u00ae\u00a4\u00e0\u00af\u008d\u00e0\u00ae\u00a4\u00e0\u00af\u0081\u00e0\u00ae\u0095\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00ae\u00be\u00e0\u00ae\u009f\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00af\u0081\u00e0\u00ae\u0095\u00e0\u00ae\u00b3\u00e0\u00af\u008d\u00e0\u00ae\u0083 select_words (((\"\u00e0\u00ae\u00ae\u00e0\u00af\u0087\u00e0\u00ae\u00b0\u00e0\u00ae\u00bf \u00e0\u00ae\u0092\u00e0\u00ae\u00b0\u00e0\u00af\u0081 \u00e0\u00ae\u009a\u00e0\u00ae\u00bf\u00e0\u00ae\u00b1\u00e0\u00ae\u00bf\u00e0\u00ae\u00af \u00e0\u00ae\u0086\u00e0\u00ae\u009f\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00af\u0081\u00e0\u00ae\u0095\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00af\u0081\u00e0\u00ae\u009f\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00ae\u00bf \u00e0\u00ae\u0087\u00e0\u00ae\u00b0\u00e0\u00af\u0081\u00e0\u00ae\u00a8\u00e0\u00af\u008d\u00e0\u00ae\u00a4\u00e0\u00ae\u00a4\u00e0\u00af\u0081\", 4) ==> [\"little\"] select_words (((\"\u00e0\u00ae\u00ae\u00e0\u00af\u0087\u00e0\u00ae\u00b0\u00e0\u00ae\u00bf \u00e0\u00ae\u0092\u00e0\u00ae\u00b0\u00e0\u00af\u0081 \u00e0\u00ae\u009a\u00e0\u00ae\u00bf\u00e0\u00ae\u00b1\u00e0\u00ae\u00bf\u00e0\u00ae\u00af \u00e0\u00ae\u0086\u00e0\u00ae\u009f\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00af\u0081\u00e0\u00ae\u0095\u00e0\u00af\u008d\u00e0\u00ae\u0095\u00e0\u00af\u0081\u00e0\u00ae\u009f\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00ae\u00bf \u00e0\u00ae\u0087\u00e0\u00ae\u00b0\u00e0\u00af\u0081\u00e0\u00ae\u00a8\u00e0\u00af\u008d\u00e0\u00ae\u00a4\u00e0\u00ae\u00a4\u00e0\u00af\u0081\", 3) ==> [\"\u00e0\u00ae\u00ae\u00e0\u00af\u0087\u00e0\u00ae\u00b0\u00e0\u00ae\u00bf\", \"lamb\"] select_words\"\u00e0\u00ae\u008e\u00e0\u00ae\u00b3\u00e0\u00ae\u00bf\u00e0\u00ae\u00af \u00e0\u00ae\u00b5\u00e0\u00af\u0086\u00e0\u00ae\u00b3\u00e0\u00af\u008d\u00e0\u00ae\u00b3\u00e0\u00af\u0088 \u00e0\u00ae\u0087\u00e0\u00ae\u009f\u00e0\u00af\u0088\u00e0\u00ae\u00b5\u00e0\u00af\u0086\u00e0\u00ae\u00b3\u00e0\u00ae\u00bf\", 2) ==> [] select_words (((\"\u00e0\u00ae\u00b9\u00e0\u00ae\u00b2\u00e0\u00af\u008b \u00e0\u00ae\u00b5\u00e0\u00af\u0087\u00e0\u00ae\u00b0\u00e0\u00af\u008d\u00e0\u00ae\u00b2\u00e0\u00af\u008d\u00e0\u00ae\u009f\u00e0\u00af\u008d\", 4) ==\n    \"\"\"\n","canonical_solution":"    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n"}
{"nl":"taq_Latn","prompt":"\ndef is_equal_to_sum_even(n):\n    \"\"\"\u00c6\u008flk\u00c9\u0099ttab \u00c9\u0099n ma\u00c9\u0097in atiw\u00c9\u0099jan n adobat atw\u00c9\u0099ja sund ams\u00c9\u0099du \u00c9\u0099n 4 ma\u00c9\u0097inan \u00c9\u0099ndaratnen \u00c9\u0099ndaratnen, sund sund sund ams\u00c9\u0099du eqalan ogdah\u00c9\u0099n as ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n ams\u00c9\u0099du \u00c9\u0099n\n    \"\"\"\n","canonical_solution":"    return n%2 == 0 and n >= 8\n","test":"def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n"}
{"nl":"taq_Tfng","prompt":"from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" \u00e2\u00b5\u0099\u00e2\u00b4\u00b3 \u00e2\u00b5\u009c\u00e2\u00b5\u008d\u00e2\u00b4\u00b3\u00e2\u00b4\u00b0\u00e2\u00b5\u008e\u00e2\u00b5\u009c \u00e2\u00b5\u008f \u00e2\u00b5\u0089\u00e2\u00b5\u008e\u00e2\u00b4\u00b9\u00e2\u00b4\u00b0\u00e2\u00b5\u008f \u00e2\u00b5\u0089\u00e2\u00b5\u008e\u00e2\u00b4\u00b7\u00e2\u00b4\u00b7\u00e2\u00b4\u00b0\u00e2\u00b4\u00b7\u00e2\u00b5\u008f, \u00e2\u00b5\u0099\u00e2\u00b5\u0099\u00e2\u00b5\u0093\u00e2\u00b4\u00bc\u00e2\u00b5\u0096 \u00e2\u00b5\u0089\u00e2\u00b4\u00bc\u00e2\u00b5\u0094\u00e2\u00b4\u00b7\u00e2\u00b5\u0089\u00e2\u00b5\u0099\u00e2\u00b5\u008f \u00e2\u00b4\u00b0\u00e2\u00b4\u00bd\u00e2\u00b4\u00bd\u00e2\u00b5\u00a1 \u00e2\u00b5\u008f\u00e2\u00b5\u008f\u00e2\u00b4\u00b0 \u00e2\u00b5\u0089\u00e2\u00b5\u009c\u00e2\u00b5\u009c\u00e2\u00b5\u008a\u00e2\u00b5\u0095\u00e2\u00b5\u0093\u00e2\u00b5\u008f \u00e2\u00b5\u0093\u00e2\u00b4\u00b3\u00e2\u00b4\u00b3\u00e2\u00b4\u00b0\u00e2\u00b5\u0094 \u00e2\u00b5\u008f \u00e2\u00b5\u00a2\u00e2\u00b4\u00b0\u00e2\u00b5\u009c \u00e2\u00b5\u009c\u00e2\u00b5\u0089\u00e2\u00b4\u00bd\u00e2\u00b4\u00bd\u00e2\u00b5\u008d\u00e2\u00b5\u009c. \u00e2\u00b5\u0083\u00e2\u00b4\u00b9\u00e2\u00b5\u0093 \u00e2\u00b5\u009c\u00e2\u00b4\u00b0\u00e2\u00b5\u008d\u00e2\u00b4\u00b3\u00e2\u00b4\u00b0\u00e2\u00b5\u008e\u00e2\u00b5\u009c \u00e2\u00b5\u008f \u00e2\u00b5\u0089\u00e2\u00b4\u00bc\u00e2\u00b5\u0094\u00e2\u00b4\u00b7\u00e2\u00b5\u0089\u00e2\u00b5\u0099\u00e2\u00b5\u008f \u00e2\u00b5\u0089\u00e2\u00b5\u0087\u00e2\u00b5\u0087\u00e2\u00b5\u0089\u00e2\u00b5\u008e\u00e2\u00b5\u008f \u00e2\u00b4\u00b0\u00e2\u00b5\u008e\u00e2\u00b5\u008e \u00e2\u00b5\u00a1\u00e2\u00b5\u0089\u00e2\u00b5\u008f\u00e2\u00b5\u008f\u00e2\u00b4\u00b0 \u00e2\u00b4\u00b3 \u00e2\u00b5\u009c\u00e2\u00b4\u00bd\u00e2\u00b5\u009b\u00e2\u00b5\u009b\u00e2\u00b5\u0093\u00e2\u00b5\u008e\u00e2\u00b5\u009c.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n","canonical_solution":"    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n","test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n"}
{"nl":"tat_Cyrl","prompt":"\ndef move_one_ball(arr):\n    \"\"\"\u00d0\u0091\u00d0\u00b5\u00d0\u00b7\u00d0\u00bd\u00d0\u00b5\u00d2\u00a3 array 'arr' N \u00d0\u00b1\u00d3\u00a9\u00d1\u0082\u00d0\u00b5\u00d0\u00bd \u00d1\u0081\u00d0\u00b0\u00d0\u00bd\u00d0\u00bd\u00d0\u00b0\u00d1\u0080\u00d0\u00b4\u00d0\u00b0\u00d0\u00bd \u00d1\u0082\u00d0\u00be\u00d1\u0080\u00d0\u00b0 arr[1], arr[2],..., arr[N].\u00d0\u00a1\u00d0\u00b0\u00d0\u00bd\u00d0\u00bd\u00d0\u00b0\u00d1\u0080 \u00d1\u0087\u00d0\u00b8\u00d1\u0080\u00d0\u00b0\u00d1\u0082\u00d1\u0082\u00d0\u00b0 \u00d0\u00be\u00d1\u0087\u00d1\u0080\u00d0\u00b0\u00d0\u00ba\u00d0\u00bb\u00d1\u008b \u00d1\u0082\u00d3\u0099\u00d1\u0080\u00d1\u0082\u00d0\u00b8\u00d0\u00bf\u00d1\u0082\u00d3\u0099 \u00d1\u0083\u00d1\u0080\u00d0\u00bd\u00d0\u00b0\u00d1\u0088\u00d1\u0082\u00d1\u008b\u00d1\u0080\u00d1\u008b\u00d0\u00bb\u00d0\u00b0\u00d1\u0087\u00d0\u00b0\u00d0\u00ba. \u00d0\u00a1\u00d0\u00b5\u00d0\u00b7\u00d0\u00bd\u00d0\u00b5\u00d2\u00a3 \u00d0\u00b1\u00d1\u0083\u00d1\u0080\u00d1\u008b\u00d1\u0087\u00d1\u008b\u00d0\u00b3\u00d1\u008b\u00d0\u00b7 - \u00d0\u00b1\u00d0\u00b8\u00d1\u0080\u00d0\u00b5\u00d0\u00bb\u00d0\u00b3\u00d3\u0099\u00d0\u00bd \u00d0\u00bc\u00d0\u00b0\u00d1\u0081\u00d1\u0081\u00d0\u00b8\u00d0\u00b2\u00d1\u0082\u00d0\u00b0 \u00d1\u0082\u00d2\u00af\u00d0\u00b1\u00d3\u0099\u00d0\u00bd\u00d0\u00b4\u00d3\u0099\u00d0\u00b3\u00d0\u00b5 \u00d0\u00be\u00d0\u00bf\u00d0\u00b5\u00d1\u0080\u00d0\u00b0\u00d1\u0086\u00d0\u00b8\u00d1\u008f\u00d0\u00bd\u00d0\u00b5 \u00d0\u00b1\u00d0\u00b0\u00d1\u0088\u00d0\u00ba\u00d0\u00b0\u00d1\u0080\u00d1\u008b\u00d0\u00bf, \u00d0\u00ba\u00d0\u00b5\u00d1\u0087\u00d0\u00b5\u00d1\u0080\u00d3\u0099\u00d0\u00b9\u00d0\u00bc\u00d0\u00b8 \u00d1\u0082\u00d0\u00be\u00d1\u0080\u00d0\u00b3\u00d0\u00b0\u00d0\u00bd \u00d1\u0082\u00d3\u0099\u00d1\u0080\u00d1\u0082\u00d0\u00b8\u00d0\u00bf\u00d1\u0082\u00d3\u0099 \u00d1\u0087\u00d0\u00b8\u00d1\u0080\u00d0\u00b0\u00d1\u0082\u00d0\u00bb\u00d0\u00b0\u00d1\u0088\u00d0\u00ba\u00d0\u00b0\u00d0\u00bd \u00d0\u00bc\u00d0\u00b0\u00d1\u0081\u00d1\u0081\u00d0\u00b8\u00d0\u00b2\u00d0\u00bd\u00d1\u008b \u00d0\u00b0\u00d0\u00bb\u00d1\u0083 \u00d0\u00bc\u00d3\u00a9\u00d0\u00bc\u00d0\u00ba\u00d0\u00b8\u00d0\u00bd\u00d0\u00bc\u00d0\u00b5 \u00d0\u00b8\u00d0\u00ba\u00d3\u0099\u00d0\u00bd\u00d0\u00b5\u00d0\u00bd \u00d0\u00b1\u00d0\u00b8\u00d0\u00bb\u00d0\u00b3\u00d0\u00b5\u00d0\u00bb\u00d3\u0099\u00d2\u00af: \u00d0\u00a1\u00d0\u00b5\u00d0\u00b7\u00d0\u00b3\u00d3\u0099 \u00d1\u0082\u00d0\u00b5\u00d0\u00bb\u00d3\u0099\u00d1\u0081\u00d3\u0099 \u00d0\u00ba\u00d2\u00af\u00d0\u00bf\u00d0\u00bc\u00d0\u00b5 \u00d1\u0082\u00d0\u00b0\u00d0\u00bf\u00d0\u00ba\u00d1\u008b\u00d1\u0080 \u00d1\u0083\u00d2\u00a3\u00d0\u00b3\u00d0\u00b0 \u00d0\u00ba\u00d2\u00af\u00d1\u0087\u00d0\u00b5\u00d1\u0080\u00d2\u00af \u00d0\u00be\u00d0\u00bf\u00d0\u00b5\u00d1\u0080\u00d0\u00b0\u00d1\u0086\u00d0\u00b8\u00d1\u008f\u00d1\u0081\u00d0\u00b5\u00d0\u00bd \u00d0\u00b1\u00d0\u00b0\u00d1\u0088\u00d0\u00ba\u00d0\u00b0\u00d1\u0080\u00d1\u008b\u00d1\u0080\u00d0\u00b3\u00d0\u00b0 \u00d1\u0080\u00d3\u00a9\u00d1\u0085\u00d1\u0081\u00d3\u0099\u00d1\u0082 \u00d0\u00b8\u00d1\u0082\u00d0\u00b5\u00d0\u00bb\u00d3\u0099. \u00d0\u0091\u00d0\u00b5\u00d1\u0080 \u00d1\u0083\u00d2\u00a3\u00d0\u00b3\u00d0\u00b0 \u00d0\u00ba\u00d2\u00af\u00d1\u0087\u00d0\u00b5\u00d1\u0080\u00d2\u00af \u00d0\u00be\u00d0\u00bf\u00d0\u00b5\u00d1\u0080\u00d0\u00b0\u00d1\u0086\u00d0\u00b8\u00d1\u008f\u00d1\u0081\u00d0\u00b5 \u00d0\u00bc\u00d0\u00b0\u00d1\u0081\u00d1\u0081\u00d0\u00b8\u00d0\u00b2\u00d0\u00bd\u00d1\u008b\u00d2\u00a3 \u00d0\u00b1\u00d0\u00b0\u00d1\u0080\u00d0\u00bb\u00d1\u008b\u00d0\u00ba \u00d1\u008d\u00d0\u00bb\u00d0\u00b5\u00d0\u00bc\u00d0\u00b5\u00d0\u00bd\u00d1\u0082\u00d0\u00bb\u00d0\u00b0\u00d1\u0080\u00d1\u008b\u00d0\u00bd \u00d0\u00b1\u00d0\u00b5\u00d1\u0080 \u00d0\u00bf\u00d0\u00be\u00d0\u00b7\u00d0\u00b8\u00d1\u0086\u00d0\u00b8\u00d1\u008f\u00d0\u00b4\u00d3\u0099 \u00d1\u0083\u00d2\u00a3 \u00d1\u008f\u00d0\u00ba\u00d0\u00ba\u00d0\u00b0 \u00d0\u00ba\u00d2\u00af\u00d1\u0087\u00d0\u00b5\u00d1\u0080\u00d2\u00af\u00d0\u00bd\u00d0\u00b5 \u00d0\u00b0\u00d2\u00a3\u00d0\u00bb\u00d0\u00b0\u00d1\u0082\u00d0\u00b0. \u00d0\u009c\u00d0\u00b0\u00d1\u0081\u00d1\u0081\u00d0\u00b8\u00d0\u00b2\u00d0\u00bd\u00d1\u008b\u00d2\u00a3 \u00d1\u0081\u00d0\u00be\u00d2\u00a3\u00d0\u00b3\u00d1\u008b \u00d1\u008d\u00d0\u00bb\u00d0\u00b5\u00d0\u00bc\u00d0\u00b5\u00d0\u00bd\u00d1\u0082\u00d1\u008b \u00d0\u00bc\u00d0\u00b0\u00d1\u0081\u00d1\u0081\u00d0\u00b8\u00d0\u00b2\u00d0\u00bd\u00d1\u008b\u00d2\u00a3 \u00d0\u00b1\u00d0\u00b0\u00d1\u0088\u00d0\u00bb\u00d0\u00b0\u00d0\u00bd\u00d0\u00b3\u00d1\u008b\u00d1\u0087 \u00d0\u00bf\u00d0\u00be\u00d0\u00b7\u00d0\u00b8\u00d1\u0086\u00d0\u00b8\u00d1\u008f\u00d1\u0081\u00d0\u00b5\u00d0\u00bd\u00d3\u0099 \u00d0\u00ba\u00d2\u00af\u00d1\u0087\u00d0\u00b5\u00d1\u0080\u00d0\u00b5\u00d0\u00bb\u00d3\u0099\u00d1\u0087\u00d3\u0099\u00d0\u00ba, \u00d1\u008f\u00d0\u00b3\u00d1\u008a\u00d0\u00bd\u00d0\u00b8 0 \u00d0\u00bd\u00d1\u0087\u00d1\u008b \u00d0\u00b8\u00d0\u00bd\u00d0\u00b4\u00d0\u00b5\u00d0\u00ba\u00d1\u0081. \u00d3\u0098\u00d0\u00b3\u00d3\u0099\u00d1\u0080 \u00d3\u00a9\u00d1\u0081\u00d1\u0082\u00d3\u0099\u00d0\u00b3\u00d0\u00b5 \u00d0\u00be\u00d0\u00bf\u00d0\u00b5\u00d1\u0080\u00d0\u00b0\u00d1\u0086\u00d0\u00b8\u00d1\u008f\u00d0\u00bd\u00d0\u00b5 \u00d0\u00b1\u00d0\u00b0\u00d1\u0088\u00d0\u00ba\u00d0\u00b0\u00d1\u0080\u00d1\u008b\u00d0\u00bf, \u00d1\u0082\u00d3\u0099\u00d1\u0080\u00d1\u0082\u00d0\u00b8\u00d0\u00bf\u00d0\u00ba\u00d3\u0099 \u00d1\u0081\u00d0\u00b0\u00d0\u00bb\u00d1\u008b\u00d0\u00bd\u00d0\u00b3\u00d0\u00b0\u00d0\u00bd \u00d0\u00bc\u00d0\u00b0\u00d1\u0081\u00d1\u0081\u00d0\u00b8\u00d0\u00b2\u00d0\u00bd\u00d1\u008b \u00d0\u00b0\u00d0\u00bb\u00d1\u0083 \u00d0\u00bc\u00d3\u00a9\u00d0\u00bc\u00d0\u00ba\u00d0\u00b8\u00d0\u00bd \u00d0\u00b1\u00d1\u0083\u00d0\u00bb\u00d1\u0081\u00d0\u00b0, \u00d1\u0083\u00d0\u00bb \u00d1\u0087\u00d0\u00b0\u00d0\u00ba\u00d1\u0082\u00d0\u00b0 True \u00d0\u00ba\u00d0\u00b0\u00d0\u00b9\u00d1\u0082\u00d0\u00b0\u00d1\u0080\u00d1\u008b\u00d0\u00b3\u00d1\u008b\u00d0\u00b7, \u00d1\u008e\u00d0\u00b3\u00d1\u008b\u00d0\u00b9\u00d1\u0081\u00d3\u0099 False \u00d0\u00ba\u00d0\u00b0\u00d0\u00b9\u00d1\u0082\u00d0\u00b0\u00d1\u0080\u00d1\u008b\u00d0\u00b3\u00d1\u008b\u00d0\u00b7. \u00d3\u0098\u00d0\u00b3\u00d3\u0099\u00d1\u0080 \u00d0\u00b1\u00d0\u00b8\u00d1\u0080\u00d0\u00b5\u00d0\u00bb\u00d0\u00b3\u00d3\u0099\u00d0\u00bd \u00d0\u00bc\u00d0\u00b0\u00d1\u0081\u00d1\u0081\u00d0\u00b8\u00d0\u00b2 \u00d0\u00b1\u00d1\u0083\u00d1\u0088 \u00d0\u00b1\u00d1\u0083\u00d0\u00bb\u00d1\u0081\u00d0\u00b0, \u00d1\u0083\u00d0\u00bb \u00d1\u0087\u00d0\u00b0\u00d0\u00ba\u00d1\u0082\u00d0\u00b0 True \u00d0\u00ba\u00d0\u00b0\u00d0\u00b9\u00d1\u0082\u00d0\u00b0\u00d1\u0080\u00d1\u008b\u00d0\u00b3\u00d1\u008b\u00d0\u00b7. \u00d0\u0098\u00d0\u00b3\u00d1\u008a\n                \n    \"\"\"\n","canonical_solution":"    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n"}
{"nl":"tel_Telu","prompt":"\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    \u00e0\u00b0\u00ae\u00e0\u00b1\u0082\u00e0\u00b0\u00a1\u00e0\u00b1\u0081 \u00e0\u00b0\u0085\u00e0\u00b0\u0095\u00e0\u00b1\u008d\u00e0\u00b0\u00b7\u00e0\u00b0\u00b0\u00e0\u00b0\u00be\u00e0\u00b0\u00b2 \u00e0\u00b0\u00b8\u00e0\u00b1\u0088\u00e0\u00b0\u0095\u00e0\u00b1\u008d\u00e0\u00b0\u00b2\u00e0\u00b0\u00bf\u00e0\u00b0\u0082\u00e0\u00b0\u0097\u00e0\u00b1\u008d \u00e0\u00b0\u00b8\u00e0\u00b0\u00ae\u00e0\u00b1\u0082\u00e0\u00b0\u00b9\u00e0\u00b0\u00be\u00e0\u00b0\u00b2 \u00e0\u00b0\u00a6\u00e0\u00b1\u008d\u00e0\u00b0\u00b5\u00e0\u00b0\u00be\u00e0\u00b0\u00b0\u00e0\u00b0\u00be \u00e0\u00b0\u008e\u00e0\u00b0\u00a8\u00e0\u00b1\u008d\u00e0\u00b0\u0095\u00e0\u00b1\u008b\u00e0\u00b0\u00a1\u00e0\u00b1\u008d \u00e0\u00b0\u009a\u00e0\u00b1\u0087\u00e0\u00b0\u00af\u00e0\u00b0\u00ac\u00e0\u00b0\u00a1\u00e0\u00b0\u00bf\u00e0\u00b0\u00a8 \u00e0\u00b0\u00b8\u00e0\u00b1\u008d\u00e0\u00b0\u009f\u00e0\u00b1\u008d\u00e0\u00b0\u00b0\u00e0\u00b0\u00bf\u00e0\u00b0\u0082\u00e0\u00b0\u0097\u00e0\u00b1\u008d\u00e0\u00b0\u00a8\u00e0\u00b1\u0081 \u00e0\u00b0\u00a4\u00e0\u00b0\u00bf\u00e0\u00b0\u00b0\u00e0\u00b0\u00bf\u00e0\u00b0\u0097\u00e0\u00b0\u00bf \u00e0\u00b0\u0087\u00e0\u00b0\u00b8\u00e0\u00b1\u008d\u00e0\u00b0\u00a4\u00e0\u00b1\u0081\u00e0\u00b0\u0082\u00e0\u00b0\u00a6\u00e0\u00b0\u00bf.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) \/\/ 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n","canonical_solution":"    return encode_cyclic(encode_cyclic(s))\n","test":"def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n"}
{"nl":"tgk_Cyrl","prompt":"\ndef smallest_change(arr):\n    \"\"\"\n    \u00d0\u0094\u00d0\u00b0\u00d1\u0080 \u00d0\u00bc\u00d0\u00b0\u00d1\u0081\u00d1\u0081\u00d0\u00b8\u00d0\u00b2\u00d0\u00b8 arr \u00d0\u00b0\u00d0\u00b4\u00d0\u00b0\u00d0\u00b4\u00d2\u00b3\u00d0\u00be\u00d0\u00b8 \u00d0\u00bf\u00d1\u0083\u00d1\u0080\u00d1\u0080\u00d0\u00b0 \u00d0\u00b4\u00d0\u00be\u00d0\u00b4\u00d0\u00b0 \u00d1\u0088\u00d1\u0083\u00d0\u00b4\u00d0\u00b0, \u00d1\u0088\u00d1\u0083\u00d0\u00bc\u00d0\u00be\u00d1\u0080\u00d0\u00b0\u00d0\u00b8 \u00d0\u00ba\u00d0\u00b0\u00d0\u00bc\u00d1\u0082\u00d0\u00b0\u00d1\u0080\u00d0\u00b8\u00d0\u00bd\u00d0\u00b8 \u00d1\u0083\u00d0\u00bd\u00d1\u0081\u00d1\u0083\u00d1\u0080\u00d2\u00b3\u00d0\u00be\u00d1\u0080\u00d0\u00be, \u00d0\u00ba\u00d0\u00b8 \u00d0\u00b1\u00d0\u00b0\u00d1\u0080\u00d0\u00be\u00d0\u00b8 \u00d1\u0082\u00d0\u00b0\u00d2\u0093\u00d0\u00b9\u00d0\u00b8\u00d1\u0080 \u00d0\u00b4\u00d0\u00be\u00d0\u00b4\u00d0\u00b0\u00d0\u00bd\u00d0\u00b8 \u00d0\u00bc\u00d0\u00b0\u00d1\u0081\u00d1\u0081\u00d0\u00b8\u00d0\u00b2 palindromic \u00d0\u00bb\u00d0\u00be\u00d0\u00b7\u00d0\u00b8\u00d0\u00bc \u00d0\u00b0\u00d1\u0081\u00d1\u0082, \u00d1\u0091\u00d0\u00b1\u00d0\u00b5\u00d0\u00b4. \u00d0\u009c\u00d0\u00b0\u00d1\u0081\u00d1\u0081\u00d0\u00b8\u00d0\u00b2\u00d0\u00b8 palindromic \u00d0\u00bc\u00d0\u00b0\u00d1\u0081\u00d1\u0081\u00d0\u00b8\u00d0\u00b2\u00d0\u00b5\u00d1\u0081\u00d1\u0082, \u00d0\u00ba\u00d0\u00b8 \u00d0\u00b1\u00d0\u00b0 \u00d2\u009b\u00d0\u00b0\u00d1\u0084\u00d0\u00be \u00d0\u00b2\u00d0\u00b0 \u00d0\u00bf\u00d0\u00b5\u00d1\u0088 \u00d2\u00b3\u00d0\u00b0\u00d0\u00bc\u00d0\u00be\u00d0\u00bd \u00d1\u0087\u00d0\u00b8\u00d0\u00b7\u00d1\u0080\u00d0\u00be \u00d0\u00bc\u00d0\u00b5\u00d1\u0085\u00d0\u00be\u00d0\u00bd\u00d0\u00b0\u00d0\u00b4. \u00d0\u0094\u00d0\u00b0\u00d1\u0080 \u00d1\u008f\u00d0\u00ba \u00d1\u0082\u00d0\u00b0\u00d2\u0093\u00d0\u00b8\u00d1\u0080\u00d0\u00be\u00d1\u0082, \u00d1\u0088\u00d1\u0083\u00d0\u00bc\u00d0\u00be \u00d0\u00bc\u00d0\u00b5\u00d1\u0082\u00d0\u00b0\u00d0\u00b2\u00d0\u00be\u00d0\u00bd\u00d0\u00b5\u00d0\u00b4 \u00d1\u008f\u00d0\u00ba \u00d1\u0083\u00d0\u00bd\u00d1\u0081\u00d1\u0083\u00d1\u0080\u00d1\u0080\u00d0\u00be \u00d0\u00b1\u00d0\u00b0 \u00d1\u008f\u00d0\u00b3\u00d0\u00be\u00d0\u00bd \u00d1\u0083\u00d0\u00bd\u00d1\u0081\u00d1\u0083\u00d1\u0080\u00d0\u00b8 \u00d0\u00b4\u00d0\u00b8\u00d0\u00b3\u00d0\u00b0\u00d1\u0080 \u00d1\u0082\u00d0\u00b0\u00d2\u0093\u00d0\u00b8\u00d1\u0080 \u00d0\u00b4\u00d0\u00b8\u00d2\u00b3\u00d0\u00b5\u00d0\u00b4. \u00d0\u009c\u00d0\u00b0\u00d1\u0081\u00d0\u00b0\u00d0\u00bb\u00d0\u00b0\u00d0\u00bd: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n","canonical_solution":"    ans = 0\n    for i in range(len(arr) \/\/ 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n"}
{"nl":"tgl_Latn","prompt":"\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Binigyan ng isang string, malaman kung gaano karaming mga natatanging mga character (indipendent ng kaso) ay binubuo ng\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n","canonical_solution":"    return len(set(string.lower()))\n","test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n"}
{"nl":"tha_Thai","prompt":"\n\ndef monotonic(l: list):\n    \"\"\"Return True \u00e0\u00b8\u0084\u00e0\u00b8\u00b7\u00e0\u00b8\u00ad\u00e0\u00b8\u00a3\u00e0\u00b8\u00b2\u00e0\u00b8\u00a2\u00e0\u00b8\u0081\u00e0\u00b8\u00b2\u00e0\u00b8\u00a3\u00e0\u00b8\u00a1\u00e0\u00b8\u00b5\u00e0\u00b8\u00ad\u00e0\u00b8\u0087\u00e0\u00b8\u0084\u00e0\u00b9\u008c\u00e0\u00b8\u009b\u00e0\u00b8\u00a3\u00e0\u00b8\u00b0\u00e0\u00b8\u0081\u00e0\u00b8\u00ad\u00e0\u00b8\u009a\u00e0\u00b8\u0097\u00e0\u00b8\u00b5\u00e0\u00b9\u0088\u00e0\u00b9\u0080\u00e0\u00b8\u009e\u00e0\u00b8\u00b4\u00e0\u00b9\u0088\u00e0\u00b8\u00a1\u00e0\u00b8\u0082\u00e0\u00b8\u00b6\u00e0\u00b9\u0089\u00e0\u00b8\u0099\u00e0\u00b8\u00ab\u00e0\u00b8\u00a3\u00e0\u00b8\u00b7\u00e0\u00b8\u00ad\u00e0\u00b8\u00a5\u00e0\u00b8\u0094\u00e0\u00b8\u00a5\u00e0\u00b8\u0087\u00e0\u00b8\u00ad\u00e0\u00b8\u00a2\u00e0\u00b9\u0088\u00e0\u00b8\u00b2\u00e0\u00b8\u0087\u00e0\u00b9\u0080\u00e0\u00b8\u009b\u00e0\u00b9\u0087\u00e0\u00b8\u0099\u00e0\u00b8\u009b\u00e0\u00b8\u00a3\u00e0\u00b8\u00b0\u00e0\u00b8\u0088\u00e0\u00b9\u008d\u00e0\u00b8\u00b2\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n","canonical_solution":"    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n","test":"def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n"}
{"nl":"tir_Ethi","prompt":"\n\ndef is_palindrome(text: str):\n    \"\"\"\n    \u00e1\u008a\u00a5\u00e1\u0089\u00b2 \u00e1\u008b\u009d\u00e1\u0089\u00b0\u00e1\u008b\u008b\u00e1\u0088\u0085\u00e1\u0089\u00a0 \u00e1\u0088\u0095\u00e1\u0089\u00a5\u00e1\u0088\u00a8-\u00e1\u0088\u0098\u00e1\u008a\u00a3\u00e1\u008b\u009d\u00e1\u008a\u0093\u00e1\u0089\u00b5 \u00e1\u008d\u0093\u00e1\u0088\u008a\u00e1\u008a\u0095\u00e1\u008b\u00b5\u00e1\u0088\u00ae\u00e1\u0088\u009d \u00e1\u008a\u00a5\u00e1\u008a\u0095\u00e1\u0089\u00b0\u00e1\u008a\u00be\u00e1\u008b\u00ad\u00e1\u008a\u0091 \u00e1\u008b\u00ad\u00e1\u0088\u009d\u00e1\u0088\u00ad\u00e1\u0088\u009d\u00e1\u0088\u00ad\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n","canonical_solution":"    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n","test":"def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n"}
{"nl":"tpi_Latn","prompt":"\ndef is_equal_to_sum_even(n):\n    \"\"\"Skelim sapos namba n i ken raitim olsem sum bilong 4-pela namba tu i stret Eksampel is_equal_to_sum_even ((4) == False is_equal_to_sum_even ((6) == False is_equal_to_sum_even ((8) == Tru\n    \"\"\"\n","canonical_solution":"    return n%2 == 0 and n >= 8\n","test":"def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n"}
{"nl":"tsn_Latn","prompt":"\ndef compare_one(a, b):\n    \"\"\"\n    Tlhopha tiro e e tsayang dipalo tse di feletseng, dipalopalo tse di phaphaselang, kgotsa dinomoro tse di emelang dipalo tsa nnete, mme e busetsa dipalopalo tse di kgolo mo mofuteng wa dipalopalo tse di filweng. E busetsa None fa boleng bo lekana. Ela tlhoko: Fa palo ya nnete e emetswe jaaka dinomoro tsa nnete, ntlha e e phaphaselang e ka nna. kgotsa, compare_one{1, 2.5) \u00c3\u00a2 -> 2.5 compare_one{1, \"2,3\") \u00c3\u00a2 -> \"2,3\" compare_one{5,1\", \"6\") \u00c3\u00a2 -> \"6\" compare_one{1\", 1) \u00c3\u00a2 -> None\n    \"\"\"\n","canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"tso_Latn","prompt":"\ndef get_odd_collatz(n):\n    \"\"\"\n    Loko ku nyiketiwa nhlayo yo hetiseka ya n, vuyisela nxaxamelo lowu hleriweke lowu nga na tinomboro leti nga hleriwangiki hi ku landzelana ka collatz. Nhlayo ya Collatz i ntsengo wa tinhlayo lowu khumbaka ntlhandlamano lowu hlamuseriweke hi ndlela leyi: sungula hi nhlayo yo karhi ya n. Kutani nkarhi wun'wana na wun'wana wu kumiwa eka nkarhi lowu hundzeke hi ndlela leyi: loko nkarhi lowu hundzeke wu ri na nhlayo ya n, nkarhi lowu landzelaka wu ta va hafu ya nkarhi lowu hundzeke. Loko nkarhi lowu hundzeke wu nga ri na nhlayo, nkarhi lowu landzelaka wu ta va wu andzisiwe hi 3 ku engetelela nkarhi lowu hundzeke. Nhlayo ya n, ku nga khathariseki leswaku i nhlayo ya n, ntlhandlamano wu ta fika eka 1. Xiya: 1.\n    \"\"\"\n","canonical_solution":"    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n\/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"tuk_Latn","prompt":"\ndef solution(lst):\n    \"\"\"Bo\u00c5\u009f d\u00c3\u00a4l bir b\u00c3\u00bctin sanlar listasy berilse, \u00c3\u00a4hli tek elementleri\u00c5\u0088 janyny ga\u00c3\u00bdtaryp ber. Mysal \u00c3\u00a7\u00c3\u00b6zg\u00c3\u00bcdi (([5, 8, 7, 1]) ==> 12 \u00c3\u00a7\u00c3\u00b6zg\u00c3\u00bcdi (([3, 3, 3, 3]) ==> 9 \u00c3\u00a7\u00c3\u00b6zg\u00c3\u00bcdi (([30, 13, 24, 321]) ==>0\n    \"\"\"\n","canonical_solution":"    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n"}
{"nl":"tum_Latn","prompt":"\ndef eat(number, need, remaining):\n    \"\"\"\n    Mukwenera kuweleramo mu ndondomeko ya [ chi\u00c5\u00b5elengero cha karoti icho mwarya, chi\u00c5\u00b5elengero cha karoti icho chakhalako para mwarya ] usange palije karoti yakukwana, mungarya karoti yose iyo yakhalako, kweni mu\u00c5\u00b5enge na njara. Chiyelezgero: * eat(5, 6, 10) -> [11, 4] * eat(4, 8, 9) -> [12, 1] * eat(1, 10, 10) -> [11, 0] * eat(2, 11, 5) -> [7, 0] Variables: @number: integer the number of carrots that you have eaten. @need:: integer the number of carrots that you need to eat. @remaining:: integer the number of remaining carrots that exist in stock Constrain: * 0= <= 1000 * 0= <= 1000 * 0= <= 1000 remaining = <= 1000 Have fun = 1000:)\n    \"\"\"\n","canonical_solution":"    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n"}
{"nl":"tur_Latn","prompt":"\nFIX = \"\"\"\nDaha fazla test vakas\u00c4\u00b1 ekleyin.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n","canonical_solution":"    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"nl":"twi_Latn","prompt":"\n\ndef common(l1: list, l2: list):\n    \"\"\"San k\u00c9\u0094fa nne\u00c9\u009bma a w\u00c9\u0094aka abom a w\u00c9\u0094aka ho as\u00c9\u009bm w\u00c9\u0094 din ahorow abien mu no.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n","canonical_solution":"    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n","test":"def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n"}
{"nl":"tzm_Tfng","prompt":"\ndef hex_key(num):\n    \"\"\"\u00e2\u00b5\u009c\u00e2\u00b5\u00a3\u00e2\u00b5\u008e\u00e2\u00b5\u0094\u00e2\u00b4\u00b7 \u00e2\u00b4\u00b0\u00e2\u00b4\u00b7 \u00e2\u00b5\u009c\u00e2\u00b4\u00b0\u00e2\u00b5\u00a1\u00e2\u00b5\u0093\u00e2\u00b5\u0094\u00e2\u00b5\u0089\u00e2\u00b5\u008e \u00e2\u00b5\u00a2\u00e2\u00b4\u00b0\u00e2\u00b5\u009c \u00e2\u00b5\u009c\u00e2\u00b5\u00a1\u00e2\u00b5\u0093\u00e2\u00b5\u0094\u00e2\u00b5\u0089 \u00e2\u00b5\u008f\u00e2\u00b5\u008f\u00e2\u00b4\u00b0 \u00e2\u00b5\u0089\u00e2\u00b5\u009c\u00e2\u00b5\u009c\u00e2\u00b5\u0093\u00e2\u00b5\u008e\u00e2\u00b5\u00a5\u00e2\u00b5\u008f \u00e2\u00b5\u00a2\u00e2\u00b4\u00b0\u00e2\u00b5\u008f \u00e2\u00b5\u0093\u00e2\u00b5\u009f\u00e2\u00b5\u009f\u00e2\u00b5\u0093\u00e2\u00b5\u008f \u00e2\u00b4\u00b0\u00e2\u00b5\u0080\u00e2\u00b5\u0089\u00e2\u00b5\u008a\u00e2\u00b4\u00b0\u00e2\u00b4\u00b7\u00e2\u00b5\u0089\u00e2\u00b5\u009b\u00e2\u00b5\u008e\u00e2\u00b4\u00b0\u00e2\u00b5\u008d \u00e2\u00b5\u0099 \u00e2\u00b5\u00a2\u00e2\u00b4\u00b0\u00e2\u00b5\u009c \u00e2\u00b5\u009c\u00e2\u00b5\u00a3\u00e2\u00b5\u008d\u00e2\u00b5\u0089\u00e2\u00b5\u009c \u00e2\u00b4\u00b7 \u00e2\u00b4\u00b0\u00e2\u00b5\u0094 \u00e2\u00b5\u0089\u00e2\u00b5\u0099\u00e2\u00b5\u0089\u00e2\u00b4\u00b9\u00e2\u00b5\u008f \u00e2\u00b5\u0089\u00e2\u00b5\u008e\u00e2\u00b5\u0089\u00e2\u00b4\u00b9\u00e2\u00b5\u008f \u00e2\u00b5\u008f \u00e2\u00b5\u0093\u00e2\u00b5\u009f\u00e2\u00b5\u009f\u00e2\u00b5\u0093\u00e2\u00b5\u008f \u00e2\u00b4\u00b0\u00e2\u00b5\u0080\u00e2\u00b5\u0089\u00e2\u00b5\u008a\u00e2\u00b4\u00b0\u00e2\u00b4\u00b7\u00e2\u00b5\u0089\u00e2\u00b5\u009b\u00e2\u00b5\u008e\u00e2\u00b4\u00b0\u00e2\u00b5\u008d \u00e2\u00b5\u008f\u00e2\u00b5\u008f\u00e2\u00b4\u00b0 \u00e2\u00b5\u0089\u00e2\u00b4\u00b3\u00e2\u00b4\u00b0\u00e2\u00b5\u008f \u00e2\u00b5\u0089\u00e2\u00b5\u008e\u00e2\u00b5\u0089\u00e2\u00b4\u00b9\u00e2\u00b5\u008f \u00e2\u00b5\u0089\u00e2\u00b5\u008e\u00e2\u00b5\u00a3\u00e2\u00b5\u00a1\u00e2\u00b5\u0093\u00e2\u00b5\u0094\u00e2\u00b4\u00b0 (\u00e2\u00b5\u0089\u00e2\u00b4\u00b9 \u00e2\u00b4\u00b0\u00e2\u00b5\u008e\u00e2\u00b5\u00a3\u00e2\u00b5\u00a1\u00e2\u00b4\u00b0\u00e2\u00b5\u0094\u00e2\u00b5\u0093, \u00e2\u00b5\u008f\u00e2\u00b5\u0096 \u00e2\u00b4\u00b0\u00e2\u00b5\u008e\u00e2\u00b5\u00a3\u00e2\u00b5\u00a1\u00e2\u00b4\u00b0\u00e2\u00b5\u0094\u00e2\u00b5\u0093, \u00e2\u00b5\u0089\u00e2\u00b4\u00b3\u00e2\u00b4\u00b0 \u00e2\u00b4\u00b0\u00e2\u00b5\u008e\u00e2\u00b4\u00b9\u00e2\u00b4\u00b0\u00e2\u00b5\u008f \u00e2\u00b4\u00b0\u00e2\u00b4\u00b3\u00e2\u00b4\u00b0\u00e2\u00b5\u008e\u00e2\u00b4\u00b0\u00e2\u00b5\u008f \u00e2\u00b4\u00b0\u00e2\u00b5\u0085\u00e2\u00b4\u00b0\u00e2\u00b5\u009c\u00e2\u00b4\u00b0\u00e2\u00b5\u0094 \u00e2\u00b5\u0099\u00e2\u00b4\u00b3 1 \u00e2\u00b5\u008f\u00e2\u00b5\u008f\u00e2\u00b4\u00b0 \u00e2\u00b5\u0093\u00e2\u00b5\u0094 \u00e2\u00b5\u0089\u00e2\u00b4\u00b3\u00e2\u00b5\u0089\u00e2\u00b5\u008f \u00e2\u00b4\u00b0\u00e2\u00b5\u0099\u00e2\u00b5\u00a2\u00e2\u00b4\u00b0\u00e2\u00b4\u00bc\u00e2\u00b5\u0093 \u00e2\u00b5\u008f \u00e2\u00b5\u0099\u00e2\u00b5\u0089\u00e2\u00b5\u008f \u00e2\u00b5\u0089\u00e2\u00b5\u008e\u00e2\u00b5\u0089\u00e2\u00b4\u00b9\u00e2\u00b5\u008f \u00e2\u00b5\u0089\u00e2\u00b5\u008e\u00e2\u00b5\u00a5\u00e2\u00b5\u00a5\u00e2\u00b5\u0089\u00e2\u00b5\u008f). \u00e2\u00b5\u0089\u00e2\u00b5\u008e\u00e2\u00b5\u0089\u00e2\u00b4\u00b9\u00e2\u00b5\u008f \u00e2\u00b5\u008f \u00e2\u00b5\u0093\u00e2\u00b5\u009f\u00e2\u00b5\u009f\u00e2\u00b5\u0093\u00e2\u00b5\u008f \u00e2\u00b4\u00b0\u00e2\u00b5\u0080\u00e2\u00b5\u0089\u00e2\u00b5\u008a\u00e2\u00b4\u00b0\u00e2\u00b4\u00b7\u00e2\u00b5\u0089\u00e2\u00b5\u009b\u00e2\u00b5\u008e\u00e2\u00b4\u00b0\u00e2\u00b5\u008d \u00e2\u00b4\u00b3\u00e2\u00b4\u00b0\u00e2\u00b5\u008f 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \u00e2\u00b5\u0089\u00e2\u00b5\u008e\u00e2\u00b5\u0089\u00e2\u00b4\u00b9\u00e2\u00b5\u008f \u00e2\u00b5\u0089\u00e2\u00b5\u008e\u00e2\u00b5\u00a3\u00e2\u00b5\u00a1\u00e2\u00b5\u0093\u00e2\u00b5\u0094\u00e2\u00b4\u00b0 \u00e2\u00b4\u00b3\u00e2\u00b4\u00b0\u00e2\u00b5\u008f 2, 3, 5, 7, 11, 13, 17,... \u00e2\u00b4\u00b0\u00e2\u00b5\u00a2\u00e2\u00b4\u00b0\u00e2\u00b4\u00b7 \u00e2\u00b5\u0089\u00e2\u00b4\u00b3\u00e2\u00b4\u00b0\u00e2\u00b5\u008f \u00e2\u00b4\u00b0\u00e2\u00b4\u00b7 \u00e2\u00b5\u009c\u00e2\u00b5\u009c\u00e2\u00b5\u0093\u00e2\u00b5\u0099\u00e2\u00b5\u009c\u00e2\u00b4\u00b0\u00e2\u00b5\u00a2\u00e2\u00b5\u008e \u00e2\u00b4\u00bd\u00e2\u00b5\u0094\u00e2\u00b4\u00b0 \u00e2\u00b5\u008f \u00e2\u00b5\u0089\u00e2\u00b5\u008e\u00e2\u00b5\u0089\u00e2\u00b4\u00b9\u00e2\u00b5\u008f \u00e2\u00b5\u008f \u00e2\u00b5\u0093\u00e2\u00b5\u009f\u00e2\u00b5\u009f\u00e2\u00b5\u0093\u00e2\u00b5\u008f \u00e2\u00b4\u00b0\u00e2\u00b4\u00b7:\n    \"\"\"\n","canonical_solution":"    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n"}
{"nl":"uig_Arab","prompt":"\n\ndef string_sequence(n: int) -> str:\n    \"\"\" 0 \u00d8\u00af\u00d9\u0089\u00d9\u0086 n \u00da\u00af\u00db\u0095 \u00d9\u0082\u00db\u0095\u00d8\u00af\u00db\u0095\u00d8\u00b1 \u00d8\u00a8\u00d9\u0088\u00d9\u0084\u00d8\u00ba\u00d8\u00a7\u00d9\u0086 \u00d8\u00a8\u00d9\u0088\u00d8\u00b4\u00d9\u0084\u00db\u0087\u00d9\u0082 \u00d8\u00a8\u00d9\u0089\u00d9\u0084\u00db\u0095\u00d9\u0086 \u00da\u0086\u00db\u0095\u00d9\u0083\u00d9\u0084\u00db\u0095\u00d9\u0086\u00da\u00af\u00db\u0095\u00d9\u0086 \u00d8\u00b3\u00d8\u00a7\u00d9\u0086\u00d9\u0084\u00d8\u00a7\u00d8\u00b1\u00d9\u0086\u00d9\u0089 \u00d8\u00a6\u00db\u0086\u00d8\u00b2 \u00d8\u00a6\u00d9\u0089\u00da\u0086\u00d9\u0089\u00da\u00af\u00db\u0095 \u00d8\u00a6\u00d8\u00a7\u00d9\u0084\u00d8\u00ba\u00d8\u00a7\u00d9\u0086 \u00d8\u00a8\u00d9\u0089\u00d8\u00b1 \u00d8\u00aa\u00d8\u00a7\u00d8\u00b1\u00d9\u0085\u00d8\u00a7\u00d9\u0082 \u00d9\u0082\u00d8\u00a7\u00d9\u008a\u00d8\u00aa\u00db\u0087\u00d8\u00b1\u00db\u0087\u00d9\u00be \u00d8\u00a8\u00db\u0090\u00d8\u00b1\u00d9\u0089\u00d8\u00af\u00db\u0087.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n","canonical_solution":"    return ' '.join([str(x) for x in range(n + 1)])\n","test":"def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n"}
{"nl":"ukr_Cyrl","prompt":"\ndef digitSum(s):\n    \"\"\"\u00d0\u0097\u00d0\u00b0\u00d0\u00b4\u00d0\u00b0\u00d1\u0087\u00d0\u00b0 \u00d0\u009d\u00d0\u00b0\u00d0\u00bf\u00d0\u00b8\u00d1\u0088\u00d1\u0096\u00d1\u0082\u00d1\u008c \u00d1\u0084\u00d1\u0083\u00d0\u00bd\u00d0\u00ba\u00d1\u0086\u00d1\u0096\u00d1\u008e, \u00d1\u008f\u00d0\u00ba\u00d0\u00b0 \u00d0\u00bf\u00d1\u0080\u00d0\u00b8\u00d0\u00b9\u00d0\u00bc\u00d0\u00b0\u00d1\u0094 \u00d1\u0081\u00d1\u0082\u00d1\u0080\u00d1\u0096\u00d0\u00bd\u00d0\u00b3 \u00d1\u008f\u00d0\u00ba \u00d0\u00b2\u00d1\u0085\u00d1\u0096\u00d0\u00b4 \u00d1\u0096 \u00d0\u00bf\u00d0\u00be\u00d0\u00b2\u00d0\u00b5\u00d1\u0080\u00d1\u0082\u00d0\u00b0\u00d1\u0094 \u00d1\u0081\u00d1\u0083\u00d0\u00bc\u00d1\u0083 \u00d1\u0082\u00d1\u0096\u00d0\u00bb\u00d1\u008c\u00d0\u00ba\u00d0\u00b8 \u00d0\u00b2\u00d0\u00b5\u00d1\u0080\u00d1\u0085\u00d0\u00bd\u00d1\u0096\u00d1\u0085 \u00d1\u0081\u00d0\u00b8\u00d0\u00bc\u00d0\u00b2\u00d0\u00be\u00d0\u00bb\u00d1\u0096\u00d0\u00b2 ASCII \u00d0\u00ba\u00d0\u00be\u00d0\u00b4\u00d1\u0096\u00d0\u00b2. \u00d0\u009f\u00d1\u0080\u00d0\u00b8\u00d0\u00ba\u00d0\u00bb\u00d0\u00b0\u00d0\u00b4\u00d0\u00b8: digitSum(\"\") => 0 digitSum(\"abAB\") => 131 digitSum(\"abcCd\") => 67 digitSum(\"helloE\") => 69 digitSum(\"woArBld\") => 131 digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n","canonical_solution":"    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n"}
{"nl":"umb_Latn","prompt":"\ndef x_or_y(n, x, y):\n    \"\"\"O programa yimue ya leluka yi sukila oku tiula ondando y y nda n yi kuete etendelo liokaliye kuenda yi sukila oku tiula ondando y y nda ka ci t\u00e1\u00ba\u00bdliwa.\n    \n    \"\"\"\n","canonical_solution":"    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n"}
{"nl":"urd_Arab","prompt":"\ndef smallest_change(arr):\n    \"\"\"\n    \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081 \u00d8\u00b5\u00d9\u0081\n    \"\"\"\n","canonical_solution":"    ans = 0\n    for i in range(len(arr) \/\/ 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n"}
{"nl":"uzn_Latn","prompt":"\ndef reverse_delete(s,c):\n    \"\"\"Vazifa Bizga s va c qatorlari berilgan, siz s dagi har qanday belgi bilan teng bo'lgan barcha belgilarni o'chirishingiz kerak, keyin natija qatorining palindrom bo'lganligini tekshiring. Agar u orqaga va oldinga bir xil o'qiladigan bo'lsa, qator palindrom deb ataladi. Siz tekshirish uchun natija qatorini va True\/False ni o'z ichiga olgan tupleni qaytarishingiz kerak. Misol uchun s = \"abcde\", c = \"ae\", natija bo'lishi kerak ('bcd', False) s = \"abcdef\", c = \"b\" natijasi bo'lishi kerak ('acdef', False) s = \"abcdedcba\", c = \"ab\", natija bo'lishi kerak ('cdedc', True)\n    \"\"\"\n","canonical_solution":"    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n","test":"def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n"}
{"nl":"vec_Latn","prompt":"\ndef cycpattern_check(a , b):\n    \"\"\"Te vien d\u00c3\u00a0 2 parole. Te devi tornar True se la seconda parola o cualsiasi de le so rotazioni xe una sotostringa de la prima parola cycpattern_check (((\"abcd\",\"abd\") => False cycpattern_check (((\"hello\",\"ell\") => True cycpattern_check (((\"whassup\",\"psus\") => False cycpattern_check (((\"abab\",\"baa\") => True cycpattern_check (((\"efef\",\"eeff\") => False cycpattern_check (((hims\",\"simen\") => True\n\n    \"\"\"\n","canonical_solution":"    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n","test":"def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n"}
{"nl":"vie_Latn","prompt":"\ndef fix_spaces(text):\n    \"\"\"\n    N\u00e1\u00ba\u00bfu c\u00c3\u00b3 m\u00e1\u00bb\u0099t chu\u00e1\u00bb\u0097i v\u00c4\u0083n b\u00e1\u00ba\u00a3n, thay th\u00e1\u00ba\u00bf t\u00e1\u00ba\u00a5t c\u00e1\u00ba\u00a3 c\u00c3\u00a1c kho\u00e1\u00ba\u00a3ng tr\u00e1\u00bb\u0091ng b\u00e1\u00ba\u00b1ng d\u00e1\u00ba\u00a5u g\u00e1\u00ba\u00a1ch d\u00c6\u00b0\u00e1\u00bb\u009bi, v\u00c3\u00a0 n\u00e1\u00ba\u00bfu m\u00e1\u00bb\u0099t chu\u00e1\u00bb\u0097i c\u00c3\u00b3 nhi\u00e1\u00bb\u0081u h\u00c6\u00a1n 2 kho\u00e1\u00ba\u00a3ng tr\u00e1\u00bb\u0091ng li\u00c3\u00aan ti\u00e1\u00ba\u00bfp, sau \u00c4\u0091\u00c3\u00b3 thay th\u00e1\u00ba\u00bf t\u00e1\u00ba\u00a5t c\u00e1\u00ba\u00a3 c\u00c3\u00a1c kho\u00e1\u00ba\u00a3ng tr\u00e1\u00bb\u0091ng li\u00c3\u00aan ti\u00e1\u00ba\u00bfp b\u00e1\u00ba\u00b1ng - fix_spaces ((\"V\u00c3\u00ad d\u00e1\u00bb\u00a5\") == \"V\u00c3\u00ad d\u00e1\u00bb\u00a5\" fix_spaces ((\"V\u00c3\u00ad d\u00e1\u00bb\u00a51\") == \"V\u00c3\u00ad d\u00e1\u00bb\u00a51\" fix_spaces (((\"V\u00c3\u00ad d\u00e1\u00bb\u00a52\") == \"_V\u00c3\u00ad d\u00e1\u00bb\u00a5_2\" fix_spaces ((\"V\u00c3\u00ad d\u00e1\u00bb\u00a5 3\") == \"_V\u00c3\u00ad d\u00e1\u00bb\u00a5-3\"\n    \"\"\"\n","canonical_solution":"    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n"}
{"nl":"war_Latn","prompt":"\ndef specialFilter(nums):\n    \"\"\"Isurat an usa nga function nga nag-aangkon hin array hin mga numero sugad nga input ngan nag-aabot han kadamo han mga elemento dida han array nga mas dako kay han 10 ngan an una ngan kataposan nga mga numero han usa nga numero mga ganon (1, 3, 5, 7, 9). Pananglitan: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n","canonical_solution":"    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n"}
{"nl":"wol_Latn","prompt":"\ndef choose_num(x, y):\n    \"\"\"Fonction bii dina j\u00c3\u00abl \u00c3\u00b1aari lim yu baax x ak y te dina delloo lim bu g\u00c3\u00abn a mag bi nekk ci range bi [x, y] boole ko. Su fekkee ne lim boobu amul, kon fonction bi dina delloo -1.\n    \"\"\"\n","canonical_solution":"    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n"}
{"nl":"xho_Latn","prompt":"\ndef will_it_fly(q,w):\n    '''\n    Bhala umsebenzi obuyisela u-True ukuba into q iya kuba neenqwelo moya, kwaye u-False ngenye indlela.\nInto q iya kuba neenqwelo moya ukuba ilungelelaniswe (iluhlu lwe-palindromic) kwaye isixa samalungu ayo singaphantsi okanye silingane nobunzima obukhulu obunokubakho w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u00c3\u00a2 -> False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u00c3\u00a2 -> False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u00c3\u00a2 -> True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u00c3\u00a2 -> True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n","canonical_solution":"    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n"}
{"nl":"ydd_Hebr","prompt":"from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" \u00d7\u00a4\u00d7\u0095\u00d7\u009f \u00d7\u0090\u00d6\u00b7 \u00d7\u00a1\u00d7\u0090\u00d6\u00b7\u00d7\u00a4\u00d6\u00bc\u00d7\u009c\u00d7\u0099\u00d7\u0099\u00d7\u0093 \u00d7\u00a8\u00d7\u00a9\u00d7\u0099\u00d7\u009e\u00d7\u0094 \u00d7\u00a4\u00d7\u0095\u00d7\u009f \u00d7\u00a0\u00d7\u0095\u00d7\u009e\u00d7\u00a2\u00d7\u00a8\u00d7\u009f (\u00d7\u00a4\u00d7\u0095\u00d7\u009f \u00d7\u009c\u00d7\u00a2\u00d7\u00a0\u00d7\u0092 \u00d7\u0091\u00d7\u0099\u00d7\u0099\u00d6\u00b7 \u00d7\u009e\u00d7\u0099\u00d7\u00a0\u00d7\u0093\u00d7\u00a1\u00d7\u0098\u00d7\u00a2\u00d7\u00a8 \u00d7\u00a6\u00d7\u0095\u00d7\u0095\u00d7\u0099\u00d7\u0099) \u00d7\u00a1\u00d7\u00a2\u00d7\u009c\u00d7\u00a2\u00d7\u00a7\u00d7\u0098\u00d7\u0099\u00d7\u00a8\u00d7\u009f \u00d7\u0090\u00d7\u0095\u00d7\u009f \u00d7\u00a6\u00d7\u0095\u00d7\u00a8\u00d7\u0099\u00d7\u00a7\u00d7\u00a7\u00d7\u0095\u00d7\u009e\u00d7\u00a2\u00d7\u009f \u00d7\u00a6\u00d7\u0095\u00d7\u0095\u00d7\u0099\u00d7\u0099 \u00d7\u0095\u00d7\u0095\u00d7\u0090\u00d6\u00b8\u00d7\u00a1 \u00d7\u0096\u00d7\u00a2\u00d7\u00a0\u00d7\u00a2\u00d7\u009f \u00d7\u0093\u00d7\u0099 \u00d7\u00a7\u00d7\u009c\u00d7\u0090\u00d6\u00b8\u00d7\u0095\u00d7\u00a1\u00d7\u0090\u00d6\u00b7\u00d7\u00a1\u00d7\u0098 \u00d7\u00a6\u00d7\u0095 \u00d7\u0099\u00d7\u00a2\u00d7\u0093\u00d7\u00a2\u00d7\u00a8 \u00d7\u0090\u00d7\u00a0\u00d7\u0093\u00d7\u00a2\u00d7\u00a8\u00d7\u00a2 \u00d7\u0090\u00d7\u0095\u00d7\u009f \u00d7\u00a6\u00d7\u0095\u00d7\u00a8\u00d7\u0099\u00d7\u00a7\u00d7\u00a7\u00d7\u0095\u00d7\u009e\u00d7\u00a2\u00d7\u009f \u00d7\u0096\u00d7\u0099\u00d7\u0099 \u00d7\u0090\u00d7\u0099\u00d7\u009f \u00d7\u00a1\u00d7\u0093\u00d7\u00a8 (\u00d7\u009e\u00d7\u0099\u00d7\u00a0\u00d7\u00a2\u00d7\u00a8 \u00d7\u00a0\u00d7\u0095\u00d7\u009e\u00d7\u00a2\u00d7\u00a8, \u00d7\u0092\u00d7\u00a8\u00d7\u00a2\u00d7\u00a1\u00d7\u00a2\u00d7\u00a8\u00d7\u00a2 \u00d7\u00a0\u00d7\u0095\u00d7\u009e\u00d7\u00a2\u00d7\u00a8).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n","canonical_solution":"    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n","test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n"}
{"nl":"yor_Latn","prompt":"\ndef get_closest_vowel(word):\n    \"\"\"O ti fi \u00e1\u00bb\u008d\u00cc\u0080r\u00e1\u00bb\u008d\u00cc\u0080 kan. I\u00e1\u00b9\u00a3\u00e1\u00ba\u00b9\u00cc\u0081 r\u00e1\u00ba\u00b9 ni l\u00c3\u00a1ti w\u00c3\u00a1 oh\u00c3\u00b9n t\u00c3\u00b3 s\u00c3\u00banm\u00e1\u00bb\u008d\u00cc\u0081 ara r\u00e1\u00ba\u00b9 j\u00c3\u00b9l\u00e1\u00bb\u008d t\u00c3\u00ad \u00c3\u00b3 w\u00c3\u00a0 l\u00c3\u00a1\u00c3\u00a0rin \u00c3\u00a0w\u00e1\u00bb\u008dn \u00c3\u00b2\u00c7\u00b9k\u00c3\u00a0 oh\u00c3\u00b9n m\u00c3\u00a9j\u00c3\u00ac l\u00c3\u00a1ti ap\u00c3\u00a1 \u00e1\u00bb\u008d\u00cc\u0080t\u00c3\u00ban \u00e1\u00bb\u008d\u00cc\u0080r\u00e1\u00bb\u008d\u00cc\u0080 n\u00c3\u00a1\u00c3\u00a0 (\u00c3\u00acm\u00e1\u00bb\u008d\u00cc\u0080r\u00c3\u00a0n n\u00c3\u00adpa \u00e1\u00bb\u008d\u00cc\u0080r\u00e1\u00bb\u008d\u00cc\u0080-\u00c3\u00acm\u00e1\u00bb\u008d\u00cc\u0080r\u00c3\u00a0n). \u00c3\u0080w\u00e1\u00bb\u008dn oh\u00c3\u00b9n-\u00c3\u00acm\u00e1\u00bb\u008d\u00cc\u0080r\u00c3\u00a0n n\u00c3\u00ad \u00c3\u00acb\u00e1\u00ba\u00b9\u00cc\u0080r\u00e1\u00ba\u00b9\u00cc\u0080 \u00c3\u00a0ti \u00c3\u00b2pin k\u00c3\u00b2 k\u00c3\u00a0. Y\u00c3\u00ad \u00c3\u00b2\u00c7\u00b9k\u00c3\u00a0 t\u00c3\u00ad k\u00c3\u00b2 n\u00c3\u00ad \u00c3\u00a0l\u00c3\u00a0fo pad\u00c3\u00a0 b\u00c3\u00ad o k\u00c3\u00b2 b\u00c3\u00a1 r\u00c3\u00ad oh\u00c3\u00b9n-\u00c3\u00acm\u00e1\u00bb\u008d\u00cc\u0080r\u00c3\u00a0n kankan t\u00c3\u00ad \u00c3\u00b3 b\u00c3\u00a1 p\u00c3\u00a0d\u00c3\u00a9 ip\u00c3\u00b2 t\u00c3\u00ad \u00c3\u00b3 w\u00c3\u00a0 l\u00c3\u00b3k\u00c3\u00a8 y\u00c3\u00ac\u00c3\u00ad. O l\u00c3\u00a8 r\u00c3\u00b2 w\u00c3\u00adp\u00c3\u00a9 \u00c3\u00b2\u00c7\u00b9k\u00c3\u00a0 t\u00c3\u00ad a f\u00c3\u00ban n\u00c3\u00ad l\u00c3\u00a9d\u00c3\u00a8 G\u00e1\u00ba\u00b9\u00cc\u0080\u00e1\u00ba\u00b9\u00cc\u0081s\u00c3\u00ac n\u00c3\u00ackan. \u00c3\u0080p\u00e1\u00ba\u00b9\u00e1\u00ba\u00b9r\u00e1\u00ba\u00b9: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"UULL\" get_closest_vowel (((\"quick\") ==\n    \"\"\"\n","canonical_solution":"    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"yue_Hant","prompt":"\ndef anti_shuffle(s):\n    \"\"\"\n    \u00e5\u00af\u00ab\u00e4\u00b8\u0080\u00e5\u0080\u008b\u00e5\u0087\u00bd\u00e6\u0095\u00b8,\u00e5\u008f\u0096\u00e4\u00b8\u0080\u00e5\u0080\u008b\u00e5\u00ad\u0097\u00e7\u00ac\u00a6\u00e4\u00b8\u00b2\u00e4\u00b8\u00a6\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e4\u00b8\u0080\u00e5\u0080\u008b\u00e6\u009c\u0089\u00e5\u00ba\u008f\u00e7\u009a\u0084\u00e5\u00ad\u0097\u00e7\u00ac\u00a6\u00e4\u00b8\u00b2.\u00e6\u009c\u0089\u00e5\u00ba\u008f\u00e7\u009a\u0084\u00e5\u00ad\u0097\u00e7\u00ac\u00a6\u00e4\u00b8\u00b2\u00e7\u0089\u0088\u00e6\u009c\u00ac,\u00e6\u0098\u00af\u00e4\u00b8\u0080\u00e5\u0080\u008b\u00e5\u00ad\u0097\u00e7\u00ac\u00a6\u00e4\u00b8\u00b2,\u00e6\u0089\u0080\u00e6\u009c\u0089\u00e5\u00ad\u0097 (\u00e7\u0094\u00a8\u00e7\u00a9\u00ba\u00e6\u00a0\u00bc\u00e5\u0088\u0086\u00e9\u009a\u0094) \u00e9\u0083\u00bd\u00e8\u00a2\u00ab\u00e4\u00b8\u0080\u00e5\u0080\u008b\u00e6\u0096\u00b0\u00e5\u00ad\u0097\u00e8\u00a9\u009e\u00e6\u0089\u0080\u00e5\u008f\u0096\u00e4\u00bb\u00a3,\u00e6\u0089\u0080\u00e6\u009c\u0089\u00e5\u00ad\u0097\u00e7\u00ac\u00a6\u00e9\u0083\u00bd\u00e6\u00a0\u00b9\u00e6\u0093\u009aascii\u00e5\u0080\u00bc\u00e6\u008e\u0092\u00e5\u0088\u0097\u00e6\u0088\u0090\u00e4\u00b8\u008a\u00e5\u008d\u0087\u00e9\u00a0\u0086\u00e5\u00ba\u008f. \u00e6\u00b3\u00a8\u00e6\u0084\u008f:\u00e4\u00bd\u00a0\u00e6\u0087\u0089\u00e8\u00a9\u00b2\u00e4\u00bf\u009d\u00e7\u0095\u0099\u00e5\u008f\u00a5\u00e5\u00ad\u0090\u00e4\u00b8\u00ad\u00e7\u009a\u0084\u00e5\u0096\u00ae\u00e8\u00a9\u009e\u00e5\u0092\u008c\u00e7\u00a9\u00ba\u00e6\u00a0\u00bc\u00e7\u009a\u0084\u00e9\u00a0\u0086\u00e5\u00ba\u008f.\u00e4\u00be\u008b\u00e5\u00a6\u0082:anti_shuffle () \u00e5\u009b\u009e\u00e8\u00bf\u0094\"Hi\" anti_shuffle () \u00e5\u009b\u009e\u00e8\u00bf\u0094\"ehllo\" anti_shuffle () \u00e5\u009b\u009e\u00e8\u00bf\u0094\"Hello World!!!\") \u00e5\u009b\u009e\u00e8\u00bf\u0094\"Hello!!!Wdlor\"\n    \"\"\"\n","canonical_solution":"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"nl":"zho_Hans","prompt":"\ndef hex_key(num):\n    \"\"\"\u00e4\u00bd\u00a0\u00e8\u00a2\u00ab\u00e8\u00a6\u0081\u00e6\u00b1\u0082\u00e5\u0086\u0099\u00e4\u00b8\u0080\u00e4\u00b8\u00aa\u00e5\u0087\u00bd\u00e6\u0095\u00b0,\u00e5\u00ae\u0083\u00e5\u00b0\u0086\u00e5\u008d\u0081\u00e5\u0085\u00ad\u00e8\u00bf\u009b\u00e5\u0088\u00b6\u00e6\u0095\u00b0\u00e5\u00ad\u0097\u00e4\u00bd\u009c\u00e4\u00b8\u00ba\u00e5\u00ad\u0097\u00e7\u00ac\u00a6\u00e4\u00b8\u00b2,\u00e5\u00b9\u00b6\u00e8\u00ae\u00a1\u00e7\u00ae\u0097\u00e5\u008d\u0081\u00e5\u0085\u00ad\u00e8\u00bf\u009b\u00e5\u0088\u00b6\u00e6\u0095\u00b0\u00e5\u00ad\u0097\u00e7\u009a\u0084\u00e6\u0095\u00b0\u00e9\u0087\u008f\u00e4\u00b8\u00ba\u00e7\u00b4\u00a0\u00e6\u0095\u00b0 (\u00e7\u00b4\u00a0\u00e6\u0095\u00b0,\u00e6\u0088\u0096\u00e7\u00b4\u00a0\u00e6\u0095\u00b0,\u00e6\u0098\u00af\u00e4\u00b8\u0080\u00e4\u00b8\u00aa\u00e5\u00a4\u00a7\u00e4\u00ba\u008e1\u00e7\u009a\u0084\u00e8\u0087\u00aa\u00e7\u0084\u00b6\u00e6\u0095\u00b0,\u00e4\u00b8\u008d\u00e6\u0098\u00af\u00e4\u00b8\u00a4\u00e4\u00b8\u00aa\u00e8\u00be\u0083\u00e5\u00b0\u008f\u00e7\u009a\u0084\u00e8\u0087\u00aa\u00e7\u0084\u00b6\u00e6\u0095\u00b0\u00e7\u009a\u0084\u00e4\u00b9\u0098\u00e7\u00a7\u00af).\u00e5\u008d\u0081\u00e5\u0085\u00ad\u00e8\u00bf\u009b\u00e5\u0088\u00b6\u00e6\u0095\u00b0\u00e5\u00ad\u0097\u00e6\u0098\u00af0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F. \u00e7\u00b4\u00a0\u00e6\u0095\u00b0\u00e6\u0098\u00af2,3,5,7,11,13,17,... \u00e6\u0089\u0080\u00e4\u00bb\u00a5\u00e4\u00bd\u00a0\u00e5\u00bf\u0085\u00e9\u00a1\u00bb\u00e7\u00a1\u00ae\u00e5\u00ae\u009a\u00e4\u00bb\u00a5\u00e4\u00b8\u008b\u00e6\u0095\u00b0\u00e5\u00ad\u0097\u00e4\u00b8\u00ad\u00e7\u009a\u0084\u00e4\u00b8\u0080\u00e4\u00b8\u00aa\u00e6\u0095\u00b0\u00e9\u0087\u008f: 2,3,5,7,B (=\u00e5\u008d\u0081\u00e8\u00bf\u009b\u00e5\u0088\u00b611),D (=\u00e5\u008d\u0081\u00e8\u00bf\u009b\u00e5\u0088\u00b613). \u00e6\u00b3\u00a8\u00e6\u0084\u008f:\u00e4\u00bd\u00a0\u00e5\u008f\u00af\u00e4\u00bb\u00a5\u00e5\u0081\u0087\u00e8\u00ae\u00be\u00e8\u00be\u0093\u00e5\u0085\u00a5\u00e6\u0080\u00bb\u00e6\u0098\u00af\u00e6\u00ad\u00a3\u00e7\u00a1\u00ae\u00e6\u0088\u0096\u00e7\u00a9\u00ba\u00e7\u009a\u0084\u00e5\u00ad\u0097\u00e7\u00ac\u00a6\u00e4\u00b8\u00b2,\u00e7\u00ac\u00a6\u00e5\u008f\u00b7A,B,C,D,E,F\u00e6\u0080\u00bb\u00e6\u0098\u00af\u00e5\u00a4\u00a7\u00e5\u0086\u0099. \u00e4\u00be\u008b\u00e5\u00a6\u0082:\u00e5\u00af\u00b9\u00e4\u00ba\u008enum=AB\",\u00e8\u00be\u0093\u00e5\u0087\u00ba\u00e5\u00ba\u0094\u00e6\u0098\u00afnum=1.\u00e5\u00af\u00b9\u00e4\u00ba\u008enum=1077E\",\u00e8\u00be\u0093\u00e5\u0087\u00ba\u00e5\u00ba\u0094\u00e6\u0098\u00af2.\u00e5\u00af\u00b9\u00e4\u00ba\u008enum=\"AB33\"\n    \"\"\"\n","canonical_solution":"    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n"}
{"nl":"zho_Hant","prompt":"\n\ndef flip_case(string: str) -> str:\n    \"\"\" \u00e8\u00ab\u008b\u00e5\u00b0\u0087\u00e5\u00b0\u008f\u00e5\u00ad\u0097\u00e6\u00af\u008d\u00e8\u00bd\u0089\u00e6\u008f\u009b\u00e7\u0082\u00ba\u00e5\u00a4\u00a7\u00e5\u00ad\u0097\u00e6\u00af\u008d,\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n","canonical_solution":"    return string.swapcase()\n","test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n"}
{"nl":"zsm_Latn","prompt":"\n\ndef triangle_area(a, h):\n    \"\"\"Diberi panjang sisi dan tinggi kawasan pulangan untuk segitiga.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n","canonical_solution":"    return a * h \/ 2.0\n","test":"def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n"}
{"nl":"zul_Latn","prompt":"\ndef minSubArraySum(nums):\n    \"\"\"\n    Njengoba kunikezwe uhla lwezinombolo eziphelele, thola inani elincane lanoma iyiphi i-sub-array engeyona engenalutho yezinombolo. Isibonelo minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6\n    \"\"\"\n","canonical_solution":"    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n","test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n"}
