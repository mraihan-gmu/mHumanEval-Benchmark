[{"task_id":"HumanEval_0","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ण ण ण ण ण ण ण ण ण ण ण ण ण    \/\/यदि संख्यायाः सूचीषु कस्यचित् द्वयोः संख्यायाः समीपता -रूपेण अस्ति चेत्, तदा जाँचं कुरुत।    \/\/ >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n    \/\/ (false)\n    \/\/ >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n    \/\/ (true)\n    public static bool HasCloseElements(List<float> numbers, float threshold) {\n","canonical_solution":"public static bool HasCloseElements(List<float> numbers, float threshold) {\n    numbers.Sort();\n    for (int i = 1; i < numbers.Count; i++) {\n        if (numbers[i] - numbers[i - 1] < threshold) {\n            return true;\n        }\n    }\n    return false;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_1","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/इन्द्रियं चैवं चैवं चैवं चैवं चैवं चैवं चैवं चैवं चैवं चैवं चैवं चैवं चैवं च    \/\/पृथक् पृथक् समूहः समतोलः भवति (प्रत्येक उघृतं कण्ठं उचितं भवति) न च परस्परं निहितः भवति ।    \/\/समूहं पृथक् पृथक् कृत्वा तेषां सूचीं प्रतिपादयतु।    \/\/इदम् फलनम् अनेन सूत्रेण प्रविष्टम् अस्ति यत् अनेन सूत्रेण बहुभिः समूहैः अन्तर्बद्धं कोष्ठकं भवति ।    \/\/ >>> SeparateParenGroups((\"( ) (( )) (( )( ))\"))\n    \/\/ (new List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string paren_string) {\n","canonical_solution":"public static List<string> SeparateParenGroups(string paren_string) {\n        List<string> result = new List<string>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n\n        foreach (char c in paren_string) {\n            if (c == ' ') {\n                continue;\n            }\n\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n\n            currentGroup.Append(c);\n\n            \/\/ When balance is zero, we have a complete group\n            if (balance == 0 && currentGroup.Length > 0) {\n                result.Add(currentGroup.ToString());\n                currentGroup.Clear();\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_2","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/संख्यायाः दशमलवभागं प्रतिपादयतु।    \/\/(अतिरिक्तं भागं सदैव १-अधिकं भवति)    \/\/एवं पूर्णाङ्कः (प्रदत्तसंख्येयस्य लघुतमः बृहत् पूर्णाङ्कः) एवं दशमलवसंख्याः     \/\/यदि धनात्मकः अङ्कः अस्ति, तर्हि सः  इत्यनेन विभक्तः भवति।    \/\/ >>> TruncateNumber((3.5f))\n    \/\/ (0.5f)\n    public static float TruncateNumber(float number) {\n","canonical_solution":"using System;\n\nclass Problem {\n    \/\/ Given a positive floating point number, it can be decomposed into\n    \/\/ an integer part (largest integer smaller than the given number) and decimals\n    \/\/ (leftover part always smaller than 1).\n    \/\/ Return the decimal part of the number.\n    public static float TruncateNumber(float number) {\n        return number - (float)Math.Floor(number);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_3","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/तत्पक्षे कार्यस्य सत्यं प्रतिफलः भवेत् अन्यथा असत्यं प्रतिफलः भवेत् ।    \/\/शून्यसङ्ख्याः भवतां कार्यम् अस्ति यत् यदि कस्यचित् स्थाने खातासङ्ख्या शून्यस्य अधः गच्छति तर्हि अवलोकयतु, तथा     \/\/भवता एका सूची दीयते, येन णकारेण आरभ्यते, येन एका बैंकखाते जमा-उपहार-प्रक्रियाः कृतानि सन्ति ।    \/\/ >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (false)\n    \/\/ >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n    \/\/ (true)\n    public static bool BelowZero(List<long> operations) {\n","canonical_solution":"long balance = 0;\n    foreach (var operation in operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_4","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/MAD = average. x - x_mean.     \/\/तन्त्रे च मध्यस्थं (अस्मिन् प्रकरणे माध्यम्)    \/\/माध्यम् निरपेक्ष विचलनम् एव एव एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम् एवम्    \/\/अस्य डाटासेटस्य माध्यमे एव।    \/\/आगतसंख्यायाः सूचीयाः कृते, माध्यम् निरपेक्ष विचलनं गणनाय कुरुत।    \/\/ >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    \/\/ (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n","canonical_solution":"if (numbers == null || numbers.Count == 0)\n    {\n        throw new ArgumentException(\"The list of numbers must not be null or empty.\");\n    }\n    \n    float sum = 0.0f;\n    foreach (float number in numbers)\n    {\n        sum += number;\n    }\n\n    float mean = sum \/ numbers.Count;\n    float absoluteDeviationSum = 0.0f;\n    \n    foreach (float number in numbers)\n    {\n        absoluteDeviationSum += Math.Abs(number - mean);\n    }\n    \n    float meanAbsoluteDeviation = absoluteDeviationSum \/ numbers.Count;\n    return meanAbsoluteDeviation;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n"},{"task_id":"HumanEval_5","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/'इन्द्रियं च' इत्यस्य अनुक्रमिकयोः अवयवयोः मध्ये 'अन्तराल' इति संख्या प्रविष्टं कुरुत    \/\/ >>> Intersperse((new List<long>()), (4L))\n    \/\/ (new List<long>())\n    \/\/ >>> Intersperse((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (4L))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)4L, (long)3L}))\n    public static List<long> Intersperse(List<long> numbers, long delimeter) {\n","canonical_solution":"public static List<long> Intersperse(List<long> numbers, long delimeter)\n{\n    List<long> result = new List<long>();\n\n    if (numbers == null || numbers.Count == 0)\n    {\n        return result;\n    }\n\n    for (int i = 0; i < numbers.Count; i++)\n    {\n        result.Add(numbers[i]);\n        if (i < numbers.Count - 1)\n        {\n            result.Add(delimeter);\n        }\n    }\n\n    return result;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersperse((new List<long>()), (7L)).Equals((new List<long>())));\n    Debug.Assert(Intersperse((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)2L})), (8L)).Equals((new List<long>(new long[]{(long)5L, (long)8L, (long)6L, (long)8L, (long)3L, (long)8L, (long)2L}))));\n    Debug.Assert(Intersperse((new List<long>(new long[]{(long)2L, (long)2L, (long)2L})), (2L)).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)2L, (long)2L, (long)2L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_6","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् - (() (()) मध्ये अधिकतमं द्वौ स्तरेषु नेस्टिङ्गः भवति, यदाकि ((())) मध्ये त्रयः स्तरेषु नेस्टिङ्गः भवति ।    \/\/समूहस्य प्रत्येकं कूटस्थस्य गहनतमं स्तरं निर्दिश्यते।    \/\/इदम् फलनम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम्    \/\/ >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n    public static List<long> ParseNestedParens(string paren_string) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> ParseNestedParens(string paren_string) {\n        List<long> nestingLevels = new List<long>();\n        string[] groups = paren_string.Split(' ');\n\n        foreach (string group in groups) {\n            long currentLevel = 0;\n            long maxLevel = 0;\n\n            foreach (char c in group) {\n                if (c == '(') {\n                    currentLevel++;\n                    if (currentLevel > maxLevel) {\n                        maxLevel = currentLevel;\n                    }\n                } else if (c == ')') {\n                    currentLevel--;\n                }\n            }\n\n            nestingLevels.Add(maxLevel);\n        }\n\n        return nestingLevels;\n    }\n\n    static void Main(string[] args) {\n        string input = \"(()()) ((())) () ((())()())\";\n        List<long> result = ParseNestedParens(input);\n        Console.WriteLine(string.Join(\", \", result));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_7","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/केवलम् उपसङ्ख्यायाः उपसङ्ख्यायाः कृते प्रविष्टसूचीं फिल्टर् करोतु ।    \/\/ >>> FilterBySubstring((new List<string>()), (\"a\"))\n    \/\/ (new List<string>())\n    \/\/ >>> FilterBySubstring((new List<string>(new string[]{(string)\"abc\", (string)\"bacd\", (string)\"cde\", (string)\"array\"})), (\"a\"))\n    \/\/ (new List<string>(new string[]{(string)\"abc\", (string)\"bacd\", (string)\"array\"}))\n    public static List<string> FilterBySubstring(List<string> strings, string substring) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<string> FilterBySubstring(List<string> strings, string substring) {\n        List<string> result = new List<string>();\n        foreach (string str in strings) {\n            if (str.Contains(substring)) {\n                result.Add(str);\n            }\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterBySubstring((new List<string>()), (\"john\")).Equals((new List<string>())));\n    Debug.Assert(FilterBySubstring((new List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"xxy\", (string)\"john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xxx\")).Equals((new List<string>(new string[]{(string)\"xxx\", (string)\"xxxAAA\", (string)\"xxx\"}))));\n    Debug.Assert(FilterBySubstring((new List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"aaaxxy\", (string)\"john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xx\")).Equals((new List<string>(new string[]{(string)\"xxx\", (string)\"aaaxxy\", (string)\"xxxAAA\", (string)\"xxx\"}))));\n    Debug.Assert(FilterBySubstring((new List<string>(new string[]{(string)\"grunt\", (string)\"trumpet\", (string)\"prune\", (string)\"gruesome\"})), (\"run\")).Equals((new List<string>(new string[]{(string)\"grunt\", (string)\"prune\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_8","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/शून्यस्य योगस्य शून्यस्य च गुणस्य च एकस्य च योगः भवति ।    \/\/पूर्णाङ्काणां सूचीभ्यः, सूचीषु सर्वेषां पूर्णाङ्काणां योगः गुणः च युक्तं ट्यूप्लं प्रतिपादयतु ।    \/\/ >>> SumProduct((new List<long>()))\n    \/\/ (Tuple.Create(0L, 1L))\n    \/\/ >>> SumProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    \/\/ (Tuple.Create(10L, 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum = 0L;\n        long product = 1L;\n\n        foreach (var number in numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Tuple.Create(sum, product);\n    }\n\n    static void Main(string[] args) {\n        \/\/ Test cases\n        var result1 = SumProduct(new List<long>());\n        Console.WriteLine($\"({result1.Item1}, {result1.Item2})\"); \/\/ Should output (0, 1)\n\n        var result2 = SumProduct(new List<long> { 1L, 2L, 3L, 4L });\n        Console.WriteLine($\"({result2.Item1}, {result2.Item2})\"); \/\/ Should output (10, 24)\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"},{"task_id":"HumanEval_9","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/अनुक्रमः     \/\/दिग्विधायकानां सूचीभ्यः, दिग्विधायकानां सूचिभ्यः, दिग्विधायकानां सूचिभ्यः, दिग्विधायकानां सूचिभ्यः, दिग्विधायकानां सूचिभ्यः, दिग्विधायकानां सूचिभ्यः, दिग्विधायकानां सूचिभ्यः, दिग्विधायकानां सूचिभ्यः    \/\/ >>> RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L, (long)2L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long> numbers) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMaxList = new List<long>();\n        long currentMax = long.MinValue;\n\n        foreach (var number in numbers) {\n            if (number > currentMax) {\n                currentMax = number;\n            }\n            rollingMaxList.Add(currentMax);\n        }\n\n        return rollingMaxList;\n    }\n\n    public static void Main(string[] args) {\n        List<long> numbers = new List<long> { 1L, 2L, 3L, 2L, 3L, 4L, 2L };\n        List<long> result = RollingMax(numbers);\n        Console.WriteLine(\"Rolling Max: \" + string.Join(\", \", result));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_10","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/- अङ्गस्य अन्ते अङ्गस्य पूर्वपदस्य विपर्यासे अङ्गस्य पूर्वपदस्य उपसर्गस्य उपसर्गस्य पूर्वपदस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य पूर्वपदस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य पूर्वपदस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गस्य उपसर्गः    \/\/- प्रदत्तस्य स्ट्रन्गस्य दीर्घतमं पोस्टफिक्सं ज्ञातुं यच्च पालिन्ड्रोम् अस्ति ।    \/\/अल्गोरिदमस्य विचारः सरलः अस्ति:    \/\/लघुतमं पालिन्द्रोमम् ज्ञातुं प्रयतमानः।    \/\/ >>> MakePalindrome((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> MakePalindrome((\"cat\"))\n    \/\/ (\"catac\")\n    \/\/ >>> MakePalindrome((\"cata\"))\n    \/\/ (\"catac\")\n    public static string MakePalindrome(string str) {\n","canonical_solution":"if (string.IsNullOrEmpty(str)) return str;\n\n    int maxPalindromeLength = 0;\n    for (int i = 0; i < str.Length; i++) {\n        if (IsPalindrome(str, i, str.Length - 1)) {\n            maxPalindromeLength = str.Length - i;\n            break;\n        }\n    }\n\n    string suffixToPrepend = str.Substring(0, str.Length - maxPalindromeLength);\n    char[] reversedPrefix = suffixToPrepend.Reverse().ToArray();\n    return str + new string(reversedPrefix);\n}\n\nprivate static bool IsPalindrome(string str, int left, int right) {\n    while (left < right) {\n        if (str[left] != str[right]) return false;\n        left++;\n        right--;\n    }\n    return true;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MakePalindrome((\"\")).Equals((\"\")));\n    Debug.Assert(MakePalindrome((\"x\")).Equals((\"x\")));\n    Debug.Assert(MakePalindrome((\"xyz\")).Equals((\"xyzyx\")));\n    Debug.Assert(MakePalindrome((\"xyx\")).Equals((\"xyx\")));\n    Debug.Assert(MakePalindrome((\"jerry\")).Equals((\"jerryrrej\")));\n    }\n\n}\n"},{"task_id":"HumanEval_11","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/एतयोः आगतानां विषये द्विवचनं XOR क्रियते, तथा च निष्पन्नं सूत्रं अपि लभते।    \/\/इन्द्रियं द्वौ शृङ्गाणि ए च बी च सन्ति, येषु केवलं १ च ० च सन्ति।    \/\/ >>> StringXor((\"010\"), (\"110\"))\n    \/\/ (\"100\")\n    public static string StringXor(string a, string b) {\n","canonical_solution":"if (a.Length != b.Length) {\n        throw new ArgumentException(\"Input strings must be of the same length.\");\n    }\n\n    StringBuilder result = new StringBuilder(a.Length);\n\n    for (int i = 0; i < a.Length; i++) {\n        result.Append(a[i] == b[i] ? '0' : '1');\n    }\n\n    return result.ToString();\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"},{"task_id":"HumanEval_12","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/समान-लम्बाः शङ्खः। यदि आगतसूची रिक्तं भवति तर्हि शून्यम् प्रतिपादयतु।    \/\/अकारस्य दीर्घतमं वर्णं प्रतिपादयतु। यदि बहुव्रीहिः अस्ति तर्हि प्रथमं वर्णं प्रतिपादयतु।    \/\/ >>> Longest((new List<string>()))\n    \/\/ null\n    \/\/ >>> Longest((new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"})))\n    \/\/ (\"a\")\n    \/\/ >>> Longest((new List<string>(new string[]{(string)\"a\", (string)\"bb\", (string)\"ccc\"})))\n    \/\/ (\"ccc\")\n    public static string Longest(List<string> strings) {\n","canonical_solution":"if (strings == null || strings.Count == 0)\n    {\n        return null;\n    }\n    \n    string longest = strings[0];\n    \n    foreach (string str in strings)\n    {\n        if (str.Length > longest.Length)\n        {\n            longest = str;\n        }\n    }\n    \n    return longest;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Longest((new List<string>())).Equals(null));\n    Debug.Assert(Longest((new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}))).Equals((\"x\")));\n    Debug.Assert(Longest((new List<string>(new string[]{(string)\"x\", (string)\"yyy\", (string)\"zzzz\", (string)\"www\", (string)\"kkkk\", (string)\"abc\"}))).Equals((\"zzzz\")));\n    }\n\n}\n"},{"task_id":"HumanEval_13","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/द्वयोः पूर्णाङ्काः a, b इत्ययोः सर्वाधिकं सामान्यविभाजकम् प्रतिपादयतु ।    \/\/ >>> GreatestCommonDivisor((3L), (5L))\n    \/\/ (1L)\n    \/\/ >>> GreatestCommonDivisor((25L), (15L))\n    \/\/ (5L)\n    public static long GreatestCommonDivisor(long a, long b) {\n","canonical_solution":"\/\/ Base case: if b is 0, gcd is a\n    if (b == 0)\n        return a;\n    \n    \/\/ Recursive call: gcd(a, b) = gcd(b, a % b)\n    return GreatestCommonDivisor(b, a % b);\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GreatestCommonDivisor((3L), (7L)) == (1L));\n    Debug.Assert(GreatestCommonDivisor((10L), (15L)) == (5L));\n    Debug.Assert(GreatestCommonDivisor((49L), (14L)) == (7L));\n    Debug.Assert(GreatestCommonDivisor((144L), (60L)) == (12L));\n    }\n\n}\n"},{"task_id":"HumanEval_14","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/इतः पूर्वं सर्वस्य पूर्वपदस्य लघतमात् दीर्घतमात् इतः पूर्वपदस्य सूचीः लभ्यते ।    \/\/ >>> AllPrefixes((\"abc\"))\n    \/\/ (new List<string>(new string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static List<string> AllPrefixes(string str) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Return list of all prefixes from shortest to longest of the input string\n    public static List<string> AllPrefixes(string str) {\n        List<string> prefixes = new List<string>();\n        for (int i = 1; i <= str.Length; i++) {\n            prefixes.Add(str.Substring(0, i));\n        }\n        return prefixes;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_15","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/0 तः n पर्यन्तं संख्यायाः अन्तरालसंज्ञकानि सन्ति।    \/\/ >>> StringSequence((0L))\n    \/\/ (\"0\")\n    \/\/ >>> StringSequence((5L))\n    \/\/ (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n) {\n","canonical_solution":"public static string StringSequence(long n) {\n    StringBuilder sb = new StringBuilder();\n    for (long i = 0; i <= n; i++) {\n        if (i > 0) {\n            sb.Append(\" \");\n        }\n        sb.Append(i);\n    }\n    return sb.ToString();\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"},{"task_id":"HumanEval_16","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/यदि कस्यचित् अक्षरस्य वर्णः अस्ति, तर्हि तस्य संख्या ज्ञातुं प्रयतस्व।    \/\/ >>> CountDistinctCharacters((\"xyzXYZ\"))\n    \/\/ (3L)\n    \/\/ >>> CountDistinctCharacters((\"Jerry\"))\n    \/\/ (4L)\n    public static long CountDistinctCharacters(string str) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static long CountDistinctCharacters(string str) {\n        \/\/ Convert the string to lower case to handle case insensitivity\n        str = str.ToLower();\n\n        \/\/ Use a HashSet to store distinct characters\n        HashSet<char> distinctChars = new HashSet<char>(str);\n\n        \/\/ Return the count of distinct characters\n        return distinctChars.Count;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"},{"task_id":"HumanEval_17","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/'ऋक्' - चतुर्विंशतिवर्णः, एकं ध्रुवम् भवति ।    \/\/'ओऽस्ये' - अर्धं स्वरं, द्वौ धातौ भवति ।    \/\/'ओ' - पूर्णं सङ्केतं, चतुर्भिः धड्डैः भवति ।    \/\/अत्र एकं किंवदंति-    \/\/न च अन्तिमम्।    \/\/भवतां कार्यम् अस्ति यत् इयं स्ट्रिंग् विभज्य च पूर्णाङ्काणां सूचीं प्रति लभेत, येषु प्रत्येकं कति-अङ्कं करोति।    \/\/अस्य कार्यस्य आगतं विशेषेण ASCII स्वरूपेण सङ्गीतस्य सङ्केतं प्रतिपादयति।    \/\/ >>> ParseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    \/\/ (new List<long>(new long[]{(long)4L, (long)2L, (long)1L, (long)2L, (long)2L, (long)1L, (long)1L, (long)1L, (long)1L, (long)4L, (long)4L}))\n    public static List<long> ParseMusic(string music_string) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<long> ParseMusic(string music_string)\n    {\n        List<long> beats = new List<long>();\n        string[] notes = music_string.Split(' ');\n        \n        foreach (string note in notes)\n        {\n            switch (note)\n            {\n                case \"o\":\n                    beats.Add(4L);\n                    break;\n                case \"o|\":\n                    beats.Add(2L);\n                    break;\n                case \".|\":\n                    beats.Add(1L);\n                    break;\n                default:\n                    break;\n            }\n        }\n        \n        return beats;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseMusic((\"\")).Equals((new List<long>())));\n    Debug.Assert(ParseMusic((\"o o o o\")).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\".| .| .| .|\")).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}))));\n    Debug.Assert(ParseMusic((\"o| o| .| .| o o o o\")).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L, (long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\"o| .| o| .| o o| o o|\")).Equals((new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)1L, (long)4L, (long)2L, (long)4L, (long)2L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_18","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/मूलसूत्रे उपसूत्रस्य कति पुनरावृत्तिः सन्ति, ते ज्ञातुं शक्नुमः।    \/\/ >>> HowManyTimes((\"\"), (\"a\"))\n    \/\/ (0L)\n    \/\/ >>> HowManyTimes((\"aaa\"), (\"a\"))\n    \/\/ (3L)\n    \/\/ >>> HowManyTimes((\"aaaa\"), (\"aa\"))\n    \/\/ (3L)\n    public static long HowManyTimes(string str, string substring) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long HowManyTimes(string str, string substring) {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n            return 0L;\n        }\n\n        long count = 0;\n        int index = 0;\n\n        while ((index = str.IndexOf(substring, index)) != -1) {\n            count++;\n            index++;\n        }\n\n        return count;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(HowManyTimes(\"aaa\", \"a\")); \/\/ Output: 3\n        Console.WriteLine(HowManyTimes(\"aaaa\", \"aa\")); \/\/ Output: 3\n        Console.WriteLine(HowManyTimes(\"\", \"a\")); \/\/ Output: 0\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n}\n"},{"task_id":"HumanEval_19","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/लघुतमात् बृहत्तमं प्रति सङ्ख्याभिः क्रमबद्धं शृङ्खलं प्रतिपादयतु ।    \/\/वैधानि विकल्पानि \"शून्य\", \"एक\", \"द्वय\", \"त्रय\", \"चत्वार\", \"पञ्च\", \"षट्\", \"सप्त\", \"आठ\" तथा \"नव\" इत्येवम् सन्ति ।    \/\/'शून्य' इत्यतः 'नौ' इत्यतः 'शून्य' इत्यतः 'नौ' इत्यतः 'शून्य' इत्यतः 'नौ' इत्यतः 'नौ' इत्यतः 'नौ' इत्यतः 'नौ' इत्यतः 'नौ' इत्यतः 'नौ' इत्यतः 'नौ' इत्यतः 'नौ' इत्यतः 'नौ' इत्यतः 'नौ' इत्यतः 'नौ' इत्यतः 'नौ' इत्यतः    \/\/ >>> SortNumbers((\"three one five\"))\n    \/\/ (\"one three five\")\n    public static string SortNumbers(string numbers) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static string SortNumbers(string numbers)\n    {\n        Dictionary<string, int> numberWords = new Dictionary<string, int>\n        {\n            { \"zero\", 0 },\n            { \"one\", 1 },\n            { \"two\", 2 },\n            { \"three\", 3 },\n            { \"four\", 4 },\n            { \"five\", 5 },\n            { \"six\", 6 },\n            { \"seven\", 7 },\n            { \"eight\", 8 },\n            { \"nine\", 9 }\n        };\n\n        List<string> numberList = new List<string>(numbers.Split(' '));\n        numberList.Sort((a, b) => numberWords[a].CompareTo(numberWords[b]));\n        return string.Join(\" \", numberList);\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(SortNumbers(\"three one five\")); \/\/ Output: \"one three five\"\n        Console.WriteLine(SortNumbers(\"nine eight seven six\")); \/\/ Output: \"six seven eight nine\"\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"},{"task_id":"HumanEval_20","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/अन्यः क्रमः (अल्पसंख्याः, अधिकसंख्याः) ।    \/\/अत्र प्रदत्तः सङ्ख्यासूची (अन्यतम द्वयोः दीर्घः) द्वयोः सङ्ख्याभ्यः समीपे स्थितं द्वयं चित्वा परावर्त्तयतु ।    \/\/ >>> FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n    \/\/ (Tuple.Create(2.0f, 2.2f))\n    \/\/ >>> FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n    \/\/ (Tuple.Create(2.0f, 2.0f))\n    public static Tuple<float, float> FindClosestElements(List<float> numbers) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static Tuple<float, float> FindClosestElements(List<float> numbers) {\n        if (numbers == null || numbers.Count < 2) {\n            throw new ArgumentException(\"List must contain at least two numbers.\");\n        }\n        \n        numbers.Sort();\n        float minDifference = float.MaxValue;\n        Tuple<float, float> closestPair = null;\n\n        for (int i = 0; i < numbers.Count - 1; i++) {\n            float difference = numbers[i + 1] - numbers[i];\n            if (difference < minDifference) {\n                minDifference = difference;\n                closestPair = Tuple.Create(numbers[i], numbers[i + 1]);\n            }\n        }\n\n        return closestPair;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))).Equals((Tuple.Create(3.9f, 4.0f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))).Equals((Tuple.Create(5.0f, 5.9f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))).Equals((Tuple.Create(2.0f, 2.2f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))).Equals((Tuple.Create(2.0f, 2.0f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))).Equals((Tuple.Create(2.2f, 3.1f))));\n    }\n\n}\n"},{"task_id":"HumanEval_21","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/अतः लघुतमः संख्याः शून्यः भवति, बृहत्तमः संख्याः च एकः भवति।    \/\/संख्यायाः सूची (अन्यतम द्वयोः तत्वानां) दत्त्वा, तत् सूचीं प्रति रेखागतपरिवर्तनं क्रियताम्,    \/\/ >>> RescaleToUnit((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n    \/\/ (new List<float>(new float[]{(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\n    public static List<float> RescaleToUnit(List<float> numbers) {\n","canonical_solution":"public static List<float> RescaleToUnit(List<float> numbers) {\n        if (numbers == null || numbers.Count < 2)\n            throw new ArgumentException(\"List must contain at least two elements.\");\n\n        float min = numbers.Min();\n        float max = numbers.Max();\n\n        if (min == max)\n            throw new ArgumentException(\"All elements are the same. Cannot rescale.\");\n\n        return numbers.Select(num => (num - min) \/ (max - min)).ToList();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)2.0f, (float)49.9f}))).Equals((new List<float>(new float[]{(float)0.0f, (float)1.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)100.0f, (float)49.9f}))).Equals((new List<float>(new float[]{(float)1.0f, (float)0.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))).Equals((new List<float>(new float[]{(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))).Equals((new List<float>(new float[]{(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))).Equals((new List<float>(new float[]{(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f}))));\n    }\n\n}\n"},{"task_id":"HumanEval_22","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/केवल पूर्णाङ्कं प्रति कस्यचित् csthon-मूल्यस्य सूचीं फिल्टर् करोतु ।    \/\/ >>> FilterIntegers((new List<object>(new string[]{(string)\"a\", (string)3.14f, (string)5L})))\n    \/\/ (new List<long>(new long[]{(long)5L}))\n    \/\/ >>> FilterIntegers((new List<object>(new object[]{1L, 2L, 3L, \"abc\", new List<object>()})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))\n    public static List<long> FilterIntegers(List<object> values) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> FilterIntegers(List<object> values) {\n        List<long> result = new List<long>();\n        foreach (var value in values) {\n            if (value is long) {\n                result.Add((long)value);\n            }\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterIntegers((new List<object>())).Equals((new List<long>())));\n    Debug.Assert(FilterIntegers((new List<object>(new object[]{4L, new List<object>(), 23.2f, 9L, \"adasd\"}))).Equals((new List<long>(new long[]{(long)4L, (long)9L}))));\n    Debug.Assert(FilterIntegers((new List<object>(new object[]{3L, \"c\", 3L, 3L, \"a\", \"b\"}))).Equals((new List<long>(new long[]{(long)3L, (long)3L, (long)3L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_23","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/दिशन्त्यस्य दीर्घत्वं प्रतिपादयतु ।    \/\/ >>> StringLength((\"\"))\n    \/\/ (0L)\n    \/\/ >>> StringLength((\"abc\"))\n    \/\/ (3L)\n    public static long Strlen(string str) {\n","canonical_solution":"return str.Length;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Strlen((\"\")) == (0L));\n    Debug.Assert(Strlen((\"x\")) == (1L));\n    Debug.Assert(Strlen((\"asdasnakj\")) == (9L));\n    }\n\n}\n"},{"task_id":"HumanEval_24","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/दिशति, अतः n-संख्यया n-संख्यया लघुतमं संख्यां ज्ञातव्यम्, यत् n-संख्यया समं विभजते।    \/\/ >>> LargestDivisor((15L))\n    \/\/ (5L)\n    public static long LargestDivisor(long n) {\n","canonical_solution":"if (n <= 1)\n        {\n            throw new ArgumentOutOfRangeException(\"n must be greater than 1\");\n        }\n        for (long i = n \/ 2; i >= 1; i--)\n        {\n            if (n % i == 0)\n            {\n                return i;\n            }\n        }\n        return 1; \/\/ This line is theoretically unreachable since 1 is always a divisor of n\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestDivisor((3L)) == (1L));\n    Debug.Assert(LargestDivisor((7L)) == (1L));\n    Debug.Assert(LargestDivisor((10L)) == (5L));\n    Debug.Assert(LargestDivisor((100L)) == (50L));\n    Debug.Assert(LargestDivisor((49L)) == (7L));\n    }\n\n}\n"},{"task_id":"HumanEval_25","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/इदम् संख्यायाः गुणनम् अकारस्य गुणनम् भवति ।    \/\/प्रत्येकं कारकम् कारकविभागेषु कतिधा दृश्यते, तदनुरूपं संख्यायां सूचीबद्धं भवेत् ।    \/\/दिशति सूचिकां सर्वकारेण सूचिकां लघुतमात् बृहत्तमं क्रमात् ।    \/\/ >>> Factorize((8L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    \/\/ >>> Factorize((25L))\n    \/\/ (new List<long>(new long[]{(long)5L, (long)5L}))\n    \/\/ >>> Factorize((70L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)5L, (long)7L}))\n    public static List<long> Factorize(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> Factorize(long n) {\n        List<long> factors = new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n \/= i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L, (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_26","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/आद्युदात्तत्वे यथाक्रमं वामपार्श्वे स्थापयतु ।    \/\/पूर्णाङ्काणां सूचीभ्यः, एकं पुनः पुनः प्रादुर्भवन्ति सर्वान् अवयवान् निष्कास्यताम् ।    \/\/ >>> RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)3L, (long)4L}))\n    public static List<long> RemoveDuplicates(List<long> numbers) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    \/\/ From a list of integers, remove all elements that occur more than once.\n    \/\/ Keep order of elements left the same as in the input.\n    public static List<long> RemoveDuplicates(List<long> numbers)\n    {\n        var elementCount = numbers.GroupBy(n => n)\n                                  .ToDictionary(g => g.Key, g => g.Count());\n\n        return numbers.Where(n => elementCount[n] == 1).ToList();\n    }\n\n    static void Main(string[] args)\n    {\n        List<long> numbers = new List<long> { 1, 2, 3, 2, 4 };\n        List<long> result = RemoveDuplicates(numbers);\n        Console.WriteLine(string.Join(\", \", result));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveDuplicates((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)3L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_27","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/दिशन्त्य्-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली    \/\/ >>> FlipCase((\"Hello\"))\n    \/\/ (\"hELLO\")\n    public static string FlipCase(string str) {\n","canonical_solution":"using System;\n\nclass Problem {\n    \/\/ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \/\/ >>> FlipCase((\"Hello\"))\n    \/\/ (\"hELLO\")\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n            if (char.IsUpper(chars[i])) {\n                chars[i] = char.ToLower(chars[i]);\n            } else if (char.IsLower(chars[i])) {\n                chars[i] = char.ToUpper(chars[i]);\n            }\n        }\n        return new string(chars);\n    }\n    \n    static void Main(string[] args) {\n        Console.WriteLine(FlipCase(\"Hello\")); \/\/ Output should be \"hELLO\"\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"},{"task_id":"HumanEval_28","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/एकस्मिन् सूत्रे सूत्रसूचीं समाहितं कुरुत    \/\/ >>> Concatenate((new List<string>()))\n    \/\/ (\"\")\n    \/\/ >>> Concatenate((new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"})))\n    \/\/ (\"abc\")\n    public static string Concatenate(List<string> strings) {\n","canonical_solution":"return string.Concat(strings);\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Concatenate((new List<string>())).Equals((\"\")));\n    Debug.Assert(Concatenate((new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}))).Equals((\"xyz\")));\n    Debug.Assert(Concatenate((new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\", (string)\"w\", (string)\"k\"}))).Equals((\"xyzwk\")));\n    }\n\n}\n"},{"task_id":"HumanEval_29","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/केवलम् उपसर्गात् आरभन्तेभ्यः सूत्रानां सूचीं फिल्टर् करोतु ।    \/\/ >>> FilterByPrefix((new List<string>()), (\"a\"))\n    \/\/ (new List<string>())\n    \/\/ >>> FilterByPrefix((new List<string>(new string[]{(string)\"abc\", (string)\"bcd\", (string)\"cde\", (string)\"array\"})), (\"a\"))\n    \/\/ (new List<string>(new string[]{(string)\"abc\", (string)\"array\"}))\n    public static List<string> FilterByPrefix(List<string> strings, string prefix) {\n","canonical_solution":"return strings.Where(s => s.StartsWith(prefix)).ToList();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterByPrefix((new List<string>()), (\"john\")).Equals((new List<string>())));\n    Debug.Assert(FilterByPrefix((new List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"xxy\", (string)\"john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xxx\")).Equals((new List<string>(new string[]{(string)\"xxx\", (string)\"xxxAAA\", (string)\"xxx\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_30","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/सूचीषु केवलं धनात्मकं संख्यां प्रतिपादयतु।    \/\/ >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    \/\/ >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n    \/\/ (new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)9L, (long)123L, (long)1L}))\n    public static List<long> GetPositive(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<long> GetPositive(List<long> l)\n    {\n        List<long> positiveNumbers = new List<long>();\n        foreach (long number in l)\n        {\n            if (number > 0)\n            {\n                positiveNumbers.Add(number);\n            }\n        }\n        return positiveNumbers;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)-1L, (long)-2L, (long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))));\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L}))).Equals((new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)3L, (long)9L, (long)123L, (long)1L}))));\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)-1L, (long)-2L}))).Equals((new List<long>())));\n    Debug.Assert(GetPositive((new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"},{"task_id":"HumanEval_31","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/यदि दीयते तदा सत्यं परावर्त्तय, अन्यथा मिथ्या।    \/\/ >>> IsPrime((6L))\n    \/\/ (false)\n    \/\/ >>> IsPrime((101L))\n    \/\/ (true)\n    \/\/ >>> IsPrime((11L))\n    \/\/ (true)\n    \/\/ >>> IsPrime((13441L))\n    \/\/ (true)\n    \/\/ >>> IsPrime((61L))\n    \/\/ (true)\n    \/\/ >>> IsPrime((4L))\n    \/\/ (false)\n    \/\/ >>> IsPrime((1L))\n    \/\/ (false)\n    public static bool IsPrime(long n) {\n","canonical_solution":"public static bool IsPrime(long n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    \n    for (long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    \n    return true;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_33","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य णकारस्य    \/\/l' इत्यनेन सूत्रेण त्रयाणां विभक्तानां सूचकांशाणां मध्ये l इत्यनेन सूत्रेण एकं सूत्रं भवति, त्रयाणां विभक्तानां सूचकांशाणां मध्ये तस्य मानः एक एव भवति ।    \/\/इदम् फलनम् एकं सूची l गृहीत्वा, सूची l' इत्यनेन परावर्त्तयति यत्     \/\/ >>> SortThird((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))\n    \/\/ >>> SortThird((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)2L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)5L}))\n    public static List<long> SortThird(List<long> l) {\n","canonical_solution":"public static List<long> SortThird(List<long> l) {\n        List<long> sortedValues = new List<long>();\n\n        \/\/ Collect values at indices divisible by three\n        for (int i = 0; i < l.Count; i++) {\n            if (i % 3 == 0) {\n                sortedValues.Add(l[i]);\n            }\n        }\n\n        \/\/ Sort the collected values\n        sortedValues.Sort();\n\n        \/\/ Place sorted values back into their positions\n        int sortedIndex = 0;\n        List<long> result = new List<long>(l);\n        for (int i = 0; i < result.Count; i++) {\n            if (i % 3 == 0) {\n                result[i] = sortedValues[sortedIndex++];\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortThird((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)2L}))).Equals((new List<long>(new long[]{(long)2L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)5L}))));\n    Debug.Assert(SortThird((new List<long>(new long[]{(long)5L, (long)8L, (long)3L, (long)4L, (long)6L, (long)9L, (long)2L}))).Equals((new List<long>(new long[]{(long)2L, (long)8L, (long)3L, (long)4L, (long)6L, (long)9L, (long)5L}))));\n    Debug.Assert(SortThird((new List<long>(new long[]{(long)5L, (long)6L, (long)9L, (long)4L, (long)8L, (long)3L, (long)2L}))).Equals((new List<long>(new long[]{(long)2L, (long)6L, (long)9L, (long)4L, (long)8L, (long)3L, (long)5L}))));\n    Debug.Assert(SortThird((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)5L, (long)1L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_34","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/सूचीमध्ये विसर्जिते अनन्यपदार्थेषु परावर्त्तनम्    \/\/ >>> Unique((new List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L})))\n    \/\/ (new List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))\n    public static List<long> Unique(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Return sorted unique elements in a list\n    public static List<long> Unique(List<long> l) {\n        HashSet<long> uniqueSet = new HashSet<long>(l);\n        List<long> uniqueList = new List<long>(uniqueSet);\n        uniqueList.Sort();\n        return uniqueList;\n    }\n    \n    static void Main(string[] args) {\n        List<long> input = new List<long>{5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L};\n        List<long> result = Unique(input);\n        Console.WriteLine(string.Join(\", \", result)); \/\/ Output: 0, 2, 3, 5, 9, 123\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Unique((new List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L}))).Equals((new List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_35","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/सूचीमध्ये अधिकतमः तत्वः परावर्त्त्यते ।    \/\/ >>> MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (3L)\n    \/\/ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n    \/\/ (123L)\n    public static long MaxElement(List<long> l) {\n","canonical_solution":"return l.Max();\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"},{"task_id":"HumanEval_36","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/11 वा 13 इत्यनेन विभाज्यमानानां पूर्णांशाः n-संख्ययाम् 7 इत्यस्य संख्यां प्रतिपादयतु।    \/\/ >>> FizzBuzz((50L))\n    \/\/ (0L)\n    \/\/ >>> FizzBuzz((78L))\n    \/\/ (2L)\n    \/\/ >>> FizzBuzz((79L))\n    \/\/ (3L)\n    public static long FizzBuzz(long n) {\n","canonical_solution":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \/\/ >>> FizzBuzz((50L))\n    \/\/ (0L)\n    \/\/ >>> FizzBuzz((78L))\n    \/\/ (2L)\n    \/\/ >>> FizzBuzz((79L))\n    \/\/ (3L)\n    public static long FizzBuzz(long n) {\n        long count = 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += CountSevens(i);\n            }\n        }\n        return count;\n    }\n\n    private static int CountSevens(long num) {\n        int count = 0;\n        while (num > 0) {\n            if (num % 10 == 7) {\n                count++;\n            }\n            num \/= 10;\n        }\n        return count;\n    }\n\n    \/\/ You can test the function with the following main method:\n    static void Main(string[] args) {\n        Console.WriteLine(FizzBuzz(50));  \/\/ Output: 0\n        Console.WriteLine(FizzBuzz(78));  \/\/ Output: 2\n        Console.WriteLine(FizzBuzz(79));  \/\/ Output: 3\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"},{"task_id":"HumanEval_37","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/इलः इक्-प्रत्ययः, किन्तु विभक्तः।    \/\/l' इत्यनेन l इत्यनेन समानं भवति, यदा इक्-प्रत्ययः भवति, तदा तस्य मानः इक्-प्रत्ययेषु समानः भवति ।    \/\/इदम् फलनम् एकं सूची l गृहीत्वा, सूची l' इत्यनेन परावर्त्तयति यत्     \/\/ >>> SortEven((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))\n    \/\/ >>> SortEven((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)4L})))\n    \/\/ (new List<long>(new long[]{(long)3L, (long)6L, (long)5L, (long)4L}))\n    public static List<long> SortEven(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ This function takes a list l and returns a list l' such that\n    \/\/ l' is identical to l in the odd indices, while its values at the even indices are equal\n    \/\/ to the values of the even indices of l, but sorted.\n    public static List<long> SortEven(List<long> l) {\n        List<long> evenIndicesValues = new List<long>();\n\n        \/\/ Collect values from even indices\n        for (int i = 0; i < l.Count; i += 2) {\n            evenIndicesValues.Add(l[i]);\n        }\n\n        \/\/ Sort the collected even index values\n        evenIndicesValues.Sort();\n\n        \/\/ Reconstruct the list with sorted values at even indices\n        List<long> result = new List<long>(l);\n\n        for (int i = 0, j = 0; i < result.Count; i += 2, j++) {\n            result[i] = evenIndicesValues[j];\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortEven((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))));\n    Debug.Assert(SortEven((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L}))).Equals((new List<long>(new long[]{(long)-10L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)5L, (long)0L, (long)9L, (long)1L, (long)123L}))));\n    Debug.Assert(SortEven((new List<long>(new long[]{(long)5L, (long)8L, (long)-12L, (long)4L, (long)23L, (long)2L, (long)3L, (long)11L, (long)12L, (long)-10L}))).Equals((new List<long>(new long[]{(long)-12L, (long)8L, (long)3L, (long)4L, (long)5L, (long)2L, (long)12L, (long)11L, (long)23L, (long)-10L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_39","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/prime_fib इत्यनेन n-अङ्कं प्राप्नोति यत् फिबोनैचि-संख्या अस्ति, सः अपि अङ्कः अस्ति ।    \/\/ >>> PrimeFib((1L))\n    \/\/ (2L)\n    \/\/ >>> PrimeFib((2L))\n    \/\/ (3L)\n    \/\/ >>> PrimeFib((3L))\n    \/\/ (5L)\n    \/\/ >>> PrimeFib((4L))\n    \/\/ (13L)\n    \/\/ >>> PrimeFib((5L))\n    \/\/ (89L)\n    public static long PrimeFib(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    \/\/ Method to check if a number is prime\n    public static bool IsPrime(long num)\n    {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n\n        long boundary = (long)Math.Floor(Math.Sqrt(num));\n\n        for (long i = 3; i <= boundary; i += 2)\n        {\n            if (num % i == 0)\n                return false;\n        }\n\n        return true;\n    }\n\n    \/\/ Method to generate Fibonacci numbers and find the n-th prime Fibonacci\n    public static long PrimeFib(long n)\n    {\n        long a = 1, b = 1;\n        long primeFibCount = 0;\n\n        while (true)\n        {\n            long temp = a;\n            a = b;\n            b = temp + b;\n\n            if (IsPrime(a))\n            {\n                primeFibCount++;\n                if (primeFibCount == n)\n                {\n                    return a;\n                }\n            }\n        }\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(PrimeFib(1)); \/\/ Output: 2\n        Console.WriteLine(PrimeFib(2)); \/\/ Output: 3\n        Console.WriteLine(PrimeFib(3)); \/\/ Output: 5\n        Console.WriteLine(PrimeFib(4)); \/\/ Output: 13\n        Console.WriteLine(PrimeFib(5)); \/\/ Output: 89\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PrimeFib((1L)) == (2L));\n    Debug.Assert(PrimeFib((2L)) == (3L));\n    Debug.Assert(PrimeFib((3L)) == (5L));\n    Debug.Assert(PrimeFib((4L)) == (13L));\n    Debug.Assert(PrimeFib((5L)) == (89L));\n    Debug.Assert(PrimeFib((6L)) == (233L));\n    Debug.Assert(PrimeFib((7L)) == (1597L));\n    Debug.Assert(PrimeFib((8L)) == (28657L));\n    Debug.Assert(PrimeFib((9L)) == (514229L));\n    Debug.Assert(PrimeFib((10L)) == (433494437L));\n    }\n\n}\n"},{"task_id":"HumanEval_40","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/शून्यस्य योगः, अन्यथा च मिथ्या।    \/\/यदि सूचीमध्ये त्रयः पृथक् पृथक् तत्वानि सन्ति, तदा सः सत्यं प्रतिपादयति।    \/\/triple_sum_to_zero इत्यनेन पूर्णाङ्कं प्रविष्टम्।    \/\/ >>> TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L})))\n    \/\/ (false)\n    \/\/ >>> TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    \/\/ (true)\n    \/\/ >>> TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L})))\n    \/\/ (false)\n    \/\/ >>> TriplesSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)9L, (long)7L})))\n    \/\/ (true)\n    \/\/ >>> TriplesSumToZero((new List<long>(new long[]{(long)1L})))\n    \/\/ (false)\n    public static bool TriplesSumToZero(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static bool TriplesSumToZero(List<long> l)\n    {\n        if (l.Count < 3)\n            return false;\n\n        l.Sort();\n\n        for (int i = 0; i < l.Count - 2; i++)\n        {\n            if (i > 0 && l[i] == l[i - 1])\n                continue;\n\n            int left = i + 1;\n            int right = l.Count - 1;\n\n            while (left < right)\n            {\n                long sum = l[i] + l[left] + l[right];\n                if (sum == 0)\n                    return true;\n                else if (sum < 0)\n                    left++;\n                else\n                    right--;\n            }\n        }\n\n        return false;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)-1L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (true));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)5L, (long)7L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)9L, (long)7L}))) == (true));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)-100L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)100L, (long)3L, (long)5L, (long)-100L}))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_41","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/इदम् फलनम् इदम् प्रकारस्य टकराणां संख्यां निर्दिशति ।    \/\/यथा ते न संयोगाः।    \/\/तथापि, कारः अतीव दृढः च भवति, अतः ते गतिं कुर्वन्ति ।    \/\/यदा वामतः दक्षिणतः गच्छन् वाहनं दायाम् वामतः गच्छन् वाहनं प्रति ध्रुवम् करोति।    \/\/सर्वे रथः समानं गच्छति। द्वयोः रथयोः टकराः भवन्ति।    \/\/कारयोः द्वयोः समूहः आरभते, तेषु दूरतः एव।    \/\/n कारः वामतः दक्षिणतः गच्छन्ति; समन्तात्, भिन्नं n कारं भवति ।    \/\/कल्पना करोत यत् एकं मार्गम् पूर्णतया सरलं असीमतः दीर्घं रेखाम् अस्ति ।    public static long CarRaceCollision(long n) {\n","canonical_solution":"\/\/ Each car moving left to right will collide with each car moving right to left.\n        \/\/ So the total number of collisions is n * n.\n        return n * n;\n    }\n\n    public static void Main(string[] args) {\n        Console.WriteLine(CarRaceCollision(5));  \/\/ Example usage\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CarRaceCollision((2L)) == (4L));\n    Debug.Assert(CarRaceCollision((3L)) == (9L));\n    Debug.Assert(CarRaceCollision((4L)) == (16L));\n    Debug.Assert(CarRaceCollision((8L)) == (64L));\n    Debug.Assert(CarRaceCollision((10L)) == (100L));\n    }\n\n}\n"},{"task_id":"HumanEval_42","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/१-द्वारा वृद्धिं कृतं तत्वं सहितं प्रत्यागमनसूची ।    \/\/ >>> IncrList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))\n    \/\/ >>> IncrList((new List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L})))\n    \/\/ (new List<long>(new long[]{(long)6L, (long)4L, (long)6L, (long)3L, (long)4L, (long)4L, (long)10L, (long)1L, (long)124L}))\n    public static List<long> IncrList(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Return list with elements incremented by 1.\n    public static List<long> IncrList(List<long> l) {\n        return l.Select(x => x + 1).ToList();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IncrList((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(IncrList((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)3L, (long)2L}))));\n    Debug.Assert(IncrList((new List<long>(new long[]{(long)5L, (long)2L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L}))).Equals((new List<long>(new long[]{(long)6L, (long)3L, (long)6L, (long)3L, (long)4L, (long)4L, (long)10L, (long)1L, (long)124L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_43","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/शून्यस्य योगः, अन्यथा च मिथ्या।    \/\/यदि द्वौ भिन्नौ तत्वौ सन्ति तदा TRUE इत्यस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य प्रत्ययस्य    \/\/pairs_sum_to_zero इत्यनेन पूर्णाङ्काणां सूची प्रविष्टेः ।    \/\/ >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L})))\n    \/\/ (false)\n    \/\/ >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    \/\/ (false)\n    \/\/ >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L})))\n    \/\/ (false)\n    \/\/ >>> PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    \/\/ (true)\n    \/\/ >>> PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    \/\/ (false)\n    public static bool PairsSumToZero(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static bool PairsSumToZero(List<long> l)\n    {\n        HashSet<long> seenNumbers = new HashSet<long>();\n\n        foreach (long number in l)\n        {\n            if (seenNumbers.Contains(-number))\n            {\n                return true;\n            }\n            seenNumbers.Add(number);\n        }\n\n        return false;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(PairsSumToZero(new List<long> { 1L, 3L, 5L, 0L })); \/\/ false\n        Console.WriteLine(PairsSumToZero(new List<long> { 1L, 3L, -2L, 1L })); \/\/ false\n        Console.WriteLine(PairsSumToZero(new List<long> { 1L, 2L, 3L, 7L })); \/\/ false\n        Console.WriteLine(PairsSumToZero(new List<long> { 2L, 4L, -5L, 3L, 5L, 7L })); \/\/ true\n        Console.WriteLine(PairsSumToZero(new List<long> { 1L })); \/\/ false\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_44","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/आधारसंख्या १०-अपेक्षा भवति ।    \/\/रूपांतरणेन पश्चात् स्ट्रिंग् प्रतिपादने प्रतिगमनम् ।    \/\/आगतसंख्याकस्य संख्यात्मकं आधारं आधारं प्रति परिवर्तय।    \/\/ >>> ChangeBase((8L), (3L))\n    \/\/ (\"22\")\n    \/\/ >>> ChangeBase((8L), (2L))\n    \/\/ (\"1000\")\n    \/\/ >>> ChangeBase((7L), (2L))\n    \/\/ (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Change numerical base of input number x to base.\n    \/\/ return string representation after the conversion.\n    \/\/ base numbers are less than 10.\n    public static string ChangeBase(long x, long numBase) {\n        if (numBase < 2 || numBase > 9) \n            throw new ArgumentException(\"Base must be between 2 and 9.\");\n\n        if (x < 0) \n            throw new ArgumentException(\"Number must be non-negative.\");\n\n        if (x == 0) \n            return \"0\";\n\n        string result = string.Empty;\n        while (x > 0) {\n            long remainder = x % numBase;\n            result = remainder + result;\n            x \/= numBase;\n        }\n        \n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n}\n"},{"task_id":"HumanEval_45","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/त्रिभुजस्य पार्श्वस्य दीर्घत्वं, उच्चतरं पुनरागमनक्षेत्रं च दत्त्वा।    \/\/ >>> TriangleArea((5L), (3L))\n    \/\/ (7.5f)\n    public static float TriangleArea(long a, long h) {\n","canonical_solution":"using System;\n\nclass Problem {\n    \/\/ Given length of a side and height, return area for a triangle.\n    \/\/ >>> TriangleArea((5L), (3L))\n    \/\/ (7.5f)\n    public static float TriangleArea(long a, long h) {\n        return (a * h) \/ 2.0f;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(TriangleArea(5L, 3L)); \/\/ Output: 7.5\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((5L), (3L)) == (7.5f));\n    Debug.Assert(TriangleArea((2L), (2L)) == (2.0f));\n    Debug.Assert(TriangleArea((10L), (8L)) == (40.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_46","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/कृपया एकं फलनं लिखत यत् fib4 क्रमेण n-तमः तत्वं कुशलतया गणनाय शक्नोति। पुनरावृत्तिः न प्रयुज्यते।    \/\/fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) ।    \/\/fib4(3) -> 0     \/\/fib4(2) -> 2     \/\/fib4(1) -> 0     \/\/fib4(0) -> 0     \/\/Fib4 क्रमेण Fibbonacci क्रमेण सह समानः क्रमः अस्ति, यस् य परिभाषा अधोलिखितमस्ति:    \/\/ >>> Fib4((5L))\n    \/\/ (4L)\n    \/\/ >>> Fib4((6L))\n    \/\/ (8L)\n    \/\/ >>> Fib4((7L))\n    \/\/ (14L)\n    public static long Fib4(long n) {\n","canonical_solution":"public static long Fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    long[] fib4Seq = new long[n + 1];\n    fib4Seq[0] = 0;\n    fib4Seq[1] = 0;\n    fib4Seq[2] = 2;\n    fib4Seq[3] = 0;\n\n    for (long i = 4; i <= n; i++) {\n        fib4Seq[i] = fib4Seq[i - 1] + fib4Seq[i - 2] + fib4Seq[i - 3] + fib4Seq[i - 4];\n    }\n\n    return fib4Seq[n];\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"},{"task_id":"HumanEval_47","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/सूचीषु विद्यमानानां तत्वानां मध्यमाङ्कः l।    \/\/ >>> Median((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n    \/\/ (float)3L\n    \/\/ >>> Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L})))\n    \/\/ (15.0f)\n    public static float Median(List<long> l) {\n","canonical_solution":"public static float Median(List<long> l) {\n        l.Sort();\n        int count = l.Count;\n        if (count % 2 == 1) {\n            return (float)l[count \/ 2];\n        } else {\n            long mid1 = l[(count \/ 2) - 1];\n            long mid2 = l[count \/ 2];\n            return (mid1 + mid2) \/ 2.0f;\n        }\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n    }\n\n}\n"},{"task_id":"HumanEval_48","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/यदि दीयते तर्हि सः पालिन्द्रोम् अस्ति वा न इति जाँचयति ।    \/\/ >>> IsPalindrome((\"\"))\n    \/\/ (true)\n    \/\/ >>> IsPalindrome((\"aba\"))\n    \/\/ (true)\n    \/\/ >>> IsPalindrome((\"aaaaa\"))\n    \/\/ (true)\n    \/\/ >>> IsPalindrome((\"zbcd\"))\n    \/\/ (false)\n    public static bool IsPalindrome(string text) {\n","canonical_solution":"public static bool IsPalindrome(string text) {\n    if (string.IsNullOrEmpty(text))\n        return true;\n\n    int left = 0;\n    int right = text.Length - 1;\n\n    while (left < right) {\n        if (text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n\n    return true;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_49","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/2^n माड्यूलो p इत्यस्य प्रतिफलम् ददाति (अङ्केषु ध्यानं कुर्यात्) ।    \/\/ >>> Modp((3L), (5L))\n    \/\/ (3L)\n    \/\/ >>> Modp((1101L), (101L))\n    \/\/ (2L)\n    \/\/ >>> Modp((0L), (101L))\n    \/\/ (1L)\n    \/\/ >>> Modp((3L), (11L))\n    \/\/ (8L)\n    \/\/ >>> Modp((100L), (101L))\n    \/\/ (1L)\n    public static long Modp(long n, long p) {\n","canonical_solution":"using System;\nusing System.Numerics;\n\nclass Problem {\n    public static long Modp(long n, long p) {\n        \/\/ Using the property of modular arithmetic: (a^b) % c = ((a % c)^b) % c\n        \/\/ We are calculating (2^n) % p\n        BigInteger baseNum = 2;\n        BigInteger result = BigInteger.ModPow(baseNum, n, p);\n        return (long)result;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(Modp(3L, 5L));   \/\/ (3L)\n        Console.WriteLine(Modp(1101L, 101L)); \/\/ (2L)\n        Console.WriteLine(Modp(0L, 101L));   \/\/ (1L)\n        Console.WriteLine(Modp(3L, 11L));   \/\/ (8L)\n        Console.WriteLine(Modp(100L, 101L));  \/\/ (1L)\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Modp((3L), (5L)) == (3L));\n    Debug.Assert(Modp((1101L), (101L)) == (2L));\n    Debug.Assert(Modp((0L), (101L)) == (1L));\n    Debug.Assert(Modp((3L), (11L)) == (8L));\n    Debug.Assert(Modp((100L), (101L)) == (1L));\n    Debug.Assert(Modp((30L), (5L)) == (4L));\n    Debug.Assert(Modp((31L), (5L)) == (3L));\n    }\n\n}\n"},{"task_id":"HumanEval_51","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/remove_vowels इति कार्यम् अस्ति यत् अकारं गृहीत्वा अकारं विना लभते ।    \/\/ >>> RemoveVowels((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> RemoveVowels((\"abcdef\"))\n    \/\/ (\"bcdf\")\n    \/\/ >>> RemoveVowels((\"aaaaa\"))\n    \/\/ (\"\")\n    \/\/ >>> RemoveVowels((\"aaBAA\"))\n    \/\/ (\"B\")\n    \/\/ >>> RemoveVowels((\"zbcd\"))\n    \/\/ (\"zbcd\")\n    public static string RemoveVowels(string text) {\n","canonical_solution":"HashSet<char> vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        StringBuilder result = new StringBuilder();\n\n        foreach (char c in text) {\n            if (!vowels.Contains(c)) {\n                result.Append(c);\n            }\n        }\n\n        return result.ToString();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveVowels((\"\")).Equals((\"\")));\n    Debug.Assert(RemoveVowels((\"abcdef\\nghijklm\")).Equals((\"bcdf\\nghjklm\")));\n    Debug.Assert(RemoveVowels((\"fedcba\")).Equals((\"fdcb\")));\n    Debug.Assert(RemoveVowels((\"eeeee\")).Equals((\"\")));\n    Debug.Assert(RemoveVowels((\"acBAA\")).Equals((\"cB\")));\n    Debug.Assert(RemoveVowels((\"EcBOO\")).Equals((\"cB\")));\n    Debug.Assert(RemoveVowels((\"ybcd\")).Equals((\"ybcd\")));\n    }\n\n}\n"},{"task_id":"HumanEval_52","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/यदि सूची l-अन्तर्गतं सर्वम् संख्याः सीमा t-अन्तर्गतं भवति तर्हि TRUE इत्यस्य प्रतिफलं ददाति ।    \/\/ >>> BelowThreshold((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L})), (100L))\n    \/\/ (true)\n    \/\/ >>> BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (5L))\n    \/\/ (false)\n    public static bool BelowThreshold(List<long> l, long t) {\n","canonical_solution":"return l.All(x => x < t);\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L})), (100L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (5L)) == (false));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (21L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (22L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)8L, (long)4L, (long)10L})), (11L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)8L, (long)4L, (long)10L})), (10L)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_53","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/द्वौ संख्याः x तथा y समासतः _    \/\/ >>> Add((2L), (3L))\n    \/\/ (5L)\n    \/\/ >>> Add((5L), (7L))\n    \/\/ (12L)\n    public static long Add(long x, long y) {\n","canonical_solution":"return x + y;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((0L), (1L)) == (1L));\n    Debug.Assert(Add((1L), (0L)) == (1L));\n    Debug.Assert(Add((2L), (3L)) == (5L));\n    Debug.Assert(Add((5L), (7L)) == (12L));\n    Debug.Assert(Add((7L), (5L)) == (12L));\n    }\n\n}\n"},{"task_id":"HumanEval_54","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/यदि द्वयोः शब्दयोः अक्षरयोः समरूपता अस्ति चेत् निरीक्षणीयम् ।    \/\/ >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    \/\/ (true)\n    \/\/ >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    \/\/ (true)\n    \/\/ >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    \/\/ (false)\n    \/\/ >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    \/\/ (false)\n    \/\/ >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    \/\/ (false)\n    public static bool SameChars(string s0, string s1) {\n","canonical_solution":"public static bool SameChars(string s0, string s1) {\n        \/\/ Return true if s1 contains all characters of s0\n        return s0.All(c => s1.Contains(c)) && s1.All(c => s0.Contains(c));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_55","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/n-अन्ताम् फिबोनाची-संख्याम् प्रतिपाद्यताम् ।    \/\/ >>> Fib((10L))\n    \/\/ (55L)\n    \/\/ >>> Fib((1L))\n    \/\/ (1L)\n    \/\/ >>> Fib((8L))\n    \/\/ (21L)\n    public static long Fib(long n) {\n","canonical_solution":"if (n <= 0) return 0;\n    if (n == 1) return 1;\n\n    long a = 0;\n    long b = 1;\n\n    for (long i = 2; i <= n; i++)\n    {\n        long temp = a + b;\n        a = b;\n        b = temp;\n    }\n\n    return b;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib((10L)) == (55L));\n    Debug.Assert(Fib((1L)) == (1L));\n    Debug.Assert(Fib((8L)) == (21L));\n    Debug.Assert(Fib((11L)) == (89L));\n    Debug.Assert(Fib((12L)) == (144L));\n    }\n\n}\n"},{"task_id":"HumanEval_56","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/यदि प्रत्येकं उद्घाटनं ब्रैकेटस्य समानाधिकरणं समापनं ब्रैकेटं भवति तर्हि TRUE इत्युत्तरं ददाति ।    \/\/brackets इत्यस्य \"<\" तथा \">\" इत्यस्य शृङ्गाः सन्ति ।    \/\/ >>> CorrectBracketing((\"<\"))\n    \/\/ (false)\n    \/\/ >>> CorrectBracketing((\"<>\"))\n    \/\/ (true)\n    \/\/ >>> CorrectBracketing((\"<<><>>\"))\n    \/\/ (true)\n    \/\/ >>> CorrectBracketing((\"><<>\"))\n    \/\/ (false)\n    public static bool CorrectBracketing(string brackets) {\n","canonical_solution":"public static bool CorrectBracketing(string brackets) \n{\n    int balance = 0;\n    foreach (char c in brackets) \n    {\n        if (c == '<') \n        {\n            balance++;\n        } \n        else if (c == '>') \n        {\n            balance--;\n        }\n        \n        if (balance < 0) \n        {\n            return false;\n        }\n    }\n\n    return balance == 0;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_57","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/यदि सूची-तत्त्वे एकवचनं वर्धते वा घटते तर्हि TRUE इत्युत्तरं ददाति ।    \/\/ >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    \/\/ (true)\n    \/\/ >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    \/\/ (false)\n    \/\/ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    \/\/ (true)\n    public static bool Monotonic(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Return true if list elements are monotonically increasing or decreasing.\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2) return true; \/\/ Lists with less than 2 elements are trivially monotonic.\n        \n        bool increasing = true;\n        bool decreasing = true;\n\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] > l[i - 1]) {\n                decreasing = false;\n            } else if (l[i] < l[i - 1]) {\n                increasing = false;\n            }\n\n            \/\/ If both flags are false, the list is not monotonic.\n            if (!increasing && !decreasing) return false;\n        }\n\n        return true;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_58","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/द्वयोः सूत्राणां कृते एकं विशिष्टं सामान्यं तत्वं प्रतिपादयति ।    \/\/ >>> Common((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L, (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L, (long)9L, (long)653L, (long)121L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)5L, (long)653L}))\n    \/\/ >>> Common((new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L}))\n    public static List<long> Common(List<long> l1, List<long> l2) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    public static List<long> Common(List<long> l1, List<long> l2)\n    {\n        \/\/ Use HashSet to store unique elements of l1\n        var set1 = new HashSet<long>(l1);\n\n        \/\/ Use HashSet to store unique elements of l2 and filter common elements\n        var commonSet = new HashSet<long>(l2.Where(x => set1.Contains(x)));\n\n        \/\/ Convert to a list, sort it and return\n        var result = commonSet.ToList();\n        result.Sort();\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Common((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L, (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L, (long)9L, (long)653L, (long)121L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"},{"task_id":"HumanEval_59","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/n इत्यस्य प्रधानं कारकम् प्रतिपाद्य, n > 1 इति गृहीत्वा, सः प्रधानं न भवति।    \/\/ >>> LargestPrimeFactor((13195L))\n    \/\/ (29L)\n    \/\/ >>> LargestPrimeFactor((2048L))\n    \/\/ (2L)\n    public static long LargestPrimeFactor(long n) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long LargestPrimeFactor(long n) {\n        long largestFactor = -1;\n        \n        \/\/ Remove the factor of 2\n        while (n % 2 == 0) {\n            largestFactor = 2;\n            n \/= 2;\n        }\n\n        \/\/ Check odd factors from 3 upwards\n        for (long i = 3; i <= Math.Sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestFactor = i;\n                n \/= i;\n            }\n        }\n\n        \/\/ If n becomes a prime number greater than 2\n        if (n > 2) {\n            largestFactor = n;\n        }\n\n        return largestFactor;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\n}\n"},{"task_id":"HumanEval_60","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/sum_to_n इत्यस्य फलनम् अस्ति यत् 1 तः n पर्यन्तं संख्यायाः योगं करोति ।    \/\/ >>> SumToN((30L))\n    \/\/ (465L)\n    \/\/ >>> SumToN((100L))\n    \/\/ (5050L)\n    \/\/ >>> SumToN((5L))\n    \/\/ (15L)\n    \/\/ >>> SumToN((10L))\n    \/\/ (55L)\n    \/\/ >>> SumToN((1L))\n    \/\/ (1L)\n    public static long SumToN(long n) {\n","canonical_solution":"return n * (n + 1) \/ 2;\n}\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumToN((1L)) == (1L));\n    Debug.Assert(SumToN((6L)) == (21L));\n    Debug.Assert(SumToN((11L)) == (66L));\n    Debug.Assert(SumToN((30L)) == (465L));\n    Debug.Assert(SumToN((100L)) == (5050L));\n    }\n\n}\n"},{"task_id":"HumanEval_61","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/यदि प्रत्येकं उद्घाटनं ब्रैकेटस्य समानाधिकरणं समापनं ब्रैकेटं भवति तर्हि TRUE इत्युत्तरं ददाति ।    \/\/\"{\"अन्तर्भावेन \"} इत्यस्य अङ्गस्य \"{\" इत्यस्य च\" इत्यस्य अङ्गस्य च\" इत्यस्य अङ्गस्य च।    \/\/ >>> CorrectBracketing((\"(\"))\n    \/\/ (false)\n    \/\/ >>> CorrectBracketing((\"()\"))\n    \/\/ (true)\n    \/\/ >>> CorrectBracketing((\"(()())\"))\n    \/\/ (true)\n    \/\/ >>> CorrectBracketing((\")(()\"))\n    \/\/ (false)\n    public static bool CorrectBracketing(string brackets) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n        int balance = 0;\n        foreach (char c in brackets) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n        return balance == 0;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_62","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः पुनः    \/\/xs[0] + xs[1] * x + xs[2] * x^2 + ....     \/\/xs इत्यनेन बहुपदस्य गुणाङ्कः भवति।    \/\/ >>> Derivative((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)4L, (long)12L, (long)20L}))\n    \/\/ >>> Derivative((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)6L}))\n    public static List<long> Derivative(List<long> xs) {\n","canonical_solution":"public static List<long> Derivative(List<long> xs) {\n        List<long> derivative = new List<long>();\n        for (int i = 1; i < xs.Count; i++) {\n            derivative.Add(xs[i] * i);\n        }\n        return derivative;\n    }\n\n    static void Main(string[] args) {\n        List<long> poly1 = new List<long>{3L, 1L, 2L, 4L, 5L};\n        List<long> result1 = Derivative(poly1);\n        Console.WriteLine(string.Join(\", \", result1));\n\n        List<long> poly2 = new List<long>{1L, 2L, 3L};\n        List<long> result2 = Derivative(poly2);\n        Console.WriteLine(string.Join(\", \", result2));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)12L, (long)20L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)6L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L, (long)2L, (long)1L, (long)0L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)0L, (long)16L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"},{"task_id":"HumanEval_63","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/कृपया एकं फलनं लिखत यत् फ्लिप्-फ्लप्-फ्लप्-संख्यकक्रमेण n-अंशं गणनाय समर्थं भवेत् ।    \/\/fibfib{\\ n (n) } == fibfib{\\ n (n-1) + fibfib{\\ n (n-2) + fibfib{\\ n (n-3) }) ==    \/\/fib fib ((२) == १     \/\/fib fib{}1) == 0     \/\/fib fib{}0) == 0     \/\/FibFib संख्याक्रमः Fibbonacci अनुक्रमस्य समानः अनुक्रमः अस्ति यत् अधोलिखितप्रकारेण परिभाषितः अस्ति:    \/\/ >>> Fibfib((1L))\n    \/\/ (0L)\n    \/\/ >>> Fibfib((5L))\n    \/\/ (4L)\n    \/\/ >>> Fibfib((8L))\n    \/\/ (24L)\n    public static long Fibfib(long n) {\n","canonical_solution":"public static long Fibfib(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n\n    long a = 0, b = 0, c = 1;\n    long result = 0;\n\n    for (long i = 3; i <= n; i++) {\n        result = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n\n    return result;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"},{"task_id":"HumanEval_64","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/स्वरः, किन्तु केवलं यदा सः विहितशब्देन अन्ते भवति।    \/\/अत्र 'अ', 'इ', 'इ', 'ओ', 'उ' इत्यनेन स्वरैः 'य' इत्यपि भवति।    \/\/शब्दः प्रविष्टः अस्ति, सः शब्दस्य अन्तर्गतस्य स्वरस्य सङ्ख्यां प्रति लभते।    \/\/एकं फलनम् लिखत, यः स्वरगणनम् करोति, यः  इत्यस्य प्रतिनिधित्वं करोति।    \/\/ >>> VowelsCount((\"abcde\"))\n    \/\/ (2L)\n    \/\/ >>> VowelsCount((\"ACEDY\"))\n    \/\/ (3L)\n    public static long VowelsCount(string s) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long VowelsCount(string s) {\n        if (s == null) return 0;\n\n        s = s.ToLower();\n        long count = 0;\n        \n        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n            if (\"aeiou\".Contains(c) || (c == 'y' && i == s.Length - 1)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(VowelsCount(\"abcde\"));  \/\/ Output: 2\n        Console.WriteLine(VowelsCount(\"ACEDY\"));  \/\/ Output: 3\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(VowelsCount((\"abcde\")) == (2L));\n    Debug.Assert(VowelsCount((\"Alone\")) == (3L));\n    Debug.Assert(VowelsCount((\"key\")) == (2L));\n    Debug.Assert(VowelsCount((\"bye\")) == (1L));\n    Debug.Assert(VowelsCount((\"keY\")) == (2L));\n    Debug.Assert(VowelsCount((\"bYe\")) == (1L));\n    Debug.Assert(VowelsCount((\"ACEDY\")) == (3L));\n    }\n\n}\n"},{"task_id":"HumanEval_65","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/यदि shift > संख्याः, तदा संख्याः प्रतिवर्त्यताम् ।    \/\/एवं च परिणामं शृङ्गाररूपेण प्रतिपादयति ।    \/\/वृत्तिकः स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने स्थाने    \/\/ >>> CircularShift((12L), (1L))\n    \/\/ (\"21\")\n    \/\/ >>> CircularShift((12L), (2L))\n    \/\/ (\"12\")\n    public static string CircularShift(long x, long shift) {\n","canonical_solution":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Circular shift the digits of the integer x, shift the digits right by shift\n    \/\/ and return the result as a string.\n    \/\/ If shift > number of digits, return digits reversed.\n    \n    public static string CircularShift(long x, long shift) {\n        string digits = x.ToString();\n        int length = digits.Length;\n        \n        if (shift > length) {\n            char[] reversedDigits = digits.ToCharArray();\n            Array.Reverse(reversedDigits);\n            return new string(reversedDigits);\n        }\n\n        shift = shift % length;  \/\/ Normalize shift\n        string shiftedPart = digits.Substring(length - (int)shift);\n        string remainingPart = digits.Substring(0, length - (int)shift);\n        return shiftedPart + remainingPart;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"},{"task_id":"HumanEval_66","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/ASCII कोडः     \/\/'इति सूत्रं लिखत, यस्मिन् इङ्पुटः क्तः भवति, तथा च केवलम् उपरि वर्णानां योगः लभते' इति सूत्रं लिखत।    \/\/कार्यम्     \/\/ >>> Digitsum((\"\"))\n    \/\/ (0L)\n    \/\/ >>> Digitsum((\"abAB\"))\n    \/\/ (131L)\n    \/\/ >>> Digitsum((\"abcCd\"))\n    \/\/ (67L)\n    \/\/ >>> Digitsum((\"helloE\"))\n    \/\/ (69L)\n    \/\/ >>> Digitsum((\"woArBld\"))\n    \/\/ (131L)\n    \/\/ >>> Digitsum((\"aAaaaXa\"))\n    \/\/ (153L)\n    public static long Digitsum(string s) {\n","canonical_solution":"public static long Digitsum(string s) {\n    long sum = 0;\n    foreach (char c in s) {\n        if (char.IsUpper(c)) {\n            sum += c; \/\/ Add ASCII value of the upper case letters.\n        }\n    }\n    return sum;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digitsum((\"\")) == (0L));\n    Debug.Assert(Digitsum((\"abAB\")) == (131L));\n    Debug.Assert(Digitsum((\"abcCd\")) == (67L));\n    Debug.Assert(Digitsum((\"helloE\")) == (69L));\n    Debug.Assert(Digitsum((\"woArBld\")) == (131L));\n    Debug.Assert(Digitsum((\"aAaaaXa\")) == (153L));\n    Debug.Assert(Digitsum((\" How are yOu?\")) == (151L));\n    Debug.Assert(Digitsum((\"You arE Very Smart\")) == (327L));\n    }\n\n}\n"},{"task_id":"HumanEval_67","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/प्रतिपाद्यार्थः     \/\/अङ्गुलफलानां संख्यां प्रतिपादयतु।    \/\/अनारङ्गेषु, सेफसु च, एकं पूर्णांकं, यानि फलानां संख्याः दर्शयन्ति।    \/\/णकारस्य णकारस्य णकारस्य च णकारस्य च णकारस्य च णकारस्य च णकारस्य च णकारस्य च णकारस्य च णकारस्य च णकारस्य च    \/\/फलानां कोशेषु वितरन्ति ये फलानि कोशेषु सन्ति।    \/\/अस्मिन् कार्ये, भवता एकं शृङ्खलं दत्ता भवति यत् अनेन संख्याभिः सेबैः, नारिकेलैः च प्रतिपादितं भवति ।    \/\/ >>> FruitDistribution((\"5 apples and 6 oranges\"), (19L))\n    \/\/ (8L)\n    \/\/ >>> FruitDistribution((\"0 apples and 1 oranges\"), (3L))\n    \/\/ (2L)\n    \/\/ >>> FruitDistribution((\"2 apples and 3 oranges\"), (100L))\n    \/\/ (95L)\n    \/\/ >>> FruitDistribution((\"100 apples and 1 oranges\"), (120L))\n    \/\/ (19L)\n    public static long FruitDistribution(string s, long n) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long FruitDistribution(string s, long n) {\n        var parts = s.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        long apples = long.Parse(parts[0]);\n        long oranges = long.Parse(parts[3]);\n\n        long totalApplesAndOranges = apples + oranges;\n        long mangoes = n - totalApplesAndOranges;\n        \n        return mangoes;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FruitDistribution((\"5 apples and 6 oranges\"), (19L)) == (8L));\n    Debug.Assert(FruitDistribution((\"5 apples and 6 oranges\"), (21L)) == (10L));\n    Debug.Assert(FruitDistribution((\"0 apples and 1 oranges\"), (3L)) == (2L));\n    Debug.Assert(FruitDistribution((\"1 apples and 0 oranges\"), (3L)) == (2L));\n    Debug.Assert(FruitDistribution((\"2 apples and 3 oranges\"), (100L)) == (95L));\n    Debug.Assert(FruitDistribution((\"2 apples and 3 oranges\"), (5L)) == (0L));\n    Debug.Assert(FruitDistribution((\"1 apples and 100 oranges\"), (120L)) == (19L));\n    }\n\n}\n"},{"task_id":"HumanEval_68","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् १:     \/\/यदि न च समं मूल्यम् अस्ति, अथवा सूची रिक्तः अस्ति, तर्हि पुनः [] प्रत्ययः प्राप्नोति ।    \/\/नपुंसकलिङ्गेन सूत्रेण इदम् प्रतिपादितम् अस्ति, [smallest_value, its index],     \/\/यदि बहुषु नोडस् मध्ये लघुतमः सममूल्यम् अस्ति, तर्हि लघुतमः सूचकः अस्ति इति नोडस् प्रति लभेत।    \/\/नपुंसकलिङ्गेन नपुंसकलिङ्गेन लघुतमः सममूल्यस्य नपुंसकलिङ्गेन प्राप्तः भवेत् ।    \/\/भवतां कार्यम् अस्ति यत् एकं नोडं विच्छेदयित्वा पुनः पुनर्स्थापयितव्।    \/\/\"अत्र सूची अस्ति, यस्मिन् वृक्षस्य शाखाः सन्ति, येषु न-ऋणात्मकः पूर्णाङ्कः अस्ति ।    \/\/ >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)1L}))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 2:\n    \/\/ >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)1L}))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 3:\n    \/\/ >>> Pluck((new List<long>()))\n    \/\/ (new List<long>())\n    \/\/ Example 4:\n    \/\/ >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    \/\/ (new List<long>(new long[]{(long)0L, (long)1L}))\n    \/\/ Explanation: 0 is the smallest value, but  there are two zeros,\n    \/\/ so we will choose the first zero, which has the smallest index.\n    \/\/ Constraints:\n    \/\/ * 1 <= nodes.length <= 10000\n    \/\/ * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<long> Pluck(List<long> arr)\n    {\n        long smallestEven = long.MaxValue;\n        int indexOfSmallest = -1;\n\n        for (int i = 0; i < arr.Count; i++)\n        {\n            if (arr[i] % 2 == 0 && arr[i] < smallestEven)\n            {\n                smallestEven = arr[i];\n                indexOfSmallest = i;\n            }\n        }\n\n        if (indexOfSmallest == -1)\n        {\n            return new List<long>();\n        }\n        else\n        {\n            return new List<long> { smallestEven, indexOfSmallest };\n        }\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"},{"task_id":"HumanEval_69","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/यदि एतादृशम् मूल्यम् न अस्ति तर्हि -१ इत्यस्य प्रतिफलम् ददाति ।    \/\/एकस्य पूर्णाङ्कः सूचीषु कतिधा दृश्यते, तत् एव तस्य आवृत्तिः भवति ।    \/\/शून्यः, एवं च तस्य आवृत्तिः पूर्णाङ्के स्वस्य मूल्यस्य वा अधिकः वा समः अस्ति ।    \/\/भवद्भ् यः धनात्मकपूर्णाङ्काणां सूची दीयते, अतः -तः अधिकं पूर्णसंख्यां लभेत    \/\/ >>> Search((new List<long>(new long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    \/\/ (2L)\n    \/\/ >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    \/\/ (3L)\n    \/\/ >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    \/\/ (-1L)\n    public static long Search(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    public static long Search(List<long> lst)\n    {\n        \/\/ Create a dictionary to store the frequency of each number\n        Dictionary<long, long> frequency = new Dictionary<long, long>();\n\n        \/\/ Count the frequency of each number in the list\n        foreach (long num in lst)\n        {\n            if (frequency.ContainsKey(num))\n            {\n                frequency[num]++;\n            }\n            else\n            {\n                frequency[num] = 1;\n            }\n        }\n\n        \/\/ Variable to store the greatest integer found\n        long result = -1;\n\n        \/\/ Go through each item in the frequency dictionary\n        foreach (var kvp in frequency)\n        {\n            long number = kvp.Key;\n            long freq = kvp.Value;\n\n            \/\/ Check if the number's frequency is greater than or equal to the number itself\n            if (freq >= number && number > 0)\n            {\n                \/\/ Update the result if this number is greater than the current result\n                result = Math.Max(result, number);\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L, (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L, (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L, (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L, (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L, (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L, (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L, (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L, (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L, (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L, (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"},{"task_id":"HumanEval_70","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/ततः शेषपूर्णां संख्यानां अधिकतमं, ततः न्यूनं इत्यादीनि।    \/\/विचित्रः क्रमणीकरणः, यदा भवन्तः न्यूनतमं मूल्यम् आरभन्ते,     \/\/पूर्णाङ्काणां सूची प्राप्ते, सूची विचित्र क्रमेण लभ्यते।    \/\/ >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n    \/\/ >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L})))\n    \/\/ (new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))\n    \/\/ >>> StrangeSortList((new List<long>()))\n    \/\/ (new List<long>())\n    public static List<long> StrangeSortList(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static List<long> StrangeSortList(List<long> lst) {\n        List<long> result = new List<long>();\n        lst.Sort();\n        int start = 0;\n        int end = lst.Count - 1;\n        \n        while (start <= end) {\n            if (start <= end) {\n                result.Add(lst[start]);\n                start++;\n            }\n            if (start <= end) {\n                result.Add(lst[end]);\n                end--;\n            }\n        }\n        \n        return result;\n    }\n    \n    static void Main(string[] args) {\n        var example1 = StrangeSortList(new List<long> { 1L, 2L, 3L, 4L });\n        var example2 = StrangeSortList(new List<long> { 5L, 5L, 5L, 5L });\n        var example3 = StrangeSortList(new List<long>());\n\n        Console.WriteLine(string.Join(\", \", example1)); \/\/ Output: 1, 4, 2, 3\n        Console.WriteLine(string.Join(\", \", example2)); \/\/ Output: 5, 5, 5, 5\n        Console.WriteLine(string.Join(\", \", example3)); \/\/ Output: (empty line)\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_71","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/तृतीयपक्षस्य तु।    \/\/त्रयो पक्षः त्रिकोणाः भवन्ति यदा द्वयोः पक्षयोः योगः अधिकः भवति।    \/\/अन्यथा परतः -1     \/\/यदि त्रिषु पक्षेषु त्रिभुजः भवति, तर्हि त्रिकोणस्य द्विदशम्याम् अङ्कं कृत्वा परिमण्डलं कुर्यात् ।    \/\/त्रिकोणस्य त्रिषु पक्षेषु दीर्घत्वं दत्त्वा,  इत्यस्य क्षेत्रफलं प्रतिपाद्यताम्    \/\/ >>> TriangleArea((3L), (4L), (5L))\n    \/\/ (6.0f)\n    \/\/ >>> TriangleArea((1L), (2L), (10L))\n    \/\/ (float)-1L\n    public static float TriangleArea(long a, long b, long c) {\n","canonical_solution":"public static float TriangleArea(long a, long b, long c) {\n    \/\/ Check if the sides form a valid triangle using the triangle inequality theorem\n    if (a + b > c && a + c > b && b + c > a) {\n        \/\/ Use Heron's formula to calculate the area of the triangle\n        double s = (a + b + c) \/ 2.0;\n        double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float)Math.Round(area, 2);\n    }\n    return -1;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n    }\n\n}\n"},{"task_id":"HumanEval_72","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/वस्तु q उड्डाणम् करोति यदि सः संतुलितः अस्ति (अयं एकं पालिन्द्रोमिक-सूची) एवं तस्य तत्वानां योगः अधिकतमसम्भाव्य भारात् (w) न्यूनः अथवा समः अस्ति ।    \/\/यदि वस्तु q उड्डाणम् करोति तर्हि सत्यं, अन्यथा मिथ्याम् इति फलनम् लिखत।    \/\/ >>> WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\n    \/\/ (false)\n    \/\/ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    \/\/ >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    \/\/ (false)\n    \/\/ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    \/\/ >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    \/\/ (true)\n    \/\/ # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    \/\/ >>> WillItFly((new List<long>(new long[]{(long)3L})), (5L))\n    \/\/ (true)\n    \/\/ # 3 is less than the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static bool WillItFly(List<long> q, long w)\n    {\n        if (IsPalindromic(q) && SumIsLessThanOrEqual(q, w))\n        {\n            return true;\n        }\n        return false;\n    }\n\n    private static bool IsPalindromic(List<long> q)\n    {\n        int count = q.Count;\n        for (int i = 0; i < count \/ 2; i++)\n        {\n            if (q[i] != q[count - i - 1])\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static bool SumIsLessThanOrEqual(List<long> q, long w)\n    {\n        long sum = 0;\n        foreach (var item in q)\n        {\n            sum += item;\n            if (sum > w)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_73","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/एकस्मिन् परिवर्तनकाले, भवन्तः एकं तत्वं अन्यं तत्वं प्रति परिवर्तयितुं शक्नुवन्ति ।    \/\/सूचीं पालिन्द्रोमिकायां कर्तुं परिवर्तनं करणीयम् ।    \/\/पूर्णाङ्काणां सूची आरः दत्त्वा,  इत्यनेन न्यूनतमानां संख्यां ज्ञातव्यम्    \/\/ >>> SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)4L, (long)7L, (long)9L, (long)6L})))\n    \/\/ (4L)\n    \/\/ >>> SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)3L, (long)2L, (long)2L})))\n    \/\/ (1L)\n    \/\/ >>> SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)1L})))\n    \/\/ (0L)\n    public static long SmallestChange(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static long SmallestChange(List<long> arr)\n    {\n        long changes = 0;\n        int left = 0;\n        int right = arr.Count - 1;\n\n        while (left < right)\n        {\n            if (arr[left] != arr[right])\n            {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n\n    static void Main()\n    {\n        \/\/ Example usage:\n        List<long> list1 = new List<long> { 1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L };\n        Console.WriteLine(SmallestChange(list1)); \/\/ Output: 4\n\n        List<long> list2 = new List<long> { 1L, 2L, 3L, 4L, 3L, 2L, 2L };\n        Console.WriteLine(SmallestChange(list2)); \/\/ Output: 1\n\n        List<long> list3 = new List<long> { 1L, 2L, 3L, 2L, 1L };\n        Console.WriteLine(SmallestChange(list3)); \/\/ Output: 0\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)4L, (long)7L, (long)9L, (long)6L}))) == (4L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)3L, (long)2L, (long)2L}))) == (1L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L}))) == (1L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)4L, (long)4L, (long)2L}))) == (1L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)1L}))) == (0L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)3L, (long)1L, (long)1L, (long)3L}))) == (0L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    }\n\n}\n"},{"task_id":"HumanEval_74","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्     \/\/यदि द्वयोः सूत्राणां संख्या समानं भवति, तर्हि प्रथमं सूचिः प्रतिपादितः भवति ।    \/\/सूचीषु सर्वेषु वर्णसूत्रेषु वर्णानां संख्या अन्यसूत्रेषु संख्यायां न्यूनम् अस्ति ।    \/\/क्त्वाः द्वयोः सूचीषु क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः क्त्वाः    \/\/ >>> TotalMatch((new List<string>()), (new List<string>()))\n    \/\/ (new List<string>())\n    \/\/ >>> TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"})))\n    \/\/ (new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"}))\n    \/\/ >>> TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"hi\", (string)\"admin\", (string)\"project\"})))\n    \/\/ (new List<string>(new string[]{(string)\"hi\", (string)\"admin\"}))\n    \/\/ >>> TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"})))\n    \/\/ (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"}))\n    \/\/ >>> TotalMatch((new List<string>(new string[]{(string)\"4\"})), (new List<string>(new string[]{(string)\"1\", (string)\"2\", (string)\"3\", (string)\"4\", (string)\"5\"})))\n    \/\/ (new List<string>(new string[]{(string)\"4\"}))\n    public static List<string> TotalMatch(List<string> lst1, List<string> lst2) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    public static List<string> TotalMatch(List<string> lst1, List<string> lst2)\n    {\n        int totalCharsLst1 = lst1.Sum(s => s.Length);\n        int totalCharsLst2 = lst2.Sum(s => s.Length);\n\n        if (totalCharsLst1 <= totalCharsLst2)\n        {\n            return lst1;\n        }\n        else\n        {\n            return lst2;\n        }\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TotalMatch((new List<string>()), (new List<string>())).Equals((new List<string>())));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"hi\"}))).Equals((new List<string>(new string[]{(string)\"hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"hi\", (string)\"admin\", (string)\"project\"}))).Equals((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"4\"})), (new List<string>(new string[]{(string)\"1\", (string)\"2\", (string)\"3\", (string)\"4\", (string)\"5\"}))).Equals((new List<string>(new string[]{(string)\"4\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"}))).Equals((new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"}))).Equals((new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hii\"}))).Equals((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>()), (new List<string>(new string[]{(string)\"this\"}))).Equals((new List<string>())));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"this\"})), (new List<string>())).Equals((new List<string>())));\n    }\n\n}\n"},{"task_id":"HumanEval_75","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/(a) 100 इत्यतः न्यूनं भवति इति ज्ञात्वा।    \/\/अन्यथा मिथ्या।    \/\/यदि दीयते तदा ३ अभाज्यसंख्यायाः गुणनम् भवति इति फलनम् लिखत ।    \/\/ >>> IsMultiplyPrime((30L))\n    \/\/ (true)\n    \/\/ 30 = 2 * 3 * 5\n    public static bool IsMultiplyPrime(long a) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static bool IsMultiplyPrime(long a) {\n        if (a >= 100) return false;\n        \n        List<long> primes = GeneratePrimes(100);\n        \n        int count = 0;\n        foreach (long prime in primes) {\n            while (a % prime == 0) {\n                a \/= prime;\n                count++;\n            }\n            if (count > 3) break;\n        }\n        \n        return a == 1 && count == 3;\n    }\n\n    private static List<long> GeneratePrimes(int max) {\n        List<long> primes = new List<long>();\n        bool[] isPrime = new bool[max + 1];\n        for (int i = 2; i <= max; i++) isPrime[i] = true;\n\n        for (int i = 2; i * i <= max; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= max; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        for (int i = 2; i <= max; i++) {\n            if (isPrime[i]) primes.Add(i);\n        }\n\n        return primes;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMultiplyPrime((5L)) == (false));\n    Debug.Assert(IsMultiplyPrime((30L)) == (true));\n    Debug.Assert(IsMultiplyPrime((8L)) == (true));\n    Debug.Assert(IsMultiplyPrime((10L)) == (false));\n    Debug.Assert(IsMultiplyPrime((125L)) == (true));\n    Debug.Assert(IsMultiplyPrime((105L)) == (true));\n    Debug.Assert(IsMultiplyPrime((126L)) == (false));\n    Debug.Assert(IsMultiplyPrime((729L)) == (false));\n    Debug.Assert(IsMultiplyPrime((891L)) == (false));\n    Debug.Assert(IsMultiplyPrime((1001L)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_76","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/यदि n**int=x  भवति तर्हि x इत्यस्य n इत्यस्य सरलः गुणः भवति।    \/\/n-शक्त्या च अन्यत्र मिथ्या ।    \/\/भवतां कार्यम् अस्ति यत्, यदि संख्याः x अस्ति, तदा सः फलनम् लिखतु, यत् सत्यं प्रतिपादयतु।    \/\/ >>> IsSimplePower((1L), (4L))\n    \/\/ (true)\n    \/\/ >>> IsSimplePower((2L), (2L))\n    \/\/ (true)\n    \/\/ >>> IsSimplePower((8L), (2L))\n    \/\/ (true)\n    \/\/ >>> IsSimplePower((3L), (2L))\n    \/\/ (false)\n    \/\/ >>> IsSimplePower((3L), (1L))\n    \/\/ (false)\n    \/\/ >>> IsSimplePower((5L), (3L))\n    \/\/ (false)\n    public static bool IsSimplePower(long x, long n) {\n","canonical_solution":"if (x < 1 || n < 2)\n        return false;\n\n    while (x > 1)\n    {\n        if (x % n != 0)\n            return false;\n        x \/= n;\n    }\n\n    return true;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_77","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/नोटः भवता अनुमानः क्रियते यत् आगतं सर्वदा वैधं भवति ।    \/\/यदि इङ्गेर् इङ्गेर् इति कस्यचित् पूर्णाङ्कः अस्ति, तर्हि इङ्गेर् इति कस्यचित् पूर्णाङ्कः अस्ति ।    \/\/एकं फलनम् लिखत, यस्मिन् पूर्णाङ्कः a भवति, अतः इदम् फलं भवति true.    \/\/ >>> Iscube((1L))\n    \/\/ (true)\n    \/\/ >>> Iscube((2L))\n    \/\/ (false)\n    \/\/ >>> Iscube((-1L))\n    \/\/ (true)\n    \/\/ >>> Iscube((64L))\n    \/\/ (true)\n    \/\/ >>> Iscube((0L))\n    \/\/ (true)\n    \/\/ >>> Iscube((180L))\n    \/\/ (false)\n    public static bool Iscube(long a) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static bool Iscube(long a) {\n        if (a == 0) return true;\n        long absA = Math.Abs(a);\n        long cubeRoot = (long)Math.Round(Math.Pow(absA, 1.0 \/ 3.0));\n        return cubeRoot * cubeRoot * cubeRoot == absA;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(Iscube(1L));    \/\/ true\n        Console.WriteLine(Iscube(2L));    \/\/ false\n        Console.WriteLine(Iscube(-1L));   \/\/ true\n        Console.WriteLine(Iscube(64L));   \/\/ true\n        Console.WriteLine(Iscube(0L));    \/\/ true\n        Console.WriteLine(Iscube(180L));  \/\/ false\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_78","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/एवं च A, B, C, D, E, F इति सङ्केताः सदैव अपरकेसिकाः भवन्ति ।    \/\/नोटः भवता अनुमानः कर्तुं शक्यते यत् आगतं सर्वदा उचितं वा रिक्तं भवति,     \/\/B (= दशमलव 11), D (= दशमलव 13) ।    \/\/अतः भवन्तः अधोलिखितानां संख्यायाः संख्यां निर्धारयितुम् आवश् यकाः सन् ति: 2, 3, 5, 7,     \/\/अभाज्यसंख्याः सन्ति २, ३, ५, ७, ११, १३, १७,...    \/\/षोडशसंख्यायाः अङ्काः सन्ति - ०,१,२,३,४,५,६,७,८,९, ए,बी,सी,डी,ई,एफ।    \/\/१-अधिकं यत् द्वयोः लघुतमयोः प्राकृतसंख्यानां गुणनफलं न भवति) ।    \/\/अभाज्यसंख्याः (अभाज्यसंख्याः, वा अभाज्यसंख्याः, एकं प्राकृतसंख्या अस्ति ।    \/\/षोडशसंख्यायाः सङ्ख्यां यथा शृङ्गारं कृत्वा षोडशसंख्यायाः सङ्ख्यां गणयति ।    \/\/भवद्भिः एकं फलनम् लिखितम् अस्ति यत् प्राप्तं करोति ।    \/\/ >>> HexKey((\"AB\"))\n    \/\/ (1L)\n    \/\/ >>> HexKey((\"1077E\"))\n    \/\/ (2L)\n    \/\/ >>> HexKey((\"ABED1A33\"))\n    \/\/ (4L)\n    \/\/ >>> HexKey((\"123456789ABCDEF0\"))\n    \/\/ (6L)\n    \/\/ >>> HexKey((\"2020\"))\n    \/\/ (2L)\n    public static long HexKey(string num) {\n","canonical_solution":"public static long HexKey(string num) {\n    \/\/ Define a set of prime hexadecimal digits\n    HashSet<char> primeHexDigits = new HashSet<char> { '2', '3', '5', '7', 'B', 'D' };\n\n    long primeCount = 0;\n\n    \/\/ Iterate through each character in the input string\n    foreach (char c in num) {\n        \/\/ If the character is in the set of prime hex digits, increase the count\n        if (primeHexDigits.Contains(c)) {\n            primeCount++;\n        }\n    }\n\n    return primeCount;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n    }\n\n}\n"},{"task_id":"HumanEval_79","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/अत्र अतिरिक्तवर्णः स्वरूपस्य सहाय्यं कर्तुम् अस्ति ।    \/\/अत्र क्त-प्रत्ययस्य आरम्भ-अन्ते क्त-प्रत्यययोः अतिरिक्तं क्त-प्रत्यययोः 'db' वर्णयोः प्रयोगः भवति ।    \/\/संख्याः। प्रत्येकं अक्षरं '0' अथवा '1' भवति।    \/\/द्विवचनरूपेण लिखत। कार्यस्य एकं स्ट्रिंगं प्रतिपादयितुम् अपेक्षते, यस्मिन् प्रत्येकं वर्णः द्विवचनरूपेण लिखत।    \/\/भवता दशमलवरूपेण संख्या दीयते, भवतां कार्यम् अस्ति यत् एतस्य रूपांतरं करणीयम्।    \/\/ >>> DecimalToBinary((15L))\n    \/\/ (\"db1111db\")\n    \/\/ >>> DecimalToBinary((32L))\n    \/\/ (\"db100000db\")\n    public static string DecimalToBinary(long decimalNum) {\n","canonical_solution":"public static string DecimalToBinary(long decimalNum) {\n    string binary = Convert.ToString(decimalNum, 2);\n    return \"db\" + binary + \"db\";\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"},{"task_id":"HumanEval_80","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/यदि तस्य दीर्घत्वं कतमः 3 भवति, तथा च प्रत्येकं 3 अनुक्रमिकं अक्षरं विशिष्यते, तर्हि सः अक्षरः hapcs इति ज्ञायते ।    \/\/भवतां कार्यम् अस्ति यत्, यदि स्ट्रन्गः hapcs अस्ति अथवा न अस्ति, तर्हि सः जाँचयतु।    \/\/भवद्भिरपि क्तप्रत्ययस्य लकारः प्राप्नोति ।    \/\/ >>> IsHappy((\"a\"))\n    \/\/ (false)\n    \/\/ >>> IsHappy((\"aa\"))\n    \/\/ (false)\n    \/\/ >>> IsHappy((\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> IsHappy((\"aabb\"))\n    \/\/ (false)\n    \/\/ >>> IsHappy((\"adb\"))\n    \/\/ (true)\n    \/\/ >>> IsHappy((\"xyy\"))\n    \/\/ (false)\n    public static bool IsHappy(string s) {\n","canonical_solution":"if (s.Length < 3) {\n        return false;\n    }\n\n    for (int i = 0; i <= s.Length - 3; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    return true;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_81","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/०.० ई     \/\/> 0.0 D-     \/\/> 0.7 D     \/\/> १.० D+     \/\/> १.३ C-     \/\/> 1.7 C     \/\/> 2.0 C+     \/\/> २.३ B-     \/\/> २.७ B     \/\/> ३.० B+     \/\/> ३.३ A-     \/\/> ३.७ अ     \/\/४.० अ+     \/\/GPA। अक्षर-गुणः।    \/\/एकं फलनम्, यः अधोलिखितम् सारणीं उपयुज्य अक्षरश्रेणीनां सूचीं निर्गमयति:     \/\/सा भवतः कियत् छात्राणां गुणसूचीं ददाति, भवता लिखितुं अपेक्षते।    \/\/केवलं समस्या अस्ति यत्, सा स्खलनार्थं प्रयुक्तं कोडं गमयति।    \/\/शिक्षकः स्वस्य गुणनिर्धारणस्य एल्गोरिदमं निर्मातवान् ।    \/\/अयं सेमेस्टरस्य अन्तिमः सप्ताहः अस्ति, अध्यापकः ग्रेडं ददाति।    \/\/ >>> GradeEquation((new List<float>(new float[]{(float)4.0f, (float)3L, (float)1.7f, (float)2L, (float)3.5f})))\n    \/\/ (new List<string>(new string[]{(string)\"A+\", (string)\"B\", (string)\"C-\", (string)\"C\", (string)\"A-\"}))\n    public static List<string> NumericalLetterGrade(List<float> grades) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<string> NumericalLetterGrade(List<float> grades)\n    {\n        List<string> letterGrades = new List<string>();\n\n        foreach (var gpa in grades)\n        {\n            if (gpa == 4.0f)\n                letterGrades.Add(\"A+\");\n            else if (gpa > 3.7f)\n                letterGrades.Add(\"A\");\n            else if (gpa > 3.3f)\n                letterGrades.Add(\"A-\");\n            else if (gpa > 3.0f)\n                letterGrades.Add(\"B+\");\n            else if (gpa > 2.7f)\n                letterGrades.Add(\"B\");\n            else if (gpa > 2.3f)\n                letterGrades.Add(\"B-\");\n            else if (gpa > 2.0f)\n                letterGrades.Add(\"C+\");\n            else if (gpa > 1.7f)\n                letterGrades.Add(\"C\");\n            else if (gpa > 1.3f)\n                letterGrades.Add(\"C-\");\n            else if (gpa > 1.0f)\n                letterGrades.Add(\"D+\");\n            else if (gpa > 0.7f)\n                letterGrades.Add(\"D\");\n            else if (gpa > 0.0f)\n                letterGrades.Add(\"D-\");\n            else\n                letterGrades.Add(\"E\");\n        }\n\n        return letterGrades;\n    }\n\n    static void Main(string[] args)\n    {\n        List<float> gpas = new List<float> { 4.0f, 3.0f, 1.7f, 2.0f, 3.5f };\n        List<string> grades = NumericalLetterGrade(gpas);\n        Console.WriteLine(string.Join(\", \", grades));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)4.0f, (float)3L, (float)1.7f, (float)2L, (float)3.5f}))).Equals((new List<string>(new string[]{(string)\"A+\", (string)\"B\", (string)\"C-\", (string)\"C\", (string)\"A-\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)1.2f}))).Equals((new List<string>(new string[]{(string)\"D+\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.5f}))).Equals((new List<string>(new string[]{(string)\"D-\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.0f}))).Equals((new List<string>(new string[]{(string)\"E\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))).Equals((new List<string>(new string[]{(string)\"D\", (string)\"D-\", (string)\"C-\", (string)\"B\", (string)\"B+\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.0f, (float)0.7f}))).Equals((new List<string>(new string[]{(string)\"E\", (string)\"D-\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_82","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्     \/\/दीर्घः अभाज्यसंख्या अस्ति अन्यथा असत्यम् अस्ति ।    \/\/यदि string इत्यस्य प्रत्ययः भवति तर्हि function इत्यस्य true इत्यस्य प्रत्ययः भवति ।    \/\/ >>> PrimeLength((\"Hello\"))\n    \/\/ (true)\n    \/\/ >>> PrimeLength((\"abcdcba\"))\n    \/\/ (true)\n    \/\/ >>> PrimeLength((\"kittens\"))\n    \/\/ (true)\n    \/\/ >>> PrimeLength((\"orange\"))\n    \/\/ (false)\n    public static bool PrimeLength(string str) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static bool PrimeLength(string str) {\n        int length = str.Length;\n        if (length < 2) return false;\n        \n        for (int i = 2; i <= Math.Sqrt(length); i++) {\n            if (length % i == 0) return false;\n        }\n        \n        return true;\n    }\n    \n    \/\/ Example usage\n    public static void Main() {\n        Console.WriteLine(PrimeLength(\"Hello\"));    \/\/ true\n        Console.WriteLine(PrimeLength(\"abcdcba\"));  \/\/ true\n        Console.WriteLine(PrimeLength(\"kittens\"));  \/\/ true\n        Console.WriteLine(PrimeLength(\"orange\"));   \/\/ false\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PrimeLength((\"Hello\")) == (true));\n    Debug.Assert(PrimeLength((\"abcdcba\")) == (true));\n    Debug.Assert(PrimeLength((\"kittens\")) == (true));\n    Debug.Assert(PrimeLength((\"orange\")) == (false));\n    Debug.Assert(PrimeLength((\"wow\")) == (true));\n    Debug.Assert(PrimeLength((\"world\")) == (true));\n    Debug.Assert(PrimeLength((\"MadaM\")) == (true));\n    Debug.Assert(PrimeLength((\"Wow\")) == (true));\n    Debug.Assert(PrimeLength((\"\")) == (false));\n    Debug.Assert(PrimeLength((\"HI\")) == (true));\n    Debug.Assert(PrimeLength((\"go\")) == (true));\n    Debug.Assert(PrimeLength((\"gogo\")) == (false));\n    Debug.Assert(PrimeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    Debug.Assert(PrimeLength((\"Madam\")) == (true));\n    Debug.Assert(PrimeLength((\"M\")) == (false));\n    Debug.Assert(PrimeLength((\"0\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_83","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/धनात्मकं पूर्णाङ्कं यः १-अङ्कं आरभते वा अन्तयति।    \/\/धनात्मकं पूर्णाङ्कं n प्राप्नोति, अतः n-अङ्केषु संख्यायाः गणना करणीया भवति।    public static long StartsOneEnds(long n) {\n","canonical_solution":"if (n == 1) return 1;\n        return (long)Math.Pow(10, n - 1) + 9 * (long)Math.Pow(10, n - 2);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n}\n"},{"task_id":"HumanEval_84","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्     \/\/धनात्मकं पूर्णाङ्कं N लभ्यते, तस्य द्विवचनसंख्यकानां योगं प्रतिपादयतु।    \/\/ >>> Solve((1000L))\n    \/\/ (\"1\")\n    \/\/ >>> Solve((150L))\n    \/\/ (\"110\")\n    \/\/ >>> Solve((147L))\n    \/\/ (\"1100\")\n    \/\/ Variables:\n    \/\/ @N integer\n    \/\/ Constraints: 0 ≤ N ≤ 10000.\n    \/\/ Output:\n    \/\/ a string of binary number\n    public static string Solve(long N) {\n","canonical_solution":"public static string Solve(long N) {\n        int sumOfDigits = 0;\n        while (N > 0) {\n            sumOfDigits += (int)(N % 10);\n            N \/= 10;\n        }\n        return Convert.ToString(sumOfDigits, 2);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"},{"task_id":"HumanEval_85","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/पूर्णाङ्काणां सूचीः अस्ति, अतः प्रथमतः समं संख्यां योजयतु, यानि विषमसंख्यासु सन्ति।    \/\/ >>> Add((new List<long>(new long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    \/\/ (2L)\n    public static long Add(List<long> lst) {\n","canonical_solution":"long sum = 0;\n    for (int i = 1; i < lst.Count; i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"},{"task_id":"HumanEval_86","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/टिप्पणी: वाक्यस्य शब्दानां क्रमः रिक्तस्थानानि च भवन्तः अनुरक्तः भवन्तु ।    \/\/असि मूल्यम् आधारितः आरोहणीयक्रमः।    \/\/ननु शब्दस्य स्थाने सर्वकार्येषु वर्णानां क्रमनिर्देशः भवति ।    \/\/आदेशितसंस्करणं, एकं शब्दसंज्ञकं भवति यत्र सर्वे शब्दाः (अन्तरं विभक्तः)     \/\/कस्यचित् सूत्रस्य आदेशं प्रतिपादयितुं कस्यचित् फलनम् लिखत।    \/\/ >>> AntiShuffle((\"Hi\"))\n    \/\/ (\"Hi\")\n    \/\/ >>> AntiShuffle((\"hello\"))\n    \/\/ (\"ehllo\")\n    \/\/ >>> AntiShuffle((\"Hello World!!!\"))\n    \/\/ (\"Hello !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n","canonical_solution":"using System;\nusing System.Linq;\n\nclass Problem\n{\n    public static string AntiShuffle(string s)\n    {\n        return string.Join(\" \", s.Split(' ')\n            .Select(word => string.Concat(word.OrderBy(c => c))));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"},{"task_id":"HumanEval_87","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/अपि च, पङ्क्तिः स्तम्भः क्रमात् अवरोहणपूर्वकं क्रमयतु।    \/\/निर्देशादयो क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः    \/\/प्रत्येकं ट्युपलम् एकं निर्देशाङ्कम् अस्ति -- (पंक्ति, स्तम्भः) -- 0-संज्ञायाः आरम्भः।    \/\/एवं तुल्येषु [(x1, y1), (x2, y2) ...] इत्यनेन सूचीः प्रतिपादितः भवति यत्     \/\/lst, तथा पूर्णाङ्कः x, सूचीतः पूर्णाङ्कः x,  प्राप्नोतु।    \/\/प्रत्येकं पङ्क्तिः भिन्नसंख्याकानां स्तम्भानां संख्येयसम्बन्धेन युक्तः भवति ।    \/\/यः मैट्रिक्सः इत्यनेन समानः अस्ति, किन्तु मैट्रिक्सस्य विपरीतः अस्ति,    \/\/भवद्भिरुपादानं द्वि-आयामिकं डाटा, यथा नेस्टेड सूची,     \/\/ >>> GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L))\n    \/\/ (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))\n    \/\/ >>> GetRow((new List<List<long>>()), (1L))\n    \/\/ (new List<Tuple<long, long>>())\n    \/\/ >>> GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})})), (3L))\n    \/\/ (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long, long>>();\n        \n        for (long row = 0; row < lst.Count; row++) {\n            List<long> currentRow = lst[(int)row];\n            var foundIndices = new List<long>();\n            \n            for (long col = 0; col < currentRow.Count; col++) {\n                if (currentRow[(int)col] == x) {\n                    foundIndices.Add(col);\n                }\n            }\n            \n            foundIndices.Sort((a, b) => b.CompareTo(a)); \/\/ Sort columns in descending order\n            \n            foreach (var col in foundIndices) {\n                result.Add(Tuple.Create(row, col));\n            }\n        }\n        \n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long, long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long, long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long, long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()), (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})), (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"},{"task_id":"HumanEval_88","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/* न चान्येषां सूत्राणां परिवर्तनं कर्त्तव्यम्।    \/\/टिप्पणीः     \/\/अथवा यदि योगः ((प्रथमः सूचकाङ्कः, अन्तिमः सूचकाङ्कः) समः अस्ति तर्हि घटक्रमेण वर्गीकृतं कुरुत।    \/\/यदि योगः ((प्रथमं सूचकांकमूल्यं, अन्तिमं सूचकांकमूल्यं) विषममस्ति, तर्हि भवन्तः सूचीं आरोहणक्रमेण विसर्जयन्ति,     \/\/नन्-ऋणात्मकानां पूर्णाङ्काणां सूची प्राप्ते, क्रमणीकरणानन्तरं निर्दिष्टसूचीयाः कोच् प्रत्ययो लभ्यते,     \/\/ >>> SortArray((new List<long>()))\n    \/\/ (new List<long>())\n    \/\/ >>> SortArray((new List<long>(new long[]{(long)5L})))\n    \/\/ (new List<long>(new long[]{(long)5L}))\n    \/\/ >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L})))\n    \/\/ (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    \/\/ >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    \/\/ (new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long> array) {\n","canonical_solution":"public static List<long> SortArray(List<long> array) {\n        if (array == null || array.Count <= 1) {\n            return new List<long>(array);\n        }\n        \n        long firstValue = array[0];\n        long lastValue = array[array.Count - 1];\n        long sum = firstValue + lastValue;\n\n        List<long> sortedArray = new List<long>(array);\n\n        if (sum % 2 != 0) { \/\/ sum is odd, sort ascending\n            sortedArray.Sort();\n        } else { \/\/ sum is even, sort descending\n            sortedArray.Sort();\n            sortedArray.Reverse();\n        }\n\n        return sortedArray;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L, (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L, (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L, (long)11L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_89","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/द्वयोः स्थानेषु द्विगुणं गुणितं द्विगुणं स्थानं प्रति निवर्त्यताम् ।    \/\/अक्षरं यथाक्रमं विभज्य लिखत ।    \/\/वर्णमालायाः परिक्रमणम् कृत्वा एकं सङ्केतं शृङ्खलं प्रतिपादयति ।    \/\/कस्यचित् कार्यस्य कूटशब्दस्य निर्माणं कुरुत यत् कस्यचित् सूत्रस्य तर्कस्य रूपे गृहीतं भवति, तथा च     \/\/ >>> Encrypt((\"hi\"))\n    \/\/ (\"lm\")\n    \/\/ >>> Encrypt((\"asdfghjkl\"))\n    \/\/ (\"ewhjklnop\")\n    \/\/ >>> Encrypt((\"gf\"))\n    \/\/ (\"kj\")\n    \/\/ >>> Encrypt((\"et\"))\n    \/\/ (\"ix\")\n    public static string Encrypt(string s) {\n","canonical_solution":"const int shiftAmount = 4; \/\/ 2 multiplied by 2 equals 4.\n\n    StringBuilder encrypted = new StringBuilder();\n\n    foreach (char c in s) {\n        if (char.IsLetter(c)) {\n            char start = char.IsUpper(c) ? 'A' : 'a';\n            char encryptedChar = (char)(start + (c - start + shiftAmount) % 26);\n            encrypted.Append(encryptedChar);\n        } else {\n            encrypted.Append(c); \/\/ Non-letter characters are not encrypted.\n        }\n    }\n\n    return encrypted.ToString();\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n    Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n    Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"},{"task_id":"HumanEval_90","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/यदि न अस्ति तर्हि null इत्यस्य प्रतिफलम् ददाति ।    \/\/Next_smallest () इति फलनम् लिखत, येन सूचीयाः द्वितीयं लघुतमं तत्वं लभते ।    \/\/भवद्भिरुपादानं पूर्णाङ्कं सूचीकृतम्।    \/\/ >>> NextSmallest((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})))\n    \/\/ 2L\n    \/\/ >>> NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L, (long)3L, (long)2L})))\n    \/\/ 2L\n    \/\/ >>> NextSmallest((new List<long>()))\n    \/\/ null\n    \/\/ >>> NextSmallest((new List<long>(new long[]{(long)1L, (long)1L})))\n    \/\/ null\n    public static Nullable<long> NextSmallest(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static Nullable<long> NextSmallest(List<long> lst) {\n        if (lst == null || lst.Count < 2) {\n            return null;\n        }\n\n        HashSet<long> uniqueElements = new HashSet<long>(lst);\n        if (uniqueElements.Count < 2) {\n            return null;\n        }\n\n        List<long> sortedUniqueElements = uniqueElements.ToList();\n        sortedUniqueElements.Sort();\n\n        return sortedUniqueElements[1];\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(NextSmallest(new List<long> {1, 2, 3, 4, 5})); \/\/ 2\n        Console.WriteLine(NextSmallest(new List<long> {5, 1, 4, 3, 2})); \/\/ 2\n        Console.WriteLine(NextSmallest(new List<long>())); \/\/ null\n        Console.WriteLine(NextSmallest(new List<long> {1, 1})); \/\/ null\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L, (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n    }\n\n}\n"},{"task_id":"HumanEval_91","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/वाक्यानां सीमां '', '?' अथवा '!'. इति विधीयते ।    \/\/\"अहं\" शब्दात् आरभते वाक्यात् \"अहं\" इति वाक्यम् भवति।    \/\/भवद्भ् यः शब्दानां शृङ्खला दीयते, भवतां कार्यम् अस्ति संख्या गन् तुम् ।    \/\/ >>> IsBored((\"Hello world\"))\n    \/\/ (0L)\n    \/\/ >>> IsBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    \/\/ (1L)\n    public static long IsBored(string S) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long IsBored(string S) {\n        \/\/ Split the input string into sentences based on delimiters '.', '?', '!'\n        char[] delimiters = new char[] { '.', '?', '!' };\n        string[] sentences = S.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n\n        \/\/ Count sentences that start with 'I' after trimming leading whitespaces\n        long boredomCount = 0;\n        foreach (string sentence in sentences) {\n            if (sentence.TrimStart().StartsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n\n    static void Main(string[] args) {\n        \/\/ Example usage:\n        Console.WriteLine(IsBored(\"Hello world\")); \/\/ Output: 0\n        Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); \/\/ Output: 1\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for a walk\")) == (0L));\n    }\n\n}\n"},{"task_id":"HumanEval_92","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्     \/\/अन्यत्र असत्यं प्रतिपादयति।    \/\/यदि संख्यायाः एकं योगः अन्ययोः योगे भवति, एवं सर्वे संख्याः पूर्णाङ्काः भवन्ति तर्हि सत्यं प्रतिपादयति।    \/\/३-संख्यां गृह्णाति इति फलनम् निर्मातुम् ।    \/\/ >>> AnyInt((float)5L, (float)2L, (float)7L)\n    \/\/ (true)\n    \/\/ >>> AnyInt((float)3L, (float)2L, (float)2L)\n    \/\/ (false)\n    \/\/ >>> AnyInt((float)3L, (float)-2L, (float)1L)\n    \/\/ (true)\n    \/\/ >>> AnyInt((3.6f), (-2.2f), (float)2L)\n    \/\/ (false)\n    public static bool AnyInt(float x, float y, float z) {\n","canonical_solution":"public static bool AnyInt(float x, float y, float z) {\n        if (x == Math.Round(x) && y == Math.Round(y) && z == Math.Round(z)) {\n            if (x == y + z || y == x + z || z == x + y) {\n                return true;\n            }\n        }\n        return false;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AnyInt((float)2L, (float)3L, (float)1L) == (true));\n    Debug.Assert(AnyInt((2.5f), (float)2L, (float)3L) == (false));\n    Debug.Assert(AnyInt((1.5f), (float)5L, (3.5f)) == (false));\n    Debug.Assert(AnyInt((float)2L, (float)6L, (float)2L) == (false));\n    Debug.Assert(AnyInt((float)4L, (float)2L, (float)2L) == (true));\n    Debug.Assert(AnyInt((2.2f), (2.2f), (2.2f)) == (false));\n    Debug.Assert(AnyInt((float)-4L, (float)6L, (float)2L) == (true));\n    Debug.Assert(AnyInt((float)2L, (float)1L, (float)1L) == (true));\n    Debug.Assert(AnyInt((float)3L, (float)4L, (float)7L) == (true));\n    Debug.Assert(AnyInt((3.0f), (float)4L, (float)7L) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_93","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/केवलम् अक्षरं गृहीत्वा।    \/\/अङ्ग्रेजी वर्णमालायाः स्वरः।    \/\/सन्देशः यस्मिन् अक्षरः द्वौ स्थानौ आगच्छति ।    \/\/अतः सः सर्व-अक्षरानां अक्षर-परिवर्तनं करोति,  इत्यस्य सर्व-अक्षर-परिवर्तनं करोति ।    \/\/एकं फलनम् लिखत यत् संदेशं गृहीत्वा, तत् प्रकारेण एन्कोडं करोति।    \/\/ >>> Encode((\"test\"))\n    \/\/ (\"TGST\")\n    \/\/ >>> Encode((\"This is a message\"))\n    \/\/ (\"tHKS KS C MGSSCGG\")\n    public static string Encode(string message) {\n","canonical_solution":"public static string Encode(string message) {\n    \/\/ Define vowels and their replacements\n    Dictionary<char, char> vowelReplacement = new Dictionary<char, char>\n    {\n        { 'a', 'c' },\n        { 'e', 'g' },\n        { 'i', 'k' },\n        { 'o', 'q' },\n        { 'u', 'w' },\n        { 'A', 'C' },\n        { 'E', 'G' },\n        { 'I', 'K' },\n        { 'O', 'Q' },\n        { 'U', 'W' }\n    };\n\n    StringBuilder encodedMessage = new StringBuilder();\n\n    foreach (char c in message) {\n        if (char.IsLetter(c)) {\n            \/\/ Swap case\n            char swappedCaseChar = char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c);\n\n            \/\/ Replace vowels according to the defined map\n            if (vowelReplacement.ContainsKey(swappedCaseChar)) {\n                encodedMessage.Append(vowelReplacement[swappedCaseChar]);\n            } else {\n                encodedMessage.Append(swappedCaseChar);\n            }\n        } else {\n            \/\/ Non-letter characters should be appended as-is (if necessary)\n            encodedMessage.Append(c);\n        }\n    }\n\n    return encodedMessage.ToString();\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"},{"task_id":"HumanEval_94","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/भवद्भिः सर्वतः अधिकं मूल्यं ज्ञातव्यं, तस्य अङ्कं च पुनः प्राप्तव्यम् ।    \/\/भवद्भिरुपादानं पूर्णाङ्कं सूचीकृतम्।    \/\/ >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L, (long)181L, (long)32L, (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L, (long)4L, (long)3L})))\n    \/\/ (10L)\n    \/\/ >>> Skjkasdkd((new List<long>(new long[]{(long)1L, (long)0L, (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L, (long)1L, (long)3L, (long)40L, (long)1L, (long)2L, (long)1L, (long)2L, (long)4L, (long)2L, (long)5L, (long)1L})))\n    \/\/ (25L)\n    \/\/ >>> Skjkasdkd((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L, (long)109L, (long)163L, (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L, (long)9L, (long)3L})))\n    \/\/ (13L)\n    \/\/ >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)724L, (long)32L, (long)71L, (long)99L, (long)32L, (long)6L, (long)0L, (long)5L, (long)91L, (long)83L, (long)0L, (long)5L, (long)6L})))\n    \/\/ (11L)\n    \/\/ >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)81L, (long)12L, (long)3L, (long)1L, (long)21L})))\n    \/\/ (3L)\n    \/\/ >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)8L, (long)1L, (long)2L, (long)1L, (long)7L})))\n    \/\/ (7L)\n    public static long Skjkasdkd(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static long Skjkasdkd(List<long> lst) {\n        long largestPrime = -1;\n\n        foreach (var num in lst) {\n            if (IsPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n\n        if (largestPrime == -1) return 0;\n\n        return SumOfDigits(largestPrime);\n    }\n\n    private static bool IsPrime(long number) {\n        if (number <= 1) return false;\n        if (number <= 3) return true;\n\n        if (number % 2 == 0 || number % 3 == 0) return false;\n\n        for (long i = 5; i * i <= number; i += 6) {\n            if (number % i == 0 || number % (i + 2) == 0) return false;\n        }\n\n        return true;\n    }\n\n    private static long SumOfDigits(long number) {\n        long sum = 0;\n        while (number != 0) {\n            sum += number % 10;\n            number \/= 10;\n        }\n        return sum;\n    }\n}\n\n\/\/ Example of usage:\n\/\/ var result = Problem.Skjkasdkd(new List<long> {0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3});\n\/\/ Console.WriteLine(result); \/\/ Output will be 10","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L, (long)181L, (long)32L, (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L, (long)4L, (long)3L}))) == (10L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)0L, (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L, (long)1L, (long)3L, (long)40L, (long)1L, (long)2L, (long)1L, (long)2L, (long)4L, (long)2L, (long)5L, (long)1L}))) == (25L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L, (long)109L, (long)163L, (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L, (long)9L, (long)3L}))) == (13L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)724L, (long)32L, (long)71L, (long)99L, (long)32L, (long)6L, (long)0L, (long)5L, (long)91L, (long)83L, (long)0L, (long)5L, (long)6L}))) == (11L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)81L, (long)12L, (long)3L, (long)1L, (long)21L}))) == (3L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)8L, (long)1L, (long)2L, (long)1L, (long)7L}))) == (7L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)8191L}))) == (19L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)8191L, (long)123456L, (long)127L, (long)7L}))) == (19L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)127L, (long)97L, (long)8192L}))) == (10L));\n    }\n\n}\n"},{"task_id":"HumanEval_95","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/यदि दीयते शब्दकोशः रिक्तः अस्ति तर्हि फलनम् असत्यं प्रति लप्स्यते ।    \/\/यदि वा सर्वे कुञ्जाः अपरकेसमध्ये स्त्रिः भवन्ति, अन्यथा मिथ्या प्रतिपादयति.    \/\/यदि सर्वः कूटः निम्नस्थस्य कूटस्य अस्ति तर्हि सत्यं प्रतिपादयतु    \/\/ >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {\"b\", \"banana\"}}))\n    \/\/ (true)\n    \/\/ >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))\n    \/\/ (false)\n    \/\/ >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {8L, \"banana\"}, {\"a\", \"apple\"}}))\n    \/\/ (false)\n    \/\/ >>> CheckDictCase((new Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))\n    \/\/ (false)\n    \/\/ >>> CheckDictCase((new Dictionary<string,string>(){{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))\n    \/\/ (true)\n    public static bool CheckDictCase(Dictionary<string,string> dict) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static bool CheckDictCase(Dictionary<string, string> dict)\n    {\n        if (dict.Count == 0)\n            return false;\n\n        bool allLower = true;\n        bool allUpper = true;\n\n        foreach (var key in dict.Keys)\n        {\n            if (key != key.ToLower())\n                allLower = false;\n            if (key != key.ToUpper())\n                allUpper = false;\n        }\n\n        return allLower || allUpper;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"b\", \"banana\"}})) == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})) == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}})) == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>())) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_96","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/पूर्णाङ्काः ये प्रथमाङ्काः सन्ति, ते n-तः अल्पकाः सन्ति।    \/\/नन्-ऋणात्मकं पूर्णाङ्कं गृहीत्वा प्रथमं n-वर्णानां सूचीं प्रतिपादयति।    \/\/ >>> CountUpTo((5L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L}))\n    \/\/ >>> CountUpTo((11L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L}))\n    \/\/ >>> CountUpTo((0L))\n    \/\/ (new List<long>())\n    \/\/ >>> CountUpTo((20L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L}))\n    \/\/ >>> CountUpTo((1L))\n    \/\/ (new List<long>())\n    \/\/ >>> CountUpTo((18L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))\n    public static List<long> CountUpTo(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> CountUpTo(long n) {\n        List<long> primes = new List<long>();\n        if (n <= 2) return primes;\n\n        \/\/ Check for prime numbers from 2 up to n-1\n        for (long i = 2; i < n; i++) {\n            if (IsPrime(i)) {\n                primes.Add(i);\n            }\n        }\n\n        return primes;\n    }\n\n    private static bool IsPrime(long number) {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n\n        long boundary = (long)Math.Sqrt(number);\n\n        for (long i = 2; i <= boundary; i++) {\n            if (number % i == 0) return false;\n        }\n\n        return true;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountUpTo((5L)).Equals((new List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(CountUpTo((6L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L}))));\n    Debug.Assert(CountUpTo((7L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L}))));\n    Debug.Assert(CountUpTo((10L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(CountUpTo((0L)).Equals((new List<long>())));\n    Debug.Assert(CountUpTo((22L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L}))));\n    Debug.Assert(CountUpTo((1L)).Equals((new List<long>())));\n    Debug.Assert(CountUpTo((18L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))));\n    Debug.Assert(CountUpTo((47L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L, (long)23L, (long)29L, (long)31L, (long)37L, (long)41L, (long)43L}))));\n    Debug.Assert(CountUpTo((101L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L, (long)23L, (long)29L, (long)31L, (long)37L, (long)41L, (long)43L, (long)47L, (long)53L, (long)59L, (long)61L, (long)67L, (long)71L, (long)73L, (long)79L, (long)83L, (long)89L, (long)97L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_97","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/आगतं सर्वदा वैधं भवति इति गृहीतम् ।    \/\/तेषां एकाधिकसंख्यायाः गुणः भवति ।    \/\/द्वौ पूर्णाङ्कं गृहीत्वा फलनम् पूरयतु, ततः परतः     \/\/ >>> Multiply((148L), (412L))\n    \/\/ (16L)\n    \/\/ >>> Multiply((19L), (28L))\n    \/\/ (72L)\n    \/\/ >>> Multiply((2020L), (1851L))\n    \/\/ (0L)\n    \/\/ >>> Multiply((14L), (-15L))\n    \/\/ (20L)\n    public static long Multiply(long a, long b) {\n","canonical_solution":"public static long Multiply(long a, long b) {\n    int unitDigitA = (int)(Math.Abs(a) % 10);\n    int unitDigitB = (int)(Math.Abs(b) % 10);\n    return (long)(unitDigitA * unitDigitB);\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L), (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n    Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L), (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n    Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L), (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n}\n"},{"task_id":"HumanEval_98","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/यदि क्तः अस्ति, तर्हि समसूत्रेषु क्तस्य स्वरस्य संख्यां गणयतु।    \/\/ >>> CountUpper((\"aBCdEf\"))\n    \/\/ (1L)\n    \/\/ >>> CountUpper((\"abcdefg\"))\n    \/\/ (0L)\n    \/\/ >>> CountUpper((\"dBBE\"))\n    \/\/ (0L)\n    public static long CountUpper(string s) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long CountUpper(string s) {\n        long count = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n            if (\"AEIOU\".Contains(s[i])) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void Main(string[] args) {\n        Console.WriteLine(CountUpper(\"aBCdEf\")); \/\/ Output: 1\n        Console.WriteLine(CountUpper(\"abcdefg\")); \/\/ Output: 0\n        Console.WriteLine(CountUpper(\"dBBE\")); \/\/ Output: 0\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountUpper((\"aBCdEf\")) == (1L));\n    Debug.Assert(CountUpper((\"abcdefg\")) == (0L));\n    Debug.Assert(CountUpper((\"dBBE\")) == (0L));\n    Debug.Assert(CountUpper((\"B\")) == (0L));\n    Debug.Assert(CountUpper((\"U\")) == (1L));\n    Debug.Assert(CountUpper((\"\")) == (0L));\n    Debug.Assert(CountUpper((\"EEEE\")) == (2L));\n    }\n\n}\n"},{"task_id":"HumanEval_99","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्     \/\/द्वयोः पूर्णाङ्कं शून्यात् दूरं कृत्वा परिमण्डलं कुरुत।    \/\/यदि संख्या समदूरस्थः अस्ति, तर्हि सः समीपस्थः पूर्णाङ्कः भवति।    \/\/संख्यायाः प्रतिनिधित्वं करणीयं (स्ट्रिंग) मानं गृह्णाति इति फलनम् निर्मितव्यम् ।    \/\/ >>> ClosestInteger((\"10\"))\n    \/\/ (10L)\n    \/\/ >>> ClosestInteger((\"15.3\"))\n    \/\/ (15L)\n    \/\/ Note:\n    \/\/ Rounding away from zero means that if the given number is equidistant\n    \/\/ from two integers, the one you should return is the one that is the\n    \/\/ farthest from zero. For example closest_integer(\"14.5\") should\n    \/\/ return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n","canonical_solution":"public static long ClosestInteger(string value) {\n    double number = double.Parse(value);\n    return (long)Math.Round(number, MidpointRounding.AwayFromZero);\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n"},{"task_id":"HumanEval_100","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/i इति स्तरेषु (i+1) स्थानेषु शिलाः सन्ति ।    \/\/सूचीमध्ये प्रत्येकस्तरेषु शिलाः संख्यां प्रतिपादयति, यत्र तत्वम् index इत्यत्र भवति ।    \/\/- यदि n अपि अस्ति तर्हि अग्रे समः संख्या अस्ति।    \/\/- यदि n अस्वाभाविकः अस्ति तर्हि अग्रे असमङ्ख्यम् अस्ति ।    \/\/अग्रे स्तरस्य शिलायाः संख्या अस्ति:    \/\/प्रथमस्तरे n पाषाणाः सन्ति ।    \/\/यदि धनात्मकं पूर्णाङ्कं n प्राप्नुयात् तर्हि n स्तरीयानां पाषाणानां समूहं निर्मातव्यम् ।    \/\/ >>> MakeAPile((3L))\n    \/\/ (new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))\n    public static List<long> MakeAPile(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> MakeAPile(long n) {\n        List<long> pile = new List<long>();\n        long currentStones = n;\n        \n        for (long i = 0; i < n; i++) {\n            pile.Add(currentStones);\n            currentStones += (n % 2 == 0) ? 2 : 2;\n        }\n\n        return pile;\n    }\n    \n    static void Main(string[] args) {\n        List<long> result = MakeAPile(3L);\n        Console.WriteLine(string.Join(\", \", result));  \/\/ Output: 3, 5, 7\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MakeAPile((3L)).Equals((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(MakeAPile((4L)).Equals((new List<long>(new long[]{(long)4L, (long)6L, (long)8L, (long)10L}))));\n    Debug.Assert(MakeAPile((5L)).Equals((new List<long>(new long[]{(long)5L, (long)7L, (long)9L, (long)11L, (long)13L}))));\n    Debug.Assert(MakeAPile((6L)).Equals((new List<long>(new long[]{(long)6L, (long)8L, (long)10L, (long)12L, (long)14L, (long)16L}))));\n    Debug.Assert(MakeAPile((8L)).Equals((new List<long>(new long[]{(long)8L, (long)10L, (long)12L, (long)14L, (long)16L, (long)18L, (long)20L, (long)22L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_101","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/शब्दानां विभक्तिः कृत्वा शब्दानां सूचीं प्रति लभते    \/\/भवता कम्पायाः वा रिक्तस्थानानां द्वारा पृथक्कृतानि शब्दाः प्रदत्ताः सन्ति। भवता कार्यम् अस्ति     \/\/ >>> WordsString((\"Hi, my name is John\"))\n    \/\/ (new List<string>(new string[]{(string)\"Hi\", (string)\"my\", (string)\"name\", (string)\"is\", (string)\"John\"}))\n    \/\/ >>> WordsString((\"One, two, three, four, five, six\"))\n    \/\/ (new List<string>(new string[]{(string)\"One\", (string)\"two\", (string)\"three\", (string)\"four\", (string)\"five\", (string)\"six\"}))\n    public static List<string> WordsString(string s) {\n","canonical_solution":"public static List<string> WordsString(string s) {\n    char[] separators = new char[] { ' ', ',' };\n    var words = s.Split(separators, StringSplitOptions.RemoveEmptyEntries);\n    return new List<string>(words);\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsString((\"Hi, my name is John\")).Equals((new List<string>(new string[]{(string)\"Hi\", (string)\"my\", (string)\"name\", (string)\"is\", (string)\"John\"}))));\n    Debug.Assert(WordsString((\"One, two, three, four, five, six\")).Equals((new List<string>(new string[]{(string)\"One\", (string)\"two\", (string)\"three\", (string)\"four\", (string)\"five\", (string)\"six\"}))));\n    Debug.Assert(WordsString((\"Hi, my name\")).Equals((new List<string>(new string[]{(string)\"Hi\", (string)\"my\", (string)\"name\"}))));\n    Debug.Assert(WordsString((\"One,, two, three, four, five, six,\")).Equals((new List<string>(new string[]{(string)\"One\", (string)\"two\", (string)\"three\", (string)\"four\", (string)\"five\", (string)\"six\"}))));\n    Debug.Assert(WordsString((\"\")).Equals((new List<string>())));\n    Debug.Assert(WordsString((\"ahmed     , gamal\")).Equals((new List<string>(new string[]{(string)\"ahmed\", (string)\"gamal\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_102","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/न हि संख्या अस्ति, अतः फलनम् -1 इत्युत्पादयति।    \/\/यदि                     \/\/इदम् फलनम् द्वयोः धनात्मकानां संख्याः x तथा y गृहीत्वा  इत्यस्य परिणामं ददाति ।    \/\/ >>> ChooseNum((12L), (15L))\n    \/\/ (14L)\n    \/\/ >>> ChooseNum((13L), (12L))\n    \/\/ (-1L)\n    public static long ChooseNum(long x, long y) {\n","canonical_solution":"if (x > y) {\n            return -1;\n        }\n        \n        \/\/ Ensure x is the bigger one for simplicity\n        if (x > y) {\n            long temp = x;\n            x = y;\n            y = temp;\n        }\n        \n        \/\/ Start searching from y down to x\n        for (long i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChooseNum((12L), (15L)) == (14L));\n    Debug.Assert(ChooseNum((13L), (12L)) == (-1L));\n    Debug.Assert(ChooseNum((33L), (12354L)) == (12354L));\n    Debug.Assert(ChooseNum((5234L), (5233L)) == (-1L));\n    Debug.Assert(ChooseNum((6L), (29L)) == (28L));\n    Debug.Assert(ChooseNum((27L), (10L)) == (-1L));\n    Debug.Assert(ChooseNum((7L), (7L)) == (-1L));\n    Debug.Assert(ChooseNum((546L), (546L)) == (546L));\n    }\n\n}\n"},{"task_id":"HumanEval_104","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/नोटः पुनः प्राप्ताः सूचीः क्रमशः वर्धमानतया विसर्जितं भवेत् ।    \/\/न च इदम्+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि    \/\/धनात्मकपूर्णाङ्काणां सूची प्राप्ते, सर्वेषां  इत्यस्य सूची पुनः प्राप्ता।    \/\/ >>> UniqueDigits((new List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)15L, (long)33L}))\n    \/\/ >>> UniqueDigits((new List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L})))\n    \/\/ (new List<long>())\n    public static List<long> UniqueDigits(List<long> x) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static List<long> UniqueDigits(List<long> x) {\n        return x.Where(n => !n.ToString().Any(c => \"02468\".Contains(c)))\n                .OrderBy(n => n)\n                .ToList();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L, (long)15L, (long)33L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L}))).Equals((new List<long>())));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)12345L, (long)2033L, (long)111L, (long)151L}))).Equals((new List<long>(new long[]{(long)111L, (long)151L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)135L, (long)103L, (long)31L}))).Equals((new List<long>(new long[]{(long)31L, (long)135L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_105","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/\"एकः\", \"द्वयोः\", \"तृतीयः\", \"चत्वारः\", \"पञ्चः\", \"षट्\", \"सप्त\", \"आठः\", \"नवम्\" ।    \/\/ननु च, प्रत्ययस्य स्थाने प्रत्ययस्य नामकरणं क्रियते ।    \/\/पूर्णाङ्काणां सूची प्राप्ते, 1 तः 9 पर्यन्ताः पूर्णाङ्काः क्रमणीकृत्य,     \/\/ >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    \/\/ (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    \/\/ If the list is empty, return an empty list:\n    \/\/ >>> ByLength((new List<long>()))\n    \/\/ (new List<string>())\n    \/\/ If the list has any strange number ignore it:\n    \/\/ >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    \/\/ (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static List<string> ByLength(List<long> arr) {\n        \/\/ Define a dictionary to map numbers to their names.\n        var digitToName = new Dictionary<long, string> {\n            {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n            {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n        };\n\n        \/\/ Filter the numbers that are between 1 and 9.\n        var filtered = arr.Where(x => digitToName.ContainsKey(x)).ToList();\n\n        \/\/ Sort the filtered numbers.\n        filtered.Sort();\n\n        \/\/ Reverse the list.\n        filtered.Reverse();\n\n        \/\/ Map the numbers to their names using the dictionary.\n        return filtered.Select(x => digitToName[x]).ToList();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_106","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/i इत्यस्य गुणनफलम् 1 तः i इत्यपर्यन्तस्य संख्यायाः गुणनफलम् अस्ति (1 * 2 * ... * i) ।    \/\/i 1 इत्यतः आरभ्यते।    \/\/अथवा अन्यत्र १-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-२-२-२    \/\/तथा आकाराः n इत्यनेन सूचीं प्रतिपादयति, येन इन्द्रेषु i इत्यस्य गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम् गुणानाम्    \/\/f इत्यस्य फलनम् क्रियताम्, यत् n इत्यस्य परिमेयत्वेन गृह्यते,     \/\/ >>> F((5L))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)6L, (long)24L, (long)15L}))\n    public static List<long> F(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> F(long n) {\n        List<long> result = new List<long>();\n\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(Factorial(i));\n            } else {\n                result.Add(SumUpTo(i));\n            }\n        }\n        \n        return result;\n    }\n\n    private static long Factorial(long number) {\n        if (number == 0) return 1;\n        long factorial = 1;\n        for (long i = 1; i <= number; i++) {\n            factorial *= i;\n        }\n        return factorial;\n    }\n\n    private static long SumUpTo(long number) {\n        return (number * (number + 1)) \/ 2;\n    }\n\n    static void Main(string[] args) {\n        List<long> result = F(5);\n        foreach (long val in result) {\n            Console.WriteLine(val);\n        }\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((5L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)6L, (long)24L, (long)15L}))));\n    Debug.Assert(F((7L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)6L, (long)24L, (long)15L, (long)720L, (long)28L}))));\n    Debug.Assert(F((1L)).Equals((new List<long>(new long[]{(long)1L}))));\n    Debug.Assert(F((3L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)6L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_107","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् १:     \/\/पूर्णाङ्कः पालिन्द्रोमः यः अन्तः अन्तः अस्ति ।    \/\/यदि धनात्मकं पूर्णाङ्कं n प्राप्नुयात् तर्हि, समं च विषमम् च  इति ट्यूप्लं प्रतिपाद्यताम् ।    \/\/ >>> EvenOddPalindrome((3L))\n    \/\/ (Tuple.Create(1L, 2L))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    \/\/ Example 2:\n    \/\/ >>> EvenOddPalindrome((12L))\n    \/\/ (Tuple.Create(4L, 6L))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    \/\/ Note:\n    \/\/ 1. 1 <= n <= 10^3\n    \/\/ 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n","canonical_solution":"public static Tuple<long, long> EvenOddPalindrome(long n) {\n    long evenCount = 0;\n    long oddCount = 0;\n\n    for (long i = 1; i <= n; i++) {\n        if (IsPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return Tuple.Create(evenCount, oddCount);\n}\n\nprivate static bool IsPalindrome(long number) {\n    long original = number;\n    long reversed = 0;\n\n    while (number > 0) {\n        long digit = number % 10;\n        reversed = reversed * 10 + digit;\n        number \/= 10;\n    }\n\n    return original == reversed;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenOddPalindrome((123L)).Equals((Tuple.Create(8L, 13L))));\n    Debug.Assert(EvenOddPalindrome((12L)).Equals((Tuple.Create(4L, 6L))));\n    Debug.Assert(EvenOddPalindrome((3L)).Equals((Tuple.Create(1L, 2L))));\n    Debug.Assert(EvenOddPalindrome((63L)).Equals((Tuple.Create(6L, 8L))));\n    Debug.Assert(EvenOddPalindrome((25L)).Equals((Tuple.Create(5L, 6L))));\n    Debug.Assert(EvenOddPalindrome((19L)).Equals((Tuple.Create(4L, 6L))));\n    Debug.Assert(EvenOddPalindrome((9L)).Equals((Tuple.Create(4L, 5L))));\n    Debug.Assert(EvenOddPalindrome((1L)).Equals((Tuple.Create(0L, 1L))));\n    }\n\n}\n"},{"task_id":"HumanEval_108","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -123 इत्यस्य अङ्के -1, 2, 3 इत्यनेन हस्ताक्षरं भवति ।    \/\/यदि संख्या ऋणात्मकं भवति, तदा तस्य प्रथमं हस्ताक्षरित-अङ्कः ऋणात्मकः भवति:    \/\/अङ्केषु संख्यायाः योगः > 0 भवति।    \/\/count_nums इति फलनम् लिखत, यः पूर्णाङ्काणां सूची गृहीत्वा पुनः लभते।    \/\/ >>> CountNums((new List<long>()))\n    \/\/ (0L)\n    \/\/ >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L, (long)-11L})))\n    \/\/ (1L)\n    \/\/ >>> CountNums((new List<long>(new long[]{(long)1L, (long)1L, (long)2L})))\n    \/\/ (3L)\n    public static long CountNums(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static long CountNums(List<long> arr) {\n        long count = 0;\n\n        foreach (long number in arr) {\n            long sumOfDigits = 0;\n            long num = number;\n            \n            while (num != 0) {\n                long digit = num % 10;\n                sumOfDigits += digit;\n                num \/= 10;\n            }\n\n            if (sumOfDigits > 0) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    static void Main(string[] args) {\n        \/\/ Test cases\n        Console.WriteLine(CountNums(new List<long>())); \/\/ (0L)\n        Console.WriteLine(CountNums(new List<long> { -1L, 11L, -11L })); \/\/ (1L)\n        Console.WriteLine(CountNums(new List<long> { 1L, 1L, 2L })); \/\/ (3L)\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"},{"task_id":"HumanEval_109","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/नोटः अत्र दीयते सूची विशिष्टाः अवयवाः सन्ति इति निश्चितम्।    \/\/यदि दीयते सूची रिक्तं भवति तर्हि true इत्यस्य प्रतिगमनं कुरुत।    \/\/तर्हि true प्रतिपादयतु अन्यथा false प्रतिपादयतु।    \/\/यदि पूर्वोक्तक्रियायाः कृते क्रमबद्धसूची प्राप्तुं शक्यते तर्हि    \/\/सूचीस्थाने प्रारम्भस्थानं, अर्थात् शून्यम् सूचकं।    \/\/अधोलिखितेषु पृष्ठेषु अन्तिमः आद्युत्पदं  इत्यनेन परिवर्तयिष्यते ।    \/\/एकं दाशमपसारणं क्रियते, यानि सूचीषु विद्यमानानि सर्वाणि तत्वानि एकेन पसारयन्ति ।    \/\/भवता दाशमनुवर्तनं कर्तुं अनुमतिः अस्ति।    \/\/अधोलिखितानि क्रियायाः सूचीः    \/\/यदि इदम् कार्यम् क्रियते तर्हि सूचीः अव्ययीभावः न भवति ।    \/\/सूचीषु संख्याः यादृच्छिकरूपेण विहितानि भवन्ति। भवतां कार्यम् अस्ति यत् भवतां नामः    \/\/अस्मिन् सूची 'अर्' इत्यस्मिन् N पूर्णाङ्काः सन्ति, यानि सन्ति arr[1], arr[2], ..., arr[N]।    \/\/ >>> MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    \/\/ (true)\n    \/\/ Explanation: By performin 2 right shift operations, non-decreasing order can\n    \/\/ be achieved for the given list.\n    \/\/ >>> MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    \/\/ (false)\n    \/\/ Explanation:It is not possible to get non-decreasing order for the given\n    \/\/ list by performing any number of right shift operations.\n    public static bool MoveOneBall(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) return true;\n\n        int n = arr.Count;\n        int descentCount = 0;\n        int indexOfDescent = -1;\n\n        \/\/ Find number of descents in the array\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > arr[(i + 1) % n]) {\n                descentCount++;\n                indexOfDescent = (i + 1) % n;\n            }\n            if (descentCount > 1) {\n                return false;\n            }\n        }\n\n        \/\/ No descents means the array is already sorted\n        if (descentCount == 0) {\n            return true;\n        }\n\n        \/\/ Check if the single descent allows a circular sorted order\n        for (int i = 0; i < n; i++) {\n            if (arr[(indexOfDescent + i) % n] > arr[(indexOfDescent + i + 1) % n]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>())) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_110","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/अन्यथा \"न\" इति प्रतिपादयतु।    \/\/lst1 इत्यस्य सर्वम् अवयवम् समं भवेत्, अतः \"YES\" प्रत्ययः प्राप्नोति ।    \/\/यदि इदम् सम्भवति तर्हि इष्ट-१-इष्ट-२-इष्ट-२-इष्ट-२-इष्ट-२-इष्ट-२-इष्ट-२-इष्ट-२-इष्ट-३-इष्ट-४-इष्ट-२-इष्ट-२-इष्ट-२-इष्ट-२-इष्ट-२-इष्ट-२-इष्ट-२    \/\/अत्र lst1 तथा lst2 इत्ययोः मध्ये विनिमयस्य अवयवानां सङ्ख्यायाः कोऽपि सीमा नास्ति ।    \/\/अतः इष्टतमः सङ्ख्याः केवलम् समसंख्याभिः युक्तः भवति ।    \/\/एवं च निर्धारयति यत् तत्वानां विनिमयम् सम्भवति वा न ।    \/\/अस्मिन् समस्यायां, भवन्तः एकं फलनं प्रवर्तयन्ति यत् द्वयोः संख्यासूत्राणि गृहीत्वा,    \/\/ >>> Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    \/\/ (\"YES\")\n    \/\/ >>> Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)5L, (long)3L, (long)4L})))\n    \/\/ (\"NO\")\n    \/\/ It is assumed that the input lists will be non-empty.\n    public static string Exchange(List<long> lst1, List<long> lst2) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    public static string Exchange(List<long> lst1, List<long> lst2)\n    {\n        int countOfOddsInLst1 = lst1.Count(x => x % 2 != 0);\n        int countOfEvensInLst2 = lst2.Count(x => x % 2 == 0);\n\n        return countOfOddsInLst1 <= countOfEvensInLst2 ? \"YES\" : \"NO\";\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((\"YES\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)5L, (long)3L, (long)4L}))).Equals((\"NO\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L}))).Equals((\"YES\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)5L, (long)7L, (long)3L})), (new List<long>(new long[]{(long)2L, (long)6L, (long)4L}))).Equals((\"YES\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)5L, (long)7L, (long)3L})), (new List<long>(new long[]{(long)2L, (long)6L, (long)3L}))).Equals((\"NO\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)3L, (long)2L, (long)6L, (long)1L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)3L, (long)5L, (long)5L, (long)1L, (long)1L, (long)1L}))).Equals((\"NO\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)100L, (long)200L})), (new List<long>(new long[]{(long)200L, (long)200L}))).Equals((\"YES\")));\n    }\n\n}\n"},{"task_id":"HumanEval_111","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/यदि अनेकेषु अक्षरषु समानं भवति, तदा सर्वेषु एव प्रत्ययान् लिखत।    \/\/अतः अस्य अक्षरस्य संख्याः अधिकतरं भवति।    \/\/यदि कस्यचित् अक्षरस्य अन्तर्गतं कस्यचित् अक्षरस्य अन्तर्गतं कस्यचित् अक्षरस्य अन्तर्गतं कस्यचित् अक्षरस्य अन्तर्गतं कस्यचित् अक्षरस्य अन्तर्गतं कस्यचित् अक्षरस्य अन्तर्गतं कस्यचित् अक्षरस्य अन्तर्गतं कस्यचित् अक्षरस्य अन्तर्गतं कस्यचित् अक्षरस्य अन्तर्गतं कस्यचित् अक्षरस्य अन्तर्गतं कस्यचित् अक्षरस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्य अन्तर्गतं कस्यचित् शब्दकोशस्यचित् शब्दकोशस्य अन्तर्गतं अस्ति ।    \/\/ >>> Histogram((\"a b c\"))\n    \/\/ (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}})\n    \/\/ >>> Histogram((\"a b b a\"))\n    \/\/ (new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})\n    \/\/ >>> Histogram((\"a b c a b\"))\n    \/\/ (new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})\n    \/\/ >>> Histogram((\"b b b b a\"))\n    \/\/ (new Dictionary<string,long>(){{\"b\", 4L}})\n    \/\/ >>> Histogram((\"\"))\n    \/\/ (new Dictionary<string,long>())\n    public static Dictionary<string,long> Histogram(string test) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static Dictionary<string, long> Histogram(string test) {\n        if (string.IsNullOrWhiteSpace(test)) {\n            return new Dictionary<string, long>();\n        }\n\n        var words = test.Split(' ');\n        var letterCounts = new Dictionary<string, long>();\n\n        \/\/ Count the occurrences of each letter\n        foreach (var word in words) {\n            if (letterCounts.ContainsKey(word)) {\n                letterCounts[word]++;\n            } else {\n                letterCounts[word] = 1;\n            }\n        }\n\n        \/\/ Determine the maximum count\n        long maxCount = letterCounts.Values.Max();\n\n        \/\/ Create a dictionary for letters with the maximum count\n        var result = letterCounts.Where(pair => pair.Value == maxCount)\n                                 .ToDictionary(pair => pair.Key, pair => pair.Value);\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"},{"task_id":"HumanEval_112","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्     \/\/भवता तु प्रत्ययान्तः प्राप्तः, सत्याः\/असत्यः च अस्ति ।    \/\/यदि पूर्ववत् पूर्ववत् च समानं पाठं भवति तर्हि तत् पालिन्द्रोम् इति कथ्यते ।    \/\/तदा जाँचं कुरुत यदि फलं स्ट्रिंग् प्रत्ययान्तरमस्ति।    \/\/अस्मिन् सूत्रे द्वौ वर्णसूत्रेषु s, c, भवन्तः s इत्यस्मिन् वर्णस्य समानाः सर्वे वर्णः विलोप्स्यन्ते, ये c इत्यस्मिन् वर्णस्य समानाः सन्ति ।    \/\/कार्यम्     \/\/ >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    \/\/ (Tuple.Create(\"bcd\", false))\n    \/\/ >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    \/\/ (Tuple.Create(\"acdef\", false))\n    \/\/ >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    \/\/ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string s, string c) {\n","canonical_solution":"using System;\nusing System.Linq;\n\nclass Problem {\n    public static Tuple<string, bool> ReverseDelete(string s, string c) {\n        \/\/ Remove characters from 's' that are in 'c'\n        string resultString = new string(s.Where(ch => !c.Contains(ch)).ToArray());\n        \n        \/\/ Check if the result string is a palindrome\n        bool isPalindrome = resultString.SequenceEqual(resultString.Reverse());\n\n        \/\/ Return the result string and palindrome check as a tuple\n        return Tuple.Create(resultString, isPalindrome);\n    }\n\n    \/\/ Example usage\n    static void Main(string[] args) {\n        var example1 = ReverseDelete(\"abcde\", \"ae\");\n        Console.WriteLine($\"(\\\"bcd\\\", false) == ({example1.Item1}, {example1.Item2})\");\n\n        var example2 = ReverseDelete(\"abcdef\", \"b\");\n        Console.WriteLine($\"(\\\"acdef\\\", false) == ({example2.Item1}, {example2.Item2})\");\n\n        var example3 = ReverseDelete(\"abcdedcba\", \"ab\");\n        Console.WriteLine($\"(\\\"cdedc\\\", true) == ({example3.Item1}, {example3.Item2})\");\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"},{"task_id":"HumanEval_113","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/इत्थं च इत्थं च इत्थं च इत्थं च इत्थं च इत्थं च इत्थं च इत्थं च इत्थं च इत्थं च इत्थं च इत्थं च    \/\/अत्र 'i' इत्यस्य स्थानं 'i' इत्यनेन लकारेण प्राप्नोति ।    \/\/प्रत्येकं तत्वं I आउटपुटस्य \"अनौपचारिकानां तत्वानां संख्या\" भवेत् ।    \/\/यदि कस्यचित् सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः    \/\/ >>> OddCount((new List<string>(new string[]{(string)\"1234567\"})))\n    \/\/ (new List<string>(new string[]{(string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n    \/\/ >>> OddCount((new List<string>(new string[]{(string)\"3\", (string)\"11111111\"})))\n    \/\/ (new List<string>(new string[]{(string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\n    public static List<string> OddCount(List<string> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<string> OddCount(List<string> lst)\n    {\n        List<string> result = new List<string>();\n        foreach (var str in lst)\n        {\n            int oddCount = 0;\n            foreach (var c in str)\n            {\n                if ((c - '0') % 2 != 0) \/\/ Check if the digit is odd\n                {\n                    oddCount++;\n                }\n            }\n\n            string output = $\"the number of odd elements {oddCount}n the str{oddCount}ng {oddCount} of the {oddCount}nput.\";\n            result.Add(output);\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddCount((new List<string>(new string[]{(string)\"1234567\"}))).Equals((new List<string>(new string[]{(string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))));\n    Debug.Assert(OddCount((new List<string>(new string[]{(string)\"3\", (string)\"11111111\"}))).Equals((new List<string>(new string[]{(string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))));\n    Debug.Assert(OddCount((new List<string>(new string[]{(string)\"271\", (string)\"137\", (string)\"314\"}))).Equals((new List<string>(new string[]{(string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (string)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_114","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्     \/\/नमः ।    \/\/पूर्णाङ्काणां सूची प्राप्ते, कस्यचित् न-खाली उप-सूचीयाः न्यूनतमं योगं ज्ञातव्यम् ।    \/\/ >>> Minsubarraysum((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))\n    \/\/ (1L)\n    \/\/ >>> Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L})))\n    \/\/ (-6L)\n    public static long Minsubarraysum(List<long> nums) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static long Minsubarraysum(List<long> nums) {\n        long minSum = nums[0], currentSum = nums[0];\n        \n        for (int i = 1; i < nums.Count; i++) {\n            currentSum = Math.Min(nums[i], currentSum + nums[i]);\n            minSum = Math.Min(minSum, currentSum);\n        }\n        \n        return minSum;\n    }\n\n    \/\/ Example usage\n    public static void Main() {\n        Console.WriteLine(Minsubarraysum(new List<long> { 2L, 3L, 4L, 1L, 2L, 4L })); \/\/ Output: 1L\n        Console.WriteLine(Minsubarraysum(new List<long> { -1L, -2L, -3L }));         \/\/ Output: -6L\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L}))) == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L, (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L}))) == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L, (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"},{"task_id":"HumanEval_115","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् १:     \/\/भवद्भिः कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन।    \/\/भवतां कार्यम् अस्ति यत् कुण्डं रिक्तं कर्तुम् बाल्टिनां उपयोगं करणीयम् ।    \/\/तथा च सर्व्वस्य बाल्टिः समानं क्षमता अस्ति ।    \/\/प्रत्येकं कुण्डं एकं बक्कं धारयति यस्मात् जलम् उत्कर्षयितुं शक्यते ।    \/\/प्रत्येकं 1 इति पङ्क्तिः एकं जल-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक-एक    \/\/भवद्भिः कुण्डानां चतुर्भुजः ग्रिडः प्रदत्तः। प्रत्येकं पंक्तिः एकं कुण्डं प्रतिपादयति,     \/\/ >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L))\n    \/\/ (6L)\n    \/\/ Example 2:\n    \/\/ >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L))\n    \/\/ (5L)\n    \/\/ Example 3:\n    \/\/ >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\n    \/\/ (0L)\n    \/\/ Constraints:\n    \/\/ * all wells have the same length\n    \/\/ * 1 <= grid.length <= 10^2\n    \/\/ * 1 <= grid[:,1].length <= 10^2\n    \/\/ * grid[i][j] -> 0 | 1\n    \/\/ * 1 <= capacity <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity) {\n","canonical_solution":"public static long MaxFill(List<List<long>> grid, long capacity) {\n    long operations = 0;\n\n    foreach (var row in grid) {\n        long waterUnits = row.Sum();\n        operations += waterUnits \/ capacity;\n        if (waterUnits % capacity != 0) {\n            operations++;\n        }\n    }\n\n    return operations;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"},{"task_id":"HumanEval_116","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/अस्य कार्यान्वयनं यथा-    \/\/समानसंख्याकानां संख्यायां दशमलवमूल्यस्य आधारतः वर्गीकरणं क्रियते ।    \/\/द्विवचनप्रतीकारे एकानां संख्याः वर्धमानक्रमेण भवति ।    \/\/अस्मिन् कटा-अध्याये, भवता णकारे न सन्निहितानां पूर्णाङ्काणां सूचीं क्रमणीकर्तुम् अपेक्षते।    \/\/ >>> SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    \/\/ >>> SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    \/\/ (new List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n    \/\/ >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L})))\n    \/\/ (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static List<long> SortArray(List<long> arr) {\n        return arr.OrderBy(num => CountOnesInBinary(num))\n                  .ThenBy(num => num)\n                  .ToList();\n    }\n\n    private static int CountOnesInBinary(long num) {\n        return Convert.ToString(num, 2).Count(c => c == '1');\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_117","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/नोटः भवता अनुमानः कर्तुं शक्यते यत् आगतसूत्रे केवलं अक्षरं रिक्तस्थानं च अस्ति ।    \/\/यदि string s रिक्तः अस्ति तर्हि फलनम् रिक्तसूचीम् प्रतिपादयति ।    \/\/n व्यञ्जनानि, येन एते शब्दाः s-प्रत्ययेषु विद्यन्ते ।    \/\/एकं फलनम् अस्ति यत् सर्वशब्दाः सूचीं प्रति लभते, यस्मिन् अक्षरशृङ्गाः सन्ति, यस्मिन्  इत्यनेन पाठः अस्ति ।    \/\/यदि क्तः अस्ति, तदा तस्य संख्याः n भवति।    \/\/ >>> SelectWords((\"Mary had a little lamb\"), (4L))\n    \/\/ (new List<string>(new string[]{(string)\"little\"}))\n    \/\/ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    \/\/ (new List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))\n    \/\/ >>> SelectWords((\"simple white space\"), (2L))\n    \/\/ (new List<string>())\n    \/\/ >>> SelectWords((\"Hello world\"), (4L))\n    \/\/ (new List<string>(new string[]{(string)\"world\"}))\n    \/\/ >>> SelectWords((\"Uncle sam\"), (3L))\n    \/\/ (new List<string>(new string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string s, long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<string> SelectWords(string s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s)) \n            return result;\n\n        string[] words = s.Split(' ');\n        string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\n        foreach (string word in words) {\n            int consonantCount = 0;\n            foreach (char c in word) {\n                if (consonants.Contains(c)) {\n                    consonantCount++;\n                }\n            }\n\n            if (consonantCount == n) {\n                result.Add(word);\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_118","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/अत्र केवलम् आङ्ग्लभाषायाः अक्षरं विद्यते इति भवन्तः अनुमानं करिष्यन्ति ।    \/\/उपरि स्थितौ कस्यचित् स्वरस्य मिलनं प्राप्नोति।    \/\/यदि न अस्ति तर्हि रिक्तः स्ट्रन्गः प्रतिपादयतु।    \/\/शब्दस्य दक्षिणपार्श्वे द्वौ व्यञ्जनौ (case sensitive) ।    \/\/भवद्भ् यः एकं शब्दं दत्ताः अस्ति। भवद् भ् यः कार्यम् अस्ति यत्, निकटतमं स्वरं, यस् य मध्यम् अस्ति, प्राप् नुत।    \/\/ >>> GetClosestVowel((\"yogurt\"))\n    \/\/ (\"u\")\n    \/\/ >>> GetClosestVowel((\"FULL\"))\n    \/\/ (\"U\")\n    \/\/ >>> GetClosestVowel((\"quick\"))\n    \/\/ (\"\")\n    \/\/ >>> GetClosestVowel((\"ab\"))\n    \/\/ (\"\")\n    public static string GetClosestVowel(string word) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static string GetClosestVowel(string word) {\n        if (string.IsNullOrWhiteSpace(word) || word.Length < 3) {\n            return \"\";\n        }\n        \n        HashSet<char> vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        \n        for (int i = word.Length - 2; i > 0; i--) {\n            if (vowels.Contains(word[i]) && \n                !vowels.Contains(word[i - 1]) && !vowels.Contains(word[i + 1])) {\n                return word[i].ToString();\n            }\n        }\n        return \"\";\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(GetClosestVowel(\"yogurt\")); \/\/ Output: \"u\"\n        Console.WriteLine(GetClosestVowel(\"FULL\"));   \/\/ Output: \"U\"\n        Console.WriteLine(GetClosestVowel(\"quick\"));  \/\/ Output: \"\"\n        Console.WriteLine(GetClosestVowel(\"ab\"));     \/\/ Output: \"\"\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\n}\n"},{"task_id":"HumanEval_119","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/यदि भवान् कस्यचित् प्रकारस्य अच्-प्रत्ययस्य निर्माणं कर्तुं शक्नोति तर्हि 'Yes' इति प्रतिपादयतु, अन्यथा 'No' इति प्रतिपादयतु।    \/\/\" (()) \" इति न भवति ।    \/\/उदाहरणार्थः '(((() ' इति सूत्रं उत्तमं भवति, जबकि  इति सूत्रं उत्तमम् भवति ।    \/\/यदि च केवलं यदि च S इत्यस्य सर्व्वपरिच्छेदेषु S  इति सूत्रं भवति तर्हि सः string S इत्यस्य गुणः भवति ।    \/\/ननु च, यदि कस्यचित् आदेशः भवति, तदा परिणामादिसङ्ख्या उत्तमा भवति ।    \/\/भवद्भिः कार्यम् अस्ति यत् भवद्भिः द्वयोः तारयोः सम्बद्धं कर्तुम् शक्यते ।    \/\/केवलम् \" (--) \" अथवा \" (--) \" इति कोष्ठकात् ।    \/\/भवद्भिरपि द्वयोः सूत्रयोः सूची दीयते, द्वयोः सूत्रयोः मध्ये उघारः अस्ति ।    \/\/ >>> MatchParens((new List<string>(new string[]{(string)\"()(\", (string)\")\"})))\n    \/\/ (\"Yes\")\n    \/\/ >>> MatchParens((new List<string>(new string[]{(string)\")\", (string)\")\"})))\n    \/\/ (\"No\")\n    public static string MatchParens(List<string> lst) {\n","canonical_solution":"public static string MatchParens(List<string> lst) {\n        if (lst.Count != 2) return \"No\";\n\n        string str1 = lst[0];\n        string str2 = lst[1];\n\n        \/\/ Check both possible concatenations\n        if (IsValidParentheses(str1 + str2) || IsValidParentheses(str2 + str1))\n            return \"Yes\";\n        \n        return \"No\";\n    }\n\n    private static bool IsValidParentheses(string s) {\n        int balance = 0;\n        foreach (char c in s) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false; \/\/ More closing parens than opening\n            }\n        }\n        return balance == 0;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"()(\", (string)\")\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")\", (string)\")\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(()(())\", (string)\"())())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")())\", (string)\"(()()(\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(())))\", (string)\"(()())((\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"()\", (string)\"())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(()(\", (string)\"()))()\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"((((\", (string)\"((())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")(()\", (string)\"(()(\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")(\", (string)\")(\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(\", (string)\")\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")\", (string)\"(\"}))).Equals((\"Yes\")));\n    }\n\n}\n"},{"task_id":"HumanEval_120","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् १:     \/\/दीर्घत्वे k इत्यनेन अधिकतमः k सङ्ख्याः आर्कः भवति ।    \/\/पूर्णाङ्काणां सूची आरः, धनात्मकं पूर्णाङ्कं केः च दत्त्वा, क्रमबद्धसूचीं प्रति लभेत ।    \/\/ >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n    \/\/ (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n    \/\/ Example 2:\n    \/\/ >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n    \/\/ (new List<long>(new long[]{(long)4L, (long)4L}))\n    \/\/ Example 3:\n    \/\/ >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    \/\/ (new List<long>(new long[]{(long)2L}))\n    \/\/ Note:\n    \/\/ 1. The length of the list will be in the range of [1, 1000].\n    \/\/ 2. The elements in the list will be in the range of [-1000, 1000].\n    \/\/ 3. 0 <= k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k) {\n","canonical_solution":"public static List<long> Maximum(List<long> arr, long k) {\n    return arr.OrderByDescending(n => n).Take((int)k).OrderBy(n => n).ToList();\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"},{"task_id":"HumanEval_121","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्     \/\/न च शून्यसूचीयाम् पूर्णाङ्काणां योगः परतः प्राप्नोति।    \/\/ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n    \/\/ (12L)\n    \/\/ >>> Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L})))\n    \/\/ (9L)\n    \/\/ >>> Solution((new List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    \/\/ (0L)\n    public static long Solution(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.Count; i += 2) { \/\/ Iterate over even indices\n            if (lst[i] % 2 != 0) { \/\/ Check if the element is odd\n                sum += lst[i];\n            }\n        }\n        return sum;\n    }\n    \n    static void Main() {\n        Console.WriteLine(Solution(new List<long>{5L, 8L, 7L, 1L})); \/\/ Output: 12\n        Console.WriteLine(Solution(new List<long>{3L, 3L, 3L, 3L, 3L})); \/\/ Output: 9\n        Console.WriteLine(Solution(new List<long>{30L, 13L, 24L, 321L})); \/\/ Output: 0\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n    }\n\n}\n"},{"task_id":"HumanEval_122","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/प्रथमं k अङ्कं युक्तं आकृतेः गुणानां योगः।    \/\/पूर्णाङ्कायाम् अङ्केषु च, k इत्यनेन, परतः     \/\/ >>> AddElements((new List<long>(new long[]{(long)111L, (long)21L, (long)3L, (long)4000L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})), (4L))\n    \/\/ (24L)\n    \/\/ Constraints:\n    \/\/ 1. 1 <= len(arr) <= 100\n    \/\/ 2. 1 <= k <= len(arr)\n    public static long AddElements(List<long> arr, long k) {\n","canonical_solution":"public static long AddElements(List<long> arr, long k) {\n        long sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i] >= -99 && arr[i] <= 99) {\n                sum += arr[i];\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)41L, (long)57L, (long)76L, (long)87L, (long)88L, (long)99L})), (3L)) == (-4L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)111L, (long)121L, (long)3L, (long)4000L, (long)5L, (long)6L})), (2L)) == (0L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)11L, (long)21L, (long)3L, (long)90L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})), (4L)) == (125L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)111L, (long)21L, (long)3L, (long)4000L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})), (4L)) == (24L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)1L})), (1L)) == (1L));\n    }\n\n}\n"},{"task_id":"HumanEval_123","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/get_odd_collatz(5) इत्यनेन [१, ५] इत्यस्य प्रत्ययस्य अनुक्रमः भवति [५, १६, ८, ४, २, १], अतः अप्राकृतसंख्याः केवलं १, ५ च भवन्ति ।    \/\/उदाहरणम् -    \/\/2. प्रतिपादितसूची क्रमशः वर्धते।    \/\/1. कोलाट्जः (१) इति [1] ।    \/\/टिप्पणीः     \/\/पदम्+१। अनुमानं भवति यत् n-स्य कस्य मूल्यस्य विषये अपि अनुक्रमः सदैव 1 प्राप्नोति।    \/\/यदि पूर्वपदम् अप्राप्तं भवति, तर्हि अग्रेपदम् पूर्वपदस्य त्रिगुणा भवति।    \/\/पूर्वपदम् इत्यनेन सूत्रेण लिखत- यदि पूर्वपदम् समः अस्ति, तर्हि अग्रेपदम्  इत्यस्य अर्धं भवति।    \/\/यथा - कस्यचित् धनात्मकः पूर्णाङ्कः n इत्यनेन आरम्भः। ततः प्रत्येकं पदं  इत्यस्मात् प्राप्नोति।    \/\/कोलाट्स् अनुमानः गणितस्य एकः अनुमानः अस्ति, यः एकं अनुक्रमं निर्दिष्टं करोति ।    \/\/धनात्मकं पूर्णाङ्कं n प्राप्नोति, अतः क्रमेण सूचीं प्रति लभेत, यत्र कोलाट्ज-क्रमस्य विषमसंख्याः सन्ति ।    \/\/ >>> GetOddCollatz((5L))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)5L}))\n    public static List<long> GetOddCollatz(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<long> GetOddCollatz(long n)\n    {\n        HashSet<long> oddNumbers = new HashSet<long>();\n\n        while (n != 1)\n        {\n            if (n % 2 != 0)\n            {\n                oddNumbers.Add(n);\n            }\n\n            if (n % 2 == 0)\n            {\n                n \/= 2;\n            }\n            else\n            {\n                n = 3 * n + 1;\n            }\n        }\n\n        oddNumbers.Add(1); \/\/ Add 1 to the set as per problem statement\n\n        List<long> result = new List<long>(oddNumbers);\n        result.Sort();\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetOddCollatz((14L)).Equals((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))));\n    Debug.Assert(GetOddCollatz((5L)).Equals((new List<long>(new long[]{(long)1L, (long)5L}))));\n    Debug.Assert(GetOddCollatz((12L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)5L}))));\n    Debug.Assert(GetOddCollatz((1L)).Equals((new List<long>(new long[]{(long)1L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_124","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/4. दिनाङ्कः MM-DD-YYYY इति स्वरूपेण लिखत।    \/\/3. मासानां संख्या 1 मासाः 12 मासाः च न भवेत् ।    \/\/2. मास 1,3,5,7,8,10,12 इत्यस्य कृते दिने संख्या 1 न न्यूनं वा 31 दिनं न अधिकं भवति। मास 4,6,9,11 इत्यस्य कृते दिने संख्या 1 न न्यूनं वा 30 दिनं न अधिकं भवति। मास 2 इत्यस्य कृते दिने संख्या 1 न न्यूनं वा 29 दिनं न अधिकं भवति।    \/\/1. दिनांक-श्रृङ्खला रिक्तं नास्ति।    \/\/यदि अधोलिखितानि नियमाणि सर्वे अपि पूर्णाः सन्ति तर्हि तिथिः वैधः भवति:    \/\/यदि दिनाङ्कः वैधः अस्ति तर्हि TRUE प्रत्ययस्य प्राप्तिः भवति अन्यथा FALSE प्रत्ययस्य प्राप्तिः भवति ।    \/\/भवद् भ् यः एकं फलनम् लिखत यत् एकं दिशति दिनाङ्कः    \/\/ >>> ValidDate((\"03-11-2000\"))\n    \/\/ (true)\n    \/\/ >>> ValidDate((\"15-01-2012\"))\n    \/\/ (false)\n    \/\/ >>> ValidDate((\"04-0-2040\"))\n    \/\/ (false)\n    \/\/ >>> ValidDate((\"06-04-2020\"))\n    \/\/ (true)\n    \/\/ >>> ValidDate((\"06\/04\/2020\"))\n    \/\/ (false)\n    public static bool ValidDate(string date) {\n","canonical_solution":"public static bool ValidDate(string date)\n{\n    if (string.IsNullOrEmpty(date) || date.Length != 10) return false;\n\n    string[] dateParts = date.Split('-');\n    if (dateParts.Length != 3) return false;\n\n    if (!int.TryParse(dateParts[0], out int month) || !int.TryParse(dateParts[1], out int day) || !int.TryParse(dateParts[2], out int year))\n    {\n        return false;\n    }\n\n    if (month < 1 || month > 12) return false;\n\n    if (year < 1) return false;\n\n    bool isValidDay = false;\n\n    if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day >= 1 && day <= 31)\n    {\n        isValidDay = true;\n    }\n    else if ((month == 4 || month == 6 || month == 9 || month == 11) && day >= 1 && day <= 30)\n    {\n        isValidDay = true;\n    }\n    else if (month == 2 && day >= 1 && day <= 29)\n    {\n        isValidDay = true;\n    }\n\n    return isValidDay;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_126","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्     \/\/संख्या, return false. न च ऋणात्मकं संख्या, केवलम् पूर्णाङ्कं गृहीत्वा।    \/\/यदि सूचीयां एकस्य तुल्यस्य अधिकः प्रतिलिपिः अस्ति, तर्हि अधोलिखितानि पत्राणि क्रमशः पठनीयानि भवन्तु:    \/\/संख्यायाः सूची दीयते, अतः तेषां क्रमणीकरणं करणीयम्।    \/\/ >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    \/\/ (true)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})))\n    \/\/ (true)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    \/\/ (false)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n    \/\/ (true)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    \/\/ (true)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    \/\/ (false)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    \/\/ (true)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    \/\/ (false)\n    public static bool IsSorted(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count == 0) return true;\n\n        \/\/ To store the occurrence of each number\n        var occurrences = new Dictionary<long, int>();\n\n        for (int i = 0; i < lst.Count - 1; i++) {\n            \/\/ Check if the current number is greater than the next number\n            if (lst[i] > lst[i + 1]) {\n                return false;\n            }\n\n            \/\/ Count the occurrences of each number\n            if (occurrences.ContainsKey(lst[i])) {\n                occurrences[lst[i]]++;\n            } else {\n                occurrences[lst[i]] = 1;\n            }\n\n            \/\/ If any number occurs more than twice\n            if (occurrences[lst[i]] > 2) {\n                return false;\n            }\n        }\n\n        \/\/ Check the last element in the list for more than two occurrences\n        if (occurrences.ContainsKey(lst[lst.Count - 1])) {\n            occurrences[lst[lst.Count - 1]]++;\n            if (occurrences[lst[lst.Count - 1]] > 2) {\n                return false;\n            }\n        } else {\n            occurrences[lst[lst.Count - 1]] = 1;\n        }\n\n        return true;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_127","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/[इनपुट\/आउटपुट] नमुनेः     \/\/यदि द्वयोः अन्तरालयोः अन्तः न भवति, तर्हि \"न\" प्रत्ययः प्राप्नोति।    \/\/अन्यथा \"न\" इति प्रतिपादयतु।    \/\/यदि क्रमाङ्कः अभाज्यः अस्ति, तर्हि \"YES\" प्रत्ययः प्राप्नोति,     \/\/तस्य दीर्घत्वं १, यस्मात् इदम् अभाज्यसंख्यम् न भवति ।    \/\/उदाहरणम् - अन्तरालानां (1, 3), (2, 4) अन्तरालानां अन्तरालः (2, 3) ।    \/\/अन्तरालः एकं प्रधानं संख्या अस्ति ।    \/\/भवतां कार्यम् अस्ति यत् भवतां कार्यम् इदम् निर्धारयितुं अस्ति यत् इदम् द्वयोः अन्तःकरणस्य लम्बाई अस्ति वा नास्ति ।    \/\/प्रत्येकं दिशन्तरालं तस्य आरम्भः तस्य अन्ते वा लघुः भवति इति गृहीतम् ।    \/\/अत्र आरम्भः समाप्तः च समाविष्टः अस्ति ।    \/\/अत्र अन्तरालः समाहितः अस्ति, अतः अन्तरालः (प्रारम्भः, अन्तः)     \/\/अत्र प्रत्येकं अन्तरालः पूर्णाङ्काणां जोडी भवति। उदाहरणार्थम् अन्तरालः = (प्रारम्भः, अन्तः) = (1, 2) ।    \/\/भवद्भिरुच्यते द्वौ अन्तरालौ,     \/\/ >>> Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(2L, 3L)))\n    \/\/ (\"NO\")\n    \/\/ >>> Intersection((Tuple.Create(-1L, 1L)), (Tuple.Create(0L, 4L)))\n    \/\/ (\"NO\")\n    \/\/ >>> Intersection((Tuple.Create(-3L, -1L)), (Tuple.Create(-5L, 5L)))\n    \/\/ (\"YES\")\n    public static string Intersection(Tuple<long, long> interval1, Tuple<long, long> interval2) {\n","canonical_solution":"long start1 = interval1.Item1;\n    long end1 = interval1.Item2;\n    long start2 = interval2.Item1;\n    long end2 = interval2.Item2;\n\n    long intersectStart = Math.Max(start1, start2);\n    long intersectEnd = Math.Min(end1, end2);\n\n    if (intersectStart > intersectEnd) {\n        return \"NO\";\n    }\n\n    long intersectionLength = intersectEnd - intersectStart + 1;\n\n    if (IsPrime(intersectionLength)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\nprivate static bool IsPrime(long number) {\n    if (number < 2) return false;\n    if (number == 2) return true;\n    if (number % 2 == 0) return false;\n\n    long boundary = (long)Math.Floor(Math.Sqrt(number));\n\n    for (long i = 3; i <= boundary; i += 2) {\n        if (number % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(2L, 3L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-1L, 1L)), (Tuple.Create(0L, 4L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-3L, -1L)), (Tuple.Create(-5L, 5L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L, 2L)), (Tuple.Create(-4L, 0L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-11L, 2L)), (Tuple.Create(-1L, -1L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(3L, 5L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(1L, 2L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L, -2L)), (Tuple.Create(-3L, -2L))).Equals((\"NO\")));\n    }\n\n}\n"},{"task_id":"HumanEval_128","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/टिप्पणीः रिक्त आर्कस्य कृते शून्यम् प्रतिपादयतु।    \/\/सूचीषु प्रत्येकं संख्याः १, -१, ० इति प्रतिपादितम् अस्ति ।    \/\/पूर्णाङ्काणां परिमाणानां योगः सर्वसंज्ञाणां गुणनफलैः गुणितः।    \/\/भवद्भिरुपादानं पूर्णाङ्कं भवति, अतः भवद्भिरुपादानं करणीयम् ।    \/\/ >>> ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    \/\/ 9L\n    \/\/ >>> ProdSigns((new List<long>(new long[]{(long)0L, (long)1L})))\n    \/\/ 0L\n    \/\/ >>> ProdSigns((new List<long>()))\n    \/\/ null\n    public static Nullable<long> ProdSigns(List<long> arr) {\n","canonical_solution":"public static Nullable<long> ProdSigns(List<long> arr) {\n        if (arr == null || arr.Count == 0) return null;\n\n        long sumOfMagnitudes = 0;\n        long productOfSigns = 1;\n\n        foreach (var num in arr) {\n            sumOfMagnitudes += Math.Abs(num);\n\n            if (num > 0) {\n                productOfSigns *= 1;\n            } else if (num < 0) {\n                productOfSigns *= -1;\n            } else {\n                productOfSigns = 0;\n                break;\n            }\n        }\n\n        return sumOfMagnitudes * productOfSigns;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"},{"task_id":"HumanEval_129","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/कक्षानां मूल्यानां क्रमबद्धसूचीं प्रतिपादयति यानि कक्षानां न्यूनतममार्गः गच्छति ।    \/\/उत्तरं एकमेव इति निश्चितम् अस्ति ।    \/\/lst_A[j] = lst_B[j] ।    \/\/अतः इत्थं भवति यत् lst_A[i] < lst_B[i] च कस्यचित् j (1 <= j < i) कृते अस्मिन्     \/\/lst_B-संख्ययाम्+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपि+अपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपिअपि    \/\/(तान् lst_A तथा lst_B इति नामनिर्दिष्टं) lst_A इत्यनेन शब्दकोशस्य संख्या न्यूनम् अस्ति ।    \/\/कक्षानां मूल्यानां क्रमबद्धसूचीं कृत्वा, ए, बी, ए, बी, ए, बी, ए, बी, ए, बी, ए, बी, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए, ए।    \/\/यदि कम्पाउण्डः कम्पाउण्डः भवति, तदा कम्पाउण्डः कम्पाउण्डः भवति ।    \/\/भवन् तः न गन्तुं शक् नुयुः।    \/\/न चैवम्) ।    \/\/कृपया विवक्षितं यत् k-लम्बायां पथस्य अर्थः अस्ति यत् k-कोशिकायां (न तु     \/\/ण्वुल्    \/\/अन्यत्र च, भवन्तः तेषु कोष्ठेषु गन्तुं शक्नुवन्ति, येषु भवतां वर्तमानाः कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन कानिचन।    \/\/कस्यचित् कक्षस्य, प्रत्येकं चरणं भवद्भिः कस्यचित् समीपस्थ कक्षं प्रति गन्तुं शक्यते,     \/\/भवन्तः ग्रिडस्य लघुतमं पथं k लम्बं ज्ञातुं शक्नुवन्ति।    \/\/समावेशेन ग्रिडस्य कोष्ठेषु एकवारं एव दृश्यते ।    \/\/प्रत्येकं कक्षं एकं मूल्यम् अन्तर्भवति। [१, एन * एन] इत्यस्य अन्तर्गतस्य प्रत्येकं पूर्णाङ्कः अस्ति।    \/\/N पंक्तीनां N स्तम्भानां च (N >= 2) च धनात्मकं पूर्णाङ्कं k,     \/\/ >>> Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})})), (3L))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))\n    \/\/ >>> Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)9L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)2L})})), (1L))\n    \/\/ (new List<long>(new long[]{(long)1L}))\n    public static List<long> Minpath(List<List<long>> grid, long k) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> Minpath(List<List<long>> grid, long k) {\n        int n = grid.Count;\n        List<long> result = new List<long>();\n        long[,] dp = new long[n, n];\n        (int, int)[,] parent = new (int, int)[n, n];\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i, j] = long.MaxValue;\n            }\n        }\n\n        var directions = new List<(int, int)>() { (0, 1), (1, 0), (0, -1), (-1, 0) };\n        SortedSet<(long, int, int)> pq = new SortedSet<(long, int, int)>((a, b) => a.Item1 == b.Item1 ? (a.Item2 == b.Item2 ? a.Item3.CompareTo(b.Item3) : a.Item2.CompareTo(b.Item2)) : a.Item1.CompareTo(b.Item1));\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i, j] = grid[i][j];\n                pq.Add((grid[i][j], i, j));\n            }\n        }\n\n        while (pq.Count > 0) {\n            var curr = pq.Min;\n            pq.Remove(curr);\n            long currValue = curr.Item1;\n            int x = curr.Item2;\n            int y = curr.Item3;\n\n            foreach (var dir in directions) {\n                int newX = x + dir.Item1;\n                int newY = y + dir.Item2;\n                if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                    long newCost = currValue + grid[newX][newY];\n                    if (dp[newX, newY] > newCost) {\n                        if (dp[newX, newY] != long.MaxValue) {\n                            pq.Remove((dp[newX, newY], newX, newY));\n                        }\n                        dp[newX, newY] = newCost;\n                        parent[newX, newY] = (x, y);\n                        pq.Add((dp[newX, newY], newX, newY));\n                    }\n                }\n            }\n        }\n\n        (int, int) end = (0, 0);\n        long minPathSum = long.MaxValue;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (minPathSum > dp[i, j]) {\n                    minPathSum = dp[i, j];\n                    end = (i, j);\n                }\n            }\n        }\n\n        Stack<long> pathStack = new Stack<long>();\n        (int, int) node = end;\n        for (int step = 0; step < k; step++) {\n            pathStack.Push(grid[node.Item1][node.Item2]);\n            node = parent[node.Item1, node.Item2];\n        }\n\n        while (pathStack.Count > 0) {\n            result.Add(pathStack.Pop());\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})})), (3L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)9L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)2L})})), (1L)).Equals((new List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L}), (List<long>)new List<long>(new long[]{(long)13L, (long)14L, (long)15L, (long)16L})})), (4L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)13L, (long)10L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L, (long)12L, (long)1L}), (List<long>)new List<long>(new long[]{(long)3L, (long)16L, (long)11L, (long)15L}), (List<long>)new List<long>(new long[]{(long)8L, (long)14L, (long)9L, (long)2L})})), (7L)).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)1L, (long)10L, (long)1L, (long)10L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)14L, (long)9L, (long)2L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)13L, (long)15L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)12L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L, (long)11L, (long)16L})})), (5L)).Equals((new List<long>(new long[]{(long)1L, (long)7L, (long)1L, (long)7L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)11L, (long)8L, (long)7L, (long)2L}), (List<long>)new List<long>(new long[]{(long)5L, (long)16L, (long)14L, (long)4L}), (List<long>)new List<long>(new long[]{(long)9L, (long)3L, (long)15L, (long)6L}), (List<long>)new List<long>(new long[]{(long)12L, (long)13L, (long)10L, (long)1L})})), (9L)).Equals((new List<long>(new long[]{(long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)12L, (long)13L, (long)10L, (long)1L}), (List<long>)new List<long>(new long[]{(long)9L, (long)3L, (long)15L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)16L, (long)14L, (long)4L}), (List<long>)new List<long>(new long[]{(long)11L, (long)8L, (long)7L, (long)2L})})), (12L)).Equals((new List<long>(new long[]{(long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)1L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)8L, (long)9L})})), (8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)1L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)4L})})), (8L)).Equals((new List<long>(new long[]{(long)1L, (long)5L, (long)1L, (long)5L, (long)1L, (long)5L, (long)1L, (long)5L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L})})), (10L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L, (long)1L, (long)2L, (long)1L, (long)2L, (long)1L, (long)2L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)3L, (long)2L})})), (10L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_130","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/प्रथमं n + 1 संख्या त्रिबोनक्की-क्रमस्य अस्ति ।    \/\/यदि भवता अकारान्तरसंख्या n दीयते, तर्हि भवता  इत्यस्य सूची परावर्त्तनीया अस्ति    \/\/= 2 + 3 + 3 = 8     \/\/त्रिः (३) = त्रिः (२) + त्रिः (१) + त्रिः (४)    \/\/त्रि ((4) = 3 ।    \/\/त्रिः (२) = १ + (२ \/ २) = २ ।    \/\/उदाहरणम् -    \/\/त्र्यन्ताङ्कः = त्र्यन्ताङ्कः - १ + त्र्यन्ताङ्कः - २ + त्र्यन्ताङ्कः - १, यदि n अस्वाभाविकः अस्ति।    \/\/त्रि (n) = 1 + n \/ 2, यदि n समः अस्ति।    \/\/त्रिः (१) = ३    \/\/त्रिबोनाची-क्रमः पुनः पुनरावृत्तिरूपेण परिभाषितः अस्ति:    \/\/तथापि, जनैः त्रिबोनाची-अनुक्रमः न ज्ञातः।    \/\/सर्वे जनाः फिबोनाची-क्रमेण परिचिताः, गणितज्ञैः १९६० तमे वर्षे अस्य गहनं अध्ययनं कृतम् ।    \/\/ >>> Tri((3L))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long> Tri(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<long> Tri(long n)\n    {\n        List<long> tribonacci = new List<long>(new long[n + 1]);\n\n        for (long i = 0; i <= n; i++)\n        {\n            if (i == 0)\n                tribonacci[(int)i] = 1;\n            else if (i == 1)\n                tribonacci[(int)i] = 3;\n            else if (i % 2 == 0)\n                tribonacci[(int)i] = 1 + i \/ 2;\n            else\n                tribonacci[(int)i] = tribonacci[(int)(i - 1)] + tribonacci[(int)(i - 2)] + tribonacci[(int)(i + 1)];\n        }\n        \n        return tribonacci;\n    }\n    \n    static void Main(string[] args)\n    {\n        \/\/ Example usage:\n        Console.WriteLine(string.Join(\", \", Tri(3)));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_131","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/यदि सर्वेषां अङ्कं समं भवति तर्हि 0 इत्यस्य प्रतिफलं ददाति।    \/\/धनात्मकं पूर्णाङ्कं n प्राप्नोति, अतः विषमसंख्यानां गुणनफलम् लभेत।    \/\/ >>> Digits((1L))\n    \/\/ (1L)\n    \/\/ >>> Digits((4L))\n    \/\/ (0L)\n    \/\/ >>> Digits((235L))\n    \/\/ (15L)\n    public static long Digits(long n) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long Digits(long n) {\n        long product = 1;\n        bool hasOdd = false;\n\n        while (n > 0) {\n            long digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOdd = true;\n            }\n            n \/= 10;\n        }\n\n        return hasOdd ? product : 0;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(Digits(1L));    \/\/ Output: 1\n        Console.WriteLine(Digits(4L));    \/\/ Output: 0\n        Console.WriteLine(Digits(235L));  \/\/ Output: 15\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"},{"task_id":"HumanEval_132","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/यत्र कमतः एकः क्रमेण उपसङ्ख्यानं भवति ।    \/\/यदि च केवलम् कण्ठस्थानां वैधः उपसङ्ख्यानं भवति तर्हि फलनम् सत्यम् प्रतिपादयति ।    \/\/अत्र केवलम् वर्गस्य कोष्ठकं युक्तं क्तस्य क्तस्य इङ्पुटं गृह्णाति ।    \/\/ >>> IsNested((\"[[]]\"))\n    \/\/ (true)\n    \/\/ >>> IsNested((\"[]]]]]]][[[[[]\"))\n    \/\/ (false)\n    \/\/ >>> IsNested((\"[][]\"))\n    \/\/ (false)\n    \/\/ >>> IsNested((\"[]\"))\n    \/\/ (false)\n    \/\/ >>> IsNested((\"[[][]]\"))\n    \/\/ (true)\n    \/\/ >>> IsNested((\"[[]][[\"))\n    \/\/ (true)\n    public static bool IsNested(string str) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static bool IsNested(string str) {\n        Stack<char> stack = new Stack<char>();\n        bool hasNested = false;\n        \n        foreach (char ch in str) {\n            if (ch == '[') {\n                stack.Push(ch);\n            } else if (ch == ']') {\n                if (stack.Count > 0) {\n                    stack.Pop();\n                    hasNested = true;\n                } else {\n                    return false; \/\/ More closing brackets than opening\n                }\n            }\n\n            \/\/ Check for nesting\n            if (stack.Count > 1) {\n                hasNested = true;\n            }\n        }\n        \n        return stack.Count == 0 && hasNested;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNested((\"[[]]\")) == (true));\n    Debug.Assert(IsNested((\"[]]]]]]][[[[[]\")) == (false));\n    Debug.Assert(IsNested((\"[][]\")) == (false));\n    Debug.Assert(IsNested((\"[]\")) == (false));\n    Debug.Assert(IsNested((\"[[[[]]]]\")) == (true));\n    Debug.Assert(IsNested((\"[]]]]]]]]]]\")) == (false));\n    Debug.Assert(IsNested((\"[][][[]]\")) == (true));\n    Debug.Assert(IsNested((\"[[]\")) == (false));\n    Debug.Assert(IsNested((\"[]]\")) == (false));\n    Debug.Assert(IsNested((\"[[]][[\")) == (true));\n    Debug.Assert(IsNested((\"[[][]]\")) == (true));\n    Debug.Assert(IsNested((\"\")) == (false));\n    Debug.Assert(IsNested((\"[[[[[[[[\")) == (false));\n    Debug.Assert(IsNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_133","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/प्रत्येकं तत्वं प्रथमं उपरि इण्ट्-अङ्कं (Intr-A-List) (Intr-A-List) (Intr-A-List) (Intr-A-List) (Intr-A-List) (Intr-A-List) (Intr-A-List) इति वर्णाभ्यां परिमण्डलं कुर्वन्तु ।    \/\/भवद्भिः सूचीमध्ये स्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्क्वायरस्    \/\/भवद्भिः संख्यासूची प्रदत्तम् अस्ति ।    \/\/ >>> Lst((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    \/\/ (14L)\n    \/\/ >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    \/\/ (98L)\n    \/\/ >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\n    \/\/ (84L)\n    \/\/ >>> Lst((new List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    \/\/ (29L)\n    \/\/ >>> Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    \/\/ (6L)\n    public static long SumSquares(List<float> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static long SumSquares(List<float> lst)\n    {\n        long sum = 0;\n        foreach (float num in lst)\n        {\n            int roundedNum = (int)Math.Ceiling(num);\n            sum += (long)(roundedNum * roundedNum);\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"},{"task_id":"HumanEval_134","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/\"शब्दः\" इत्यत्र वर्णानां समूहः अस्ति, यानि स्थानद्वारा पृथक्कृतानि सन्ति ।    \/\/शब्दस्य अंशः, अन्यथा मिथ्या।    \/\/अकारस्य वर्णः अस्ति, न तु  इति    \/\/यदि अन्तिमः अक्षरः  अस्ति तर्हि फलनम् इदम् प्रतिपादयतु    \/\/ >>> CheckIfLastCharIsALetter((\"apple pie\"))\n    \/\/ (false)\n    \/\/ >>> CheckIfLastCharIsALetter((\"apple pi e\"))\n    \/\/ (true)\n    \/\/ >>> CheckIfLastCharIsALetter((\"apple pi e \"))\n    \/\/ (false)\n    \/\/ >>> CheckIfLastCharIsALetter((\"\"))\n    \/\/ (false)\n    public static bool CheckIfLastCharIsALetter(string txt) {\n","canonical_solution":"public static bool CheckIfLastCharIsALetter(string txt) {\n        if (string.IsNullOrWhiteSpace(txt)) {\n            return false;\n        }\n\n        txt = txt.Trim();\n        if (txt.Length == 0) {\n            return false;\n        }\n\n        int lastIndex = txt.Length - 1;\n        char lastChar = txt[lastIndex];\n\n        if (!char.IsLetter(lastChar)) {\n            return false;\n        }\n\n        if (lastIndex == 0 || char.IsWhiteSpace(txt[lastIndex - 1])) {\n            return true;\n        }\n\n        return false;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple pi e\")) == (true));\n    Debug.Assert(CheckIfLastCharIsALetter((\"eeeee\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"A\")) == (true));\n    Debug.Assert(CheckIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"eeeee e \")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple pie\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_135","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/न द्वित्वं विद्यते।    \/\/न हि तत्सन्निधौ तत्सन्निधौ पुनः परावर्त्तते -१।    \/\/न तु तत्पूर्वं तत्समानं वा तत्समानम्। यदि     \/\/कस्यचित् अवयवस्य सर्वतः अधिकं सूचकं प्रतिपादयितुं एकं फलनं निर्मितव्यम्    \/\/ >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    \/\/ (3L)\n    \/\/ >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (-1L)\n    public static long CanArrange(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Create a function which returns the largest index of an element which\n    \/\/ is not greater than or equal to the element immediately preceding it.\n    \/\/ If no such element exists, then return -1.\n    public static long CanArrange(List<long> arr) {\n        for (int i = arr.Count - 1; i > 0; i--) {\n            if (arr[i] < arr[i - 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"},{"task_id":"HumanEval_136","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/यदि न अस्ति, तर्हि शून्यरूपेण परावर्त्तनं कुरुत    \/\/धनात्मकं पूर्णाङ्कं सूचीषु लभ्यते।    \/\/अतः \"b\" इत्यस्य लघुतमः गुणः भवति ।    \/\/'a' इत्यत्र 'a, b' इत्यस्य ट्यूप्ले (tuple) इत्यस्य प्रतिफलं ददाति ।    \/\/ >>> LargestSmallestIntegers((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L})))\n    \/\/ Tuple.Create((Nullable<long>)null, 1L)\n    \/\/ >>> LargestSmallestIntegers((new List<long>()))\n    \/\/ Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    \/\/ >>> LargestSmallestIntegers((new List<long>(new long[]{(long)0L})))\n    \/\/ Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    public static Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst) {\n","canonical_solution":"public static Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst) {\n        Nullable<long> largestNegative = null;\n        Nullable<long> smallestPositive = null;\n\n        foreach (var number in lst) {\n            if (number < 0) {\n                if (largestNegative == null || number > largestNegative) {\n                    largestNegative = number;\n                }\n            } else if (number > 0) {\n                if (smallestPositive == null || number < smallestPositive) {\n                    smallestPositive = number;\n                }\n            }\n        }\n\n        return Tuple.Create(largestNegative, smallestPositive);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L, (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L, 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L, (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L, 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L, (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L, (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n    }\n\n}\n"},{"task_id":"HumanEval_138","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्     \/\/यदि दीयते तर्हि चतुर्णां समानां संख्याणां योगः भवति ।    \/\/ >>> IsEqualToSumEven((4L))\n    \/\/ (false)\n    \/\/ >>> IsEqualToSumEven((6L))\n    \/\/ (false)\n    \/\/ >>> IsEqualToSumEven((8L))\n    \/\/ (true)\n    public static bool IsEqualToSumEven(long n) {\n","canonical_solution":"using System;\n\nclass Problem {\n    \/\/ Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    public static bool IsEqualToSumEven(long n) {\n        \/\/ Check if n is at least the sum of the smallest 4 positive even numbers (2 + 2 + 2 + 2 = 8)\n        return n >= 8 && n % 2 == 0;\n    }\n    \n    static void Main() {\n        Console.WriteLine(IsEqualToSumEven(4L));  \/\/ false\n        Console.WriteLine(IsEqualToSumEven(6L));  \/\/ false\n        Console.WriteLine(IsEqualToSumEven(8L));  \/\/ true\n        Console.WriteLine(IsEqualToSumEven(10L)); \/\/ true\n        Console.WriteLine(IsEqualToSumEven(12L)); \/\/ true\n        Console.WriteLine(IsEqualToSumEven(15L)); \/\/ false\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsEqualToSumEven((4L)) == (false));\n    Debug.Assert(IsEqualToSumEven((6L)) == (false));\n    Debug.Assert(IsEqualToSumEven((8L)) == (true));\n    Debug.Assert(IsEqualToSumEven((10L)) == (true));\n    Debug.Assert(IsEqualToSumEven((11L)) == (false));\n    Debug.Assert(IsEqualToSumEven((12L)) == (true));\n    Debug.Assert(IsEqualToSumEven((13L)) == (false));\n    Debug.Assert(IsEqualToSumEven((16L)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_139","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/यत्र n > 0     \/\/brazilian_factorial (n) = n! * (n-1)! * (n-2)! * ... * 1!     \/\/ब्राजीलस्य कारकान्तः इत्यनेन परिभाषितः अस्ति:     \/\/ >>> SpecialFactorial((4L))\n    \/\/ (288L)\n    \/\/ The function will receive an integer as input and should return the special\n    \/\/ factorial of this integer.\n    public static long SpecialFactorial(long n) {\n","canonical_solution":"using System;\nusing System.Numerics;\n\nclass Problem {\n    public static long SpecialFactorial(long n) {\n        if (n <= 0)\n            throw new ArgumentException(\"n must be greater than 0\");\n        \n        BigInteger brazilianFactorial = 1;\n        \n        for (long i = 1; i <= n; i++) {\n            brazilianFactorial *= Factorial(i);\n        }\n        \n        return (long)brazilianFactorial;\n    }\n    \n    private static BigInteger Factorial(long num) {\n        BigInteger result = 1;\n        for (long i = 1; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"},{"task_id":"HumanEval_140","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ततः सर्वान् अनुक्रमिकान् रिक्तस्थानान् प्रतिस्थापयतु -     \/\/यदि च सूत्रस्य द्वयोः क्रमेण स्थानयोः अधिकः अस्ति,     \/\/पाठस्य शृङ्गारं दत्वा, तस्य सर्वानि रिक्तस्थानानि अधोलिखितानि अक्षरैः प्रतिपाद्यताम्,     \/\/ >>> FixSpaces((\" Example\"))\n    \/\/ (\"Example\")\n    \/\/ >>> FixSpaces((\" Example 1\"))\n    \/\/ (\"Example_1\")\n    \/\/ >>> FixSpaces((\" Example 2\"))\n    \/\/ (\"_Example_2\")\n    \/\/ >>> FixSpaces((\" Example 3\"))\n    \/\/ (\"_Example-3\")\n    public static string FixSpaces(string text) {\n","canonical_solution":"public static string FixSpaces(string text) {\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n                spaceCount++;\n            } else {\n                if (spaceCount > 2) {\n                    result.Append('-');\n                } else {\n                    for (int j = 0; j < spaceCount; j++) {\n                        result.Append('_');\n                    }\n                }\n                result.Append(text[i]);\n                spaceCount = 0;\n            }\n        }\n\n        if (spaceCount > 2) {\n            result.Append('-');\n        } else {\n            for (int j = 0; j < spaceCount; j++) {\n                result.Append('_');\n            }\n        }\n\n        return result.ToString();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"},{"task_id":"HumanEval_141","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/- उप-सङ्ख्यानं विन्दु-सङ्ख्यानं पश्चात् इदम् एकः भवेत्: ['txt', 'exe', 'dll']     \/\/लातिनि वर्णमाला (अ-ज्, अ-ज्) ।    \/\/- उप-सङ्ख्यानं पूर्वं न तु रिक्तं भवेत्, तथा च अस्य आरम्भः  इत्यनेन अक्षरेण भवति    \/\/- फाइलस्य नाम्ने एकं बिन्दुः अस्ति '.'    \/\/- फाइल नामस्य नामत्रयेषु अधिकं संख्या नास्ति ('0'-'9') ।    \/\/पूर्यन्ते:     \/\/यदि च केवलं यदि सर्वेषु अधोलिखितानि शर्तेषु विद्यन्ते तर्हि संचिकायाः नाम वैधः इति मन्यते ।    \/\/यदि संचिकायाः नाम वैधं भवति तर्हि 'Yes' इति, अन्यथा 'No' इति च लभ्यते ।    \/\/एकं फलनम् निर्मितव्यम्, यत् फाइलस्य नामं प्रतिपादयति, तथा च  इत्यस्य प्रतिफलम् ददाति ।    \/\/ >>> FileNameCheck((\"example.txt\"))\n    \/\/ (\"Yes\")\n    \/\/ >>> FileNameCheck((\"1example.dll\"))\n    \/\/ (\"No\")\n    public static string FileNameCheck(string file_name) {\n","canonical_solution":"using System;\nusing System.Text.RegularExpressions;\n\nclass Problem {\n    public static string FileNameCheck(string file_name) {\n        \/\/ Regular expression to validate the file name\n        string pattern = @\"^[a-zA-Z][^.]*\\.[^.]+$\";\n        \n        \/\/ Check if there is exactly one dot and matches the overall pattern\n        if (Regex.IsMatch(file_name, pattern)) {\n            string[] parts = file_name.Split('.');\n            \n            \/\/ Check if the file extension is one of the allowed values\n            if (new[] { \"txt\", \"exe\", \"dll\" }.Contains(parts[1])) {\n                \/\/ Count the number of digits in the file name\n                int digitCount = file_name.Count(char.IsDigit);\n                \n                \/\/ Validate the digit count\n                if (digitCount <= 3) {\n                    return \"Yes\";\n                }\n            }\n        }\n        \n        return \"No\";\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\/this_is_valid.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"},{"task_id":"HumanEval_142","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/यदि इदम् सूत्रम् न भवति, तर्हि इदम् सूत्रं पुनः पुनः लिखत, अतः इदम् सूत्रं पुनः लिखत, अतः इदम् सूत्रं पुनः लिखत, अतः इदम् सूत्रं पुनः लिखत।    \/\/यदि तस्य सूचकाङ्कः 4 इत्यस्य गुणकः न तु 3 इत्यस्य गुणकः अस्ति तर्हि सः पूर्णाङ्कः प्रविष्टः भवति, एवं 3 इत्यस्य गुणकः भवति।    \/\/यदि इण्डेक्सः अ  भवति, तदा इण्डेक्सः पूर्णाङ्कः भवति।    \/\/\"     \/\/ >>> lst\n    \/\/ (long)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})\n    \/\/ >>> lst\n    \/\/ (long)new List<long>()\n    \/\/ >>> lst\n    \/\/ (long)new List<long>(new long[]{(long)-1L, (long)-5L, (long)2L, (long)-1L, (long)-5L})\n    public static long SumSquares(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static long SumSquares(List<long> lst)\n    {\n        for (int i = 0; i < lst.Count; i++)\n        {\n            if (i % 3 == 0)\n            {\n                lst[i] = lst[i] * lst[i];\n            }\n            else if (i % 4 == 0)\n            {\n                lst[i] = lst[i] * lst[i] * lst[i];\n            }\n        }\n        long sum = 0;\n        foreach (long number in lst)\n        {\n            sum += number;\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (6L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)1L, (long)4L, (long)9L}))) == (14L));\n    Debug.Assert(SumSquares((new List<long>())) == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L}))) == (9L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L}))) == (-3L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)0L}))) == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-5L, (long)2L, (long)-1L, (long)-5L}))) == (-126L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-56L, (long)-99L, (long)1L, (long)0L, (long)-2L}))) == (3030L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)-1L}))) == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-16L, (long)-9L, (long)-2L, (long)36L, (long)36L, (long)26L, (long)-20L, (long)25L, (long)-40L, (long)20L, (long)-4L, (long)12L, (long)-26L, (long)35L, (long)37L}))) == (-14196L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-3L, (long)17L, (long)-1L, (long)-15L, (long)13L, (long)-1L, (long)14L, (long)-14L, (long)-12L, (long)-5L, (long)14L, (long)-14L, (long)6L, (long)13L, (long)11L, (long)16L, (long)16L, (long)4L, (long)10L}))) == (-1448L));\n    }\n\n}\n"},{"task_id":"HumanEval_143","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् १:     \/\/ननु शब्दानां क्रमः मूलशब्दानां क्रमस्य अनुरूपः भवेत् ।    \/\/यस्मै दीर्घः प्रथमाङ्कः अस्ति,    \/\/तथा च मूलवाक्येषु शब्दानां समावेशं कृत्वा,     \/\/वाक्यस्य अन्तर्गतं कानिचन शब्दानि सन्ति, येषु रिक्तस्थानं विधीयते,     \/\/भवद्भिरपि वाक्यस्य सङ्ख्यायाम् एकं सूत्रं दत्ता अस्ति,    \/\/ >>> WordsInSentence((\"This is a test\"))\n    \/\/ (\"is\")\n    \/\/ Example 2:\n    \/\/ >>> WordsInSentence((\"lets go for swimming\"))\n    \/\/ (\"go for\")\n    \/\/ Constraints:\n    \/\/ * 1 <= len(sentence) <= 100\n    \/\/ * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static string WordsInSentence(string sentence) {\n        bool IsPrime(int number) {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            for (int i = 2; i * i <= number; i++) {\n                if (number % i == 0) return false;\n            }\n            return true;\n        }\n\n        string[] words = sentence.Split(' ');\n        List<string> primeLengthWords = new List<string>();\n\n        foreach (string word in words) {\n            if (IsPrime(word.Length)) {\n                primeLengthWords.Add(word);\n            }\n        }\n\n        return string.Join(\" \", primeLengthWords);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"},{"task_id":"HumanEval_144","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/भवद्भिः अनुमानं कर्तुं शक्यते यत् x, तथा n इत्य् अव्ययीभावः अस्ति, तथा च शून्यम् उदात्तं नास्ति।    \/\/<numerator>\/<denominator> यत्र संख्याकारः तथा नामकारः अपि धनात्मकः पूर्णाङ्कः भवति।    \/\/अन्यथा, x तथा n, द्वयोः च भिन्नानां संख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः।    \/\/x * n. यदि x * n इत्यस्य मूल्यम् पूर्णाङ्कः भवति, तथा false  इति भवति तर्हि फलनम् सत्यं प्रति परावर्त्तयति.    \/\/भवतां कार्यम् अस्ति यत् एकं फलनं निर्मातुं यत् इदम् अभिव्यक्तिम् सरलं करिष्यति ।    \/\/ >>> Simplify((\"1\/5\"), (\"5\/1\"))\n    \/\/ (true)\n    \/\/ >>> Simplify((\"1\/6\"), (\"2\/1\"))\n    \/\/ (false)\n    \/\/ >>> Simplify((\"7\/10\"), (\"10\/2\"))\n    \/\/ (false)\n    public static bool Simplify(string x, string n) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static bool Simplify(string x, string n) {\n        var xParts = x.Split('\/');\n        var nParts = n.Split('\/');\n        \n        int xNumerator = int.Parse(xParts[0]);\n        int xDenominator = int.Parse(xParts[1]);\n        \n        int nNumerator = int.Parse(nParts[0]);\n        int nDenominator = int.Parse(nParts[1]);\n        \n        \/\/ Calculate the resulting fraction for x * n\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n        \n        \/\/ Simplify the fraction by finding the gcd\n        int gcd = GCD(resultNumerator, resultDenominator);\n        resultNumerator \/= gcd;\n        resultDenominator \/= gcd;\n        \n        \/\/ It is a whole number if the simplified denominator is 1\n        return resultDenominator == 1;\n    }\n    \n    private static int GCD(int a, int b) {\n        while (b != 0) {\n            int t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    Debug.Assert(Simplify((\"1\/6\"), (\"2\/1\")) == (false));\n    Debug.Assert(Simplify((\"5\/1\"), (\"3\/1\")) == (true));\n    Debug.Assert(Simplify((\"7\/10\"), (\"10\/2\")) == (false));\n    Debug.Assert(Simplify((\"2\/10\"), (\"50\/10\")) == (true));\n    Debug.Assert(Simplify((\"7\/2\"), (\"4\/2\")) == (true));\n    Debug.Assert(Simplify((\"11\/6\"), (\"6\/1\")) == (true));\n    Debug.Assert(Simplify((\"2\/3\"), (\"5\/2\")) == (false));\n    Debug.Assert(Simplify((\"5\/2\"), (\"3\/5\")) == (false));\n    Debug.Assert(Simplify((\"2\/4\"), (\"8\/4\")) == (true));\n    Debug.Assert(Simplify((\"2\/4\"), (\"4\/2\")) == (true));\n    Debug.Assert(Simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    Debug.Assert(Simplify((\"1\/5\"), (\"1\/5\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_145","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/मूलसूचीयां तेषां सूचकाङ्के आधारेण क्रमेण विधीयताम् ।    \/\/यदि अनेकानि पदानि सन्ति, तदा तेषां संख्यायाः योगः समानः भवति,     \/\/तेषां संख्यायाः योगानुसारं वर्धमान क्रमेण।    \/\/एकं फलनम् लिखत, यं पूर्णाङ्काणां सूचीं विसर्जयति।    \/\/ >>> OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n    \/\/ (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))\n    \/\/ >>> OrderByPoints((new List<long>()))\n    \/\/ (new List<long>())\n    public static List<long> OrderByPoints(List<long> nums) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    public static List<long> OrderByPoints(List<long> nums)\n    {\n        return nums.Select((num, index) => new { Number = num, Index = index, DigitSum = SumOfDigits(num) })\n                   .OrderBy(item => item.DigitSum)\n                   .ThenBy(item => item.Index)\n                   .Select(item => item.Number)\n                   .ToList();\n    }\n\n    private static int SumOfDigits(long number)\n    {\n        number = Math.Abs(number);\n        int sum = 0;\n        while (number > 0)\n        {\n            sum += (int)(number % 10);\n            number \/= 10;\n        }\n        return sum;\n    }\n\n    static void Main(string[] args)\n    {\n        var sortedList = OrderByPoints(new List<long> { 1L, 11L, -1L, -11L, -12L });\n        Console.WriteLine(string.Join(\", \", sortedList));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_146","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/संख्यायाः प्रथमं च अन्तिमं च अंकं विषम (1, 3, 5, 7, 9) ।    \/\/सूचीषु दशपेक्षा अधिकानि च अवयवानां संख्याः    \/\/संख्यायाः सूचीं प्रविष्टं कृत्वा परावर्त्तनं करोति ।    \/\/ >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L})))\n    \/\/ (1L)\n    \/\/ >>> Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n    \/\/ (2L)\n    public static long Specialfilter(List<long> nums) {\n","canonical_solution":"public static long Specialfilter(List<long> nums) {\n        return nums.Count(num => {\n            if (num <= 10) return false;\n            long positiveNum = Math.Abs(num);\n            string numStr = positiveNum.ToString();\n            char firstDigit = numStr[0];\n            char lastDigit = numStr[numStr.Length - 1];\n            return IsOddDigit(firstDigit) && IsOddDigit(lastDigit);\n        });\n    }\n\n    private static bool IsOddDigit(char digit) {\n        return digit == '1' || digit == '3' || digit == '5' || digit == '7' || digit == '9';\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"},{"task_id":"HumanEval_147","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:    \/\/तथा च a[i] + a[j] + a[k] इत्यत्र 3 इत्यस्य गुणकः भवति।    \/\/a इत्यस्य त्रिगुणानां संख्यां प्रतिपादयतु (a[i], a[j], a[k]) यत्र i < j < k,     \/\/प्रत्येकं i (1 ≤ i ≤ n) इत्यनेन a[i] = i * i - i + 1 इत्यस्य मूल्यम् भवति ।    \/\/भवता धनात्मकः पूर्णाङ्कः n दीयते। भवता पूर्णाङ्काणि n-लङ्घनेन सूचीकृतानि भवितव्याः।    \/\/ >>> GetMaxTriples((5L))\n    \/\/ (1L)\n    \/\/ Explanation: \n    \/\/ a = [1, 3, 7, 13, 21]\n    \/\/ The only valid triple is (1, 7, 13).\n    public static long GetMaxTriples(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static long GetMaxTriples(long n) {\n        List<long> a = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            a.Add(i * i - i + 1);\n        }\n\n        long count = 0;\n        for (int i = 0; i < a.Count; i++) {\n            for (int j = i + 1; j < a.Count; j++) {\n                for (int k = j + 1; k < a.Count; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    static void Main(string[] args) {\n        long n = 5; \/\/ Example input\n        Console.WriteLine(GetMaxTriples(n)); \/\/ Should output 1 based on the example given\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"},{"task_id":"HumanEval_148","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्     \/\/न च ग्रहानाम् उचितम् अस्ति ।    \/\/यदि planet1 अथवा planet2  इति तर्हि फलनम् रिक्तं ट्यूप्ल प्रतिपादयति ।    \/\/सूर्यस्य समीपस्थः।    \/\/ग्रह-१ च ग्रह-२ च च कक्षायां स्थितं,     \/\/कार्यम् एव एव ग्रहान् प्रतिपादयति ।    \/\/एकं फलनम् लिखत, यस्मिन् ग्रहयोः नामः ग्रहः १, ग्रहः २ इति सूत्रेण प्राप्नोति।    \/\/यूरेनसः, नेप्च्यूनः।    \/\/बुधः, अग्ने शुक्रः, ततः पृथिवी, मार्सः, बृहस्पतिः, शनिः,    \/\/अस्मिन् सौरमण्डले अष्टौ ग्रहाः सन्ति , सूर्यस्य समीपे ये सन्ति ।    \/\/ >>> Bf((\"Jupiter\"), (\"Neptune\"))\n    \/\/ (new List<string>(new string[]{(string)\"Saturn\", (string)\"Uranus\"}))\n    \/\/ >>> Bf((\"Earth\"), (\"Mercury\"))\n    \/\/ (List<string>(\"Venus\"))\n    \/\/ >>> Bf((\"Mercury\"), (\"Uranus\"))\n    \/\/ (new List<string>(new string[]{(string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\"}))\n    public static List<string> Bf(string planet1, string planet2) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<string> Bf(string planet1, string planet2) {\n        List<string> planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        int index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\n        if (index1 == -1 || index2 == -1) {\n            return new List<string>();\n        }\n        \n        List<string> result = new List<string>();\n        int start = Math.Min(index1, index2);\n        int end = Math.Max(index1, index2);\n\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n        }\n\n        return result;\n    }\n\n    public static void Main() {\n        Console.WriteLine(string.Join(\", \", Bf(\"Jupiter\", \"Neptune\"))); \/\/ Output: Saturn, Uranus\n        Console.WriteLine(string.Join(\", \", Bf(\"Earth\", \"Mercury\")));   \/\/ Output: Venus\n        Console.WriteLine(string.Join(\", \", Bf(\"Mercury\", \"Uranus\"))); \/\/ Output: Venus, Earth, Mars, Jupiter, Saturn\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Bf((\"Jupiter\"), (\"Neptune\")).Equals((new List<string>(new string[]{(string)\"Saturn\", (string)\"Uranus\"}))));\n    Debug.Assert(Bf((\"Earth\"), (\"Mercury\")).Equals((new List<string>(new string[]{(string)\"Venus\"}))));\n    Debug.Assert(Bf((\"Mercury\"), (\"Uranus\")).Equals((new List<string>(new string[]{(string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\"}))));\n    Debug.Assert(Bf((\"Neptune\"), (\"Venus\")).Equals((new List<string>(new string[]{(string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\", (string)\"Uranus\"}))));\n    Debug.Assert(Bf((\"Earth\"), (\"Earth\")).Equals((new List<string>())));\n    Debug.Assert(Bf((\"Mars\"), (\"Earth\")).Equals((new List<string>())));\n    Debug.Assert(Bf((\"Jupiter\"), (\"Makemake\")).Equals((new List<string>())));\n    }\n\n}\n"},{"task_id":"HumanEval_149","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/भवन् तः अनुमानं करिष्यन्ति यत् सर्वेषां शब्देन एकस्य दीर्घः भविष्यति।    \/\/कार्यम् अनुक्रमात् क्रमात् सूची प्रतिपादयति।    \/\/यदि द्वयोः शब्दयोः लम्बाई एकसमानः भवति, तर्हि सूचीं वर्णमालाक्रमेण क्रमबद्धं कुरुत।    \/\/एतस्य नियमस्य अनुसारं सूचीं विसृज्य पुनः प्रेषयतु ।    \/\/सूचीयाः क्रमः प्रत्येकं शब्दस्य दीर्घत्वेन आरोहणीयः भवितुम् अर्हति, तथा भवन्तः     \/\/एवं च कदाचित् द्वित्वं भवति ।    \/\/सूचीः सदैव सङ्ख्यासूची, न तु सङ्ख्यासूची,     \/\/एवं प्राप्ते सूचीं क्रमबद्धं प्रति लभते,     \/\/अकारान्तस्य दीर्घः अस्ति, अतः सः अकारान्तस्य दीर्घः भवति।    \/\/क्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य पदान्तस्य    \/\/ >>> ListSort((new List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    \/\/ (new List<string>(new string[]{(string)\"aa\"}))\n    \/\/ >>> ListSort((new List<string>(new string[]{(string)\"ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    \/\/ (new List<string>(new string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static List<string> ListSort(List<string> lst) {\n        return lst.Where(x => x.Length % 2 == 0)\n                  .OrderBy(x => x.Length)\n                  .ThenBy(x => x)\n                  .ToList();\n    }\n    \n    static void Main() {\n        var result1 = ListSort(new List<string> { \"aa\", \"a\", \"aaa\" });\n        Console.WriteLine(string.Join(\", \", result1)); \/\/ Output: aa\n\n        var result2 = ListSort(new List<string> { \"ab\", \"a\", \"aaa\", \"cd\" });\n        Console.WriteLine(string.Join(\", \", result2)); \/\/ Output: ab, cd\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_150","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/अभाज्यसंख्याः, अतः y इत्यस्य मूल्यं प्रतिपादयतु अन्यथा।    \/\/यदि n  भवति तर्हि x इत्यस्य मूल्यम् प्रतिपादयितुम् एकं सरलप्रोग्राम् अस्ति ।    \/\/ >>> XOrY((7L), (34L), (12L))\n    \/\/ (34L)\n    \/\/ >>> XOrY((15L), (8L), (5L))\n    \/\/ (5L)\n    public static long XOrY(long n, long x, long y) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long XOrY(long n, long x, long y) {\n        return IsPrime(n) ? x : y;\n    }\n\n    private static bool IsPrime(long number) {\n        if (number <= 1) return false;\n        if (number <= 3) return true;\n        if (number % 2 == 0 || number % 3 == 0) return false;\n        \n        for (long i = 5; i * i <= number; i += 6) {\n            if (number % i == 0 || number % (i + 2) == 0) return false;\n        }\n        \n        return true;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(XOrY((7L), (34L), (12L)) == (34L));\n    Debug.Assert(XOrY((15L), (8L), (5L)) == (5L));\n    Debug.Assert(XOrY((3L), (33L), (5212L)) == (33L));\n    Debug.Assert(XOrY((1259L), (3L), (52L)) == (3L));\n    Debug.Assert(XOrY((7919L), (-1L), (12L)) == (-1L));\n    Debug.Assert(XOrY((3609L), (1245L), (583L)) == (583L));\n    Debug.Assert(XOrY((91L), (56L), (129L)) == (129L));\n    Debug.Assert(XOrY((6L), (34L), (1234L)) == (1234L));\n    Debug.Assert(XOrY((1L), (2L), (0L)) == (0L));\n    Debug.Assert(XOrY((2L), (2L), (0L)) == (2L));\n    }\n\n}\n"},{"task_id":"HumanEval_151","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/अकारान्ताः संख्याः अनवधानं कुर्वन्तु ।    \/\/संख्यायाः सूची दत्त्वा, संख्यायाः वर्गस्य योगं प्रतिपादयतु।    \/\/ >>> DoubleTheDifference((new List<float>(new long[]{(long)1L, (long)3L, (long)2L, (long)0L})))\n    \/\/ (10L)\n    \/\/ >>> DoubleTheDifference((new List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    \/\/ (0L)\n    \/\/ >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n    \/\/ (81L)\n    \/\/ >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n    \/\/ (0L)\n    \/\/ If the input list is empty, return 0.\n    public static long DoubleTheDifference(List<float> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Given a list of numbers, return the sum of squares of the numbers\n    \/\/ in the list that are odd. Ignore numbers that are negative or not integers.\n    public static long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n        foreach (var num in lst) {\n            if (num >= 0 && num == (long)num && ((long)num % 2) != 0) {\n                sum += (long)num * (long)num;\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"},{"task_id":"HumanEval_152","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/यदि न भवति, तर्हि अनुमानस्य तथा स्कोर्स्-लक्षणस्य निरपेक्षभेदः भवति ।    \/\/यदि तेभ्यः अनुमानं सुयोग्यम् अस्ति, तर्हि     \/\/भवद्भिः समान-लम्बाः स्कोर्स् तथा अनुमानानां द्वयोः सूचयः प्रदत्ताः, यत्र प्रत्येकं सूचकः समानाधिकरणं दर्शयति ।    \/\/भवता कार्यम् अस्ति यत् भवता निश्चितं भवेत् यत् कश्चित् व्यक्तिः कतिषु क्रीडावसरेषु फलं अच्युतं ज्ञातवान् वा न।    \/\/न चैवं, न चैवं, न चैवं, न चैवं, न चैवं, न चैवं, न चैवं।    \/\/भवता तत् क्षणम् अस्मिन् स्थिते यत् अनुभूयते, तत् विचारं च भवता ज्ञातम् अस्ति ।    \/\/मम विचारतः अस्मिन् विषये सर्वे जनाः स्मरन्ति यत् यदा दीर्घकालं प्रतीक्षितः परिणामः भवति तदा कस्मैचित् व्यक्तेः जीवनं सुखम् भवति ।    \/\/ >>> Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    \/\/ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    \/\/ >>> Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    \/\/ (new List<long>(new long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long> game, List<long> guess) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<long> Compare(List<long> game, List<long> guess)\n    {\n        List<long> differences = new List<long>();\n        for (int i = 0; i < game.Count; i++)\n        {\n            differences.Add(Math.Abs(game[i] - guess[i]));\n        }\n        return differences;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_153","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/(अस्य शक्तिः -१) ।    \/\/return 'Slices.SErviNGSliCes' इत्यनेन 'SrviNGSliCes' इत्यस्य प्रबलतमः विस्ताराः सन्ति ।    \/\/['सेर्व् इङ् स् लिस् सीस्', 'चिज्', 'स्टुफ् फ् ड् '] तर्हि भवता     \/\/उदाहरणार्थम्, यदि \"स्लाईस्\" वर्गः एवं वर्गस्य सूची च दीयते, तर्हि     \/\/सूचीमध्ये प्रथमं आगच्छतीति च्छिद्यत।    \/\/यदि द्वौ वा अधिकौ विस्तारौ समानशक्तौ सन्ति, तर्हि भवता     \/\/स्वरूपः ClassName.StrongestExtensionName.     \/\/भवद् भ् यः इदम् अन्वेषणम् करणीयम् यत् इदम् अधिकः अस्ति, अतः इदम् प्रतिपादयतु ।    \/\/विस्तारेण नामतः शक्तिः CAP-SM इत्यनेन दशांशेण दीयते ।    \/\/विस्तारनामस्य अक्षरं, लघु अक्षरानां संख्याः SM भवेत् ।    \/\/विस्ताराणां शक्तिः यथा, -- CAP इत्यस्य संख्याः अपरकेस     \/\/वर्गस्य अतिरिक्तं वर्गं लोडयितुं विस्ताराः प्रयुज्यते ।    \/\/भवता वर्गस्य नाम (एकः स्ट्रिंग) एवं विस्ताराणां सूची दीयते ।    \/\/ >>> StrongestExtension((\"my_class\"), (new List<string>(new string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    \/\/ (\"my_class.AA\")\n    public static string StrongestExtension(string class_name, List<string> extensions) {\n","canonical_solution":"public static string StrongestExtension(string class_name, List<string> extensions) {\n        string strongestExtension = null;\n        int maxStrength = int.MinValue;\n\n        foreach (var extension in extensions) {\n            int countUpper = extension.Count(char.IsUpper);\n            int countLower = extension.Count(char.IsLower);\n            int strength = countUpper - countLower;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return $\"{class_name}.{strongestExtension}\";\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"},{"task_id":"HumanEval_154","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/यदि द्वितीयः शब्दः अथवा तस्य कस्यचित् परिक्रमणं प्रथमस्य शब्दस्य उपसङ्ख्यानं भवति तर्हि भवता सत्यं प्रति लभेत।    \/\/ >>> CycpatternCheck((\"abcd\"), (\"abd\"))\n    \/\/ (false)\n    \/\/ >>> CycpatternCheck((\"hello\"), (\"ell\"))\n    \/\/ (true)\n    \/\/ >>> CycpatternCheck((\"whassup\"), (\"psus\"))\n    \/\/ (false)\n    \/\/ >>> CycpatternCheck((\"abab\"), (\"baa\"))\n    \/\/ (true)\n    \/\/ >>> CycpatternCheck((\"efef\"), (\"eeff\"))\n    \/\/ (false)\n    \/\/ >>> CycpatternCheck((\"himenss\"), (\"simen\"))\n    \/\/ (true)\n    public static bool CycpatternCheck(string a, string b) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length < b.Length) {\n            return false;\n        }\n\n        string combinedB = b + b;\n        for (int i = 0; i < b.Length; i++) {\n            string rotation = combinedB.Substring(i, b.Length);\n            if (a.Contains(rotation)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CycpatternCheck((\"xyzw\"), (\"xyw\")) == (false));\n    Debug.Assert(CycpatternCheck((\"yello\"), (\"ell\")) == (true));\n    Debug.Assert(CycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n    Debug.Assert(CycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    Debug.Assert(CycpatternCheck((\"abab\"), (\"aabb\")) == (false));\n    Debug.Assert(CycpatternCheck((\"winemtt\"), (\"tinem\")) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_155","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/पूर्णाङ्कः प्राप्नोति, अतः इकारस्य संख्याः समः, विषमश्च भवति ।    \/\/ >>> EvenOddCount((-12L))\n    \/\/ (Tuple.Create(1L, 1L))\n    \/\/ >>> EvenOddCount((123L))\n    \/\/ (Tuple.Create(1L, 2L))\n    public static Tuple<long, long> EvenOddCount(long num) {\n","canonical_solution":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static Tuple<long, long> EvenOddCount(long num) {\n        \/\/ Convert the number to positive to handle negative numbers\n        num = Math.Abs(num);\n        long evenCount = 0;\n        long oddCount = 0;\n        \n        while (num > 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0)\n                evenCount++;\n            else\n                oddCount++;\n            num \/= 10;\n        }\n        \n        return Tuple.Create(evenCount, oddCount);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenOddCount((7L)).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(EvenOddCount((-78L)).Equals((Tuple.Create(1L, 1L))));\n    Debug.Assert(EvenOddCount((3452L)).Equals((Tuple.Create(2L, 2L))));\n    Debug.Assert(EvenOddCount((346211L)).Equals((Tuple.Create(3L, 3L))));\n    Debug.Assert(EvenOddCount((-345821L)).Equals((Tuple.Create(3L, 3L))));\n    Debug.Assert(EvenOddCount((-2L)).Equals((Tuple.Create(1L, 0L))));\n    Debug.Assert(EvenOddCount((-45347L)).Equals((Tuple.Create(2L, 3L))));\n    Debug.Assert(EvenOddCount((0L)).Equals((Tuple.Create(1L, 0L))));\n    }\n\n}\n"},{"task_id":"HumanEval_156","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/प्रतिबन्धः 1 <= num <= 1000     \/\/एवं लघुवर्णेण प्रतिपादयतु।    \/\/धनात्मकं पूर्णाङ्कं दत्त्वा तस्य रोमनसंख्यात्मकं समकलं सूत्रं प्राप्तं,     \/\/ >>> IntToMiniRoman((19L))\n    \/\/ (\"xix\")\n    \/\/ >>> IntToMiniRoman((152L))\n    \/\/ (\"clii\")\n    \/\/ >>> IntToMiniRoman((426L))\n    \/\/ (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n","canonical_solution":"if (number < 1 || number > 1000)\n            throw new ArgumentOutOfRangeException(\"number\", \"Input must be between 1 and 1000\");\n\n        \/\/ Mapping of Roman numerals\n        var romanNumerals = new List<(int value, string numeral)>\n        {\n            (1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"),\n            (100, \"c\"), (90, \"xc\"), (50, \"l\"), (40, \"xl\"),\n            (10, \"x\"), (9, \"ix\"), (5, \"v\"), (4, \"iv\"),\n            (1, \"i\")\n        };\n\n        var sb = new StringBuilder();\n\n        foreach (var (value, numeral) in romanNumerals)\n        {\n            while (number >= value)\n            {\n                sb.Append(numeral);\n                number -= value;\n            }\n        }\n\n        return sb.ToString();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"},{"task_id":"HumanEval_157","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/९० डिग्री।    \/\/एकं विषुववृत्तं त्रिकोणं भवति यत्र एकः कोणः विषुववृत्तः भवति अथवा     \/\/पक्षेषु एकं समकोण त्रिभुजं भवति, अन्यथा असत्यम् ।    \/\/त्रिकोणस्य त्रिषु पक्षेषु लम्बं ददाति। यदि त्रिषु पक्षेषु लम्बं ददाति तर्हि लम्बं लभते।    \/\/ >>> RightAngleTriangle((3L), (4L), (5L))\n    \/\/ (true)\n    \/\/ >>> RightAngleTriangle((1L), (2L), (3L))\n    \/\/ (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n","canonical_solution":"using System;\n\nclass Problem\n{\n    public static bool RightAngleTriangle(long a, long b, long c)\n    {\n        \/\/ Sort the sides to make it easier to apply the Pythagorean theorem.\n        long[] sides = { a, b, c };\n        Array.Sort(sides);\n\n        \/\/ Check if the sum of the squares of the smaller two sides equals the square of the largest side.\n        return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_158","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/अक्षरं प्रति, शब्दकोशानुक्रमात् प्रथमं आगच्छति ।    \/\/यदि बहुव्रीहिः अस्ति, तर्हि अनोक्तवर्णानां संख्याः अधिकतमः अस्ति ।    \/\/अत्र विभिन्नाः शब्दः सन्ति। अधिकतमः शब्दः प्रतिपाद्यताम्।    \/\/क्तप्रत्ययस्य सूचीं स्वीकरोति इति फलनम् लिखत।    \/\/ >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    \/\/ (\"string\")\n    \/\/ >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    \/\/ (\"enam\")\n    \/\/ >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    \/\/ (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    public static string FindMax(List<string> words)\n    {\n        string result = string.Empty;\n        int maxUniqueChars = 0;\n\n        foreach (var word in words)\n        {\n            var uniqueChars = word.ToCharArray().Distinct().Count();\n\n            if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && string.Compare(word, result, StringComparison.Ordinal) < 0))\n            {\n                maxUniqueChars = uniqueChars;\n                result = word;\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"},{"task_id":"HumanEval_159","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्:     \/\/यदि पर्याप्तं शेषं गाजरं न भवति, तर्हि भवन्तः शेषं गाजरं खादयन्ति, तथापि भक्षयन्ति।    \/\/भोजनानन्तरं शेषं गाजरं ]     \/\/[ भोजनात् अनन्तरं जर्जरस्य कुलसंख्येयम् ]    \/\/इदानीं भवता दिनस्य भोजनं पूर्णं कर्तुम् अधिकं गाजरं खादन्तु।    \/\/भवन् क्षुधाग्रं कर्णिका, भवन् च अगोचरं कार्त्तिकं खादितवान्,    \/\/ >>> Eat((5L), (6L), (10L))\n    \/\/ (new List<long>(new long[]{(long)11L, (long)4L}))\n    \/\/ >>> Eat((4L), (8L), (9L))\n    \/\/ (new List<long>(new long[]{(long)12L, (long)1L}))\n    \/\/ >>> Eat((1L), (10L), (10L))\n    \/\/ (new List<long>(new long[]{(long)11L, (long)0L}))\n    \/\/ >>> Eat((2L), (11L), (5L))\n    \/\/ (new List<long>(new long[]{(long)7L, (long)0L}))\n    \/\/ Variables:\n    \/\/ @number : integer\n    \/\/ the number of carrots that you have eaten.\n    \/\/ @need : integer\n    \/\/ the number of carrots that you need to eat.\n    \/\/ @remaining : integer\n    \/\/ the number of remaining carrots thet exist in stock\n    \/\/ Constrain:\n    \/\/ * 0 <= number <= 1000\n    \/\/ * 0 <= need <= 1000\n    \/\/ * 0 <= remaining <= 1000\n    \/\/ Have fun :)\n    public static List<long> Eat(long number, long need, long remaining) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> Eat(long number, long need, long remaining) {\n        long totalEaten = number;\n        long leftAfterMeals;\n\n        if(remaining >= need) {\n            totalEaten += need;\n            leftAfterMeals = remaining - need;\n        } else {\n            totalEaten += remaining;\n            leftAfterMeals = 0;\n        }\n        \n        return new List<long>{ totalEaten, leftAfterMeals };\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Eat((5L), (6L), (10L)).Equals((new List<long>(new long[]{(long)11L, (long)4L}))));\n    Debug.Assert(Eat((4L), (8L), (9L)).Equals((new List<long>(new long[]{(long)12L, (long)1L}))));\n    Debug.Assert(Eat((1L), (10L), (10L)).Equals((new List<long>(new long[]{(long)11L, (long)0L}))));\n    Debug.Assert(Eat((2L), (11L), (5L)).Equals((new List<long>(new long[]{(long)7L, (long)0L}))));\n    Debug.Assert(Eat((4L), (5L), (7L)).Equals((new List<long>(new long[]{(long)9L, (long)2L}))));\n    Debug.Assert(Eat((4L), (5L), (1L)).Equals((new List<long>(new long[]{(long)5L, (long)0L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_160","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/अपरेटरसूचीयां एकः अपरेटरः अस्ति, अपरेण्डसूचीयां द्वयोः अपरेण्डः सन्ति ।    \/\/अपरान्दस्य सूची न ऋणात्मकानां पूर्णाङ्काणां सूची भवति ।    \/\/अपरेन्ड्-सूचीयाः लम्बाईः अपरेन्ड्-सूचीयाः लम्बाईः शून्य-एक-अङ्कः भवति ।    \/\/टिप्पणीः     \/\/=> परिणामः = ९     \/\/परिणामः = 2 + 3 * 4 - 5     \/\/सूची = [२,३,४,५]     \/\/प्रचालकः['+', '*', '-']     \/\/उदाहरणम्:     \/\/गुणाङ्कितम् (**)     \/\/अधः विभाजनम् (\/\/)    \/\/गुणनम् (*)     \/\/घटः (--)     \/\/अङ्गुष्ठम् (+)     \/\/मूलभूतबीजक्रियाः     \/\/अतः इदम् अव्ययम् अव्ययम् इति विवक्षितम् ।    \/\/द्वितीयसूची पूर्णाङ्काणां सूची अस्ति।    \/\/द्वौ सूचीषु ऑपरेटरः, तथा ऑपरेण्डः च दीयते। प्रथमसूचीयां मूलभूतबीजक्रियाः सन्ति, तथा     public static long DoAlgebra(List<string> op, List<long> operand) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static long DoAlgebra(List<string> op, List<long> operand)\n    {\n        if (op.Count + 1 != operand.Count || operand.Count < 2)\n        {\n            throw new ArgumentException(\"Invalid input lists.\");\n        }\n\n        long result = operand[0];\n\n        for (int i = 0; i < op.Count; i++)\n        {\n            string currentOp = op[i];\n            long currentOperand = operand[i + 1];\n\n            switch (currentOp)\n            {\n                case \"+\":\n                    result += currentOperand;\n                    break;\n                case \"-\":\n                    result -= currentOperand;\n                    break;\n                case \"*\":\n                    result *= currentOperand;\n                    break;\n                case \"\/\/\":\n                    result \/= currentOperand;\n                    break;\n                case \"**\":\n                    result = (long)Math.Pow(result, currentOperand);\n                    break;\n                default:\n                    throw new InvalidOperationException($\"Unsupported operator: {currentOp}\");\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\/\/\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"},{"task_id":"HumanEval_161","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम्     \/\/कार्यस्य निष्पन्नस्य स्ट्रिंगस्य प्रतिफलं दातव्यम् ।    \/\/यदि अक्षरं न भवति, तर्हि अक्षरं विलोमयेत् ।    \/\/अन्यथा यथास्थितं कुर्यात्।    \/\/यदि s[i] अक्षरं भवति, तर्हि तस्य अक्षरस्य अपरम् अपरम् अनवस्थितं भवति, अथवा अपरम् अपरम् अनवस्थितं भवति,     \/\/भवद्भिरपि क्तप्रत्ययस्य लकारः प्राप्नोति ।    \/\/ >>> Solve((\"1234\"))\n    \/\/ (\"4321\")\n    \/\/ >>> Solve((\"ab\"))\n    \/\/ (\"AB\")\n    \/\/ >>> Solve((\"#a@C\"))\n    \/\/ (\"#A@c\")\n    public static string Solve(string s) {\n","canonical_solution":"public static string Solve(string s) {\n        bool hasLetter = s.Any(char.IsLetter);\n        if (hasLetter) {\n            var result = new StringBuilder(s.Length);\n            foreach (char c in s) {\n                if (char.IsLetter(c)) {\n                    result.Append(char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n                } else {\n                    result.Append(c);\n                }\n            }\n            return result.ToString();\n        } else {\n            char[] charArray = s.ToCharArray();\n            Array.Reverse(charArray);\n            return new string(charArray);\n        }\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"},{"task_id":"HumanEval_162","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/यदि 'text' इत्यत्र रिक्तः सूत्रः अस्ति, तर्हि null इत्यस्य प्रतिगमनं कुरुत।    \/\/'text' इति सूत्रं प्राप्नोति, तस्मिन् md5 hash equivalent string इत्यस्य सूत्रं प्रतिपादयतु।    \/\/ >>> StringToMd5((\"Hello world\"))\n    \/\/ (\"3e25960a79dbc69b674cd4ec67a72c62\")\n    public static string StringToMd5(string text) {\n","canonical_solution":"using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass Problem {\n    public static string StringToMd5(string text) {\n        if (string.IsNullOrEmpty(text)) {\n            return null;\n        }\n        \n        using (MD5 md5 = MD5.Create()) {\n            byte[] inputBytes = Encoding.UTF8.GetBytes(text);\n            byte[] hashBytes = md5.ComputeHash(inputBytes);\n            \n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < hashBytes.Length; i++) {\n                sb.Append(hashBytes[i].ToString(\"x2\"));\n            }\n            return sb.ToString();\n        }\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringToMd5((\"Hello world\")).Equals((\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    Debug.Assert(StringToMd5((\"\")).Equals(null));\n    Debug.Assert(StringToMd5((\"A B C\")).Equals((\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    Debug.Assert(StringToMd5((\"password\")).Equals((\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n    }\n\n}\n"},{"task_id":"HumanEval_163","nl":"san_Deva","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/उदाहरणम् -    \/\/तथा च, b, वृद्धिक्रमात्।    \/\/यदि द्वौ धनात्मकौ पूर्णाङ्काः a, b, इति प्राप्नुवन्ति तर्हि a  इत्यस्य मध्ये समं संख्यां लभेत।    \/\/ >>> GenerateIntegers((2L), (8L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))\n    \/\/ >>> GenerateIntegers((8L), (2L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))\n    \/\/ >>> GenerateIntegers((10L), (14L))\n    \/\/ (new List<long>())\n    public static List<long> GenerateIntegers(long a, long b) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    \/\/ Given two positive integers a and b, return the even digits between a\n    \/\/ and b, in ascending order.\n    \/\/ For example:\n    \/\/ >>> GenerateIntegers((2L), (8L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))\n    \/\/ >>> GenerateIntegers((8L), (2L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))\n    \/\/ >>> GenerateIntegers((10L), (14L))\n    \/\/ (new List<long>())\n    \n    public static List<long> GenerateIntegers(long a, long b)\n    {\n        List<long> evenDigits = new List<long> { 2, 4, 6, 8 };\n        List<long> result = new List<long>();\n\n        if (a > b)\n        {\n            \/\/ Swap values if a is greater than b to ensure ascending order\n            long temp = a;\n            a = b;\n            b = temp;\n        }\n\n        foreach (var even in evenDigits)\n        {\n            if (even >= a && even <= b)\n            {\n                result.Add(even);\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GenerateIntegers((2L), (10L)).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(GenerateIntegers((10L), (2L)).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(GenerateIntegers((132L), (2L)).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(GenerateIntegers((17L), (89L)).Equals((new List<long>())));\n    }\n\n}\n"}]