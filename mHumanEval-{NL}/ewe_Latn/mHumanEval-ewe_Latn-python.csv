task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,ewe_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Kpɔe ɖa be xexlẽdzesi eve siwo le xexlẽdzesi siwo wona la dome le kplikplikpli wu xexlẽdzesi si wona. Kpɔɖeŋu: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) Alakpa >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Nyateƒe """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,ewe_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Eʋevi si le dɔ sia me enye string si me nuxexlẽwo le. Wò taɖodzinu enye be nàɖe wo ɖe vovo ahaɖo wo ƒe ŋkɔ ɖe wo. Ƒuƒoƒowo le ɖoɖo nu (wo dometɔ ɖesiaɖe ƒe nuxexlẽwo le ɖoɖo nu) eye womele wo nɔewo me o. Mègaŋe aɖaba ƒu teƒe siwo le nuxexlẽawo me o. Kpɔɖeŋu: >>> separate_paren_groups' ((( ) (() (( ) ) ) ) ) [' (()) ', '(()) ', '(()) ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,ewe_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Ne wotsɔ nuŋɔŋlɔdzesi si le ʋuʋu me ƒe xexlẽdzesi nyui aɖe na la, woate ŋu amãe ɖe xexlẽdzesi blibo (xexlẽdzesi si lolo wu si le sue wu xexlẽdzesi si wona) kple xexlẽdzesi siwo nye ewoliawo (ƒe afã si susɔ la nɔa sue wu 1). Gbugbɔ xexlẽdzesi la ƒe xexlẽdzesi si nye ewolia la ɖo. Kpɔɖeŋu: >>> truncate_number(3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,ewe_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Woana wò ga kple ga siwo nètsɔna le ga me kple esiwo nètsɔna le ga me le ga me ƒe ŋkɔwo le ga me si dze egɔme kple ga home si mesɔ gbɔ o. Wò dɔe nye be nàkpɔe ɖa be ga si le ga me le ga me la dzi ɖe kpɔtɔ le ga home si mesɔ gbɔ o la me, eye le ɣeyiɣi ma me la, ele be wòana true ƒe dzesi. Ne menye nenema o la, ele be wòaɖo false ƒe dzesi la. Kpɔɖeŋu: >>> below_zero([1, 2, 3]) false >>> below_zero([1, 2, -4, 5]) true """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,ewe_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Le numelolowo ƒe numedzodzro me la, bu akɔnta le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si si le nu si le nu si si si le nu si si si le nu si si si le nu si le nu si si si si le nu si le nu si le nu si si si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si le nu si si le nu si le nu si si le nu si si le nu si si le nu si si si si le nu si si si si le nu si si si si si le nu si si si si si si si le nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu nu""""""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,ewe_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""De dzesi 'delimeter' le nu eve siwo zɔna le wo nɔewo yome dome le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi siwo le nuŋɔŋlɔdzesi si.""""""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,ewe_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Eʋe sia ƒe nuƒle nye ƒuƒoƒo geɖe siwo me wode kɔmewo le, eye wo dome tsiwo le wo dome. Le ƒuƒoƒo ɖesiaɖe me la, na woade kɔmewo ƒe akpa si de to wu. Le kpɔɖeŋu me, (() (()) ƒe kɔmewo ƒe akpa eve le esi ((())) ƒe kɔmewo le etɔ̃.""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,ewe_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filter input list of strings only for ones that contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,ewe_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Le integers ƒe list aɖe me la, trɔna tuple si nye sum kple product si nye integers siwo katã le list la me. Empty sum anɔ sɔsɔm kple 0 eye empty product anɔ sɔsɔm kple 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,ewe_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Tso integers ƒe list si wona la dzi la, wɔ rolling max element ƒe list si wokpɔ va se ɖe ɣeyiɣi si wona le ɖoɖo la me. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,ewe_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Kpɔ palindrome kpui si dze egɔme kple nyagbe si wotsɔ ɖo kpe edzi. Algorithm ƒe susu le bɔbɔe: - Kpɔ nyagbe si wotsɔ ɖo kpe edzi ƒe nyagbe si didi wu si nye palindrome. - Tsɔ nyagbe si wotsɔ ɖo kpe edzi ƒe nyagbe si dze ŋgɔ palindrome ƒe nyagbe si wotsɔ ɖo kpe edzi la ɖo kpe nyagbea ƒe nuwuwu. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Dzro ne nyagbe si wotsɔ na enye palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,ewe_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Aƒomevi eve siwo nye a kple b siwo me 1 kple 0 koe le. Wɔa XOR le nuƒomevi siawo dzi eye wònana wokpɔa wo abe ƒomevi ene.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,ewe_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Le stringwo ƒe list me la, trɔ asi le didietɔ la ŋu. Gbugbɔ asi le gbãtɔa ŋu ne string siwo ƒe didime sɔ sɔ sɔ sɔe. Megbugbɔ asi le ɖeke ŋu ne nuŋɔŋlɔawo ƒe list la le ƒuƒlu o. >>> didietɔ (([]) >>> didietɔ ((['a', 'b', 'c']) 'a' >>> didietɔ ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,ewe_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Gbugbɔa xexlẽdzesi eve siwo nye a kple b ƒe mama gãtɔ la ƒoa >>> mama gãtɔ_tɔtɔ ((3, 5) 1 >>> mama gãtɔ_tɔ ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,ewe_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Etrɔna nyaŋɔŋlɔawo katã tso nyaŋɔŋlɔawo ƒe didime dzi va se ɖe wo ƒe kpui dzi le nyaŋɔŋlɔawo ƒe ƒuƒoƒo me >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,ewe_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Etrɔna string si me numelolowo le si woɖo ɖi le teƒe tso 0 yi n dzi. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,ewe_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Ne wotsɔ nyagbe aɖe na wò la, kpɔ be nyagbe vovovo nenie le eme (nɔnɔme vovovoawo ƒe xexlẽme metsɔ le eme o) >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,ewe_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Eʋevi si le dɔ sia me enye haƒonuwo ƒe ha aɖe si le ASCII mɔ̃ dzi. Wò dɔe nye be nàɖe ha ƒe xexlẽdzesi siwo nye xexlẽdzesi blibo siwo sɔ kple ƒunukpe geɖe la me. Ŋkɔ aɖe le afi sia: 'o' - not, lasts beats 'o, vɔ̃' - half note, lasts two beats 'o, vɔ̃' - quater note, lasts one beat >>> parse_music. 'o o
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,ewe_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Kpɔ zi nenie woate ŋu akpɔ nya aɖe le nyaƒoka gbãtɔa me. Xlẽ nya siwo le ɖeka dzi. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,ewe_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Numerowo ƒe xexlẽdzesi si woɖo ɖi le teƒe si tso 'aʋaa' va se ɖe 'asieke' la nye nuŋɔŋlɔ. Eʋeƒonuwo nye 'aʋaa', 'ɖeka', 'eve', 'etɔ̃', 'ene', 'atɔ̃', 'ade', 'adre', 'enyi' kple 'asieke'. Etrɔna xexlẽdzesi siwo me xexlẽdzesiwo le tso suetɔ va se ɖe gãtɔ dzi la ɖa >>> sort_numbers ((('etɔ̃ ɖeka atɔ̃') ' ɖeka etɔ̃ atɔ̃' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,ewe_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Tso xexlẽdzesi siwo wona la ƒe (si ƒe didime nye eve ya teti) me la, tia eve siwo te ɖe wo nɔewo ŋu wu eye nàtsɔ wo aɖo ɖoɖo nu (xexlẽdzesi sue, xexlẽdzesi gã). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,ewe_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Ne èna xexlẽdzesiwo (siwo ƒe akpa eve ya teti li) ƒe ŋkɔ wò la, zãa linear transform be xexlẽdzesi suetɔ nava zu 0 eye gãtɔ nava zu 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,ewe_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,ewe_Latn,python,"

def strlen(string: str) -> int:
    """"""Gbedasi ƒe didime si woana >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,ewe_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Le xexlẽdzesi n aɖe ŋu la, di xexlẽdzesi gãtɔ si mama n sɔsɔe, si le sue wu n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,ewe_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Return list of prime factors of given integer in order from smallest to largest. Ele be woaŋlɔ nuŋɔŋlɔawo dometɔ ɖesiaɖe ƒe xexlẽme si sɔ kple zi nenie wòdzena le nuŋɔŋlɔawo me. Numelã si woana la ƒe xexlẽme anɔ sɔsɔm kple nuŋɔŋlɔawo katã ƒe xexlẽme ƒe agbɔsɔsɔ >>> factorise(8) [2, 2, 2] >>> factorise(25) [5, 5] >>> factorise(70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,ewe_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Le xexlẽdzesi blibowo ƒe ŋkɔ me la, ɖe nusiwo katã dzɔ wu zi ɖeka la ɖa. Na nusiwo kpɔtɔ la ƒe ɖoɖo nanɔ ɖeka abe alesi wònɔ le nuŋɔŋlɔa me ene. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,ewe_Latn,python,"

def flip_case(string: str) -> str:
    """"""Le nyagbe aɖe me la, trɔ ŋɔŋlɔdzesi suewo na ŋɔŋlɔdzesi gãwo kple ŋɔŋlɔdzesi gãwo na ŋɔŋlɔdzesi suewo. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,ewe_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Ƒo nu tso stringwo ŋu le string ɖeka me >>> ƒo nu tso wo ŋu (([]) '' >>> ƒo nu tso wo ŋu ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,ewe_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filter input list of strings only for ones that start with a given prefix. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,ewe_Latn,python,"

def get_positive(l: list):
    """"""Gbugbɔa xexlẽdzesi siwo nye dzidzimenuwo ko le nuŋlɔɖia me. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,ewe_Latn,python,"

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,ewe_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs nye polynomial ƒe koefians. find_zero find x such that poly(x) = 0. find_zero return only only zero point, even if there are many. Gawu la, find_zero only takes list xs having even number of coefficients and largest non-zero coefficient as it guarantees a solution. >>> round ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Edzroa polynomial kple coefficients xs le nu x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,ewe_Latn,python,"

def sort_third(l: list):
    """"""Dɔwɔƒe sia xɔa ŋkɔdzesi l eye wòɖoa ŋkɔdzesi l' si me l' sɔ kple l le numedzesi siwo womate ŋu ama ɖe etɔ̃ o me, eye eƒe asixɔxɔ le numedzesi siwo womate ŋu ama ɖe etɔ̃ o me sɔ kple l ƒe numedzesi siwo sɔ, gake woɖɔ wo ɖo. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,ewe_Latn,python,"

def unique(l: list):
    """"""Etrɔna na nu siwo woɖɔ ɖo siwo nye nu tɔxɛwo le list aɖe me >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,ewe_Latn,python,"

def max_element(l: list):
    """"""Gbugbɔna xɔnametɔa ƒe agbɔsɔsɔme le list la me. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,ewe_Latn,python,"

def fizz_buzz(n: int):
    """"""Gbugbɔ xexlẽdzesi si xexlẽdzesi 7 dze le xexlẽdzesi siwo mede n o siwo woma ɖe 11 alo 13 me la ƒe xexlẽdzesi agbɔ. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,ewe_Latn,python,"

def sort_even(l: list):
    """"""Dɔwɔƒe sia xɔa ŋkɔwo le l me eye wòɖoa ŋkɔwo ɖe anyi le l me ale be l' kple l ƒe xexlẽdzesiwo sɔ le numegbewo me, eye eƒe xexlẽdzesiwo le numegbewo me sɔ kple xexlẽdzesi siwo le numegbewo me, gake woɖɔ wo ɖo. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,ewe_Latn,python,"

def encode_cyclic(s: str):
    """"""xɔa nyagbe si wotsɔ encode_cyclic function ɖo la abe input ene. Eɖoa nyagbe si woɖe la.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""trɔa nyagbe siwo wotsɔ nuŋɔŋlɔdzesi etɔ̃ ƒe ƒuƒoƒowo wɔ.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,ewe_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib ɖoa xexlẽdzesi si nye Fibonacci ƒe xexlẽdzesi si nye prime hã. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,ewe_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero xɔa integers ƒe list abe input ene. Eɖoa True ne nu etɔ̃ siwo to vovo le list la me siwo ƒe sum nye zero, eye False ne menye nenema o. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,ewe_Latn,python,"

def car_race_collision(n: int):
    """"""Bu mɔ aɖe si nye mɔ zɔzɔ si to mɔ ɖeka pɛpɛpɛ, si didi didi la ŋu kpɔ. Ʋu n le ʋum tso miame yi ɖusime; le ɣeyiɣi ma ke me la, ʋu n bubu siwo to mɔ ɖeka la le ʋum tso miame yi miame. Ʋu eveawo dze egɔme le didiƒe tso wo nɔewo gbɔ. Ʋu ɖesiaɖe le du ɖeka me. Wogblɔna be ʋu eve ƒoa wo nɔewo ne ʋu si le ʋum tso miame yi ɖusime la ƒo ʋu si le ʋum tso miame yi miame la. Gake ʋuawo sẽna eye wosesẽa ŋu ale gbegbe; le esia ta, woyia edzi nɔa zɔzɔm le mɔa dzi abe ɖe womedo go ene. Dɔwɔɖui sia naa ʋukɔ siawo ƒe ʋukɔkɔɖi ƒe xexlẽme.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,ewe_Latn,python,"

def incr_list(l: list):
    """"""Etrɔna kple nu siwo dzi wotrɔ asi le kple 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,ewe_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero xɔa integers ƒe list abe input ene. Eɖoa True ne nu eve le list la me siwo ƒe sum nye zero, eye False ne menye nenema o. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,ewe_Latn,python,"

def change_base(x: int, base: int):
    """"""Trɔ x ƒe xexlẽdzesi si le x ŋu la na base. trɔna string ƒe nuŋɔŋlɔa le tɔtrɔ megbe. base xexlẽdzesiwo le sue wu 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,ewe_Latn,python,"

def triangle_area(a, h):
    """"""Ne wotsɔ axa ƒe didime kple teƒe si wotrɔna yia dzi le na dzogoe etɔ̃ la. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,ewe_Latn,python,"

def fib4(n: int):
    """"""Fib4 xexlẽdzesiwo ƒe ɖoɖo nye ɖoɖo si ɖi Fibbonacci ƒe ɖoɖo si me nyawo le si me nyawo le abe esiawo ene: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Taflatse ŋlɔ dɔdeasi aɖe si ana nàbu fib4 xexlẽdzesiwo ƒe ɖoɖo ƒe akpa si nye n-tɔ ŋu nyuie. Mègazã tɔtrɔ o. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,ewe_Latn,python,"

def median(l: list):
    """"""Nu siwo le nuŋlɔɖi la me ƒe domedome le l. >>> domedome (([3, 1, 2, 4, 5]) 3 >>> domedome (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,ewe_Latn,python,"

def is_palindrome(text: str):
    """"""Kpɔe ɖa be nyagbe si wotsɔ ɖo kpe la nye palindrome >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,ewe_Latn,python,"

def modp(n: int, p: int):
    """"""Gbugbɔ 2^n modulo p (nya xexlẽdzesiwo). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,ewe_Latn,python,"

def encode_shift(s: str):
    """"""xɔa nyagbe si wode encode_shift la abe nyagbe si wodee ene. Eɖoa nyagbe si woɖe la.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""trɔa asi le ŋɔŋlɔdzesi ɖesiaɖe ŋu 5 le alfabeta me tsɔ trɔa asi le ŋɔŋlɔdzesi si wotsɔ de dzesie ŋu.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,ewe_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels nye dɔwɔna si xɔa nyagbewo eye wòtrɔna nyagbewo siwo me nyagbewo mele o. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,ewe_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,ewe_Latn,python,"

def add(x: int, y: int):
    """"""Tsɔ xexlẽdzesi eve x kple y kpe ɖe wo nɔewo ŋu >>> tsɔ ƒokpli ((2, 3) 5 >>> tsɔ ƒokpli ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,ewe_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Kpɔe ɖa be ŋɔŋlɔdzesi ɖeka le nya eve aɖewo me hã. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Nyateƒee >>> same_chars (('abcd', 'dddddddabc') Nyateƒee >>> same_chars (('dddddddabc', 'abcd') Nyateƒee >>> same_chars (('eabcd', 'dddddddddabc') Alakpa >>> same_chars ((('abcd', 'dddddddabddce') Alakpa >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Alakpa """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,ewe_Latn,python,"

def fib(n: int):
    """"""Gbugbɔ Fibonacci xexlẽdzesi n-tɔ vɛ. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,ewe_Latn,python,"

def correct_bracketing(brackets: str):
    """"""bracket nye string si nye ""<"" kple "">"". return True ne bracket si le ʋuʋu la ƒe akpa aɖe le nu xlẽm kple bracket si le enu. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,ewe_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,ewe_Latn,python,"

def common(l1: list, l2: list):
    """"""Etrɔna na nu siwo wota ɖe ɖoɖo nu siwo nye nu ɖeka siwo sɔ le ŋkɔ eve me. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,ewe_Latn,python,"

def largest_prime_factor(n: int):
    """"""Gbugbɔ n ƒe akpa gãtɔ ƒe akpa gãtɔ ɖo. Tsɔe be n > 1 eye menye akpa gãtɔ o. >>> akpa gãtɔ_ akpa gãtɔ_ akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa akpa""""""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,ewe_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n nye dɔ si wotsɔna ƒoa xexlẽdzesi siwo tso 1 va se ɖe n nu ƒu. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,ewe_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets nye string si nye ""("" kple "")"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""())) True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,ewe_Latn,python,"

def derivative(xs: list):
    """"""xs nye polynomial ƒe koefiɖizɛ. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,ewe_Latn,python,"

def fibfib(n: int):
    """"""FibFib xexlẽdzesiwo ƒe ɖoɖo nye ɖoɖo si sɔ kple Fibbonacci ƒe ɖoɖo si me nyawo le: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Taflatse ŋlɔ dɔdeasi aɖe si ana nàbu fibfib xexlẽdzesiwo ƒe ɖoɖo ƒe n-tɔme ƒe akɔnta nyuie. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,ewe_Latn,python,"
FIX = """"""Ŋlɔ dɔdeasi si nye vowels_count si xɔa nya aɖe ƒe string abe input eye wònana woxɔa vowels ƒe xexlẽme le string la me. Vowels le afisia nye 'a', 'e', 'i', 'o', 'u'. Afisia, 'y' hã nye vowel, gake ne ele nya si wona la ƒe nuwuwu ko. Kpɔɖeŋu: >>> vowels_count (((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Tsɔ dodokpɔ bubuwo kpe ɖe eŋu. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,ewe_Latn,python,"
def circular_shift(x, shift):
    """"""Zɔ x ƒe xexlẽdzesiwo le nutata me, zɔ x ƒe xexlẽdzesiwo le ɖusime eye nàtrɔ asi le eŋu abe nyagbe ene. Ne shift > xexlẽdzesiwo la, trɔ asi le eŋu. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,ewe_Latn,python,"
def digitSum(s):
    """"""Dɔdeasi Ŋlɔ dɔdeasi si xɔa nyagbe abe nuŋɔŋlɔ ene eye wòɖoa ASCII ƒe dzesi siwo le etame ƒe xexlẽdzesi ko ƒe xexlẽdzesi gbɔ. Kpɔɖeŋuwo: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,ewe_Latn,python,"
def fruit_distribution(s,n):
    """"""Le dɔ sia me la, woana nyagbe si le tsitre ɖi na atadi kple aŋuti siwo woma ɖe atikutsetsewo ƒe kusi me la wò. Atiku sia me atadi, aŋuti, kple mango atikutsetsewo le. Ne nyagbe si le tsitre ɖi na aŋutiwo kple atadiwo ƒe xexlẽme kple xexlẽme blibo si le tsitre ɖi na atikutsetsewo ƒe xexlẽme le kusi me la, gbugbɔ ƒo asi le atikutsetse siwo le kusi la me ƒe xexlẽme. le kpɔɖeŋu me: fruit_distribution""5(atadi kple aŋuti 6"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 atadi kple aŋuti 1,3) -> 3 - 0 - 1 = 2 fruit_distribution""2 atadi kple aŋuti 3, 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 atadi kple aŋuti 1,20) "",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,ewe_Latn,python,"
def pluck(arr):
    """"""""Ne èkpɔ nu siwo le abe ati aɖe ƒe alɔwo ene siwo me xexlẽdzesi siwo nye negative mele o la, wò dɔe nye be nàɖe nu siwo le wo dome la dometɔ ɖeka le wo me ahana wòatrɔe. Ne èkpɔ nu siwo le wo me siwo ƒe xexlẽdzesi nye eve la, ekema trɔ nu si ƒe xexlẽdzesi nye sue wu la. Ne xexlẽdzesi siwo le wo me siwo ƒe xexlẽdzesi nye eve la sɔ gbɔ wu la, trɔ nu si ƒe xexlẽdzesi nye sue wu la. Ne xexlẽdzesi siwo le wo me la mele wo me o alo nu siwo le wo me la le ƒuƒlu la, trɔ nu si nye eve la ɖo. Kpɔɖeŋu 1: Numetoto: [4,2,3] Numetoto: [2, 1] Numetoto: 2 nye xexlẽdzesi eve siwo le sue wu, eye 2 nye xexlẽdzesi sue wu. Kpɔɖeŋu 2: Numetoto: [1,2,3] Numetoto: [2, 1] Numetoto: 2 nye xexlẽdzesi eve siwo le sue wu, eye 2 nye xexlẽdzesi eve siwo le sue wu. Kpɔɖeŋu 3: Numetoto: [] Numetoto: [4] Numetoto: [5, 3, 4] Numetoto: [0, 2] Numetoto: 1 Numetoto: Numetoto: 0 Numetoto: 1 nye suetɔ wu, gake numetoto le sue wu la le eme, eyata numetoto: [0, 0] Numetoto: 1 nye xexlẽdzesi eve siwo le sue wu wu, gake numetoto le wo me la le sue wu. Kpɔɖeŋu: Numetoto: 1 = 0""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,ewe_Latn,python,"
def search(lst):
    '''Wona xexlẽdzesi siwo nye positive integers siwo menye ƒuƒlu o. Gbugbɔ xexlẽdzesi si lolo wu si lolo wu zero, eye eƒe zi gbɔ wu alo sɔ kple xexlẽdzesi si nye integers la ƒe zi gbɔ. Ne xexlẽdzesi aɖe ƒe zi gbɔ zi nenie wòdzena le xexlẽdzesi la me la, gbugbɔ -1. Kpɔɖeŋuwo: search (([4, 1, 2, 2, 3, 1]) == 2 search ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,ewe_Latn,python,"
def strange_sort_list(lst):
    '''Ne èna xexlẽdzesi blibowo ƒe ŋkɔ la, eɖo wo ɖe ɖoɖo tɔxɛ aɖe nu. Eɖo wo ɖe ɖoɖo tɔxɛ aɖe nu, ne èdze egɔme kple xexlẽdzesi blibo siwo susɔ la ƒe xexlẽdzesi si mede o, eye emegbe xexlẽdzesi blibo siwo susɔ la ƒe xexlẽdzesi si de ŋgɔ wu, eye emegbe xexlẽdzesi ʋɛ siwo susɔ la va ɖo esi mede o. Kpɔɖeŋuwo: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,ewe_Latn,python,"
def triangle_area(a, b, c):
    '''Ne wotsɔ dzogoe etɔ̃awo ƒe didime na dzogoe etɔ̃ la, ekema dzogoe etɔ̃ ƒe didime la ƒe didime la ƒe didime la ƒe didime la ƒe didime la ƒe didime la ƒe didime la ƒe didime la ƒe didime la ƒe didime la ƒe didime la ƒe didime la ƒe didime la ƒe didime la. Ne dzogoe etɔ̃awo nye dzogoe etɔ̃ la, ekema dzogoe eve ƒe didime la ƒe didime la anye dzogoe eve ƒe didime. Ne dzogoe eve ƒe didime lolo wu dzogoe etɔ̃lia ƒe didime la, ekema dzogoe etɔ̃ la ƒe didime la anye dzogoe eve ƒe didime. Kpɔɖeŋu: dzogoe etɔ̃_dzidze ({3,4,5) == 6.00 dzogoe etɔ̃ ƒe didime ({1,2,10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,ewe_Latn,python,"
def will_it_fly(q,w):
    '''Ŋlɔ dɔ si trɔna true ne nu q la ava dzo, eye false ne nu bubu aɖe ayi dzo. Nu q la ava dzo ne eƒe nuwo ƒe agbɔsɔsɔ le sue wu alo sɔ kple eƒe nu siwo katã ate ŋu ado dzi w. Kpɔɖeŋu: will_it_fly (([1, 2], 5) â -> False # 1+2 le sue wu nu siwo katã ate ŋu ado dzi, gake womele dzadzɛ o. will_it_fly (([3, 2, 3], 1) â -> False # ele dzadzɛ, gake 3+2+3 le sue wu nu siwo katã ate ŋu ado dzi. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 le sue wu nu siwo katã ate ŋu ado dzi, eye wole dzadzɛ. will_it_fly ((([3], â 5) -> True # 3 le sue wu nu siwo katã ate ŋu ado dzi, eye wole dzadzɛ '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,ewe_Latn,python,"
def smallest_change(arr):
    """"""Ne èna ameƒomevi aɖe si nye xexlẽdzesi blibowo ƒe xexlẽdzesi la, kpɔ nu siwo hiã be woatrɔ asi le wo ŋu hafi woate ŋu awɔ nuƒomevi si nye palindromic la. Nuƒomevi si nye palindromic nye nuƒomevi si woxlẽna le mɔ ɖeka ke nu yi megbe kple ŋgɔ. Le tɔtrɔ ɖeka me la, àte ŋu atrɔ asi le nuƒomevi ɖeka ŋu na nu bubu ɖesiaɖe. Le kpɔɖeŋu me: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,ewe_Latn,python,"
def total_match(lst1, lst2):
    '''Ŋlɔ dɔ si xɔa stringwo ƒe list eve eye wònana list si me numegbewo ƒe xexlẽme le le list la ƒe stringwo katã me le sue wu esiwo le list evelia me. ne list eveawo ƒe numegbewo sɔ la, gbugbɔna ɖoa list gbãtɔa. Kpɔɖeŋuwo total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi]) â -> ['hI', 'hi'], 'hi'_match ((['4'], ['1'', '2'', '3'', '4'], â '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,ewe_Latn,python,"
def is_multiply_prime(a):
    """"""Ŋlɔ dɔ si ne xexlẽdzesi si wona la nye xexlẽdzesi gbãtɔ 3 ƒe dziɖeleameŋu eye bubu la nye alakpa la.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,ewe_Latn,python,"
def is_simple_power(x, n):
    """"""Wò dɔdeasi enye be nàŋlɔ dɔdeasi si ana nàkpɔ be enye nyateƒe ne xexlẽdzesi x nye n ƒe ŋusẽ si le bɔbɔe eye enye aʋatso le go bubuwo me. x nye ŋusẽ si le bɔbɔe si le bɔbɔe si ne n**int=x Le kpɔɖeŋu me: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,ewe_Latn,python,"
def iscube(a):
    '''Ŋlɔ dɔ si xɔa xexlẽdzesi blibo a eye wòtrɔna na True ne enye xexlẽdzesi blibo ƒe ameƒomevi. De dzesii: àte ŋu abu be nu si nèŋlɔ la nye nyateƒe ɣesiaɣi. Kpɔɖeŋuwo: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,ewe_Latn,python,"
def hex_key(num):
    """"""Woɖo dɔ na wò be nàŋlɔ dɔ si xɔa xexlẽdzesi adeɖekɛ me abe nyagbe ene eye wòxlẽa xexlẽdzesi adeɖekɛ me xexlẽdzesi siwo nye numeral gbãtɔwo (numeral gbãtɔ, alo prime, nye xexlẽdzesi si lolo wu 1 si menye xexlẽdzesi sue eve ƒe ƒuƒoƒo o). Xexadecimal xexlẽdzesiwoe nye 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Xexadecimal xexlẽdzesiwoe nye 2, 3, 5, 7, 11, 13, 17,... Eyata ele be nàkpɔ xexlẽdzesi siwo gbɔna ƒe xexlẽdzesi: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13). De dzesii: àte ŋu abu be nya si nèŋlɔ la nye nyateƒe alo nyagbe ƒuƒlu ɣesiaɣi, eye dzesi siwo nye A,B,C,D,E,F, nye nyagbe gãwo ɣesiaɣi. Kpɔɖeŋuwo: Numeral ""AB"" ƒe xexlẽdzesi anye 1. Numeral ""AB"" ƒe xexlẽdzesi anye 2. Numeral ""AB"" ƒe xexlẽdzesi anye 1. Numeral ""AB"" ƒe xexlẽdzesi anye 4. Numeral ""AB"" ƒe xexlẽdzesi anye 6.01236. Numeral ""AB"" anye 6.0456. Numeral ""AB"" anye 6.020.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,ewe_Latn,python,"
def decimal_to_binary(decimal):
    """"""Woana xexlẽdzesi si le xexlẽdzesi ewo me na wò eye wò dɔe nye be nàtrɔe wòazu xexlẽdzesi eve me. Ele be dɔwɔwɔa nagbugbɔ nyagbe aɖe, si me nyagbe ɖesiaɖe anye xexlẽdzesi eve me nyagbe. Ŋkɔ ɖesiaɖe si le nyagbea me anye '0' alo '1'. Ŋkɔ eve bubu anɔ 'db' le nyagbea ƒe gɔmedzedze kple nuwuwu. Ŋkɔ bubu siwo le afima la akpe ɖe ɖoɖowɔɖia ŋu. Kpɔɖeŋuwo: decimal_to_binary ((15) # trɔa ""db1111db"" decimal_to_binary32) # trɔa ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,ewe_Latn,python,"
def is_happy(s):
    """"""Wona akplo s. Wò dɔ enye be nàkpɔe ɖa be akploa nye dzidzɔa alo menye dzidzɔa o. Akplo nye dzidzɔa ne eƒe didime nye 3 ya teti eye ŋɔŋlɔdzesi 3 siwo kplɔe ɖo la dometɔ ɖe sia ɖe to vovo. Le kpɔɖeŋu me: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,ewe_Latn,python,"
def numerical_letter_grade(grades):
    """"""Le kwasiɖa mamlɛtɔ me le suku ƒe nuwuwu la, nufiala la na dzesi sukuviawo. Nufiala la wɔ eƒe ŋutɔ ƒe dzesiŋɔŋlɔ. Kuxia koe nye be, eŋlɔ dzesi si wòzã tsɔ ɖo dzesi sukuviawo la be. Ena nufiala la ƒe dzesiwo ƒe xexlẽdzesi wò eye ele be nàŋlɔ dɔ si ate ŋu ana dzesi siwo le lɛta me la ƒe xexlẽdzesi le lɛta me la le kplɔ̃ si gbɔna dzi: GPA. Lɛta ƒe xexlẽdzesi 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,ewe_Latn,python,"
def prime_length(string):
    """"""Ŋlɔ dɔ si xɔa string eye wòtrɔna na True ne string ƒe didime nye prime number alo False ne menye nenema o Kpɔɖeŋu prime_length{'Hello') == True prime_length{'abcdcba') == True prime_length{'kittens') == True prime_length{'orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,ewe_Latn,python,"
def starts_one_ends(n):
    """"""Ne wotsɔ xexlẽdzesi nyui n na mí la, ekema míatrɔ xexlẽdzesi siwo nye xexlẽdzesi nyui siwo ƒe xexlẽdzesi nye 1 la ƒe xexlẽdzesi.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,ewe_Latn,python,"
def solve(N):
    """"""Ne wode dzesi xexlẽdzesi blibo si nye N la, trɔ eƒe xexlẽdzesiwo ƒe xexlẽdzesiwo katã ƒe xexlẽdzesi le binary me. Kpɔɖeŋu Ne N = 1000 la, xexlẽdzesiwo ƒe xexlẽdzesi anye 1 ne ele be woaɖo ""1"" le gbeadzi. Ne N = 150 la, xexlẽdzesiwo ƒe xexlẽdzesi anye 6 ne ele be woaɖo ""110"". Ne N = 147 la, xexlẽdzesiwo ƒe xexlẽdzesi anye 12 ne ele be woaɖo ""1100"". Nuƒonuwo: @N xexlẽdzesi blibowo ƒe xexlẽdzesiwo: 0 â‰¤ N â‰¤ 10000. Nuƒonu: xexlẽdzesi eve ƒe xexlẽdzesiwo ƒe xexlẽdzesi """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,ewe_Latn,python,"
def add(lst):
    """"""Ne wode xexlẽdzesi siwo menye ƒuƒlu o la, kpe xexlẽdzesi siwo nye eve siwo le xexlẽdzesi eve dzi la kple wo nɔewo. Kpɔɖeŋuwo: kpe (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,ewe_Latn,python,"
def anti_shuffle(s):
    """"""Ŋlɔ dɔ si xɔa nyagbe eye wòtrɔna eƒe ɖoɖo nu. Nyagbe ƒe ɖoɖo nu nye nyagbe si me nyaawo katã (siwo dome woama kple teƒe) wotsɔ nya yeye si me nyaawo katã le ɖoɖo nu le ɖoɖo nu le ɖoɖo nu le ascii ƒe asixɔxɔ nu. De dzesii: Ele be nàlé nyagbewo kple teƒe siwo le ƒuƒluwo ƒe ɖoɖo nu ɖe asi le nyagbea me. Le kpɔɖeŋu me: anti_shuffle ((('Hi') trɔna 'Hi' anti_shuffle ((('hello') trɔna 'ehllo' anti_shuffle (('Hello World!!!') trɔna 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,ewe_Latn,python,"
def get_row(lst, x):
    """"""Woana wò 2 dimensional data, abe nested lists, si ɖi matrix, gake, to vovo na matrixwo la, axa ɖesiaɖe ate ŋu akpɔ axa vovovo. Ne lst, kple integers x, la, di integers x le axa, eye naɖo tuples list, [(x1, y1), (x2, y2) ...] ale be xta sia nye coordinate - (row, columns), si dze egɔme kple 0. Trɔ coordinates gbã le axawo nu le ɖoɖo si le dzi yim nu. Azɔ hã, trɔ coordinates le axawo nu le axawo nu le ɖoɖo si le ɖiɖim nu. Kpɔɖeŋuwo: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), 0 (2, 5), (2, 0) get_(], 1) [] == [[row_[[1, 2, 3, 2]], == == 2]], 2] ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,ewe_Latn,python,"
def sort_array(array):
    """"""Ne èna ame siwo menye negatives o ƒe xexlẽdzesiwo ƒe ƒuƒoƒo la, trɔ asi le xexlẽdzesi si nèna la ŋu le ɖoɖo nu ne xexlẽdzesi siwo le ƒuƒoƒo me la nye ɖeka, alo ne xexlẽdzesi siwo le ƒuƒoƒo me la nye eve.""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,ewe_Latn,python,"
def encrypt(s):
    """"""Wɔ dɔdeasi si nye encrypt si xɔa nyagbe abe nyagbɔgblɔ ene eye wòtrɔna na nyagbe si wotsɔ nyagbewo ɖo la kple ŋɔŋlɔdzesi si wotrɔna. Ele be woaɖɔli ŋɔŋlɔdzesi la ale be ŋɔŋlɔdzesiwo natrɔ ɖe anyi eve dzi ɖe teƒe eve. Le kpɔɖeŋu me: encrypt (('hi') trɔna 'lm' encrypt (('asdfghjkl') trɔna 'ewhjklnop' encrypt (('gf') trɔna 'kj' encrypt (('et') trɔna 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,ewe_Latn,python,"
def next_smallest(lst):
    """"""Wona xexlẽdzesi blibowo ƒe ŋkɔwo wò. Ŋlɔ dɔdeasi si nye next_smallest (() si ana xexlẽdzesi si nye evelia le xexlẽdzesi siwo le xexlẽdzesi suewo dome la. Ne xexlẽdzesi ma meli o la, ekema eɖo ɖeke o. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,ewe_Latn,python,"
def is_bored(S):
    """"""Woana nyagbewo ƒe xexlẽme na wò, eye wò dɔdeasi enye be nàxlẽ nuxaxawo ƒe xexlẽme. Nuxaxa nye nyagbɔgblɔ si dze egɔme kple nya ""m"". '.', '?' alo '! ' ye dea nuƒoƒowo dome. Le kpɔɖeŋu me: >>> is_bored (("" Hello world"") 0 >>> is_bored (("" Dziƒo le blɔ. Ɣe le keklẽm. Melɔ̃a yame ƒe nɔnɔme sia"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,ewe_Latn,python,"
def any_int(x, y, z):
    '''Wɔ dɔdeasi aɖe si xɔa xexlẽdzesi 3. Enaa nyateƒe ne xexlẽdzesiawo dometɔ ɖeka nye eve susɔeawo ƒe ƒoƒo ƒu, eye xexlẽdzesiawo katã nye xexlẽdzesi blibowo. Enaa aʋatso le go bubuwo me. Kpɔɖeŋuwo any_int{5, 2, 7} -> True any_int{3, 2, 2}) -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,ewe_Latn,python,"
def encode(message):
    """"""Ŋlɔ dɔwɔna aɖe si xɔa gbedasi, eye wòɖona ɖe mɔ aɖe nu be wòtrɔa ŋɔŋlɔdzesiwo katã ƒe ŋɔŋlɔdzesi gãwo kple suewo, eye wòtsɔa ŋɔŋlɔdzesi si dze teƒe eve le ŋɔŋlɔdzesi ma ŋgɔ la ɖɔa liʋiliʋilili siwo le gbedasia me. Kpɔɖeŋuwo: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,ewe_Latn,python,"

def skjkasdkd(lst):
    """"""Wona xexlẽdzesi blibowo ƒe ŋkɔwò. Ele be nàkpɔ xexlẽdzesi gbãtɔ gãtɔ eye nàtsɔ eƒe xexlẽdzesi siwo wotsɔ ƒo xlãe ƒe xexlẽdzesi agbɔsɔsɔe. Kpɔɖeŋuwo: Ne lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] la, ele be nu si nàŋlɔ la nanye 10 Ne lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] la, ele be nu si nàŋlɔ la nanye 25 Ne lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] la, ele be nu si nàŋlɔ la nanye 13 Ne lst = [0,724,32,71,99,32,60,91,83,0,5,6] la, ele be nu si nàŋlɔ la nanye 11 Ne lst = [0,81,12,31,21] la, nu si nàŋlɔ la nanye 3 Ne lst = [0,1,8,2,1,7] la, ele be nu si nàŋlɔ la nanye  7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,ewe_Latn,python,"
def check_dict_case(dict):
    """"""Ne nyagɔmeɖegbalẽ le esi la, trɔna True ne nyaƒokawo katã nye nyagbewo le ŋɔŋlɔdzesi suewo me alo nyaƒokawo katã nye nyagbewo le ŋɔŋlɔdzesi gãwo me, ne menye nenema o trɔna False. Ehiã be dɔwɔwɔa natrɔna False ne nyagɔmeɖegbalẽa le ƒuƒlu. Kpɔɖeŋuwo: check_dict_case{""a"":""apple"", ""b"":""banana""}) natrɔna True. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) natrɔna False. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) natrɔna False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) natrɔna False. check_dict_case{""NC"":""STATE"", ""Z"":""IP""}) natrɔna True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,ewe_Latn,python,"
def count_up_to(n):
    """"""Wɔ dɔdeasi aɖe si xɔa xexlẽdzesi si menye negatifɔ o eye wònana xexlẽdzesi gbãtɔ n siwo nye xexlẽdzesi gbãtɔ siwo le sue wu n. Le kpɔɖeŋu me: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,ewe_Latn,python,"
def multiply(a, b):
    """"""Dzidze nu si wotsɔna ŋlɔa xexlẽdzesi eve eye wònana wokpɔa woƒe xexlẽdzesi ɖeka ƒe xexlẽdzesiwo ƒe agbɔsɔsɔ. Kpɔɖeŋuwo: xlẽa xexlẽdzesi 148, 412) ne wòana xlẽla 16. xlẽa xexlẽdzesi 19 28 xlẽa xexlẽdzesi 72. xlẽa xexlẽdzesi 2020 1851 xlẽa xexlẽdzesi 0. xlẽa xexlẽdzesi 14-15 xlẽa xexlẽdzesi 20.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,ewe_Latn,python,"
def count_upper(s):
    """"""Ne wotsɔ nyagbe s na wò la, xlẽ nyagbe gã siwo le ŋɔŋlɔdzesi eve me. Le kpɔɖeŋu me: count_upper (('aBCdEf') ana 1 count_upper (('abcdefg') ana 0 count_upper (('dBBE') ana 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,ewe_Latn,python,"
def closest_integer(value):
    '''Wɔ dɔdeasi aɖe si xɔa xexlẽdzesi (dzesi) si le tsitre ɖi na xexlẽdzesi eye wònana xexlẽdzesi si te ɖe eŋu wu la. Ne xexlẽdzesi la le adzɔge tso xexlẽdzesi eve gbɔ la, ƒo xlãe le zero gbɔ. Kpɔɖeŋuwo >>> closest_integer (((""10"") 10 >>> closest_integer (((""15.3"") 15 De dzesii: Xlãƒo le adzɔge tso zero fia be ne xexlẽdzesi si wona la le adzɔge tso xexlẽdzesi eve gbɔ la, ele be nàtrɔ agbɔe si le adzɔge wu zero. Le kpɔɖeŋu me, ne ètsɔ xexlẽdzesi si te ɖe ŋuwò wu la, ele be nàtrɔ agbɔe 15 eye ne ètsɔ xexlẽdzesi si te ɖe ŋuwò wu (((-14.5"") la, ele be wòaɖo -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,ewe_Latn,python,"
def make_a_pile(n):
    """"""Ne wode dzesi xexlẽdzesi blibo si nye n la, ele be nàwɔ kpewo ƒe ƒuƒoƒo si ƒe towo nye n. Kpewo le akpa gbãtɔ si. Kpewo ƒe xexlẽdzesi le akpa si kplɔe ɖo nye: - xexlẽdzesi si le megbe ne n nye ɖeka. - xexlẽdzesi si le megbe ne n nye eve. Gbugbɔ kpewo ƒe xexlẽdzesi le akpa ɖesiaɖe me le nuŋlɔɖi me, afisi nu si le index i nye kpewo ƒe xexlẽdzesi le akpa si nye (i+1). Kpɔɖeŋuwo: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,ewe_Latn,python,"
def words_string(s):
    """"""Woana nyagbewo ƒe kɔme si womã kple kɔme alo teƒewo. Wò dɔ enye be nàma kɔme la ɖe nyagbewo me eye nàtrɔ nyagbewo ƒe ƒuƒoƒo aɖe. Le kpɔɖeŋu me: words_string ((""Medo gbe na wò, nye ŋkɔe nye John"") == [""Medo gbe na wò"", ""nye"", ""ŋkɔ"", ""enye"", ""John""] words_string ((""Ame ɖeka, eve, etɔ̃, ene, atɔ̃, ade"") == [""Ame ɖeka"", ""eve"", ""etɔ̃"", ""ene"", ""atɔ̃"", ""ade""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,ewe_Latn,python,"
def choose_num(x, y):
    """"""Dɔwɔƒe sia xɔa xexlẽdzesi nyui eve x kple y eye wòɖoa xexlẽdzesi si nye xexlẽdzesi si nye [x, y] kple [x, y] dome la ɖa. Ne xexlẽdzesi ma meli o la, ke dɔwɔƒe la naɖo -1. Le kpɔɖeŋu me: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,ewe_Latn,python,"
def rounded_avg(n, m):
    """"""Wona xexlẽdzesi siwo nye n kple m eve, eye wò dɔe nye be nàbu xexlẽdzesi siwo nye n va se ɖe m (kple n kple m) ƒe titina. Ƒo ŋuɖoɖoa nu ƒu va ɖo xexlẽdzesi si gogo wu eye nàtrɔ eŋu wòazu xexlẽdzesi eve. Ne n lolo wu m la, trɔ -1. Kpɔɖeŋu: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,ewe_Latn,python,"
def unique_digits(x):
    """"""Ne wotsɔ xexlẽdzesi siwo nye x siwo nye positive la ƒe ŋkɔwo na ame la, ele be wòana ame siwo katã ƒe xexlẽdzesi nye x siwo nye positive la ƒe ŋkɔwo ƒe ŋkɔwo nanɔ ɖoɖo nu.""""""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,ewe_Latn,python,"
def by_length(arr):
    """"""Ne èna xexlẽdzesi blibowo ƒe ƒuƒoƒo aɖe la, wɔ xexlẽdzesi blibo siwo le 1 kple 9 dome la ƒe ɖoɖo, trɔ asi le xexlẽdzesi siwo le ƒuƒoƒo si me la ŋu, eye nàtsɔ xexlẽdzesi siwo sɔ na wo la aɖɔli wo dometɔ ɖe sia ɖe. Le kpɔɖeŋu me: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 1, 1] return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""] Ne ƒuƒoƒo la le ƒuƒlu la, trɔ asi le xexlẽdzesi aɖe ŋu: arr = [] return [] Ne xexlẽdzesi aɖe le ƒuƒoƒo si me la, ŋe aɖaba ƒu edzi: arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [55,1] return ['One'] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,ewe_Latn,python,"
def f(n):
    """"""Wɔ dɔdeasi si nye f si xɔ n abe parameter ene, eye wòna n ƒe lolome ƒe list, si me nu si le index i ƒe asixɔxɔ nye i ƒe factorial ne i nye eve alo xexlẽdzesi siwo tso 1 va se ɖe i ƒe xexlẽdzesi. i dze egɔme tso 1. i ƒe factorial enye xexlẽdzesi siwo tso 1 va se ɖe i ƒe xexlẽdzesi (1 * 2 * ... * i). Kpɔɖeŋu: f(5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,ewe_Latn,python,"
def even_odd_palindrome(n):
    """"""Ne wode dzesi xexlẽdzesi blibo si nye n la, trɔna na tuple si me xexlẽdzesi blibo siwo nye eve kple eve siwo le ɖoɖo si nye ((1, n) me la le. Kpɔɖeŋu 1: Ŋgɔdonya: 3 Ŋgɔdonya: (1, 2) Ŋgɔdonya: Ŋgɔdonyawo nye 1, 2, 3. wo dometɔ ɖeka nye eve, eye eve nye eve. Kpɔɖeŋu 2: Ŋgɔdonya: 12 Ŋgɔdonya: (4, 6) Ŋgɔdonya: Ŋgɔdonyawo nye 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. wo dometɔ ene nye eve, eye wo dometɔ 6 nye eve. De dzesii: 1. 1 <= n <= 10^3 2. tuple trɔna na xexlẽdzesi blibo siwo nye eve kple eve ƒe xexlẽdzesi. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,ewe_Latn,python,"
def count_nums(arr):
    """"""Ŋlɔ dɔdeasi count_nums si xɔa xexlẽdzesi blibowo ƒe ƒuƒoƒo eye wònana numelɔ̃ siwo ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi le > 0. Ne xexlẽdzesi aɖe nye vɔ̃ la, ekema eƒe xexlẽdzesi gbãtɔ si dzi woŋlɔ asii la anye vɔ̃: le kpɔɖeŋu me, -123 ƒe xexlẽdzesi siwo dzi woŋlɔ asii nye -1, 2, kple 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,ewe_Latn,python,"
def move_one_ball(arr):
    """"""Eʋevi aɖe le mía si si me xexlẽdzesi N le. Eʋevi la me xexlẽdzesiwo anɔ ɖoɖo nu le ɖoɖo nu. Wò dɔdeasi enye be nànya ne anya wɔ be nàna xexlẽdzesi aɖe nanɔ ɖoɖo nu le ɖoɖo nu si mele to yim o to dɔwɔwɔ si gbɔna dzi wɔwɔ le xexlẽdzesi si wona la dzi: Woɖe mɔ na wò be nàwɔ ɖusimeʋuʋuʋu ƒe dɔwɔwɔ zi ale si nèdi. Ŋutinya ɖeka si le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim le to yim. Neva to yim la, to yim la to yim la to yim le to yim. Ne wo katã le to yim la to yim le to yim.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,ewe_Latn,python,"
def exchange(lst1, lst2):
    """"""Le kuxi sia me la, àwɔ dɔ aɖe si xɔa xexlẽdzesiwo ƒe ŋkɔwo le xexlẽdzesi eve me, eye wòakpɔe ɖa be anya wɔ be woadzra nuŋɔŋlɔawo ɖo ɖe wo nɔewo dome be lst1 nanye xexlẽdzesi evewo ƒe ŋkɔwo ko. Mome ɖe nuŋɔŋlɔ siwo woadzra ɖo ɖe lst1 kple lst2 dome la ƒe xexlẽdzesi dzi o. Ne anya wɔ be woadzra nuŋɔŋlɔawo ɖo ɖe lst1 kple lst2 dome be lst1 ƒe nuŋɔŋlɔawo katã nanye xexlẽdzesi evewo la, gbugbɔ ""YES"" ɖo. Ne menye nenema o la, gbugbɔ ""NO"" ɖo. Le kpɔɖeŋu me: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Wobui be nuŋɔŋlɔawo manye ƒuƒlu o. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,ewe_Latn,python,"
def histogram(test):
    """"""Ne wotsɔ nyagbe aɖe si nye nyagbe siwo nye nyagbe siwo me nyagbewo le la ƒe xexlẽme ɖo la, gbugbɔ ŋlɔ nyagbe si me nyagbeawo ƒe xexlẽme sɔ gbɔ le la. Ne ŋɔŋlɔdzesi geɖe sɔ le wo me la, gbugbɔ ŋlɔ wo katã. Kpɔɖeŋu: histogram ((a b c) == {'a': 1, 'b': 1, 'c': 1} histogram ((a b b a') == {'a': 2, 'b': 2} histogram ((a b c a b') == {'a': 2, 'b': 2} histogram ((b b a') == {'b 4}: histogram (a b b) == {'b 4}: histogram (a b') == {} {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,ewe_Latn,python,"
def reverse_delete(s,c):
    """"""Dɔwɔƒe Wona mɔ̃ eve mí s kple c, ele be nàɖe ŋɔŋlɔdzesi siwo katã le s me siwo sɔ kple ŋɔŋlɔdzesi ɖesiaɖe le c me ɖa eye nàdzro be nu si do tso eme la nye palindrome. Woyɔa mɔ̃ aɖe be palindrome ne exlẽna kple megbe kple ŋgɔ. Ele be nàtrɔ nu si do tso eme la ƒe ƒuƒoƒo si me nu si do tso eme kple Nyateƒe/Aʋatsoe le adzodzoe me. Le kpɔɖeŋu me, ne s = ""abcde"", c = ""ae"", nu si do tso eme anye ('bcd',Aʋatsoe) Ne s = ""abcdef"", c = ""b"" nu si do tso eme anye ('acdef',Aʋatsoe) Ne s = ""abcdedcba"", c = ""ab"", nu si do tso eme anye ('cdedc',Aʋatsoe)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,ewe_Latn,python,"
def odd_count(lst):
    """"""Ne wotsɔ nyagbewo ƒe xexlẽdzesi si me nyagbe ɖesiaɖe nye xexlẽdzesiwo ko la, trɔna ŋkɔ ɖe. Numeɖeɖe ɖesiaɖe si nye i le nu si wota me la nye ""numer of odd elements in the string i of the input"". afisi woatsɔe xexlẽdzesi siwo nye i le nu si wota me la ƒe xexlẽdzesi si nye i'th ƒe xexlẽdzesi si nye odd. >>> odd_count['1234567']) [""the number of odd elements 4n the str4ng 4 of the 4nput.""] >>> odd_count['3',""111111""]) [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,ewe_Latn,python,"
def minSubArraySum(nums):
    """"""Ne wode xexlẽdzesi blibowo numewo nu la, ke kpɔ xexlẽdzesi siwo menye ƒuƒlu o ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesi suewo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo""""""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,ewe_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Wona tsigowo ƒe xadzraɖoƒe si ƒe dzogoe nye dzogoe ene. Xadzraɖoƒe sia ƒe axa ɖeka le tsitre ɖi na tsigo ɖeka, eye xadzraɖoƒe sia ƒe axa ɖeka le tsitre ɖi na tsi ƒe agbɔsɔsɔ ɖeka. Xadzraɖoƒe sia ƒe xadzraɖoƒe le tsitre ɖi na tsi ƒe agbɔsɔsɔ ɖeka. Xadzraɖoƒe sia ƒe xadzraɖoƒe le tsitre ɖi na tsi ƒe agbɔsɔsɔ ɖeka. Xadzraɖoƒe sia ƒe xadzraɖoƒe le tsitre ɖi na tsi ƒe agbɔsɔsɔ ɖeka. Xadzraɖoƒe sia ƒe xadzraɖoƒe le tsitre ɖi na tsi ƒe agbɔsɔsɔ ɖeka. Xadzraɖoƒe sia ƒe xadzraɖoƒe le tsitre ɖi na tsi ƒe agbɔsɔsɔ ɖeka. Xadzraɖoƒe sia ƒe xadzraɖoƒe le tsitre ɖi na tsi ƒe agbɔsɔsɔ ɖeka. Xadzraɖoƒe sia ƒe xadzraɖoƒe le tsitre ɖi na tsi ƒe agbɔsɔsɔ ɖeka. Xadzraɖoƒe sia ƒe xadzraɖoƒe le tsitre ɖi na tsi ƒe agbɔsɔsɔ ɖeka. Xadzraɖoƒe sia ƒe xadzraɖoƒe le tsitre ɖi na tsi ƒe agbɔsɔsɔ ɖeka. Xadzraɖoƒe sia ƒe xadzraɖoƒe le tsitre ɖi na tsi ƒe agbɔsɔ ɖeka. Xadzraɖoƒe sia ƒe xadzraɖoƒe le tsitre ɖi na tsi ƒe agbɔsɔ ɖeka. Xadzraɖoƒe sia ƒe xadzraɖoƒe le tsitre ɖi na tsi ƒe agbɔsɔ ɖeka. Xadzraɖoƒe la nye xadzraɖoƒe si le esi xadzraɖoƒe la. Xadzraɖoƒe la nye xadzraɖoƒe la nye xadzraɖoƒe si le esi xadzraɖoƒe la. Xadzraɖoƒe la nye xadzraɖoƒe la xadzraɖoƒe la xadzraɖoƒe la xadzraɖoƒe la xadzraɖoƒe la x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,ewe_Latn,python,"
def sort_array(arr):
    """"""Le Kata sia me la, ele be nàɖɔli xexlẽdzesi siwo menye negatives o le woƒe xexlẽdzesi siwo le woƒe binary me le ɖoɖo si le dzi yim nu. Le xexlẽdzesi siwo sɔ kple wo tɔ gome la, ɖɔli le woƒe xexlẽdzesi dziɖekɛ dzi. Ele be woaɖɔli ale: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,ewe_Latn,python,"
def select_words(s, n):
    """"""Ne èna nyagbe s kple xexlẽdzesi n la, wobia tso asiwò be nàwɔ dɔ aɖe si ana nya siwo katã le nyagbe s me siwo ƒe gbeɖiɖiwo nye n la ƒe ŋkɔwo, ale be nya siawo nadze le nyagbe s me. Ne nyagbe s la le ƒuƒlu la, ke dɔ la naŋlɔ ŋkɔ siwo le ƒuƒlu. De dzesii: àte ŋu abu be nyagbe si nèna la me nyawo kple nyagbewo koe le. Kpɔɖeŋuwo: select_words (((""Mary had a little lamb"", 4) ==> [""little""] select_words (((""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words"" (((simple white space"", 2) ==> [] select_words (((""Hello world"", 4) ==> [""world""] select_words (((""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,ewe_Latn,python,"
def get_closest_vowel(word):
    """"""Woana nya aɖe wò. Wò dɔ enye be nàkpɔ gbeɖiɖi si te ɖe wo nɔewo ŋu wu si le gbeɖiɖi eve dome tso nya la ƒe ɖusime (ŋɔŋlɔdzesi si nya le bɔbɔe). Gbeɖiɖi siwo le eƒe gɔmedzedze kple nuwuwu mele xexlẽ me o. Gbugbɔ nyagbe ƒuƒlu la ɖo ne mèkpɔ gbeɖiɖi aɖeke si ɖo nɔnɔme si le etame la nu o. Àte ŋu abui be nyagbe si wotsɔ ɖo la me Eʋegbe ŋɔŋlɔdzesiwo koe le. Kpɔɖeŋu: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""UULL"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,ewe_Latn,python,"
def match_parens(lst):
    '''Woana wò nyagbe eve, nyagbe eveawo katã nye '(' kple ') ' ƒe nuxexlẽ. Wò dɔ enye be nàkpɔe ɖa be anya wɔ be nàtsɔ nyagbe eveawo aƒo ƒu le ɖoɖo aɖe nu, be nyagbe si ado tso eme la nanye nyuia. Woate ŋu abu nyagbe S be enye nyuia ne eye ne nyagbe siwo le S me la katã sɔ. Le kpɔɖeŋu me: nyagbe '((()) ' nyo, gake nyagbe '()) ' mele nenema o. Gbugbɔ ɖo 'Yes' ne mɔ aɖe li si dzi woato awɔ nyagbe nyui, eye gbugbɔ ɖo 'No' ne menye nenema o. Kpɔɖeŋuwo: match_parens[('() ', ') ']) == 'Yes' match_parens[(') ', ') ']) == 'No' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,ewe_Latn,python,"
def maximum(arr, k):
    """"""Ne ame ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo le ame ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo me la, ke ele be ame ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo nanɔ abe ale si wòle le ame ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo me ene. Kpɔɖeŋu 1: Numetoto: arr = [-3, -4, 5], k = 3 Numetoto: [-4, -3, 5] Kpɔɖeŋu 2: Numetoto: arr = [4, -4, 4], k = 2 Numetoto: [4, 4] Kpɔɖeŋu 3: Numetoto: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Numetoto: [2] De dzesii: 1.""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,ewe_Latn,python,"
def solution(lst):
    """"""Ne wode xexlẽdzesi siwo menye ƒuƒlu o la, trɔna numegbe siwo katã le teƒe eve la ƒe xexlẽdzesi. Kpɔɖeŋuwo ƒe ŋuɖoɖo (([5, 8, 7, 1]) ==> 12 ŋuɖoɖo (([3, 3, 3, 3]) ==> 9 ŋuɖoɖo (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,ewe_Latn,python,"
def add_elements(arr, k):
    """"""Ne wode xexlẽdzesi blibo siwo nye arr kple xexlẽdzesi blibo k si menye ƒuƒlu o la, trɔna nu siwo ƒe xexlẽdzesi le xexlẽdzesi gbãtɔ k me ƒe xexlẽdzesi eve ƒe xexlẽdzesi gbɔ. Kpɔɖeŋu: Numɔmee: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Numɔmee: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,ewe_Latn,python,"
def get_odd_collatz(n):
    """"""Ne wode dzesi xexlẽdzesi nyui n la, trɔna ŋkɔwo ƒe xexlẽdzesi siwo le ɖoɖo nu le ɖoɖo nu. Collatz ƒe susu enye akɔntabubu si ku ɖe xexlẽdzesi siwo le ɖoɖo nu la ŋu. Efia be: dze egɔme kple xexlẽdzesi nyui n. Emegbe woɖea xexlẽdzesi ɖe sia ɖe tso xexlẽdzesi si do ŋgɔ na wo me abe ale si gbɔna ene: ne xexlẽdzesi si do ŋgɔ na wo la nye eve la, xexlẽdzesi si kplɔe ɖo la nye xexlẽdzesi si do ŋgɔ na wo la ƒe afã. Ne xexlẽdzesi si do ŋgɔ na wo la nye eve la, xexlẽdzesi si kplɔe ɖo la nye xexlẽdzesi si do ŋgɔ na wo la ƒe teƒe 3 kple 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,ewe_Latn,python,"
def valid_date(date):
    """"""Ele be nàŋlɔ dɔ si ana ŋkeke ƒe xexlẽdzesi si wona la nazu nyateƒe ne ŋkeke la nye nyateƒe, ne menye nenema o la, anye aʋatso. Ŋkekea nye nyateƒe ne se siwo gbɔna la katã le eme: 1. Ŋkeke ƒe xexlẽdzesi la menye ƒuƒlu o. 2. Ŋkeke ƒe xexlẽdzesi menye ŋkeke 1 alo ŋkeke 31 o le ɣleti 1,3,5,7,8,10,12 me, eye ŋkeke ƒe xexlẽdzesi menye ŋkeke 1 alo ŋkeke 30 o le ɣleti 4,6,9,11 me. Eye ŋkeke ƒe xexlẽdzesi menye ŋkeke 1 alo ŋkeke 29 o le ɣleti 2 me. 3. Ɣletiwo mele be woanye ɣleti 1 alo ŋkeke 29 o le ɣleti 2 me. 4. Ŋkekea nanɔ ɖoɖo sia me: mm-dd-yy-yy, le kpɔɖeŋu me: valid_date (le ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye ŋkeke si nye si nye ŋkeke si nye ŋkeke si nye si nye si.""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,ewe_Latn,python,"
def split_words(txt):
    '''Ne nyawo ƒe ƒuƒoƒo aɖe le asiwò la, trɔ nya siwo woma ɖe teƒewo dzi la ƒe ŋkɔ ɖe megbe, ne teƒewo mele ŋɔŋlɔa me o la, ke ele be nàtsɔ nuŋɔŋlɔdzesi siwo woma ɖe teƒewo dzi la aɖo megbe,',' ne nuŋɔŋlɔdzesi siwo woma ɖe teƒewo o la, ke ele be nàtsɔ nuŋɔŋlɔdzesi siwo wotsɔ ŋɔŋlɔdzesi siwo nye ŋɔŋlɔdzesi suewo la ƒe xexlẽme si le ɖoɖo tɔxɛ me le alfabeta me la aɖo megbe, ord ((('a') = 0, ord ((('b') = 1, ... ord ((('z') = 25 Kpɔɖeŋuwo split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,ewe_Latn,python,"
def is_sorted(lst):
    '''Ne èna xexlẽdzesiwo ƒe ŋkɔwo le wo me la, trɔ wo ɖe wo me le ɖoɖo si dzi wole dzi yim le la nu. Ne xexlẽdzesi ɖeka ƒe teƒe ɖeka wu la, trɔ FALSE. Mègabu xexlẽdzesi siwo nye negative o, ke boŋ xexlẽdzesi siwo nye blibowo ko. Kpɔɖeŋuwo nye: is_sorted ({1, 2, 3, 4, 5]) -> True is_sorted ({1, 3, 2, 4, 5, 6]) -> True is_sorted ({1, 2, 3, 4, 5, 6]) -> True is_sorted ({1, 2, 3, 4, 5, 6, 7]) -> True is_sorted ({1, 3, 2, 4, 5, 6, 7]) -> False is_sorted ({1, 3, 2, 4, 5, 6, 7]) -> False is_sorted ({1, 2, 2, 3, 3, 4]) -> True is_sorted ({1, 2, 2, 2, 3, 4 -> False)'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,ewe_Latn,python,"
def intersection(interval1, interval2):
    """"""Woana ɣeyiɣi eve, afisi ɣeyiɣi ɖesiaɖe nye xexlẽdzesi blibo eve. Le kpɔɖeŋu me, ɣeyiɣi = (dze egɔme, nuwuwu) = (1, 2). Ɣeyiɣi siwo wona la le tutu, si fia be ɣeyiɣi (dze egɔme, nuwuwu) la lɔ gɔmedzedze kple nuwuwu siaa ɖe eme. Le ɣeyiɣi ɖesiaɖe si wona la, wobui be eƒe gɔmedzedze le sue wu alo sɔ kple eƒe nuwuwu. Wò dɔe nye be nànya ne ɣeyiɣi eve siawo ƒe teƒe ƒe didime nye xexlẽdzesi gbãtɔ. Le kpɔɖeŋu me, ɣeyiɣi (1, 3), (2, 4) ƒe teƒe ƒe didime nye (2, 3) si ƒe didime nye 1, si menye xexlẽdzesi gbãtɔ o. Ne teƒe ƒe didime nye xexlẽdzesi gbãtɔ la, gbugbɔ ""EE"", ne menye nenema o la gbugbɔ ""AO"". Ne ɣeyiɣi eveawo metoa teƒe o la, gbugbɔ ""AO"". [input/output] samples: intersection ({((1, 2), (2, 3) ==> ""intersection ({(1, 1), NO) "" intersection ({0, 4) ==>""NO"" - {(1, 5} - {(5, Y ({(3, Y ()) ))""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,ewe_Latn,python,"
def prod_signs(arr):
    """"""Woana numegbeƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒleƒle""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,ewe_Latn,python,"
def minPath(grid, k):
    """"""Ne èkpɔ grid si me xadzesi N kple axa N le (N >= 2) eye xadzesi k ƒe didime nye nyuia la, xadzesi ɖe sia ɖe si le xadzesia me la me nɔa asixɔxɔ ɖeka. Xadzesi ɖe sia ɖe si le [1, N * N] kple edzi la dzena zi ɖeka pɛ ko le xadzesia me. Ele be nàdi mɔ si didi k ƒe didime nyea le xadzesia me. Àte ŋu adze egɔme tso xadzesi ɖe sia ɖe me, eye le afɔɖeɖe ɖe sia ɖe me la, àte ŋu ayi xadzesi siwo te ɖe eŋu la dometɔ ɖe sia ɖe me, le nya bubuwo me la, àte ŋu ayi xadzesi siwo ƒe liƒowo le ɖeka kple wò xadzesi si le eme fifia la me. De dzesii be mɔ si didi k fia be nàyi xadzesi k tututu (menye esiwo to vovo kokoko o). Màte ŋu ado le xadzesia me o. Mɔ A (si didi k) la le sue wu mɔ B (si didi k) ne ne le xadzesi siwo me xadzesi siwo le xadzesiawo me siwo A kple B (míayɔ wo be lA_st kple lA_st), xadzesi lA_st, xadzesi siwo le xadzesi me la me la le sue wu xadzesi lA_st, le nyagbe me la me. Le mɔ sia nu la, xadzesi ɖe sia ɖe sia ɖe le sue wu xadzesi k. Le mɔa me la, àte ŋu dɔ le xadzesi k. Le mɔ sia ɖe sia ɖe sia ɖe nu me la, àte ŋu le xadzesi, àte ŋu, le xadzesi, le xadzesi, xadzesi ɖe sia ɖe sia ɖe nu, xadzesi, xadzesi, xadzesi, xadzesi, xadzesi, xadzesi, xadzesi, xadzesi, xadzesi, xadzesi, xadzesi, xadzesi, x, x, x, x, x, x, y, y, y, y, y, y, y, y, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z,""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,ewe_Latn,python,"
def tri(n):
    """"""Amesiame nya Fibonacci ƒe ɖoɖo, akɔntaŋutinunyalawo srɔ̃e nyuie le ƒe alafa eve siwo va yi me. Gake nusi amewo menya o enye Tribonacci ƒe ɖoɖo. Woɖea Tribonacci ƒe ɖoɖo gɔme to tɔtrɔwɔwɔ dzi: tri(1) = 3 tri(n) = 1 + n / 2, ne n nye eve. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ne n nye eve. Le kpɔɖeŋu me: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Wona xexlẽdzesi si menye negɔ̃ o n, ele be nàtrɔ asi le xexlẽdzesi gbãtɔ n + 1 siwo le Tribonacci ƒe ɖoɖo la me ŋu. Kpɔɖeŋuwo: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,ewe_Latn,python,"
def digits(n):
    """"""Ne wode dzesi xexlẽdzesi blibo si nye n la, trɔ asi le xexlẽdzesi siwo nye ɖeka ƒe xexlẽdzesi ŋu. Gbugbɔ 0 ne xexlẽdzesiawo katã nye eve. Le kpɔɖeŋu me: xexlẽdzesi siwo nye ((1) == 1 xexlẽdzesi siwo nye ((4) == 0 xexlẽdzesi siwo nye ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,ewe_Latn,python,"
def is_nested(string):
    '''Wɔ dɔdeasi aɖe si xɔa string abe nuŋɔŋlɔ si me dzogoe dzogoe dzrowo ko le ene. Dɔdeasi sia naɖo true ne eye ne dzogoe dzrowo ƒe ɖoɖo si me dzogoe ɖeka ya teti le la li. is_nested (('[[]]') â -> True is_nested (('[]]]]]]]] [[[[[[[]') â -> False is_nested (('[][]') â -> False is_nested (('[]') â -> False is_nested (('[[]]') â -> True is_nested ([[]]') â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,ewe_Latn,python,"

def sum_squares(lst):
    """"""Woana xexlẽdzesiwo ƒe ŋkɔwo mi. Ehiã be miaɖo xexlẽdzesi siwo le xexlẽdzesi siwo le xexlẽdzesi siwo wona la ƒe teƒe eve ƒe xexlẽdzesi gbɔ, miaƒo nu tso nu siwo le xexlẽdzesi me la dometɔ ɖe sia ɖe ŋu le nu siwo le dzi la dzi gbã. Kpɔɖeŋuwo: Ne lst = [1,2,3] la, nu si miawɔ anye 14 Ne lst = [1,4,9] la, nu si miawɔ anye 98 Ne lst = [1,3,5,7] la, nu si miawɔ anye 84 Ne lst = [1.4,4.2,0] la, nu si miawɔ anye 29 Ne lst = [-2.4,1,1] la, nu si miawɔ anye 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,ewe_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Wɔ dɔdeasi aɖe si trɔna true ne nyagbe aɖe ƒe ŋɔŋlɔdzesi mamlɛtɔ nye alfabeta ŋɔŋlɔdzesi eye menye nya aɖe ƒe akpa o, eye false ne menye nenema o. De dzesii: ""nyagbe"" nye ŋɔŋlɔdzesi siwo dome nɔƒee ɖe vovo. Kpɔɖeŋuwo: check_if_last_char_is_a_letter (((""apple pie"") â -> False check_if_last_char_is_a_letter (((""apple pi e"") â -> True check_if_last_char_is_a_letter (((""apple pi e "") â -> False check_if_last_char_is_a_letter"" ((("") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,ewe_Latn,python,"
def can_arrange(arr):
    """"""Wɔ dɔdeasi aɖe si ana nuŋɔŋlɔdzesi si lolo wu si mele etɔ ŋgɔ tẽ o. Ne nuŋɔŋlɔdzesi ma meli o la, trɔ -1. Nuŋɔŋlɔdzesi siwo le abe ɖeka ene manɔ nuŋɔŋlɔdzesi siwo le etɔ megbe o. Kpɔɖeŋuwo: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,ewe_Latn,python,"
def largest_smallest_integers(lst):
    '''Wɔ dɔdeasi aɖe si trɔna tuple (a, b), afisi 'a' nye negative integers ƒe gãtɔ, eye 'b' nye positive integers ƒe suetɔ le list me. Ne negative alo positive integers meli o la, trɔ wo abe None. Kpɔɖeŋuwo: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,ewe_Latn,python,"
def compare_one(a, b):
    """"""Wɔ dɔdeasi aɖe si xɔa xexlẽdzesi blibowo, floats, alo string siwo le tsitre ɖi na xexlẽdzesi siwo nye nyateƒe, eye wònana be xexlẽdzesi siwo nye nyateƒe la ƒe xexlẽdzesi siwo lolo wu la nɔa eƒe xexlẽdzesi si wotsɔ na me. Ne xexlẽdzesiawo sɔ la, ekema eɖo None. De dzesii: Ne wotsɔ xexlẽdzesi ŋutɔŋutɔ aɖe le tsitre ɖi na abe string ene la, ate ŋu anye . alo , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,ewe_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Kpɔe ɖa be xexlẽdzesi n si wona la ate ŋu anye xexlẽdzesi eve siwo nye dzidzimetɔ 4 ƒe xexlẽdzesi si nye wo nɔewo ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi ƒe xexlẽdzesi""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,ewe_Latn,python,"
def special_factorial(n):
    """"""Brazil ƒe factorial la nye: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! afisi n > 0 Le kpɔɖeŋu me: >>> special_factorial ((4) 288 Dɔwɔɖui la axɔ xexlẽdzesi blibo abe nu si wòatsɔ adee me ene eye ele be wòaɖo xexlẽdzesi blibo sia ƒe special factorial la. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,ewe_Latn,python,"
def fix_spaces(text):
    """"""_ Kpɔɖeŋu-3ɖe la, tsɔ nyagbe siwo le ete la ɖɔli teƒewo, eye ne nyagbe aɖe me nyagbewo sɔ gbɔ wu 2 la, tsɔ nyagbe siwo le ete la ɖɔli teƒewo kple - fix_spaces (((""Example"") == ""Example"" fix_spaces (((""Example1"") == ""Example_1"" fix_spaces (((""Example2"") == ""_Example_2"" fix_spaces (((""Example 3"") == ""_Example-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,ewe_Latn,python,"
def file_name_check(file_name):
    """"""Wɔ dɔdeasi aɖe si xɔa nyadonu si le tsitre ɖi na file ƒe ŋkɔ, eye wòtrɔna 'Yes' ne file ƒe ŋkɔa le eteƒe, eye wòtrɔna 'No' ne menye nenema o. Wobua file ƒe ŋkɔ be enye esi le eteƒe ne nɔnɔme siwo gbɔna la katã le eme: - Nyadonu ƒe ŋkɔa me mele asi etɔ̃ ('0'-'9') o. - Nyadonu ƒe ŋkɔa me nya ɖeka pɛ le. - Nyadonu ƒe ŋkɔa meganɔ ƒuƒlu o, eye ele egɔme dzem kple Latin alfabet ƒe ŋɔŋlɔdzesi ('a'-'z' kple 'A'Z'). - Nyadonu ƒe ŋkɔa le asiƒlu la dzi wòle be wòanye esiwo gbɔna dometɔ ɖeka: ['txt', 'exe', 'lld'] Kpɔɖeŋu: file_name_check""{example.txt.} # => 'Yes' file_name_check""{example.txt.ll1} => 'No' (# ele be ŋkɔa nadze egɔme kple Latin alfabet ƒe ŋɔŋlɔdzesi)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,ewe_Latn,python,"


def sum_squares(lst):
    """""""" Dɔwɔƒe sia atsɔ xexlẽdzesi blibowo ƒe ŋkɔwo. Le xexlẽdzesi blibowo katã ƒe ŋkɔwo gome la, dɔwɔƒe sia ana xexlẽdzesi blibo ƒe ŋkɔwo ƒe dzidze ne eƒe xexlẽdzesi nye 3 ƒe teƒe geɖe eye wòana xexlẽdzesi blibo ƒe ŋkɔwo ƒe dzidze ne eƒe xexlẽdzesi nye 4 ƒe teƒe geɖe eye menye 3 ƒe teƒe geɖe o. Dɔwɔƒe sia matrɔ ŋkɔwo le xexlẽdzesi siwo ƒe xexlẽdzesi menye 3 alo 4 ƒe teƒe geɖe o la o. Dɔwɔƒe la agbugbɔ ŋkɔwo katã ƒe xexlẽdzesi agbɔ. Kpɔɖeŋuwo: Ne lst = [1,2,3] la, ele be nu si woado la nanye 6 Ne lst = [] la, ele be nu si woado la nanye 0 Ne lst = [-1,-5,2,-1,-5] la, ele be nu si woado la nanye -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,ewe_Latn,python,"
def words_in_sentence(sentence):
    """"""Woana nyagbe aɖe si nye nyagbe aɖe si me nya aɖewo le, eye woamawo ɖe vovo, eye ele be nàtrɔ nyagbe aɖe si me nya siwo le nyagbe gbãtɔa me le, si ƒe didime nye xexlẽdzesi gbãtɔwo, nya siwo le nyagbe yeyea me ƒe ɖoɖo nanɔ abe esi le gbãtɔa me ene. Kpɔɖeŋu 1: Ŋɔŋlɔdzesi: nyagbe = ""Esia nye dodokpɔ"" Ŋɔŋlɔdzesi: ""nye"" Kpɔɖeŋu 2: Ŋɔŋlɔdzesi: nyagbe = ""na míayi tsiƒuƒu me"" Ŋɔŋlɔdzesi: ""yi"" Mɔxeɖenuwo: * 1 <= len(nyagbe) <= 100 * Nyagbe me ŋɔŋlɔdzesiwo koe le """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,ewe_Latn,python,"
def simplify(x, n):
    """"""Wò dɔ enye be nàwɔ dɔ aɖe si ana nya x * n nanɔ bɔbɔe. Dɔwɔea ana True ne x * n nye xexlẽdzesi blibo eye False ne menye nenema o. X kple n siaa nye nyadri ƒe xexlẽdzesi, eye woƒe nɔnɔme enye esi, <numerator>/<denominator> afisi numerator kple denominator siaa nye xexlẽdzesi blibo siwo nye dzidzɔwo. Àte ŋu abu x, kple n be wonye nyadri siwo sɔ, eye wometsɔ nu le abe numenɔla ene o. simplify{""1/5"", ""5/1"") = True simplify{""1/6"", ""2/1"") = False simplify{""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,ewe_Latn,python,"
def order_by_points(nums):
    """"""Ŋlɔ dɔ si na xexlẽdzesi blibowo ƒe xexlẽdzesi siwo le xexlẽdzesiawo ƒe xexlẽdzesiwo ƒe xexlẽdzesi dzi le ɖoɖo si dzi wole dzi yim le la me. De dzesii: ne nu gbogbo aɖewo li siwo ƒe xexlẽdzesiwo ƒe xexlẽdzesiwo sɔ la, ɖo wo ɖe ɖoɖo si le woƒe xexlẽdzesi si le nuŋlɔɖi gbãtɔa me la nu. Le kpɔɖeŋu me: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,ewe_Latn,python,"
def specialFilter(nums):
    """"""Ŋlɔ dɔ aɖe si xɔa xexlẽdzesiwo ƒe ƒuƒoƒo abe nuŋɔŋlɔ ene eye wònana numekuku siwo lolo wu 10 kple xexlẽdzesi gbãtɔ kple mamlɛtɔ siaa nye dzidzi (1, 3, 5, 7, 9). Le kpɔɖeŋu me: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,ewe_Latn,python,"
def get_max_triples(n):
    """"""Woana xexlẽdzesi blibo si nye n wò. Ele be nàwɔ xexlẽdzesi blibo si ƒe didime nye n. Le i (1 ‰¤ i ‰¤ n) ɖesiaɖe gome la, a[i] = i * i - i + 1. Ðɔ ame siwo nye etɔ̃ (a[i], a[j], a[k]) ƒe xexlẽdzesi si nye a si ƒe xexlẽdzesi nye i < j < k, eye a[i] + a[j] + a[k] nye 3 ƒe teƒe eve. Kpɔɖeŋu: Numetoto: n = 5 Numetoto: 1 Numeɖeɖe: a = [1, 3, 7, 13, 21] Numeɖeɖe etɔ̃ siwo ŋu kakaɖedzi le koe nye (1, 7, 13).""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,ewe_Latn,python,"
def bf(planet1, planet2):
    '''Anyigba enyi le míaƒe ɣe ƒe ɖoɖo nu: Anyigba si te ɖe ɣea ŋu wu enye Mercury, si kplɔe ɖo enye Venus, eyome Anyigba, Mars, Jupiter, Saturn, Uranus, Neptune. Ŋlɔ dɔ si xɔa ɣletivihatsotso eve ƒe ŋkɔwo abe planet1 kple planet2 ene. Dɔwɔɖua naɖo tuple si me ɣletivihatsotso siwo katã ƒe mɔzɔzɔƒewo le ɣea ƒe mɔzɔƒe kple planet2 dome le, eye woama wo ɖe afisiwo woate ɖe ɣea ŋu le la nu. Dɔwɔɖua naɖo tuple si me naneke mele o ne planet1 alo planet2 menye ɣletivihatsotso ƒe ŋkɔwo o. Kpɔɖeŋuwo bf""(Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf(""Earth"", ""Mercury"") ==> (""Venus"") bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,ewe_Latn,python,"
def sorted_list_sum(lst):
    """"""Ŋlɔ dɔ si xɔa nyagbewo ƒe ŋkɔwo abe parameter ene, eɖea nyagbe siwo ƒe didime nye ɖeka la ɖa le eme, eye wònana ŋkɔ siwo katã le eme la nɔa ɖoɖo nu. Ŋkɔawo ƒe ŋkɔwo nɔa ɖoɖo nu ɣesiaɣi, eye womenye xexlẽdzesiwo ƒe ƒuƒoƒo o, eye ate ŋu anɔ nu eve me. Ehiã be ŋkɔawo nanɔ ɖoɖo nu le nyaawo ƒe didime nu, eye ele be nàna ŋkɔawo nanɔ ɖoɖo nu le ɖoɖo nu. Ne nya eve ƒe didime sɔ la, ekema de ŋkɔawo ƒe ŋkɔwo ɖoɖo nu le alfabeta nu. Dɔwɔea naɖo nyagbewo ƒe ŋkɔwo ɖe ɖoɖo nu. Àte ŋu abui be nyaawo katã ƒe didime sɔ. Le kpɔɖeŋu me: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,ewe_Latn,python,"
def x_or_y(n, x, y):
    """"""Efia be woaɖo x ƒe asixɔxɔ ɖe ame si nye ame gbãtɔ la ŋu ne n nye ame gbãtɔ eye ne menye nenema o la, woaɖo y ƒe asixɔxɔ ɖe ame evelia ŋu. Kpɔɖeŋuwo: x_or_y ((7, 34, 12) == 34 x_or_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,ewe_Latn,python,"
def double_the_difference(lst):
    '''Ne èna xexlẽdzesiwo ƒe xexlẽdzesiwo le asiwò la, trɔ asi le xexlẽdzesi siwo le xexlẽdzesi la ƒe teƒe eve ƒe xexlẽdzesi ŋu. Mègaɖe ŋku ɖe xexlẽdzesi siwo nye toɖolawo alo esiwo menye xexlẽdzesi blibowo o la ŋu o. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Ne xexlẽdzesi siwo le xexlẽdzesiwo me la mele ɖeke me o la, trɔ asi le 0 ŋu. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,ewe_Latn,python,"
def compare(game,guess):
    """"""Meka ɖe edzi be mí katã míeɖoa ŋku seselelãme ma dzi ne míekpɔe be nu si míele mɔ kpɔm na ɣeyiɣi didi aɖe la va eme mlɔeba. Wò seselelãme kple susu siwo le asiwò le ɣeyiɣi ma me la nyo be nàŋlɔ wo ɖi ahawɔ wo ŋuti kɔnta. Wò dɔe nye be nàkpɔe ɖa be ame aɖe nya nu si do tso eme nyuie le nu vovovo me hã. Wona nuŋɔŋlɔ kple nuŋɔŋlɔ siwo ƒe didime sɔ la wò zi eve, eye nuŋɔŋlɔ ɖe sia ɖe le nu si do tso eme la me. Gbugbɔ nuŋɔŋlɔ si ƒe didime sɔ la ɖo ɖa, eye nàɖe ale si gbegbe nuŋɔŋlɔ ɖe sia ɖe to vovoe la me. Ne nuŋɔŋlɔawo sɔ la, ke nuŋɔŋlɔa nye 0, eye ne womewɔe nenema o la, ke nuŋɔŋlɔa nye nuŋɔŋlɔa kple nuŋɔŋlɔa dome vovototo.""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,ewe_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Woaɖe klas ƒe ŋkɔ (dzeside) kple dodowo ƒe ŋkɔwo afia wò. Woazã dodowo atsɔ ade suku bubu siwo le klass la me. Eƒe ŋusẽ le ale: Na CAP nanye ŋɔŋlɔdzesi gãwo ƒe xexlẽme le dodo ƒe ŋkɔ me, eye na SM nanye ŋɔŋlɔdzesi suewo ƒe xexlẽme le dodo ƒe ŋkɔ me, ŋusẽ le kpukpui CAP - SM me. Wò ya di dodo sesẽtɔ eye nàɖo string si le ɖoɖo sia me: ClassName.StrongestExtensionName. Ne dodo eve alo esi wu emawo le ŋusẽ ɖeka me la, ele be nàtia esi dze ŋgɔ le ŋkɔa me. Le kpɔɖeŋu me, ne wona ""Slices"" wò abe klass kple dodowo ƒe ŋkɔ ene: ['SEviRNGSliCes', 'Cheese', 'StuFfed'] ekema ele be nàɖo 'Slices.SEviRNGCes' 'SviRNGCes' 'mySviRNGCes']) elabena dodoa sesẽtɔe: 'AA' (le kpɔɖeŋu me: 'AA'_Beast'_class' => 'AA'Strongest_Extension'), 'AA' => 'AA'""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,ewe_Latn,python,"
def cycpattern_check(a , b):
    """"""Wode nya eve na wò. Ehiã be nàtrɔ true ne nya evelia alo eƒe tɔtrɔ ɖe sia ɖe nye nya gbãtɔ ƒe akpa aɖe cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => True cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => True cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,ewe_Latn,python,"
def even_odd_count(num):
    """"""Ne wode dzesi xexlẽdzesi blibo aɖe la, ele be woana numekɔkɔ si nye xexlẽdzesi siwo nye eve kple eve ƒe xexlẽdzesi ɖeka. Kpɔɖeŋu: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,ewe_Latn,python,"
def int_to_mini_roman(number):
    """"""Ne wode dzesi xexlẽdzesi blibo aɖe la, ke ele be woaŋlɔe ɖe Roma xexlẽdzesi me abe nyagbe ene, eye woaŋlɔe ɖe suewo me.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,ewe_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Le dzogoe etɔ̃ ƒe didime nu la, enye dzogoe etɔ̃ ƒe didime. Ne eƒe akpa etɔ̃awo nye dzogoe etɔ̃ siwo nye dzogoe dzɔdzɔe la, enye nyateƒe, ne menye nenema o la enye aʋatso. Dzogoe dzɔdzɔe etɔ̃ nye dzogoe etɔ̃ siwo ƒe dzogoe ɖeka nye dzogoe dzɔdzɔe alo dzogoe 90 ƒe dzogoe. Kpɔɖeŋu: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,ewe_Latn,python,"
def find_max(words):
    """"""Ŋlɔ dɔ si xɔa nyagbewo ƒe ŋkɔwo. Nyagbe vovovowoe le ŋkɔawo me. Gbugbɔ nya si ƒe ŋɔŋlɔdzesiwo sɔ gbɔ wu la ɖo. Ne nyagbe geɖewo le ŋkɔawo me la, gbugbɔ nya si dze gbã le nyagbewo ƒe ɖoɖo nu ɖo.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,ewe_Latn,python,"
def eat(number, need, remaining):
    """"""Ènye ha aɖe si dɔ le wuwum, eye èɖu ŋeŋewo ƒe agbɔsɔsɔ aɖe xoxo, gake fifia ehiã be nàɖu ŋeŋe bubuwo wu be nàwu ŋkekea ƒe nuɖuɖuwo nu. ele be nàtrɔ asi le [ ŋeŋe siwo nèɖu le wò nuɖuɖu megbe ƒe xexlẽme, ŋeŋe siwo susɔ le wò nuɖuɖu megbe ƒe xexlẽme ] ƒe alinea ŋu ne ŋeŋe susɔawo mesɔ gbɔ o la, àɖu ŋeŋe susɔawo katã, gake dɔ agawu wò kokoko. Kpɔɖeŋu: * ɖu ((5, 6, 10) -> [11, 4] * ɖu ((4, 8, 9) -> [12, 1] * ɖu ((1, 10, 10) -> [11, 0] * ɖu ((2, 11, 5) -> [7, 0] Tɔtrɔdzesiwo: @number: ŋeŋe ƒe xexlẽme si nèɖu. @need: ŋeŋe ƒe xexlẽme si hiã be nàɖu. @remaining: ŋeŋe ƒe xexlẽme si susɔ le adzame: *constrain: 0= <= 0 * 1000 <= 0 * need <= 1000 <= 1000 = 0 Have fun = 1000:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,ewe_Latn,python,"
def do_algebra(operator, operand):
    """"""Ne wotsɔ ŋkɔ eve na ŋkɔawo la, ŋkɔa ƒe didime nyea: operator kple operand. ŋkɔ gbãtɔa ƒe didime nyea algebra ƒe dɔdɔwo, eye ŋkɔ evelia nyea integers ƒe ŋkɔ. zã ŋkɔ eve siwo wotsɔ na la nàtsɔ awɔ algebra ƒe nyagbɔgblɔ eye nàtsɔ ana numekɔkɔe. ŋkɔa ƒe didime nyea: Addition (+) Subtraction (-)) Multiplication (*) Floor division ( //) Exponentiation ( ** Example) operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 De dzesii: ŋkɔa ƒe didime nyea ŋkɔa ƒe didime minus 1 Operand nyea xexlẽdzesi siwo menye negatives ƒe ŋkɔ. ŋkɔa ƒe didime nyea operator ƒe ŋkɔ ɖeka, eye ŋkɔa ƒe didime nyea operand ƒe ŋkɔ eve.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,ewe_Latn,python,"
def solve(s):
    """"""Woana string s. ne s[i] nye ŋɔŋlɔdzesi la, trɔ eƒe ŋɔŋlɔdzesi tso ete va dzi alo ɖe eƒe teƒe, ne menye nenema o la, na wòanɔ abe alesi wòle ene. Ne ŋɔŋlɔdzesi aɖeke mele string la me o la, trɔ string la. Ele be dɔwɔwɔa nagbugbɔ string si do tso eme la ana. Kpɔɖeŋuwo solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,ewe_Latn,python,"
def string_to_md5(text):
    """"""Ne èna nyagbe 'text' la, trɔ eƒe md5 hash equivalent string. Ne 'text' nye nyagbe ƒuƒlu la, trɔ None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,ewe_Latn,python,"
def generate_integers(a, b):
    """"""Ne wotsɔ xexlẽdzesi blibo eve siwo nye a kple b na la, trɔ asi le xexlẽdzesi siwo nye a kple b dome la ŋu le ɖoɖo si le dzi yim me. Le kpɔɖeŋu me: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
