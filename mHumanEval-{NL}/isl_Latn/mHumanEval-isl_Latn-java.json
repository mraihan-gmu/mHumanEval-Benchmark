[{"task_id":"HumanEval_0","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ gefinn þröskuldur.     \/ Athuga hvort í gefnum röð lista af tölum, eru einhverjar tvær tölur nærri hvort öðru en     \/\/ >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))\n    \/\/ (false)\n    \/\/ >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))\n    \/\/ (true)\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n        if(numbers == null || numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Float> numbers1 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f));\n        System.out.println(hasCloseElements(numbers1, 0.5f)); \/\/ Output: false\n\n        ArrayList<Float> numbers2 = new ArrayList<>(Arrays.asList(1.0f, 2.8f, 3.0f, 4.0f, 5.0f, 2.0f));\n        System.out.println(hasCloseElements(numbers2, 0.3f)); \/\/ Output: true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.3f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.05f)) == (false));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.95f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.8f)) == (false));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.1f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (1.0f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (0.5f)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_1","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Ekki nota rými í innritunarstrengnum.     \/ Aðskildar hópar eru í jafnvægi (hver opinn stuðningur er rétt lokaður) og ekki hreiðraðir inn í hvern annan     \/ aðgreina þá hópa í aðskilin streng og skila röð listann af þeim.     \/ Input til þessa hlutverki er strengur sem inniheldur marga hópa hreiðraða hnefa.    \/\/ >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n        ArrayList<String> groups = new ArrayList<>();\n        int balance = 0;\n        StringBuilder currentGroup = new StringBuilder();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                balance++;\n                currentGroup.append(c);\n            } else if (c == ')') {\n                balance--;\n                currentGroup.append(c);\n            }\n\n            if (balance == 0 && currentGroup.length() > 0) {\n                groups.add(currentGroup.toString());\n                currentGroup.setLength(0);\n            }\n        }\n\n        return groups;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> result = separateParenGroups(\"( ) (( )) (( )( ))\");\n        System.out.println(result); \/\/ Output: [\"()\", \"(())\", \"(()())\"]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\")))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_2","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Senda tíundarhluta tölunnar.     \/ (afgangur er alltaf minni en 1).    \/ og heilkorna hluti (stærsta heilkornið er minna en gefið númer) og tígildur     \/ Ef við gefum jákvæðan fljúgandi punktanúmer þá er hægt að skipta því niður í     \/\/ >>> truncateNumber((3.5f))\n    \/\/ (0.5f)\n    public static float truncateNumber(float number) {\n","canonical_solution":"int integerPart = (int) number;\n        return number - integerPart;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_3","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ á þeim tímapunkti ætti að skila sannri. Annars ætti það að skila rangri.     \/ núll jafnvægi. Verkefni þitt er að greina ef á einhverjum tímapunkti jafnvægi reiknings fellur undir núll, og     Þú færð lista yfir inn- og útgreiðslur á bankareikningi sem byrjar á     \/\/ >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (false)\n    \/\/ >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l))))\n    \/\/ (true)\n    public static boolean belowZero(ArrayList<Long> operations) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static boolean belowZero(ArrayList<Long> operations) {\n        long balance = 0;\n        for (Long operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> operations1 = new ArrayList<Long>(Arrays.asList(1L, 2L, 3L));\n        System.out.println(belowZero(operations1)); \/\/ false\n\n        ArrayList<Long> operations2 = new ArrayList<Long>(Arrays.asList(1L, 2L, -4L, 5L));\n        System.out.println(belowZero(operations2)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(belowZero((new ArrayList<Long>(Arrays.asList()))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-3l, (long)1l, (long)2l, (long)-3l)))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l, (long)6l)))) == (true));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-5l)))) == (true));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_4","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ MAD = meðaltali. x - x_mean.     \/ þættir og miðpunktur (meðaltal í þessu tilfelli):     \/ Mean Absolute Deviation er meðaltal algjörs munar á milli hvers og eins     \/ um miðgildi þessa gagna.     \/ Fyrir veittan röð lista af innlegg tölur, reikna Mean Absolute Deviation     \/\/ >>> meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f))))\n    \/\/ (1.0f)\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    \/\/ For a given array list of input numbers, calculate Mean Absolute Deviation\n    \/\/ around the mean of this dataset.\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"The list should not be null or empty\");\n        }\n        \n        \/\/ Calculate mean\n        float sum = 0.0f;\n        for (float num : numbers) {\n            sum += num;\n        }\n        float mean = sum \/ numbers.size();\n        \n        \/\/ Calculate Mean Absolute Deviation\n        float madSum = 0.0f;\n        for (float num : numbers) {\n            madSum += Math.abs(num - mean);\n        }\n        \n        return madSum \/ numbers.size();\n    }\n\n    \/\/ A main method to demonstrate functionality\n    public static void main(String[] args) {\n        ArrayList<Float> numbers = new ArrayList<Float>();\n        numbers.add(1.0f);\n        numbers.add(2.0f);\n        numbers.add(3.0f);\n        numbers.add(4.0f);\n\n        float mad = meanAbsoluteDeviation(numbers);\n        System.out.println(\"Mean Absolute Deviation: \" + mad);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))) == (1.2f));\n    }\n\n}\n"},{"task_id":"HumanEval_5","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Setjið inn fjölda \"afmarkandi\" á milli tveggja samfelldra þátta í innleggslistanum `numbers'     \/\/ >>> intersperse((new ArrayList<Long>(Arrays.asList())), (4l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> intersperse((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (4l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)4l, (long)3l)))\n    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Insert a number 'delimeter' between every two consecutive elements of input array list `numbers'\n    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {\n        if (numbers == null || numbers.size() <= 1) {\n            return numbers;\n        }\n\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimeter);\n            }\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<Long> numbers1 = new ArrayList<>(Arrays.asList());\n        ArrayList<Long> result1 = intersperse(numbers1, 4L);\n        System.out.println(result1);\n\n        ArrayList<Long> numbers2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L));\n        ArrayList<Long> result2 = intersperse(numbers2, 4L);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(intersperse((new ArrayList<Long>(Arrays.asList())), (7l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)2l))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)6l, (long)8l, (long)3l, (long)8l, (long)2l)))));\n    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l, (long)2l, (long)2l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_6","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ T.d. hefur (() (()) hámark tvö hreiðrunar stig en ((())) hefur þrjú.     \/ Fyrir hvern af hópnum, útgáfa dýpsta stig hreiður af brúnum.     \/ Input til þessa hlutverki er strengur sem táknar margar hópar fyrir hreiðraða brúnir aðskilin með rýmum.     \/\/ >>> parseNestedParens((\"(()()) ((())) () ((())()())\"))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        String[] groups = paren_string.split(\" \");\n        ArrayList<Long> depths = new ArrayList<>();\n\n        for (String group : groups) {\n            long currentDepth = 0;\n            long maxDepth = 0;\n\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    if (currentDepth > maxDepth) {\n                        maxDepth = currentDepth;\n                    }\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n\n            depths.add(maxDepth);\n        }\n\n        return depths;\n    }\n\n    public static void main(String[] args) {\n        String input = \"(()()) ((())) () ((())()())\";\n        System.out.println(parseNestedParens(input));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_7","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Fyltir aðeins innkomuframlagslista af strengjum fyrir þá sem innihalda gefið undirstreng     \/\/ >>> filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"cde\", (String)\"array\"))), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n","canonical_solution":"public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n        return strings.stream()\n                .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"prune\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_8","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Tólinn safn ætti að vera 0 og tómur vöru ætti að vera 1.     \/ Fyrir ákveðinn röð lista af heilum tölum, skilar pari sem samanstendur af a summa og a vara af öllum heilum tölum í röð röð lista.     \/\/ >>> sumProduct((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (Pair.with(0l, 1l))\n    \/\/ >>> sumProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (Pair.with(10l, 24l))\n    public static Pair<Long, Long> sumProduct(ArrayList<Long> numbers) {\n","canonical_solution":"long sum = 0L;\n        long product = 1L;\n        \n        for (Long number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        \n        return Pair.with(sum, product);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList()))).equals((Pair.with(0l, 1l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))).equals((Pair.with(3l, 1l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)100l, (long)0l)))).equals((Pair.with(100l, 0l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))).equals((Pair.with(15l, 105l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)10l)))).equals((Pair.with(10l, 10l))));\n    }\n\n}\n"},{"task_id":"HumanEval_9","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    - Í röðinni.    \/ Frá gefnum röð lista af heilum tölum, búa til röð röð lista af rúlla hámarks þætti fundist til tiltekinn augnablik     \/\/ >>> rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)3l, (long)4l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    \/\/ From a given array list of integers, generate an array list of rolling maximum element found until given moment\n    \/\/ in the sequence.\n    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (numbers == null || numbers.isEmpty()) {\n            return result;\n        }\n        long currentMax = Long.MIN_VALUE;\n        for (Long number : numbers) {\n            currentMax = Math.max(currentMax, number);\n            result.add(currentMax);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> numbers = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 2L, 3L, 4L, 2L));\n        ArrayList<Long> rollingMaxNumbers = rollingMax(numbers);\n        System.out.println(rollingMaxNumbers); \/\/ Output: [1, 2, 3, 3, 3, 4, 4]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_10","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ - Bæta við lok refringsins á refringsforfornafn sem kemur fyrir palindróm suffix.     \/ - Finndu lengsta postfix af veittum streng sem er palindróm.     \/ Algoritmi hugmynd er einföld:     \/ Finndu stytta palindróm sem byrjar með veittum streng.     \/\/ >>> makePalindrome((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> makePalindrome((\"cat\"))\n    \/\/ (\"catac\")\n    \/\/ >>> makePalindrome((\"cata\"))\n    \/\/ (\"catac\")\n    public static String makePalindrome(String string) {\n","canonical_solution":"public static String makePalindrome(String string) {\n    if (string == null || string.length() <= 1) {\n        return string;\n    }\n\n    \/\/ Function to check if a given string is a palindrome\n    boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left++) != s.charAt(right--)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    \/\/ Find longest palindromic suffix\n    int n = string.length();\n    for (int i = n; i > 0; i--) {\n        if (isPalindrome(string.substring(0, i))) {\n            StringBuilder sb = new StringBuilder(string.substring(i));\n            sb.reverse();\n            return string + sb.toString();\n        }\n    }\n    \n    return string; \/\/ fallback should not be reached\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"},{"task_id":"HumanEval_11","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Framkvæma tvíeiningar XOR á þessum inngangi og skila niðurstöðu einnig sem streng.     \/ Input eru tveir strengir a og b sem samanstanda aðeins af 1s og 0s.     \/\/ >>> stringXor((\"010\"), (\"110\"))\n    \/\/ (\"100\")\n    public static String stringXor(String a, String b) {\n","canonical_solution":"if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Input strings must have the same length.\");\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            \n            if (charA != '0' && charA != '1' || charB != '0' && charB != '1') {\n                throw new IllegalArgumentException(\"Input strings must consist only of '0' and '1'.\");\n            }\n            \n            \/\/ Perform XOR operation and append to the result\n            result.append(charA == charB ? '0' : '1');\n        }\n        \n        return result.toString();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"},{"task_id":"HumanEval_12","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ strengjum með sömu lengd. Endurendur null ef innmataröð listans er tómur.     \/ Út úr röð lista af strengjum, skilar lengsta einn.    \/\/ >>> longest((new ArrayList<String>(Arrays.asList())))\n    \/\/ Optional.empty()\n    \/\/ >>> longest((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\"))))\n    \/\/ Optional.of(\"a\")\n    \/\/ >>> longest((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"bb\", (String)\"ccc\"))))\n    \/\/ Optional.of(\"ccc\")\n    public static Optional<String> longest(ArrayList<String> strings) {\n","canonical_solution":"if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length)\n                .thenComparing(Comparator.naturalOrder()));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"},{"task_id":"HumanEval_13","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Senda stærsta sameiginlega deilanda tveggja heiltala a og b     \/\/ >>> greatestCommonDivisor((3l), (5l))\n    \/\/ (1l)\n    \/\/ >>> greatestCommonDivisor((25l), (15l))\n    \/\/ (5l)\n    public static long greatestCommonDivisor(long a, long b) {\n","canonical_solution":"if (b == 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_14","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Endurendur röð lista yfir öll fororð frá styttasta til lengsta í inntaksstrengi     \/\/ >>> allPrefixes((\"abc\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"ab\", (String)\"abc\")))\n    public static ArrayList<String> allPrefixes(String string) {\n","canonical_solution":"ArrayList<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_15","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Skila streng sem inniheldur rými afmarkaðar tölur frá 0 upp í n.     \/\/ >>> stringSequence((0l))\n    \/\/ (\"0\")\n    \/\/ >>> stringSequence((5l))\n    \/\/ (\"0 1 2 3 4 5\")\n    public static String stringSequence(long n) {\n","canonical_solution":"import java.util.stream.Collectors;\nimport java.util.stream.LongStream;\n\nclass Problem {\n    public static String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n)\n                         .mapToObj(Long::toString)\n                         .collect(Collectors.joining(\" \"));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"},{"task_id":"HumanEval_16","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Gefið streng, finna út hversu margir mismunandi stafi (án tillits til máls) er það samanstendur af     \/\/ >>> countDistinctCharacters((\"xyzXYZ\"))\n    \/\/ (3l)\n    \/\/ >>> countDistinctCharacters((\"Jerry\"))\n    \/\/ (4l)\n    public static long countDistinctCharacters(String string) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    \/\/ Given a string, find out how many distinct characters (regardless of case) does it consist of\n    public static long countDistinctCharacters(String string) {\n        \/\/ Convert the string to lowercase to ensure case-insensitivity\n        String lowerCaseString = string.toLowerCase();\n        \/\/ Use a HashSet to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        \n        \/\/ Iterate over each character in the string and add it to the set\n        for (char c : lowerCaseString.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        \n        \/\/ Return the size of the set, i.e., the number of distinct characters\n        return uniqueChars.size();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\n}\n"},{"task_id":"HumanEval_17","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \"Hafir\" - fjórðungshljóð, varir einn takta.    \"O, er þetta svona?\"    \"O\" - heill tónn, endist í fjögur takta.    Hér er goðsögn:    - Ekki síđast.    \/ Verkefni þitt er að greina þessa streng og skila röð lista af heilum tölum sem samsvara hversu margir beats gerir hver     \/ Input til þessa hlutverki er strengur sem táknar tónlistar nótur í sérstökum ASCII sniði.     \/\/ >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l, (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static ArrayList<Long> parseMusic(String music_string) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> beats = new ArrayList<>();\n        String[] notes = music_string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4L);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2L);\n            } else if (note.equals(\".|\")) {\n                beats.add(1L);\n            }\n        }\n        \n        return beats;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_18","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Finndu hversu oft ákveðin undirstrengur er að finna í upprunalegu strengnum. Teldu yfirlagðan tilfelli.     \/\/ >>> howManyTimes((\"\"), (\"a\"))\n    \/\/ (0l)\n    \/\/ >>> howManyTimes((\"aaa\"), (\"a\"))\n    \/\/ (3l)\n    \/\/ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    \/\/ (3l)\n    public static long howManyTimes(String string, String substring) {\n","canonical_solution":"public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_19","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Skila strengnum með tölum raðað frá minnsta til stærsta     \/ Gild valkostir eru \"núll\", \"ein\", \"tveir\", \"þrír\", \"fjögur\", \"fimm\", \"sex\", \"sjö\", \" átta\" og \"níu\".     \/ Input er rými afmarkaður strengur af númeral frá \"núll\" til \"níu\".     \/\/ >>> sortNumbers((\"three one five\"))\n    \/\/ (\"one three five\")\n    public static String sortNumbers(String numbers) {\n","canonical_solution":"public static String sortNumbers(String numbers) {\n        List<String> numeralList = Arrays.asList(numbers.split(\" \"));\n        Map<String, Integer> numeralToValue = new HashMap<>();\n        numeralToValue.put(\"zero\", 0);\n        numeralToValue.put(\"one\", 1);\n        numeralToValue.put(\"two\", 2);\n        numeralToValue.put(\"three\", 3);\n        numeralToValue.put(\"four\", 4);\n        numeralToValue.put(\"five\", 5);\n        numeralToValue.put(\"six\", 6);\n        numeralToValue.put(\"seven\", 7);\n        numeralToValue.put(\"eight\", 8);\n        numeralToValue.put(\"nine\", 9);\n\n        numeralList.sort(Comparator.comparingInt(numeralToValue::get));\n\n        return String.join(\" \", numeralList);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n"},{"task_id":"HumanEval_20","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ önnur og skila þeim í röð (minni fjöldi, meiri fjöldi).    \/ Úr gefnum röð lista af tölum (af lengd að minnsta kosti tvö) velja og skila tveimur sem eru næst hverjum     \/\/ >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    \/\/ (Pair.with(2.0f, 2.2f))\n    \/\/ >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    \/\/ (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two numbers.\");\n        }\n\n        Collections.sort(numbers);\n        float minDiff = Float.MAX_VALUE;\n        Pair<Float, Float> closestPair = null;\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            float current = numbers.get(i);\n            float next = numbers.get(i + 1);\n            float diff = Math.abs(current - next);\n\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = Pair.with(current, next);\n            }\n        }\n\n        return closestPair;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Float> list1 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 2.2f));\n        ArrayList<Float> list2 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 2.0f));\n        \n        System.out.println(findClosestElements(list1)); \/\/ Output: (2.0, 2.2)\n        System.out.println(findClosestElements(list2)); \/\/ Output: (2.0, 2.0)\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(3.9f, 4.0f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f)))).equals((Pair.with(5.0f, 5.9f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(2.0f, 2.2f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f)))).equals((Pair.with(2.0f, 2.0f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f)))).equals((Pair.with(2.2f, 3.1f))));\n    }\n\n}\n"},{"task_id":"HumanEval_21","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ svo að minnsta tala verður 0 og stærsta verður 1     \/ Gefið röð lista af tölum (af að minnsta kosti tveimur þáttum), beita línuleg umbreyta að röð lista,     \/\/ >>> rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f))))\n    \/\/ (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Given array list of numbers (of at least two elements), apply a linear transform to that array list,\n    \/\/ such that the smallest number will become 0 and the largest will become 1\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Input list must contain at least two elements.\");\n        }\n        \n        float min = Float.MAX_VALUE;\n        float max = Float.MIN_VALUE;\n        \n        for (float num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        \n        ArrayList<Float> rescaled = new ArrayList<>(numbers.size());\n        for (float num : numbers) {\n            float normalized = (num - min) \/ (max - min);\n            rescaled.add(normalized);\n        }\n        \n        return rescaled;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<Float> numbers = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f));\n        ArrayList<Float> normalizedNumbers = rescaleToUnit(numbers);\n        System.out.println(normalizedNumbers); \/\/ Output should be [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"},{"task_id":"HumanEval_22","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Filtra gefinn röð lista af öllum javathon gildi aðeins fyrir heiltal     \/\/ >>> filterIntegers((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)3.14f, (String)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    \/\/ >>> filterIntegers((new ArrayList<Object>(Arrays.asList(1l, 2l, 3l, \"abc\", new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList())))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Filter given array list of any javathon values only for integers\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Long) {\n                result.add((Long) value);\n            }\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(4l, new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList()), 23.2f, 9l, \"adasd\")))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)9l)))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(3l, \"c\", 3l, 3l, \"a\", \"b\")))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_23","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Endurendurslengd á vefstrengi     \/\/ >>> stringLength((\"\"))\n    \/\/ (0l)\n    \/\/ >>> stringLength((\"abc\"))\n    \/\/ (3l)\n    public static long strlen(String string) {\n","canonical_solution":"\/\/ Check if the string is null\n        if (string == null) {\n            return 0L;\n        }\n        \/\/ Return the length of the string\n        return (long) string.length();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"},{"task_id":"HumanEval_24","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Fyrir gefin n tala, finna stærsta tala sem skiptist n jafnt, minni en n     \/\/ >>> largestDivisor((15l))\n    \/\/ (5l)\n    public static long largestDivisor(long n) {\n","canonical_solution":"if (n <= 1) {\n            throw new IllegalArgumentException(\"n must be greater than 1\");\n        }\n        for (long i = n \/ 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; \/\/ This line is actually never reached if the function is used correctly\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"},{"task_id":"HumanEval_25","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Input númer ætti að vera jafnt við margfaldið af öllum þættum     \/ Hver af þáttunum ætti að vera fjöldi skráður fjölda sinnum sem samsvarar því hversu oft það birtist í þættisgreiningu.     \/ Endurendur röð lista yfir frumþáttum af gefnum heilum tölum í röð frá minnsta til stærsta.     \/\/ >>> factorize((8l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n    \/\/ >>> factorize((25l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l)))\n    \/\/ >>> factorize((70l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Long> factorize(long n) {\n        ArrayList<Long> factors = new ArrayList<>();\n        for (long factor = 2; factor * factor <= n; factor++) {\n            while (n % factor == 0) {\n                factors.add(factor);\n                n \/= factor;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        \/\/ Example usage\n        System.out.println(factorize(8l));   \/\/ Output: [2, 2, 2]\n        System.out.println(factorize(25l));  \/\/ Output: [5, 5]\n        System.out.println(factorize(70l));  \/\/ Output: [2, 5, 7]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_26","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Halda röð þátta vinstri sömu og í inntak.     \/ Úr röð röð lista af heilum tölum, fjarlægja alla þætti sem koma fram oftar en einu sinni.     \/\/ >>> removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)4l)))\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\n\npublic class Problem {\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {\n        \/\/ Create a HashSet to keep track of duplicates\n        HashSet<Long> seen = new HashSet<>();\n        \/\/ Create a list for results\n        ArrayList<Long> result = new ArrayList<>();\n        \/\/ Create a temporary HashSet to track elements that are counted more than once\n        HashSet<Long> duplicates = new HashSet<>();\n\n        for (Long number : numbers) {\n            if (seen.contains(number)) {\n                \/\/ If already seen and not added to duplicates, add to duplicates\n                duplicates.add(number);\n            } else {\n                \/\/ Mark this number as seen\n                seen.add(number);\n            }\n        }\n\n        for (Long number : numbers) {\n            \/\/ Add only those numbers to result which are not in duplicates\n            if (!duplicates.contains(number)) {\n                result.add(number);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> input = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 2L, 4L));\n        ArrayList<Long> output = removeDuplicates(input);\n        System.out.println(output);  \/\/ Output: [1, 3, 4]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l, (long)3l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_27","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Fyrir ákveðinn streng, snúa litlum stafi til stórstafa og stórstafa til litla.     \/\/ >>> flipCase((\"Hello\"))\n    \/\/ (\"hELLO\")\n    public static String flipCase(String string) {\n","canonical_solution":"StringBuilder flipped = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                flipped.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                flipped.append(Character.toUpperCase(c));\n            } else {\n                flipped.append(c);\n            }\n        }\n        return flipped.toString();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"},{"task_id":"HumanEval_28","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Samræmi stafræna lista af strengjum í einn streng     \/\/ >>> concatenate((new ArrayList<String>(Arrays.asList())))\n    \/\/ (\"\")\n    \/\/ >>> concatenate((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\"))))\n    \/\/ (\"abc\")\n    public static String concatenate(ArrayList<String> strings) {\n","canonical_solution":"return String.join(\"\", strings);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(concatenate((new ArrayList<String>(Arrays.asList()))).equals((\"\")));\n    assert(concatenate((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals((\"xyz\")));\n    assert(concatenate((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\", (String)\"w\", (String)\"k\")))).equals((\"xyzwk\")));\n    }\n\n}\n"},{"task_id":"HumanEval_29","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Fyltra innmatarsviði lista af strengjum aðeins fyrir þá sem byrja með tilteknum fororð.     \/\/ >>> filterByPrefix((new ArrayList<String>(Arrays.asList())), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"cde\", (String)\"array\"))), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String> strings, String prefix) {\n","canonical_solution":"return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toCollection(ArrayList::new));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_30","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Endurendur aðeins jákvæðar tölur í röðinni.     \/\/ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l, (long)5l, (long)6l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)6l)))\n    \/\/ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public static ArrayList<Long> getPositive(ArrayList<Long> l) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    \/\/ Return only positive numbers in the array list.\n    public static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long> positives = new ArrayList<>();\n        for (Long number : l) {\n            if (number > 0) {\n                positives.add(number);\n            }\n        }\n        return positives;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_31","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Endurfallið sannar ef gefið númer er frumtal, og rangt annars.     \/\/ >>> isPrime((6l))\n    \/\/ (false)\n    \/\/ >>> isPrime((101l))\n    \/\/ (true)\n    \/\/ >>> isPrime((11l))\n    \/\/ (true)\n    \/\/ >>> isPrime((13441l))\n    \/\/ (true)\n    \/\/ >>> isPrime((61l))\n    \/\/ (true)\n    \/\/ >>> isPrime((4l))\n    \/\/ (false)\n    \/\/ >>> isPrime((1l))\n    \/\/ (false)\n    public static boolean isPrime(long n) {\n","canonical_solution":"if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_33","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ við gildi samsvarandi vísitölur l, en flokkað.     \/ l' er eins og l í vísitölum sem eru ekki deilanleg á þrjú, en gildi þess í vísitölum sem eru deilanleg á þrjú eru jöfn     \/ Þessi virkni tekur röð röð lista l og skilar röð röð lista l ' svo að     \/\/ >>> sortThird((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    \/\/ >>> sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))\n    public static ArrayList<Long> sortThird(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<Long> sortThird(ArrayList<Long> l) {\n        \/\/ Create a new list to store elements at indices divisible by three\n        ArrayList<Long> extracted = new ArrayList<>();\n\n        \/\/ Extract the elements at indices divisible by three\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                extracted.add(l.get(i));\n            }\n        }\n\n        \/\/ Sort the extracted elements\n        Collections.sort(extracted);\n\n        \/\/ Create a new list to store the resultant elements\n        ArrayList<Long> result = new ArrayList<>(l);\n\n        \/\/ Replace the original elements at indices divisible by three with the sorted ones\n        int sortedIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, extracted.get(sortedIndex));\n                sortedIndex++;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<Long>(Arrays.asList(1L, 2L, 3L));\n        ArrayList<Long> result1 = sortThird(list1);\n        System.out.println(result1);\n\n        ArrayList<Long> list2 = new ArrayList<Long>(Arrays.asList(5L, 6L, 3L, 4L, 8L, 9L, 2L));\n        ArrayList<Long> result2 = sortThird(list2);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l, (long)1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_34","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Endurendur flokkaðar einstakar tölur í röð röð lista     \/\/ >>> unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))\n    public static ArrayList<Long> unique(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Return sorted unique elements in an array array list\n    public static ArrayList<Long> unique(ArrayList<Long> l) {\n        return l.stream()\n                .distinct()\n                .sorted()\n                .collect(Collectors.toCollection(ArrayList::new));\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> inputList = new ArrayList<>(Arrays.asList(5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L));\n        ArrayList<Long> uniqueSortedList = unique(inputList);\n        System.out.println(uniqueSortedList);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_35","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Endurendur hámarksatriði í röðinni.     \/\/ >>> maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (3l)\n    \/\/ >>> maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n    \/\/ (123l)\n    public static long maxElement(ArrayList<Long> l) {\n","canonical_solution":"public static long maxElement(ArrayList<Long> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        long max = Long.MIN_VALUE;\n        for (Long num : l) {\n            max = Math.max(max, num);\n        }\n        return max;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)124l, (long)1l, (long)-10l)))) == (124l));\n    }\n\n}\n"},{"task_id":"HumanEval_36","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Gefðu aftur fjölda sinnum sem númer 7 birtist í heilum tölum sem eru minni en n og deilanleg með 11 eða 13.     \/\/ >>> fizzBuzz((50l))\n    \/\/ (0l)\n    \/\/ >>> fizzBuzz((78l))\n    \/\/ (2l)\n    \/\/ >>> fizzBuzz((79l))\n    \/\/ (3l)\n    public static long fizzBuzz(long n) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    public static long fizzBuzz(long n) {\n        long count = 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += countSevens(i);\n            }\n        }\n        return count;\n    }\n\n    private static int countSevens(long number) {\n        int count = 0;\n        while (number > 0) {\n            if (number % 10 == 7) {\n                count++;\n            }\n            number \/= 10;\n        }\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"},{"task_id":"HumanEval_37","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ við gildi jöfnra vísitölur l, en raðað.     \/ l' er eins og l í ólíku vísitölum, en gildi þess í jafntölum eru jöfn     \/ Þessi virkni tekur röð röð lista l og skilar röð röð lista l ' svo að     \/\/ >>> sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    \/\/ >>> sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)5l, (long)4l)))\n    public static ArrayList<Long> sortEven(ArrayList<Long> l) {\n","canonical_solution":"public static ArrayList<Long> sortEven(ArrayList<Long> l) {\n        ArrayList<Long> evenIndicesValues = new ArrayList<>();\n        \n        \/\/ Collect values from even indices\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndicesValues.add(l.get(i));\n        }\n        \n        \/\/ Sort values collected from even indices\n        Collections.sort(evenIndicesValues);\n        \n        \/\/ Create an iterator for sorted even values\n        Iterator<Long> iterator = evenIndicesValues.iterator();\n        \n        \/\/ Form the result list by setting sorted even values and copying odd values\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                \/\/ Set sorted values at even indices\n                l.set(i, iterator.next());\n            }\n            \/\/ Values at odd indices remain the same\n        }\n        \n        return l;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))));\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)5l, (long)0l, (long)9l, (long)1l, (long)123l)))));\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)-12l, (long)4l, (long)23l, (long)2l, (long)3l, (long)11l, (long)12l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-12l, (long)8l, (long)3l, (long)4l, (long)5l, (long)2l, (long)12l, (long)11l, (long)23l, (long)-10l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_39","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ prime_fib skilar n-th númer sem er Fibonacci númer og það er einnig frumtal.     \/\/ >>> primeFib((1l))\n    \/\/ (2l)\n    \/\/ >>> primeFib((2l))\n    \/\/ (3l)\n    \/\/ >>> primeFib((3l))\n    \/\/ (5l)\n    \/\/ >>> primeFib((4l))\n    \/\/ (13l)\n    \/\/ >>> primeFib((5l))\n    \/\/ (89l)\n    public static long primeFib(long n) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    \/\/ Function to check if a number is prime\n    public static boolean isPrime(long num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true; \/\/ 2 and 3 are prime\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (long i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n\n    \/\/ Function to get the n-th Fibonacci number that is also prime\n    public static long primeFib(long n) {\n        long count = 0;\n        long a = 0;\n        long b = 1;\n        \n        while (true) {\n            long next = a + b;\n            a = b;\n            b = next;\n            \n            if (isPrime(next)) {\n                count++;\n                if (count == n) {\n                    return next;\n                }\n            }\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(primeFib((1l)) == (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n    assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n    assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n"},{"task_id":"HumanEval_40","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ sum til núll, og falskt annars.     \/ það skilar sannar ef það eru þrír mismunandi þættir í röð listann sem     \/ triples_sum_to_zero tekur röð röð lista af heilum tölum sem inngangur.     \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    \/\/ (false)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    \/\/ (true)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    \/\/ (false)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    \/\/ (true)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    \/\/ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n        Collections.sort(l);\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            int left = i + 1, right = n - 1;\n            while (left < right) {\n                long sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_41","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Þessi hlutverk gefur út fjölda slíkra árekstra.     \/ í braut þeirra eins og þeir hafi ekki árekst.     En bílarnir eru óendanlega sterkir og sterkir og halda áfram að hreyfa sig.    Ūegar bíll sem er ađ fara frá vinstri til hægri rekur bíl sem er ađ fara frá hægri til vinstri.    Allir bílar eru á sama hrađa og tveir bílar lenda í árekstri.    Tveir bílarnir eru langt frá okkur.    \/ n bílar eru að keyra vinstri til hægri; samtímis, mismunandi sett af n bíla     Ímyndađu ūér veg sem er fullkomlega beinn og ķendanlega langur.    public static long carRaceCollision(long n) {\n","canonical_solution":"public static long carRaceCollision(long n) {\n    \/\/ Each car moving left to right will collide with each car moving right to left\n    \/\/ as they are infinitely far apart initially and moving towards each other.\n    \/\/ Therefore, the total number of collisions will be n * n.\n    return n * n;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"},{"task_id":"HumanEval_42","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Endur skilar röð lista með þætti aukin með 1.     \/\/ >>> incrList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))\n    \/\/ >>> incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))\n    public static ArrayList<Long> incrList(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Return array list with elements incremented by 1.\n    public static ArrayList<Long> incrList(ArrayList<Long> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toCollection(ArrayList::new));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(incrList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(incrList((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l)))));\n    assert(incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)2l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)3l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_43","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ sum til núll, og falskt annars.     \/ það skilar sannar ef það eru tveir mismunandi þættir í röð listann sem     \/ pairs_sum_to_zero tekur röð röð lista af heilum tölum sem inngangur.     \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    \/\/ (true)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    \/\/ (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.HashSet;\n\nclass Problem {\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<>();\n\n        for (Long num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        \n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)30l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)31l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)30l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)31l)))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_44","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ grunnnúmer eru minni en 10.    \/ skila strengja sýn eftir umbreytingu.     \/ Breyta tölulegum grunnur inngáfu númer x til grunnur.     \/\/ >>> changeBase((8l), (3l))\n    \/\/ (\"22\")\n    \/\/ >>> changeBase((8l), (2l))\n    \/\/ (\"1000\")\n    \/\/ >>> changeBase((7l), (2l))\n    \/\/ (\"111\")\n    public static String changeBase(long x, long base) {\n","canonical_solution":"StringBuilder result = new StringBuilder();\n    while (x > 0) {\n        result.append(x % base);\n        x \/= base;\n    }\n    return result.reverse().toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"},{"task_id":"HumanEval_45","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Gefin lengd á hlið og háa afturkoma svæði fyrir þríhyrning.     \/\/ >>> triangleArea((5l), (3l))\n    \/\/ (7.5f)\n    public static float triangleArea(long a, long h) {\n","canonical_solution":"public class Problem {\n    \/\/ Given length of a side and height, return area for a triangle.\n    \/\/ >>> triangleArea((5l), (3l))\n    \/\/ (7.5f)\n    public static float triangleArea(long a, long h) {\n        return (a * h) \/ 2.0f;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(5l, 3l)); \/\/ Output: 7.5\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(triangleArea((5l), (3l)) == (7.5f));\n    assert(triangleArea((2l), (2l)) == (2.0f));\n    assert(triangleArea((10l), (8l)) == (40.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_46","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Vinsamlegast skrifaðu hlutverk til að reikna n-th þáttur af númeraröð fib4. Ekki nota endurtekningu.     \/ fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).    \/ fib4(3) -> 0     \/ fib4(2) -> 2     \/ fib4(1) -> 0     \/ fib4(0) -> 0     \/ Fib4 tölustafurinn er svipaður Fibbonacci-söðunni sem skilgreind er sem hér segir:     \/\/ >>> fib4((5l))\n    \/\/ (4l)\n    \/\/ >>> fib4((6l))\n    \/\/ (8l)\n    \/\/ >>> fib4((7l))\n    \/\/ (14l)\n    public static long fib4(long n) {\n","canonical_solution":"public static long fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return d;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"},{"task_id":"HumanEval_47","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Endurendursmiðjan þátta í röðlistann l.     \/\/ >>> median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\n    \/\/ (float)3l\n    \/\/ >>> median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l))))\n    \/\/ (15.0f)\n    public static float median(ArrayList<Long> l) {\n","canonical_solution":"Collections.sort(l);\n    int n = l.size();\n    if (n % 2 == 1) {\n        return l.get(n \/ 2);\n    } else {\n        return (float)(l.get(n \/ 2 - 1) + l.get(n \/ 2)) \/ 2;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l, (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"},{"task_id":"HumanEval_48","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Skoðar hvort strengi sé palindrómur     \/\/ >>> isPalindrome((\"\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"aba\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"aaaaa\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"zbcd\"))\n    \/\/ (false)\n    public static boolean isPalindrome(String text) {\n","canonical_solution":"if (text == null) {\n            return false;\n        }\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_49","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Endurfalla 2^n modulo p (vertu meðvitaður um tölur).    \/\/ >>> modp((3l), (5l))\n    \/\/ (3l)\n    \/\/ >>> modp((1101l), (101l))\n    \/\/ (2l)\n    \/\/ >>> modp((0l), (101l))\n    \/\/ (1l)\n    \/\/ >>> modp((3l), (11l))\n    \/\/ (8l)\n    \/\/ >>> modp((100l), (101l))\n    \/\/ (1l)\n    public static long modp(long n, long p) {\n","canonical_solution":"import java.math.BigInteger;\n\npublic class Problem {\n    \/\/ Return 2^n modulo p (be aware of numerics).\n    public static long modp(long n, long p) {\n        BigInteger base = BigInteger.valueOf(2);\n        BigInteger exponent = BigInteger.valueOf(n);\n        BigInteger modulo = BigInteger.valueOf(p);\n        \n        return base.modPow(exponent, modulo).longValue();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(modp(3L, 5L)); \/\/ Output: 3\n        System.out.println(modp(1101L, 101L)); \/\/ Output: 2\n        System.out.println(modp(0L, 101L)); \/\/ Output: 1\n        System.out.println(modp(3L, 11L)); \/\/ Output: 8\n        System.out.println(modp(100L, 101L)); \/\/ Output: 1\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_51","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ remove_vowels er hlutverk sem tekur streng og skilar streng án sjálfráða.     \/\/ >>> removeVowels((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> removeVowels((\"abcdef\"))\n    \/\/ (\"bcdf\")\n    \/\/ >>> removeVowels((\"aaaaa\"))\n    \/\/ (\"\")\n    \/\/ >>> removeVowels((\"aaBAA\"))\n    \/\/ (\"B\")\n    \/\/ >>> removeVowels((\"zbcd\"))\n    \/\/ (\"zbcd\")\n    public static String removeVowels(String text) {\n","canonical_solution":"public static String removeVowels(String text) {\n        return text.replaceAll(\"(?i)[aeiou]\", \"\");\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(removeVowels((\"\")).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\")));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n"},{"task_id":"HumanEval_52","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Endurendur sannar ef öll tölur í röð listann l eru undir þröskuld t.     \/\/ >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l))\n    \/\/ (true)\n    \/\/ >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l))\n    \/\/ (false)\n    public static boolean belowThreshold(ArrayList<Long> l, long t) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Return true if all numbers in the array list l are below threshold t.\n    public static boolean belowThreshold(ArrayList<Long> l, long t) {\n        for (Long num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(belowThreshold(new ArrayList<Long>(Arrays.asList(1L, 2L, 4L, 10L)), 100L)); \/\/ true\n        System.out.println(belowThreshold(new ArrayList<Long>(Arrays.asList(1L, 20L, 4L, 10L)), 5L));  \/\/ false\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l)) == (false));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (21l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (22l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (11l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (10l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_53","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Bæta við tvennum tölum x og y     \/\/ >>> add((2l), (3l))\n    \/\/ (5l)\n    \/\/ >>> add((5l), (7l))\n    \/\/ (12l)\n    public static long add(long x, long y) {\n","canonical_solution":"return x + y;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(add(2L, 3L)); \/\/ Outputs: 5\n        System.out.println(add(5L, 7L)); \/\/ Outputs: 12\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_54","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Skoðaðu hvort tvö orð hafi sömu stafi.     \/\/ >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    \/\/ (false)\n    \/\/ >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    \/\/ (false)\n    \/\/ >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    \/\/ (false)\n    public static boolean sameChars(String s0, String s1) {\n","canonical_solution":"public static boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = s0.chars().mapToObj(e -> (char)e).collect(Collectors.toSet());\n        Set<Character> set1 = s1.chars().mapToObj(e -> (char)e).collect(Collectors.toSet());\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); \/\/ true\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); \/\/ true\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); \/\/ true\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); \/\/ false\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); \/\/ false\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); \/\/ false\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_55","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Senda n-þ Fibonacci númer.     \/\/ >>> fib((10l))\n    \/\/ (55l)\n    \/\/ >>> fib((1l))\n    \/\/ (1l)\n    \/\/ >>> fib((8l))\n    \/\/ (21l)\n    public static long fib(long n) {\n","canonical_solution":"if (n <= 1) {\n            return n;\n        }\n        long a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"},{"task_id":"HumanEval_56","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ skilar sannleika ef hver opnunarstikur hefur samsvarandi lokunarstikur.     \/ braket er strengur af \"<\" og \">\".     \/\/ >>> correctBracketing((\"<\"))\n    \/\/ (false)\n    \/\/ >>> correctBracketing((\"<>\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"<<><>>\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"><<>\"))\n    \/\/ (false)\n    public static boolean correctBracketing(String brackets) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n\n    public static boolean correctBracketing(String brackets) {\n        int balance = 0;\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                balance++;\n            } else if (ch == '>') {\n                balance--;\n                if (balance < 0) {\n                    return false;\n                }\n            }\n        }\n        return balance == 0;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_57","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Return true er röð lista þættir eru einræmilega vaxandi eða minnkandi.     \/\/ >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))))\n    \/\/ (true)\n    \/\/ >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n    \/\/ (false)\n    \/\/ >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))))\n    \/\/ (true)\n    public static boolean monotonic(ArrayList<Long> l) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    \/\/ Return true if array list elements are monotonically increasing or decreasing.\n    public static boolean monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return true;\n        }\n        \n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 4L, 20L));\n        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(1L, 20L, 4L, 10L));\n        ArrayList<Long> list3 = new ArrayList<>(Arrays.asList(4L, 1L, 0L, -10L));\n\n        System.out.println(monotonic(list1)); \/\/ true\n        System.out.println(monotonic(list2)); \/\/ false\n        System.out.println(monotonic(list3)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_58","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Skila flokkuðum einstökum sameiginlegum þáttum fyrir tvo röð lista.     \/\/ >>> common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))\n    \/\/ >>> common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {\n","canonical_solution":"import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Problem {\n    \/\/ Return sorted unique common elements for two array lists.\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        \n        \/\/ Retain only the elements in set1 that are contained in set2\n        set1.retainAll(set2);\n        \n        \/\/ Convert to list and sort\n        ArrayList<Long> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_59","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Senda stærsta frumþátttaker n. Gera ráð fyrir að n > 1 sé ekki frumtal.     \/\/ >>> largestPrimeFactor((13195l))\n    \/\/ (29l)\n    \/\/ >>> largestPrimeFactor((2048l))\n    \/\/ (2l)\n    public static long largestPrimeFactor(long n) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long largestPrimeFactor(long n) {\n        long largestFactor = 1;\n        long factor = 2;\n        \n        \/\/ Test for number of 2s that divide n\n        while (n % factor == 0) {\n            largestFactor = factor;\n            n \/= factor;\n        }\n        \n        \/\/ n must be odd at this point, so a skip of 2 is used (i.e., 3, 5, 7, 9, ...)\n        factor = 3;\n        while (factor * factor <= n) {\n            while (n % factor == 0) {\n                largestFactor = factor;\n                n \/= factor;\n            }\n            factor += 2;\n        }\n        \n        \/\/ This condition checks if n is a prime number greater than 2\n        if (n > 2) {\n            largestFactor = n;\n        }\n        \n        return largestFactor;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"},{"task_id":"HumanEval_60","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ sum_to_n er hlutverk sem bætir saman tölur frá 1 til n.     \/\/ >>> sumToN((30l))\n    \/\/ (465l)\n    \/\/ >>> sumToN((100l))\n    \/\/ (5050l)\n    \/\/ >>> sumToN((5l))\n    \/\/ (15l)\n    \/\/ >>> sumToN((10l))\n    \/\/ (55l)\n    \/\/ >>> sumToN((1l))\n    \/\/ (1l)\n    public static long sumToN(long n) {\n","canonical_solution":"public static long sumToN(long n) {\n    return n * (n + 1) \/ 2;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumToN((1l)) == (1l));\n    assert(sumToN((6l)) == (21l));\n    assert(sumToN((11l)) == (66l));\n    assert(sumToN((30l)) == (465l));\n    assert(sumToN((100l)) == (5050l));\n    }\n\n}\n"},{"task_id":"HumanEval_61","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ skilar sannleika ef hver opnunarstikur hefur samsvarandi lokunarstikur.     \/ braket er strengur af \"(\" og \")\".     \/\/ >>> correctBracketing((\"(\"))\n    \/\/ (false)\n    \/\/ >>> correctBracketing((\"()\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"(()())\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\")(()\"))\n    \/\/ (false)\n    public static boolean correctBracketing(String brackets) {\n","canonical_solution":"public static boolean correctBracketing(String brackets) {\n    int balance = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets.charAt(i) == '(') {\n            balance++;\n        } else if (brackets.charAt(i) == ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_62","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Endurkoma afleiða af þessu margnefni í sömu formi.     \/ xs[0] + xs[1] * x + xs[2] * x^2 + ....     \/ xs eru hlutföll margnefnis.    \/\/ >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))\n    \/\/ >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    \/\/ xs represent coefficients of a polynomial.\n    \/\/ xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    \/\/ Return derivative of this polynomial in the same form.\n    public static ArrayList<Long> derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_63","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Vinsamlegast skrifaðu hlutverk til að reikna n-th þáttur af númeraröðinni fibfib.     \/ fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).     \/ fib fib ((2) == 1     \/ fib fib ((1) == 0     \/ fib fib ((0) == 0     \/ FibFib-númeraröð er röð svipuð Fibbonacci röðinni sem er skilgreind sem hér segir:     \/\/ >>> fibfib((1l))\n    \/\/ (0l)\n    \/\/ >>> fibfib((5l))\n    \/\/ (4l)\n    \/\/ >>> fibfib((8l))\n    \/\/ (24l)\n    public static long fibfib(long n) {\n","canonical_solution":"public static long fibfib(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        \n        long[] fibfibSequence = new long[(int) n + 1];\n        fibfibSequence[0] = 0;\n        fibfibSequence[1] = 0;\n        fibfibSequence[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfibSequence[i] = fibfibSequence[i - 1] + fibfibSequence[i - 2] + fibfibSequence[i - 3];\n        }\n        \n        return fibfibSequence[(int) n];\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"},{"task_id":"HumanEval_64","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ einhljóð, en aðeins þegar það er í lok orðsins.    \/ Hljómorð í þessu tilfelli eru \"a\", \"e\", \"i\", \"o\", \"u\". Hér er \"y\" einnig a     \/ orð sem inngangur og skilar fjölda hljóðeðla í strengnum.     \/ Skrifaðu hlutverk vowels_count sem tekur streng sem táknar     \/\/ >>> vowelsCount((\"abcde\"))\n    \/\/ (2l)\n    \/\/ >>> vowelsCount((\"ACEDY\"))\n    \/\/ (3l)\n    public static long vowelsCount(String s) {\n","canonical_solution":"if (s == null || s.isEmpty()) {\n            return 0L;\n        }\n\n        s = s.toLowerCase();\n        long count = 0L;\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (\"aeiou\".indexOf(c) >= 0) {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(vowelsCount((\"abcde\")) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"ACEDY\")) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_65","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Ef skipting > fjöldi stafa, skila stafir aftur á móti.     \/ og skila niðurstöðunni sem streng.     \/ Hringbrautarflutningur stafir heiltal x, færa stafir til hægri með færslu     \/\/ >>> circularShift((12l), (1l))\n    \/\/ (\"21\")\n    \/\/ >>> circularShift((12l), (2l))\n    \/\/ (\"12\")\n    public static String circularShift(long x, long shift) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static String circularShift(long x, long shift) {\n        String numStr = Long.toString(x);\n        int len = numStr.length();\n\n        \/\/ If shift is greater than or equal to the number of digits, reverse the digits.\n        if (shift >= len) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n\n        \/\/ Otherwise, perform a circular shift.\n        int actualShift = (int)(shift % len);\n        StringBuilder shifted = new StringBuilder();\n        shifted.append(numStr.substring(len - actualShift));\n        shifted.append(numStr.substring(0, len - actualShift));\n\n        return shifted.toString();\n    }\n\n    public static void main(String[] args) {\n        \/\/ Test cases\n        System.out.println(circularShift(12L, 1L));  \/\/ Output: \"21\"\n        System.out.println(circularShift(12L, 2L));  \/\/ Output: \"12\"\n        System.out.println(circularShift(12345L, 3L));  \/\/ Output: \"34512\"\n        System.out.println(circularShift(12345L, 5L));  \/\/ Output: \"54321\"\n        System.out.println(circularShift(12345L, 7L));  \/\/ Output: \"54321\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"},{"task_id":"HumanEval_66","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ ASCII-kóðar.     \/ Skrifaðu hlutverk sem tekur streng sem innlag og skilar aðeins upphæð efri stafi'     - Verkefni .    \/\/ >>> digitSum((\"\"))\n    \/\/ (0l)\n    \/\/ >>> digitSum((\"abAB\"))\n    \/\/ (131l)\n    \/\/ >>> digitSum((\"abcCd\"))\n    \/\/ (67l)\n    \/\/ >>> digitSum((\"helloE\"))\n    \/\/ (69l)\n    \/\/ >>> digitSum((\"woArBld\"))\n    \/\/ (131l)\n    \/\/ >>> digitSum((\"aAaaaXa\"))\n    \/\/ (153l)\n    public static long digitSum(String s) {\n","canonical_solution":"public static long digitSum(String s) {\n        long sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (long) c;\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"},{"task_id":"HumanEval_67","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ fyrir examble:     \/ í körfunni skila fjölda mangó ávexti í körfunni.     \/ appelsínurnar og eplið og heil tala sem táknar heildarfjölda ávaxta     \/ epli, appelsínur og mangó ávextir. Gefið strenginn sem táknar heildarfjölda     \/ sem eru dreift í körfu ávaxta sem þessi körfur inniheldur     Í þessu verkefni færðu streng sem táknar fjölda epla og appelsínur.    \/\/ >>> fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    \/\/ (8l)\n    \/\/ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    \/\/ (2l)\n    \/\/ >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    \/\/ (95l)\n    \/\/ >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    \/\/ (19l)\n    public static long fruitDistribution(String s, long n) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long fruitDistribution(String s, long n) {\n        String[] parts = s.split(\" \");\n        long apples = Long.parseLong(parts[0]);\n        long oranges = Long.parseLong(parts[3]);\n        long mangoes = n - (apples + oranges);\n        return mangoes;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"},{"task_id":"HumanEval_68","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi 1:     \/ Ef það eru engin jafn gildi eða gefið röð röð lista er tómur, skila [].     \/ Plöktuð hnútur ætti að skila í röð röð lista, [ smalest_value, vísitölu þess ],     \/ Ef fleiri hnútar með sama minnstu jafnvirði eru fundnir skilar hnút sem hefur minnst vísitölu.     \/ Plöktur hnútur ætti að vera hnútur með minnsta jafnvel gildi.     Verkefni ūitt er ađ rífa einn af hnútunum og skila honum.    \/ \"Gefnum röð röð lista sem táknar grein tré sem hefur ekki neikvæð heiltal hnúta     \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 2:\n    \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 3:\n    \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ Example 4:\n    \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))\n    \/\/ Explanation: 0 is the smallest value, but  there are two zeros,\n    \/\/ so we will choose the first zero, which has the smallest index.\n    \/\/ Constraints:\n    \/\/ * 1 <= nodes.length <= 10000\n    \/\/ * 0 <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n","canonical_solution":"public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n        int index = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n            if (value % 2 == 0 && value < smallestEvenValue) {\n                smallestEvenValue = value;\n                index = i;\n            }\n        }\n\n        if (index != -1) {\n            result.add(smallestEvenValue);\n            result.add((long) index);\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_69","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Ef ekkert slíkt gildi er til, skilar hann -1.     \/ Tíðni heiltal er fjöldi sinnum sem það birtist í röð listann.     \/ núll, og hefur tíðni meiri en eða jafnt gildi heiltal sjálft.     \/ Þú færð ekki-tóma röð lista af jákvæðum heilum tölum.    \/\/ >>> search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    \/\/ (2l)\n    \/\/ >>> search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    \/\/ (3l)\n    \/\/ >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l, (long)4l))))\n    \/\/ (-1l)\n    public static long search(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\n\nclass Problem {\n    public static long search(ArrayList<Long> lst) {\n        HashMap<Long, Integer> frequencyMap = new HashMap<>();\n\n        \/\/ Count frequencies of each number\n        for (Long num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        long result = -1;\n        \n        \/\/ Find the greatest integer that fulfills the condition\n        for (Long num : frequencyMap.keySet()) {\n            int frequency = frequencyMap.get(num);\n            if (frequency >= num && num > result) {\n                result = num;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(search(new ArrayList<Long>(Arrays.asList(4L, 1L, 2L, 2L, 3L, 1L)))); \/\/ 2L\n        System.out.println(search(new ArrayList<Long>(Arrays.asList(1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L)))); \/\/ 3L\n        System.out.println(search(new ArrayList<Long>(Arrays.asList(5L, 5L, 4L, 4L, 4L)))); \/\/ -1L\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l, (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l, (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l, (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l, (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l, (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l, (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) == (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l, (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l, (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l, (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l, (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l, (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l, (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l, (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l, (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l, (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l, (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l, (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l, (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l, (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l, (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l, (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l, (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l, (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l, (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l, (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l, (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l)))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_70","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ þá hámarks af the eftirliggjandi heiltölur, þá lágmarks og svo framvegis.     \/ Undarleg flokkun, er þegar þú byrjar með lágmarks gildi,     \/ Gefið röð lista af heilum tölum, skila röð lista í skrítnum röð.     \/\/ >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    \/\/ >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    \/\/ >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n        \n        int left = 0;\n        int right = lst.size() - 1;\n        boolean flag = true; \/\/ true indicates minimum, false indicates maximum\n        \n        while (left <= right) {\n            if (flag) {\n                result.add(lst.get(left));\n                left++;\n            } else {\n                result.add(lst.get(right));\n                right--;\n            }\n            flag = !flag;\n        }\n        \n        return result;\n    }\n    \n    \/\/ Main method for test purposes\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        System.out.println(strangeSortList(list1)); \/\/ Outputs: [1, 4, 2, 3]\n        \n        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(5L, 5L, 5L, 5L));\n        System.out.println(strangeSortList(list2)); \/\/ Outputs: [5, 5, 5, 5]\n        \n        ArrayList<Long> list3 = new ArrayList<>();\n        System.out.println(strangeSortList(list3)); \/\/ Outputs: []\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l, (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l, (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_71","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     - Ég er ekki í ūriđja hliðinni.    Þrjár hliðar eru rétt þríhyrningur ef súm tveggja hliða er stærri .    \/ Annars skilar hann -1     \/ þríhyrningurinn afrundinn á 2 tímamörk ef hliðarnar þrjár mynda réttan þríhyrning.     \/ Gefin lengdir þriggja hliða þríhyrnings.    \/\/ >>> triangleArea((3l), (4l), (5l))\n    \/\/ (6.0f)\n    \/\/ >>> triangleArea((1l), (2l), (10l))\n    \/\/ (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n","canonical_solution":"public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) \/ 2.0;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) \/ 100.0f;\n        } else {\n            return -1f;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5)); \/\/ Output: 6.0\n        System.out.println(triangleArea(1, 2, 10)); \/\/ Output: -1\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == (float)-1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == (float)-1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == (float)-1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == (float)-1l);\n    }\n\n}\n"},{"task_id":"HumanEval_72","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Hluturinn q mun fljúga ef hann er í jafnvægi (það er palindróm matri list) og upphæð þátta hans er minni en eða jafn hámarks mögulega þyngd w.     \/ Skrifaðu hlutverk sem skilar sannleika ef hlutinn q mun fljúga, og fals annars.     \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l))\n    \/\/ (false)\n    \/\/ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l))\n    \/\/ (false)\n    \/\/ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l))\n    \/\/ (true)\n    \/\/ # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l))\n    \/\/ (true)\n    \/\/ # 3 is less than the maximum possible weight, and it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long w) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static boolean willItFly(ArrayList<Long> q, long w) {\n        if (!isPalindromic(q)) {\n            return false;\n        }\n        long sum = 0;\n        for (Long num : q) {\n            sum += num;\n        }\n        return sum <= w;\n    }\n\n    private static boolean isPalindromic(ArrayList<Long> q) {\n        int size = q.size();\n        for (int i = 0; i < size \/ 2; i++) {\n            if (!q.get(i).equals(q.get(size - i - 1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(1L, 2L)), 5L)); \/\/ false\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L, 2L, 3L)), 1L)); \/\/ false\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L, 2L, 3L)), 9L)); \/\/ true\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L)), 5L)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))), (5l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_73","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ er lesinn sama fram og til baka.    \/ þarf að breyta til að gera röð röð lista palindróm. A palindróm röð röð lista er röð röð lista sem     \/ Gefið röð röð lista arr af heilum tölum, finna lágmarksfjölda þátta sem     \/\/ >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n    \/\/ (4l)\n    \/\/ >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    \/\/ (1l)\n    \/\/ >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l))))\n    \/\/ (0l)\n    public static long smallestChange(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Given an array list arr of integers, finds the minimum number of changes\n    \/\/ to make the list palindromic.\n    public static long smallestChange(ArrayList<Long> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        long changes = 0;\n        \n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n        return changes;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L)))); \/\/ 4\n        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 4L, 3L, 2L, 2L)))); \/\/ 1\n        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 2L, 1L)))); \/\/ 0\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_74","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi     \/ ef listarnir tveir eru með sama fjölda stafa, skilar hann fyrsta listann.     \/ heildarfjöldi stafa í öllum strengjum listans er minni en í öðrum listum.     \/ Skrifaðu hlutverk sem tekur við tveimur röðlistum af strengjum og skilar röðlist sem hefur     \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList())))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\", (String)\"admin\", (String)\"project\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"5\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"4\")))\n    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n","canonical_solution":"public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n        int charCount1 = lst1.stream().mapToInt(String::length).sum();\n        int charCount2 = lst2.stream().mapToInt(String::length).sum();\n\n        if (charCount1 < charCount2) {\n            return lst1;\n        } else if (charCount2 < charCount1) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_75","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Að vita að a er minna en 100.    - Og rangt annars.    \/ Skrifaðu hlutverk sem skilar sannleika ef gefinn tala er margföldun 3 frumtal     \/\/ >>> isMultiplyPrime((30l))\n    \/\/ (true)\n    \/\/ 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long a) {\n","canonical_solution":"if (a >= 2 && a < 8) return false;\n\n        List<Integer> primes = sieveOfEratosthenes(100);\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    long product = (long) primes.get(i) * primes.get(j) * primes.get(k);\n                    if (product == a) {\n                        return true;\n                    }\n                    if (product > a) {\n                        break;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private static List<Integer> sieveOfEratosthenes(int limit) {\n        boolean[] isPrime = new boolean[limit + 1];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = false;\n        isPrime[1] = false;\n        for (int i = 2; i * i <= limit; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= limit; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= limit; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_76","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ x er einföld stig af n ef n**int=x     \/ kraftur n og falskt í öðrum tilvikum.     \/ Verkefni þitt er að skrifa hlutverk sem skilar sannar ef x er einfalt     \/\/ >>> isSimplePower((1l), (4l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((2l), (2l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((8l), (2l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((3l), (2l))\n    \/\/ (false)\n    \/\/ >>> isSimplePower((3l), (1l))\n    \/\/ (false)\n    \/\/ >>> isSimplePower((5l), (3l))\n    \/\/ (false)\n    public static boolean isSimplePower(long x, long n) {\n","canonical_solution":"public static boolean isSimplePower(long x, long n) {\n        if (x < 1 || n < 1) {\n            return false;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        long power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isSimplePower(1l, 4l)); \/\/ true\n        System.out.println(isSimplePower(2l, 2l)); \/\/ true\n        System.out.println(isSimplePower(8l, 2l)); \/\/ true\n        System.out.println(isSimplePower(3l, 2l)); \/\/ false\n        System.out.println(isSimplePower(3l, 1l)); \/\/ false\n        System.out.println(isSimplePower(5l, 3l)); \/\/ false\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_77","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Athugið: þú getur gert ráð fyrir að inngáfan sé alltaf gild.     \/ ef þessi ingeger er þétting af einhverjum heilum fjölda.     \/ Skrifaðu hlutverk sem tekur heildarfjölda a og skilar true     \/\/ >>> iscube((1l))\n    \/\/ (true)\n    \/\/ >>> iscube((2l))\n    \/\/ (false)\n    \/\/ >>> iscube((-1l))\n    \/\/ (true)\n    \/\/ >>> iscube((64l))\n    \/\/ (true)\n    \/\/ >>> iscube((0l))\n    \/\/ (true)\n    \/\/ >>> iscube((180l))\n    \/\/ (false)\n    public static boolean iscube(long a) {\n","canonical_solution":"public static boolean iscube(long a) {\n        if (a < 0) {\n            a = -a;\n        }\n        long cubeRoot = Math.round(Math.cbrt(a));\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_78","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ og tákn A,B,C,D,E,F eru alltaf stór.     \/ Athugið: þú getur gert ráð fyrir að inntak sé alltaf rétt eða tómur strengur,     \/ B (= tíundarmál 11), D (= tíundarmál 13).     \/ Svo þú þarft að ákvarða fjölda eftirfarandi tölustafir: 2, 3, 5, 7,     \/ Prímtölur eru 2, 3, 5, 7, 11, 13, 17,...     \/ Heksadecimaltölur eru 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.     \/ stærri en 1 sem er ekki margföldun tveggja minni náttúrulegra talna).    \/ stafir sem eru frumtal (prímtal, eða frumtal, er náttúrulegur fjöldi     \/ sextugt tala sem strengur og telur fjölda sextugt tala     \/ Þú hefur fengið að skrifa hlutverk sem tekur við     \/\/ >>> hexKey((\"AB\"))\n    \/\/ (1l)\n    \/\/ >>> hexKey((\"1077E\"))\n    \/\/ (2l)\n    \/\/ >>> hexKey((\"ABED1A33\"))\n    \/\/ (4l)\n    \/\/ >>> hexKey((\"123456789ABCDEF0\"))\n    \/\/ (6l)\n    \/\/ >>> hexKey((\"2020\"))\n    \/\/ (2l)\n    public static long hexKey(String num) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static long hexKey(String num) {\n        \/\/ Set of hexadecimal \"digits\" that are prime numbers.\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        \/\/ Count prime digits in the hexadecimal number.\n        long count = 0;\n        for (char ch : num.toCharArray()) {\n            if (primeHexDigits.contains(ch)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \/\/ You can include this main method for testing the function\n    public static void main(String[] args) {\n        System.out.println(hexKey(\"AB\")); \/\/ Output: 1\n        System.out.println(hexKey(\"1077E\")); \/\/ Output: 2\n        System.out.println(hexKey(\"ABED1A33\")); \/\/ Output: 4\n        System.out.println(hexKey(\"123456789ABCDEF0\")); \/\/ Output: 6\n        System.out.println(hexKey(\"2020\")); \/\/ Output: 2\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_79","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Extra stafirnir eru til að hjálpa með formatið.     \/ Það verður auka karakterar \"db\" í byrjun og í lok strengsins.     Hver stafur í strengnum verður '0' eða '1'.    \/ binary format. hlutverkið ætti að skila streng, með hverjum stafi sem táknar tvíeiningar     \/ Þú færð tölur í tíundaformi og verkefni þitt er að umbreyta því í     \/\/ >>> decimalToBinary((15l))\n    \/\/ (\"db1111db\")\n    \/\/ >>> decimalToBinary((32l))\n    \/\/ (\"db100000db\")\n    public static String decimalToBinary(long decimal) {\n","canonical_solution":"public static String decimalToBinary(long decimal) {\n        \/\/ Convert the decimal number to binary string\n        String binaryStr = Long.toBinaryString(decimal);\n        \/\/ Add 'db' at the beginning and the end of the binary string\n        return \"db\" + binaryStr + \"db\";\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"},{"task_id":"HumanEval_80","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ Strengur er hapjava ef lengd hans er a.m.k. 3 og allir 3 raðgerðir eru mismunandi     \/ Verkefni þitt er að athuga hvort strengurinn er hapjava eða ekki.     - Ūú færđ strenginn.    \/\/ >>> isHappy((\"a\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"aa\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> isHappy((\"aabb\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"adb\"))\n    \/\/ (true)\n    \/\/ >>> isHappy((\"xyy\"))\n    \/\/ (false)\n    public static boolean isHappy(String s) {\n","canonical_solution":"public static boolean isHappy(String s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n            return false;\n        }\n    }\n    return true;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_81","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ 0,0 E     \/ > 0,0 D-     \/ > 0,7 D     \/ > 1,0 D+     \/ > 1.3 C-     \/ > 1,7 C     \/ > 2,0 C+     \/ > 2.3 B-     \/ > 2,7 B     \/ > 3,0 B+     \/ > 3.3 A-     \/ > 3.7 A     \/ 4.0 A+     - Miđal.    \/ hlutverk sem getur gefið út lista yfir stafræna stafa með eftirfarandi töflu:     Hún hefur gefið ūér lista yfir einkunnir sumra nemenda og ūú verđur ađ skrifa.    Eina vandamálið er að hún hefur misst kóðann sem hún notaði til að gefa einkunnir.    Kennarinn hefur verið að búa til sína eigin reiknifræði fyrir einkunnagjöf.    Það er síðasta vika í háskóladeildinni og kennarinn þarf að gefa einkunnir.    \/\/ >>> gradeEquation((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {\n        ArrayList<String> letterGrades = new ArrayList<>();\n        for (Float gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else if (gpa == 0.0) {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<Float> gpas = new ArrayList<>();\n        gpas.add(4.0f);\n        gpas.add(3.0f);\n        gpas.add(1.7f);\n        gpas.add(2.0f);\n        gpas.add(3.5f);\n        ArrayList<String> grades = numericalLetterGrade(gpas);\n        System.out.println(grades);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"D-\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_82","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi     \/ lengd er frumtal eða rangt annars     \/ Skrifaðu hlutverk sem tekur streng og skilar sannri ef strengurinn     \/\/ >>> primeLength((\"Hello\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"abcdcba\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"kittens\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"orange\"))\n    \/\/ (false)\n    public static boolean primeLength(String string) {\n","canonical_solution":"public static boolean primeLength(String string) {\n    int length = string.length();\n    if (length <= 1) return false;\n    for (int i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(primeLength((\"Hello\")) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n    assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\")) == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\")) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_83","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ jákvæð heiltölur sem byrja eða enda á 1.    \/ Gefið jákvæð heiltal n, skila tali n-síða tölur     public static long startsOneEnds(long n) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    \/\/ Given a positive integer n, return the count of the numbers of n-digit\n    \/\/ positive integers that start or end with 1.\n    public static long startsOneEnds(long n) {\n        if (n == 1) return 1; \/\/ Only the number '1' is a one-digit number that starts or ends with 1.\n\n        \/\/ Total numbers with n digits: 9 * (10^(n-1))\n        long totalNDigitNumbers = 9 * (long)Math.pow(10, n - 1);\n\n        \/\/ Numbers that start with 1 and are n-digits: 1 * (10^(n-1))\n        long startsWithOne = (long)Math.pow(10, n - 1);\n\n        \/\/ Numbers that end with 1: 9 * (10^(n-1))\/10\n        long endsWithOne = totalNDigitNumbers \/ 10;\n\n        \/\/ Since numbers starting and ending with 1 are counted twice, we subtract the overlap.\n        return startsWithOne + endsWithOne - 1;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(startsOneEnds(1)); \/\/ Expected output: 1\n        System.out.println(startsOneEnds(2)); \/\/ Expected output: 19\n        System.out.println(startsOneEnds(3)); \/\/ Expected output: 190\n        System.out.println(startsOneEnds(4)); \/\/ Expected output: 1900\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"},{"task_id":"HumanEval_84","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi     \/ Gefið jákvæða heiltal N, skila heildarsumma stafir þess í tvírænum.     \/\/ >>> solve((1000l))\n    \/\/ (\"1\")\n    \/\/ >>> solve((150l))\n    \/\/ (\"110\")\n    \/\/ >>> solve((147l))\n    \/\/ (\"1100\")\n    \/\/ Variables:\n    \/\/ @N integer\n    \/\/ Constraints: 0 ≤ N ≤ 10000.\n    \/\/ Output:\n    \/\/ a string of binary number\n    public static String solve(long N) {\n","canonical_solution":"public static String solve(long N) {\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N \/= 10;\n        }\n        return Long.toBinaryString(sum);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"},{"task_id":"HumanEval_85","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Gefið ekki-tóma röð lista af heilum tölum lst. bæta við jafnvel þættir sem eru á ólíkum vísitölum ..     \/\/ >>> add((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)6l, (long)7l))))\n    \/\/ (2l)\n    public static long add(ArrayList<Long> lst) {\n","canonical_solution":"long sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)88l)))) == (88l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l, (long)2l, (long)122l)))) == (122l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)0l, (long)6l, (long)7l)))) == (0l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)6l, (long)8l)))) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_86","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ Athugið: Þú ættir að halda röð orða og lausa rými í setningunni.     \/ uppstignar röð byggð á ASCII-gildi.    \/ eru skipt út fyrir nýtt orð þar sem allir stafirnir eru raðaðir í     \/ Skipuð útgáfa af streng, er strengur þar sem öll orð (aðskilin með rými)     \/ Skrifaðu hlutverk sem tekur streng og skilar skipulagðri útgáfu af honum.     \/\/ >>> antiShuffle((\"Hi\"))\n    \/\/ (\"Hi\")\n    \/\/ >>> antiShuffle((\"hello\"))\n    \/\/ (\"ehllo\")\n    \/\/ >>> antiShuffle((\"Hello World!!!\"))\n    \/\/ (\"Hello !!!Wdlor\")\n    public static String antiShuffle(String s) {\n","canonical_solution":"public static String antiShuffle(String s) {\n    StringBuilder result = new StringBuilder();\n    String[] words = s.split(\"(?<=\\\\s)|(?=\\\\s)\");\n    \n    for (String word : words) {\n        if (word.trim().isEmpty()) {\n            result.append(word);\n        } else {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars));\n        }\n    }\n    \n    return result.toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"},{"task_id":"HumanEval_87","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Einnig, flokka samræmdir röð eftir dálkum í fallandi röð.     \/ Raða samræðum í upphafi eftir röðum í uppstigjandi röð.     \/ hvert par er samræmi - (röð, dálkar), sem hefst á 0.     \/ og skila röð lista af pörum, [(x1, y1), (x2, y2) ...] þannig að     \/ Gefið lst, og heiltal x, finna heiltal x í röð listann,     \/ hver röð getur innihaldið mismunandi fjölda dálka.     \/ sem er svipað og mátrix, þó, ólíkt mátriða,     \/ Þú færð 2 víddar gögn, sem hreiður röð listum,     \/\/ >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l))\n    \/\/ (new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))\n    \/\/ >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l))\n    \/\/ (new ArrayList<Pair<Long, Long>>(Arrays.asList()))\n    \/\/ >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l))\n    \/\/ (new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))\n    public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {\n","canonical_solution":"public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\n        for (long i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get((int)i);\n            for (long j = 0; j < row.size(); j++) {\n                if (row.get((int)j) == x) {\n                    result.add(Pair.with(i, j));\n                }\n            }\n        }\n\n        result.sort(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                int rowComparison = Long.compare(p1.getValue0(), p2.getValue0());\n                if (rowComparison != 0) {\n                    return rowComparison;\n                } else {\n                    return Long.compare(p2.getValue1(), p1.getValue1());  \/\/ Descending order by column\n                }\n            }\n        });\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 1l), (Pair<Long, Long>)Pair.with(1l, 1l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(5l, 1l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(2l, 0l), (Pair<Long, Long>)Pair.with(3l, 2l), (Pair<Long, Long>)Pair.with(3l, 0l), (Pair<Long, Long>)Pair.with(4l, 3l), (Pair<Long, Long>)Pair.with(4l, 0l), (Pair<Long, Long>)Pair.with(5l, 4l), (Pair<Long, Long>)Pair.with(5l, 0l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(6l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))));\n    }\n\n}\n"},{"task_id":"HumanEval_88","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ * ekki breyta gefnu röð röð lista.     \/ Athugasemd:     \/ eða raða því í sígrandi röð ef sú summa ((fyrsta vísitölugildi, síðasta vísitölugildi) er jafnt.     \/ þú mun raða gefinn rað rað lista í uppstigandi röð ef summa ((fyrsta vísitölur gildi, síðasta vísitölur gildi) er ólíkur,     \/ Gefið röð röð lista af non-negative heiltölur, skila cojava af gefnu röð röð lista eftir flokkun,     \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long> array) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.isEmpty()) {\n            return new ArrayList<>(array);\n        }\n\n        long firstValue = array.get(0);\n        long lastValue = array.get(array.size() - 1);\n        long sum = firstValue + lastValue;\n\n        ArrayList<Long> result = new ArrayList<>(array);\n        \n        if (sum % 2 == 0) {\n            \/\/ Sort in descending order\n            result.sort(Collections.reverseOrder());\n        } else {\n            \/\/ Sort in ascending order\n            Collections.sort(result);\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l, (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_89","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ skipta niður um tvö margfalda til tveggja staða.     \/ Stafrófið ætti að snúast á þann hátt að stafirnir     \/ skilar streng dulkóðuð með stafrófið er snúið.     \/ Búðu til löggjöf sem tekur streng sem argument og     \/\/ >>> encrypt((\"hi\"))\n    \/\/ (\"lm\")\n    \/\/ >>> encrypt((\"asdfghjkl\"))\n    \/\/ (\"ewhjklnop\")\n    \/\/ >>> encrypt((\"gf\"))\n    \/\/ (\"kj\")\n    \/\/ >>> encrypt((\"et\"))\n    \/\/ (\"ix\")\n    public static String encrypt(String s) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    \/\/ Create a function encrypt that takes a string as an argument and returns\n    \/\/ a string encrypted with the alphabet being rotated by 2 * 2 = 4 places.\n    public static String encrypt(String s) {\n        StringBuilder encryptedString = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                char shifted = (char) ((c - 'a' + 4) % 26 + 'a');\n                encryptedString.append(shifted);\n            } else if (Character.isUpperCase(c)) {\n                char shifted = (char) ((c - 'A' + 4) % 26 + 'A');\n                encryptedString.append(shifted);\n            } else {\n                \/\/ If the character is not a letter, append it unchanged.\n                encryptedString.append(c);\n            }\n        }\n        return encryptedString.toString();\n    }\n\n    public static void main(String[] args) {\n        \/\/ Test examples\n        System.out.println(encrypt(\"hi\"));          \/\/ Output: lm\n        System.out.println(encrypt(\"asdfghjkl\"));   \/\/ Output: ewhjklnop\n        System.out.println(encrypt(\"gf\"));          \/\/ Output: kj\n        System.out.println(encrypt(\"et\"));          \/\/ Output: ix\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n"},{"task_id":"HumanEval_90","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Endurendur null ef það er enginn slíkur þáttur.     \/ Skrifaðu hlutverk next_smallest (() sem skilar 2. minnsta atriði úr röðinni.     \/ Þú færð röð röð lista af heilum tölum.     \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n    \/\/ Optional.of(2l)\n    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l))))\n    \/\/ Optional.of(2l)\n    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList())))\n    \/\/ Optional.empty()\n    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l))))\n    \/\/ Optional.empty()\n    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        Set<Long> uniqueSet = new HashSet<>(lst);\n        List<Long> uniqueList = new ArrayList<>(uniqueSet);\n        if (uniqueList.size() < 2) {\n            return Optional.empty();\n        }\n\n        Collections.sort(uniqueList);\n        return Optional.of(uniqueList.get(1));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals(Optional.of(2l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l)))).equals(Optional.of(2l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(1l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)-35l, (long)34l, (long)12l, (long)-45l)))).equals(Optional.of(-35l)));\n    }\n\n}\n"},{"task_id":"HumanEval_91","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ Frásagnir eru afmarkaðar með '.', '?' eða '!'.     Ūreytir eru setningar sem byrja á \"ég\".    Ūú færđ orđasnúđ og verkum er ađ telja tölurnar.    \/\/ >>> isBored((\"Hello world\"))\n    \/\/ (0l)\n    \/\/ >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    \/\/ (1l)\n    public static long isBored(String S) {\n","canonical_solution":"long boredomCount = 0;\n        String[] sentences = S.split(\"[.!?]\");\n        for (String sentence : sentences) {\n            sentence = sentence.trim();\n            if (sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        return boredomCount;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_92","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi     \/ Endurnýtir false í öllum öðrum tilvikum.     \/ Endurendur sannar ef ein af tölunum er jafnt við upphæð hinna tveggja, og allar tölur eru heil tölur.     \/ Búðu til hlutverk sem tekur 3 tölur.     \/\/ >>> anyInt((float)5l, (float)2l, (float)7l)\n    \/\/ (true)\n    \/\/ >>> anyInt((float)3l, (float)2l, (float)2l)\n    \/\/ (false)\n    \/\/ >>> anyInt((float)3l, (float)-2l, (float)1l)\n    \/\/ (true)\n    \/\/ >>> anyInt((3.6f), (-2.2f), (float)2l)\n    \/\/ (false)\n    public static boolean anyInt(float x, float y, float z) {\n","canonical_solution":"public static boolean anyInt(float x, float y, float z) {\n        \/\/ Check if any of the numbers is the sum of the other two\n        \/\/ To ensure all are integers, they must be equal to their integer counterpart\n        if (x == (int) x && y == (int) y && z == (int) z) {\n            \/\/ Convert numbers to integers\n            int xi = (int) x;\n            int yi = (int) y;\n            int zi = (int) z;\n            return (xi == yi + zi) || (yi == xi + zi) || (zi == xi + yi);\n        }\n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(anyInt((float)2l, (float)3l, (float)1l) == (true));\n    assert(anyInt((2.5f), (float)2l, (float)3l) == (false));\n    assert(anyInt((1.5f), (float)5l, (3.5f)) == (false));\n    assert(anyInt((float)2l, (float)6l, (float)2l) == (false));\n    assert(anyInt((float)4l, (float)2l, (float)2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt((float)-4l, (float)6l, (float)2l) == (true));\n    assert(anyInt((float)2l, (float)1l, (float)1l) == (true));\n    assert(anyInt((float)3l, (float)4l, (float)7l) == (true));\n    assert(anyInt((3.0f), (float)4l, (float)7l) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_93","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     - Ég tek bara á stafi.    \/einn hljóðrök í ensku stafrófinu.    \/ skilabođin međ bréfi sem birtist 2 stöđum á undan ūessu     \/ þannig að það skiptast um tilfelli allra bókstafa, skiptast um alla hljómborð í     \/ Skrifaðu hlutverk sem tekur skilaboð, og kóðar í slíkum     \/\/ >>> encode((\"test\"))\n    \/\/ (\"TGST\")\n    \/\/ >>> encode((\"This is a message\"))\n    \/\/ (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n","canonical_solution":"public static String encode(String message) {\n    StringBuilder encodedMessage = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isLetter(c)) {\n            \/\/ Swap case\n            char swappedCaseChar = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\n            \/\/ Replace vowels\n            if (\"AEIOUaeiou\".indexOf(c) != -1) {\n                \/\/ Determine the offset for vowel replacement\n                char replacementChar = (char) (swappedCaseChar + 2);\n                encodedMessage.append(replacementChar);\n            } else {\n                encodedMessage.append(swappedCaseChar);\n            }\n        }\n    }\n    return encodedMessage.toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"},{"task_id":"HumanEval_94","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Þú þarft að finna stærsta frumgildi og skila summanum af tölustafum þess.     \/ Þú færð röð röð lista af heilum tölum.     \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l))))\n    \/\/ (10l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l))))\n    \/\/ (25l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l))))\n    \/\/ (13l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l))))\n    \/\/ (11l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l))))\n    \/\/ (3l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l))))\n    \/\/ (7l)\n    public static long skjkasdkd(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static boolean isPrime(long n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0)\n                return false;\n        }\n\n        return true;\n    }\n\n    public static long sumOfDigits(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n \/= 10;\n        }\n        return sum;\n    }\n\n    public static long skjkasdkd(ArrayList<Long> lst) {\n        long largestPrime = -1;\n\n        for (long num : lst) {\n            if (isPrime(num)) {\n                largestPrime = Math.max(largestPrime, num);\n            }\n        }\n\n        return largestPrime != -1 ? sumOfDigits(largestPrime) : 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(skjkasdkd(new ArrayList<Long>(Arrays.asList(0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L))));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l)))) == (10l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l)))) == (25l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l)))) == (13l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l)))) == (11l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l)))) == (3l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l)))) == (7l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l)))) == (19l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l, (long)123456l, (long)127l, (long)7l)))) == (19l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)127l, (long)97l, (long)8192l)))) == (10l));\n    }\n\n}\n"},{"task_id":"HumanEval_95","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Funktiónin ætti að skila falsk er gefið hash kort er tóm.     \/ case eða allir lyklar eru strengur í stórum bókstaf, annars skila fals.     \/ Gefið hash kort, skila sannar ef allir lyklar eru strengur í neðri     \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"b\", \"banana\"))))\n    \/\/ (true)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n    \/\/ (true)\n    public static boolean checkDictCase(HashMap<String,String> dict) {\n","canonical_solution":"import java.util.HashMap;\n\nclass Problem {\n    public static boolean checkDictCase(HashMap<String, String> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLower = true;\n        boolean allUpper = true;\n\n        for (String key : dict.keySet()) {\n            if (!key.equals(key.toLowerCase())) {\n                allLower = false;\n            }\n            if (!key.equals(key.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n\n        return allLower || allUpper;\n    }\n\n    public static void main(String[] args) {\n        HashMap<String, String> map1 = new HashMap<>(Map.of(\"a\", \"apple\", \"b\", \"banana\"));\n        HashMap<String, String> map2 = new HashMap<>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"));\n        HashMap<String, String> map3 = new HashMap<>(Map.of(\"a\", \"apple\", \"8\", \"banana\", \"A\", \"apple\"));\n        HashMap<String, String> map4 = new HashMap<>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"));\n        HashMap<String, String> map5 = new HashMap<>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"));\n\n        System.out.println(checkDictCase(map1)); \/\/ true\n        System.out.println(checkDictCase(map2)); \/\/ false\n        System.out.println(checkDictCase(map3)); \/\/ false\n        System.out.println(checkDictCase(map4)); \/\/ false\n        System.out.println(checkDictCase(map5)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_96","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ til dæmis:     \/ heilorðin sem eru frumtal og minni en n.     \/ Gera hlutverk sem tekur ekki neikvæða heiltal og skilar röð röð lista af fyrstu n     \/\/ >>> countUpTo((5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))\n    \/\/ >>> countUpTo((11l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))\n    \/\/ >>> countUpTo((0l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> countUpTo((20l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))\n    \/\/ >>> countUpTo((1l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> countUpTo((18l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))\n    public static ArrayList<Long> countUpTo(long n) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    \n    public static ArrayList<Long> countUpTo(long n) {\n        ArrayList<Long> primes = new ArrayList<>();\n        for (long i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n    \n    private static boolean isPrime(long num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (long i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countUpTo((5l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n    assert(countUpTo((6l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));\n    assert(countUpTo((7l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));\n    assert(countUpTo((10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))));\n    assert(countUpTo((0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(countUpTo((22l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))));\n    assert(countUpTo((1l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(countUpTo((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));\n    assert(countUpTo((47l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l)))));\n    assert(countUpTo((101l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l, (long)47l, (long)53l, (long)59l, (long)61l, (long)67l, (long)71l, (long)73l, (long)79l, (long)83l, (long)89l, (long)97l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_97","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Gera ráð fyrir að innflutningurinn sé alltaf gildur.     \/ er margfaldið af einingartölvum þeirra.     \/ Ljúka við hlutverkið sem tekur tvær heiltölur og skilar     \/\/ >>> multiply((148l), (412l))\n    \/\/ (16l)\n    \/\/ >>> multiply((19l), (28l))\n    \/\/ (72l)\n    \/\/ >>> multiply((2020l), (1851l))\n    \/\/ (0l)\n    \/\/ >>> multiply((14l), (-15l))\n    \/\/ (20l)\n    public static long multiply(long a, long b) {\n","canonical_solution":"long unitDigitA = Math.abs(a % 10);\n        long unitDigitB = Math.abs(b % 10);\n        return unitDigitA * unitDigitB;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_98","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ Gefið streng s, telja fjölda stórstafa samhljóða í jafnvel vísitölur.     \/\/ >>> countUpper((\"aBCdEf\"))\n    \/\/ (1l)\n    \/\/ >>> countUpper((\"abcdefg\"))\n    \/\/ (0l)\n    \/\/ >>> countUpper((\"dBBE\"))\n    \/\/ (0l)\n    public static long countUpper(String s) {\n","canonical_solution":"long count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (\"AEIOU\".indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_99","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi     \/ frá tveimur heilum tölum, afrundar það frá núll.     \/ og skilar næst öllum tölum til þess. Ef tala er jafn fjarlægð     \/ Búðu til hlutverk sem tekur gildi (streng) sem táknar tölu     \/\/ >>> closestInteger((\"10\"))\n    \/\/ (10l)\n    \/\/ >>> closestInteger((\"15.3\"))\n    \/\/ (15l)\n    \/\/ Note:\n    \/\/ Rounding away from zero means that if the given number is equidistant\n    \/\/ from two integers, the one you should return is the one that is the\n    \/\/ farthest from zero. For example closest_integer(\"14.5\") should\n    \/\/ return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long closestInteger(String value) {\n","canonical_solution":"public static long closestInteger(String value) {\n        double number = Double.parseDouble(value);\n        long rounded = Math.round(number);\n        if (Math.abs(number - rounded) == 0.5) {\n            \/\/ Rounding away from zero\n            if (number > 0) {\n                return rounded + 1;\n            } else {\n                return rounded - 1;\n            }\n        }\n        return rounded;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\"));   \/\/ 10\n        System.out.println(closestInteger(\"15.3\")); \/\/ 15\n        System.out.println(closestInteger(\"14.5\")); \/\/ 15\n        System.out.println(closestInteger(\"-14.5\"));\/\/ -15\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_100","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ i er fjöldi steina í hæðinni (i+1).    \/ Endurendur fjölda steina í hverju stigi í röð röð lista, þar sem þáttur á vísitölu     - Næsta jöfn tala ef n er jöfn.    - Næsta ólíka tala ef n er ólíka.    \/ Fjöldi steina á næstu hæð er:     Fyrsta hæđin er međ n steinum.    \/ Gefin jákvæð heiltal n, þú þarft að gera höfuð af n stigum steina.     \/\/ >>> makeAPile((3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))\n    public static ArrayList<Long> makeAPile(long n) {\n","canonical_solution":"public static ArrayList<Long> makeAPile(long n) {\n        ArrayList<Long> pile = new ArrayList<>();\n        long stones = n;\n        boolean isOdd = stones % 2 != 0;\n\n        for (int i = 0; i < n; i++) {\n            pile.add(stones);\n            if (isOdd) {\n                stones += 2; \/\/ Next odd number\n            } else {\n                stones += 2; \/\/ Next even number\n            }\n        }\n\n        return pile;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(makeAPile((3l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))));\n    assert(makeAPile((4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)6l, (long)8l, (long)10l)))));\n    assert(makeAPile((5l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)9l, (long)11l, (long)13l)))));\n    assert(makeAPile((6l)).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)10l, (long)12l, (long)14l, (long)16l)))));\n    assert(makeAPile((8l)).equals((new ArrayList<Long>(Arrays.asList((long)8l, (long)10l, (long)12l, (long)14l, (long)16l, (long)18l, (long)20l, (long)22l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_101","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ að skipta strengnum í orð og skila röð röð lista af orðum.     Þú færð orðasamband, skilin í milli með kommum eða rými.    \/\/ >>> wordsString((\"Hi, my name is John\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    \/\/ >>> wordsString((\"One, two, three, four, five, six\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<String> wordsString(String s) {\n        String[] words = s.split(\"[,\\\\s]+\");\n        return new ArrayList<String>(Arrays.asList(words));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(wordsString(\"Hi, my name is John\"));\n        System.out.println(wordsString(\"One, two, three, four, five, six\"));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(wordsString((\"Hi, my name is John\")).equals((new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))));\n    assert(wordsString((\"Hi, my name\")).equals((new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\")))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))));\n    assert(wordsString((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(wordsString((\"ahmed     , gamal\")).equals((new ArrayList<String>(Arrays.asList((String)\"ahmed\", (String)\"gamal\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_102","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ það er engin slík tala, þá ætti hlutverkið að skila -1.     \/ stærsta jafna heilfjölda sem er í bilinu [x, y] innifalið. Ef     \/ Þessi hlutverk tekur tvær jákvæðar tölur x og y og skilar     \/\/ >>> chooseNum((12l), (15l))\n    \/\/ (14l)\n    \/\/ >>> chooseNum((13l), (12l))\n    \/\/ (-1l)\n    public static long chooseNum(long x, long y) {\n","canonical_solution":"if (x > y) {\n            return -1l;\n        }\n        \n        long maxEven = y % 2 == 0 ? y : y - 1;\n        if (maxEven >= x) {\n            return maxEven;\n        } else {\n            return -1l;\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n}\n"},{"task_id":"HumanEval_104","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ Athugið: Skilaður röð lista ætti að raða í vaxandi röð.     \/ þættir sem hafa ekki einu einu stafi.     \/ Gefið röð röð lista af jákvæðum heilum tölum x. skila röð röð lista af öllum     \/\/ >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))\n    \/\/ >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {\n","canonical_solution":"public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {\n        return x.stream()\n                .filter(num -> hasNoEvenDigits(num))\n                .sorted()\n                .collect(Collectors.toCollection(ArrayList::new));\n    }\n\n    private static boolean hasNoEvenDigits(long num) {\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num \/= 10;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)12345l, (long)2033l, (long)111l, (long)151l)))).equals((new ArrayList<Long>(Arrays.asList((long)111l, (long)151l)))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)135l, (long)103l, (long)31l)))).equals((new ArrayList<Long>(Arrays.asList((long)31l, (long)135l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_105","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     Einn, tveir, þrír, fjórir, fimm, sex, sjö, átta, níu.    \/ snúa við listann yfir skiptinguna og skipta svo um hvern stafróf með viðeigandi nafni frá     \/ Gefið röð röð lista af heiltölur, raða heiltölur sem eru á milli 1 og 9 innifalinn,     \/\/ >>> byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Eight\", (String)\"Five\", (String)\"Four\", (String)\"Three\", (String)\"Two\", (String)\"Two\", (String)\"One\", (String)\"One\")))\n    \/\/ If the array array list is empty, return an empty array array list:\n    \/\/ >>> byLength((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ If the array array list has any strange number ignore it:\n    \/\/ >>> byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"One\")))\n    public static ArrayList<String> byLength(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static ArrayList<String> byLength(ArrayList<Long> arr) {\n        List<String> names = Arrays.asList(\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n        ArrayList<Long> filtered = new ArrayList<>();\n\n        \/\/ Filter the numbers between 1 and 9\n        for (Long num : arr) {\n            if (num >= 1 && num <= 9) {\n                filtered.add(num);\n            }\n        }\n\n        \/\/ Sort the filtered numbers\n        Collections.sort(filtered);\n\n        \/\/ Reverse the sorted list\n        Collections.reverse(filtered);\n\n        \/\/ Replace each number with its corresponding name\n        ArrayList<String> result = new ArrayList<>();\n        for (Long num : filtered) {\n            result.add(names.get(num.intValue()));\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Eight\", (String)\"Five\", (String)\"Four\", (String)\"Three\", (String)\"Two\", (String)\"Two\", (String)\"One\", (String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l)))).equals((new ArrayList<String>(Arrays.asList((String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)3l, (long)2l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Three\", (String)\"Two\", (String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)9l, (long)4l, (long)8l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Nine\", (String)\"Eight\", (String)\"Four\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_106","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ hlutfall i er margföldun töluna frá 1 til i (1 * 2 * ... * i).    \/i hefst frá 1.     \/ eða summan af tölum frá 1 til i annars.     \/ og skilar röð röð lista af stærð n, þannig að gildið á þáttur á vísitölunni i er factorial af i ef i er jafnvel     \/ Framkvæma hlutverkið f sem tekur n sem skilmerki,     \/\/ >>> f((5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        \n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumUpTo(i));\n            }\n        }\n        \n        return result;\n    }\n\n    private static long factorial(long num) {\n        long result = 1;\n        for (long i = 1; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private static long sumUpTo(long num) {\n        return num * (num + 1) \/ 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(f(5));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(f((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))));\n    assert(f((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l, (long)720l, (long)28l)))));\n    assert(f((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(f((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_107","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi 1:     \/ heil tölur palindróm sem falla innan svæðisins ((1, n), þar með talið.     \/ Gefin jákvæð heiltal n, skila pari sem hefur fjölda jafnt og ójafn     \/\/ >>> evenOddPalindrome((3l))\n    \/\/ (Pair.with(1l, 2l))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    \/\/ Example 2:\n    \/\/ >>> evenOddPalindrome((12l))\n    \/\/ (Pair.with(4l, 6l))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    \/\/ Note:\n    \/\/ 1. 1 <= n <= 10^3\n    \/\/ 2. returned pair has the number of even and odd integer palindromes respectively.\n    public static Pair<Long, Long> evenOddPalindrome(long n) {\n","canonical_solution":"import org.javatuples.Pair;\n\npublic class Problem {\n    public static Pair<Long, Long> evenOddPalindrome(long n) {\n        long evenCount = 0;\n        long oddCount = 0;\n        \n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        return Pair.with(evenCount, oddCount);\n    }\n    \n    private static boolean isPalindrome(long number) {\n        long original = number;\n        long reversed = 0;\n        \n        while (number > 0) {\n            long digit = number % 10;\n            reversed = reversed * 10 + digit;\n            number \/= 10;\n        }\n        \n        return original == reversed;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddPalindrome(3));  \/\/ Output: (Pair.with(1l, 2l))\n        System.out.println(evenOddPalindrome(12)); \/\/ Output: (Pair.with(4l, 6l))\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(evenOddPalindrome((123l)).equals((Pair.with(8l, 13l))));\n    assert(evenOddPalindrome((12l)).equals((Pair.with(4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals((Pair.with(1l, 2l))));\n    assert(evenOddPalindrome((63l)).equals((Pair.with(6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals((Pair.with(5l, 6l))));\n    assert(evenOddPalindrome((19l)).equals((Pair.with(4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals((Pair.with(4l, 5l))));\n    assert(evenOddPalindrome((1l)).equals((Pair.with(0l, 1l))));\n    }\n\n}\n"},{"task_id":"HumanEval_108","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ t.d. -123 hefur undirritað tölustafi -1, 2 og 3.     \/ Ef tala er neikvæð, þá er fyrsta undirritaða stafur hennar neikvæður:     \/ fjöldi þátta sem hefur stafrófsumma > 0.     \/ Skrifaðu hlutverk count_nums sem tekur röð röð lista af heilum tölum og skilar     \/\/ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (0l)\n    \/\/ >>> countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n    \/\/ (1l)\n    \/\/ >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l))))\n    \/\/ (3l)\n    public static long countNums(ArrayList<Long> arr) {\n","canonical_solution":"public static long countNums(ArrayList<Long> arr) {\n        return arr.stream().filter(num -> {\n            long sumOfDigits = 0;\n            long n = Math.abs(num);\n            while (n > 0) {\n                sumOfDigits += n % 10;\n                n \/= 10;\n            }\n            return (num < 0 ? sumOfDigits - 2 * (num % 10) : sumOfDigits) > 0;\n        }).count();\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> inputs1 = new ArrayList<Long>(Arrays.asList());\n        ArrayList<Long> inputs2 = new ArrayList<Long>(Arrays.asList(-1L, 11L, -11L));\n        ArrayList<Long> inputs3 = new ArrayList<Long>(Arrays.asList(1L, 1L, 2L));\n\n        System.out.println(countNums(inputs1)); \/\/ Output: 0\n        System.out.println(countNums(inputs2)); \/\/ Output: 1\n        System.out.println(countNums(inputs3)); \/\/ Output: 3\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_109","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ Athugasemd: Gert er ráð fyrir að skráin sé með einstökum þáttum.     \/ Ef vefjarðafé listinn er tómur þá skilar true.     \/ þá skila sannari eða falskari.    \/ Ef það er hægt að fá flokkað array array lista með því að framkvæma ofangreind aðgerð     \/ upphafsstilling í listann með röð röð þ.e. 0th vísitölu.     Síðasti hluti listans verður færður í     \/ Einn hægri færslu aðgerð þýðir að færa alla þætti array listann array með einum     Þú mátt framkvæma hægri skiptingu eins oft og þú vilt.    \/ eftirfarandi aðgerð á gefnum röð röð lista:     \/ það er hægt að fá röð röð lista raðað í ekki minnkandi röð með því að framkvæma     \/ tölur í röð röð lista verður raðgert. Verkefni þitt er að ákvarða hvort     \/ Við höfum röð röð lista 'arr' af N heiltölur arr[1], arr[2], ..., arr[N].The     \/\/ >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\n    \/\/ (true)\n    \/\/ Explanation: By performin 2 right shift operations, non-decreasing order can\n    \/\/ be achieved for the given array array list.\n    \/\/ >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l))))\n    \/\/ (false)\n    \/\/ Explanation:It is not possible to get non-decreasing order for the given\n    \/\/ array array list by performing any number of right shift operations.\n    public static boolean moveOneBall(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n        \n        int n = arr.size();\n        \n        \/\/ Find the number of increasing points\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                count++;\n            }\n        }\n        \n        \/\/ Check the end and start to be a breaking point\n        if (arr.get(n - 1) > arr.get(0)) {\n            count++;\n        }\n        \n        \/\/ If there is at most one such transition, it can be rotated\n        return count <= 1;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_110","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     - Annars er \"nei\" skilað.    \/ allir þættir lst1 til að vera jafnvel, skila \"JÁ\".     Ef hægt er að skipta um hluti milli lst1 og lst2 til að gera     \/ Það er engin takmörkun á fjölda skiptra þátta milli lst1 og lst2.     \/ milli þeirra til að gera lst1 röð röð lista af aðeins jafnvel tölur.     \/ og ákveður hvort hægt sé að skipta um hluti     \/ Í þessu vandamáli, þú munt framkvæma hlutverk sem tekur tvo röð lista af tölum,     \/\/ >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (\"YES\")\n    \/\/ >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l))))\n    \/\/ (\"NO\")\n    \/\/ It is assumed that the input array lists will be non-empty.\n    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n        \/\/ Check if all elements in lst1 are already even\n        boolean allEvenInLst1 = lst1.stream().allMatch(num -> num % 2 == 0);\n        if (allEvenInLst1) {\n            return \"YES\";\n        }\n\n        \/\/ Check if there is at least one even number in lst2\n        boolean hasEvenInLst2 = lst2.stream().anyMatch(num -> num % 2 == 0);\n        if (hasEvenInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> lst1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        ArrayList<Long> lst2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        System.out.println(exchange(lst1, lst2));  \/\/ Output: \"YES\"\n\n        lst1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        lst2 = new ArrayList<>(Arrays.asList(1L, 5L, 3L, 4L));\n        System.out.println(exchange(lst1, lst2));  \/\/ Output: \"NO\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l, (long)3l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)6l, (long)1l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)5l, (long)1l, (long)1l, (long)1l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)100l, (long)200l))), (new ArrayList<Long>(Arrays.asList((long)200l, (long)200l)))).equals((\"YES\")));\n    }\n\n}\n"},{"task_id":"HumanEval_111","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     Ef fleiri stafir koma upp á sama stað, skal skila öllum.    \/ bréfsins með flestum endurtekningum og inniheldur samsvarandi tal.     \/ Gefið streng sem táknar rými aðskilin litla stafi, skila hash kort     \/\/ >>> histogram((\"a b c\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l)))\n    \/\/ >>> histogram((\"a b b a\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))\n    \/\/ >>> histogram((\"a b c a b\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))\n    \/\/ >>> histogram((\"b b b b a\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"b\", 4l)))\n    \/\/ >>> histogram((\"\"))\n    \/\/ (new HashMap<String,Long>())\n    public static HashMap<String,Long> histogram(String test) {\n","canonical_solution":"import java.util.HashMap;\n\nclass Problem {\n    public static HashMap<String, Long> histogram(String test) {\n        HashMap<String, Long> countMap = new HashMap<>();\n        \n        if(test == null || test.isEmpty()) {\n            return countMap;\n        }\n        \n        String[] letters = test.split(\"\\\\s+\");\n        \n        long maxCount = 0;\n        \n        for(String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0L) + 1);\n            maxCount = Math.max(maxCount, countMap.get(letter));\n        }\n        \n        HashMap<String, Long> result = new HashMap<>();\n        \n        for(Map.Entry<String, Long> entry : countMap.entrySet()) {\n            if(entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_112","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi     \/ Þú ættir að skila pari sem inniheldur niðurstöðuflokkinn og sann\/villt fyrir athugunina.     \/ Streng er kölluð palindróm ef það les sama afturábak og fram.     \/ þá athuga hvort niðurstaðan strengur er palindróm.     \/ Við erum gefin tvö strengur s og c, þú þarft að eyða öllum stafi í s sem er jafnt hvaða stafi í c     - Verkefni .    \/\/ >>> reverseDelete((\"abcde\"), (\"ae\"))\n    \/\/ (Pair.with(\"bcd\", false))\n    \/\/ >>> reverseDelete((\"abcdef\"), (\"b\"))\n    \/\/ (Pair.with(\"acdef\", false))\n    \/\/ >>> reverseDelete((\"abcdedcba\"), (\"ab\"))\n    \/\/ (Pair.with(\"cdedc\", true))\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n","canonical_solution":"import org.javatuples.Pair;\n\npublic class Problem {\n\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n        Set<Character> charsToDelete = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n        \n        StringBuilder filteredString = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                filteredString.append(ch);\n            }\n        }\n        \n        String resultString = filteredString.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n        \n        return Pair.with(resultString, isPalindrome);\n    }\n\n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals((Pair.with(\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals((Pair.with(\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals((Pair.with(\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals((Pair.with(\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals((Pair.with(\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals((Pair.with(\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals((Pair.with(\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals((Pair.with(\"abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals((Pair.with(\"\", true))));\n    }\n\n}\n"},{"task_id":"HumanEval_113","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ af ólíkum tölustafum í i'th streng inngáfu.     \/ strengur i innskráningarinnar. \" þar sem öll i's ætti að vera skipt út fyrir töluna     \/ Hver hlutur i af útgáfu ætti að vera \"fjöldi ólíkra þátta í     \/ Gefið röð röð lista af strengjum, þar sem hvert strengur samanstendur af aðeins tölustafir, skila röð röð lista.     \/\/ >>> oddCount((new ArrayList<String>(Arrays.asList((String)\"1234567\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 4n the str4ng 4 of the 4nput.\")))\n    \/\/ >>> oddCount((new ArrayList<String>(Arrays.asList((String)\"3\", (String)\"11111111\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (String)\"the number of odd elements 8n the str8ng 8 of the 8nput.\")))\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n\n        for (String s : lst) {\n            int oddCount = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.isDigit(c)) {\n                    int digit = c - '0';\n                    if (digit % 2 != 0) {\n                        oddCount++;\n                    }\n                }\n            }\n\n            String output = \"the number of odd elements \" + oddCount +\n                            \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\";\n            result.add(output);\n        }\n\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<String> input1 = new ArrayList<String>(Arrays.asList(\"1234567\"));\n        ArrayList<String> result1 = oddCount(input1);\n        System.out.println(result1);\n\n        ArrayList<String> input2 = new ArrayList<String>(Arrays.asList(\"3\", \"11111111\"));\n        ArrayList<String> result2 = oddCount(input2);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"1234567\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 4n the str4ng 4 of the 4nput.\")))));\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"3\", (String)\"11111111\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (String)\"the number of odd elements 8n the str8ng 8 of the 8nput.\")))));\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"271\", (String)\"137\", (String)\"314\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (String)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (String)\"the number of odd elements 2n the str2ng 2 of the 2nput.\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_114","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi     \/ af tölum.     \/ Gefið röð röð lista af heilorðum nums, finna lágmarks upphæð hvers ekki tóm undir-röð röð lista     \/\/ >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l))))\n    \/\/ (1l)\n    \/\/ >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    \/\/ (-6l)\n    public static long minSubArraySum(ArrayList<Long> nums) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"The input list cannot be null or empty\");\n        }\n\n        long minSum = Long.MAX_VALUE;\n        long currentSum = 0;\n\n        for (Long num : nums) {\n            currentSum = Math.min(currentSum + num, num);\n            minSum = Math.min(minSum, currentSum);\n        }\n\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(minSubArraySum(new ArrayList<Long>(Arrays.asList(2L, 3L, 4L, 1L, 2L, 4L))));\n        System.out.println(minSubArraySum(new ArrayList<Long>(Arrays.asList(-1L, -2L, -3L))));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l, (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l, (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l)))) == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l)))) == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l)))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_115","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi 1:     \/ Útgáfa fjölda sinnum sem þú þarft að lækka hillurnar.     Verkefni ūitt er ađ nota öskjurnar til ađ tæma brunnina.    Og allar spölur eru eins stórar.    \/ Hver brunnur hefur samsvarandi öskju sem hægt er að nota til að draga vatn úr honum,     \/ og hver 1 í röðinni táknar eina einingu vatns.     Hver röð er ein brunnur.    \/\/ >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\n    \/\/ (6l)\n    \/\/ Example 2:\n    \/\/ >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\n    \/\/ (5l)\n    \/\/ Example 3:\n    \/\/ >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l))\n    \/\/ (0l)\n    \/\/ Constraints:\n    \/\/ * all wells have the same length\n    \/\/ * 1 <= grid.length <= 10^2\n    \/\/ * 1 <= grid[:,1].length <= 10^2\n    \/\/ * grid[i][j] -> 0 | 1\n    \/\/ * 1 <= capacity <= 10\n    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long totalWater = 0;\n        \n        for (ArrayList<Long> row : grid) {\n            for (Long cell : row) {\n                totalWater += cell;\n            }\n        }\n\n        return (long)Math.ceil((double)totalWater \/ capacity);\n    }\n\n    public static void main(String[] args) {\n        ArrayList<ArrayList<Long>> grid1 = new ArrayList<>(Arrays.asList(\n            new ArrayList<>(Arrays.asList(0L, 0L, 1L, 0L)),\n            new ArrayList<>(Arrays.asList(0L, 1L, 0L, 0L)),\n            new ArrayList<>(Arrays.asList(1L, 1L, 1L, 1L))\n        ));\n        System.out.println(maxFill(grid1, 1L)); \/\/ Output: 6\n\n        ArrayList<ArrayList<Long>> grid2 = new ArrayList<>(Arrays.asList(\n            new ArrayList<>(Arrays.asList(0L, 0L, 1L, 1L)),\n            new ArrayList<>(Arrays.asList(0L, 0L, 0L, 0L)),\n            new ArrayList<>(Arrays.asList(1L, 1L, 1L, 1L)),\n            new ArrayList<>(Arrays.asList(0L, 1L, 1L, 1L))\n        ));\n        System.out.println(maxFill(grid2, 2L)); \/\/ Output: 5\n\n        ArrayList<ArrayList<Long>> grid3 = new ArrayList<>(Arrays.asList(\n            new ArrayList<>(Arrays.asList(0L, 0L, 0L)),\n            new ArrayList<>(Arrays.asList(0L, 0L, 0L))\n        ));\n        System.out.println(maxFill(grid3, 5L)); \/\/ Output: 0\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l)) == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l)) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_116","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Það verður að vera framkvæmt svona:     \/ Fyrir svipaðan fjölda eininga, raða út frá tíundagildi.     \/ fjöldi eininga í tvírænum framsetningu í vaxandi röð.     \/ Í þessu Kata, þú þarft að raða röð röð lista af non-negative heiltölur samkvæmt     \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)-6l, (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\n\nclass Problem {\n\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n        Collections.sort(arr, (a, b) -> {\n            int countOnesA = Long.bitCount(a);\n            int countOnesB = Long.bitCount(b);\n            \n            if (countOnesA != countOnesB) {\n                return countOnesA - countOnesB;\n            } else {\n                return a.compareTo(b);\n            }\n        });\n        return arr;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(1L, 5L, 2L, 3L, 4L))));\n        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(-2L, -3L, -4L, -5L, -6L))));\n        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(1L, 0L, 2L, 3L, 4L))));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l, (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l, (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l, (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_117","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Athugið: þú getur gert ráð fyrir að innlánin strengi inniheldur aðeins stafi og rými.     \/ Ef strengurinn s er tómur þá ætti virkjunin að skila tómum röð lista.     \/ n samhljóða, í röð sem þessi orð birtast í strengnum s.     \/ hlutverk sem skilar röð röð lista yfir öll orð úr streng s sem innihalda nákvæmlega     \/ Gefið strengur s og náttúrulega fjölda n, hefur þú verið falið að framkvæma     \/\/ >>> selectWords((\"Mary had a little lamb\"), (4l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"little\")))\n    \/\/ >>> selectWords((\"Mary had a little lamb\"), (3l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n    \/\/ >>> selectWords((\"simple white space\"), (2l))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> selectWords((\"Hello world\"), (4l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"world\")))\n    \/\/ >>> selectWords((\"Uncle sam\"), (3l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s == null || s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        for (String word : words) {\n            long consonantCount = countConsonants(word);\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private static long countConsonants(String word) {\n        long count = 0;\n        for (char c : word.toCharArray()) {\n            if (isConsonant(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    private static boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return \"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_118","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Þú getur gert ráð fyrir að gefið strengur inniheldur enska bókstaf aðeins.     \/ finnur einhverja einhljóð sem uppfyllir skilyrði hér að ofan.     \/ Vokals í upphafi og endingu telst ekki.    \/ Tveir samhljóðarmerki frá hægri hlið orðsins (stærri og minni stærð).    Þú færð orð og átt að finna nærsta safnorðið sem stendur á milli.    \/\/ >>> getClosestVowel((\"yogurt\"))\n    \/\/ (\"u\")\n    \/\/ >>> getClosestVowel((\"FULL\"))\n    \/\/ (\"U\")\n    \/\/ >>> getClosestVowel((\"quick\"))\n    \/\/ (\"\")\n    \/\/ >>> getClosestVowel((\"ab\"))\n    \/\/ (\"\")\n    public static String getClosestVowel(String word) {\n","canonical_solution":"public static String getClosestVowel(String word) {\n    String vowels = \"AEIOUaeiou\";\n    int len = word.length();\n    if (len < 3) {\n        return \"\";\n    }\n    \n    for (int i = len - 2; i > 0; i--) {\n        char currentChar = word.charAt(i);\n        if (vowels.indexOf(currentChar) != -1) {\n            char prevChar = word.charAt(i - 1);\n            char nextChar = word.charAt(i + 1);\n            if (vowels.indexOf(prevChar) == -1 && vowels.indexOf(nextChar) == -1) {\n                return String.valueOf(currentChar);\n            }\n        }\n    }\n    \n    return \"\";\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"},{"task_id":"HumanEval_119","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Endurkoma \"Já\" ef það er leið til að gera góða streng, og endurkoma \"Nei\" annars.     \/ \"()) \" er ekki.     \/ eru jafnvægi. Til dæmis: strengurinn '(()))) er góður, en strengurinn     \/ Strengur S er talinn góður ef og aðeins ef allir brúnir í S     \/ einhver röð, að niðurstöðan strengur verður góður.     Verkefni ūitt er ađ athuga hvort hægt sé ađ tengja saman strengina.    \/ aðeins \" (\") eða \" (\") í brúnum.     \/ Þú færð array array lista af tveimur strengjum, báðir strengir samanstanda af opnum     \/\/ >>> matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\"))))\n    \/\/ (\"Yes\")\n    \/\/ >>> matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\")\"))))\n    \/\/ (\"No\")\n    public static String matchParens(ArrayList<String> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static String matchParens(ArrayList<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n\n        \/\/ Check s1 + s2\n        if (isBalanced(s1 + s2)) {\n            return \"Yes\";\n        }\n\n        \/\/ Check s2 + s1\n        if (isBalanced(s2 + s1)) {\n            return \"Yes\";\n        }\n\n        \/\/ None are balanced\n        return \"No\";\n    }\n    \n    private static boolean isBalanced(String str) {\n        int balance = 0;\n        for (char c : str.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) { \n                return false; \n            }\n        }\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> test1 = new ArrayList<>(Arrays.asList(\"()(\", \")\"));\n        System.out.println(matchParens(test1)); \/\/ Output: Yes\n\n        ArrayList<String> test2 = new ArrayList<>(Arrays.asList(\")\", \")\"));\n        System.out.println(matchParens(test2)); \/\/ Output: No\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"},{"task_id":"HumanEval_120","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi 1:     \/ af lengd k með hámarks k tölur í arr.     \/ Gefið röð röð listar arr af heilum tölum og jákvæð heil tala k, skila röð röð listar     \/\/ >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))\n    \/\/ Example 2:\n    \/\/ >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))\n    \/\/ Example 3:\n    \/\/ >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l)))\n    \/\/ Note:\n    \/\/ 1. The length of the array array list will be in the range of [1, 1000].\n    \/\/ 2. The elements in the array array list will be in the range of [-1000, 1000].\n    \/\/ 3. 0 <= k <= len(arr)\n    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n\n    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        \/\/ Sort the array list in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        \/\/ Prepare the result list to store the maximum k elements\n        ArrayList<Long> result = new ArrayList<Long>();\n\n        \/\/ Add the first k elements to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        \n        \/\/ Sort the result in ascending order as per the problem statement\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        \/\/ Example 1\n        ArrayList<Long> example1 = new ArrayList<Long>();\n        Collections.addAll(example1, -3L, -4L, 5L);\n        System.out.println(maximum(example1, 3));\n\n        \/\/ Example 2\n        ArrayList<Long> example2 = new ArrayList<Long>();\n        Collections.addAll(example2, 4L, -4L, 4L);\n        System.out.println(maximum(example2, 2));\n\n        \/\/ Example 3\n        ArrayList<Long> example3 = new ArrayList<Long>();\n        Collections.addAll(example3, -3L, 2L, 1L, 2L, -1L, -2L, 1L);\n        System.out.println(maximum(example3, 1));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l, (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l, (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_121","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi     \/ Gefið ekki-tóma röð lista af heilum tölum, skila summan af öllum odd þætti sem eru í jafnvel stöðum.     \/\/ >>> solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l))))\n    \/\/ (12l)\n    \/\/ >>> solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l))))\n    \/\/ (9l)\n    \/\/ >>> solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l))))\n    \/\/ (0l)\n    public static long solution(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Given a non-empty array list of integers, return the sum of all of the odd elements that are in even positions.\n    public static long solution(ArrayList<Long> lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) { \/\/ Iterate over even indices (0-based)\n            long num = lst.get(i);\n            if (num % 2 != 0) { \/\/ Check if the element is odd\n                sum += num;\n            }\n        }\n        return sum;\n    }\n\n    \/\/ Test the solution method\n    public static void main(String[] args) {\n        System.out.println(solution(new ArrayList<>(Arrays.asList(5L, 8L, 7L, 1L)))); \/\/ Expected output: 12\n        System.out.println(solution(new ArrayList<>(Arrays.asList(3L, 3L, 3L, 3L, 3L)))); \/\/ Expected output: 9\n        System.out.println(solution(new ArrayList<>(Arrays.asList(30L, 13L, 24L, 321L)))); \/\/ Expected output: 0\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l)))) == (12l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l)))) == (9l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l)))) == (5l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)23l, (long)32l)))) == (23l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)13l, (long)2l, (long)9l)))) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_122","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ er súm af þáttum með að hámarki tveimur tölustafum frá fyrstu k þáttum arr.     \/ Gefið er ekki tóm array array listann af heilum tölum arr og heilum tölum k, skila     \/\/ >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    \/\/ (24l)\n    \/\/ Constraints:\n    \/\/ 1. 1 <= len(arr) <= 100\n    \/\/ 2. 1 <= k <= len(arr)\n    public static long addElements(ArrayList<Long> arr, long k) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long addElements(ArrayList<Long> arr, long k) {\n        long sum = 0;\n        for (int i = 0; i < k; i++) {\n            long element = arr.get(i);\n            if (element < 100) {\n                sum += element;\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))), (1l)) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_123","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ get_odd_collatz(5) skilar [1, 5] # Collatz röð fyrir 5 er [5, 16, 8, 4, 2, 1], svo ólíkar tölur eru aðeins 1, og 5.     \/ Til dæmis:     \/ 2. skilaði röð lista flokkað í vaxandi röð.     \/ 1. Collatz(1) er [1].     \/ Athugasemd:     \/term plús 1. Gáturinn er sá að sama hvaða gildi n er, þá mun röðin alltaf ná 1.    Ef fyrri framboð er ólíðandi, þá er næsta framboð 3 sinnum það fyrra.    \/ fyrri tímabil eins og hér segir: ef fyrri tímabil er jafnt, næsta tímabil er helmingur af     \/ sem hér segir: byrjaðu á einhverri jákvæðri heiltali n. Þá er hverja tegund fengin frá     \/ Collatz-gátan er gátur í stærðfræði sem varðar skilgreindan röð .    \/ Gefin jákvæð heiltal n, skila röðnum röðlist sem hefur ólíkar tölur í Collatz röð.     \/\/ >>> getOddCollatz((5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))\n    public static ArrayList<Long> getOddCollatz(long n) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<Long> getOddCollatz(long n) {\n        TreeSet<Long> oddNumbers = new TreeSet<>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                oddNumbers.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n \/ 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        oddNumbers.add(1L); \/\/ Adding 1 as it is always included in the sequence\n        return new ArrayList<>(oddNumbers);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(getOddCollatz(5)); \/\/ Example usage\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getOddCollatz((14l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));\n    assert(getOddCollatz((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))));\n    assert(getOddCollatz((12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)))));\n    assert(getOddCollatz((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_124","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ 4. dagsetningin á að vera í formi: mm-dd-yyyy     \/ 3. Mánudagarnir mega ekki vera færri en 1 eða hærri en 12.    \/ 2. Fjöldi daga er ekki minna en 1 eða hærri en 31 daga fyrir mánuði 1,3,5,7,8,10,12. Og fjöldi daga er ekki minna en 1 eða hærri en 30 daga fyrir mánuði 4,6,9,11. Og, fjöldi daga er ekki minna en 1 eða hærri en 29 fyrir mánuðinn 2.     \/ 1. Dagsetningarstrengurinn er ekki tómur.     \/ Dagurinn er gildur ef allar eftirfarandi reglur eru uppfyllt:     \/ skilar sannri ef dagsetning er gild annars ósatt.     \/ Þú þarft að skrifa hlutverk sem staðfestir gefið dagsetningarstreng og     \/\/ >>> validDate((\"03-11-2000\"))\n    \/\/ (true)\n    \/\/ >>> validDate((\"15-01-2012\"))\n    \/\/ (false)\n    \/\/ >>> validDate((\"04-0-2040\"))\n    \/\/ (false)\n    \/\/ >>> validDate((\"06-04-2020\"))\n    \/\/ (true)\n    \/\/ >>> validDate((\"06\/04\/2020\"))\n    \/\/ (false)\n    public static boolean validDate(String date) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static boolean validDate(String date) {\n        if (date == null || date.isEmpty() || date.length() != 10) {\n            return false;\n        }\n\n        \/\/ Check if format is mm-dd-yyyy\n        if (date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n\n        try {\n            int month = Integer.parseInt(date.substring(0, 2));\n            int day = Integer.parseInt(date.substring(3, 5));\n            int year = Integer.parseInt(date.substring(6, 10));\n            \n            if (month < 1 || month > 12) {\n                return false;\n            }\n\n            boolean isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n            int[] daysInMonth = {0, 31, (isLeapYear ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            \n            if (day < 1 || day > daysInMonth[month]) {\n                return false;\n            }\n            \n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_126","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi     \/ númer, skilar falsk.    Ef listinn hefur fleiri en eitt eintak af sama listann     \/ Gefið röð röð lista af tölum, skilar hvort sem þeir eru raðað eða ekki     \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n    \/\/ (false)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l))))\n    \/\/ (false)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (false)\n    public static boolean isSorted(ArrayList<Long> lst) {\n","canonical_solution":"public static boolean isSorted(ArrayList<Long> lst) {\n        if (lst == null || lst.size() <= 1) {\n            return true;\n        }\n        int duplicateCount = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n            if (lst.get(i).equals(lst.get(i - 1))) {\n                duplicateCount++;\n                if (duplicateCount > 1) {\n                    return false;\n                }\n            } else {\n                duplicateCount = 0;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_127","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ [inn-\/útgangs] sýni:     Ef tvennt intervall skeri ekki, skila \"NEI\".    \/ annars skilar \"NEI\".     \/ Ef lengd gatnamótsins er frumtal, skila \"JÁ\",     \/ sem lengd hennar er 1, sem er ekki frumtal.     \/ Dæmi, á millibilið á millibili (1, 3), (2, 4) er (2, 3)     \/ millibili er frumtal.     \/ Verkefni þitt er að ákvarða hvort lengd á milli þessara tveggja     \/ Fyrir hvert gefið tímabil er gert ráð fyrir að upphaf þess sé minna en eða jafn endingu þess.     \/ inniheldur bæði upphaf og endir.     \/ Gefin tímabil eru lokuð sem þýðir að tímabilið (byrjun, endir)     \/ þar sem hvert bil er pari af heilum tölum.    - Ūú hefur tvö tímabil.    \/\/ >>> intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l)))\n    \/\/ (\"NO\")\n    \/\/ >>> intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l)))\n    \/\/ (\"NO\")\n    \/\/ >>> intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l)))\n    \/\/ (\"YES\")\n    public static String intersection(Pair<Long, Long> interval1, Pair<Long, Long> interval2) {\n","canonical_solution":"import org.javatuples.Pair;\n\npublic class Problem {\n    public static String intersection(Pair<Long, Long> interval1, Pair<Long, Long> interval2) {\n        long start1 = interval1.getValue0();\n        long end1 = interval1.getValue1();\n        long start2 = interval2.getValue0();\n        long end2 = interval2.getValue1();\n\n        long startIntersection = Math.max(start1, start2);\n        long endIntersection = Math.min(end1, end2);\n\n        if (startIntersection > endIntersection) {\n            return \"NO\";\n        }\n\n        long intersectionLength = endIntersection - startIntersection;\n\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static boolean isPrime(long n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(intersection(Pair.with(1L, 2L), Pair.with(2L, 3L))); \/\/ \"NO\"\n        System.out.println(intersection(Pair.with(-1L, 1L), Pair.with(0L, 4L))); \/\/ \"NO\"\n        System.out.println(intersection(Pair.with(-3L, -1L), Pair.with(-5L, 5L))); \/\/ \"YES\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"},{"task_id":"HumanEval_128","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Athugið: skila null fyrir tóm arr.     \/ af hverjum númeri í röð röð lista, sem er fulltrúi 1, -1 eða 0.     \/ heildarfjöldafjölda heildartala margfaldað með margfaldi allra tákna     \/ Þú færð array array list arr af heilum tölum og þú þarft að skila     \/\/ >>> prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l))))\n    \/\/ Optional.of(9l)\n    \/\/ >>> prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l))))\n    \/\/ Optional.of(0l)\n    \/\/ >>> prodSigns((new ArrayList<Long>(Arrays.asList())))\n    \/\/ Optional.empty()\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        long sumOfMagnitudes = 0;\n        long productOfSigns = 1;\n\n        for (Long num : arr) {\n            sumOfMagnitudes += Math.abs(num);\n            if (num < 0) {\n                productOfSigns *= -1;\n            } else if (num == 0) {\n                productOfSigns = 0;\n            }\n        }\n\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n    \n    public static void main(String[] args) {\n        \/\/ Test cases\n        System.out.println(prodSigns(new ArrayList<Long>(Arrays.asList(1L, 2L, 2L, -4L)))); \/\/ Optional[9]\n        System.out.println(prodSigns(new ArrayList<Long>(Arrays.asList(0L, 1L)))); \/\/ Optional[0]\n        System.out.println(prodSigns(new ArrayList<Long>())); \/\/ Optional.empty\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l, (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n    }\n\n}\n"},{"task_id":"HumanEval_129","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Endurendur raðaða röð lista yfir gildi á frumum sem lágmarks leið fer í gegnum.     - Það er tryggt að svarið sé einstakt.    \/ lst_A[j] = lst_B[j].    \/ þannig að lst_A[i] < lst_B[i] og fyrir hvaða j (1 <= j <i) sem er höfum við     \/ en lst_B, með öðrum orðum, það er til heiltal vísitölur i (1 <= i <= k)     \/ í gegnum (ég nefni þau lst_A og lst_B), lst_A er orðabókarfræðilega minna     \/ eftir að hafa gert raðað röð listar af gildum á frumum sem A og B fara     \/ Leið A (með lengd k) er minni en leið B (með lengd k) ef     - Ūú getur ekki fariđ út af netinu.    \/ nauðsynlega ólíkt).    \/ Vinsamlegast athugaðu að leið með lengd k þýðir að þú heimsækir nákvæmlega k frumur (ekki     - Ég er í klefanum.    Með öðrum orðum, þú getur farið í frumur sem deila kant með þér núverandi.    Í hverju skrefi geturðu flutt þig í hverja nágrannasellu.    Þú þarft að finna minnst lengd k á netinu.    \/ inclusive birtist nákvæmlega einu sinni á frumum ritsins.     \/ hver klefi á netinu inniheldur gildi. Hver heiltal í bilinu [1, N * N]     \/ Gefið er rás með N röðum og N dálkum (N >= 2) og jákvæða heiltali k,     \/\/ >>> minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))\n    \/\/ >>> minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l)))\n    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.PriorityQueue;\n\nclass Problem {\n\n    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {\n        int n = grid.size();\n        int[] dx = {0, 0, 1, -1};\n        int[] dy = {1, -1, 0, 0};\n\n        PriorityQueue<Path> pq = new PriorityQueue<>();\n        \/\/ Start from each cell and try to find the minimum path\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.add(new Path(i, j, k, grid.get(i).get(j)));\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            Path current = pq.poll();\n            if (current.k == 1) {\n                return current.path;\n            }\n            for (int dir = 0; dir < 4; dir++) {\n                int ni = current.x + dx[dir];\n                int nj = current.y + dy[dir];\n                if (ni >= 0 && ni < n && nj >= 0 && nj < n) {\n                    ArrayList<Long> newPath = new ArrayList<>(current.path);\n                    newPath.add(grid.get(ni).get(nj));\n                    pq.add(new Path(ni, nj, current.k - 1, newPath));\n                }\n            }\n        }\n\n        return new ArrayList<>();\n    }\n\n    static class Path implements Comparable<Path> {\n        int x, y;\n        long k;\n        ArrayList<Long> path;\n\n        Path(int x, int y, long k, long value) {\n            this.x = x;\n            this.y = y;\n            this.k = k;\n            this.path = new ArrayList<>();\n            this.path.add(value);\n        }\n\n        Path(int x, int y, long k, ArrayList<Long> path) {\n            this.x = x;\n            this.y = y;\n            this.k = k;\n            this.path = path;\n        }\n\n        @Override\n        public int compareTo(Path other) {\n            for (int i = 0; i < this.path.size(); i++) {\n                int comparison = Long.compare(this.path.get(i), other.path.get(i));\n                if (comparison != 0) {\n                    return comparison;\n                }\n            }\n            return 0;\n        }\n    }\n\n    public static void main(String[] args) {\n        ArrayList<ArrayList<Long>> grid1 = new ArrayList<>();\n        grid1.add(new ArrayList<>(Arrays.asList(1L, 2L, 3L)));\n        grid1.add(new ArrayList<>(Arrays.asList(4L, 5L, 6L)));\n        grid1.add(new ArrayList<>(Arrays.asList(7L, 8L, 9L)));\n        System.out.println(minPath(grid1, 3L));\n\n        ArrayList<ArrayList<Long>> grid2 = new ArrayList<>();\n        grid2.add(new ArrayList<>(Arrays.asList(5L, 9L, 3L)));\n        grid2.add(new ArrayList<>(Arrays.asList(4L, 1L, 6L)));\n        grid2.add(new ArrayList<>(Arrays.asList(7L, 8L, 2L)));\n        System.out.println(minPath(grid2, 1L));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)11l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)14l, (long)15l, (long)16l))))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)12l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)16l, (long)11l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l))))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)1l, (long)10l, (long)1l, (long)10l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)11l, (long)16l))))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)7l, (long)1l, (long)7l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l))))), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l))))), (12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)9l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_130","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ fyrstu n + 1 tölur Tribonacci-söðunnar.     \/ Þú ert gefið ekki neikvæð heiltal númer n, þú þarft að a skila array array lista af     \/ = 2 + 3 + 3 = 8     \/ þríþríþrí) = þríþríþríþrí) + þríþríþríþrí) + þríþríþríþrí)    \/ tri(4) = 3     \/ tri(2) = 1 + (2 \/ 2) = 2     \/ Til dæmis:     \/ tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ef n er ólíðandi.     \/ tri (n) = 1 + n \/ 2, ef n er tvílið.    \/ tri(1) = 3     \/ Tribonacci-söð er skilgreind með endurtekningu:     En ūađ sem fķlk ūekkir ekki er Tribonacci-sniđsliđ.    Allir þekkja Fibonacci-söðuna, hún var rannsökuð ítarlega af stærðfræðingum í    \/\/ >>> tri((3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Problem {\n    public static ArrayList<Long> tri(long n) {\n        \/\/ Return empty list if n is negative\n        if (n < 0) {\n            return new ArrayList<>();\n        }\n        \n        \/\/ Create an ArrayList to store the Tribonacci sequence\n        ArrayList<Long> tribonacci = new ArrayList<>();\n        \n        \/\/ Define the base cases\n        if (n >= 0) {\n            tribonacci.add(1L);  \/\/ tri(0)\n        }\n        if (n >= 1) {\n            tribonacci.add(3L);  \/\/ tri(1)\n        }\n        \n        \/\/ Calculate the values for the sequence from tri(2) to tri(n)\n        for (long i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.add(1 + i \/ 2);\n            } else {\n                long value = tribonacci.get((int)(i - 1)) \n                           + tribonacci.get((int)(i - 2)) \n                           + tribonacci.get((int)(i + 1 - 2)); \/\/ i+1-2 = i-1 (next i is processed)\n                tribonacci.add(value);\n            }\n        }\n        \n        return tribonacci;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(tri(3)); \/\/ Outputs: [1, 3, 2, 8]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_131","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ Skila 0 ef allir tölustafir eru jafnt.     \/ Gefin jákvæð heiltal n, skila vörunni af odd tölustafir.     \/\/ >>> digits((1l))\n    \/\/ (1l)\n    \/\/ >>> digits((4l))\n    \/\/ (0l)\n    \/\/ >>> digits((235l))\n    \/\/ (15l)\n    public static long digits(long n) {\n","canonical_solution":"public static long digits(long n) {\n        long product = 1;\n        boolean hasOddDigit = false;\n        \n        while (n > 0) {\n            long digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n \/= 10;\n        }\n        \n        return hasOddDigit ? product : 0;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_132","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ þar sem að minnsta kosti einn braket í undirröðinni er nestinn.     \/ Funktiónin ætti að skila sannri ef og aðeins ef það er gild undirfylgni af brjósti     \/ Búðu til hlutverk sem tekur streng sem inngangur sem inniheldur aðeins fermetra brákana.     \/\/ >>> isNested((\"[[]]\"))\n    \/\/ (true)\n    \/\/ >>> isNested((\"[]]]]]]][[[[[]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[][]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[[][]]\"))\n    \/\/ (true)\n    \/\/ >>> isNested((\"[[]][[\"))\n    \/\/ (true)\n    public static boolean isNested(String string) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static boolean isNested(String string) {\n        int openCount = 0;\n        boolean hasNested = false;\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                openCount++;\n            } else if (c == ']') {\n                if (openCount > 0) {\n                    openCount--;\n                    \/\/ If we find a pair and there was an unmatched '[' before this ']'\n                    \/\/ it means there was nesting.\n                    hasNested = true;\n                }\n                \n                if (openCount < 0) {\n                    \/\/ If at any point we have more closing brackets than opening ones,\n                    \/\/ it's invalid, so reset openCount.\n                    openCount = 0;\n                }\n            }\n        }\n        \n        return hasNested;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); \/\/ true\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); \/\/ false\n        System.out.println(isNested(\"[][]\")); \/\/ false\n        System.out.println(isNested(\"[]\")); \/\/ false\n        System.out.println(isNested(\"[[][]]\")); \/\/ true\n        System.out.println(isNested(\"[[]][[\")); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_133","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ hringja hvert atriði í röð listann til efri int ((Loft) fyrst.     \/ Þú þarft að skila summan af ferfætum tölum í gefnum röð lista,     Þú færð fjölda talna.    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n    \/\/ (14l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)4.0f, (float)9.0f))))\n    \/\/ (98l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f))))\n    \/\/ (84l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n    \/\/ (29l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f))))\n    \/\/ (6l)\n    public static long sumSquares(ArrayList<Float> lst) {\n","canonical_solution":"public static long sumSquares(ArrayList<Float> lst) {\n        return lst.stream()\n                  .mapToInt(f -> (int) Math.ceil(f))\n                  .map(i -> i * i)\n                  .sum();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) == (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f, (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_134","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Ath: \"orð\" er hópur stafa sem eru skilin í bili.     \/ hluti orđs og falskur annars.     \/ af ákveðnum streng er stafrófsmerki og er ekki     \/ Skapaðu hlutverk sem skilar sannri ef síðasta stafurinn     \/\/ >>> checkIfLastCharIsALetter((\"apple pie\"))\n    \/\/ (false)\n    \/\/ >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    \/\/ (true)\n    \/\/ >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    \/\/ (false)\n    \/\/ >>> checkIfLastCharIsALetter((\"\"))\n    \/\/ (false)\n    public static boolean checkIfLastCharIsALetter(String txt) {\n","canonical_solution":"public static boolean checkIfLastCharIsALetter(String txt) {\n    txt = txt.trim();\n    if (txt.isEmpty()) {\n        return false;\n    }\n    String[] words = txt.split(\" \");\n    String lastWord = words[words.length - 1];\n    if (lastWord.isEmpty()) {\n        return false;\n    }\n    char lastChar = lastWord.charAt(lastWord.length() - 1);\n    return Character.isLetter(lastChar);\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_135","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ tvöfalda gildi.    \/ engin slík atriði er til þá skila -1. Gefin svið svið lista mun ekki innihalda     \/ er ekki stærri en eða jafnt við þáttur sem er rétt á undan.    \/ Búðu til hlutverk sem skilar stærsta vísitölu þættis sem     \/\/ >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\n    \/\/ (3l)\n    \/\/ >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (-1l)\n    public static long canArrange(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    \/\/ Create a function which returns the largest index of an element which\n    \/\/ is not greater than or equal to the element immediately preceding it.\n    \/\/ If no such element exists then return -1. The given array list will not\n    \/\/ contain duplicate values.\n\n    public static long canArrange(ArrayList<Long> arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 4L, 3L, 5L));\n        System.out.println(canArrange(list1)); \/\/ Output: 3\n        \n        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L));\n        System.out.println(canArrange(list2)); \/\/ Output: -1\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))) == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l, (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_136","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Ef það eru engar neikvæðar eða jákvæðar heiltölur, skila þeim sem null.     \/ af jákvæðum heilum tölum í röð röð lista.     \/ stærsta neikvæðra heilkorna og b er minnsta     \/ Búðu til hlutverk sem skilar pari (a, b), þar sem \"a\" er     \/\/ >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l))))\n    \/\/ Pair.with(Optional.of(Optional.empty()), Optional.of(1l))\n    \/\/ >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList())))\n    \/\/ Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n    \/\/ >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l))))\n    \/\/ Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {\n        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long> smallestPositive = Optional.empty();\n\n        for (Long num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n        \n        return Pair.with(largestNegative, smallestPositive);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l, (long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)-2l)))).equals(Optional.of(Pair.with(-2l, 1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)3l, (long)6l, (long)2l, (long)7l, (long)-7l)))).equals(Optional.of(Pair.with(-7l, 2l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)8l, (long)4l, (long)9l, (long)2l, (long)5l, (long)-9l)))).equals(Optional.of(Pair.with(-9l, 2l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList()))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l, (long)0l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)-100l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));\n    }\n\n}\n"},{"task_id":"HumanEval_138","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi     \/ Gera mat á hvort hægt sé að skrifa n sem sameiningu nákvæmlega fjögurra jákvæðra jafna talna     \/\/ >>> isEqualToSumEven((4l))\n    \/\/ (false)\n    \/\/ >>> isEqualToSumEven((6l))\n    \/\/ (false)\n    \/\/ >>> isEqualToSumEven((8l))\n    \/\/ (true)\n    public static boolean isEqualToSumEven(long n) {\n","canonical_solution":"\/\/ Check if the number n is at least 8 since the smallest sum of 4 positive even numbers is 2+2+2+2=8\n        if (n < 8) {\n            return false;\n        }\n\n        \/\/ If n is divisible by 2 and n\/2 is even, then n can be expressed as the sum of 4 positive even numbers\n        return n % 2 == 0;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_139","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ þar sem n > 0     \/ brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!     \/ Brasilíska factorial er skilgreind sem:     \/\/ >>> specialFactorial((4l))\n    \/\/ (288l)\n    \/\/ The function will receive an integer as input and should return the special\n    \/\/ factorial of this integer.\n    public static long specialFactorial(long n) {\n","canonical_solution":"import java.util.stream.LongStream;\n\npublic class Problem {\n    \/\/ The Brazilian factorial is defined as:\n    \/\/ brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    \/\/ where n > 0\n\n    public static long specialFactorial(long n) {\n        return LongStream.rangeClosed(1, n)\n                .map(Problem::factorial)\n                .reduce(1, (a, b) -> a * b);\n    }\n\n    private static long factorial(long num) {\n        return LongStream.rangeClosed(1, num)\n                .reduce(1, (a, b) -> a * b);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(specialFactorial(4)); \/\/ Output: 288\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_140","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ þá skipta öllum samfelldum rýmum út fyrir -     \/ og ef strengur hefur meira en 2 samfellda rými,     \/ Gefið texta strengur, skipta öllum rýmum í því með undirstrika,     \/\/ >>> fixSpaces((\" Example\"))\n    \/\/ (\"Example\")\n    \/\/ >>> fixSpaces((\" Example 1\"))\n    \/\/ (\"Example_1\")\n    \/\/ >>> fixSpaces((\" Example 2\"))\n    \/\/ (\"_Example_2\")\n    \/\/ >>> fixSpaces((\" Example 3\"))\n    \/\/ (\"_Example-3\")\n    public static String fixSpaces(String text) {\n","canonical_solution":"if (text == null || text.isEmpty()) {\n        return text;\n    }\n    \n    StringBuilder result = new StringBuilder();\n    int spaceCount = 0;\n    for (char c : text.toCharArray()) {\n        if (c == ' ') {\n            spaceCount++;\n        } else {\n            if (spaceCount == 1) {\n                result.append('_');\n            } else if (spaceCount > 1) {\n                result.append('-');\n            }\n            result.append(c);\n            spaceCount = 0;\n        }\n    }\n    \n    \/\/ Handle trailing spaces\n    if (spaceCount == 1) {\n        result.append('_');\n    } else if (spaceCount > 1) {\n        result.append('-');\n    }\n    \n    return result.toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"},{"task_id":"HumanEval_141","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ - Undirstrengur eftir punktinum ætti að vera einn af þessum: ['txt', 'exe', 'dll']     \/ latneska stafrófið ('a'-'z' og 'A'-'Z').     \/ - Undirstrengur fyrir punktinum ætti ekki að vera tómur, og það byrjar með bókstaf frá     \/ - Nafnið á skráinni inniheldur nákvæmlega einn punktur '.'     \/ - Nafnið á skráinni ætti ekki að vera meira en þrír tölustafir ('0'-'9').     \/ eru uppfylltir:     \/ Nafnið á skrá er talið gild ef og aðeins ef öll eftirfarandi skilyrði eru uppfyllt     \/ \"Já\" ef nafn skrá er rétt og skilar \"Nei\" annars.     \/ Búðu til hlutverk sem tekur streng sem táknar nafn skrá og skilar     \/\/ >>> fileNameCheck((\"example.txt\"))\n    \/\/ (\"Yes\")\n    \/\/ >>> fileNameCheck((\"1example.dll\"))\n    \/\/ (\"No\")\n    public static String fileNameCheck(String file_name) {\n","canonical_solution":"if (file_name == null || file_name.isEmpty()) {\n        return \"No\";\n    }\n    \n    \/\/ Split the file name into two parts: before and after the dot.\n    String[] parts = file_name.split(\"\\\\.\");\n    \n    \/\/ Check for exactly one dot and non-empty parts.\n    if (parts.length != 2 || parts[0].isEmpty() || parts[1].isEmpty()) {\n        return \"No\";\n    }\n    \n    \/\/ Check the extension validity.\n    Set<String> validExtensions = new HashSet<>(Arrays.asList(\"txt\", \"exe\", \"dll\"));\n    if (!validExtensions.contains(parts[1])) {\n        return \"No\";\n    }\n\n    \/\/ Check that the first character before the dot is a letter.\n    if (!Character.isLetter(parts[0].charAt(0))) {\n        return \"No\";\n    }\n\n    \/\/ Count the number of digits in the part before the dot.\n    int digitCount = 0;\n    for (char c : parts[0].toCharArray()) {\n        if (Character.isDigit(c)) {\n            digitCount++;\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n    }\n\n    \/\/ All conditions are satisfied, return \"Yes\".\n    return \"Yes\";\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\/this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"},{"task_id":"HumanEval_142","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ breyta færslum í röð listann sem vísitölur eru ekki margfaldur af 3 eða 4. hlutverkið skal þá skila summan af öllum færslum.     \/ margfaldur af 3 og mun þéttast heiltal inntak ef vísitölur er margfaldur af 4 og ekki margfaldur af 3.    \/ Þessi virkni tekur röð röð lista af heiltölum. Fyrir allar færslur í röð listann skal virkjunin kvadera heiltölur færslu ef vísitölu hennar er a     - Ég er ekki viss um ūađ.    \/\/ >>> lst\n    \/\/ (long)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))\n    \/\/ >>> lst\n    \/\/ (long)new ArrayList<Long>(Arrays.asList())\n    \/\/ >>> lst\n    \/\/ (long)new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l))\n    public static long sumSquares(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumSquares(ArrayList<Long> lst) {\n        long sum = 0;\n\n        for (int i = 0; i < lst.size(); i++) {\n            Long number = lst.get(i);\n            if (i % 3 == 0) {\n                sum += Math.pow(number, 2);\n            } else if (i % 4 == 0) {\n                sum += Math.pow(number, 3);\n            } else {\n                sum += number;\n            }\n        }\n\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (6l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l)))) == (14l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l)))) == (9l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l)))) == (-3l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)0l)))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l)))) == (-126l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-56l, (long)-99l, (long)1l, (long)0l, (long)-2l)))) == (3030l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)-1l)))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-16l, (long)-9l, (long)-2l, (long)36l, (long)36l, (long)26l, (long)-20l, (long)25l, (long)-40l, (long)20l, (long)-4l, (long)12l, (long)-26l, (long)35l, (long)37l)))) == (-14196l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)17l, (long)-1l, (long)-15l, (long)13l, (long)-1l, (long)14l, (long)-14l, (long)-12l, (long)-5l, (long)14l, (long)-14l, (long)6l, (long)13l, (long)11l, (long)16l, (long)16l, (long)4l, (long)10l)))) == (-1448l));\n    }\n\n}\n"},{"task_id":"HumanEval_143","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi 1:     \/ raðsetning orða í nýju strengnum ætti að vera sama og upprunalega.     \/ sem eru frummöl,     \/ og þú þarft að skila streng sem inniheldur orð frá upprunalegu setningu,     \/ setningin inniheldur nokkur orð sem eru aðskilin með rými,     Þú færð streng sem táknar setningu.    \/\/ >>> wordsInSentence((\"This is a test\"))\n    \/\/ (\"is\")\n    \/\/ Example 2:\n    \/\/ >>> wordsInSentence((\"lets go for swimming\"))\n    \/\/ (\"go for\")\n    \/\/ Constraints:\n    \/\/ * 1 <= len(sentence) <= 100\n    \/\/ * sentence contains only letters\n    public static String wordsInSentence(String sentence) {\n","canonical_solution":"public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> primeLengthWords = new ArrayList<>();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n        \n        return String.join(\" \", primeLengthWords);\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"},{"task_id":"HumanEval_144","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Þú getur gert ráð fyrir að x, og n eru gild brot, og hafa ekki núll sem nefndari.     \/ <tölumaður>\/<nefndarmaður> þar sem bæði tölumaður og nefndarmaður eru jákvæðar heil tölur.     Bæði x og n eru strengja sýnishorn af brotum og hafa eftirfarandi sniði,     \/ x * n. Funktiónin skilar sannri ef x * n er heil tala og fals     \/ Verkefni þitt er að framkvæma hlutverk sem einfaldar tjáninguna     \/\/ >>> simplify((\"1\/5\"), (\"5\/1\"))\n    \/\/ (true)\n    \/\/ >>> simplify((\"1\/6\"), (\"2\/1\"))\n    \/\/ (false)\n    \/\/ >>> simplify((\"7\/10\"), (\"10\/2\"))\n    \/\/ (false)\n    public static boolean simplify(String x, String n) {\n","canonical_solution":"public static boolean simplify(String x, String n) {\n    \/\/ Split the fractions into numerators and denominators\n    String[] fracX = x.split(\"\/\");\n    String[] fracN = n.split(\"\/\");\n    \n    \/\/ Parse numerators and denominators as integers\n    int numX = Integer.parseInt(fracX[0]);\n    int denX = Integer.parseInt(fracX[1]);\n    int numN = Integer.parseInt(fracN[0]);\n    int denN = Integer.parseInt(fracN[1]);\n\n    \/\/ Calculate the product of x * n\n    int productNumerator = numX * numN;\n    int productDenominator = denX * denN;\n\n    \/\/ Simplify the product fraction\n    int gcd = gcd(productNumerator, productDenominator);\n\n    \/\/ If the simplified denominator is 1, then it is a whole number\n    return productDenominator \/ gcd == 1;\n}\n\n\/\/ Helper method to calculate the greatest common divisor\nprivate static int gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    assert(simplify((\"1\/6\"), (\"2\/1\")) == (false));\n    assert(simplify((\"5\/1\"), (\"3\/1\")) == (true));\n    assert(simplify((\"7\/10\"), (\"10\/2\")) == (false));\n    assert(simplify((\"2\/10\"), (\"50\/10\")) == (true));\n    assert(simplify((\"7\/2\"), (\"4\/2\")) == (true));\n    assert(simplify((\"11\/6\"), (\"6\/1\")) == (true));\n    assert(simplify((\"2\/3\"), (\"5\/2\")) == (false));\n    assert(simplify((\"5\/2\"), (\"3\/5\")) == (false));\n    assert(simplify((\"2\/4\"), (\"8\/4\")) == (true));\n    assert(simplify((\"2\/4\"), (\"4\/2\")) == (true));\n    assert(simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    assert(simplify((\"1\/5\"), (\"1\/5\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_145","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ raða þeim eftir vísitölu í upprunalegum röð lista.     \/ Athugasemd: ef það eru nokkrir hlutir með svipuð töluhlutfall,     \/ í uppstigandi röð eftir uppsöfnun stafa þeirra.     \/ Skrifaðu hlutverk sem raðar upp gefinni röð lista af heilum tölum     \/\/ >>> orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    \/\/ >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n        return nums.stream()\n            .sorted(Comparator.comparingLong(Problem::sumOfDigits).thenComparingLong(nums::indexOf))\n            .collect(Collectors.toCollection(ArrayList::new));\n    }\n\n    private static long sumOfDigits(Long num) {\n        num = Math.abs(num);\n        long sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num \/= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 11L, -1L, -11L, -12L));\n        ArrayList<Long> result1 = orderByPoints(list1);\n        System.out.println(result1);\n\n        ArrayList<Long> list2 = new ArrayList<>();\n        ArrayList<Long> result2 = orderByPoints(list2);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l, (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l, (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l, (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_146","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ fyrsta og síðasta stafur tölunnar eru ólífrar (1, 3, 5, 7, 9).     \/ fjöldi þátta í röð röð lista sem eru meiri en 10 og bæði     \/ Skrifaðu hlutverk sem tekur röð röð lista af tölum sem inngangur og skilar     \/\/ >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l))))\n    \/\/ (1l)\n    \/\/ >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l))))\n    \/\/ (2l)\n    public static long specialFilter(ArrayList<Long> nums) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Function to check if a number has odd first and last digits\n    private static boolean hasOddFirstAndLastDigit(long num) {\n        num = Math.abs(num); \/\/ Consider absolute value to handle negative numbers\n\n        String numStr = Long.toString(num);\n\n        \/\/ Check first digit\n        char firstDigit = numStr.charAt(0);\n        if ((firstDigit - '0') % 2 == 0) {\n            return false;\n        }\n\n        \/\/ Check last digit\n        char lastDigit = numStr.charAt(numStr.length() - 1);\n        return (lastDigit - '0') % 2 != 0;\n    }\n\n    public static long specialFilter(ArrayList<Long> nums) {\n        return nums.stream()\n            .filter(num -> num > 10 && hasOddFirstAndLastDigit(num))\n            .count();\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> nums1 = new ArrayList<>(Arrays.asList(15L, -73L, 14L, -15L));\n        System.out.println(specialFilter(nums1)); \/\/ Output: 1\n\n        ArrayList<Long> nums2 = new ArrayList<>(Arrays.asList(33L, -2L, -3L, 45L, 21L, 109L));\n        System.out.println(specialFilter(nums2)); \/\/ Output: 2\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)5l, (long)-2l, (long)1l, (long)-5l)))) == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l)))) == (1l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l)))) == (2l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)43l, (long)-12l, (long)93l, (long)125l, (long)121l, (long)109l)))) == (4l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)71l, (long)-2l, (long)-33l, (long)75l, (long)21l, (long)19l)))) == (3l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_147","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ og a[i] + a[j] + a[k] er margfaldur af 3.     \/ Skila fjölda þrefaldra (a[i], a[j], a[k]) af a þar sem i < j < k,     \/ Fyrir hvert i (1 ≤ i ≤ n) er gildið af a[i] = i * i - i + 1.     \/ Þú færð jákvæða heilfjölda n. Þú verður að búa til heilfjölda röð röð lista a af lengd n.     \/\/ >>> getMaxTriples((5l))\n    \/\/ (1l)\n    \/\/ Explanation: \n    \/\/ a = [1, 3, 7, 13, 21]\n    \/\/ The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static long getMaxTriples(long n) {\n        \/\/ Generate the array list a based on the given formula\n        int[] a = new int[(int) n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n        \n        long count = 0;\n        \n        \/\/ Iterate through triple combinations and count those whose sum is a multiple of 3\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getMaxTriples(5)); \/\/ Example usage\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"},{"task_id":"HumanEval_148","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi     \/ eru ekki rétt nafn á plánetum.    \/ Funktiónin ætti að skila tómum pari ef planet1 eða planet2     - Nálægđ viđ sólina.    \/ staðsett á milli brautarsvæðis plánetu 1 og brautarsvæðis plánetu 2, flokkað eftir     \/ Hlutverkið ætti að skila pari sem inniheldur allar plánetur sem eru á braut     \/ Skrifaðu hlutverk sem tekur tvö reikistjörnunafn sem strengir planet1 og planet2.     - Úranus og Neptúnus.    \/ er Merkur, næsta er Venus, svo Jörðin, Mars, Júpíter, Satúrn,     Ūađ eru átta reikistjörnur í sólkerfinu okkar , þær sem eru nærri sólinni .    \/\/ >>> bf((\"Jupiter\"), (\"Neptune\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    \/\/ >>> bf((\"Earth\"), (\"Mercury\"))\n    \/\/ (ArrayList<String>(\"Venus\"))\n    \/\/ >>> bf((\"Mercury\"), (\"Uranus\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\npublic class Problem {\n    \/\/ There are eight planets in our solar system arranged by distance from the Sun\n    private static final List<String> PLANETS = Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    );\n\n    public static Pair<ArrayList<String>, ArrayList<String>> bf(String planet1, String planet2) {\n        \/\/ Validate planet names\n        if (!PLANETS.contains(planet1) || !PLANETS.contains(planet2)) {\n            return new Pair<>(new ArrayList<>(), new ArrayList<>());\n        }\n\n        \/\/ Find indices of the planets\n        int index1 = PLANETS.indexOf(planet1);\n        int index2 = PLANETS.indexOf(planet2);\n\n        \/\/ Sort the indices\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n\n        \/\/ Extract planets between the given two planets\n        ArrayList<String> planetsBetween = new ArrayList<>(PLANETS.subList(start + 1, end));\n\n        return new Pair<>(planetsBetween, new ArrayList<>());\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_149","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     Þú getur gert ráð fyrir að öll orð séu jafn löng.    \/ Hlutverkið ætti að skila röð röð lista af strengjum í röðinni.     \/ Ef tvö orð eru jafn löng, raða röð listann í stafrófsröð.     \/ ætti að skila röð listann flokkað eftir þeirri reglu.     \/ Skipunin á listann ætti að vera hækkandi með lengd hvers orðs, og þú     \/ og það getur innihaldið tvöföldun.     \/ Listi stafræna er alltaf stafrænn stafrænn listi af strengjum og aldrei stafrænn stafrænn listi af tölum,     \/ og skilar niðurstöðum matrix lista með flokkað röð,     \/ eyðir strengjum sem hafa ólíkar lengdir frá því,     \/ Skrifaðu hlutverk sem tekur við röð röð lista af strengjum sem skilmerki,     \/\/ >>> listSort((new ArrayList<String>(Arrays.asList((String)\"aa\", (String)\"a\", (String)\"aaa\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"aa\")))\n    \/\/ >>> listSort((new ArrayList<String>(Arrays.asList((String)\"ab\", (String)\"a\", (String)\"aaa\", (String)\"cd\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"ab\", (String)\"cd\")))\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n        \/\/ Remove strings with odd lengths\n        lst.removeIf(s -> s.length() % 2 != 0);\n\n        \/\/ Sort the remaining strings first by length, then alphabetically\n        lst.sort(Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder()));\n\n        return lst;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> test1 = new ArrayList<String>(Arrays.asList(\"aa\", \"a\", \"aaa\"));\n        ArrayList<String> test2 = new ArrayList<String>(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"));\n\n        System.out.println(sortedListSum(test1)); \/\/ Output: [aa]\n        System.out.println(sortedListSum(test2)); \/\/ Output: [ab, cd]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"aa\", (String)\"a\", (String)\"aaa\")))).equals((new ArrayList<String>(Arrays.asList((String)\"aa\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"school\", (String)\"AI\", (String)\"asdf\", (String)\"b\")))).equals((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"asdf\", (String)\"school\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"b\", (String)\"c\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"dcba\", (String)\"abcd\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList((String)\"abcd\", (String)\"dcba\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"ai\", (String)\"au\")))).equals((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"ai\", (String)\"au\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"b\", (String)\"c\", (String)\"c\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"aaaa\", (String)\"bbbb\", (String)\"dd\", (String)\"cc\")))).equals((new ArrayList<String>(Arrays.asList((String)\"cc\", (String)\"dd\", (String)\"aaaa\", (String)\"bbbb\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_150","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ frumtal og ætti að skila gildi y annars.     \/ Einfalt forrit sem ætti að skila gildi x ef n er     \/\/ >>> xOrY((7l), (34l), (12l))\n    \/\/ (34l)\n    \/\/ >>> xOrY((15l), (8l), (5l))\n    \/\/ (5l)\n    public static long xOrY(long n, long x, long y) {\n","canonical_solution":"import java.math.BigInteger;\n\npublic class Problem {\n    public static long xOrY(long n, long x, long y) {\n        \/\/ Check if n is prime\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private static boolean isPrime(long n) {\n        if (n < 2) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0) return false;\n\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(xOrY(7L, 34L, 12L));  \/\/ Output: 34\n        System.out.println(xOrY(15L, 8L, 5L));  \/\/ Output: 5\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(xOrY((7l), (34l), (12l)) == (34l));\n    assert(xOrY((15l), (8l), (5l)) == (5l));\n    assert(xOrY((3l), (33l), (5212l)) == (33l));\n    assert(xOrY((1259l), (3l), (52l)) == (3l));\n    assert(xOrY((7919l), (-1l), (12l)) == (-1l));\n    assert(xOrY((3609l), (1245l), (583l)) == (583l));\n    assert(xOrY((91l), (56l), (129l)) == (129l));\n    assert(xOrY((6l), (34l), (1234l)) == (1234l));\n    assert(xOrY((1l), (2l), (0l)) == (0l));\n    assert(xOrY((2l), (2l), (0l)) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_151","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ í röð listann sem eru ólíkir. Ignorera númer sem eru neikvæð eða ekki heiltal.     \/ Gefið röð röð lista af tölum, skila summan af ferðum tölur     \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)0l))))\n    \/\/ (10l)\n    \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)-1l, (long)-2l, (long)0l))))\n    \/\/ (0l)\n    \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)9l, (long)-2l))))\n    \/\/ (81l)\n    \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)0l))))\n    \/\/ (0l)\n    \/\/ If the input array list is empty, return 0.\n    public static long doubleTheDifference(ArrayList<Float> lst) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static long doubleTheDifference(ArrayList<Float> lst) {\n        long sum = 0;\n        \n        for (Float number : lst) {\n            if (number != null && number >= 0 && number % 1 == 0) {\n                long num = number.longValue();\n                if (num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        \n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList()))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)5.0f, (float)4.0f)))) == (25l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.1f, (float)0.2f, (float)0.3f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-10.0f, (float)-20.0f, (float)-30.0f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)-2.0f, (float)8.0f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.2f, (float)3.0f, (float)5.0f)))) == (34l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f)))) == (165l));\n    }\n\n}\n"},{"task_id":"HumanEval_152","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ dæmi:     \/ er gildið 0 og ef ekki er gildið algjörur munur á gát og einkunn.     \/ Endur skilar röð röð lista af sömu lengd sem gefur til kynna hversu langt frá hverjum giska var. Ef þeir hafa giskað rétt,     \/ Þú færð tvo röð röð lista af stigum og giska á jafnlengd, þar sem hver vísitölur sýnir samsvörun.     Verkefni ykkar er að meta hvort manneskja hafi giskað rétt á úrslit margra samræminga.    Ég er viss um ađ ūađ er vert ađ skýra ūađ og bera saman.    Tilvikin eru loksins þekkt.    Ég held ađ viđ munum öll eftir ūessari tilfinningu ūegar árangurinn af langþráđri    \/\/ >>> compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))\n    \/\/ >>> compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)5l, (long)0l, (long)0l, (long)0l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l, (long)0l, (long)-2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)1l, (long)0l, (long)0l, (long)6l)))\n    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Problem {\n    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> game1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L, 5L, 1L));\n        ArrayList<Long> guess1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L, 2L, -2L));\n        System.out.println(compare(game1, guess1));\n\n        ArrayList<Long> game2 = new ArrayList<>(Arrays.asList(0L, 5L, 0L, 0L, 0L, 4L));\n        ArrayList<Long> guess2 = new ArrayList<>(Arrays.asList(4L, 1L, 1L, 0L, 0L, -2L));\n        System.out.println(compare(game2, guess2));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)0l, (long)0l, (long)1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_153","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ (styrkurinn er -1).    \/ skilar \"Slices.SErviNGSliCes\" þar sem \"SErviNGSliCes\" er sterkasta útvíkkunin     \/ útfærslur: ['SErviNGSliCes', 'Cheese', 'StuFfed'] þá ættir þú að     \/ Til dæmis, ef þú ert gefið \"Slices\" sem bekk og röð röð lista af     \/ Veldu það sem kemur fyrst í röð listann.     Ef tvær eða fleiri útvíkkanir eru með sömu styrk, ættir þú að nota    \/ sniði: Klasafn. Sterkasta útfærslunafn.     \/ Þú ættir að finna sterkasta viðbót og skila streng í þessu     \/ í nafni viðbótarinnar er styrkurinn gefið af brotinu CAP - SM.     \/ stafir í nafni viðbótar og SM sé fjöldi litlu stafa     \/ styrkur viðbótarinnar er eftirfarandi: Látum CAP vera númerið í stórum bókstaf     \/ Framlengingarnar eru notaðar til að hlaða viðbótarflokka í flokkinn.    \/ Þú færð nafn á bekk (streng) og röð röð lista yfir viðbyggingar.     \/\/ >>> StrongestExtension((\"my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\", (String)\"CC\"))))\n    \/\/ (\"my_class.AA\")\n    public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n","canonical_solution":"public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n        String strongestExtension = \"\";\n        double maxStrength = Double.NEGATIVE_INFINITY;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            double strength = capCount - smCount;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"},{"task_id":"HumanEval_154","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Þú færð tvö orð. Þú þarft að skila sannari ef annað orð eða einhver af snúningum þess er undirstrengur í fyrsta orði     \/\/ >>> cycpatternCheck((\"abcd\"), (\"abd\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"hello\"), (\"ell\"))\n    \/\/ (true)\n    \/\/ >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    \/\/ (true)\n    \/\/ >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"himenss\"), (\"simen\"))\n    \/\/ (true)\n    public static boolean cycpatternCheck(String a, String b) {\n","canonical_solution":"public static boolean cycpatternCheck(String a, String b) {\n        if (b.length() > a.length()) {\n            return false;\n        }\n        \n        String doubledB = b + b;\n        \n        for (int i = 0; i < b.length(); i++) {\n            String rotation = doubledB.substring(i, i + b.length());\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(cycpatternCheck((\"xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\")) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"tinem\")) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_155","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Gefin heiltal. skila pari sem hefur fjölda jafnt og ójafn stafir.     \/\/ >>> evenOddCount((-12l))\n    \/\/ (Pair.with(1l, 1l))\n    \/\/ >>> evenOddCount((123l))\n    \/\/ (Pair.with(1l, 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n","canonical_solution":"long evenCount = 0;\n        long oddCount = 0;\n        num = Math.abs(num); \/\/ Handle negative numbers by taking the absolute value\n\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num \/= 10;\n        }\n\n        return Pair.with(evenCount, oddCount);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddCount(-12L)); \/\/ Output: (1, 1)\n        System.out.println(evenOddCount(123L)); \/\/ Output: (1, 2)\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"},{"task_id":"HumanEval_156","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     \/ Takmörkun: 1 <= num <= 1000     \/ og skila honum í litlum bókstaf.     \/ Gefin jákvæð heiltal, fá rómversk númer jafngildi sem streng,     \/\/ >>> intToMiniRoman((19l))\n    \/\/ (\"xix\")\n    \/\/ >>> intToMiniRoman((152l))\n    \/\/ (\"clii\")\n    \/\/ >>> intToMiniRoman((426l))\n    \/\/ (\"cdxxvi\")\n    public static String intToMiniRoman(long number) {\n","canonical_solution":"String[] thousands = {\"\", \"m\"};\n        String[] hundreds = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n        String[] tens = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        String[] units = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n        \n        String roman = \"\";\n\n        roman += thousands[(int)(number \/ 1000)];\n        number %= 1000;\n        \n        roman += hundreds[(int)(number \/ 100)];\n        number %= 100;\n        \n        roman += tens[(int)(number \/ 10)];\n        number %= 10;\n        \n        roman += units[(int)(number)];\n        \n        return roman;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n}\n"},{"task_id":"HumanEval_157","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     - 90 gráður.    Hægri þríhyrningur er þríhyrningur þar sem einn horn er rétti horn eða .    \/ hliðar mynda rétthorn þríhyrning, falskt annars.     \/ Gefin lengdir þriggja hliða þríhyrnings. Endurkoma sannur ef þrír     \/\/ >>> rightAngleTriangle((3l), (4l), (5l))\n    \/\/ (true)\n    \/\/ >>> rightAngleTriangle((1l), (2l), (3l))\n    \/\/ (false)\n    public static boolean rightAngleTriangle(long a, long b, long c) {\n","canonical_solution":"public class Problem {\n    \/\/ Given the lengths of the three sides of a triangle. Return true if the three\n    \/\/ sides form a right-angled triangle, false otherwise.\n    public static boolean rightAngleTriangle(long a, long b, long c) {\n        \/\/ Sort the sides so that c is always the largest one\n        long[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \/\/ Check the Pythagorean theorem: a^2 + b^2 == c^2\n        return (sides[0] * sides[0] + sides[1] * sides[1]) == sides[2] * sides[2];\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_158","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ stafir, skila þeim sem kemur fyrst í orðabókaröð.     Ef fleiri strengur hafa hámarksfjölda einstaka stafa     \/ Listið inniheldur mismunandi orð.    \/ Skrifaðu hlutverk sem samþykkir lista yfir strengi úr röð röð.     \/\/ >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\"))))\n    \/\/ (\"string\")\n    \/\/ >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"game\"))))\n    \/\/ (\"enam\")\n    \/\/ >>> findMax((new ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    \/\/ (\"aaaaaaa\")\n    public static String findMax(ArrayList<String> words) {\n","canonical_solution":"import java.util.*;\n\npublic class UniqueCharacterFinder {\n\n    public static String findMax(ArrayList<String> words) {\n        String maxWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            int uniqueCount = (int) word.chars().distinct().count();\n            if (uniqueCount > maxUniqueCount || (uniqueCount == maxUniqueCount && word.compareTo(maxWord) < 0)) {\n                maxUniqueCount = uniqueCount;\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(findMax(new ArrayList<>(Arrays.asList(\"name\", \"of\", \"string\")))); \/\/ Output: \"string\"\n        System.out.println(findMax(new ArrayList<>(Arrays.asList(\"name\", \"enam\", \"game\")))); \/\/ Output: \"enam\"\n        System.out.println(findMax(new ArrayList<>(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\")))); \/\/ Output: \"aaaaaaa\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\")))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\", (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"},{"task_id":"HumanEval_159","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi:     Ef það eru ekki næg gulrætur eftir, þá borðar þú allar gulræturnar sem eftir eru, en verður samt svöng.    \/ fjölda gulrætur eftir máltíðir þínar ]     \/ þú ættir að skila lista yfir [ heildarfjöldi gulrætur sem borðaðar eru eftir máltíðir,     En nú ūarftu ađ borða meiri gulrætur til ađ klára máltíđina.    Ūú ert svöng kanína og hefur ūegar borđađ nokkra gulrætur.    \/\/ >>> eat((5l), (6l), (10l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))\n    \/\/ >>> eat((4l), (8l), (9l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))\n    \/\/ >>> eat((1l), (10l), (10l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))\n    \/\/ >>> eat((2l), (11l), (5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))\n    \/\/ Variables:\n    \/\/ @number : integer\n    \/\/ the number of carrots that you have eaten.\n    \/\/ @need : integer\n    \/\/ the number of carrots that you need to eat.\n    \/\/ @remaining : integer\n    \/\/ the number of remaining carrots thet exist in stock\n    \/\/ Constrain:\n    \/\/ * 0 <= number <= 1000\n    \/\/ * 0 <= need <= 1000\n    \/\/ * 0 <= remaining <= 1000\n    \/\/ Have fun :)\n    public static ArrayList<Long> eat(long number, long need, long remaining) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<Long> eat(long number, long need, long remaining) {\n        long totalEaten = number;\n        long carrotsToEat = Math.min(need, remaining);\n        totalEaten += carrotsToEat;\n        long carrotsLeft = remaining - carrotsToEat;\n        \n        return new ArrayList<Long>(Arrays.asList(totalEaten, carrotsLeft));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_160","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Operator array list hefur að minnsta kosti einn rekstraraðila og operand array list hefur að minnsta kosti tvo operanda.     \/ Operandi er röð röð lista af non-negative heiltal.     \/ Lengd listans er jafn lengd listans mínus eitt.    \/ Athugasemd:     \/ => Niðurstaða = 9     \/ Niðurstaða = 2 + 3 * 4 - 5     \/ array array list = [2, 3, 4, 5]     \/ rekstraraðili['+', '*', '-']     \/ Dæmi:     \/ Stærð (**)     \/ Húsnæmi ( \/\/)     \/ Fjölföldun (*)     \/ Að draga ( - )     \/ Viðbót (+)     \/ Grunngerðir algebru:     \/ tjáningu og skila mati á þessu tjáningu.     \/ annar röð listinn er röð röð lista af heilum tölum. Notaðu tvær gefnar röð listana til að byggja algebric     \/ Gefin tveir röð listar aðgerðaraðili, og operand. Fyrsti röð listinn hefur grunn algebra aðgerðir, og     public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if (operand.isEmpty() || op.isEmpty() || operand.size() - 1 != op.size()) {\n            throw new IllegalArgumentException(\"Invalid input.\");\n        }\n\n        \/\/ Start with the first operand.\n        long result = operand.get(0);\n\n        \/\/ Apply the operators in sequence.\n        for (int i = 0; i < op.size(); i++) {\n            String operator = op.get(i);\n            long nextOperand = operand.get(i + 1);\n\n            switch (operator) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"\/\/\":\n                    if (nextOperand == 0) {\n                        throw new ArithmeticException(\"Division by zero.\");\n                    }\n                    result \/= nextOperand;\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, nextOperand);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> operators = new ArrayList<>();\n        operators.add(\"+\");\n        operators.add(\"*\");\n        operators.add(\"-\");\n\n        ArrayList<Long> operands = new ArrayList<>();\n        operands.add(2L);\n        operands.add(3L);\n        operands.add(4L);\n        operands.add(5L);\n\n        System.out.println(doAlgebra(operators, operands));  \/\/ Output: 9\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\/\/\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n"},{"task_id":"HumanEval_161","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dæmi     \/ Funktiónin ætti að skila niðurstöðunni streng.     Ef strengurinn inniheldur engar stafir, snúa við strengnum.    Annars er allt eins og er.    \/ ef s[i] er bókstaf, snúa máli sínu frá neðri til efri eða öfugt,     - Ūú færđ strenginn.    \/\/ >>> solve((\"1234\"))\n    \/\/ (\"4321\")\n    \/\/ >>> solve((\"ab\"))\n    \/\/ (\"AB\")\n    \/\/ >>> solve((\"#a@C\"))\n    \/\/ (\"#A@c\")\n    public static String solve(String s) {\n","canonical_solution":"public static String solve(String s) {\n        boolean hasLetters = false;\n        StringBuilder result = new StringBuilder();\n        \n        \/\/ Check if the string contains any letters and process the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n        \n        \/\/ If no letters are present, reverse the string\n        if (!hasLetters) {\n            result.reverse();\n        }\n        \n        return result.toString();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"},{"task_id":"HumanEval_162","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Ef 'text' er tómur strengur, skilar null.     \/ Gefið streng 'text', skila md5 hash jafngildi strengur.     \/\/ >>> stringToMd5((\"Hello world\"))\n    \/\/ Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")\n    public static Optional<String> stringToMd5(String text) {\n","canonical_solution":"import java.security.*;\nimport java.util.*;\n\nclass Problem {\n    public static Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n            for (byte b : messageDigest) {\n                sb.append(String.format(\"%02x\", b));\n            }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return Optional.empty();\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n    }\n\n}\n"},{"task_id":"HumanEval_163","nl":"isl_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Til dæmis:     \/ og b, í vaxandi röð.     \/ Gefin tvær jákvæðar heilstölur a og b, skila jafnt tölustafir milli a     \/\/ >>> generateIntegers((2l), (8l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))\n    \/\/ >>> generateIntegers((8l), (2l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))\n    \/\/ >>> generateIntegers((10l), (14l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> generateIntegers(long a, long b) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    \/\/ Given two positive integers a and b, return the even digits between a\n    \/\/ and b, in ascending order.\n    public static ArrayList<Long> generateIntegers(long a, long b) {\n        ArrayList<Long> result = new ArrayList<>();\n\n        \/\/ Ensure a is the smaller number and b is the larger number\n        long start = Math.min(a, b);\n        long end = Math.max(a, b);\n\n        \/\/ Find and add even numbers in the range [start, end] to the result list\n        for (long i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(generateIntegers(2, 8)); \/\/ [2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2)); \/\/ [2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); \/\/ []\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(generateIntegers((2l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((10l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((132l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((17l), (89l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"}]