[{"task_id":"HumanEval_0","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⴱⴰⵔⴰⵣ ⴰⴽⴽⵡ ⵉⵜⵜⵓⵙⵏⵎⴰⵍⴰⵏ.     \/ ⵔⵣⵣⵓ ⴳ ⵡⴰⵏⴰⵡ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵓⵙⵏⵙⵍ, ⵎⴽ ⴳⴰⵏ ⴽⵔⴰ ⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵏⴳⵔⵙⵏ ⵓⴳⴳⴰⵔ ⵏ     \/\/ >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))\n    \/\/ (false)\n    \/\/ >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))\n    \/\/ (true)\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n        if(numbers == null || numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Float> numbers1 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f));\n        System.out.println(hasCloseElements(numbers1, 0.5f)); \/\/ Output: false\n\n        ArrayList<Float> numbers2 = new ArrayList<>(Arrays.asList(1.0f, 2.8f, 3.0f, 4.0f, 5.0f, 2.0f));\n        System.out.println(hasCloseElements(numbers2, 0.3f)); \/\/ Output: true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.3f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.05f)) == (false));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.95f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.8f)) == (false));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.1f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (1.0f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (0.5f)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_1","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵓⵔ ⴷⴰ ⵏⵙⵙⴽⵜⵉ ⴽⵔⴰ ⵏ ⵡⴰⵏⵙⴰ ⴳ ⵜⵣⵍⵉⵜ ⵏ ⵓⵙⴽⵛⵎ.     \/ ⵜⴰⵔⵓⴱⴱⴰ ⵉⴱⴹⴰⵏ ⵜⵜⵓⵙⵎⵙⴰⵙⴰⵏ (ⵢⴰⵜⵜⵓⵢ ⵏ ⴽⵓ ⵜⴰⴱⵔⴰⵜⴰ ⵉⵕⵥⵎⵏ ⵉⵜⵜⵓⵙⵎⵓⵏ ⵙ ⵜⵖⴰⵔⴰⵙⵜ ⵉⵅⵚⵚⴰⵏ) ⴷ ⵓⵔ ⵜⵜⵓⵙⵎⵓⵏ ⴳ ⵢⴰⵏ     \/ ⴰⴷ ⵏⴱⴹⵓ ⵜⴰⵔⴰⴱⴱⵓⵜ ⴰⴷ ⵖⵔ ⵜⵉⴼⵔⵉⵙⵉⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴷ ⴰⴷ ⵏⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⴰⵔⵏ ⵏ ⵡⴰⵏⴰⵡ ⴰⴷ.     \/ ⴰⵛⴽⵛⵓⵎ ⵏ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵉⴳⴰ ⵢⴰⵏ ⵓⴽⵙⵉⵍ ⵉⵍⵍⴰ ⴳⵉⵙ ⴽⵉⴳⴰⵏ ⵏ ⵜⵔⵓⴱⴱⴰ ⵏ ⵜⴱⵕⴰⵏⴽⵉⵙⵉⵏ ⵉⵜⵜⵓⵙⵎⵓⵏⵏ. ⴰⵡⵜⵜⴰⵙ ⵏⵏⴽ ⵉⴳⴰ ⴰⴷ     \/\/ >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n        ArrayList<String> groups = new ArrayList<>();\n        int balance = 0;\n        StringBuilder currentGroup = new StringBuilder();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                balance++;\n                currentGroup.append(c);\n            } else if (c == ')') {\n                balance--;\n                currentGroup.append(c);\n            }\n\n            if (balance == 0 && currentGroup.length() > 0) {\n                groups.add(currentGroup.toString());\n                currentGroup.setLength(0);\n            }\n        }\n\n        return groups;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> result = separateParenGroups(\"( ) (( )) (( )( ))\");\n        System.out.println(result); \/\/ Output: [\"()\", \"(())\", \"(()())\"]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\")))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_2","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙⵓⵍⵍ ⵜⴰⴳⵣⵣⵓⵎⵜ ⵜⵉⵎⵔⴰⵡⵜ ⵏ ⵡⵓⵟⵟⵓⵏ.     \/ (ⴰⵛⵔⵓⵜ ⵏ ⵓⵛⵔⴰⵉ ⴰⵀⴰ ⵉⵎⵥⵥⵉⵢⵏ ⵙⴳ 1).     \/ ⴷ ⵓⴳⵣⵣⵓⵎ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ (ⴰⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵅⴰⵜⴰⵔ ⵉⵎⵥⵥⵉⵢⵏ ⵙⴳ ⵓⵟⵟⵓⵏ ⵉⵜⵜⵓⵙⴽⴰⵔⵏ) ⴷ ⵉⵎⴹⴰⵏ ⵉⵎⵔⴰⵡⵏ     \/ ⴰⵛⴽⵓ ⵏⵜⵜⴰ ⴷ ⴰⵎⴹⴰⵏ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⴰⵎⵙⵙⵓⴷⵓ, ⵏⵣⵎⵔ ⴰⴷ ⵏⵙⴱⴹ ⴳ     \/\/ >>> truncateNumber((3.5f))\n    \/\/ (0.5f)\n    public static float truncateNumber(float number) {\n","canonical_solution":"int integerPart = (int) number;\n        return number - integerPart;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_3","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴳ ⵓⵙⴰⵜⵉ ⴷⵖ, ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵙⴽⵔ ⵜⵎⵔⵙⵜ ⵜⵉⴷⵜ. ⵎⴽ ⵓⵔ ⵉⴳⵉ, ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵙⴽⵔ ⵜⵉⴽⵕⴹⵉ.     \/ ⴰⴱⴰⵍⴰⵏⵙ ⵏ ⵢⵣⵔⵓⵢ. ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏⵢⵜ ⵜⴰⵈⵈⴰⵍ ⴰ ⵉⵋⵉ ⵏ ⴰⵙ ⴰⵍⵈⵉⵎ ⵉⵉⵉⴰⵏ ⵏ ⴰⴱⴰⵍⴰⵏⵙ ⵏ ⴰⵛⵓⵏⵜⵉ ⵓⴰⵔ ⵢⵂⴰ ⵢⵣⵔⵓⵢ ⴷ    \/ ⴰⵜⵓⴰⴾⴼⴰ-ⴷ ⴰⵍⴾⴰⴷ ⵏ-ⴰⴾⴰⵍ ⵏ-ⴰⵛⴰⵆⵉⵍⴰⵏ ⵏ-ⴰⵣⴰⵗ ⴷ-ⴰⴾⴼⴰ ⵏ-ⴰⴾⴰⵍ ⴷⴰⵗ ⴰⵍⴾⴰⴷ ⵏ-ⴱⴰⵏⴾ ⵙ-ⴰⵙⵙⵉⵏⵜⴰ ⵙ    \/\/ >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (false)\n    \/\/ >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l))))\n    \/\/ (true)\n    public static boolean belowZero(ArrayList<Long> operations) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static boolean belowZero(ArrayList<Long> operations) {\n        long balance = 0;\n        for (Long operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> operations1 = new ArrayList<Long>(Arrays.asList(1L, 2L, 3L));\n        System.out.println(belowZero(operations1)); \/\/ false\n\n        ArrayList<Long> operations2 = new ArrayList<Long>(Arrays.asList(1L, 2L, -4L, 5L));\n        System.out.println(belowZero(operations2)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(belowZero((new ArrayList<Long>(Arrays.asList()))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-3l, (long)1l, (long)2l, (long)-3l)))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l, (long)6l)))) == (true));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-5l)))) == (true));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_4","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ MAD = ⴰⴱⵢⵔⴻⴷ ⵆ - ⵆ-ⵎⴻⴰⵏ ⵆ    \/ ⴰⵛⵔⵓⵜ ⴷ ⵜⵉⵜⴱⴰⵈⴻⵜ ⵜⴰⵏ ⴰⵎⵎⴰⵙ (ⵎⴰⵉⵏⴰ ⴷⴰⵗ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴻⵏ):     \/ Mean Absolute Deviation ⴷ ⴰⵎⵣⴰⵔⴰⵢ ⴰⵎⵏⴹⴰⵏ ⴰⵎⵏⴹⴰⵏ ⴳⵔ ⴽⵓ     \/ ⴰⵂⴰⵏⴷⴰⴶ ⵏ ⴰⵎⵎⴰⵙ ⵏ ⴷⴰⵜⴰ ⵙⵢⵜ ⵓⵢⵏ    \/ ⵉ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵓⴽⵛⵛⵓⵎ ⵏ ⵓⵙⵏⵙⵍ, ⵙⵙⵉⵟⵏ ⴰⵎⵏⵣⴰⵢ ⴰⵎⵙⵜⴰⵔ     \/\/ >>> meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f))))\n    \/\/ (1.0f)\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    \/\/ For a given array list of input numbers, calculate Mean Absolute Deviation\n    \/\/ around the mean of this dataset.\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"The list should not be null or empty\");\n        }\n        \n        \/\/ Calculate mean\n        float sum = 0.0f;\n        for (float num : numbers) {\n            sum += num;\n        }\n        float mean = sum \/ numbers.size();\n        \n        \/\/ Calculate Mean Absolute Deviation\n        float madSum = 0.0f;\n        for (float num : numbers) {\n            madSum += Math.abs(num - mean);\n        }\n        \n        return madSum \/ numbers.size();\n    }\n\n    \/\/ A main method to demonstrate functionality\n    public static void main(String[] args) {\n        ArrayList<Float> numbers = new ArrayList<Float>();\n        numbers.add(1.0f);\n        numbers.add(2.0f);\n        numbers.add(3.0f);\n        numbers.add(4.0f);\n\n        float mad = meanAbsoluteDeviation(numbers);\n        System.out.println(\"Mean Absolute Deviation: \" + mad);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))) == (1.2f));\n    }\n\n}\n"},{"task_id":"HumanEval_5","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵛⵛⵉⵍ ⵏ \"ⴷⵉⵍⵉⵎⵉⵜⵔ\" ⵏ ⵉⵎⴹⴰⵏ ⴳⵔ ⴽⵓ ⵙⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⴹⴼⴰⵕⵏ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵓⵙⴽⵛⵎ ∀numbers\"     \/\/ >>> intersperse((new ArrayList<Long>(Arrays.asList())), (4l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> intersperse((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (4l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)4l, (long)3l)))\n    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Insert a number 'delimeter' between every two consecutive elements of input array list `numbers'\n    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {\n        if (numbers == null || numbers.size() <= 1) {\n            return numbers;\n        }\n\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimeter);\n            }\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<Long> numbers1 = new ArrayList<>(Arrays.asList());\n        ArrayList<Long> result1 = intersperse(numbers1, 4L);\n        System.out.println(result1);\n\n        ArrayList<Long> numbers2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L));\n        ArrayList<Long> result2 = intersperse(numbers2, 4L);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(intersperse((new ArrayList<Long>(Arrays.asList())), (7l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)2l))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)6l, (long)8l, (long)3l, (long)8l, (long)2l)))));\n    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l, (long)2l, (long)2l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_6","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ (() (()) ⵖⵓⵔⵙ ⵙⵉⵏ ⵉⵙⵡⵉⵔⵏ ⵏ ⵓⵙⵙⴰⵔⵓ ⴳ ⵜⵉⵣⵉ ⵏⵏⴰ ⴳ ⵖⵓⵔ ((())) ⴽⵕⴰⴹ.     \/ ⵉ ⴽⵓ ⵜⴰⵔⴰⴱⴱⵓⵜ, ⵙⵙⵓⴼⵖ ⴰⵙⵡⵉⵔ ⵏ ⵓⵙⵎⵓⵏ ⵏ ⵜⴱⵕⴰⵏⴽⵉⵙⵜⵉⵏ.     \/ ⴰⵛⴽⵛⵓⵎ ⵏ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵉⴳⴰ ⵢⴰⵏ ⵓⴽⵙⵉⵍ ⵉⵙⵎⴷⵢⴰⵏ ⴽⵉⴳⴰⵏ ⵏ ⵜⵔⵓⴱⴱⴰ ⵉ ⵜⴱⵕⴰⵏⴽⵉⵙⵜⵉⵏ ⵉⵜⵜⵓⵙⴱⴹⴰⵏ ⵙ ⵉⵎⵣⴰⵔⴰⵢⵏ.     \/\/ >>> parseNestedParens((\"(()()) ((())) () ((())()())\"))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        String[] groups = paren_string.split(\" \");\n        ArrayList<Long> depths = new ArrayList<>();\n\n        for (String group : groups) {\n            long currentDepth = 0;\n            long maxDepth = 0;\n\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    if (currentDepth > maxDepth) {\n                        maxDepth = currentDepth;\n                    }\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n\n            depths.add(maxDepth);\n        }\n\n        return depths;\n    }\n\n    public static void main(String[] args) {\n        String input = \"(()()) ((())) () ((())()())\";\n        System.out.println(parseNestedParens(input));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_7","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵙⵉⴼⴼⵔ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⵏ ⵓⵙⵏⴼⵍ ⵏ ⵓⵙⴽⵛⵎ ⵖⴰⵙ ⵉ ⵡⵉⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⵉⵎⴷⵢⴰⵢⵏ     \/\/ >>> filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"cde\", (String)\"array\"))), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n","canonical_solution":"public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n        return strings.stream()\n                .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"prune\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_8","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⴳ ⵓⵎⴹⴰⵏ ⵏ ⵓⴽⵙⵓⵎ ⴰⵎⵥⵍⴰⵍ 0 ⴷ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⴳ ⵓⵢⴰⴼⵓ ⴰⵎⵥⵍⴰⵍ ⴰⵎⵥⵍⴰⵍ 1.     \/ ⵉ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵏⵓⵍⴼⵓ ⵜⴰⴱⵔⵣⴰ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⵜⵓⵏⵖⵉⵍⵜ ⴷ ⵓⵢⴰⴼⵓ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ.     \/\/ >>> sumProduct((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (Pair.with(0l, 1l))\n    \/\/ >>> sumProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (Pair.with(10l, 24l))\n    public static Pair<Long, Long> sumProduct(ArrayList<Long> numbers) {\n","canonical_solution":"long sum = 0L;\n        long product = 1L;\n        \n        for (Long number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        \n        return Pair.with(sum, product);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList()))).equals((Pair.with(0l, 1l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))).equals((Pair.with(3l, 1l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)100l, (long)0l)))).equals((Pair.with(100l, 0l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))).equals((Pair.with(15l, 105l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)10l)))).equals((Pair.with(10l, 10l))));\n    }\n\n}\n"},{"task_id":"HumanEval_9","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴷⴰⵗ ⵜⴰⵔⵜⵉⵜ.     \/ ⵙⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴼⵖ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵇⵇⵓⵔⵏ ⵉⵜⵜⵢⴰⴼⴰⵏ ⴰⵔ ⵜⵉⵣⵉ ⵏⵏⴰ     \/\/ >>> rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)3l, (long)4l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    \/\/ From a given array list of integers, generate an array list of rolling maximum element found until given moment\n    \/\/ in the sequence.\n    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (numbers == null || numbers.isEmpty()) {\n            return result;\n        }\n        long currentMax = Long.MIN_VALUE;\n        for (Long number : numbers) {\n            currentMax = Math.max(currentMax, number);\n            result.add(currentMax);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> numbers = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 2L, 3L, 4L, 2L));\n        ArrayList<Long> rollingMaxNumbers = rollingMax(numbers);\n        System.out.println(rollingMaxNumbers); \/\/ Output: [1, 2, 3, 3, 3, 4, 4]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_10","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ - ⴰⵂⴰⵏⴷⴰⴶ ⵏ ⴰⵎⵉⵏⴷⵉ ⵏ ⵙⵜⵔⵉⵏⴶ ⵓⴰ ⵙ ⵉⵋⵋⴰ ⵢⴼⵢⵙ ⵏ ⵙⵜⵔⵉⵏⴶ ⵓⴰ ⴷⴰⵜⴰⵏ ⵙⵓⴼⴼⵉⵆ ⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉⵛ    \/ - ⵙⴰⴼⵉ ⵜⴰⵣⵣⵉⴳⵣⵜ ⵏ ⵓⴷⴼⴼⵉⵔ ⵏ ⵜⵣⵍⵉⵜ ⵏ ⵜⵣⵍⵉⵜ ⵏⵏⴰ ⵉⴳⴰⵏ ⴱⴰⵍⵉⵏⴷⵔⵓⵎ.     \/ ⵜⴰⵏⵏⴰ ⵏ ⴰⵍⴳⵓⵔⵉⵜⵎ ⵜⴳⴰ ⵜⵓⵏⵙⵉⴼⵜ:     \/ⴰⴼⵉ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵜ ⵜⴰⵔⵓⵙⵜ ⵏⵏⴰ ⵉⵙⵙⵏⵜⵉ ⵙ ⵜⵉⴼⵉⵏⴰⵖ ⵏⵏⴰ ⵉⵜⵜⵓⴼⴽⴰⵏ.     \/\/ >>> makePalindrome((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> makePalindrome((\"cat\"))\n    \/\/ (\"catac\")\n    \/\/ >>> makePalindrome((\"cata\"))\n    \/\/ (\"catac\")\n    public static String makePalindrome(String string) {\n","canonical_solution":"public static String makePalindrome(String string) {\n    if (string == null || string.length() <= 1) {\n        return string;\n    }\n\n    \/\/ Function to check if a given string is a palindrome\n    boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left++) != s.charAt(right--)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    \/\/ Find longest palindromic suffix\n    int n = string.length();\n    for (int i = n; i > 0; i--) {\n        if (isPalindrome(string.substring(0, i))) {\n            StringBuilder sb = new StringBuilder(string.substring(i));\n            sb.reverse();\n            return string + sb.toString();\n        }\n    }\n    \n    return string; \/\/ fallback should not be reached\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"},{"task_id":"HumanEval_11","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵛⵛⵉⴾⵉⵍ ⵏ ⴱⵉⵏⴰⵔⵉ XOR ⴼⴰⵍ ⵉⴾⵉⴰⴷⴰⵏ ⵓⵉⵏ ⵜⵓⵍⴰⵙ ⵢⵔⵜⴰⵉ ⴰⵍⴼⴰⵉⴷⴰ ⵙⵓⵏⴷ ⵙⵜⵔⵉⵏⴶ    \/ ⵉⵏⴱⵓⵜ ⴳⴰⵏ ⵙⵉⵏ ⵉⵙⵉⴹⵏⵏ a ⴷ b ⴳ ⵍⵍⴰⵏ 1 ⴷ 0 ⵅⵙ.     \/\/ >>> stringXor((\"010\"), (\"110\"))\n    \/\/ (\"100\")\n    public static String stringXor(String a, String b) {\n","canonical_solution":"if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Input strings must have the same length.\");\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            \n            if (charA != '0' && charA != '1' || charB != '0' && charB != '1') {\n                throw new IllegalArgumentException(\"Input strings must consist only of '0' and '1'.\");\n            }\n            \n            \/\/ Perform XOR operation and append to the result\n            result.append(charA == charB ? '0' : '1');\n        }\n        \n        return result.toString();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"},{"task_id":"HumanEval_12","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ strings ⵏ ⵜⵉⵖⵣⵉ ⵉⵎⴰⵏⵏ. ⴰⵔ ⵉⵜⵜⵔⴰⵔ null ⴳ ⵡⴰⴷⴷⴰⴷ ⵏ ⵡⴰⵔⵔⴰ ⵏ ⵓⵎⵙⴰⵙⴰ ⵏ ⵓⴽⵛⵛⵓⵎ ⵉⴳⴰⵏ ⵡⴰⵅⵏⵏⴰⵏ.     \/ ⴳ ⵓⵎⵙⴳⵔⴰⵡ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵉⴼⵉⵏⴰⵖ, ⵙⵙⴽⵛⵎ ⵓⵡⵜⵜⵓ ⴰⵎⵇⵔⴰⵏ. ⵙⵙⴽⵛⵎ ⵓⵡⵜⵜⵓ ⴰⵎⵣⵡⴰⵔⵓ ⴳ ⵡⴰⴷⴷⴰⴷ ⵏ ⴽⵉⴳⴰⵏ ⵏ     \/\/ >>> longest((new ArrayList<String>(Arrays.asList())))\n    \/\/ Optional.empty()\n    \/\/ >>> longest((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\"))))\n    \/\/ Optional.of(\"a\")\n    \/\/ >>> longest((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"bb\", (String)\"ccc\"))))\n    \/\/ Optional.of(\"ccc\")\n    public static Optional<String> longest(ArrayList<String> strings) {\n","canonical_solution":"if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length)\n                .thenComparing(Comparator.naturalOrder()));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"},{"task_id":"HumanEval_13","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵓⵎⵟⵟⵓ ⴰⵎⵛⵛⵓⵔⴰⵔ ⴰⵅⴰⵜⴰⵔ ⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ a ⴷ b     \/\/ >>> greatestCommonDivisor((3l), (5l))\n    \/\/ (1l)\n    \/\/ >>> greatestCommonDivisor((25l), (15l))\n    \/\/ (5l)\n    public static long greatestCommonDivisor(long a, long b) {\n","canonical_solution":"if (b == 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_14","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ ⵏ ⴽⵓⵍⵍⵓ ⵉⵙⵏⴼⴰⵔⵏ ⵙⴳ ⵓⵥⵥⵉⵢⵏ ⴰⵔ ⵓⵣⵣⵉⵏⵏ ⵏ ⵜⵣⵍⵉⵜ ⵏ ⵓⵙⴽⵛⵎ     \/\/ >>> allPrefixes((\"abc\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"ab\", (String)\"abc\")))\n    public static ArrayList<String> allPrefixes(String string) {\n","canonical_solution":"ArrayList<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_15","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵢⴰⵏ ⵓⵙⵏⴼⵍⵓⵍ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵜⵜⵓⵙⵏⴱⴹⵏ ⵙ ⵓⵙⴰⵢⵔⴰⵔ ⵙⴳ 0 ⴰⵔ n ⴳ ⵉⵍⵍⴰ.     \/\/ >>> stringSequence((0l))\n    \/\/ (\"0\")\n    \/\/ >>> stringSequence((5l))\n    \/\/ (\"0 1 2 3 4 5\")\n    public static String stringSequence(long n) {\n","canonical_solution":"import java.util.stream.Collectors;\nimport java.util.stream.LongStream;\n\nclass Problem {\n    public static String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n)\n                         .mapToObj(Long::toString)\n                         .collect(Collectors.joining(\" \"));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"},{"task_id":"HumanEval_16","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵜⵉⴳ ⵏ ⵜⵉⴼⵉⵏⴰⵖ, ⵙⵉⴼⵔⴽ ⵎⵏⵛⵜⴰ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ (ⵡⴰⵍⴰ ⵏ ⵡⴰⴷⴷⴰⴷ) ⵉⵍⵍⴰ ⴳ     \/\/ >>> countDistinctCharacters((\"xyzXYZ\"))\n    \/\/ (3l)\n    \/\/ >>> countDistinctCharacters((\"Jerry\"))\n    \/\/ (4l)\n    public static long countDistinctCharacters(String string) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    \/\/ Given a string, find out how many distinct characters (regardless of case) does it consist of\n    public static long countDistinctCharacters(String string) {\n        \/\/ Convert the string to lowercase to ensure case-insensitivity\n        String lowerCaseString = string.toLowerCase();\n        \/\/ Use a HashSet to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        \n        \/\/ Iterate over each character in the string and add it to the set\n        for (char c : lowerCaseString.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        \n        \/\/ Return the size of the set, i.e., the number of distinct characters\n        return uniqueChars.size();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\n}\n"},{"task_id":"HumanEval_17","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \" 'ⵉⴷⵉⴷⴻⵛⴻ \" ' - ⴰⴾⴰⵜⴰⴱ ⵏ ⴰⴾⴾⵓⵣ, ⵉⴾⴾⴰ ⵜⴰⴾⴾⴰⵛⵜ    \"oⴶⴰⵛⴰⴷⴻ\" - ⴰⵛⵂⵔⵓⵜ ⵏ ⵏⵓⵜⴻ, ⵉⴾⴾⴰⵏ ⵙⴰⵏⴰⵜⴰⵜ ⵉⴾⵉⴰⵏ    \"o\" - ⴰⴾⴰⵜⴰⴱ ⵓⴰ ⵎⴰⵈⴰⵔⴰⵏ, ⵉⴾⴾⴰ 4 ⵉⴾⵉⵜⴱⴰⵏ    \/ ⴰⵜⴰⵂⴰⵏ ⵜⴰⵍⴰⵗⵉⴱⴰⵜ:    \/ ⵓⴰⵔ ⵢⵈⵢⵍ ⵓⴰ ⴷⴰⵔⴰⵜ.    \/ ⵜⴰⵖⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⴼⵙⵉ ⵜⵉⴼⵉⵏⴰⵖ ⴰⴷ ⴷ ⴰⴷ ⵜⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵏⴰ ⵉⵣⴷⵉⵏ ⴷ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⴽⵙⵙⵉ ⵏⵏⴰ ⵙ ⴷⴰ ⵜⵜⴳⴳ ⴽⵓ ⵢⴰⵏ     \/ ⴰⵛⴽⵛⵓⵎ ⵏ ⵜⴰⵣⵣⵓⵍⵜ ⴰⴷ ⵉⴳⴰ ⵢⴰⵏ ⵓⴽⵕⴰⴹ ⵉⵙⵎⴷⵢⴰⵏ ⵉ ⵜⵓⵏⵏⵓⵜⵉⵏ ⵏ ⵓⵥⴰⵡⴰⵏ ⵙ ⵜⵍⵖⴰ ⵉⵥⵍⵉⵏ ⵏ ASCII.     \/\/ >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l, (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static ArrayList<Long> parseMusic(String music_string) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> beats = new ArrayList<>();\n        String[] notes = music_string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4L);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2L);\n            } else if (note.equals(\".|\")) {\n                beats.add(1L);\n            }\n        }\n        \n        return beats;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_18","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵜⴼⴼⵉ ⵎⵛⵜⴰ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⵉⵖⵢ ⴰⴷ ⵢⵉⵍⵉ ⵓⵙⵏⴼⵍⵓⵍ ⵏ ⵡⴰⵏⴰⵡ ⴳ ⵡⴰⵏⴰⵡ ⴰⵎⵣⵡⴰⵔⵓ.     \/\/ >>> howManyTimes((\"\"), (\"a\"))\n    \/\/ (0l)\n    \/\/ >>> howManyTimes((\"aaa\"), (\"a\"))\n    \/\/ (3l)\n    \/\/ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    \/\/ (3l)\n    public static long howManyTimes(String string, String substring) {\n","canonical_solution":"public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_19","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴼⵉⵏⴰⵖ ⵙ ⵡⵓⵟⵟⵓⵏ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙⴳ ⵡⵉⵏ ⵉⵎⵥⵥⵉⵏ ⴰⵔ ⵡⵉⵏ ⵉⵎⵇⵇⵔⴰⵏ     \/ ⵉⵙⵜⴰⵢⵏ ⵉⵣⵔⴼⴰⵏ ⴳⴰⵏ \"ⵙⵢⴰ\", \"ⵢⴰⵏ\", \" ⵙⵉⵏ\", \" ⴽⵕⴰⴹ\", \" ⴽⴽⵓⵥ\", \" ⵙⵎⵎⵓⵙ\", \" ⵚⴹⵉⵚ\", \" ⵙⴰ\", \" ⵜⴰⵎ\" ⴷ \" ⵜⵥⴰ\".     \/ ⴰⵛⴽⵛⵓⵎ ⵉⴳⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵜⵜⵓⵙⵏⴽⴰⴷⵏ ⵙ ⵓⵙⴰⵢⵔⴰⵔ ⵙⴳ \"ⴰⵎⵢⴰ\" ⴰⵔ \"ⵜⵥⴰ\".     \/\/ >>> sortNumbers((\"three one five\"))\n    \/\/ (\"one three five\")\n    public static String sortNumbers(String numbers) {\n","canonical_solution":"public static String sortNumbers(String numbers) {\n        List<String> numeralList = Arrays.asList(numbers.split(\" \"));\n        Map<String, Integer> numeralToValue = new HashMap<>();\n        numeralToValue.put(\"zero\", 0);\n        numeralToValue.put(\"one\", 1);\n        numeralToValue.put(\"two\", 2);\n        numeralToValue.put(\"three\", 3);\n        numeralToValue.put(\"four\", 4);\n        numeralToValue.put(\"five\", 5);\n        numeralToValue.put(\"six\", 6);\n        numeralToValue.put(\"seven\", 7);\n        numeralToValue.put(\"eight\", 8);\n        numeralToValue.put(\"nine\", 9);\n\n        numeralList.sort(Comparator.comparingInt(numeralToValue::get));\n\n        return String.join(\" \", numeralList);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n"},{"task_id":"HumanEval_20","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⴹⵏⵉⵏ ⴷ ⵓⵙⵎⵓⵜⵜⴳ ⵏⵏⵙⵏ ⵙ ⵓⵙⵓⴷⵙ (ⵉⴹ ⴰⵎⵥⵥⵢⴰⵏ, ⵓⵟⵟⵓⵏ ⴰⵎⵇⵔⴰⵏ).    \/ ⵙⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵓⵙⵏⵙⵍ (ⵙ ⵜⵉⵖⵣⵉ ⵏⵏⵙ ⵙⵏⴰⵜ) ⵉⵙⵜⴰⵢ ⴷ ⵢⴰⴽⴽⴰ ⵙⵉⵏ ⵏⵏⴰ ⵢⵓⴳⵔⵏ ⴽⵓ ⵢⴰⵏ     \/\/ >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    \/\/ (Pair.with(2.0f, 2.2f))\n    \/\/ >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    \/\/ (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two numbers.\");\n        }\n\n        Collections.sort(numbers);\n        float minDiff = Float.MAX_VALUE;\n        Pair<Float, Float> closestPair = null;\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            float current = numbers.get(i);\n            float next = numbers.get(i + 1);\n            float diff = Math.abs(current - next);\n\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = Pair.with(current, next);\n            }\n        }\n\n        return closestPair;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Float> list1 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 2.2f));\n        ArrayList<Float> list2 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 2.0f));\n        \n        System.out.println(findClosestElements(list1)); \/\/ Output: (2.0, 2.2)\n        System.out.println(findClosestElements(list2)); \/\/ Output: (2.0, 2.0)\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(3.9f, 4.0f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f)))).equals((Pair.with(5.0f, 5.9f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(2.0f, 2.2f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f)))).equals((Pair.with(2.0f, 2.0f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f)))).equals((Pair.with(2.2f, 3.1f))));\n    }\n\n}\n"},{"task_id":"HumanEval_21","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵖⵢⴰⵏ ⴰⴷ ⵉⴳ ⵓⵎⴹⴰⵏ ⴰⵎⵥⵥⵢⴰⵏ 0 ⴷ ⴰⵎⴹⴰⵏ ⴰⵎⵇⵔⴰⵏ 1     \/ ⴷⴰⵔⴰⵜ ⴰⴷⴷⴰⴱⵓ ⵏ ⵡⵓⵟⵟⵓⵏ (ⵙ ⵙⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵓⴷⵖⴰⵔ), ⵙⵙⵎⵔⵙⵏ ⵜⴰⵙⵏⴼⵍⵜ ⵜⴰⵣⵔⵉⴼⵜ ⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ,     \/\/ >>> rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f))))\n    \/\/ (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Given array list of numbers (of at least two elements), apply a linear transform to that array list,\n    \/\/ such that the smallest number will become 0 and the largest will become 1\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Input list must contain at least two elements.\");\n        }\n        \n        float min = Float.MAX_VALUE;\n        float max = Float.MIN_VALUE;\n        \n        for (float num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        \n        ArrayList<Float> rescaled = new ArrayList<>(numbers.size());\n        for (float num : numbers) {\n            float normalized = (num - min) \/ (max - min);\n            rescaled.add(normalized);\n        }\n        \n        return rescaled;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<Float> numbers = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f));\n        ArrayList<Float> normalizedNumbers = rescaleToUnit(numbers);\n        System.out.println(normalizedNumbers); \/\/ Output should be [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"},{"task_id":"HumanEval_22","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵙⴼⵉⵍⵍ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⵏ ⴽⵔⴰ ⵏ ⵡⴰⵜⵉⴳⵏ ⵏ ⵊⴰⴱⴰⵜⵓⵏ ⵖⴰⵙ ⵉ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ     \/\/ >>> filterIntegers((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)3.14f, (String)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    \/\/ >>> filterIntegers((new ArrayList<Object>(Arrays.asList(1l, 2l, 3l, \"abc\", new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList())))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Filter given array list of any javathon values only for integers\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Long) {\n                result.add((Long) value);\n            }\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(4l, new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList()), 23.2f, 9l, \"adasd\")))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)9l)))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(3l, \"c\", 3l, 3l, \"a\", \"b\")))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_23","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵣⵣⵓⵣⵔ ⵏ ⵓⴽⵛⵛⵓⵎ ⵏ ⵜⵉⴼⵉⵏⴰⵖ     \/\/ >>> stringLength((\"\"))\n    \/\/ (0l)\n    \/\/ >>> stringLength((\"abc\"))\n    \/\/ (3l)\n    public static long strlen(String string) {\n","canonical_solution":"\/\/ Check if the string is null\n        if (string == null) {\n            return 0L;\n        }\n        \/\/ Return the length of the string\n        return (long) string.length();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"},{"task_id":"HumanEval_24","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵉ ⵓⵟⵟⵓⵏ n ⵉⵜⵜⵓⴼⴽⴰⵏ, ⴷⴼⵔ ⴰⵟⵟⵓⵏ ⴰⵎⵇⵔⴰⵏ ⵏⵏⴰ ⵉⵜⵜⴱⴹⵓⵏ n ⵙ ⵜⴰⵖⴹⴼⵜ, ⴷ ⵉⵎⵥⵥⵉⵏ ⵙⴳ n     \/\/ >>> largestDivisor((15l))\n    \/\/ (5l)\n    public static long largestDivisor(long n) {\n","canonical_solution":"if (n <= 1) {\n            throw new IllegalArgumentException(\"n must be greater than 1\");\n        }\n        for (long i = n \/ 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; \/\/ This line is actually never reached if the function is used correctly\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"},{"task_id":"HumanEval_25","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⴽⵛⵛⵓⵎ ⴰⵎⵎ ⵓⵢⴰ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴰⴽⴽⵡ     \/ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⵜⵜⵓⵙⴽⴰⵔ ⴽⵓ ⵢⴰⵏ ⴳ ⵉⵎⴳⴳⵉⵜⵏ ⵙ ⵓⵎⴹⴰⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⵉⵣⴷⵉⵏ ⴷ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⵉⵜⵜⵓⴳⴰ ⴳ ⵓⵙⴼⵙⵔ.     \/ ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴳⴳⵉⵜⵏ ⵉⵎⵣⵡⵓⵔⴰ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⵙⴳ ⵉⵎⵥⵥⵢⴰⵏ ⴰⵔ ⵉⵎⵇⵇⵔⴰⵏ.     \/\/ >>> factorize((8l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n    \/\/ >>> factorize((25l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l)))\n    \/\/ >>> factorize((70l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Long> factorize(long n) {\n        ArrayList<Long> factors = new ArrayList<>();\n        for (long factor = 2; factor * factor <= n; factor++) {\n            while (n % factor == 0) {\n                factors.add(factor);\n                n \/= factor;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        \/\/ Example usage\n        System.out.println(factorize(8l));   \/\/ Output: [2, 2, 2]\n        System.out.println(factorize(25l));  \/\/ Output: [5, 5]\n        System.out.println(factorize(70l));  \/\/ Output: [2, 5, 7]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_26","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⴶ-ⴰⴷ ⴰⵍⴾⴰⴷ ⵏ ⵂⴰⵔⴰⵜⴰⵏ ⵓⵉ ⴰⵂⴰⵏⵢⵏ ⴰⵂⴰⵏⴰⵉ ⵓⵍⴰⵂⴰⵏ ⵉⴷ ⵓⴰ ⵉⵋⵋⴰⵏ ⴷⴰⵗ ⵢⵏⴼⵓ    \/ ⵙⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴼⵖ ⴽⵓⵍⵍⵓ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⵉⵜⵜⵊⵕⵓⵏ ⵓⴳⴳⴰⵔ ⵏ ⵢⴰⵜ ⵜⵉⴽⴽⵍⵜ.     \/\/ >>> removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)4l)))\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\n\npublic class Problem {\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {\n        \/\/ Create a HashSet to keep track of duplicates\n        HashSet<Long> seen = new HashSet<>();\n        \/\/ Create a list for results\n        ArrayList<Long> result = new ArrayList<>();\n        \/\/ Create a temporary HashSet to track elements that are counted more than once\n        HashSet<Long> duplicates = new HashSet<>();\n\n        for (Long number : numbers) {\n            if (seen.contains(number)) {\n                \/\/ If already seen and not added to duplicates, add to duplicates\n                duplicates.add(number);\n            } else {\n                \/\/ Mark this number as seen\n                seen.add(number);\n            }\n        }\n\n        for (Long number : numbers) {\n            \/\/ Add only those numbers to result which are not in duplicates\n            if (!duplicates.contains(number)) {\n                result.add(number);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> input = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 2L, 4L));\n        ArrayList<Long> output = removeDuplicates(input);\n        System.out.println(output);  \/\/ Output: [1, 3, 4]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l, (long)3l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_27","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵉ ⵜⵔⴳⴰⵍⵜ ⵉⵜⵜⵓⵙⵏⴽⴰⴷⵏ, ⵙⵙⵓⵜⵍ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵥⵥⵉⵏ ⵙ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵇⵔⴰⵏⵏ ⴷ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵇⵔⴰⵏⵏ ⵙ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵥⵥⵉⵏⵏ.     \/\/ >>> flipCase((\"Hello\"))\n    \/\/ (\"hELLO\")\n    public static String flipCase(String string) {\n","canonical_solution":"StringBuilder flipped = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                flipped.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                flipped.append(Character.toUpperCase(c));\n            } else {\n                flipped.append(c);\n            }\n        }\n        return flipped.toString();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"},{"task_id":"HumanEval_28","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵙⵎⵓⵏ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⴳ ⵢⴰⵏ ⵓⵙⴽⴽⵉⵍ     \/\/ >>> concatenate((new ArrayList<String>(Arrays.asList())))\n    \/\/ (\"\")\n    \/\/ >>> concatenate((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\"))))\n    \/\/ (\"abc\")\n    public static String concatenate(ArrayList<String> strings) {\n","canonical_solution":"return String.join(\"\", strings);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(concatenate((new ArrayList<String>(Arrays.asList()))).equals((\"\")));\n    assert(concatenate((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals((\"xyz\")));\n    assert(concatenate((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\", (String)\"w\", (String)\"k\")))).equals((\"xyzwk\")));\n    }\n\n}\n"},{"task_id":"HumanEval_29","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵙⵉⴼⴼⵍ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⵏ ⵓⵙⵏⴼⵍ ⵏ ⵓⵙⴽⵛⵎ ⵖⴰⵙ ⵉ ⵡⵉⵏⵏⴰ ⵉⵙⵙⵏⵜⵉⵢⵏ ⵙ ⵢⴰⵜ ⵜⵣⵡⴰⵔⵜ ⵉⵜⵜⵓⵙⵏⵎⴰⵍⴰⵏ.     \/\/ >>> filterByPrefix((new ArrayList<String>(Arrays.asList())), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"cde\", (String)\"array\"))), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String> strings, String prefix) {\n","canonical_solution":"return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toCollection(ArrayList::new));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_30","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⵉⵎⴹⴰⵏ ⵉⵎⵏⵖⵓⴷⵏ ⵖⴰⵙ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉ.     \/\/ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l, (long)5l, (long)6l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)6l)))\n    \/\/ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public static ArrayList<Long> getPositive(ArrayList<Long> l) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    \/\/ Return only positive numbers in the array list.\n    public static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long> positives = new ArrayList<>();\n        for (Long number : l) {\n            if (number > 0) {\n                positives.add(number);\n            }\n        }\n        return positives;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_31","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⴰⵍⵙ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵣⵡⴰⵔⵓ, ⴷ ⵜⵉⵔⵡⵉ ⵎⴽ ⵓⵔ ⵉⴳⵉ.     \/\/ >>> isPrime((6l))\n    \/\/ (false)\n    \/\/ >>> isPrime((101l))\n    \/\/ (true)\n    \/\/ >>> isPrime((11l))\n    \/\/ (true)\n    \/\/ >>> isPrime((13441l))\n    \/\/ (true)\n    \/\/ >>> isPrime((61l))\n    \/\/ (true)\n    \/\/ >>> isPrime((4l))\n    \/\/ (false)\n    \/\/ >>> isPrime((1l))\n    \/\/ (false)\n    public static boolean isPrime(long n) {\n","canonical_solution":"if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_33","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵉ ⵜⵉⵏⴷⵉⵜⵉⵏ ⵏ ⵉⵙⵓⵎⴰⵔ ⵏ ⵉⵙⵓⵎⴰⵔ ⵏ l, ⵎⴰⴽⴰ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ.    \/ l' ⵉⵎⵣⴰⵔⴰⵢⵏ ⴷ l ⴳ ⵉⵙⵏⵎⴰⵍⵏ ⵏⵏⴰ ⵓⵔ ⵉⵜⵜⵓⵣⵟⵟⴰⵢⵏ ⵙ ⴽⵕⴰⴹ, ⵎⴰⵛⴰ ⵜⵉⵏⵉⴳⵉⵏ ⵏⵏⵙ ⴳ ⵉⵙⵏⵎⴰⵍⵏ ⵏⵏⴰ ⵉⵜⵜⵓⵣⵟⵟⴰⵢⵏ ⵙ ⴽⵕⴰⴹ ⴳⴰⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ     \/ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⴷⴰ ⵜⵙⵙⵎⵔⴰⵙ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴰⵍⴳⴰⵎⵜ l ⴰⵔ ⵜⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴰⵍⴳⴰⵎⵜ l' ⵣⵓⵏⴷ ⵎⴰⵙ     \/\/ >>> sortThird((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    \/\/ >>> sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))\n    public static ArrayList<Long> sortThird(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<Long> sortThird(ArrayList<Long> l) {\n        \/\/ Create a new list to store elements at indices divisible by three\n        ArrayList<Long> extracted = new ArrayList<>();\n\n        \/\/ Extract the elements at indices divisible by three\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                extracted.add(l.get(i));\n            }\n        }\n\n        \/\/ Sort the extracted elements\n        Collections.sort(extracted);\n\n        \/\/ Create a new list to store the resultant elements\n        ArrayList<Long> result = new ArrayList<>(l);\n\n        \/\/ Replace the original elements at indices divisible by three with the sorted ones\n        int sortedIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, extracted.get(sortedIndex));\n                sortedIndex++;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<Long>(Arrays.asList(1L, 2L, 3L));\n        ArrayList<Long> result1 = sortThird(list1);\n        System.out.println(result1);\n\n        ArrayList<Long> list2 = new ArrayList<Long>(Arrays.asList(5L, 6L, 3L, 4L, 8L, 9L, 2L));\n        ArrayList<Long> result2 = sortThird(list2);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l, (long)1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_34","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵥⵍⴰⵢⵏ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ     \/\/ >>> unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))\n    public static ArrayList<Long> unique(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Return sorted unique elements in an array array list\n    public static ArrayList<Long> unique(ArrayList<Long> l) {\n        return l.stream()\n                .distinct()\n                .sorted()\n                .collect(Collectors.toCollection(ArrayList::new));\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> inputList = new ArrayList<>(Arrays.asList(5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L));\n        ArrayList<Long> uniqueSortedList = unique(inputList);\n        System.out.println(uniqueSortedList);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_35","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵇⵇⵓⵔⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ.     \/\/ >>> maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (3l)\n    \/\/ >>> maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n    \/\/ (123l)\n    public static long maxElement(ArrayList<Long> l) {\n","canonical_solution":"public static long maxElement(ArrayList<Long> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        long max = Long.MIN_VALUE;\n        for (Long num : l) {\n            max = Math.max(max, num);\n        }\n        return max;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)124l, (long)1l, (long)-10l)))) == (124l));\n    }\n\n}\n"},{"task_id":"HumanEval_36","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⵉⵜⵜⴼⴼⵖ ⵓⵟⵟⵓⵏ 7 ⴳ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵥⵥⵉⵏ ⵏⵏⴰ ⵓⵔ ⵢⴰⴽⵙⵓⵍⵏ ⵙ 11 ⵏⵖⴷ 13.     \/\/ >>> fizzBuzz((50l))\n    \/\/ (0l)\n    \/\/ >>> fizzBuzz((78l))\n    \/\/ (2l)\n    \/\/ >>> fizzBuzz((79l))\n    \/\/ (3l)\n    public static long fizzBuzz(long n) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    public static long fizzBuzz(long n) {\n        long count = 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += countSevens(i);\n            }\n        }\n        return count;\n    }\n\n    private static int countSevens(long number) {\n        int count = 0;\n        while (number > 0) {\n            if (number % 10 == 7) {\n                count++;\n            }\n            number \/= 10;\n        }\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"},{"task_id":"HumanEval_37","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵡⴰⵜⵉⴳⵏ ⵏ ⵉⵙⵖⵏⴰⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵏ l, ⵎⴰⴽⴰ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ.     \/ ⵍ' ⴷⴰ ⵢⴰⴽⵣ ⵉ ⵍ ⴳ ⵉⵙⵏⴼⴰⵔⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ, ⵎⴰⵛⴰ ⵜⵉⵜⵉⴳⵉⵏ ⵏⵏⵙ ⴳ ⵉⵙⵏⴼⴰⵔⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳⴰⵏⵜ ⵉⵎⵣⴰⵔⴰⵢⵏ     \/ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⴷⴰ ⵜⵙⵙⵎⵔⴰⵙ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴰⵍⴳⴰⵎⵜ l ⴰⵔ ⵜⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴰⵍⴳⴰⵎⵜ l' ⵣⵓⵏⴷ ⵎⴰⵙ     \/\/ >>> sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    \/\/ >>> sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)5l, (long)4l)))\n    public static ArrayList<Long> sortEven(ArrayList<Long> l) {\n","canonical_solution":"public static ArrayList<Long> sortEven(ArrayList<Long> l) {\n        ArrayList<Long> evenIndicesValues = new ArrayList<>();\n        \n        \/\/ Collect values from even indices\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndicesValues.add(l.get(i));\n        }\n        \n        \/\/ Sort values collected from even indices\n        Collections.sort(evenIndicesValues);\n        \n        \/\/ Create an iterator for sorted even values\n        Iterator<Long> iterator = evenIndicesValues.iterator();\n        \n        \/\/ Form the result list by setting sorted even values and copying odd values\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                \/\/ Set sorted values at even indices\n                l.set(i, iterator.next());\n            }\n            \/\/ Values at odd indices remain the same\n        }\n        \n        return l;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))));\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)5l, (long)0l, (long)9l, (long)1l, (long)123l)))));\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)-12l, (long)4l, (long)23l, (long)2l, (long)3l, (long)11l, (long)12l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-12l, (long)8l, (long)3l, (long)4l, (long)5l, (long)2l, (long)12l, (long)11l, (long)23l, (long)-10l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_39","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ prime_fib ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⵓⵟⵟⵓⵏ ⵏ ⵜⵉⵙ-ⵏⵏⴰ ⵉⴳⴰⵏ ⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵉ, ⴷ ⵉⴳⴰ ⴰⵡⴷ ⴰⵎⵣⵡⴰⵔⵓ.     \/\/ >>> primeFib((1l))\n    \/\/ (2l)\n    \/\/ >>> primeFib((2l))\n    \/\/ (3l)\n    \/\/ >>> primeFib((3l))\n    \/\/ (5l)\n    \/\/ >>> primeFib((4l))\n    \/\/ (13l)\n    \/\/ >>> primeFib((5l))\n    \/\/ (89l)\n    public static long primeFib(long n) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    \/\/ Function to check if a number is prime\n    public static boolean isPrime(long num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true; \/\/ 2 and 3 are prime\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (long i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n\n    \/\/ Function to get the n-th Fibonacci number that is also prime\n    public static long primeFib(long n) {\n        long count = 0;\n        long a = 0;\n        long b = 1;\n        \n        while (true) {\n            long next = a + b;\n            a = b;\n            b = next;\n            \n            if (isPrime(next)) {\n                count++;\n                if (count == n) {\n                    return next;\n                }\n            }\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(primeFib((1l)) == (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n    assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n    assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n"},{"task_id":"HumanEval_40","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵜⵉⴳ ⵏ ⵓⵎⵢⴰ, ⴷ ⵜⵉⵔⴳⵉ ⴳ ⵡⴰⴷⴷⴰⴷ ⵢⴰⴹⵏ.     \/ ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⵜⵉⴷⵜ ⵎⴽ ⵍⵍⴰⵏ ⴽⵕⴰⴹ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ ⵏⵏⴰ     \/triple_sum_to_zero ⴷⴰ ⵉⵜⵜⴰⵎⵥ ⴰⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴰⵎⵎ ⵓⴽⵛⵛⵓⵎ.    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    \/\/ (false)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    \/\/ (true)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    \/\/ (false)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    \/\/ (true)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    \/\/ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n        Collections.sort(l);\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            int left = i + 1, right = n - 1;\n            while (left < right) {\n                long sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_41","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⴷⴰ ⵜⵙⵙⵓⴼⵖ ⵓⵟⵟⵓⵏ ⵏ ⵉⵎⵏⵖⵉ ⴰⴷ.     \/ ⴷⴰⵗ ⵜⴰⴱⴰⵔⴰⵜ ⵜⴰⵏ ⵏⴰⵙⴰⵏ ⵛⵓⵏⴷ ⵓⴰⵔ ⴰⴾⴰⵛⴰⵎⴰⵏ    \/ ⵎⴰⵛⴰ, ⵜⴰⴽⴰⵔⴱⵓⵏⴰⵜ ⴰⵂⴰⵏ ⵜⵉ ⵜⵉⵜⴱⴰⵈⵈⴰ ⴰⵂⵓⵙⴾⴰⵜⵏⴻⵏ; ⵙ ⴰⴼⴰⵂⴰⵎ, ⴰⴾⴰⵉⴰⴷⴰⵏ ⵂⴰⵔⴾⵓⴾ     \/ⴰⴶⵓⴷ ⵓⴰ ⵜⴰⴾⴰⵍ ⵜⴰⴱⴰⵔⴰⵜ ⵜⴰⴾⴰⵍⴰⵜ ⵙ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ ⵓⴰⵏ ⴰⵛⵂⵔⵓⵜ    ⵆⴰⵙ ⴰⴾⴰⵉⴰⴷⴰⵏ ⴼⵓⴾ ⵉⴾⵉⴰⴷⴰⵏ ⵙ ⵜⴰⵣⵓⵋⵉⵛⵂⵜ ⵉⵉⵉⴰⵜ, ⵙⴰⵏⴰⵜⴰⵜⴰⵜ ⵉⴾⵉⴰⴷⴰⵏ ⴰⵈⵈⴰⵍⴰⵏ ⴰ ⵉⴾⵔⴰⵛⵂⴰⵏ    ⵆⴰⵙⴰⵏ ⵙⴰⵏⴰⵜⴰⵜⴰⵜ ⵏⴰⴾⴰⵍ ⵜⴰⵏⵜⴰ ⵙⴰⵏⴰⵜⴰⵜⴰⵜ ⴰⵈⴰⵍⴰⵏ ⴰⵉⴾⵏⴰⵏ ⴷⴰⵗ ⴰⵋⴰⵎⴰ ⴰⵏ ⴾⴰⵍⴰ    \/n ⵏ ⵍⴽⴰⵔⴰⵜⵏ ⴷⴰ ⵙⵡⵓⴷⴷⵓⵏ ⵙ ⵓⵥⵍⵎⴰⴹ ⵙ ⵓⵣⵔⴼ; ⴳ ⵢⴰⵜ ⵜⵉⵣⵉ, ⵜⴰⵔⴰⴱⴱⵓⵜ ⵏ ⵍⴰⵢⵢ ⵏ ⵍⴽⴰⵔⴰⵜⵏ     \/ⴰⵍⵎⵉⴷ ⴰⴱⵔⵉⴷ ⵢⵈⴰⵍ ⴰⴱⴰⵔⴰ ⵓⴰⵔⵢⵏ ⴰⴾⵉⵏⴰⵙ ⴰⴶⵓⴷ ⵓⴰⵔⵢⵏ ⵉⴾⵏⴰⵏ.    public static long carRaceCollision(long n) {\n","canonical_solution":"public static long carRaceCollision(long n) {\n    \/\/ Each car moving left to right will collide with each car moving right to left\n    \/\/ as they are infinitely far apart initially and moving towards each other.\n    \/\/ Therefore, the total number of collisions will be n * n.\n    return n * n;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"},{"task_id":"HumanEval_42","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ ⵙ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵜⵜⵓⵙⵏⴼⵍⵏ ⵙ 1.     \/\/ >>> incrList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))\n    \/\/ >>> incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))\n    public static ArrayList<Long> incrList(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Return array list with elements incremented by 1.\n    public static ArrayList<Long> incrList(ArrayList<Long> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toCollection(ArrayList::new));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(incrList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(incrList((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l)))));\n    assert(incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)2l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)3l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_43","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵜⵉⴳ ⵏ ⵓⵎⵢⴰ, ⴷ ⵜⵉⵔⴳⵉ ⴳ ⵡⴰⴷⴷⴰⴷ ⵢⴰⴹⵏ.     \/ ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⵜⵉⴷⵜ ⵎⴽ ⵍⵍⴰⵏ ⵙⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ ⵏⵏⴰ     \/ pairs_sum_to_zero ⴷⴰ ⵉⵜⵜⴰⵎⵥ ⴰⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴰⵎⵎ ⵓⴽⵛⵛⵓⵎ.     \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    \/\/ (true)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    \/\/ (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.HashSet;\n\nclass Problem {\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<>();\n\n        for (Long num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        \n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)30l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)31l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)30l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)31l)))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_44","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵉⵎⴹⴰⵏ ⵏ ⵜⵔⵙⴰⵍ ⴷ ⵉⴷⵔⵓⵙⵏ ⵙⴳ 10.     \/ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵜⵉⴼⵔⵜ ⵏ ⵜⵉⴼⵔⵜ ⴷⴼⴼⵉⵔ ⵏ ⵓⵙⵏⴼⵍ.     \/ ⵙⵏⴼⵍ ⵜⴰⵙⵉⵍⴰ ⵏ ⵓⵟⵟⵓⵏ ⵏ ⵓⵟⵟⵓⵏ ⵏ ⵓⴽⵛⵛⵓⵎ x ⵙ ⵜⴰⵙⵉⵍⴰ.     \/\/ >>> changeBase((8l), (3l))\n    \/\/ (\"22\")\n    \/\/ >>> changeBase((8l), (2l))\n    \/\/ (\"1000\")\n    \/\/ >>> changeBase((7l), (2l))\n    \/\/ (\"111\")\n    public static String changeBase(long x, long base) {\n","canonical_solution":"StringBuilder result = new StringBuilder();\n    while (x > 0) {\n        result.append(x % base);\n        x \/= base;\n    }\n    return result.reverse().toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"},{"task_id":"HumanEval_45","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⴱⴰⵔⴰⵣ ⵏ ⵜⴰⵙⴰ ⴷ ⵢⵉⴳⵔ ⵏ ⵓⵙⵙⴰⵖⵓⵍ ⴰⵎⵇⵔⴰⵏ ⵉ ⵜⵔⵉⴳⴰⵍⵜ.     \/\/ >>> triangleArea((5l), (3l))\n    \/\/ (7.5f)\n    public static float triangleArea(long a, long h) {\n","canonical_solution":"public class Problem {\n    \/\/ Given length of a side and height, return area for a triangle.\n    \/\/ >>> triangleArea((5l), (3l))\n    \/\/ (7.5f)\n    public static float triangleArea(long a, long h) {\n        return (a * h) \/ 2.0f;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(5l, 3l)); \/\/ Output: 7.5\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(triangleArea((5l), (3l)) == (7.5f));\n    assert(triangleArea((2l), (2l)) == (2.0f));\n    assert(triangleArea((10l), (8l)) == (40.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_46","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵃⵎⴰ ⴰⴷ ⵜⵙⵙⵉⵟⵏ ⵉⴼⵔⴷⵉⵙ ⵏ ⵡⵉⵙⵙ n ⵏ ⵓⵙⵏⵙⵍ ⵏ ⵡⵓⵟⵟⵓⵏ fib4. ⵓⵔ ⵜⵙⵙⵎⵔⴰⵙ ⵜⵉⵔⵔⴰ.     \/ fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).    \/ fib4(3) -> 0     \/ fib4(2) -> 2     \/ fib4(1) -> 0     \/ fib4(0) -> 0     \/ ⵜⴰⵍⵖⴰ ⵏ ⵓⵟⵟⵓⵏ ⵏ Fib4 ⵜⴳⴰ ⵜⴰⵍⵖⴰ ⵢⴰⴽⵙⵓⵍⵏ ⴷ ⵜⴰⵍⵖⴰ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵏⵎⵍⵏ ⵙ ⵓⵎⴽ ⴰⴷ:     \/\/ >>> fib4((5l))\n    \/\/ (4l)\n    \/\/ >>> fib4((6l))\n    \/\/ (8l)\n    \/\/ >>> fib4((7l))\n    \/\/ (14l)\n    public static long fib4(long n) {\n","canonical_solution":"public static long fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return d;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"},{"task_id":"HumanEval_47","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵡⴰⵎⵎⴰⵙ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉ l.     \/\/ >>> median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\n    \/\/ (float)3l\n    \/\/ >>> median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l))))\n    \/\/ (15.0f)\n    public static float median(ArrayList<Long> l) {\n","canonical_solution":"Collections.sort(l);\n    int n = l.size();\n    if (n % 2 == 1) {\n        return l.get(n \/ 2);\n    } else {\n        return (float)(l.get(n \/ 2 - 1) + l.get(n \/ 2)) \/ 2;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l, (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"},{"task_id":"HumanEval_48","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴷⴰ ⵉⵜⵜⵉⵔⵉ ⵎⴰⵙⴷ ⵜⴰⵡⴰⵍⵜ ⵉⵜⵜⵓⴼⴽⴰⵏ ⵜⴳⴰ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵜ     \/\/ >>> isPalindrome((\"\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"aba\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"aaaaa\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"zbcd\"))\n    \/\/ (false)\n    public static boolean isPalindrome(String text) {\n","canonical_solution":"if (text == null) {\n            return false;\n        }\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_49","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙⵓⵍ 2^n ⴱ (ⴰⴷ ⵏⵙⵙⴽⵜⵉ ⵙ ⵡⵓⵟⵟⵓⵏ).    \/\/ >>> modp((3l), (5l))\n    \/\/ (3l)\n    \/\/ >>> modp((1101l), (101l))\n    \/\/ (2l)\n    \/\/ >>> modp((0l), (101l))\n    \/\/ (1l)\n    \/\/ >>> modp((3l), (11l))\n    \/\/ (8l)\n    \/\/ >>> modp((100l), (101l))\n    \/\/ (1l)\n    public static long modp(long n, long p) {\n","canonical_solution":"import java.math.BigInteger;\n\npublic class Problem {\n    \/\/ Return 2^n modulo p (be aware of numerics).\n    public static long modp(long n, long p) {\n        BigInteger base = BigInteger.valueOf(2);\n        BigInteger exponent = BigInteger.valueOf(n);\n        BigInteger modulo = BigInteger.valueOf(p);\n        \n        return base.modPow(exponent, modulo).longValue();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(modp(3L, 5L)); \/\/ Output: 3\n        System.out.println(modp(1101L, 101L)); \/\/ Output: 2\n        System.out.println(modp(0L, 101L)); \/\/ Output: 1\n        System.out.println(modp(3L, 11L)); \/\/ Output: 8\n        System.out.println(modp(100L, 101L)); \/\/ Output: 1\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_51","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ remove_vowels ⵜⴳⴰ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵜⵉⴼⵉⵏⴰⵖ ⴰⵔ ⵉⵜⵜⴰⵊⵊⴰ ⵜⵉⴼⵉⵏⴰⵖ ⴱⵍⴰ ⵜⵉⴼⵉⵏⴰⵖ.     \/\/ >>> removeVowels((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> removeVowels((\"abcdef\"))\n    \/\/ (\"bcdf\")\n    \/\/ >>> removeVowels((\"aaaaa\"))\n    \/\/ (\"\")\n    \/\/ >>> removeVowels((\"aaBAA\"))\n    \/\/ (\"B\")\n    \/\/ >>> removeVowels((\"zbcd\"))\n    \/\/ (\"zbcd\")\n    public static String removeVowels(String text) {\n","canonical_solution":"public static String removeVowels(String text) {\n        return text.replaceAll(\"(?i)[aeiou]\", \"\");\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(removeVowels((\"\")).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\")));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n"},{"task_id":"HumanEval_52","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⵔⴰⵔ true ⵎⴽ ⴳⴰⵏ ⵉⵎⴹⴰⵏ ⴰⴽⴽⵡ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉ l ⴷⴷⴰⵡ ⵏ ⵓⴽⵜⵜⴰⵢ t.     \/\/ >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l))\n    \/\/ (true)\n    \/\/ >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l))\n    \/\/ (false)\n    public static boolean belowThreshold(ArrayList<Long> l, long t) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Return true if all numbers in the array list l are below threshold t.\n    public static boolean belowThreshold(ArrayList<Long> l, long t) {\n        for (Long num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(belowThreshold(new ArrayList<Long>(Arrays.asList(1L, 2L, 4L, 10L)), 100L)); \/\/ true\n        System.out.println(belowThreshold(new ArrayList<Long>(Arrays.asList(1L, 20L, 4L, 10L)), 5L));  \/\/ false\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l)) == (false));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (21l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (22l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (11l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (10l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_53","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔⴰⵎ ⴰⴷ ⵏⴰⵔⵓ ⵙⵉⵏ ⵡⵓⵟⵟⵓⵏ x ⴷ y     \/\/ >>> add((2l), (3l))\n    \/\/ (5l)\n    \/\/ >>> add((5l), (7l))\n    \/\/ (12l)\n    public static long add(long x, long y) {\n","canonical_solution":"return x + y;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(add(2L, 3L)); \/\/ Outputs: 5\n        System.out.println(add(5L, 7L)); \/\/ Outputs: 12\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_54","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⴾⵉⴰⴷ ⴰⵙ ⵉⵍⴰⵏ ⵉⵙⵉⵎⴰⵏ ⵓⵉ ⵉⵉⵉⴰⴷ ⵓⵍⴰⵂⵏⵢⵏ     \/\/ >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    \/\/ (false)\n    \/\/ >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    \/\/ (false)\n    \/\/ >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    \/\/ (false)\n    public static boolean sameChars(String s0, String s1) {\n","canonical_solution":"public static boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = s0.chars().mapToObj(e -> (char)e).collect(Collectors.toSet());\n        Set<Character> set1 = s1.chars().mapToObj(e -> (char)e).collect(Collectors.toSet());\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); \/\/ true\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); \/\/ true\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); \/\/ true\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); \/\/ false\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); \/\/ false\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); \/\/ false\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_55","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙⵏⵓⵍⴼⵓ ⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵛⵉ ⵡⵉⵙⵙ ⵏ.     \/\/ >>> fib((10l))\n    \/\/ (55l)\n    \/\/ >>> fib((1l))\n    \/\/ (1l)\n    \/\/ >>> fib((8l))\n    \/\/ (21l)\n    public static long fib(long n) {\n","canonical_solution":"if (n <= 1) {\n            return n;\n        }\n        long a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"},{"task_id":"HumanEval_56","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⴰⵍⵙ true ⵎⴽ ⴷⴰⵔ ⴽⵓ ⵜⴰⴳⴳⴰⵢⵜ ⵏ ⵓⵕⵥⵥⵓⵎ ⵜⴰⴳⴳⴰⵢⵜ ⵏ ⵓⵇⵇⵏ.     \/ ⴱⵔⴰⴽⵉⵜⵙ ⵉⴳⴰ ⵢⴰⵏ ⵓⵡⵜⵜⵓ ⵏ \"<\" ⴷ \">\".     \/\/ >>> correctBracketing((\"<\"))\n    \/\/ (false)\n    \/\/ >>> correctBracketing((\"<>\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"<<><>>\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"><<>\"))\n    \/\/ (false)\n    public static boolean correctBracketing(String brackets) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n\n    public static boolean correctBracketing(String brackets) {\n        int balance = 0;\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                balance++;\n            } else if (ch == '>') {\n                balance--;\n                if (balance < 0) {\n                    return false;\n                }\n            }\n        }\n        return balance == 0;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_57","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Return true ⵉⴳⴰⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵓⵙⵏⵖⵍ ⴷⴰ ⵙⵙⵓⴷⵓⵏ ⵙ ⵜⴰⵍⵖⴰ ⵜⴰⵔⵡⵡⴰⵏⵜ ⵏⵖⴷ ⵜⴰⵔⵡⴰⵏⵜ.     \/\/ >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))))\n    \/\/ (true)\n    \/\/ >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n    \/\/ (false)\n    \/\/ >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))))\n    \/\/ (true)\n    public static boolean monotonic(ArrayList<Long> l) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    \/\/ Return true if array list elements are monotonically increasing or decreasing.\n    public static boolean monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return true;\n        }\n        \n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 4L, 20L));\n        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(1L, 20L, 4L, 10L));\n        ArrayList<Long> list3 = new ArrayList<>(Arrays.asList(4L, 1L, 0L, -10L));\n\n        System.out.println(monotonic(list1)); \/\/ true\n        System.out.println(monotonic(list2)); \/\/ false\n        System.out.println(monotonic(list3)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_58","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵢⵉⵡⵏⵏ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵉ ⵙⵏⴰⵜ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵉⵎⵙⴷⴷⵉ.     \/\/ >>> common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))\n    \/\/ >>> common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {\n","canonical_solution":"import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Problem {\n    \/\/ Return sorted unique common elements for two array lists.\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        \n        \/\/ Retain only the elements in set1 that are contained in set2\n        set1.retainAll(set2);\n        \n        \/\/ Convert to list and sort\n        ArrayList<Long> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_59","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙⵓⵍⵍ ⴰⵎⴳⴳⴰⵔⵓ ⴰⵎⵣⵡⴰⵔⵓ ⴰⵅⴰⵜⴰⵔ ⵏ n. ⵏⵙⵙⵉⵏ ⵉⵙ n > 1 ⴷ ⵓⵔ ⵉⴳⵉ ⴰⵎⵣⵡⴰⵔⵓ.     \/\/ >>> largestPrimeFactor((13195l))\n    \/\/ (29l)\n    \/\/ >>> largestPrimeFactor((2048l))\n    \/\/ (2l)\n    public static long largestPrimeFactor(long n) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long largestPrimeFactor(long n) {\n        long largestFactor = 1;\n        long factor = 2;\n        \n        \/\/ Test for number of 2s that divide n\n        while (n % factor == 0) {\n            largestFactor = factor;\n            n \/= factor;\n        }\n        \n        \/\/ n must be odd at this point, so a skip of 2 is used (i.e., 3, 5, 7, 9, ...)\n        factor = 3;\n        while (factor * factor <= n) {\n            while (n % factor == 0) {\n                largestFactor = factor;\n                n \/= factor;\n            }\n            factor += 2;\n        }\n        \n        \/\/ This condition checks if n is a prime number greater than 2\n        if (n > 2) {\n            largestFactor = n;\n        }\n        \n        return largestFactor;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"},{"task_id":"HumanEval_60","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ sum_to_n ⵜⴳⴰ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵎⵓⵏⵏ ⵉⵎⴹⴰⵏ ⵙⴳ 1 ⴰⵔ n.     \/\/ >>> sumToN((30l))\n    \/\/ (465l)\n    \/\/ >>> sumToN((100l))\n    \/\/ (5050l)\n    \/\/ >>> sumToN((5l))\n    \/\/ (15l)\n    \/\/ >>> sumToN((10l))\n    \/\/ (55l)\n    \/\/ >>> sumToN((1l))\n    \/\/ (1l)\n    public static long sumToN(long n) {\n","canonical_solution":"public static long sumToN(long n) {\n    return n * (n + 1) \/ 2;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumToN((1l)) == (1l));\n    assert(sumToN((6l)) == (21l));\n    assert(sumToN((11l)) == (66l));\n    assert(sumToN((30l)) == (465l));\n    assert(sumToN((100l)) == (5050l));\n    }\n\n}\n"},{"task_id":"HumanEval_61","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⴰⵍⵙ true ⵎⴽ ⴷⴰⵔ ⴽⵓ ⵜⴰⴳⴳⴰⵢⵜ ⵏ ⵓⵕⵥⵥⵓⵎ ⵜⴰⴳⴳⴰⵢⵜ ⵏ ⵓⵇⵇⵏ.     \/ ⴱⵔⴰⴽⵉⵜⵙ ⵉⴳⴰ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⵏ \"(\" ⴷ \")\".    \/\/ >>> correctBracketing((\"(\"))\n    \/\/ (false)\n    \/\/ >>> correctBracketing((\"()\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"(()())\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\")(()\"))\n    \/\/ (false)\n    public static boolean correctBracketing(String brackets) {\n","canonical_solution":"public static boolean correctBracketing(String brackets) {\n    int balance = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets.charAt(i) == '(') {\n            balance++;\n        } else if (brackets.charAt(i) == ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_62","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵜⴰⵢⴰⴼⵓⵜ ⵏ ⵓⵎⴳⴳⵉⵡⵙ ⴰⴷ ⴳ ⵢⴰⵜ ⵜⴰⵍⵖⴰ ⵢⴰⴽⵙⵓⵍⵏ.     \/ xs[0] + xs[1] * x + xs[2] * x^2 + ....     \/ xs ⴷⴰ ⵉⵙⵎⴷⵢⴰ ⵉⵎⴳⴳⵉⵜⵏ ⵏ ⴽⵉⴳⴰⵏ ⵏ ⵉⵡⵜⵜⴰ.     \/\/ >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))\n    \/\/ >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    \/\/ xs represent coefficients of a polynomial.\n    \/\/ xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    \/\/ Return derivative of this polynomial in the same form.\n    public static ArrayList<Long> derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_63","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙⵔⵙⵏⵜ ⵜⴰⵡⵓⵔⵉ ⵉ ⵓⵙⵉⴹⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵜⵉⵙ-ⵏ ⴳ ⵓⵙⵏⵙⵍ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ fibfib.     \/ fibfib{n} == fibfib{n-1} + fibfib{n-2} + fibfib{n-3}    \/ fib fib ((2) == 1     \/ fib fib ((1) == 0     \/ fib fib{0} == 0     \/ ⵜⴰⵍⵖⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱⴼⵉⴱ ⵜⴳⴰ ⵜⴰⵍⵖⴰ ⵢⴰⴽⵙⵓⵍⵏ ⴷ ⵜⴰⵍⵖⴰ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵛⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵏⵎⵍⵏ ⵙ ⵓⵎⴽ ⴰⴷ:     \/\/ >>> fibfib((1l))\n    \/\/ (0l)\n    \/\/ >>> fibfib((5l))\n    \/\/ (4l)\n    \/\/ >>> fibfib((8l))\n    \/\/ (24l)\n    public static long fibfib(long n) {\n","canonical_solution":"public static long fibfib(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        \n        long[] fibfibSequence = new long[(int) n + 1];\n        fibfibSequence[0] = 0;\n        fibfibSequence[1] = 0;\n        fibfibSequence[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfibSequence[i] = fibfibSequence[i - 1] + fibfibSequence[i - 2] + fibfibSequence[i - 3];\n        }\n        \n        return fibfibSequence[(int) n];\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"},{"task_id":"HumanEval_64","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⵛⵛⵉⵍ, ⵎⴰⵛⴰ ⴷⴰⵢ ⵉⴳ ⵉⵍⵍⴰ ⴳ ⵜⴳⵉⵔⴰ ⵏ ⵜⴳⵓⵔⵉ ⵉⵜⵜⵓⴼⴽⴰⵏ.     \/ ⵉⵎⵓⵙⵙⵓⵜⵏ ⴳ ⵡⴰⴷⴷⴰⴷ ⴰⴷ ⴳⴰⵏ 'ⴰ', 'ⵢ', 'ⵉ', 'ⵓ', 'ⵓ'. ⴷⵖⴰ, 'ⵢ' ⵉⴳⴰ ⴰⵡⴷ     \/ ⵜⴰⴳⵓⵔⵉ ⴰⵎⵎ ⵓⴽⵛⵛⵓⵎ ⴰⵔ ⵜⵙⴽⴰⵔ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⵙⵍⵉ ⴳ ⵜⵣⵍⵉⵜ.     \/ ⴰⴾⵜⴰⴱ ⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏ ⴱⵓⵓⵓⴰⵍⵍⵢⵙ_ⵛⵓⵓⵏⵜ ⵜⴰ ⵉⵋⵋⴰ ⵙⵜⵔⵉⵏⴶ ⵉⴾⵏⴰⵏ     \/\/ >>> vowelsCount((\"abcde\"))\n    \/\/ (2l)\n    \/\/ >>> vowelsCount((\"ACEDY\"))\n    \/\/ (3l)\n    public static long vowelsCount(String s) {\n","canonical_solution":"if (s == null || s.isEmpty()) {\n            return 0L;\n        }\n\n        s = s.toLowerCase();\n        long count = 0L;\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (\"aeiou\".indexOf(c) >= 0) {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(vowelsCount((\"abcde\")) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"ACEDY\")) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_65","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵎⴽ ⵜⵣⴷⵉ > ⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ, ⵔⴰⴷ ⵙⵓⵍ ⵏⵙⵙⴽⵍ ⵡⵓⵟⵟⵓⵏ.    \/ ⴷ ⴰⵔ ⵏⴰⴽⴽⴰ ⵜⴰⵢⴰⴼⵓⵜ ⴰⵎⵎ ⵜⵉⴼⵉⵏⴰⵖ.     \/ ⴰⴱⵔⵉⴷ ⴰⵎⵖⵍⴰⵍ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ x, ⴰⴱⵔⵉⴷ ⵏ ⵡⵓⵟⵟⵓⵏ ⵙ ⵓⴳⴰⴼⴰ ⵙ ⵓⵎⵏⵣⴰⵢ     \/\/ >>> circularShift((12l), (1l))\n    \/\/ (\"21\")\n    \/\/ >>> circularShift((12l), (2l))\n    \/\/ (\"12\")\n    public static String circularShift(long x, long shift) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static String circularShift(long x, long shift) {\n        String numStr = Long.toString(x);\n        int len = numStr.length();\n\n        \/\/ If shift is greater than or equal to the number of digits, reverse the digits.\n        if (shift >= len) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n\n        \/\/ Otherwise, perform a circular shift.\n        int actualShift = (int)(shift % len);\n        StringBuilder shifted = new StringBuilder();\n        shifted.append(numStr.substring(len - actualShift));\n        shifted.append(numStr.substring(0, len - actualShift));\n\n        return shifted.toString();\n    }\n\n    public static void main(String[] args) {\n        \/\/ Test cases\n        System.out.println(circularShift(12L, 1L));  \/\/ Output: \"21\"\n        System.out.println(circularShift(12L, 2L));  \/\/ Output: \"12\"\n        System.out.println(circularShift(12345L, 3L));  \/\/ Output: \"34512\"\n        System.out.println(circularShift(12345L, 5L));  \/\/ Output: \"54321\"\n        System.out.println(circularShift(12345L, 7L));  \/\/ Output: \"54321\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"},{"task_id":"HumanEval_66","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ⴰⵙⵛⵉⵉⵉ ⵛⵓⴷⵙ.     \/ ⴰⴾⵜⴰⴱ ⵏ ⵜⴰⵆⴰⵍⵜ ⵜⴰ ⵜⴰⵋ ⵉⵏ ⵙⵜⵔⵉⵏⴶ ⵛⵂⵓⵏⴷ ⵉⵏⴱⵓⵜ ⵜⵓⵍⴰⵙ ⵜⴰⵔⵏⴰ ⵢⴷⴰⴶ ⵏ ⵉⵙⵉⵎ ⵜⴰⵏ ⵓⵉⵏ ⴰⴼⴰⵍⵍⴰ ⴾⵢⵍ ⵓⵉ ⵎⴰⵈⵈⵓⵔⵏⵢⵏ    \/ ⵜⴰⵣⴰⵍⵍⵉⵜ     \/\/ >>> digitSum((\"\"))\n    \/\/ (0l)\n    \/\/ >>> digitSum((\"abAB\"))\n    \/\/ (131l)\n    \/\/ >>> digitSum((\"abcCd\"))\n    \/\/ (67l)\n    \/\/ >>> digitSum((\"helloE\"))\n    \/\/ (69l)\n    \/\/ >>> digitSum((\"woArBld\"))\n    \/\/ (131l)\n    \/\/ >>> digitSum((\"aAaaaXa\"))\n    \/\/ (153l)\n    public static long digitSum(String s) {\n","canonical_solution":"public static long digitSum(String s) {\n        long sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (long) c;\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"},{"task_id":"HumanEval_67","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵉ ⵓⵛⵛⵉⵍ:     \/ ⴳ ⵜⴽⵕⴹⴰ ⵔⵉⵜⵔⵉⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵢⴰⴼⵓⵜⵉⵏ ⵏ ⵍⵎⴰⵏⴳⵓ ⴳ ⵜⴽⵕⴹⴰ.     \/ ⴰⴱⴰⵔⵓⵏⵣ ⴷ ⵜⵉⴱⵔⵣⵉⵣ ⴷ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵙⵎⴷⵢⴰⵏⵏ ⴰⵎⴹⴰⵏ ⴰⵖⵓⵍⴰⵏ ⵏ ⵜⵢⴰⴼⵓⵜⵉⵏ     \/ ⵏ ⵜⵉⴱⵔⵣⴰ ⴷ ⵜⴱⵓⵕⵜⵓⵖⴰⵍ ⴷ ⵜⵢⴰⴼⵓⵜⵉⵏ ⵏ ⵍⵎⴰⵏⴳⵓ.  ⵉⴳ ⵏ ⵉⴼⴽⴰ ⵜⵉⴼⵔⴽⴰ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏⵏ ⵉⵎⴹⴰⵏ ⴰⴽⴽⵡ ⵏ     \/ ⴰⵈⵈⴰⵍⴰⵏ ⴰⴾⴼⴰⵏ ⴷⴰⵗ ⵜⴰⴱⴰⵔⴰⵜ ⵏ ⵉⴼⵔⴰⵜⴰⵏ ⵜⵉⵂⴰ ⵜⴰⴱⴰⵔⴰⵜ ⵜⵢⵏ    \/ ⴳ ⵜⵎⵙⴰⵔⵜ ⴰⴷ, ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵛⵛⵓⵎⵏ ⵉⵙⵎⴷⵢⴰⵏⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⴱⵔⵟⵓⴽⵜ ⴷ ⵜⴱⵔⵟⵓⴽⵜ     \/\/ >>> fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    \/\/ (8l)\n    \/\/ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    \/\/ (2l)\n    \/\/ >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    \/\/ (95l)\n    \/\/ >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    \/\/ (19l)\n    public static long fruitDistribution(String s, long n) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long fruitDistribution(String s, long n) {\n        String[] parts = s.split(\" \");\n        long apples = Long.parseLong(parts[0]);\n        long oranges = Long.parseLong(parts[3]);\n        long mangoes = n - (apples + oranges);\n        return mangoes;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"},{"task_id":"HumanEval_68","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ 1:     \/ ⵎⴽ ⵓⵔ ⵍⵍⵉⵏ ⵡⴰⵜⵉⴳⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ ⵏⵖⴷ ⵉⴳ ⵉⵍⵍⴰ ⵓⵎⵙⴰⵙⴰ ⵏ ⵓⵎⵙⴰⵙⴰ ⵏ ⵓⵎⵙⴰⵙⴰ ⵉⵜⵜⵓⴼⴽⴰⵏ, ⵙⵓⵍ [].     \/ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵜⵓⵙⵏⴼⵍ ⵜⵓⵏⵏⵓⵏⵜ ⵉⵜⵜⵓⵙⵏⵖⵍⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵓⵏⵏⵓⵏⵜ ⵏ ⵜⵓⵏⵏⵓⵏⵜ, [ smalest_value, ⴰⵙⵖⵍ ⵏⵏⵙ ],     \/ ⵎⴽ ⵜⵜⵢⴰⴼⴰⵏ ⴽⵉⴳⴰⵏ ⵏ ⵜⵓⵏⵏⵓⵜⵉⵏ ⵙ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ ⴰⵎⵎ ⵓⵎⴹⴰⵏ, ⵙⵙⴽⵛⵎ ⵜⵓⵏⵏⵓⵜ ⵏⵏⴰ ⵖⵓⵔ ⵉⵍⵍⴰ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵥⵥⵢⴰⵏ.     \/ ⵜⴰⴳⴳⴰⵢⵜ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵏⵖⵍⵏ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⴳ ⵜⴰⴳⴳⴰⵢⵜ ⵏⵏⴰ ⵖⵓⵔ ⵉⵍⵍⴰ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ.     ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏⵢⵜ ⵜⴰⵈⵈⴰⵍ ⴰⴾⵉⵉⴰⴷ ⵏ ⵉⵉⵉⴰⵏ ⴷⴰⵗ ⵏⵓⴷ ⵜⴰⵏ ⵜⵓⵍⴰⵙ ⴰⵔⴰⵎⴱⴰⵉ    \/ \"ⴷⴰⵢ ⵉⵜⵜⵓⴼⴽⴰ ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵉⵙⵎⴷⵢⴰⵏ ⵢⴰⵏ ⵓⵥⵟⵟⴰ ⵏ ⵜⵙⴽⵍⴰ ⵏⵏⴰ ⵖⵓⵔ ⵍⵍⴰⵏⵜ ⵜⵓⵏⵏⵓⵜⵉⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⴽⵕⵉⴹⵏ     \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 2:\n    \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 3:\n    \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ Example 4:\n    \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))\n    \/\/ Explanation: 0 is the smallest value, but  there are two zeros,\n    \/\/ so we will choose the first zero, which has the smallest index.\n    \/\/ Constraints:\n    \/\/ * 1 <= nodes.length <= 10000\n    \/\/ * 0 <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n","canonical_solution":"public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n        int index = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n            if (value % 2 == 0 && value < smallestEvenValue) {\n                smallestEvenValue = value;\n                index = i;\n            }\n        }\n\n        if (index != -1) {\n            result.add(smallestEvenValue);\n            result.add((long) index);\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_69","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵡⴰⵜⵉⴳ ⴰⴷ, ⵔⵔⵓⵜⵓⵔ -1.     \/ ⵜⴰⴳⴳⴰⵍⵜ ⵏ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⴷⴰ ⵢⴰⴷⴼ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⵎⵓⴷⴷⵓⵏ.     \/ ⴰⵎⵢⴰ, ⴷ ⵖⵓⵔⵙ ⵜⴰⵔⵖⴰ ⵢⵓⴳⵔⵏ ⵏⵖⴷ ⵉⵎⴽⵉⵏⵏ ⴷ ⵡⴰⵜⵉⴳ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵎⴷⴷⴰⴷⵏ.     \/ ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⴷⵔⵓⵙⵏ. ⵔⵔⵓⵜⵓⵔ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵅⴰⵜⴰⵔ ⵏⵏⴰ ⵢⵓⴳⵔⵏ     \/\/ >>> search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    \/\/ (2l)\n    \/\/ >>> search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    \/\/ (3l)\n    \/\/ >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l, (long)4l))))\n    \/\/ (-1l)\n    public static long search(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\n\nclass Problem {\n    public static long search(ArrayList<Long> lst) {\n        HashMap<Long, Integer> frequencyMap = new HashMap<>();\n\n        \/\/ Count frequencies of each number\n        for (Long num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        long result = -1;\n        \n        \/\/ Find the greatest integer that fulfills the condition\n        for (Long num : frequencyMap.keySet()) {\n            int frequency = frequencyMap.get(num);\n            if (frequency >= num && num > result) {\n                result = num;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(search(new ArrayList<Long>(Arrays.asList(4L, 1L, 2L, 2L, 3L, 1L)))); \/\/ 2L\n        System.out.println(search(new ArrayList<Long>(Arrays.asList(1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L)))); \/\/ 3L\n        System.out.println(search(new ArrayList<Long>(Arrays.asList(5L, 5L, 4L, 4L, 4L)))); \/\/ -1L\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l, (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l, (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l, (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l, (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l, (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l, (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) == (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l, (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l, (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l, (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l, (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l, (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l, (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l, (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l, (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l, (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l, (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l, (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l, (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l, (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l, (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l, (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l, (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l, (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l, (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l, (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l, (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l)))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_70","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴷⴼⴼⵉⵔ ⵏ ⵓⴳⴳⴰⵔ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵇⵇⵉⵎⵏ, ⴷⴼⴼⵉⵔ ⵏ ⵓⴳⴳⴰⵔ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴷ ⴰⵢⴰⴷ.     \/ ⴰⴱⴰⵔⴰⵣ ⵏ ⵡⴰⵏⴰⵡ ⴰⵎⵢⴰⵏⴰⵡ, ⵉⴳ ⴷⴰ ⵜⵜⴱⴷⵓⴷ ⵙ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ,     \/ ⴷⴰⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⴽⵛⵎ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵙ ⵓⵍⵓⴳⵏ ⵓⵔ ⵉⵃⵍⵉⵏ.     \/\/ >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    \/\/ >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    \/\/ >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n        \n        int left = 0;\n        int right = lst.size() - 1;\n        boolean flag = true; \/\/ true indicates minimum, false indicates maximum\n        \n        while (left <= right) {\n            if (flag) {\n                result.add(lst.get(left));\n                left++;\n            } else {\n                result.add(lst.get(right));\n                right--;\n            }\n            flag = !flag;\n        }\n        \n        return result;\n    }\n    \n    \/\/ Main method for test purposes\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        System.out.println(strangeSortList(list1)); \/\/ Outputs: [1, 4, 2, 3]\n        \n        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(5L, 5L, 5L, 5L));\n        System.out.println(strangeSortList(list2)); \/\/ Outputs: [5, 5, 5, 5]\n        \n        ArrayList<Long> list3 = new ArrayList<>();\n        System.out.println(strangeSortList(list3)); \/\/ Outputs: []\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l, (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l, (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_71","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⵓⴰⵔ ⵢⵈⴰⵍ ⴰⵉⴾⴰⵔⴰⵏ ⴾⴰⵔⴰⴷ.    \/ ⵟⵕⴰⵢⵙ ⵏ ⵜⵉⴼⵓⵍⵉⵏ ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔⵏⵜ ⵢⴰⵜ ⵜⵔⴰⵢⵙⵜ ⵏ ⵜⵉⴼⵓⵍⵉⵏ ⵉⵖⵓⴷⴰⵏ ⵉⴳ ⵜⵍⵍⴰ ⵜⴳⵎⵉⴹⵉ ⵏ ⵙⵏⴰⵜ ⵜⵉⴼⵓⵍⵉⵏ ⴽⴰ ⵣⵉⴽⴽ.    \/ ⵎⴽ ⵓⵔ ⵉⴳⵉ ⵡⴰⵢⴰ, ⵔⵎⵙ -1     \/ ⴰⴾⴾⵓⵣ ⵏ ⴾⴰⵔⴰⴷ ⵉⵋⵋⴰⵏ ⵙ ⵙⴰⵏⴰⵜⴰⵜⴰⵜ ⵜⵉⵜⴱⴰⵈⵈⴰ ⵏ ⴷⵢⵛⵉⵎⴰⵍ ⵎⵢⵗ ⴰⴾⴾⵓⵣ ⵏ ⵉⵛⵂⵔⵓⵜⴰⵏ ⴰⵈⵈⴰⵍⴰⵏ ⴰⴾⴾⵓⵣ ⵏ ⴾⴰⵔⴰⴷ ⵉⵍⴰⵏⵢⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ    \/ ⴰ ⴼⴰⵍ ⵉⵋⵔⴰⵓ ⵜⵉⵣⵓⵋⵉⵋⵢⵏ ⵏ ⵉⵛⵂⵔⵓⵜⴰⵏ ⵏ ⴾⴰⵔⴰⴷⴰⵜ ⵏ ⴾⴰⵔⴰⴷⴰⵜ. ⵙⴰⵎⵎⵓⵜⵜⵉ ⵏ ⵢⴷⴰⴶ ⵓⴰⵏ     \/\/ >>> triangleArea((3l), (4l), (5l))\n    \/\/ (6.0f)\n    \/\/ >>> triangleArea((1l), (2l), (10l))\n    \/\/ (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n","canonical_solution":"public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) \/ 2.0;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) \/ 100.0f;\n        } else {\n            return -1f;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5)); \/\/ Output: 6.0\n        System.out.println(triangleArea(1, 2, 10)); \/\/ Output: -1\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == (float)-1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == (float)-1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == (float)-1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == (float)-1l);\n    }\n\n}\n"},{"task_id":"HumanEval_72","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⵔ ⵉⵜⵜⵉⵔⵉ ⵓⴷⵎ q ⵉⵖ ⵉⴳⴰ ⴰⵎⵙⴰⵙⴰ (ⵉⴳⴰ ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉⵜ) ⴷ ⵡⴰⵜⵉⴳ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⵙ ⵉⴳⴰ ⵡⵉⴳⴳⴰⵔ ⵏⵖⴷ ⵉⵎⵣⴷⴰⵢⵏ ⴷ ⵓⴳⴳⴰⵔ ⵏ ⵓⴽⵙⴰⵢ ⴰⵅⴰⵜⴰⵔ w.     \/ ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⵉⴷⵜ ⵎⴽ ⴷⴰ ⵉⵜⵜⴰⵡⵉ ⵓⴷⵎ q, ⴷ ⵜⵉⴱⵔⵙⴳⴳⵡⴰⴷⵜ ⵎⴽ ⵓⵔ ⵉⴳⵉ.     \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l))\n    \/\/ (false)\n    \/\/ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l))\n    \/\/ (false)\n    \/\/ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l))\n    \/\/ (true)\n    \/\/ # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l))\n    \/\/ (true)\n    \/\/ # 3 is less than the maximum possible weight, and it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long w) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static boolean willItFly(ArrayList<Long> q, long w) {\n        if (!isPalindromic(q)) {\n            return false;\n        }\n        long sum = 0;\n        for (Long num : q) {\n            sum += num;\n        }\n        return sum <= w;\n    }\n\n    private static boolean isPalindromic(ArrayList<Long> q) {\n        int size = q.size();\n        for (int i = 0; i < size \/ 2; i++) {\n            if (!q.get(i).equals(q.get(size - i - 1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(1L, 2L)), 5L)); \/\/ false\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L, 2L, 3L)), 1L)); \/\/ false\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L, 2L, 3L)), 9L)); \/\/ true\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L)), 5L)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))), (5l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_73","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴷⴰ ⵉⵜⵜⵓⵙⵎⴷ ⵢⴰⵏ ⵡⴰⵏⴰⵡ ⴳ ⵓⵎⵏⵉⴷ ⴷ ⵓⵎⵣⵏⵣ. ⴳ ⵢⴰⵏ ⵓⵙⵏⴼⵍ, ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵏⴼⵍ ⵢⴰⵏ ⵉⴼⵔⴷⵉⵙ ⵙ ⴽⵔⴰ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵢⴰⴹⵏ.    \/ ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⵜⵜⵓⵙⵏⴼⵍ ⴰⴼⴰⴷ ⴰⴷ ⵜⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉⵜ. ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵜⴳⴰ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉⵜ ⵏⵏⴰ     \/ ⴷⴰⵜ ⵏ ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵜⵍⴳⴰⵎⵜ arr ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴷⴼⴽ ⴰⵎⴹⴰⵏ ⴰⵎⵥⵥⵢⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ     \/\/ >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n    \/\/ (4l)\n    \/\/ >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    \/\/ (1l)\n    \/\/ >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l))))\n    \/\/ (0l)\n    public static long smallestChange(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Given an array list arr of integers, finds the minimum number of changes\n    \/\/ to make the list palindromic.\n    public static long smallestChange(ArrayList<Long> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        long changes = 0;\n        \n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n        return changes;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L)))); \/\/ 4\n        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 4L, 3L, 2L, 2L)))); \/\/ 1\n        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 2L, 1L)))); \/\/ 0\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_74","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ ⵜⴰⵏ     \/ ⵎⴽ ⴷⴰⵔ ⵙⵏⴰⵜ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵉⵎⵙⵜⴰⵏ ⵓⵟⵟⵓⵏ ⵏ ⵉⵎⵙⵜⴰⵏ, ⵙⵙⴽⵛⵎ ⵜⵍⴳⴰⵎⵜ ⵜⴰⵎⵣⵡⴰⵔⵓⵜ ⵏ ⵉⵎⵙⵜⴰⵏ.     \/ ⴰⵟⵟⴰⵙ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⴳ ⴽⵓⵍⵍⵓ ⵜⵉⵙⵉⴹⴼⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵉⵎⵥⵥⵉⵏ ⵓⴳⴳⴰⵔ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵢⴰⴹⵏ.     \/ ⴰⴾⵜⴰⴱ ⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰ ⵉⴾⴼ-ⴰⵏ ⵙⴰⵏⴰⵜⴰⵜⴰⵜ ⵍⵉⵙⵜⵔⵉⴶ ⵜⴰⵏ ⵏ ⵜⴰⵂⵔⵉⴾⴻ ⵜⵓⵍⴰⵙ ⵜⴰⵔⵏⴰ ⵍⵉⵙⵜⵔⵉⴶ ⵓⴰ ⵉⵍⴰⵏ     \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList())))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\", (String)\"admin\", (String)\"project\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"5\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"4\")))\n    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n","canonical_solution":"public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n        int charCount1 = lst1.stream().mapToInt(String::length).sum();\n        int charCount2 = lst2.stream().mapToInt(String::length).sum();\n\n        if (charCount1 < charCount2) {\n            return lst1;\n        } else if (charCount2 < charCount1) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_75","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⵛⴽⵓ ⵏⵙⵙⵏ ⵎⴰⵙⴷ (ⴰ) ⴷⵔⵓⵙ ⵙⴳ 100.     \/ ⴷ ⵜⵉⵣⴰⵔⴰⵜ ⵏⴻⵜ ⵙ ⵉⵉⵉⴰⵏ.    \/ ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵉⵜⵜⵓⴼⴽⴰⵏ ⵜⴰⵔⵡⴰ ⵏ 3 ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵣⵡⵓⵔⴰ     \/\/ >>> isMultiplyPrime((30l))\n    \/\/ (true)\n    \/\/ 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long a) {\n","canonical_solution":"if (a >= 2 && a < 8) return false;\n\n        List<Integer> primes = sieveOfEratosthenes(100);\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    long product = (long) primes.get(i) * primes.get(j) * primes.get(k);\n                    if (product == a) {\n                        return true;\n                    }\n                    if (product > a) {\n                        break;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private static List<Integer> sieveOfEratosthenes(int limit) {\n        boolean[] isPrime = new boolean[limit + 1];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = false;\n        isPrime[1] = false;\n        for (int i = 2; i * i <= limit; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= limit; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= limit; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_76","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/x ⴷ ⵜⴰⵣⵎⵔⵜ ⵜⴰⵎⵢⵉⵡⴰⵏⵜ ⵏ n ⵉⴳ n**int=x     \/ ⵜⴰⵣⵎⵔⵜ ⵏ n ⴷ ⵜⵉⵔⵡⵉ ⴳ ⵡⴰⴷⴷⴰⴷⵏ ⵢⴰⴹⵏ.     \/ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⴰⵔⵔⴰ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⵊⵊⴰⵏ ⴰⴷ ⵜⴳ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ x ⵢⴰⵏ     \/\/ >>> isSimplePower((1l), (4l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((2l), (2l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((8l), (2l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((3l), (2l))\n    \/\/ (false)\n    \/\/ >>> isSimplePower((3l), (1l))\n    \/\/ (false)\n    \/\/ >>> isSimplePower((5l), (3l))\n    \/\/ (false)\n    public static boolean isSimplePower(long x, long n) {\n","canonical_solution":"public static boolean isSimplePower(long x, long n) {\n        if (x < 1 || n < 1) {\n            return false;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        long power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isSimplePower(1l, 4l)); \/\/ true\n        System.out.println(isSimplePower(2l, 2l)); \/\/ true\n        System.out.println(isSimplePower(8l, 2l)); \/\/ true\n        System.out.println(isSimplePower(3l, 2l)); \/\/ false\n        System.out.println(isSimplePower(3l, 1l)); \/\/ false\n        System.out.println(isSimplePower(5l, 3l)); \/\/ false\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_77","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⵜⵓⵉⵙⵙⴰⵎ: ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⴰⵜⵓⴰⵣⴰⵉ ⴰⵙ ⵉⴾⵉ ⵏ ⴰⴾⴰⵉⴰⴷ ⵓⵍⴰⵗⴰⵏ ⵂⴰⵔⴾⵓⴾ    \/ ⵎⴽ ⵉⴳⴰ ⵡⴰⵏⵏⴰⵢ ⴰⴷ ⴰⵎⵙⴽⴰⵔ ⵏ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⴷⴷⴰⴷⵏ.     \/ ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ a ⴰⵔ ⵉⵜⵜⴰⵊⵊⴰ true     \/\/ >>> iscube((1l))\n    \/\/ (true)\n    \/\/ >>> iscube((2l))\n    \/\/ (false)\n    \/\/ >>> iscube((-1l))\n    \/\/ (true)\n    \/\/ >>> iscube((64l))\n    \/\/ (true)\n    \/\/ >>> iscube((0l))\n    \/\/ (true)\n    \/\/ >>> iscube((180l))\n    \/\/ (false)\n    public static boolean iscube(long a) {\n","canonical_solution":"public static boolean iscube(long a) {\n        if (a < 0) {\n            a = -a;\n        }\n        long cubeRoot = Math.round(Math.cbrt(a));\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_78","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴷ ⵉⵙⵎⴰⵡⵏ ⴰ, ⴱ, ⵛ, ⴷ, ⵢ, ⴼ ⴳⴰⵏ ⴰⵀⴰ ⵉⵎⵇⵔⴰⵏⵏ.     \/ ⵜⴰⵏⵎⵎⵉⵔⵜ: ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⵎⴽⵜⵉ ⵉⵙ ⵉⴳⴰ ⵡⴰⴷⴷⴰⴷ ⵏ ⵓⴽⵛⵛⵓⵎ ⴰⵀⴰ ⵉⴳⵏ ⴰⵣⵔⴼⴰⵏ ⵏⵖⴷ ⴰⵎⵙⴷⴷⵉ ⵏ ⵡⴰⵔⵔⴰⵜⵏ,     \/ ⴱ (= ⴷⵢⵛⵉⵎⴰⵍ 11), ⴷ (= ⴷⵢⵛⵉⵎⴰⵍ 13).     \/ ⴰⵢⴰ ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵏⵙⵙⴽⵜⵉ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵙⴳ ⵡⵓⵟⵟⵓⵏ ⴰⴷ: 2, 3, 5, 7,     \/ ⵉⵎⴹⴰⵏ ⵉⵎⵣⵡⵓⵔⴰ ⴳⴰⵏ 2, 3, 5, 7, 11, 13, 17,...     \/ ⴷⵉⵊⵉⵜⵏ ⵏ ⵓⴽⵙⵓⴹ ⴳⴰⵏ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.     \/ ⴰⵅⴰⵜⴰⵔ ⵙⴳ 1 ⵓⵔ ⵉⴳⵉ ⴰⵎⵢⴰⴼⵓ ⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵔⴳⴰⵢⵏ ⵉⵎⵥⵥⵉⵏ).    \/ ⵡⵓⵟⵟⵓⵏ ⵏⵏⴰ ⵉⴳⴰⵏ ⵉⵎⵉⴹⵏ ⵉⵎⵣⵡⵓⵔⴰ (ⵉⴹ ⴰⵎⵣⵡⴰⵔⵓ, ⵏⵖⴷ ⴰⵎⵣⵡⴰⵔⵓ, ⵉⴳⴰ ⴰⵎⴹⴰⵏ ⴰⴳⴰⵎⴰⵏ     \/ ⴰⵎⴹⴰⵏ ⴰⵀⵉⵊⴰⴷⵉⵎⴰⵍ ⴰⵎⵎ ⵜⴰⴳⵔⵓⵎⵎⴰ ⴷ ⴷⴰ ⵉⵜⵜⵉⵍⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⴹⴰⵏ ⴰⵀⵉⵊⴰⴷⵉⵎⴰⵍⵏ     \/ ⴰⵜⵓⵢⵔⴰ ⴰⴷ ⵜⴰⵔⵉⵜ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ     \/\/ >>> hexKey((\"AB\"))\n    \/\/ (1l)\n    \/\/ >>> hexKey((\"1077E\"))\n    \/\/ (2l)\n    \/\/ >>> hexKey((\"ABED1A33\"))\n    \/\/ (4l)\n    \/\/ >>> hexKey((\"123456789ABCDEF0\"))\n    \/\/ (6l)\n    \/\/ >>> hexKey((\"2020\"))\n    \/\/ (2l)\n    public static long hexKey(String num) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static long hexKey(String num) {\n        \/\/ Set of hexadecimal \"digits\" that are prime numbers.\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        \/\/ Count prime digits in the hexadecimal number.\n        long count = 0;\n        for (char ch : num.toCharArray()) {\n            if (primeHexDigits.contains(ch)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \/\/ You can include this main method for testing the function\n    public static void main(String[] args) {\n        System.out.println(hexKey(\"AB\")); \/\/ Output: 1\n        System.out.println(hexKey(\"1077E\")); \/\/ Output: 2\n        System.out.println(hexKey(\"ABED1A33\")); \/\/ Output: 4\n        System.out.println(hexKey(\"123456789ABCDEF0\")); \/\/ Output: 6\n        System.out.println(hexKey(\"2020\")); \/\/ Output: 2\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_79","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⵉⵍⴰⵏ ⵉⵙⵎⴰⵡⵏ ⵏ ⵓⴳⴳⴰⵔ ⴰⴼⴰⴷ ⴰⴷ ⵜⵜⵓⵙⵎⵔⴰⵙ ⵜⴰⵍⵖⴰ.     \/ ⴰⴷ ⵉⵍⵉⵏ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ \"db\" ⴳ ⵍⴱⴷⵓ ⴷ ⵜⴳⵉⵔⴰ ⵏ ⵜⵉⴼⵉⵏⴰⵖ.     ⴽⵓ ⵉⵙⴽⴽⵉⵍ ⴳ ⵜⵣⵍⵉⵜ ⵔⴰⴷ ⵉⴳ \"0\" ⵏⵖ \"1\".    \/ ⵜⴰⵍⵖⴰ ⵏ ⵜⴱⵉⵏⴰⵔⵉⵜ. ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵙⴽⵔ ⵜⵎⵔⵙⵜ ⵢⴰⵜ ⵜⵉⴼⵉⵏⴰⵖ, ⴷ ⴽⵓ ⵉⵙⴽⴽⵉⵍ ⵉⵙⵎⴷⵢⴰⵏ ⵜⴰⴱⵉⵏⴰⵔⵉⵜ     \/ ⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵜⴹⵉⵚⵜ ⴳ ⵜⴰⵍⵖⴰ ⵏ ⵜⴷⵉⵣⵎⵉⵜ ⴷ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⴼⵍⴷ ⵖⵔ     \/\/ >>> decimalToBinary((15l))\n    \/\/ (\"db1111db\")\n    \/\/ >>> decimalToBinary((32l))\n    \/\/ (\"db100000db\")\n    public static String decimalToBinary(long decimal) {\n","canonical_solution":"public static String decimalToBinary(long decimal) {\n        \/\/ Convert the decimal number to binary string\n        String binaryStr = Long.toBinaryString(decimal);\n        \/\/ Add 'db' at the beginning and the end of the binary string\n        return \"db\" + binaryStr + \"db\";\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"},{"task_id":"HumanEval_80","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴰⴱⵔⵉⴷ ⵉⴳⴰ ⵀⴰⴱⵊⴰⴱⴰ ⵉⴳ ⴷⴰⵔⵙ ⵓⴳⴳⴰⵔ ⵏ 3 ⵜⵉⵙⵉ ⴷ ⴽⵓ 3 ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⵉⵎⵣⴷⴰⵢⵏ     \/ ⵜⴰⵖⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵥⵕⵉⵖ ⵉⵙ ⵜⴳⴰ ⵜⵣⵍⵉⵜ ⴰⵀⴰⴱⵊⴰⴼⴰ ⵏⵖ ⵓⵔ ⵜⵍⵍⵉ.     \/ ⴰⵜⵓⴰⵣⴰⵉ ⵙⴻⵜⴰⵔⴻⴷ ⵙ.     \/\/ >>> isHappy((\"a\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"aa\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> isHappy((\"aabb\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"adb\"))\n    \/\/ (true)\n    \/\/ >>> isHappy((\"xyy\"))\n    \/\/ (false)\n    public static boolean isHappy(String s) {\n","canonical_solution":"public static boolean isHappy(String s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n            return false;\n        }\n    }\n    return true;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_81","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ 0.0 E     \/ > 0.0 ⴷ-     \/ > 0.7 D     \/ > 1.0 ⴷ+     \/ > 1.3 C-     \/ > 1.7 C     \/ > 2.0 C+     \/ > 2.3 ⴱ-     \/ > 2.7 B     \/ > 3.0 ⴱ+     \/ > 3.3 ⴰ-     \/ > 3.7 ⴰ     \/ 4.0 ⴰ+     \/ GPA. ⵆⴰⵔⴰⵜ ⵏ ⴰⵍⴾⵉⵜⵜⴰⴱ     \/ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵥⴹⴰⵕⵏ ⴰⴷ ⵉⴼⴽ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵜⵉⵔⵔⴰ ⵙ ⵓⵙⵎⵔⵙ ⵏ ⵜⴼⵍⵡⵉⵜ ⴰⴷ:     \/ ⵜⴰⴾⴼⴰ-ⵛⴻ ⵍⵉⵙⵜ ⴰⵏ ⵎⴰⵔⵔⴰ ⵜⴰⵏ ⵎⴰⵔⵔⴰ ⴰⵏ ⵎⴰⴶⵔⴰⴷ ⵉⴻ ⴾⴻⵍ ⴰⵜⵜⴰⵍⴰⴱⴰ ⴰⴷ ⵉⴶⵔⴰⵓⴰⵏ ⴾⴰⵜⴰⴱ    ⵎⴻⵛⵛⴰⵍ ⵓⴰ-ⵏ-ⴰⴾⴰⵙⴰⵏ, ⵜⴰ-ⵜ-ⵉⵍⵍⴰ ⴰⵛⴰⵗⵉⵍ ⵓⴰ-ⵙ-ⴰⵆⴷⴰⵎⴰⵏ ⵉ-ⵙ-ⴰⴾⵜⴰⴱ.    \/ ⵉ ⵉⵏⵍⵎⴰⴷⵏ. ⵉⵙⴽⵔ ⵓⵙⵍⵎⴰⴷ ⴰⵍⴳⵓⵔⵉⵜⵎ ⵏⵏⵙ ⵉ ⵓⵙⵜⴰⵍ.    \/ ⴻⵈⵈⴰⵍ ⵉⵎⴰⵂⴰⴾ ⵓⴰ ⵙⴰⵎⴰⵏⴷⵓ ⴰⵏ ⵙⴻⵎⴻⵙⵜⴻⵔ ⴰⴷ ⴻⵎⴰⵗⴰⵔ ⵉⵍⴰ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏⴻⵜ ⴰⴷ ⵉⴾⴼⴰ ⴾⴰⵔⵜⵉ ⵜⴰⵏ    \/\/ >>> gradeEquation((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {\n        ArrayList<String> letterGrades = new ArrayList<>();\n        for (Float gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else if (gpa == 0.0) {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<Float> gpas = new ArrayList<>();\n        gpas.add(4.0f);\n        gpas.add(3.0f);\n        gpas.add(1.7f);\n        gpas.add(2.0f);\n        gpas.add(3.5f);\n        ArrayList<String> grades = numericalLetterGrade(gpas);\n        System.out.println(grades);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"D-\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_82","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ ⵜⴰⵏ     \/ ⵜⵉⵖⵣⵉ ⵜⴳⴰ ⴰⵎⴹⴰⵏ ⴰⵎⵣⵡⴰⵔⵓ ⵏⵖⴷ ⵜⵉⵔⵡⵉ ⵎⴽ ⵓⵔ ⵉⴳⵉ     \/ ⴰⴾⵜⴰⴱ ⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰ ⵜⴰⵋ ⵉⵏ ⵙⵜⵔⵉⵏⴶ ⵜⵓⵍⴰⵙ ⵜⴰⵔⵂⴰ ⵜⵉⴷⵉⵜⵜ ⵎⴻⵗ ⵙⵜⵔⵉⵏⴶ     \/\/ >>> primeLength((\"Hello\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"abcdcba\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"kittens\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"orange\"))\n    \/\/ (false)\n    public static boolean primeLength(String string) {\n","canonical_solution":"public static boolean primeLength(String string) {\n    int length = string.length();\n    if (length <= 1) return false;\n    for (int i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(primeLength((\"Hello\")) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n    assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\")) == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\")) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_83","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵊⵊⵉⵏ ⵉⵙⵙⵏⵜⵉ ⵏⵖⴷ ⵢⴰⵇⵇⵏ ⵙ 1.     \/ ⴰⵛⴽⵓ ⵏⵜⵜⴰ ⴷ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵏⵙⵙⴽⵜⵉ ⵙ ⵓⵙⵙⵉⴹⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ n.    public static long startsOneEnds(long n) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    \/\/ Given a positive integer n, return the count of the numbers of n-digit\n    \/\/ positive integers that start or end with 1.\n    public static long startsOneEnds(long n) {\n        if (n == 1) return 1; \/\/ Only the number '1' is a one-digit number that starts or ends with 1.\n\n        \/\/ Total numbers with n digits: 9 * (10^(n-1))\n        long totalNDigitNumbers = 9 * (long)Math.pow(10, n - 1);\n\n        \/\/ Numbers that start with 1 and are n-digits: 1 * (10^(n-1))\n        long startsWithOne = (long)Math.pow(10, n - 1);\n\n        \/\/ Numbers that end with 1: 9 * (10^(n-1))\/10\n        long endsWithOne = totalNDigitNumbers \/ 10;\n\n        \/\/ Since numbers starting and ending with 1 are counted twice, we subtract the overlap.\n        return startsWithOne + endsWithOne - 1;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(startsOneEnds(1)); \/\/ Expected output: 1\n        System.out.println(startsOneEnds(2)); \/\/ Expected output: 19\n        System.out.println(startsOneEnds(3)); \/\/ Expected output: 190\n        System.out.println(startsOneEnds(4)); \/\/ Expected output: 1900\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"},{"task_id":"HumanEval_84","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ     \/ ⵉⴳ ⴷⴰⵔⴽ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ N, ⴷⵔⵓⵏ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⵙ ⵜⴱⵉⵏⴰⵔⵉⵜ.     \/\/ >>> solve((1000l))\n    \/\/ (\"1\")\n    \/\/ >>> solve((150l))\n    \/\/ (\"110\")\n    \/\/ >>> solve((147l))\n    \/\/ (\"1100\")\n    \/\/ Variables:\n    \/\/ @N integer\n    \/\/ Constraints: 0 ≤ N ≤ 10000.\n    \/\/ Output:\n    \/\/ a string of binary number\n    public static String solve(long N) {\n","canonical_solution":"public static String solve(long N) {\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N \/= 10;\n        }\n        return Long.toBinaryString(sum);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"},{"task_id":"HumanEval_85","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⵛⴽⵓ ⵏⵜⵜⴰ ⴷ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⵅⴷⴷⴰⵎⵏ, ⵣⵡⴰⵔ ⵏⵜⵜⴰ ⴰⴷ ⵏⵔⵏⵓ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ..     \/\/ >>> add((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)6l, (long)7l))))\n    \/\/ (2l)\n    public static long add(ArrayList<Long> lst) {\n","canonical_solution":"long sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)88l)))) == (88l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l, (long)2l, (long)122l)))) == (122l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)0l, (long)6l, (long)7l)))) == (0l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)6l, (long)8l)))) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_86","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴰⴾⴰⵉⴰⴷ: ⵉⵋⵋⴰⵛⵂ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏ ⵉⵙⵎⴰⵓⴰⵏ ⴷ ⵉⵂⴰⵏⴷⴰⴶⴰⵏ ⵓⵉⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ ⴷⴰⵗ ⵜⴰⵙⴰⵙⵙⴰⵗⵔⴰⵓⵜ    \/ ⴰⴾⴰⵔⴰⵛⵂ ⵏ ⴰⵍⵈⵉⵎ ⴼⴰⵍ ⴰⵈⵉⵎ ⵓⴰⵏ ⴰⵙⵛⵉⵉ    \/ ⴷⴰ ⵜⵜⵓⵙⵏⴼⴰⵍ ⵙ ⵜⴳⵓⵔⵉ ⵜⴰⵎⴰⵢⵏⵓⵜ ⴳ  ⴰⵔ ⵜⵜⵓⵙⵏⵎⴰⵍⴰ ⴽⵓⵍⵍⵓ ⵉⵙⴽⴽⵉⵍⵏ ⴳ     \/ ⵜⴰⵡⵍⴰⴼⵜ ⵉⵜⵜⵓⵙⵏⵎⴰⵍⴰⵢⵏ ⵏ ⵜⵉⴼⵉⵏⴰⵖ, ⵜⴳⴰ ⵜⵉⴼⵉⵏⴰⵖ ⴳ ⵍⵍⴰⵏⵜ ⴽⵓⵍⵍⵓ ⵜⴳⵓⵔⵉⵡⵉⵏ (ⵜⴱⴹⴰⵏⵜ ⵙ ⵓⵙⴰⵢⵔⴰⵔ)     \/ ⴰⴾⵜⴰⴱ ⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰ ⵢⵂⴰⵏ ⵜⴰⵗⴰⵛⴰⴷⵜ ⵜⵓⵍⴰⵙ ⵜⴰⵔⵜⴰⵉ ⵜⴰⴾⴰⵍⵜ ⵏⵢⵜ ⵜⴰⴾⴰⵍⵜ ⵜⴰ-ⵙ-ⵓ-ⵓ-ⵓ-ⵓ    \/\/ >>> antiShuffle((\"Hi\"))\n    \/\/ (\"Hi\")\n    \/\/ >>> antiShuffle((\"hello\"))\n    \/\/ (\"ehllo\")\n    \/\/ >>> antiShuffle((\"Hello World!!!\"))\n    \/\/ (\"Hello !!!Wdlor\")\n    public static String antiShuffle(String s) {\n","canonical_solution":"public static String antiShuffle(String s) {\n    StringBuilder result = new StringBuilder();\n    String[] words = s.split(\"(?<=\\\\s)|(?=\\\\s)\");\n    \n    for (String word : words) {\n        if (word.trim().isEmpty()) {\n            result.append(word);\n        } else {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars));\n        }\n    }\n    \n    return result.toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"},{"task_id":"HumanEval_87","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴷⵢⵗ, ⵙⵓⵔⴷ ⵛⵓⵓⵔⴷⵉⵏⴰⵜⵢ ⵜⴰⵏ ⵏ ⵜⴰⵂⵔⵉⴾⵢ ⵙ ⵛⵓⵍⵓⵎⵏ ⵜⴰⵏ ⵙ ⴰⵍⴾⴰⴷ ⵓⴰ ⵙ ⵉⴾⴰ.    \/ ⴰⵗⴰⵍⴰ ⵏ ⵛⵓⵓⵔⴷⵉⵏⴰⵜⵢ ⵜⴰⵏ ⵙ ⵜⵉⵣⴰⵔⴰⵜ ⵙ ⵔⵉⴷⴰⵏ ⴷⴰⵗ ⴰⵍⵆⴰⵍ ⵏ ⴰⴾⴰⵉⴰⴷ    \/ ⴽⵓ ⵜⴰⴱⴰⵔⴰⵜ ⵜⴳⴰ ⴽⵓⵓⵔⴷⵉⵏⴰⵜ - (ⵜⵉⵔⵉⵜ, ⵜⵉⵔⵙⴰⵍ), ⴰⵔⵜⴰⵉ ⵙ 0.     \/ ⴷ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴽⴰⵔⵏ ⵏ ⵓⵎⵙⴳⵏⴰⴼ, [(x1, y1), (x2, y2) ...] ⵣⵓⵏⴷ ⵎⴰⵙ     \/ ⴷⴼⴼⵉⵔ ⵏ lst, ⴷ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ x, ⴹⴼⵕ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ x ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉ,     \/ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴾⴰⵍ ⴼⵓⴾ ⴰⴷ ⵢⵂⴰ ⴰⴾⵓⵣ ⵏ ⵉⵛⵛⵉⴾⵉⵍⴰⵏ ⵉⵣⵍⴰⵉⵏⵢⵏ    \/ ⴰⵂⵓⵙⴾⴰⵜ ⵎⴰⵜⵔⵉⵛⵙ, ⵎⴰⵛⴰⵏ ⵓⴰⵔ ⵢⵂⴰ ⵎⴰⵜⵔⵉⵛⵙ,     \/ ⴰⵜⵓⴰⵣⴰⵏ ⵙ ⵉⵏⵎⵎⴰⵍⵏ ⵏ ⵙⵉⵏ ⵡⵓⴳⴳⵓⴳⵏ, ⵙ ⵜⴰⵍⵖⴰ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵉⵎⵙⴷⴷⵉ,     \/\/ >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l))\n    \/\/ (new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))\n    \/\/ >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l))\n    \/\/ (new ArrayList<Pair<Long, Long>>(Arrays.asList()))\n    \/\/ >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l))\n    \/\/ (new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))\n    public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {\n","canonical_solution":"public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\n        for (long i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get((int)i);\n            for (long j = 0; j < row.size(); j++) {\n                if (row.get((int)j) == x) {\n                    result.add(Pair.with(i, j));\n                }\n            }\n        }\n\n        result.sort(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                int rowComparison = Long.compare(p1.getValue0(), p2.getValue0());\n                if (rowComparison != 0) {\n                    return rowComparison;\n                } else {\n                    return Long.compare(p2.getValue1(), p1.getValue1());  \/\/ Descending order by column\n                }\n            }\n        });\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 1l), (Pair<Long, Long>)Pair.with(1l, 1l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(5l, 1l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(2l, 0l), (Pair<Long, Long>)Pair.with(3l, 2l), (Pair<Long, Long>)Pair.with(3l, 0l), (Pair<Long, Long>)Pair.with(4l, 3l), (Pair<Long, Long>)Pair.with(4l, 0l), (Pair<Long, Long>)Pair.with(5l, 4l), (Pair<Long, Long>)Pair.with(5l, 0l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(6l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))));\n    }\n\n}\n"},{"task_id":"HumanEval_88","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ * ⵓⵔ ⴷⴰ ⵏⵙⵙⵏⴼⵍ ⴰⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ.     \/ ⴰⵜⵡⵉⵍ:     \/ ⵏⵖ ⴰⴷ ⵏⵙⵎⵓⵏ ⴳ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵣⴷⴰⵔ ⵉⵖ ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⵙⵖⴰⵍ ⴰⵎⵣⵡⴰⵔⵓ ⴷ ⵡⴰⵜⵉⴳ ⵏ ⵓⵙⵖⴰⵍ ⴰⵎⴳⴳⴰⵔⵓ) ⴰⵎⵎ ⵓⵎⵉⴹⴰⵏ.     \/ ⴰⴷ ⵜⵙⵙⵓⴷⵙⴷ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵇⵔⴰⵏ ⵎⴽ ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⵙⵙⵉⴹⵏ ⴰⵎⵣⵡⴰⵔⵓ ⴷ ⵡⴰⵜⵉⴳ ⵏ ⵓⵙⵙⵉⴹⵏ ⴰⵎⴳⴳⴰⵔⵓ) ⵓⵔ ⵉⵎⵢⴰⵏⴰⵡⵏ,     \/ ⴷⴰⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⴽⵕⴹⵉⵢⵏ, ⵔⴰⵏⵜⵔ ⴽⵓⵊⴰⴼⴰ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⴷⴼⴼⵉⵔ ⵏ ⵓⵙⵎⵙⴰⵙⴰ,     \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long> array) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.isEmpty()) {\n            return new ArrayList<>(array);\n        }\n\n        long firstValue = array.get(0);\n        long lastValue = array.get(array.size() - 1);\n        long sum = firstValue + lastValue;\n\n        ArrayList<Long> result = new ArrayList<>(array);\n        \n        if (sum % 2 == 0) {\n            \/\/ Sort in descending order\n            result.sort(Collections.reverseOrder());\n        } else {\n            \/\/ Sort in ascending order\n            Collections.sort(result);\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l, (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_89","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴰⴱⵓⵖⵍⵓ ⵙ ⵙⵏⴰⵜ ⵉⵔⴰⵔⵏ ⵙ ⵙⵏⴰⵜ ⵜⵉⵖⴰⵔⵉⵡⵉⵏ.     \/ ⵉⵇⵏⴻⵏ ⴰⴷ ⵜⵜⵓⵙⵏⴼⴰⵍⵜ ⵜⴼⵔⴰⵏⵙⵉⵙⵜ ⵙ ⵢⴰⵜ ⵜⵖⴰⵔⴰⵙⵜ ⵏⵏⴰ ⵔⴰⴷ ⵔⴰⵏⵜ ⵜⴱⵔⵔⴰⵜⵉⵏ     \/ ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴼⵉⵏⴰⵖ ⵉⵜⵜⵓⵙⵏⴼⵍⵏ ⵙ ⵓⵙⵎⵓⵜⵜⴳ ⵏ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⵉⴼⵉⵏⴰⵖ.     \/ ⴰⵗⵏⵓ ⵏ ⵜⴰⵍⵗⴰ ⵜⴰ ⵙⴰⵎⵎⵓⵜⵜⴰⵉⴰⵜ ⵙⵜⵔⵉⵏⴶ ⵙⵓⵏⴷ ⴰⵔⴶⵓⵎⵢⵏⵜ ⴷ     \/\/ >>> encrypt((\"hi\"))\n    \/\/ (\"lm\")\n    \/\/ >>> encrypt((\"asdfghjkl\"))\n    \/\/ (\"ewhjklnop\")\n    \/\/ >>> encrypt((\"gf\"))\n    \/\/ (\"kj\")\n    \/\/ >>> encrypt((\"et\"))\n    \/\/ (\"ix\")\n    public static String encrypt(String s) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    \/\/ Create a function encrypt that takes a string as an argument and returns\n    \/\/ a string encrypted with the alphabet being rotated by 2 * 2 = 4 places.\n    public static String encrypt(String s) {\n        StringBuilder encryptedString = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                char shifted = (char) ((c - 'a' + 4) % 26 + 'a');\n                encryptedString.append(shifted);\n            } else if (Character.isUpperCase(c)) {\n                char shifted = (char) ((c - 'A' + 4) % 26 + 'A');\n                encryptedString.append(shifted);\n            } else {\n                \/\/ If the character is not a letter, append it unchanged.\n                encryptedString.append(c);\n            }\n        }\n        return encryptedString.toString();\n    }\n\n    public static void main(String[] args) {\n        \/\/ Test examples\n        System.out.println(encrypt(\"hi\"));          \/\/ Output: lm\n        System.out.println(encrypt(\"asdfghjkl\"));   \/\/ Output: ewhjklnop\n        System.out.println(encrypt(\"gf\"));          \/\/ Output: kj\n        System.out.println(encrypt(\"et\"));          \/\/ Output: ix\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n"},{"task_id":"HumanEval_90","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵔ ⵉⵜⵜⵔⴰⵔ null ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⴽⵔⴰ ⵏ ⵓⵏⴰⵡ ⴰⴷ.     \/ ⴰⴾⵜⴰⴱ ⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏ ⵏⵢⵛⵜ_ⵙⵍⵢⵎⵙⵜ (() ⵜⴰ ⵜⴰⵔⵏⴰⵜ ⴰⵛⵔⵓⵜ ⵓⴰⵏ ⵙⴰⵏⴰⵜ ⴰⵎⵥⵥⵢⴰⵏ ⵏ ⵍⵉⵙⵜ ⵏ ⴰⵔⵔⵢ    \/ ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏ ⵓⵙⵜⵔⴰⵜⵉⵊⵉ.    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n    \/\/ Optional.of(2l)\n    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l))))\n    \/\/ Optional.of(2l)\n    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList())))\n    \/\/ Optional.empty()\n    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l))))\n    \/\/ Optional.empty()\n    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        Set<Long> uniqueSet = new HashSet<>(lst);\n        List<Long> uniqueList = new ArrayList<>(uniqueSet);\n        if (uniqueList.size() < 2) {\n            return Optional.empty();\n        }\n\n        Collections.sort(uniqueList);\n        return Optional.of(uniqueList.get(1));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals(Optional.of(2l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l)))).equals(Optional.of(2l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(1l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)-35l, (long)34l, (long)12l, (long)-45l)))).equals(Optional.of(-35l)));\n    }\n\n}\n"},{"task_id":"HumanEval_91","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴷⴰ ⵜⵜⵓⵙⵏⴱⴹⴰⵏ ⵜⵉⴳⵓⵔⵉⵡⵉⵏ ⵙ '.', '?' ⵏⵖ '!'.     \"ⵜⵉⵎⴻⴷⴻⴷⵜ\" ⴻⵈⵈⴰⵍ ⵜⴰⵗⴻⵍⵉⵜ ⵜⵉⵙⵙⵉⵏⵜⴰ ⵙ ⵉⵙⵉⵎ ⵓⴰⵏ \"ⵉ\"    \/ⴰⴷ ⴰⵜⵓⴰⵣⴰⵗⴰⵍ ⵙⵉⵍⵎⴰⵜ ⴰⵏ ⵎⴰⴶⵔⴰⴷ, ⴰⴷ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏⴰⵙⵙⴰⵏ ⴰⴷ ⴰⵉⵉⴰⴷⴰⵏ ⴾⴰⵍⴰ.    \/\/ >>> isBored((\"Hello world\"))\n    \/\/ (0l)\n    \/\/ >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    \/\/ (1l)\n    public static long isBored(String S) {\n","canonical_solution":"long boredomCount = 0;\n        String[] sentences = S.split(\"[.!?]\");\n        for (String sentence : sentences) {\n            sentence = sentence.trim();\n            if (sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        return boredomCount;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_92","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ ⵜⴰⵏ     \/ ⴷⴰ ⵉⵜⵜⴰⵊⵊⵓ ⵜⵉⴽⵕⴹⵉ ⴳ ⴽⵔⴰ ⵏ ⵡⴰⴷⴷⴰⴷⵏ ⵢⴰⴹⵏ.     \/ ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵢⴰⵏ ⴳ ⵡⵓⵟⵟⵓⵏⵏ ⴰⵎⵎ ⵓⴳⵣⵓⵎ ⵏ ⵙⵉⵏ ⵡⵓⵟⵟⵓⵏ ⵢⴰⴹⵏ, ⴷ ⵎⴰⵕⵕⴰ ⵡⵓⵟⵟⵓⵏⵏ ⴳⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ.     \/ ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵢⵓⵎⵥⵏ 3 ⵏ ⵡⵓⵟⵟⵓⵏ.     \/\/ >>> anyInt((float)5l, (float)2l, (float)7l)\n    \/\/ (true)\n    \/\/ >>> anyInt((float)3l, (float)2l, (float)2l)\n    \/\/ (false)\n    \/\/ >>> anyInt((float)3l, (float)-2l, (float)1l)\n    \/\/ (true)\n    \/\/ >>> anyInt((3.6f), (-2.2f), (float)2l)\n    \/\/ (false)\n    public static boolean anyInt(float x, float y, float z) {\n","canonical_solution":"public static boolean anyInt(float x, float y, float z) {\n        \/\/ Check if any of the numbers is the sum of the other two\n        \/\/ To ensure all are integers, they must be equal to their integer counterpart\n        if (x == (int) x && y == (int) y && z == (int) z) {\n            \/\/ Convert numbers to integers\n            int xi = (int) x;\n            int yi = (int) y;\n            int zi = (int) z;\n            return (xi == yi + zi) || (yi == xi + zi) || (zi == xi + yi);\n        }\n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(anyInt((float)2l, (float)3l, (float)1l) == (true));\n    assert(anyInt((2.5f), (float)2l, (float)3l) == (false));\n    assert(anyInt((1.5f), (float)5l, (3.5f)) == (false));\n    assert(anyInt((float)2l, (float)6l, (float)2l) == (false));\n    assert(anyInt((float)4l, (float)2l, (float)2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt((float)-4l, (float)6l, (float)2l) == (true));\n    assert(anyInt((float)2l, (float)1l, (float)1l) == (true));\n    assert(anyInt((float)3l, (float)4l, (float)7l) == (true));\n    assert(anyInt((3.0f), (float)4l, (float)7l) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_93","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⵜⴰⵙⴰⵏ ⴷⴰⵢ ⵜⵉⴼⵔⵉⵙⵜ.     \/ ⴰⵛⵛⵉⵍ ⴷⴰⵗ ⴰⵍⵗⵉⴱⴱⴰⵜ ⵜⴰⵏ ⴰⵍⴱⴰⵏⴶⴰⵍⵉⴰ    \/ ⵜⴰⴱⵔⴰⵜ ⵙ ⵜⴱⵔⴰⵜ ⵏⵏⴰ ⵉⵜⵜⵉⵍⵉⵏ ⵙⵏⴰⵜ ⵜⵉⵖⴰⵡⵙⵉⵡⵉⵏ ⴷⴰⵜ ⵏ ⵜⴱⵔⴰⵜ     \/ ⴰⴱⵔⵉⴷ ⵏⵏⴰ ⴷⴰ ⵉⵙⵏⴼⴰⵍⵏ ⵜⵉⴼⵔⵉⵙⵉⵏ ⵏ ⵡⴰⵔⵔⴰⵜⵏ, ⴷⴰ ⵉⵙⵏⴼⴰⵍ ⴽⵓⵍⵍⵓ ⵉⵎⵙⵍⵉ ⴳ     \/ ⴰⴾⵜⴰⴱ ⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰ ⵢⵂⴰ ⵎⵢⵙⴰⵋ ⴷ ⵢⵗⵏⴰ ⵏⵢⵜ ⴷⴰⵗ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵛⵂⵓⵏⴷ     \/\/ >>> encode((\"test\"))\n    \/\/ (\"TGST\")\n    \/\/ >>> encode((\"This is a message\"))\n    \/\/ (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n","canonical_solution":"public static String encode(String message) {\n    StringBuilder encodedMessage = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isLetter(c)) {\n            \/\/ Swap case\n            char swappedCaseChar = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\n            \/\/ Replace vowels\n            if (\"AEIOUaeiou\".indexOf(c) != -1) {\n                \/\/ Determine the offset for vowel replacement\n                char replacementChar = (char) (swappedCaseChar + 2);\n                encodedMessage.append(replacementChar);\n            } else {\n                encodedMessage.append(swappedCaseChar);\n            }\n        }\n    }\n    return encodedMessage.toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"},{"task_id":"HumanEval_94","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⴰⴼⴷ ⴰⵜⵉⴳ ⴰⵎⵣⵡⴰⵔⵓ ⴰⵅⴰⵜⴰⵔ ⴷ ⴰⴷ ⵜⵔⴰⵔⴷ ⵜⴰⴳⵓⵜ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ.     \/ ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏ ⵓⵙⵜⵔⴰⵜⵉⵊⵉ.    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l))))\n    \/\/ (10l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l))))\n    \/\/ (25l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l))))\n    \/\/ (13l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l))))\n    \/\/ (11l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l))))\n    \/\/ (3l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l))))\n    \/\/ (7l)\n    public static long skjkasdkd(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static boolean isPrime(long n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0)\n                return false;\n        }\n\n        return true;\n    }\n\n    public static long sumOfDigits(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n \/= 10;\n        }\n        return sum;\n    }\n\n    public static long skjkasdkd(ArrayList<Long> lst) {\n        long largestPrime = -1;\n\n        for (long num : lst) {\n            if (isPrime(num)) {\n                largestPrime = Math.max(largestPrime, num);\n            }\n        }\n\n        return largestPrime != -1 ? sumOfDigits(largestPrime) : 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(skjkasdkd(new ArrayList<Long>(Arrays.asList(0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L))));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l)))) == (10l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l)))) == (25l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l)))) == (13l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l)))) == (11l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l)))) == (3l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l)))) == (7l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l)))) == (19l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l, (long)123456l, (long)127l, (long)7l)))) == (19l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)127l, (long)97l, (long)8192l)))) == (10l));\n    }\n\n}\n"},{"task_id":"HumanEval_95","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⵜⴰⵡⵓⵔⵉ ⵜⵣⵎⵎⵔ ⴰⴷ ⵜⵕⵓⵃ ⵜⵉⵣⴳⵉⵍⵜ ⵉⴳ ⵉⴳⴰ ⵡⴰⵙⵉⵜ ⵏ ⵓⵙⵙⴼⵍⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⵙⵙⴼⵍⴷ ⴰⵡⵏⴳⵉⵎ.     \/ case ⵏⵖⴷ ⴽⵓⵍⵍⵓ ⵉⵙⵍⴽⵉⵏⵏ ⴳⴰⵏ ⵜⵉⵙⵉⴹⴼⴰⵏ ⴳ ⵜⵉⵙⵉⴹⴼⴰⵏ ⵜⵉⵅⴰⵜⴰⵔⵉⵏ, ⵎⴽ ⵓⵔ ⵉⴳⵉ,  return false.    \/ ⴰⵛⴽⵓ ⵏⵙⵙⴽⵜⵉ ⵜⴰⴽⴰⵕⴹⴰ ⵏ ⵓⴱⵔⴰⵔ, ⴰⵔ ⵏⵙⵙⴽⵜⵉ ⵜⵉⴷⵜ ⵎⴽ ⴳⴰⵏ ⴽⵓⵍⵍⵓ ⵜⵉⵙⵍⵉⵜⵉⵏ ⵜⵉⵙⵉⴹⴼⴰⵏⵉⵏ ⴳ ⵍⵉⵙⵜⵔⴰⵔ     \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"b\", \"banana\"))))\n    \/\/ (true)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n    \/\/ (true)\n    public static boolean checkDictCase(HashMap<String,String> dict) {\n","canonical_solution":"import java.util.HashMap;\n\nclass Problem {\n    public static boolean checkDictCase(HashMap<String, String> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLower = true;\n        boolean allUpper = true;\n\n        for (String key : dict.keySet()) {\n            if (!key.equals(key.toLowerCase())) {\n                allLower = false;\n            }\n            if (!key.equals(key.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n\n        return allLower || allUpper;\n    }\n\n    public static void main(String[] args) {\n        HashMap<String, String> map1 = new HashMap<>(Map.of(\"a\", \"apple\", \"b\", \"banana\"));\n        HashMap<String, String> map2 = new HashMap<>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"));\n        HashMap<String, String> map3 = new HashMap<>(Map.of(\"a\", \"apple\", \"8\", \"banana\", \"A\", \"apple\"));\n        HashMap<String, String> map4 = new HashMap<>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"));\n        HashMap<String, String> map5 = new HashMap<>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"));\n\n        System.out.println(checkDictCase(map1)); \/\/ true\n        System.out.println(checkDictCase(map2)); \/\/ false\n        System.out.println(checkDictCase(map3)); \/\/ false\n        System.out.println(checkDictCase(map4)); \/\/ false\n        System.out.println(checkDictCase(map5)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_96","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵣⵡⵓⵔⴰ ⴷ ⵡⵉⵏ ⵡⴰⵔ n.     \/ ⴰⴱⴷⴷⵍ ⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⵓⵔ ⵉⴳⵉⵏ ⴰⵎⴳⵉⵏ ⴷ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⵣⵡⵓⵔⴰ n     \/\/ >>> countUpTo((5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))\n    \/\/ >>> countUpTo((11l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))\n    \/\/ >>> countUpTo((0l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> countUpTo((20l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))\n    \/\/ >>> countUpTo((1l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> countUpTo((18l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))\n    public static ArrayList<Long> countUpTo(long n) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    \n    public static ArrayList<Long> countUpTo(long n) {\n        ArrayList<Long> primes = new ArrayList<>();\n        for (long i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n    \n    private static boolean isPrime(long num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (long i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countUpTo((5l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n    assert(countUpTo((6l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));\n    assert(countUpTo((7l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));\n    assert(countUpTo((10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))));\n    assert(countUpTo((0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(countUpTo((22l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))));\n    assert(countUpTo((1l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(countUpTo((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));\n    assert(countUpTo((47l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l)))));\n    assert(countUpTo((101l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l, (long)47l, (long)53l, (long)59l, (long)61l, (long)67l, (long)71l, (long)73l, (long)79l, (long)83l, (long)89l, (long)97l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_97","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⵜⵉⵏⴰⵣⴶⴰⵎ ⴰⵙ ⵉⴾⵉ ⵏⴰⴾⴰⵓⴰⴷ ⴰⵈⴰⵍ ⴰⴶⵓⴷⵉⵉⴰⵏ ⴰⵂⵓⵙⴾⴰⵜ.    \/ ⴰⵜⴰⵔⴰⵎ ⵏ ⵉⴷⴷⵉⴾⵓⴷⴰⵏ ⵏ ⵜⴰⵈⵈⵉⵎⵜ ⵏⴰⵙⴰⵏ.     \/ ⴰⴳⴳⵉ ⵏ ⵜⵎⵔⵙⵜ ⵏⵏⴰ ⵢⵓⵎⵥⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⴰⵔ ⵉⵜⵜⵔ     \/\/ >>> multiply((148l), (412l))\n    \/\/ (16l)\n    \/\/ >>> multiply((19l), (28l))\n    \/\/ (72l)\n    \/\/ >>> multiply((2020l), (1851l))\n    \/\/ (0l)\n    \/\/ >>> multiply((14l), (-15l))\n    \/\/ (20l)\n    public static long multiply(long a, long b) {\n","canonical_solution":"long unitDigitA = Math.abs(a % 10);\n        long unitDigitB = Math.abs(b % 10);\n        return unitDigitA * unitDigitB;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_98","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴰⵜⵓⴰⵗⴰⵏ ⵙⵜⵔⵉⵏⴶ ⵙ, ⴰⵉⵉⴰⵏ ⵉⴷⴷⵉⴾⵓⴷ ⵏ ⴱⵓⵓⴾⵍⵢⵙ ⵜⴰⵏ ⵓⵉⵏ ⵎⴰⵈⵈⵓⵔⵏⵢⵏ ⴷⴰⵗ ⵉⵏⴷⵢⵛⵙ ⵓⵍⴰⵂⵏⵢⵏ    \/\/ >>> countUpper((\"aBCdEf\"))\n    \/\/ (1l)\n    \/\/ >>> countUpper((\"abcdefg\"))\n    \/\/ (0l)\n    \/\/ >>> countUpper((\"dBBE\"))\n    \/\/ (0l)\n    public static long countUpper(String s) {\n","canonical_solution":"long count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (\"AEIOU\".indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_99","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ ⵜⴰⵏ     \/ ⵙⴳ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴷⵓⵏ ⵙⴳ ⵓⵎⵢⴰ.     \/ ⴰⵔ ⵉⵜⵜⴰⴷⴼ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵉⵔⵉⵡ ⴰⴽⴽⵡ ⵢⵓⵙⴰⵏ. ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵉⵔⵉⵡ ⴰⵎⵣⴰⵔⴰⵢ     \/ ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵡⴰⵜⵉⴳ (ⵜⴰⵙⵉⵔⵜ) ⵉⵙⵎⴷⵢⴰⵏ ⴰⵎⴹⴰⵏ     \/\/ >>> closestInteger((\"10\"))\n    \/\/ (10l)\n    \/\/ >>> closestInteger((\"15.3\"))\n    \/\/ (15l)\n    \/\/ Note:\n    \/\/ Rounding away from zero means that if the given number is equidistant\n    \/\/ from two integers, the one you should return is the one that is the\n    \/\/ farthest from zero. For example closest_integer(\"14.5\") should\n    \/\/ return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long closestInteger(String value) {\n","canonical_solution":"public static long closestInteger(String value) {\n        double number = Double.parseDouble(value);\n        long rounded = Math.round(number);\n        if (Math.abs(number - rounded) == 0.5) {\n            \/\/ Rounding away from zero\n            if (number > 0) {\n                return rounded + 1;\n            } else {\n                return rounded - 1;\n            }\n        }\n        return rounded;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\"));   \/\/ 10\n        System.out.println(closestInteger(\"15.3\")); \/\/ 15\n        System.out.println(closestInteger(\"14.5\")); \/\/ 15\n        System.out.println(closestInteger(\"-14.5\"));\/\/ -15\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_100","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ⵉ ⵉⵙⵎⴷⵢⴰ ⵓⵟⵟⵓⵏ ⵏ ⵉⵊⴷⴷⵉⴳⵏ ⴳ ⵓⵙⵡⵉⵔ (ⵉ+1).    \/ ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⴽⵕⵕⵉⴹⵏ ⴳ ⴽⵓ ⴰⵙⵡⵉⵔ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⵓⴷⵙⵏ ⵏ ⵉⵎⵙⵓⴷⵙⵏ, ⴳ ⵉⵍⵍⴰ ⵓⵏⴰⵎⴽ ⴳ ⵓⵙⵏⵎⵍ     \/ - ⴰⵎⴹⴰⵏ ⴰⵎⵎⵓⴹⴰⵏ ⴰⵎⵣⵡⴰⵔⵓ ⵉⴳ n ⴰⵎⵎⵓⴹⴰⵏ.     \/ - ⴰⵎⴹⴰⵏ ⴰⵎⵣⴰⵔⴰⵢ ⴰⵎⴹⴰⵏ ⴰⵎⵣⴰⵔⴰⵢ ⵉⴳ n ⴰⵎⵣⴰⵔⴰⵢ.     \/ ⴰⵋⴻⵏ ⵏ ⵉⵂⴰⵏⴷⴰⴶⴰⵏ ⴷⴰⵗ ⴻⴷⴰⴶ ⵓⴰ ⴷⴰⵔⴰⵜⴰⵏ ⴻⵈⵈⴰⵍ:     \/ⴰⵣⴰⵔⴰⵜ ⵏⴻⴼⴻⵍ ⵉⵍⴰ ⵏⴻⵜ ⵉⵛⴻⵜⴰⵏ.    \/ ⴰⵛⴽⵓ ⵏⵜⵜⴰ ⴷ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵏⵙⴽⵔ ⵢⴰⵜ ⵜⵔⴱⴰⵜ ⵏ n ⵉⵙⵡⵉⵔⵏ ⵏ ⵉⵅⵅⴰⵏⵏ.     \/\/ >>> makeAPile((3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))\n    public static ArrayList<Long> makeAPile(long n) {\n","canonical_solution":"public static ArrayList<Long> makeAPile(long n) {\n        ArrayList<Long> pile = new ArrayList<>();\n        long stones = n;\n        boolean isOdd = stones % 2 != 0;\n\n        for (int i = 0; i < n; i++) {\n            pile.add(stones);\n            if (isOdd) {\n                stones += 2; \/\/ Next odd number\n            } else {\n                stones += 2; \/\/ Next even number\n            }\n        }\n\n        return pile;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(makeAPile((3l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))));\n    assert(makeAPile((4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)6l, (long)8l, (long)10l)))));\n    assert(makeAPile((5l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)9l, (long)11l, (long)13l)))));\n    assert(makeAPile((6l)).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)10l, (long)12l, (long)14l, (long)16l)))));\n    assert(makeAPile((8l)).equals((new ArrayList<Long>(Arrays.asList((long)8l, (long)10l, (long)12l, (long)14l, (long)16l, (long)18l, (long)20l, (long)22l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_101","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴰⴷ ⵜⴱⴹⵓ ⵜⵉⴼⵉⵏⴰⵖ ⵖⵔ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴷ ⴰⴷ ⵜⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵏ ⵓⵙⵏⵖⵍ.    \/ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⵢⵈⵈⵉⵍ ⴾⵢⵍ ⵉⵙⵎⴰⵓⴰⵏ ⵉⵋⵋⴰⵏⵢⵏ ⵛⵓⵎⴰ ⵜⴰⵏ ⵎⵢⵗ ⵙⴱⵢⵛⵢⵙ ⵜⴰⵏ. ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏⴰⵏⴾⴰⵜ ⵜⴰⵈⵈⴰⵍ     \/\/ >>> wordsString((\"Hi, my name is John\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    \/\/ >>> wordsString((\"One, two, three, four, five, six\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<String> wordsString(String s) {\n        String[] words = s.split(\"[,\\\\s]+\");\n        return new ArrayList<String>(Arrays.asList(words));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(wordsString(\"Hi, my name is John\"));\n        System.out.println(wordsString(\"One, two, three, four, five, six\"));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(wordsString((\"Hi, my name is John\")).equals((new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))));\n    assert(wordsString((\"Hi, my name\")).equals((new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\")))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))));\n    assert(wordsString((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(wordsString((\"ahmed     , gamal\")).equals((new ArrayList<String>(Arrays.asList((String)\"ahmed\", (String)\"gamal\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_102","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⵓⵔ ⵉⵍⵍⵉ ⵡⵓⵟⵟⵓⵏ ⴰⴷ, ⵇⴰⴷ ⵜⵔⴰⵔ ⵜⴰⵡⵓⵔⵉ -1.    \/ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵇⵇⵔⴰⵏ ⴳ ⵓⵎⵣⴰⵔⴰⵢ [x, y] ⴳ ⵜⵓⵎⵣⵉⵏ. ⵎⴽ     \/ ⴷⴰ ⵜⴽⴽⴰ ⵜⵎⵔⵙⵜ ⴰⴷ ⵙⵉⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵊⴷⵉⴷⵏ x ⴷ y ⴰⵔ ⵜⵔⴰⵔ     \/\/ >>> chooseNum((12l), (15l))\n    \/\/ (14l)\n    \/\/ >>> chooseNum((13l), (12l))\n    \/\/ (-1l)\n    public static long chooseNum(long x, long y) {\n","canonical_solution":"if (x > y) {\n            return -1l;\n        }\n        \n        long maxEven = y % 2 == 0 ? y : y - 1;\n        if (maxEven >= x) {\n            return maxEven;\n        } else {\n            return -1l;\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n}\n"},{"task_id":"HumanEval_104","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⵜⴰⵏⵎⵎⵉⵔⵜ: ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵜⵓⵙⵎⵉⵍⵏ ⵉⵙⵎⵉⵍⵏ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵉⵜⵜⵓⵙⵏⴼⵍⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵔⵏⵉⵡ.    \/ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⵓⵔ ⵉⵍⵉⵏ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ.     \/ ⴷⴰⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵏⵖⴰⵏⵏ x. ⵔⴰⵏⵜⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ     \/\/ >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))\n    \/\/ >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {\n","canonical_solution":"public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {\n        return x.stream()\n                .filter(num -> hasNoEvenDigits(num))\n                .sorted()\n                .collect(Collectors.toCollection(ArrayList::new));\n    }\n\n    private static boolean hasNoEvenDigits(long num) {\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num \/= 10;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)12345l, (long)2033l, (long)111l, (long)151l)))).equals((new ArrayList<Long>(Arrays.asList((long)111l, (long)151l)))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)135l, (long)103l, (long)31l)))).equals((new ArrayList<Long>(Arrays.asList((long)31l, (long)135l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_105","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \"ⵓⴰⵏ\", \"ⵜⵓⵓ\", \"ⵜⵔⴻ\", \"ⴼⵓⵓⵔ\", \"ⴼⵉⴼⴻ\", \"ⵙⴻⵆ\", \"ⵙⴻⴱⴻⴻⵏ\", \"ⴻⴰⵆⵜ\", \"ⵏⵓⴻⵏ\".    \/ ⴰⴷ ⵏⴰⵍⵙ ⴰⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏⵏⴰ ⴷ ⵢⵓⵛⴽⴰⵏ, ⴷ ⴰⴷ ⵏⵙⵎⴷ ⴽⵓ ⵓⴽⵕⴹ ⵙ ⵉⵙⵎ ⵏⵏⵙ ⵙⴳ     \/ ⴷⴰⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏ ⵓⵙⵏⵙⵍ, ⵙⵙⵓⴷⵙ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳⵔ 1 ⴷ 9 ⴳ ⵜⴰⵎⵎ ⵏⵙⵏ,     \/\/ >>> byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Eight\", (String)\"Five\", (String)\"Four\", (String)\"Three\", (String)\"Two\", (String)\"Two\", (String)\"One\", (String)\"One\")))\n    \/\/ If the array array list is empty, return an empty array array list:\n    \/\/ >>> byLength((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ If the array array list has any strange number ignore it:\n    \/\/ >>> byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"One\")))\n    public static ArrayList<String> byLength(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static ArrayList<String> byLength(ArrayList<Long> arr) {\n        List<String> names = Arrays.asList(\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n        ArrayList<Long> filtered = new ArrayList<>();\n\n        \/\/ Filter the numbers between 1 and 9\n        for (Long num : arr) {\n            if (num >= 1 && num <= 9) {\n                filtered.add(num);\n            }\n        }\n\n        \/\/ Sort the filtered numbers\n        Collections.sort(filtered);\n\n        \/\/ Reverse the sorted list\n        Collections.reverse(filtered);\n\n        \/\/ Replace each number with its corresponding name\n        ArrayList<String> result = new ArrayList<>();\n        for (Long num : filtered) {\n            result.add(names.get(num.intValue()));\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Eight\", (String)\"Five\", (String)\"Four\", (String)\"Three\", (String)\"Two\", (String)\"Two\", (String)\"One\", (String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l)))).equals((new ArrayList<String>(Arrays.asList((String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)3l, (long)2l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Three\", (String)\"Two\", (String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)9l, (long)4l, (long)8l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Nine\", (String)\"Eight\", (String)\"Four\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_106","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⵉⴳⴰ ⵓⴼⴰⴽⵜⵓⵔⵢⴰⵍ ⵏ i ⴰⵙⴼⵓⴽⵍⵓ ⵏ ⵡⵓⵟⵟⵓⵏ ⵙⴳ 1 ⴰⵔ i (1 * 2 * ... * i).    \/ I ⴰⴱⴷⴰⴷ ⵙⴳ 1.     \/ ⵏⵖⴷ ⵜⴳⵎⵉⴹⵉ ⵏ ⵡⵓⵟⵟⵓⵏ ⵙⴳ 1 ⴰⵔ i ⵎⴽ ⵓⵔ ⵉⴳⵉ ⵡⴰⴷⴷⴰⴷ ⴰⴷ.     \/ ⴰⵔ ⵉⵜⵜⴰⵍⵙ ⴰⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵡⵓⵟⵟⵓⵏ n, ⵣⵓⵏⴷ ⵎⴰⵙⴷ ⴰⵜⵉⴳ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵓⵙⵖⵍ i ⵉⴳⴰ ⵜⴰⴳⴳⴰⵢⵜ ⵏ i ⵎⴽ ⵜⴳⴰ i     \/ ⵙⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ f ⵏⵏⴰ ⵢⵓⵎⵥⵏ n ⴰⵎⵎ ⵓⵎⵙⴽⴰⵔ,     \/\/ >>> f((5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        \n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumUpTo(i));\n            }\n        }\n        \n        return result;\n    }\n\n    private static long factorial(long num) {\n        long result = 1;\n        for (long i = 1; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private static long sumUpTo(long num) {\n        return num * (num + 1) \/ 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(f(5));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(f((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))));\n    assert(f((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l, (long)720l, (long)28l)))));\n    assert(f((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(f((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_107","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ 1:     \/ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵣⴷⴰⵢⵏ ⵏⵏⴰ ⵢⴰⴽⵡⴹⵏ ⴳ ⵓⵎⵣⴳⵓⵏ ((1, n), ⴳ ⵜⴰⵎⵎⵏⵜ.     \/ ⴰⵛⴽⵓ ⵏⵜⵜⴰ ⴷ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵏⵙⵙⴽⵜⵉ ⵙ ⵢⴰⵏ ⵓⴽⵙⴰⵢ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⴷⴷⵓⴽⴰⵍ ⴷ ⵉⵎⴷⴷⵓⴽⴰⵍ     \/\/ >>> evenOddPalindrome((3l))\n    \/\/ (Pair.with(1l, 2l))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    \/\/ Example 2:\n    \/\/ >>> evenOddPalindrome((12l))\n    \/\/ (Pair.with(4l, 6l))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    \/\/ Note:\n    \/\/ 1. 1 <= n <= 10^3\n    \/\/ 2. returned pair has the number of even and odd integer palindromes respectively.\n    public static Pair<Long, Long> evenOddPalindrome(long n) {\n","canonical_solution":"import org.javatuples.Pair;\n\npublic class Problem {\n    public static Pair<Long, Long> evenOddPalindrome(long n) {\n        long evenCount = 0;\n        long oddCount = 0;\n        \n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        return Pair.with(evenCount, oddCount);\n    }\n    \n    private static boolean isPalindrome(long number) {\n        long original = number;\n        long reversed = 0;\n        \n        while (number > 0) {\n            long digit = number % 10;\n            reversed = reversed * 10 + digit;\n            number \/= 10;\n        }\n        \n        return original == reversed;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddPalindrome(3));  \/\/ Output: (Pair.with(1l, 2l))\n        System.out.println(evenOddPalindrome(12)); \/\/ Output: (Pair.with(4l, 6l))\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(evenOddPalindrome((123l)).equals((Pair.with(8l, 13l))));\n    assert(evenOddPalindrome((12l)).equals((Pair.with(4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals((Pair.with(1l, 2l))));\n    assert(evenOddPalindrome((63l)).equals((Pair.with(6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals((Pair.with(5l, 6l))));\n    assert(evenOddPalindrome((19l)).equals((Pair.with(4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals((Pair.with(4l, 5l))));\n    assert(evenOddPalindrome((1l)).equals((Pair.with(0l, 1l))));\n    }\n\n}\n"},{"task_id":"HumanEval_108","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ -123 ⵉⵍⴰ ⵉⵎⴹⴰⵏ ⵏ ⵜⵎⵢⴰⵇⵇⴰⵏⵜ -1, 2 ⴷ 3.     \/ ⵎⴽ ⵉⴳⴰ ⵓⵟⵟⵓⵏ ⴰⵎⴳⵓⵔ, ⵔⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⴰⵎⵣⵡⴰⵔⵓ ⴰⵎⴳⵓⵔ ⴰⵎⴳⵓⵔ:     \/ ⴰⵎⴹⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵓⵎⴹⴰⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙⵏ > 0.     \/ ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ count_nums ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏ ⵓⵙⵏⵙⵍ ⴷ ⴰⵔ ⵉⵜⵜⴰⴽⴰ     \/\/ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (0l)\n    \/\/ >>> countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n    \/\/ (1l)\n    \/\/ >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l))))\n    \/\/ (3l)\n    public static long countNums(ArrayList<Long> arr) {\n","canonical_solution":"public static long countNums(ArrayList<Long> arr) {\n        return arr.stream().filter(num -> {\n            long sumOfDigits = 0;\n            long n = Math.abs(num);\n            while (n > 0) {\n                sumOfDigits += n % 10;\n                n \/= 10;\n            }\n            return (num < 0 ? sumOfDigits - 2 * (num % 10) : sumOfDigits) > 0;\n        }).count();\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> inputs1 = new ArrayList<Long>(Arrays.asList());\n        ArrayList<Long> inputs2 = new ArrayList<Long>(Arrays.asList(-1L, 11L, -11L));\n        ArrayList<Long> inputs3 = new ArrayList<Long>(Arrays.asList(1L, 1L, 2L));\n\n        System.out.println(countNums(inputs1)); \/\/ Output: 0\n        System.out.println(countNums(inputs2)); \/\/ Output: 1\n        System.out.println(countNums(inputs3)); \/\/ Output: 3\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_109","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⵜⴰⵏⵎⵎⵉⵔⵜ: ⵜⵍⵍⴰ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⴰⴷ ⵉⵍⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵥⵍⴰⵢⵏ.    \/ ⵎⴽ ⵉⴳⴰ ⵡⴰⵔⵔⴰ ⵏ ⵡⴰⵏⴰⵡ ⵏ ⵡⴰⵏⴰⵡⵏ ⵉⴼⵔⵓⵔⵉⵏ ⵔⴰⴷ ⵏⵔⴰⵔ ⵜⵉⴷⵜ.     \/ ⴷⴰⵔⴰⵜ ⵓⵢⵏ ⴰⴷ ⵏⴰⵣⴷⵉ ⵜⵉⴷⵜ ⵎⴽ ⵓⵔ ⵏⴰⵣⴷⵉ ⵜⵉⴷⵜ.     \/ ⵉⵖ ⵜⵣⵎⵔⵎ ⴰⴷ ⵜⴰⵡⵉⵖ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⵓⴷⵙⵏ ⵏ ⵉⵎⵙⵓⴷⵙⵏ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙ ⵜⵉⴳⴳⵉⵜ ⵏ ⵓⵍⵍⴰ     \/ ⵜⴰⵍⵖⴰ ⵏ ⵓⵙⵙⵏⵜⵉ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ, ⵉⴳⴰⵏ ⵡⴰⵏⴷⴰⴷ ⵡⵉⵙⵙ 0.    \/ ⴰⴷⴷⴰⴷ ⴳ ⵓⴱⵔⵉⴷ ⵏ ⵓⵃⵢⵢⵍ. ⵔⴰⴷ ⵉⵜⵜⵓⵙⵏⴼⵍ ⵓⵏⴰⵡ ⴰⵎⴳⴳⴰⵔⵓ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⵜⴳⴳⴰⵔⵏ ⵏ ⵉⵎⵙⵜⴳⴳⴰⵔⵏ     \/ ⵜⴰⴳⴳⵉⵜ ⵏ ⵓⵙⵙⴼⵍⴷ ⵙ ⵓⵣⵔⴼ ⵜⵔⵏⴰ ⴰⵙⴼⵍⴷ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴰⴽⴽⵡ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⵙ ⵢⴰⵏ     \/ ⴰⵜ-ⵓ-ⴰⵗⵔⴰⴱ ⴰⴷⴷⴰⴱⴰⵔⴰ ⵏ ⴰⴾⴰⵉⴰⴷ ⵙ ⴰⵍⵆⴰⵈ ⵉⵉⵉⴰⵏ ⴼⵓⴾ    \/ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵅⴼ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵓⵙⵎⵉⵍ:     \/ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⵢⵋ ⵍⵉⵙⵜ ⵏ ⵜⴰⵋⵉⵜⵜⴰⵓⵜ ⵜⴰⵋⵉⵜⵜⴰⵓⵜ ⵜⴰⵈⵈⴰⵍⴰⵜ ⵙ ⴰⵍⴾⴰⴷ ⵓⴰⵔ ⵏ ⵉⴾⵏⴰ ⵙ ⴾⴰⵔⵔⴰⵛⵂ ⵏ     \/ ⵔⴰⴷ ⵜⵜⵓⵙⵏⵎⴰⵍⴰⵜ ⵉⵎⴹⴰⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵙ ⵜⴱⵔⵉⴷⵜ ⵏ ⵓⵙⴽⵙⵍ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵏⵎ ⵎⴰⵙ     \/ ⵏⵍⵍⵉ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ 'ⴰⵔⵔ' ⵏ N ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ arr[1], arr[2], ..., arr[N].    \/\/ >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\n    \/\/ (true)\n    \/\/ Explanation: By performin 2 right shift operations, non-decreasing order can\n    \/\/ be achieved for the given array array list.\n    \/\/ >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l))))\n    \/\/ (false)\n    \/\/ Explanation:It is not possible to get non-decreasing order for the given\n    \/\/ array array list by performing any number of right shift operations.\n    public static boolean moveOneBall(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n        \n        int n = arr.size();\n        \n        \/\/ Find the number of increasing points\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                count++;\n            }\n        }\n        \n        \/\/ Check the end and start to be a breaking point\n        if (arr.get(n - 1) > arr.get(0)) {\n            count++;\n        }\n        \n        \/\/ If there is at most one such transition, it can be rotated\n        return count <= 1;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_110","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴰ ⴼⴰⵍ ⵓⴰⵔ ⵢⵈⵈⵢⵍ ⴰⵓⵢⵏ, ⵙⵓⵍⵓ \"ⵓⴰⵔ\"    \/ ⴰⴽⴽⵡ ⵉⴼⵔⴷⵉⵙⵏ ⵏ lst1 ⴰⴷ ⴳⵉⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ, ⵙⵙⴽⵔ \"YES\".     \/ ⴰ ⴼⴰⵍ ⴰⴷⴷⵓⴱⴰⵜ ⴰⵙⵉⵎⵎⵓⵜⵉ ⵏ ⵉⴼⵔⴷⵉⵙⴰⵏ ⵋⵉⵔ Iⵙⵜ1 ⴷ Iⵙⵜ2 ⵉ ⴰⴷ ⵉⵋⵋⵉ     \/ ⵓⵔ ⵉⵍⵍⵉ ⵓⵜⵜⵓ ⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵜⵜⵓⵙⵏⴼⴰⵍⵏ ⴳⵔ lst1 ⴷ lst2.     \/ ⵉⵏⴳⵔ ⵏⵏⵙⵏ ⵃⵎⴰ ⴰⴷ ⵏⵙⴽⵔ lst1 ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ.     \/ ⴷ ⴰⵔ ⵉⵜⵜⵉⵖⵉⵍ ⵉⵙ ⵉⵖⵉⵢ ⴰⴷ ⵉⵜⵜⵓⵙⵏⴼⵍ ⵏ ⵉⴼⵔⴷⵉⵙⵏ     \/ ⴳ ⵜⵎⵓⴽⵔⵉⵙⵜ ⴰⴷ, ⵔⴰⴷ ⵜⵙⵙⴽⵔ ⵢⴰⵜ ⵜⵎⵔⵙⵜ ⵏⵏⴰ ⵢⵓⵎⵥⵏ ⵙⵏⴰⵜ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ,     \/\/ >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (\"YES\")\n    \/\/ >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l))))\n    \/\/ (\"NO\")\n    \/\/ It is assumed that the input array lists will be non-empty.\n    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n        \/\/ Check if all elements in lst1 are already even\n        boolean allEvenInLst1 = lst1.stream().allMatch(num -> num % 2 == 0);\n        if (allEvenInLst1) {\n            return \"YES\";\n        }\n\n        \/\/ Check if there is at least one even number in lst2\n        boolean hasEvenInLst2 = lst2.stream().anyMatch(num -> num % 2 == 0);\n        if (hasEvenInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> lst1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        ArrayList<Long> lst2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        System.out.println(exchange(lst1, lst2));  \/\/ Output: \"YES\"\n\n        lst1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        lst2 = new ArrayList<>(Arrays.asList(1L, 5L, 3L, 4L));\n        System.out.println(exchange(lst1, lst2));  \/\/ Output: \"NO\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l, (long)3l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)6l, (long)1l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)5l, (long)1l, (long)1l, (long)1l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)100l, (long)200l))), (new ArrayList<Long>(Arrays.asList((long)200l, (long)200l)))).equals((\"YES\")));\n    }\n\n}\n"},{"task_id":"HumanEval_111","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰ ⴼⴰⵍ ⵉⵍⴰⵏ ⵜⵉⴼⵔⵉⵙⴻⵏ ⴰⵋⵋⵓⵜⵏⴻⵏ ⵉⵍⴰⵏⴻⵏ ⵜⵉⴶⴷⴰⵂⵜ, ⵙⴰⴾⵉⵏⴰⵜ ⴼⵓⴾ ⵏⴰⵙⵏⴰⵜ    \/ ⵏ ⵜⴰⴱⵔⴰⵜ ⵏⵏⴰ ⵖⵓⵔ ⵉⵍⵍⴰ ⵓⴳⴳⴰⵔ ⵏ ⵓⵙⵏⵖⵍ ⴷ ⵡⴰⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⴷⵢⴰⵡⵏ.     \/ ⴰ ⴼⴰⵍ ⵉⴾⴼ-ⴰ ⵙⵜⵔⵉⵏⴶ ⵢⵈⵈⴰⵍ ⵏ ⴰⵍⴾⵉⵜⵜⴰⴱⴰⵏ ⵎⴰⴷⵔⵓⵉⵏⵢⵏ ⵉⵋⵋⴰⵏⵢⵏ ⵙ ⵙⴱⵢⵛⵢ, ⵙⴰⴾⵏⵢⵍ ⵂⴰⵙⵂ ⵎⴰⴱ     \/\/ >>> histogram((\"a b c\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l)))\n    \/\/ >>> histogram((\"a b b a\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))\n    \/\/ >>> histogram((\"a b c a b\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))\n    \/\/ >>> histogram((\"b b b b a\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"b\", 4l)))\n    \/\/ >>> histogram((\"\"))\n    \/\/ (new HashMap<String,Long>())\n    public static HashMap<String,Long> histogram(String test) {\n","canonical_solution":"import java.util.HashMap;\n\nclass Problem {\n    public static HashMap<String, Long> histogram(String test) {\n        HashMap<String, Long> countMap = new HashMap<>();\n        \n        if(test == null || test.isEmpty()) {\n            return countMap;\n        }\n        \n        String[] letters = test.split(\"\\\\s+\");\n        \n        long maxCount = 0;\n        \n        for(String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0L) + 1);\n            maxCount = Math.max(maxCount, countMap.get(letter));\n        }\n        \n        HashMap<String, Long> result = new HashMap<>();\n        \n        for(Map.Entry<String, Long> entry : countMap.entrySet()) {\n            if(entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_112","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ     \/ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⴷ-ⵜⵔⵡⵍⴷ ⵜⴰⴱⵔⵔⴰⵜ ⵉⵍⵍⴰ ⴳⵉⵙ ⵓⵡⵜⵜⵓ ⵏ ⵜⵢⴰⴼⵓⵜ ⴷ true\/false ⵉ ⵓⵣⵣⵔⴰⵢ.     \/ ⴰⵜⴰⵔⵉ ⵉⵙⵉⵎ ⵏⵢⵜ ⴱⴰⵍⵉⵏⴷⵔⵓⵎ ⵎⴽ ⴷⴰ ⵢⴰⴽⴽⴰ ⵜⵉⵙⵙⵉ ⵙ ⵓⴷⴼⵍ ⵣⵓⵏⴷ ⵓⴷⴼⵍ.     \/ ⴷⴰⵔⴰⵜ ⵓⵢⵏ, ⵙⵜⵢⴾⵔⴰⵎ ⵎⴻⵗ ⴰⴾⴰⵔⴰⵛⵂ ⵏ ⴰⴾⴰⵔⴰⵛⵂ ⵓⴰ ⵢⵔⴰⵓⴰⵏ ⴻⵈⵈⴰⵍ ⴱⴰⵍⵉⵏⴷⵔⵓⵎ.     \/ ⵏⵜⵜⴰⴽⴽⴰ ⵙⵉⵏ ⵉⵙⵉⵔⵎⵏ s ⴷ c, ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵙⵙⴽⵛⵎ ⴽⵓⵍⵍⵓ ⵉⵙⴽⴽⵉⵍⵏ ⴳ s ⵏⵏⴰ ⵉⴳⴰⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵉ ⴽⵓⵍⵍⵓ ⵉⵙⴽⴽⵉⵍⵏ ⴳ c     \/ ⵜⴰⵣⴰⵍⵍⵉⵜ     \/\/ >>> reverseDelete((\"abcde\"), (\"ae\"))\n    \/\/ (Pair.with(\"bcd\", false))\n    \/\/ >>> reverseDelete((\"abcdef\"), (\"b\"))\n    \/\/ (Pair.with(\"acdef\", false))\n    \/\/ >>> reverseDelete((\"abcdedcba\"), (\"ab\"))\n    \/\/ (Pair.with(\"cdedc\", true))\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n","canonical_solution":"import org.javatuples.Pair;\n\npublic class Problem {\n\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n        Set<Character> charsToDelete = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n        \n        StringBuilder filteredString = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                filteredString.append(ch);\n            }\n        }\n        \n        String resultString = filteredString.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n        \n        return Pair.with(resultString, isPalindrome);\n    }\n\n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals((Pair.with(\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals((Pair.with(\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals((Pair.with(\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals((Pair.with(\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals((Pair.with(\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals((Pair.with(\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals((Pair.with(\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals((Pair.with(\"abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals((Pair.with(\"\", true))));\n    }\n\n}\n"},{"task_id":"HumanEval_113","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵜⵣⵍⵉⵜ ⵜⵉⵙⵙ i ⵏ ⵓⵙⴽⵛⵎ.     \/ⵜⴰⵙⵉⴹⴼⵜ i ⵏ ⵓⵙⴽⵛⵎ\". ⴳ ⵔⴰⴷ ⵜⵜⵓⵙⵏⴼⴰⵍ ⴽⵓⵍⵍⵓ ⵜⵉⵙⵉⴹⴼⵉⵏ ⵙ ⵓⵟⵟⵓⵏ     \/ ⵉⵇⵏⴻⵏ ⴰⴷ ⵉⴳ ⴽⵓ ⵉⴼⵔⴷⵉⵙ i ⵏ ⵜⵢⴰⴼⵓⵜ ⴰⵎⴹⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ     \/ ⴰⵛⴽⵓ ⵏⵜⵜⴰⴼ ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵏ ⵉⵙⵎⵉⵍⵏ ⵏ ⵉⵙⵎⵉⵍⵏ, ⴳ ⴽⵓ ⵉⵙⵎⵉⵍⵏ ⴳⴰⵏ ⵡⵓⵟⵟⵓⵏ, ⵏⵙⵙⴽⵛⵎ ⴰⵙⵎⵉⵍ ⵏ ⵉⵙⵎⵉⵍⵏ ⵏ ⵉⵙⵎⵉⵍⵏ.     \/\/ >>> oddCount((new ArrayList<String>(Arrays.asList((String)\"1234567\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 4n the str4ng 4 of the 4nput.\")))\n    \/\/ >>> oddCount((new ArrayList<String>(Arrays.asList((String)\"3\", (String)\"11111111\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (String)\"the number of odd elements 8n the str8ng 8 of the 8nput.\")))\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n\n        for (String s : lst) {\n            int oddCount = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.isDigit(c)) {\n                    int digit = c - '0';\n                    if (digit % 2 != 0) {\n                        oddCount++;\n                    }\n                }\n            }\n\n            String output = \"the number of odd elements \" + oddCount +\n                            \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\";\n            result.add(output);\n        }\n\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<String> input1 = new ArrayList<String>(Arrays.asList(\"1234567\"));\n        ArrayList<String> result1 = oddCount(input1);\n        System.out.println(result1);\n\n        ArrayList<String> input2 = new ArrayList<String>(Arrays.asList(\"3\", \"11111111\"));\n        ArrayList<String> result2 = oddCount(input2);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"1234567\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 4n the str4ng 4 of the 4nput.\")))));\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"3\", (String)\"11111111\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (String)\"the number of odd elements 8n the str8ng 8 of the 8nput.\")))));\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"271\", (String)\"137\", (String)\"314\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (String)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (String)\"the number of odd elements 2n the str2ng 2 of the 2nput.\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_114","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ     \/ ⵏ ⵉⵎⴹⴰⵏⵏ.     \/ ⴰⵔⴰⴾⴰⵏ ⴰⵙⵉⴾⵉⵍ ⵏ ⴰⵙⵉⴾⵉⵍ ⵏ ⵉⵏⵜⵢⴶⵢⵔ ⵜⴰⵏ ⵏⵓⵎ, ⴰⵋⴰⵔⴰⵓ ⵏ ⴰⴾⴰⵓⴰⴷ ⵏ ⵎⴰⴷⵔⵓⵉⵏ ⵏ ⴰⵙⵉⴾⵉⵍ ⵏ ⴰⵙⵉⴾⵉⵍ ⵏ ⵙⵓⴱ-ⴰⵙⵉⴾⵉⵍ ⵓⴰⵔ ⵏ ⵓⵍⴰⵂ     \/\/ >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l))))\n    \/\/ (1l)\n    \/\/ >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    \/\/ (-6l)\n    public static long minSubArraySum(ArrayList<Long> nums) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"The input list cannot be null or empty\");\n        }\n\n        long minSum = Long.MAX_VALUE;\n        long currentSum = 0;\n\n        for (Long num : nums) {\n            currentSum = Math.min(currentSum + num, num);\n            minSum = Math.min(minSum, currentSum);\n        }\n\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(minSubArraySum(new ArrayList<Long>(Arrays.asList(2L, 3L, 4L, 1L, 2L, 4L))));\n        System.out.println(minSubArraySum(new ArrayList<Long>(Arrays.asList(-1L, -2L, -3L))));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l, (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l, (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l)))) == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l)))) == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l)))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_115","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ 1:     \/ ⴰⴾⵜⴰⴱ ⵏ ⵉⴷⴷⵉⴾⵓⴷ ⵏ ⵜⵉⴾⴰⵔⵙⵉⵓⵢⵏ ⵓⵉ ⵙ ⵉⵋⵋⴰ ⴰⵗⴰⵛⴰⴷ ⵏ ⴱⵓⴾⵙ    ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏⴻⵜ ⵜⴰⵈⵈⴰⵍ ⴰⵆⴰⴷⴰⵎ ⵏ ⴱⴻⵛⵛⴻⵜⴻⵔ ⵜⴰⵏ ⵉ ⴰⵙⵉⵓⴰⴷ ⵏ ⵉⵂⴰⵏⴰⵏ ⵓⵉⵏ ⴰⵗⴰⵍⴰⵉ    \/ ⴷ ⵉⵂⴰⵏⴷⴰⴶⴰⵏ ⴼⵓⴾ ⵉⵍⴰⵏⴰⵜ ⵜⴰⵣⵓⵏⵜ ⵉⵉⵉⴰⵜ    \/ ⴰⵗⴰⵍⴰⵉ ⴼⵓⴾ ⵉⵍⴰ ⴱⵓⴾⵢⵍ ⵓⴰ ⵉⵋⵋⴰⵏ ⵉ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⵢⵆⴷⴰⵎ ⵉ ⴰⵙⵉⵓⴰⴷ ⵏ ⴰⵎⴰⵏ ⴷⴰⵗ ⵢⴷⴰⴶ ⵓⵢⵏ,     \/ ⴷ ⴽⵓ 1 ⴳ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵉⵙⵎⴷⵢⴰⵏ ⵜⴰⵢⵎⵓⵏⵜ ⵏ ⵡⴰⵎⴰⵏ.     ⴾⴰⵍⴰ ⵉⴾⴼⴰⵏ ⵜⴰⵂⵔⵉⴾⴻ ⵏ ⵉⵂⴰⵏⴰⵏ ⵓⵉⵏ ⴰⵗⴰⵍⴰⵉ, ⴾⴰⵍ ⵜⴰⴾⴰⵍⵜ ⵜⴰⵈⵈⴰⵍ ⵉⵂⴰⵏ ⵉⵉⵉⴰⵏ    \/\/ >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\n    \/\/ (6l)\n    \/\/ Example 2:\n    \/\/ >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\n    \/\/ (5l)\n    \/\/ Example 3:\n    \/\/ >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l))\n    \/\/ (0l)\n    \/\/ Constraints:\n    \/\/ * all wells have the same length\n    \/\/ * 1 <= grid.length <= 10^2\n    \/\/ * 1 <= grid[:,1].length <= 10^2\n    \/\/ * grid[i][j] -> 0 | 1\n    \/\/ * 1 <= capacity <= 10\n    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long totalWater = 0;\n        \n        for (ArrayList<Long> row : grid) {\n            for (Long cell : row) {\n                totalWater += cell;\n            }\n        }\n\n        return (long)Math.ceil((double)totalWater \/ capacity);\n    }\n\n    public static void main(String[] args) {\n        ArrayList<ArrayList<Long>> grid1 = new ArrayList<>(Arrays.asList(\n            new ArrayList<>(Arrays.asList(0L, 0L, 1L, 0L)),\n            new ArrayList<>(Arrays.asList(0L, 1L, 0L, 0L)),\n            new ArrayList<>(Arrays.asList(1L, 1L, 1L, 1L))\n        ));\n        System.out.println(maxFill(grid1, 1L)); \/\/ Output: 6\n\n        ArrayList<ArrayList<Long>> grid2 = new ArrayList<>(Arrays.asList(\n            new ArrayList<>(Arrays.asList(0L, 0L, 1L, 1L)),\n            new ArrayList<>(Arrays.asList(0L, 0L, 0L, 0L)),\n            new ArrayList<>(Arrays.asList(1L, 1L, 1L, 1L)),\n            new ArrayList<>(Arrays.asList(0L, 1L, 1L, 1L))\n        ));\n        System.out.println(maxFill(grid2, 2L)); \/\/ Output: 5\n\n        ArrayList<ArrayList<Long>> grid3 = new ArrayList<>(Arrays.asList(\n            new ArrayList<>(Arrays.asList(0L, 0L, 0L)),\n            new ArrayList<>(Arrays.asList(0L, 0L, 0L))\n        ));\n        System.out.println(maxFill(grid3, 5L)); \/\/ Output: 0\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l)) == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l)) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_116","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵉⵇⵏⴻⵏ ⴰⴷ ⵉⵜⵜⵓⵙⵎⵔⵙ ⵣⵓⵏⴷ ⵓⵢⴰ:     \/ ⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⵢⴰⵖⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ, ⵙⵙⵓⴷⵙ ⵅⴼ ⵡⴰⵜⵉⴳ ⴰⵎⵔⴰⵡ.     \/ ⴰⵟⵟⴰⵙ ⵏ ⵉⵎⵉⴹⵏ ⴳ ⵓⵙⵎⴷⵢⴰ ⵏⵏⵙⵏ ⴰⵎⵉⵏⴰⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵓⵇⵕⴰⵏ.     \/ ⴳ ⴽⴰⵜⴰ ⴰⴷ, ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵙⵏⵙⵍⵎ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⵔⵉⵏⵉⵏ ⵙ     \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)-6l, (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\n\nclass Problem {\n\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n        Collections.sort(arr, (a, b) -> {\n            int countOnesA = Long.bitCount(a);\n            int countOnesB = Long.bitCount(b);\n            \n            if (countOnesA != countOnesB) {\n                return countOnesA - countOnesB;\n            } else {\n                return a.compareTo(b);\n            }\n        });\n        return arr;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(1L, 5L, 2L, 3L, 4L))));\n        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(-2L, -3L, -4L, -5L, -6L))));\n        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(1L, 0L, 2L, 3L, 4L))));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l, (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l, (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l, (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_117","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⵜⴰⵏⵎⵎⵉⵔⵜ: ⵉⵖⵢ ⴰⴷ ⵜⵙⵙⵏⵎⴽⵜⵉ ⵎⴰⵙ ⴷ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵓⴽⵛⵛⵓⵎ ⵍⵍⴰⵏⵜ ⵖⴰⵙ ⵉⵙⴽⴽⵉⵍⵏ ⴷ ⵡⴰⵏⵙⵉⵡⵏ.     \/ ⵎⴽ ⵜⴳⴰ ⵜⵉⵙⴳⵓⵔⵉ s ⵜⵓⵎⵥⴰ, ⵇⴰⴷ ⵜⵕⵓⵡⵉ ⵜⴰⵡⵓⵔⵉ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⵓⵔ ⵉⵍⵉⵏ ⴽⵔⴰ.     \/n ⵉⵎⵙⴰⵙⴰⵏ, ⵙ ⵓⴱⵔⵉⴷ ⵏⵏⴰ ⴳ ⵜⵜⵉⵍⵉⵏⵜ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴰⴷ ⴳ ⵜⵣⵍⵉⵜ s.     \/ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵙⴽⴰⵔⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴳ ⵜⴳⵔⵓⵎⵎⴰ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ     \/ ⴰⵛⴽⵓ ⵏⵜⵜⴰⴼⴰ ⵜⵉⴼⵉⵏⴰⵖ s ⴷ ⵓⵟⵟⵓⵏ ⴰⴳⴰⵎⴰⵏ n, ⵏⵜⵜⴰⴼⴰ ⵜⴰⵡⵓⵔⵉ ⵏ ⵓⵙⵎⵔⵙ     \/\/ >>> selectWords((\"Mary had a little lamb\"), (4l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"little\")))\n    \/\/ >>> selectWords((\"Mary had a little lamb\"), (3l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n    \/\/ >>> selectWords((\"simple white space\"), (2l))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> selectWords((\"Hello world\"), (4l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"world\")))\n    \/\/ >>> selectWords((\"Uncle sam\"), (3l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s == null || s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        for (String word : words) {\n            long consonantCount = countConsonants(word);\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private static long countConsonants(String word) {\n        long count = 0;\n        for (char c : word.toCharArray()) {\n            if (isConsonant(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    private static boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return \"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_118","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⵜⵙⵙⵏⵎⴽⵜⵉ ⵎⴰⵙⴷ ⵜⴰⵡⴰⵍⵜ ⵏⵏⴰ ⴷ ⵉⴼⴽⴰⵏ ⵍⵍⴰⵏⵜ ⵖⴰⵙ ⵜⵉⵔⵔⴰ ⵏ ⵜⵓⵜⵍⴰⵢⵜ ⵜⴰⵎⴰⵣⵉⵖⵜ.     \/ⴰⴼⴰ ⴽⵔⴰ ⵏ ⵓⵊⴷⵉⵍ ⵉⵔⵡⴰⵏ ⵙ ⵡⴰⴷⴷⴰⴷ ⵏ ⴰⴼⵍⵍⴰ.     \/ ⵓⵔ ⴷⴰ ⵜⵜⵓⵙⵉⴹⵏ ⵉⵎⴽⴽⴰⵍⵏ ⴳ ⵜⵉⵣⵡⵉⵔⵉ ⴷ ⵜⴳⵉⵔⴰ. ⵔⴰⵏⵜⵔ ⵜⴰⵣⵍⵉⵜ ⵜⴰⵅⵍⴰⴼⵜ ⵎⴽ ⵓⵔ ⵜⵍⵍⵉ     \/ ⵙⵉⵏ ⵉⵎⵙⴰⵙⴰⵏ ⵙⴳ ⵜⵙⴳⴰ ⵏ ⵡⴰⵡⴰⵍ (ⵜⴰⵎⵙⴰⵙⴰ ⵏ ⵡⴰⵏⵙⴰ).    \/ ⴰⵜⵓⴰⴾⴰ-ⵜ-ⵉⵍⴰⵍ ⵉ-ⴰⵍⵎⴰⵗⵏⴰⵜ. ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏⴻⵜ ⵜⴰⵈⵈⴰⵍ ⴰⵋⴰⵔⴰⵓ ⵏ ⴰⵓⴰ ⵉⵍⴰⵏ ⵋⵉⵔ    \/\/ >>> getClosestVowel((\"yogurt\"))\n    \/\/ (\"u\")\n    \/\/ >>> getClosestVowel((\"FULL\"))\n    \/\/ (\"U\")\n    \/\/ >>> getClosestVowel((\"quick\"))\n    \/\/ (\"\")\n    \/\/ >>> getClosestVowel((\"ab\"))\n    \/\/ (\"\")\n    public static String getClosestVowel(String word) {\n","canonical_solution":"public static String getClosestVowel(String word) {\n    String vowels = \"AEIOUaeiou\";\n    int len = word.length();\n    if (len < 3) {\n        return \"\";\n    }\n    \n    for (int i = len - 2; i > 0; i--) {\n        char currentChar = word.charAt(i);\n        if (vowels.indexOf(currentChar) != -1) {\n            char prevChar = word.charAt(i - 1);\n            char nextChar = word.charAt(i + 1);\n            if (vowels.indexOf(prevChar) == -1 && vowels.indexOf(nextChar) == -1) {\n                return String.valueOf(currentChar);\n            }\n        }\n    }\n    \n    return \"\";\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"},{"task_id":"HumanEval_119","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⴷ ⵢⴰⵖ \"ⵢⴰ\" ⵎⴽ ⵉⵍⵍⴰ ⵢⴰⵏ ⵓⴱⵔⵉⴷ ⵉ ⵓⵙⴽⴰⵔ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵉⵖⵓⴷⴰⵏ, ⴷ ⴰⴷ ⵢⴰⵖ \"ⵓⵀⵓ\" ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵡⴰⴷⴷⴰⴷ.     \/ \"()) \" ⵓⵔ ⵉⴳⵉ.     \/ ⴰⵈⵈⴰⵍⴰⵏ ⴰ ⵓⵍⴰⵂⴰⵏ. ⴰⵍⵎⵉⵜⴰⵍ: ⵙⵜⵔⵉⵏⴶ '(()))) ' ⵢⵈⵈⴰⵍ ⵓⵍⴰⵗⴰⵏ, ⴰⵙ ⵉⵋⵋⴰ ⴰⵓⵢⵏ ⵙⵜⵔⵉⵏⴶ     \/ ⴷⴰ ⵉⵜⵜⵓⵙⵎⵔⴰⵙ ⵢⴰⵏ ⵓⵙⵉⴹⵏ S ⵙ ⵉⵙ ⵉⴳⴰ ⵉⵖⵓⴷⴰⵏ ⵉⴳ ⴷ ⵖⴰⵙ ⵉⴳ ⵎⴰⵕⵕⴰ ⵉⴽⵕⵕⴰⵥⵏ ⴳ S     \/ ⴰⴱⴰⵔⴰ ⵉⵉⵉⴰⵏ, ⴰⵙ ⵜⴰⴱⴰⵔⴰⵜ ⵜⴰ ⵜⴰⵋⴰⵜ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⵜⴰⵈⵈⵉⵍ ⵜⴰⵂⵓⵙⵙⴰⵉ.    ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏⵢⵜ ⵜⴰⵈⵈⴰⵍ ⴰⴾⴰⵉⴰⴷ ⴰⵙ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⵉⴾⵉⵉ ⵙⴰⵏⴰⵜⴰⵜⴰⵜ ⵙⵜⵔⵢⵏⴶ ⵜⴰⵏ ⴷⴰⵗ    \/ ⴰⵗⴰⵍⴰⵉⴰⵏ \" ((\" ⵎⴻⵗ ⴰⵗⴰⵍⴰⵉⴰⵏ ⵓⵉ ⴰⵗⴰⵍⴰⵉⴰⵏ \") \"     \/ ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵔⵎⵉⵜ ⵏ ⵜⵔⵎⵉⵜ ⵏ ⵙⵏⴰⵜ ⵜⵣⵍⵉⵜⵉⵏ, ⵙⵏⴰⵜ ⵜⵣⵍⵉⵜⵉⵏ ⴳⴰⵏⵜ ⵜⵉⴼⵔⴽⵉⵏ     \/\/ >>> matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\"))))\n    \/\/ (\"Yes\")\n    \/\/ >>> matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\")\"))))\n    \/\/ (\"No\")\n    public static String matchParens(ArrayList<String> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static String matchParens(ArrayList<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n\n        \/\/ Check s1 + s2\n        if (isBalanced(s1 + s2)) {\n            return \"Yes\";\n        }\n\n        \/\/ Check s2 + s1\n        if (isBalanced(s2 + s1)) {\n            return \"Yes\";\n        }\n\n        \/\/ None are balanced\n        return \"No\";\n    }\n    \n    private static boolean isBalanced(String str) {\n        int balance = 0;\n        for (char c : str.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) { \n                return false; \n            }\n        }\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> test1 = new ArrayList<>(Arrays.asList(\"()(\", \")\"));\n        System.out.println(matchParens(test1)); \/\/ Output: Yes\n\n        ArrayList<String> test2 = new ArrayList<>(Arrays.asList(\")\", \")\"));\n        System.out.println(matchParens(test2)); \/\/ Output: No\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"},{"task_id":"HumanEval_120","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ 1:     \/ ⵏ ⵜⵉⵖⵣⵉ k ⴷ ⵡⵓⵟⵟⵓⵏ k ⴳ arr.     \/ ⴷⴰⵜ ⵏ ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵜⵍⴳⴰⵎⵜ arr ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⵢⴰⵏ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ k, ⵙⵙⴽⵛⵎ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵜⵍⴳⴰⵎⵜ     \/\/ >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))\n    \/\/ Example 2:\n    \/\/ >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))\n    \/\/ Example 3:\n    \/\/ >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l)))\n    \/\/ Note:\n    \/\/ 1. The length of the array array list will be in the range of [1, 1000].\n    \/\/ 2. The elements in the array array list will be in the range of [-1000, 1000].\n    \/\/ 3. 0 <= k <= len(arr)\n    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n\n    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        \/\/ Sort the array list in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        \/\/ Prepare the result list to store the maximum k elements\n        ArrayList<Long> result = new ArrayList<Long>();\n\n        \/\/ Add the first k elements to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        \n        \/\/ Sort the result in ascending order as per the problem statement\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        \/\/ Example 1\n        ArrayList<Long> example1 = new ArrayList<Long>();\n        Collections.addAll(example1, -3L, -4L, 5L);\n        System.out.println(maximum(example1, 3));\n\n        \/\/ Example 2\n        ArrayList<Long> example2 = new ArrayList<Long>();\n        Collections.addAll(example2, 4L, -4L, 4L);\n        System.out.println(maximum(example2, 2));\n\n        \/\/ Example 3\n        ArrayList<Long> example3 = new ArrayList<Long>();\n        Collections.addAll(example3, -3L, 2L, 1L, 2L, -1L, -2L, 1L);\n        System.out.println(maximum(example3, 1));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l, (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l, (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_121","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ ⵜⴰⵏ     \/ ⴷⴰⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⵅⵡⴰⵏ, ⵙⵙⴽⵛⵎ ⵜⴰⴳⵓⵜ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳ ⵡⴰⵏⵙⴰ ⵉⵎⵣⴰⵔⴰⵢⵏ.     \/\/ >>> solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l))))\n    \/\/ (12l)\n    \/\/ >>> solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l))))\n    \/\/ (9l)\n    \/\/ >>> solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l))))\n    \/\/ (0l)\n    public static long solution(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Given a non-empty array list of integers, return the sum of all of the odd elements that are in even positions.\n    public static long solution(ArrayList<Long> lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) { \/\/ Iterate over even indices (0-based)\n            long num = lst.get(i);\n            if (num % 2 != 0) { \/\/ Check if the element is odd\n                sum += num;\n            }\n        }\n        return sum;\n    }\n\n    \/\/ Test the solution method\n    public static void main(String[] args) {\n        System.out.println(solution(new ArrayList<>(Arrays.asList(5L, 8L, 7L, 1L)))); \/\/ Expected output: 12\n        System.out.println(solution(new ArrayList<>(Arrays.asList(3L, 3L, 3L, 3L, 3L)))); \/\/ Expected output: 9\n        System.out.println(solution(new ArrayList<>(Arrays.asList(30L, 13L, 24L, 321L)))); \/\/ Expected output: 0\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l)))) == (12l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l)))) == (9l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l)))) == (5l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)23l, (long)32l)))) == (23l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)13l, (long)2l, (long)9l)))) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_122","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⵜⵉⴳ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵙⵏⴰⵜ ⵜⴽⵕⴹⵉⵡⵉⵏ ⴳ ⵓⴳⴳⴰⵔ ⵙⴳ k ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⵡⵓⵔⴰ ⵏ arr.     \/ ⵉⴳ ⵏⵙⴽⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵓⵔ ⵉⴳⵉⵏ ⵜⵍⵍⴰⵍⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ arr ⴷ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ k, return     \/\/ >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    \/\/ (24l)\n    \/\/ Constraints:\n    \/\/ 1. 1 <= len(arr) <= 100\n    \/\/ 2. 1 <= k <= len(arr)\n    public static long addElements(ArrayList<Long> arr, long k) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long addElements(ArrayList<Long> arr, long k) {\n        long sum = 0;\n        for (int i = 0; i < k; i++) {\n            long element = arr.get(i);\n            if (element < 100) {\n                sum += element;\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))), (1l)) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_123","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ get_odd_collatz(5) ⴷⴰ ⵉⵜⵜⵔⴰⵔ [1, 5] # ⵜⴰⵍⵖⴰ ⵏ ⴽⵓⵍⵍⴰⵜⵣ ⵉ 5 ⵜⴳⴰ [5, 16, 8, 4, 2, 1], ⴰⵢⴰⴷ ⵉⴳⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵅⴰⵙ 1, ⴷ 5.     \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ 2. ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ ⵉⵜⵜⵓⵙⵎⵓⵜⵜⴰⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵔⵏⵉⵡ.    \/ 1. ⴽⵓⵍⵍⴰⵜⵣ ((1) ⵉⴳⴰ [1].     \/ ⴰⵜⵡⵉⵍ:     \/ⵜⵉⵔⵎ ⴱⵍⴰⵙ 1. ⵜⵍⵍⴰ ⵜⵓⵔⴷⴰ ⵎⴰⵙ ⴷ ⵡⴰⵜⵉⴳ ⴰⵜⵜⴰⵢⵏ ⵏ n, ⵔⴰⴷ ⵜⵍⴽⵎ ⵜⵉⴼⵔⴽⵜ ⴰⵀⴰ 1.    \/ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ ⴰⵛⴽⵓ    \/ ⴰⴱⵔⵉⴷ ⵉⵣⵔⵉⵏ ⴰⵎⵎ ⵡⴰⴷ: ⵉⵖ ⵉⴳⴰ ⵓⴱⵔⵉⴷ ⵉⵣⵔⵉⵏ ⴰⵎⵎ ⵓⴽⵙⴰⵢ, ⵔⴰⴷ ⵉⴳ ⵓⴱⵔⵉⴷ ⴰⵎⴹⴼⴰⵕ ⴰⵎⵎⴰⵙ ⵏ     \/ ⵙ ⵡⴰⵏⴰⵡ ⴰⴷ: ⵙⵙⵏⵜⵉ ⵙ ⴽⵔⴰ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ n. ⴷⴼⴼⵉⵔ ⵏ ⵓⵢⴰ, ⴷⴰ ⵜⵜⵓⵢⴰⴽⴽⴰ ⴽⵓ ⵜⴰⵙⴳⵓⵔⵉ ⵙⴳ     \/ ⵜⴰⴳⵏⵉⵜ ⵏ ⴽⵓⵍⵍⴰⵣ ⵜⴳⴰ ⵜⴰⴳⵏⵉⵜ ⴳ ⵜⵓⵙⵏⴰⴽⵜ ⵏⵏⴰ ⵉⵥⵍⵉⵏ ⵙ ⵢⴰⵏ ⵓⴹⴼⴼⵓⵕ ⵉⵜⵜⵓⵙⵏⵎⵍⵏ     \/ ⴷⴰⵜ ⵏ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵙⵙⴽⵛⵎ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⵓⴷⵙⵏ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵓⵙⵓⵔⵙ ⵏ ⴽⵓⵍⴰⵜⵣ.     \/\/ >>> getOddCollatz((5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))\n    public static ArrayList<Long> getOddCollatz(long n) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<Long> getOddCollatz(long n) {\n        TreeSet<Long> oddNumbers = new TreeSet<>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                oddNumbers.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n \/ 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        oddNumbers.add(1L); \/\/ Adding 1 as it is always included in the sequence\n        return new ArrayList<>(oddNumbers);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(getOddCollatz(5)); \/\/ Example usage\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getOddCollatz((14l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));\n    assert(getOddCollatz((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))));\n    assert(getOddCollatz((12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)))));\n    assert(getOddCollatz((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_124","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ 4. ⴷⴰⵜⴰ ⵉⵋⵋⴰ ⴷⴰⵗ ⴼⵓⵔⵎⴰⵜ: ⵎⵎ-ⴷⴷ-ⵢⵢⵢⵢⵢⵉ     \/ 3. ⵓⵔ ⵉⵅⵚⵚⴰ ⴰⴷ ⵉⴳ ⵡⴰⵢⵢⵓⵔⵏ ⴷⴷⵔⵓⵙⵏ ⵙⴳ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 12.    \/ 2. ⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵙⵙⴰⵏ ⵓⵔ ⵉⴳⵉ ⴷⵔⵓⵙ ⵏ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 31 ⵏ ⵡⵓⵙⵙⴰⵏ ⵉ ⵡⴰⵢⵢⵓⵔⵏ 1,3,5,7,8,10,12. ⴷ ⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵙⵙⴰⵏ ⵓⵔ ⵉⴳⵉ ⴷⵔⵓⵙ ⵏ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 30 ⵏ ⵡⵓⵙⵙⴰⵏ ⵉ ⵡⴰⵢⵢⵓⵔⵏ 4,6,9,11. ⴷ ⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵙⵙⴰⵏ ⵓⵔ ⵉⴳⵉ ⴷⵔⵓⵙ ⵏ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 29 ⵉ ⵡⴰⵢⵢⵓⵔ 2.    \/ 1. ⵜⴰⵣⵓⵏⵉ ⵏ ⵡⴰⵙⵙ ⵓⵔ ⵜⴳⵉ ⵜⵍⵍⴰⵍⵜ.     \/ ⴰⵙⵙⴰⵂⴰⵜ ⵜⴰⵈⵈⴰⵍ ⴰ ⵓⴰⵔ ⵏ ⵉⵍⴰ ⴰⵍⵆⵉⴷⵎⴰⵜⵢⵏ ⴰⵋⵋⵓⵜⵏⵢⵏ ⴰ ⴼⴰⵍ ⵉⵋⵋⴰⵏ ⵜⵉ ⵉⵍⴾⴰⴷⴰⵏ ⵓⵉⵏ ⴷⴰⵜⴰ:     \/ ⴷⴰ ⵉⵜⵜⴰⵊⵊⵓ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵡⴰⵙⵙ ⴰⵣⵔⴼⴰⵏ ⵎⴽ ⵓⵔ ⵉⴳⵉ ⵜⵉⴷⵜ.     \/ ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⵉⵜ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵎⵔⴰⵙⵏ ⵜⵉⴼⵔⴽⵜ ⵏ ⵡⴰⵙⵙ ⴷ     \/\/ >>> validDate((\"03-11-2000\"))\n    \/\/ (true)\n    \/\/ >>> validDate((\"15-01-2012\"))\n    \/\/ (false)\n    \/\/ >>> validDate((\"04-0-2040\"))\n    \/\/ (false)\n    \/\/ >>> validDate((\"06-04-2020\"))\n    \/\/ (true)\n    \/\/ >>> validDate((\"06\/04\/2020\"))\n    \/\/ (false)\n    public static boolean validDate(String date) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static boolean validDate(String date) {\n        if (date == null || date.isEmpty() || date.length() != 10) {\n            return false;\n        }\n\n        \/\/ Check if format is mm-dd-yyyy\n        if (date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n\n        try {\n            int month = Integer.parseInt(date.substring(0, 2));\n            int day = Integer.parseInt(date.substring(3, 5));\n            int year = Integer.parseInt(date.substring(6, 10));\n            \n            if (month < 1 || month > 12) {\n                return false;\n            }\n\n            boolean isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n            int[] daysInMonth = {0, 31, (isLeapYear ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            \n            if (day < 1 || day > daysInMonth[month]) {\n                return false;\n            }\n            \n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_126","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ ⵜⴰⵏ     \/ number, return false. ⵓⵔ ⴷⴰ ⵏⵜⵜⴰⴼⵉ ⵉⵎⴹⴰⵏ ⵉⵔⵉⵏⵉⵏ ⴷ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ.     \/ ⵙ ⵓⵍⵍⴰⵍ ⵏ ⵓⵙⵙⵓⴷⵙ. ⵉⵖ ⴷⴰⵔ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⵜⴳⴳⴰⵔⵏ ⵓⴳⴳⴰⵔ ⵏ 1 ⵏ ⵓⵎⵙⴽⴰⵔ ⵏ ⵢⴰⵏ     \/ ⴰⵔⴰⴷⴰⴱⵓ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⵙⵎⵉⵍ, ⴰⵔ ⵉⵜⵜⴰⴽⴰ ⵎⴽ ⴳⴰⵏ ⵡⴰⵏⴰⵡⵏ ⵏⵖ ⵓⵔ ⴳⵉⵏ ⵡⴰⵏⴰⵡⵏ.    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n    \/\/ (false)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l))))\n    \/\/ (false)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (false)\n    public static boolean isSorted(ArrayList<Long> lst) {\n","canonical_solution":"public static boolean isSorted(ArrayList<Long> lst) {\n        if (lst == null || lst.size() <= 1) {\n            return true;\n        }\n        int duplicateCount = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n            if (lst.get(i).equals(lst.get(i - 1))) {\n                duplicateCount++;\n                if (duplicateCount > 1) {\n                    return false;\n                }\n            } else {\n                duplicateCount = 0;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_127","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ [ⵉⵏⴱⵓⵜ\/ⵓⵓⵜⴱⵓⵜ] ⵙⵜⵓⵎⴱⵍⵙ:     \/ ⴰ ⴼⴰⵍ ⵉⵏⴰⵙⵋⵓⵎⴰⵏ ⵓⵉⵏ ⵓⴰⵔ ⴰⴾⴾⴰⵙⴰⵏ, ⵙⴰⴾⵉⵏ \"ⵓⴰⵔ\"    \/ ⵎⴽ ⵓⵔ ⵉⴳⵉ, ⵔⵉⵜⵓⵔ \"ⵓⵀⵓ\".     \/ ⵎⴽ ⵉⴳⴰ ⵓⵖⵣⵉ ⵏ ⵓⵙⵎⴽⵍ ⴰⵎⵉⴹⴰⵏ ⴰⵎⵣⵡⴰⵔⵓ, ⵙⵙⴽⵛⵎ \"YES\",     \/ ⵏⵏⴰ ⴷ ⵉⴽⴽⴰⵏ ⵜⵉⵖⵣⵉ ⵏⵏⵙ 1, ⵏⵏⴰ ⵓⵔ ⵉⴳⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⵣⵡⵓⵔⴰ.     \/ ⴰⵍⵎⵉⵜⴰⵍ, ⴰⴾⴰⵔⵓⵙ ⵏ ⵉⵋⵉ ⵏ ⵜⵉⵣⵓⵋⵉⵋⴰ (1, 3), (2, 4) ⴻⵈⵈⴰⵍ (2, 3)     \/ ⵉⵙⵏⵓⵎⵎⵍⵏ ⵉⴳⴰ ⵓⵟⵟⵓⵏ ⴰⵎⵣⵡⴰⵔⵓ.     \/ ⵜⴰⵣⴰⵍⵍⵉⵜ ⵏⴽ ⵜⴳⴰ ⴰⴷ ⵏⵙⵙⴽⵜⴰⵢ ⵎⴰⵢⴷ ⵉⴳⴰⵏ ⵜⵉⵖⵣⵉ ⵏ ⵓⴱⵔⴰⵔⴰ ⵏ ⵙⵏⴰⵜ     \/ ⵉ ⴰⵣⵣⴰⵎⴰⵏ ⴼⵓⴾ, ⵉⵋⵋⴰ ⴰⵙ ⵜⵉⵣⴰⵔⴰⵜ ⵏⵢⵜ ⵜⴰⵈⵈⴰⵍ ⴰ ⵓⴰⵔ ⵏ ⵉⵋⵋⴰ ⵎⵢⵗ ⵜⵉ ⵓⴶⴷⴰⵂ ⵉⴷ ⵜⴰⴾⵔⴰⵎⴱⵓⵜ ⵏⵢⵜ    \/ ⴰⵂⴰⵏ ⵜⵉⵣⴰⵔⴰⵜ ⴷ ⵜⴰⵏⴰⵎⵎⴰⵙⵜ    \/ ⴰⵣⵣⴰⵎⴰⵏⴰⵏ ⵓⵉⵏ ⴰⴾⴰⵉⴰⴷ ⴰⵈⵈⴰⵍⴰⵏ ⴰ ⵉⴾⴾⴰⵏⵢⵏ ⴰⵓⵢⵏ ⴰⵍⵎⴰⵗⵏⴰ ⵏⵢⵜ ⴰⵙ ⴰⵣⵣⴰⵎⴰⵏ ⵓⴰ (ⵜⴰⵣⴰⵔⴰⵜ, ⴰⵎⵉⵏⴷⵉ)    \/ ⴳ ⵉⴳⴰ ⴽⵓ ⵓⵣⵎⵣ ⵢⴰⵏ ⵓⵣⴳⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵙ ⵓⵎⴷⵢⴰ, ⴰⵣⵎⵣ = (ⵜⴱⴷⴰⴷⵜ, ⵜⴳⵉⵔⴰ) = (1, 2).    \/ ⴰⵜⵓⴰⵣⴰⵉⴰⵏ ⵙⴰⵏⴰⵜ ⵉⴾⴰⵍⵍⴰⵏ,     \/\/ >>> intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l)))\n    \/\/ (\"NO\")\n    \/\/ >>> intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l)))\n    \/\/ (\"NO\")\n    \/\/ >>> intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l)))\n    \/\/ (\"YES\")\n    public static String intersection(Pair<Long, Long> interval1, Pair<Long, Long> interval2) {\n","canonical_solution":"import org.javatuples.Pair;\n\npublic class Problem {\n    public static String intersection(Pair<Long, Long> interval1, Pair<Long, Long> interval2) {\n        long start1 = interval1.getValue0();\n        long end1 = interval1.getValue1();\n        long start2 = interval2.getValue0();\n        long end2 = interval2.getValue1();\n\n        long startIntersection = Math.max(start1, start2);\n        long endIntersection = Math.min(end1, end2);\n\n        if (startIntersection > endIntersection) {\n            return \"NO\";\n        }\n\n        long intersectionLength = endIntersection - startIntersection;\n\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static boolean isPrime(long n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(intersection(Pair.with(1L, 2L), Pair.with(2L, 3L))); \/\/ \"NO\"\n        System.out.println(intersection(Pair.with(-1L, 1L), Pair.with(0L, 4L))); \/\/ \"NO\"\n        System.out.println(intersection(Pair.with(-3L, -1L), Pair.with(-5L, 5L))); \/\/ \"YES\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"},{"task_id":"HumanEval_128","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⵜⴰⵏⵎⵎⵉⵔⵜ: ⴰⵔ ⵏⴰⴽⴽⴰ null ⵉ arr ⵓⵔ ⵉⵍⵉⵏ ⴽⵔⴰ.     \/ ⵏ ⴽⵓ ⵓⵟⵟⵓⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ, ⵉⵜⵜⵓⵙⵎⴷⵢⴰⵢⵏ ⵙ 1, -1 ⵏⵖⴷ 0.     \/ ⴰⵖⵓⴷⵓ ⵏ ⵡⵓⴳⴳⵓⴳⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵣⴷⴷⴰⵢⵏ ⵙ ⵜⵢⴰⴼⵓⵜ ⵏ ⵉⵙⵎⴰⵡⵏ ⴰⴽⴽⵡ     \/ ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵛⵛⵓⵎⵏ ⵏ ⵓⵙⵏⵖⵍ ⵏ ⵓⵙⵏⵖⵍ ⵏ ⵜⵍⴳⴰⵎⵜ arr ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵔⴰⵔ     \/\/ >>> prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l))))\n    \/\/ Optional.of(9l)\n    \/\/ >>> prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l))))\n    \/\/ Optional.of(0l)\n    \/\/ >>> prodSigns((new ArrayList<Long>(Arrays.asList())))\n    \/\/ Optional.empty()\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        long sumOfMagnitudes = 0;\n        long productOfSigns = 1;\n\n        for (Long num : arr) {\n            sumOfMagnitudes += Math.abs(num);\n            if (num < 0) {\n                productOfSigns *= -1;\n            } else if (num == 0) {\n                productOfSigns = 0;\n            }\n        }\n\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n    \n    public static void main(String[] args) {\n        \/\/ Test cases\n        System.out.println(prodSigns(new ArrayList<Long>(Arrays.asList(1L, 2L, 2L, -4L)))); \/\/ Optional[9]\n        System.out.println(prodSigns(new ArrayList<Long>(Arrays.asList(0L, 1L)))); \/\/ Optional[0]\n        System.out.println(prodSigns(new ArrayList<Long>())); \/\/ Optional.empty\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l, (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n    }\n\n}\n"},{"task_id":"HumanEval_129","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵡⴰⵜⵉⴳⵏ ⵏ ⵜⵖⵔⴰⵙⵉⵏ ⵏⵏⴰ ⵙ ⴷⴰ ⵉⵜⵜⵎⵓⵜⵜⵓ ⵓⴱⵔⵉⴷ ⴰⵎⵥⵥⵢⴰⵏ.     \/ ⴰⵍⴰⵗⴰⵜ ⴰⵙ ⴰⵍⵓⴰⵣⴰⴱ ⵓⴰⵔ ⵢⵈⵈⵢⵍ ⵓⴰ ⵢⵣⵣⴰⵔⴰⵏ    \/ⴰⵍⵙⵜ_ⴰ[ⵊ] =ⴰⵍⵙⵜ_ⴱ[ⵊ] .    \/ ⵣⵓⵏⴷ ⵉⵙ lst_A[i] < lst_B[i] ⴷ ⵉ ⴽⵓ j (1 <= j < i) ⵖⵓⵔⵖ     \/ ⵓⴳⴳⴰⵔ ⵏ lst_B, ⵙ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵢⴰⴹⵏ, ⵉⵍⵍⴰ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ i (1 <= i <= k)     \/ ⵙ (ⴰⴷ ⵏⵔⴰⵎ ⴰⵙⵏ lst_A ⴷ lst_B), lst_A ⴷ ⵡⴰⵔ ⵉⴷⵔⵓⵙ     \/ ⴷⴼⴼⵉⵔ ⵏ ⵓⵙⴽⴰⵔ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵉⵎⵙⵓⴷⵙⵏ ⵏ ⵡⴰⵜⵉⴳⵏ ⴳ ⵜⵖⵔⴰⵙⵉⵏ ⵏⵏⴰ ⴳ ⴳⵉⵏ A ⴷ B     \/ ⴰⴱⵔⵉⴷ A (ⵙ ⵜⵉⵖⵣⵉ k) ⵉⴳⴰ ⴰⵎⵥⵥⵢⴰⵏ ⵏ ⵓⴱⵔⵉⴷ B (ⵙ ⵜⵉⵖⵣⵉ k) ⵎⴽ     \/ ⵓⴰⵔ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⴰⴾⴾⴻⵜ ⵙ ⴶⵔⵉⴷ    \/ ⴰⵍⴰⵗⵉ ⵏⴰⵜ ⴰⵙ ⵓⴰⵔ ⵏ ⴰⵍⴰⵗⵉ)    \/ ⴰⵜⵓⴰⵣⴰⵉ ⴰⵙ ⴰⴱⴰⵔⴰ ⵓⴰⵏ ⵜⵉⵛⵉⵋⵔⵉⵜ ⵏ k ⴰⵎⵓⵙ ⴰⵙⵉⴾⵉ ⵏ ⵂⴰⵔⴰⵜ ⵏ ⵛⵢⵍⵍ ⵜⴰⵏ (ⵓⴰⵔ ⵏ ⴰⵈⵈⵢⵍ     \/ ⴰⴱⵓⵍⵉⵙⵜ.     \/ ⵙ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵢⴰⴹⵏ, ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵣⵔⵉⴷ ⵙ ⵜⵖⵔⴰⵙⵉⵏ ⵏⵏⴰ ⴷⴰⵔ ⵜⴰⵣⵣⵉⴳⵣⵜ ⵏ ⵓⵥⴰⵡⴰⵏ ⴰⴽⴷ ⵓⵥⴰⵡⴰⵏ     \/ⴷⴰⵗ ⵜⴰⴱⴰⵔⴰⵜ ⴼⵓⴾ ⴰⴷⴷⵓⴱⴰⵜⴰⵏ ⴰⴷ ⴰⴾⵉⵉⴰⴷⴰⵏ ⵙ ⵜⴰⴱⴰⵔⴰⵜ ⵜⴰⵏ ⵓⵉ ⵉⴰⴷⵏⵢⵏ    ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⴰⴼⴷ ⴰⴱⵔⵉⴷ ⴰⵎⵥⵥⵢⴰⵏ ⵏ ⵜⵉⵖⵣⵉ k ⴳ ⵜⴽⵔⵔⴰⵢⵜ. ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⵜⵉ.    \/ ⵢⵂⴰⴾ ⵢⵈⵈⴰⵍ ⵂⴰⵔⴰⵜ ⵉⵉⵉⴰⵏ ⴷⴰⵗ ⵜⴰⵗⵉⵙⵙⴰ ⵜⴰⵏ ⵏ ⴶⵔⵉⴷ    \/ ⴽⵓ ⵜⴰⵖⵔⴰⵙⵜ ⵏ ⵜⴽⵔⵟⴰ ⵜⵍⵍⴰ ⴳ ⵡⴰⵜⵉⴳ. ⴽⵓ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳ ⵓⵙⵏⴼⵍ [1, N * N]     \/ ⴰ ⴼⴰⵍ ⵉⵍⴰ ⴶⵔⵉⴷ ⵉⵍⴰⵏ N ⵏ ⵉⵉⴰⴾⴰ ⵜⴰⵏ ⴷ N ⵏ ⵉⵛⵛⵉⴾⵉⵍⴰⵏ (ⵏ >= 2) ⴷ ⵉⴷⴷⵉⴾⵓⴷ ⵏ ⴰⴾⴾⵓⵣ ⵏ ⴱⵓⵣⵉⵜⵉⴱ k,     \/\/ >>> minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))\n    \/\/ >>> minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l)))\n    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.PriorityQueue;\n\nclass Problem {\n\n    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {\n        int n = grid.size();\n        int[] dx = {0, 0, 1, -1};\n        int[] dy = {1, -1, 0, 0};\n\n        PriorityQueue<Path> pq = new PriorityQueue<>();\n        \/\/ Start from each cell and try to find the minimum path\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.add(new Path(i, j, k, grid.get(i).get(j)));\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            Path current = pq.poll();\n            if (current.k == 1) {\n                return current.path;\n            }\n            for (int dir = 0; dir < 4; dir++) {\n                int ni = current.x + dx[dir];\n                int nj = current.y + dy[dir];\n                if (ni >= 0 && ni < n && nj >= 0 && nj < n) {\n                    ArrayList<Long> newPath = new ArrayList<>(current.path);\n                    newPath.add(grid.get(ni).get(nj));\n                    pq.add(new Path(ni, nj, current.k - 1, newPath));\n                }\n            }\n        }\n\n        return new ArrayList<>();\n    }\n\n    static class Path implements Comparable<Path> {\n        int x, y;\n        long k;\n        ArrayList<Long> path;\n\n        Path(int x, int y, long k, long value) {\n            this.x = x;\n            this.y = y;\n            this.k = k;\n            this.path = new ArrayList<>();\n            this.path.add(value);\n        }\n\n        Path(int x, int y, long k, ArrayList<Long> path) {\n            this.x = x;\n            this.y = y;\n            this.k = k;\n            this.path = path;\n        }\n\n        @Override\n        public int compareTo(Path other) {\n            for (int i = 0; i < this.path.size(); i++) {\n                int comparison = Long.compare(this.path.get(i), other.path.get(i));\n                if (comparison != 0) {\n                    return comparison;\n                }\n            }\n            return 0;\n        }\n    }\n\n    public static void main(String[] args) {\n        ArrayList<ArrayList<Long>> grid1 = new ArrayList<>();\n        grid1.add(new ArrayList<>(Arrays.asList(1L, 2L, 3L)));\n        grid1.add(new ArrayList<>(Arrays.asList(4L, 5L, 6L)));\n        grid1.add(new ArrayList<>(Arrays.asList(7L, 8L, 9L)));\n        System.out.println(minPath(grid1, 3L));\n\n        ArrayList<ArrayList<Long>> grid2 = new ArrayList<>();\n        grid2.add(new ArrayList<>(Arrays.asList(5L, 9L, 3L)));\n        grid2.add(new ArrayList<>(Arrays.asList(4L, 1L, 6L)));\n        grid2.add(new ArrayList<>(Arrays.asList(7L, 8L, 2L)));\n        System.out.println(minPath(grid2, 1L));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)11l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)14l, (long)15l, (long)16l))))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)12l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)16l, (long)11l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l))))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)1l, (long)10l, (long)1l, (long)10l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)11l, (long)16l))))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)7l, (long)1l, (long)7l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l))))), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l))))), (12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)9l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_130","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⵉⵎⴹⴰⵏ ⵏ ⵜⵔⵉⴱⵓⵏⴰⵛⵛⵉ ⴰⵎⵣⵡⴰⵔⵓ n + 1.     \/ ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽⴹ ⴰⵎⴷⴷⴰⴷ ⵓⵔ ⵉⴳⵉⵏ ⴰⵎⵏⴳⵓ n, ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⴰⵔⵉ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏ     \/ = 2 + 3 + 3 = 8     \/tri(3) = tri(2) + tri(1) + tri(4)     \/tri(4) = 3     \/tri(2) = 1 + (2 \/ 2) = 2     \/ ⵙ ⵓⵎⴷⵢⴰ:     \/tri(n) =tri(n - 1) +tri(n - 2) +tri(n + 1), ⵉⴳ n ⵓⵔ ⵉⴳⵉ ⴰⵎⵣⴰⵔⴰⵢ.     \/tri(n) = 1 + n \/ 2, ⵉⴳ ⵉⴳⴰ n ⴰⵎⵎ ⵓⵎⵉⴹⴰⵏ.     \/tri(1) = 3     \/ ⴰⴾⴾⵓⵣ ⵏ ⵟⵔⵉⴱⵓⵏⴰⵛⵛⵉ ⵉⴾⵏⴰ ⴰⴾⴾⵓⵣ ⵏ:     ⵎⴰⵛⴰ, ⵎⴰ ⵓⵔ ⵉⵙⵙⵉⵏⵏ ⵎⵉⴷⴷⵏ ⵉⴳⴰ ⵓⴹⴼⵕ ⵏ ⵟⵔⵉⴱⵓⵏⴰⵛⵛⵉ.    ⴷⴰ ⵉⵜⵜⵢⴰⵙⵙⵏ ⴽⵓⵍⵍⵓ ⵙ ⵓⵙⵏⵙⵍ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵛⵉ, ⴰⵔ ⵜⵜⵎⵔⴰⵔⴰⵏ ⵉⵎⵓⵙⵏⴰⵡⵏ ⵏ ⵜⵓⵙⵏⴰⴽⵜ ⴳ     \/\/ >>> tri((3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Problem {\n    public static ArrayList<Long> tri(long n) {\n        \/\/ Return empty list if n is negative\n        if (n < 0) {\n            return new ArrayList<>();\n        }\n        \n        \/\/ Create an ArrayList to store the Tribonacci sequence\n        ArrayList<Long> tribonacci = new ArrayList<>();\n        \n        \/\/ Define the base cases\n        if (n >= 0) {\n            tribonacci.add(1L);  \/\/ tri(0)\n        }\n        if (n >= 1) {\n            tribonacci.add(3L);  \/\/ tri(1)\n        }\n        \n        \/\/ Calculate the values for the sequence from tri(2) to tri(n)\n        for (long i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.add(1 + i \/ 2);\n            } else {\n                long value = tribonacci.get((int)(i - 1)) \n                           + tribonacci.get((int)(i - 2)) \n                           + tribonacci.get((int)(i + 1 - 2)); \/\/ i+1-2 = i-1 (next i is processed)\n                tribonacci.add(value);\n            }\n        }\n        \n        return tribonacci;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(tri(3)); \/\/ Outputs: [1, 3, 2, 8]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_131","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ 0 ⵎⴽ ⴳⴰⵏ ⴰⴽⴽⵡ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵣⴳⵓⵏⵏ.     \/ ⵉⴳ ⵏⵙⴽⵔ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵏⵙⵙⴽⵜⵉ ⵙ ⵓⵢⴰⴼⵓ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ.     \/\/ >>> digits((1l))\n    \/\/ (1l)\n    \/\/ >>> digits((4l))\n    \/\/ (0l)\n    \/\/ >>> digits((235l))\n    \/\/ (15l)\n    public static long digits(long n) {\n","canonical_solution":"public static long digits(long n) {\n        long product = 1;\n        boolean hasOddDigit = false;\n        \n        while (n > 0) {\n            long digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n \/= 10;\n        }\n        \n        return hasOddDigit ? product : 0;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_132","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵛⴽⵓ ⴷⴰ ⵉⵜⵜⵓⵙⵏⵖⵍ ⴽⵔⴰ ⵏ ⵢⴰⵏ ⴳ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵜⴹⴼⵉⵕⵜ.     \/ ⵜⴰⵡⵓⵔⵉ ⵜⵣⵎⵎⵔ ⴰⴷ ⵜⵕⵓⵏ ⵜⵉⴷⵜ ⵎⴽ ⴷ ⵖⴰⵙ ⵎⴽ ⵉⵍⵍⴰ ⵢⴰⵏ ⵓⴹⴼⴼⵓⵕ ⵉⵣⵔⴼⴰⵏ ⵏ ⵜⴱⵕⴰⴽⴰⵜⵉⵏ     \/ ⴰⵗⴰⵏ ⵏ ⵜⴰⵍⵗⴰ ⵜⴰ ⵢⵂⴰ ⵙⵜⵔⵉⵏⴶ ⵛⵂⵓⵏⴷ ⵉⵏⴱⵓⵜ ⵓⴰ ⵉⵍⴰⵏ ⴱⵔⴰⵛⴻⵜⵙ ⵛⵓⴰⵔⴻⵛⵜ     \/\/ >>> isNested((\"[[]]\"))\n    \/\/ (true)\n    \/\/ >>> isNested((\"[]]]]]]][[[[[]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[][]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[[][]]\"))\n    \/\/ (true)\n    \/\/ >>> isNested((\"[[]][[\"))\n    \/\/ (true)\n    public static boolean isNested(String string) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static boolean isNested(String string) {\n        int openCount = 0;\n        boolean hasNested = false;\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                openCount++;\n            } else if (c == ']') {\n                if (openCount > 0) {\n                    openCount--;\n                    \/\/ If we find a pair and there was an unmatched '[' before this ']'\n                    \/\/ it means there was nesting.\n                    hasNested = true;\n                }\n                \n                if (openCount < 0) {\n                    \/\/ If at any point we have more closing brackets than opening ones,\n                    \/\/ it's invalid, so reset openCount.\n                    openCount = 0;\n                }\n            }\n        }\n        \n        return hasNested;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); \/\/ true\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); \/\/ false\n        System.out.println(isNested(\"[][]\")); \/\/ false\n        System.out.println(isNested(\"[]\")); \/\/ false\n        System.out.println(isNested(\"[[][]]\")); \/\/ true\n        System.out.println(isNested(\"[[]][[\")); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_133","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⵔⴰⵎⵉⴷ ⴽⵓ ⵉⴼⵔⴷⵉⵙ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⵜⴳⴳⴰⵔⵏ ⵙ ⵓⴼⵍⵍⴰ ⵏ int ((ⵜⵉⴳⵡⵉⵜ)) ⴳ ⵜⵉⵣⵡⵉⵔⵉ.     \/ ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⴰⵔⵎ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⴽⵓⴱⴰⵕ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⵏⵏⴰ ⴷ ⵉⴼⴽⴰⵏ,     \/ ⴰⵜⵓⴰⵣⴰⵏ ⵙ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴰⵍⴳⴰⵎⵜ.    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n    \/\/ (14l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)4.0f, (float)9.0f))))\n    \/\/ (98l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f))))\n    \/\/ (84l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n    \/\/ (29l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f))))\n    \/\/ (6l)\n    public static long sumSquares(ArrayList<Float> lst) {\n","canonical_solution":"public static long sumSquares(ArrayList<Float> lst) {\n        return lst.stream()\n                  .mapToInt(f -> (int) Math.ceil(f))\n                  .map(i -> i * i)\n                  .sum();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) == (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f, (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_134","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⵜⵓⵉⵙⵙⴰⵎ: \"ⴰⵍⵎⴰⵗⵏⴰ\" ⵢⵈⵈⴰⵍ ⵜⴰⵈⵈⵉⵎⵜ ⵏ ⵉⴾⴰⵔⵓⵙⴰⵏ ⵉⵣⵍⴰⵉⴰⵏ ⵙ ⵙⴱⵢⵛⵢ    \/ ⴰⵛⵔⵓⵜ ⵏ ⵜⴰ-ⵉⵜⴻ, ⴰⴷ ⵓⴰⵔ-ⴻⵏ-ⵜ-ⵉⵍⵍⴰ.    \/ ⵏ ⵢⴰⵏ ⵓⴽⵙⵉⵍ ⵉⵜⵜⵓⵙⴽⴰⵔⵏ ⵉⴳⴰ ⵢⴰⵏ ⵓⴽⵔⵉⴽⵜⵓⵔ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⴰⵍⴱⴰⵢⵢⵓⵔ ⵓⵔ ⵉⴳⵉ     \/ ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⵊⵊⴰⵏ ⴰⴷ ⵜⴳ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵡⵓⵎⵓⵖ ⴰⵎⴳⴳⴰⵔⵓ     \/\/ >>> checkIfLastCharIsALetter((\"apple pie\"))\n    \/\/ (false)\n    \/\/ >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    \/\/ (true)\n    \/\/ >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    \/\/ (false)\n    \/\/ >>> checkIfLastCharIsALetter((\"\"))\n    \/\/ (false)\n    public static boolean checkIfLastCharIsALetter(String txt) {\n","canonical_solution":"public static boolean checkIfLastCharIsALetter(String txt) {\n    txt = txt.trim();\n    if (txt.isEmpty()) {\n        return false;\n    }\n    String[] words = txt.split(\" \");\n    String lastWord = words[words.length - 1];\n    if (lastWord.isEmpty()) {\n        return false;\n    }\n    char lastChar = lastWord.charAt(lastWord.length() - 1);\n    return Character.isLetter(lastChar);\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_135","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⵜⵉⴳⵏ ⵉⵎⵎⵢⴰⵏⴰⵡⵏ.     \/ ⵓⵔ ⵉⵍⵍⵉ ⴽⵔⴰ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵣⵓⵏⴷ ⴰⴷ, ⵔⴰⴷ ⵏⵔⴰⵔ -1    \/ ⵓⵔ ⵉⴳⵉ ⴰⵅⴰⵜⴰⵔ ⵏⵖⴷ ⵉⵎⵣⴷⴰⵖ ⴷ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⴷ ⵢⵓⵛⴽⴰⵏ ⴷⴰⵜ ⵏⵏⵙ. ⵎⴽ     \/ ⴰⵗⵏⵓ ⵏ ⵜⴰⵍⵗⴰ ⵜⴰ ⵜⴰⵔⵜⴰⵉⴰⵜ ⴰⵏⵎⴰⵍⴰⵍ ⵓⴰ ⵎⴰⵈⴰⵔⴰⵏ ⵏ ⵂⴰⵔⴰⵜ ⵓⴰ     \/\/ >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\n    \/\/ (3l)\n    \/\/ >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (-1l)\n    public static long canArrange(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    \/\/ Create a function which returns the largest index of an element which\n    \/\/ is not greater than or equal to the element immediately preceding it.\n    \/\/ If no such element exists then return -1. The given array list will not\n    \/\/ contain duplicate values.\n\n    public static long canArrange(ArrayList<Long> arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 4L, 3L, 5L));\n        System.out.println(canArrange(list1)); \/\/ Output: 3\n        \n        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L));\n        System.out.println(canArrange(list2)); \/\/ Output: -1\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))) == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l, (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_136","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⴽⵔⴰ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⴳⴳⵓⵜⵏ ⵏⵖⴷ ⵉⵔⵡⵉⵏ, ⵙⵙⴽⵛⵎ-ⴷ ⵉⵎⴹⴰⵏ ⴰⴷ ⵣⵓⵏⴷ null.     \/ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ.     \/ ⴰⵎⵇⵇⵔⴰⵏ ⴳ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵔⵡⵉⵏ, ⴷ \"ⴱ\" ⵉⴳⴰ ⴰⵎⵥⵥⵢⴰⵏ     \/ ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⴰⵣⴷⴰⵢⵜ (ⴰ,ⴱ), ⴳ ⵉⵍⵍⴰ 'ⴰ'     \/\/ >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l))))\n    \/\/ Pair.with(Optional.of(Optional.empty()), Optional.of(1l))\n    \/\/ >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList())))\n    \/\/ Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n    \/\/ >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l))))\n    \/\/ Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {\n        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long> smallestPositive = Optional.empty();\n\n        for (Long num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n        \n        return Pair.with(largestNegative, smallestPositive);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l, (long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)-2l)))).equals(Optional.of(Pair.with(-2l, 1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)3l, (long)6l, (long)2l, (long)7l, (long)-7l)))).equals(Optional.of(Pair.with(-7l, 2l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)8l, (long)4l, (long)9l, (long)2l, (long)5l, (long)-9l)))).equals(Optional.of(Pair.with(-9l, 2l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList()))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l, (long)0l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)-100l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));\n    }\n\n}\n"},{"task_id":"HumanEval_138","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ     \/ ⵙⵜⴰⵍ ⵎⴽ ⵜⵣⵎⵔⵎ ⴰⴷ ⵜⵔⵔⴰⵎ ⴰⵎⴹⴰⵏ n ⵉⵜⵜⵓⴼⴽⴰⵏ ⴰⵎⵎ ⵓⴳⵣⵓⵎ ⵏ ⴽⴽⵓⵥ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵉⴽⵙⵡⴰⵜⵏ     \/\/ >>> isEqualToSumEven((4l))\n    \/\/ (false)\n    \/\/ >>> isEqualToSumEven((6l))\n    \/\/ (false)\n    \/\/ >>> isEqualToSumEven((8l))\n    \/\/ (true)\n    public static boolean isEqualToSumEven(long n) {\n","canonical_solution":"\/\/ Check if the number n is at least 8 since the smallest sum of 4 positive even numbers is 2+2+2+2=8\n        if (n < 8) {\n            return false;\n        }\n\n        \/\/ If n is divisible by 2 and n\/2 is even, then n can be expressed as the sum of 4 positive even numbers\n        return n % 2 == 0;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_139","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴳ ⵉⵍⵍⴰ n > 0     \/ brazilian_factorial{n) = n! * (n-1)! * (n-2)! * ... * 1!     \/ ⴷⴰ ⵉⵜⵜⵓⵙⵏⵎⵍ ⵓⴼⴰⴽⵜⵓⵔⵉⴰⵍ ⴰⴱⵕⴰⵣⵉⵍⵉ ⵙ:     \/\/ >>> specialFactorial((4l))\n    \/\/ (288l)\n    \/\/ The function will receive an integer as input and should return the special\n    \/\/ factorial of this integer.\n    public static long specialFactorial(long n) {\n","canonical_solution":"import java.util.stream.LongStream;\n\npublic class Problem {\n    \/\/ The Brazilian factorial is defined as:\n    \/\/ brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    \/\/ where n > 0\n\n    public static long specialFactorial(long n) {\n        return LongStream.rangeClosed(1, n)\n                .map(Problem::factorial)\n                .reduce(1, (a, b) -> a * b);\n    }\n\n    private static long factorial(long num) {\n        return LongStream.rangeClosed(1, num)\n                .reduce(1, (a, b) -> a * b);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(specialFactorial(4)); \/\/ Output: 288\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_140","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴷⴼⴼⵉⵔ ⴰⴷ ⵙⵏⴼⵍ ⵉⵙⴰⵢⵔⴰⵔⵏ ⴰⴽⴽⵡ ⵉⵎⵣⴷⴰⵢⵏ ⵙ -     \/ ⴷ ⵎⴽ ⴳⴰⵏ ⵜⵉⵙⵉⴹⴼⴰⵏ ⴳ ⵓⴳⴳⴰⵔ ⵏ 2 ⵏ ⵡⴰⵏⵙⴰ ⵉⵎⴹⴼⴰⵕⵏ,     \/ ⴰⵔⴰⴾⵉⴷ ⵏ ⵉⴾⵉⵜⴱⴰⵏ ⵏ ⵜⴰⵂⵔⵉⴾⴻ, ⵙⴰⵎⵎⵓⵜⴰⵉ ⵉⵛⵛⵉⴾⵉⵍⴰⵏ ⴼⵓⴾ ⴷⴰⵗ ⴻⴷⴻⵉ ⵏ ⴾⴰⵔⵜⵉ ⵜⴰⵏ    \/\/ >>> fixSpaces((\" Example\"))\n    \/\/ (\"Example\")\n    \/\/ >>> fixSpaces((\" Example 1\"))\n    \/\/ (\"Example_1\")\n    \/\/ >>> fixSpaces((\" Example 2\"))\n    \/\/ (\"_Example_2\")\n    \/\/ >>> fixSpaces((\" Example 3\"))\n    \/\/ (\"_Example-3\")\n    public static String fixSpaces(String text) {\n","canonical_solution":"if (text == null || text.isEmpty()) {\n        return text;\n    }\n    \n    StringBuilder result = new StringBuilder();\n    int spaceCount = 0;\n    for (char c : text.toCharArray()) {\n        if (c == ' ') {\n            spaceCount++;\n        } else {\n            if (spaceCount == 1) {\n                result.append('_');\n            } else if (spaceCount > 1) {\n                result.append('-');\n            }\n            result.append(c);\n            spaceCount = 0;\n        }\n    }\n    \n    \/\/ Handle trailing spaces\n    if (spaceCount == 1) {\n        result.append('_');\n    } else if (spaceCount > 1) {\n        result.append('-');\n    }\n    \n    return result.toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"},{"task_id":"HumanEval_141","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ - ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⴳ ⵜⵓⴳⴳⴰ ⵏ ⵡⴰⵏⵙⴰ ⴷⴼⴼⵉⵔ ⵜⴱⵔⵉⴷⵜ ⵢⴰⵜ ⵙⴳ ⵜⵉⵏ ⴷⴰⵜⴰ: ['txt', 'exe', 'dll']     \/ ⴰⵍⴾⴰⴷⴰⵏ ⵓⵉⵏ ⵍⴰⵜⵉⵏ (ⴰ-ⵣ ⴷ ⴰ-ⵣ)    \/ - ⵓⵔ ⵉⵅⵚⵚⴰ ⴰⴷ ⵢⵉⵍⵉ ⵡⴰⵏⵙⴰ ⴷⴰⵜ ⵏ ⵜⴱⵔⵉⴷⵜ, ⴰⵔ ⵜⴱⴷⴰⴷ ⵙ ⵓⴱⵔⵉⴷ     \/ - ⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ ⵉⵍⵍⴰ ⴳⵉⵙ ⵢⴰⵏ ⵓⴱⵔⵉⴽⵜ '.'     \/ - ⵓⵔ ⵉⵅⵚⵚⴰ ⴰⴷ ⵉⵍⵉⵏ ⵓⴳⴳⴰⵔ ⵏ ⴽⵕⴰⴹ ⵏ ⵡⵓⵟⵟⵓⵏ (\"0\" - \"9\") ⴳ ⵢⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ.     \/ ⴰⵜⵓⴰⵔⴰⵎⴰⵏ:     \/ ⵉⵙⵎ ⵏ ⵓⴱⵔⴰⴳⵔⴰⵡ ⴰⵔ ⵉⵜⵜⵓⵙⵡⴰⵏ ⵉⵙ ⵉⴳⴰ ⵡⵉⵏ ⵜⵣⵔⴼⵜ ⵎⴽ ⴷ ⵎⴽ ⴷⴰ ⵇⵇⴰⵔⵏ ⴽⵓⵍⵍⵓ ⵜⵎⵙⴰⵔⵉⵏ ⴷ ⵉⴷⴷⴰⵏ     \/ \"ⴷⴰ\" ⵉⵖ ⵉⴳⴰ ⵢⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ ⴰⵣⵔⴼⴰⵏ, ⴰⵔ ⵉⵙⵙⴼⵍⴷ \"ⵓⵀⵓ\" ⵎⴽ ⵓⵔ ⵉⴳⵉ.     \/ ⴰⵗⵏⵓ ⵏ ⵜⴰⵍⵗⴰ ⵜⴰ ⵢⵂⴰⵏ ⵜⴰⵂⴰ ⵙⵜⵔⵉⵏⴶ ⵢⵎⴰⵓⴰⵏ ⵏ ⵉⵙⵉⵎ ⵏ ⴼⴰⵉⵍ ⵜⵓⵍⴰⵙ ⵢⵔⵜⴰⵉ     \/\/ >>> fileNameCheck((\"example.txt\"))\n    \/\/ (\"Yes\")\n    \/\/ >>> fileNameCheck((\"1example.dll\"))\n    \/\/ (\"No\")\n    public static String fileNameCheck(String file_name) {\n","canonical_solution":"if (file_name == null || file_name.isEmpty()) {\n        return \"No\";\n    }\n    \n    \/\/ Split the file name into two parts: before and after the dot.\n    String[] parts = file_name.split(\"\\\\.\");\n    \n    \/\/ Check for exactly one dot and non-empty parts.\n    if (parts.length != 2 || parts[0].isEmpty() || parts[1].isEmpty()) {\n        return \"No\";\n    }\n    \n    \/\/ Check the extension validity.\n    Set<String> validExtensions = new HashSet<>(Arrays.asList(\"txt\", \"exe\", \"dll\"));\n    if (!validExtensions.contains(parts[1])) {\n        return \"No\";\n    }\n\n    \/\/ Check that the first character before the dot is a letter.\n    if (!Character.isLetter(parts[0].charAt(0))) {\n        return \"No\";\n    }\n\n    \/\/ Count the number of digits in the part before the dot.\n    int digitCount = 0;\n    for (char c : parts[0].toCharArray()) {\n        if (Character.isDigit(c)) {\n            digitCount++;\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n    }\n\n    \/\/ All conditions are satisfied, return \"Yes\".\n    return \"Yes\";\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\/this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"},{"task_id":"HumanEval_142","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⴷ ⵉⵙⵏⴼⵍ ⵜⵉⴽⵛⵛⵓⵎⵉⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⵜⴳⴳⴰⵔⵏ ⵏⵏⴰ ⵓⵔ ⵉⴳⵉⵏ ⵡⵓⵟⵟⵓⵏ ⵏ 3 ⵏⵖⴷ 4. ⵔⴰⴷ ⵜⵙⴽⵔ ⵜⵡⵓⵔⵉ ⵜⴰⴳⵓⵜ ⵏ ⵜⵉⴽⵛⵓⵎⵉⵏ ⴰⴽⴽⵡ.    \/ ⴰⵎⵎⵓⴳⴳⴰⵔ ⵏ 3 ⴷ ⵔⴰⴷ ⵢⴰⴽⵣ ⴰⵎⵉⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴳ ⵓⴽⵛⵛⵓⵎ ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⴰⵎⵎⵓⴳⴳⴰⵔ ⵏ 4 ⵓⵔ ⵉⴳⵉ ⴰⵎⵎⵓⴳⴳⴰⵔ ⵏ 3. ⵓⵔ ⵔⴰⴷ ⵜⴳⴳ ⵜⵡⵓⵔⵉ     \/ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵔⴰⴷ ⵜⵕⵥⵎ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏ ⵓⵙⵏⵙⵍ. ⵉ ⴽⵓⵍⵍⵓ ⵜⵉⵎⵙⴽⵜⵉⵜⵉⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵓⵙⵏⵙⵍ, ⵔⴰⴷ ⵜⵕⵥⵎ ⵜⴰⵡⵓⵔⵉ ⴰⵙⴽⴽⵉⵍ ⵏ ⵜⵎⵙⴽⵜⵉⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ     \/ \"  ⴰⴱⴱⵓ    \/\/ >>> lst\n    \/\/ (long)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))\n    \/\/ >>> lst\n    \/\/ (long)new ArrayList<Long>(Arrays.asList())\n    \/\/ >>> lst\n    \/\/ (long)new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l))\n    public static long sumSquares(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumSquares(ArrayList<Long> lst) {\n        long sum = 0;\n\n        for (int i = 0; i < lst.size(); i++) {\n            Long number = lst.get(i);\n            if (i % 3 == 0) {\n                sum += Math.pow(number, 2);\n            } else if (i % 4 == 0) {\n                sum += Math.pow(number, 3);\n            } else {\n                sum += number;\n            }\n        }\n\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (6l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l)))) == (14l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l)))) == (9l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l)))) == (-3l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)0l)))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l)))) == (-126l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-56l, (long)-99l, (long)1l, (long)0l, (long)-2l)))) == (3030l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)-1l)))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-16l, (long)-9l, (long)-2l, (long)36l, (long)36l, (long)26l, (long)-20l, (long)25l, (long)-40l, (long)20l, (long)-4l, (long)12l, (long)-26l, (long)35l, (long)37l)))) == (-14196l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)17l, (long)-1l, (long)-15l, (long)13l, (long)-1l, (long)14l, (long)-14l, (long)-12l, (long)-5l, (long)14l, (long)-14l, (long)6l, (long)13l, (long)11l, (long)16l, (long)16l, (long)4l, (long)10l)))) == (-1448l));\n    }\n\n}\n"},{"task_id":"HumanEval_143","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ 1:     \/ ⴰⴾⴰⵍ ⵏ ⵉⵙⵎⴰⵓⴰⵏ ⵓⵉⵏ ⵜⴰⵂⵔⵉⴾⴻ ⵜⴰⵏ ⵜⴰⵎⴰⵢⵏⵓⵜ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⴻⵈⵈⵉⵍ ⵓⵍⴰⵂⴰⵏ ⵉⴷ ⵓⴰ ⴰⵣⵣⴰⵔⴰⵏ    \/ ⵉⴳⴰⵏ ⵜⵉⵖⵣⵉ ⵏⵏⵙ ⵉⵎⴹⴰⵏ ⵉⵎⵣⵡⵓⵔⴰ,     \/ ⴷ ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⵉⵜⵓⵔ ⵙⵜⵔⵉⴳ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵏ ⵜⴳⵓⵔⵉ ⵏ ⵜⵉⵣⵡⵉⵔⵉ,     \/ ⵜⴰⴳⵓⵔⵉ ⵜⵍⴰ ⴽⵔⴰ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵉⵜⵜⵓⵢⴼⴼⵔⴰⵔⵏ ⵙ ⵓⵙⴰⵢⵔⴰⵔ,     \/ ⴰⵜⵓⴰⴾⵔⴰ ⵙⵜⵔⵉⵏⴶ ⵉⴾⵏⴰⵏ ⵙⴰⵎⴰⵍⴰⵏ ⵏ ⵜⴰⴱⴰⵔⴰⵜ,     \/\/ >>> wordsInSentence((\"This is a test\"))\n    \/\/ (\"is\")\n    \/\/ Example 2:\n    \/\/ >>> wordsInSentence((\"lets go for swimming\"))\n    \/\/ (\"go for\")\n    \/\/ Constraints:\n    \/\/ * 1 <= len(sentence) <= 100\n    \/\/ * sentence contains only letters\n    public static String wordsInSentence(String sentence) {\n","canonical_solution":"public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> primeLengthWords = new ArrayList<>();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n        \n        return String.join(\" \", primeLengthWords);\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"},{"task_id":"HumanEval_144","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵏⵣⵎⵔ ⴰⴷ ⵏⵙⵙⴽⵜⵉ ⵉⵙ ⴳⴰⵏ x ⴷ n ⵉⴼⵔⴷⵉⵙⵏ ⵉⵖⵓⴷⴰⵏ, ⴷ ⵓⵔ ⴷⴰⵔⵙⵏ ⵓⵎⵢⴰ ⴰⵎⵎ ⵓⵎⵙⵙⴰⵖ.     \/ <numerator>\/<denominator> ⴳⴰⵏ ⵉⵎⵉⴹⴰⵏ ⴷ ⵉⵎⵎⴰⵙⵙⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⴽⵙⵓⵍⵏ.     \/ ⵙ ⵡⵉⵢⵢⴰⴹ. ⴽⵓ ⵙⵉⵏ x ⴷ n, ⴳⴰⵏ ⴰⵙⵎⴷⵢⴰ ⵏ ⵜⵉⵙⵉ ⵏ ⵜⴳⵣⵣⵓⵎⵜ, ⴷ ⵖⵓⵔⵙⵏ ⵜⴰⵍⵖⴰ ⴷ ⵢⵓⵛⴽⴰⵏ,     \/ x * n. ⴷⴰ ⵜⵔⴰⵔ ⵜⴰⵡⵓⵔⵉ true ⵉⵖ ⵉⴳⴰ x * n ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴷ false     \/ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⴽⵔ ⵢⴰⵜ ⵜⵎⵔⵙⵜ ⵏⵏⴰ ⵔⴰⴷ ⵉⵙⴱⵉⴷⴷ ⴰⵙⵏⵓⵎⵎⵍ     \/\/ >>> simplify((\"1\/5\"), (\"5\/1\"))\n    \/\/ (true)\n    \/\/ >>> simplify((\"1\/6\"), (\"2\/1\"))\n    \/\/ (false)\n    \/\/ >>> simplify((\"7\/10\"), (\"10\/2\"))\n    \/\/ (false)\n    public static boolean simplify(String x, String n) {\n","canonical_solution":"public static boolean simplify(String x, String n) {\n    \/\/ Split the fractions into numerators and denominators\n    String[] fracX = x.split(\"\/\");\n    String[] fracN = n.split(\"\/\");\n    \n    \/\/ Parse numerators and denominators as integers\n    int numX = Integer.parseInt(fracX[0]);\n    int denX = Integer.parseInt(fracX[1]);\n    int numN = Integer.parseInt(fracN[0]);\n    int denN = Integer.parseInt(fracN[1]);\n\n    \/\/ Calculate the product of x * n\n    int productNumerator = numX * numN;\n    int productDenominator = denX * denN;\n\n    \/\/ Simplify the product fraction\n    int gcd = gcd(productNumerator, productDenominator);\n\n    \/\/ If the simplified denominator is 1, then it is a whole number\n    return productDenominator \/ gcd == 1;\n}\n\n\/\/ Helper method to calculate the greatest common divisor\nprivate static int gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    assert(simplify((\"1\/6\"), (\"2\/1\")) == (false));\n    assert(simplify((\"5\/1\"), (\"3\/1\")) == (true));\n    assert(simplify((\"7\/10\"), (\"10\/2\")) == (false));\n    assert(simplify((\"2\/10\"), (\"50\/10\")) == (true));\n    assert(simplify((\"7\/2\"), (\"4\/2\")) == (true));\n    assert(simplify((\"11\/6\"), (\"6\/1\")) == (true));\n    assert(simplify((\"2\/3\"), (\"5\/2\")) == (false));\n    assert(simplify((\"5\/2\"), (\"3\/5\")) == (false));\n    assert(simplify((\"2\/4\"), (\"8\/4\")) == (true));\n    assert(simplify((\"2\/4\"), (\"4\/2\")) == (true));\n    assert(simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    assert(simplify((\"1\/5\"), (\"1\/5\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_145","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴰⵔⴰⵎ-ⴰⵙⴰⵏ ⵙ ⴰⴱⴰⵔⴰ ⵏ ⵢⵏⴷⵢⵙ ⵏⴰⵙⴰⵏ ⴷⴰⵗ ⵍⵉⵙⵜ ⵏ ⵜⴰⵔⵔⴰⵉⵜ ⵜⴰⵏ ⴰⵔⵓ    \/ ⴰⵜⵡⵉⵍ: ⵉⵖ ⵉⵍⵍⴰ ⴽⵉⴳⴰⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵙ ⵡⴰⵜⵉⴳ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ,     \/ ⵙ ⵓⵍⵖⵓ ⴰⵎⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙⵏ.     \/ ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵙⵎⵓⵏⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ     \/\/ >>> orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    \/\/ >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n        return nums.stream()\n            .sorted(Comparator.comparingLong(Problem::sumOfDigits).thenComparingLong(nums::indexOf))\n            .collect(Collectors.toCollection(ArrayList::new));\n    }\n\n    private static long sumOfDigits(Long num) {\n        num = Math.abs(num);\n        long sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num \/= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 11L, -1L, -11L, -12L));\n        ArrayList<Long> result1 = orderByPoints(list1);\n        System.out.println(result1);\n\n        ArrayList<Long> list2 = new ArrayList<>();\n        ArrayList<Long> result2 = orderByPoints(list2);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l, (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l, (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l, (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_146","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴷⵉⵊⵉⵜⵏ ⵉⵎⵣⵡⵓⵔⴰ ⴷ ⵉⵎⴳⴳⵓⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⴳⴰⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ (1, 3, 5, 7, 9).    \/ ⴰⵎⴹⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⵜⴳⴳⴰⵔⵏ ⵏ ⵉⵎⵙⵜⴳⴳⴰⵔⵏ ⵏⵏⴰ ⵢⵓⴳⵔⵏ 10 ⴷ ⵙ ⵙⵏⴰⵜ     \/ ⴰⴾⵜⴰⴱ ⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰ ⵜⴰⵋ ⵉⵏ ⵜⴰⵍⵉⵜ ⵏ ⵉⵎⵉⴹⴰⵏ ⵛⵂⵓⵏⴷ ⵉⵏⴱⵓⵜ ⴷ ⵔⵢⵜⵔⵏ    \/\/ >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l))))\n    \/\/ (1l)\n    \/\/ >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l))))\n    \/\/ (2l)\n    public static long specialFilter(ArrayList<Long> nums) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Function to check if a number has odd first and last digits\n    private static boolean hasOddFirstAndLastDigit(long num) {\n        num = Math.abs(num); \/\/ Consider absolute value to handle negative numbers\n\n        String numStr = Long.toString(num);\n\n        \/\/ Check first digit\n        char firstDigit = numStr.charAt(0);\n        if ((firstDigit - '0') % 2 == 0) {\n            return false;\n        }\n\n        \/\/ Check last digit\n        char lastDigit = numStr.charAt(numStr.length() - 1);\n        return (lastDigit - '0') % 2 != 0;\n    }\n\n    public static long specialFilter(ArrayList<Long> nums) {\n        return nums.stream()\n            .filter(num -> num > 10 && hasOddFirstAndLastDigit(num))\n            .count();\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> nums1 = new ArrayList<>(Arrays.asList(15L, -73L, 14L, -15L));\n        System.out.println(specialFilter(nums1)); \/\/ Output: 1\n\n        ArrayList<Long> nums2 = new ArrayList<>(Arrays.asList(33L, -2L, -3L, 45L, 21L, 109L));\n        System.out.println(specialFilter(nums2)); \/\/ Output: 2\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)5l, (long)-2l, (long)1l, (long)-5l)))) == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l)))) == (1l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l)))) == (2l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)43l, (long)-12l, (long)93l, (long)125l, (long)121l, (long)109l)))) == (4l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)71l, (long)-2l, (long)-33l, (long)75l, (long)21l, (long)19l)))) == (3l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_147","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴷ a[i] + a[j] + a[k] ⴷ ⴰⵎⵔⴰⵔⵓ ⵏ 3.     \/ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵔⴱⵉⵍⵉⵏ (ⴰ[i], ⴰ[ⵊ], ⴰ[ⴽ]) ⵏ ⴰ ⴳ ⵉⵍⵍⴰ i < ⵊ < ⴽ,     \/ ⵉ ⴽⵓ i (1 ≤ i ≤ n), ⴰⵜⵉⴳ ⵏ a[i] = i * i - i + 1.     \/ ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽⴹ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⴷⵉ n. ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵙⴽⵔ ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵉⵖⵣⵉ n.     \/\/ >>> getMaxTriples((5l))\n    \/\/ (1l)\n    \/\/ Explanation: \n    \/\/ a = [1, 3, 7, 13, 21]\n    \/\/ The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static long getMaxTriples(long n) {\n        \/\/ Generate the array list a based on the given formula\n        int[] a = new int[(int) n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n        \n        long count = 0;\n        \n        \/\/ Iterate through triple combinations and count those whose sum is a multiple of 3\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getMaxTriples(5)); \/\/ Example usage\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"},{"task_id":"HumanEval_148","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ ⵜⴰⵏ     \/ ⵓⴰⵔⴷ ⴰⵈⵈⵢⵍ ⵉⵙⵎⴰⵓⴰⵏ ⵏ ⴱⵍⴰⵏⵢⵜ ⵜⴰⵏ ⵓⵗⴰⴷⵏⵢⵏ    \/ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵜⵕⵓⵡⴰⵍ ⵜⴰⴱⵔⵉⵜ ⵜⴰⵅⵅⴰⵔⵜ ⵎⴽ ⵜⴳⴰ planete1 ⵏⵖ planete2     \/ ⴰⵂⵓⵙⴾⴰⵜ ⵏⵢⵜ ⵉ ⵜⴰⴼⵓⴾⵜ    \/ ⵉⵍⵍⴰⵏ ⵋⵉⵔ ⵜⴰⵗⵉⵙⵙⴰ ⵏ ⴱⵍⴰⵢⵏⵢⵜ1 ⴷ ⵜⴰⵗⵉⵙⵙⴰ ⵏ ⴱⵍⴰⵢⵏⵢⵜ2, ⵉⵋⵋⴰⵏ ⵙ     \/ ⵜⴰⵣⵣⵓⵍⵜ ⴰⴷ ⵜⵕⵓⵡⴰⵍ ⵜⴰⴱⴰⵔⴰⵜ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⴰⴽⴽⵡ ⵉⵜⵔⴰⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⵜⵉⵖⵔⴱⴰⵏ ⵏⵏⵙⵏ     \/ ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵙⵉⵏ ⵉⵙⵎⴰⵡⵏ ⵏ ⵉⵜⵔⴰⵏ ⵣⵓⵏⴷ ⵜⵉⵙⵉⴹⴼⵉⵏ planet1 ⴷ planet2.     \/ⵓⵔⴰⵏⵓⵙ, ⵏⴻⴱⵜⵓⵏⴻ.     \/ ⴰⵈⵈⴰⵍ ⵎⴻⵔⵛⵓⵔⵉ, ⵓⴰ ⴷⴰⵔⴰⵜ ⴰⵓⴻⵏ ⴻⵈⵈⴰⵍ ⴱⴻⵏⵓⵙ, ⴷⴰⵔⴰⵜ ⴰⵓⴻⵏ ⴰⴾⴰⵍ, ⵎⴰⵔⵙ, ⵋⵓⴱⵉⵜⴻⵔ, ⵙⴰⵜⵓⵔⵏ,     ⵉⵍⵍⴰⵏ 8 ⵏ ⵉⵜⵔⴰⵏ ⴳ ⵓⵏⴳⵔⴰⵡ ⵏ ⵜⴰⴼⵓⴽⵜ ⵏⵏⵖ: ⵡⵉⵏ ⵡⵉⵏ ⵡⵉⵎⴰⵢⵏⵓ ⵉ ⵜⴰⴼⵓⴽⵜ    \/\/ >>> bf((\"Jupiter\"), (\"Neptune\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    \/\/ >>> bf((\"Earth\"), (\"Mercury\"))\n    \/\/ (ArrayList<String>(\"Venus\"))\n    \/\/ >>> bf((\"Mercury\"), (\"Uranus\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\npublic class Problem {\n    \/\/ There are eight planets in our solar system arranged by distance from the Sun\n    private static final List<String> PLANETS = Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    );\n\n    public static Pair<ArrayList<String>, ArrayList<String>> bf(String planet1, String planet2) {\n        \/\/ Validate planet names\n        if (!PLANETS.contains(planet1) || !PLANETS.contains(planet2)) {\n            return new Pair<>(new ArrayList<>(), new ArrayList<>());\n        }\n\n        \/\/ Find indices of the planets\n        int index1 = PLANETS.indexOf(planet1);\n        int index2 = PLANETS.indexOf(planet2);\n\n        \/\/ Sort the indices\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n\n        \/\/ Extract planets between the given two planets\n        ArrayList<String> planetsBetween = new ArrayList<>(PLANETS.subList(start + 1, end));\n\n        return new Pair<>(planetsBetween, new ArrayList<>());\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_149","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⴰⵜⵓⴰⵣⵋⴰⵎ ⴰⵙ ⵉⵏⴰⴼⴰⵗⴰⵏ ⴼⵓⴾ ⵉⵍⴰⵏ ⵜⵉⵗⵉⵙⵙⴰ ⵓⵍⴰⵂⵏⵢⵏ    \/ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵜⵕⵓⵡⴰⵍ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⵏ ⵉⵎⵙⴷⴷⵉⵜⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ.     \/ ⵎⴽ ⴳⴰⵏ ⵙⵉⵏ ⵡⴰⵡⴰⵍⵏ ⵜⵉⵖⵣⵉ ⵏⵏⵙ ⵢⴰⵜ, ⵙⵙⵓⴷⵙ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉ ⵙ ⵜⴰⵍⵖⴰ ⵜⴰⵡⴼⵔⵉⴽⵜ.     \/ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵢⴰⴽⴽⴰ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙ ⵓⵡⵜⵜⴰⵙ ⴰⴷ.     \/ ⴰⴱⴰⵔⴰ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ ⵉⵇⵇⴰⵏ ⴰⴷ ⵢⴰⴽⵙ ⵙ ⵜⵉⵖⵣⵉ ⵏ ⴽⵓ ⵜⴳⵓⵔⵉ, ⴷ ⵇⴰⴷ     \/ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⵢⵂⴰ ⵉⴾⵉⵜⴱⴰⵏ    \/ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⵜⴳⴳⴰⵔⵏ ⵜⴳⴰ ⴰⵀⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⵜⴳⴳⴰⵔⵏ ⵏ ⵉⵎⵙⵜⴳⴳⴰⵔⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⴷ ⵓⵔ ⵜⴳⵉ ⴰⴽⴽⵡ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⵙⵜⴳⴳⴰⵔⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ,     \/ ⴷ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ ⵏⵏⴰ ⴷ ⵢⵓⵛⴽⴰⵏ ⵙ ⵓⵙⵓⴷⵙ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ,     \/ ⴷⴰ ⵉⵜⵜⵓⵙⴽⵙⵉ ⵜⵉⴼⵔⵉⵙⵉⵏ ⵏⵏⴰ ⵖⵓⵔ ⵍⵍⴰⵏ ⵜⵉⵖⵣⵉⵡⵉⵏ ⵓⵔ ⵉⵎⵙⴰⵙⴰⵏ,     \/ ⴰⴾⵜⴰⴱ ⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰ ⵉⴾⴼ-ⴰⵏⴰⵜ ⴰⵍⴾⴰⴷ ⵏ ⵜⴰⵂⵔⵉⴾⵢ ⵏ ⵜⴰⵂⵔⵉⴾⵢ ⵏ ⵙⵜⵔⵉⵏⴶ ⵜⴰⵏ ⵛⵂⵓⵏⴷ ⴱⴰⵔⴰⵎⴰⵜⵢⵔ,     \/\/ >>> listSort((new ArrayList<String>(Arrays.asList((String)\"aa\", (String)\"a\", (String)\"aaa\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"aa\")))\n    \/\/ >>> listSort((new ArrayList<String>(Arrays.asList((String)\"ab\", (String)\"a\", (String)\"aaa\", (String)\"cd\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"ab\", (String)\"cd\")))\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n        \/\/ Remove strings with odd lengths\n        lst.removeIf(s -> s.length() % 2 != 0);\n\n        \/\/ Sort the remaining strings first by length, then alphabetically\n        lst.sort(Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder()));\n\n        return lst;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> test1 = new ArrayList<String>(Arrays.asList(\"aa\", \"a\", \"aaa\"));\n        ArrayList<String> test2 = new ArrayList<String>(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"));\n\n        System.out.println(sortedListSum(test1)); \/\/ Output: [aa]\n        System.out.println(sortedListSum(test2)); \/\/ Output: [ab, cd]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"aa\", (String)\"a\", (String)\"aaa\")))).equals((new ArrayList<String>(Arrays.asList((String)\"aa\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"school\", (String)\"AI\", (String)\"asdf\", (String)\"b\")))).equals((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"asdf\", (String)\"school\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"b\", (String)\"c\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"dcba\", (String)\"abcd\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList((String)\"abcd\", (String)\"dcba\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"ai\", (String)\"au\")))).equals((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"ai\", (String)\"au\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"b\", (String)\"c\", (String)\"c\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"aaaa\", (String)\"bbbb\", (String)\"dd\", (String)\"cc\")))).equals((new ArrayList<String>(Arrays.asList((String)\"cc\", (String)\"dd\", (String)\"aaaa\", (String)\"bbbb\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_150","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⵉⴳⴰ ⵓⵟⵟⵓⵏ ⴰⵎⵣⵡⴰⵔⵓ, ⵔⴰⴷ ⵢⴰⴽⴽⴰ ⴰⵜⵉⴳ ⵏ y ⵎⴽ ⵓⵔ ⵉⴳⵉ ⵡⴰⴷⴷⴰⴷ ⴰⴷ.    \/ ⴰⵖⴰⵡⴰⵙ ⴰⵎⵢⵉⵡⵏ ⵏⵏⴰ ⵉⵇⵇⴰⵏ ⴰⴷ ⵢⴰⴽⴽⴰ ⴰⵜⵉⴳ ⵏ x ⵎⴽ ⵉⴳⴰ n     \/\/ >>> xOrY((7l), (34l), (12l))\n    \/\/ (34l)\n    \/\/ >>> xOrY((15l), (8l), (5l))\n    \/\/ (5l)\n    public static long xOrY(long n, long x, long y) {\n","canonical_solution":"import java.math.BigInteger;\n\npublic class Problem {\n    public static long xOrY(long n, long x, long y) {\n        \/\/ Check if n is prime\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private static boolean isPrime(long n) {\n        if (n < 2) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0) return false;\n\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(xOrY(7L, 34L, 12L));  \/\/ Output: 34\n        System.out.println(xOrY(15L, 8L, 5L));  \/\/ Output: 5\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(xOrY((7l), (34l), (12l)) == (34l));\n    assert(xOrY((15l), (8l), (5l)) == (5l));\n    assert(xOrY((3l), (33l), (5212l)) == (33l));\n    assert(xOrY((1259l), (3l), (52l)) == (3l));\n    assert(xOrY((7919l), (-1l), (12l)) == (-1l));\n    assert(xOrY((3609l), (1245l), (583l)) == (583l));\n    assert(xOrY((91l), (56l), (129l)) == (129l));\n    assert(xOrY((6l), (34l), (1234l)) == (1234l));\n    assert(xOrY((1l), (2l), (0l)) == (0l));\n    assert(xOrY((2l), (2l), (0l)) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_151","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵓⵙⵏⵙⵍ ⵏⵏⴰ ⵓⵔ ⵉⵎⵙⴰⵙⴰⵏ.  ⵓⵔ ⴷⴰ ⵏⵙⵙⴽⵜⵉ ⵉⵎⴹⴰⵏ ⵏⵏⴰ ⵓⵔ ⵉⴳⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ.    \/ ⴷⴰⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵜⴰⴳⵔⵓⵎⵎⴰ, ⵙⵏⵓⵍⴼⵓ ⵏ ⵓⵖⵣⵓⵔ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴽⴽⵓⵥⵏ     \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)0l))))\n    \/\/ (10l)\n    \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)-1l, (long)-2l, (long)0l))))\n    \/\/ (0l)\n    \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)9l, (long)-2l))))\n    \/\/ (81l)\n    \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)0l))))\n    \/\/ (0l)\n    \/\/ If the input array list is empty, return 0.\n    public static long doubleTheDifference(ArrayList<Float> lst) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static long doubleTheDifference(ArrayList<Float> lst) {\n        long sum = 0;\n        \n        for (Float number : lst) {\n            if (number != null && number >= 0 && number % 1 == 0) {\n                long num = number.longValue();\n                if (num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        \n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList()))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)5.0f, (float)4.0f)))) == (25l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.1f, (float)0.2f, (float)0.3f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-10.0f, (float)-20.0f, (float)-30.0f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)-2.0f, (float)8.0f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.2f, (float)3.0f, (float)5.0f)))) == (34l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f)))) == (165l));\n    }\n\n}\n"},{"task_id":"HumanEval_152","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⵜⵉⴳ ⵉⴳⴰ 0, ⴷ ⵉⵖ ⵓⵔ ⵉⴳⵉ, ⴰⵜⵉⴳ ⵉⴳⴰ ⴰⵎⵣⴰⵔⴰⵢ ⴰⵖⵣⵓⵔⴰⵏ ⴳⵔ ⵓⵙⵏⵖⵍ ⴷ ⵜⵏⴰⴼⵓⵜ.     \/ ⴷⴰ ⵉⵜⵜⴰⵊⵊⵓ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵓⵙⵎⵉⵍ ⵏ ⵜⵉⵖⵣⵉ ⵏⵏⴰ ⵉⵎⴽⵉⵏⵏⴰ ⵉⵜⵜⵉⵏⵉ ⵎⴰⵢⴷ ⵉⴳⴰⵏ ⴽⵓ ⴰⵙⵏⵖⵍ. ⵎⴽ ⵜⵔⵏⴰ ⴰⵙⵏⵖⵍ ⵙ ⵜⴷⵓⵙⵉ,     \/ ⴰⵜⵓⴰⴾⴼⴰⵏ ⵙⴰⵏⴰⵜⴰⵜⴰⵜ ⵍⵉⵙⵜⵢ ⵜⴰⵏ ⵏ ⵉⴾⵉⵜⴱⴰⵏ ⴷ ⵉⴾⵉⵜⴱⴰⵏ ⵏ ⵜⴰⵂⵔⵉⴾⵢ ⵓⵍⴰⵂⵏⵢⵏ, ⵙ ⵉⵏⴷⵢⵛⵙ ⴼⵓⴾ ⵉⴾⴼ-ⴰⵏ ⵢⴷⴰⴶ ⵉⵉⵉⴰⵏ    \/ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏⴻⵜ ⵜⴰⵈⵈⴰⵍ ⴰ ⵉⴾⵉⴰⴷ ⴰⵙ ⴰⵓⴰⴷⵉⵎ ⵉⴾⵏⴰⵏ ⵙ ⵜⵉⴷⵉⵜⵜ ⴰⵍⴾⴰⴷⴰⵏ ⵏ ⵉⴾⴰⵔⵓⵙⴰⵏ ⵏ ⵜⴰⵈⵈⵉⵎⵜ ⵏ ⴰⴷⴷⵉⵏⴰⵜ    \/ ⴰⵍⴰⵗⵉ ⵏⴰⵜ ⴰⵙ ⵉⵋⵋⴰ ⴰⴾⴰⵜⴰⴱ ⴷ ⴰⵙⵉⴾⵉⴰⴷ    \/ⴰⵓⴻⵏⴷⴰⵗ ⵉⴾⵏⴰ ⴰⵍⴰⵗⵉ ⵏⴻⵜ. ⵜⴰ-ⵉⵜⴻ ⵜⴰⵏ ⴷ ⵉⵏⴰⵙⵋⴰⵎ ⵓⵉⵏ ⵉⵂⴰⵏⴷⴰⴶⴰⵏ ⵓⵉⵏ    ⵆⴰⵍⴰ ⵜⴰⴾⴰⵍⴰ ⴰⴷⴷⵉⵏⴰⵜ ⴼⵓⴾ ⵏⴰⵙⴰⵏ ⵉⴾⵔⴰⵙⴰⵏ ⴰⵏⵉⴼⵂⴰⵎ ⵓⴰ ⴰⵍⵓⴰⵈ ⵓⴰ ⵉⴷ ⴰⵔⴰⴾⴰⵏ ⴰⵓⴰⴷⵉⵎ ⵉⵉⵉⴰⵏ    \/\/ >>> compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))\n    \/\/ >>> compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)5l, (long)0l, (long)0l, (long)0l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l, (long)0l, (long)-2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)1l, (long)0l, (long)0l, (long)6l)))\n    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Problem {\n    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> game1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L, 5L, 1L));\n        ArrayList<Long> guess1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L, 2L, -2L));\n        System.out.println(compare(game1, guess1));\n\n        ArrayList<Long> game2 = new ArrayList<>(Arrays.asList(0L, 5L, 0L, 0L, 0L, 4L));\n        ArrayList<Long> guess2 = new ArrayList<>(Arrays.asList(4L, 1L, 1L, 0L, 0L, -2L));\n        System.out.println(compare(game2, guess2));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)0l, (long)0l, (long)1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_153","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ (ⵜⵓⵙⵓⵜⵜ ⵏⵏⵙ -1).     \/ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ \"Slices.SErviNGSliCes\" ⴰⵛⴽⵓ \"SErviNGSliCes\" ⵉⴳⴰ ⵓⵙⵙⵖⵣⵏ ⵉⴷⵓⵙⵏ     \/ ⵉⵙⵎⵓⵜⵜⵓⵜⵏ: ['ⵙⵉⵔⴼⵉⵏⴳⵙⵍⵉⵛⵙ', 'ⵛⵉⵣ', 'ⵙⵜⵓⴼⴼⵉⴷ']  ⵉⵇⵇⴰⵏⴷ ⴰⴷ     \/ ⵙ ⵓⵎⴷⵢⴰ, ⵎⴽ ⵜⵜⵓⴼⴽⴰ \"ⵙⵍⴰⵢⵛⵙ\" ⴰⵎⵎ ⵜⵔⴰⴱⴱⵓⵜ ⴷ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ     \/ ⵙⵜⴰⵢ ⴰⵎⵣⵡⴰⵔⵓ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ.     \/ ⴰ ⴼⴰⵍ ⵉⵍⵍⴰⵏ ⵜⵉ ⵉⵙⵙⵉⵏ ⵎⴻⵗ ⴰⵋⵋⵓⵜⵏⴻⵏ ⵉⴾⵉⴰⴷⴰⵏ ⵙ ⵜⵉⵂⵓⵙⴾⴻⵜ ⵓⵍⴰⵂⴰⵜ, ⴰⴷⴷⵓⴱⴰⵜ ⵏⴻⵜ ⴰⴷ ⴾⵉⵛⴻⵎ    \/ format: ClassName.StrongestExtensionName.     \/ ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⴰⴼⴷ ⴰⵙⵖⵣⵣⵉⴼ ⵉⴷⵓⵙⵏ ⴷ ⴰⴷ ⵜⵔⴰⵔⴷ ⵜⵉⴼⵉⵏⴰⵖ ⴳ ⵓⵢⴰ     \/ ⴳ ⵢⵉⵙⵎ ⵏ ⵓⵙⵖⵣⵣⵉⴼ, ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⵣⵎⵔⵜ ⵙ ⵜⴽⵕⴹⵉ CAP - SM.     \/ ⵜⵉⴼⵔⴰⵜⵉⵏ ⴳ ⵉⵙⵎ ⵏ ⵓⵙⵖⵣⵣⵉⴼ, ⴷ ⴰⴷ ⵜⴳ SM ⴰⵎⴹⴰⵏ ⵏ ⵜⵉⴼⵔⴰⵜⵉⵏ ⵜⵉⵎⵥⵥⵢⴰⵏⵉⵏ     \/ ⵜⴰⵣⵎⵔⵜ ⵏ ⵓⵙⵙⵖⵣⵣⵉⴼ ⵜⴳⴰ ⵣⵓⵏⴷ ⴰⵢⴰ: ⴰⴷ ⵜⴳ CAP ⴰⵎⴹⴰⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵉⵔⵔⴰ     \/ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵜⵓⵙⵎⵔⴰⵙⵏⵜ ⵜⵔⵏⵓⵜⵉⵏ ⵃⵎⴰ ⴰⴷ ⵜⵜⵓⵣⵓⵣⵣⵔⵏ ⵜⵔⵓⴱⴱⴰ ⵢⴰⴹⵏⵉⵏ ⵉ ⵜⵔⵓⴱⴱⴰ.    \/ ⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵏⵏⴰ ⵏ ⵓⵙⵎⵉⵍ (ⵜⴰⵙⵉⴹⴼⵜ) ⴷ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵙⵎⴷⵢⴰⵡⵏ ⵏ ⵓⵙⵎⵉⵍ.    \/\/ >>> StrongestExtension((\"my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\", (String)\"CC\"))))\n    \/\/ (\"my_class.AA\")\n    public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n","canonical_solution":"public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n        String strongestExtension = \"\";\n        double maxStrength = Double.NEGATIVE_INFINITY;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            double strength = capCount - smCount;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"},{"task_id":"HumanEval_154","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵙⵏⴰⵜ ⵜⴳⵓⵔⵉⵡⵉⵏ. ⵇⴰⴷ ⵜⵔⴰⵔⴷ true ⵎⴽ ⵜⴳⴰ ⵜⴳⵓⵔⵉ ⵜⵉⵙⵙ ⵙⵏⴰⵜ ⵏⵖ ⴽⵔⴰ ⵏ ⵜⵙⵓⵜⵍⵉⵏ ⵏⵏⵙ ⵜⴰⴳⵓⵔⵉ ⵜⴰⴷⵙⵍⴰⵏⵜ ⴳ ⵜⴳⵓⵔⵉ ⵜⴰⵎⵣⵡⴰⵔⵓⵜ     \/\/ >>> cycpatternCheck((\"abcd\"), (\"abd\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"hello\"), (\"ell\"))\n    \/\/ (true)\n    \/\/ >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    \/\/ (true)\n    \/\/ >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"himenss\"), (\"simen\"))\n    \/\/ (true)\n    public static boolean cycpatternCheck(String a, String b) {\n","canonical_solution":"public static boolean cycpatternCheck(String a, String b) {\n        if (b.length() > a.length()) {\n            return false;\n        }\n        \n        String doubledB = b + b;\n        \n        for (int i = 0; i < b.length(); i++) {\n            String rotation = doubledB.substring(i, i + b.length());\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(cycpatternCheck((\"xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\")) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"tinem\")) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_155","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⵉⴳ ⴷⴰⵔⵙ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵔⵉⵜⵓⵔⵏ ⵜⴰⵡⵊⴰ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵎⵔⴽⵙⵏ ⴷ ⵡⵉⵏ ⵡⴰⵔ ⵉⵎⵎⵔⴽⵙⵏ ⵙ ⵓⵎⵣⴰⵔⴰⵢ.     \/\/ >>> evenOddCount((-12l))\n    \/\/ (Pair.with(1l, 1l))\n    \/\/ >>> evenOddCount((123l))\n    \/\/ (Pair.with(1l, 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n","canonical_solution":"long evenCount = 0;\n        long oddCount = 0;\n        num = Math.abs(num); \/\/ Handle negative numbers by taking the absolute value\n\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num \/= 10;\n        }\n\n        return Pair.with(evenCount, oddCount);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddCount(-12L)); \/\/ Output: (1, 1)\n        System.out.println(evenOddCount(123L)); \/\/ Output: (1, 2)\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"},{"task_id":"HumanEval_156","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⵜⵉⵎⵣⴰⵣⴰⵍ: 1 <= num <= 1000     \/ ⴷ ⴰⴷ ⵜⵔⴰⵔⴷ ⵙ ⵜⵉⴼⵔⵉⵙⵜ ⵜⴰⵎⵥⵥⵢⴰⵏⵜ.     \/ ⴰⴹⵉⵚ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ, ⵙⵙⵓⵜⵔ ⴰⵎⵎⴰⴽ ⵏⵏⵙ ⴰⵎⵎ ⵓⵟⵟⵓⵏ ⴰⵕⵓⵎⴰⵏⵉ ⴰⵎⵎ ⵜⴰⴳⵔⵓⵎⵎⴰ,     \/\/ >>> intToMiniRoman((19l))\n    \/\/ (\"xix\")\n    \/\/ >>> intToMiniRoman((152l))\n    \/\/ (\"clii\")\n    \/\/ >>> intToMiniRoman((426l))\n    \/\/ (\"cdxxvi\")\n    public static String intToMiniRoman(long number) {\n","canonical_solution":"String[] thousands = {\"\", \"m\"};\n        String[] hundreds = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n        String[] tens = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        String[] units = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n        \n        String roman = \"\";\n\n        roman += thousands[(int)(number \/ 1000)];\n        number %= 1000;\n        \n        roman += hundreds[(int)(number \/ 100)];\n        number %= 100;\n        \n        roman += tens[(int)(number \/ 10)];\n        number %= 10;\n        \n        roman += units[(int)(number)];\n        \n        return roman;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n}\n"},{"task_id":"HumanEval_157","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ 90 ⴷⴻⴶⵔⵉⴻ.     \/ ⵟⵔⵉⴰⵏⴶⵍⵢ ⵜⴰⵏ ⵓⵗⴰⴷⵏⵢⵏ ⵢⵈⴰⵍ ⵟⵔⵉⴰⵏⴶⵍⵢ ⴷⴰⵗ ⵢⴷⴰⴶ ⵉⵉⴰⵏ ⵢⵈⴰⵍ ⴰⴶⵓⴷ ⵓⵗⴰⴷⴰⵏ ⵎⵢⵗ     \/ ⴰⵗⴰⵍⴰⵉⴰⵏ ⴰⵗⴰⵍⴰⵉⴰⵏ ⵏ ⴾⴰⵔⴰⴷⴰⵜ ⵏ ⴰⴾⴾⵓⵣ, ⵓⴰⵔ ⵏ ⴰⵈⵈⵢⵍ ⵓⵗⴰⴷⴰⵏ    \/ ⴰⴱⵔⵉⴷ ⵏ ⵜⵉⵣⵉ ⵏ ⴽⵕⴰⴹ ⵏ ⵜⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹ ⵏ ⵜⵉⵙⴳⵡⵉⵏ. ⵔⴰⵏⵜⵔ ⵜⵀⴻⵕ ⴹⴰⵔ ⵀⴰⵜ ⵀⴰⵏ ⵕⵕⴻⵛⵉⵛⴰⵍ ⴹⴰⵔ ⵀⴰⵏ ⴹⴰⵔ ⵀⴰⵏ ⴹⴰⵔ ⵀⴰⵏ ⴹⴰⵔ ⵀⴰⵏ ⴹⴰⵔ ⵀⴰⵏ ⴹⴰⵔ ⵀⴰⵏ ⴹⴰⵔ ⵀⴰⵏ ⴹⴰⵔ ⵀⴰⵏ    \/\/ >>> rightAngleTriangle((3l), (4l), (5l))\n    \/\/ (true)\n    \/\/ >>> rightAngleTriangle((1l), (2l), (3l))\n    \/\/ (false)\n    public static boolean rightAngleTriangle(long a, long b, long c) {\n","canonical_solution":"public class Problem {\n    \/\/ Given the lengths of the three sides of a triangle. Return true if the three\n    \/\/ sides form a right-angled triangle, false otherwise.\n    public static boolean rightAngleTriangle(long a, long b, long c) {\n        \/\/ Sort the sides so that c is always the largest one\n        long[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \/\/ Check the Pythagorean theorem: a^2 + b^2 == c^2\n        return (sides[0] * sides[0] + sides[1] * sides[1]) == sides[2] * sides[2];\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_158","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵜⴰⵔⵉ ⵜⴰⵏ, ⵙⴰⴾⵉⵏⴰⵜ ⴰⵓⴰ ⵢⵣⵣⴰⵔⴰⵏ ⴷⴰⵗ ⴰⵍⴾⴰⴷ ⵓⴰⵏ ⴰⵍⵗⴰⵍⵉⵎ    \/ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵢⴰⵏⴰⵡⵏ. ⵉⵖ ⴷⴰⵔⵙ ⴽⵉⴳⴰⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵢⴰⵏⴰⵡⵏ     \/ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ ⵜⵍⵍⴰ ⴳⵉⵙ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ. ⵔⵉⵜⵓⵔⵏ ⵜⴳⵓⵔⵉ ⵙ ⵓⵟⵟⵓⵏ ⴰⵎⵇⵔⴰⵏ     \/ ⴰⴾⵜⴰⴱ ⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰ ⵉⴾⴼ-ⴰⵏⴰⵜ ⴰⵍⴾⴰⴷ ⵏ ⵜⴰⵂⵔⵉⴾⵢ ⵏ ⵜⴰⵂⵔⵉⴾⵢ ⵏ ⵙⵜⵔⵉⵏⴶⵙ    \/\/ >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\"))))\n    \/\/ (\"string\")\n    \/\/ >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"game\"))))\n    \/\/ (\"enam\")\n    \/\/ >>> findMax((new ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    \/\/ (\"aaaaaaa\")\n    public static String findMax(ArrayList<String> words) {\n","canonical_solution":"import java.util.*;\n\npublic class UniqueCharacterFinder {\n\n    public static String findMax(ArrayList<String> words) {\n        String maxWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            int uniqueCount = (int) word.chars().distinct().count();\n            if (uniqueCount > maxUniqueCount || (uniqueCount == maxUniqueCount && word.compareTo(maxWord) < 0)) {\n                maxUniqueCount = uniqueCount;\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(findMax(new ArrayList<>(Arrays.asList(\"name\", \"of\", \"string\")))); \/\/ Output: \"string\"\n        System.out.println(findMax(new ArrayList<>(Arrays.asList(\"name\", \"enam\", \"game\")))); \/\/ Output: \"enam\"\n        System.out.println(findMax(new ArrayList<>(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\")))); \/\/ Output: \"aaaaaaa\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\")))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\", (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"},{"task_id":"HumanEval_159","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰ ⴼⴰⵍ ⵓⴰⵔ ⵉⵍⵍⴰ ⴰⵋⴻⵏ ⵏ ⴾⴰⵔⵓⵜ ⵜⴰⵏ ⵓⵉ ⵉⴰⴷⵏⴻⵏ, ⴰⴷⴷⵓⴱⴰⵜ ⴰⵓⴰⴷⵉⵎ ⴰⴷ ⴰⵛⵉⴾⵉ ⴾⴰⵔⵓⵜ ⵜⴰⵏ ⵓⵉ ⵉⴰⴷⵏⴻⵏ, ⵎⴰⵛⴰⵏ ⴰⴷ ⵉⴾⵉⵛ ⵋⵓⵂⴰ.    \/ ⴰⵋⴻⵏ ⵏ ⴾⴰⵔⵓⵜ ⵜⴰⵏ ⵓⵉ ⵉⴾⵏⴰⵏⴻⵏ ⴷⴰⵔⴰⵜ ⵉⵂⴰⴾⴰⵏ ⵏⴻⵜ ]     \/ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⵜⴰⵔⵂⴰⴾ ⴰⵍⴾⴰⴷ ⵏ [ⵓⴾⵜⴰⴱ ⵏ ⴾⴰⵔⵓⵜ ⵜⴰⵏ ⵓⵉ ⵉⵛⵛⴰⵏⵏⵢⵏ ⴷⴰⵔⴰⵜ ⴰⵍⵆⵉⴷⵎⴰⵜⵢⵏ ⵏⴰⵏⴰⵗ,     ⵎⴰⵛⴰ ⴷⵖⴰ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵜⵓⵜⵜⵓⵢⴷ ⴽⵉⴳⴰⵏ ⵏ ⵉⴽⴰⵔⵓⵟⵏ ⵃⵎⴰ ⴰⴷ ⵜⵙⵙⵎⵓⵔⵎ ⵜⵉⴼⵉⴼⵉ ⵏ ⵡⴰⵙⵙ.    \/ⵜⴻⵈⴰⵍⴻ ⴰⵂⴰⵔⴻⵓⴰⵏ ⴰⵂⵓⵙⴾⴻⵏ, ⴰⴷ ⴾⴰⵍⴰ ⵉⴶⵔⴰⵓⴰⵏ ⴰⴶⵓⴷⵉⵉⴰⵏ ⴰⵏ ⴾⴰⵔⵓⵜⴰⵏ,    \/\/ >>> eat((5l), (6l), (10l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))\n    \/\/ >>> eat((4l), (8l), (9l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))\n    \/\/ >>> eat((1l), (10l), (10l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))\n    \/\/ >>> eat((2l), (11l), (5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))\n    \/\/ Variables:\n    \/\/ @number : integer\n    \/\/ the number of carrots that you have eaten.\n    \/\/ @need : integer\n    \/\/ the number of carrots that you need to eat.\n    \/\/ @remaining : integer\n    \/\/ the number of remaining carrots thet exist in stock\n    \/\/ Constrain:\n    \/\/ * 0 <= number <= 1000\n    \/\/ * 0 <= need <= 1000\n    \/\/ * 0 <= remaining <= 1000\n    \/\/ Have fun :)\n    public static ArrayList<Long> eat(long number, long need, long remaining) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<Long> eat(long number, long need, long remaining) {\n        long totalEaten = number;\n        long carrotsToEat = Math.min(need, remaining);\n        totalEaten += carrotsToEat;\n        long carrotsLeft = remaining - carrotsToEat;\n        \n        return new ArrayList<Long>(Arrays.asList(totalEaten, carrotsLeft));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_160","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵉⵍⵍⴰ ⵖⵓⵔ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴽⴰⵔⵏ ⵏ ⵉⵎⵙⴽⴰⵔⵏ ⵢⴰⵏ ⵓⵎⵙⴽⴰⵔ, ⴷ ⵉⵍⵍⴰ ⵖⵓⵔ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴽⴰⵔⵏ ⵏ ⵉⵎⵙⴽⴰⵔⵏ ⵙ ⵙⵉⵏ ⵉⵎⵙⴽⴰⵔⵏ.     \/ Oⴱⴻⵔⴰⵏⴷ ⴻⵈⵈⴰⵍ ⵍⵉⵙⵜ ⵏ ⴰⵔⵔⵉⴻ ⵏ ⵉⵏⵜⴻⵔⴶⴻⵓⵔ ⵜⴰⵏ ⵓⴰⵔ ⵏ ⵉⵍⴰ ⴰⵔⴰⵆ    \/ ⵜⵉⵖⵣⵉ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵉⵎⵙⵡⵓⵔⵉⵏ ⵜⵣⴳⴰⵔ ⵜⵉⵖⵣⵉ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵉⵎⵙⵡⵓⵔⵉⵏ ⵙ ⵓⴽⵣⴰⵢ ⵏ ⵢⴰⵏ.     \/ ⴰⵜⵡⵉⵍ:     \/ => ⵜⴰⵢⴰⴼⵓⵜ = 9     \/ ⵜⴰⵢⴰⴼⵓⵜ = 2 + 3 * 4 - 5     \/ ⴰⵙⵉⵔⴰ ⵏ ⵓⵙⵉⵔⴰ ⵏ ⵓⵙⵉⵔⴰ = [2, 3, 4, 5]     \/ ⴰⵎⵙⵙⵎⵔⵙ['+', '*', '-']     \/ ⴰⵍⵎⵉⵜⴰⵍ:     \/ ⴰⴱⵓⵖⵍⵓ ⵙ ⵜⴱⵔⵉⴷⵜ ⵏ ⵓⵙⴼⵙⵉ (**)     \/ ⴰⴱⵟⵟⵓ ⵏ ⵜⵣⴰⵍⵖⵉⵡⵉⵏ ( \/\/)     \/ ⴰⴱⵟⵟⵓ (*)     \/ ⴰⵙⵏⵓⵎⵎⵓ ( - )     \/ ⴰⵔⵏⵓ ( +)     \/ ⵜⵉⵎⴳⴳⵉⵜⵉⵏ ⵏ ⵍⵊⵉⴱⵔ ⵏ ⵜⵉⴷⵜ:     \/ ⴰⵙⵉⵡⴹ ⴷ ⵓⵙⵡⵓⵔⵉ ⵏ ⵓⵙⵡⵓⵔⵉ ⴰⴷ.     \/ ⵉⴳⴰ ⵡⴰⵔⵔⴰ ⵏ ⵓⵙⵏⵖⵍ ⵡⵉⵙⵙ ⵙⵉⵏ ⵢⴰⵏ ⵓⵍⴳⴰⵎ ⵏ ⵉⵙⵏⵖⵍⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵙⵎⵔⵙⵏ ⵉⵙⵏⵖⵍⵏ ⵏ ⵓⵙⵏⵖⵍ ⵏⵏⴰ ⵉⵜⵜⵓⴼⴽⴰⵏ ⵃⵎⴰ ⴰⴷ ⵙⴽⵔⵏ ⵜⴰⵍⵊⵉⴱⵔⵉⵜ.    \/ ⴷⴰⵔⵙ ⵙⵉⵏ ⵉⵙⵎⵉⵍⵏ ⵏ ⵓⵙⵏⵖⵍ, ⴷ ⵓⵎⵙⴽⴰⵔ. ⵉⵙⵎⵉⵍⵏ ⵏ ⵓⵙⵏⵖⵍ ⴰⵎⵣⵡⴰⵔⵓ ⵖⵓⵔⵙ ⵜⵉⵎⴳⴳⵉⵜⵉⵏ ⵏ ⵍⵊⵉⴱⵔ, ⴷ     public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if (operand.isEmpty() || op.isEmpty() || operand.size() - 1 != op.size()) {\n            throw new IllegalArgumentException(\"Invalid input.\");\n        }\n\n        \/\/ Start with the first operand.\n        long result = operand.get(0);\n\n        \/\/ Apply the operators in sequence.\n        for (int i = 0; i < op.size(); i++) {\n            String operator = op.get(i);\n            long nextOperand = operand.get(i + 1);\n\n            switch (operator) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"\/\/\":\n                    if (nextOperand == 0) {\n                        throw new ArithmeticException(\"Division by zero.\");\n                    }\n                    result \/= nextOperand;\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, nextOperand);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> operators = new ArrayList<>();\n        operators.add(\"+\");\n        operators.add(\"*\");\n        operators.add(\"-\");\n\n        ArrayList<Long> operands = new ArrayList<>();\n        operands.add(2L);\n        operands.add(3L);\n        operands.add(4L);\n        operands.add(5L);\n\n        System.out.println(doAlgebra(operators, operands));  \/\/ Output: 9\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\/\/\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n"},{"task_id":"HumanEval_161","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⴰⵍⵎⵉⵜⴰⵍ ⵜⴰⵏ     \/ ⵜⴰⵡⵓⵔⵉ ⵜⵣⵎⵎⵔ ⴰⴷ ⵜⵕⵓⴹ ⵜⵉⴼⵉⵏⴰⵖ ⵏⵏⴰ ⴷ ⵢⵓⵛⴽⴰⵏ.     \/ ⴰ ⴼⴰⵍ ⵙⵜⵔⵉⵏⴶ ⵓⴰⵔ ⵉⵍⴰ ⴰⵍⴾⴰⴷⴰⵏ, ⵙⴰⵎⵎⵓⵜⵜⵉ ⵙⵜⵔⵉⵏⴶ    ⵎⴽ ⵓⵔ ⵜⵍⵍⵉ, ⵃⴹⵓ ⵖⵉⴽⵍⵍⵉ ⵉⵍⵍⴰⵏ.    \/ ⴰ ⴼⴰⵍ ⵙ[ⵉ] ⵢⵈⵈⴰⵍ ⴰⵍⴾⵉⵜⵜⴰⴱ, ⴰⴾⴰⵉⴰⴷ ⵏⵢⵜ ⵙ ⴰⵛⵂⵔⵓⵜ ⵏ ⴷⴰⵔⴰⵜ ⵙ ⴰⴼⴰⵍⵍⴰ ⵎⵢⵗ ⴼⵉⵛⵢⵔⵢⵙ ⵓⴰⵔ ⵏ ⵉⵋⵋⴰ ⴰⵓⵢⵏ,     \/ ⴰⵜⵓⴰⵣⴰⵉ ⵙⴻⵜⴰⵔⴻⴷ ⵙ.     \/\/ >>> solve((\"1234\"))\n    \/\/ (\"4321\")\n    \/\/ >>> solve((\"ab\"))\n    \/\/ (\"AB\")\n    \/\/ >>> solve((\"#a@C\"))\n    \/\/ (\"#A@c\")\n    public static String solve(String s) {\n","canonical_solution":"public static String solve(String s) {\n        boolean hasLetters = false;\n        StringBuilder result = new StringBuilder();\n        \n        \/\/ Check if the string contains any letters and process the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n        \n        \/\/ If no letters are present, reverse the string\n        if (!hasLetters) {\n            result.reverse();\n        }\n        \n        return result.toString();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"},{"task_id":"HumanEval_162","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵉⴳ ⵉⴳⴰ 'text' ⵢⴰⵏ ⵓⴹⵕⵉⵚ ⴰⵣⴳⵣⴰ, ⵔⴰⵏⵜⵏ null.     \/ ⴷⴰⵜⴰ ⵜⵉⴼⵉⵏⴰⵖ 'text', ⵙⵓⵍⵖ ⵜⴰⴼⵉⵏⴰⵖ ⵏ ⵓⴽⵙⴰⵢ ⵏ ⵓⴳⵣⵣⵓⵎ md5 ⵏⵏⵙ.     \/\/ >>> stringToMd5((\"Hello world\"))\n    \/\/ Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")\n    public static Optional<String> stringToMd5(String text) {\n","canonical_solution":"import java.security.*;\nimport java.util.*;\n\nclass Problem {\n    public static Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n            for (byte b : messageDigest) {\n                sb.append(String.format(\"%02x\", b));\n            }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return Optional.empty();\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n    }\n\n}\n"},{"task_id":"HumanEval_163","nl":"taq_Tfng","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ⵙ ⵓⵎⴷⵢⴰ:     \/ ⴷ ⴱ, ⵙ ⵓⵍⵍⵙ ⵏ ⵓⵙⵙⴰⵔⵓ.     \/ ⴷⴼⴼⵉⵔ ⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵏⵖⴰⵏⵏ a ⴷ b, ⵙⵏⵓⵍⴼⵓ ⵉⵎⴹⴰⵏ ⵉⵎⵎⵔⵡⵉⵏ ⴳⵔ a     \/\/ >>> generateIntegers((2l), (8l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))\n    \/\/ >>> generateIntegers((8l), (2l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))\n    \/\/ >>> generateIntegers((10l), (14l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> generateIntegers(long a, long b) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    \/\/ Given two positive integers a and b, return the even digits between a\n    \/\/ and b, in ascending order.\n    public static ArrayList<Long> generateIntegers(long a, long b) {\n        ArrayList<Long> result = new ArrayList<>();\n\n        \/\/ Ensure a is the smaller number and b is the larger number\n        long start = Math.min(a, b);\n        long end = Math.max(a, b);\n\n        \/\/ Find and add even numbers in the range [start, end] to the result list\n        for (long i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(generateIntegers(2, 8)); \/\/ [2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2)); \/\/ [2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); \/\/ []\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(generateIntegers((2l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((10l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((132l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((17l), (89l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"}]