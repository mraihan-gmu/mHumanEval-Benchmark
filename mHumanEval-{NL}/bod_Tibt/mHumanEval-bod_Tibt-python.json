[
    {
        "task_id": "HumanEval/0",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"དཔེ་གཞི་: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) རྫུན་པ། >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) བདེན་པ།\"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"ལས་འགན་འདིའི་ནང་འཇུག་ནི་ནང་འཇུག་གི་སྒམ་ཚིགས་ཀྱི་སྡེ་ཚན་མང་པོ་ཡོད་པའི་ཐིག་ཁྲམ་ཡིན། ཁྱོད་ཀྱི་དམིགས་ཡུལ་ནི་སྡེ་ཚན་དེ་དག་སོ་སོར་དབྱེ་ནས་ཐིག་ཁྲམ་སོ་སོར་དབྱེ་ནས་དེ་དག་གི་ཐོ་ཡིག་ཕྱིར་སློག་བྱ་རྒྱུ་ཡིན། སྡེ་ཚན་སོ་སོར་ཆ་སྙོམས་ (སྒམ་ཚིགས་སོ་སོར་སྒོ་ཕྱེས་ཡོད་ན་སྒོ་ཕྱེས་ཡོད་ན་སྒོ་ཕྱེས་ཡོད་) དང་། གཅིག་གིས་གཅིག་ནང་འཇུག་མི་འདུག ནང་འཇུག་ཐིག་ཁྲམ་ནང་ཡོད་པའི་སྟོང་པ་གང་ཡོད་ལ་སྣང་མེད་གཏོང་། དཔེ་གཞི་: >>> separate_paren_groups' ((( ) (() (( ) ) ) ) ) ) [' (()) ' ' ' ((((()) '))\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"འབྲས་བུ་ནི་ལྡོག་པའི་ཐིག་ཁྲམ་གྲངས་ཤིག་ཡིན་ན་དེའི་ཆ་ཤས་ནི་ཧྲིལ་གྲངས་ (གྲངས་ཀ་ཆེ་བས་གྲངས་ཀ་ཉུང་བ་) དང་བཅུ་ཚིགས་ (ལྷག་ལུས་ཆ་ཤས་ནི་ 1 ལས་ཆུང་བ་) སྟེ་ཆ་ཤས་བཅུ་ཚིགས་སུ་བཅད་པ་ཡིན། དཔེ་གཞི་: >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"ཤོག་ངོས་འདི་ནང་ \"$1\" ཀྱི་ཚབ་ཀྱི་ \"$2\" ཡོད་པའི་ནང་ \"$2\" ཀྱི་ཚབ་ཀྱི་ \"$3\" ཡོད་པའི་ཡིག་གཟུགས་ཡོད།\"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"ནང་འཇུག་གྲངས་ཀྱི་ཐོ་ཡིག་ཤིག་གི་ཆེད་དུ་ Mean Absolute Deviation ཚད་གཞི་འདི་གི་བར་མའི་གྲངས་སུ་རྩིས་དགོས། Mean Absolute Deviation ནི་ཆ་རྐྱེན་རེ་རེ་དང་བར་གྱི་བར་གྱི་བར་གྱི་བར་གྱི་བར་གྱི་བར་གྱི་ཁྱད་པར་ཡིན། (གནས་འདི་ནང་གི་བར་གྱི་གྲངས་ཀ་ནི། MAD = average དང་། x - x_mean རྒྱས་བཤད་ནི། >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"ནང་འཇུག་གི་ཐོ་ཡིག་ནང་རིམ་བཞིན་གྱི་ཆ་ཤས་གཉིས་རེ་རེའི་བར་ལ་གྲངས་ \"delimeter\" ཞིག་བཅུག་དགོས། `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"ཚད་འཛིན་འདི་ནི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་གྱི་ནང་དོན་ལ་དོན།\"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"ནང་འཇུག་གི་ཡིག་འབྲུ་ཐོ་ཡིག་ནང་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་པའི་ཡིག་འབྲུ་ནང་འཇུག་འཇུག་\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"གྲངས་ཀྱི་ཐོ་ཡིག་ཤིག་གི་ནང་གྲངས་ཚང་གི་གྲངས་བསྡོམས་དང་གྲངས་ཚང་གི་འབྲས་བུ་ལས་གྲུབ་པའི་གྲངས་ཀ་ཞིག་ཕྱིར་ལོག་བྱེད་པ། སྟོང་པའི་གྲངས་ནི་ 0 དང་སྟོང་པའི་འབྲས་བུ་ནི་ 1 ཡིན་པར་ངེས་པ། >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24)\"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"སྟབས་གཅིག་ནས་ཨང་གྲངས་མཐའ་དག་གི་ཐོ་ཡིག་ནས་རིམ་པ་དེའི་ནང་གཏན་འབེབས་དུས་ཚིགས་བར་རྙེད་པའི་ rolling maximum element གྱི་ཐོ་ཡིག་ཞིག་བཟོ། >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"ཚད་གཞི་འདི་ལས་ལྷག་པའི་ཕྲ་རིང་གི་གོ་རིམ་དེ་འཚོལ་དགོས། ཚད་གཞི་འདི་ལས་ལྷག་པའི་ཕྲ་རིང་གི་གོ་རིམ་དེ་འཚོལ་དགོས། ཚད་གཞི་འདི་ལས་ལྷག་པའི་ཕྲ་རིང་གི་གོ་རིམ་དེ་འཚོལ་དགོས། ཚད་གཞི་འདི་ལས་ལྷག་པའི་ཕྲ་རིང་གི་གོ་རིམ་དེ་འཚོལ་དགོས། ཚད་གཞི་འདི་ལས་ལྷག་པའི་ཕྲ་རིང་གི་གོ་རིམ་དེ་འཚོལ་དགོས། ཚད་གཞི་འདི་ལས་ལྷག་པའི་ཕྲ་རིང་གི་གོ་རིམ་དེ་འཚོལ་དགོས། ཚད་གཞི་འདི་ལས་ལྷག་པའི་ཕྲ་རིང་གི་གོ་རིམ་དེ་འཚོལ་དགོས། ཚད་གཞི་འདི་ལས་ལྷག་པའི་ཕྲ་རིང་གི་གོ་རིམ་དེ་འཚོལ་དགོས། ཚད་གཞི་འདི་ལས་ལྷག་པའི་ཕྲ་རིང་གི་གོ་རིམ་དེ་འཚོལ་དགོས། ཚད་གཞི་འདི་ལས་ལྷག་པའི་ཕྲ་རིང་གི་གོ་རིམ་དེ་འཚོལ་དགོས། ཚད་གཞི་འདི་ལས་ལྷག་པའི་ཕྲ་རིང་གི་གོ་རིམ་དེ་འཚོལ་དགོས། ཚད་གཞི་འདི་ལས་ལྷག་པའི་ཕྲ་རིང་གི་གོ་རིམ་དེ་འཚོལ་དགོས། ཚད་གཞི་འདི་ལས་ལྷག་པའི་ཕྲ་རིང་གི་གོ་རིམ་དེ་འཚོལ་དགོས།\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"ཇི་ཡོད་ཚད་ལྡན་ཚད་ལྡན་ཡིན་མིན་བརྟག་དཔྱད་བྱེད།\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"ནང་འཇུག་ནི་ string a དང་ b གཉིས་ཡིན་ཏེ། དེ་གཉིས་ནི་ 1 དང་ 0 ཙམ་ལས་གྲུབ་པ་ཡིན། སྦྲེལ་རྟགས་ XOR འདི་དག་ནང་འཇུག་བྱས་རྗེས་ string སྦེ་ཕྱིར་སློག་བྱེད་སྟངས། >>> string_xor (('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"string གྱི་ཐོ་ཡིག་ལས་རིང་ཤོས་དེ་ཕྱིར་སློག་བྱེད། ཚད་མཚུངས་ཀྱི་ string མང་པོ་ཡོད་ན་སྔོན་ཤོས་དེ་ཕྱིར་སློག་བྱེད། ནང་འཇུག་ཐོ་ཡིག་སྟོང་པ་ཡོད་ན་ None སློག་བྱེད། >>> longest (([]) >>> longest ((['a', 'b', 'c']) 'a' >>> longest ((['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"འབྲས་བུ་ནི་གྲངས་ཆ་ a དང་ b གཉིས་ཀྱི་ཆེ་ཆུང་གི་ཆ་སྙོམས་གྲངས་ཆ་ཤས་ཤིག་ཡིན།\"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"ནང་འཇུག་ཐིག་གི་སྔོན་འཇུག་ཚང་མའི་ཐོ་ཡིག་དེ་ཐུང་ཤོས་ནས་རིང་ཤོས་བར་སླར་ལོག་བྱེད། >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"ནང་འཇུག་བྱེད་གྲངས་ཀྱི་གོ་རིམ་ནང་ 0 ནས་ n བར་གྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གྲངས་ཀྱི་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་ནང་གོ་རིམ་དང་གོ་རིམ་བཞིན་\"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"string ཞིག་ཡོད་ན། དེ་ནང་ཡིག་འབྲུ་ཁྱད་པར་ཅན་ཇི་ཙམ་ཡོད་ (ཡིག་གཟུགས་ཆེ་ཆུང་གང་ཡིན་ལ་རག་མི་དགོས།) འཚོལ་ཞིབ་བྱེད་དགོས། >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"འདིར་ཡིག་གཟུགས་ཤིག་ཡོད། 'o' note, lasts four beats 'o' dak' - half note, lasts two beats 'o' - quater note, lasts one beat >>> parse_music. 'o' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o' dak' o dak' o dak' o dak' dak' o dak' dak' o dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak' dak\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"གཞི་ཐོག་གི་ཐིག་ཁྲམ་ནང་ནང་དོན་འོག་མའི་ཐིག་ཁྲམ་ཇི་ཙམ་རྙེད་ཐུབ་པ་འཚོལ་དགོས། གྱངས་ཁ་ལྡོག་པའི་གནད་དོན་གྲངས་རྩིས་དགོས། >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"ནང་འཇུག་ནི་སྟོང་པ་ཉིད་ཀྱིས་ཚད་འཛིན་བྱས་པའི་གྲངས་ཀྱི་ཐིག་ལེ་ཞིག་ཡིན་ཏེ། ' ༠' ནས་ ' ༩' བར་ཡིན། འདེམས་ཁོངས་འོས་ལྡན་ནི་ ' ༠', ' ༡', ' ༢', ' ༣', ' ༤', ' ༥', ' ༦', ' ༧', ' ༨' དང་ ' ༩' ཡིན། ཐིག་ལེ་དེ་ཆུང་ཤོས་ནས་ཆེ་བར་དབྱེ་བའི་གྲངས་དང་སྒྲིག་ནས་ཕྱིར་སློག་བྱེད། >>> sort_numbers ((' ༣ ༡ ༥') ' ༡ ༣ ༥' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"ཤོག་གྲངས་གྲངས་ (ཉུང་མཐར་གཉིས་ལས་) ཡོད་པའི་ཐོ་ཡིག་ནས་ཕན་ཚུན་ཉེ་བར་ཡོད་པའི་ཤོག་གྲངས་གཉིས་འདེམས་ནས་ཕྱིར་སློག་བྱ་དགོས། དེ་ནས་དེ་དག་རིམ་བཞིན་ཕྱིར་སློག་བྱ་དགོས། (ཉུང་མཐར་གྲངས་ཆུང་བ་དང་མང་བ་) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"གྲངས་ཀྱི་ཐོ་ཡིག་ (ཉུང་མཐར་ཆ་ཤས་གཉིས་ལས་) ཤིག་ཡོད་ན། གྲངས་ཆུང་ཤོས་ནི་ 0 དང་ ཆེ་ཤོས་ནི་ 1 ཏུ་འགྱུར་བའི་ཚད་ལྡན་སྒྱུར་བཅོས་བྱེད་དགོས། >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"ཡིག་སྣོད་ནང་གང་རུང་གི་ Python གནས་གོང་དག་པའི་ཐོ་ཡིག་ནང་གསལ་བའི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གྱི་ནང་གསལ་གསལ་གསལ་གྱི་ནང་གསལ་གསལ་གསལ་གསལ་གྱི་ནང་གསལ་གསལ་གསལ་གསལ་གསལ་གྱི་ནང་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གྱི་ནང་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གྱི་ནང་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གྱི་ནང་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་གསལ་\"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"string གྱི་ཚད་གཞི་དེ་སླར་ལོག་བྱ་དགོས།\"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"གྲངས་ n ཤིག་གི་ཆེད་དུ་ n ལས་ཆུང་བའི་གྲངས་ཆེན་ཤོས་དེ་འདྲ་མཉམ་དུ་བགོས་པའི་གྲངས་ཆེན་འཚོལ་བ། >>> largest_divisor ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"ཚད་ལྡན་གྲངས་ཀྱི་གཞི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་གྲངས་ཀྱི་\"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"སྐར་ཆ་གྲངས་ལྡན་གྱི་ཐོ་ཡིག་ནས་ཐེངས་གཅིག་ལས་མང་བ་བྱུང་བའི་ཆ་ཤས་ཚང་མ་ཕྱིར་འདོན་བྱེད། སྐར་ཆ་གྲངས་ལྡན་གྱི་རིམ་པ་སྔོན་གྱི་ནང་བཞིན་བཞག་དགོས། >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"string ཆེད་ཡིག་འབྲུ་ཆུང་ཆུང་རྣམས་ཡིག་ཆུང་དང་ཡིག་ཆུང་ཆུང་བར་བསྒྱུར་དགོས། >>> flip_case ((('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"string གྱི་ཐོ་ཡིག་དེ་ string གཅིག་ཏུ་བསྡོམས་ནས་ >>> concatenate (([]) '' >>> concatenate ((['a', 'b', 'c']) 'abc' ཟེར་བ་ལྟ་བུར་བཀོད་དགོས།\"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"ནང་འཇུག་གི་ཡིག་འབྲུ་ཐོ་ཡིག་ནང་སྔོན་འཇུག་གཅིག་ལས་འགོ་འཛུགས་པའི་སྔོན་འཇུག་གཅིག་ལ་གློག་འདོན། >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array']\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"ཤོག་གྲངས་ནང་ཡོད་པའི་གྲངས་ཆ་ཆ་མཐུན་པ་ཁོ་ན་ཕྱིར་ལོག་བྱེད་པ། >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"གྲངས་ཤིག་སྔོན་གྲངས་ཡིན་ན་ true སླར་ལོག་བྱེད། དེ་མིན་ false སླར་ལོག་བྱེད། >>> is_prime (སྔོན་གྲངས་) དང་། false སླར་ལོག་བྱེད། >>> is_prime (སྔོན་གྲངས་) དང་། false སླར་ལོག་བྱེད། >>> is_prime (སྔོན་གྲངས་) དང་། false སླར་ལོག་བྱེད། >>> is_prime (སྔོན་གྲངས་) དང་། false སླར་ལོག་བྱེད། >>> is_prime (སྔོན་གྲངས་) དང་། false སླར་ལོག་བྱེད། >>> is_prime (སྔོན་གྲངས་) དང་། false སླར་ལོག་བྱེད། >>> is_prime (སྔོན་གྲངས་) དང་། false སླར་ལོག་བྱེད། >>> is_prime (སྔོན་གྲངས་) དང་། false སླར་ལོག་བྱེད། >>> is_prime (སྔོན་གྲངས་) དང་། false སླར་ལོག་བྱེད།\"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs ནི་ polynomial གི་ coefficients ཞིག་ཡིན། find_zero find x འདི་ལྟར་ poly (((x) = 0 find_zero སླར་ལོག་བྱེད་དེ་ 0 ཙམ་མ་གཏོགས་མེད་ཀྱང་མང་བ་ཡོད་ཀྱང་ཡོད། དེ་ལས་ལྷག་པའི་ find_zero ནང་ xs ཡི་གྲངས་གྲངས་ཆ་དང་ 0 ལས་མང་བ་ཡོད་ཀྱང་གྲངས་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་མེད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་ཉུང་བ་ཡོད་ཀྱང་གྲངས་ཆ་ཉུང་བ་ཡོད་ཀྱང་གྲངས་ཆ་ཉུང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་ཉུང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་ཉུང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་ཉུང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་མང་བ་ཡོད་ཀྱང་གྲངས་ཆ་ཡོད།\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"ཚད་ལྡན་ xs ཡོད་པའི་སྒོ་གྲངས་ xs ཡོད་པའི་རྩིས་གྲངས་ལ་དཔྱད་པ། xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"ལས་འགན་འདི་གིས་ཡིག་ཐོ་lཞིག་ལེན་ནས་ཡིག་ཐོ་l' དེ་འདྲ་ཞིག་ཕྱིར་ལོག་བྱེད་དེ་ l' དེ་གྲངས་ཐང་གསུམ་གྱིས་བགོས་མི་ཐུབ་པའི་ནང་ l དང་མཚུངས་པ་དང་། དེའི་གྲངས་ཐང་ནི་གྲངས་ཐང་གསུམ་གྱིས་བགོས་པའི་ནང་ l ཀྱི་གྲངས་ཐང་འདྲ་མཚུངས་ཡིན་ཡང་། དབྱེ་བ་ཕྱེ་ཡོད། >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"ཚད་ལྡན་གྱི་ཐོ་ཡིག་ནང་དབྱེ་བ་ཕྱེ་བའི་ཆ་ཤས་ལོག་འཇུག་བྱེད། >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"ཚིག་ཡིག་ནང་གལ་ཆེའི་ཆ་ཤས་སླར་ལོག་བྱེད། >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"གྱངས་ཁ་ 7 ནི་ 11 དང་ 13 བཅས་ཀྱིས་ཆ་བགོས་བྱེད་པའི་ n ལས་ཆུང་བའི་ཧྲིལ་གྲངས་ནང་ཐེངས་གྲངས་ཕྱིར་ལོག་བྱེད་པ། >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"ལས་འགན་འདི་གིས་ཡིག་ཐོ་lཞིག་ལེན་ནས་ཡིག་ཐོ་l' དེ་འདྲ་ཞིག་ཕྱིར་ལོག་བྱེད་དེ། l' འདི་ཉེར་མཁོ་ཅན་གྱི་ཡིག་གཟུགས་ནང་ l དང་མཚུངས་ཤིང་། དེའི་ནང་པའི་གྲངས་གཟུགས་ཆ་སྙོམས་ཀྱི་གྲངས་གཟུགས་ཆ་སྙོམས་ཀྱི་གྲངས་གཟུགས་ཆ་སྙོམས་ཀྱི་གྲངས་གཟུགས་ཆ་སྙོམས་ཀྱི་གྲངས་གཟུགས་ཆ་སྙོམས་དང་མཚུངས་ཀྱང་། དབྱེ་བ་ཕྱེ་ཡོད། >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"རྒྱུན་ལྡན་གྱི་ཡིག་འབྲུ་ནང་འདྲེན་བྱེད་དེ་ encode_cyclic ལས་འགན་གྱིས་ཨང་ཀོཌ་བྱས་ཡོད། ཨང་ཀོཌ་བཅད་པའི་ཡིག་འབྲུ་ཕྱིར་ལོག་བྱེད་པ།\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"ཚོས་གཞི་གསུམ་གྱི་རིམ་བཞིན་གྱི་སྡེ་ཚན་ནང་ encoded string སླར་ལོག་བྱེད།\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib དེ་ནི་ཕི་བྷོ་ན་ཅིའི་གྲངས་ཀ་དང་དེ་ཡང་ཨང་གྲངས་དང་པོ་ཡིན། >>> prime_fib (༡) ༢ >>> prime_fib (༢) ༣ >>> prime_fib (༣) ༥ >>> prime_fib (༤) ༡༣ >>> prime_fib (༥) ༨༩\"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triple_sum_to_zero ནང་གྲངས་ཚང་གི་ཐོ་ཡིག་ཞིག་རྩིས་རྒྱག་བྱེད་སྟབས། གལ་ཏེ་གྲངས་སུ་གྲངས་ཚང་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་སུ་གྲངས་རབ།\"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན་པ་བསམ་བློ་བཏང་ཞིག ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན། ཚད་མེད་རིང་བའི་ཕྲེང་བ་ཞིག་ཡིན།\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"ཕྱིར་ལོག་བྱེད་ཐོ་ཡིག་ནང་ཆ་ཤས་གྲངས་སུ་ 1 ཀྱིས་ཡར་སེང་བྱེད་ཡོད། >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero ནང་གྲངས་ཚང་གི་ཐོ་ཡིག་ཞིག་རྩིས་རྒྱག་བྱེད་སྟབས། གལ་ཏེ་གྲངས་སུ་གྲངས་ཚང་ཆ་མེད་གཉིས་ཡོད་ན་ True སླར་ལོག་བྱེད། གལ་ཏེ་དེ་འདྲ་མིན་ན་ False སླར་ལོག་བྱེད། >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero (([1]) False \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"ནང་འཇུག་གྲངས་ x གི་གྲངས་གཞི་གཞི་བསྒྱུར་གཞི་གྲངས་དུ་བསྒྱུར་བ། བསྒྱུར་བཅོས་བྱས་རྗེས་ string ངོ་ཚབ་ཕྱིར་སློག་བྱེད། གཞི་གྲངས་ནི་ 10 ལས་ཉུང་བ་ཡིན། >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"གཡོན་པའི་རིང་ཚད་དང་མཐོ་ཚད་ཀྱི་ས་ཆ་དེ་གསུམ་ཟུར་གྱི་ས་ཆ་ཡིན། >>> triangle_area\"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4གྲངས་རིམ་ནི་ Fibbonacci sequence དང་འདྲ་བའི་རིམ་པ་ཞིག་ཡིན་ཏེ། དེའི་འགྲེལ་བཤད་ནི་གཤམ་གསལ་ལྟར་ཡིན་ཏེ། fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4གྲངས་རིམ་གྱི་ n-th ཅན་གྱི་ཆ་ཤས་ལ་ཕན་པའི་ཆེད་ལས་འགན་ཞིག་བཀོད་རོགས། སླར་ལོག་མི་གཏོང་། >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"ཤོག་གྲངས་ཀྱི་བར་མཚམས་ཀྱི་ལོག་ལམ་ནི་གལ་ཆེར་ཐོ་ཡིག་ནང་ཡོད་ཀྱི་ཆ་ཤས་ཡིན།\"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"ཚད་འཛིན་བྱེད་སྟངས་ནི་ཁ་སྐོང་གི་རྣམ་གྲངས། >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (numerics) >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"ཚད་འཛིན་བྱེད་ཐིག་ཡིག་ནང་ཐིག་ཡིག་ཡིག་རྟགས་བཀོལ་ནས་སླར་ལོག་བྱེད།\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"ཚོས་གཞི་ནང་ཡིག་འབྲུ་རེ་རེ་ལ་ 5 བསྒྱུར་ནས་ཡིག་འབྲུ་ཨང་བཏགས་པའི་གྲངས་ཀ་སླར་ལོག་བྱེད།\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels ནི་ string དང་ vowels མེད་པའི་ string སླར་ལོག་བྱེད་པའི་ལས་འགན་ཞིག་ཡིན། >>> remove_vowels ((('') '' >>> remove_vowels (((\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' ཟེར་བ་ལྟ་བུ།\"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"གྲངས་ཐོ་ l ནང་གི་གྲངས་ཆ་ཚང་མ་ཐིག་ཚད་ t ལས་འོག་ན་ཡོད་ན་ True སླར་ལོག་བྱེད། >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"གྲངས་ x དང་ y གཉིས་བསྡོམས་ནས་ 12 དང་།\"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"ཚིག་གཉིས་ནང་ཡིག་འབྲུ་འདྲ་མཚུངས་ཡོད་མེད་བརྟག་དཔྱད་བྱེད། >>> same_chars (('eabcdzzzz', 'dddzzzzzzzddeddabc') བདེན་པ། >>> same_chars (('abcd', 'dddddddddabc') བདེན་པ། >>> same_chars (('dddddddabc', 'abcd') བདེན་པ། >>> same_chars (('eabcd', 'dddddddddabc') རྫུན་པ། >>> same_chars ((('abcd', 'dddddddabddce') རྫུན་པ། >>> same_chars (('eabcdzzzz', 'dddzzzzzzzddabc') རྫུན་པ།\"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"ཕི་བོ་ན་ཅིའི་ཨང་གྲངས་ n སླར་ལོག་བྱེད། >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets ནི་ \"<\" དང་ \">\" ཀྱི་ཡིག་འབྲུ་ཡིན། return True གལ་ཏེ་ཁ་ཕྱེས་པའི་ bracket ཚང་མར་མཐའ་མའི་ bracket ཞིག་ཡོད་ན་ true ཡིན་པར་ངེས་པ་ཡོད། >>> correct_bracketing (((\"<\") False >>> correct_bracketing (((\"<>\") True >>> correct_bracketing (((\"<><>>\") True >>> correct_bracketing (((\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"ཤོག་གྲངས་གཉིས་སུ་དབྱེ་བ་བཏང་བའི་གཅིག་མཚུངས་གྱི་ཆ་ཤས་ལོག་འཇུག་བྱེད། >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n གི་གྲངས་ཐང་ཆེ་ཆུང་གི་གཞི་གྲངས་ཕྱིར་ལོག་བྱེད་པ། n > 1 དང་དེ་གྲངས་ཐང་ཆེ་ཆུང་མིན་པར་བསམ་པ། >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n ནི་ 1 ནས་ n བར་གྱི་གྲངས་ཐང་རྩིས་པའི་ལས་འགན་ཞིག་ཡིན། >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets ནི་ \"(\" དང་ \"\") གི་ཡིག་འབྲུ་ཡིན། return True གལ་ཏེ་ཁ་ཕྱེས་པའི་ bracket ཚང་མར་མཐའ་མའི་ bracket ཞིག་ཡོད་ན་ true. >>> correct_bracketing (((\"(\") False >>> correct_bracketing ((() \") True >>> correct_bracketing (((())) True >>> correct_bracketing (((\"))) False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs ནི་མང་གྲངས་ཀྱི་འབྲས་བུ་ཡིན། xs[0] + xs[1] * x + xs[2] * x^2 + .... ཚད་ལྡན་གྱི་འབྲས་བུ་དེ་འདྲ་ཕྱིར་སློག་བྱ་དགོས། >>> ཚད་ལྡན་ (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> ཚད་ལྡན་གྱི་འབྲས་བུ་ ([1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"FibFibགྲངས་རིམ་ནི་ Fibbonacci sequence དང་འདྲ་བའི་རིམ་པ་ཞིག་ཡིན་ཏེ། དེའི་འགྲེལ་བཤད་ནི་གཤམ་གསལ་ལྟར་ཡིན་ཏེ། fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) ཐབས་ལམ་འདི་བཞིན་ཨང་རིམ་ n པའི་ཆ་ཤས་རྩིས་རྒྱག་ཆེད་ལས་འགན་ཞིག་བཀོད་རོགས། >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"འབྲི་ཐབས། ཤོག་གྲངས་ནང་ཚིག་ཡིག་གང་ཞིག་ཡོད་པའི་གྲངས་ཀ་དེ་ཕྱིར་སློག་བྱེད་ཡོད། ཤོག་གྲངས་ནང་ཚིག་ཡིག་གང་ཞིག་ཡོད་པའི་གྲངས་ཀ་དེ་ཕྱིར་སློག་བྱེད་ཡོད། ཤོག་གྲངས་ནང་ཚིག་ཡིག་གང་ཞིག་ཡོད་པའི་གྲངས་ཀ་དེ་ཕྱིར་སློག་བྱེད་ཡོད། ཤོག་གྲངས་ནང་ཚིག་ཡིག་གང་ཞིག་ཡོད་པའི་གྲངས་ཀ་དེ་ནང་ཚིག་ཡིག་གང་ཞིག་ཡོད་པའི་གྲངས་ཀ་དེ་ཕྱིར་སློག་བྱེད་ཡོད། ཤོག་གྲངས་ནང་ཚིག་ཡིག་གང་ཞིག་ཡོད་པའི་གྲངས་ཀ་དེ་ཕྱིར་སློག་བྱེད་ཡོད། ཤོག་གྲངས་ནང་ཚིག་ཡིག་གང་ཞིག་ཡོད་པའི་གྲངས་ཀ་དེ་ཕྱིར་སློག་བྱེད་ཡོད། ཤོག་གྲངས་ནང་ཚིག་ཡིག་གང་ཞིག་ཡོད་པའི་གྲངས་ཀ་དེ་ཕྱིར་སློག་བྱེད་ཡོད། ཤོག་གྲངས་ནང་ཚིག་ཡིག་གང་ཞིག་ཡོད་པའི་གྲངས་ཀ་དེ་ཕྱིར་སློག་བྱེད་ཡོད། ཤོག་གྲངས་ནང་ཚིག་ཡིག་གང་ཞིག་ཡོད་པའི་གྲངས་ཀ་དེ་ཕྱིར་སློག་བྱེད་ཡོད། ཤོག་གྲངས་ནང་ཚིག་ཡིག་གང་ཞིག་ཡོད་པའི་གྲངས་ཀ་དེ་ཕྱིར་སློག་བྱེད་ཡོད། ཤོག་གྲངས་ནང་ཚིག་ཡིག་གང་ཞིག་ཡོད་པའི་གྲངས་ཀ་དེ་ཕྱིར་སློག་བྱེད་ཡོད།\"\"\"\n\ndef vowels_count(s):\n    \"\"\"ཚོད་ལྟ་ཁ་སྐོང་།\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"ཕྱོགས་བཞིར་ཨང་གྲངས་ x གི་ཨང་གྲངས་རྣམས་སྤོ་བཤུད་དང་། ཕྱོགས་བཞིར་ཨང་གྲངས་གཡས་སུ་སྤོ་བཤུད་བྱས་རྗེས་འབྲས་བུ་ནི་ string སྦེ་ཕྱིར་ལོག་བྱེད། གལ་ཏེ་ shift > ཨང་གྲངས་གྲངས་ཡིན་ན་ཨང་གྲངས་ཕྱིར་ལོག་བྱེད། >>> circular_shift ((12) 1) \"21\" >>> circular_shift ((12) 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"ལས་འགན་འདི་ནི་ཡིག་འབྲུ་ཅིག་ནང་འཇུག་བྱེད་པ་དང་ ASCII ཡིག་རྟགས་མཐོན་པོའི་བསྡོམས་རྩིས་ལོག་བྱེད་པའི་ལས་འགན་ཞིག་འབྲི་དགོས། དཔེ་གཞི་འདི་ནི་ digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"ལས་འགན་འདིའི་ནང་ཁྱོད་ཚོར་ འབྲས་བུ་ཡོད་པའི་ཙེལ་པོ་ནང་ཁ་བ་དང་ཁམ་བུ་སོགས་ཀྱི་གྲངས་ཆ་མཚོན་བྱེད་པའི་ཡིག་འབྲུ་ཞིག་གནང་ཡོད། ཙེལ་པོ་འདིའི་ནང་ཁ་བ་དང་ཁམ་བུ་དང་ཁམ་བུ་སོགས་ཀྱི་འབྲས་བུ་ཡོད། ཙེལ་པོ་ནང་ཁ་བ་དང་ཁམ་བུ་དང་ཁམ་བུ་བཅས་ཀྱི་གྲངས་ཆ་མཚོན་བྱེད་པའི་ཡིག་འབྲུ་དེ་དང་ ཙེལ་པོ་ནང་ཡོད་པའི་འབྲས་བུ་ཚང་མའི་གྲངས་ཆ་མཚོན་བྱེད་པའི་གྲངས་ཆ་གང་ཞིག་གནང་ཡོད། དཔེར་ན། fruit_distribution\"5(apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 apples and 1 oranges\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"ཨང་གྲངས་ཀྱི་རིགས་ཀྱི་སྡོང་པོ་ཞིག་ལ་མཚོན་པའི་གྲངས་གཞི་ནི་གྲངས་ཆ་མེད་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཆ་ཤས་ཀྱི་གྲངས་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་རྐྱེན་གྱི་ཆ་རྐྱེན་གྱི་ཆ་རྐྱེན་གྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་རྐྱེན་གྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་ཆ་ཤས་ཀྱི་\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''ཁྱོད་ལ་ཆ་སྙོམས་གྲངས་ཀྱི་ཐོ་ཡིག་སྟོང་པ་མིན་པ་ཞིག་ཐོབ་ཡོད། གྲངས་ཆ་ཆ་ཚང་ལས་མང་བ་ཡོད་པ་དང་དེའི་མང་ཚད་ནི་གྲངས་ཆ་ཆ་ཚང་གི་ཐང་དང་མཚུངས་པའམ་དེ་ལས་མང་བ་ཡོད་ན་ཕྱིར་ལོག་བྱོས། གྲངས་ཆ་ཆ་ཚང་གི་མང་ཚད་ནི་གྲངས་ཆ་ཆ་ཚང་གི་ཐང་དང་མཚུངས་པའམ་དེ་ལས་མང་བ་ཡོད་ན་ཕྱིར་ལོག་བྱོས། གལ་ཏེ་དེ་ལྟ་བུའི་ཐང་མེད་ན་ཕྱིར་ལོག་བྱོས། -༡ དཔེ་གཞི་:འཚོལ་བ། (([4, 1, 2, 2, 3, 1]) == 2འཚོལ་བ། ([1, 2, 2, 3, 3, 3, 4, 4]) == 3འཚོལ་བ། ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''སྟབས་ཀྱི་གྲངས་ཐོ་ཞིག་ཡོད་ན། གྲངས་ཐོ་དེ་རྣམ་རྟོག་རིམ་བཞིན་ཕྱིར་སློག་བྱེད། རྣམ་རྟོག་རིམ་སྒྲིག་ནི་ཉུང་མཐའི་ཐང་ནས་འགོ་འཛུགས་པ་དང་། དེ་ནས་ལྷག་ལུས་གྲངས་ཐང་མང་ཤོས་དང་ཉུང་མཐའི་གྲངས་ཐང་བཅས་ཡིན། དཔེ་གཞི་: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''གཡོན་གསུམ་གྱི་རིང་ཚད་ལ་གཞི་ནས་མཚོན་ན། གཡོན་གསུམ་གྱི་རིང་ཚད་ནི་ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་ཡིན། ཕྱོགས་གསུམ་གྱི་རིང་ཚད་ནི་ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་ཡིན། གལ་ཏེ་ཟུར་གསུམ་གྱི་རིང་ཚད་ནི་ཟུར་གསུམ་གྱི་རིང་ཚད་ཡིན་ན་ཟུར་གསུམ་གྱི་རྒྱ་ཁྱོན་ནི་ཟུར་གཉིས་སུ་བསྡུ་དགོས། དེ་མིན་ཟུར་གསུམ་གྱི་རིང་ཚད་ནི་ཟུར་གསུམ་གྱི་རིང་ཚད་ལས་མང་བ་ཡིན་ན་ཟུར་གསུམ་གྱི་རྒྱ་ཁྱོན་ནི་ཟུར་གསུམ་གྱི་རིང་ཚད་ཡིན། དཔེར་ན།: triangle_area (༣,༤,༥) == 6.00 triangle_area (༡,༢,༡༠) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''དངོས་ q འཕུར་ཐུབ་པ་ཡིན་ན་ true སླར་ལོག་བྱེད་པ་དང་གཞན་ན་ false སླར་ལོག་བྱེད་པའི་ལས་འགན་ཞིག་བྲིས་དགོས། དངོས་ q འཕུར་ཐུབ་པ་ཡིན་ན་ true སླར་ལོག་བྱེད་རྒྱུ་ཡིན། དངོས་ q ཚད་ལྡན་ཡིན་ན་ (དེ་ནི་ palindromic list) ཚད་ལྡན་གྱི་ཆ་ཤས་ཀྱི་བསྡོམས་ནི་ནུས་མཐའི་ཚད་མཐའི་ཚད་ལས་ཆུང་བ་ཡང་ན་མཚུངས་པ་ཡིན། དཔེ་གཞི་: will_it_fly (([1, 2], 5) â -> False # 1+2 ཚད་མཐའི་ཚད་ལས་ཆུང་བ་ཡིན་ཀྱང་ཚད་ལྡན་མིན་པ་ཡིན། will_it_fly (([3, 2, 3], 1) â -> False # ཚད་ལྡན་ཡིན་ཀྱང་ 3+2+3 ཚད་མཐའི་ཚད་ལས་མང་བ་ཡིན། will_it_fly (([3, 2, 3], 9) â -> True # 3+23 ཚད་མཐའི་ཚད་ལས་ཆུང་བ་ཡིན་ཀྱང་ཚད་ལྡན་ཡིན། will_it_fly ((([3], 5) â -> True # 3 ཚད་མཐའི་ཚད་ལས་ཆུང་བ་ཡིན་ཀྱང་ཚད་ལྡན་མིན་པ་ཡིན།'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"ཨང་གྲངས་མཐའ་དག་གི་རིམ་པ་ཐོབ་པའི་ཚེ། རིམ་པ་པཱ་ལིན་ཌོ་མིག་ (palindromic) བྱེད་ཆེད་བསྒྱུར་དགོས་པའི་ཆ་ཤས་ཉུང་ཤོས་འཚོལ་དགོས། པཱ་ལིན་ཌོ་མིག་ (palindromic) ནི་རིམ་པ་གཉིས་སུ་ཕྱོགས་གཅིག་ཏུ་བཀླགས་པའི་རིམ་པ་ཡིན། བསྒྱུར་ཐེངས་གཅིག་གི་ནང་ཆ་ཤས་གཅིག་ལ་ཆ་ཤས་གཞན་སུ་བསྒྱུར་ཐུབ། དཔེར་ན། smallest_change ([1,2,3,5,4,7,9,6]) == 4 smallest_change ([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change ([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''ཡིག་ཚགས་ཀྱི་ཐོ་གཉིས་དང་ཡིག་ཚགས་ཀྱི་ཐིག་ཡིག་ཚང་མའི་ནང་ཡིག་རྟགས་ཉུང་བ་ཡོད་པའི་ཐོ་དེ་ཕྱིར་སློག་བྱ་བའི་ལས་འགན་ཞིག་འབྲི་དགོས། གལ་ཏེ་ཡིག་ཚགས་གཉིས་ནང་ཡིག་རྟགས་འདྲ་མཚུངས་ཡོད་ན་ཐོ་ཡིག་དང་པོ་ཕྱིར་སློག་བྱ་དགོས། དཔེ་ total_match ([], []) â -> [] total_match (['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match (['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match (['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match (['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hi', 'hi'] total_match (['4', ['1', '2', '3', '4', '5', ['4])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"གྲངས་གྲངས་ཤིག་ནི་གྲངས་གྲངས་དང་པོ་གསུམ་གྱི་ལྡབ་གྲངས་ཡིན་ན་ true སླར་ལོག་བྱེད་པ་དང་གཞན་ན་ false སླར་ལོག་བྱེད་པའི་ལས་འགན་ཞིག་བྲིས་ཤིག དཔེར་ན། is_multiply_prime ((30) == True 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"ཁྱོད་ཀྱི་ལས་འགན་ནི་གྲངས་ x ནི་ n གི་དབང་ཤུགས་གཅིག་ཡིན་ན་ true དང་གཞན་ན་ false སླར་ལོག་བྱ་བའི་ལས་འགན་ཞིག་འབྲི་རྒྱུ་ཡིན། x ནི་ n གི་དབང་ཤུགས་གཅིག་ཡིན་ན་ n**int=x དཔེར་ན་ is_simple_power (_simple_power) དང་། 4) => true is_simple_power (_simple_power) དང་། 2) => true is_simple_power (_simple_power) དང་། 8) 2) => true is_simple_power (_simple_power) དང་། 2) => false is_simple_power (_simple_power) དང་། 1) false => is_simple_power (_simple_power) དང་། 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''གྲངས་ཆ་ཧྲིལ་པོ་ a དང་གྲངས་ཆ་ཧྲིལ་པོ་ a གྱི་གྲུ་བཞི་ཡིན་ན་ True སླར་ལོག་བྱ་བའི་ལས་འགན་ཞིག་འབྲི་དགོས། དཔེ་གཞི་: iscube (a) ==> True (b) ==> False (c) ==-1) ==> True (d) ==> True (e) ==> True (f) ==> True (g) ==> True (l) ==> False (d) ==> False (l) ==> False (l) ==> True (d) ==> True (e) ==> True (l) ==> True (l) ==> True (l) ==> False (l) ==> False (l) ==> False (l) ==> True (l) ==> True (l) ==> True (l) ==> True (l) ==> True (l) ==> True (l) ==> False (l) ==> False (l) ==> True (l) ==> True (l) ==> True (l) ==> True (l) ==> True (l) ==> True (l) ==> True (l) ==> True (l) ==> True (l) ==> True (l) ==> True (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) (l) ('''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"ཁྱོད་ཚོར་ཧེ་ཀ་ཌེ་སི་མལ་གྲངས་ཤིག་རྩིས་གཞི་ལྟར་ལེན་པའི་ལས་འགན་ཞིག་འབྲི་དགོས་པའི་འགན་འཁུར་སྤྲད་ཡོད་ཅིང་། དེ་ནི་ཧེ་ཀ་ཌེ་སི་མལ་ཨང་གྲངས་ནི་སྔོན་གྲངས་ཡིན་པའི་ཨང་གྲངས་གྲངས་རྩིས་ཀྱི་ལས་འགན་ཡིན། (སྔོན་གྲངས་ནི་ 1 ལས་ལྷག་པའི་རང་བྱུང་གྲངས་ཤིག་ཡིན་པ་དང་དེ་གཉིས་ལས་ཆུང་བའི་རང་བྱུང་གྲངས་ཀྱི་འབྲས་བུ་མིན་པ་ཡིན།) ཧེ་ཀ་ཌེ་སི་མལ་ཨང་གྲངས་ནི་ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F ཡིན། སྔོན་གྲངས་ནི་ 2, 3, 5, 7, 11, 13, 17,... ཡིན་པས། ཁྱོད་ཚོར་གཤམ་གསལ་ཨང་གྲངས་ཀྱི་གྲངས་ཤིག་གཏན་འབེབས་བྱེད་དགོས་པ་ཡིན། 2, 3, 5, 7, B (=ཨང་གྲངས་བཅུ་གཉིས། 11), D (=ཨང་གྲངས་བཅུ་གཉིས། 13) ལྟ་རྟོག་བྱེད་པ། ཁྱོད་ཚོར་གཏན་ནས་ནང་འཇུག་ནི་བདེན་པའམ་སྟོང་པ་རེད་བསམ་དང་ A,B,C,D,E,F རྟགས་མཚན་ནི་གཏན་ནས་ཡིག་འབྲུ་ཆེན་པོ་རེད། དཔེ་གཞི་: num = AB ཕྱིར་ཐོན་ནི་ num = 1 ཡིན་དགོས། \"1077E\" ཕྱིར་ཐོན་ནི་ num = 1 ཡིན་དགོས། \"AB\" = A331 ཕྱིར་ཐོན་ནི་ num = 4 ཡིན་དགོས། \"ABC\" = 62389D = 04567D ཕྱིར་ཐོན་ནི་ num = 2 ཡིན་དགོས།\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"ཁྱོད་ཀྱིས་གྲངས་ཆ་བཅུ་པའི་རྣམ་པ་ཐོབ་པ་དང་ཁྱོད་ཀྱི་ལས་འགན་ནི་དེ་གཉིས་ལྡན་གྱི་རྣམ་པ་དུ་བསྒྱུར་བ་ཡིན། ལས་འགན་གྱིས་ཡིག་འབྲུ་རེ་རེ་ནི་གཉིས་ལྡན་གྱི་གྲངས་ཆ་མཚོན་བྱེད་སྟངས། ཡིག་འབྲུ་རེ་རེ་ནི་ \"0\" ཡང་ན་ \"1\" ཟེར་བ་ཡོད། ཡིག་འབྲུ་འགོ་དང་མཐའ་གཉིས་སུ་ \"db\" ཟེར་བའི་ཡིག་འབྲུ་གཉིས་ལྷག་ཡོད་ཅིང་། ཆེ་ཆུང་ཡིག་འབྲུ་རྣམས་རྣམ་པ་སྒྲིག་སྟངས་ལ་ཕན་ཐོགས་ཀྱི་ཆེད་དུ་ཡོད། དཔེ་གཞི་: decimal_to_binary ((15) # return \"db1111db\" decimal_to_binary32) # return \"db100000db\"\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"ཁྱོད་ཚོར་ string s ཞིག་སྤྲད་ཡོད། ཁྱོད་ཀྱི་ལས་འགན་ནི་ string དེ་དགའ་ཞིང་མི་དགའ་བ་ཡོད་མེད་བརྟག་དཔྱད་བྱེད་རྒྱུ་ཡིན། string དེ་དགའ་ཞིང་མི་དགའ་བ་ཡིན་ན། དེའི་རིང་ཚད་ནི་ཉུང་ཤོས་ 3 ཡིན། ཡང་ 3 ཡི་གེ་རེ་རེ་ནི་སོ་སོར་ཡིན་ན། དཔེར་ན་ is_happy (a) => False is_happy (a) => False is_happy (bcd) => True is_happy (aabb) => False is_happy (adb) => True is_happy (xyy) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"སྟོན་པའི་སློབ་དུས་ཀྱི་བདུན་ཕྲག་མཇུག་གི་སྐབས་སློབ་དཔོན་གྱིས་སློབ་ཕྲུག་རྣམས་ལ་རྟགས་རག་སྤྲོད་དགོས་ཀྱི་ཡོད། སློབ་དཔོན་གྱིས་རྟགས་རག་སྤྲོད་པའི་ལག་ལེན་རིག་པས་བཟོས་ཡོད། སྐྱོན་ནི་སློབ་ཕྲུག་ལ་རྟགས་རག་སྤྲོད་པའི་ལག་ལེན་གྱི་ཡིག་ཆ་དེ་བརྗེད་སོང་བ་རེད། ཁོང་གིས་སློབ་ཕྲུག་འགའ་ཞིག་གི་ GPA གྱི་ཐོ་ཡིག་ཅིག་སྤྲད་ཡོད་པ་དང་ཁྱོད་ཀྱིས་ཡིག་རྟགས་ཀྱི་ཐོ་ཡིག་ཞིག་བཀོད་པའི་ཆེད་དུ་ལག་ལེན་བྱ་དགོས། GPA ཀྱི་ཡིག་རྟགས་ཀྱི་ཚད་གཞི་ནི་ 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"ཡིག་འབྲུ་ཞིག་ལེན་ནས་ True སླར་ལོག་བྱ་བའི་བྱ་གཞག་ཞིག་འབྲི་དགོས། གལ་ཏེ་ string ཡུན་ཚད་ནི་སྔོན་གྲངས་ཡིན་ན་ True ཡང་ན་ False དེ་མིན་དཔེ་ prime_length (_ 'Hello') == True prime_length (_ 'abcdcba') == True prime_length (_ 'kittens') == True prime_length (_ 'orange') == False\"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"འབྲས་བུ་ལྡན་གྲངས་ n ཞིག་ཡོད་ན། 1 ལས་འགོ་འཛུགས་སམ་མཇུག་བསྡུ་བའི་གྲངས་ལྡན་གྲངས་ n ཡི་ཨང་གྲངས་རྩིས་རྒྱག་དགོས།\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"འབྲས་བུ་ནི་ N = 1000 ན། དེའི་ཨང་གྲངས་ཀྱི་བསྡོམས་ནི་ 1 ཡིན་པའི་ཕྱིར་ཐོན་ནི་ \"1\" ཡིན་དགོས། N = 150 ན། ཨང་གྲངས་ཀྱི་བསྡོམས་ནི་ 6 ཡིན་པའི་ཕྱིར་ཐོན་ནི་ \"110\" ཡིན་དགོས། N = 147 ན། ཨང་གྲངས་ཀྱི་བསྡོམས་ནི་ 12 ཡིན་པའི་ཕྱིར་ཐོན་ནི་ \"1100\" ཡིན་དགོས། འགྱུར་བ་: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. ཕྱིར་ཐོན་: binary number string \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"སྟོང་པ་མིན་པའི་གྲངས་ཆ་གྲངས་ཀྱི་ཐོ་ཡིག་ཞིག་ཡོད་ན། lst. གྱངས་ཁ་མ་ལྡན་པའི་གྲངས་ཆ་གྲངས་ཆ་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་\"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"ཡིག་འབྲུ་ལ་འཇུག་པའི་ལས་འགན་ཞིག་འབྲི་དགོས། ཚད་གཞི་དེ་སྒྲིག་ནས་རིམ་སྒྲིག་ཅན་གྱི་ཡིག་འབྲུ་ཞིག་ཕྱིར་སློག་བྱ་དགོས། ཚད་གཞི་དེ་སྒྲིག་པའི་ཡིག་འབྲུ་ནི་ཡིག་འབྲུ་ཚང་མ་ (བར་སྟོང་གིས་དབྱེ་ནས་) ཆེད་སྒྲིག་བྱས་པའི་ཚིག་ཡིག་གསར་པ་ཞིག་ཡིན། ཚད་གཞི་དེ་ ascii ཚད་གཞི་ལ་གཞི་ནས་རིམ་སྒྲིག་སྒྲིག་བྱས་པའི་ཡིག་འབྲུ་ཡིན། དྲན་གསོ། ཁྱོད་ཀྱིས་ཚིག་ཡིག་དང་བར་སྟོང་གི་རིམ་སྒྲིག་དེ་སྒྲིག་དགོས། དཔེར་ན་ anti_shuffle ((('Hi') return 'Hi' anti_shuffle ((('hello') return 'ehllo' anti_shuffle (('Hello World!!!') return 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"ཚད་ལྡན་གཉིས་ལྡན་གྱི་ཡིག་ཆ་ཞིག་ནི་ཐིག་ཁྲམ་ལ་འདྲ་མཚུངས་ཡིན་མོད། འོན་ཀྱང་ཐིག་ཁྲམ་དང་མ་འདྲ་བར་གྲལ་རིམ་རེ་རེར་ཀ་བའི་གྲངས་མི་འདྲ་བ་ཞིག་ཡོད་སྲིད་དོ། ཚད་ལྡན་དང་ཨང་གྲངས་ x བྱས་ན། ཐིག་ཁྲམ་ནང་ཨང་གྲངས་ x འཚོལ་ནས་ཐིག་ཁྲམ་ནང་ཨང་གྲངས་ x སླར་ལོག་བྱ་དགོས། [(x1, y1), (x2, y2) ...] དེ་འདྲ་ཡིན་ན་ཐིག་ཁྲམ་རེ་རེར་ཨང་གྲངས་ - (row, columns) ཡོད་པ་ནི་ 0 ཡོད་པ་རེད། ཐོག་མར་གྲལ་རིམ་གྱི་གོ་རིམ་རིམ་ལྟར་གོ་རིམ་སྒྲིག་དགོས། ཡང་གྲལ་རིམ་གྱི་གོ་རིམ་སྒྲིག་དེ་གྲལ་རིམ་གྱི་གོ་རིམ་ལྟར་གོ་རིམ་སྒྲིག་དགོས། དཔེར་ན། get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), 0 (2, 5), (2, 0) get_(], 1) [] ==[_row [1], [1, 3, 2, 3) ] [2, ]]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་རིམ་པ་རྩིས་པའི་རྗེས་སུ།\"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"function encrypt ཞིག་བཟོས་ནས་ཡིག་འབྲུ་ཞིག་རྟགས་མཚན་ལྟར་ལེན་ནས་ཡིག་འབྲུ་ཞིག་ཨང་རྟགས་རྒྱབ་ནས་ཡིག་འབྲུ་འཁོར་བཞིན་སླར་ལོག་བྱེད། ཡིག་འབྲུ་དེ་རིམ་བཞིན་འཁོར་བའི་སྐབས་ཡིག་འབྲུ་གཉིས་མར་ལྡོག་ནས་གནས་གཉིས་སུ་སྤོ་དགོས། དཔེར་ན།: encrypt (('hi') return 'lm' encrypt (('asdfghjkl') return 'ewhjklnop' encrypt (('gf') return 'kj' encrypt (('et') return 'ix' ཟེར་བ་ལྟ་བུ།\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"ཁྱོད་ལ་གྲངས་ཆ་ཆ་ཚང་གི་ཐོ་ཞིག་སྤྲད་ཡོད། next_smallest () ལས་འགན་ཞིག་འབྲི་ནས་དེ་ནས་གྲངས་ཆ་ཆུང་ཤོས་གཉིས་པ་ཕྱིར་སློག་བྱེད་དུ་འཇུག་དགོས། གལ་ཏེ་དེ་ལྟ་བུའི་ཆ་ཤས་མེད་ན་ None () སླར་ལོག་བྱེད་དུ་འཇུག་དགོས། next_smallestn",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"ཁྱོད་ཚོར་ཚིག་ཡིག་གི་རིམ་པ་ཞིག་སྤྲོད་རྒྱུ་དང་ཁྱོད་ཀྱི་ལས་འགན་ནི་དགུན་གྱི་གྲངས་རྩིས་བྱེད་རྒྱུ་ཡིན། དགུན་ནི་ཚིག་ཡིག་ \"I\" ཟེར་ནས་འགོ་འཛུགས་པ་ཞིག་ཡིན། ཚིག་ཡིག་ལ་ \"I\" དང་ \"?\" དང་ \"! \" ཟེར་བ་གཉིས་ཡོད། དཔེར་ན། >>> is_bored ((\"Hello world\") 0 >>> is_bored ((\"ནམ་མཁའ་སྔོན་པོ་རེད། ཉི་མ་ཤར་འདུག ངས་གནམ་གཤིས་འདི་ལ་དགའ་བསུ་ཡོད།\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''གྲངས་ཀ་གསུམ་ལེན་པའི་ལས་འགན་ཞིག་བཟོས་པ། གྲངས་ཀ་གཅིག་ནི་གཞན་གཉིས་གྱི་བསྡོམས་དང་མཚུངས་པ་ཡིན་ན་ true སླར་ལོག་བྱེད། གྲངས་ཀ་གཞན་གང་རུང་ལ་ false སླར་ལོག་བྱེད། དཔེ་གཞི་ any_int (5, 2, 7) བྱེད་ན་ true བྱེད་ན་ true བྱེད་ན་ true བྱེད་ན་ true བྱེད་ན་ true བྱེད་ན་ true བྱེད་ན་ true བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false བྱེད་ན་ false'''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"ཡིག་རྟགས་གང་རུང་གི་ཡིག་རྟགས་ཀྱི་ཚབ་ཏུ་ཡིག་རྟགས་ཀྱི་སྔོན་དུ་ཡིག་རྟགས་གཉིས་ཡོད་པ་ཞིག་བཀོད་དགོས། དཔེ་གཞི་འདི་ནི་ཡིག་རྟགས་ཀྱི་སྔོན་དུ་ཡིག་རྟགས་ཤིག་བཀོད་དགོས།\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"ཁྱོད་ཚོར་གྲངས་ཀྱི་ཐོ་ཞིག་སྤྲད་ཡོད། ཁྱོད་ཀྱིས་གྲངས་ཀྱི་གྲངས་ཐང་ཆེ་ཤོས་འཚོལ་དགོས་པ་དང་དེའི་ཨང་གྲངས་ཀྱི་བསྡོམས་ཕྱིར་ལོག་དགོས། དཔེ་གཞི་: lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ཕྱིར་ཐོན་ནི་ 10 ཡིན་ For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ཕྱིར་ཐོན་ནི་ 25 ཡིན་ For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ཕྱིར་ཐོན་ནི་ 13 ཡིན་ For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ཕྱིར་ཐོན་ནི་ 11 ཡིན་ For lst = [0,81,12,31,21] ཕྱིར་ཐོན་ནི་ 3 ཡིན་ For lst = [1,8,1,2,7] ཕྱིར་ཐོན་ནི་ 7 ཡིན་ For lst = [1,8,1,2,7] ཕྱིར་ཐོན་ནི་ 7 ཡིན་ For lst = [1,1,2,7] ཕྱིར་ཐོན་ནི་ 1 ཡིན་ For lst = [1,8,2,7] ཕྱིར་ཐོན་ནི་ 1 ཡིན་ For lst = [1,2,2,7] ཕྱིར་ཐོན་ནི་ 1 ཡིན་ For lst = [1,1,2,2,2,7] ཕྱིར་ཐོན་ནི་ 1\"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"བྱིན་གྱིས་བརླབས་པའི་ཚིག་མཛོད་ཤིག་ཡོད་ན། གལ་ཏེ་ལྡེ་མིག་ཚང་མ་ནི་ཡིག་ཆུང་གི་ཐིག་ཡིག་ཡིན་པའམ། ཡང་ན་ཡིག་ཆུང་ཐམས་ཅད་ནི་ཡིག་མཐའི་ཐིག་ཡིག་ཡིན་ན་ true སླར་ལོག་བྱེད་དགོས། གལ་ཏེ་ལྡེ་མིག་ཚང་མ་ནི་ཡིག་ཆུང་གི་ཐིག་ཡིག་ཡིན་ན་ false སླར་ལོག་བྱེད་དགོས། ལས་འགན་གྱིས་ false སླར་ལོག་བྱེད་དགོས་པ་ནི། གལ་ཏེ་བྱིན་གྱིས་བརླབས་པའི་ཚིག་མཛོད་ནི་སྟོང་པ་ཡིན་ན། དཔེ་གཞི་འདི་ནི་ check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) ནི་ true སླར་ལོག་བྱེད་དགོས་པ་རེད། check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) ནི་ false སླར་ལོག་བྱེད་དགོས་པ་རེད། check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) ནི་ false སླར་ལོག་བྱེད་དགོས་པ་རེད། check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) ནི་ false སླར་ལོག་བྱེད་དགོས་པ་རེད། check_dict_case{\"NC\"STATE:\"STATE\", \"Z\"IP:\"45\"}) ནི་ true སླར་ལོག་བྱེད་དགོས་པ་རེད།\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"ཤོག་གྲངས་དང་པོ་ n ཡི་སྔོན་གྲངས་དང་ n ལས་ཆུང་བའི་གྲངས་ཐང་ཞིག་ཕྱིར་སློག་བྱ་བའི་ལས་འགན་ཞིག་ལག་ལེན་དུ་འཇུག་དགོས། དཔེར་ན། count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17]\"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"འབྲས་བུ་ནི་གྲངས་ཆ་གཉིས་དང་དེའི་ཆ་ཤས་ཀྱི་འབྲས་བུ་ཡིན། འབྲས་བུ་ནི་གཏན་ནས་ངེས་པ་རེད་བསམ་དགོས། དཔེར་ན། མང་དུ་སྤེལ་བ་ནི་ ༡༤༨ དང་། ༤༡༢ དང་། ༡༦ དང་། ༡༩ དང་། ༢༨ དང་། ༧༢ དང་། ༢༠༠ དང་། ༡༨༥༡ དང་། ༠ དང་། ༡༤ དང་། ༡༥ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། ༢༠༠ དང་། དང་། དང་། དང་། དང་། དང་། དང་། དང་། དང་། དང་། དང་། དང་། ༦།\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"string s ཤིག་ཡོད་ན། ཚད་ལྡན་ཡིག་འབྲུ་ནང་ཡིག་འབྲུ་ཆེན་མོ་རང་གྲངས་རྩིས་དགོས། དཔེར་ན། count_upper (('aBCdEf') སླར་ལོག་ 1 count_upper (('abcdefg') སླར་ལོག་ 0 count_upper (('dBBE') སླར་ལོག་ 0 \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་གྲངས་ཐང་ (string) ཅིག་ཐང་ (string) ཅིག་ཐང་ (string) ཅིག་ཐང་ (string) ཅིག་ཐང་ (string) ཅིག་ཐང་ (string) ཅིག་ (string) ཅིག་ (string) ཅིག་ (string) ཅིག་ (string) ཅིག་ (string) ཅིག་ (string) ཅིག་ (string)'''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"འབྲས་བུ་གྲངས་ཆ་མཉམ་ n ཞིག་ཡོད་ན། ཁྱོད་ཚོར་རྡོའི་ཚད་ n ཡི་རྡོ་བྲིས་དགོས་པ་ཡིན། ཐོག་མའི་ཚད་ལ་རྡོའི་ཚད་ n ཡོད། ཤུལ་མའི་ཚད་ལ་རྡོའི་གྲངས་ནི་: - རྗེས་མའི་གྲངས་ཆ་ཆ་མི་མཚུངས་པ་ n ཡན་ན་ན། - རྗེས་མའི་གྲངས་ཆ་ཆ་ཆ་མ་མཚུངས་པ་ n ཡན་ན་ན་ན། ཚད་རེ་རེའི་རྡོའི་གྲངས་གྲངས་སླར་ལོག་བྱ་དགོས། གནས་རིམ་ i ནང་གི་ཆ་ཤས་ i ནི་ཚད་ (i+1) ཡི་རྡོའི་གྲངས་ཐང་ཡིན་པའི་དཔེ་མཚོན་ཡིན། དཔེ་གཞི་: >>> make_a_pile (n) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"ཁྱོད་ཚོར་དབྱེ་རྟོག་དང་བར་སྟོང་གིས་དབྱེ་བའི་ཚིག་ཡིག་ཕྲེང་ཞིག་ཐོབ་ཡོང་། ཁྱོད་ཚོར་བྱ་བའི་ལས་འགན་ནི་ string རྣམས་ཚིག་ཡིག་ལ་དབྱེ་སྟེ་ཚིག་ཡིག་གི་རིམ་པ་ཕྱིར་ལོག་བྱེད་རྒྱུ་ཡིན། དཔེར་ན། words_string ((\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] words_string ((\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"ལས་འགན་འདི་ནི་གྲངས་ཆ་ལྡོག་གཉིས་ x དང་ y དང་གྲངས་ཆ་ལྡོག་གཉིས་ x དང་ y ནང་ཡོད་པའི་གྲངས་ཆ་ལྡོག་གྲངས་ཆ་ཤས་ཆེ་ཤོས་ཕྱིར་ལོག་བྱེད་པ་ཡིན། གལ་ཏེ་གྲངས་ཆ་ལྡོག་དེ་མེད་ན་ལས་འགན་འདི་ནི་ -1 སླར་ལོག་བྱེད་དགོས། དཔེར་ན།: choose_num (༡༢) = ༡༤ choose_num (༡༣) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"ཁྱོད་ཚོར་ n དང་ m གཉིས་ཀྱི་གྲངས་ཆ་ཚིམས་པ་ཐོབ་ཡོད། ཁྱོད་ཚོར་ལས་འགན་ནི་ n ནས་ m བར་གྱི་གྲངས་ཆ་ཚིམས་པའི་བར་ནའི་གྲངས་རྩིས་རྒྱག་རྒྱུ་ཡིན། འབྲས་བུ་དེ་ཉེར་མཁོ་ཆེ་བའི་གྲངས་ཆ་ཚིམས་པར་བསྡུ་སྟེ་ binary ཏུ་བསྒྱུར་དགོས། གལ་ཏེ་ n ནི་ m ལས་ཆེ་བ་ཡིན་ན་ -1 སླར་ལོག་བྱེད་དགོས། དཔེ་གཞི་: rounded_avg ((1, 5) => \"0b11\" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => \"0b1111\" rounded_avg ((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"འབྲས་བུ་གྲངས་ཚང་གི་ཐོ་ཡིག་ x ཞིག་ཡོད་ན། འབྲས་བུ་གྲངས་ཚང་གི་ཐོ་ཡིག་ལ་རྣམ་པ་གཉིས་མེད་པ་དེ་ཕྱིར་སློག་བྱེད་དགོས། དཔེ་གཞི་: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) []\"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 1 ནས་ 9 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ། སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 1 ནས་ 9 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ། སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 1 ནས་ 9 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ། སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 3 ནས་ 4 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ། སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 5 ནས་ 6 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ། སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 1 ནས་ 9 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ། སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 1 ནས་ 9 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ། སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 1 ནས་ 9 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ། སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 1 ནས་ 9 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ། སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 1 ནས་ 9 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ། སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 1 ནས་ 9 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ། སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 1 ནས་ 9 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ། སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 1 ནས་ 5 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ། སྐར་ཁུང་གི་དྲ་ངོས་སུ་ 1 ནས་ 5 བར་གྱི་གྲངས་ཐང་ཡོད་ཚད་ལ་དབྱེ་བ།\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"ལས་འགན་ f འདི་ n ལ་ཚད་གཞི་ལྟར་ལེན་ནས་ n ཚད་ལྡན་གྱི་ཐོ་ཡིག་ཕྱིར་ལོག་བྱེད་དེ། ཚད་གཞི་ i ནང་གི་ཆ་ཤས་ཀྱི་ཐང་ནི་ i ཡི་གྲངས་ཐང་ཡིན་ན། ཡང་ན་ 1 ནས་ i བར་གྱི་གྲངས་ཐང་ཡིན། i ནི་ 1 ལས་འགོ་འཛུགས་ཀྱི་ཡོད། i ཡི་གྲངས་ཐང་ནི་ 1 ནས་ i བར་གྱི་གྲངས་ཐང་གི་ལྡབ་གྲངས་ཡིན། (1 * 2 * ... * i) དཔེ་གཞི་: f (((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"འབྲས་བུ་གྲངས་ཆ་མཉམ་ n ཡོད་པ་ཞིག་ལ། འབྲས་བུ་གྲངས་ཆ་མཉམ་རྣམ་གྲངས་དང་རྣམ་གྲངས་མ་ལྡན་པ་སོགས་ཀྱི་གྲངས་ཆ་མཉམ་རྣམ་གྲངས་ཀྱི་གྲངས་ཆ་མཉམ་ n ཡོད་པའི་གྲངས་ཆ་མཉམ་སླར་ལོག་བྱ་དགོས། དཔེ་གཞི་1: ནང་འཇུག་: 3 ཕྱིར་ཐོན་: (1, 2) འགྲེལ་བཤད་: འབྲས་བུ་གྲངས་ཆ་མཉམ་རྣམ་གྲངས་ནི་ 1, 2, 3 ཡོད་པ་དང་། དེའི་ནང་ནས་གཅིག་ནི་རྣམ་གྲངས་ཡིན་པ་དང་གཉིས་ནི་རྣམ་གྲངས་ཡིན། དཔེ་གཞི་2: ནང་འཇུག་: 12 ཕྱིར་ཐོན་: (4, 6) འགྲེལ་བཤད་: འབྲས་བུ་གྲངས་ཆ་མཉམ་རྣམ་གྲངས་ནི་ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 ཡོད་པ་དང་། དེའི་ནང་ནས་བཞི་ནི་རྣམ་གྲངས་ཡིན་པ་དང་དྲུག་ནི་རྣམ་གྲངས་ཡིན། དྲན་གསོ།: 1 <= n <= 10^3 2. འབྲས་བུ་གྲངས་ཆ་མཉམ་རྣམ་གྲངས་དང་རྣམ་གྲངས་མ་ལྡན་པའི་གྲངས་ཆ་མཉམ་རྣམ་གྲངས་ཀྱི་གྲངས་ཆ་མཉམ་རྣམ་གྲངས་སླར་ལོག་བྱ་ཡོད།\"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"གྲངས་ཆ་གྲངས་ཐང་གི་གྲངས་ཐང་གི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་གྲངས་གྲངས་གྲངས་ཐང་རྩིས་པའི་གྲངས་ཐང་རྩིས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་གྲངས་\"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"གྲངས་ཚིགས་ N ཡི་ 'arr' ཞིག་ཡོད། arr[1], arr[2], ..., arr[N] ཟེར་བའི་གྲངས་ཚིགས་ཀྱི་གྲངས་གྲངས་རྣམས་རིམ་བཞིན་གོ་རིམ་སྒྲིག་བྱེད། ཁྱོད་ཀྱི་ལས་འགན་ནི་གཤམ་གསལ་ལས་འགན་འདི་བཞིན་བཀོད་ནས་གྲངས་ཚིགས་དེ་རིམ་བཞིན་ཡར་མར་མི་འགྲོ་བ་ལྟར་གོ་རིམ་སྒྲིག་ཐུབ་མིན་ལ་ངེས་གཏན་བྱ་རྒྱུ་ཡིན། ཁྱོད་ཚོར་གྲངས་ཚིགས་ནང་གཡས་གཡོན་དུ་ལྡོག་པའི་ལས་འགན་གང་རུང་ཞིག་བྱེད་ཆོག་པ་ཡིན། གཡས་གཡོན་དུ་ལྡོག་པའི་ལས་འགན་གཅིག་གི་དོན་ནི་གྲངས་ཚིགས་ཀྱི་ཆ་ཤས་ཚང་མ་གཡས་གཡོན་དུ་ལྡོག་པའི་ལས་འགན་གང་རུང་ཞིག་བྱེད་ཆོག་པ་ཡིན། གྲངས་ཚིགས་ཀྱི་ཆ་ཤས་མཐའ་མ་དེ་གྲངས་ཚིགས་ཀྱི་ནང་ཐོག་མར་ལྡོག་པའི་ལས་འགན་ཡིན་ཏེ། དེ་ནི་ 0th ཟེར་བ་ཡིན། གལ་ཏེ་གོ་རིམ་སྒྲིག་པའི་གྲངས་ཚིགས་དེ་གོང་གི་ལས་འགན་ལྟར་གོ་རིམ་སྒྲིག་ཐུབ་ན་ true སླར་ལོག་བྱས་ན་ false སླར་ལོག་བྱས་ན་ true སླར་ལོག་བྱེད་ཆོག གལ་ཏེ་གྲངས་ཚིགས་དེ་སྟོང་པ་ཡོད་ན་ true སླར་ལོག་བྱེད་ཆོག དཔེ་གཞི་གྲངས་ནང་དངོས་ཡོད་ཆ་ཤས་ཡོད་ངེས་གཏན་བྱ་དགོས། དཔེར་ན། move_one_(ball_[4,5,4,== 2>True འགྲེལ་བཤད་བྱེད་པ།: right_min=2 ལས་འགན་གྱིས་གྲངས་ཚིགས་དེ་རིམ་རིམ་བཞིན་ཡར་མར་མི་འགྲོ་བ་ལྟར་གོ་རིམ་སྒྲིག་ཐུབ་པ་ཡོད། (right_one_[4,==5,===========False) ལས་འགན་ལེན་བྱེད་པའི་གྲངས་ཚིགས་དེ་གཡས་གཡོན་དུ་ལྡོག་པའི་ལས་འགན་ཡིན་པར་གོ་རིམ་སྒྲིག་མི་ཆོག\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"འ་ནི་དཀའ་ངལ་ནང་ཁྱོད་ཀྱིས་གྲངས་ཐོ་གཉིས་ལེན་པའི་ལས་འགན་ཞིག་ལག་ལེན་བྱེད་ཅིང་། དེ་གཉིས་ཀྱི་བར་ལ་ཆ་ཤས་བརྗེ་ལེན་བྱེད་དེ་ lst1 ནི་གྲངས་ཆ་རྐྱང་གི་ཐོ་ཞིག་བཟོ་ཐུབ་མིན་གཏན་འབེབས་བྱེད། lst1 དང་ lst2 བར་བརྗེ་ལེན་བྱས་པའི་ཆ་ཤས་གྲངས་ཚད་མེད་ཡིན། lst1 དང་ lst2 བར་བརྗེ་ལེན་བྱེད་ནུས་ཡོད་ན་ lst1 ནང་གི་ཆ་ཤས་ཚང་མ་ཆ་རྐྱང་བཟོ་ཐུབ་ན་ \"YES\" སླར་ལོག་བྱེད། དེ་མིན་ \"NO\" སླར་ལོག་བྱེད། དཔེར་ན།: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" ནང་འཇུག་པའི་ཐོ་རྣམས་སྟོང་པ་མིན་པར་གཏན་འབེབས་བྱེད།\"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"སྐར་ཁུང་གི་དྲ་ལམ་ནས་ཡིག་འབྲུ་ཆུང་ཆུང་གཉིས་སུ་དབྱེ་བའི་ཡིག་འབྲུ་ཞིག་ཐོབ་པ་ཡིན་ན། སྐར་ཁུང་གི་ཡིག་འབྲུ་མང་ཤོས་ལ་གྲངས་རྩིས་དང་ལྡོག་ངེས་ཡོད་པའི་ཡིག་འབྲུ་ཞིག་ཕྱིར་སློག་བྱེད་དགོས། གལ་ཏེ་ཡིག་འབྲུ་མང་པོ་ཞིག་འདྲ་མཚུངས་བྱུང་ན་ཡིག་འབྲུ་ཚང་མ་ཕྱིར་སློག་དགོས། དཔེ་གཞི་: histogram (('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram (('a b b a') == {'a': 2, 'b': 2} histogram (('a b c a b') == {'a': 2, 'b': 2} histogram (('b b a') == {'b 4} histogram (('a') == {'b 4}) == {'} \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"ལས་འགན་ང་ཚོར་ཐིག་ཡིག་གཉིས་སྩལ་ཡོད། s དང་ c ནང་གི་ཡིག་འབྲུ་ཚང་མ་སུབ་དགོས། དེ་ནས་ཐིག་ཡིག་འདི་ palindrome ཡིན་མིན་ལ་བརྟག་དཔྱད་བྱེད་དགོས། ཐིག་ཡིག་འདི་སྔོན་དང་རྒྱབ་གཉིས་འདྲ་ཡིན་ན་ palindrome ཞེས་ཟེར་རོ། ཁྱོད་ཀྱིས་ཐིག་ཡིག་འདི་ཕྱིར་ལོག་བྱ་དགོས་ན། ཐིག་ཡིག་འདི་ནང་ཐིག་ཡིག་འདི་དང་ True/False ཡོད་པ་དགོས། དཔེར་ན་ s = \"abcde\", c = \"ae\", འབྲས་བུ་ནི་ ('bcd',False) ཡིན་དགོས། s = \"abcdef\", c = \"b\" འབྲས་བུ་ནི་ ('acdef',False) ཡིན་དགོས། s = \"abcdedcba\", c = \"ab\", འབྲས་བུ་ནི་ ('cdedc',True) ཡིན་དགོས།\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"string ཀྱི་ཐོ་ཡིག་ཐོབ་ནས་ string ཚང་མ་ནི་ཨང་གྲངས་ལས་གྲུབ་པའི་ཐོ་ཡིག་ཞིག་ཕྱིར་ལོག་བྱེད་སྟངས། output གྱི་ཆ་ཤས་ i ཚང་མ་ནི་ \"input གྱི་ string i ནང་གི་རྣམ་གྲངས་རྣམ་གྲངས་ཀྱི་གྲངས་ཀ་\" ཟེར་དགོས་ཏེ། དེར་ i ཚང་མ་ནི་ input གྱི་ i པའི་ string ནང་གི་རྣམ་གྲངས་རྣམ་གྲངས་ཀྱི་གྲངས་ཀ་དང་བརྗེ་བསྒྱུར་བྱེད་དགོས་པ་ཡིན། >>> odd_count['1234567']) [\" 4n str4ng 4 of the 4nput.\"] >>> odd_count['3',\"111111\"]) [\" 1n str1ng 1 of the 1nput.\", \" 8n str8ng 8 of the 8nput.\"]\"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"ཨང་གྲངས་ཧྲིལ་པོ་ n གི་རིམ་པ་ཐོབ་ན། ཨང་གྲངས་ཧྲིལ་པོ་ n གི་རིམ་པ་སྟོང་པ་མིན་པའི་རིམ་པ་ཆུང་ཤོས་ཀྱི་བསྡོམས་འཚོལ་དགོས། དཔེ་གཞི་ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"ཁྱོད་ཚོར་ཆུ་མཛོད་ཀྱི་དབྱིབས་གྲུ་བཞི་པ་ཞིག་སྤྲོད་ཡོད། རེའུ་མིག་རེ་རེར་ཆུ་མཛོད་གཅིག་རང་ཡོད་པ་དང་ རེའུ་མིག་རེ་རེའི་ནང་ 1 ཀྱིས་ཆུ་ཕྲན་གཅིག་རང་ཡོད། ཆུ་མཛོད་རེ་རེར་ཆུ་ལེན་པའི་ཆེད་དུ་བེག་རེ་ཡོད་པ་དང་བེག་ཚང་མའི་ཁོར་ཡུག་འདྲ་མཚུངས་ཡོད། ཁྱོད་ཀྱི་ལས་འགན་ནི་བེག་རྣམས་བེད་སྤྱོད་བྱས་ནས་ཆུ་མཛོད་རྣམས་ཕྱེ་མ་དགོས། བེག་རྣམས་མར་ཕབ་དགོས་པའི་ཐེངས་གྲངས་གཏན་འབེབས་བྱེད་དགོས། དཔེ་གཞི་ ༡: ནང་འཇུག་: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 ཕྱིར་ཐོན་: དཔེ་གཞི་ ༢: ནང་འཇུག་: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 ཕྱིར་ཐོན་: 5 དཔེ་གཞི་ ༣: [[:0,0,0], [0,0,0]] bucket_capacity: 5 ཕྱིར་ཐོན་n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"ཚད་མ་འདིའི་ནང་། ཁྱོད་ཀྱིས་གྲངས་མེད་གྲངས་མེད་གྲངས་མེད་གྲངས་མེད་གྲངས་གྲངས་ཀྱི་རིམ་པ་སྒྲིག་དགོས་པ་ཡིན། དེ་འདྲ་མཚུངས་གྲངས་གྲངས་ཀྱི་རིམ་པ་སྒྲིག་བྱེད་སྐབས་བཅུ་ཚུའི་གྲངས་ཐང་ལ་གཞི་བཞག་དགོས། དེའི་གོ་རིམ་འདི་བཞིན་སྒྲིག་དགོས། >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"string s དང་ natural number n ཞིག་ཡོད་ན། ཁྱོད་ལ་ལས་འགན་ཞིག་སྒྲིག་འཇུག་བྱས་ཡོད། དེ་ནི་ string s ནང་གི་ཚིག་ཡིག་ཚང་མ་ཡིག་འབྲུ་ n ཙམ་ཡོད་པའི་ཡིག་འབྲུ་རྣམས་ཕྱིར་འདོན་བྱེད་དེ་ string s ནང་ཚིག་ཡིག་དེ་དག་མངོན་པར་བྱེད་པའི་ཕྱིར་ཡིན། གལ་ཏེ་ string s གྱི་ནང་ཚིག་ཡིག་སྟོང་པ་ཡོད་ན་ལས་འགན་གྱིས་ empty list སླར་ལོག་བྱེད་དགོས། དྲན་གསོ། ཁྱོད་ཀྱིས་ནང་འཇུག་ string ནང་ཡིག་འབྲུ་དང་བར་སྟོང་ཙམ་ཡོད་པར་ངེས་པ་ཡོད། དཔེ་གཞི་: select_words \"Mary had a little lamb\" (4) ==> [\"little\"] select_words \"Mary had a little lamb\" (3) ==> [\"Mary\", \"lamb\"] select_words \"simple white space\" (2) ==> [] select_words \"Hello world\" (4) ==> [\"world\"] select_words \"Uncle sam\" (3) ==> [\"Uncle\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"ཁྱོད་ཚོར་ཚིག་ཅིག་སྤྲོད་ཡོད། ཁྱོད་ཀྱི་ལས་འགན་ནི་ཚིག་དེའི་གཡས་ཕྱོགས་ནས་སྒྲ་གཉིས་བར་གྱི་ཉེ་བའི་སྒྲ་འཚོལ་རྒྱུ་ཡིན། ཐོག་དང་མཐའ་མའི་སྒྲ་རྣམས་རྩིས་མི་བྱེད། གལ་ཏེ་གོང་གི་དགོས་ངེས་ལ་ཆ་མཐུན་པའི་སྒྲ་མ་རྙེད་ན་ string སྟོང་པ་ཕྱིར་ལོག་བྱེད་དགོས། string ནང་དབྱིན་ཡིག་གི་ཡི་གེ་གཅིག་པུ་ཡོད་པར་ངེས་གཏན་བྱེད་དགོས། དཔེ་: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" (((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''ཁྱོད་ལ་ string གཉིས་ཀྱི་ཐོ་ཞིག་ཐོབ་ཡོད། string གཉིས་ཀ་ཁ་ཕྱེས་པའི་ parentheses '(' ཡང་ན་ཉག་པའི་ parentheses ') ' ཙམ་ལས་གྲུབ་ཡོད། ཁྱོད་ཀྱི་ལས་འགན་ནི་ string གཉིས་རིམ་བཞིན་འབྲེལ་མཐུད་བྱེད་ཐུབ་མིན་ལ་བརྟག་དཔྱད་བྱེད་རྒྱུ་དེ་ཡིན། འབྲས་བུ་ string ཡི་ནང་ parentheses ཚང་མ་མཉམ་སྦྱོར་བྱས་ན་ string S ཡི་ནང་ལེགས་པར་བརྩི་ཐུབ། དཔེར་ན། string '((())' ཡི་ནང་ལེགས་པར་བརྩི་དགོས་ན་ string '(())' ཡིས་མི་འོས་པ་རེད་ན། string '(())' ཡིས་ལེགས་པར་བརྩི་དགོས་ན་ 'Yes' སླར་ལོག་དགོས། གལ་ཏེ་ string ཡི་ནང་ལེགས་པར་བཟོ་བའི་ཐབས་ལམ་ཞིག་ཡོད་ན་ 'Yes' སླར་ལོག་བྱས་ན་ 'No' སླར་ལོག་བྱས་ན་ 'No' སླར་ལོག་བྱས་ན་ 'No' སླར་ལོག་བྱས་ན་ 'No' སླར་ལོག་བྱས་ན་ 'Yes' སླར་ལོག་བྱས་ན་ 'No' སླར་ལོག་བྱས་ན་ 'Yes' སླར་ལོག་བྱས་ན་ 'No' སླར་ལོག་བྱས་ན་ 'Yes' སླར་ལོག་བྱས་ན་ 'No' སླར་ལོག་བྱས་ན་ 'Yes' སླར་ལོག་བྱས་ན་ 'Yes' སླར་ལོག་བྱས་ན་ 'No' སླར་ལོག་བྱས་ན་ 'Yes' སླར་ལོག་བྱས་ན་ 'Yes' སླར་ལོག་བྱས་ན་ 'Yes' སླར་ལོག་བྱས་ན་ 'Yes' སླར་ལོག་བྱས་ན་ 'Yes' སླར་ལོག་ 'Yes' སླར་ལོག་ 'Yes' སླར་ལོག་ 'Yes' སླར་ལོག་ 'Yes''''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"ཨེ་རེ་ arr ནི་ཧྲིལ་གྲངས་དང་ཧྲིལ་གྲངས་ k ཅན་ཞིག་ཡིན་པའི་ཚེ། ཨེ་རེ་ k ཡི་རིང་ཚད་ཀྱི་རིམ་སྒྲིག་ཅན་གྱི་ཐོ་ཡིག་ཞིག་ཕྱིར་སློག་བྱ་དགོས། དཔེ་གཞི་1: ཨེ་རེ་ = [-3, -4, 5], k = 3 ཐོན་རིམ་: [-4, -3, 5] དཔེ་གཞི་2: ཨེ་རེ་ = [4, -4, 4], k = 2 ཐོན་རིམ་: [4, 4] དཔེ་གཞི་3: ཨེ་རེ་ = [-3, 2, 1, 2, -1, -2, 1], k = 1 ཐོན་རིམ་: [2] དྲན་གསོ། 1. ཨེ་རེའི་རིང་ཚད་ནི་ [1, 1000] བར་དུ་ཡོད་དགོས། 2. ཨེ་རེའི་ནང་ཡོད་པའི་ཆ་ཤས་ནི་ [-1000, 1000] བར་དུ་ཡོད་དགོས། 3. 0 <= k <= len ((arr) ཟེར་བ་ལྟ་བུ།\"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"སྟབས་ཀྱི་གྲངས་ཐང་ནི་གྲངས་ཐང་སྟོང་པ་མིན་པའི་གྲངས་ཐང་ཡིན་ན། སྟབས་ཀྱི་གྲངས་ཐང་ནི་གྲངས་ཐང་ཆ་མཉམ་གྱི་གྲངས་ཐང་ཡིན་པའི་གྲངས་ཐང་ཡིན། དཔེ་གཞི་གསལ་བའི་ཐབས་ལམ་ནི་ (([5, 8, 7, 1]) ==> 12གསལ་བའི་ཐབས་ལམ་ནི་ (([3, 3, 3, 3, 3]) ==> 9གསལ་བའི་ཐབས་ལམ་ནི་ (([30, 13, 24, 321]) ==> 0 ཡིན།\"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"འདིར་གྲངས་ཆ་ཆ་ཚང་ arr དང་གྲངས་ཆ་ཆ་ཚང་ k ཡོད་པ་ལས་གྲངས་ཆ་ཆ་ཤས་ཀྱི་བསྡོམས་གྲངས་སླར་ལོག་བྱ་དགོས། དཔེ་གཞི་: ནང་འཇུག་: arr = [111,21,3,4000,5,6,7,8,9], k = 4 ཕྱིར་འཇུག་: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) \"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"འབྲས་བུ་གྲངས་ n ཡོད་པ་ཞིག་ཡོད་ན། ཚད་ལྡན་གྲངས་ཐོ་ཞིག་ཕྱིར་སློག་བྱ་དགོས། དེའི་ནང་གྲངས་ཆ་རྣམ་པ་དག་གི་རིམ་པ་ཡོད་ན་ collatz གྱིས་རིམ་པ་བཞིན་ཕྱིར་སློག་བྱ་དགོས། ཚད་ལྡན་གྲངས་ཐོ་ནི་རྩིས་རིག་གི་ནང་འཇུག་པའི་རྣམ་པ་ཞིག་ཡིན། དེའི་ནང་འཇུག་གི་རིམ་པ་ནི། ཚད་ལྡན་གྲངས་ཐོ་ n ཡོད་པ་ཞིག་ནས་འགོ་འཛུགས་བྱ་དགོས། དེའི་རྗེས་ལ་རིམ་པ་རེ་རེ་བཞིན་སྔོན་གྱི་རིམ་པ་ནས་ཐོབ་པའི་རྣམ་པ་ནི། སྔོན་གྱི་རིམ་པ་ཆ་སྙོམས་ཡིན་ན་རིམ་པ་རྗེས་མ་དེ་སྔོན་གྱི་རིམ་པ་ཕྱེད་ཀ་ཡིན། སྔོན་གྱི་རིམ་པ་ཆ་སྙོམས་ཡིན་ན་རིམ་པ་རྗེས་མ་དེ་སྔོན་གྱི་རིམ་པ་ལས་ 3 དང་། དེའི་ཐོག་ 1 ཟེར་བ་ཡོད། ཚད་ལྡན་གྲངས་ཐོ་ནི་ n ཇི་འདྲ་ཡིན་ཡང་རིམ་པ་རྟག་ཏུ་ 1 ཟེར་བ་ངེས་གཏན་ཡིན། ལྟ་རྟོག་: 1. Collatz (((1) ནི་ [1]ཡིན། 2. སླར་ལོག་པའི་རིམ་པ་རིམ་པ་བཞིན་གོ་རིམ་སྒྲིག་བྱས་ཡོད། དཔེར་ན། get_odd_collatz ((5) ནི་ [1, 5] ཕྱིར་སློག་བྱ་སྟངས། 5 གྱི་ཚད་ལྡན་རིམ་པ་ནི་ [5, 8, 16, 4, 2, 1] སྟེ་གྲངས་ཆ་སྙོམས་ནི་ 1 དང་ 5 ཙམ་ཡིན།\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"ཁྱོད་ཀྱིས་ལས་འགན་ཞིག་འབྲི་དགོས་པ་དེ་ནི་གཏན་འབེབས་ཟིན་པའི་ཚེས་གྲངས་ཀྱི་ཐིག་ཁྲམ་ལ་རྟགས་རྒྱག་བྱེད་ནས་ཚེས་གྲངས་དེ་བདེན་པ་ཡིན་ན་ True སླར་ལོག་བྱེད་དེ་ false སླར་ལོག་བྱེད་དེ་ true ཡིན་པ་དགོས། ཚེས་གྲངས་དེ་ valid ཡིན་པ་དང། འོག་གི་སྒྲིག་གཞི་ཚང་མ་འགྲུབ་པ་ཡིན་ན་ date དེ་བདེན་པ་ཡིན་པ་དགོས། ༡། ཚེས་གྲངས་ཀྱི་ཐིག་ཁྲམ་ནི་སྟོང་པ་མིན་པ། ༢། ཟླ་བ་ ༡། ༣། ༥། ༧། ༨། ༡༠། ༡༢ ནང་གི་ཉིན་གྲངས་ནི་ཉིན་གྲངས་ ༡ ལས་ཉུང་བ་མིན་པ་དང་ ༣༡ ལས་མང་བ་མིན་པ་དང་། ཟླ་བ་ ༤། ༦། ༩། ༡༡ ནང་གི་ཉིན་གྲངས་ནི་ཉིན་གྲངས་ ༡ ལས་ཉུང་བ་མིན་པ་དང་ ༣༩ ལས་མང་བ་མིན་པ། ཟླ་བ་ ༢། ༣ ནང་གི་ཉིན་གྲངས་ནི་ཉིན་གྲངས་ ༡ ལས་ཉུང་བ་མིན་པ་དང་ ༢༩ ལས་མང་བ་མིན་པ། ཟླ་བ་ ༡ ལས་ཉུང་བ་མིན་པ་དང་ ༡༢ ལས་མང་བ་མིན་པ་དགོས། ༤། ཚེས་གྲངས་ནི་རྣམ་པ་ mm-dd-yyyy ཡིན་པའི་དཔེ་མཚོན་དུ་ valid_date (༡༠:༣༡-༡༠༠༠) => valid_date (༡༥:༠-༡༠-༢༠༠) => false (_ valid_date (༡༠:༠༤-༢༠༠) => valid_date (༡༠:༠༦:༠-༠༤/༢༠༠-༢༠༠)\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''ཚིག་ཡིག་གི་ཐིག་ཡིག་ཤིག་ཡོད་ན། ཚིག་ཡིག་གི་ཐོ་ཡིག་ཞིག་ཕྱིར་སློག་བྱ་དགོས། སྟོང་པ་ཉིད་ནས་ཁ་གྱེས་པ། གལ་ཏེ་ཡིག་ཆ་ནང་སྟོང་པ་ཉིད་མེད་ན་ཁྱོད་ཀྱིས་དབྱེ་རྟོག་ ',' སྟེང་ཁ་གྱེས་དགོས། གལ་སྲིད་དབྱེ་རྟོག་མེད་ན་ཁྱོད་ཀྱིས་ཡིག་གཟུགས་ནང་ཡིག་ཆུང་གི་རིམ་པ་རྣམ་གྲངས་དང་མཚུངས་པའི་གྲངས་ཁ་ཕྱིར་ལོག་བྱ་དགོས། ord (a) = 0 ord (b) = 1 ... ord (z) = 25 དཔེ་གཞི་ split_words (Hello world) ཞིག་ -> [\"Hello\", \"world!\"] split_words (Hello,world!\") ཞིག་ -> [\"Hello\", \"world!\" split_words (abcdef\") ཞིག་) == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''གྲངས་ཐོ་ཞིག་ཡོད་ན། དེ་དག་རིམ་བཞིན་ཡར་ལྡོག་བྱེད་ཡོད་མེད་ཕྱིར་སློག་བྱེད་དགོས། གྲངས་ཐོ་ནང་གྲངས་གཅིག་མཚུངས་ཐེངས་གཅིག་ལས་མང་བ་ཡོད་ན་ False སླར་ལོག་བྱེད་དགོས། གྲངས་འབོར་ཁ་བྲལ་མེད་པ་དང་ཧྲིལ་གྲངས་ཁོ་ན་ཡིན་པར་བསམ་དགོས། དཔེ་ is_sorted (_) ➜'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"ཚད་གཞི་གཉིས་ནི་གྲངས་ཆ་དང་མཚུངས་པ་ཞིག་ཡིན། དཔེར་ན། བར་མཚམས་ = (མགོ་, མཐའ་) = (1, 2) ཟེར་བ་ཡིན། བར་མཚམས་དེ་ཁ་ཕྱེཝ་ལས་ བར་མཚམས་ (མགོ་, མཐའ་) གྱིས་འགོ་དང་མཐའ་གཉིས་ཀྱང་མཉམ་པར་འཇུག་པ་ཡིན། བར་མཚམས་རེ་རེ་ལ་དེའི་འགོ་ནི་མཐའ་དང་མཚུངས་པའམ་ཉུང་བ་ཞིག་ཡིན་པར་ངེས་པ་ཡོད། ཁྱོད་ཀྱི་ལས་འགན་ནི་བར་མཚམས་གཉིས་ཀྱི་ཕྲད་ཚད་ནི་སྔོན་གྲངས་ཡིན་མིན་ངེས་པ་དགོས། དཔེར་ན། བར་མཚམས་ (1, 3), (2, 4) གྱི་ཕྲད་ཚད་ནི་ (2, 3) ཕྲད་ཚད་ནི་ 1ཡིན་པ་དང་དེ་ནི་སྔོན་གྲངས་མིན་པ་ངེས་པ་དགོས། གལ་ཏེ་ཕྲད་ཚད་ནི་སྔོན་གྲངས་ཡིན་ན་ \"YES\" སླར་ལོག་བྱོས། གལ་ཏེ་བར་མཚམས་གཉིས་དེ་གཉིས་ཕྲད་མི་ན་ \"NO\" སླར་ལོག་བྱོས། དཔེ་གཞི་: ཕྲད་ཚད་: (((1, 2), (2, 3) ==> \"ཕྲད་ཚད་: (\", 1) \"NO\", \" (\", 1) \"), 4) \"ཕྲད་ཚད་: (\", 1) \" (\", 5) \" (\", 5) \" (\", 5) \" (\", (\", 5) \" (\", 5) \" (\", (\", 5)\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"ཁྱོད་ལ་ཨང་གྲངས་མཐའ་དག་གི་རིམ་པ་ཐོབ་ཡོད། ཁྱོད་ཀྱིས་ཨང་གྲངས་མཐའ་དག་གི་ཚད་གཞི་དང་རིམ་པ་རེ་རེའི་རྟགས་ཐམས་ཅད་ཀྱི་འབྲས་བུ་ལ་ལྡབ་པའི་གྲངས་ཐང་སླར་ལོག་བྱེད་དགོས་པ་ཡིན། ཕྱིར་ལོག་བྱ་རྒྱུ་ནི་ 0 ཡིན་པའི་དཔེ་མཚོན་ཡིན། དཔེ་གཞི་: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None \"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"ཚད་འཛིན་གྱི་དྲ་མིག་ནང་གྲལ་རིམ་དང་ཀ་བ་ N (N >= 2) དང་གྲངས་ཆ་ k ཡོད་པའི་ཚེག་དང་དྲ་མིག་གི་དྲ་མིག་རེ་རེར་གྲངས་ཐང་ཞིག་ཡོད། [1, N * N] ནང་ཡོད་པའི་གྲངས་ཆ་ཚང་མ་དྲ་མིག་གི་དྲ་མིག་ནང་ཐེངས་གཅིག་རང་མངོན་པར་བྱེད། དྲ་མིག་ནང་ཚད་ k ཡི་ཉུང་མཐའི་ལམ་དེ་འཚོལ་དགོས། དྲ་མིག་གང་རུང་ནས་འགོ་འཛུགས་དང་རིམ་པ་རེ་རེར་ཉེ་བའི་དྲ་མིག་གང་རུང་དུ་འགྲོ་ཐུབ། གཞན་སྐད་དུ་བརྗོད་ན་དྲ་མིག་དང་དྲ་མིག་གི་ཟུར་ཚད་ k ཡི་རིང་ཚད་ཀྱི་དྲ་མིག་ k ཡི་རིང་ཚད་ཡོད་ན་དྲ་མིག་ k ཡི་རིང་ཚད་ཡོད་ན་དྲ་མིག་ k ཡི་རིང་ཚད་ཡོད་ན་དྲ་མིག་ནས་ཕྱིར་འགྲོ་མི་ཆོག གལ་ཏེ་དྲ་མིག་ A དང་ B ཡི་རིང་ཚད་ B (of k) ལས་ཆུང་བ་ཞིག་ཡིན་པར་རྩིས་ན། དྲ་མིག་ A དང་ B ཡི་ནང་ཡོད་པའི་གྲངས་ཆ་རིམ་སྒྲིག་པའི་ཐོ་ཡིག་ (Let's call them lA_st and lA_stB) བྱས་རྗེས་དྲ་མིག་གི་དྲ་མིག་ནང་ཚད་ཚད་ k ཡི་ཉུང་མཐའི་ལམ་དེ་འཚོལ་དགོས་པ་ཡིན། ཚད་འཛིན་གྱི་དྲ་མིག་ནང་ནང་ཚད་ལྡན་གྱི་དྲ་མིག་གང་རུང་ཞིག་ཡོད་པའི་དྲ་མིག་ནང་ནང་ནང་ནང་ནང་ནང་ཚད་ k ཡི་རིང་ཚད་ཡོད་ན་དྲ་མིག་དེ་འཚོལ་དགོས། དཔེར་ན་དྲ་མིག་ A = k ཡི་རིང་ཚད་ k ཡི་རིང་ཚད་ k ཡི་རིང་ཚད་ k ཡི་རིང་ཚད་ལས་ཆུང་བ་ (of k) ཡི་རིང་ཚད་ལས་ཆུང་བ་ཡིན་པར་རྩིས་དགོས། གལ་ཏེ་དྲ་མིག་ A དང་ B ཡི་རིང་ཚད་ B ཡི་རིང་ཚད་ B ཡི་རིང་ཚད་ B ཡི་རིང་ཚད་ B ཡི་རིང་ཚད་ B ཡི་རིང་ཚད་ B ཡི་རིང་ཚད་ལས་ཆུང་བ་ (of k ཡི་རིང་ཚད་ k ཡི་རིང་ཚད་) ཡི་རིང་ཚད་ལས་ཆུང་བ་ (Let's return return) ཡི་ཚད་ལྡན་གྱི་དྲ་མིག་ A=1 ཡི་རིང་ཚད་དང་ B ཡི་རིང་ཚད་དང་ B ཡི་རིང་ཚད་ལྡན་གྱི་དྲ་མིག་ A ཡི་རིང་ k ཡི་རིང་ཚད་ k ཡི་རིང་ཚད་ k ཡི་རིང་ཚད་ k ཡི་རིང་ཚད་ k ཡི་རིང་ k ཡི་རིང་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k ཡི་ཚད་ k\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"ཐིག་ཁྲམ་ནང་ཡོད་པའི་གྲངས་ཀ་ནི་ n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་། n དང་།\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"འབྲས་བུ་ནི་ n ཡིན་ན་གྲངས་ཆ་མཉམ་གྱི་འབྲས་བུ་ནི་ 0 ཡིན་ན་གྲངས་ཆ་ཚང་མ་གྲངས་ཆ་མཚུངས་ཡིན་ན་གྲངས་ཆ་ 0 ཕྱིར་ལོག་བྱེད། དཔེར་ན།: གྲངས་ཆ་ 1 == 1 གྲངས་ཆ་ 4 == 0 གྲངས་ཆ་ 235 == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''ལས་འགན་ཞིག་བཟོས་ནས་ནང་འཇུག་ལྟར་དྲ་བའི་ནང་ཁེ་བཞི་པམ་གཅིག་ལས་མེད་པའི་དྲ་བའི་ནང་འཇུག་འཇུག་བྱེད་དགོས། ལས་འགན་དེ་ True སླར་ལོག་བྱ་དགོས་ན། གལ་ཏེ་དྲ་བའི་ནང་ཁེ་བཞི་ཉུང་ཤོས་གཅིག་ཡོད་པའི་དྲ་བའི་ནང་འཇུག་བྱ་འོས་པ་ཞིག་ཡོད་ན་ཡིན། is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]') â -> False is_nested '[[][]]') â -> True is_nested '[[]]]]]]') â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"ཁྱོད་ལ་གྲངས་ཐོ་ཞིག་སྤྲད་ཡོད། ཁྱོད་ཀྱིས་གྲངས་ཐོ་ནང་ཡོད་པའི་གྲངས་ཀྱི་གྲུ་བཞི་གི་བསྡོམས་དེ་ཕྱིར་སློག་བྱེད་དགོས་ཤིང་། ཐོག་མར་གྲངས་ཐོ་ནང་གི་ཆ་ཤས་རེ་རེའི་སྟེང་གི་ int ((Ceiling) སྟེང་ལ་བསྡུ་དགོས། དཔེ་གཞི་: lst = [1,2,3] ཕྱིར་ཐོན་ནི་ 14 ཕྱིར་ཐོན་ནི་ 98 ཕྱིར་ཐོན་ནི་ [1,3,5,7] ཕྱིར་ཐོན་ནི་ 84 ཕྱིར་ཐོན་ནི་ 29 ཕྱིར་ཐོན་ནི་ [-2,4,1,1] ཕྱིར་ཐོན་ནི་ 6 ཕྱིར་ཐོན་ནི་ 6 ཕྱིར་ཐོན་ནི་ 6 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9 ཕྱིར་ཐོན་ནི་ 9\"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''སྐར་ཁུང་གི་དྲ་ལམ་ནས་དྲ་ལམ་ཁ་པར་གྱི་ནང་འཇུག་བྱེད་སྐབས་ཡིག་འབྲུ་གང་རུང་ལ་རྟགས་རྒྱག་དགོས། སྐར་ཁུང་གི་དྲ་ལམ་ཁ་པར་གྱི་ནང་འཇུག་བྱེད་སྐབས་ཡིག་འབྲུ་གང་རུང་ལ་རྟགས་རྒྱག་དགོས།'''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"ཕྲད་གྲངས་དེ་སྔོན་གྱི་ཕྲད་གྲངས་དང་མི་འདྲ་བ་ལས་ཆེ་བ་མིན་པའི་ཕྲད་གྲངས་ཀྱི་ཚད་གཞི་ཆེ་ཤོས་ཕྱིར་ལོག་བྱེད་པའི་ལས་འགན་ཞིག་བཟོ། གལ་ཏེ་ཕྲད་གྲངས་དེ་འདྲ་མེད་ན་ཕྱིར་ལོག་བྱེད་ -༡། གྲལ་ཐིག་ནང་འདྲ་མཚུངས་གྱི་ཐང་མི་འདུག དཔེ་གཞི་: can_arrange ([1,2,4,3,5]) = 3 can_arrange ([1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''ལས་འགན་ཞིག་བཟོ། དེ་ཕྱིར་འཁོར་བའི་ཨང་གྲངས་ནི་ (a, b) དང་། དེར་ 'a' ནི་ཨང་གྲངས་ཀྱི་གྲས་སུ་མེད་པའི་ཨང་གྲངས་ཀྱི་གྲས་སུ་ཡོད་པ་དང་ 'b' ནི་ཨང་གྲངས་ཀྱི་གྲས་སུ་ཡོད་པའི་ཨང་གྲངས་ཀྱི་གྲས་སུ་ཡོད་ཀྱི་ཨང་གྲངས་ཀྱི་གྲས་སུ་ཡོད་ཀྱི་ཨང་གྲངས་ཀྱི་གྲས་སུ་ཡོད་ཀྱི་ཨང་གྲངས་ཀྱི་གྲས་སུ་ཡོད་ཀྱི་ཨང་གྲངས་ཡིན། གལ་ཏེ་ཨང་གྲངས་ཀྱི་གྲས་སུ་མེད་ན་ None ཞེས་ཕྱིར་འཁོར་དགོས། དཔེ་གཞི་: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"ལས་འགན་ཞིག་བཟོས་ནས་གྲངས་ཆ་ཆ་ཚང་དང་ལྡོག་ལྡོག་དང་ཡང་ན་གྲངས་ཆ་དངོས་ཡོད་ཀྱི་གྲངས་རིམ་ལ་མཚོན་པའི་གྲངས་རིམ་ལ་འཇུག་པ། དེ་ལས་གྲངས་ཆ་དངོས་ཡོད་ཀྱི་གྲངས་རིམ་གྱི་གྲངས་རིམ་ཆེན་པོ་བསྒྱུར་བ་ཕྱིར་ལོག་བྱེད་པ། གྲངས་ཐང་འདྲ་མཚུངས་ཡོད་ན་ None སླར་ལོག་བྱེད་པ། དྲན་གསོ། གྲངས་ཆ་དངོས་ཡོད་ཀྱི་གྲངས་རིམ་ལ་མཚོན་ན་ལྡོག་ལྡོག་ཐིག་ནི་ . ཡང་ན་ , compare_one (༡,༢.༥) དང་། = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"བྱིན་ཡོད་པའི་གྲངས་ n ནི་གྲངས་ཆ་ཆ་སྙོམས་ 4 ཀྱི་བསྡོམས་ཡིན་མིན་ལ་དཔྱད་པ། དཔེ་གཞི་ is_equal_to_sum_even (༤) == རྫུན་ནི་ is_equal_to_sum_even (༦) == རྫུན་ནི་ is_equal_to_sum_even (༨) == བདེན་པ་ཡིན།\"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"བརཱ་ཛིལ་གྱི་གནས་སྡུད་ནི་ brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! གང་ཡིན་ཟེར་ན། n > 0 དཔེར་ན་: >>> special_factorial ((4) 288 ལས་འགན་འདི་ལ་ཨང་གྲངས་ཧྲིལ་པོ་ཞིག་ཐོབ་ནས་དེའི་གནས་སྡུད་ལ་དམིགས་བསལ་གྱི་གནས་སྡུད་ཕྱིར་ལོག་བྱ་དགོས།\"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_ དཔེ་གཞི་-3ྲུ་ཞིག་ཡོད་ན་དེའི་ནང་ཡོད་པའི་བར་སྟོང་ཚང་མ་འོག་ཡིག་དང་བརྗེ་སྒྱུར་བྱེད་དགོས། གལ་ཏེ་ཡིག་འབྲུ་ཞིག་ལ་བར་སྟོང་གཉིས་ལས་མང་བ་ཡོད་ན་བར་སྟོང་གཉིས་བརྗེ་སྒྱུར་བྱེད་ - fix_spaces (((\"དཔེ་རིས་\") == \"དཔེ་རིས་\" fix_spaces (((\"དཔེ་རིས་1\") == \"དཔེ་རིས་_1\" fix_spaces (((\"དཔེ་རིས་2\") == \"_དཔེ་རིས་_2\" fix_spaces (((\"དཔེ་རིས་ 3\") == \"_དཔེ་རིས་-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"ཡིག་སྣོད་མིང་རྟགས་ཀྱི་སྔོན་དུ་ཡིག་སྣོད་འོག་གི་ཐིག་ཡིག་ནི་སྟོང་པ་མི་དགོས། དེ་སྔོན་གྱི་ཐིག་ཡིག་འོག་གི་ཐིག་ཡིག་ནི་དབྱིན་ཡིག་གི་ཡི་གེ་ (a'-z' and 'A'-Z') ཞིག་ལས་འགོ་འཛུགས་དགོས། དཔེ་གཞི་: ['txt', 'exe', 'lld'] དཔེ་གཞི་: file_name_check\"{example.txt.txt} # => 'yes' file_name_check\"{example.dll1\") => 'no' (ཡི་གེ་འོག་གི་མིང་ཚིག་ནི་དབྱིན་ཡིག་གི་ཡི་གེ་ཞིག་ལས་འགོ་འཛུགས་དགོས།\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" ལས་འགན་འདི་ནི་གྲངས་ཆ་ཆ་ཚང་གི་ཐོ་ཡིག་ཞིག་ལེན་ངེས་ཡིན། གྲངས་ཆ་ཆ་ཚང་གི་ཐོ་ཡིག་ནང་ཡོད་པའི་ནང་དོན་ཚང་མ་ལ། ལས་འགན་འདི་ནི་གྲངས་ཆ་ཆ་ཚང་གི་ཐོ་ཡིག་དེ་གྲུ་བཞི་ཏུ་བསྐྲུན་དགོས་པ་ཡིན་ན་དེའི་ཐོ་ཡིག་ནི་ 3 ཀྱི་གྱངས་ཁ་དང་མི་འདྲ་བ་ 4 ཀྱི་གྱངས་ཁ་དང་མི་འདྲ་བ་ 3 ཀྱི་གྱངས་ཁ་ཡིན་ན་གྲངས་ཆ་ཆ་ཚང་གི་ཐོ་ཡིག་དེ་གྲུ་བཞི་ཏུ་བསྐྲུན་ངེས་ཡིན། ལས་འགན་འདི་ནི་གྲངས་ཆ་ཆ་ཚང་གི་ཐོ་ཡིག་ལ་འགྱུར་བ་མི་འཇུག་གམ་ཡང་ན་ 3 དང་ 4 ཀྱི་གྱངས་ཁ་མིན་པའི་ཐོ་ཡིག་ནང་ཡོད་པའི་ནང་དོན་རྣམས་བསྒྱུར་མི་ཡོང་། ལས་འགན་འདི་གིས་ནང་དོན་ཚང་མ་བསྡོམས་དགོས་པ་ཡིན། དཔེ་གཞི་: lst = [1,2,3] ཕྱིར་ཐོན་ནི་ 6 ཡིན་ན། lst = [] ཕྱིར་ཐོན་ནི་ 0 ཡིན་ན། lst = [-1,-5,2,-1,-5] ཕྱིར་ཐོན་ནི་ -126 ཡིན་པ་རེད།\"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"ཁྱོད་ཚོར་ཚིག་ཡིག་ཅིག་མཚོན་པའི་ string ཞིག་གནང་ཡོད་ཅིང་། sentences ནང་ལ་ space ཀྱིས་དབྱེ་བའི་ཚིག་འགའ་ཞིག་ཡོད་ཅིང་། ཁྱོད་ཀྱིས་ string ནང་འཇུག་བྱེད་དེ་ནང་ཐོག་མའི་ཚིག་ཡིག་གི་ཚིག་ཡིག་ཡོད་ཅིང་། དེའི་རིང་ཚད་ནི་སྔོན་གྲངས་ཡིན། string ནང་ཚིག་ཡིག་གི་རིམ་པ་སྔོན་གྲངས་དང་མཚུངས་པ་ཞིག་དགོས་པ་ཡིན། Example1: Input: sentence = \"This is a test\" Output: \"is\" Example2: Input: sentence = \"lets go for swimming\" Output: \"go for\" Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"ཁྱོད་ཀྱི་ལས་འགན་ནི་ x*n ཟེར་བའི་ཚིག་ཡིག་དེ་དྭངས་གསལ་བཟོ་རྒྱུའི་ལས་འགན་ཞིག་བྱེད་རྒྱུ་ཡིན། ལས་འགན་དེས་ x*n ཟེར་བའི་གྲངས་ཐང་ནི་ཧྲིལ་པོ་ཡིན་ན་ True སླར་ལོག་བྱེད་པ་དང་གཞན་ན་ False སླར་ལོག་བྱེད་རྒྱུ་ཡིན། x དང་ n གཉིས་ནི་ཕྲད་གྲངས་ཀྱི་མཚོན་རྟགས་ཡིན་པ་དང་གཤམ་གསལ་རྣམ་པ་ཡོད་ལ། <numerator>/<denominator> ནང་གི་ཕྲད་གྲངས་དང་མིང་ཚིག་གཉིས་ཀ་ནི་ཧྲིལ་པོ་ཡིན་པའི་རྣམ་པ་ཡོད། ཁྱོད་ཀྱིས་ x དང་ n ནི་ཕྲད་གྲངས་གཏན་འཁེལ་ཡིན་པར་ངོས་འཛིན་བྱེད་ཆོག དེ་ལས་མིང་ཚིག་ནི་ 0 ཡིན་པ་མི་འདུག simplify \" 1/5\", \"5/1\") = True simplify \" 1/6\", \"2/1\") = False simplify \" 7/10\", \"10/2\") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"ཡིག་ཚགས་ནང་ཡོད་པའི་ཨང་གྲངས་ཀྱི་གྲངས་ཐང་འདྲ་མཚུངས་ཡོད་པའི་ནང་དོན་མང་པོ་ཡོད་ན་ཡིག་ཚགས་ནང་ཡོད་པའི་ཡིག་རྟགས་ལ་གཞི་བཞག་ནས་གོ་རིམ་སྒྲིག་པའི་ལས་འགན་ཞིག་བྲིས་དགོས། དཔེར་ན།: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"གྲངས་ཀྱི་རིམ་པ་ཅིག་རྩིས་ཏེ་རིམ་པ་དེའི་ནང་ཡོད་པའི་གྲངས་ཀྱི་གྲངས་གྲངས་ 10 ལས་མང་བ་ཡོད་པ་དང་རིམ་པ་དེའི་ཨང་གྲངས་དང་པོ་དང་མཐའ་མ་གཉིས་ཆ་གཅིག་མཚུངས་ཡོད་པའི་གྲངས་གྲངས་ཕྱིར་ལོག་བྱེད་པའི་ལས་འགན་ཞིག་འབྲི་དགོས། དཔེར་ན། specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"ཁྱོད་ལ་གྲངས་ཆ་ཚིགས་ཚིགས་ n ཞིག་ཐོབ་ཡོད། ཁྱོད་ཀྱིས་གྲངས་ཆ་ཚིགས་ཚིགས་ཀྱི་རིམ་པ་ a ཡི་རིང་ཚད་ n བཟོ་དགོས། i (1 ‰¤ i ‰¤ n) རེ་རེ་ལ་ a[i] = i * i - i + 1 གྱི་ཐང་ནི་ a[i], a[j], a[k] གྱི་གྲངས་ཆ་གསུམ་ (a[i], a[j], a[k]) ཕྱིར་ལོག་བྱེད་ཅིང་། དེར་ i < j < k དང་། a[i] + a[j] + a[k] ནི་ 3 གྱི་ལྡབ་གྲངས་ཡིན། དཔེ་གཞི་: ནང་འཇུག་: n = 5 ཕྱིར་ཐོན་: 1 འགྲེལ་བཤད་: a = [1, 3, 7, 13, 21] གསུམ་ལྡབ་གཅིག་ནི་ (1, 7, 13) ཡིན།\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''ཉི་མའི་ལམ་ལུགས་ནང་སྐར་ཆེན་བརྒྱད་ཡོད། ཉི་མའི་ཉེ་བའི་སྐར་ཆེན་ནི་མེ་ཁུ་རི་ཡིན། དེའི་རྗེས་ལ་བེ་ནུསེ། དེའི་རྗེས་ལ་ས་གཞི་དང་མེ་རིསི་དང་ཇུ་པི་ཊི་དང་ས་ཊུ་ནར་དང་ཨུ་རན་སི། ནེ་པུ་ཊིན་བཅས་ཡིན། ལས་འགན་འདི་ལ་སྐར་ཆེན་གཉིས་ཟེར་བ་གཉིས་ཡོད། ལས་འགན་འདི་ལ་སྐར་ཆེན་1དང་སྐར་ཆེན་2ཟེར་བའི་སྐར་ཆེན་གཉིས་ཡོད། སྐར་ཆེན་1དང་སྐར་ཆེན་2ཟེར་བའི་སྐར་ཆེན་གྱི་འཁོར་ལམ་གྱི་བར་ལ་ཡོད་པའི་སྐར་ཆེན་ཚང་མ་ཉི་མ་དང་ཉེ་བར་ཡོད་པར་དབྱེ་བའི་སྐར་ཆེན་ཚང་མ་ཡོད་པའི་སྐར་ཆེན་ཞིག་ཕྱིར་སློག་བྱ་དགོས། ལས་འགན་འདི་ལ་སྐར་ཆེན་1དང་སྐར་ཆེན་2ཟེར་བ་གཉིས་ནི་སྐར་ཆེན་གྱི་མིང་མི་དྲང་ན་སྟོང་པའི་སྐར་ཆེན་ཞིག་ཕྱིར་སློག་བྱ་དགོས། དཔེ་གཞི་ bf \"(Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\") bf \"(Earth\", \"Mercury\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Sn\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"ལས་འགན་ཞིག་འབྲི་དགོས། དེ་ནི་ string གི་ཐོ་ཡིག་ལ་ཚད་གཞི་ལྟར་ངོས་ལེན་བྱེད་དེ། དེའི་ནང་ཡོད་པའི་ odd ཡུན་ཚད་ཡོད་པའི་ string རྣམས་སུབ་ནས་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་ཕྱིར་ལོག་བྱེད་དེ་ཡོད། ཐིག་ཁྲམ་ནི་ string གི་ཐོ་ཡིག་ཡིན་པས་གྲངས་ཀྱི་རིམ་པ་ནམ་ཡང་མི་བཟོ་ཞིང་། དེའི་ནང་ཡང་ཡང་དག་པ་ཡོད་སྲིད་དོ། ཐིག་ཁྲམ་གི་རིམ་པ་ནི་ཚིག་རེ་རེ་བཞིན་རིམ་བཞིན་ཡར་འཕོ་དགོས་ཤིང་། ཁྱོད་ཀྱིས་དེ་བཞིན་དུ་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་ཕྱིར་ལོག་བྱེད་དེ་འོས་པ་ཡིན། གལ་ཏེ་ཚིག་གཉིས་འདྲ་མཚུངས་ཡིན་ན་ཡིག་ཐོ་དེ་ཡི་གེ་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་རིམ་བཞིན་\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"སྟབས་བདེ་བའི་ལས་རིམ་ཤིག་སྟེ། གལ་ཏེ་ n ནི་གྲངས་ཀ་མང་པོ་ཡིན་ན་ x གི་ཐང་ཕྱིར་ལོག་བྱེད་ཅིང་། གལ་ཏེ་དེ་མིན་ན་ y གི་ཐང་ཕྱིར་ལོག་བྱེད་པ། དཔེར་ན། x_or_y ((7, 34, 12) == 34 for x_or_y ((15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''གྲངས་ཐོ་ཞིག་ཡོད་ན། གྲངས་ཐོ་ནང་གི་གྲངས་ཆ་ཆ་རྐྱང་གི་གྲུ་བཞི་གི་བསྡོམས་ཕྱིར་ལོག་བྱེད། གྲངས་ཆ་ནི་ཟབ་མོ་ཡང་ན་གྲངས་ཆ་མེད་ཡིན་ན་སྣང་མེད་དུ་འཇོག་དགོས། double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference ((([0]) == 0 ནང་འཇུག་གྲངས་ཐོ་ནི་སྟོང་པ་ཡིན་ན་ 0 སླར་ལོག་བྱེད། '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"ཚོད་དཔག་བྱས་ན་ ཚོད་དཔག་བྱས་པའི་འབྲས་བུ་ནི་ 0 ཡིན་པ་དང་། གལ་ཏེ་ཚོད་དཔག་བྱས་མེད་ན་ ཚོད་དཔག་བྱས་པའི་འབྲས་བུ་དང་ ཚོད་དཔག་བྱས་པའི་འབྲས་བུ་གི་བར་གྱི་ཁྱད་པར་གཏན་ནས་ཡིན། དཔེར་ན།: (([1,2,3,4,5,1],1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,4],4,1,0,-2]) -> [4,0,1,0,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"ཁྱོད་ཚོར་ class (string) ཀྱི་མིང་དང་ extension གྱི་ཐོ་ཡིག་ཐོབ་ཡོང་། ཚད་གཞི་ནི་ class ནང་གི་སློབ་ཚན་ཁ་སྐོང་སྣོན་བྱེད་ཆེད་བེད་སྤྱོད་བྱ་རྒྱུ་ཡིན། ཚད་གཞི་གི་ནུས་པ་གཤམ་གསལ་ལྟར་ཡིན། CAP ནི་ extension གྱི་མིང་གི་ཡིག་འབྲུ་ཆེན་པོ་གྲངས་ཡིན་དང་། SM ནི་ extension གྱི་མིང་གི་ཡིག་འབྲུ་ཆུང་གྲངས་ཡིན་ན། ཚད་གཞི་དེ་ CAP - SM བཅའ་ཡིག་གིས་སྤྲོད་དགོས། ཁྱོད་ཀྱིས་ནུས་པ་ཆེ་ཤོས་དེ་འཚོལ་ནས་ string འདི་འདྲ་བའི་རྣམ་པ་ནང་ཕྱིར་ལོག་བྱེད་དགོས། ClassName.StrongestExtensionName. གལ་ཏེ་ནུས་པ་འདྲ་མཚུངས་ཀྱི་ extension གཉིས་སམ་དེ་ལས་མང་བ་ཡོད་ན་ཁྱོད་ཀྱིས་ list ནང་ཐོག་མར་ཐོན་པ་འདེམས་དགོས། དཔེར་ན་ class དང་ extension གྱི་ཐོ་ཡིག་ \"Slices\" ཟེར་བ་ཡོད་ན་ ['SEviviSliNGCes', 'Cheese', 'StuFfed'] ཚད་གཞི་ནི་ 'Slices.SEviSliNGCes' 'SviSliNGCes' 'mySviSliNGCes']) ཚད་གཞི་ཤུགས་ཆེ་ཤོས་ཡིན་པས་ 'Slices.SEviSliNGCes' ཟེར་བ་ཕྱིར་ལོག་བྱེད་དགོས། (དཔེར་ན། 'AA_Class' = 'Beast' StrongestExtension_Class', དཔེ་གཞི་: 'AA'_Class' ཆེད་ Strongest_1',\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"ཁྱོད་ལ་ཚིག་གཉིས་ཐོབ་ཡོད། གལ་ཏེ་ཚིག་གཉིས་པ་ཡང་ན་དེའི་འཁོར་ལོའི་ཆ་ཤས་གང་ཞིག་ནི་ཚིག་དང་པོའི་ནང་གི་འོག་རིམ་ཡིན་ན་ཁྱོད་ཀྱིས་ True སླར་ལོག་བྱེད་དགོས་ cycpattern_check (((\"abcd\",\"abd\") => False cycpattern_check (((\"hello\",\"ell\") => True cycpattern_check (((\"whassup\",\"psus\") => False cycpattern_check (((\"abab\",\"baa\") => True cycpattern_check (((\"efef\",\"eeff\") => False cycpattern_check (((hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"འབྲས་བུ་ནི་གྲངས་ཆ་མཉམ་ཡིན་པའི་ཚད། འབྲས་བུ་ནི་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་པའི་ཚད། འབྲས་བུ་ནི་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་པའི་ཚད། འབྲས་བུ་ནི་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་པའི་ཚད། འབྲས་བུ་ནི་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་པའི་ཚད། འབྲས་བུ་ནི་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་པའི་ཚད། འབྲས་བུ་ནི་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་པའི་ཚད། འབྲས་བུ་ནི་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་པའི་ཚད། འབྲས་བུ་ནི་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་པའི་ཚད། འབྲས་བུ་ནི་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་པའི་ཚད། འབྲས་བུ་ནི་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་པའི་ཚད། འབྲས་བུ་ནི་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་པའི་ཚད། འབྲས་བུ་ནི་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་དང་གྲངས་ཆ་མཉམ་\"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"འབྲས་བུ་ལྡན་གྲངས་ཤིག་ཡོད་ན། རོམ་གྲངས་ཀྱི་ཆ་སྙོམས་དེ་ཡིག་འབྲུ་ལྟར་ལེན་ནས་ཡིག་ཆུང་དུ་ཕྱིར་ལོག་བྱེད་དགོས། ཚད་འཛིན་: 1 <= num <= 1000 དཔེ་གཞི་: >>> int_to_mini_roman(19) == 'xix' >>> int_to_mini_roman(152) == 'clii' >>> int_to_mini_roman(426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་ལ་གཞིགས་ན། ཕྱོགས་གསུམ་གྱིས་ཟུར་གསུམ་དྲང་པོ་བཟོ་ན་ True སླར་ལོག་བྱེད། དེ་མིན་ False སླར་ལོག་བྱེད། ཟུར་གསུམ་དྲང་པོ་ནི་ཟུར་གསུམ་གྱི་ཟུར་གཅིག་ནི་ཟུར་དྲང་པོ་ཡང་ན་ 90 ཙམ་ཡིན་པའི་ཟུར་གསུམ་ཡིན། དཔེ་གཞི་: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"ཡིག་འབྲུ་གྲངས་ཐོ་ཞིག་ལེན་པའི་ལས་འགན་ཞིག་འབྲི་དགོས། མིང་ཐོ་ནང་ཚིག་ཚིག་མི་འདྲ་བ་ཞིག་ཡོད། ཚིག་ཡིག་ལ་ཡིག་འབྲུ་ཁྱད་དུ་འཕགས་པའི་གྲངས་ཚད་མང་ཤོས་ཡོད་ན་ཚིག་ཡིག་ཐོག་མར་ཐོན་པ་དེ་ཕྱིར་སློག་བྱེད་དགོས། find_max (([\"name\", \"of\", \"string\"]) == \"string\" find_max (([\"name\", \"enam\", \"game\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"ཁྱོད་ནི་ལྟོ་བ་ཚ་བའི་རྭ་བ་ཞིག་ཡིན་པས་ཉིན་རེའི་ཟས་རིགས་ཆ་ཚང་བཟོ་བའི་ཆེད་ཤིང་འབྲས་མང་བ་ཟ་དགོས་པ་ཡིན། ཁྱོད་ཀྱིས་ [ཟས་རིགས་ཚང་མ་ཟ་བའི་རྗེས་ཀྱི་ཤིང་འབྲས་ཚང་མའི་གྲངས་དང་ཟས་རིགས་ཚང་མ་ཟ་བའི་རྗེས་ཀྱི་ཤིང་འབྲས་ལྷག་ལུས་ཀྱི་གྲངས་] ཟེར་བའི་ཡིག་གཟུགས་ཤིག་ཕྱིར་སློག་དགོས། གལ་ཏེ་ཤིང་འབྲས་ལྷག་ལུས་མ་ཚང་ན་ལྷག་ལུས་ཤིང་འབྲས་ཚང་མ་ཟ་ནའང་ཁྱོད་མུ་གེ་མི་འདུག དཔེར་ན། *ཟ་བ་ (༥,༦,༡༠) -> [11,4] *ཟ་བ་ (༤,༨,༩) -> [12,1) *ཟ་བ་ (༡༠,༡༠) -> [11,0] *ཟ་བ་ (༢,༡༡,༥) -> [༧,༠] འགྱུར་བ་: @number: ཟ་བའི་ཤིང་འབྲས་གྲངས་ཆ་ཚད། @need: ཟ་དགོས་པའི་ཤིང་འབྲས་གྲངས་ཆ་ཚད། @remaining: ཟ་དགོས་པའི་ཤིང་འབྲས་ལྷག་ལུས་ཀྱི་གྲངས་ཆ་ཚད། Constrain: *0= <= 0 *0= <= 1000 *0= <= 1000 = 0 = 0 དགོས་པའི་ཤིང་འབྲས་ལྷག་ལུས་ཀྱི་གྲངས་ཆ་ཚད།\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"སྟབས་ཀྱི་གྲངས་རྩིས་གཉིས་ཡོད། དང་པོ་ནི་གྲངས་རྩིས་ཀྱི་གཞི་རྟེན་དང་གཉིས་པ་ནི་གྲངས་རྩིས་ཀྱི་གྲངས་རྩིས་ཡིན། གྲངས་རྩིས་ཀྱི་ཚིག་ཡིག་དེ་བཟོ་རྒྱུའི་ཆེད་དུ་གྲངས་རྩིས་གཉིས་བེད་སྤྱོད་བྱེད་ནས་དེའི་གྲངས་རྩིས་ཕྱིར་སློག་དགོས། གཞི་རྟེན་གྱི་གྲངས་རྩིས་ཀྱི་ལས་དོན་ནི། གྲངས་རྩིས་ (+) འབྲས་བུ་ (--) མང་ལྡོག (--) སྐལ་བགོས་ (--) ཚད་རྩིས་ (--) དཔེ་གཞི་ (--) ལས་འགན་['+', '*', '-'] གྲལ་ཐིག་ = [2, 3, 4, 5] གྲུབ་འབྲས་ = 2 + 3 * 4 - 5 => གྲུབ་འབྲས་ = 9 དྲན་གསོ། ལས་འགན་ཡིག་ཆའི་རིང་ཚད་ནི་གྲངས་རྩིས་ཀྱི་གྲངས་རྩིས་ཀྱི་རིང་ཚད་དང་ཉུང་བ་ 1 ཡིན། ལས་འགན་ནི་གྲངས་རྩིས་ཀྱི་གྲངས་རྩིས་ཀྱི་གྲངས་རྩིས་ཡིན། ལས་འགན་ཡིག་ཆའི་ནང་ཉུང་ཤོས་ལས་འགན་གཅིག་ཡོད་ལ། ལས་འགན་ཡིག་ཆའི་ནང་ཉུང་ཤོས་ལས་འགན་གཉིས་ཡོད་ལ། ལས་འགན་ཡིག་ཆའི་ནང་ཉུང་ཤོས་ལས་འགན་གཉིས་ཡོད་ལ། ལས་འགན་ཡིག་ཆའི་ནང་ཉུང་ཤོས་ལས་འགན་གཉིས་ཡོད་ལ།\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"གལ་ཏེ་ s[i]ནི་ཡི་གེ་ཡིན་ན་དེའི་ཡིག་ཆུང་འོག་ནས་གོང་དུ་བསྒྱུར་དགོས་པའམ་ vice versa བྱས་ན་དེ་འདྲ་བཞག་དགོས། གལ་ཏེ་ string ནང་ཡི་གེ་མེད་ན་ string དེ་ཕྱིར་བསྒྱུར་དགོས། ལས་འགན་གྱིས་འབྲས་བུ་ string སླར་ལོག་བྱེད་དགོས་པ་ཡིན། དཔེ་གཞི་ solve ((\"1234\") = \"4321\" solve ((\"ab\") = \"AB\" solve ((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"string 'text' ཤིག་ཡོད་ན་ md5 ཧེཤི་འདྲ་མཉམ་གྱི་ཐག་པ་ཕྱིར་ལོག་བྱེད། གལ་ཏེ་ 'text' ནི་སྟོང་པ་ཡིན་ན་ None སླར་ལོག་བྱེད། >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "bod_Tibt",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"འབྲས་བུ་གྲངས་ཆ་མཉམ་ a དང་ b གཉིས་ཡོད་ན། a དང་ b བར་གྱི་གྲངས་ཆ་ཆ་མཚུངས་དེ་ཡར་ལྡོག་གི་རིམ་པ་བཞིན་ཕྱིར་སློག་བྱ་དགོས། དཔེར་ན། generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]