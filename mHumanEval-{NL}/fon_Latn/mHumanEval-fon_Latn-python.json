[
    {
        "task_id": "HumanEval/0",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Kpɔ́n nú nùɖé lɛ́ɛ ɖò nùjlɛ́kpo e è ná lɛ́ ɖó ɔ́ mɛ, bó sɛ́ dó yeɖée hú nǔ e è ná ɖó é. Kpɔ́n: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"azɔ̀n élɔ́ sín nǔ è nɔ sɔ́ dó nùɖé mɛ ɔ́ wɛ nyí nùɖé bɔ è nɔ sɔ́ nùɖé lɛ́ɛ ɖó vo nú nùɖé lɛ́ɛ, bó nɔ lɛ́ sɔ́ nùɖé lɛ́ɛ ɖó vo nú nùɖé lɛ́ɛ. nùɖé lɛ́ɛ nɔ ɖó vo nú nǔ e è nɔ sɔ́ ɖó vo nú nǔ lɛ́ɛ é (nɔ̌ ɖokpó ɔ́ nɔ́ nyí nǔ e è nɔ sɔ́ ɖó vo nú nǔ lɛ́ɛ é) bó nɔ́ lɛ́ sɔ́ nùɖé lɛ́ɛ ɖó vo nú ɖě ǎ.\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"Nú è na sɔ́ nùjlɛ́kpo e nɔ́ nyí nǔ e nɔ́ ɖò tɛntin é ɖé, è sixu má ɖó nùjlɛ́kpo e nyí nǔ e nɔ́ nyí nǔ e nɔ́ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ\"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"è na na we nǔ e è nɔ sɔ́ akwɛ́ dó lɛ́ɛ é kpo ée è nɔ ɖè sín akwɛ́xwé lɛ́ɛ é kpo. azɔ̌ towe wɛ nyí ɖɔ a na mɔ ɖɔ akwɛ́ ɖò akwɛ́xwé ɔ́ jí jɛ hweɖebǔnu bɔ é jɛ hweɖebǔnu bɔ nǔ e è nɔ sɔ́ akwɛ́ dó lɛ́ɛ nɔ jɛ hweɖebǔnu bɔ nǔ e è nɔ sɔ́ akwɛ́ dó lɛ́ɛ nɔ jɛ hweɖebǔnu bɔ nǔ e è nɔ sɔ́ akwɛ́ dó lɛ́ɛ nɔ jɛ hweɖebǔnu bɔ nǔ e è nɔ sɔ́ akwɛ́ dó lɛ́ɛ nɔ jɛ hweɖebǔnu bɔ nǔ e è nɔ sɔ́ akwɛ́ dó lɛ́ɛ nɔ jɛ hweɖebǔnu bɔ nǔ e è nɔ sɔ́ akwɛ́ dó lɛ́ɛ nɔ jɛ hweɖebǔnu bɔ nǔ e è nɔ sɔ́ akwɛ́ dó lɛ́ɛ nɔ jɛ hweɖebǔnu bɔ nǔ e è nɔ sɔ́ akwɛ́ dó lɛ́ɛ nɔ jɛ hweɖebǔnu bɔ nǔ e è nɔ sɔ́ akwɛ́ dó lɛ́ɛ nɔ jɛ hweɖebǔnu.\"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"Ɖó nùxwlé nùjlɛ́jlɛ́ è è ná dó é ɖé ɔ́' è na lɛ́ mɔ̀ mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ̀ nú mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ mɛ\"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Dǒ númɛ̀ 'delimeter' ɖò nùxwásá wè ɖò kpɔ́ nú nùxwásá è è ɖò nǔ lɛ jí é bǐ tɛntin `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Ɖo azɔ̀n elɔ mɛ ɔ, nùxwlé wɛ nyí nùxwlé e nɔ́ xlɛ́ ɖɔ nùxwlé lɛ́ɛ ɖò tò vovo mɛ bɔ nùxwlé lɛ́ɛ nɔ́ ɖò tò vovo mɛ. Ɖò tò ɖokpo ɖokpo mɛ ɔ, è na ɖè tò e mɛ nùxwlé lɛ́ɛ nɔ́ ɖò tò vovo mɛ é. Àmɛ́, (() (()) ɖó tò wè ɖò tò vovo mɛ, bɔ ((())) ɖó tò atɔn. >>> parse_nested_parens (('((()) ((())) () ((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"nú nùxwlé lɛ́ɛ e è ná ná é ɔ́, è na lɛ́ sɔ́ nùxwlé lɛ́ɛ bǐ sín nùxwlé lɛ́ɛ bó ná lɛ́ sɔ́ nùxwlé lɛ́ɛ bǐ sín nǔ è ná lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́\"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"Ɖò nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ e è ná lɛ́ɛ sín nùjlɛ́jlɛ́ ɔ́ mɛ ɔ́, è na bló nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ e è na lɛ́ mɔ ɖò nùjlɛ́jlɛ́ ɔ́ mɛ káká jɛ hweɖénu é. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"Xà palindrome kpɛví e jɛ̀ kpò ɖò wèmá è è ɖè é. Nǔ e è nɔ dó wèmá ɔ́ é vlɛ́: - Xà wèmá e è ɖè lɛ́ɛ sín wèmá e nyí palindrome é sín wèmá e nyí wèmá e nɔ ɖò wèmá ɔ́ gudo é. - Zɔ wèmá e nɔ jɛ nukɔn nú wèmá e nɔ nyí wèmá palindrome é sín wèmá e nɔ jɛ nukɔn nú wèmá e nɔ nyí wèmá é sín wèmá. >>> make_palindrome ((('') '' >>> make_palindrome ((('catac') 'catac' >>> make_palindrome ((('catac') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Kpɔ́n ɖɔ xɛ e è ná é nyí palindrome à jí \"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Ɖɔ ɔ wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε wε w w w wε wε w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w w\"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Ɖò nùjlɛ́jlɛ́ xójlawema lɛ́ɛ tɔn mɛ ɔ́, lɛ́ vɔ́ nùjlɛ́jlɛ́ e lín hú ɖě é. Nú è mɔ nùjlɛ́jlɛ́ xójlawema e lín hú ɖě lɛ́ɛ é ɔ́, lɛ́ vɔ́ nùjlɛ́jlɛ́ nukɔntɔn ɔ́. Nú nùjlɛ́jlɛ́ xójlawema lɛ́ɛ tɔn ma ɖò nǔtí ǎ ɔ́, lɛ́ vɔ́ NONE. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Ðɔ nǔ e nɔ kpá nú nùɖé lɛ bǐ ɖò nùɖé lɛ bǐ mɛ é ɖé sín ta nú nùɖé lɛ bǐ ɖò nùɖé lɛ bǐ mɛ é => nǔ e nɔ kpá nú mɛ bǐ ɖò nùɖé lɛ bǐ mɛ => nǔ e nɔ kpá nú mɛ bǐ ɖò nùɖé lɛ bǐ mɛ => nǔ e nɔ kpá nú mɛ bǐ ɖò nǔɖé lɛ bǐ mɛ => nǔ e nɔ kpá nú mɛ bǐ ɖò nǔɖé lɛ bǐ mɛ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá nú mɛ bǐ => nǔ e nɔ kpá\"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"E nɔ lɛ́ lɛ́ vɔ́ xóɖɔɖókpɔ́ lɛ́ɛ bǐ sín nùxwásá sín wuntun kpɛví ɔ́ tɔn jí jɛ wuntun línlín ɔ́ tɔn jí >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"lɛ́ yí nùxwásá e ɖò nùjlɛ́jlɛ́ e è ɖó x'ɛ́ jɛ̀ nú 0 káká yi n jí lɛ́ɛ é. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"E na w'azɔnkwín ɖé ɔ, kpɔ́n ɖɔ w'azɔnkwín nabí lɛ́ɛ wɛ ɖò w'azɔnkwín ɔ mɛ => count_distinct_characters => 'xyzXYZ') 3 => count_distinct_characters => 'Jerry') 4\"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"E nɔ sɔ́ wuntun e nɔ xlɛ́ nùxixa sín wuntun lɛ́ɛ ɖò wuntun ɖé mɛ ɖò ASCII mɛ. Wuntun towe lɛ́ɛ wɛ nyí ɖɔ a na wlan wuntun lɛ́ɛ e nɔ nyí nǔ e è nɔ ylɔ ɖɔ nǔxixa lɛ́ɛ é ɖó wuntun e è nɔ ylɔ ɖɔ nǔxixa lɛ́ɛ é. Wuntun lɛ́ɛ ɔ́, wuntun e è nɔ ylɔ ɖɔ nǔxixa lɛ́ɛ é wɛ nyí: 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun, 'o' - wuntun => 'parse_music' => 'o' => 'o' => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => 'o => '\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"Xà azɔmεvi nabi e è sixu mɔ ɖo azɔmεvi ɔ mε ɔ. Xà azɔmεvi e nɔ kpodo mɛ ɖevo lɛ kpo ɔ. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"nǔ è ná byɔ́ ɔ́' nùkwín nùɖé lɛ́ɛ tɔn wɛ bɔ è nɔ sɔ́ ɖó tɛntin sín 'mɛ̀' jɛ 'mɛ̀.' Nǔ e è na sɔ́ ɖó tɛntin lɛ́ɛ wɛ nyí 'mɛ̀', 'ɖǒzo', 'wè', ' atɔn', 'nɛ', 'sín', 'sín', 'sín', 'sín', 'sín', 'sín' kpo. É ná lɛ́ kɔ́n nùkwín ɔ́ dó nùɖé lɛ́ɛ jí bɔ è na sɔ́ ɖó tɛntin sín kpɛví bǐ jɛ ɖaxó bǐ jí >>> sort_numbers (('three one five') 'one three five' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"Ɖò nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ e è na lɛ́ ná é (e na nyí wè ɖò wuntun ɔ́ mɛ é) ɔ́, ɖè nùjlɛ́jlɛ́ wè e sɛ́ dó yeɖée hú lɛ́ɛ bo lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ\"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Nú è na w'azɔ̌nxixa nùjlɛ́jlɛ́ (e nɔ ɖó nùɖé wè ɖò wŭ é) ɔ, è na zán nùjlɛ́jlɛ́ linear nú nùjlɛ́jlɛ́ énɛ́ ɔ, nú nùjlɛ́jlɛ́ e ɖò kpɛví hú bǐ ɔ na wá nyí 0 bɔ nùjlɛ́jlɛ́ e ɖò ɖaxó hú bǐ ɔ na wá nyí 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"Hwe e è na lɛ́ lɛ́ kɔ dó wuntun ɖé wu é >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"nú nùxwásá n ɖé ɔ, mɔ nùxwásá ɖaxó e má n ɖó wè é, e hú gǎn n >>> largest_divisor ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Ðàñ÷åò ñïèñêà ïåðâûõ ôàêòîðîâ äàííîãî ïîëíîìî÷èÿ â ðåçóëüòàòå ñ ìàëåíüêîãî ê áîëüøîìó. Êàæäûé èç ôàêòîðîâ äîëæåí áûòü ñôîðìèðîâàí ÷èñëîì ðàç, ñîîòâåòñòâóþùèì ÷èñëó ðàç, êàê îí ïîÿâëÿåòñÿ â ôàêòîðèçàöèè. Âûïóñêíóþ íîìåðó äîëæåí áûòü ðàâåí ïðîöåíòó âñåõ ôàêòîðîâ >>> ôàêòîðèçàöèè(8) [2, 2, 2] >>> ôàêòîðèçàöèè(25) [5, 5] >>> ôàêòîðèçàöèè(70) [2, 5, 7] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"Ɖò nùxwlé lɛ́ɛ sín nùxwlé lɛ́ɛ jí ɔ́, ɖè nùɖé lɛ́ɛ e nɔ́ jɛ azɔn jɛji lɛ́ɛ bǐ síin. Hwlɛ̌n nùɖé lɛ́ɛ sín tito e è sɔ́ ɖó vo é. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"Ɖo wèmá è è ná w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́ mɛ ɔ́, w'azɔn ɔ́ mɛ ɔ́ mɛ ɔ́ mɛ ɔ́ => flip_case_{{}\"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Ɖɔ xɛ́n xɛ́n dó xɛ́n ɖokpó jí >>> kpò xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n xɛ́n x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x\"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that start with a given prefix. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"lɛ́ɛ ɔ́, è nɔ lɛ́ yí nùjlɛ́kpo ɖagbe lɛ́ɛ dó nùjlɛ́kpo ɔ́ mɛ.\"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"Ðèñóåò true nú nùxwásá ɖé nyí nùxwásá nukɔn tɔn, bo lɛ́ nyí false nú nùxwásá ɖevo. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs nyí nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nùxíɖó nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"Ðàñ÷èòûâàåò ïëîòíûé ôåíîìåí ñ êîýôôèöèåíòàìè xs â òî÷êå x. âîçâðàùàåò xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"azɔ̀ élɔ́ nɔ́ yí nùkwín l bo nɔ́ lɛ́ yí nùkwín l' bɔ̀ l' nɔ́ cí l ɖò nùjlɛ́jlɛ́ e è ma nɔ́ má ɖó atɔn jí ǎ lɛ́ɛ mɛ, bɔ̀ nùjlɛ́jlɛ́jlɛ́ e è nɔ má ɖó atɔn jí lɛ́ɛ sín akwɛ́ nɔ́ cí nùjlɛ́jlɛ́jlɛ́ l tɔn e è nɔ má ɖó atɔn jí lɛ́ɛ tɔn ɖɔhun, amɔ̌ è nɔ bló tito tɔn. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"lɛ́ɛ ɔ́, nǔ e è sɔ́ ɖó vo lɛ́ɛ sín nǔ lɛ́ɛ wɛ è nɔ lɛ́ lɛ́ wá dó list ɔ́ mɛ >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Zɔ́n nǔ e ɖò nùjlɛ́jlɛ́ ɔ́ mɛ é bǐ. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Zɔ́n nú azɔn nabí e wuntun 7 ɔ́ nɔ́ tɔ́n ɖò nùjlɛ́kpá e ɖò 11 alǒ 13 mɛ lɛ́ɛ mɛ é, bɔ é ɖò kpò nú nú n ǎ. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"azɔ̀ élɔ́ nɔ́ yí nùkwín l bo nɔ́ lɛ́ yí nùkwín l' bɔ̀ l' nɔ́ cí l ɖò nùkwín lǎwùn lɛ́ɛ mɛ̀, bɔ̀ nùkwín lǎwùn lɛ́ɛ tɔn nɔ́ cí nùkwín lǎwùn lɛ́ɛ tɔn ɖɔhun, có è nɔ ɖè. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"nɔ sɔ́ wuntun e è wlan dó encode_cyclic mɛ é dó wuntun è è wlan dó mɛ é mɛ.\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"é nɔ́ lɛ́ yí wuntun e è wlan dó wuntun jí é dó wuntun atɔn jí.\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib è nɔ zín númɛ̀n nùɖé ɔ́ bɔ̀ é nyí nùɖé Fibonacci tɔn bɔ̀ é nyí nùɖé nùɖé. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero nɔ sɔ́ nùxwlé lɛ sín nùxwlé dó mɔ nǔ è nɔ dó é. é nɔ lɛ́ lɛ́ wá True nú nùxwlé lɛ́ɛ atɔn ɖò nùxwlé ɔ mɛ bɔ nǔ lɛ́ɛ nɔ sɔ́ ɖó nǔ ɖokpo ɔ mɛ bɔ nǔ lɛ́ɛ nɔ sɔ́ ɖó nǔ ɖokpo ɔ mɛ bɔ nǔ lɛ́ɛ nɔ sɔ́ ɖó nǔ ɖokpo ɔ mɛ bɔ nǔ lɛ́ɛ nɔ sɔ́ ɖó nǔ ɖokpo ɔ mɛ ɔ, é nɔ lɛ́ lɛ́ wá False. >>> triples_sum_to_zero (([1, 3, -2, 1]) False >>> triples_sum_to_zero (([1, 3, -2, 1]) True >>> triples_sum_to_zero (([1, 2, 3, 7]) False >>> triples_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero (([1]) False \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"mi kpɔ́n ali e nyí ali ɖagbe e nɔ́ zɔ́n káká bɔ è nɔ mɔ̀ ǎ é ɖé. mɔ̌to n nɔ́ ɖo yiyi wɛ sín amyɔxwé yì ɖisíxwé; ɖò hwe ɖokpo ɔ́ nu ɔ́, mɔ̌to n ɖevo lɛ́ɛ nɔ́ ɖo yiyi wɛ sín ɖisíxwé yì amyɔxwé. mɔ̌to we lɛ́ɛ bǐ nɔ́ jɛ zɔ nú yeɖée. mɔ̌to lɛ́ɛ bǐ nɔ́ zɔn dó gan ɖokpo ɔ́ mɛ. è nɔ ɖɔ mɔ̌to we lɛ́ɛ nɔ́ xò yeɖée hwe hwenu e mɔ̌to e ɖò yiyi wɛ sín amyɔxwé yì ɖisíxwé é nɔ́ xò mɔ̌to e ɖò yiyi wɛ sín ɖisíxwé yì amyɔxwé é. amɔ̌, mɔ̌to lɛ́ɛ ɖó hlɔnhlɔn bo nɔ́ syɛ́n káká bɔ è nɔ mɔ̀ yeɖée hwe ǎ; enɛ wu ɔ́, ye nɔ́ zɔn dó ali yetɔn jí ɖi nǔ ɖɔ ye kún xò yeɖée hwe ó ɖɔhun.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Ðèñóíîê ñïèñêà ñ ýëåìåíòàìè, óâåëè÷åííûìè íà 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] \"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero nɔ sɔ́ nùɖé lɛ́ɛ dó wlan nùɖé lɛ́ɛ. É nɔ lɛ́ lɛ́ wá True nú nùɖé lɛ́ɛ ɖò wlan ɔ́ mɛ bɔ nǔ lɛ́ɛ nɔ sɔ́ nǔ lɛ́ɛ ɖó vo nú nǔ lɛ́ɛ, bo nɔ lɛ́ wá False. >>> pairs_sum_to_zero([1, 3, -2, 1]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero[[1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Ðɔ nùxwásá nú nùxwásá x tɔn dó nùxwásá. lɛ́ kɔ̀n nùxwásá sín nùjlɛ́jlɛ́ ɖò nùjlɛ́jlɛ́ ɔ gudo. nùxwásá nú nùxwásá lɛ́ɛ ɖò hweɖénu nú 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"E na bo na w'azɔ̀ alɔdo tɔn kpo alɔdo è nɔ lɛ́ kɔ́n é kpo nú atɔnví ɔ. >>> triangle_area ((5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 nùxwásá ɔ́ nyí nùxwásá bɔ̀ è nɔ ylɔ́ ɖɔ Fibbonacci sín nùxwásá bɔ è nɔ ylɔ́ ɖɔ mɔ̌: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Bò nú è ni wlan nùxwásá ɖé bó ná dó mɔ nǔ è nɔ ylɔ́ ɖɔ n-ɔ́n nú nùxwásá fib4. Ma zán nǔ e nɔ nyí nǔ lɛ́ɛ lɛ́ɛ ó. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"Ðàñõîäíûé ñðåäíèé ýëåìåíò ýëåìåíòîâ â ñïèñîê l. >>> ñðåäíèé (([3, 1, 2, 4, 5]) 3 >>> ñðåäíèé (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"E nɔ kpɔ́n ɖɔ xɛ e è na é nyí palindrome wɛ à => is_palindrome (à) => true (à) => is_palindrome (à) => true (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à) => is_palindrome (à)\"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Zɔ́n 2^n modulo p (nùn nùmεkɔn). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"nɔ sɔ́ wuntun e è wlan dó encode_shift ɔ́ dó wuntun è è wlan dó é mɛ. É nɔ lɛ́ wuntun e è wlan dó é.\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"é nɔ́ lɛ́ yí wuntun e è wlan dó wuntun ɔ́ mɛ é dó wuntun 5 mɛ̀ ɖò wuntun lɛ́ɛ mɛ̀.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels nyí azɔ̀ e nɔ yí wèmá bó nɔ lɛ́ lɛ́ wèmá e mɛ̀ wèmá ɖè ǎ é. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"lɛ́ kɔ́n nǔ e nyí nugbǒ é nú nú nùjlɛ́kpo l lɛ́ɛ bǐ ɖò fí e nǔ lɛ́ɛ ɖò hweɖénu én",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Zɔ́n nùjlɛ́kpo wè x kpo y kpo >>> zɔ́n ((2, 3) 5 >>> zɔ́n ((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"Kpɔ́n ɖɔ xókwin wè ɖó wuntun ɖokpo ɔ à => same_chars (eabcdzzzz, dddzzzzzzddddddddd) True => same_chars (eabcd, ddddddddddd) True => same_chars (eabcd, ddddddddd) False => same_chars (eabcd, ddddddddddd) False => same_chars (eabcdzzzz, dddzzzzddddddd) False => same_chars (eabcdzzzz, dddzzzzddddddddd) False => false\"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"Ðɔ númɛ̀ Fibonacci tɔn n-ɔ́. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"bracket lɛ́ɛ nyí wuntun \"<\" kpo \">\". lɛ́ lɛ́ kɔ́n True nú bracket è nɔ́ hun lɛ́ɛ bǐ ɖó bracket è nɔ́ sú lɛ́ɛ ɖokpó ɖokpó. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Ðèñóåò ñôîðìèðîâàííûé èíäèâèäóàëüíûé èíäèâèäóàëüíûé ýëåìåíò äëÿ äâóõ ñïèñîê. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Ɖɔ nǔɖókpɔ́ nùjlɛ́jlɛ́ tɔn ɖaxó n tɔn. Mi sɔ́ ɖɔ n > 1 bo nyí nùjlɛ́jlɛ́jlɛ́ ɖé ǎ. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n nyí azɔ̀ e nɔ sú nùxwásá sín 1 jɛ n jí é. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets nyí wuntun \"(\" kpo \"\". lɛ́ kɔ́n True nú bracket è nɔ hun ɔ́ bǐ ɖó bracket è nɔ sú ɔ́ ɖokpó. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs nɔ ɖe xlɛ́ nùxíɖó-núnkan-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò-kpò\"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"FibFib nùxwásá ɔ́' nùxwásá e cí Fibbonacci sín nùxwásá ɔ́ ɖɔhun, è nɔ ylɔ̀ ɖɔ: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Blɛ́n nùxwásá ɖé bó ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná dó mɔ nǔ è ná ɔ́ ná dó mɔ nǔ è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"Wlε azɔxwεn vowels_count e nɔ sɔ wεn e nɔ ɖe nuɖevo ɖokpo xlɛ́ bo nɔ na nuɖevo lε ɖo wεn ɔ mε ɔ. 'a', 'e', 'i', 'o', 'u' wɛ nyi vowels ɖo ninɔmɛ elɔ mɛ. 'y' lɔ nyi vowel ɖo fin wεn ɔ tɔn mɛ, amɔ e ɖo wεn ɔ gudo ɔ kɛɖɛ wɛ. Kpɔ́n: >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"D'akpá ɖevo lɛ d'akpá ɔ mɛ.\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Zɔ́n nùjlɛ́kpo x tɔn lɛ́ɛ dó lɛ́ɛ wú, zɔ́n nùjlɛ́kpo lɛ́ɛ dó ɖisíxwé, bo lɛ́ yí nùjlɛ́kpo ɔ́ dó wuntun ɖé mɛ. Nú shift > nùjlɛ́kpo lɛ́ɛ ɔ́, lɛ́ yí wuntun lɛ́ɛ dó gudo. >>> circular_shift ((12, 1) \"21\" >>> circular_shift ((12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"azɔ̌ Wlan azɔ̀ e nɔ sɔ́ wuntun wuntun ɖé dó wlan nǔ é nɔ lɛ́ lɛ́ lɛ́ sín nùɖé lɛ́ɛ sín nùɖé lɛ́ɛ => 0 digitSum{\"} => 131 digitSum{\"} => 67 digitSum{\"} => 69 digitSum{\"} => 131 digitSum{\"} => 153\"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"ðò azɔ̌ élɔ́ mɛ ɔ́, è na sɔ́ nùjlɛ́kpo ɖé dó wlan nùjlɛ́kpo e nɔ xlɛ́ atín kpó atínla kpó e è má dó atínkwínkwín ɖé mɛ é. Atínkwín élɔ́ ɖó atín, atínla kpódó mangó kpó. È na sɔ́ nùjlɛ́kpo e nɔ xlɛ́ atínla kpódó atínla kpó bǐ é kpódó nùjlɛ́kpo e nɔ xlɛ́ atínla kpo atínla kpo bǐ é ɔ́, è na lɛ́ lɛ́ lɛ́ vɔ́ atínla sín atínkwín e ɖò atínkwín ɔ́ mɛ é. kpɔ́ndéwú: atín_wlan \"5\" atínla kpo 6\" atínla kpo 19) -> 19 - 5 - 6 = 8 atínla_wlan\"0 atínla kpo 1 atínla kpo\",3) -> 3 - 0 - 1 = 2 atínla_wlan\"2 atínla kpo 3 atínla kpo\",100) -> 100 - 2 - 3 = 95 atínla_wlan\"100 atínla kpo 120) \",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"Ée è na wlan nǔ e nɔ xlɛ́ ɖɔ atín ɖé sín ala ɖé wɛ bɔ nùjlɛ́n e nyí nǔmasɔgbe lɛ é ɖò atín ɔ́ mɛ ɔ́, azɔ̌ towe wɛ nyí ɖɔ a na yí nùjlɛ́n lɛ́ɛ ɖokpó bo na lɛ́ wá. Nǔjlɛ́n e è yí ɔ́ ɖó na nyí nùjlɛ́n e ɖó akwɛ́ e nyí nǔmasɔgbe é kpɛví bǐ é. Nú è mɔ nùjlɛ́n gègě bɔ akwɛ́ e nyí nǔmasɔgbe é ɖokpó ɔ́, è na lɛ́ wá nú nùjlɛ́n e ɖó ayixwɛ kpɛví bǐ é. Nǔjlɛ́n e è yí ɔ́ ɖó na lɛ́ wá ɖò nùjlɛ́n lɛ́ mɛ, [smallest_value, its index] . Nú akwɛ́ e nyí nǔmasɔgbe lɛ́ɛ ɖě ma ɖò atín ɔ mɛ ǎ alǒ nùjlɛ́n e è ná lɛ́ wá ɔ́ vɔ́, è na lɛ́ wá []. Kpɔ́n 1: Nǔjlɛ́n: [4,2,3] Nǔjlɛ́n: [2, 1] Nǔjlɛ́n: 2 ɖó ayixwɛ kpɛví bǐ é, bɔ ayixwɛ kpɛví bǐ ɔ́ ɖó ayixwɛ kpɛví bǐ é, bɔ ayixwɛ kpɛví bǐ ɔ́ ɖó ayixwɛ kpɛví bǐ é. Kpɔ́n 2: Nǔjlɛ́n: [1,2,2,2,2,2,3] Nǔjlɛ́n: [1,2,2,3] Nǔjlɛ́n: [1,2,2,3] Nǔjlɛ́n: [2,3] Nǔjlɛ́n: 2 nǔmasɔgbe lɛ́n ɔ́n ɔ́ ɖó na lɛ́ ayixwɛ bǐ ɔ́ kpɛví bǐ, bɔ ayixwɛ bǐ na lɛ́ nǔmasɔgbe ɔ́.\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''è na w'azɔ̌ nú nùjlɛ́kpá e nyí nùjlɛ́kpá ɖagbe lɛ́ɛ é. Na w'azɔ̌kpá e nyí nùjlɛ́kpá ɖaxó hú zéro é, bɔ é ɖó jijɔ e nɔ́ nyí nùjlɛ́kpá ɔ́ ɖésú tɔn é. Nú è ma ɖó jijɔ mɔ̌hunkɔtɔn ǎ ɔ́, na w'azɔ̌kpá -1.'''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''nùxwlé lɛ́ɛ e è ná ɖó lɛ́ɛ ɔ́, è nɔ sɔ́ nùxwlé lɛ́ɛ dó tito e má nyí tò yetɔn ǎ é mɛ.'''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''Ðàçâèòèå ïîëîâèíû 3 ñòîðîí òðåõ êîíöîâ òðåõçàêîííîãî áëîêà. Ðàñõîäèòå ïðèáëèçêó òðåõçàêîííîãî áëîêà ê 2 çíà÷åíèÿì ïîëîâèíû, åñëè òðè ñòîðîíà ñîñòàâëÿþò âåðîÿòíûé òðåõçàêîí. Âîò óæå ïðèáëèçêó -1 Òðè ñòîðîíà ñîñòàâëÿþò âåðîÿòíûé òðåõçàêîí, åñëè ñóìà ëþáûõ äâóõ ñòîðîí áîëüøå òðåòüåé ñòîðîíû. Ïðèìåð: triangle_area(3, 4, 5) == 6.00 triangle_area(1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''Ðèñóéò ôóíêöèþ, êîòîðàÿ âîçâðàùàåò True, åñëè ôóíêöèÿ q áóäåò ëåæàòü, è False, åñëè íå. Ôóíêöèÿ q áóäåò ëåæàòü, åñëè îíà áóäåò óñòàíîâëåíà (è ýòî ïîäðîáíûé ñïèñîê) è ñóììà åå ýëåìåíòîâ áóäåò ìåíüøå èëè ðàâíà ìàêñèìàëüíîé ìàêñèìàëüíîé ñóììå w. Ïðèìåð: will_it_fly([1, 2], 5) â -> False # 1+2 ìåíüøå ìàêñèìàëüíîé ìàêñèìàëüíîé ñóììû, à åå óñòàíîâëåíèå. will_it_fly([3, 2, 3], 1) â -> False # îíà áóäåò óñòàíîâëåíà, à 3+2+3 áîëüøå ìàêñèìàëüíîé ñóììû, à åå ñóìà âåññèìàëüíî '''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"ěe è na w'azɔ̌ nú nùxwlé lɛ́ɛ tɔn ɔ, kpɔ́n nùxwlé lɛ́ɛ e è ɖó na ɖyɔ́ nú è na bló bɔ nùxwlé ɔ na nyí palindromic é. Nǔxwlé palindromic ɔ wɛ nyí nùxwlé e è nɔ xà gbɔn ɖokpo ɔ ɖò gudo kpo nukɔn kpo é. Ðò huzuhuzu ɖokpo mɛ ɔ, a sixu ɖyɔ́ nǔxwlé ɖokpo dó nǔxwlé ɖevo ɖebǔ mɛ. Cɔ́dó kpɔ́n: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''Ðèñóéò ôóíêöèþ, êîòîðàÿ ïðèíèìàåò äâà ñïèñêà ñåðèé è ïðèâîäèò ñïèñîê, ó êîòîðîãî âñå ñåðèè ñåðèé èìåþò ñîâîêóïíûé ñðîê ñåðèé íèæå, ÷åì ó äðóãîé ñïèñêè. Åñëè ó äâóõ ñïèñîê åñòü òàêîé æå ñðîê ñåðèé, ïðèâîäèò ïåðâûé ñïèñîê. Ïðèìåðû total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4', ['1', ['2', '3', '4', '5', [']) â -> '4''''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Ðèñóéò ôóíêöèþ, êîòîðàÿ âîçâðàùàåò ïðàâèëüíî, åñëè óêàçàííûé íîìåð ÿâëÿåòñÿ ðàñïðîñòðàíåíèåì 3 ïåðâûõ íîìåðîâ, à âîò èíòåðåñíî.\"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"azɔ towe wɛ nyí ɖɔ a na wlan azɔ̀ e na lɛ́ lɛ́ wá nú nùjlɛ́kpo x nyí nùjlɛ́kpo kpò nú n bɔ é na lɛ́ wá nú nǔmaɖinǔ ɖò ninɔmɛ ɖevo lɛ mɛ é. x nyí nǔmaɖinǔ kpò nú n nú n**int=x Ði kpɔ́ndéwú ɔ: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''Ðèñóéò ôóíêöèþ, êîòîðàÿ ïðèíèìàåò ïîëíûé àêòåð a è ïðèñóùàåò True, åñëè ýòî ïîëíîöåííûé àêòåð ÿâëÿåòñÿ êîýôôèöèåíòîì íåêîòîðîãî ïîëíîãî áàëëà.'''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"È byɔ mi ɖɔ mi ni wlan azɔ̌ e nɔ yí xixazadecimalu nùxwásá ɖé dó wuntun ɖé mɛ bo nɔ xa xixazadecimalu nùxwásá e nyí nùjlɛ́jlɛ́jlɛ́ (númɛ̀ nùjlɛ́jlɛ́, alǒ nùjlɛ́jlɛ́jlɛ́jlɛ́, wɛ nyí nùjlɛ́jlɛ́ nùxwásá e hú 1 bɔ é nyí nùjlɛ́jlɛ́jlɛ́ nùxwásá wè e ɖò kpɛví hú é tɔn ǎ é) é. Xixazadecimalu nùxwásá lɛ́ɛ wɛ nyí 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Númɛ́nú xixazadecimalu lɛ́ɛ wɛ nyí 2, 3, 5, 7, 11, 13, 17,... É ɖò mɔ̌ có, mi ɖó na kpɔ́n ɖɔ nùjlɛ́jlɛ́jlɛ́ nùxwásá elɔ lɛ́ɛ tɔn ɖě kún ɖò wuntun ɖé mɛ ó: 2, 3, 5, 7, 7, B (=xixazadecimalu 11), D (=xixazadecimalu 13) : mi sixu ɖɔ nǔ e è byɔ ɔ́ nyí nùjlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́ e ɖò nǔ è ma ɖó ǎ é alǒ nùjlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́ lɛ́ lɛ́ nyí nùjlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"è na na mi nùxwásá ɖò wuntun wǒ-ví ɔ́ mɛ̀ bɔ azɔ̌ mitɔn wɛ nyí ɖɔ mi na yí dó wuntun wèví ɔ́ mɛ̀. azɔ̀ ɔ́ ɖó na lɛ́ lɛ́ wá nú wuntun ɖokpó, bɔ wuntun ɖokpo ɖokpo nɔ́ xlɛ́ wuntun wèví ɔ́. wuntun ɖokpo ɖokpo ɖò wuntun ɔ́ mɛ ɔ́ na nyí '0' alǒ '1'. è na lɛ́ lɛ́ lɛ́ wá nú wuntun wèví 'db' ɖò wuntun ɔ́ sín bɛ́mɛ kpo fó kpo. wuntun wèví lɛ́ lɛ́ lɛ́ ɖò finɛ bo na d'alɔ mi ɖò wuntun ɔ́ mɛ̀. kpɔ́ndéwú: decimal_to_binary ((15) # lɛ́ lɛ́ wá nú \"db1111db\" decimal_to_binary32) # lɛ́ lɛ́ wá nú \"db100000db\"\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"È na we wuntun s. azɔ̌ towe wɛ nyí ɖɔ a na kpɔ́n ɖɔ wuntun ɔ nyɔ́ à jí ǎ. Wuntun ɔ nyɔ́ nú é ɖò hweɖelɛnu 3 bɔ wuntun 3 e ɖò wuntun ɔ mɛ lɛ́ɛ bǐ nɔ gbɔn vo. Cɔ́ xlɛ́: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"azɔmε gudo tɔn ɔ wɛ bɔ mɛsi ɔ ɖo na na nu azɔwanú lɛ. mɛsi ɔ ɖo na bló azɔwanú tɔn e nɔ na nu azɔwanú lɛ é wɛ. tagba ɖokpo ɔ wɛ nyí ɖɔ é bú wuntun e é nɔ dó na nu azɔwanú lɛ é. é na we azɔwanú lɛ tɔn lɛ sín wuntun bo na wlan azɔwanú e nɔ na nu azɔwanú lɛ tɔn lɛ é gbɔn wuntun elɔ mɛ: azɔwanú lɛ tɔn 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"Wlan azɔ̀ e nɔ yí nùxwlé ɖé bó nɔ lɛ́ lɛ́ wá nú True nú nùxwlé ɔ nyí nùjlɛ́n ta tɔn ɖé alǒ False nú é ma nyí mɔ̌ ǎ ɔ  kpɔ́ndéwú prime_length{\\\\displaystyle prime_length{\\\\displaystyle prime_length{\\\\displaystyle prime_length{\\\\displaystyle prime_length{\\\\displaystyle prime_length{\\\\displaystyle prime_length{\\\\displaystyle prime_length{\\\\displaystyle prime_length{\\\\displaystyle prime_length{\\\\displaystyle prime_length{\\\\displaystyle prime_length{\\\\displaystyle prime_length{\\\\displaystyle prime_length{\\\\math{{{{\\\\math{{{{\\\\math{{p}}}}}}}}}}\"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"Ɖó è na w'azɔnkpɔnkpɔn ɖagbe ɖagbe n ɔ, na lɛ́ yí nùjlɛ́n nùjlɛ́n ɖagbe e nɔ́ jɛ̀ alǒ nɔ fó ɖò 1.\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"nùxwlé ɖagbe ɖé N ɔ, na lɛ́ yí nùxwlé tɔn lɛ́ɛ sín nùxwlé ɔ́ dó nùxwlé wè jí. kpɔ́ndéwú nú N = 1000 ɔ, nùxwlé lɛ́ɛ ná nyí 1 bɔ nǔ è na tɔ́n ɔ́ ná nyí \"1\". nú N = 150 ɔ́, nùxwlé lɛ́ɛ ná nyí 6 bɔ nǔ è na tɔ́n ɔ́ ná nyí \"110\". nú N = 147 ɔ́, nùxwlé lɛ́ɛ ná nyí 12 bɔ nǔ e è na tɔ́n ɔ́ ná nyí \"1100\". nùxwlé lɛ́ɛ: @N nùxwlé lɛ́ɛ: 0 â‰¤ N â‰¤ 10000. nǔ è na tɔ́n ɔ́: nùxwlé wè jí ɔ́ sín nùxwlé \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"E na bo na mɔ nùxwlé lɛ e nyí nùɖé ǎ lɛ é ɔ, a na lɛ́ kplé nùxwlé lɛ e nyí nùxwlé lɛ é. Kpɔ́ndéwú: lɛ́ kplé ([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"Wlǎn azɔ̀ e nɔ yí wèmá ɖé bó nɔ lɛ́ lɛ́ yí gbè nú wèmá ɔ́ sín lilɛdogbeɖevomɛ é. Wemá lilɛdogbeɖevomɛ ɔ́ wɛ nyí wèmá e mɛ è nɔ sɔ́ xókwín lɛ́ɛ bǐ (e è nɔ klán ɖó tɛnkpɔnmɛ jí) ɖó wèmá yɔyɔ́ ɖé jí, bɔ è nɔ sɔ́ xókwín lɛ́ɛ bǐ ɖó tito jí ɖò ali jí ɖò nǔ e è nɔ ylɔ́ ɖɔ ascii é jí. Akpá: A ɖó na hɛn xókwín lɛ́ɛ kpo ali lɛ́ɛ kpo ɖó tito jí ɖò nǔ e è nɔ ylɔ́ ɖɔ ascii é mɛ. Nǔɖexlɛ́mɛ: anti_shuffle ((('Hi') lɛ́ lɛ́ yí gbè nú 'Hi' anti_shuffle ((('hello') lɛ́ yí gbè nú 'ehllo' anti_shuffle (('Hello World!!!') lɛ́ yí gbè nú 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"È na wèmá 2 mɛ̀si tɔn, ɖi nùjlɛ́jlɛ́ e è sɔ́ dó mɛ̀, bɔ é cí mɛ́tli ɖɔhun, amɔ̌, é cí mɛ́tli ɖɔhun ǎ, xò lɛ́ɛ bǐ ɔ́, è sixu ɖó nùjlɛ́jlɛ́ kɔ́n vovo. Nú è na wèmá lst, kpódó nùjlɛ́jlɛ́ x kpán ɔ́, è na mɔ nùjlɛ́jlɛ́ x ɖò nùjlɛ́jlɛ́ ɔ́ mɛ, bó na lɛ́ wá lɛ́ wá xò lɛ́ɛ bǐ ɔ́, è na lɛ́ wá lɛ́ wá lɛ́ wá lɛ́ wá lɛ́ wá lɛ́ lɛ, [(x1, y1), (x2, y2) ...] bɔ nǔjlɛ́jlɛ́ lɛ bǐ ɔ́ na nyí nǔjlɛ́jlɛ́ - (wèmá, kɔ́n), bɔ è na bɛ́ dó 0. Nɔ sɔ́ nǔjlɛ́jlɛ́ lɛ dó lìn lɛ jí ɖò tito jí. Lɛ́ kɔ́ nɔ sɔ́ tò nǔjlɛ́jlɛ́ lɛ́ lɛ́ lɛ́ lɛ́ ɖò tito jí ɖò tito jí ɖò tito jí. Kpɔ́n: get_row [1,2,3,4,5,6], [1,2,3,4,1,1,3,4,1,6], [1,2,2,3,4,1,1,2,3,4,5,1], 1) ===[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,0,2,2,5,5,5,5,5,5,5,5,5,0,2,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,2,2,2,2,2,2,3]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"Ðàçðàáîòêà áëîêà íåïðåðûâíûõ ïîëîâûõ íîìåðîâ, âîçâðàùåíèå êîíòðîëÿ çàäàííîãî áëîêà ïîñëå ñôîðìèðîâàíèÿ, âû ñôîðìèðîâàíèå çàäàííîãî áëîêà â âîññòàíîâèòåëüíîì ïîðÿäêå, åñëè ñóììà ((ïåðâûé èíäåêñíûé öåíòð, ïîñëåäíèé èíäåêñíûé öåíòð) ÿðêèé, èëè ñôîðìèðîâàíèå â ñíèæàþùåì ïîðÿäêå, åñëè ñóììà ((ïåðâûé èíäåêñíûé öåíòð, ïîñëåäíèé èíäåêñíûé öåíòð) ÷åòêèé.\"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"blǒ azɔ̀ encrypt ɖé bɔ é nɔ sɔ́ wèmá wèmá ɖé dó w'azɔnmɛ jí bó nɔ́ lɛ́ yí wèmá wèmá ɔ́ tɔn dó. Wèmá ɔ́ ɖó ná lɛ́ yí dó lìn jí bɔ wèmá lɛ́ɛ nɔ́ jɛ wè jí dó tɛn wè jí. Cɔ́n: encrypt (('hi') nɔ lɛ́ yí wèmá 'lm' encrypt (('asdfghjkl') nɔ lɛ́ yí wèmá 'ewhjklnop' encrypt (('gf') nɔ lɛ́ yí wèmá 'kj' encrypt (('et') nɔ lɛ́ yí wèmá 'ix'\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"è na w'azɔ̀ nùɖé lɛ́ɛ tɔn. Wlan azɔ̀ next_smallest (() e na lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ\"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"È na sɔ́ xókwin lɛ́ɛ dó nùɖé mɛ, bɔ azɔ̌ e a na wa é wɛ nyí ɖɔ a na xa mɛ e sín xó è ɖɔ é. Xomɛsin wɛ nyí xókwin e nɔ bɛ́ xókwin \"I\" ɔ. Xomɛsin lɛ́ɛ nɔ́ ɖó dogbó nú xókwin '.', '?' alǒ '!'. Ði kpɔ́ndéwú ɔ́: >>> is_bored ((\"Hello world\") 0 >>> is_bored ((\"Sky is blue. Sun is shining. I love this weather\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''Ðåøàåò ñðàâíèòü ñ ïðàâèëüíîé, åñëè îäèí èç íîìåðîâ ðàâåí ñóììå äðóãèõ 2 è âñå íîìåðû ÿâëÿþòñÿ ïîëíûìè. Ðåøàåò ñðàâíèòü ñ ïðàâèëüíîé â ëþáîì èíòåðâüþ. Ðåøàåò ñðàâíèòü ñ ïðàâèëüíîé â ëþáîì èíòåðâüþ.'''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"Wlε azɔ e nɔ sɔ́ wɛn ɖé, bo nɔ wlan ɖò mɔ̆ b'ɛ nɔ ɖyɔ́ wεn e ɖò wɛn ɔ mɛ lɛ bǐ sín wεn e ɖò wεn ɔ mɛ lɛ bǐ ɖó wεn e nɔ tɔ́n ɖò wεn e ɖò wεn ɔ nukɔn nú wεn ɔ ɖò wεn e ɖò wεn ɔ mɛ lɛ é mɛ é. Wlεn e wεn lɛ kɛɖɛ wɛ è na sɔ́ dó wεn ɔ mɛ. Kpɔ́ndéwú: >>> wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn wεn w w wεn w w wεn w w w w w w w w w w w w w w w w w w w w w w w\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"è na w'azɔ̌ nú nùjlɛ́n ɔ́ lɛ́ɛ. A ɖó ná mɔ nùjlɛ́n tají e hú bǐ é, bo na lɛ́ yí nùjlɛ́n tají e ɖò nùjlɛ́n ɔ́ mɛ lɛ́ɛ sín xwi. Kpɔ́ndéwú: Nú lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ɔ́, è ɖó ná mɔ 10 Nú lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] ɔ́, è ɖó ná mɔ 25 Nú lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ɔ́, è ɖó ná mɔ 13 Nú lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ɔ́, è ɖó ná mɔ 11 Nú lst = [0,81,12,31,21] ɔ́, è ɖó ná mɔ 3 Nú lst = [1,8,2,1,7] ɔ́, è ɖó ná mɔ 7\"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"é ná lɛ́ wá nyí True nú nǔ e è wlan dó wuntun lɛ́ɛ bǐ ɔ́ nyí wuntun lɛ́ɛ ɖò wema kpɛví lɛ́ɛ mɛ, alǒ nǔ e è wlan dó wuntun lɛ́ɛ bǐ ɔ́ nyí wuntun lɛ́ɛ ɖò wema ɖaxó lɛ́ɛ mɛ, é má nyí mɔ̌ ǎ ɔ́, é ná lɛ́ wá nyí False. Function should return False is the given dictionary is empty. Kpɔ́ndéwú: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) should return True. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False. check_dict_case{\"NC:\"STATE\", \"ZIP:\"12345\"}) should return True.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"Zɔ̀ nùɖé bó ná yí nùɖé lɛ́ɛ bó ná lɛ́ yí nùɖé lɛ́ɛ sín nùɖé lɛ́ɛ. Nǎ kpɔ́n nǔ e nyí nùɖé lɛ́ɛ é.\"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"Zě nùjlɛ́n wè bó ná dó mɔ nǔ e è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é sín nǔ è nɔ zán nú nùjlɛ́n wè lɛ é\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"Ɖɔ xwɛ s ɔ, kpɔ́n nùxwásá xókwín ɖaxó lɛ tɔn ɖò nǔxixa lɛ mɛ. e kpɔ́n: count_upper (('aBCdEf') nɔ lɛ́ kɔ sín 1 count_upper (('abcdefg') nɔ lɛ́ kɔ sín 0 count_upper (('dBBE') nɔ lɛ́ kɔ sín 0 \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''Ðåøàþùèé ôóíêöèþ, êîòîðàÿ ïðèíèìàåò çíà÷åíèå (êîíòðîëü), ïðåäñòàâëÿþùåå ðèñ è ïðîäàåò áëèæíèé ê íåìó ÷èñëî. Åñëè ÷èñëî îáúåäèíåíî ó äâóõ ïîëîâûõ çíà÷åíèé, îáðàòèòå åãî íà 0 (ñì. ïðèìåð >>> closest_integer (((\"10\") 10 >>> closest_integer (((\"15.3\") 15 Çíà÷åíèå: Îáðàòèòå íà 0 (ñì. ïðèìåð) çíà÷åíèå íà 0 (ñì. ïðèìåð) çíà÷èò, ÷òî åñëè óêàçàííûé ÷èñëî îáúåäèíåíî ó äâóõ ïîëîâûõ çíà÷åíèé, òî èìåííî îáúåäèíåííûé ê íåìó ÷èñëî íà -15.'''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"é ná nyí nùxwlé ɖagbe ɖé ɔ́, è ɖó ná bló awǐnnyakanmɛ sín xwɛ n. Atínkwín n wɛ ɖò xwɛ nukɔntɔn ɔ́ mɛ. Atínkwín e ɖò xwɛ e bɔ d'ewu é sín nùxwlé ɔ́ wɛ nyí: - nùxwlé e bɔ d'ewu é nyí nùxwlé e bɔ d'ewu é ǎ. - nùxwlé e bɔ d'ewu é nyí nùxwlé e bɔ d'ewu é ǎ.\"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"è na sɔ́ xókwín ɖé lɛ́ɛ dó wlan xókwín ɔ́ ná bɔ è na sɔ́ xwɛ́ dó ɖó vo nú xókwín ɔ́, bɔ è na sɔ́ xókwín ɔ́ ɖó vo nú xókwín ɔ́, bɔ è na sɔ́ xókwín ɔ́ ɖó vo nú xókwín ɔ́, bɔ è na sɔ́ xókwín ɔ́ ɖó vo nú xókwín ɔ́, bɔ è na sɔ́ xókwín ɔ́ ɖó vo nú xókwín ɔ́.\"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"nùxwásá wè wɛ nyí x kpódó y kpó bɔ é nɔ́ lɛ́ yí nùxwásá e nyí nùxwásá ɖaxó ɖò fí e è nɔ ylɔ́ ɖɔ [x, y] é. Nú nùxwásá mɔ̌hunkɔtɔn ma ɖò fí ǎ ɔ, nùxwásá ɔ na lɛ́ lɛ́ yí -1.\"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"è na na we nùxwɛ́ e nyí nùxwɛ́ ɖagbe lɛ́ɛ n kpo m kpo, bɔ azɔ̌ towe wɛ nyí ɖɔ a na ɖó nùxwɛ́ e nyí nùxwɛ́ e nyí nùxwɛ́ e nyí nùxwɛ́ e nɔ jɛ sín n jí jɛ m jí (kɔn n kpo m kpo ɖ'é mɛ) lɛ́ɛ sín avεjε. Nɔ yí xósin ɔ dó nùxwɛ́ e ɖò sɛkpɔ́ we é jí bo yí dó nùxwɛ́ wexwɛ́ jí. Nú n hú m ɔ, lɛ́ kɔ sín -1.\"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"nùxwlé lɛ́ɛ e nyí nǔ ɖagbe lɛ́ɛ é x. lɛ́ vɔ́ nǔ e nyí nǔ ɖagbe lɛ́ɛ bǐ sín nùxwlé e ɖó nùxwlé ɖé ǎ é. Akpá: È ɖó na lɛ́ vɔ́ nǔ lɛ́ɛ ɖó nùxwlé ɖé jí. Cì: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"Ðàçðàáîòàííûé áëîê ïîëîâûõ ÷èñëîâ, ñôîðìèðîâàòü ïîëîâûå ÷èñëû, êîòîðûå íàõîäÿòñÿ ìåæäó 1 è 9 âêëþ÷èòåëüíî, ïðåâðàùàòü â ðåçóëüòàòå è çàìåíèòü êàæäóþ íîìåðó ñâîèì ñîîòâåòñòâóþùèì èìåíåì èç \"Îäèí\", \"Äâå\", \"Òðè\", \"Òðè\", \"Ëåòî\", \"Ëåòî\", \"Ëåòî\", \"Ëåòî\". Ïî ïðèìåðó: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> ñôîðìèðîâàòü arr -> [1, 1, 2, 3, 4, 5, 8] -> ñôîðìèðîâàòü arr -> [8, 5, 4, 3, 2, 1, 1] return [\"Èñòèííûé\", \"Ëåòî\", \"Ëåòî\", \"Ëåòî\", \"Ëåòî\", \"Ëåòî\", \"Ëåòî\", \"Ëåòî\", \"Ëåòî\", \"Ëåòî\"] Åñëè áëîê èñêè÷åí, ñôèêà âîçâà: arr = [] return [] []\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"Ðåàëèçèðîâàòü ôóíêöèþ f, êîòîðàÿ ïðèíèìàåò n êàê ïðèìåð, è ïðèâîäèò ñïèñîê ñóììû n, òàêèì, ÷òî çíà÷åíèå ýëåìåíòà íà íèæíåé ïëîñêîñòè i ÿâëÿåòñÿ ôóíêöèîíàëüíûì íèæíåé ïëîñêîñòè i, åñëè íèæíèé íèæíèé, èëè ñóììîé ÷èñëîâ ó 1 äî íèæíåé ïëîñêîñòè i. i íà÷èíàåòñÿ ó 1. ôóíêöèîíàëüíûé íèæíèé ýòî ïðî÷èòàíèå ÷èñëîâ ó 1 äî íèæíåé ïëîñêîñòè (1 * 2 * ... * i).\"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"¢ãéá Ýíá ðñïóùðéêü óýíïëï n, ðáñáêïëïõèþíôáò Ýíá tuple ðïõ Ý÷åé ôïí åõêáéñßá ôùí ðáñáðÜíù êáé ôùí ðáñáðÜíù óýíïëùí ðïõ âñßóêïíôáé óôçí ðåñéï÷Þ ((1, n), êáèþò êáé óôïí åíéó÷õôÞ.\"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"Ðèñóéòå ôóíêöèþ count_nums êîòîðàÿ âçÿëà áëîê ïîëîâûõ ÷èñëîâ è ïðèâîäèò ÷èñëî ýëåìåíòîâ, èìåþùèõ ñóììó çíàêîâ > 0. Åñëè ÷èñëî èíòåðåñíîå, òî ïåðâûé çàïèñàííûé çíàê áóäåò èíòåðåñíûì: ïðèìåðîì -123 èìååò çàïèñàííûå çíàêè -1, 2, è 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums ([(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"E ɖo na mɔ nuɖeɖe bɔ e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe e nɔ nyi nuɖe nɔ nyi nuɖe e nɔ nyi nuɖe nɔ nyi nuɖe e nɔ nyi nuɖe nɔ nyi nuɖe e nɔ nyi nuɖe nɔ nyi nuɖe nɔ nyi nuɖe nɔ nyi nuɖe e nɔ nyi nuɖe nɔ nyi nuɖe nɔ nyi nuɖe nɔ nyi nuɖe nɔ nyi nuɖe nɔ nyi nuɖe nɔ nyi nuɖe nɔ nyi nuɖe\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"Ðéóôåýù üôé ïé ðñÜîåéò óôïí êáôáóêåõáóôÞ ôïõ LST1 åßíáé óáí ðñÜîåéò óôïí êáôáóêåõáóôÞ ôïõ LST1 êáé óôïí êáôáóêåõáóôÞ ôïõ LST2 óáí ðñÜîåéò óôïí êáôáóêåõáóôÞ ôïõ LST1 óáí ðñÜîåéò óôïí êáôáóêåõáóôÞ ôïõ LST2.\"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"E ɖo xɛ e nɔ ɖe wuntun e nɔ ɖe wuntun e ɖo wuntun e ɖo wuntun ɔ mɛ lɛ é xlɛ́ wɛ ɔ, wuntun e nɔ ɖe wuntun e mɛ wuntun ɔ nɔ lɛ́ jɛ kpɔ́n bɔ è nɔ lɛ́ wuntun ɔ ɔ sín nùxwásùn ɔ́. Nú wuntun lɛ́ɛ ɖě nɔ lɛ́ wuntun ɔ́, wuntun lɛ́ɛ bǐ wɛ è nɔ lɛ́ wuntun ɔ́.\"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"azɔ̌ è na mǐ wèmá wè s kpo c kpo, a ɖó na ɖè wèmá lɛ́ɛ bǐ ɖò s mɛ e cí wèmá c ɖé lɛ́ɛ ɖɔhun é, bo kpɔ́n ɖɔ wèmá e è mɔ é nyí palindrome à. wèmá è nɔ ylɔ ɖɔ palindrome enyi é nɔ mɔ nǔ ɖokpo ɔ ɖò gudo kpo nukɔn kpo. A ɖó na lɛ́ kɔ nú wèmá e è mɔ é kpo nǔ e nyí nǔ è mɔ é kpo. kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"E na mɔ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛxwɛ e mɛ xwɛxwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛ e mɛ xwɛxwɛ e mɛ xwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛ e mɛ xwɛxwɛ e mɛ xwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛxwɛ e mɛ xwɛ e mɛ xwɛ e mɛxwɛxwɛ e\"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"Ɖɔ nùxwléma nùxwléma nùxwléma tɔn lɛ́ɛ sín nùxwléma ɖé ɔ, kpɔ́n nùxwléma nú nùxwléma e nyí nùxwléma nú nùxwléma ɖé ǎ lɛ́ɛ sín nùxwléma kpɛví bǐ é.  Nǔ kpɔ́n dó minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"È na mi kɔ́nkpó è è ɖò tɔ ɔ́ mɛ é. Gǎn ɖokpo ɖokpo nɔ́ xlɛ́ tɔ ɖokpo, bɔ mɛ ɖokpó ɖokpó nɔ́ xlɛ́ tɔ ɖokpo. Gǎn ɖokpo ɖokpo ɖó tɔjihun e è nɔ dó tɔ ɔ́ mɛ é, bɔ tɔjihun lɛ́ɛ bǐ sín nǔjlɛ́jlɛ́ nɔ́ sɔgbe. Azɔ̌ towe wɛ nyí ɖɔ a na zán tɔjihun lɛ́ɛ bó ná dó tɔjihun lɛ́ɛ. Nɔ sɔ́ azɔn e a na dó tɔjihun lɛ́ɛ ná é. Kpɔ́n 1: Gǎn: Gǎn: Gǎn: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Gǎn: 6 Gǎn: Gǎn: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 Gǎn: 5 Gǎn: Gǎn: [[0,0,0], [0,0,0]] bucket_capacity: 5 Gǎn: 0 * * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: 1 * Gǎn: * Gǎn: 1 * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn: * Gǎn\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"Ðåçóëüòàòû ðåàëèçàöèè óðîâíÿ óäåëüíûõ ÷èñëîâûõ èíòåðåñîâ â ðåçóëüòàòå óðîâíÿ ÷èñëîâûõ èíòåðåñîâ â ðåçóëüòàòå óäåëüíûõ èíòåðåñîâ â ðåçóëüòàòå óäåëüíûõ èíòåðåñîâ â ðåçóëüòàòå óäåëüíûõ èíòåðåñîâ â ðåçóëüòàòå óäåëüíûõ èíòåðåñîâ â ðåçóëüòàòå óäåëüíûõ èíòåðåñîâ â ðåçóëüòàòå óäåëüíûõ èíòåðåñîâ â ðåçóëüòàòå óäåëüíûõ èíòåðåñîâ â ðåçóëüòàòå óäåëüíûõ èíòåðåñîâ â ðåçóëüòàòå óäåëüíûõ èíòåðåñîâ â ðåçóëüòàòå óäåëüíûõ èíòåðåñîâ\"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"拼音版 林前3:1 Wǒmen zhǔ Yēhéhuá de shén, jiù shì Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén, Yēhéhuá de shén.\"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"è na wlan xó ɖé nú we. azɔ̌ towe wɛ nyí ɖɔ a na mɔ xókwin e sɛkpɔ́ we ɖò xókwin ɔ sín akpáxwé ɖisí ɔ́ jí é (wɔnúmɛ è nɔ zán dó wlan xókwin lɛ́ɛ é). xókwin e ɖò nukɔn kpo gudo kpo é nɔ́ nɔ kpɔ́n ǎ. lɛ́ kɔ xwɛ̀ nùɖé ǎ nú a ma mɔ xókwin e sɔgbe xá nǔ e è ɖɔ ɖò aga ɔ jí é ɖě ǎ. a sixu ɖɔ ɖɔ xókwin e è wlan ɔ kún ɖó wlan xókwin e nɔ dó wlan xókwin lɛ́ɛ é ó. kpɔ́n kpɔ́n kpɔ́n: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"UULL\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" (((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''È na we wuntun we lɛ, wuntun we lɛ bǐ wɛ nyí wuntun e è nɔ hun lɛ é '(' alǒ wuntun e è nɔ sú lɛ é ') '. Azɔ̌ towe wɛ nyí ɖɔ a na kpɔ́n ɖɔ è na kpéwú bo dó wuntun we lɛ ɖò tito ɖé mɛ, bɔ wuntun e è na mɔ é na nyɔ́ à jí. Wuntun S nɔ nyɔ́ nú wuntun e ɖò S mɛ lɛ é bǐ na sɔgbe. Clɛ́n kpɔ́n: wuntun '((()) ' nyɔ́, wuntun '()) ' ka nyɔ́ ǎ. Bo lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ 'Ɛɛn' nú ali ɖé ɖò finɛ bo na bló wuntun ɖagbe ɖé ɔ, bo lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ 'Ée' nú é ma nyɔ́ ǎ. Kpɔ́n: match_parens[('(() ', ') ']) == 'Ɛɛn' match_parens[(') ', ') ']) == 'Eǒ' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"Ðàçðåøåííûé áëîê arr è ïîëíûé áëîê k, ïðèâîäèò ñôîðìèðîâàííûé ñïèñîê ñ ñêîðîñòüþ k è ìàêñèìàëüíûìè k ÷èñëàìè â arr. Ïðèìåð1: Âõîä: arr = [-3, -4, 5], k = 3 Ïðèìåð: [-4, -3, 5] Ïðèìåð2: Âõîä: arr = [4, -4, 4], k = 2 Ïðèìåð: [4, 4] Ïðèìåð3: Âõîä: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Ïðèìåð: [2] Çíà÷åíèå: 1.\"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"E na mɔ nùxwlé lɛ́ɛ e ma nyí nǔtí ǎ lɛ́ɛ ɔ́, na lɛ́ yí nùxwlé lɛ́ɛ e ɖò tɛn mɛ lɛ́ɛ bǐ sín nǔ e nyí nǔtí ǎ lɛ́ɛ é sín nǔ.\"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"E na bo na w'azɔ̌n e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma e nyí nùxwléma ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ ɔ\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"Ðàçâèòèå ñåðèè ñêîðîñòè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåðèè ñåð\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"A na wlan azɔ̀ e na dó mɔ azǎn è è wlan ɔ́ sín xó ɔ́ bó na lɛ́ sɔ́ True dó wlan é jí, enyi azǎn ɔ́ sɔgbe ɔ́. É nyɔ́ ɔ́, é na lɛ́ sɔ́ False dó wlan é jí, enyi è bló nǔ e bɔ d'ewu lɛ é bǐ ɔ́: 1. Azǎn ɔ́ nyí nǔtí ǎ. 2. Azǎn lɛ́ɛ kún na dín dó azǎn 1 jí ó, alǒ hú azǎn 31 ɖò sun 1,3,5,7,8,10,12 lɛ́ɛ mɛ ó. Azǎn lɛ́ɛ kún na dín dó azǎn 1 jí ó, abǐ hú azǎn 30 ɖò sun 4,6,9,11 lɛ́ɛ mɛ ó. Azǎn lɛ́ɛ kún na dín dó azǎn 1 jí ó, abǐ hú azǎn 29 ɖò sun 2. 3. Sun lɛ́ɛ ɖó na dín dó azǎn 1 jí ó, abǐ hú azǎn 12 ó. Azǎn ɔ́ ɖó na ɖò tito mɛ: mm-dd-yyyy, ɖi: valid_date (ðè) => '03-11-2000') => true_date (ðè) => 'false_date (ðè) => 'false_date (ðè) => 'false_date (ðè) => '06-04-2020' => 'false_date (ðè) => '06/04/04/2020' => 'false'\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''é ná wlan xókwín lɛ́ɛ, é ná lɛ́ wlan xókwín lɛ́ɛ e è má ɖó wuntun lɛ́ɛ jí é, nú wuntun lɛ́ɛ ma ɖò wuntun lɛ́ɛ jí ǎ ɔ, è ɖó na lɛ́ wlan ɖó wuntun lɛ́ɛ jí. ',' nú wuntun lɛ́ɛ ma ɖò wuntun lɛ́ɛ jí ǎ ɔ, è ɖó na lɛ́ wlan wuntun lɛ́ɛ jí, é ná lɛ́ wlan wuntun lɛ́ɛ jí, é ná lɛ́ wlan wuntun lɛ́ɛ jí.'''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''¢âá âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò ëüãùí, âÜóçò, âÜóçò, âÜóçò, âÜóçò, âÜóçò, âüñï, âüñï, âüñï, âüñï, âüñï, âüñï, âüñï, âüñï, âüñï, âüñï, âüñï, âüñï, âüñï, âüñï, âüñï, âüñï, âüñï, âü, âü, âüñï, âüñï, âüñï, âü, âüñï, âü, âüñï, âüñï, âüñï, âü, âüñï, âü, âüñï, âü, âüñï, â'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"È na we tɛnkpɔn we, bɔ tɛnkpɔn ɖokpo ɖokpo nyí nùjlɛ́kpo wè. Cɔ́nkpɔn = (bɛ́, fó) = (1, 2). Nǔjlɛ́kpo we lɛ́ɛ ɖò hunhun, bɔ enɛ sín tinmɛ wɛ nyí ɖɔ tɛnkpɔn ɔ (bɛ́, fó) nɔ lɛ́ ɖó tɛnkpɔn we lɛ́ɛ bǐ. Ɖó tɛnkpɔn ɖokpo ɖokpo ɔ, è nɔ ɖɔ ɖɔ tɛnkpɔn tɔn nɔ lɛ́ ɖó tɛnkpɔn we lɛ́ɛ bǐ. Azɔ̌ towe wɛ nyí ɖɔ a na kpɔ́n ɖɔ tɛnkpɔn we lɛ́ɛ sín akpáxwé e mɛ è nɔ mɔ nǔjlɛ́kpo we lɛ́ɛ ɖè é nyí nùjlɛ́kpo nukɔn nukɔntɔn ɖé à jí. Cɔ́nkpɔn (1, 3), (2, 4) lɛ́ɛ sín akpáxwé e nɔ nyí (2, 3) bɔ akpáxwé e nɔ nyí 1 é nyí nùjlɛ́kpo nukɔn nukɔntɔn ɖé ǎ. Nú tɛnkpɔn ɔ sín akpáxwé ɔ nyí nùjlɛ́kpo nukɔn nukɔntɔn ɖé ɔ, lɛ́ yí gbè ɖɔ \"ƐƐƐƐ\", enyi é ma nyí mɔ ǎ ɔ, lɛ́ yí gbè ɖɔ \"ÈÉ\". [input/output] = (1, 2)\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"è na na mi nùxwléma kpò ɖò nùxwléma lɛ́ɛ mɛ bɔ mi na lɛ́ yí nùxwléma lɛ́ɛ sín nùxwléma e è sɔ́ nùxwléma lɛ́ɛ bǐ sín nùxwléma dó nùxwléma ɔ mɛ bɔ è nɔ ylɔ ɖɔ 1, -1 alǒ 0.\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"É ɖò có, nú è na wlan nùjlɛ́kpo e ɖó xósúsú k (e ma ɖó ná nyí nùjlɛ́kpo e è nɔ mɔ ɖò fí bǐ ǎ é) é, è ka sixu yí nùjlɛ́kpo e è nɔ mɔ ɖò fí bǐ é. Nánɔ nǔjlɛ́kpo e è nɔ mɔ ɖò xósúsú k (e ma ɖó ná nyí nùjlɛ́kpo e è nɔ mɔ ɖò fí bǐ ǎ é) é. Nú è na wlan nùjlɛ́kpo e ɖó xósúsú k (e ɖó xósúsú k) é, è na wlan nùjlɛ́kpo e è nɔ mɔ ɖò xósúsú k (e ma ɖó ná nyí nùjlɛ́kpo e è nɔ mɔ ɖò fí bǐ ǎ é) é, è na wlan nùjlɛ́kpo e è nɔ mɔ ɖò xósúsú k (e è nɔ mɔ ɖò fí bǐ ǎ é) é, è na wlan nùjlɛ́kpo e è nɔ mɔ ɖò xósúsú k (e è nɔ mɔ ɖò fí bǐ ǎ é) é. Nú è na wlan nùjlɛ́kpo e è nɔ mɔ ɖò xósú k (e è nɔ mɔ ɖò xósú k) é) ɔ, è na mɔ nùjlɛ́kpo e è nɔ mɔ ɖò xósú k (e e è nɔ mɔ ɖò xósúsú k) é.\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"Mɛ bǐ nɔ́ tunwun fíbɔnatcí sín nùjlɛ́jlɛ́, nùnywɛ́tɔ́ lɛ́ɛ kplɔ́n nǔ dó jí ɖò xwè kanweko wè gudogudo tɔn lɛ́ɛ mɛ. Amɔ̌, nǔ e mɛ lɛ́ɛ ma tunwun ǎ ɔ́ wɛ nyí nùjlɛ́jlɛ́ Tribonacci tɔn. Nǔjlɛ́jlɛ́ Tribonacci tɔn ɔ́, è nɔ zán nùjlɛ́jlɛ́: tri(1) = 3 tri(n) = 1 + n / 2, nú n nyí nùjlɛ́jlɛ́. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), nú n nyí nùjlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛjlɛ\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"Ɖò nùjlɛ́kpá ɖagbe ɖé n jí ɔ́, lɛ́ yí nùjlɛ́kpá e nyí nùjlɛ́kpá è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e è nɔ nyí nǔ e é nɔ nyí nǔ e é nɔ nyí nǔ e é nɔ nyí nǔ e é nɔ nyí nǔ e é nɔ nyí nǔ e é nɔ nyí nǔ e é nɔ nyí é\"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''Ðåøèòü ôóíêöèþ, êîòîðàÿ ïðèíèìàåò êðîâàâûé êîíòåêñò, èìåþùèé òîëüêî êðóãëûå êðóãè. Ôóíêöèÿ äîëæíà âîçâðàùàòü True, åñëè è åñëè åñòü âåðîÿòíàÿ ïîäðîáíîñòü êðóãîâ, â êîòîðîé ñàìûé êðóã â ïîäðîáíîñòè èìååòñÿ. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]]]][[[[[[]]') â -> False is_nested'[][][]') â -> False is_nested'[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]][[]]') â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"è na w'azɔ̌nxixa ɖé nú we. a ɖó na lɛ́ vɔ́ nùjlɛ́kpo lɛ́ɛ sín nǔ e è sɔ́ dó wezun ɔ́ mɛ é sín nǔ lɛ́ɛ ná, bó ná lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́ lɛ́\"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''Ðɔ azɔ̀ e nɔ lɛ́ lɛ́ wá nú True nú wuntun e ɖò wuntun wuntun ɔ́ mɛ é nyí wuntun alɛ́fébiti tɔn ɖé bo nyí xókwin ɖé sín akpáxwé ǎ é, bo nɔ lɛ́ lɛ́ wá nú False nú é nyí mɔ̌ ǎ é. Akpàkpàkpà: \" xókwin\" nyí wuntun e è klán ɖó tɛnkpɔn jí é ɖé. Kpɔ́ndéwú: check_if_last_char_is_a_letter\" (à) \" apple pie \" (à) \" False check_if_last_char_is_a_letter\" (à) \"apple pi e\" (à) \" True check_if_last_char_is_a_letter\" (à) \"apple pi e\" (à) \" False check_if_last_char_is_a_letter\" (à) \"'''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"Ðåøèòü ôóíêöèþ, êîòîðàÿ âîçâðàùàåò ñàìûé áîëüøîé èíòåðíåò ýëåìåíòà, êîòîðûé íå áîëüøå èëè ðàâåí ñðàçó ïåðåäíåìó ýëåìåíòó. Åñëè òàêîé ýëåìåíò íå èìååòñÿ, âîçâðàùàåò -1.\"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''Ðɔ azɔ̀ e nɔ lɛ́ lɛ́ sín nùxwlé lɛ́ɛ (a, b), fí e 'a' nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùwlé e nyí nùwlé e nyí nùwlé e nyí nùwlé e nyí nùwlé e nyí nùwlé e nyí nùwlé e nyí nùwlé e nyí nùwlé e nyí nùwlé ɔ ɔ ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́n ɔ́'''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"Ðåøàåòñÿ ñîçäàòü ôóíêöèþ, êîòîðàÿ ïðèíèìàåò ïîëîâèíû, ôóíêöèè èëè ñåðèè, ïðåäñòàâëÿþùèå ðåàëüíûå ÷èñëû, è ïðèâîäèò áîëüøóþ èçìåíÿþùóþ â ñâîåé äàííîé ôóíêöèè. Ðàñõîäèò íèêàê íå, åñëè çíà÷åíèÿ ðàâíû. Çíà÷åíèå: Åñëè ðåàëüíûé ÷èñë ïðåäñòàâëÿåòñÿ êàê ñåðèÿ, ñåðèÿ âåðòåëüíîé ÷àñòè ìîæåò áûòü . èëè , ñðàâíèòü_äâà ((1, 2.5) â -> 2.5 ñðàâíèòü_äâà ((1, \"2,3\") â -> \"2,3\" ñðàâíèòü_äâà ((5,1\", \"6\") â -> \"6\" ñðàâíèòü_äâà ((1\", 1) â -> Íèêàê \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Ðèñóíêîâûé íîìåð n èìååò ñóììó 4 ïðàâèëüíûõ ÷àñòíûõ íîìåðà. Ðåçóëüòàò: is_equal_to_sum_even ({4) == False is_equal_to_sum_even ({6) == False is_equal_to_sum_even ({8) == True \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"Brazil_factorial (n) = n! * (n-1)! * (n-2)! * ... * 1! fí e n > 0 Ði kpɔ́ndéwú ɔ: >>> special_factorial (n) 288 Azɔ̀ ɔ na yí nùxwlékplé ɖé dó mɛ bɔ é na lɛ́ lɛ́ kɔ nú nǔxwlékplé bunɔ nùxwlékplé enɛ tɔn. \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_Azɔdo-3ɖé ɔ, sɔ́ xwɛ e ɖò wèmá ɔ mɛ lɛ́ɛ bǐ dó wèmá e ɖò wèmá ɔ mɛ lɛ́ɛ jí, bo nú wèmá ɔ ɖó wèmá e ɖò wèmá ɔ mɛ lɛ́ɛ hú wè ɔ, sɔ́ wèmá e ɖò wèmá ɔ mɛ lɛ́ɛ bǐ dó wèmá e ɖò wèmá ɔ mɛ lɛ́ɛ jí => fix_spaces (exemple) => \"Exemple\" (exemple1) => \"Exemple1\" (exemple2) => \"Exemple2\" (exemple3) => \"Exemple-3\" (exemple3) => \"Exemple-3\" (exemple3) => \"Example-3\" (example3) => \"Example-3\" (example3) => \"Example-3\" (example3) => \"Example-3\" (example3) => \"Example-3\" (example3) => \"Example-3\" (example3)\"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Ðåøèòü ôóíêöèþ, êîòîðàÿ ïðèíèìàåò ñêîðîñòü, ïðåäñòàâëÿþùóþ èìåíà ôàéëà, è âîçâðàùàåò \"ìóæ÷èíó\", åñëè èìåíà ôàéëà ÿâëÿåòñÿ âåðîÿòíûì, à âîò è âîò óæå \"òàêè\". Èìåíà ôàéëà ñ÷èòàåòñÿ âåðîÿòíûì, åñëè èìåíà ôàéëà ñîîòâåòñòâóåò âñåì ïîäðîáíûì óñëîâèÿì: - Íà èìåíó ôàéëà äîëæåí áûòü íå áîëåå òðåõ çíà÷åíèé ('0'-'9') - Èìåíà ôàéëà ñîñòàâëÿåò ñêîðî îäèí êîíöåðò '.' - Ïîäðîñòêîâûé ñêîðîñòîê ïåðåä êîíöåðòîì äîëæåí áûòü íå áåçîïàñíûì, è îí íà÷åðòû äîëæå äîëæíûå áûòü îäèííûìè.\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" Nǔwiwa elɔ na sɔ́ nùxwlé lɛ sín nùxwlé. Nú nùxwlé lɛ́ɛ bǐ ɖò nùxwlé ɔ́ mɛ ɔ́, nùxwlé ɔ na sɔ́ nùxwlé ɔ́ sín nùxwlé ɔ́ dó zɔ́n fí e nùxwlé ɔ́ nyí é, nú nùxwlé ɔ́ nyí 3 sín nǔxwlé ɔ́, é na sɔ́ nùxwlé ɔ dó zɔ́n fí e nùxwlé ɔ nyí é, nú nùxwlé ɔ́ nyí 4 sín nǔxwlé é, é ma nyí 3 sín nǔxwlé ǎ. Nǔwiwa ɔ́ na ɖyɔ nùxwlé lɛ ɖò nùxwlé ɔ́ mɛ nú nùxwlé lɛ́ɛ e nùxwlé lɛ́ nyí 3 alǒ 4 ǎ é. Nǔwiwa ɔ́ na lɛ́ lɛ́ kɔ́ kɔ́ nùxwlé lɛ́ɛ bǐ sín nùxwlé ɔ́. Kpɔ́ndéwú: Nú lst = [1,2,3] ɔ́, è ɖó ná ná nǔxwlé ɔ́ dó 6 Nú lst = [] ɔ́, è ɖó ná ná nǔxwlé ɔ́ dó 0 Nú lst = [-1,-5,-2,-1,-5] ɔ́, è ɖó ná ná ná nǔxwlé ɔ́ dó -126 \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"è na wlan wuntun e nɔ ɖe nuɖevonu ɖé xlɛ́, wuntun ɔ na ɖó xó ɖé lɛ bɔ è na ɖó ganmɛ ɖé lɛ dó ye, bɔ a na lɛ́ wlan wuntun e na ɖó xó lɛ ɖò wuntun ɔ mɛ é, bɔ wuntun ɔ na ɖó nùxwásúnxó lɛ, bɔ wuntun ɔ mɛ xó lɛ tɔn na nɔ ɖò tito ɖokpo ɔ mɛ. kpɔ́ndéwú1: nǔ è na byɔ mɛ é: wuntun = \"wuntun enɛ ɔ nyí nùjiwǔ ɖé\" nǔ è na tɔ́n sín mɛ é: \"e nyí\" kpɔ́ndéwú2: nǔ è na byɔ mɛ é: wuntun = \"nǐ ná yì tɔ́n\" nǔ è na tɔ́n sín mɛ é: \"nǐ ná yì tɔ́n\" nǔ è na tɔ́n sín mɛ é: \"nǐ ná yì tɔ́n\" nǔ e è na ɖó wuntun lɛ é: * 1 <= len(wuntun) <= 100 * wuntun ɔ na ɖó wuntun lɛ kɛɖɛ wɛ \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"azɔ towe wɛ nyí ɖɔ a na bló azɔ̀ e na bló bɔ xógbe x * n na nyí nùɖé bɔ é na nyí nùɖé bɔ é na nyí nùɖé ǎ ɔ é. x kpo n kpo ɔ, nùɖé wɛ ye nɔ ɖè nú nùɖé lɛ, bɔ nǔ e ye nɔ zán é wɛ nyí: <numerator>/<denominator>, bɔ nùɖé lɛ kpo nǔɖókpɔ́ lɛ kpo bǐ nyí nùɖé lɛ. a sixu ɖɔ ɖɔ x kpo n kpo nyí nùɖé lɛ bo ɖó nǔvɔ́ ǎ. simplify \"1/5, \"5/1\") = True simplify \"1/6\", \"2/1\") = False simplify \"7/10\", \"10/2\") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"Ðèñóéò ôóíêöèþ, êîòîðàÿ ñôîðìèðîâàåò çàäàííûé ñïèñîê ïîëîâûõ ÷èñëîâ â ïîâûøàþùåì ïîðÿäêå ïî ñóììó èõ çíàêîâ.\"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"Ðèñóéò ôóíêöèþ, êîòîðàÿ ïðèíèìàåò áëîê íîìåðîâ êàê âõîä è ïðèâîäèò ÷èñëî ýëåìåíòîâ â áëîêå, êîòîðûå áîëüøå 10 è ïåðâûé è ïîñëåäíèé íîìåðû íîìåðà ÿâëÿþòñÿ íåêîòîðûìè (1, 3, 5, 7, 9).\"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"È na mi xwɛ́númɛ e nyí nùxwlé ɖagbe é n. Mi ɖó na bló nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nǔxwlé e nyí nǔxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nùxwlé e nyí nǔxwlé e nyí nǔxwlé e nyí nǔxwlé e nyí nǔxwlé e nyí nǔxwlé é é é.\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''Hɛn ayizεn ɖo sun tɔn mε: ayizεn e ɖo hεn ɔ mε wε ɔ, Mercury, ayizεn e bɔ d'ewu ɔ, Venus, bɔ Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Wε azɔ e nɔ sɔ ayizεn we lε nyikɔ ɖi xεnxεn ɔ planet1 kpo planet2. Azɔ ɔ na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na na'''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Ðɔ azɔ̀ e nɔ yí gbè nú nùjlɛ́jlɛ́ xójlɛ́jlɛ́ lɛ́ɛ tɔn dó nùjlɛ́jlɛ́jlɛ́ jí, nɔ ɖè nùjlɛ́jlɛ́ xójlɛ́jlɛ́ e ɖó wuntun lɛ́ɛ sín nùjlɛ́jlɛ́ jí, bó nɔ lɛ́ lɛ́ lɛ́ vɔ́ nùjlɛ́jlɛ́ e è mɔ bɔ è ɖè é dó tito jí é jí. Nǔjlɛ́jlɛ́jlɛ́ ɔ́ nɔ nyí nùjlɛ́jlɛ́jlɛ́ xójlɛ́jlɛ́ lɛ́ɛ tɔn hwebǐnu, é nɔ nyí nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ lɛ́ɛ tɔn ǎ, é sixu lɛ́ ɖó nùjlɛ́jlɛ́jlɛ́ e è lɛ́ vɔ́ lɛ́ lɛ́ vɔ́ lɛ́ é ǎ. Nǔjlɛ́jlɛ́jlɛ́ ɔ́ ɖó ná nɔ́ jɛ jí gbɔn xókwín ɖokpo ɖokpo tɔn jí, bɔ è ɖó na lɛ́ lɛ́ vɔ́ lɛ́ vɔ́ tò ɔ́ ɖó tito jí gbɔn tito jí. Nú xókwín wè ɖó wuntun ɖokpo ɔ́ jí ɔ́, è ɖó ná lɛ́ vɔ́ wuntun ɔ́ dó aliflɛ́ jí. Azɔ̀jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́jlɛ́ ɔ́ ɖó ná nɔ́ wuntun.\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"Eɖesunɔ tɔn wɛ nyí nùkplɔnmɛ e na lɛ́ lɛ́ lɛ́ kɔ nú x nú n nyí nùjlɛ́kpá ɖé é, bɔ é ka lɛ́ lɛ́ lɛ́ kɔ nú y nú é ma nyí mɔ̌ ǎ é. Kpɔ́ndéwú: nú x_ alǒ_y{7, 34, 12) == 34 nú x_ alǒ_y{15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''nùxwásá lɛ́ɛ sín nùxwásá ɔ́, yí nùxwásá lɛ́ɛ e ɖò nùxwásá ɔ́ mɛ lɛ́ɛ sín kwɛ́ɛ sín nùxwásá. Nú è ma yí nùxwásá e nyí nǔmasɔgbe lɛ́ɛ ǎ lɛ́ɛ ǎ ɔ́, yí nùxwásá lɛ́ɛ. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Nú nùxwásá ɔ́ ɖò nǔmasɔgbe ɔ́, yí 0'''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"un lin ɖɔ mi bǐ nɔ flín nǔ e mɛ nɔ mɔ hwenu e è nɔ mɔ nǔ jɛ nǔ e mɛ lɛ nɔ mɔ ɖó xwè mɔkpan é wu é. nǔ e mɛ nɔ mɔ é kpo nǔ e mɛ nɔ lin é kpo nɔ nyí nǔ ɖagbe ɖé bo nɔ dó jlɛ́. azɔ̌ towe wɛ nyí ɖɔ a na kpɔ́n ɖɔ mɛ ɔ mɔ nǔ jɛ nǔ e mɛ lɛ nɔ mɔ é mɛ ganji à jí. è na we nǔ e mɛ lɛ nɔ mɔ nǔ jɛ nǔ lɛ é sín nǔ lɛ é sín nǔ lɛ é kpo nǔ lɛ é tɔn lɛ é kpo bɔ nǔ lɛ bǐ nɔ ɖó jlɛ̌ ɖokpó ɔ́ jí. nú nǔ lɛ bǐ nɔ mɔ nǔ jɛ nǔ lɛ é ɔ, a na lɛ́ ɖó jlɛ̌ ɖokpó ɔ́ jí bo nɔ ɖɔ nǔ lɛ bǐ nɔ sɔgbe à jí. nú nǔ lɛ bǐ nɔ mɔ nǔ jɛ nǔ lɛ é mɛ ɔ, nǔ lɛ nɔ nyí 0 bɔ nǔ lɛ bǐ nɔ nyí nǔ e mɛ lɛ nɔ mɔ nǔ jɛ é kpo nǔ lɛ é kpo tɔn lɛ é tɔn. kpɔ́ndéwú: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"A na mɔ azɔmɛ ɖé sín nyikɔ (wɔntin) kpo nùjlɛ́n e è nɔ zán dó wlan nǔ lɛ é ɖé kpo. Akɔ́nkpinkpan ɔ́ wɛ nyí: nú CAP nyí wuntun ɖaxó lɛ sín nùjlɛ́n ɖò azɔmɛ ɔ sín nyikɔ mɛ, bɔ SM nyí wuntun kpɛví lɛ sín nùjlɛ́n ɖò azɔmɛ ɔ sín nyikɔ mɛ ɔ, akɔ́nkpinkpan ɔ wɛ nyí nǔ e è nɔ ylɔ ɖɔ CAP - SM é. A na mɔ azɔmɛ e nɔ wlan nǔ lɛ é tɔn e nɔ nyí wuntun kpɛví lɛ é bo na wlan wuntun ɖò tito elɔ mɛ: ClassName.StrongestExtensionName. Enyi azɔmɛ wè alǒ hú mɔ wɛ ɖò wlan mɛ bɔ wuntun lɛ ɖó acɛ ɖokpo ɔ ɔ ɔ, a na sɔ́ ée nɔ jɛ nukɔn ɖò nùjlɛ́n ɔ mɛ é. Ði kpɔ́ndéwú ɔ, nú è na wlan \"Slices\" dó azɔmɛ ɔ mɛ bo lɛ́ wlan nǔ lɛ é: ['SEviviviNGliSCes', 'Cheese', 'StufedFF'] ɔ́, a na lɛ́ ɖó na lɛ́ wlan nǔ lɛ 'Slices.SliviNGli.SEviCli.SEviSliviCli' => 'SliviCliviCliviCli (mymymySliviCliviCSE'mySli) ɔ́ wɛ nyí wlan nǔ e nɔ nyí wlan nǔ lɛ é => 'AA' => 'Class' (Class: strongestExtension = 'Class'StrongestExtension_AA', ['Strongest_Class_Class_Class_Class_Class_AA' => 'Strongest' => 'Class'Strongest'Strongest' (evil'Strongest'Strongest'Class_Class' strongest' = strongest' strongest' strongest' strongest' (example: strongest') 'Class' strongest' strongest' strongest' strongest_Class' strongest' strongest' strongest') 'Class' strong' strongest' strongest' (for example for 'Class' strongest' strongest' class = strongest' strong\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"È na we xógbe we we. A na lɛ́ vɔ́ xógbe True ɔ́ dó nú xógbe wegɔ́ ɔ́ alǒ xógbe tɔn lɛ́ɛ ɖě nyí wuntun ɖò xógbe nukɔntɔn ɔ́ mɛ cycpattern_check{\"abcd\",\"abd\") => False cycpattern_check{\"hello\",\"ell\") => True cycpattern_check{\"whassup\",\"psus\") => False cycpattern_check{\"abab\",\"baa\") => True cycpattern_check{\"efef\",\"eeff\") => False cycpattern_check{\"hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"é ná lɛ́ yí nùjlɛ́jlɛ́ e ɖó nùjlɛ́jlɛ́ e nyí nǔglɔ́ é kpo ée nyí nǔglɔ́ ǎ é kpo é.  kpɔ́ndéwú: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"Ðèñóíîê ïîëíîìî÷íîãî ïîëíîìî÷íîãî ÷èñëà, âûðàáîòàòü åãî ðèìñêèé àíàëîãè÷íûé àíàëîã êàê ñïåêòð, è ïðèãëàøàòü åãî â ìàëåíüêèé áóêâàòåëü.\"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''Ðàçâèòèå ïðàâèëüíîãî ïîëîâîãî ôîíäà ïðè ïðèíÿòèè ó÷åòà ñðåäíåé ïëîùàäêè ïðàâèëüíîãî ïîëîâîãî ôîíäà ïðè ïðèíÿòèè ó÷åòà ñðåäíåé ïëîùàäêè ïðàâèëüíîãî ïîëîâîãî ôîíäà ïðè ïðèíÿòèè ó÷åòà ñðåäíåé ïëîùàäêè ïðàâèëüíîãî ïîëîâîãî ôîíäà ïðè ïðèíÿòèè ó÷åòà ñðåäíåé ïëîùàäêè ïðàâèëüíîãî ôîíäà ïðè ïðèíÿòèè ó÷åòà ñðåäíåé ïëîùàäêè ïðàâèëüíîãî ôîíäà ïðè ïðèíÿòèè ó÷åòà ñðåäíåé ïëîùàäêè ïðàâèëüíîãî ôîíäà ïðè ïðèíÿòèè ó÷åòà'''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"wlan azɔ̀ e nɔ yí gbè nú nùjlɛ́jlɛ́ xɛ́ɛ́ lɛ́ɛ tɔn é. Xɛ́ɛ́ lɛ́ɛ ɖó xókwín vovo lɛ́ɛ. Na xókwín e ɖó wuntun bunɔ lɛ́ɛ bǐ é. Nú wuntun bunɔ lɛ́ɛ ɖó wuntun bunɔ lɛ́ɛ bǐ ɔ́, na wuntun bunɔ e jɛ nukɔn ɔ́ wɛ è na lɛ́ wá.\"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"A nyí xɛvi xovɛ́, bo ko ɖu atínkwín xixa ɖé, amɔ̌ din ɔ́, a ɖó na ɖu atínkwín ɖevo bo na fó nùɖuɖu azǎn ɔ́ tɔn. a ɖó na lɛ́ lɛ́ vɔ́ nǔ e nyí [ajínkwín e a ɖu bǐ ɖò nùɖuɖu towe gudo é, atínkwín e kpo ɖò nùɖuɖu towe gudo é] é. enyi atínkwín e kpo lɛ́ kpo ǎ ɔ́, a na ɖu atínkwín e kpo lɛ́ kpo, amɔ̌ a na lɛ́ kpo xovɛ́. Kpɔ́ndéwú: * ɖu nǔ => 5, 6, 10) -> [11, 4] * ɖu nǔ => 4, 8, 9) -> [12, 1] * ɖu nǔ => 1, 10, 10) -> [11, 0] * ɖu nǔ => 2, 11, 5) -> [7, 0] Nǔɖíɖó: @number: nùjlɛ́n: nùjlɛ́n ɔ́ wɛ nyí atínkwín e a ɖu lɛ́ɛ. @need: nùjlɛ́n ɔ́ wɛ nyí atínkwín e a ɖó na ɖu lɛ́ɛ. @remaining: nùjlɛ́n ɔ́ wɛ nyí atínkwínkwín e kpo ɖò nùjlɛ́n towe mɛ lɛ́ é => 0 = = = 0\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"ě ɖò nùxwásá wè wɛ: nǔxwásá nǔxwásá (+) nǔxwásá nǔxwásá (-)) nǔxwásá nǔxwásá (-)) nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwásá nǔxwáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswáswás\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"è na w'azɔn s. enyi s[i] nyí wèmá ɔ, yí xó tɔn lɛ́ɛ sín dò bo wá dó dò, alǒ lɛ́ yí gbè, enyi é ma nyí mɔ̌ ǎ ɔ, nɔ tɛn ɛ́. enyi wèmá ɔ kún ɖó wèmá ɖé ó ɔ, yí wèmá ɔ. azɔ̀ ɔ na lɛ́ lɛ́ wá wèmá e è mɔ é. Kpɔ́ndéwú xwixa (a) = \"4321\" xwixa (a) = \"AB\" xwixa (a) = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"E na mɔ wuntun 'text' ɔ, na lɛ́ kɔ wuntun e ɖ'emɛ é. Enyi wuntun 'text' ɔ ma ɖò nǔ ǎ ɔ, na lɛ́ kɔ None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "fon_Latn",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"Ɖɔ nùxwléma ɖagbe wè a kpo b kpo ɔ, na lɛ́ yí nùxwléma e ɖò a kpo b kpo tɛntin lɛ́ɛ dó nùxwléma e ɖò jí wɛ lɛ́ɛ jí. e kpɔ́n: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]