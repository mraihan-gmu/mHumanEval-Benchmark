[{"task_id":"HumanEval_0","nl":"fon_Latn","pl":"ts","prompt":"\/\/kpò è è.\/\/Kpɔ́n ɖɔ nùɖé lɛ́ɛ ɖò nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ e è ná lɛ́ ná é mɛ bɔ nùjlɛ́jlɛ́ wè lɛ́ ɖò sɛ́dó nú yeɖée hú \/\/ >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n\/\/ false\n\/\/ >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\/\/ true\nfunction has_close_elements(numbers: number[], threshold: number): boolean {\n","canonical_solution":"function has_close_elements(numbers: number[], threshold: number): boolean {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"},{"task_id":"HumanEval_1","nl":"fon_Latn","pl":"ts","prompt":"\/\/Mi ma sɔ́ dó nùkwín e mi nɔ zán dó wlan nǔ lɛ é mɛ ó.\/\/Ahwan e ɖò yeɖée mɛ lɛ é nɔ ɖò jlɛ̌ jí (ahwan e ɖò yeɖée mɛ lɛ é ɖokpo ɖokpo nɔ ɖò yeɖée mɛ ganji) bɔ ye nɔ nɔ yeɖée mɛ ǎ.\/\/ɖè mɛ énɛ́ lɛ́ɛ ɖó kpɔ́ bó ná dó xwɛ̌ nú yě.\/\/Nǔ e è nɔ sɔ́ dó azɔ̀ élɔ́ mɛ ɔ́ wɛ nyí xɛ́lɛ́ e nɔ ɖó nùxwléma kpò ɖò mɛ é.\/\/ >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n\/\/ [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string: string): string[] {\n","canonical_solution":"function separate_paren_groups(paren_string: string): string[] {\n    const result: string[] = [];\n    let currentGroup: string = \"\";\n    let balance: number = 0;\n\n    for (let char of paren_string) {\n        if (char === ' ') {\n            continue; \/\/ Ignore spaces\n        }\n        \n        currentGroup += char;\n\n        if (char === '(') {\n            balance++;\n        } else if (char === ')') {\n            balance--;\n        }\n\n        if (balance === 0 && currentGroup.length > 0) {\n            result.push(currentGroup);\n            currentGroup = \"\";\n        }\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"},{"task_id":"HumanEval_2","nl":"fon_Latn","pl":"ts","prompt":"\/\/Zɔ́n nú númɛ̀ ɔ́ sín akpáxwé wǒgɔ́dó ɔ́.\/\/(kpá e nɔ lɛ́ kpo ɖò mɛ é nɔ ɖò kpɛví hú 1).\/\/kpò nú nùxwásún (nùnxwásún ɖaxó e hú nùxwásún e è ná é) kpo nǔxwásún wǒzángbè tɔn lɛ kpo \/\/Nú è na sɔ́ nùjlɛ́n e nɔ́ ɖò nǔ jlɔ́ wɛ é ɖé dó nùjlɛ́n e nɔ́ ɖò nǔ jlɔ́ wɛ é ɖé jí ɔ, è na hɛn ɔ́ è na lɛ́ má ɛ dó nǔ  jí.\/\/ >>> truncate_number(3.5)\n\/\/ 0.5\nfunction truncate_number(number: number): number {\n","canonical_solution":"function truncate_number(number: number): number {\n    const integerPart = Math.floor(number);\n    return number - integerPart;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"},{"task_id":"HumanEval_3","nl":"fon_Latn","pl":"ts","prompt":"\/\/ɖo finɛ ɔ azɔwan ɔ na lɛ́ kɔ́n true. bo ma nyí mɔ̌ ǎ ɔ é na lɛ́ kɔ́n false.\/\/azɔ̀n núwùn tɔn. azɔ̀n towe wɛ nyí ɖɔ a na mɔ̀ nú azɔ̀n núwùn tɔn jɛ̀ núwùn jí ɖò fí ɖebǔ ɔ́, bɔ a na lɛ́ mɔ ɖɔ é jɛ̀ núwùn jí.\/\/È na mi nǔ e mi na sɔ́ dó akwɛ́ jí lɛ́ɛ kpo ée mi na ɖe sín akwɛ́ jí lɛ́ɛ kpo ɖò nǔ e nɔ jɛ nukɔn nú nǔ e è nɔ ylɔ ɖɔ  é jí.\/\/ >>> below_zero([1, 2, 3])\n\/\/ false\n\/\/ >>> below_zero([1, 2, -4, 5])\n\/\/ true\nfunction below_zero(operations: number[]): boolean {\n","canonical_solution":"function below_zero(operations: number[]): boolean {\n    let balance = 0;\n    \n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    \n    return false;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1, 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"},{"task_id":"HumanEval_4","nl":"fon_Latn","pl":"ts","prompt":"\/\/MAD = mɛ̀. x - x_méan.\/\/nǔɖevi kpo ayijε kpo (nɔntin ɔ ɖo ninɔmɛ elɔ mɛ): \/\/Nǔ e nɔ nyí mɛɖesɔhwe mɛtɔn ɔ wɛ nyí mɛɖesɔhwe mɛtɔn e ɖò mɛ we lɛ tɛntin é.\/\/e ɖò nǔ e è nɔ mɔ ɖò nǔ e è nɔ mɔ ɖò nǔ e è nɔ mɔ ɖò nǔ e è nɔ mɔ é mɛ é mɛ é.\/\/Ɖó nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ nùjlɛ́jlɛ́\/\/ >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\/\/ 1.0\nfunction mean_absolute_deviation(numbers: number[]): number {\n","canonical_solution":"function mean_absolute_deviation(numbers: number[]): number {\n    const mean = numbers.reduce((acc, num) => acc + num, 0) \/ numbers.length;\n    const absoluteDifferences = numbers.map(num => Math.abs(num - mean));\n    const mad = absoluteDifferences.reduce((acc, diff) => acc + diff, 0) \/ numbers.length;\n    return mad;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mean_absolute_deviation;\n  assert.deepEqual(candidate([1.0, 2.0]),0.5);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),1.2);\n}\n\ntest();"},{"task_id":"HumanEval_5","nl":"fon_Latn","pl":"ts","prompt":"\/\/Zɔ́n nùjlɛ́kpo 'delimeter' ɖò nǔ e ɖò wè ɖò ali ɖokpo ɔ jí lɛ é bǐ tɛntin nú nùjlɛ́kpo è è nɔ sɔ́ dó mɔ nǔ é ∀numbers' \/\/ >>> intersperse([], 4)\n\/\/ []\n\/\/ >>> intersperse([1, 2, 3], 4)\n\/\/ [1, 4, 2, 4, 3]\nfunction intersperse(numbers: number[], delimeter: number): number[] {\n","canonical_solution":"function intersperse(numbers: number[], delimeter: number): number[] {\n    if (numbers.length === 0) {\n        return [];\n    }\n\n    let result: number[] = [];\n\n    for (let i = 0; i < numbers.length; i++) {\n        result.push(numbers[i]);\n        if (i < numbers.length - 1) {\n            result.push(delimeter);\n        }\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2, 2, 2], 2),[2, 2, 2, 2, 2]);\n}\n\ntest();"},{"task_id":"HumanEval_6","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ (() (()) ɖó xɛ̀ wè ɖò gbɛmɛ bɔ ((())) ɖó atɔn. \/\/Ɖo kplékplé ɖokpo ɖokpo ɔ mɛ ɔ, ɖè tɛn e mɛ nùɖé lɛ́ɛ nɔ ɖò mɛ é ɖó wuntun lɛ́ɛ mɛ.\/\/Nǔ e è nɔ sɔ́ dó azɔ̀ enɛ mɛ é wɛ nyí wuntun e nɔ ɖè tò gègě ɖó nú nùxwléma e è nɔ ɖó wuntun lɛ é bɔ è nɔ klán gbɔn tɛnkpɔn jí é.\/\/ >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n\/\/ [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n","canonical_solution":"function parse_nested_parens(paren_string: string): number[] {\n    return paren_string.split(' ').map(group => {\n        let maxDepth = 0;\n        let currentDepth = 0;\n\n        for (const char of group) {\n            if (char === '(') {\n                currentDepth++;\n                if (currentDepth > maxDepth) {\n                    maxDepth = currentDepth;\n                }\n            } else if (char === ')') {\n                currentDepth--;\n            }\n        }\n\n        return maxDepth;\n    });\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"},{"task_id":"HumanEval_7","nl":"fon_Latn","pl":"ts","prompt":"\/\/Filter input array of strings for ones that contain given substring \/\/ >>> filter_by_substring([], \"a\")\n\/\/ []\n\/\/ >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n\/\/ [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings: string[], substring: string): string[] {\n","canonical_solution":"function filter_by_substring(strings: string[], substring: string): string[] {\n    return strings.filter(s => s.includes(substring));\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"},{"task_id":"HumanEval_8","nl":"fon_Latn","pl":"ts","prompt":"\/\/Xwédo e ma ɖó nǔ ɖé ǎ é ɖó na nyí 0 bɔ nǔ e ma ɖó nǔ ɖé ǎ é ɖó na nyí 1.\/\/nú nùxwlé lɛ́ɛ sín nùxwlé ɖé ɔ́, ná lɛ́ yí nùxwlé ɖé sín nùxwlé e nyí nùxwlé lɛ́ɛ bǐ sín nùxwlé kpódó nùxwlé lɛ́ɛ bǐ sín nùxwlé kpó é.\/\/ >>> sum_product([])\n\/\/ [0, 1]\n\/\/ >>> sum_product([1, 2, 3, 4])\n\/\/ [10, 24]\nfunction sum_product(numbers: number[]): [number, number] {\n","canonical_solution":"function sum_product(numbers: number[]): [number, number] {\n    const sum = numbers.reduce((acc, curr) => acc + curr, 0);\n    const product = numbers.reduce((acc, curr) => acc * curr, 1);\n    return [sum, product];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"},{"task_id":"HumanEval_9","nl":"fon_Latn","pl":"ts","prompt":"\/\/ɖo hunhun ɔ mɛ.\/\/Ɖò nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ e è ná lɛ́ ná é ɖé mɛ ɔ, è na bló nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ e è na mɔ ɖò hweɖénu é tɔn.\/\/ >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n\/\/ [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]): number[] {\n","canonical_solution":"function rolling_max(numbers: number[]): number[] {\n    let maxArray: number[] = [];\n    let currentMax: number = Number.NEGATIVE_INFINITY;\n    \n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n        }\n        maxArray.push(currentMax);\n    }\n\n    return maxArray;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\ntest();"},{"task_id":"HumanEval_10","nl":"fon_Latn","pl":"ts","prompt":"\/\/- Zɔ́n wèmá è nɔ́ nyí wèmá-kpò-kpò ɔ́ sín nukɔnmɛ e nɔ́ jɛ nukɔn nú wèmá-kpò-kpò e nɔ nyí wèmá-kpò-kpò é.\/\/- Xà postfix mɛxo tɔn e nyí palindrome é ɖò xɛ ɔ mɛ.\/\/Alɔgorithm linlin ɔ nyi mε: \/\/Mi kpɔ́n palindrome kpɛví e bɛ́ ɖò wuntun e è na é mɛ é.\/\/ >>> make_palindrome(\"\")\n\/\/ \"\"\n\/\/ >>> make_palindrome(\"cat\")\n\/\/ \"catac\"\n\/\/ >>> make_palindrome(\"cata\")\n\/\/ \"catac\"\nfunction make_palindrome(string: string): string {\n","canonical_solution":"function make_palindrome(string: string): string {\n    function isPalindrome(s: string): boolean {\n        let left = 0;\n        let right = s.length - 1;\n        while (left < right) {\n            if (s[left] !== s[right]) return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    const n = string.length;\n    let longestPalindromicPostfixIndex = n;\n\n    for (let i = 0; i < n; i++) {\n        if (isPalindrome(string.substring(i))) {\n            longestPalindromicPostfixIndex = i;\n            break;\n        }\n    }\n\n    const prefix = string.substring(0, longestPalindromicPostfixIndex);\n    const reversedPrefix = prefix.split('').reverse().join('');\n    return string + reversedPrefix;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = make_palindrome;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"x\"),\"x\");\n  assert.deepEqual(candidate(\"xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"jerry\"),\"jerryrrej\");\n}\n\ntest();"},{"task_id":"HumanEval_11","nl":"fon_Latn","pl":"ts","prompt":"\/\/Zɔ́n xor binary dó nǔ è nɔ byɔ mɛ lɛ́ɛ jí bo lɛ́ lɛ́ wá mɔ̀ nùɖé lɛ́ nyí wuntun ɖé.\/\/Nǔ e è nɔ sɔ́ dó mɛ é wɛ nyí xɛ wè a kpo b kpo e mɛ 1 kpo 0 kpo kɛɖɛ wɛ ɖè.\/\/ >>> string_xor(\"010\", \"110\")\n\/\/ \"100\"\nfunction string_xor(a: string, b: string): string {\n","canonical_solution":"function string_xor(a: string, b: string): string {\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i] === b[i] ? '0' : '1');\n    }\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"},{"task_id":"HumanEval_12","nl":"fon_Latn","pl":"ts","prompt":"\/\/wuntun e na nyí mɛ ɖokpo ɔ ɔ. E na lɛ́ lɛ́ kɔ́n nǔ e è ma tuùn ǎ é nú nùxwlé lɛ́ɛ ma ɖò mɛ ǎ ɔ.\/\/Ɖò xwɛ́ e è nɔ ylɔ́ ɖɔ \"array\" ɔ́ mɛ ɔ́, è na lɛ́ yí wuntun e nyí wuntun línlín tɔn é.\/\/ >>> longest([])\n\/\/ undefined\n\/\/ >>> longest([\"a\", \"b\", \"c\"])\n\/\/ \"a\"\n\/\/ >>> longest([\"a\", \"bb\", \"ccc\"])\n\/\/ \"ccc\"\nfunction longest(strings: string[]): string | undefined {\n","canonical_solution":"function longest(strings: string[]): string | undefined {\n    if (strings.length === 0) {\n        return undefined;\n    }\n\n    let longestString = strings[0];\n\n    for (const str of strings) {\n        if (str.length > longestString.length) {\n            longestString = str;\n        }\n    }\n\n    return longestString;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = longest;\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"x\");\n  assert.deepEqual(candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\");\n}\n\ntest();"},{"task_id":"HumanEval_13","nl":"fon_Latn","pl":"ts","prompt":"\/\/Zɔ́n nùjlɛ́kpà wè e nyí nùjlɛ́kpà a kpódó b kpán tɔn ɖaxó bǐ ɔ́\/\/ >>> greatest_common_divisor(3, 5)\n\/\/ 1\n\/\/ >>> greatest_common_divisor(25, 15)\n\/\/ 5\nfunction greatest_common_divisor(a: number, b: number): number {\n","canonical_solution":"function greatest_common_divisor(a: number, b: number): number {\n    while (b !== 0) {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"},{"task_id":"HumanEval_14","nl":"fon_Latn","pl":"ts","prompt":"\/\/E nɔ lɛ́ lɛ́ kɔ̀ nùxwásá lɛ́ɛ bǐ sín wuntun kpɛví ɔ́ jí jɛ wuntun línlín ɔ́ jí.\/\/ >>> all_prefixes(\"abc\")\n\/\/ [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string: string): string[] {\n","canonical_solution":"function all_prefixes(string: string): string[] {\n    const result: string[] = [];\n    for (let i = 1; i <= string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"},{"task_id":"HumanEval_15","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ðɔ wuntun e mɛ nùxwásá e ɖò tɛntin lɛ́ɛ ɖè é bɛ́ sín 0 jɛ n jí é. \/\/ >>> string_sequence(0)\n\/\/ \"0\"\n\/\/ >>> string_sequence(5)\n\/\/ \"0 1 2 3 4 5\"\nfunction string_sequence(n: number): string {\n","canonical_solution":"function string_sequence(n: number): string {\n    let result: string[] = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(i.toString());\n    }\n    return result.join(' ');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_sequence;\n  assert.deepEqual(candidate(0),\"0\");\n  assert.deepEqual(candidate(3),\"0 1 2 3\");\n  assert.deepEqual(candidate(10),\"0 1 2 3 4 5 6 7 8 9 10\");\n}\n\ntest();"},{"task_id":"HumanEval_16","nl":"fon_Latn","pl":"ts","prompt":"\/\/E na sɔ́ wuntun ɖé ɔ́, kpɔ́n ɖɔ wuntun nabí lɛ́ɛ wɛ ɖò wuntun ɔ́ mɛ (e ma kpɔ́n ɖɔ wuntun ɔ́ ɖò wuntun ɖaxó alǒ wuntun kpɛví mɛ ǎ)\/\/ >>> count_distinct_characters(\"xyzXYZ\")\n\/\/ 3\n\/\/ >>> count_distinct_characters(\"Jerry\")\n\/\/ 4\nfunction count_distinct_characters(string: string): number {\n","canonical_solution":"function count_distinct_characters(inputString: string): number {\n    const lowerCasedString = inputString.toLowerCase();\n    const distinctCharacters = new Set<string>();\n\n    for (const char of lowerCasedString) {\n        distinctCharacters.add(char);\n    }\n\n    return distinctCharacters.size;\n}\n\n\/\/ Example usage:\nconsole.log(count_distinct_characters(\"xyzXYZ\")); \/\/ Output: 3\nconsole.log(count_distinct_characters(\"Jerry\"));  \/\/ Output: 4","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"},{"task_id":"HumanEval_17","nl":"fon_Latn","pl":"ts","prompt":"\/\/'High' - nǔ e è nɔ ylɔ ɖɔ quater, bɔ é nɔ xɔ̀n azɔn ɖokpo\/\/'o saji' - nǔxixo ayizɛ́n, bɔ é nɔ́ nɔ wè\/\/'O' - nǔ e è nɔ ylɔ ɖɔ 'o' é bǐ, é nɔ xɔ azɔn ɛnɛ\/\/Nǔ e è ɖɔ dó hwenuxó ɔ wú ɔ ɖíe:\/\/é nyí gudo tɔn ǎ.\/\/azɔ towe wɛ nyí ɖɔ a na wlan xixo elɔ bo na lɛ́ lɛ́ yí nùxwlé lɛ́ɛ sín nùxwlé e sɔgbe xá azɔn nabí e mɛ ɖokpo ɖokpo na xo é\/\/Nǔ e è nɔ sɔ́ dó azɔ̀ elɔ mɛ é wɛ nyí wuntun e nɔ xlɛ́ nùxixa lɛ́ɛ ɖò wuntun ɖé mɛ ɖò ASCII.\/\/ >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n\/\/ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string: string): number[] {\n","canonical_solution":"function parse_music(music_string: string): number[] {\n    const notes = music_string.split(' ');\n    return notes.map(note => {\n        switch (note) {\n            case 'o':\n                return 4;\n            case 'o|':\n                return 2;\n            case '.|':\n                return 1;\n            default:\n                return 0;\n        }\n    });\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"},{"task_id":"HumanEval_18","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n azɔn nabi è na mɔ xwɛɖuxwɛ e è na mɔ ɖò xwɛɖuxwɛ ɔ mɛ é. Xà xó e nɔ jɛ kpɔ́n lɛ é.\/\/ >>> how_many_times(\"\", \"a\")\n\/\/ 0\n\/\/ >>> how_many_times(\"aaa\", \"a\")\n\/\/ 3\n\/\/ >>> how_many_times(\"aaaa\", \"aa\")\n\/\/ 3\nfunction how_many_times(string: string, substring: string): number {\n","canonical_solution":"function how_many_times(string: string, substring: string): number {\n    if (substring.length === 0) return 0;\n    let count = 0;\n    for (let i = 0; i <= string.length - substring.length; i++) {\n        if (string.substring(i, i + substring.length) === substring) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\/\/ Example usage:\n\/\/ console.log(how_many_times(\"aaa\", \"a\")); \/\/ Output: 3\n\/\/ console.log(how_many_times(\"aaaa\", \"aa\")); \/\/ Output: 3\n\/\/ console.log(how_many_times(\"\", \"a\")); \/\/ Output: 0","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"},{"task_id":"HumanEval_19","nl":"fon_Latn","pl":"ts","prompt":"\/\/Zɔ́n nùjlɛ́kpo lɛ́ɛ sín nùɖé lɛ́ɛ sín nùɖé kpɛví bǐ jɛ nùɖé ɖaxó bǐ jí \/\/Nǔ e è sixu sɔ́ lɛ́ɛ wɛ nyí 'wǒ', 'ɖokpo', 'we', ' atɔn', 'nɛ', 'atɔ́n', 'sín', 'sínwe', 'zǒzǒ' kpo 'tɔn'. \/\/Nǔ e è nɔ sɔ́ dó mɛ é wɛ nyí nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ tɔn e sín akpáxwé e è nɔ sɔ́ dó nǔ lɛ é nɔ́ nyí \"mɛ̌\" jɛ \"tɔn\".\/\/ >>> sort_numbers(\"three one five\")\n\/\/ \"one three five\"\nfunction sort_numbers(numbers: string): string {\n","canonical_solution":"function sort_numbers(numbers: string): string {\n    const numberWords = [\n        'zero', 'one', 'two', 'three', 'four', \n        'five', 'six', 'seven', 'eight', 'nine'\n    ];\n    \n    \/\/ Split the input string into an array of words\n    const wordsArray = numbers.split(' ');\n\n    \/\/ Sort the wordsArray based on the index of each word in numberWords\n    wordsArray.sort((a, b) => numberWords.indexOf(a) - numberWords.indexOf(b));\n\n    \/\/ Join the sorted array back into a space-delimited string and return\n    return wordsArray.join(' ');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"},{"task_id":"HumanEval_20","nl":"fon_Latn","pl":"ts","prompt":"\/\/bo na lɛ́ lɛ́ kɔ́n yě ɖò tito jí (àkwɛ́ kpɛví, àkwɛ́ ɖaxó).\/\/Ɖò nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ e è na lɛ́ ná é (e na nyí wè ɖò wuntun wè jí) ɔ́, ɖè we e ɖò wè jí lɛ́ɛ, bó lɛ́ lɛ́ lɛ́ yí wè e ɖò wè jí lɛ́ɛ.\/\/ >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\/\/ [2.0, 2.2]\n\/\/ >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\/\/ [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n","canonical_solution":"function find_closest_elements(numbers: number[]): [number, number] {\n    if (numbers.length < 2) {\n        throw new Error(\"Array must contain at least two numbers\");\n    }\n\n    \/\/ Sort the array so that we can check consecutive elements\n    numbers.sort((a, b) => a - b);\n\n    let closestPair: [number, number] = [numbers[0], numbers[1]];\n    let minDifference = Math.abs(numbers[1] - numbers[0]);\n\n    for (let i = 1; i < numbers.length - 1; i++) {\n        let currentDifference = Math.abs(numbers[i + 1] - numbers[i]);\n        if (currentDifference < minDifference) {\n            minDifference = currentDifference;\n            closestPair = [numbers[i], numbers[i + 1]];\n        }\n    }\n\n    return closestPair;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"},{"task_id":"HumanEval_21","nl":"fon_Latn","pl":"ts","prompt":"\/\/e na zɔ́n bɔ nùxà e ɖò kpɛví hú bǐ é na húzú 0 bɔ nùxà e ɖò ɖaxó hú bǐ é na húzú 1 \/\/Nú è na w'azɔ̌ nú nùjlɛ́kpo (e nɔ ɖó nǔ wè ɖò wŭ é) ɔ, è na zán nùjlɛ́kpo e nɔ yí nùjlɛ́kpo ɔ ɖóɖó é ɖé dó nùjlɛ́kpo enɛ jí, \/\/ >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\/\/ [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n","canonical_solution":"function rescale_to_unit(numbers: number[]): number[] {\n    if (numbers.length < 2) {\n        throw new Error(\"Array must contain at least two elements\");\n    }\n\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range = max - min;\n\n    if (range === 0) {\n        throw new Error(\"All numbers are the same; rescale not possible\");\n    }\n\n    return numbers.map(num => (num - min) \/ range);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"},{"task_id":"HumanEval_22","nl":"fon_Latn","pl":"ts","prompt":"\/\/Filter nǔxíxo e è ná ɖó tsthon nùjlɛ́n lɛ é bǐ nú nùjlɛ́n nùjlɛ́n lɛ kɛɖɛ\/\/ >>> filter_integers([\"a\", 3.14, 5])\n\/\/ [5]\n\/\/ >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n\/\/ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n","canonical_solution":"function filter_integers(values: any[]): number[] {\n    return values.filter(value => Number.isInteger(value));\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_23","nl":"fon_Latn","pl":"ts","prompt":"\/\/Hɔn nú wuntun e è ná lɛ́ ná é sín wuntun \/\/ >>> strlen(\"\")\n\/\/ 0\n\/\/ >>> strlen(\"abc\")\n\/\/ 3\nfunction strlen(string: string): number {\n","canonical_solution":"function strlen(string: string): number {\n    return string.length;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strlen;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"x\"),1);\n  assert.deepEqual(candidate(\"asdasnakj\"),9);\n}\n\ntest();"},{"task_id":"HumanEval_24","nl":"fon_Latn","pl":"ts","prompt":"\/\/nú nùxwásùn n ɖé ɔ, mɔ nùxwásùn ɖaxó e má n ɖó wè é, bɔ é hú gǎn n é.\/\/ >>> largest_divisor(15)\n\/\/ 5\nfunction largest_divisor(n: number): number {\n","canonical_solution":"function largest_divisor(n: number): number {\n    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n    return 1; \/\/ By mathematical definition, 1 is a divisor of any integer.\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_divisor;\n  assert.deepEqual(candidate(3),1);\n  assert.deepEqual(candidate(7),1);\n  assert.deepEqual(candidate(10),5);\n  assert.deepEqual(candidate(100),50);\n  assert.deepEqual(candidate(49),7);\n}\n\ntest();"},{"task_id":"HumanEval_25","nl":"fon_Latn","pl":"ts","prompt":"\/\/nùmε e è nɔ sɔ́ dó wlan ɔ ná ɔ na cí nùtɔ́n e è nɔ sɔ́ dó wlan nǔ lɛ bǐ é ɖɔhun.\/\/Nǔkpò lɛ ɖokpo ɖokpo ɖó na nyí nùɖé bɔ è na sɔ́ dó nùɖé mɛ azɔn nabi e é nɔ́ jɛ ɖò nǔkpò lɛ mɛ é.\/\/E nɔ lɛ́ lɛ́ wá nùxwlé lɛ́ɛ sín nùxwlé lɛ́ɛ sín nùxwlé lɛ́ɛ sín nùxwlé lɛ́ɛ sín nùxwlé lɛ́ɛ sín nùxwlé lɛ́ɛ sín nùxwlé lɛ́ɛ.\/\/ >>> factorize(8)\n\/\/ [2, 2, 2]\n\/\/ >>> factorize(25)\n\/\/ [5, 5]\n\/\/ >>> factorize(70)\n\/\/ [2, 5, 7]\nfunction factorize(n: number): number[] {\n","canonical_solution":"function factorize(n: number): number[] {\n    const factors: number[] = [];\n    let divisor = 2;\n    \n    while (n >= 2) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n \/= divisor;\n        } else {\n            divisor++;\n        }\n    }\n\n    return factors;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_26","nl":"fon_Latn","pl":"ts","prompt":"\/\/Mi hɛn nǔ lɛ tɔn lɛ sín tito ɔ ɖesu ɖi lee mi hɛn ye gbɔn ɖò nǔ e mi wlan lɛ é mɛ é ɖɔhun.\/\/Ɖò nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ lɛ́ɛ tɔn ɖé mɛ ɔ, ɖè nùɖé lɛ́ɛ bǐ e nɔ jɛ azɔn hú ɖokpo é.\/\/ >>> remove_duplicates([1, 2, 3, 2, 4])\n\/\/ [1, 3, 4]\nfunction remove_duplicates(numbers: number[]): number[] {\n","canonical_solution":"function remove_duplicates(numbers: number[]): number[] {\n    const frequencyMap: Map<number, number> = new Map();\n\n    \/\/ Count the occurrences of each number\n    for (const num of numbers) {\n        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);\n    }\n\n    \/\/ Filter out the numbers occurring more than once\n    return numbers.filter(num => frequencyMap.get(num) === 1);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();"},{"task_id":"HumanEval_27","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ɖo wèmá è è ná wèmá ɔ́ mɛ ɔ́, wèmá kpɛví lɛ́ɛ ɖó ná nyí wèmá ɖaxó, bɔ wèmá ɖaxó lɛ́ɛ ɖó ná nyí wèmá kpɛví.\/\/ >>> flip_case(\"Hello\")\n\/\/ \"hELLO\"\nfunction flip_case(string: string): string {\n","canonical_solution":"function flip_case(str: string): string {\n    let flipped = '';\n    for (let char of str) {\n        if (char === char.toUpperCase()) {\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}\n\n\/\/ Example usage:\nconsole.log(flip_case(\"Hello\")); \/\/ Output: \"hELLO\"","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flip_case;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hello!\"),\"hELLO!\");\n  assert.deepEqual(candidate(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n\ntest();"},{"task_id":"HumanEval_28","nl":"fon_Latn","pl":"ts","prompt":"\/\/Dàn wèmá lɛ́ɛ dó wèmá ɖokpo mɛ̀\/\/ >>> concatenate([])\n\/\/ \"\"\n\/\/ >>> concatenate([\"a\", \"b\", \"c\"])\n\/\/ \"abc\"\nfunction concatenate(strings: string[]): string {\n","canonical_solution":"function concatenate(strings: string[]): string {\n    return strings.join('');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = concatenate;\n  assert.deepEqual(candidate([]),\"\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"xyz\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\");\n}\n\ntest();"},{"task_id":"HumanEval_29","nl":"fon_Latn","pl":"ts","prompt":"\/\/Hɔn nùjlɛ́jlɛ́ e è nɔ ylɔ́ ɖɔ \"string\" lɛ́ɛ é ɖó ná nɔ́ dó nǔ e è nɔ ylɔ́ ɖɔ \"prefix\" lɛ́ɛ jí kpowun.\/\/ >>> filter_by_prefix([], \"a\")\n\/\/ []\n\/\/ >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n\/\/ [\"abc\", \"array\"]\nfunction filter_by_prefix(strings: string[], prefix: string): string[] {\n","canonical_solution":"function filter_by_prefix(strings: string[], prefix: string): string[] {\n    return strings.filter(str => str.startsWith(prefix));\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"},{"task_id":"HumanEval_30","nl":"fon_Latn","pl":"ts","prompt":"\/\/E nɔ lɛ́ lɛ́ yí nùxwɛ́ e ɖò nùjlɛ́kpá ɔ́ mɛ lɛ́ɛ kɛ́ɖɛ́.\/\/ >>> get_positive([-1, 2, -4, 5, 6])\n\/\/ [2, 5, 6]\n\/\/ >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\/\/ [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l: number[]): number[] {\n","canonical_solution":"function get_positive(l: number[]): number[] {\n    return l.filter(num => num > 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"},{"task_id":"HumanEval_31","nl":"fon_Latn","pl":"ts","prompt":"\/\/E nɔ lɛ́ lɛ́ yí nùɖé lɛ́ɛ dó nùɖé lɛ́ɛ jí, nú nùɖé lɛ́ɛ nyí nùɖé lɛ́ɛ ɔ́, é nɔ lɛ́ yí nùɖé lɛ́ɛ dó nùɖé lɛ́ɛ jí.\/\/ >>> is_prime(6)\n\/\/ false\n\/\/ >>> is_prime(101)\n\/\/ true\n\/\/ >>> is_prime(11)\n\/\/ true\n\/\/ >>> is_prime(13441)\n\/\/ true\n\/\/ >>> is_prime(61)\n\/\/ true\n\/\/ >>> is_prime(4)\n\/\/ false\n\/\/ >>> is_prime(1)\n\/\/ false\nfunction is_prime(n: number): boolean {\n","canonical_solution":"function is_prime(n: number): boolean {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 === 0 || n % 3 === 0) return false;\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n    return true;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"},{"task_id":"HumanEval_33","nl":"fon_Latn","pl":"ts","prompt":"\/\/e nɔ sɔ́ dó nǔ e è nɔ ylɔ́ ɖɔ \"l\" lɛ́ɛ wu, amɔ̌ è nɔ ɖè ye ɖó vovo.\/\/l' cí l ɖɔhun ɖò nǔ e è ma nɔ má ɖó atɔn ǎ lɛ é mɛ, có nùjlɛ́n tɔn lɛ ɖò nǔ e è nɔ má ɖó atɔn lɛ é mɛ ɔ, ɖokpo ɔ wɛ ye nyí \/\/azɔ̀ élɔ́ nɔ́ yí nùkwín l bo nɔ́ lɛ́ yí nùkwín l' bɔ̀ \/\/ >>> sort_third([1, 2, 3])\n\/\/ [1, 2, 3]\n\/\/ >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n\/\/ [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l: number[]): number[] {\n","canonical_solution":"function sort_third(l: number[]): number[] {\n    const indicesDivByThree = l.map((_, i) => i).filter(i => i % 3 === 0);\n    const valuesDivByThree = indicesDivByThree.map(i => l[i]).sort((a, b) => a - b);\n\n    const result = l.slice();\n    for (let i = 0; i < indicesDivByThree.length; i++) {\n        result[indicesDivByThree[i]] = valuesDivByThree[i];\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_third;\n  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5]);\n  assert.deepEqual(candidate([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5]);\n  assert.deepEqual(candidate([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5]);\n  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_34","nl":"fon_Latn","pl":"ts","prompt":"\/\/Zɔ̀n nǔɖòɖó bunɔ e è ɖè ɖò nùta ɖé mɛ lɛ́ɛ é\/\/ >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\/\/ [0, 2, 3, 5, 9, 123]\nfunction unique(l: number[]): number[] {\n","canonical_solution":"function unique(l: number[]): number[] {\n    const uniqueSet = new Set(l);\n    const uniqueArray = Array.from(uniqueSet);\n    uniqueArray.sort((a, b) => a - b);\n    return uniqueArray;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique;\n  assert.deepEqual(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);\n}\n\ntest();"},{"task_id":"HumanEval_35","nl":"fon_Latn","pl":"ts","prompt":"\/\/E nɔ lɛ́ lɛ́ vɔ́ nǔ e ɖò nǔ lɛ́ɛ mɛ é bǐ.\/\/ >>> max_element([1, 2, 3])\n\/\/ 3\n\/\/ >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\/\/ 123\nfunction max_element(l: number[]): number {\n","canonical_solution":"function max_element(l: number[]): number {\n    if (l.length === 0) {\n        throw new Error(\"Array is empty\");\n    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"},{"task_id":"HumanEval_36","nl":"fon_Latn","pl":"ts","prompt":"\/\/Zɔ́n nú azɔn nabí e wuntun 7 nɔ tɔ́n ɖò nùjlɛ́kpá e ɖò kpò hú n bɔ è sixu má nú 11 alǒ 13. \/\/ >>> fizz_buzz(50)\n\/\/ 0\n\/\/ >>> fizz_buzz(78)\n\/\/ 2\n\/\/ >>> fizz_buzz(79)\n\/\/ 3\nfunction fizz_buzz(n: number): number {\n","canonical_solution":"function fizz_buzz(n: number): number {\n    let count = 0;\n\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let numString = i.toString();\n            for (let char of numString) {\n                if (char === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"},{"task_id":"HumanEval_37","nl":"fon_Latn","pl":"ts","prompt":"\/\/e nɔ sɔ́ dó nùjlɛ́jlɛ́ e ɖò l jí lɛ́ɛ jí, amɔ̌ è nɔ ɖè ye ɖó alɔkpa ɖé.\/\/l' cí l ɖò nùjlɛ́jlɛ́ e nyí nǔɖòɖó ɖé lɛ é mɛ, có nùjlɛ́jlɛ́jlɛ́ tɔn lɛ ɖò nùjlɛ́jlɛ́ e nyí nǔɖòɖó lɛ é mɛ ɔ cí ɖokpo ɔ́ ɖɔhun.\/\/azɔ̀ élɔ́ nɔ́ yí nùkwín l bo nɔ́ lɛ́ yí nùkwín l' bɔ̀ \/\/ >>> sort_even([1, 2, 3])\n\/\/ [1, 2, 3]\n\/\/ >>> sort_even([5, 6, 3, 4])\n\/\/ [3, 6, 5, 4]\nfunction sort_even(l: number[]): number[] {\n","canonical_solution":"function sort_even(l: number[]): number[] {\n    const evenIndices: number[] = [];\n    const result: number[] = [...l];\n\n    \/\/ Collect values at even indices\n    for (let i = 0; i < l.length; i += 2) {\n        evenIndices.push(l[i]);\n    }\n\n    \/\/ Sort the collected even indices values\n    evenIndices.sort((a, b) => a - b);\n\n    \/\/ Place the sorted values back in their original even indices\n    for (let i = 0; i < l.length; i += 2) {\n        result[i] = evenIndices.shift()!;\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_even;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n  assert.deepEqual(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n\ntest();"},{"task_id":"HumanEval_39","nl":"fon_Latn","pl":"ts","prompt":"\/\/prime_fib nɔ lɛ́ yí nùɖé nú númɛ́gɔ́ e nyí nùɖé nú Fibonacci bɔ é lɔ nyí nùɖé nú númɛ́gɔ́gɔ́.\/\/ >>> prime_fib(1)\n\/\/ 2\n\/\/ >>> prime_fib(2)\n\/\/ 3\n\/\/ >>> prime_fib(3)\n\/\/ 5\n\/\/ >>> prime_fib(4)\n\/\/ 13\n\/\/ >>> prime_fib(5)\n\/\/ 89\nfunction prime_fib(n: number): number {\n","canonical_solution":"function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction* fibonacciGenerator(): Generator<number, void, unknown> {\n    let a = 0, b = 1;\n    while (true) {\n        let current = a;\n        a = b;\n        b = current + b;\n        yield current;\n    }\n}\n\nfunction prime_fib(n: number): number {\n    const fibGen = fibonacciGenerator();\n    let primeFibs: number[] = [];\n    let i = 0;\n    while (primeFibs.length < n) {\n        const fibNum = fibGen.next().value;\n        if (isPrime(fibNum)) {\n            primeFibs.push(fibNum);\n        }\n    }\n    return primeFibs[n - 1];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"},{"task_id":"HumanEval_40","nl":"fon_Latn","pl":"ts","prompt":"\/\/nùɖé ǎ.\/\/é nɔ́ lɛ́ kɔ́n nugbǒ nú nùɖé lɛ́ɛ ɖò nùjlɛ́jlɛ́ ɔ́ mɛ bɔ̀ \/\/triples_sum_to_zero nɔ sɔ́ nùxwlé lɛ́ɛ sín nùxwlé lɛ́ɛ dó w'azɔ̌ mɛ.\/\/ >>> triples_sum_to_zero([1, 3, 5, 0])\n\/\/ false\n\/\/ >>> triples_sum_to_zero([1, 3, -2, 1])\n\/\/ true\n\/\/ >>> triples_sum_to_zero([1, 2, 3, 7])\n\/\/ false\n\/\/ >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n\/\/ true\n\/\/ >>> triples_sum_to_zero([1])\n\/\/ false\nfunction triples_sum_to_zero(l: number[]): boolean {\n","canonical_solution":"function triples_sum_to_zero(l: number[]): boolean {\n    if (l.length < 3) {\n        return false;\n    }\n\n    \/\/ Sort the array\n    l.sort((a, b) => a - b);\n\n    \/\/ Iterate through the array\n    for (let i = 0; i < l.length - 2; i++) {\n        let left = i + 1;\n        let right = l.length - 1;\n\n        \/\/ Use two pointers to find a pair that makes the sum zero with l[i]\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1, 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3, 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\ntest();"},{"task_id":"HumanEval_41","nl":"fon_Latn","pl":"ts","prompt":"\/\/azɔ̀n élɔ́ nɔ́ sɔ́ nùɖé lɛ́ɛ dó nùɖé lɛ́ɛ mɛ̀.\/\/ye nɔ ɖò yiyi wɛ ɖi ɖɔ ye ma ko mɔ yeɖée kpɔ́n gbeɖé ǎ ɖɔhun.\/\/Amɔ̌, kɛkɛ́ lɛ́ɛ ɖó hlɔnhlɔn bo lɛ́ ɖó hlɔnhlɔn tawun; enɛ wu ɔ, ye nɔ kpó ɖò yiyi wɛ.\/\/hwenu e mɔto e ɖò yiyi wɛ sín amyɔxwé yì ɖisixwé é xò mɔto e ɖò yiyi wɛ sín ɖisixwé yì amyɔxwé é.\/\/mɔ̌ wɛ mɛ lɛ nɔ́ ɖɔ nú mɛ ɖɔ mɔ̌ wɛ mɛ lɛ́ɛ nɔ́ ɖɔ nú mɛ ɖɔ mɔ̌ wɛ mɛ lɛ́ɛ nɔ́ ɖɔ nú mɛ ɖɔ mɔ̌ wɛ mɛ lɛ́ɛ nɔ́ ɖɔ nú mɛ ɖɔ mɔ̌ wɛ mɛ lɛ́ɛ nɔ́ ɖɔ nú mɛ\/\/ye ɖo ali we wɛ.\/\/mɔto n nɔ ɖo ali ji wɛ sín amyɔxwé yì ɖisixwé; ɖò hwe ɖokpo ɔ nu ɔ, mɔto vovo lɛ tɔn n nɔ ɖo ali ji wɛ\/\/Kpɔ́n ali e nyí ali ɖagbe e nɔ cí gblógbló é ɖé é dó nukún mɛ.function car_race_collision(n: number): number {\n","canonical_solution":"function car_race_collision(n: number): number {\n    \/\/ Since the cars move at the same speed and are infinitely strong,\n    \/\/ each pair of a left-to-right car and a right-to-left car will \"collide\" at some point.\n    \/\/ Therefore, every pair of cars from different sets will collide exactly once.\n    \n    \/\/ We need to find the number of such pairs, which is simply n * n.\n    return n * n;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = car_race_collision;\n  assert.deepEqual(candidate(2),4);\n  assert.deepEqual(candidate(3),9);\n  assert.deepEqual(candidate(4),16);\n  assert.deepEqual(candidate(8),64);\n  assert.deepEqual(candidate(10),100);\n}\n\ntest();"},{"task_id":"HumanEval_42","nl":"fon_Latn","pl":"ts","prompt":"\/\/Zɔ́n nùxwléɖókpɔ́ e ɖó nùɖé lɛ́ɛ bɔ è nɔ zín 1.\/\/ >>> incr_list([1, 2, 3])\n\/\/ [2, 3, 4]\n\/\/ >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\/\/ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l: number[]): number[] {\n","canonical_solution":"function incr_list(l: number[]): number[] {\n    return l.map(num => num + 1);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"},{"task_id":"HumanEval_43","nl":"fon_Latn","pl":"ts","prompt":"\/\/nùɖé ǎ.\/\/é na lɛ́ lɛ́ wá nyí nugbǒ nú nùɖé lɛ́ ɖò nǔ wè mɛ ɖò nǔ e nyí nǔ wè é mɛ é \/\/pairs_sum_to_zero nɔ sɔ́ nùxwlé lɛ́ɛ sín nùxwlé lɛ́ɛ dó w'azɔ̌ mɛ.\/\/ >>> pairs_sum_to_zero([1, 3, 5, 0])\n\/\/ false\n\/\/ >>> pairs_sum_to_zero([1, 3, -2, 1])\n\/\/ false\n\/\/ >>> pairs_sum_to_zero([1, 2, 3, 7])\n\/\/ false\n\/\/ >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n\/\/ true\n\/\/ >>> pairs_sum_to_zero([1])\n\/\/ false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n","canonical_solution":"function pairs_sum_to_zero(l: number[]): boolean {\n    const seen = new Set<number>();\n\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n\n    return false;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 31]),false);\n}\n\ntest();"},{"task_id":"HumanEval_44","nl":"fon_Latn","pl":"ts","prompt":"\/\/nùxwásá lɛ́ɛ ɖò hweɖénu hú 10.\/\/lɛ́ kɔ́n nùjlɛ́jlɛ́ sín nùjlɛ́jlɛ́ ɔ́.\/\/Gǎn nùjùnnúmɛ nú nùjùnnúmɛ x ɔ́ dó nùjùnnúmɛ nú nùjùnnúmɛ ɔ́.\/\/ >>> change_base(8, 3)\n\/\/ \"22\"\n\/\/ >>> change_base(8, 2)\n\/\/ \"1000\"\n\/\/ >>> change_base(7, 2)\n\/\/ \"111\"\nfunction change_base(x: number, base: number): string {\n","canonical_solution":"function change_base(x: number, base: number): string {\n    if (base < 2 || base > 9) {\n        throw new Error(\"Base must be between 2 and 9 inclusive\");\n    }\n    \n    if (x === 0) return \"0\";\n\n    let result: string = \"\";\n    let number: number = x;\n\n    while (number > 0) {\n        const remainder = number % base;\n        result = remainder.toString() + result;\n        number = Math.floor(number \/ base);\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"},{"task_id":"HumanEval_45","nl":"fon_Latn","pl":"ts","prompt":"\/\/E na mɔ akpáxwé tɔn lɛ sín gege kpo fí e è na lɛ́ lɛ́ kɔ́n dó é kpo nú atɔnví ɖé.\/\/ >>> triangle_area(5, 3)\n\/\/ 7.5\nfunction triangle_area(a: number, h: number): number {\n","canonical_solution":"function triangle_area(a: number, h: number): number {\n    return 0.5 * a * h;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(5, 3),7.5);\n  assert.deepEqual(candidate(2, 2),2.0);\n  assert.deepEqual(candidate(10, 8),40.0);\n}\n\ntest();"},{"task_id":"HumanEval_46","nl":"fon_Latn","pl":"ts","prompt":"\/\/Mi wlan azɔ̀ ɖé bo na dó mɔ nùɖé lɛ́ɛ ɖò nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ fib4 tɔn mɛ. Mi ma zán nǔ e nɔ lɛ́ nyí nǔ lɛ́ɛ é ó.\/\/fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\/\/fib4(3) -> 0 \/\/fib4(2) -> 2 \/\/fib4(1) -> 0 \/\/fib4(0) -> 0 \/\/Fib4 nùxwásá ɔ́' nǔxwásá e cí Fibbonacci sín nǔxwásá ɔ́ ɖɔhun é wɛ è ɖè lě: \/\/ >>> fib4(5)\n\/\/ 4\n\/\/ >>> fib4(6)\n\/\/ 8\n\/\/ >>> fib4(7)\n\/\/ 14\nfunction fib4(n: number): number {\n","canonical_solution":"function fib4(n: number): number {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n\n    let fibNumbers = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        const nextFib = fibNumbers[3] + fibNumbers[2] + fibNumbers[1] + fibNumbers[0];\n        fibNumbers.shift();\n        fibNumbers.push(nextFib);\n    }\n    return fibNumbers[3];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n}\n\ntest();"},{"task_id":"HumanEval_47","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ðɔ nǔ e ɖò nǔ lɛ mɛ é sín mɛxwlé lɛ é sín mɛxwlé l. \/\/ >>> median([3, 1, 2, 4, 5])\n\/\/ 3\n\/\/ >>> median([-10, 4, 6, 1000, 10, 20])\n\/\/ 15.0\nfunction median(l: number[]): number {\n","canonical_solution":"function median(l: number[]): number {\n    const sorted = l.slice().sort((a, b) => a - b);\n    const len = sorted.length;\n    \n    if (len % 2 === 0) {\n        return (sorted[len \/ 2 - 1] + sorted[len \/ 2]) \/ 2;\n    } else {\n        return sorted[Math.floor(len \/ 2)];\n    }\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"},{"task_id":"HumanEval_48","nl":"fon_Latn","pl":"ts","prompt":"\/\/E nɔ kpɔ́n ɖɔ xɛ ɔ nyí palindrome à jí\/\/ >>> is_palindrome(\"\")\n\/\/ true\n\/\/ >>> is_palindrome(\"aba\")\n\/\/ true\n\/\/ >>> is_palindrome(\"aaaaa\")\n\/\/ true\n\/\/ >>> is_palindrome(\"zbcd\")\n\/\/ false\nfunction is_palindrome(text: string): boolean {\n","canonical_solution":"function is_palindrome(text: string): boolean {\n    return text === text.split('').reverse().join('');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_49","nl":"fon_Latn","pl":"ts","prompt":"\/\/Zɔ́n 2^n modulo p (nùn nú nùjlɛ́kpo lɛ).\/\/ >>> modp(3, 5)\n\/\/ 3\n\/\/ >>> modp(1101, 101)\n\/\/ 2\n\/\/ >>> modp(0, 101)\n\/\/ 1\n\/\/ >>> modp(3, 11)\n\/\/ 8\n\/\/ >>> modp(100, 101)\n\/\/ 1\nfunction modp(n: number, p: number): number {\n","canonical_solution":"function modp(n: number, p: number): number {\n    if (n === 0) return 1 % p;\n    let result = 1;\n    let base = 2;\n    \n    while (n > 0) {\n        if (n % 2 === 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n = Math.floor(n \/ 2);\n    }\n    \n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"},{"task_id":"HumanEval_51","nl":"fon_Latn","pl":"ts","prompt":"\/\/remove_vowels nyí azɔ̀ e nɔ yí wèmá bó nɔ lɛ́ lɛ́ wèmá e mɛ wèmá ɖě ma ɖè ǎ é.\/\/ >>> remove_vowels(\"\")\n\/\/ \"\"\n\/\/ >>> remove_vowels(\"abcdef\")\n\/\/ \"bcdf\"\n\/\/ >>> remove_vowels(\"aaaaa\")\n\/\/ \"\"\n\/\/ >>> remove_vowels(\"aaBAA\")\n\/\/ \"B\"\n\/\/ >>> remove_vowels(\"zbcd\")\n\/\/ \"zbcd\"\nfunction remove_vowels(text: string): string {\n","canonical_solution":"function remove_vowels(text: string): string {\n    return text.replace(\/[aeiouAEIOU]\/g, '');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_vowels;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"abcdef\\nghijklm\"),\"bcdf\\nghjklm\");\n  assert.deepEqual(candidate(\"fedcba\"),\"fdcb\");\n  assert.deepEqual(candidate(\"eeeee\"),\"\");\n  assert.deepEqual(candidate(\"acBAA\"),\"cB\");\n  assert.deepEqual(candidate(\"EcBOO\"),\"cB\");\n  assert.deepEqual(candidate(\"ybcd\"),\"ybcd\");\n}\n\ntest();"},{"task_id":"HumanEval_52","nl":"fon_Latn","pl":"ts","prompt":"\/\/Zɔ́n nú nú nùjlɛ́kpo l lɛ́ɛ bǐ ɖò fí e nǔ e è nɔ ylɔ ɖɔ t é ɖè é.\/\/ >>> below_threshold([1, 2, 4, 10], 100)\n\/\/ true\n\/\/ >>> below_threshold([1, 20, 4, 10], 5)\n\/\/ false\nfunction below_threshold(l: number[], t: number): boolean {\n","canonical_solution":"function below_threshold(l: number[], t: number): boolean {\n    return l.every(num => num < t);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_threshold;\n  assert.deepEqual(candidate([1, 2, 4, 10], 100),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 5),false);\n  assert.deepEqual(candidate([1, 20, 4, 10], 21),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 22),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 11),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 10),false);\n}\n\ntest();"},{"task_id":"HumanEval_53","nl":"fon_Latn","pl":"ts","prompt":"\/\/Zɔ́n nùjlɛ́kpo wè x kpo y kpo\/\/ >>> add(2, 3)\n\/\/ 5\n\/\/ >>> add(5, 7)\n\/\/ 12\nfunction add(x: number, y: number): number {\n","canonical_solution":"function add(x: number, y: number): number {\n    return x + y;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate(0, 1),1);\n  assert.deepEqual(candidate(1, 0),1);\n  assert.deepEqual(candidate(2, 3),5);\n  assert.deepEqual(candidate(5, 7),12);\n  assert.deepEqual(candidate(7, 5),12);\n}\n\ntest();"},{"task_id":"HumanEval_54","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n ɖɔ xókwin wè lɛ ɖó wuntun ɖokpo ɔ à jí.\/\/ >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\/\/ true\n\/\/ >>> same_chars(\"abcd\", \"dddddddabc\")\n\/\/ true\n\/\/ >>> same_chars(\"dddddddabc\", \"abcd\")\n\/\/ true\n\/\/ >>> same_chars(\"eabcd\", \"dddddddabc\")\n\/\/ false\n\/\/ >>> same_chars(\"abcd\", \"dddddddabce\")\n\/\/ false\n\/\/ >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n\/\/ false\nfunction same_chars(s0: string, s1: string): boolean {\n","canonical_solution":"function same_chars(s0: string, s1: string): boolean {\n    const charSet0: Set<string> = new Set(s0);\n    const charSet1: Set<string> = new Set(s1);\n\n    if (charSet0.size !== charSet1.size) {\n        return false;\n    }\n\n    for (const char of charSet0) {\n        if (!charSet1.has(char)) {\n            return false;\n        }\n    }\n\n    return true;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = same_chars;\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),true);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabc\"),true);\n  assert.deepEqual(candidate(\"dddddddabc\", \"abcd\"),true);\n  assert.deepEqual(candidate(\"eabcd\", \"dddddddabc\"),false);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabcf\"),false);\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),false);\n  assert.deepEqual(candidate(\"aabb\", \"aaccc\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_55","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ðɔ númɛ Fibonacci tɔn n-ɔ ɔ. \/\/ >>> fib(10)\n\/\/ 55\n\/\/ >>> fib(1)\n\/\/ 1\n\/\/ >>> fib(8)\n\/\/ 21\nfunction fib(n: number): number {\n","canonical_solution":"function fib(n: number): number {\n    if (n <= 0) {\n        throw new Error(\"Input should be a positive integer.\");\n    }\n    if (n === 1) return 1;\n    if (n === 2) return 1;\n\n    let a = 1, b = 1;\n    for (let i = 3; i <= n; i++) {\n        const temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}\n\n\/\/ Example usage:\nconsole.log(fib(10)); \/\/ 55\nconsole.log(fib(1));  \/\/ 1\nconsole.log(fib(8));  \/\/ 21","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n}\n\ntest();"},{"task_id":"HumanEval_56","nl":"fon_Latn","pl":"ts","prompt":"\/\/lɛ́ kɔ́n true nú wèmá è nɔ hun ɔ́ ɖokpó ɖokpó ɖó wèmá e nɔ sú ɔ́ ɖokpó. \/\/brackets ɔ wɛ nyí wuntun \"<\" kpo \">\" kpo.\/\/ >>> correct_bracketing(\"<\")\n\/\/ false\n\/\/ >>> correct_bracketing(\"<>\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"<<><>>\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"><<>\")\n\/\/ false\nfunction correct_bracketing(brackets: string): boolean {\n","canonical_solution":"function correct_bracketing(brackets: string): boolean {\n    let balance = 0;\n    for (let char of brackets) {\n        if (char === '<') {\n            balance++;\n        } else if (char === '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance === 0;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_57","nl":"fon_Latn","pl":"ts","prompt":"\/\/lɛ́ kɔ́n true nyí nùɖé lɛ́ɛ ɖò kpò jí wɛ̀ alǒ ɖò dín wɛ̀.\/\/ >>> monotonic([1, 2, 4, 20])\n\/\/ true\n\/\/ >>> monotonic([1, 20, 4, 10])\n\/\/ false\n\/\/ >>> monotonic([4, 1, 0, -10])\n\/\/ true\nfunction monotonic(l: number[]): boolean {\n","canonical_solution":"function monotonic(l: number[]): boolean {\n    if (l.length <= 1) return true;\n    \n    let increasing = true;\n    let decreasing = true;\n    \n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > l[i - 1]) decreasing = false;\n        if (l[i] < l[i - 1]) increasing = false;\n        \n        if (!increasing && !decreasing) return false;\n    }\n    \n    return increasing || decreasing;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"},{"task_id":"HumanEval_58","nl":"fon_Latn","pl":"ts","prompt":"\/\/E nɔ lɛ́ lɛ́ wá nú nǔ e nyí nǔ ɖokpó ɔ́ bɔ è má ɖó ɖò nǔ wè lɛ́ɛ mɛ é.\/\/ >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\/\/ [1, 5, 653]\n\/\/ >>> common([5, 3, 2, 8], [3, 2])\n\/\/ [2, 3]\nfunction common(l1: number[], l2: number[]): number[] {\n","canonical_solution":"function common(l1: number[], l2: number[]): number[] {\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n    const commonElements = Array.from(set1).filter(item => set2.has(item));\n    return commonElements.sort((a, b) => a - b);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"},{"task_id":"HumanEval_59","nl":"fon_Latn","pl":"ts","prompt":"\/\/Zɔ́n nùx'ákpɔ́n ɖaxó n tɔn ɔ́.\/\/ >>> largest_prime_factor(13195)\n\/\/ 29\n\/\/ >>> largest_prime_factor(2048)\n\/\/ 2\nfunction largest_prime_factor(n: number): number {\n","canonical_solution":"function largest_prime_factor(n: number): number {\n    let largestFactor = 1;\n\n    \/\/ Divide n by 2 until it becomes odd\n    while (n % 2 === 0) {\n        largestFactor = 2;\n        n \/= 2;\n    }\n\n    \/\/ Check for odd factors from 3 upwards\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n            largestFactor = i;\n            n \/= i;\n        }\n    }\n\n    \/\/ If n becomes a prime number greater than 2\n    if (n > 2) {\n        largestFactor = n;\n    }\n\n    return largestFactor;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"},{"task_id":"HumanEval_60","nl":"fon_Latn","pl":"ts","prompt":"\/\/sum_to_n nyí azɔ̀ e nɔ́ sɔ́ nùxwásá sín 1 jɛ n jí é. \/\/ >>> sum_to_n(30)\n\/\/ 465\n\/\/ >>> sum_to_n(100)\n\/\/ 5050\n\/\/ >>> sum_to_n(5)\n\/\/ 15\n\/\/ >>> sum_to_n(10)\n\/\/ 55\n\/\/ >>> sum_to_n(1)\n\/\/ 1\nfunction sum_to_n(n: number): number {\n","canonical_solution":"function sum_to_n(n: number): number {\n    return n * (n + 1) \/ 2;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_to_n;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(6),21);\n  assert.deepEqual(candidate(11),66);\n  assert.deepEqual(candidate(30),465);\n  assert.deepEqual(candidate(100),5050);\n}\n\ntest();"},{"task_id":"HumanEval_61","nl":"fon_Latn","pl":"ts","prompt":"\/\/lɛ́ kɔ́n true nú wèmá è nɔ hun ɔ́ ɖokpó ɖokpó ɖó wèmá e nɔ sú ɔ́ ɖokpó. \/\/brackets ɔ wɛ nyí wuntun \"(\" kpo \"\") \/\/ >>> correct_bracketing(\"(\")\n\/\/ false\n\/\/ >>> correct_bracketing(\"()\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"(()())\")\n\/\/ true\n\/\/ >>> correct_bracketing(\")(()\")\n\/\/ false\nfunction correct_bracketing(brackets: string): boolean {\n","canonical_solution":"function correct_bracketing(brackets: string): boolean {\n    let balance = 0;\n\n    for (let char of brackets) {\n        if (char === '(') {\n            balance++;\n        } else if (char === ')') {\n            balance--;\n        }\n\n        \/\/ If balance goes negative, there's a closing bracket without a matching opening one\n        if (balance < 0) {\n            return false;\n        }\n    }\n\n    \/\/ If balance is zero, all opening brackets have matching closing brackets\n    return balance === 0;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_62","nl":"fon_Latn","pl":"ts","prompt":"\/\/Zɔ́n nùjlɛ́nkpó sín nǔ e nyí nùjlɛ́nkpó enɛ tɔn é dó nùjlɛ́nkpó ɖokpo ɔ mɛ.\/\/xs[0] + xs[1] * x + xs[2] * x^2 + .... \/\/xs nɔte nú nùxíwénú polynomial tɔn lɛ.\/\/ >>> derivative([3, 1, 2, 4, 5])\n\/\/ [1, 4, 12, 20]\n\/\/ >>> derivative([1, 2, 3])\n\/\/ [2, 6]\nfunction derivative(xs: number[]): number[] {\n","canonical_solution":"function derivative(xs: number[]): number[] {\n    return xs.slice(1).map((coef, index) => coef * (index + 1));\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = derivative;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3, 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();"},{"task_id":"HumanEval_63","nl":"fon_Latn","pl":"ts","prompt":"\/\/Mi wlan azɔ̀ ɖé bo na dó mɔ nùɖé lɛ́ɛ ɖò nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ ɔ́ mɛ.\/\/fεfεfεn (n) == fεfεfεn (n-1) + fεfεfεn (n-2) + fεfεfεn (n-3).\/\/fib fib ((2) == 1 \/\/fεfεfε)\/\/fibfib(0) == 0 \/\/FibFib nùxwásá sín nùxwásá ɔ́' nǔxwásá e cí Fibbonacci sín nùxwásá é ɖɔhun bɔ è ɖè ɖɔ̀:\/\/ >>> fibfib(1)\n\/\/ 0\n\/\/ >>> fibfib(5)\n\/\/ 4\n\/\/ >>> fibfib(8)\n\/\/ 24\nfunction fibfib(n: number): number {\n","canonical_solution":"function fibfib(n: number): number {\n    if (n === 0 || n === 1) return 0;\n    if (n === 2) return 1;\n\n    let a = 0;\n    let b = 0;\n    let c = 1;\n\n    for (let i = 3; i <= n; i++) {\n        let next = a + b + c;\n        a = b;\n        b = c;\n        c = next;\n    }\n\n    return c;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n}\n\ntest();"},{"task_id":"HumanEval_64","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/xo ɔ, amɔ̌ enyi é ɖò xógbe e è na é sín vivɔnu ɔ jɛn wɛ ɔ.\/\/Hweɖegbe tɔn ɖo fí ɔ ye nyí 'a', 'e', 'i', 'o', 'u'. fí ɔ, 'y' ɔ lɔ nyí a \/\/e nɔ sɔ́ xókwin ɖé dó mɔ nǔ è nɔ dó é, bo nɔ lɛ́ lɛ́ ɖó vowel lɛ́ɛ ɖò wuntun ɔ mɛ.\/\/Wlǎn azɔ̀nú vowels_count e nɔ yí wèmá e nɔ ɖè \/\/ >>> vowels_count(\"abcde\")\n\/\/ 2\n\/\/ >>> vowels_count(\"ACEDY\")\n\/\/ 3\nfunction vowels_count(s: string): number {\n","canonical_solution":"function vowels_count(s: string): number {\n    let count = 0;\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n    const lowerCaseString = s.toLowerCase();\n\n    for (let i = 0; i < lowerCaseString.length; i++) {\n        if (vowels.has(lowerCaseString[i])) {\n            count++;\n        }\n        if (i === lowerCaseString.length - 1 && lowerCaseString[i] === 'y') {\n            count++;\n        }\n    }\n\n    return count;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = vowels_count;\n  assert.deepEqual(candidate(\"abcde\"),2);\n  assert.deepEqual(candidate(\"Alone\"),3);\n  assert.deepEqual(candidate(\"key\"),2);\n  assert.deepEqual(candidate(\"bye\"),1);\n  assert.deepEqual(candidate(\"keY\"),2);\n  assert.deepEqual(candidate(\"bYe\"),1);\n  assert.deepEqual(candidate(\"ACEDY\"),3);\n}\n\ntest();"},{"task_id":"HumanEval_65","nl":"fon_Latn","pl":"ts","prompt":"\/\/Nú shift > nùxwásá nú wèmá lɛ́ɛ ɔ́, wèmá lɛ́ɛ ná lɛ́ kɔ́n.\/\/bo na lɛ́ lɛ́ wá mɔ nǔ e è mɔ é dó wuntun ɖé mɛ.\/\/Zɔ́n nùjlɛ́kpo x tɔn lɛ́ɛ ɖó tɛn lɛ́ɛ jí, zɔ́n nùjlɛ́kpo lɛ́ɛ ɖó tɛn lɛ́ɛ jí.\/\/ >>> circular_shift(12, 1)\n\/\/ \"21\"\n\/\/ >>> circular_shift(12, 2)\n\/\/ \"12\"\nfunction circular_shift(x: number, shift: number): string {\n","canonical_solution":"function circular_shift(x: number, shift: number): string {\n    const strNum = x.toString();\n    const length = strNum.length;\n    if (shift >= length) {\n        return strNum.split('').reverse().join('');\n    }\n    const normalizedShift = shift % length;\n    const splitIndex = length - normalizedShift;\n    return strNum.slice(splitIndex) + strNum.slice(0, splitIndex);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = circular_shift;\n  assert.deepEqual(candidate(100, 2),\"001\");\n  assert.deepEqual(candidate(12, 2),\"12\");\n  assert.deepEqual(candidate(97, 8),\"79\");\n  assert.deepEqual(candidate(12, 1),\"21\");\n  assert.deepEqual(candidate(11, 101),\"11\");\n}\n\ntest();"},{"task_id":"HumanEval_66","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/ASCII wèmá lɛ́ɛ.\/\/Wlǎn azɔ̀ e nɔ yí wèmá wèmá ɖé dó mɛ bo nɔ lɛ́ lɛ́ yí wèmá wèmá ɖaxó lɛ́ɛ sín nùɖé lɛ́ɛ dó mɛ é' \/\/azɔ̌ \/\/ >>> digitSum(\"\")\n\/\/ 0\n\/\/ >>> digitSum(\"abAB\")\n\/\/ 131\n\/\/ >>> digitSum(\"abcCd\")\n\/\/ 67\n\/\/ >>> digitSum(\"helloE\")\n\/\/ 69\n\/\/ >>> digitSum(\"woArBld\")\n\/\/ 131\n\/\/ >>> digitSum(\"aAaaaXa\")\n\/\/ 153\nfunction digitSum(s: string): number {\n","canonical_solution":"function digitSum(s: string): number {\n    let sum = 0;\n    for (const char of s) {\n        if (char >= 'A' && char <= 'Z') {\n            sum += char.charCodeAt(0);\n        }\n    }\n    return sum;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digitSum;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abAB\"),131);\n  assert.deepEqual(candidate(\"abcCd\"),67);\n  assert.deepEqual(candidate(\"helloE\"),69);\n  assert.deepEqual(candidate(\"woArBld\"),131);\n  assert.deepEqual(candidate(\"aAaaaXa\"),153);\n  assert.deepEqual(candidate(\" How are yOu?\"),151);\n  assert.deepEqual(candidate(\"You arE Very Smart\"),327);\n}\n\ntest();"},{"task_id":"HumanEval_67","nl":"fon_Latn","pl":"ts","prompt":"\/\/nú è ɖò xó ɖɔ wɛ ɔ: \/\/ɖo xasun ɔ mɛ ɔ mi na ɖɔ kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n.\/\/atinsinsɛn kpo atinsɛn kpo kpo kpodo xwiɖe e nɔte nú atinsɛn lɛ bǐ é kpo \/\/e nɔ ɖe nùjlɛdonǔwu e nɔ xlɛ́ ɖɔ nǔ lɛ́ɛ bǐ ɖò kpɔ́ é\/\/e è nɔ má dó atínkwɛ́ ɖé mɛ é ɔ́, atínkwɛ́ énɛ́ ɔ́ mɛ wɛ è nɔ mɔ atín tɔn lɛ́ɛ ɖè.\/\/Ðò azɔ̌ elɔ mɛ ɔ, è na na we xwɛ e nɔte nú atinsinsinsɛn kpo atinsɛn kpo é ɖokpo ɖokpo.\/\/ >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n\/\/ 8\n\/\/ >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n\/\/ 2\n\/\/ >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n\/\/ 95\n\/\/ >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\/\/ 19\nfunction fruit_distribution(s: string, n: number): number {\n","canonical_solution":"function fruit_distribution(s: string, n: number): number {\n    const regex = \/(\\d+) apples and (\\d+) oranges\/;\n    const match = s.match(regex);\n    \n    if (!match) {\n        throw new Error(\"Invalid input format\");\n    }\n    \n    const apples = parseInt(match[1], 10);\n    const oranges = parseInt(match[2], 10);\n    \n    const totalApplesAndOranges = apples + oranges;\n    return n - totalApplesAndOranges;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n}\n\ntest();"},{"task_id":"HumanEval_68","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndo 1: \/\/Nú nùɖé ma ɖò nùɖé jí ǎ alǒ nùɖé ma ɖò nùɖé jí ǎ ɔ, lɛ́ kɔ yì [].\/\/e na lɛ́ vɔ́ nùxwlé e è sɔ́ ɖó vo é dó nùxwlé ɖé mɛ, [smallest_value, its index], \/\/Nú è mɔ nɔ̀n gègě bo ɖó nùxíɖíɖó e nyí ganxixo kpɛví bǐ é ɖokpó ɔ ɔ, lɛ́ kɔ nú nɔ̀n e ɖó nùxíɖíɖó e nyí ganxixo kpɛví bǐ é. \/\/E nɔ nyí nuvo e è nɔ sɔ́ ɖó vo é wɛ nyí nuvo e nɔ ɖó akwɛ́ e nyí ganxixo é.\/\/azɔ towe wɛ nyí ɖɔ a na ɖè nukɔ́n ɖokpo bo na lɛ́ sɔ́ ɛ.\/\/\"E na bo na w'azɔ̌ e nɔ xlɛ́ alɔkwín atín ɖé tɔn e ɖó nùjlɛ́kpikpa e ma nyí nùjlɛ́kpikpa ǎ lɛ é é \/\/ >>> pluck([4, 2, 3])\n\/\/ [2, 1]\n\/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\/\/ Example 2:\n\/\/ >>> pluck([1, 2, 3])\n\/\/ [2, 1]\n\/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\/\/ Example 3:\n\/\/ >>> pluck([])\n\/\/ []\n\/\/ Example 4:\n\/\/ >>> pluck([5, 0, 3, 0, 4, 2])\n\/\/ [0, 1]\n\/\/ Explanation: 0 is the smallest value, but  there are two zeros,\n\/\/ so we will choose the first zero, which has the smallest index.\n\/\/ Constraints:\n\/\/ * 1 <= nodes.length <= 10000\n\/\/ * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n","canonical_solution":"function pluck(arr: number[]): number[] {\n    let minEvenValue: number | null = null;\n    let minIndex: number | null = null;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) { \/\/ Check if the number is even\n            if (minEvenValue === null || arr[i] < minEvenValue) {\n                minEvenValue = arr[i];\n                minIndex = i;\n            }\n        }\n    }\n\n    if (minEvenValue !== null && minIndex !== null) {\n        return [minEvenValue, minIndex];\n    } else {\n        return [];\n    }\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"},{"task_id":"HumanEval_69","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/Enyi nùɖé ma ɖò finɛ ǎ ɔ, lɛ́ kɔ́n -1.\/\/Nǔxixa ɔ́ sín nùxwásá wɛ nyí azɔn nabí e é nɔ tɔ́n ɖò nùxwásá ɔ́ mɛ é.\/\/azɔn, bo ɖó hwɛhwɛ e hú alǒ e cí nùxwlémɛ ɔ ɖesu tɔn é.\/\/e na lɛ́ ná nùjlɛ́kpó e ma nyí nǔtí ǎ é ɖé lɛ́ɛ we.\/\/ >>> search([4, 1, 2, 2, 3, 1])\n\/\/ 2\n\/\/ >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n\/\/ 3\n\/\/ >>> search([5, 5, 4, 4, 4])\n\/\/ -1\nfunction search(lst: number[]): number {\n","canonical_solution":"function search(lst: number[]): number {\n    const frequencyMap: Map<number, number> = new Map();\n\n    \/\/ Count frequencies of each integer in the array\n    for (const num of lst) {\n        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);\n    }\n\n    let result = -1;\n\n    \/\/ Determine the greatest integer that meets the condition\n    for (const [num, freq] of frequencyMap.entries()) {\n        if (freq >= num && num > result) {\n            result = num;\n        }\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);\n  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3, 3]),-1);\n  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);\n  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2, 8, 2]),2);\n  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n  assert.deepEqual(candidate([1]),1);\n  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3, 10, 10, 9, 2]),-1);\n}\n\ntest();"},{"task_id":"HumanEval_70","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/enɛ ɔ gudo ɔ è na lɛ́ sɔ́ nùjlɛ́kpá e kpo lɛ́ɛ bǐ dó mɔ nùjlɛ́kpá ɖaxó ɔ, bɔ è na lɛ́ sɔ́ nùjlɛ́kpá kpɛví ɔ.\/\/E nɔ jɛ̀ nùɖé lɛ jí ɖò nùɖé lɛ jí ǎ, é nɔ nyí ɖɔ è nɔ bɛ́ nùɖé lɛ sín akwɛ́ jí,\/\/Nú è na sɔ́ nùxwléma ɔ́ lɛ́ɛ sín nùxwléma ɔ́, è na lɛ́ sɔ́ nùxwléma ɔ́ dó tito e ma sɔgbe ǎ é mɛ.\/\/ >>> strange_sort_list([1, 2, 3, 4])\n\/\/ [1, 4, 2, 3]\n\/\/ >>> strange_sort_list([5, 5, 5, 5])\n\/\/ [5, 5, 5, 5]\n\/\/ >>> strange_sort_list([])\n\/\/ []\nfunction strange_sort_list(lst: number[]): number[] {\n","canonical_solution":"function strange_sort_list(lst: number[]): number[] {\n    const sorted = [...lst].sort((a, b) => a - b);\n    const result: number[] = [];\n    let left = 0;\n    let right = sorted.length - 1;\n\n    while (left <= right) {\n        if (left === right) {\n            result.push(sorted[left]);\n        } else {\n            result.push(sorted[left]);\n            result.push(sorted[right]);\n        }\n        left++;\n        right--;\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"},{"task_id":"HumanEval_71","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/e ɖo akpá atɔngɔ ɔ.\/\/Xò atɔn lɛ́ɛ nɔ́ bló ɖɔ̀ atɔnví ɔ́ nyí nùɖé, nú è na mɔ ɖɔ̀ wè lɛ́ɛ bǐ sín nǔ e è kplé ɔ́ hú gǎn we ɔ́.\/\/E ma nyí mɔ̌ ǎ ɔ́, é ná lɛ́ kɔ́n -1 .\/\/azɔmε atɔnvɔn ɔ e wεn ɔ e na wεn ɔ e na wεn ɔ e na wεn ɔ ɔ e na wεn ɔ e na wεn ɔ e na wεn ɔ\/\/E na bo na w'azɔ̌ atɔn ɔ sín akpáxwé lɛ́ɛ ɔ, w'azɔ̌ ɔ ná lɛ́ yí xó ɔ́ sín fí e é nyí é.\/\/ >>> triangle_area(3, 4, 5)\n\/\/ 6.0\n\/\/ >>> triangle_area(1, 2, 10)\n\/\/ -1\nfunction triangle_area(a: number, b: number, c: number): number {\n","canonical_solution":"function triangle_area(a: number, b: number, c: number): number {\n    \/\/ Check if the sides form a valid triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        \/\/ Calculate the semi-perimeter\n        const s = (a + b + c) \/ 2;\n        \/\/ Calculate the area using Heron's formula\n        const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \/\/ Return the area rounded to 2 decimal places\n        return Math.round(area * 100) \/ 100;\n    }\n    \/\/ Return -1 if the sides do not form a valid triangle\n    return -1;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(3, 4, 5),6.0);\n  assert.deepEqual(candidate(1, 2, 10),-1);\n  assert.deepEqual(candidate(4, 8, 5),8.18);\n  assert.deepEqual(candidate(2, 2, 2),1.73);\n  assert.deepEqual(candidate(1, 2, 3),-1);\n  assert.deepEqual(candidate(10, 5, 7),16.25);\n  assert.deepEqual(candidate(2, 6, 3),-1);\n  assert.deepEqual(candidate(1, 1, 1),0.43);\n  assert.deepEqual(candidate(2, 2, 10),-1);\n}\n\ntest();"},{"task_id":"HumanEval_72","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/Nǔ e nɔ nyí q ɔ na zɔn, enyi é ɖò jlɛ̌ jí (e nyí nǔ e nɔ nyí palindromic é) bo nùjɔnú tɔn lɛ sín nùxwásá nɔ vɛwǔ hú alǒ cí nǔ e nɔ nyí w é bǐ é ɖɔhun.\/\/Wlǎn nùjlɛ́n e nɔ lɛ́ yí gbè nú xó jɔ xó nú nǔ ɔ́ na yì yì ɔ́, bo nɔ yí gbè nú xó ma nyí mɔ̌ ǎ ɔ́.\/\/ >>> will_it_fly([1, 2], 5)\n\/\/ false\n\/\/ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\/\/ >>> will_it_fly([3, 2, 3], 1)\n\/\/ false\n\/\/ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\/\/ >>> will_it_fly([3, 2, 3], 9)\n\/\/ true\n\/\/ # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\/\/ >>> will_it_fly([3], 5)\n\/\/ true\n\/\/ # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n","canonical_solution":"function will_it_fly(q: number[], w: number): boolean {\n    \/\/ Check if the array is balanced (palindromic)\n    const isBalanced = (arr: number[]): boolean => {\n        for (let i = 0; i < arr.length \/ 2; i++) {\n            if (arr[i] !== arr[arr.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    \/\/ Calculate the sum of the elements in the array\n    const sumElements = q.reduce((acc, curr) => acc + curr, 0);\n\n    \/\/ Check both conditions: balanced array and sum less than or equal to max weight\n    return isBalanced(q) && sumElements <= w;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"},{"task_id":"HumanEval_73","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/e nɔ xa ɖokpo ɔ ɖo gudo kpo nukɔn kpo. Ðò ye na lɛ ɔ, a sixu ɖyɔ nǔɖogbɛ ɖokpo bo na lɛ́ huzu nǔɖogbɛ ɖevo.\/\/e na bló bɔ nǔ lɛ na nɔ nyí palindromic. nǔ lɛ nɔ nyí palindromic ɔ wɛ nyí nǔ e nɔ nyí \/\/E na bo na mɔ nùxwléma e nyí nùjlɛ́kpá lɛ é sín nùxwléma ɔ, kpɔ́n nùxwléma e nyí nùxwléma lɛ é tɔn \/\/ >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\/\/ 4\n\/\/ >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n\/\/ 1\n\/\/ >>> smallest_change([1, 2, 3, 2, 1])\n\/\/ 0\nfunction smallest_change(arr: number[]): number {\n","canonical_solution":"function smallest_change(arr: number[]): number {\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while (left < right) {\n        if (arr[left] !== arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1, 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3, 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0, 1]),1);\n}\n\ntest();"},{"task_id":"HumanEval_74","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú \/\/enyi xwɛ ɖokpo ɔ wɛ ɖò xwɛ wè lɛ mɛ ɔ, lɛ́ yí xwɛ nukɔntɔn ɔ.\/\/nùxwásá nǔjlɛ́jlɛ́ tɔn ɖò nùjlɛ́jlɛ́ ɔ́ sín xɛ́n lɛ́ɛ bǐ mɛ é dín hú nùjlɛ́jlɛ́ ɔ́ tɔn ɖě.\/\/Wlǎn azɔ̀ e nɔ yí gbè nú nùjlɛ́jlɛ́ wè bó nɔ lɛ́ yí nùjlɛ́jlɛ́ e ɖó \/\/ >>> total_match([], [])\n\/\/ []\n\/\/ >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\/\/ [\"hI\", \"Hi\"]\n\/\/ >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n\/\/ [\"hi\", \"admin\"]\n\/\/ >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n\/\/ [\"hI\", \"hi\", \"hi\"]\n\/\/ >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n\/\/ [\"4\"]\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n","canonical_solution":"function total_match(lst1: string[], lst2: string[]): string[] {\n    const getTotalChars = (arr: string[]): number => {\n        return arr.reduce((acc, str) => acc + str.length, 0);\n    };\n\n    const totalChars1 = getTotalChars(lst1);\n    const totalChars2 = getTotalChars(lst2);\n\n    if (totalChars1 < totalChars2) {\n        return lst1;\n    } else if (totalChars2 < totalChars1) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"},{"task_id":"HumanEval_75","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/Nukúnmɛ ɖɔ (a) ɖò kpɛví hú 100.\/\/bo lɛ́ nyí nǔvú.\/\/Wlǎn nùjlɛ́n e na lɛ́ yí gbè nú nùjlɛ́n e è ná é nyí nùjlɛ́n ta atɔn sín azɔn wɛ é nyí é.\/\/ >>> is_multiply_prime(30)\n\/\/ true\n\/\/ 30 = 2 * 3 * 5\nfunction is_multiply_prime(a: number): boolean {\n","canonical_solution":"function is_multiply_prime(a: number): boolean {\n    \/\/ Helper function to check if a number is prime\n    function isPrime(n: number): boolean {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 === 0 || n % 3 === 0) return false;\n        for (let i = 5; i * i <= n; i += 6) {\n            if (n % i === 0 || n % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n\n    \/\/ Generate a list of primes less than 100\n    const primes: number[] = [];\n    for (let i = 2; i < 100; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n\n    \/\/ Check if a can be expressed as a product of 3 distinct primes\n    const primeCount = primes.length;\n    for (let i = 0; i < primeCount - 2; i++) {\n        for (let j = i + 1; j < primeCount - 1; j++) {\n            for (let k = j + 1; k < primeCount; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n    \n    return false;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_multiply_prime;\n  assert.deepEqual(candidate(5),false);\n  assert.deepEqual(candidate(30),true);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(125),true);\n  assert.deepEqual(candidate(105),true);\n  assert.deepEqual(candidate(126),false);\n  assert.deepEqual(candidate(729),false);\n  assert.deepEqual(candidate(891),false);\n  assert.deepEqual(candidate(1001),true);\n}\n\ntest();"},{"task_id":"HumanEval_76","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/x nyí nùɖé bɔ è nɔ sɔ́ dó kpá nú n enyi n**int=x \/\/nǔ e nyí nǔ è nɔ ylɔ ɖɔ nǔ è nɔ ylɔ ɖɔ nǔ è nɔ ylɔ ɖɔ nǔ è nɔ ylɔ ɖɔ nǔ è nɔ ylɔ ɖɔ nǔ ɔ ǎ é.\/\/azɔ towe wɛ nyí ɖɔ a na wlan azɔ̀ e na lɛ́ lɛ́ wá nyí nugbǒ ɔ́ nú nùxà x nyí nùɖé bɔ̀ è nɔ ylɔ ɖɔ nùɖé bɔ̀ è nɔ ylɔ ɖɔ nùɖé é.\/\/ >>> is_simple_power(1, 4)\n\/\/ true\n\/\/ >>> is_simple_power(2, 2)\n\/\/ true\n\/\/ >>> is_simple_power(8, 2)\n\/\/ true\n\/\/ >>> is_simple_power(3, 2)\n\/\/ false\n\/\/ >>> is_simple_power(3, 1)\n\/\/ false\n\/\/ >>> is_simple_power(5, 3)\n\/\/ false\nfunction is_simple_power(x: number, n: number): boolean {\n","canonical_solution":"function is_simple_power(x: number, n: number): boolean {\n    if (x < 1 || n < 1) return false;\n    if (x === 1) return true; \/\/ n^0 is 1 for any n\n\n    let power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    \n    return power === x;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"},{"task_id":"HumanEval_77","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/Akpàkpà: a sixu ɖɔ ɖɔ nǔ e è wlan ɔ na nɔ wà hwebǐnu.\/\/enyi mɛ e ɖò xixo ɔ nyí xixo nùjlɛ́kpá ɖé tɔn ɔ.\/\/Wlǎn azɔ̀ e nɔ yí nùjlɛ́kpá a bo nɔ lɛ́ yí true é\/\/ >>> iscube(1)\n\/\/ true\n\/\/ >>> iscube(2)\n\/\/ false\n\/\/ >>> iscube(-1)\n\/\/ true\n\/\/ >>> iscube(64)\n\/\/ true\n\/\/ >>> iscube(0)\n\/\/ true\n\/\/ >>> iscube(180)\n\/\/ false\nfunction iscube(a: number): boolean {\n","canonical_solution":"function iscube(a: number): boolean {\n    \/\/ Calculate the cube root of the absolute value of a\n    const cubeRoot = Math.cbrt(Math.abs(a));\n    \/\/ Check if the cube root is an integer\n    return cubeRoot === Math.round(cubeRoot);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"},{"task_id":"HumanEval_78","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/akpàkpà lɛ A,B,C,D,E,F ɔ́' è nɔ sɔ́ wèmá ɖaxó dó wèmá lɛ́ɛ.\/\/Akpàkpà: mi sixu ɖɔ ɖɔ nǔ e è wlan ɔ sɔgbe hwebǐnu alǒ é nyí xɛ́n ɖé ǎ,\/\/B (=mɛ̀gbò 11), D (=mɛ̀gbò 13). \/\/N'ò ɔ, a ɖó na kpɔ́n nùjlɛ́kpo e ɖò wuntun elɔ lɛ mɛ lɛ é: 2, 3, 5, 7, \/\/Nùxwlémɛ nukɔntɔn lɛ wɛ nyí 2, 3, 5, 7, 11, 13, 17,...\/\/Wěma afɔtɔn-nukún-ɖokpo lɛ wɛ nyí 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \/\/e hú 1 bo ma nyí nùjlɛ́kpo nùjlɛ́kpo wè e ɖò kpò é tɔn ǎ é).\/\/nùxwásá nùɖé lɛ́ɛ wɛ nyí nùjlɛ́kpá (númɛ́ e nyí nùjlɛ́kpá é ɖé wɛ nyí nùjlɛ́kpá nùjlɛ́kpá ɖé \/\/nùxwásùn wǒ-wě-wě tɔn ɖé wɛ nyí xɛ́n ɖé bɔ é nɔ́ xa nùxwásùn wǒ-wě tɔn lɛ́ɛ \/\/È byɔ̀ we ɖɔ a ni wlan azɔ̀ e nɔ yí nǔ lɛ é ɖé.\/\/ >>> hex_key(\"AB\")\n\/\/ 1\n\/\/ >>> hex_key(\"1077E\")\n\/\/ 2\n\/\/ >>> hex_key(\"ABED1A33\")\n\/\/ 4\n\/\/ >>> hex_key(\"123456789ABCDEF0\")\n\/\/ 6\n\/\/ >>> hex_key(\"2020\")\n\/\/ 2\nfunction hex_key(num: string): number {\n","canonical_solution":"function hex_key(num: string): number {\n    const primeHexDigits = new Set(['2', '3', '5', '7', 'B', 'D']);\n    let count = 0;\n\n    for (let digit of num) {\n        if (primeHexDigits.has(digit)) {\n            count++;\n        }\n    }\n\n    return count;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"},{"task_id":"HumanEval_79","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/Akpáxwé e è sɔ́ dó lɛ́ɛ ɖò finɛ bo na d'alɔ ɖò nùwlanwlan ɔ mɛ.\/\/E na sɔ́ wuntun kpɛví kpɛví ɖé lɛ́ɛ 'db' ɖò wuntun ɔ́ sín bǐbɛ́mɛ kpo fó tɔn kpo.\/\/Akɔdo ɖokpo ɖokpo ɖo xɛ ɔ mɛ ɔ e na nyi '0' alo '1'.\/\/binary format. azɔ na lɛ na w'azɔ ɔ, bo na lɛ na w'azɔ ɔ ɖokpo ɖokpo ɔ na nɔte nú binary \/\/e na w'azɔn we bɔ a na w'azɔn ɔ na nyi \/\/ >>> decimal_to_binary(15)\n\/\/ \"db1111db\"\n\/\/ >>> decimal_to_binary(32)\n\/\/ \"db100000db\"\nfunction decimal_to_binary(decimal: number): string {\n","canonical_solution":"function decimal_to_binary(decimal: number): string {\n    const binaryString = decimal.toString(2);\n    return `db${binaryString}db`;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();"},{"task_id":"HumanEval_80","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/Hɔn e nɔ ɖo xwi wɛ ɔ ɔ na nɔ nyí hapts enyi gǒ tɔn ma na hwe hú 3 bo wlan ɖokpo ɖokpo ɖò wlan e nɔ lɛ́ ɖò xwi wɛ lɛ é mɛ ǎ ɔ.\/\/azɔ towe wɛ nyí ɖɔ a na kpɔ́n ɖɔ xwɛ ɔ ɖò nǔ e è ɖɔ é jí à jí à jí.\/\/e na w'azɔ̌ nú we.\/\/ >>> is_happy(\"a\")\n\/\/ false\n\/\/ >>> is_happy(\"aa\")\n\/\/ false\n\/\/ >>> is_happy(\"abcd\")\n\/\/ true\n\/\/ >>> is_happy(\"aabb\")\n\/\/ false\n\/\/ >>> is_happy(\"adb\")\n\/\/ true\n\/\/ >>> is_happy(\"xyy\")\n\/\/ false\nfunction is_happy(s: string): boolean {\n","canonical_solution":"function is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n\n    for (let i = 0; i <= s.length - 3; i++) {\n        const set = new Set(s.substring(i, i + 3));\n        if (set.size !== 3) {\n            return false;\n        }\n    }\n    \n    return true;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_81","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/0.0 E \/\/> 0.0 D- \/\/> 0.7 D \/\/>1.0 D+ \/\/> 1.3 C- \/\/> 1.7 C \/\/> 2.0 C+ \/\/> 2.3 B- \/\/> 2.7 B \/\/> 3.0 B+ \/\/> 3.3 A- \/\/> 3.7 A \/\/4.0 A+ \/\/xwi xwi xwi xwi xwi xwi\/\/azɔ̀ e sixu ɖè nùjlɛ́jlɛ́ wemaxixa tɔn lɛ tɔn sín nùjlɛ́jlɛ́ ɖé sín nùjlɛ́jlɛ́ dó wemaxɔmɛ e ɖò wuntun elɔ mɛ é jí: \/\/É ná nǔ e mɛví lɛ́ɛ nɔ́ mɔ ɖò azɔ̌mɛ é we bɔ a ɖó ná wlan .\/\/Kpo ɖokpo ɔ wɛ nyí ɖɔ, é bú wuntun e é nɔ zán dó ɖè nǔ lɛ é.\/\/azɔmɛvi ɔ ɖo jijɛ wɛ bo na sɔ́ azɔmɛvi lɛ́ɛ ɖó vo.\/\/Azǎn e mɛ̌si ɔ na ɖè azɔ̌ lɛ é sín vivǐ ɔ sín azan gudo tɔn wɛ nyí égbé.\/\/ >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\/\/ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n","canonical_solution":"function numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(gpa => {\n        if (gpa === 4.0) return \"A+\";\n        if (gpa > 3.7) return \"A\";\n        if (gpa > 3.3) return \"A-\";\n        if (gpa > 3.0) return \"B+\";\n        if (gpa > 2.7) return \"B\";\n        if (gpa > 2.3) return \"B-\";\n        if (gpa > 2.0) return \"C+\";\n        if (gpa > 1.7) return \"C\";\n        if (gpa > 1.3) return \"C-\";\n        if (gpa > 1.0) return \"D+\";\n        if (gpa > 0.7) return \"D\";\n        if (gpa > 0.0) return \"D-\";\n        return \"E\";\n    });\n}\n\n\/\/ Example usage:\n\/\/ console.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); \/\/ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"},{"task_id":"HumanEval_82","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú \/\/long nyí nùjlɔ́mɛnu nukɔntɔn ɖé alǒ nùvú nú é nyí ǎ ɔ \/\/Wlǎn azɔ̀ e nɔ yí wèmá wèmá ɖé bó nɔ lɛ́ yí true nú wèmá ɔ́ \/\/ >>> prime_length(\"Hello\")\n\/\/ true\n\/\/ >>> prime_length(\"abcdcba\")\n\/\/ true\n\/\/ >>> prime_length(\"kittens\")\n\/\/ true\n\/\/ >>> prime_length(\"orange\")\n\/\/ false\nfunction prime_length(string: string): boolean {\n","canonical_solution":"function prime_length(string: string): boolean {\n    const length = string.length;\n\n    if (length < 2) return false;\n\n    for (let i = 2; i * i <= length; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    \n    return true;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_length;\n  assert.deepEqual(candidate(\"Hello\"),true);\n  assert.deepEqual(candidate(\"abcdcba\"),true);\n  assert.deepEqual(candidate(\"kittens\"),true);\n  assert.deepEqual(candidate(\"orange\"),false);\n  assert.deepEqual(candidate(\"wow\"),true);\n  assert.deepEqual(candidate(\"world\"),true);\n  assert.deepEqual(candidate(\"MadaM\"),true);\n  assert.deepEqual(candidate(\"Wow\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"HI\"),true);\n  assert.deepEqual(candidate(\"go\"),true);\n  assert.deepEqual(candidate(\"gogo\"),false);\n  assert.deepEqual(candidate(\"aaaaaaaaaaaaaaa\"),false);\n  assert.deepEqual(candidate(\"Madam\"),true);\n  assert.deepEqual(candidate(\"M\"),false);\n  assert.deepEqual(candidate(\"0\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_83","nl":"fon_Latn","pl":"ts","prompt":"\/\/nùxwlé lɛ́ɛ e nɔ bɛ́ ɖò 1 jí alǒ nɔ fó ɖò 1 jí é.\/\/Ɖó è na w'azɔnkpɔnkpɔn ɖagbe n ɔ, lɛ́n nùxà e nɔ ɖó w'azɔnkpɔnkpɔnkpɔnn n-cicixá lɛ é sín nùxí function starts_one_ends(n: number): number {\n","canonical_solution":"function starts_one_ends(n: number): number {\n    if (n === 1) {\n        return 1; \/\/ The number '1' is the only 1-digit number starting or ending with '1'\n    }\n\n    const totalNumbers = Math.pow(10, n - 1); \/\/ Total n-digit numbers starting with any digit from 1 to 9\n    const startingWithOne = Math.pow(10, n - 1); \/\/ The n-digit numbers starting with '1'\n    const endingWithOne = Math.pow(10, n - 1); \/\/ The n-digit numbers ending with '1'\n    const startingAndEndingWithOne = Math.pow(10, n - 2); \/\/ The n-digit numbers starting and ending with '1' \n\n    \/\/ To find numbers that start or end with 1, add those starting with 1 \n    \/\/ and those ending with 1, then subtract the overlap (those both starting and ending with 1).\n    return startingWithOne + endingWithOne - startingAndEndingWithOne;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n  assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n}\n\ntest();"},{"task_id":"HumanEval_84","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú \/\/Ɖò nùjlɛ́kpá ɖagbe ɖé N ɔ, na lɛ́ yí nùjlɛ́kpá nùjlɛ́kpá tɔn lɛ́ɛ tɔn dó nùjlɛ́kpá wexwɛ tɔn mɛ. \/\/ >>> solve(1000)\n\/\/ \"1\"\n\/\/ >>> solve(150)\n\/\/ \"110\"\n\/\/ >>> solve(147)\n\/\/ \"1100\"\n\/\/ Variables:\n\/\/ @N integer\n\/\/ Constraints: 0 ≤ N ≤ 10000.\n\/\/ Output:\n\/\/ a string of binary number\nfunction solve(N: number): string {\n","canonical_solution":"function solve(N: number): string {\n    let sumOfDigits = 0;\n    while (N > 0) {\n        sumOfDigits += N % 10;\n        N = Math.floor(N \/ 10);\n    }\n    return sumOfDigits.toString(2);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();"},{"task_id":"HumanEval_85","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/E na bo na w'azɔ̌n e nyí nùxwléma e nyí nùɖé ǎ lɛ́ɛ ɔ́, w'azɔ̌n e nyí nùxwléma e nyí nùxwléma ɖò nǔ e nyí nùxwléma é ǎ lɛ́ɛ é.\/\/ >>> add([4, 2, 6, 7])\n\/\/ 2\nfunction add(lst: number[]): number {\n","canonical_solution":"function add(lst: number[]): number {\n    return lst.reduce((sum, num, index) => {\n        if (index % 2 === 1 && num % 2 === 0) {\n            return sum + num;\n        }\n        return sum;\n    }, 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"},{"task_id":"HumanEval_86","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/Akpàkpà: A ɖó na hɛn xókwin lɛ kpo tɛn mɛ e ɖò mɛ lɛ é kpo ɖó kpɔ́ ɖò hwɛgbe ɔ mɛ.\/\/e nɔ ɖo jijɛ wɛ ɖò nǔ e è nɔ ylɔ ɖɔ ascii é jí.\/\/è nɔ sɔ́ xókwin yɔyɔ́ ɖé dó ɖyɔ́ xókwin ɔ́ jí bɔ mɛ e è sɔ́ ɖó tò jí lɛ́ɛ bǐ nɔ́ ɖò \/\/Sɛ́n e è ɖè ɖò nǔ lɛ mɛ é ɔ́, wuntun ɖé wɛ bɔ xókwin lɛ́ɛ bǐ (e è nɔ klán ɖó vo) \/\/Wlǎn azɔ̀ e nɔ yí wèmá ɖé bó nɔ lɛ́ yí gbè nú wèmá ɔ́ sín lilɛdogbeɖevomɛ ɖé é.\/\/ >>> anti_shuffle(\"Hi\")\n\/\/ \"Hi\"\n\/\/ >>> anti_shuffle(\"hello\")\n\/\/ \"ehllo\"\n\/\/ >>> anti_shuffle(\"Hello World!!!\")\n\/\/ \"Hello !!!Wdlor\"\nfunction anti_shuffle(s: string): string {\n","canonical_solution":"function anti_shuffle(s: string): string {\n  return s.split(' ').map(word =>\n    word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')\n  ).join(' ');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"},{"task_id":"HumanEval_87","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/Bo lɛ́ sɔ́ lɛ́ɛ ɖó kpɔ́ bó ná dó ɖè ɖò nùjlɛ́jlɛ́ jí.\/\/Nɔ kpɔn nǔ lɛ gbɔn xota lɛ jí ɖò tito jí.\/\/xεn ɖokpo ɖokpo ɔ nyi nukunmεkpɔn - (ahɔn, xεn), bɔ e nɔ bɛ ɔ 0 wɛ.\/\/bo na lɛ́ lɛ́ lɛ́ lɛ́ kɔ́n nǔ lɛ́ɛ sín nǔ lɛ́ɛ, [(x1, y1), (x2, y2) ...] mɔ̌ \/\/Ɖɔ lst, bo na mɔ x, mɔ x ɖo nùxwlé lɛ mɛ, \/\/xota ɖokpo ɖokpo sixu ɖó nùjlɛ́jlɛ́ gǒjímɛ vovo.\/\/e cí matrix ɖɔhun, amɔ̌, é cí matrix lɛ ɖɔhun ǎ,\/\/È na we nǔ e ɖò we mɛ é, ɖi nǔ e è nɔ dó nǔ lɛ é, \/\/ >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n\/\/ [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\/\/ >>> get_row([], 1)\n\/\/ []\n\/\/ >>> get_row([[], [1], [1, 2, 3]], 3)\n\/\/ [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][] {\n","canonical_solution":"function get_row(lst: number[][], x: number): [number, number][] {\n    const coordinates: [number, number][] = [];\n\n    \/\/ Traverse the data matrix\n    lst.forEach((row, rowIndex) => {\n        row.forEach((value, colIndex) => {\n            if (value === x) {\n                coordinates.push([rowIndex, colIndex]);\n            }\n        });\n    });\n\n    \/\/ Sort the coordinates\n    coordinates.sort(([row1, col1], [row2, col2]) => {\n        if (row1 === row2) {\n            \/\/ Sort by columns in descending order\n            return col2 - col1;\n        }\n        \/\/ Sort by rows in ascending order\n        return row1 - row2;\n    });\n\n    return coordinates;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"},{"task_id":"HumanEval_88","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/* ma ɖyɔ́ nùjlɛ́jlɛ́ e è na lɛ́ ná é ó.\/\/Akpádo:\/\/alǒ ɖè é ɖò nùxwásá è ɖò jɛ wɛ é mɛ nú nùxwásá ɔ ((mɛ̀ jɛ nukɔn nú nùxwásá ɔ, mɛ̀ jɛ nukɔn nú nùxwásá ɔ) nyí nùxwásá wè. \/\/mi na sɔ́ nùxwlé lɛ́ɛ ɖó alɔkpa jí nú nùxwlé lɛ́ɛ ɔ́ ná nyí nǔ e nɔ́ nyí nǔ e è nɔ ylɔ́ ɖɔ nǔ e è nɔ ylɔ́ ɖɔ nǔ e è nɔ ylɔ́ ɖɔ nǔ e è nɔ ylɔ́ ɖɔ nǔ e è nɔ ylɔ́ ɖɔ nǔ e è nɔ ylɔ́ ɖɔ nǔ e è nɔ ylɔ́ ɖɔ nǔ e è nɔ ylɔ́ ɖɔ nǔ e è nɔ ylɔ́ ɖɔ nǔ e è nɔ ylɔ́ ɖɔ nǔ é ǎ é é.\/\/E na mɔ nùxwléma e ma nyí nùɖé ǎ lɛ́ɛ ɔ́, lɛ́ kɔ́n nùxwléma ɔ́ sín xwɛ̌ ɖé ɖò nùxwléma ɔ́ mɛ, \/\/ >>> sort_array([])\n\/\/ []\n\/\/ >>> sort_array([5])\n\/\/ [5]\n\/\/ >>> sort_array([2, 4, 3, 0, 1, 5])\n\/\/ [0, 1, 2, 3, 4, 5]\n\/\/ >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n\/\/ [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array: number[]): number[] {\n","canonical_solution":"function sort_array(array: number[]): number[] {\n    if (array.length === 0) {\n        return [];\n    }\n\n    const firstValue = array[0];\n    const lastValue = array[array.length - 1];\n    const sum = firstValue + lastValue;\n\n    const sortedArray = [...array].sort((a, b) => a - b);\n\n    if (sum % 2 === 0) {\n        return sortedArray.reverse();\n    } else {\n        return sortedArray;\n    }\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();"},{"task_id":"HumanEval_89","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/yì jɛ wè jí azɔn wè yì tɛn wè jí.\/\/E na lɛ́ ɖò wlan e è nɔ zán dó wlan nǔ lɛ é mɛ é ɖó na nɔ́ bló gbɔn mɔ̌, bɔ wlan lɛ́ɛ ná nɔ́ nyí:\/\/é nɔ́ lɛ́ yí wèmá wèmá ɖé dó wèmá ɔ́ jí.\/\/Ðɔ azɔ̀n e nɔ yí nùkwín ɖé dó mɔ nùjlɛ́nkpénúmɛ é ɖé bɔ \/\/ >>> encrypt(\"hi\")\n\/\/ \"lm\"\n\/\/ >>> encrypt(\"asdfghjkl\")\n\/\/ \"ewhjklnop\"\n\/\/ >>> encrypt(\"gf\")\n\/\/ \"kj\"\n\/\/ >>> encrypt(\"et\")\n\/\/ \"ix\"\nfunction encrypt(s: string): string {\n","canonical_solution":"function encrypt(s: string): string {\n    const shift = 2 * 2; \/\/ Shift by 4 places\n    const alphabetSize = 26;\n    \n    return s.split('').map(char => {\n        const charCode = char.charCodeAt(0);\n        \n        \/\/ Check if the character is a lowercase letter\n        if (charCode >= 97 && charCode <= 122) {\n            let newCharCode = charCode + shift;\n            \n            \/\/ Wrap around if it goes past 'z'\n            if (newCharCode > 122) {\n                newCharCode = (newCharCode - 97) % alphabetSize + 97;\n            }\n            \n            return String.fromCharCode(newCharCode);\n        }\n\n        \/\/ Return the character unchanged if it's not a lowercase letter\n        return char;\n    }).join('');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();"},{"task_id":"HumanEval_90","nl":"fon_Latn","pl":"ts","prompt":"\/\/Na lɛ́ kɔ́n nǔ e è ma ɖɔ ǎ é nú nùɖé ma ɖò finɛ ǎ ɔ.\/\/Wlǎn azɔ̀ e nyí next_smallest (a) bó ná lɛ́ lɛ́ lɛ́ kɔ̀n nǔ e nyí nǔ wègɔ́ e nyí nǔ kpɛví bǐ ɖò nùjlɛ́jlɛ́ ɔ́ mɛ é. \/\/È na mi nùxwléma nùɖé lɛ́ɛ.\/\/ >>> next_smallest([1, 2, 3, 4, 5])\n\/\/ 2\n\/\/ >>> next_smallest([5, 1, 4, 3, 2])\n\/\/ 2\n\/\/ >>> next_smallest([])\n\/\/ undefined\n\/\/ >>> next_smallest([1, 1])\n\/\/ undefined\nfunction next_smallest(lst: number[]): number | undefined {\n","canonical_solution":"function next_smallest(lst: number[]): number | undefined {\n    if (lst.length < 2) {\n        return undefined;\n    }\n    \n    let first: number | undefined = undefined;\n    let second: number | undefined = undefined;\n    \n    for (let num of lst) {\n        if (first === undefined || num < first) {\n            second = first;\n            first = num;\n        } else if (num > first && (second === undefined || num < second)) {\n            second = num;\n        }\n    }\n\n    return second;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_smallest;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),2);\n  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([1, 1, 1, 1, 0]),1);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([-35, 34, 12, -45]),-35);\n}\n\ntest();"},{"task_id":"HumanEval_91","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/Xò xota lɛ́ɛ jí ɔ, è nɔ sɔ́ \"\", \"?\" alǒ \"!\" dó ɖó dogbó.\/\/\"Boredom\" ɔ́ xógbe e nɔ bɛ́ dó \"I\" jí é wɛ.\/\/È na sɔ́ xókwin ɖé lɛ dó así nú mi, bɔ azɔ̌ e mi na wa é wɛ nyí ɖɔ mi na xa númɛ ɔ.\/\/ >>> is_bored(\"Hello world\")\n\/\/ 0\n\/\/ >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n\/\/ 1\nfunction is_bored(S: string): number {\n","canonical_solution":"function is_bored(S: string): number {\n    \/\/ Split the string into sentences using '.', '?' or '!' as delimiters\n    const sentences = S.split(\/[.!?]\/);\n\n    \/\/ Filter sentences that start with \"I\" and count them\n    const boredomCount = sentences.filter(sentence => sentence.trim().startsWith('I')).length;\n\n    return boredomCount;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_bored;\n  assert.deepEqual(candidate(\"Hello world\"),0);\n  assert.deepEqual(candidate(\"Is the sky blue?\"),0);\n  assert.deepEqual(candidate(\"I love It !\"),1);\n  assert.deepEqual(candidate(\"bIt\"),0);\n  assert.deepEqual(candidate(\"I feel good today. I will be productive. will kill It\"),2);\n  assert.deepEqual(candidate(\"You and I are going for a walk\"),0);\n}\n\ntest();"},{"task_id":"HumanEval_92","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú \/\/E nɔ lɛ́ lɛ́ wá ɖó nǔvú ɖò ninɔmɛ ɖevo lɛ mɛ.\/\/E na lɛ́ lɛ́ wá yì nú nùjlɛ́n lɛ́ɛ ɖokpo ɔ́ na nyí nùjlɛ́n we ɖě lɛ́ɛ sín nǔjlɛ́n, bɔ nùjlɛ́n lɛ́ɛ bǐ na nyí nùjlɛ́n ɔ́.\/\/Ðɔ nùxwlémɛ e nɔ yí nùxwlé 3 é.\/\/ >>> any_int(5, 2, 7)\n\/\/ true\n\/\/ >>> any_int(3, 2, 2)\n\/\/ false\n\/\/ >>> any_int(3, -2, 1)\n\/\/ true\n\/\/ >>> any_int(3.6, -2.2, 2)\n\/\/ false\nfunction any_int(x: number, y: number, z: number): boolean {\n","canonical_solution":"function any_int(x: number, y: number, z: number): boolean {\n    \/\/ Check if all numbers are integers\n    if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {\n        return false;\n    }\n    \/\/ Check if one of the numbers is the sum of the other two\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"},{"task_id":"HumanEval_93","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/Mi nɔ sɔ́ wlan lɛ́ɛ kɛɖɛ́ dó mɔ nǔ.\/\/xósúsú ɖò wlanwlán e è nɔ dó gbè mɛ é mɛ.\/\/wɛn ɔ kpo wèmá e nɔ tɔ́n ɖò tɛn wè nukɔn nú wèmá ɔ kpo \/\/e nɔ ɖyɔ́ xókwin lɛ́ɛ bǐ, nɔ ɖyɔ́ xókwin lɛ́ɛ bǐ ɖò  mɛ é.\/\/Wlǎn azɔ̀ e nɔ yí wɛn ɖé, bo nɔ wlan dó mɛ \/\/ >>> encode(\"test\")\n\/\/ \"TGST\"\n\/\/ >>> encode(\"This is a message\")\n\/\/ \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n","canonical_solution":"function encode(message: string): string {\n    const swapCase = (char: string): string => {\n        if (char === char.toLowerCase()) {\n            return char.toUpperCase();\n        } else {\n            return char.toLowerCase();\n        }\n    };\n\n    const replaceVowel = (char: string): string => {\n        const vowels = 'aeiou';\n        const nextVowels = 'cgkqw';\n        const index = vowels.indexOf(char.toLowerCase());\n        if (index !== -1) {\n            return char === char.toLowerCase() \n                ? nextVowels[index] \n                : nextVowels[index].toUpperCase();\n        }\n        return char;\n    };\n\n    return message\n        .split('')\n        .map(char => swapCase(replaceVowel(char)))\n        .join('');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"},{"task_id":"HumanEval_94","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/A na mɔ nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ e nyí nùjlɛ́jlɛ́ nukɔn nukɔntɔn ɔ bo na lɛ́ yí nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ tɔn lɛ́ɛ sín nùjlɛ́jlɛ́.\/\/È na mi nùxwléma nùɖé lɛ́ɛ.\/\/ >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\/\/ 10\n\/\/ >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n\/\/ 25\n\/\/ >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\/\/ 13\n\/\/ >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n\/\/ 11\n\/\/ >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n\/\/ 3\n\/\/ >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n\/\/ 7\nfunction skjkasdkd(lst: number[]): number {\n","canonical_solution":"function isPrime(n: number): boolean {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 === 0 || n % 3 === 0) return false;\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction sumOfDigits(n: number): number {\n    let sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n = Math.floor(n \/ 10);\n    }\n    return sum;\n}\n\nfunction skjkasdkd(lst: number[]): number {\n    let maxPrime = -1;\n\n    for (const num of lst) {\n        if (isPrime(num) && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n\n    return maxPrime === -1 ? 0 : sumOfDigits(maxPrime);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0, 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191, 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\ntest();"},{"task_id":"HumanEval_95","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/azɔ̀ ɔ́ ɖó na lɛ́ kɔ̀ nú nǔ e è ná ɔ́' nǔtí ǎ.\/\/case alǒ azin lɛ bǐ nyí xɛtɛ lɛ ɖò wema ɖaxó mɛ, nú é ma nyí mɔ̌ ǎ ɔ é na lɛ́ wá nyí false. \/\/enyi nǔɖe ɔ ɔ, lɛkɔ yì true nú nǔɖe lɛ bǐ nyí xɛɖe ɖò lower  mɛ ɔ\/\/ >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n\/\/ true\n\/\/ >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\/\/ false\n\/\/ >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n\/\/ false\n\/\/ >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n\/\/ false\n\/\/ >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n\/\/ true\nfunction check_dict_case(dict: {[key: string]: string}): boolean {\n","canonical_solution":"function check_dict_case(dict: { [key: string]: string }): boolean {\n    const keys = Object.keys(dict);\n    if (keys.length === 0) return false;\n\n    const allLowerCase = keys.every(key => key === key.toLowerCase());\n    const allUpperCase = keys.every(key => key === key.toUpperCase());\n\n    return allLowerCase || allUpperCase;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n}\n\ntest();"},{"task_id":"HumanEval_96","nl":"fon_Latn","pl":"ts","prompt":"\/\/kpɔ́ndéwú ɔ: \/\/nùxwlé lɛ́ɛ e nyí nùjlɛ́kpá lɛ́ɛ bo ɖò hweɖénu nú n.\/\/Zɔ̀ nùɖé e nɔ yí nùɖé e nyí nùɖé ǎ é bo nɔ lɛ́ yí nùɖé e nyí nùɖé ɖò nùɖé lɛ mɛ é sín nùɖé lɛ é dó nùɖé lɛ mɛ.\/\/ >>> count_up_to(5)\n\/\/ [2, 3]\n\/\/ >>> count_up_to(11)\n\/\/ [2, 3, 5, 7]\n\/\/ >>> count_up_to(0)\n\/\/ []\n\/\/ >>> count_up_to(20)\n\/\/ [2, 3, 5, 7, 11, 13, 17, 19]\n\/\/ >>> count_up_to(1)\n\/\/ []\n\/\/ >>> count_up_to(18)\n\/\/ [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n: number): number[] {\n","canonical_solution":"function count_up_to(n: number): number[] {\n    function isPrime(num: number): boolean {\n        if (num < 2) return false;\n        for (let i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n\n    const primes: number[] = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n\n    return primes;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_up_to;\n  assert.deepEqual(candidate(5),[2, 3]);\n  assert.deepEqual(candidate(6),[2, 3, 5]);\n  assert.deepEqual(candidate(7),[2, 3, 5]);\n  assert.deepEqual(candidate(10),[2, 3, 5, 7]);\n  assert.deepEqual(candidate(0),[]);\n  assert.deepEqual(candidate(22),[2, 3, 5, 7, 11, 13, 17, 19]);\n  assert.deepEqual(candidate(1),[]);\n  assert.deepEqual(candidate(18),[2, 3, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);\n  assert.deepEqual(candidate(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n}\n\ntest();"},{"task_id":"HumanEval_97","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/Mi ɖɔ ɖɔ nǔ e è wlan ɔ́ nɔ́ sɔgbe hwebǐnu.\/\/nùjlɛ́kpo tɔn yetɔn lɛ sín nǔkúnmɛ.\/\/Dǒ nùjlɛ́nkpénúmɛ e nɔ yí nùjlɛ́n wè é dó lɛ́ lɛ́ kɔ́n é\/\/ >>> multiply(148, 412)\n\/\/ 16\n\/\/ >>> multiply(19, 28)\n\/\/ 72\n\/\/ >>> multiply(2020, 1851)\n\/\/ 0\n\/\/ >>> multiply(14, -15)\n\/\/ 20\nfunction multiply(a: number, b: number): number {\n","canonical_solution":"function multiply(a: number, b: number): number {\n    const unitDigitA = Math.abs(a) % 10;\n    const unitDigitB = Math.abs(b) % 10;\n    return unitDigitA * unitDigitB;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();"},{"task_id":"HumanEval_98","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/Nú è na sɔ́ wuntun s ɖé ɔ, kpɔ́n nùxwásá xókwin ɖaxó e ɖò wuntun lɛ mɛ lɛ é tɔn. \/\/ >>> count_upper(\"aBCdEf\")\n\/\/ 1\n\/\/ >>> count_upper(\"abcdefg\")\n\/\/ 0\n\/\/ >>> count_upper(\"dBBE\")\n\/\/ 0\nfunction count_upper(s: string): number {\n","canonical_solution":"function count_upper(s: string): number {\n    const uppercaseVowels = new Set(['A', 'E', 'I', 'O', 'U']);\n    let count = 0;\n    \n    for (let i = 0; i < s.length; i += 2) {\n        if (uppercaseVowels.has(s[i])) {\n            count++;\n        }\n    }\n    \n    return count;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();"},{"task_id":"HumanEval_99","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú \/\/sín nùɖé wè lɛ́ɛ jí ɔ́, mi ná lɛ́ lɛ́ dó lɛ́ zɔ́n 0\/\/é nɔ́ lɛ́ yí nùjlɛ́kpá e sɛ́dó e é ɖó é. Nú nùjlɛ́kpá ɔ́ ɖò zɔ́n ɖokpó ɔ́ jí ɔ́ \/\/Ðɔ azɔ̀ e nɔ yí nùɖé (kpɔn) e nɔ ɖè nùɖé xlɛ́ é ɖé\/\/ >>> closest_integer(\"10\")\n\/\/ 10\n\/\/ >>> closest_integer(\"15.3\")\n\/\/ 15\n\/\/ Note:\n\/\/ Rounding away from zero means that if the given number is equidistant\n\/\/ from two integers, the one you should return is the one that is the\n\/\/ farthest from zero. For example closest_integer(\"14.5\") should\n\/\/ return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n","canonical_solution":"function closest_integer(value: string): number {\n  const num = parseFloat(value);\n  if (num > 0) {\n    return Math.floor(num + 0.5);\n  } else {\n    return Math.ceil(num - 0.5);\n  }\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"},{"task_id":"HumanEval_100","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/i nɔte nú awinnya lɛ́ɛ ɖò xù ɔ́ mɛ (i+1).\/\/Zɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n kpɔ́n\/\/- nú n nyí nùjlɛ́n wè ɔ, nú é nyí wè ɔ, nú é nyí wè ɔ.\/\/- nú n nyí nùxwɛ́ ɔ́, nú è na ɖɔ ɖɔ nùxwɛ́ e bɔ d'é jí é.\/\/Awǐnnya e ɖò xɔ e ɖò nukɔn é mɛ lɛ́ɛ sín nùɖé nyí: \/\/Awinnya n wɛ ɖò xɔ nukɔntɔn ɔ mɛ.\/\/Nú è na ɖó nùjlɛ́kpá e nyí nǔ ɖagbe é n ɔ, è ɖó na bló awinnya kpíkpé ɖé ɖó kpíkpé n.\/\/ >>> make_a_pile(3)\n\/\/ [3, 5, 7]\nfunction make_a_pile(n: number): number[] {\n","canonical_solution":"function make_a_pile(n: number): number[] {\n    const result: number[] = [];\n    let currentStones = n;\n    for (let i = 0; i < n; i++) {\n        result.push(currentStones);\n        if (currentStones % 2 === 0) {\n            currentStones += 2; \/\/ next even number\n        } else {\n            currentStones += 2; \/\/ next odd number\n        }\n    }\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = make_a_pile;\n  assert.deepEqual(candidate(3),[3, 5, 7]);\n  assert.deepEqual(candidate(4),[4, 6, 8, 10]);\n  assert.deepEqual(candidate(5),[5, 7, 9, 11, 13]);\n  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);\n  assert.deepEqual(candidate(8),[8, 10, 12, 14, 16, 18, 20, 22]);\n}\n\ntest();"},{"task_id":"HumanEval_101","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/bo na klán wuntun ɔ dó xókwin lɛ jí bo na lɛ́ lɛ́ wá xókwin lɛ sín nùxwlé ɖé.\/\/È na sɔ́ xókwin lɛ́ɛ dó nùɖé mɛ, bɔ è na ɖó wuntun alǒ tɛn nú ye.\/\/ >>> words_string(\"Hi, my name is John\")\n\/\/ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\/\/ >>> words_string(\"One, two, three, four, five, six\")\n\/\/ [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s: string): string[] {\n","canonical_solution":"function words_string(s: string): string[] {\n    return s.split(\/[\\s,]+\/).filter(word => word.length > 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = words_string;\n  assert.deepEqual(candidate(\"Hi, my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n  assert.deepEqual(candidate(\"One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"]);\n  assert.deepEqual(candidate(\"One,, two, three, four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"]);\n}\n\ntest();"},{"task_id":"HumanEval_102","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/nú nùjlɛ́nkpa mɔ̌hunkɔtɔn ɖě ma ɖò finɛ ǎ ɔ, azɔ̀ ɔ na lɛ́ lɛ́ kɔ́n -1.\/\/nùxwléma ganxixo ɖaxó e ɖò tɛntin [x, y] é.\/\/azɔ̀ élɔ́ nɔ́ yí nùxwásá ɖagbe wè x kpo y kpo bó nɔ́ lɛ́ yí nùxwásá ɔ́ sín nùxwásá ɔ́ dó.\/\/ >>> choose_num(12, 15)\n\/\/ 14\n\/\/ >>> choose_num(13, 12)\n\/\/ -1\nfunction choose_num(x: number, y: number): number {\n","canonical_solution":"function choose_num(x: number, y: number): number {\n    \/\/ Ensure x is less than or equal to y for proper range searching\n    if (x > y) {\n        [x, y] = [y, x];\n    }\n    \n    \/\/ Start looking from the upper bound of the range\n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n    \n    \/\/ If no even number is found in the range\n    return -1;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = choose_num;\n  assert.deepEqual(candidate(12, 15),14);\n  assert.deepEqual(candidate(13, 12),-1);\n  assert.deepEqual(candidate(33, 12354),12354);\n  assert.deepEqual(candidate(5234, 5233),-1);\n  assert.deepEqual(candidate(6, 29),28);\n  assert.deepEqual(candidate(27, 10),-1);\n  assert.deepEqual(candidate(7, 7),-1);\n  assert.deepEqual(candidate(546, 546),546);\n}\n\ntest();"},{"task_id":"HumanEval_103","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/Enyi n hú m ɔ, lɛ́ kɔ́n -1.\/\/Zě xósin ɔ yí dó nùxwléma e sɛkpɔ́ mì é jí bo yí dó nùxwléma wexwɛ tɔn mɛ.\/\/nùxwlé lɛ sín ayizángbè sín n jɛ m jí (kɔn n kpo m kpo ɖ'emɛ).\/\/È na mi nùxwlékpà e nyí nùxwlékpà ɖagbe lɛ́ɛ n kpo m kpo, bɔ azɔ̌ mitɔn wɛ nyí ɖɔ mi na ɖó nùxwlékpà \/\/ >>> rounded_avg(1, 5)\n\/\/ \"0b11\"\n\/\/ >>> rounded_avg(7, 5)\n\/\/ -1\n\/\/ >>> rounded_avg(10, 20)\n\/\/ \"0b1111\"\n\/\/ >>> rounded_avg(20, 33)\n\/\/ \"0b11010\"\nfunction rounded_avg(n: number, m: number): string | number {\n","canonical_solution":"function rounded_avg(n: number, m: number): string | number {\n    if (n > m) {\n        return -1;\n    }\n\n    const count = m - n + 1;\n    let sum = 0;\n    \n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    const avg = sum \/ count;\n    const roundedAvg = Math.round(avg);\n    return \"0b\" + roundedAvg.toString(2);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"},{"task_id":"HumanEval_104","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/Akpàkpà: Akpàkpà e è na lɛ́ wá é ɔ́, è na sɔ́ dó tito jí.\/\/nǔ e ma ɖó nùxixa ɖokpo ǎ é.\/\/nùxwléma ɖagbe lɛ́ɛ sín x ɖé ná lɛ́ kɔ́n ɔ́, ná lɛ́ kɔ́n nùxwléma e è ɖè lɛ́ɛ bǐ sín x ɖé.\/\/ >>> unique_digits([15, 33, 1422, 1])\n\/\/ [1, 15, 33]\n\/\/ >>> unique_digits([152, 323, 1422, 10])\n\/\/ []\nfunction unique_digits(x: number[]): number[] {\n","canonical_solution":"function unique_digits(x: number[]): number[] {\n    \/\/ Helper function to check if a number has any even digit\n    const hasEvenDigit = (num: number): boolean => {\n        while (num > 0) {\n            const digit = num % 10;\n            if (digit % 2 === 0) return true;\n            num = Math.floor(num \/ 10);\n        }\n        return false;\n    };\n\n    \/\/ Filter out numbers without even digits and sort them\n    return x.filter(num => !hasEvenDigit(num)).sort((a, b) => a - b);\n}\n\n\/\/ Example usage:\nconsole.log(unique_digits([15, 33, 1422, 1])); \/\/ [1, 15, 33]\nconsole.log(unique_digits([152, 323, 1422, 10])); \/\/ []","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"},{"task_id":"HumanEval_105","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/\"Alɔ̌\", \"Hwlɛ\", \"Gbe\", \"Nɔ\", \"Gbɛ\", \"Gbɛtɔ́\", \"Gbɛtɔ́n\", \"Gbɛtɔ́n\", \"Gbɛtɔn\". \/\/lɛ́ kɔ́n nùɖé lɛ́ɛ sín nùɖé lɛ́ɛ ɖó tɛn nú nùɖé lɛ́ɛ bǐ ɖò nùɖé lɛ́ɛ mɛ.\/\/Nú è na sɔ́ nùjlɛ́kpikpa ɖé dó nùjlɛ́kpikpa ɔ́ mɛ ɔ́, è na ɖè nùjlɛ́kpikpa e ɖò 1 jɛ 9 jí lɛ́ɛ, \/\/ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n\/\/ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\/\/ If the array is empty, return an empty array:\n\/\/ >>> by_length([])\n\/\/ []\n\/\/ If the array has any strange number ignore it:\n\/\/ >>> by_length([1, -1, 55])\n\/\/ [\"One\"]\nfunction by_length(arr: number[]): string[] {\n","canonical_solution":"function by_length(arr: number[]): string[] {\n    const numberNames: { [key: number]: string } = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    };\n\n    return arr\n        .filter(num => num >= 1 && num <= 9)\n        .sort((a, b) => b - a)\n        .map(num => numberNames[num]);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"},{"task_id":"HumanEval_106","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/nùxwásá nú i ɔ́ wɛ nyí nùjlɛ́kpo e ɖò 1 jí jɛ i jí é (1 * 2 * ... * i).\/\/un bɛ́ sín 1.\/\/alǒ nùjlɛ́kpo lɛ sín xota sín 1 jɛ i jí. \/\/bo na lɛ́ lɛ́ yí nùjlɛ́jlɛ́ nùjlɛ́jlɛ́n tɔn n tɔn, bɔ nǔ e ɖò nǔjlɛ́jlɛ́ index i tɔn mɛ é nyí nǔjlɛ́jlɛ́ nǔjlɛ́jlɛ́ tɔn i tɔn ɔ́, nú i nyí nǔjlɛ́jlɛ́ nǔjlɛ́jlɛ́ tɔn ɔ́ \/\/Zɔ́n azɔ̀ f e nɔ yí n dó nùɖé mɛ é, \/\/ >>> f(5)\n\/\/ [1, 2, 6, 24, 15]\nfunction f(n: number): number[] {\n","canonical_solution":"function f(n: number): number[] {\n    const result: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            \/\/ Calculate factorial for even i\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else {\n            \/\/ Calculate sum for odd i\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(5),[1, 2, 6, 24, 15]);\n  assert.deepEqual(candidate(7),[1, 2, 6, 24, 15, 720, 28]);\n  assert.deepEqual(candidate(1),[1]);\n  assert.deepEqual(candidate(3),[1, 2, 6]);\n}\n\ntest();"},{"task_id":"HumanEval_107","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndo 1: \/\/nùjlɛ́kpá palindromes e ɖò tɛnkpɔn ɔ mɛ lɛ é wɛ nyí ((1, n), kpodo mɛ lɛ kpo. \/\/Nú è na sɔ́ nùjlɛ́kpá e nyí nùjlɛ́kpá ɖagbe é n ɔ, lɛ́ kɔ́n nùjlɛ́kpá e ɖó nùjlɛ́kpá e nyí nùjlɛ́kpá é kpo ée nyí nùjlɛ́kpá ǎ é kpo é \/\/ >>> even_odd_palindrome(3)\n\/\/ [1, 2]\n\/\/ Explanation:\n\/\/ Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\/\/ Example 2:\n\/\/ >>> even_odd_palindrome(12)\n\/\/ [4, 6]\n\/\/ Explanation:\n\/\/ Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\/\/ Note:\n\/\/ 1. 1 <= n <= 10^3\n\/\/ 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n: number): [number, number] {\n","canonical_solution":"function isPalindrome(num: number): boolean {\n    const str = num.toString();\n    return str === str.split('').reverse().join('');\n}\n\nfunction even_odd_palindrome(n: number): [number, number] {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_palindrome;\n  assert.deepEqual(candidate(123),[8, 13]);\n  assert.deepEqual(candidate(12),[4, 6]);\n  assert.deepEqual(candidate(3),[1, 2]);\n  assert.deepEqual(candidate(63),[6, 8]);\n  assert.deepEqual(candidate(25),[5, 6]);\n  assert.deepEqual(candidate(19),[4, 6]);\n  assert.deepEqual(candidate(9),[4, 5]);\n  assert.deepEqual(candidate(1),[0, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_108","nl":"fon_Latn","pl":"ts","prompt":"\/\/¢óå ð.÷. -123 Ý÷åé ðáñáããåëìáôéêÜ -1, 2 êáé 3. \/\/Enyi nùxwásá ɖé nyí nǔglɔ́ ɔ, hǔn wuntun tɔn nukɔntɔn ɔ na nyí nǔglɔ́: \/\/nùxwlé lɛ́ɛ e nùxwlé lɛ́ɛ tɔn sín nùxwlé ɔ́ hú 0 é. \/\/Wlǎn azɔ̀ count_nums e nɔ yí nùjlɛ́kpà nùjlɛ́kpà lɛ́ɛ tɔn bó nɔ lɛ́ lɛ́ kɔ́n é \/\/ >>> count_nums([])\n\/\/ 0\n\/\/ >>> count_nums([-1, 11, -11])\n\/\/ 1\n\/\/ >>> count_nums([1, 1, 2])\n\/\/ 3\nfunction count_nums(arr: number[]): number {\n","canonical_solution":"function count_nums(arr: number[]): number {\n    function sumOfDigits(num: number): number {\n        let sum = 0;\n        let str = num.toString();\n        for (let i = 0; i < str.length; i++) {\n            let digit = parseInt(str[i]);\n            if (i === 0 && str[i] === '-') {\n                digit = -parseInt(str[i+1]);\n                i++;\n            }\n            sum += digit;\n        }\n        return sum;\n    }\n\n    let count = 0;\n    for (const num of arr) {\n        if (sumOfDigits(num) > 0) {\n            count++;\n        }\n    }\n\n    return count;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"},{"task_id":"HumanEval_109","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/Akpàkpà: Akpàkpà è è ɖè ɔ́ ná ɖó nǔ e nyí nǔɖogbɛ tɔn lɛ é.\/\/Nú nùxwlé lɛ́ɛ ma ɖò nǔtí ǎ ɔ́, lɛ́ kɔ yì true jí.\/\/bo lɛ́ lɛ́ wá mɔ ɖɔ nǔ ɔ́ nyí nugbǒ; alǒ é lɛ́ wá mɔ ɖɔ nǔ ɔ́ nyí adingban.\/\/Nú é kpéwú bo na mɔ nǔ e è ɖè lɛ é gbɔn azɔ̀ e è ɖɔ ɖò tají é gblamɛ ɔ \/\/tɛnkpɔn tò tɔn ɖò nùjlɛdonǔwu ɔ mɛ é wɛ nyí nǔɖò 0ɔ ɔ.\/\/e na kpò ɖò ali ɖagbe ɔ mɛ.\/\/azɔ̀ ɖisiɖisiɖisi ɖokpó sín tinmɛ wɛ nyí ɖɔ è na ɖisi nǔ e ɖò nùjlɛ́jlɛ́ ɔ mɛ lɛ́ɛ bǐ ɖó ɖokpo.\/\/A na bló azɔ̀ ɖisiɖisi nú azɔn mɔkpan.\/\/azɔ̀ élɔ́ e è nɔ wà dó nǔ e è wlan dó nǔ lɛ́ɛ jí é jí: \/\/e sixu mɔ nǔ e è na ɖè nǔ lɛ ɖó alɔkpa ɖé mɛ é gbɔn nǔ elɔ lɛ wiwa gblamɛ:\/\/nùxwásá lɛ́ɛ ɖò nùjlɛ́kpá ɔ́ mɛ é ná nyí nùɖé bɔ è na sɔ́ dó nùɖé jí ǎ. azɔ̌ towe wɛ nyí ɖɔ a na ɖɔ ɖɔ ɖɔ \/\/Mǐ ɖó nùjlɛ́jlɛ́ 'arr' e nyí nùjlɛ́jlɛ́ nùɖé lɛ́ɛ tɔn N é arr[1], arr[2], ..., arr[N].\/\/ >>> move_one_ball([3, 4, 5, 1, 2])\n\/\/ true\n\/\/ Explanation: By performin 2 right shift operations, non-decreasing order can\n\/\/ be achieved for the given array.\n\/\/ >>> move_one_ball([3, 5, 4, 1, 2])\n\/\/ false\n\/\/ Explanation:It is not possible to get non-decreasing order for the given\n\/\/ array by performing any number of right shift operations.\nfunction move_one_ball(arr: number[]): boolean {\n","canonical_solution":"function move_one_ball(arr: number[]): boolean {\n    if (arr.length === 0) return true;\n\n    let countDecreases = 0;\n    const n = arr.length;\n\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            countDecreases++;\n        }\n        if (countDecreases > 1) {\n            return false;\n        }\n    }\n\n    return true;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_one_ball;\n  assert.deepEqual(candidate([3, 4, 5, 1, 2]),true);\n  assert.deepEqual(candidate([3, 5, 10, 1, 2]),true);\n  assert.deepEqual(candidate([4, 3, 1, 2]),false);\n  assert.deepEqual(candidate([3, 5, 4, 1, 2]),false);\n  assert.deepEqual(candidate([]),true);\n}\n\ntest();"},{"task_id":"HumanEval_110","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/E ma nyí mɔ̌ ǎ ɔ, lɛ́ kɔ nú \"ÉÒ\".\/\/nú nǔ lɛ́ɛ bǐ ɖò lst1 mɛ ɔ, yí gbè nú \"YES\".\/\/Nú è na kpéwú bo ɖyɔ nǔ lɛ ɖò lst1 kpo lst2 kpo tɛntin bo bló bɔ \/\/E sɔ́ ɖó dogbó nú nùxámɛ nǔ e è sixu ɖyɔ ɖò lst1 kpo lst2 kpo tɛntin é ǎ.\/\/nú è na bló lst1 ɖó nùjlɛ́n e nyí nùjlɛ́n lɛ é sín nùjlɛ́n ɔ kɛɖɛ wɛ é na nyí.\/\/bo na ɖɔ ɖɔ emi sixu ɖyɔ nǔ lɛ à jí à jí \/\/Ðò nùkanbyɔ elɔ mɛ ɔ, a na bló azɔjlɛ̀ e nɔ yí nùxwlé wè é, \/\/ >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\/\/ \"YES\"\n\/\/ >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n\/\/ \"NO\"\n\/\/ It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1: number[], lst2: number[]): string {\n","canonical_solution":"function exchange(lst1: number[], lst2: number[]): string {\n    const isEven = (num: number) => num % 2 === 0;\n    \n    \/\/ Count the odd numbers in lst1\n    const oddCountInLst1 = lst1.reduce((count, num) => count + (isEven(num) ? 0 : 1), 0);\n\n    \/\/ Count the even numbers in lst2\n    const evenCountInLst2 = lst2.reduce((count, num) => count + (isEven(num) ? 1 : 0), 0);\n\n    \/\/ Check if number of odd numbers in lst1 can be matched by even numbers in lst2\n    return oddCountInLst1 <= evenCountInLst2 ? \"YES\" : \"NO\";\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = exchange;\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 4]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),\"NO\");\n  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\");\n  assert.deepEqual(candidate([100, 200], [200, 200]),\"YES\");\n}\n\ntest();"},{"task_id":"HumanEval_111","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/Enyi wèmá lɛ́ɛ ɖò nǔ ɖokpo ɔ mɛ ɔ, lɛ́ kɔ nú ye bǐ.\/\/wema e è nɔ lɛ́ wlan azɔn mɔkpan bɔ è nɔ lɛ́ wlan azɔn mɔkpan é.\/\/E na sɔ́ wuntun e nɔ́ xlɛ́ wuntun e è klán wuntun lɛ́ɛ ɖó vo é, lɛ́ kɔ́ nǔ ɖé wá nú mì \/\/ >>> histogram(\"a b c\")\n\/\/ {\"a\": 1, \"b\": 1, \"c\": 1}\n\/\/ >>> histogram(\"a b b a\")\n\/\/ {\"a\": 2, \"b\": 2}\n\/\/ >>> histogram(\"a b c a b\")\n\/\/ {\"a\": 2, \"b\": 2}\n\/\/ >>> histogram(\"b b b b a\")\n\/\/ {\"b\": 4}\n\/\/ >>> histogram(\"\")\n\/\/ {}\nfunction histogram(test: string): {[key: string]: number} {\n","canonical_solution":"function histogram(test: string): { [key: string]: number } {\n    if (test.trim() === \"\") {\n        return {};\n    }\n\n    const letters = test.split(\" \");\n    const counts: { [key: string]: number } = {};\n\n    for (const letter of letters) {\n        if (letter in counts) {\n            counts[letter]++;\n        } else {\n            counts[letter] = 1;\n        }\n    }\n\n    let maxCount = 0;\n    for (const count of Object.values(counts)) {\n        if (count > maxCount) {\n            maxCount = count;\n        }\n    }\n\n    const result: { [key: string]: number } = {};\n    for (const [letter, count] of Object.entries(counts)) {\n        if (count === maxCount) {\n            result[letter] = count;\n        }\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"},{"task_id":"HumanEval_112","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú \/\/A na lɛ́ yí nùkwín e mɛ è na mɔ nǔ e è na mɔ é kpo nǔ e è na mɔ ɖɔ é nyí nugbǒ\/maɖɔmaɖɔ é kpo ɖè é dó kpɔ́n.\/\/Hweɖevonu ɔ wɛ è nɔ ylɔ ɖɔ palindrome enyi e nɔ xa gbɔn vo nú ée è nɔ xa gbɔn nukɔn é.\/\/bo kpɔ́n ɖɔ xwɛ e è mɔ é nyí palindrome à jí.\/\/e na lɛ́ sɔ́ wuntun e ɖò wuntun e ɖò wuntun c mɛ é bǐ dó wuntun s mɛ.\/\/azɔ̌ \/\/ >>> reverse_delete(\"abcde\", \"ae\")\n\/\/ [\"bcd\", false]\n\/\/ >>> reverse_delete(\"abcdef\", \"b\")\n\/\/ [\"acdef\", false]\n\/\/ >>> reverse_delete(\"abcdedcba\", \"ab\")\n\/\/ [\"cdedc\", true]\nfunction reverse_delete(s: string, c: string): [string, boolean] {\n","canonical_solution":"function reverse_delete(s: string, c: string): [string, boolean] {\n    \/\/ Create a Set of characters to delete for faster lookup\n    const charsToDelete = new Set(c);\n\n    \/\/ Filter out characters in 's' that are in 'c'\n    const filteredString = s.split('').filter(char => !charsToDelete.has(char)).join('');\n\n    \/\/ Check if the filtered string is a palindrome\n    const isPalindrome = filteredString === filteredString.split('').reverse().join('');\n\n    return [filteredString, isPalindrome];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"},{"task_id":"HumanEval_113","nl":"fon_Latn","pl":"ts","prompt":"\/\/̆n ɔ́, wuntun e è nɔ ylɔ ɖɔ \"i\" ɔ́ nɔ́ ɖó wuntun e è nɔ ylɔ ɖɔ \"i\" é.\/\/wèmá è è ná dó è é.\/\/Nǔɖevi ɖokpo ɖokpo i tɔn e è nɔ ɖe tɔ́n é ɖó na nyí nùxíxo nǔɖevi e ɖò nǔɖevi ɔ mɛ é tɔn.\/\/E na sɔ́ xɛ́n lɛ́ɛ sín nùxwásá ɖé, bɔ xɛ́n ɖokpo ɖokpo nɔ́ ɖó nùjlɛ́kpo lɛ́ɛ kɛɖɛ, lɛ́ kɔ́n nùxwásá ɖé.\/\/ >>> odd_count([\"1234567\"])\n\/\/ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\/\/ >>> odd_count([\"3\", \"11111111\"])\n\/\/ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst: string[]): string[] {\n","canonical_solution":"function odd_count(lst: string[]): string[] {\n    return lst.map(str => {\n        \/\/ Count the number of odd digits in the string\n        let oddCount = Array.from(str).reduce((count, char) => {\n            let digit = parseInt(char, 10);\n            return digit % 2 !== 0 ? count + 1 : count;\n        }, 0);\n\n        \/\/ Construct the result string\n        return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n    });\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = odd_count;\n  assert.deepEqual(candidate([\"1234567\"]),[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n  assert.deepEqual(candidate([\"3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n  assert.deepEqual(candidate([\"271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\n\ntest();"},{"task_id":"HumanEval_114","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú \/\/nùxwlé lɛ́ɛ.\/\/Ɖɔ nùxwléma nùɖé lɛ́ɛ sín nùxwléma ɖé ɔ, kpɔ́n nùxwléma kpɛví kpɛví e nyí nùxwléma e nyí nùxwléma ɖé ǎ é ɖé tɔn é \/\/ >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\/\/ 1\n\/\/ >>> minSubArraySum([-1, -2, -3])\n\/\/ -6\nfunction minSubArraySum(nums: number[]): number {\n","canonical_solution":"function minSubArraySum(nums: number[]): number {\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    \n    for (let i = 1; i < nums.length; i++) {\n        currentSum = Math.min(nums[i], currentSum + nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n\n\/\/ Example usage:\n\/\/ console.log(minSubArraySum([2, 3, 4, 1, 2, 4])); \/\/ Output: 1\n\/\/ console.log(minSubArraySum([-1, -2, -3])); \/\/ Output: -6","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1, -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100, -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"},{"task_id":"HumanEval_115","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndo 1: \/\/Wá azɔn nabi a na dó j'azɔ̌n lɛ́ɛ.\/\/azɔ̌ towe wɛ nyí ɖɔ a ni zán kɔ́n lɛ bo dó xú tɔ ɔ́.\/\/bo sinkpo lɛ bǐ nɔ ɖó jijɔ ɖokpo ɔ.\/\/Hɔn ɖokpo ɖokpo nɔ ɖó go e è sixu zán bo na ɖè sin sín mɛ é,\/\/bo 1 ɖokpo ɖokpo ɖo ali ɖokpo ɔ mɛ nɔte nú azɔmɛ ɖokpo sin tɔn.\/\/A mɔ tɔjɔtɛn lɛ sín xuxuɖevi ɖokpo ɖokpo.\/\/ >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\/\/ 6\n\/\/ Example 2:\n\/\/ >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n\/\/ 5\n\/\/ Example 3:\n\/\/ >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n\/\/ 0\n\/\/ Constraints:\n\/\/ * all wells have the same length\n\/\/ * 1 <= grid.length <= 10^2\n\/\/ * 1 <= grid[:,1].length <= 10^2\n\/\/ * grid[i][j] -> 0 | 1\n\/\/ * 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number): number {\n","canonical_solution":"function max_fill(grid: number[][], capacity: number): number {\n    let totalBuckets = 0;\n\n    for (let row of grid) {\n        let waterUnits = row.reduce((sum, cell) => sum + cell, 0);\n        totalBuckets += Math.ceil(waterUnits \/ capacity);\n    }\n\n    return totalBuckets;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"},{"task_id":"HumanEval_116","nl":"fon_Latn","pl":"ts","prompt":"\/\/E na bló gbɔn mɔ̀:\/\/Nú è na mɔ nú nùjlɛ́jlɛ́ ɖokpo ɔ ɔ́, è na ɖè nǔ lɛ ɖó nǔ e è nɔ ylɔ ɖɔ nǔ wǒzángbè é jí.\/\/nùxwásá nú mɛ ɖò nùjlɛ́kpá binary tɔn yetɔn mɛ ɖò nùxwásá jí.\/\/Ðò Kata elɔ mɛ ɔ, a ɖó na ɖè nùjlɛ́n e nyí nùjlɛ́n e nyí nùɖé ǎ lɛ é ɖò nùjlɛ́n e nyí nùjlɛ́n e nyí nùjlɛ́n ǎ lɛ é mɛ ɖò nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e nyí nǔ e é nyí nǔ e é nyí nǔ e é nyí nǔ e é nyí nǔ e é nyí nǔ e é nyí nǔ e é nyí nǔ e é nyí é\/\/ >>> sort_array([1, 5, 2, 3, 4])\n\/\/ [1, 2, 3, 4, 5]\n\/\/ >>> sort_array([-2, -3, -4, -5, -6])\n\/\/ [-6, -5, -4, -3, -2]\n\/\/ >>> sort_array([1, 0, 2, 3, 4])\n\/\/ [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n","canonical_solution":"function sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const countOnes = (n: number) => n.toString(2).replace(\/0\/g, \"\").length;\n        const numOnesA = countOnes(a);\n        const numOnesB = countOnes(b);\n\n        if (numOnesA !== numOnesB) {\n            return numOnesA - numOnesB;\n        } else {\n            return a - b;\n        }\n    });\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"},{"task_id":"HumanEval_117","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/Akpàkpà: a sixu ɖɔ ɖɔ xò e è nɔ dó ɔ́ ɖó wlan kpo tɛn kpo kɛɖɛ.\/\/Enyi wèmá ɔ́ ɖò mɛ̀ ɔ́, azɔ̀ ɔ́ ɖó na lɛ́ lɛ́ wá ɖó nùɖé ɖò mɛ̀ ǎ.\/\/n xó e nɔ ɖò wuntun ɔ mɛ lɛ é, bɔ xógbe enɛ lɛ nɔ wá ɖò wuntun ɔ mɛ s. \/\/azɔ̀ e nɔ́ lɛ́ yí xókwín e ɖò wuntun s mɛ lɛ́ɛ bǐ sín nùxwásá ɖé dó é\/\/Nú è na wlan wuntun s kpo nùxwlémɛ nùjɔnǔ tɔn n kpo ɔ, è na byɔ we ɖɔ a ni bló nǔ elɔ lɛ \/\/ >>> select_words(\"Mary had a little lamb\", 4)\n\/\/ [\"little\"]\n\/\/ >>> select_words(\"Mary had a little lamb\", 3)\n\/\/ [\"Mary\", \"lamb\"]\n\/\/ >>> select_words(\"simple white space\", 2)\n\/\/ []\n\/\/ >>> select_words(\"Hello world\", 4)\n\/\/ [\"world\"]\n\/\/ >>> select_words(\"Uncle sam\", 3)\n\/\/ [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n","canonical_solution":"function select_words(s: string, n: number): string[] {\n    const isConsonant = (char: string): boolean => {\n        const vowels = 'aeiouAEIOU';\n        return !vowels.includes(char) && \/[a-zA-Z]\/.test(char);\n    };\n\n    const words = s.split(' ');\n    const result: string[] = [];\n\n    for (const word of words) {\n        const consonantCount = [...word].filter(isConsonant).length;\n        if (consonantCount === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"},{"task_id":"HumanEval_118","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/Mi sixu ɖɔ ɖɔ wuntun e è na é ɔ na ɖó wuntun e è nɔ zán dó wlan xókwin Eŋlisi tɔn lɛ é kɛɖɛ.\/\/mɔ̀ xókwin ɖé ɖò xókwin ɔ mɛ bɔ é sɔgbe xá nǔ e ɖò jǐ é.\/\/Akɔmasɔgbe ɖo nukɔnmɛ kpo gudo kpo ɔ e nɔ xa ǎ. Bo lɛ́ sɔ́ mɛ e ma nyí mɛ ǎ é.\/\/kpɔnnú wè sín akpáxwé ɖisixwé xó ɔ tɔn (wùnnúmɛ e nɔ dó nǔ e ɖò xó ɔ mɛ é wu).\/\/È na xó ɖé mi. Azɔ̌ mitɔn wɛ nyí ɖɔ mi na mɔ xókwin e ɖò voxo e ɖò we mɛ é.\/\/ >>> get_closest_vowel(\"yogurt\")\n\/\/ \"u\"\n\/\/ >>> get_closest_vowel(\"FULL\")\n\/\/ \"U\"\n\/\/ >>> get_closest_vowel(\"quick\")\n\/\/ \"\"\n\/\/ >>> get_closest_vowel(\"ab\")\n\/\/ \"\"\nfunction get_closest_vowel(word: string): string {\n","canonical_solution":"function get_closest_vowel(word: string): string {\n    const vowels = new Set<string>(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.has(word[i]) && !vowels.has(word[i - 1]) && !vowels.has(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return '';\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"},{"task_id":"HumanEval_119","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/E na lɛ́ lɛ́ lɛ́ yí gbè nú xógbe 'Ɛɛn' nú ali ɖé ɖò finɛ bo na bló nùjlɛdonǔwu ɖagbe ɖé ɔ, bo lɛ́ lɛ́ yí gbè nú xógbe 'Ée' nú é ma nyí mɔ̌ ǎ ɔ.\/\/\"()) \" nyí ǎ.\/\/e nɔ ɖo jlɛjε. ε: xɔntɔn '(()))) ɔ nyɔ, hwenu e xɔntɔn \/\/Xò S è nɔ ɖɔ é nyɔ́ nú è na sɔ́ xò S mɛ̀ lɛ́ɛ bǐ dó ganmɛ \/\/e na bɔ è na mɔ xɛ ɖagbe ɖé é.\/\/azɔ̌ towe wɛ nyí ɖɔ a na kpɔ́n ɖɔ è na kpéwú bo dó wlan xɛ wè lɛ dó wlan mɛ à jí\/\/wema e ɖò mɛ é ɖokpo ɖokpo wɛ nɔ nyí \" (\") \"\/\/e na wlan wlan we, wlan we lɛ bi ɖo hunhun mɛ\/\/ >>> match_parens([\"()(\", \")\"])\n\/\/ \"Yes\"\n\/\/ >>> match_parens([\")\", \")\"])\n\/\/ \"No\"\nfunction match_parens(lst: string[]): string {\n","canonical_solution":"function match_parens(lst: string[]): string {\n    const canFormGoodString = (s1: string, s2: string): boolean => {\n        let balance = 0;\n\n        \/\/ Check s1 followed by s2\n        for (const char of s1 + s2) {\n            if (char === '(') balance++;\n            else if (char === ')') balance--;\n\n            if (balance < 0) return false; \/\/ More closing than opening\n        }\n        if (balance === 0) return true; \/\/ Balanced\n\n        balance = 0;\n        \/\/ Check s2 followed by s1\n        for (const char of s2 + s1) {\n            if (char === '(') balance++;\n            else if (char === ')') balance--;\n\n            if (balance < 0) return false; \/\/ More closing than opening\n        }\n\n        return balance === 0; \/\/ Balanced\n    };\n\n    return canFormGoodString(lst[0], lst[1]) ? 'Yes' : 'No';\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = match_parens;\n  assert.deepEqual(candidate([\"()(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \")\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(())\", \"())())\"]),\"No\");\n  assert.deepEqual(candidate([\")())\", \"(()()(\"]),\"Yes\");\n  assert.deepEqual(candidate([\"(())))\", \"(()())((\"]),\"Yes\");\n  assert.deepEqual(candidate([\"()\", \"())\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(\", \"()))()\"]),\"Yes\");\n  assert.deepEqual(candidate([\"((((\", \"((())\"]),\"No\");\n  assert.deepEqual(candidate([\")(()\", \"(()(\"]),\"No\");\n  assert.deepEqual(candidate([\")(\", \")(\"]),\"No\");\n  assert.deepEqual(candidate([\"(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \"(\"]),\"Yes\");\n}\n\ntest();"},{"task_id":"HumanEval_120","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndo 1: \/\/e nɔ nyí k bɔ è nɔ mɔ nú nùjlɛ́kpo k ɖò arr mɛ é.\/\/E na sɔ́ nùxwléma e nyí nùjlɛ́kpá lɛ́ɛ sín nǔ lɛ́ɛ dó nùxwléma e nyí nùjlɛ́kpá ɖagbe lɛ́ɛ k ɔ́ jí ɔ́, lɛ́ yí nùxwléma e è ɖè ɖó alɔkpa jí é ɖé dó.\/\/ >>> maximum([-3, -4, 5], 3)\n\/\/ [-4, -3, 5]\n\/\/ Example 2:\n\/\/ >>> maximum([4, -4, 4], 2)\n\/\/ [4, 4]\n\/\/ Example 3:\n\/\/ >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\/\/ [2]\n\/\/ Note:\n\/\/ 1. The length of the array will be in the range of [1, 1000].\n\/\/ 2. The elements in the array will be in the range of [-1000, 1000].\n\/\/ 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n","canonical_solution":"function maximum(arr: number[], k: number): number[] {\n    \/\/ Sort the array in descending order and then take the first k elements\n    const sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k).sort((a, b) => a - b);\n}\n\n\/\/ Example usage:\n\/\/ console.log(maximum([-3, -4, 5], 3)); \/\/ Output: [-4, -3, 5]\n\/\/ console.log(maximum([4, -4, 4], 2)); \/\/ Output: [4, 4]\n\/\/ console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); \/\/ Output: [2]","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"},{"task_id":"HumanEval_121","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú \/\/E na bo na lɛ́ ná nùjlɛ́kpó e nyí nùjlɛ́kpó e ma nyí nǔtí ǎ é ɔ́, lɛ́ yí nùjlɛ́kpó nǔ e nyí nǔtí ǎ lɛ́ɛ bǐ tɔn e ɖò tɛn e nyí nǔtí ǎ lɛ́ɛ é mɛ é.\/\/ >>> solution([5, 8, 7, 1])\n\/\/ 12\n\/\/ >>> solution([3, 3, 3, 3, 3])\n\/\/ 9\n\/\/ >>> solution([30, 13, 24, 321])\n\/\/ 0\nfunction solution(lst: number[]): number {\n","canonical_solution":"function solution(lst: number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length; i += 2) {  \/\/ Traverse even indices\n        if (lst[i] % 2 !== 0) {  \/\/ Check if the element is odd\n            sum += lst[i];\n        }\n    }\n    return sum;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"},{"task_id":"HumanEval_122","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/nǔ e nɔ́ nyí nǔ e ɖò nǔ e nyí nǔ nukɔntɔn ɔ́ mɛ é sín nǔ e nɔ nyí nǔ e nyí nǔ nukɔntɔn ɔ́ mɛ é sín nǔ e nɔ nyí nǔ e nyí nǔ nukɔntɔn ɔ́ mɛ é sín nǔ e nɔ nyí nǔ nukɔntɔn ɔ́ mɛ é sín nǔ e nyí nǔ nukɔntɔn ɔ́ mɛ é sín nǔ e nyí nǔ nukɔntɔn ɔ́ mɛ é.\/\/E na bo na w'azɔ̌n e nyí nùɖé ǎ é ɖé lɛ́ɛ ɔ́, bo na w'azɔ̌n e nyí nùɖé ǎ lɛ́ɛ ɔ́, bo na lɛ́ w'azɔ̌n e nyí nùɖé ǎ lɛ́ɛ é ɔ́, lɛ́ kɔ yì \/\/ >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\/\/ 24\n\/\/ Constraints:\n\/\/ 1. 1 <= len(arr) <= 100\n\/\/ 2. 1 <= k <= len(arr)\nfunction add_elements(arr: number[], k: number): number {\n","canonical_solution":"function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"},{"task_id":"HumanEval_123","nl":"fon_Latn","pl":"ts","prompt":"\/\/get_odd_collatz(5) lɛ́ lɛ́ kɔ́ [1, 5] # Akɔ́n e è nɔ ylɔ́ ɖɔ collatz nú 5 ɔ́ nyí [5, 16, 8, 4, 2, 1], enɛ ɔ́, nùxwléma e nyí kwín ɖokpo lɛ́ɛ wɛ nyí 1 kpo 5. \/\/Ði kpɔ́ndéwú ɔ: \/\/2. è ɖè nùxwlé lɛ́ɛ ɖó alɔkpa ɖò jíjló jí.\/\/1. Collatz(1) wɛ nyí [1]. \/\/Akpádo:\/\/xìnxín + 1 ɔ́' è nɔ ɖɔ ɖɔ nú n' ɖò nǔ ɖebǔ mɛ ɔ' nù lɛ́ɛ nɔ́ yì 1 hwebǐnu.\/\/Nú akpáxwé e jɛ nukɔn é nyí nǔmaɖinǔ ɔ, akpáxwé e bɔ d'é jí ɔ nyí 3 azɔn ée jɛ nukɔn é tɔn.\/\/nukɔnmɛ tɔn ɔ nɛ: enyi nukɔnmɛ tɔn ɔ nyí ganmɛ ɔ, nukɔnmɛ tɔn ɔ na nyí akpáxwé ɖokpo ɔ tɔn\/\/e na nyi: bɛ ɔ kpodo xwɛ e nyi nuɖevi n lɛ kpo. Enɛ ɔ gudo ɔ, è na mɔ mɛ ɖokpo ɖokpo sín \/\/Collatz sín nùxwlémɛ ɔ wɛ nyí nùxwlémɛ ɖò matimátikunmɛ mɛ bɔ é kan nǔɖevonu ɖé wu.\/\/E na mɔ nùxwléma ɖagbe ɖé n ɔ, lɛ́ kɔ́n nùxwléma e è ɖè ɖó alɔkpa tɔn lɛ é ɖó ɖò nùxwléma e ɖò collatz sín tito jí lɛ é mɛ. \/\/ >>> get_odd_collatz(5)\n\/\/ [1, 5]\nfunction get_odd_collatz(n: number): number[] {\n","canonical_solution":"function get_odd_collatz(n: number): number[] {\n    const collatzSequence: number[] = [];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatzSequence.push(n);\n        }\n        if (n % 2 === 0) {\n            n = n \/ 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    \/\/ Include 1 in the sequence if it's odd, as per standard collatz sequence\n    collatzSequence.push(1);\n    return collatzSequence.sort((a, b) => a - b);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_odd_collatz;\n  assert.deepEqual(candidate(14),[1, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(5),[1, 5]);\n  assert.deepEqual(candidate(12),[1, 3, 5]);\n  assert.deepEqual(candidate(1),[1]);\n}\n\ntest();"},{"task_id":"HumanEval_124","nl":"fon_Latn","pl":"ts","prompt":"\/\/4. Azǎn ɔ ɖó na ɖò wuntun elɔ mɛ: mm-dd-yyyy \/\/3. sun lɛ na nɔ hwe na 1 bo na nɔ syɛn na 12 ǎ.\/\/2. ě sɔ́ azǎn lɛ́ɛ ɖò azǎn 1 jí ǎ, alǒ hú azǎn 31 ɖò sun 1,3,5,7,8,10,12 lɛ́ɛ mɛ ǎ. ě sɔ́ azǎn lɛ́ɛ ɖò azǎn 1 jí ǎ, abǐ hú azǎn 30 ɖò sun 4,6,9,11 lɛ́ɛ mɛ ǎ. ě sɔ́ azǎn lɛ́ɛ ɖò azǎn 1 jí ǎ, abǐ hú azǎn 29 ɖò sun 2 mɛ ǎ.\/\/1. Azǎn ɔ́ ɖò mɛ̀ ă.\/\/Azǎn ɔ na nyí gbè ɖagbe nú è na bló sɔgbe xá nugbodòdó elɔ lɛ bǐ: \/\/e na lɛ́ yí gbè nú nugbǒ nú azǎn ɔ sɔgbe é, enyi é ma nyí mɔ̌ ǎ ɔ é na lɛ́ yí gbè nú adingban. \/\/A ɖo na wlan azɔ na ɖe hun hun e è na wlan ɔ bo ɖɔ \/\/ >>> valid_date(\"03-11-2000\")\n\/\/ true\n\/\/ >>> valid_date(\"15-01-2012\")\n\/\/ false\n\/\/ >>> valid_date(\"04-0-2040\")\n\/\/ false\n\/\/ >>> valid_date(\"06-04-2020\")\n\/\/ true\n\/\/ >>> valid_date(\"06\/04\/2020\")\n\/\/ false\nfunction valid_date(date: string): boolean {\n","canonical_solution":"function valid_date(date: string): boolean {\n    \/\/ Check if the date is empty\n    if (date.trim() === \"\") return false;\n\n    \/\/ Split the date string into components\n    const dateParts = date.split(\"-\");\n    if (dateParts.length !== 3) return false;\n\n    const [monthStr, dayStr, yearStr] = dateParts;\n\n    \/\/ Validate each part of the date\n    const month = parseInt(monthStr, 10);\n    const day = parseInt(dayStr, 10);\n    const year = parseInt(yearStr, 10);\n\n    \/\/ Check if all parts are valid numbers\n    if (isNaN(month) || isNaN(day) || isNaN(year)) return false;\n\n    \/\/ Check the month range\n    if (month < 1 || month > 12) return false;\n\n    \/\/ Check the day range based on the month\n    if ([1, 3, 5, 7, 8, 10, 12].includes(month)) {\n        if (day < 1 || day > 31) return false;\n    } else if ([4, 6, 9, 11].includes(month)) {\n        if (day < 1 || day > 30) return false;\n    } else if (month === 2) {\n        if (day < 1 || day > 29) return false;\n    }\n\n    \/\/ All checks passed\n    return true;\n}\n\n\/\/ Example usage\nconsole.log(valid_date(\"03-11-2000\")); \/\/ true\nconsole.log(valid_date(\"15-01-2012\")); \/\/ false\nconsole.log(valid_date(\"04-0-2040\"));  \/\/ false\nconsole.log(valid_date(\"06-04-2020\")); \/\/ true\nconsole.log(valid_date(\"06\/04\/2020\")); \/\/ false","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_125","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú \/\/wlan, wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ => wlan ɔ\/\/e ɖó na klán ɖò xwɛ́ ',' nú xwɛ́ ɖě ma ɖò ǎ ɔ, a ɖó na lɛ́ lɛ́ nú xwɛ́ kpɛví kpɛví e ɖò xwɛ́ kpɛví mɛ lɛ́ɛ ɖò xwɛ́ kpɛví mɛ é ɖò xwɛ́ kpɛví mɛ.\/\/nùkwín xókwín ɖé ɔ́, na lɛ́ lɛ́ lɛ́ kɔ̀ xókwín ɖé lɛ́ɛ dó nùkwín e è má ɖó nùkwín lɛ́ɛ é jí, nú nùkwín lɛ́ɛ ɖě ma ɖò wèmá e a sɔ́ ɖó ɔ́ mɛ ǎ ɔ́.\/\/ >>> split_words(\"Hello world!\")\n\/\/ [\"Hello\", \"world!\"]\n\/\/ >>> split_words(\"Hello,world!\")\n\/\/ [\"Hello\", \"world!\"]\n\/\/ >>> split_words(\"abcdef\")\n\/\/ 3\nfunction split_words(txt: string): string[] | number {\n","canonical_solution":"function split_words(txt: string): string[] | number {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    }\n    if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    }\n    const oddOrderCount = [...txt].reduce((count, char) => {\n        const charCode = char.charCodeAt(0) - 'a'.charCodeAt(0);\n        if (char === char.toLowerCase() && charCode % 2 === 1) {\n            return count + 1;\n        }\n        return count;\n    }, 0);\n\n    return oddOrderCount;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"},{"task_id":"HumanEval_126","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú \/\/nùmε, lɛkɔ false. Nɔ kpɔn ɖɔ nùmε e nyi do ǎ bo na nɔ nyi nuɖeji kpowun.\/\/nú nǔ lɛ́ɛ ɖò jí jɛ jí ɔ́, nú nǔ lɛ́ɛ ɖò jí jɛjí hú mɛ ɖokpó ɔ́ ɔ́,\/\/Nú è na sɔ́ nùjlɛ́jlɛ́ lɛ́ɛ dó nùxwásá ɔ́ mɛ ɔ́, è na lɛ́ sɔ́ yě dó nùxwásá ɔ́ mɛ à jí ǎ.\/\/ >>> is_sorted([5])\n\/\/ true\n\/\/ >>> is_sorted([1, 2, 3, 4, 5])\n\/\/ true\n\/\/ >>> is_sorted([1, 3, 2, 4, 5])\n\/\/ false\n\/\/ >>> is_sorted([1, 2, 3, 4, 5, 6])\n\/\/ true\n\/\/ >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n\/\/ true\n\/\/ >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n\/\/ false\n\/\/ >>> is_sorted([1, 2, 2, 3, 3, 4])\n\/\/ true\n\/\/ >>> is_sorted([1, 2, 2, 2, 3, 4])\n\/\/ false\nfunction is_sorted(lst: number[]): boolean {\n","canonical_solution":"function is_sorted(lst: number[]): boolean {\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n        if (lst[i] === lst[i + 1]) {\n            let count = 1;\n            while (lst[i + count] === lst[i]) {\n                count++;\n                if (count > 2) return false;\n            }\n        }\n    }\n    return true;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"},{"task_id":"HumanEval_127","nl":"fon_Latn","pl":"ts","prompt":"\/\/[kpɔnú\/kpɔnú] kpɔ́n: \/\/Enyi tɛnkpɔn wè lɛ ma ɖò nǔ ɖokpo ɔ mɛ ǎ ɔ, lɛ́ kɔ nú \"ÉÒ\".\/\/enyi é ma nyí mɔ̌ ǎ ɔ, lɛ́ kɔ nú \"ÉÒ\".\/\/Nú wuntun ɔ sín hùn nyí nùjlɛ́jlɛ́ nukɔn nukɔntɔn ɔ, lɛ́ yí gbè nú \"YES\", \/\/e nɔ nyí 1 é nyí nùjlɛ́kpo nukɔn nukɔntɔn ɖé ǎ.\/\/Kpɔ́ndéwú ɔ, fí e tɛnkpɔn lɛ (1, 3), (2, 4) nɔ gbɔn é wɛ nyí (2, 3) \/\/nùxwásá ɖé wɛ nyí númɛ̀ nùjlɛ́jlɛ́ tɔn.\/\/azɔ towe wɛ nyí ɖɔ a na ɖɔ ɖɔ̀ ɖɔ̀ we enɛ lɛ sín hùn e ɖekpo wɛ é nyí é\/\/Ɖó nú tɛnkpɔn ɖokpo ɖokpo ɔ, è nɔ ɖi ɖɔ tɛnkpɔn ɔ sín bɛ́ wɛ nyí kpɛví alǒ cí fí e é wá yì é.\/\/e nɔ lɛ́ ɖó fí e è jɛ nǔ lɛ é kpo fí e è wá fó é kpo.\/\/Hweɖokpo e è na lɛ é na nyí mɛ̀, enɛ ɔ́ wɛ nyí ɖɔ hweɖokpo ɔ (bɛ́, fó) \/\/fí e tɛnkpɔnmɛ ɖokpo ɖokpo nyí nùxwɛ́ e nyí nùjlɛ́kpɔnmɛ lɛ é sín wè é. Cɔ́nkpɔnmɛ ɔ, tɛnkpɔnmɛ = (bɛ́, fó) = (1, 2).\/\/È na we tɛn wè,\/\/ >>> intersection([1, 2], [2, 3])\n\/\/ \"NO\"\n\/\/ >>> intersection([-1, 1], [0, 4])\n\/\/ \"NO\"\n\/\/ >>> intersection([-3, -1], [-5, 5])\n\/\/ \"YES\"\nfunction intersection(interval1: [number, number], interval2: [number, number]): string {\n","canonical_solution":"function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num <= 3) return true; \/\/ 2 and 3 are prime numbers\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction intersection(interval1: [number, number], interval2: [number, number]): string {\n    const start = Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1], interval2[1]);\n\n    if (start > end) {\n        return \"NO\";\n    }\n\n    const length = end - start;\n\n    return isPrime(length) ? \"YES\" : \"NO\";\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\");\n}\n\ntest();"},{"task_id":"HumanEval_128","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/Akpá: é nɔ́ lɛ́ kɔ̀n nǔ e è ma ɖɔ ǎ é nú nù nùɖé ǎ lɛ́ɛ.\/\/nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú nú\/\/nùxwásá e nyí nùjlɛ́kpá lɛ́ɛ sín nùjlɛ́kpá e è sɔ́ nùjlɛ́kpá lɛ́ɛ bǐ sín nǔkún dó ná é \/\/e na lɛ́ lɛ́ yí nùjlɛ́n e è ná lɛ́ ɖó lɛ́ɛ é sín nùjlɛ́n ɔ́ dó nùjlɛ́n ɔ́ mɛ.\/\/ >>> prod_signs([1, 2, 2, -4])\n\/\/ 9\n\/\/ >>> prod_signs([0, 1])\n\/\/ 0\n\/\/ >>> prod_signs([])\n\/\/ undefined\nfunction prod_signs(arr: number[]): number | undefined {\n","canonical_solution":"function prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n\n    let sumOfMagnitudes = 0;\n    let productOfSigns = 1;\n\n    for (const num of arr) {\n        sumOfMagnitudes += Math.abs(num);\n        productOfSigns *= Math.sign(num);\n    }\n\n    return sumOfMagnitudes * productOfSigns;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();"},{"task_id":"HumanEval_129","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/E nɔ lɛ́ yí nùɖé lɛ́ɛ sín nùxwlé lɛ́ɛ dó nùxwlé lɛ́ɛ jí bɔ ali e jí è nɔ gbɔn dín é nɔ́ lɛ́ kɔ́n.\/\/E nɔ mɔ ɖɔ xósin ɔ nɔ nyí ɖokpo ɔ.\/\/lst_A[j] = lst_B[j].\/\/e nɔ nyi lst_A[i] < lst_B[i] bo bo na j (1 <= j < i) ɔ e nɔ nyi \/\/hú lst_B, ɖò xó ɖevo mɛ ɔ, nùxwlé lɛ́ɛ ɖò nùxwlé lɛ́ɛ mɛ i (1 <= i <= k) \/\/lst_A kpo lst_B kpo wɛ mǐ na ylɔ́ ɖɔ lst_A, lst_A ɔ́, xókwin tɔn lɛ́ɛ nɔ́ ɖɔ nǔ kpɛɖé.\/\/e na bló nùxwlé lɛ́ɛ ɔ́, nǔ e è na wlan dó xú lɛ́ɛ jí ɔ́, nǔ e è na wlan dó xú lɛ́ɛ jí ɔ́ wɛ nyí ɖɔ A kpo B kpo ná yì \/\/Ali e nyí A (e lín dó k é) ɔ è nɔ mɔ ɖɔ é vlɔ́ hú ali e nyí B (e lín dó k é) nú \/\/A SƆ́ na bú ɖò fí e è nɔ mɔ nǔ ɖè é ǎ.\/\/é nɔ ɖó na nyí nǔ e è sixu ɖè yeɖée sín mɛ é ǎ).\/\/Mi nywɛ ɖɔ ali e nyi kpodo ayi kpo kε ɔ na ɖɔ ɖɔ mi na yi bo kpɔ́n bunɔ k (e ma nyí ɖɔ mi na kpɔ́n bunɔ \/\/azɔn ɔ.\/\/é ɖɔ ɖɔ, a sixu yì nùvò e nɔ ɖó xósusu ɖokpo ɔ xá towe lɛ é mɛ\/\/bo ɖo tɛn ɖokpo ɖokpo mɛ ɔ a sixu yì tɛn e nɔ sɛkpɔ mɛ é ɖokpo ɖokpo mɛ,\/\/A na mɔ ali e na yì nukɔn ɖò ali ɔ jí é kpodo ali e na yì nukɔn ɖò ali ɔ jí é kpodo ali e na yì nukɔn ɖò ali ɔ jí é kpodo ali e na yì nukɔn ɖò ali ɔ jí é kpodo ali e na yì nukɔn ɖò ali ɔ jí é kpo\/\/e nɔ tɔ́n azɔn ɖokpo ɖò xɔ lɛ́ɛ mɛ ɖò nùxwásá ɔ́ mɛ.\/\/azɔmε ɖokpo ɖokpo ɖo nuvi ɔ mε ɔ, e nɔ hɛn jijɔ ɖokpo ɖokpo ɖo nuvi ɔ mε.\/\/E na bo na w'azɔ̌n e ɖó xota N kpo kpo kpo kpo kpo kpo (N >= 2) bo na ɖó nùjlɛ́kpá e nyí nǔ ɖagbe é k ɔ, \/\/ >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n\/\/ [1, 2, 1]\n\/\/ >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n\/\/ [1]\nfunction minPath(grid: number[][], k: number): number[] {\n","canonical_solution":"function minPath(grid: number[][], k: number): number[] {\n    const N = grid.length;\n    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n    \n    type State = {path: number[], x: number, y: number, len: number};\n    \n    \/\/ Compare two paths lexicographically\n    const isLess = (a: number[], b: number[]): boolean => {\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] !== b[i]) return a[i] < b[i];\n        }\n        return false;\n    };\n\n    let bestPath: number[] = new Array(k).fill(Number.MAX_VALUE);\n    \n    \/\/ DFS function to explore paths of length k\n    function dfs(x: number, y: number, path: number[], len: number): void {\n        if (len === k) {\n            if (isLess(path, bestPath)) {\n                bestPath = [...path];\n            }\n            return;\n        }\n        \n        for (const [dx, dy] of directions) {\n            const nx = x + dx;\n            const ny = y + dy;\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                dfs(nx, ny, [...path, grid[nx][ny]], len + 1);\n            }\n        }\n    }\n    \n    \/\/ Try starting from each cell\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n            dfs(i, j, [grid[i][j]], 1);\n        }\n    }\n    \n    return bestPath;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minPath;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]);\n  assert.deepEqual(candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]);\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]);\n  assert.deepEqual(candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]);\n  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]);\n  assert.deepEqual(candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]);\n  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n  assert.deepEqual(candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);\n  assert.deepEqual(candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);\n  assert.deepEqual(candidate([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n  assert.deepEqual(candidate([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_130","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/nùxwásá n + 1 nukɔntɔn lɛ́ɛ ɖò tito Tribonacci tɔn mɛ.\/\/è na na mi nùxwléma e nyí nùɖé ǎ é n, mi ɖó na lɛ́ yí nùxwléma e nyí nùxwléma ɔ tɔn é\/\/= 2 + 3 + 3 = 8 \/\/3ì3í3÷í3 ôîðìû = 3ì3í3÷í3 ôîðìû + 3ì3í3÷í3 ôîðìû + 3ì3í3÷í3 ôîðìû (4)\/\/tri(4) = 3 \/\/tri(2) = 1 + (2 \/ 2) = 2 \/\/Ði kpɔ́ndéwú ɔ: \/\/tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), enyi n nyí nùxwlé. \/\/tri ((n) = 1 + n \/ 2, enyi n nyí mɛ wè.\/\/tri(1) = 3 \/\/Tribonacci sín nùxwlé lɛ́ɛ nɔ́ nyí:\/\/Amɔ̌, nǔ e mɛ lɛ ma tuùn ǎ ɔ wɛ nyí tito Tribonacci tɔn.\/\/Mɛ bǐ tuùn nǔ e è nɔ ylɔ ɖɔ Fibonacci sín nùjlɛ́jlɛ́ é, mɛxwématɔ́n lɛ́ɛ kplɔ́n nǔ dó nǔ enɛ jí ɖò xwè kanweko ɔ mɛ.\/\/ >>> tri(3)\n\/\/ [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n","canonical_solution":"function tri(n: number): number[] {\n    const tribonacci: number[] = [1, 3]; \/\/ Initialize with first two definite values\n\n    function calculateTribonacci(index: number): number {\n        if (index < tribonacci.length) {\n            return tribonacci[index];\n        }\n\n        let result: number;\n        if (index % 2 === 0) {\n            result = 1 + index \/ 2;\n        } else {\n            result = calculateTribonacci(index - 1) + calculateTribonacci(index - 2) + calculateTribonacci(index + 1);\n        }\n\n        tribonacci[index] = result; \/\/ Memoize the result\n        return result;\n    }\n\n    for (let i = 0; i <= n; i++) {\n        calculateTribonacci(i);\n    }\n\n    return tribonacci.slice(0, n + 1);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_131","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/Zɔ́n 0 nú wèmá lɛ́ɛ bǐ nyí ganmɛ. \/\/Ɖó è na wlan nùjlɛ́kpá ɖagbe ɖé n ɔ, lɛ́ kɔ́n nùjlɛ́kpá e è nɔ zán nú nùjlɛ́kpá e nyí nǔ ɖokpo lɛ é sín nùjlɛ́kpá. \/\/ >>> digits(1)\n\/\/ 1\n\/\/ >>> digits(4)\n\/\/ 0\n\/\/ >>> digits(235)\n\/\/ 15\nfunction digits(n: number): number {\n","canonical_solution":"function digits(n: number): number {\n    let product = 1;\n    let hasOdd = false;\n    \n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n = Math.floor(n \/ 10);\n    }\n\n    return hasOdd ? product : 0;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"},{"task_id":"HumanEval_132","nl":"fon_Latn","pl":"ts","prompt":"\/\/e ɖo atɛ ɖokpo ɖo nukun tɔn ɔ mɛ ɔ e nɔ ɖo yeɖée mɛ.\/\/azɔ̀ ɔ́ ɖó na lɛ́ kɔ́n true nú è ɖò nùɖé lɛ́ɛ wlan wɛ ɖò wuntun lɛ́ɛ mɛ ɔ́ jɛ́n é ná nyí.\/\/Ðɔ azɔ̀ e nɔ yí xɛ̀n e nɔ ɖó wuntun lɛ́ɛ kɛɖɛ dó mɛ é.\/\/ >>> is_nested(\"[[]]\")\n\/\/ true\n\/\/ >>> is_nested(\"[]]]]]]][[[[[]\")\n\/\/ false\n\/\/ >>> is_nested(\"[][]\")\n\/\/ false\n\/\/ >>> is_nested(\"[]\")\n\/\/ false\n\/\/ >>> is_nested(\"[[][]]\")\n\/\/ true\n\/\/ >>> is_nested(\"[[]][[\")\n\/\/ true\nfunction is_nested(string: string): boolean {\n","canonical_solution":"function is_nested(string: string): boolean {\n    let depth = 0;\n    let hasNesting = false;\n\n    for (let char of string) {\n        if (char === '[') {\n            depth++;\n            if (depth > 1) {\n                hasNesting = true;\n            }\n        } else if (char === ']') {\n            if (depth > 0) {\n                depth--;\n            } else {\n                \/\/ More closing brackets than opening\n                return false;\n            }\n        }\n    }\n\n    \/\/ Return true if there was at least one nested bracket and all brackets are matched\n    return hasNesting && depth === 0;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_133","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/mi na dó lɛ́ɛ́n nǔ lɛ́ɛ bǐ dó ta ɔ́ jí jɛ ta ɔ́ jí jɛ nukɔn.\/\/A na lɛ́ yí nùjlɛ́kpo e è sɔ́ dó zɔ́n amyɔ e è ná lɛ́ ná é sín nǔ lɛ́ɛ ɖóɖó, \/\/È na nùjlɛ́jlɛ́ nùjlɛ́jlɛ́ ɖé lɛ́ɛ we.\/\/ >>> lst([1.0, 2.0, 3.0])\n\/\/ 14\n\/\/ >>> lst([1.0, 4.0, 9.0])\n\/\/ 98\n\/\/ >>> lst([1.0, 3.0, 5.0, 7.0])\n\/\/ 84\n\/\/ >>> lst([1.4, 4.2, 0.0])\n\/\/ 29\n\/\/ >>> lst([-2.4, 1.0, 1.0])\n\/\/ 6\nfunction sum_squares(lst: number[]): number {\n","canonical_solution":"function sum_squares(lst: number[]): number {\n    return lst.map(Math.ceil).reduce((sum, num) => sum + num * num, 0);\n}\n\n\/\/ Example usage:\n\/\/ console.log(sum_squares([1.0, 2.0, 3.0])); \/\/ Output: 14\n\/\/ console.log(sum_squares([1.0, 4.0, 9.0])); \/\/ Output: 98\n\/\/ console.log(sum_squares([1.0, 3.0, 5.0, 7.0])); \/\/ Output: 84\n\/\/ console.log(sum_squares([1.4, 4.2, 0.0])); \/\/ Output: 29\n\/\/ console.log(sum_squares([-2.4, 1.0, 1.0])); \/\/ Output: 6","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);\n  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();"},{"task_id":"HumanEval_134","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/Akpá: \"gbe\" ɔ wuntun lɛ sín ahwan wɛ bɔ è nɔ ɖe tɛn ɖó vo nú ye.\/\/xó ɖé sín akpáxwé wɛ, bɔ nǔ ɖevo lɛ bǐ nyí nǔvú.\/\/wèmá è è wèmá è è wèmá è è wèmá è è wèmá è è wèmá è è wèmá è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è è\/\/Ðɔ azɔ̀ e na lɛ́ yí gbè nú nugbǒ nú wuntun gudo tɔn ɔ́ \/\/ >>> check_if_last_char_is_a_letter(\"apple pie\")\n\/\/ false\n\/\/ >>> check_if_last_char_is_a_letter(\"apple pi e\")\n\/\/ true\n\/\/ >>> check_if_last_char_is_a_letter(\"apple pi e \")\n\/\/ false\n\/\/ >>> check_if_last_char_is_a_letter(\"\")\n\/\/ false\nfunction check_if_last_char_is_a_letter(txt: string): boolean {\n","canonical_solution":"function check_if_last_char_is_a_letter(txt: string): boolean {\n    if (txt.trim() === \"\") return false; \/\/ Handle empty or whitespace strings\n\n    \/\/ Trim the string to remove any trailing spaces\n    txt = txt.trim();\n\n    \/\/ Check if the last character is an alphabetical letter and ensure there's a space before it\n    const lastChar = txt.charAt(txt.length - 1);\n    const isAlpha = \/[a-zA-Z]\/.test(lastChar);\n\n    return isAlpha && txt.lastIndexOf(' ') === txt.length - 2;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_if_last_char_is_a_letter;\n  assert.deepEqual(candidate(\"apple\"),false);\n  assert.deepEqual(candidate(\"apple pi e\"),true);\n  assert.deepEqual(candidate(\"eeeee\"),false);\n  assert.deepEqual(candidate(\"A\"),true);\n  assert.deepEqual(candidate(\"Pumpkin pie \"),false);\n  assert.deepEqual(candidate(\"Pumpkin pie 1\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"eeeee e \"),false);\n  assert.deepEqual(candidate(\"apple pie\"),false);\n  assert.deepEqual(candidate(\"apple pi e \"),false);\n}\n\ntest();"},{"task_id":"HumanEval_135","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/nùjlɛdonǔwu lɛ́ɛ ɖò wè wè wè.\/\/nùɖé tíìn ǎ ɔ́, é ná lɛ́ kɔ́n -1.\/\/e nyi nuvεn e ɖo nukɔn tɔn tlolo ɔ a nyi nuvεn e nyi nukɔn tɔn tlolo ɔ a nyi nuvεn e ɖo nukɔn tɔn tlolo ɔ a.\/\/Ðɔ azɔ̀ e na lɛ́ lɛ́ sín nǔɖókpɔ́ e nyí nǔɖókpɔ́ ɖaxó hugǎn é ɖé sín nùɖé é\/\/ >>> can_arrange([1, 2, 4, 3, 5])\n\/\/ 3\n\/\/ >>> can_arrange([1, 2, 3])\n\/\/ -1\nfunction can_arrange(arr: number[]): number {\n","canonical_solution":"function can_arrange(arr: number[]): number {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"},{"task_id":"HumanEval_136","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/Nú nùɖé ma ɖò nùjlɛ́kpá nú nùɖé ǎ ɔ, é nɔ́ lɛ́ kɔ́n ɖɔ è kún tuùn ó.\/\/e nɔ ɖɔ nùxixa ɖagbe lɛ ɖò nùxwléma ɖé mɛ.\/\/nùxwléma ayihun lɛ́ɛ bǐ ɔ́' b' wɛ nyí kpɛví ɔ́\/\/Ðɔ azɔ̀ e nɔ lɛ́ yí nùxwlé (a, b) ɔ́, fí e 'a' nyí \/\/ >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n\/\/ [undefined, 1]\n\/\/ >>> largest_smallest_integers([])\n\/\/ [undefined, undefined]\n\/\/ >>> largest_smallest_integers([0])\n\/\/ [undefined, undefined]\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n","canonical_solution":"function largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n\n    for (let num of lst) {\n        if (num < 0) {\n            if (largestNegative === undefined || num > largestNegative) {\n                largestNegative = num;\n            }\n        } else if (num > 0) {\n            if (smallestPositive === undefined || num < smallestPositive) {\n                smallestPositive = num;\n            }\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_138","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú \/\/Kpɔ́n ɖɔ nùjlɛ́kpo n e è ná é ɔ è sixu wlan dó nùjlɛ́kpo e nyí nùjlɛ́kpo ɖagbe 4 é sín nǔxixa jí \/\/ >>> is_equal_to_sum_even(4)\n\/\/ false\n\/\/ >>> is_equal_to_sum_even(6)\n\/\/ false\n\/\/ >>> is_equal_to_sum_even(8)\n\/\/ true\nfunction is_equal_to_sum_even(n: number): boolean {\n","canonical_solution":"function is_equal_to_sum_even(n: number): boolean {\n    \/\/ The sum of 4 positive even numbers is always even and 8 is the smallest such sum (2 + 2 + 2 + 2).\n    \/\/ Hence, if n is greater than or equal to 8 and even, n can be expressed as the sum of 4 positive even numbers.\n    return (n >= 8) && (n % 2 === 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_equal_to_sum_even;\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),true);\n  assert.deepEqual(candidate(11),false);\n  assert.deepEqual(candidate(12),true);\n  assert.deepEqual(candidate(13),false);\n  assert.deepEqual(candidate(16),true);\n}\n\ntest();"},{"task_id":"HumanEval_139","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/fí e n > 0 ɖè é\/\/brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! \/\/Brazil tɔn ɔ e nɔ ɖɔ ɖɔ: \/\/ >>> special_factorial(4)\n\/\/ 288\n\/\/ The function will receive an integer as input and should return the special\n\/\/ factorial of this integer.\nfunction special_factorial(n: number): number {\n","canonical_solution":"function factorial(n: number): number {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nfunction special_factorial(n: number): number {\n    if (n <= 0) throw new Error(\"Input must be a positive integer\");\n    \n    let result = 1;\n    for (let i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    \n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n}\n\ntest();"},{"task_id":"HumanEval_140","nl":"fon_Latn","pl":"ts","prompt":"\/\/bo sɔ́ -  dó ɖyɔ́ tɛn e ɖò lɛ́ɛ bǐ\/\/bo enyi xwɛ ɖokpo ɖó tɛnvi wè e nɔ ɖò jijimɛ lɛ é hú ɔ, \/\/E na sɔ́ wèmá ɔ́ sín xɛ́ lɛ́ɛ bǐ dó wèmá e è nɔ ɖó wèmá e è nɔ ɖó wèmá e è nɔ ɖó wèmá e è nɔ ɖó wèmá e è nɔ ɖó wèmá e lɛ́ɛ é jí,\/\/ >>> fix_spaces(\" Example\")\n\/\/ \"Example\"\n\/\/ >>> fix_spaces(\" Example 1\")\n\/\/ \"Example_1\"\n\/\/ >>> fix_spaces(\" Example 2\")\n\/\/ \"_Example_2\"\n\/\/ >>> fix_spaces(\" Example 3\")\n\/\/ \"_Example-3\"\nfunction fix_spaces(text: string): string {\n","canonical_solution":"function fix_spaces(text: string): string {\n    \/\/ Trim leading and trailing spaces\n    let trimmedText = text.trim();\n\n    \/\/ Use a regular expression to replace all sequences of two or more spaces with \"-\"\n    let replacedText = trimmedText.replace(\/ {2,}\/g, '-');\n\n    \/\/ Replace remaining single spaces with underscores\n    replacedText = replacedText.replace(\/ \/g, '_');\n\n    return replacedText;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"),\"Example\");\n  assert.deepEqual(candidate(\"Mudasir Hanif \"),\"Mudasir_Hanif_\");\n  assert.deepEqual(candidate(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\");\n  assert.deepEqual(candidate(\"Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\");\n}\n\ntest();"},{"task_id":"HumanEval_141","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/- Hwe e ɖò dot ɔ gudo é ɖó na nyí ɖokpo ɖò elɔ lɛ mɛ: ['txt', 'exe', 'dll'] \/\/wèmá-wlámá Latɛ́n tɔn lɛ́ɛ ('a'-'z' kpo 'A'-'Z') \/\/- Wema e ɖò nukɔn nú dot ɔ ɖó na nyí nǔtí ǎ, bɔ é ka na bɛ́ ɖò wèmá  tɔn jí.\/\/- Hɔnkpɔn ɔ sín nyikɔ ɔ ɖ'akpá ɖokpo ɖokpo mɛ.'\/\/- Ðèñóíîê äîëæåí èìåòü íå áîëüøå 3 çíà÷åê (\"0\" - \"9\"). \/\/e nɔ kpé: \/\/Akɔɖε ɔ sín nyikɔ nɔ nyí ɖagbe enyi bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na bo na.\/\/'Ɛɛn' nú nyikɔ ɔ sɔgbe, bo na lɛ́ lɛ́ yí gbè nú 'Ée' nú é ma sɔgbe ǎ.\/\/Ðɔ azɔ̀ e nɔ yí wèmá e nɔ ɖè nùxwásá ɔ sín nyikɔ xlɛ́ é, bo nɔ lɛ́ lɛ́ kɔ́n \/\/ >>> file_name_check(\"example.txt\")\n\/\/ \"Yes\"\n\/\/ >>> file_name_check(\"1example.dll\")\n\/\/ \"No\"\nfunction file_name_check(file_name: string): string {\n","canonical_solution":"function file_name_check(file_name: string): string {\n    \/\/ Split the file name into name and extension based on the dot\n    const parts = file_name.split('.');\n    \n    \/\/ Check if there's exactly one dot\n    if (parts.length !== 2) {\n        return 'No';\n    }\n    \n    const [name, extension] = parts;\n    \n    \/\/ Check if the substring before the dot is not empty and starts with a latin letter\n    if (name.length === 0 || !\/^[a-zA-Z]\/.test(name)) {\n        return 'No';\n    }\n    \n    \/\/ Check if the number of digits in the name is not more than three\n    const digitCount = (name.match(\/\\d\/g) || []).length;\n    if (digitCount > 3) {\n        return 'No';\n    }\n    \n    \/\/ Check if the extension is one of the valid options\n    const validExtensions = ['txt', 'exe', 'dll'];\n    if (!validExtensions.includes(extension)) {\n        return 'No';\n    }\n    \n    \/\/ All conditions are met, the file name is valid\n    return 'Yes';\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\");\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"_Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\/this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\");\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"_f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"},{"task_id":"HumanEval_142","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/ɖyɔ́ nùjlɛ́n lɛ́ɛ ɖò nùjlɛ́n ɔ́ mɛ bɔ nùjlɛ́n lɛ́ɛ tɔn nyí 3 alǒ 4 sín nùjlɛ́n ǎ. azɔ̀ ɔ́ na lɛ́ lɛ́ kɔ nú nùjlɛ́n lɛ́ɛ bǐ.\/\/nùxíɖókpɔ́ 3 tɔn ɔ́' é ná sɔ́ nùxíɖókpɔ́ ɔ́ dó ɖó wuntun nú nùxíɖókpɔ́ ɔ́' nú wuntun tɔn nyí nùxíɖókpɔ́ 4 tɔn é nyí nùxíɖókpɔ́ 3 tɔn ǎ ɔ́' azɔ̀ ɔ́ ná sɔ́ ǎ\/\/azɔ̀ élɔ́ ná yí nùxwlé lɛ́ɛ sín nùxwlé ɖé. nú nùxwlé lɛ́ɛ bǐ ɔ́, azɔ̀ ɔ́ na sɔ́ nùxwlé lɛ́ɛ sín nùxwlé ɔ́ sín kwɛ́ɛ́ nú nùxwlé ɔ́' nú nùxwlé ɔ́ nyí a.\/\/\" \/\/ >>> lst\n\/\/ [1, 2, 3]\n\/\/ >>> lst\n\/\/ []\n\/\/ >>> lst\n\/\/ [-1, -5, 2, -1, -5]\nfunction sum_squares(lst: number[]): number {\n","canonical_solution":"function sum_squares(lst: number[]): number {\n    return lst.reduce((sum, value, index) => {\n        if (index % 3 === 0) {\n            return sum + (value * value);\n        } else if (index % 4 === 0) {\n            return sum + (value * value * value);\n        } else {\n            return sum + value;\n        }\n    }, 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1, 2, 3]),6);\n  assert.deepEqual(candidate([1, 4, 9]),14);\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]),9);\n  assert.deepEqual(candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3);\n  assert.deepEqual(candidate([0]),0);\n  assert.deepEqual(candidate([-1, -5, 2, -1, -5]),-126);\n  assert.deepEqual(candidate([-56, -99, 1, 0, -2]),3030);\n  assert.deepEqual(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0);\n  assert.deepEqual(candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196);\n  assert.deepEqual(candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448);\n}\n\ntest();"},{"task_id":"HumanEval_143","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndo 1: \/\/xókwin lɛ́ɛ ɖò wuntun yɔyɔ́ ɔ́ mɛ́ ɖó ná cí xókwin nukɔntɔn ɔ́ ɖɔhun.\/\/e sín hùn nyí nùxwásún nukɔn nukɔntɔn lɛ é, \/\/bo na lɛ́ lɛ́ lɛ́ wá xwɛ e mɛ xókwin e ɖò xwɛ ɔ́ mɛ é ɖè é, \/\/xókwin ɖé lɛ ɖò nuɖe ɔ mɛ bɔ nuɖe ɔ nɔ zɔ́n nú xókwin ɖé lɛ, \/\/È na wlan nùjlɛdonǔwu e nɔte nú xógbe ɖé nú we, \/\/ >>> words_in_sentence(\"This is a test\")\n\/\/ \"is\"\n\/\/ Example 2:\n\/\/ >>> words_in_sentence(\"lets go for swimming\")\n\/\/ \"go for\"\n\/\/ Constraints:\n\/\/ * 1 <= len(sentence) <= 100\n\/\/ * sentence contains only letters\nfunction words_in_sentence(sentence: string): string {\n","canonical_solution":"function isPrime(num: number): boolean {\n    if (num < 2) return false;\n    for (let i = 2; i * i <= num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nfunction words_in_sentence(sentence: string): string {\n    return sentence\n        .split(' ')\n        .filter(word => isPrime(word.length))\n        .join(' ');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = words_in_sentence;\n  assert.deepEqual(candidate(\"This is a test\"),\"is\");\n  assert.deepEqual(candidate(\"lets go for swimming\"),\"go for\");\n  assert.deepEqual(candidate(\"there is no place available here\"),\"there is no place\");\n  assert.deepEqual(candidate(\"Hi I am Hussein\"),\"Hi am Hussein\");\n  assert.deepEqual(candidate(\"go for it\"),\"go for it\");\n  assert.deepEqual(candidate(\"here\"),\"\");\n  assert.deepEqual(candidate(\"here is\"),\"is\");\n}\n\ntest();"},{"task_id":"HumanEval_144","nl":"fon_Latn","pl":"ts","prompt":"\/\/A sixu ɖɔ ɖɔ x, kpo n kpo ɔ nuvò e jɛxa lɛ wɛ bo ma ɖó nuvɔ́ dó nuvò mɛ ǎ.\/\/ðàñïðîñòðàíÿþùèé ðàñïðîñòðàíÿþùèé ðàñïðîñòðàíÿþùèé ðàñïðîñòðàíÿþùèé ðàñïðîñòðàíÿþùèé ðàñïðîñòðàíÿþùèé ðàñïðîñòðàíÿþùèé ðàñïðîñòðàíÿþùèé ðàñïðîñòðàíÿþùèé ðàñïðîñòðàíÿþùèé ðàñïðîñòðàíÿþùèé ðàñïðîñòðàíÿþùèé ðàñïðîñòðàíÿþùèé\/\/x kpo n kpo we lɛ ɔ, ye nyi aklunɔzoli nuɖe bo nɔ nyi aklunɔzoli elɔ:\/\/x * n. azɔ̀ ɔ́ ná lɛ́ wá nyí nugbǒ nú x * n nɔ́ nyí nùjlɔ́mε ɔ́ bǐ bɔ false \/\/azɔ towe wɛ nyí ɖɔ a na bló azɔ̀ e na bló bɔ xógbe ɔ na bɔ́n ɔ́\/\/ >>> simplify(\"1\/5\", \"5\/1\")\n\/\/ true\n\/\/ >>> simplify(\"1\/6\", \"2\/1\")\n\/\/ false\n\/\/ >>> simplify(\"7\/10\", \"10\/2\")\n\/\/ false\nfunction simplify(x: string, n: string): boolean {\n","canonical_solution":"function simplify(x: string, n: string): boolean {\n    const parseFraction = (fraction: string): [number, number] => {\n        const [numerator, denominator] = fraction.split('\/').map(Number);\n        return [numerator, denominator];\n    };\n\n    const [xNumerator, xDenominator] = parseFraction(x);\n    const [nNumerator, nDenominator] = parseFraction(n);\n\n    \/\/ Multiply the fractions: (a\/b) * (c\/d) = (a*c) \/ (b*d)\n    const resultNumerator = xNumerator * nNumerator;\n    const resultDenominator = xDenominator * nDenominator;\n\n    \/\/ A product of fractions is a whole number if its numerator divided by denominator is an integer.\n    return resultNumerator % resultDenominator === 0;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = simplify;\n  assert.deepEqual(candidate(\"1\/5\", \"5\/1\"),true);\n  assert.deepEqual(candidate(\"1\/6\", \"2\/1\"),false);\n  assert.deepEqual(candidate(\"5\/1\", \"3\/1\"),true);\n  assert.deepEqual(candidate(\"7\/10\", \"10\/2\"),false);\n  assert.deepEqual(candidate(\"2\/10\", \"50\/10\"),true);\n  assert.deepEqual(candidate(\"7\/2\", \"4\/2\"),true);\n  assert.deepEqual(candidate(\"11\/6\", \"6\/1\"),true);\n  assert.deepEqual(candidate(\"2\/3\", \"5\/2\"),false);\n  assert.deepEqual(candidate(\"5\/2\", \"3\/5\"),false);\n  assert.deepEqual(candidate(\"2\/4\", \"8\/4\"),true);\n  assert.deepEqual(candidate(\"2\/4\", \"4\/2\"),true);\n  assert.deepEqual(candidate(\"1\/5\", \"5\/1\"),true);\n  assert.deepEqual(candidate(\"1\/5\", \"1\/5\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_145","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/ɖŏ wŭ ɖò nùjlɛ́jlɛ́ yetɔn lɛ́ɛ jí ɖò nùjlɛ́jlɛ́ tò ɔ́ tɔn mɛ.\/\/Akpá: enyi nǔ e è wlan dó nǔ lɛ jí lɛ é sín nùxwásá cí ɖokpo ɔ ɔ ɔ, \/\/ɖo kpɔnkpɔn wɛ ɖò nùxwásá yetɔn lɛ sín nùxwásá jí.\/\/Wlǎn nùjlɛ́n e nɔ ɖè nùjlɛ́n nùjlɛ́n e è ná lɛ́ ná é \/\/ >>> order_by_points([1, 11, -1, -11, -12])\n\/\/ [-1, -11, 1, -12, 11]\n\/\/ >>> order_by_points([])\n\/\/ []\nfunction order_by_points(nums: number[]): number[] {\n","canonical_solution":"function order_by_points(nums: number[]): number[] {\n    const digitSum = (num: number): number => {\n        let sum = 0;\n        let value = Math.abs(num);\n        while (value > 0) {\n            sum += value % 10;\n            value = Math.floor(value \/ 10);\n        }\n        return sum;\n    };\n\n    return nums\n        .map((num, index) => ({ num, index, sumOfDigits: digitSum(num) }))\n        .sort((a, b) => {\n            if (a.sumOfDigits === b.sumOfDigits) {\n                return a.index - b.index;\n            }\n            return a.sumOfDigits - b.sumOfDigits;\n        })\n        .map(item => item.num);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"},{"task_id":"HumanEval_146","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/xɔgbe nukɔntɔn kpo gudo tɔn kpo ɔ nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nyí nǔ e nɔ nɔ nɔ nyí nǔ e nɔ nɔ nɔ nyí nǔ e nɔ nɔ nɔ nɔ nyí nǔ e nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ nɔ\/\/nùxwásá nǔɖe ɖò nùxwásá ɔ mɛ e hú 10 é kpo wè lɛ kpo \/\/Wlǎn nùjlɛ́n e nɔ yí nùjlɛ́n xixo ɖé dó nǔ è wlan é mɛ bo nɔ lɛ́ lɛ́ wá é\/\/ >>> specialFilter([15, -73, 14, -15])\n\/\/ 1\n\/\/ >>> specialFilter([33, -2, -3, 45, 21, 109])\n\/\/ 2\nfunction specialFilter(nums: number[]): number {\n","canonical_solution":"function specialFilter(nums: number[]): number {\n    const isOdd = (digit: number): boolean => digit % 2 !== 0;\n\n    return nums.reduce((count, num) => {\n        const absNumStr = Math.abs(num).toString();\n        const firstDigit = parseInt(absNumStr[0]);\n        const lastDigit = parseInt(absNumStr[absNumStr.length - 1]);\n\n        if (num > 10 && isOdd(firstDigit) && isOdd(lastDigit)) {\n            return count + 1;\n        }\n\n        return count;\n    }, 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = specialFilter;\n  assert.deepEqual(candidate([5, -2, 1, -5]),0);\n  assert.deepEqual(candidate([15, -73, 14, -15]),1);\n  assert.deepEqual(candidate([33, -2, -3, 45, 21, 109]),2);\n  assert.deepEqual(candidate([43, -12, 93, 125, 121, 109]),4);\n  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([]),0);\n}\n\ntest();"},{"task_id":"HumanEval_147","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú:\/\/bɔ a[i] + a[j] + a[k] nyí nùɖé bɔ è nɔ jlɛ́ dó 3 jí.\/\/Zɔ́n nùxíxo atɔnvlɔ́ɖó (a[i], a[j], a[k]) nú a fí e i < j < k, \/\/nú mɛ ɖokpo ɖokpo i (1 ≤ i ≤ n) ɔ, akwɛ́ a[i] = i * i - i + 1 tɔn. \/\/È na mi xwɛ́ nú nùjlɔ́mɛnu e nyí nùjlɔ́mɛnu ɖagbe é n. Mi ɖó na bló nùjlɔ́mɛnu e nyí nùjlɔ́mɛnu ɖagbe é ɖé sín nùjlɔ́mɛnu e nyí nùjlɔ́mɛnu ɖagbe é n.\/\/ >>> get_max_triples(5)\n\/\/ 1\n\/\/ Explanation: \n\/\/ a = [1, 3, 7, 13, 21]\n\/\/ The only valid triple is (1, 7, 13).\nfunction get_max_triples(n: number): number {\n","canonical_solution":"function get_max_triples(n: number): number {\n    const a: number[] = [];\n\n    for (let i = 1; i <= n; i++) {\n        a[i - 1] = i * i - i + 1;\n    }\n\n    let count = 0;\n\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"},{"task_id":"HumanEval_149","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/A sixu ɖɔ ɖɔ xógbe lɛ bǐ na ɖó ganxixo ɖokpo ɔ.\/\/azɔ̀ ɔ́ ɖó na lɛ́ kɔ̀n wèmá wèmá ɖé lɛ́ɛ ɖò tito jí.\/\/Nú xókwin wè lɛ́ɛ ɖò mɔ̌ ɖokpó ɔ́, ɖè nùjlɛdonǔwu lɛ́ɛ ɖó nùjlɛdonǔwu lɛ́ɛ jí.\/\/e na lɛ́ na nùxwlé e è wlan dó acɛ enɛ jí é.\/\/E na sɔ́ xókwin lɛ́ɛ ɖó ná nɔ́ ɖò jí wɛ ɖò akpáxwé ɖokpo ɖokpo tɔn mɛ.\/\/é sixu ɖ'azɔ̌ dó è.\/\/Akɔ ɔ nɔ nyí akpoxwín lɛ tɔn tɛgbɛ bo nɔ nyí nùxwín lɛ tɔn tɛgbɛ ǎ.\/\/bo na lɛ́ na nùxwlé e è mɔ é kpodo tito tɔn kpo, \/\/e nɔ ɖe xɛ e nɔ ɖó ganxixo e nɔ nyí ganxixo é lɛ sín mɛ, \/\/Wlǎn azɔ̀ e nɔ yí gbè nú nùjlɛ́jlɛ́ xójlawema tɔn lɛ́ɛ dó nùjlɛ́jlɛ́ ɔ́ mɛ é,\/\/ >>> list_sort([\"aa\", \"a\", \"aaa\"])\n\/\/ [\"aa\"]\n\/\/ >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n\/\/ [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst: string[]): string[] {\n","canonical_solution":"function sorted_list_sum(lst: string[]): string[] {\n    \/\/ Filter out strings with odd lengths\n    const filtered = lst.filter(str => str.length % 2 === 0);\n    \/\/ Sort the array by length, then alphabetically\n    const sorted = filtered.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    });\n    return sorted;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"},{"task_id":"HumanEval_150","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/e na lɛ́ lɛ́ yí nùɖé nú y.\/\/azɔli kpodo azɔli kpo e na lɛ na lɛ na x tɔn nu nu nu n nyí \/\/ >>> x_or_y(7, 34, 12)\n\/\/ 34\n\/\/ >>> x_or_y(15, 8, 5)\n\/\/ 5\nfunction x_or_y(n: number, x: number, y: number): number {\n","canonical_solution":"function x_or_y(n: number, x: number, y: number): number {\n    function isPrime(num: number): boolean {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        \n        if (num % 2 === 0 || num % 3 === 0) return false;\n        \n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        \n        return true;\n    }\n\n    return isPrime(n) ? x : y;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = x_or_y;\n  assert.deepEqual(candidate(7, 34, 12),34);\n  assert.deepEqual(candidate(15, 8, 5),5);\n  assert.deepEqual(candidate(3, 33, 5212),33);\n  assert.deepEqual(candidate(1259, 3, 52),3);\n  assert.deepEqual(candidate(7919, -1, 12),-1);\n  assert.deepEqual(candidate(3609, 1245, 583),583);\n  assert.deepEqual(candidate(91, 56, 129),129);\n  assert.deepEqual(candidate(6, 34, 1234),1234);\n  assert.deepEqual(candidate(1, 2, 0),0);\n  assert.deepEqual(candidate(2, 2, 0),2);\n}\n\ntest();"},{"task_id":"HumanEval_151","nl":"fon_Latn","pl":"ts","prompt":"\/\/e nɔ nyí nùɖé ǎ lɛ é ɔ, mi ma nɔ ɖó ayi nùɖé jí ó.\/\/Nú è na sɔ́ nùjlɛ́kpo lɛ́ɛ sín nùjlɛ́kpo ɖé ɔ, lɛ́n nùjlɛ́kpo lɛ́ɛ sín kwɛ́ɛ sín nùjlɛ́kpo ɔ́ sín nǔ.\/\/ >>> double_the_difference([1, 3, 2, 0])\n\/\/ 10\n\/\/ >>> double_the_difference([-1, -2, 0])\n\/\/ 0\n\/\/ >>> double_the_difference([9, -2])\n\/\/ 81\n\/\/ >>> double_the_difference([0])\n\/\/ 0\n\/\/ If the input array is empty, return 0.\nfunction double_the_difference(lst: number[]): number {\n","canonical_solution":"function double_the_difference(lst: number[]): number {\n    return lst\n        .filter(num => Number.isInteger(num) && num > 0 && num % 2 !== 0)\n        .reduce((sum, num) => sum + num * num, 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"},{"task_id":"HumanEval_152","nl":"fon_Latn","pl":"ts","prompt":"\/\/kpɔ́ndéwú: \/\/nùxwɛ ɔ nyí 0 bɔ enyi é nyí ǎ ɔ, nùxwɛ ɔ wɛ nyí vogbingbɔn e ɖò mɛ̀ ɖò nùxwɛ ɔ kpo nǔ e è mɔ é kpo tɛntin é.\/\/lɛ́ kɔ́n nùxíxo ɖokpó ɔ́ dó ɖɔ́ lě e mɛ ɖokpó ɖokpó sín nǔ e è ɖɔ é lín dó mɛ gbɔn é.\/\/È na we nǔ e è nɔ mɔ ɖò nǔ lɛ mɛ é kpo nǔ e è nɔ mɔ ɖò nǔ lɛ mɛ é kpo bɔ mɛ ɖokpo ɖokpo ɖó na mɔ nǔ e é nɔ mɔ é.\/\/azɔ towe wɛ nyí ɖɔ a na ɖɔ ɖɔ mɛ ɔ ɖɔ nǔ e é mɔ ɖò nùɖé lɛ mɛ é sɔgbe à jí.\/\/e jɛxa ɖɔ è na wlan bo jlɛ́.\/\/nǔ e jɛ ɔ́ bǐ wɛ è wá tuùn.\/\/Un lin ɖɔ mi bǐ wɛ flín nǔ cí nú mɛ hwenu e mɛ e è ko nɔte kpɔ́n sín tɛgbɛ é ɖé wá é\/\/ >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\/\/ [0, 0, 0, 0, 3, 3]\n\/\/ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\/\/ [4, 4, 1, 0, 0, 6]\nfunction compare(game: number[], guess: number[]): number[] {\n","canonical_solution":"function compare(game: number[], guess: number[]): number[] {\n    return game.map((score, index) => Math.abs(score - guess[index]));\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1, 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_153","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/(kpikpa tɔn nyi -1).\/\/lɛ́ɛ ná lɛ́ wá 'Slices.SErviNGSliCes' ɖó 'SErviNGSliCes' wɛ nyí nukɔ́nkpó e ɖó gǎn hú bǐ é \/\/nùjlɛdonǔwu: ['SErviNGSliCes', 'Cheese', 'StuFfed'] ɔ́, a ɖó ná \/\/ě nú è na sɔ́ \"Slices\" dó ɖó azɔ̌mɛví ɔ kpo nǔ e è nɔ ylɔ ɖɔ  ɔ sín nǔ lɛ é kpo\/\/sɔ́ ée ná jɛ nukɔn ɖò nùjlɛdonǔwu ɔ mɛ é.\/\/Enyi è na lɛ́ sɔ́ wè alǒ hú mɔ̌ ɖó hlɔnhlɔn ɖokpo ɔ ɔ́, a ɖó na lɛ́ sɔ́ we ɖó\/\/wèmá: ClassName.StrongestExtensionName. \/\/A na mɔ nukɔnyiyi e syɛn hú bǐ é bo na lɛ́ yí wuntun ɖé dó nùjlɛdonǔwu elɔ mɛ.\/\/ɖo nukɔnyiyi ɔ sín nyikɔ mɛ ɔ, kpodo CAP - SM kpo wɛ è nɔ ɖe hlɔnhlɔn ɔ xlɛ́.\/\/wèmá ɖò extension sín nyikɔ mɛ, bo sɔ́ SM dó ɖó wèmá kpɛví lɛ́ɛ tɔn \/\/hlɔ̌nhlɔ́n nǔ lɛ́ɛ tɔn nyí nǔ elɔ lɛ́ɛ: nú CAP nyí númɛ̀ ɔ́ \/\/Akɔ́n lɛ́ɛ ɔ́, è na zán dó dó azɔ̌ lɛ́ɛ jí nú azɔ̌ lɛ́ɛ.\/\/È na na we azɔmɛ ɖé sín nyikɔ (wɔntin) kpo nǔɖeji lɛ tɔn kpo.\/\/ >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n\/\/ \"my_class.AA\"\nfunction Strongest_Extension(class_name: string, extensions: string[]): string {\n","canonical_solution":"function Strongest_Extension(class_name: string, extensions: string[]): string {\n    let strongestExtension = '';\n    let maxStrength = -Infinity;\n\n    extensions.forEach(extension => {\n        const capCount = extension.split('').filter(char => char >= 'A' && char <= 'Z').length;\n        const smCount = extension.split('').filter(char => char >= 'a' && char <= 'z').length;\n        const strength = capCount - smCount;\n\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    });\n\n    return `${class_name}.${strongestExtension}`;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\");\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\");\n}\n\ntest();"},{"task_id":"HumanEval_154","nl":"fon_Latn","pl":"ts","prompt":"\/\/È na we xógbe. A na lɛ́ yí gbè nú xó ɔ́ ɖɔ nugbǒ enyi xó wegɔ́ ɔ́ alǒ xɛ̀ tɔn ɖě nyí wuntun ɖò xó nukɔntɔn ɔ́ mɛ ɔ́.\/\/ >>> cycpattern_check(\"abcd\", \"abd\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"hello\", \"ell\")\n\/\/ true\n\/\/ >>> cycpattern_check(\"whassup\", \"psus\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"abab\", \"baa\")\n\/\/ true\n\/\/ >>> cycpattern_check(\"efef\", \"eeff\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"himenss\", \"simen\")\n\/\/ true\nfunction cycpattern_check(a: string, b: string): boolean {\n","canonical_solution":"function cycpattern_check(a: string, b: string): boolean {\n    for (let i = 0; i < b.length; i++) {\n        const rotation = b.slice(i) + b.slice(0, i);\n        if (a.includes(rotation)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\/\/ Test cases\nconsole.log(cycpattern_check(\"abcd\", \"abd\")); \/\/ false\nconsole.log(cycpattern_check(\"hello\", \"ell\")); \/\/ true\nconsole.log(cycpattern_check(\"whassup\", \"psus\")); \/\/ false\nconsole.log(cycpattern_check(\"abab\", \"baa\")); \/\/ true\nconsole.log(cycpattern_check(\"efef\", \"eeff\")); \/\/ false\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); \/\/ true","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cycpattern_check;\n  assert.deepEqual(candidate(\"xyzw\", \"xyw\"),false);\n  assert.deepEqual(candidate(\"yello\", \"ell\"),true);\n  assert.deepEqual(candidate(\"whattup\", \"ptut\"),false);\n  assert.deepEqual(candidate(\"efef\", \"fee\"),true);\n  assert.deepEqual(candidate(\"abab\", \"aabb\"),false);\n  assert.deepEqual(candidate(\"winemtt\", \"tinem\"),true);\n}\n\ntest();"},{"task_id":"HumanEval_155","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/é ná nùxwléma ɖé. é ná lɛ́ yí nùxwléma e ɖó nùxwléma e nyí ganxixo é kpo ée nyí ganxixo ǎ é kpo é.\/\/ >>> even_odd_count(-12)\n\/\/ [1, 1]\n\/\/ >>> even_odd_count(123)\n\/\/ [1, 2]\nfunction even_odd_count(num: number): [number, number] {\n","canonical_solution":"function even_odd_count(num: number): [number, number] {\n    const numStr = Math.abs(num).toString();\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let char of numStr) {\n        const digit = parseInt(char);\n        if (digit % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n\n    return [evenCount, oddCount];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();"},{"task_id":"HumanEval_156","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú: \/\/Xwɛsín: 1 <= num <= 1000 \/\/bo sɔ́ wlan e dó wlan xókwín kpɛví ɖé lɛ mɛ é. \/\/E na mɔ nùxwlé ɖagbe ɖé ɔ, mɔ nùxwlé hlɔma tɔn e nɔ nyí xɛ ɔ, \/\/ >>> int_to_mini_roman(19)\n\/\/ \"xix\"\n\/\/ >>> int_to_mini_roman(152)\n\/\/ \"clii\"\n\/\/ >>> int_to_mini_roman(426)\n\/\/ \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n","canonical_solution":"function int_to_mini_roman(number: number): string {\n    const romanNumerals: { [key: number]: string } = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix',\n        5: 'v', 4: 'iv', 1: 'i'\n    };\n    \n    let result = '';\n    for (const value of Object.keys(romanNumerals).map(Number).sort((a, b) => b - a)) {\n        while (number >= value) {\n            result += romanNumerals[value];\n            number -= value;\n        }\n    }\n    \n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"},{"task_id":"HumanEval_157","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/90 degre. \/\/Hwexwetɔn e nɔ ɖó xwɛ ɖagbe é wɛ nyí ɖɔ wexwetɔn e mɛ xwɛ ɖokpo nyí xwɛ ɖagbe é alǒ xwɛ e nyí xwɛ ɖagbe é\/\/ali lɛ nɔ bló atɔnviɖe e nɔ ɖó ganxixo ɖagbe ɖagbe é, é ma nyí mɔ̌ ǎ.\/\/Nú è na sɔ́ xwɛ̌ atɔn lɛ sín hùn lɛ ɔ, é na lɛ́ nyí nugbǒ nú\/\/ >>> right_angle_triangle(3, 4, 5)\n\/\/ true\n\/\/ >>> right_angle_triangle(1, 2, 3)\n\/\/ false\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n","canonical_solution":"function right_angle_triangle(a: number, b: number, c: number): boolean {\n    const sides = [a, b, c].sort((x, y) => x - y);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"},{"task_id":"HumanEval_158","nl":"fon_Latn","pl":"ts","prompt":"\/\/xɛ lɛ, lɛ́ kɔ̀ mɛ e jɛ nukɔn ɖò xókwin-kpàkpàkpà mɛ é.\/\/nú wuntun ɖokpo ɖokpo ɔ ɔ. enyi wuntun ɖokpo ɖokpo ɔ ɖó wuntun ɖokpo ɖokpo ɔ ɔ ɔ\/\/Xó vovo wɛ ɖò nùxwlé ɔ mɛ. Na lɛ́ yí xó ɔ́ ɖó nùxwlé maximal tɔn \/\/Wlǎn azɔ̀ e nɔ yí gbè nú nùjlɛ́jlɛ́ xójlawema tɔn lɛ́ɛ é.\/\/ >>> find_max([\"name\", \"of\", \"string\"])\n\/\/ \"string\"\n\/\/ >>> find_max([\"name\", \"enam\", \"game\"])\n\/\/ \"enam\"\n\/\/ >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\/\/ \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n","canonical_solution":"function find_max(words: string[]): string {\n    function uniqueCharacterCount(word: string): number {\n        const uniqueChars = new Set(word);\n        return uniqueChars.size;\n    }\n\n    let maxWord = words[0];\n    let maxUniqueCount = uniqueCharacterCount(maxWord);\n\n    for (let i = 1; i < words.length; i++) {\n        const currentUniqueCount = uniqueCharacterCount(words[i]);\n        if (\n            currentUniqueCount > maxUniqueCount ||\n            (currentUniqueCount === maxUniqueCount && words[i] < maxWord)\n        ) {\n            maxWord = words[i];\n            maxUniqueCount = currentUniqueCount;\n        }\n    }\n\n    return maxWord;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();"},{"task_id":"HumanEval_159","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́n: \/\/enyi atín e kpo é ma kpé ǎ ɔ, a na ɖu atín e kpo é kpo é bǐ, amɔ̌ xovɛ́ na lɛ́ sin we.\/\/nùxwlé e ɖò tɔ̀n ɖò nùɖuɖu towe lɛ́ɛ gudo é ] \/\/mi na lɛ́ sɔ́ nùɖé lɛ́ɛ dó kɔ́ mɛ nú mi [ nùɖé lɛ́ɛ bǐ e mi ɖu ɖò nùɖuɖu mitɔn gudo é, \/\/Amɔ̌, din ɔ, a ɖó na ɖu atínkwín gègě bo na dó ɖu nǔ bǐ.\/\/A nyí xɛvi xovɛ́ sin wɛ, bo ko ɖu atínkwín e è nɔ ylɔ́ ɖɔ \"carrot\" é ɖé.\/\/ >>> eat(5, 6, 10)\n\/\/ [11, 4]\n\/\/ >>> eat(4, 8, 9)\n\/\/ [12, 1]\n\/\/ >>> eat(1, 10, 10)\n\/\/ [11, 0]\n\/\/ >>> eat(2, 11, 5)\n\/\/ [7, 0]\n\/\/ Variables:\n\/\/ @number : integer\n\/\/ the number of carrots that you have eaten.\n\/\/ @need : integer\n\/\/ the number of carrots that you need to eat.\n\/\/ @remaining : integer\n\/\/ the number of remaining carrots thet exist in stock\n\/\/ Constrain:\n\/\/ * 0 <= number <= 1000\n\/\/ * 0 <= need <= 1000\n\/\/ * 0 <= remaining <= 1000\n\/\/ Have fun :)\nfunction eat(number: number, need: number, remaining: number): number[] {\n","canonical_solution":"function eat(number: number, need: number, remaining: number): number[] {\n    const totalEaten = number + Math.min(need, remaining);\n    const carrotsLeft = Math.max(remaining - need, 0);\n    return [totalEaten, carrotsLeft];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = eat;\n  assert.deepEqual(candidate(5, 6, 10),[11, 4]);\n  assert.deepEqual(candidate(4, 8, 9),[12, 1]);\n  assert.deepEqual(candidate(1, 10, 10),[11, 0]);\n  assert.deepEqual(candidate(2, 11, 5),[7, 0]);\n  assert.deepEqual(candidate(4, 5, 7),[9, 2]);\n  assert.deepEqual(candidate(4, 5, 1),[5, 0]);\n}\n\ntest();"},{"task_id":"HumanEval_160","nl":"fon_Latn","pl":"ts","prompt":"\/\/Akɔkpá ɔ́ ɖó azɔwatɔ́ ɖokpó ɖò bǐbɛ́mɛ, bɔ azɔ̌kpá ɔ́ ɖó azɔ̌kpá we ɖò bǐbɛ́mɛ.\/\/Operand ɔ nyi nùxwléma e nyí nùɖé ǎ lɛ é tɔn.\/\/Akɔkpá ɔ́ sín hùn cí akɔkpá operand tɔn sín hùn sín mɛ ɖokpó jí.\/\/Akpádo:\/\/=> nǔ e è mɔ é = 9 \/\/nǔ e è mɔ é = 2 + 3 * 4 - 5 \/\/nǔxíxo = [2, 3, 4, 5] \/\/azɔwatɔ́ ɔ['+', '*', '-'] \/\/Kpɔ́n: \/\/Nǔɖeji (**) \/\/Xò ɖò xò jí ɔ́ ( \/\/) \/\/Ðɔ nǔ kpɔ́n (*) \/\/Ðèñóíîê ( - ) \/\/Ðɔ nǔ lɛ dó (+) \/\/Nǔ e è nɔ wà dó aljɛbu jí lɛ é: \/\/e nɔ lɛ́ vɔ́ xógbe ɔ́ sín nǔ e è na zán dó mɔ xógbe ɔ́ é.\/\/azɔmε wegɔ ɔ nyi xεnxixa e nɔ nyi nuɖeji lɛ ɔ. Zɔ azɔmε we lε bo na blo algebri ɔ\/\/E na bo na w'azɔ̌tɔ́ nǔxomɔ wè, kpo nǔxomɔ tɔn kpo ɔ, nǔxomɔ nukɔntɔn ɔ ɖó nùxomɔ algebra tɔn taji lɛ, bɔ function do_algebra(operator: string[], operand: number[]): number {\n","canonical_solution":"function do_algebra(operator: string[], operand: number[]): number {\n    let expression = operand[0].toString();\n\n    for (let i = 0; i < operator.length; i++) {\n        expression += ` ${operator[i]} ${operand[i + 1]}`;\n    }\n\n    return Math.floor(eval(expression));\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"\/\/\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"},{"task_id":"HumanEval_161","nl":"fon_Latn","pl":"ts","prompt":"\/\/Kpɔ́ndéwú \/\/azɔ̀ ɔ́ ɖó ná lɛ́ kɔ̀n wèmá e è mɔ é.\/\/Enyi wuntun ɔ ma ɖó wuntun ɖé ǎ ɔ, mi na lɛ́ kɔ́n wuntun ɔ.\/\/é ma nyí mɔ̌ ǎ ɔ́, mi hɛn ɔ́, mi ná nɔ lě e mi ɖe gbɔn é.\/\/enyi s[i] nyí wèmá ɔ, lɛ́ kɔ sín fí e è nɔ sɔ́ wèmá ɔ ɖó jɛ fí e è nɔ sɔ́ wèmá ɔ ɖó jɛ fí e è nɔ sɔ́ wèmá ɔ ɖó jɛ fí e è nɔ sɔ́ wèmá ɔ ɖó jɛ fí e è nɔ sɔ́ wèmá ɔ ɖó jɛ fí e è nɔ sɔ́ wèmá ɔ ɖó jɛ fí e è nɔ sɔ́ wèmá ɔ ɖó é jí\/\/e na w'azɔ̌ nú we.\/\/ >>> solve(\"1234\")\n\/\/ \"4321\"\n\/\/ >>> solve(\"ab\")\n\/\/ \"AB\"\n\/\/ >>> solve(\"#a@C\")\n\/\/ \"#A@c\"\nfunction solve(s: string): string {\n","canonical_solution":"function solve(s: string): string {\n    let hasLetter = \/[a-zA-Z]\/.test(s);\n    if (hasLetter) {\n        return s.split('').map(char => {\n            if (\/[a-z]\/.test(char)) {\n                return char.toUpperCase();\n            } else if (\/[A-Z]\/.test(char)) {\n                return char.toLowerCase();\n            } else {\n                return char;\n            }\n        }).join('');\n    } else {\n        return s.split('').reverse().join('');\n    }\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();"},{"task_id":"HumanEval_162","nl":"fon_Latn","pl":"ts","prompt":"\/\/Enyi 'text' nyí xwɛ̀ nùɖé ǎ ɔ, lɛ́ kɔ́n undefined. \/\/E na sɔ́ wèmá 'text' ɖé ɔ́, lɛ́ yí wèmá e ɖ'emɛ é sín hash md5 ɔ́.\/\/ >>> string_to_md5(\"Hello world\")\n\/\/ \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text: string): string | undefined {\n","canonical_solution":"import * as crypto from 'crypto';\n\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();"},{"task_id":"HumanEval_163","nl":"fon_Latn","pl":"ts","prompt":"\/\/Ði kpɔ́ndéwú ɔ: \/\/bo b, ɖò nǔ jɛ jí wɛ.\/\/Nú è na w'azɔnkpɔnkpɔn ɖagbe wè a kpo b kpo ɔ, lɛ́ kɔ nú xwɛxwɛ e ɖò a kpo b kpo tɛntin é.\/\/ >>> generate_integers(2, 8)\n\/\/ [2, 4, 6, 8]\n\/\/ >>> generate_integers(8, 2)\n\/\/ [2, 4, 6, 8]\n\/\/ >>> generate_integers(10, 14)\n\/\/ []\nfunction generate_integers(a: number, b: number): number[] {\n","canonical_solution":"function generate_integers(a: number, b: number): number[] {\n    let result: number[] = [];\n    \n    \/\/ Get starting and ending points in sorted order\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    \n    \/\/ Loop through the range\n    for (let i = start; i <= end; i++) {\n        if (i % 2 === 0) {  \/\/ Check if the digit is even\n            result.push(i);\n        }\n    }\n    \n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = generate_integers;\n  assert.deepEqual(candidate(2, 10),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(10, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(132, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(17, 89),[]);\n}\n\ntest();"}]