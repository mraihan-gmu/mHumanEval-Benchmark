task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,crh_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Berilgen raqamlar cedvelinde, berilgen sıñırdan daa yaqın olğan eki raqam barmı-yoqmı teşkeriñiz. Misal: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) Sahte >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Doğru """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,crh_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Bu funktsiyanıñ kirişi, yuvalama qavğalarnıñ bir qaç gruppasını içeren bir dizimdir. Maqsadıñız, bu gruppalarnı ayrı dizimlerge ayırmaq ve olarnıñ cedvelini qaytarmaq. Ayrı gruppalar balanslanğan (er bir açıq qavğa doğru şekilde qapatılğan) ve bir-biriniñ içinde yuvalamazlar. Giriş dizimindeki boşluqlarnı körmemezlikke urıñız. Örnek: >>> separate_paren_groups' ((( ) (() (( ) ) ) ) ) ['() ', '(()) ', '((() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,crh_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Bir müsbet süzilgen noqta sayısı berilgen soñ, o, bütün sayı qısmı (eñ büyük tam sayı berilgen sayıdan küçük) ve onluqlarğa (kalan qısım er vaqıt 1-den küçük) bölüne bile. Sayınıñ onluq qısmını qaytarıñız. Mısal: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,crh_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Sizge bir bank esabında para yatırma ve çekme işlemleriniñ cedveli berile, o da sıfır balansnen başlana. Siziñ vazifeñiz, esap balansınıñ sıfırdan aşağı tüşüvi olsa, onı tapmaq ve bu yerde funktsiyanıñ True qaytarması kerek. Aks alda, False qaytarmaq kerek. Misal: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,crh_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Berilgen kirsetilgen raqamlar cedveli içün, bu malümat kümesi ortalaması etrafında Mean Absolute Deviation esaplañız. Mean Absolute Deviation er bir element ve merkez noqtası arasındaki ortalama mutlaq farqıdır (bu vaziyette ortalama): MAD = ortalama █ x - x_mean █ Misal: >>> mean_absolute_deviation █ [1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,crh_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Er eki ardı-sıra kirsetilgen element arasında bir raqam ""delimiter"" kirset `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,crh_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Bu funktsiyanıñ kirişi, boşluqlarnen ayırılğan qavğalar içün bir qaç gruppa temsil etilgen bir dizimdir. Gruppanıñ er biri içün qavğalarnıñ eñ teren qavğa seviyesi çıqarıla. Meselâ (() (()) eki seviyede, ((())) üç seviyede. >>> parse_nested_parens (('((()) ((())) (((()) ((2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,crh_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Tek berilgen alt dizimni içermegen dizimlernen bir kiriş cedvelini filtrleñiz >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,crh_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Berilgen tam sayılar cedveli içün, bir cedveldeki bütün sayılarnıñ toplamı ve çarpımından ibaret bir tuple qaytarıñız. Boş toplam 0-ğa teñ olmalı ve boş çarpım 1-ge teñ olmalı. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,crh_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Berilgen tam sayılar cedvelinden, sıra içinde berilgen vaqıtqa qadar tapılğan yuvarlanuv maksimum elementiniñ cedvelini yaratıñız. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,crh_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Berilgen bir satırdan başlağan eñ qısqa palindromnı tap. Algoritm ğayesi sade: - Berilgen satırnıñ eñ uzun bir palindrom olğan postfiksini tap. - Satırnıñ soñuna palindromik soñki sözden evel kelgen bir satır ögüni qoş. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('catac') ' >>> make_palindrome ((('catac') ' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Berilgen satır palindrom olsa teşkeriñiz """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,crh_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Giriş tek 1 ve 0-dan ibaret olğan a ve b eki satırdır. Bu kirişlerde ekinci XOR yapıñız ve neticeni de bir satır olaraq qaytarıñız. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,crh_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Sızıqlar cedvelinden eñ uzunını qaytarıñız. Aynı uzunlıqta bir qaç sızıq olsa, birinci sızıqnı qaytarıñız. Kirsetilgen cedvel boş olsa, Bir de bir qaytarmañız. >>> eñ uzunı (([]) >>> eñ uzunı ((['a', 'b', 'c']) 'a' >>> eñ uzunı ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,crh_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""A ve b eki tam sayısınıñ eñ büyük ortaq bölügiçini qaytarıñız >>> eñ büyük_ortaq_bölügiç ((3, 5) 1 >>> eñ büyük_ortaq_bölügiç ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,crh_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Kirsetilgen satırnıñ eñ qısqa ve eñ uzun ög-ilâveleriniñ cedvelini qaytarıñız >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,crh_Latn,python,"

def string_sequence(n: int) -> str:
    """"""0-dan başlap n-ge qadar mında yerleşken sayılarnen sızıq qaytar. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,crh_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Bir dizim berilgen, onıñ kaç ayrı harfden ibaret olğanını tap (bu hususiyetke baqmadan) >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,crh_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Bu funktsiyanıñ kirişi, ASCII formatında bir muzıka notalarını temsil etken bir tellerdir. Siziñ vazifeñiz, bir çoq urğunğa uyğun tam sayılarnıñ telleri cedvelini ayırmaq: 'o' notası, soñki dört urqun 'o'""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,crh_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Belli bir alt dizinin asıl dizinde qaç kere tapıla bilgenini tap. Üst-üstine örtülgen adiselerni say. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,crh_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Giriş, 'sıfırdan' 'doquzğa' qadar sayılardan ibaret boşluqnen sıñırlanğan bir dizimdir. Geçerli saylavlar 'sıfır', 'bir', 'eki', 'üç', 'dört', 'beş', 'altı', 'yedi', 'sekiz' ve 'doquz'dır. Sayılarnen sıralanğan dizimni eñ küçükten eñ büyükke qadar qaytarır >>> sort_numbers (('üç bir beş') 'bir üç beş' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,crh_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Berilgen raqamlar cedvelinden (en az eki uzunlığı) biri-birine eñ yaqın olğan eki sayını saylap qaytarıñız ve olarnı tertipke köre qaytarıñız (eñ küçük raqam, eñ büyük raqam). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,crh_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Sayılar cedvelini (eñ az eki elementten ibaret) bergende, bu cedvelge sızıqlı bir deñiştirme kirset, böyleliknen eñ küçük sayı 0 olur ve eñ büyük 1 olur >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,crh_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filtrler tek tam sayılar içün berilgen python qıymetleriniñ cedvelini ber >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,crh_Latn,python,"

def strlen(string: str) -> int:
    """"""Berilgen satırnıñ qaytaruv uzunlığı >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,crh_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Berilgen n sayısı içün, n-ni teñ bölgen eñ büyük sayını tapıñız, n-den küçük >>> eñ büyük bölüci ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,crh_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Berilgen tam sayınıñ birinci faktorlarınıñ cedvelini eñ küçükten eñ büyükke qadar tertipke ketir. Er bir faktor, faktorlaştırmada qaç kere peyda olğanına uyğun bir sayını cedvelge kirsetmek kerek. Kirsetilgen raqam, bütün faktorlarnıñ qatlamına teñ olmalı >>> faktorizatsiya ((8) [2, 2, 2] >>> faktorizatsiya ((25) [5, 5] >>> faktorizatsiya ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,crh_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Tam sayılar cedvelinden, birden çoq kere rastkelgen er elementni silmek. Elemetlerniñ tertibini kirsetilgen kibi saqlañız. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,crh_Latn,python,"

def flip_case(string: str) -> str:
    """"""Berilgen bir dizim içün, küçük harflerni büyük harflerge ve büyük harflerni küçük harflerge çevir. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,crh_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Tek bir satırğa birleştirilgen satırlarnıñ cedveli >>> birleştirilgen (([]) '' >>> birleştirilgen ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,crh_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Tek berilgen ög-başınen başlağanlar içün kiriş satırları cedvelini filtrle. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,crh_Latn,python,"

def get_positive(l: list):
    """"""Tek müsbet sayılarnı cedvelde qaytarıñız. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,crh_Latn,python,"

def is_prime(n):
    """"""Berilgen bir sayıs birinci olsa, doğru, aks alda ise yañlış qaytar. >>> birinci ((6) Yañlış >>> birinci ((101) Doğru >>> birinci ((11) Doğru >>> birinci ((13441) Doğru >>> birinci ((61) Doğru >>> birinci ((4) Yañlış >>> birinci ((1) Yañlış """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,crh_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs bir polinomnıñ koeffitsiyentleri ola. find_zero find x öyle ki, poly ((x) = 0. find_zero tek sıfır noqtasını qaytarır, atta çoq olsa da. Bundan da ğayrı, find_zero tek tek eşittirgen koeffitsiyentler ve sıfırdan büyük olmağan koeffitsiyentli xs cedvelini ala, çünki o bir çezilmeni kefil ete. >>> round (((find_zero[(1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""X noqtasında xs koeffitsiyentleri ile bir çoğulnı qıymetlendire. xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,crh_Latn,python,"

def sort_third(l: list):
    """"""Bu funktsiya l listanını ala ve l l' l' ile üçke bölünmegen indekslerde aynı olğanını, üçke bölüngen indekslerde ise onıñ qıymetleri l-niñ mütenasip indeksleriniñ qıymetlerine teñ olğanını, amma tertip etilgenini qaytarır. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,crh_Latn,python,"

def unique(l: list):
    """"""Bir cedvelde sıralanğan unikal elementlerni qaytarmaq >>> unikal (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,crh_Latn,python,"

def max_element(l: list):
    """"""Siyahıdaki eñ büyük elementni qaytar. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,crh_Latn,python,"

def fizz_buzz(n: int):
    """"""11 ya da 13 ile bölüngen n'den az bütün sayılar içinde 7 raqamı körüngen sayısını qaytarıñız. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,crh_Latn,python,"

def sort_even(l: list):
    """"""Bu funktsiya l listesini ala ve l' l' ile tek indekslerde aynı olğan, lâkin onıñ eş indekslerde qıymetleri l-niñ eş indeksleriniñ qıymetlerine teñ olğan, amma tertip etilgen l listesini qaytarır. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,crh_Latn,python,"

def encode_cyclic(s: str):
    """"""encode_cyclic funktsiyası ile kodlanğan kiriş satırı olaraq ala. Kodlanılğan satırnı qaytarır. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""Üç arifden ibaret olğan tsikl gruppaları tarafından kodlanğan satırnı qaytarır.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,crh_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib, bir Fibonacci sayısı olğan ve aynı zamanda da birincidir. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,crh_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero tam sayılar cedvelini kirsetüv olaraq ala. cedvelde sıfırğa qadar toplanğan üç ayrı element olsa, doğru, aks alda ise sahte qaytarır. >>> triples_sum_to_zero([1, 3, 5, 0]) Sahte >>> triples_sum_to_zero[(1, 3, -2, 1]) Doğru >>> triples_sum_to_zero([1, 2, 3, 7]) Sahte >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) Doğru >>> triples_sum_to_zero[1]) Sahte """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,crh_Latn,python,"

def car_race_collision(n: int):
    """"""Tamamile düz sonsuz uzun bir cizgi olan bir yolun tasavvur edin. n masin soldan sagga gedir; eyni zamanda, n masinlarin ferqli bir seti sagdan sola gedir. iki masin seti bir birinden cox uzaq olmaqla baslayir. butun masinlar eyni tezlikle hereket edir. sagdan sola hereket eden masin sagdan sola hereket eden masinla toqquşanda iki masin toqquşur. amma masinlar sonsuz guclu ve guclu olurlar; neticede onlar toqquşmadigi kimi oz trajektorisinde hereket etmeye davam edirler. bu funksiya bu kimi toqquşmalarin sayisini verir.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,crh_Latn,python,"

def incr_list(l: list):
    """"""1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]  elementleri ile cedvel qaytarıla.""""""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,crh_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero, tam sayılar cedvelini kirsetüv olaraq ala. cedvelde sıfırğa qadar toplanğan eki ayrı element olsa, True, aks alda ise False qaytarır. >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,crh_Latn,python,"

def change_base(x: int, base: int):
    """"""Kirsetilgen x sayısınıñ sayısal temelini temelge deñiştir. Deñiştirüvden soñ dizim temsilini qaytar. temel sayıları 10-dan azdır. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,crh_Latn,python,"

def triangle_area(a, h):
    """"""Üçbucaq içün bir yanıñ uzunlığı ve yüksek qaytuv alanı berilgen. >>> üçbucaq_alanı""""""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,crh_Latn,python,"

def fib4(n: int):
    """"""Fib4 sayı sırası, Fibbonacci ardısırasına oşağan bir ardısıradır, o, böyle tarif etile: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Lütfen fib4 sayı sırasınıñ n-inci elementini semereli bir şekilde esaplamaq içün bir funktsiyanı yazıñız. Rekursiyanı qullanmañız. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,crh_Latn,python,"

def median(l: list):
    """"""Listamdaki elementlerniñ qaytaruv medianası l. >>> medianası (([3, 1, 2, 4, 5]) 3 >>> medianası (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,crh_Latn,python,"

def is_palindrome(text: str):
    """"""Berilgen satırnıñ palindrom olğanını teşkere >>> is_palindrom (('') True >>> is_palindrom (('aba') True >>> is_palindrom (('aaaaa') True >>> is_palindrom (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,crh_Latn,python,"

def modp(n: int, p: int):
    """"""2^n modulo p qaytarıñız (sayılardan haberdar olıñız). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,crh_Latn,python,"

def encode_shift(s: str):
    """"""encode_shift funktsiyası ile kodlanğan kiriş satırı olaraq ala. Kodlanılğan satırnı qaytarır. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""her bir harfini 5 ile degistirip kodlu bir satir verir.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,crh_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels - bu, cenk alıp, cenkni vokalsız qaytarğan bir funktsiyadır. >>> remove_vowels (('') ' ' >>> remove_vowels (('abcdef\nghijklm') 'bcdf\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,crh_Latn,python,"

def below_threshold(l: list, t: int):
    """"""l listesindeki bütün sayılar t azlığındaysa, doğru qaytar. >>> azlığındaysa_azlığındaysa (([1, 2, 4, 10], 100) Doğru >>> azlığındaysa_azlığındaysa (([1, 20, 4, 10], 5) Yanlış """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,crh_Latn,python,"

def add(x: int, y: int):
    """"""Eki x ve y sayısını qoşmaq >>> qoşmaq ((2, 3) 5 >>> qoşmaq ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,crh_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Eki sözniñ aynı harfleri barmı teşkeriñiz. >>> same_chars ((('eabcdzzzz', 'dddzzzzzzzddeddabc') Doğru >>> same_chars ((('abcd', 'dddddddddabc') Doğru >>> same_chars ((('dddddddabc', 'abcd') Doğru >>> same_chars ((('eabcd', 'dddddddddabc') Yanlış >>> same_chars ((('abcdd', 'dddddddabddce') Yanlış >>> same_chars (((abcdzzzz', 'dddzzzzzzzddabddc') Yanlış """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,crh_Latn,python,"

def fib(n: int):
    """"""Fibonaççi n-inci sayısını qaytarıñız. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,crh_Latn,python,"

def correct_bracketing(brackets: str):
    """"""parantezler ""<"" ve "">"" bir dizinidir. Er açılış parantezniñ uyğun bir qapatma parantezi olsa doğru qaytar. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,crh_Latn,python,"

def monotonic(l: list):
    """"""Doğru qaytarıluvı, cedvel elementleri monoton şekilde arttıra ya da eksilmekte. >>> monoton (([1, 2, 4, 20]) Doğru >>> monoton (([1, 20, 4, 10]) Yanlış >>> monoton (([4, 1, 0, -10]) Doğru """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,crh_Latn,python,"

def common(l1: list, l2: list):
    """"""Eki cedvel içün sıralanğan yekâne umumiy elementlerni qaytar. >>> umumiy (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> umumiy (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,crh_Latn,python,"

def largest_prime_factor(n: int):
    """"""n-niñ eñ büyük baş faktorını qaytarıñız. n > 1 olğanını ve baş faktor olmağanını qabul etiñiz. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,crh_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n, 1den n-ge qadar sayılarnı toplağan bir funktsiyadır. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,crh_Latn,python,"

def correct_bracketing(brackets: str):
    """"""parantezler ""("" ve """") bir sıra. Er açılış parantezniñ uyğun bir qapatma parantezi olsa doğru qaytar. >>> correct_bracketing (((""("") False >>> correct_bracketing ((("")) True >>> correct_bracketing (((())) True >>> correct_bracketing ((("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,crh_Latn,python,"

def derivative(xs: list):
    """"""xs bir polinomnıñ koeffitsiyentlerini temsil ete. xs[0] + xs[1] * x + xs[2] * x^2 + .... Bu polinomnıñ türevini aynı şekilde qaytarıñız. >>> türev (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> türev (([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,crh_Latn,python,"

def fibfib(n: int):
    """"""FibFib sayılar sırası, Fibbonacci sırasına oşağan bir sıradır, o aşağıdaki şekilde tarif etile: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Lütfen fibfib sayılar sırasınıñ n-inci elementini semereli bir şekilde esaplamaq içün bir funktsiya yazıñız. >>> fibfib(1) 0 >>> fib fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,crh_Latn,python,"
FIX = """"""Bir sözniñ bir satırını alıp, satırdaki seslerniñ sayısını qaytarğan bir funktsiyanı yazıñız. Bu satırdaki sesler 'a', 'e', 'i', 'o', 'u'dır. Bu yerde 'y' de seslidir, amma tek berilgen sözniñ soñunda olğanda. Örnek: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Daa çoq test vaqiası qoşıñız.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,crh_Latn,python,"
def circular_shift(x, shift):
    """"""Circular shift tamsayı x'niñ raqamlarını, shift tarafından sağğa raqamlarnı deñiştir ve neticeni bir dizim olaraq qaytar. Shift > raqam sayısı ise, raqamlarnı tersine qaytar. >>> circular_shift ((12, 1) ""21"" >>> circular_shift ((12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,crh_Latn,python,"
def digitSum(s):
    """"""Vazife Bir satırnı kirsetme olaraq alğan ve tek üst harflerniñ toplamını qaytarğan bir funktsiyanı yazmaq. ASCII kodları. Misaller: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,crh_Latn,python,"
def fruit_distribution(s,n):
    """"""Bu vazifede size bir sıra verilecek ki, o, meyvalar sepetinde dağıtılan alma ve portakal sayısını temsil ete. Bu sepette alma, portakal ve mango meyvaları bar. Portakal ve almalarnıñ umumiy sayısını temsil etken sıra ve sepetteki meyvalarnıñ umumiy sayısını temsil etken tam sayısını bergen, sepette mango meyvalarınıñ sayısını qaytarıñız. misal olaraq: fruit_distribution""5(alma ve 6 portakal"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 alma ve 1 portakal"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 alma ve 3 portakal"",100) -> 100 - 2 - 3 = 95 fruit_distribution""100 alma ve 1 portakal"",120) -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,crh_Latn,python,"
def pluck(arr):
    """"""""Negativ olmağan tam sayılar noqtaları olğan ağaçnıñ bir dalını temsil etken bir sıra berilse, vazifeñiz - noqtalardan birini alıp qaytarmaq. Alınğan noqta eñ küçük çift qıymeti olğan noqta olmalı. Eger aynı eñ küçük çift qıymeti olğan bir qaç noqta tapılsa, eñ küçük indeksli noqtanı qaytarmaq. Alınğan noqta bir cedvelde qaytarılmalı, [smallest_value, onıñ indeksi] , Eger çift qıymetler olmasa ya da berilgen sıra boş olsa, qaytarmaq []. Misal 1: Giriş: [4,2,3] Çıqış: [2, 1] Açıqlama: 2 eñ küçük çift qıymeti bar, 2 ise eñ küçük indeksi bar. Misal 2: Giriş: [1,2,3] Çıqış: [2, 1] Açıqlama: 2 eñ küçük qıymeti bar, 2 ise eñ küçük indeksi bar. Misal 3: Giriş: [] Çıqış: [4: 5, 3, 4, 2] Çıqış: 1 [0, 0] Çıqış: 1 eñ küçük indeksli noqta olmalı, amma eki sıfır bar. * = 0""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,crh_Latn,python,"
def search(lst):
    '''Sizge müsbet bütün sayılarnıñ boş olmağan cedveli berile. Sıfırdan büyük olğan ve bütün sayınıñ qıymetinden büyük ya da teñ olğan eñ büyük bütün sayısını qaytarıñız. Tam sayınıñ sıqlığı, cedvelde peyda olğan sayıdır. Böyle bir qıymet olmasa, -1 qaytarıñız. Misaller: qıdırmaq ([4, 1, 2, 2, 3, 1]) == 2 qıdırmaq ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 qıdırmaq ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,crh_Latn,python,"
def strange_sort_list(lst):
    '''Tam sayılar cedveli berilgen soñ, cedvelni acayip sırada qaytarıñız. Acayip sıralama, eñ az qıymetnen başlağanda, soñra qalğan tam sayılarnıñ eñ çoq, soñra eñ az ve ilâhre ola. Misaller: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,crh_Latn,python,"
def triangle_area(a, b, c):
    '''Üçbucaqnıñ üç tarafınıñ uzunlıqları berilgen. Üç tarafı doğru üçbucaqnı teşkil etse, üçbucaqnıñ meydanı 2 onluq noqtasına yuvarlanğanını qaytarıñız. Aks alda, -1, Üç taraf, er eki tarafnıñ toplamı üçünci taraftan büyük olğanda, doğru üçbucaqnı teşkil ete. Misal: üçbucaq_mülki (mülki) {3, 4, 5) == 6.00 üçbucaq_mülki (mülki) {1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,crh_Latn,python,"
def will_it_fly(q,w):
    '''Q obyekt uçsa, doğru, aks alda ise, yalan qaytaracaq bir funktsiyanı yazıñız. Q obyekt uçsa, o balanslı (palindromik bir cedvel) ve onıñ elementleriniñ toplamı mümkün olğan eñ büyük ağırlıqtan az ya da teñ olsa, o uçur. Misal: will_it_fly (([1, 2], 5) â -> Yalğan # 1+2 mümkün olğan eñ büyük ağırlıqtan az, amma o balanssızdır. will_it_fly (([3, 2, 3], 1) â -> Yalğan # o balanslıdır, amma 3+2+3 mümkün olğan eñ büyük ağırlıqtan çoqtur. will_it_fly (([3, 2, 3], 9) â -> Doğru # 3+23 mümkün olğan eñ büyük ağırlıqtan az ve o balanslıdır. will_it_fly ((([3], 5) â -> Doğru # 3 mümkün olğan eñ büyük ağırlıqtan az ve o balanslıdır.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,crh_Latn,python,"
def smallest_change(arr):
    """"""Tam sayılarnen ibaret bir sıra berilgen olsa, sıra palindromik olması içün deñiştirilmesi kerek olğan elementlerniñ eñ az sayısını tap. Palindromik sıra, bir elementni er angi başqa elementke deñiştirmek mümkün. Misal olaraq: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,crh_Latn,python,"
def total_match(lst1, lst2):
    '''Eki satır cedvelini qabul etken ve cedvelniñ bütün satırlarında diger cedvelden az karakter sayısı olğan cedvelni qaytarğan bir funktsiya yazıñız. eki cedvelde aynı sayıda karakter olsa, birinci cedvelni qaytarıñız. Misallar total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi'], 'hi'_match ((['4'], ['1'', '2'', '3'', '4'', '5']) -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,crh_Latn,python,"
def is_multiply_prime(a):
    """"""Berilgen sayı 3 birinci sayınıñ çarpımı olsa ve başqa türlü yalan olsa, doğru qaytarğan bir funktsiyanı yazıñız. (a) 100'den az olğanını bilip. Misal: is_multiply_prime ((30) == True 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,crh_Latn,python,"
def is_simple_power(x, n):
    """"""Siziñ vazifeñiz, x sayısı n-niñ sade bir küçü olsa ve diger allarda yalan olsa, doğru qaytarğan bir funktsiyanı yazmaq. x, n-niñ sade bir küçü olsa, yalandır. Misal olaraq: is_simple_power ((1, 4) => true is_simple_power ((2, 2) => true is_simple_power ((8, 2) => true is_simple_power ((3, 2) => false is_simple_power ((3, 1) => false is_simple_power ((5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,crh_Latn,python,"
def iscube(a):
    '''Bir tam sayını ala ve bu sayı bir tam sayınıñ kübü olsa, kerçek qaytarğan bir funktsiyanı yazıñız.'''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,crh_Latn,python,"
def hex_key(num):
    """"""Sizge, altı onluq sayını bir sıra olaraq qabul etken ve birinci sayılar olğan altı onluq raqamlarnıñ sayısını sayğan bir funktsiyanı yazmaq vazifesi berildi (asıl sayı, ya da bir birinci, 1'den büyük, eki kiçik tabiiy sayınıñ çarpımı olmağan tabiiy sayıdır). Altın onluq raqamları 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Asıl raqamlar 2, 3, 5, 7, 11, 13, 17,... Yani siz aşağıdaki raqamlarnıñ sayısını belgilemege mecbursıñız: 2, 3, 5, 7, B (= onluq 11), D (= onluq 13). Qayd: siz, kiriş daima doğru ya da boş olğanını tüşünmek mümkün, ve A,B,C,D,E,F timsalleri er vaqıt büyük harflernen yazıla. Misaller: ""AB"" numeri içün çıqış numeri 1. ""AB"" numeri içün çıqış numeri = 1. ""AB"" numeri içün çıqış numeri = 10.77 ""E"" numeri olmalı 2. ""AB"" numeri içün çıqış numeri = 1.33 ""AB"" numeri = 4.33 ""A"" numeri olmalı ""ABC"" numeri = 4.1289 ""A"" numeri içün çıqış numeri = 6.045 ""A"" numeri olmalı. ""2020"" EFD """"""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,crh_Latn,python,"
def decimal_to_binary(decimal):
    """"""size onluk şeklinde bir sayı verilir ve sizin vazifeniz onu ikili formatqa çevirmektir. funksiyan bir dizin qaytarmalı, her bir simgesi ikili sayını temsil etecek. dizin her bir simgesi '0' ya da '1' olacaq. dizin başında ve sonunda 'db' ekstra bir çift simge olacaq. formatda yardım etmek içün ekstra simgeler olacaq. Örnekler: decimal_to_binary ((15) # ""db1111db"" onluk_to_binary32) # ""db100000db"" qaytarır""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,crh_Latn,python,"
def is_happy(s):
    """"""Size bir string s verilir. Sizin vazifeniz, stringin mutlu olup olmadigini yoxlamaqdir. Bir string, uzunu en az 3 ve ard-arda her 3 harfi ferqli olanda mutlu sayilir. Mesel: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy)) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,crh_Latn,python,"
def numerical_letter_grade(grades):
    """"""Semestrniñ soñki aftası ve oca talebelerge ballarnı bere. Oca öz alğoritmini yarata. Tek bir mesele, o, ballarnı ayırmaq içün qullanğan kodnı ğayıp etti. O, sizge bazı talebeler içün GPA cedvelini berdi ve siz aşağıdaki cedvelni qullanıp, mektüp ballarınıñ cedvelini çıqarğan bir funktsiyanı yazmalısıñız: GPA  Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,crh_Latn,python,"
def prime_length(string):
    """"""Bir satır alıp, satır uzunlığı bir birinci sayıs olsa, doğru ya da yañlış qaytarğan bir funktsiyanı yazıñız. Misal prime_length (('Merhaba') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,crh_Latn,python,"
def starts_one_ends(n):
    """"""Bir müsbet tam sayısı n berilgen soñ, 1-den başlağan ya da bitken n-sanlı müsbet tam sayılarnıñ sayısını qaytarıñız.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,crh_Latn,python,"
def solve(N):
    """"""müsbet bir tam sayısı N berilgen, ekili olaraq onıñ raqamlarınıñ umumiy toplamını qaytar. Misal N = 1000 içün, raqamlarnıñ toplamı 1 olacaq, çıqış ""1"" olmalı. N = 150 içün, raqamlarnıñ toplamı 6 olacaq, çıqış ""110"" olmalı. N = 147 içün, raqamlarnıñ toplamı 12 olacaq, çıqış ""1100"" olmalı. Değişkenler: @N tam sayılar Sıñırlamalar: 0 â‰¤ N â‰¤ 10000. Çıqış: ekili sayılarnıñ bir sıra """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,crh_Latn,python,"
def add(lst):
    """"""Tam sayılarnıñ boş olmağan cedvelini köz ögüne alsaq, lst. tek indekslerde olğan çift elementlerni qoşmaq. Misal: qoşmaq (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,crh_Latn,python,"
def anti_shuffle(s):
    """"""Bir dizin alıp, onıñ tertip etilgen versiyasını qaytarğan bir funktsiyanı yazıñız. Dizin tertip etilgen versiyası, bütün sözlerniñ (boşluqnen ayırılğan) ascii qıymetine esaslanıp, episi arifler artan tertipte tertip etilgen yañı söznen deñiştirilgen bir dizinidir. Qayd: Sözlerniñ ve boşluqlarnıñ tertibini cümlede tutmaq kerek. Meselâ: anti_shuffle ((('Hi') 'Hi' anti_shuffle ((('hello') qaytarır 'ehllo' anti_shuffle (('Hello World!!!') qaytarır 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,crh_Latn,python,"
def get_row(lst, x):
    """"""Sizge 2 ölçülü bir malümat, yuvalama cedveller olaraq, matriske oşağan, amma matrislerden farqlı olaraq, er satırda başqa sayıda sütun ola bile. lst ve tam sayısı x berilgen olsa, cedvelde x tam sayısını tapıñız ve 0 ile başlağan tupleler cedvelini qaytarıñız. Er bir tuple koordinatları - (sıra, sütunlar), 0 ile başlağan bir koordinat ola. Ayrıca, satır koordinatlarını tüşken sırada sıralar boyunca sıralañız. Misaller: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), (2, 5), (2, 0), get_(], 1) [] == [[sıra, 1, 2, 3]], == 2, 2]] ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,crh_Latn,python,"
def sort_array(array):
    """"""Negativ olmağan bütün sayılarnıñ bir sıraları berilgen, sıralama soñ berilgen sıralarnıñ bir kopiyasını qaytarıñız, berilgen sıralarnı, toplamı ((birinci indeks qıymeti, soñki indeks qıymeti) tek olsa, yükseliş tertibinde sıralaycaqsıñız, ya da toplamı ((birinci indeks qıymeti, soñki indeks qıymeti) çift olsa, tüşüv tertibinde sıralaycaqsıñız.""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,crh_Latn,python,"
def encrypt(s):
    """"""Bir dizinni argüman olaraq alıp, elifbe çevirilgen bir dizin qaytarğan bir şifreleme funktsiyasını yarata. Elifbe öyle bir şekilde çevirilmeli ki, mektüpler eki kere eki yerge tüşsin. Meselâ: şifreleme ((hi) ' 'lm' şifreleme ((asdfghjkl) 'ewhjklnop' şifreleme ((gf) 'kj' şifreleme ((et) 'ix' qaytarır.""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,crh_Latn,python,"
def next_smallest(lst):
    """"""Sizge tam sayılar cedveli berile. cedvelniñ 2-nci eñ kiçik elementini qaytarğan next_smallest () funktsiyasını yazıñız. Böyle bir element olmasa, None qaytarıñız. next_smallest () [1, 2, 3, 4, 5]) == 2 next_smallest () [5, 1, 4, 3, 2]) == 2 next_smallest () == next_smallest () == None""""""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,crh_Latn,python,"
def is_bored(S):
    """"""Sizge bir sıra söz berilecek ve vazifeñiz - can sıkıntısı sayısını saymaqtır. Can sıkıntısı - ""Men"" sözünden başlağan bir cümledir. Cümleler '.', '?' ya da '! ' ile sıñırlana. Meselâ: >>> can sıkıntısı (is_bored) ""Salam dünya"") 0 >>> can sıkıntısı (is_bored) ""Kök mavı. Küneş parlay. Bu avağa bayıla"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,crh_Latn,python,"
def any_int(x, y, z):
    '''3 sayını alğan bir funktsiyanı yarat. Sayılarnıñ biri diger ekisiniñ toplamına teñ olsa ve bütün sayılar tam sayılar olsa, doğru olaraq qaytarır. Diger vaziyetlerde yañlış olaraq qaytarır. Misallar: er_int{5, 2, 7} -> Er_int{3, 2, 2} -> Er_int{3, -2, 2} -> Er_int{3, -2, 1} -> Er_int{3, -2, 1} -> Er_int{3, 6} -2, 2} -> Er_int{3, 6} -2, 2} - -> Er_int{3} -2, 1 {2, 2} -1, 1 {1, 3} -2, 1 {1, 3} -2, 1 {1, 3} -2, 1 {1, 3} -2, 1 {1, 3} -2, 1 {1, 3} -2, 1 {1, 3} -2, 2 {1, 3} -2, 3 {1, 3} -1, 3 {1, 3} -1, 4 {1, 3} -2, 3 {1, 3} -2, 3 {1, 3} -2, 4 {1, 3} -2, 3 {1, 3} -2, 3 {1, 3} -2, 4 {1, 3 {1, 3} -2, 3 {1, 3} -2, 4 {1, 5} -2, 5 {1, 6 {1, 6} -2, 7} -2, 7 {1, 7} -9, 9 {1, 7}'''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,crh_Latn,python,"
def encode(message):
    """"""Bir mesaj alacaq ve bütün harflerniñ büyükligini deñiştirerek, mesajdaki bütün vokallarnı ingliz elifbesinde o vokaldan 2 yer ögünde olğan harfnen deñiştirerek kodlaycaq bir funktsiyanı yazıñız.""""""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,crh_Latn,python,"

def skjkasdkd(lst):
    """"""Sizge tam sayılar cedveli berile. Siz eñ büyük birinci qıymetini tapıp, onıñ raqamlarınıñ toplamını qaytarmaq kereksiz. Misal: Lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] içün çıqış 10 olmalı Lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] içün çıqış 25 olmalı Lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] içün çıqış 13 olmalı Lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] içün çıqış 11 olmalı Lst = [0,81,12,3,21,1] içün çıqış 3 olmalı Lst = [0,8,1,2,1,7] içün çıqış 7 olmalı""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,crh_Latn,python,"
def check_dict_case(dict):
    """"""Bir sözlük berilgen, eger bütün tuşlar küçük harflerdeki dizilerdir ya da bütün tuşlar büyük harflerdeki dizilerdir, doğru qaytarır, aks alda Yanlış qaytarır. Funktsiya Yanlış qaytarmalı, berilgen sözlük boş olsa. Misaller: check_dict_case{""a"":""apple"", ""b"":""banana""}) doğru qaytarmalı. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) yalan qaytarmalı. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) yalan qaytarmalı. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) Yanlış qaytarmalı. check_dict_case{""NC"":""STATE"", ""ZIP"":""12345"" }) doğru qaytarmalı.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,crh_Latn,python,"
def count_up_to(n):
    """"""Menfiy olmağan bir bütün sayısını alıp, ilk n tam sayıdan ibaret ve n-den az olğan sıra qaytarğan bir funktsiyanı amelge keçiriñiz. Meselâ: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,crh_Latn,python,"
def multiply(a, b):
    """"""Eki tam sayını alıp, olarnıñ birlik raqamlarınıñ çarpımını qaytarğan funktsiyanı tamamlañız. Giriş daima doğru olğanını qabul etiñiz. Misaller: multiply ((148, 412) 16-nı qaytarmalı, multiply ((19, 28) 72-ni qaytarmalı, multiply ((2020, 1851) 0 qaytarmalı, multiply ((14,-15) 20-ni qaytarmalı.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,crh_Latn,python,"
def count_upper(s):
    """"""S dizimini köz ögüne alsaq, tek indekslerde büyük vokallarnıñ sayısını say. Meselâ: count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 qaytarır """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,crh_Latn,python,"
def closest_integer(value):
    '''Bir sayını temsil etken qıymet (sıra) alıp, oña eñ yaqın tam sayını qaytarğan bir funktsiyanı yarat. Eger sayı eki tam sayıdan teñ mesafede olsa, onı sıfırdan uzaqlaştır. Misaller >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Not: Sıfırdan uzaqlaştırmaq demek ki, berilgen sayı eki tam sayıdan teñ mesafede olsa, qaytarmaq kerek olğan raqam sıfırdan eñ uzaq olğan raqamdır. Misal içün closest_integer "" ((14.5"") 15 qaytarmalı ve closest_integer "" ((-14.5"") -15 qaytarmalı. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,crh_Latn,python,"
def make_a_pile(n):
    """"""Bir müsbet tamsayı n berilgen, siz n seviyede taşlar yığını yapmalı. Birinci seviyede n taş bar. Kelecek seviyede taşlarnıñ sayısı: - n tek olsa, nevbetteki tek sayıdır. - n çift olsa, nevbetteki çift sayıdır. Er seviyede taşlarnıñ sayısını cedvelde qaytarıñız, mında indeks i-deki element seviyede taşlarnıñ sayısını ifadeley (i+1). Misaller: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,crh_Latn,python,"
def words_string(s):
    """"""Sizge koma ve boşluqlarnen ayırılğan bir sıra söz berilecek. Siziñ vazifeñiz - bu satırnı sözlerge bölmek ve sözlerniñ bir sıralarını qaytarmaq. Meselâ: words_string ((""Merhaba, menim adım John"") == [""Merhaba"", ""münim"", ""adı"", ""olmaq"", ""John""] words_string ((""Bir, eki, üç, dört, beş, altı"") == [""Bir"", ""eki"", ""üç"", ""dört"", ""beş"", ""altı""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,crh_Latn,python,"
def choose_num(x, y):
    """"""Bu funktsiya eki müsbet x ve y sayısını ala ve [x, y] aralığında bulunğan eñ büyük çift tam sayısını qaytarır.""""""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,crh_Latn,python,"
def rounded_avg(n, m):
    """"""Size n ve m eki musbet tam sayılar berilir ve sizin vazifeñiz n-den m-ge qadar tam sayılarnıñ ortalamasını esaplamaqdır (n ve m-ni de kirsetip). Cevabı eñ yaqın tam sayısına yuvarlap, onı ekinci sayıya çevirin. Eger n m-den büyük ise, -1 qaytarıñız. Misal: rounded_avg(1, 5) => ""0b11"" rounded_avg(7, 5) => -1 rounded_avg(10, 20) => ""0b1111"" rounded_avg(20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,crh_Latn,python,"
def unique_digits(x):
    """"""müsbet tam sayılar cedveli berilgen x. bir dane bile sayı olmağan bütün elementlerniñ sıralanğan cedvelini qaytar. Qayd: qaytarılğan cedvel artuv sırası ile sıralanmalı. Meselâ: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,crh_Latn,python,"
def by_length(arr):
    """"""Tam sayılar dizimi berilgen soñ, 1 ve 9 arasında olğan tam sayılarnı sırala, neticede elde etilgen dizimi tersine çevir ve soñra er bir raqamnı ""Bir"", ""Eki"", ""Üç"", ""Dört"", ""Beş"", ""Altı"", ""Yedi"", ""Sekiz"", ""Doquz"" kibi nomeralarnen deñiştir. Meselâ: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sırala arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> tersine sırala arr -> [8, 5, 4, 3, 2, 2, 1, 1] qaytarma [""Eki"", ""Dört"", ""Üç"", ""Eki"", ""Eki"", ""Bir"", ""Bir""] Eger dizim boş olsa, bir sıra qaytar: arr = [] qaytarma [] Eger dizimde acayip raqam olsa, onı körmey: arr = [1, -1 , 55] -> sırala -> [1, 1], 55 -> tersine sırala arr = [55,1] - qaytarma ['One' 1,'] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,crh_Latn,python,"
def f(n):
    """"""f funktsiyasını amelge keçiriñiz, o n-ni parametr olaraq qabul ete ve n büyükliginde bir cedvelni qaytarır, böyleliknen, i indeksindeki elementniñ qıymeti, i-niñ faktoriali ola, eger i çift olsa ya da 1 ile i arasındaki sayılarnıñ toplamı olsa. i 1-den başlana. i-niñ faktoriali, 1 ile i arasındaki sayılarnıñ çarpımıdır (1 * 2 * ... * i). Misal: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,crh_Latn,python,"
def even_odd_palindrome(n):
    """"""müsbet bir tam sayısı n berilgen, aralıq içinde bulunğan çift ve çet tam sayılar palindromlarınıñ sayısı olğan bir tuple qaytar. Misal1: Giriş: 3 Çıqış: (1, 2) Açıqlama: Tam sayılar palindromı 1, 2, 3. olardan biri çift, ekisi ise çet. Misal2: Giriş: 12 Çıqış: (4, 6) Açıqlama: Tam sayılar palindromı 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. dördü çift, 6 ise çet. Qayd: 1. 1 <= n <= 10^3 2. tuple, sırasıyla, çift ve çet tam sayılar palindromlarınıñ sayısını qaytarğan. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,crh_Latn,python,"
def count_nums(arr):
    """"""Bir sayını menfiy olsa, onda onıñ birinci imzalanğan raqamı menfiy olacaq: misal olaraq, -123 -1, 2 ve 3 raqamları ile imzalanğan olacaq: >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,crh_Latn,python,"
def move_one_ball(arr):
    """"""Bizde N tam sayılardan ibaret 'arr' dizisi bar arr[1], arr[2], ..., arr[N].Sınırdaki sayılar tesadüfiy şekilde sıralanır. Siziñ vazifeñiz, berilgen dizide aşağıdaki ameliyatnı yapıp, azalmağan tertipte sıralanğan bir dizini elde etmek mümkün olğanını belgilemektir: Sağa doğru deñiştirüv ameliyatını er angi sayıda yapmağa ruhset etile. Bir sağğa doğru deñiştirüv ameliyatı, dizideki bütün elementlerni bir yerden sağ yönelişke deñiştirmek demektir. Dizideki soñki element, dizideki başlanğıç yerge yani 0-inci indekske avuştırılacaq. Yuqarıdaki ameliyatnı yapıp, tertip etilgen dizini elde etmek mümkün olsa, doğru qaytar, başqa türlü sahte qaytar. Eger berilgen dizide boş olsa, sahte qaytar.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,crh_Latn,python,"
def exchange(lst1, lst2):
    """"""Bu problemde, siz, eki sayılar cedvelini alıp, lst1 cedvelini tek tek sayılarnen yapmaq içün, olar arasında elementlerni deñiştirmek mümkünmi, dep belgileycek bir funktsiyanı amelge keçireceksiñiz. lst1 ve lst2 arasında deñiştirilgen elementlerniñ sayısına sıñır yoq. lst1 ve lst2 arasında bütün elementlerni musaviy yapmaq içün lst1 arasında elementlerni deñiştirmek mümkün ise, ""EVET"" qaytarıñız. Aks alda, ""YOK"" qaytarıñız. Meselâ: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""EVET"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""YOK"" Giriş cedvelleriniñ boş olmağanını farz etemiz. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,crh_Latn,python,"
def histogram(test):
    """"""Boşluqlarnen ayırılğan küçük harflerni temsil etken bir dizin berilse, eñ çoq tekrarlanğan ve munasip sayısını bergen harfniñ luğatını qaytarıñız. Bir qaç harf aynı olsa, episini qaytarıñız. Misal: histogramma ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogramma ((('a b b a') == {'a': 2, 'b': 2} histogramma ((('a b c a b') == {'a': 2, 'b': 2} histogramma ((('b b a') == {'b 4}: histogramma (((')) == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,crh_Latn,python,"
def reverse_delete(s,c):
    """"""vazife bize iki s ve c satiri verilir, s de her hangi bir c satiri ile eyni olan her seyi silmek lazimdir, sonra neticede gelen satirin palindrom oldugunu yoxlamaq lazimdir. bir satir, eger qabaq ve geri eyni oxusursa, palindrom deyilir. senet neticesinde gelen satir ve True/False olan bir tuple qaytarmalisiniz. misal s = ""abcde"", c = ""ae"", neticede ('bcd',False) olmalidir. s = ""abcdef"", c = ""b"" neticede ('acdef',False) olmalidir. s = ""abcdedcba"", c = ""ab"", neticede ('cdedc',True) olmalidir.""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,crh_Latn,python,"
def odd_count(lst):
    """"""Er bir satır tek raqamlardan ibaret olğan bir sıra berilgen soñ, bir sıra qaytar. Çıqaruvnıñ er i elementi ""i"" kirişniñ i satırındaki tek elementlerniñ sayısı olmalı. ""bu yerde bütün i'ler kirişniñ i'inci satırındaki tek raqamlarnıñ sayısı ile deñiştirilmeli. >>> odd_count['1234567']) [""4n str4ng 4 of the 4nput.""] >>> odd_count['3',""111111""]) [""1n str1ng 1 of the 1nput."", ""8n str8ng 8 of the 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,crh_Latn,python,"
def minSubArraySum(nums):
    """"""Tam sayılarnıñ bir sıraları berilgen olsa, boş olmağan er bir sıralarnıñ az miqdarını tap. Misal minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,crh_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Sizge quyularnıñ dörtköşe şekilli bir şebekesi berile. Er bir satır tek bir quyuğa, er bir satırdaki 1 de bir suv birligine işaret ete. Er quyuda ondan suv çıqarmaq içün qullanıla bilgen bir kova bar, ve bütün kovalarnıñ aynı sığırtma qabiliyeti bar. Siziñ vazifeñiz quyularnı boşatmaq içün kovalarnı qullanmaq. Çıqaruv, quyularnı tüşürmek içün kerek olğan sayısını yazmaq. Misal 1: Giriş: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] quyu_qırımı: 1 Çıqaruv: 6 Misal 2: Giriş: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] quyu_qırımı: 2 Çıqaruv: 5 Misal 3: Giriş: [[0,0,0], [0,0,0]] quyu_qırımı: 5 Çıqaruv: 0 * Çıqaruv: 1 * Çıqaruv: 1 * Bütün quyularnıñ uzunlığı aynıdır: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: 1 * Çıqaruv: * Çıqaruv: * Çıq: * Çıqaruv: * Çıq: * Çıq: * Çıq: * Çıq: * Çıq: * Çıq: * Çıq: * Çıq: * Çıq: * Çıq: * Çıq: * Çıq: * Çıq: * Çıq: * Çıq: * Çıq: * * * * * * * * * * * * * * * * * * * * * * * *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,crh_Latn,python,"
def sort_array(arr):
    """"""Bu Kata'da, menfiy olmağan bütün sayılarnıñ sıralarını, ekincilik timsalinde olğan birlerniñ sayısına köre, artqan tertibde sıralamaq kerek. Aynı birlerniñ sayısı içün, ondalık qıymetine köre sıralamaq kerek. Bu böyle yapmaq kerek: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,crh_Latn,python,"
def select_words(s, n):
    """"""s ve n bir tabiiy sayısı berilgen, s satırından tam olaraq n bir yırcı bar olğan bütün sözlerniñ cedvelini qaytarğan bir funktsiyanı işlep çıqarmız, s satırında bu sözlerniñ peyda olması içün. s satır boş olsa, o zaman funktsiyanıñ boş bir cedvel qaytarması kerek.""""""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,crh_Latn,python,"
def get_closest_vowel(word):
    """"""Sizge bir söz berile. Siziñ vazifeñiz - sözniñ sağ tarafından eki sesli arasında turğan eñ yaqın sesli harfni tapmaq (qısqa-yañı harflerge has). Başlağan ve bitken sesli harfler sayılmay. Yuqarıdaki şartlarğa uyğan bir de bir sesli harf tapılmasa boş satır qaytarıñız. Berilgen satır tek ingliz harfleri olğanını tüşünmek mümkün. Misal: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""UULL"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,crh_Latn,python,"
def match_parens(lst):
    '''Sizge eki satırdan ibaret bir cedvel berile, eki satır da tek '(' açıq qavğalardan ya da ') ' qapatılğan qavğalardan ibaret. Siziñ vazifeñiz eki satırnı belli bir tertipte birleştirmek mümkünmi, neticede satır yahşı olurmı, teşkermek. S satırı, S içindeki bütün qavğalar balanslı olsa, yahşı sayıla. Meselâ: '((())') satır yahşı, '())' satır ise yahşı degil. Eger yahşı bir satır yapmaq içün bir yol olsa, 'Evet' qaytar, aks alda ise 'Yoq' qaytar. Misaller: match_parens[('() ', ') ']) == 'Evet' match_parens[(') ', ') ']) == 'Yoq' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,crh_Latn,python,"
def maximum(arr, k):
    """"""Bir sıra ve k musbet tam sayısını bergen, uzunlığı k olğan ve eñ çoq k sayıdan ibaret olğan sıralanğan cedvelni qaytarıñız. Misal1: Giriş: arr = [-3, -4, 5], k = 3 Çıqış: [-4, -3, 5] Misal2: Giriş: arr = [4, -4, 4], k = 2 Çıqış: [4, 4] Misal3: Giriş: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Çıqış: [2] Qeyd: 1. Array uzunlığı [1, 1000] aralığında olacaq. 2. Arraydaki elementler [-1000, 1000] aralığında olacaq. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,crh_Latn,python,"
def solution(lst):
    """"""Boş olmağan tam sayılar cedvelini köz ögüne alsaq, bütün tek elementlerniñ toplamını qaytarırmız. Örnekler çezilmesi (([5, 8, 7, 1]) ==> 12 çezilmesi (([3, 3, 3, 3, 3]) ==> 9 çezilmesi (([30, 13, 24, 321]) ==>0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,crh_Latn,python,"
def add_elements(arr, k):
    """"""Qolsuz olmağan arr ve k tam sayılarnıñ sıraları berilgen olsa, arrnıñ ilk k elementlerinden eñ çoq eki raqamlı elementlerniñ toplamını qaytarıñız. Misal: Giriş: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Çıqış: 24 # 21 + 3 toplamı Sıñırlamalar: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,crh_Latn,python,"
def get_odd_collatz(n):
    """"""Bir müsbet tam sayısı n berilgen, sıralanğan bir cedvelni qaytarıñız, onda tek sayılar collatz ardı-sıra. Collatz faraziyesi - riyaziyatta bir faraziyedir, o, böyle şekilde tayin etilgen ardı-sırağa ait: er bir müsbet tam sayısı n ile başla. Soñra er terim evelki terimden böyle alınır: eger evelki terim çift olsa, nevbetteki terim evelki terimniñ yarısıdır. Eger evelki terim tek olsa, nevbetteki terim evelki terimniñ 3 qatı artı 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,crh_Latn,python,"
def valid_date(date):
    """"""Berilgen tarih satırını tasdıqlağan ve tarih doğru olsa, kerçek qaytarğan bir funktsiyanı yazmaq kerek, aks alda - sahte. Tarih, aşağıdaki qaidelerniñ episi yerine ketirilse, kerçek ola: 1. Tarih satırı boş degil. 2. Kün sayısı 1,3,5,7,8,10,12 aylar içün 1 künden az degil ya da 31 künden çoq degil. Kün sayısı 4,6,9,11 aylar içün 1 künden az degil ya da 30 künden çoq degil. Kün sayısı 1 künden az degil ya da 29 künden çoq degil. Aylar 1 künden az degil ya da 12 künden çoq degil. Tarih, mm-dd-yyyy formatında olmalı, misal olaraq: valid_date ((('03-11-2000') => True_valid_date ((('15-01-2012') => False valid_date ((('04-02040') => False_valid_date ((('06-04-2020') => True_valid_date ((('06/04/2020') => False""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,crh_Latn,python,"
def split_words(txt):
    '''Bir söz ketirildi, boşluqlarnen bölüngen sözlerniñ cedvelini qaytarıñız, metinde boşluqlar olmasa
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,crh_Latn,python,"
def is_sorted(lst):
    '''Sayılar cedveli berilgen olsa, olarnıñ ketken tertibinde tertiplenmesi ya da tertiplenmemesi, qaytar. Eger cedvelde aynı sayınıñ birden çoq ekili olması olsa, Sahte qaytar. Menfiy sayılar ve tek tam sayılar olmağanını qabul et. Misaller: tertiplenilgen ([1, 2, 3, 4, 5]) -> Haq tertiplenilgen ([1, 3, 2, 4, 5, 6]) -> Haq tertiplenilgen ([1, 2, 3, 4, 5, 6]) -> Haq tertiplenilgen ([1, 2, 3, 4, 5, 6, 7]) -> Haq tertiplenilgen ([1, 3, 2, 4, 5, 6, 7]) -> Haq tertiplenilgen ([1, 3, 2, 4, 5, 6, 7]) -> Haq tertiplenilgen ([1, 2, 2, 2, 3, 3, 4]) -> Haq tertiplenilgen ([1, 2, 2, 3, 4 -> Haq ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,crh_Latn,python,"
def intersection(interval1, interval2):
    """"""Sizge eki aralıq berile, er bir aralıq tam sayılarnıñ bir çifti ola. Meselâ, aralıq = (başlav, soñ) = (1, 2). Berilgen aralıqlar qapalı ola, yani aralıq (başlav, soñ) em başlanuv, em soñnı qaplap ala. Er bir aralıq içün başlanuvınıñ soñuna teñ ya da az olğanını farz etemiz. Siziñ vazifeñiz bu eki aralıqnıñ kesişme uzunlığınıñ birinci sayıs olğanını belgilemek. Misal olaraq, (1, 3), (2, 4) aralıqlarınıñ kesişme uzunlığı 1, birinci sayıs olmağan (2, 3) olsa, ""EVET"" qaytarıñız, aks alda ""YOK"" qaytarıñız. Eger eki aralıq kesişmese, ""YOQ"" qaytarıñız. [ kiriş/çıqış] örnekler: kesişme (((1, 2), (2, 3) ==> ""kesme-1, ((1), 4) ==> ""kesme"", (0, ""NO"", 5-1, ((5, - ""EVET"") ==>""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,crh_Latn,python,"
def prod_signs(arr):
    """"""Sizge tam sayılarnıñ bir sıraları berile ve tam sayılarnıñ büyüklikleriniñ 1, -1 ya da 0 ile temsil etilgen sıralardaki er bir sayınıñ bütün işaretleriniñ ürünü ile çarpılğan toplamını qaytarmaq kereksiz.""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,crh_Latn,python,"
def minPath(grid, k):
    """"""N satır ve N sütun (N >= 2) ve k müsbet tam sayılı bir reberlik berilgen olsa, reberlikniñ er bir hücresi bir degerlik bardır. [1, N * N] aralığında er bir tam sayılar, reberlikniñ hücrelerinde tam bir kere peyda ola. Reberlikte k uzunlığındaki eñ az yolnı tapmaq kerek. Er bir hücreden başlay ve er bir basamaqta qomşu hücrelerniñ er birine keçe bilesiñiz, başqa söznen, siznen aynı kenarnı paylaşqan hücrelerge keçe bilesiñiz. Lütfen, k uzunlığındaki yol tam k hücrelerni ziyaret etmeni ifade ete (kerekli olaraq farqlı degil). Siz reberlikten çıqıp olamazsıñız. A (k uzunlığındaki) yol B (k uzunlığındaki) yoldan az sayıla, eger A ve B (onları l_st ve l_stA dep adlandırsaq) hücrelerindeki qıymetlerniñ tertip etilgen cedvellerini yapqan soñ, l_stA ve l_stB l_stA leksikografik olaraq, l_stA-dan azdır.""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,crh_Latn,python,"
def tri(n):
    """"""Her kes Fibonacci ardısırasını bilir, soñki bir qaç asır devamında matematikler tarafından teren ögrenildi. Amma, insanlar Tribonacci ardısırasını bilmeyler. Tribonacci ardısırası, tekrarlanuvı ile belgilene: tri(1) = 3 tri(n) = 1 + n / 2, eger n çift olsa. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), eger n tek olsa. Meselâ: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Size n menfiy olmağan tam sayı berilgen, siz Tribonacci ardısırasınıñ ilk n + 1 sayılar cedvelini qaytarmaq kereksiz. Misaller: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,crh_Latn,python,"
def digits(n):
    """"""Bir musbet tam sayıs n berilgen, tek raqamlarnıñ ürünü qaytar. Eger bütün raqamlar çift olsa, 0 qaytar. Meselâ: raqamlar ((1) == 1 raqam ((4) == 0 raqam ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,crh_Latn,python,"
def is_nested(string):
    '''Tek kvadrat qavğaları olğan bir satırnı kirsetüv olaraq alğan bir funktsiyanı yarat. Funktsiyası, eger ve yalıñız, eger, eñ az bir qavğaları olğan qavğalarnıñ doğru bir ardı-sıraları olsa, Kerçek qaytarmalı. is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]') â -> False is_nested '[[][]]') â -> True is_nested '[[]]]]]]]] â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,crh_Latn,python,"

def sum_squares(lst):
    """"""Size bir sayılar cedveli berile. Siz berilgen cedvelde kvadrat sayılarnıñ toplamını qaytarmaq kereksiz, ilk evelâ cedveldeki er bir elementni yuvarlañız. Misaller: Lst = [1,2,3] içün çıqış 14 olmalı Lst = [1,4,9] içün çıqış 98 olmalı Lst = [1,3,5,7] içün çıqış 84 olmalı Lst = [1.4,4.2,0] içün çıqış 29 olmalı Lst = [-2.4,1,1] içün çıqış 6 olmalı """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,crh_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Berilgen bir satırnıñ soñki simgesi bir sözniñ parçası olmağan ve elifbe simgesi olğan taqdirde Doğru, başqa taqdirde Yanlış qaytarğan bir funktsiya yarat. Qayd: ""söz"" - boşluqnen ayırılğan simgeler gruppasıdır. Misaller: check_if_last_char_is_a_letter (((""elmalı turta"") â -> Yanlış check_if_last_char_is_a_letter (((""elmalı turta"") â -> Doğru check_if_last_char_is_a_letter (((""elmalı turta"") â -> Yanlış check_if_last_char_is_a_letter"" ((("") â -> Yanlış '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,crh_Latn,python,"
def can_arrange(arr):
    """"""Bir elementniñ eñ büyük indeksini, ondan evelki elementten büyük ya da teñ olmağanını qaytarğan bir funktsiyanı yarat. Eger böyle bir element yoq ise, -1 qaytar. Berilgen sıra eki qat qıymetlerni iç içermemeycek. Misaller: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,crh_Latn,python,"
def largest_smallest_integers(lst):
    '''Bir tuple (a, b) qaytarğan bir funktsiyanı yaratıñız, mında 'a' menfiy bütün sayılarnıñ eñ büyük, 'b' ise bir cedvelde musbet bütün sayılarnıñ eñ küçük sayısıdır. Eger menfiy ya da musbet bütün sayılar olmasa, olarnı ""Yoq"" olaraq qaytarıñız. Misaller: eñ büyük_en küçük_tam sayılar[2, 4, 1, 3, 5, 7]) == (Yoq, 1) eñ büyük_en küçük_tam sayılar[[]) == (Yoq, Yok) eñ büyük_en küçük_tam sayılar[0]) == (Yoq, Yok) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,crh_Latn,python,"
def compare_one(a, b):
    """"""Tam sayılar, yuvarlanalar ya da kerçek sayılarnı temsil etken satırlar alğan ve berilgen deñişken türünde büyük deñişkeni qaytarğan bir funktsiyanı yarat. Degerler teñ ise, Hiçni qaytar. Qayd et: Eger kerçek sayı bir satır olaraq temsil etilse, yuvarlanacaq noqta . ya da , compare_one ((1, 2.5) â -> 2.5 compare_one ((1, ""2,3"") â -> ""2,3"" compare_one ((5,1"", ""6"") â -> ""6"" compare_one ((1"", 1) â -> Hiç """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,crh_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Berilgen n sayısını tam olaraq 4 musbet çift sayınıñ toplamı olaraq yazmaq mümkünmi qıymet kesile Misal is_equal_to_sum_even ((4) == Sahte is_equal_to_sum_even ((6) == Sahte is_equal_to_sum_even ((8) == Kerçek """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,crh_Latn,python,"
def special_factorial(n):
    """"""Braziliya faktoriali böyle tarif etile: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! mında n > 0 Meselâ: >>> special_factorial ((4) 288 Fonktsıyanı kiriş olaraq tam bir sayı alacaq ve bu tam sayınıñ hususiy faktoralisini qaytarmalı. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,crh_Latn,python,"
def fix_spaces(text):
    """"""_Mesele-3berilgen soñ, bütün boşluqlarnı ast işaretlerinen deñiştir, ve bir satırnıñ ardı-sıra 2 yerden çoq olsa, soñra bütün ardı-sıra boşluqlarnı - fix_spaces ((""Mesele"") == ""Mesele"" fix_spaces ((""Mesele1"") == ""Mesele1"" fix_spaces (((""Mesele2"") == ""_Mesele_2"" fix_spaces ((""Mesele 3"") == ""_Mesele-3""  ile deñiştir""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,crh_Latn,python,"
def file_name_check(file_name):
    """"""Bir fayl adını temsil etken bir dizin alıp, fayl adınıñ doğru olması taqdirinde 'Evet' qaytarğan ve aks alda 'Yoq' qaytarğan bir funktsiyanı yaratıñız. Bir fayl adınıñ doğru olması tek aşağıdaki şartlar yerine ketirilse ve tek o zaman sayıla: - Fayl adında üçten ziyade raqam ('0'-'9') olmamalı. - Fayl adında tam bir noqta '.' olmalı. - Noktanıñ ögündeki alt dizinen boş olmağan ve o, latin alfabetinden bir harfnen başlamalı ('a'-'z' ve 'A'Z'). - Noktanıñ soñki alt dizin bulardan biri olmalı: ['txt', 'exe', 'lld'] Örnekler: file_name_check""(misal.txt"") # => 'Evet' file_name_check""(misal.dll1"") => 'Yoq' (ad latin alfabetinden başlamalı) #""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,crh_Latn,python,"


def sum_squares(lst):
    """"""""Bu funktsiya tam sayılar cedvelini alacaq. cedveldeki bütün kirsetmeler içün, funktsiyası, indeksi 3 qatlı olsa, tam sayılar kirsetmesini kvadratlaştıracaq ve indeksi 3 qatlı degil de, 4 qatlı olsa, tam sayılar kirsetmesini küplaştıracaq. Funktsiyası, indeksi 3 ya da 4 qatlı olmağan cedveldeki kirsetmelerni deñiştirmeycek. Funktsiyası, soñra, bütün kirsetmelerniñ toplamını qaytarır. Misaller: lst = [1,2,3] içün çıqış 6 olmalı lst = [] içün çıqış 0 olmalı lst = [-1,-5,2,-1,-5] içün çıqış -126 olmalı """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,crh_Latn,python,"
def words_in_sentence(sentence):
    """"""Sizge bir cümle temsil etken bir dize berile, cümlede boşluqnen ayırılğan bir qaç söz bar, ve siz, uzunları birinci sayılar olğan asıl cümleden sözler olğan bir dize qaytarmalı, yañı dizdeki sözlerniñ tertibi asıl cümleden aynı olmalı. Misal1: Giriş: cümle = ""Bu bir test"" Çıqış: ""olmaqta"" Misal2: Giriş: cümle = ""suvlanmağa ketir"" Çıqış: ""keçir"" Sıñırlamalar: * 1 <= len(qısım) <= 100 * cümle tek mektüplerden ibaret """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,crh_Latn,python,"
def simplify(x, n):
    """"""Siziñ vazifeñiz, x * n ifadesini sadeleştirgen bir funktsiyanı amelge keçirmek. Funktsiyası, x * n tam bir sayıya qıymet kesse, doğru, aks alda ise, yañlış qaytarır. Em x, em de n, bir kesirniñ satır temsilidir ve aşağıdaki formatqa maliktir, <sayıcı>/<qırımlı>, mında sayıcı ve paydası müsbet tam sayılardır. Siz x ve n-niñ doğru kesirler olğanını ve paydası sıfır olmağanını farz ete bilesiñiz. sadeleştirmek: ""1/5"", ""5/1"") = Doğru (sadeleştirmek: ""1/6"", ""2/1"") = Yanlış (sadeleştirmek: ""7/10"", ""10/2"") = Yanlış """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,crh_Latn,python,"
def order_by_points(nums):
    """"""Berilgen tam sayılar cedvelini, olarnıñ raqamlarınıñ toplamına köre, artqan tertipte sıralağan bir funktsiya yazıñız.""""""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,crh_Latn,python,"
def specialFilter(nums):
    """"""Sayılarnıñ bir sıralarını kirsetken ve 10'dan büyük olğan ve bir sayınıñ em birinci, em soñki raqamları tek (1, 3, 5, 7, 9) olğan elementlerniñ sayısını qaytarğan bir funktsiyanı yazıñız. Meselâ: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,crh_Latn,python,"
def get_max_triples(n):
    """"""Sizge müsbet bir tam sayısı n berile. Siz uzunlığı n olğan tam sayılar silsilesi yaratmalısıñız. Er bir i (1 ‰¤ i ‰¤ n) içün a[i] = i * i - i + 1 qıymeti. a'nıñ üç qatlı sayısı (a[i], a[j], a[k]) qaytarıñız, mında i < j < k, ve a[i] + a[j] + a[k] 3-niñ qatlısıdır. Misal: kiriş: n = 5 Çıqış: 1 Açıqlama: a = [1, 3, 7, 13, 21] Tek kelişikli üç qatlı (1, 7, 13) """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,crh_Latn,python,"
def bf(planet1, planet2):
    '''Küneş sistemamızda sekiz seyyaremiz bar: Küneşke eñ yaqın olğan Merkuriy, nevbetteki Venera, soñra Dünya, Mars, Yupiter, Satürn, Uran, Neptun. Sayra 1 ve sayra 2 satırları olaraq eki seyyareniñ adlarını alğan bir funktsiyanı yazıñız. Funktsiyanıñ, seyyareniñ ve planet 2niñ orbitası arasında yerleşken bütün seyyarelerniñ bir tuple qaytarması kerek, bular Küneşke yaqınlığı boyunca sıralanır. Funktsiyanıñ, seyyareniñ ya da planet 2niñ doğru seyyarelerniñ adları olmağan taqdirde boş tuple qaytarması kerek. Misal bf ""(Yupiter"", ""Neptun"") ==> (""Saturn"", ""Uran"") bf (((""Yer"", ""Merkur"") ==> (""Venera"") bf (""Merkur"", ""Uran"") ==> (""Venera"", ""Yer"", ""Mars"", ""Yupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,crh_Latn,python,"
def sorted_list_sum(lst):
    """"""Bir funktsiyanı yazıñız, o, bir sıra satırlarnı bir parametr olaraq qabul ete, ondan tek uzunluqları olğan satırlarnı siler ve netice cedvelini tertip etilgen tertipnen qaytarır. Liste daima bir sıra satırlarıdır ve iç bir vaqıt raqamlar dizimi degildir, ve o, eki qatlı ola bile. Liste tertibi er bir sözniñ uzunlığına köre köterilmeli ve siz bu qaide boyunca tertip etilgen cedvelni qaytarmalısıñız. Eger eki sözniñ uzunlığı aynı olsa, cedvelni elifbe tertibi ile tertip et. Funktsiyanıñ tertip etilgen tertibde satırlarnıñ cedvelini qaytarması kerek. Siz bütün sözlerniñ aynı uzunluğa malik olacağını tüşünmek mümkün. Meselâ: assert list_sort[""(aa"", ""a"", ""aaa""]) => assert list_sort[""(ab"", ""aaaa"", ""aaa"", ""cd"" => ""cd"")""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,crh_Latn,python,"
def x_or_y(n, x, y):
    """"""n' esas sayıs olsa, x'niñ qıymetini qaytarmalı ve aks alda y'niñ qıymetini qaytarmalı olğan sade bir programma. Misaller: x_or_y(7, 34, 12) == 34 x_or_y(15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,crh_Latn,python,"
def double_the_difference(lst):
    '''Bir sayılar cedvelini bergen soñ, cedveldeki tek sayılarnıñ kvadratlarınıñ toplamını qaytarıñız. Menfiy sayılar ya da tam sayılar olmağan sayılarğa emiyet bermeñiz. eki qatlı farq (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 eki qatlı farq (([-1, -2, 0]) == 0 eki qatlı farq (([9, -2]) == 81 eki qatlı farq (([0]) == 0 Eger kiriş cedveli boş ise, 0 qaytarıñız. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,crh_Latn,python,"
def compare(game,guess):
    """"""Mence, epimiz bu duyğudan, bir çoq beklenilgen vaqia neticesi niayet belli olğanında hatırlaymız. O anda olğan duyğular ve fikirler, qayd etmek ve qıyaslamaq kerek. Siziñ vazifeñiz, bir insan bir sıra musaviyliklerniñ neticelerini doğru tahmin etkenini belgilemek. Size eki teñ uzunluqlı skor ve tahminler dizimi berile, er bir indeks musaviylikni köstere. Er bir tahmin ne qadar uzaq olğanını köstergen aynı uzunluqlı bir dizimi qaytarıñız. Eger olar doğru tahmin etken olsalar, qıymet 0, ve olmasalar, qıymet tahmin ve skor arasındaki mutlaq farqtır. misal: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,4],[0,4,1,0,-2]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,crh_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Size bir sinifin adı (bir satır) ve uzantıların bir listesi verilecek. Uzantılar sınıfğa ek sınıflarnı yüklemek içün qullanılacaq. Uzantıların küçü aşağıdaki kibi: CAP uzantı adındaki büyük harflerniñ sayısı olsun, SM ise uzantı adındaki küçük harflerniñ sayısı olsun, küçü CAP - SM kesirinen berilgen. Siz eñ küçlü uzantı tapıp, bu formatta bir satır qaytarmalısıñız: ClassName.StrongestExtensionName. Aynı küçlüge eki ya da daa çoq uzantı bar ise, siz cedvelde birinci kelgenini saylamalısıñız. Meselâ, eger sizge sınıf ve uzantıların bir listesi olaraq ""Slices"" berilse: ['SEviviRNGSliCes', 'Cheese', 'StuFfed'] o zaman siz 'Slices.SviRNGSliCes' 'SviRNGSliCes' 'mySviRNGSliCes']) uzantılarınen küçlü olğanı içün 'SviRNGSliCes' qaytarmalısıñız, misal olaraq 'AA' - 'Beast' uzantı_class' (<strong> 'AA' = Strongest_Class'), çünki uzantı 'AA' uzantı 'Class' - (<strong> 'Class' = Strongest_Class' = Strongest' 'Class' = Strongest' 'Class' = Strongest' 'Class' = Strongest' = Strongest' = Strongest' = Strongest' = Strongest' = Strongest' = Strongest' = Strongest' = Strongest' = Strongest' = Strongest' = Strongest' = Strongest' = Strongest' = Strongest' = Strongest' = 'Class' = 'Class' = Strongest' = Strongest' = Strongest' = Strongest' = Strongest' = 'Class' = Strongest' = Strongest' = Strongest' = 'Class' = Strongest' = Strongest' = 'Class = Strongest' = Strongest' = Strongest' = Strongest' = 'Class = Strongest' = 'Class = Strongest' = Strongest' = 'Class = 'C""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,crh_Latn,python,"
def cycpattern_check(a , b):
    """"""Size 2 kelime verilir. Eger ikinci kelime ve ya onun bir de bir dönmesi birinci kelimeye substring ise True qaytarmaq lazimdir cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,crh_Latn,python,"
def even_odd_count(num):
    """"""Bir tam sayısını köz ögüne alsaq, sırasıyla çift ve tek raqamlarnıñ sayısı olğan bir tuple qaytarır. Misal: bile_ayrı_sayı ((-12) ==> (1, 1) bile_ayrı_sayı ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,crh_Latn,python,"
def int_to_mini_roman(number):
    """"""müsbet bir tam sayısını alıp, onıñ romalı sayı ekvivalentini bir dizim olaraq elde et ve onı küçük harflernen qaytar. Sıñırlavlar: 1 <= num <= 1000 Örnekler: >>> int_to_mini_roman(19) == 'xix' >>> int_to_mini_roman(152) == 'clii' >>> int_to_mini_roman(426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,crh_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Üçbucaqnıñ üç tarafınıñ uzunlıqları berilgen. Üç tarafı doğru köşeli üçbucaqnı teşkil etse, doğru qaytar, aks alda - Yanlış. Düzbucaqlı üçbucaq - bu üçbucaqnıñ bir köşesi doğru köşe ya da 90 derece olğan üçbucaqdır. Misal: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == Yanlış '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,crh_Latn,python,"
def find_max(words):
    """"""Bir sıra sıralarnı qabul etken bir funktsiyanı yazıñız. Liste farqlı sözlernen ibaret. Eñ çoq unikal harfler olğan sözni qaytarıñız. Birden çoq sıralarda eñ çoq unikal harfler olsa, leksikografik tertibde birinci kelgenini qaytarıñız. find_max (([""name"", ""of"", ""string""]) == ""string"" find_max (([""name"", ""enam"", ""game""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" , ""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,crh_Latn,python,"
def eat(number, need, remaining):
    """"""Aç bir tavşansıñız ve belli bir miqdarda havuç yediniz, amma şimdi künniñ aşlarını toldurmaq içün daa çoq havuç yemege ihtiyacıñız bar. bir sıra qaytarmalı [ yemeklerden soñ aşalğan havuçlarnıñ umumiy sayısı, yemeklerden soñ qalğan havuçlarnıñ sayısı ] yeterli miqdarda qalğan havuç olmasa, qalğan havuçlarnı aşaycaqsıñız, amma aç qalacaqsıñız. Misal: * aşamaq ((5, 6, 10) -> [11, 4] * aşamaq ((4, 8, 9) -> [12, 1] * aşamaq ((1, 10, 10) -> [11, 0] * aşamaq ((2, 11, 5) -> [7, 0] Değişkenler: @sayı: aşalğan havuçlarnıñ tam sayısını. @kerek: aşalğan havuçlarnıñ tam sayısını. @ qalğan: saqlanılğan havuçlarnıñ tam sayısını.""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,crh_Latn,python,"
def do_algebra(operator, operand):
    """"""Eki cedvel operator ve operand. Birinci cedvelde esas cebir ameliyatları bar, ekinci cedvel ise tam sayılar cedvelidir. Berilgen eki cedvelni cebir ifadesini qurmaq ve bu ifadenin qıymetini qaytarmaq içün qullanıñız. Esas cebir ameliyatları: Qoşuv (+) Sığdırma (-)) Çoğatuv (*) Zemin bölüvi ( //) Eksponentsiya ( ** Misal): operator['+', '*', '-'] sıra = [2, 3, 4, 5] neticesi = 2 + 3 * 4 - 5 => neticesi = 9 Not: Operator cedveliniñ uzunlığı operand cedveliniñ uzunlığına teñdir. Operand menfiy olmağan tam sayılar cedvelidir. Operator cedvelinde eñ az bir operator bar, operand cedvelinde ise eñ az eki operand bar. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,crh_Latn,python,"
def solve(s):
    """"""Eger s[i] harf ise, onıñ büyükligini aşağıdan yuqarığa ya da aksine çevir, ya da aksine olğanı kibi qaldır. Eger de harfler olmasa, stringi çevir. Fonksiya neticesinde alınğan stringi qaytarmalı. Misaller solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,crh_Latn,python,"
def string_to_md5(text):
    """"""Bir 'mektüp' satırı berilgen ise, onıñ md5 hash ekvivalent satırını qaytarıñız. Eger 'mektüp' boş bir satır ise, None qaytarıñız. >>> string_to_md5('Merhaba dünya') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,crh_Latn,python,"
def generate_integers(a, b):
    """"""Eki müsbet a ve b tam sayıları berilgen soñ, a ve b arasındaki çift raqamlarnı artqan tertipte qaytarıñız. Meselâ: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
