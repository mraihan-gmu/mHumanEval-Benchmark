[
    {
        "task_id": "HumanEval/0",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಯಲ್ಲಿ, ಯಾವುದೇ ಎರಡು ಸಂಖ್ಯೆಗಳು ನಿರ್ದಿಷ್ಟ ಮಿತಿಗಿಂತ ಪರಸ್ಪರ ಹತ್ತಿರವಿದೆಯೇ ಎಂದು ಪರಿಶೀಲಿಸಿ. ಉದಾಹರಣೆಃ >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) ತಪ್ಪು >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) ನಿಜ \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"ಈ ಕಾರ್ಯಕ್ಕೆ ಇನ್ಪುಟ್ ಎನ್ನುವುದು ನೆಸ್ಟೆಡ್ ಆವರಣಗಳ ಬಹು ಗುಂಪುಗಳನ್ನು ಹೊಂದಿರುವ ಸ್ಟ್ರಿಂಗ್ ಆಗಿದೆ. ನಿಮ್ಮ ಗುರಿಯು ಆ ಗುಂಪುಗಳನ್ನು ಪ್ರತ್ಯೇಕ ತಂತಿಗಳಲ್ಲಿ ಬೇರ್ಪಡಿಸುವುದು ಮತ್ತು ಆ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸುವುದು. ಪ್ರತ್ಯೇಕ ಗುಂಪುಗಳು ಸಮತೋಲಿತವಾಗಿವೆ (ಪ್ರತಿ ತೆರೆದ ಬ್ರಾಕೆಟ್ ಸರಿಯಾಗಿ ಮುಚ್ಚಲ್ಪಡುತ್ತದೆ) ಮತ್ತು ಪರಸ್ಪರರೊಳಗೆ ನೆಸ್ಟೆಡ್ ಆಗಿರುವುದಿಲ್ಲ. ಇನ್ಪುಟ್ ಸ್ಟ್ರಿಂಗ್ನಲ್ಲಿ ಯಾವುದೇ ಸ್ಥಳಗಳನ್ನು ನಿರ್ಲಕ್ಷಿಸಿ. ಉದಾಹರಣೆಃ >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ) '['() ', '(()) ', '((() ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"ಒಂದು ಧನಾತ್ಮಕ ಫ್ಲೋಟಿಂಗ್ ಪಾಯಿಂಟ್ ಸಂಖ್ಯೆಯನ್ನು ನೀಡಿದರೆ, ಅದನ್ನು ಪೂರ್ಣಾಂಕ ಭಾಗವಾಗಿ (ದೊಡ್ಡದಾದ ಪೂರ್ಣಾಂಕವು ಕೊಟ್ಟಿರುವ ಸಂಖ್ಯೆಯಕ್ಕಿಂತ ಚಿಕ್ಕದಾಗಿದೆ) ಮತ್ತು ದಶಮಾಂಶಗಳಾಗಿ ವಿಭಜಿಸಬಹುದು (ಉಳಿದ ಭಾಗವು ಯಾವಾಗಲೂ 1 ಕ್ಕಿಂತ ಚಿಕ್ಕದಾಗಿದೆ). ಸಂಖ್ಯೆಯ ದಶಮಾಂಶ ಭಾಗವನ್ನು ಹಿಂತಿರುಗಿ. ಉದಾಹರಣೆಃ >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"ನಿಮಗೆ ಬ್ಯಾಂಕ್ ಖಾತೆಯಲ್ಲಿನ ಠೇವಣಿ ಮತ್ತು ಹಿಂಪಡೆಯುವ ಕಾರ್ಯಾಚರಣೆಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಲಾಗಿದೆ ಅದು ಶೂನ್ಯ ಸಮತೋಲನದಿಂದ ಪ್ರಾರಂಭವಾಗುತ್ತದೆ. ಯಾವುದೇ ಹಂತದಲ್ಲಿ ಖಾತೆಯ ಸಮತೋಲನ ಶೂನ್ಯಕ್ಕಿಂತ ಕಡಿಮೆಯಾಗಿದ್ದರೆ ನಿಮ್ಮ ಕಾರ್ಯವು ಪತ್ತೆಹಚ್ಚುವುದು, ಮತ್ತು ಆ ಹಂತದಲ್ಲಿ ಕಾರ್ಯವು True ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. ಇಲ್ಲದಿದ್ದರೆ ಅದು False ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. ಉದಾಹರಣೆಃ >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"ಇನ್ಪುಟ್ ಸಂಖ್ಯೆಗಳ ಒಂದು ನಿರ್ದಿಷ್ಟ ಪಟ್ಟಿಗಾಗಿ, ಈ ಡೇಟಾಸೆಟ್ನ ಸರಾಸರಿ ಸುತ್ತ ಸರಾಸರಿ ಸಂಪೂರ್ಣ ವಿಚಲನವನ್ನು ಲೆಕ್ಕಾಚಾರ ಮಾಡಿ. ಸರಾಸರಿ ಸಂಪೂರ್ಣ ವಿಚಲನವು ಪ್ರತಿ ಅಂಶ ಮತ್ತು ಕೇಂದ್ರಬಿಂದುವಿನ ನಡುವಿನ ಸರಾಸರಿ ಸಂಪೂರ್ಣ ವ್ಯತ್ಯಾಸವಾಗಿದೆ (ಈ ಸಂದರ್ಭದಲ್ಲಿ ಸರಾಸರಿ): MAD = ಸರಾಸರಿ ∙ x - x_mean ∙ ಉದಾಹರಣೆಃ >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"ಇನ್ಪುಟ್ ಪಟ್ಟಿಯ ಪ್ರತಿ ಎರಡು ಸತತ ಅಂಶಗಳ ನಡುವೆ ಒಂದು ಸಂಖ್ಯೆಯನ್ನು 'ಡಿಲಿಮೀಟರ್' ಸೇರಿಸಿ `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"ಈ ಕಾರ್ಯಕ್ಕೆ ಇನ್ಪುಟ್ ಎನ್ನುವುದು ಅಂತರದಿಂದ ಬೇರ್ಪಡಿಸಲಾದ ಗೂಡುಕಟ್ಟಿದ ಆವರಣಗಳಿಗಾಗಿ ಬಹು ಗುಂಪುಗಳನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಸ್ಟ್ರಿಂಗ್ ಆಗಿದೆ. ಪ್ರತಿ ಗುಂಪಿಗೆ, ಆವರಣಗಳ ಗೂಡುಕಟ್ಟುವಿಕೆಯ ಆಳವಾದ ಮಟ್ಟವನ್ನು output ಟ್ಪುಟ್ ಮಾಡಿ. ಉದಾಹರಣೆಗೆ (() (()) ಗೂಡುಕಟ್ಟುವಿಕೆಯ ಗರಿಷ್ಠ ಎರಡು ಮಟ್ಟಗಳನ್ನು ಹೊಂದಿದೆ ಆದರೆ ((())) ಮೂರು ಹೊಂದಿದೆ. >>> parse_nested_parens (('((()) ((())) () (((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"ನಿರ್ದಿಷ್ಟ ಸಬ್ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಒಳಗೊಂಡಿರುವ ಸಬ್ಸ್ಟ್ರಿಂಗ್ಗಳಿಗಾಗಿ ಮಾತ್ರ ಇನ್ಪುಟ್ ಸ್ಟ್ರಿಂಗ್ಗಳ ಪಟ್ಟಿಯನ್ನು ಫಿಲ್ಟರ್ ಮಾಡಿ >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"ಪೂರ್ಣಾಂಕಗಳ ಒಂದು ನಿರ್ದಿಷ್ಟ ಪಟ್ಟಿಗಾಗಿ, ಒಂದು ಪಟ್ಟಿಯಲ್ಲಿರುವ ಎಲ್ಲಾ ಪೂರ್ಣಾಂಕಗಳ ಮೊತ್ತ ಮತ್ತು ಉತ್ಪನ್ನವನ್ನು ಒಳಗೊಂಡಿರುವ ಒಂದು ಟುಪಲ್ ಅನ್ನು ಹಿಂತಿರುಗಿ. ಖಾಲಿ ಮೊತ್ತವು 0 ಗೆ ಸಮನಾಗಿರಬೇಕು ಮತ್ತು ಖಾಲಿ ಉತ್ಪನ್ನವು 1 ಕ್ಕೆ ಸಮನಾಗಿರಬೇಕು. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) \"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"ಪೂರ್ಣಾಂಕಗಳ ಒಂದು ನಿರ್ದಿಷ್ಟ ಪಟ್ಟಿಯಿಂದ, ಅನುಕ್ರಮದಲ್ಲಿ ನಿರ್ದಿಷ್ಟ ಕ್ಷಣದವರೆಗೆ ಕಂಡುಬರುವ ರೋಲಿಂಗ್ ಗರಿಷ್ಠ ಅಂಶಗಳ ಪಟ್ಟಿಯನ್ನು ರಚಿಸಿ. >>> ರೋಲಿಂಗ್_ಮ್ಯಾಕ್ಸ್ (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"ಸರಬರಾಜು ಮಾಡಿದ ಸ್ಟ್ರಿಂಗ್ನೊಂದಿಗೆ ಪ್ರಾರಂಭವಾಗುವ ಕಡಿಮೆ ಪಾಲಿಂಡ್ರೋಮ್ ಅನ್ನು ಹುಡುಕಿ. ಅಲ್ಗಾರಿದಮ್ ಕಲ್ಪನೆಯು ಸರಳವಾಗಿದೆಃ - ಸರಬರಾಜು ಮಾಡಿದ ಸ್ಟ್ರಿಂಗ್ನ ಅತಿ ಉದ್ದದ ಪೋಸ್ಟ್ಫಿಕ್ಸ್ ಅನ್ನು ಪಲಿಂಡ್ರೋಮ್ ಎಂದು ಹುಡುಕಿ. - ಪಾಲಿಂಡ್ರೋಮಿಕ್ ಪ್ರತ್ಯಯದ ಮೊದಲು ಬರುವ ಸ್ಟ್ರಿಂಗ್ ಪೂರ್ವಪ್ರತ್ಯಯದ ಸ್ಟ್ರಿಂಗ್ ರಿವರ್ಸ್ ಅನ್ನು ಸ್ಟ್ರಿಂಗ್ನ ಅಂತ್ಯಕ್ಕೆ ಸೇರಿಸಿ. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('catac') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"ಕೊಟ್ಟಿರುವ ಸ್ಟ್ರಿಂಗ್ ಪಾಲಿಂಡ್ರೋಮ್ ಆಗಿದೆಯೇ ಎಂದು ಪರೀಕ್ಷಿಸಿ \"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"ಇನ್ಪುಟ್ ಎರಡು ಸ್ಟ್ರಿಂಗ್ ಗಳು a ಮತ್ತು b ಇವು 1 ಮತ್ತು 0 ರನ್ನು ಮಾತ್ರ ಒಳಗೊಂಡಿರುತ್ತವೆ. ಈ ಇನ್ಪುಟ್ ಗಳಲ್ಲಿ ಬೈನರಿ XOR ಅನ್ನು ನಿರ್ವಹಿಸಿ ಮತ್ತು ಫಲಿತಾಂಶವನ್ನು ಸ್ಟ್ರಿಂಗ್ ಆಗಿ ಹಿಂತಿರುಗಿಸಿ. >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"ಸ್ಟ್ರಿಂಗ್ಗಳ ಪಟ್ಟಿಯಿಂದ, ಉದ್ದವಾದದ್ದನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಒಂದೇ ಉದ್ದದ ಬಹು ಸ್ಟ್ರಿಂಗ್ಗಳ ಸಂದರ್ಭದಲ್ಲಿ ಮೊದಲನೆಯದನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಇನ್ಪುಟ್ ಪಟ್ಟಿ ಖಾಲಿಯಾಗಿದ್ದರೆ ಯಾವುದನ್ನೂ ಹಿಂತಿರುಗಿಸಬೇಡಿ. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"ಎರಡು ಪೂರ್ಣಾಂಕಗಳ a ಮತ್ತು b >>> ದೊಡ್ಡ_ಸಹಜ_ವಿಭಜಕ ((3, 5) 1 >>> ದೊಡ್ಡ_ಸಹಜ_ವಿಭಜಕ ((25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"ಇನ್ಪುಟ್ ಸ್ಟ್ರಿಂಗ್ನ ಎಲ್ಲಾ ಪೂರ್ವಪ್ರತ್ಯಯಗಳ ಪಟ್ಟಿಯನ್ನು ಕಡಿಮೆ ಮತ್ತು ದೀರ್ಘದಿಂದ ಹಿಂತಿರುಗಿಸುತ್ತದೆ >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"0 ರಿಂದ n ವರೆಗಿನ ಸ್ಥಳ-ನಿರ್ಧರಿತ ಸಂಖ್ಯೆಗಳನ್ನು ಒಳಗೊಂಡಿರುವ ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"ಒಂದು ಸ್ಟ್ರಿಂಗ್ ನೀಡಿದರೆ, ಎಷ್ಟು ವಿಭಿನ್ನ ಅಕ್ಷರಗಳನ್ನು (ಅಕ್ಷರಶ್ರೇಣಿಯನ್ನು ಲೆಕ್ಕಿಸದೆ) ಇದು ಒಳಗೊಂಡಿದೆ ಎಂದು ಕಂಡುಹಿಡಿಯಿರಿ >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"ಈ ಕಾರ್ಯಕ್ಕೆ ಇನ್ಪುಟ್ ಒಂದು ವಿಶೇಷ ASCII ಸ್ವರೂಪದಲ್ಲಿ ಸಂಗೀತದ ಟಿಪ್ಪಣಿಗಳನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಸ್ಟ್ರಿಂಗ್ ಆಗಿದೆ. ನಿಮ್ಮ ಕಾರ್ಯವು ಅನೇಕ ಬೀಟ್ಗಳಿಗೆ ಅನುಗುಣವಾದ ಪೂರ್ಣಾಂಕಗಳ ಸ್ಟ್ರಿಂಗ್ ಪಟ್ಟಿಯನ್ನು ಪಾರ್ಸ್ ಮಾಡುವುದುಃ 'o' ಟಿಪ್ಪಣಿ, ಕೊನೆಯ ನಾಲ್ಕು ಬೀಟ್ಸ್ 'o' - ಅರ್ಧ ಟಿಪ್ಪಣಿ, ಕೊನೆಯ ಎರಡು ಬೀಟ್ಸ್ 'o' - ಕ್ವಾಟರ್ ಟಿಪ್ಪಣಿ, ಕೊನೆಯ ಒಂದು ಬೀಟ್ >>> parse_music '. 'o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . . o' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"ಮೂಲ ಸ್ಟ್ರಿಂಗ್ನಲ್ಲಿ ನಿರ್ದಿಷ್ಟ ಸಬ್ಸ್ಟ್ರಿಂಗ್ ಎಷ್ಟು ಬಾರಿ ಕಂಡುಬರುತ್ತದೆ ಎಂಬುದನ್ನು ಕಂಡುಹಿಡಿಯಿರಿ. ಅತಿಕ್ರಮಿಸುವ ಪ್ರಕರಣಗಳನ್ನು ಎಣಿಸಿ. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"ಇನ್ಪುಟ್ ಎಂಬುದು 'ಶೂನ್ಯ' ದಿಂದ 'ಒಂಬತ್ತು' ವರೆಗಿನ ಸಂಖ್ಯೆಗಳ ಸ್ಥಳ-ನಿರ್ಧರಿತ ಸ್ಟ್ರಿಂಗ್ ಆಗಿದೆ. ಮಾನ್ಯ ಆಯ್ಕೆಗಳು 'ಶೂನ್ಯ', 'ಒಂದು', 'ಎರಡು', 'ಮೂರು', 'ನಾಲ್ಕು', 'ಐದು', 'ಆರು', 'ಏಳು', 'ಎಂಟು' ಮತ್ತು 'ಒಂಬತ್ತು'. ಚಿಕ್ಕದರಿಂದ ದೊಡ್ಡದಕ್ಕೆ ವಿಂಗಡಿಸಲಾದ ಸಂಖ್ಯೆಗಳೊಂದಿಗೆ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂತಿರುಗಿ >>> sort_numbers (('ಮೂರು ಒಂದು ಐದು') 'ಒಂದು ಮೂರು ಐದು' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"ಒದಗಿಸಲಾದ ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಯಿಂದ (ಕನಿಷ್ಠ ಎರಡು ಉದ್ದದ) ಒಂದಕ್ಕೊಂದು ಹತ್ತಿರವಿರುವ ಎರಡು ಸಂಖ್ಯೆಗಳನ್ನು ಆಯ್ಕೆಮಾಡಿ ಮತ್ತು ಹಿಂತಿರುಗಿ ಮತ್ತು ಅವುಗಳನ್ನು ಕ್ರಮವಾಗಿ ಹಿಂತಿರುಗಿ (ಸಣ್ಣ ಸಂಖ್ಯೆ, ದೊಡ್ಡ ಸಂಖ್ಯೆ). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಲಾಗಿದೆ (ಕನಿಷ್ಠ ಎರಡು ಅಂಶಗಳ), ಆ ಪಟ್ಟಿಗೆ ರೇಖೀಯ ಪರಿವರ್ತನೆಯನ್ನು ಅನ್ವಯಿಸಿ, ಇದರಿಂದಾಗಿ ಚಿಕ್ಕ ಸಂಖ್ಯೆ 0 ಆಗುತ್ತದೆ ಮತ್ತು ದೊಡ್ಡದು 1 ಆಗುತ್ತದೆ >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"ಫಿಲ್ಟರ್ ನೀಡಲಾದ ಯಾವುದೇ ಪೈಥಾನ್ ಮೌಲ್ಯಗಳ ಪಟ್ಟಿಯನ್ನು ಪೂರ್ಣಾಂಕಗಳಿಗೆ ಮಾತ್ರ ಫಿಲ್ಟರ್ ಮಾಡಿ >>> ಫಿಲ್ಟರ್_ಇಂಟಿಗರ್ಸ್ ((['a', 3.14, 5]) [5] >>> ಫಿಲ್ಟರ್_ಇಂಟಿಗರ್ಸ್ (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"ಕೊಟ್ಟಿರುವ ಸ್ಟ್ರಿಂಗ್ನ ರಿಟರ್ನ್ ಉದ್ದ >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"ಒಂದು ನಿರ್ದಿಷ್ಟ ಸಂಖ್ಯೆಯ n ಗಾಗಿ, n ಅನ್ನು ಸಮವಾಗಿ ವಿಭಜಿಸುವ ದೊಡ್ಡ ಸಂಖ್ಯೆಯನ್ನು ಹುಡುಕಿ, n ಗಿಂತ ಚಿಕ್ಕದಾಗಿದೆ >>> ದೊಡ್ಡ_ವಿಭಜಕ ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"ಕೊಟ್ಟಿರುವ ಪೂರ್ಣಾಂಕದ ಅವಿಭಾಜ್ಯ ಅಂಶಗಳ ಪಟ್ಟಿಯನ್ನು ಚಿಕ್ಕದರಿಂದ ದೊಡ್ಡದರವರೆಗೆ ಕ್ರಮದಲ್ಲಿ ಹಿಂತಿರುಗಿ. ಪ್ರತಿಯೊಂದು ಅಂಶಗಳನ್ನು ಅಂಶೀಕರಣದಲ್ಲಿ ಎಷ್ಟು ಬಾರಿ ಕಾಣಿಸಿಕೊಳ್ಳುತ್ತದೆ ಎಂಬುದಕ್ಕೆ ಅನುಗುಣವಾಗಿ ಪಟ್ಟಿ ಮಾಡಬೇಕು. ಇನ್ಪುಟ್ ಸಂಖ್ಯೆ ಎಲ್ಲಾ ಅಂಶಗಳ ಉತ್ಪನ್ನಕ್ಕೆ ಸಮಾನವಾಗಿರಬೇಕು >>> ಅಂಶೀಕರಣ ((8) [2, 2, 2] >>> ಅಂಶೀಕರಣ ((25) [5, 5] >>> ಅಂಶೀಕರಣ ((70) [2, 5, 7] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯಿಂದ, ಒಂದಕ್ಕಿಂತ ಹೆಚ್ಚು ಬಾರಿ ಸಂಭವಿಸುವ ಎಲ್ಲಾ ಅಂಶಗಳನ್ನು ತೆಗೆದುಹಾಕಿ. ಎಡಭಾಗದಲ್ಲಿರುವ ಅಂಶಗಳ ಕ್ರಮವನ್ನು ಇನ್ಪುಟ್ನಲ್ಲಿರುವಂತೆಯೇ ಇರಿಸಿ. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"ಒಂದು ನಿರ್ದಿಷ್ಟ ಸ್ಟ್ರಿಂಗ್ಗಾಗಿ, ಸಣ್ಣ ಅಕ್ಷರಗಳನ್ನು ದೊಡ್ಡಕ್ಷರಕ್ಕೆ ಮತ್ತು ದೊಡ್ಡಕ್ಷರವನ್ನು ಸಣ್ಣಕ್ಷರಕ್ಕೆ ತಿರುಗಿಸಿ. >>> flip_case (('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"ಒಂದು ಸ್ಟ್ರಿಂಗ್ನಲ್ಲಿನ ಸ್ಟ್ರಿಂಗ್ಗಳ ಪಟ್ಟಿಯನ್ನು ಜೋಡಿಸಿ >>> ಜೋಡಿಸಿ (([]) '' >>> ಜೋಡಿಸಿ ((['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"ಒಂದು ನಿರ್ದಿಷ್ಟ ಪೂರ್ವಪ್ರತ್ಯಯದಿಂದ ಪ್ರಾರಂಭವಾಗುವಂತಹವುಗಳಿಗಾಗಿ ಮಾತ್ರ ಇನ್ಪುಟ್ ಸ್ಟ್ರಿಂಗ್ಗಳ ಪಟ್ಟಿಯನ್ನು ಫಿಲ್ಟರ್ ಮಾಡಿ. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"ಪಟ್ಟಿಯಲ್ಲಿರುವ ಸಕಾರಾತ್ಮಕ ಸಂಖ್ಯೆಗಳನ್ನು ಮಾತ್ರ ಹಿಂತಿರುಗಿಸುತ್ತದೆ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"ಕೊಟ್ಟಿರುವ ಸಂಖ್ಯೆಯು ಅವಿಭಾಜ್ಯವಾಗಿದ್ದರೆ true ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ, ಇಲ್ಲದಿದ್ದರೆ false. >>> is_prime (ಅವಿಭಾಜ್ಯ) 6 False >>> is_prime (ಅವಿಭಾಜ್ಯ) 101) True >>> is_prime (ಅವಿಭಾಜ್ಯ) 11 True >>> is_prime (ಅವಿಭಾಜ್ಯ) 13441) True >>> is_prime (ಅವಿಭಾಜ್ಯ) 61) True >>> is_prime (ಅವಿಭಾಜ್ಯ) 4) False >>> is_prime (ಅವಿಭಾಜ್ಯ) 1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs ಎಂಬುದು ಬಹುಪದವಿಯ ಗುಣಾಂಕಗಳು. find_zero find x ಅಂದರೆ poly ((x) = 0. find_zero ಕೇವಲ ಶೂನ್ಯ ಬಿಂದುವನ್ನು ಮಾತ್ರ ಹಿಂದಿರುಗಿಸುತ್ತದೆ, ಅನೇಕವು ಇದ್ದರೂ ಸಹ. ಇದಲ್ಲದೆ, find_zero ಕೇವಲ ಪಟ್ಟಿ xs ಅನ್ನು ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ, ಇದು ಸಹ ಸಂಖ್ಯೆಯ ಗುಣಾಂಕಗಳನ್ನು ಮತ್ತು ದೊಡ್ಡ ಶೂನ್ಯವಲ್ಲದ ಗುಣಾಂಕವನ್ನು ಹೊಂದಿರುತ್ತದೆ, ಏಕೆಂದರೆ ಇದು ಪರಿಹಾರವನ್ನು ಖಾತರಿಪಡಿಸುತ್ತದೆ. >>> ಸುತ್ತಿನಲ್ಲಿ ((find_zero[(1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> ಸುತ್ತಿನಲ್ಲಿ ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs ಅಂಕದಲ್ಲಿ xs ಗುಣಾಂಕಗಳನ್ನು ಹೊಂದಿರುವ ಬಹುಪದವಿಯನ್ನು ಮೌಲ್ಯಮಾಪನ ಮಾಡುತ್ತದೆ. xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"ಈ ಕಾರ್ಯವು ಒಂದು ಪಟ್ಟಿಯನ್ನು l ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ ಮತ್ತು ಒಂದು ಪಟ್ಟಿಯನ್ನು l' ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ, ಇದರಿಂದಾಗಿ l' ಮೂರು ಭಾಗಿಸದ ಸೂಚ್ಯಂಕಗಳಲ್ಲಿ l ಗೆ ಒಂದೇ ಆಗಿರುತ್ತದೆ, ಆದರೆ ಮೂರು ಭಾಗಿಸಬಹುದಾದ ಸೂಚ್ಯಂಕಗಳಲ್ಲಿ ಅದರ ಮೌಲ್ಯಗಳು l ನ ಅನುಗುಣವಾದ ಸೂಚ್ಯಂಕಗಳ ಮೌಲ್ಯಗಳಿಗೆ ಸಮಾನವಾಗಿರುತ್ತದೆ, ಆದರೆ ವಿಂಗಡಿಸಲಾಗಿದೆ. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"ಒಂದು ಪಟ್ಟಿಯಲ್ಲಿ ವಿಂಗಡಿಸಲಾದ ಅನನ್ಯ ಅಂಶಗಳನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ >>> ಅನನ್ಯ (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"ಪಟ್ಟಿಯಲ್ಲಿನ ಗರಿಷ್ಠ ಅಂಶವನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"11 ಅಥವಾ 13 ರ ಮೂಲಕ ಭಾಗಿಸಬಹುದಾದ n ಗಿಂತ ಕಡಿಮೆ ಪೂರ್ಣಾಂಕಗಳಲ್ಲಿ 7 ಅಂಕಿಯು ಕಾಣಿಸಿಕೊಳ್ಳುವ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"ಈ ಕಾರ್ಯವು ಒಂದು ಪಟ್ಟಿಯನ್ನು l ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ ಮತ್ತು ಒಂದು ಪಟ್ಟಿಯನ್ನು l' ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ, ಇದರಿಂದಾಗಿ l' ಅಪರೂಪದ ಸೂಚ್ಯಂಕಗಳಲ್ಲಿ l ಗೆ ಒಂದೇ ಆಗಿರುತ್ತದೆ, ಆದರೆ ಅದರ ಮೌಲ್ಯಗಳು ಸಹ ಸೂಚ್ಯಂಕಗಳಲ್ಲಿ l ನ ಸಹ ಸೂಚ್ಯಂಕಗಳ ಮೌಲ್ಯಗಳಿಗೆ ಸಮಾನವಾಗಿರುತ್ತದೆ, ಆದರೆ ವಿಂಗಡಿಸಲಾಗಿದೆ. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"encode_cyclic ಕಾರ್ಯದಿಂದ ಎನ್ಕೋಡ್ ಮಾಡಲಾದ ಇನ್ಪುಟ್ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ. ಡಿಕೋಡ್ ಮಾಡಿದ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ.\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\" ಎಂಬ ಮೂರು ಅಕ್ಷರಗಳ ಸೈಕ್ಲಿಂಗ್ ಗುಂಪುಗಳಿಂದ ಎನ್ಕೋಡ್ ಮಾಡಿದ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ.\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib ಒಂದು ಫಿಬೊನಾಚಿ ಸಂಖ್ಯೆಯಾಗಿರುವ n-ನೇ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ ಮತ್ತು ಅದು ಸಹ ಅವಿಭಾಜ್ಯವಾಗಿರುತ್ತದೆ. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero ಒಂದು ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ಇನ್ಪುಟ್ ಆಗಿ ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ. ಇದು ಪಟ್ಟಿಯಲ್ಲಿ ಮೂರು ವಿಭಿನ್ನ ಅಂಶಗಳು ಶೂನ್ಯಕ್ಕೆ ಸೇರ್ಪಡೆಗೊಂಡರೆ True ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ, ಮತ್ತು False ಇಲ್ಲದಿದ್ದರೆ. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"ಒಂದು ರಸ್ತೆಯನ್ನು ಅನಂತವಾಗಿ ಉದ್ದವಾದ ರೇಖೆಯಾಗಿ ಕಲ್ಪಿಸಿಕೊಳ್ಳಿ. n ಕಾರುಗಳು ಎಡದಿಂದ ಬಲಕ್ಕೆ ಚಲಿಸುತ್ತಿವೆ; ಏಕಕಾಲದಲ್ಲಿ, n ಕಾರುಗಳ ಬೇರೆ ಸೆಟ್ ಬಲದಿಂದ ಎಡಕ್ಕೆ ಚಲಿಸುತ್ತಿವೆ. ಕಾರುಗಳ ಎರಡು ಸೆಟ್ಗಳು ಪರಸ್ಪರ ದೂರದಿಂದ ಪ್ರಾರಂಭವಾಗುತ್ತವೆ. ಎಲ್ಲಾ ಕಾರುಗಳು ಒಂದೇ ವೇಗದಲ್ಲಿ ಚಲಿಸುತ್ತವೆ. ಎಡದಿಂದ ಬಲಕ್ಕೆ ಚಲಿಸುವ ಕಾರು ಬಲದಿಂದ ಎಡಕ್ಕೆ ಚಲಿಸುವ ಕಾರನ್ನು ಹೊಡೆದಾಗ ಎರಡು ಕಾರುಗಳು ಘರ್ಷಿಸುತ್ತವೆ ಎಂದು ಹೇಳಲಾಗುತ್ತದೆ. ಆದಾಗ್ಯೂ, ಕಾರುಗಳು ಅನಂತವಾಗಿ ದೃಢವಾಗಿವೆ ಮತ್ತು ಬಲವಾಗಿವೆ; ಪರಿಣಾಮವಾಗಿ, ಅವು ಘರ್ಷಣೆಯಾಗದಿದ್ದಂತೆ ತಮ್ಮ ಹಾದಿಯಲ್ಲಿ ಚಲಿಸುತ್ತಲೇ ಇರುತ್ತವೆ. ಈ ಕಾರ್ಯವು ಅಂತಹ ಘರ್ಷಣೆಗಳ ಸಂಖ್ಯೆಯನ್ನು ನೀಡುತ್ತದೆ.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]) ಅಂಶಗಳೊಂದಿಗೆ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero ಒಂದು ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ಇನ್ಪುಟ್ ಆಗಿ ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ. ಇದು ಪಟ್ಟಿಯಲ್ಲಿ ಎರಡು ವಿಭಿನ್ನ ಅಂಶಗಳು ಶೂನ್ಯಕ್ಕೆ ಸೇರಿಕೊಂಡರೆ True ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ, ಮತ್ತು False ಇಲ್ಲದಿದ್ದರೆ. >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero (([1]) False \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"ಇನ್ಪುಟ್ ಸಂಖ್ಯೆ x ನ ಸಂಖ್ಯಾ ಆಧಾರವನ್ನು ಆಧಾರವಾಗಿ ಬದಲಾಯಿಸಿ. ಪರಿವರ್ತನೆಯ ನಂತರ ಸ್ಟ್ರಿಂಗ್ ಪ್ರಾತಿನಿಧ್ಯವನ್ನು ಹಿಂತಿರುಗಿ. ಆಧಾರ ಸಂಖ್ಯೆಗಳು 10 ಕ್ಕಿಂತ ಕಡಿಮೆ. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"ಒಂದು ತ್ರಿಕೋನಕ್ಕೆ ಒಂದು ಬದಿಯ ಉದ್ದ ಮತ್ತು ಹೆಚ್ಚಿನ ರಿಟರ್ನ್ ಪ್ರದೇಶವನ್ನು ನೀಡಲಾಗಿದೆ. >>> triangle_area ((5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 ಸಂಖ್ಯೆಗಳ ಅನುಕ್ರಮವು ಫೈಬೊನಾಕಿ ಅನುಕ್ರಮಕ್ಕೆ ಹೋಲುತ್ತದೆ, ಇದನ್ನು ಈ ಕೆಳಗಿನಂತೆ ವ್ಯಾಖ್ಯಾನಿಸಲಾಗಿದೆಃ fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4 ಸಂಖ್ಯೆಗಳ ಅನುಕ್ರಮದ n- ನೇ ಅಂಶವನ್ನು ಪರಿಣಾಮಕಾರಿಯಾಗಿ ಲೆಕ್ಕಾಚಾರ ಮಾಡಲು ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ. ಪುನರಾವರ್ತನೆಯನ್ನು ಬಳಸಬೇಡಿ. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"ಪಟ್ಟಿಯಲ್ಲಿನ ಅಂಶಗಳ ಮಧ್ಯಮವನ್ನು ಹಿಂತಿರುಗಿ l. >>> ಮಧ್ಯಮ (([3, 1, 2, 4, 5]) 3 >>> ಮಧ್ಯಮ (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"ಕೊಟ್ಟಿರುವ ಸ್ಟ್ರಿಂಗ್ ಒಂದು ಪಾಲಿಂಡ್ರೋಮ್ ಆಗಿದೆಯೇ ಎಂದು ಪರಿಶೀಲಿಸುತ್ತದೆ >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"2^n ಮಾಡ್ಯುಲೊ p ಅನ್ನು ಹಿಂತಿರುಗಿ (ಸಂಖ್ಯೆಗಳ ಬಗ್ಗೆ ತಿಳಿದಿರಲಿ). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"ಎನ್ಕೋಡ್_ಶಿಫ್ಟ್ ಕಾರ್ಯದಿಂದ ಎನ್ಕೋಡ್ ಮಾಡಲಾದ ಇನ್ಪುಟ್ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ. ಡಿಕೋಡ್ ಮಾಡಿದ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ. \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"ಅಕ್ಷರಮಾಲೆಯ ಪ್ರತಿ ಅಕ್ಷರವನ್ನು 5 ರಷ್ಟು ಸ್ಥಳಾಂತರಿಸುವ ಮೂಲಕ ಎನ್ಕೋಡ್ ಮಾಡಿದ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels ಎನ್ನುವುದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ತೆಗೆದುಕೊಳ್ಳುವ ಮತ್ತು ಸ್ವರಗಳಿಲ್ಲದ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂದಿರುಗಿಸುವ ಒಂದು ಕಾರ್ಯವಾಗಿದೆ. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"ಪಟ್ಟಿಯಲ್ಲಿನ ಎಲ್ಲಾ ಸಂಖ್ಯೆಗಳು ಮಿತಿ t ಗಿಂತ ಕೆಳಗಿದ್ದರೆ True ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"x ಮತ್ತು y ಎಂಬ ಎರಡು ಸಂಖ್ಯೆಗಳನ್ನು ಸೇರಿಸಿ >>> ಸೇರಿಸಿ ((2, 3) 5 >>> ಸೇರಿಸಿ ((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"ಎರಡು ಪದಗಳು ಒಂದೇ ಅಕ್ಷರಗಳನ್ನು ಹೊಂದಿದೆಯೇ ಎಂದು ಪರಿಶೀಲಿಸಿ. >>> same_chars (('eabcdzzzz', 'dddzzzzzzzddeddabc') True >>> same_chars (('abcd', 'dddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddabc') False >>> same_chars ((('abcd', 'dddddabddce') False >>> same_chars (((abcdzzzz', 'dddzzzzzzzddabc') False \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"n ನೇ ಫಿಬೊನಾಚಿ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂತಿರುಗಿಸಿ. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets ಎಂಬುದು \"<\" ಮತ್ತು \">\". return True ಪ್ರತಿ ಆರಂಭಿಕ ಬ್ರಾಕೆಟ್ಗೆ ಅನುಗುಣವಾದ ಮುಚ್ಚುವ ಬ್ರಾಕೆಟ್ ಇದ್ದರೆ. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"True ಅನ್ನು ಹಿಂತಿರುಗಿ ಪಟ್ಟಿ ಅಂಶಗಳು ಏಕರೂಪವಾಗಿ ಹೆಚ್ಚಾಗುತ್ತಿವೆ ಅಥವಾ ಕಡಿಮೆಯಾಗುತ್ತಿವೆ. >>> ಏಕರೂಪವಾಗಿ (([1, 2, 4, 20]) True >>> ಏಕರೂಪವಾಗಿ (([1, 20, 4, 10]) False >>> ಏಕರೂಪವಾಗಿ (([4, 1, 0, -10]) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"ಎರಡು ಪಟ್ಟಿಗಳಿಗೆ ವಿಂಗಡಿಸಲಾದ ವಿಶಿಷ್ಟವಾದ ಸಾಮಾನ್ಯ ಅಂಶಗಳನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. >>> ಸಾಮಾನ್ಯ (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> ಸಾಮಾನ್ಯ (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n ನ ಅತಿದೊಡ್ಡ ಅವಿಭಾಜ್ಯ ಅಂಶವನ್ನು ಹಿಂತಿರುಗಿ. n > 1 ಮತ್ತು ಅವಿಭಾಜ್ಯವಲ್ಲ ಎಂದು ಭಾವಿಸಿ. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n ಎಂಬುದು 1 ರಿಂದ n ವರೆಗಿನ ಸಂಖ್ಯೆಗಳನ್ನು ಒಟ್ಟುಗೂಡಿಸುವ ಒಂದು ಕಾರ್ಯವಾಗಿದೆ. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets ಎಂಬುದು \"(\" ಮತ್ತು \"\") ನ ಸ್ಟ್ರಿಂಗ್ ಆಗಿದೆ. ಪ್ರತಿ ಆರಂಭಿಕ ಬ್ರಾಕೆಟ್ಗೆ ಅನುಗುಣವಾದ ಮುಚ್ಚುವ ಬ್ರಾಕೆಟ್ ಇದ್ದರೆ True ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs ಬಹುಪದವೊಂದರ ಗುಣಾಂಕಗಳನ್ನು ಪ್ರತಿನಿಧಿಸುತ್ತದೆ. xs[0] + xs[1] * x + xs[2] * x^2 + .... ಈ ಬಹುಪದವದ ವ್ಯುತ್ಪತ್ತಿಯನ್ನು ಅದೇ ರೂಪದಲ್ಲಿ ಹಿಂತಿರುಗಿ. >>> ವ್ಯುತ್ಪತ್ತಿ (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> ವ್ಯುತ್ಪತ್ತಿ (([1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"ಫೈಬ್ಫೈಬ್ ಸಂಖ್ಯೆ ಅನುಕ್ರಮವು ಫೈಬ್ಬೊನಾಕಿ ಅನುಕ್ರಮಕ್ಕೆ ಹೋಲುತ್ತದೆ, ಇದನ್ನು ಈ ಕೆಳಗಿನಂತೆ ವ್ಯಾಖ್ಯಾನಿಸಲಾಗಿದೆಃ fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). ದಯವಿಟ್ಟು fibfib ಸಂಖ್ಯೆ ಅನುಕ್ರಮದ n- ನೇ ಅಂಶವನ್ನು ಪರಿಣಾಮಕಾರಿಯಾಗಿ ಲೆಕ್ಕಾಚಾರ ಮಾಡಲು ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"ಒಂದು ಪದವನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಇನ್ಪುಟ್ ಆಗಿ ತೆಗೆದುಕೊಳ್ಳುವ ಮತ್ತು ಸ್ಟ್ರಿಂಗ್ನಲ್ಲಿನ ಸ್ವರಗಳ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂದಿರುಗಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು vowels_count ಬರೆಯಿರಿ. ಈ ಸಂದರ್ಭದಲ್ಲಿ ಸ್ವರಗಳು 'a', 'e', 'i', 'o', 'u'. ಇಲ್ಲಿ, 'y' ಕೂಡ ಸ್ವರವಾಗಿದೆ, ಆದರೆ ಅದು ಕೊಟ್ಟಿರುವ ಪದದ ಕೊನೆಯಲ್ಲಿ ಮಾತ್ರ. ಉದಾಹರಣೆಃ >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"ಹೆಚ್ಚಿನ ಪರೀಕ್ಷಾ ಪ್ರಕರಣಗಳನ್ನು ಸೇರಿಸಿ.\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"ಪೂರ್ಣಾಂಕ x ನ ಅಂಕೆಗಳನ್ನು ವೃತ್ತಾಕಾರವಾಗಿ ಸರಿಸಿ, ಅಂಕೆಗಳನ್ನು ಬಲಕ್ಕೆ ಸರಿಸಿ ಮತ್ತು ಫಲಿತಾಂಶವನ್ನು ಸ್ಟ್ರಿಂಗ್ ಆಗಿ ಹಿಂತಿರುಗಿಸಿ. shift > ಅಂಕೆಗಳ ಸಂಖ್ಯೆ, ಅಂಕೆಗಳನ್ನು ಹಿಮ್ಮುಖವಾಗಿ ಹಿಂತಿರುಗಿಸಿ. >>> circular_shift ((12, 1) \"21\" >>> circular_shift ((12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"ಕಾರ್ಯ ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಇನ್ಪುಟ್ ಆಗಿ ತೆಗೆದುಕೊಳ್ಳುವ ಮತ್ತು ಮೇಲಿನ ಅಕ್ಷರಗಳ ಮೊತ್ತವನ್ನು ಮಾತ್ರ ಹಿಂದಿರುಗಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ. ಉದಾಹರಣೆಗಳುಃ digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"ಈ ಕಾರ್ಯದಲ್ಲಿ, ನೀವು ಹಣ್ಣಿನ ಬುಟ್ಟಿಯಲ್ಲಿ ವಿತರಿಸಲಾದ ಸೇಬುಗಳು ಮತ್ತು ಕಿತ್ತಳೆಗಳನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ನೀಡಲಾಗುವುದು ಈ ಬುಟ್ಟಿಯಲ್ಲಿ ಸೇಬುಗಳು, ಕಿತ್ತಳೆಗಳು ಮತ್ತು ಮಾಂಗೊ ಹಣ್ಣುಗಳು ಇರುತ್ತವೆ. ಆರೆಂಜ್ಗಳು ಮತ್ತು ಸೇಬುಗಳ ಒಟ್ಟು ಸಂಖ್ಯೆಯನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಸ್ಟ್ರಿಂಗ್ ಮತ್ತು ಬುಟ್ಟಿಯಲ್ಲಿರುವ ಹಣ್ಣುಗಳ ಒಟ್ಟು ಸಂಖ್ಯೆಯನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಒಂದು ಪೂರ್ಣಾಂಕವನ್ನು ನೀಡಿದರೆ, ಬುಟ್ಟಿಯಲ್ಲಿರುವ ಮಾಂಗೊ ಹಣ್ಣುಗಳ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಉದಾಹರಣೆಗೆಃ fruit_distribution\"5( ಸೇಬುಗಳು ಮತ್ತು 6 ಕಿತ್ತಳೆಗಳು\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 ಸೇಬುಗಳು ಮತ್ತು 1 ಕಿತ್ತಳೆಗಳು\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 ಸೇಬುಗಳು ಮತ್ತು 3 ಕಿತ್ತಳೆಗಳು\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 ಸೇಬುಗಳು ಮತ್ತು 1 ಕಿತ್ತಳೆಗಳು\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"ಒಂದು ಮರದಲ್ಲಿ ಒಂದು ಶಾಖೆಯನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಒಂದು ಶ್ರೇಣಿಯನ್ನು ನೀಡಿದರೆ ಅದು ಋಣಾತ್ಮಕವಲ್ಲದ ಪೂರ್ಣಾಂಕ ನೋಡ್ಗಳನ್ನು ಹೊಂದಿದೆ ನಿಮ್ಮ ಕಾರ್ಯವೆಂದರೆ ನೋಡ್ಗಳಲ್ಲಿ ಒಂದನ್ನು ತೆಗೆದು ಅದನ್ನು ಹಿಂದಿರುಗಿಸುವುದು. ತೆಗೆದ ನೋಡ್ ಚಿಕ್ಕದಾದ ಸಹ ಮೌಲ್ಯವನ್ನು ಹೊಂದಿರುವ ನೋಡ್ ಆಗಿರಬೇಕು. ಒಂದೇ ಸಣ್ಣ ಸಹ ಮೌಲ್ಯವನ್ನು ಹೊಂದಿರುವ ಅನೇಕ ನೋಡ್ಗಳನ್ನು ಕಂಡುಕೊಂಡರೆ ಚಿಕ್ಕದಾದ ಸೂಚ್ಯಂಕವನ್ನು ಹೊಂದಿರುವ ನೋಡ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ. ತೆಗೆದ ನೋಡ್ ಅನ್ನು ಪಟ್ಟಿಯಲ್ಲಿ ಹಿಂತಿರುಗಿಸಬೇಕು, [smallest_value, ಅದರ ಸೂಚ್ಯಂಕ ], ಯಾವುದೇ ಸಹ ಮೌಲ್ಯಗಳು ಇಲ್ಲದಿದ್ದರೆ ಅಥವಾ ಕೊಟ್ಟಿರುವ ಶ್ರೇಣಿಯು ಖಾಲಿಯಾಗಿದೆ, ಹಿಂತಿರುಗಿ []. ಉದಾಹರಣೆ 1: ಇನ್ಪುಟ್ಃ [4,2,3] ಔಟ್ಪುಟ್ಃ [2, 1] ವಿವರಣೆಃ 2 ಚಿಕ್ಕದಾದ ಸಹ ಮೌಲ್ಯವನ್ನು ಹೊಂದಿದೆ, ಮತ್ತು 2 ಚಿಕ್ಕದಾದ ಸೂಚ್ಯಂಕವನ್ನು ಹೊಂದಿದೆ. ಉದಾಹರಣೆ 2: ಇನ್ಪುಟ್ಃ [1,2,3] ಔಟ್ಪುಟ್ಃ [2, 1] ವಿವರಣೆಃ 2 ಚಿಕ್ಕದಾದ ಮೌಲ್ಯವನ್ನು ಹೊಂದಿದೆ, ಮತ್ತು 2 ಚಿಕ್ಕದಾದ ಸೂಚ್ಯಂಕವನ್ನು ಹೊಂದಿದೆ. ಉದಾಹರಣೆ 3: ಇನ್ಪುಟ್ಃ [] ಔಟ್ಪುಟ್ಃ [4:] ಇನ್ಪುಟ್ಃ [5, 3, 4, 2] ಔಟ್ಪುಟ್ಃ 0, 1 ಔಟ್ಪುಟ್ಃ 0 ಔಟ್ಪುಟ್ಃ 1 ಚಿಕ್ಕದ ನೋಡ್ಃ 1 ಚಿಕ್ಕದ ಮೌಲ್ಯವನ್ನು ಹೊಂದಿದೆ, ಆದರೆ ಸೂಚ್ಯಂಕವು ಶೂನ್ಯವಾಗಿದೆ. ಆದ್ದರಿಂದ ನಾವು ಮೊದಲ ನೋಡ್ ಅನ್ನು ಆಯ್ಕೆ ಮಾಡುತ್ತೇವೆ, ಅದು ಎರಡು ಶೂ ಆಗಿರುತ್ತದೆ. ಉದಾಹರಣೆಃ * ಉದ್ದ <= 10000 * ಉದ್ದ = ಶೂನ್ಯೂ, ಆದರೆ ಸೂಚ್ಯಂಕವು ಶೂನ್ಯವಾಗಿದೆ.\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''ನಿಮಗೆ ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳ ಖಾಲಿ ಅಲ್ಲದ ಪಟ್ಟಿಯನ್ನು ನೀಡಲಾಗಿದೆ. ಶೂನ್ಯಕ್ಕಿಂತ ದೊಡ್ಡದಾದ ಮತ್ತು ಪೂರ್ಣಾಂಕದ ಮೌಲ್ಯಕ್ಕಿಂತ ಹೆಚ್ಚಿನ ಅಥವಾ ಸಮನಾದ ಆವರ್ತನವನ್ನು ಹೊಂದಿರುವ ಅತಿದೊಡ್ಡ ಪೂರ್ಣಾಂಕವನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಪೂರ್ಣಾಂಕದ ಆವರ್ತನವು ಪಟ್ಟಿಯಲ್ಲಿ ಕಾಣಿಸಿಕೊಳ್ಳುವ ಸಂಖ್ಯೆಯಾಗಿದೆ. ಅಂತಹ ಮೌಲ್ಯವು ಅಸ್ತಿತ್ವದಲ್ಲಿಲ್ಲದಿದ್ದರೆ, -1. ಉದಾಹರಣೆಗಳುಃ ಹುಡುಕಾಟ [4, 1, 2, 2, 3, 1]) == 2 ಹುಡುಕಾಟ [1, 2, 2, 3, 3, 3, 4, 4]) == 3 ಹುಡುಕಾಟ [5, 5, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಿದರೆ, ವಿಚಿತ್ರ ಕ್ರಮದಲ್ಲಿ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. ವಿಚಿತ್ರ ವಿಂಗಡಣೆ, ನೀವು ಕನಿಷ್ಟ ಮೌಲ್ಯದಿಂದ ಪ್ರಾರಂಭಿಸಿದಾಗ, ನಂತರ ಉಳಿದ ಪೂರ್ಣಾಂಕಗಳ ಗರಿಷ್ಠ, ನಂತರ ಕನಿಷ್ಠ ಮತ್ತು ಹೀಗೆ. ಉದಾಹರಣೆಗಳುಃ strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''ತ್ರಿಕೋನವೊಂದರ ಮೂರು ಬದಿಗಳ ಉದ್ದಗಳನ್ನು ನೀಡಲಾಗಿದೆ. ಮೂರು ಬದಿಗಳು ಮಾನ್ಯವಾದ ತ್ರಿಕೋನವೊಂದನ್ನು ರೂಪಿಸಿದರೆ ತ್ರಿಕೋನವೊಂದರ ಪ್ರದೇಶವನ್ನು 2 ದಶಮಾಂಶ ಬಿಂದುಗಳಿಗೆ ದುಂಡಾದಂತೆ ಹಿಂತಿರುಗಿಸಿ. ಇಲ್ಲದಿದ್ದರೆ -1 ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ ಯಾವುದೇ ಎರಡು ಬದಿಗಳ ಮೊತ್ತವು ಮೂರನೇ ಬದಿಗಿಂತ ದೊಡ್ಡದಾದಾಗ ಮೂರು ಬದಿಗಳು ಮಾನ್ಯವಾದ ತ್ರಿಕೋನವೊಂದನ್ನು ಮಾಡುತ್ತವೆ. ಉದಾಹರಣೆಃ ತ್ರಿಕೋನ_ಪ್ರದೇಶ_ (3, 4, 5) == 6.00 ತ್ರಿಕೋನವೊಂದರ ಪ್ರದೇಶ_ (1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ ಅದು ವಸ್ತುವಿನ q ಹಾರಿದರೆ True ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ, ಮತ್ತು False ಇಲ್ಲದಿದ್ದರೆ. ವಸ್ತುವಿನ q ಸಮತೋಲಿತವಾಗಿದ್ದರೆ (ಇದು ಪಾಲಿಂಡ್ರೋಮಿಕ್ ಪಟ್ಟಿ) ಮತ್ತು ಅದರ ಅಂಶಗಳ ಮೊತ್ತವು ಗರಿಷ್ಠ ಸಂಭವನೀಯ ತೂಕಕ್ಕಿಂತ ಕಡಿಮೆ ಅಥವಾ ಸಮನಾಗಿರುತ್ತದೆ w. ಉದಾಹರಣೆಃ will_it_fly (([1, 2], 5) â -> False # 1+2 ಗರಿಷ್ಠ ಸಂಭವನೀಯ ತೂಕಕ್ಕಿಂತ ಕಡಿಮೆ, ಆದರೆ ಇದು ಅಸಮತೋಲಿತವಾಗಿದೆ. will_it_fly (([3, 2, 3], 1) â -> False # ಇದು ಸಮತೋಲಿತವಾಗಿದೆ, ಆದರೆ 3+2+3 ಗರಿಷ್ಠ ಸಂಭವನೀಯ ತೂಕಕ್ಕಿಂತ ಹೆಚ್ಚಾಗಿದೆ. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 ಗರಿಷ್ಠ ಸಂಭವನೀಯ ತೂಕಕ್ಕಿಂತ ಕಡಿಮೆ, ಮತ್ತು ಇದು ಸಮತೋಲಿತವಾಗಿದೆ. will_it_fly ((([3], 5) â -> True # 3 ಗರಿಷ್ಠ ಸಂಭವನೀಯ ತೂಕಕ್ಕಿಂತ ಕಡಿಮೆ, ಮತ್ತು ಇದು ಸಮತೋಲಿತವಾಗಿದೆ.'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"ಒಂದು ಶ್ರೇಣಿಯನ್ನು ಪೂರ್ಣಾಂಕಗಳ ಒಂದು ಶ್ರೇಣಿಯನ್ನು ನೀಡಿದರೆ, ಶ್ರೇಣಿಯನ್ನು ಪಾಲಿಂಡ್ರೋಮಿಕ್ ಮಾಡಲು ಬದಲಾಯಿಸಬೇಕಾದ ಕನಿಷ್ಠ ಸಂಖ್ಯೆಯ ಅಂಶಗಳನ್ನು ಹುಡುಕಿ. ಪಾಲಿಂಡ್ರೋಮಿಕ್ ಶ್ರೇಣಿಯು ಹಿಂದಿನ ಮತ್ತು ಮುಂದಕ್ಕೆ ಒಂದೇ ರೀತಿ ಓದುವ ಒಂದು ಶ್ರೇಣಿಯಾಗಿದೆ. ಒಂದು ಬದಲಾವಣೆಯಲ್ಲಿ, ನೀವು ಒಂದು ಅಂಶವನ್ನು ಯಾವುದೇ ಇತರ ಅಂಶಕ್ಕೆ ಬದಲಾಯಿಸಬಹುದು. ಉದಾಹರಣೆಗೆಃ smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''ಎರಡು ಸ್ಟ್ರಿಂಗ್ಗಳ ಪಟ್ಟಿಗಳನ್ನು ಸ್ವೀಕರಿಸುತ್ತದೆ ಮತ್ತು ಪಟ್ಟಿಯ ಎಲ್ಲಾ ಸ್ಟ್ರಿಂಗ್ಗಳಲ್ಲಿನ ಒಟ್ಟು ಸಂಖ್ಯೆಯ ಅಕ್ಷರಗಳನ್ನು ಇತರ ಪಟ್ಟಿಗಿಂತ ಕಡಿಮೆ ಹೊಂದಿರುವ ಪಟ್ಟಿಯನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ. ಎರಡು ಪಟ್ಟಿಗಳು ಒಂದೇ ಸಂಖ್ಯೆಯ ಅಕ್ಷರಗಳನ್ನು ಹೊಂದಿದ್ದರೆ, ಮೊದಲ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಉದಾಹರಣೆಗಳು total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"ಕೊಟ್ಟಿರುವ ಸಂಖ್ಯೆ 3 ಅವಿಭಾಜ್ಯ ಸಂಖ್ಯೆಗಳ ಗುಣಾಕಾರವಾಗಿದ್ದರೆ ಮತ್ತು ಸುಳ್ಳು ಇಲ್ಲದಿದ್ದರೆ ನಿಜವಾದದನ್ನು ಹಿಂದಿರುಗಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ. (ಎ) 100 ಕ್ಕಿಂತ ಕಡಿಮೆ ಎಂದು ತಿಳಿದಿರುವುದು. ಉದಾಹರಣೆಃ is_multiply_prime(30) == True 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"ನಿಮ್ಮ ಕಾರ್ಯವು ಒಂದು ಸಂಖ್ಯೆಯು x n ನ ಸರಳ ಶಕ್ತಿಯಾಗಿದ್ದರೆ ಮತ್ತು ಇತರ ಸಂದರ್ಭಗಳಲ್ಲಿ ಸುಳ್ಳು ಎಂದು ಹೇಳುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯುವುದು. x n ನ ಸರಳ ಶಕ್ತಿಯಾಗಿದ್ದರೆ n **int = x ಉದಾಹರಣೆಗೆಃ is_simple_power ((1, 4) => true is_simple_power ((2, 2) => true is_simple_power ((8, 2) => true is_simple_power ((3, 2) => false is_simple_power ((3, 1) => false is_simple_power ((5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''ಒಂದು ಪೂರ್ಣಾಂಕವನ್ನು ತೆಗೆದುಕೊಳ್ಳುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ ಮತ್ತು ಈ ingeger ಕೆಲವು ಪೂರ್ಣಾಂಕ ಸಂಖ್ಯೆಯ ಘನವಾಗಿದ್ದರೆ True ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. ಗಮನಿಸಿಃ ಇನ್ಪುಟ್ ಯಾವಾಗಲೂ ಮಾನ್ಯವಾಗಿರುತ್ತದೆ ಎಂದು ನೀವು ಭಾವಿಸಬಹುದು. ಉದಾಹರಣೆಗಳುಃ iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"ನೀವು ಹೆಕ್ಸಾಡೆಸಿಮಲ್ ಸಂಖ್ಯೆಯನ್ನು ಸ್ಟ್ರಿಂಗ್ ಆಗಿ ಸ್ವೀಕರಿಸುವ ಮತ್ತು ಪ್ರೈಮ್ ಆಗಿರುವ ಹೆಕ್ಸಾಡೆಸಿಮಲ್ ಅಂಕೆಗಳ ಸಂಖ್ಯೆಯನ್ನು ಎಣಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಲು ನಿಮಗೆ ಸೂಚಿಸಲಾಗಿದೆ (ಪ್ರೈಮ್ ಸಂಖ್ಯೆ, ಅಥವಾ ಪ್ರೈಮ್, 1 ಕ್ಕಿಂತ ದೊಡ್ಡದಾದ ನೈಸರ್ಗಿಕ ಸಂಖ್ಯೆಯಾಗಿದ್ದು ಅದು ಎರಡು ಸಣ್ಣ ನೈಸರ್ಗಿಕ ಸಂಖ್ಯೆಗಳ ಉತ್ಪನ್ನವಲ್ಲ). ಹೆಕ್ಸಾಡೆಸಿಮಲ್ ಅಂಕೆಗಳು 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. ಪ್ರೈಮ್ ಸಂಖ್ಯೆಗಳು 2, 3, 5, 7, 11, 13, 17,... ಆದ್ದರಿಂದ ನೀವು ಈ ಕೆಳಗಿನ ಅಂಕೆಗಳ ಸಂಖ್ಯೆಯನ್ನು ಕಂಡುಹಿಡಿಯಬೇಕುಃ 2, 3, 5, 7, B (= ದಶಮಾಂಶ 11), D (= ದಶಮಾಂಶ 13). ಗಮನಿಸಿಃ ನೀವು ಇನ್ಪುಟ್ ಯಾವಾಗಲೂ ಸರಿಯಾಗಿದೆ ಅಥವಾ ಖಾಲಿ ಎಂದು ಭಾವಿಸಬಹುದು ಸ್ಟ್ರಿಂಗ್, ಮತ್ತು ಚಿಹ್ನೆಗಳು A, B, C, D, E, F ಯಾವಾಗಲೂ ದೊಡ್ಡಕ್ಷರಗಳಾಗಿವೆ. ಉದಾಹರಣೆಗಳುಃ \"num = AB\" ಗೆ, ಔಟ್ಪುಟ್ num = 1. \"num = 1077E\" ಗೆ, ಔಟ್ಪುಟ್ num = 2. \"num = 331ABEDA\" ಗೆ, num = 4. \"num = 123ABCD\" ಗೆ, \"num = 6.06745D\" ಗೆ, \"num = 2.2020\" ಗೆ ಔಟ್ಪುಟ್ num = 2.20\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"ನೀವು ದಶಮಾಂಶ ರೂಪದಲ್ಲಿ ಒಂದು ಸಂಖ್ಯೆಯನ್ನು ನೀಡಲಾಗುವುದು ಮತ್ತು ನಿಮ್ಮ ಕಾರ್ಯವು ಅದನ್ನು ಬೈನರಿ ಸ್ವರೂಪಕ್ಕೆ ಪರಿವರ್ತಿಸುವುದು. ಕಾರ್ಯವು ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು, ಪ್ರತಿ ಅಕ್ಷರವು ಬೈನರಿ ಸಂಖ್ಯೆಯನ್ನು ಪ್ರತಿನಿಧಿಸುತ್ತದೆ. ಸ್ಟ್ರಿಂಗ್ನಲ್ಲಿನ ಪ್ರತಿಯೊಂದು ಅಕ್ಷರವು '0' ಅಥವಾ '1' ಆಗಿರುತ್ತದೆ. ಸ್ಟ್ರಿಂಗ್ನ ಆರಂಭದಲ್ಲಿ ಮತ್ತು ಕೊನೆಯಲ್ಲಿ ಹೆಚ್ಚುವರಿ ಅಕ್ಷರಗಳ ಜೋಡಿ 'db' ಇರುತ್ತದೆ. ಹೆಚ್ಚುವರಿ ಅಕ್ಷರಗಳು ಸ್ವರೂಪಕ್ಕೆ ಸಹಾಯ ಮಾಡಲು ಇವೆ. ಉದಾಹರಣೆಗಳುಃ decimal_to_binary ((15) # \"db1111db\" ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ decimal_to_binary32) # \"db100000db\" ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"ನಿಮಗೆ ಒಂದು ಸ್ಟ್ರಿಂಗ್ s ನೀಡಲಾಗಿದೆ. ಸ್ಟ್ರಿಂಗ್ ಹ್ಯಾಪಿ ಇದೆಯೋ ಇಲ್ಲವೋ ಎಂಬುದನ್ನು ಪರಿಶೀಲಿಸುವುದು ನಿಮ್ಮ ಕೆಲಸ. ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಹ್ಯಾಪಿ ಆಗಿರುವುದು ಅದರ ಉದ್ದವು ಕನಿಷ್ಠ 3 ಆಗಿದ್ದರೆ ಮತ್ತು ಪ್ರತಿ 3 ಸತತ ಅಕ್ಷರಗಳು ವಿಭಿನ್ನವಾಗಿವೆ ಉದಾಹರಣೆಗೆ: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"ಇದು ಸೆಮಿಸ್ಟರ್ನ ಕೊನೆಯ ವಾರ ಮತ್ತು ಶಿಕ್ಷಕನು ವಿದ್ಯಾರ್ಥಿಗಳಿಗೆ ಶ್ರೇಣಿಗಳನ್ನು ನೀಡಬೇಕಾಗಿದೆ. ಶಿಕ್ಷಕನು ತನ್ನದೇ ಆದ ಕ್ರಮಾವಳಿಗಳನ್ನು ಶ್ರೇಣೀಕರಣಕ್ಕಾಗಿ ಮಾಡುತ್ತಿದ್ದಾನೆ. ಏಕೈಕ ಸಮಸ್ಯೆ ಏನೆಂದರೆ, ಅವಳು ಶ್ರೇಣೀಕರಣಕ್ಕಾಗಿ ಬಳಸಿದ ಕೋಡ್ ಅನ್ನು ಕಳೆದುಕೊಂಡಿದ್ದಾಳೆ. ಅವಳು ಕೆಲವು ವಿದ್ಯಾರ್ಥಿಗಳಿಗೆ GPA ಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಿದ್ದಾಳೆ ಮತ್ತು ನೀವು ಈ ಕೆಳಗಿನ ಕೋಷ್ಟಕವನ್ನು ಬಳಸಿಕೊಂಡು ಅಕ್ಷರದ ಶ್ರೇಣಿಗಳನ್ನು ಪಟ್ಟಿ ಮಾಡುವಂತಹ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಬೇಕಾಗಿದೆ: GPA ಗಳು ಗಳು ಅಕ್ಷರದ ಶ್ರೇಣಿ 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E ಉದಾಹರಣೆ: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ತೆಗೆದುಕೊಳ್ಳುವ ಮತ್ತು ಸ್ಟ್ರಿಂಗ್ ಉದ್ದವು ಅವಿಭಾಜ್ಯ ಸಂಖ್ಯೆಯಾಗಿದ್ದರೆ True ಅಥವಾ False ಅನ್ನು ಹಿಂದಿರುಗಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ ಉದಾಹರಣೆಗಳು prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"ಒಂದು ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ನೀಡಿದರೆ, 1 ರಿಂದ ಪ್ರಾರಂಭವಾಗುವ ಅಥವಾ ಕೊನೆಗೊಳ್ಳುವ n-ಅಂಕಿಯ ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂತಿರುಗಿ.\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"ಒಂದು ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ N ನೀಡಿದರೆ, ಅದರ ಅಂಕೆಗಳ ಒಟ್ಟು ಮೊತ್ತವನ್ನು ಬೈನರಿ ರೂಪದಲ್ಲಿ ಹಿಂತಿರುಗಿಸಿ. ಉದಾಹರಣೆ N = 1000 ಗಾಗಿ, ಅಂಕೆಗಳ ಮೊತ್ತವು 1 ಆಗಿರುತ್ತದೆ, ಔಟ್ಪುಟ್ \"1\" ಆಗಿರಬೇಕು. N = 150 ಗಾಗಿ, ಅಂಕೆಗಳ ಮೊತ್ತವು 6 ಆಗಿರುತ್ತದೆ, ಔಟ್ಪುಟ್ \"110\" ಆಗಿರಬೇಕು. N = 147 ಗಾಗಿ, ಅಂಕೆಗಳ ಮೊತ್ತವು 12 ಆಗಿರುತ್ತದೆ, ಔಟ್ಪುಟ್ \"1100\" ಆಗಿರಬೇಕು. ಅಸ್ಥಿರಗಳು: @N ಪೂರ್ಣಾಂಕ ನಿರ್ಬಂಧಗಳುಃ 0 â‰¤ N â‰¤ 10000. ಔಟ್ಪುಟ್ಃ ಬೈನರಿ ಸಂಖ್ಯೆಯ ಸ್ಟ್ರಿಂಗ್ \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"ಪೂರ್ಣಾಂಕಗಳ ಖಾಲಿ ಅಲ್ಲದ ಪಟ್ಟಿಯನ್ನು ನೀಡಿದರೆ lst. ಬೆಸ ಸೂಚ್ಯಂಕಗಳಲ್ಲಿರುವ ಸಮ ಅಂಶಗಳನ್ನು ಸೇರಿಸಿ. ಉದಾಹರಣೆಗಳುಃ ಸೇರಿಸಿ (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ತೆಗೆದುಕೊಂಡು ಅದರ ಕ್ರಮಬದ್ಧ ಆವೃತ್ತಿಯನ್ನು ಹಿಂದಿರುಗಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ. ಸ್ಟ್ರಿಂಗ್ನ ಕ್ರಮಬದ್ಧ ಆವೃತ್ತಿಯು, ಎಲ್ಲಾ ಪದಗಳನ್ನು (ಅಂತರದಿಂದ ಬೇರ್ಪಡಿಸಲಾಗಿದೆ) ಹೊಸ ಪದದಿಂದ ಬದಲಾಯಿಸಲ್ಪಡುವ ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಆಗಿದ್ದು, ಅಲ್ಲಿ ಎಲ್ಲಾ ಅಕ್ಷರಗಳನ್ನು ASCII ಮೌಲ್ಯವನ್ನು ಆಧರಿಸಿ ಏರುತ್ತಿರುವ ಕ್ರಮದಲ್ಲಿ ಜೋಡಿಸಲಾಗಿದೆ. ಗಮನಿಸಿಃ ನೀವು ವಾಕ್ಯದಲ್ಲಿ ಪದಗಳ ಕ್ರಮ ಮತ್ತು ಖಾಲಿ ಸ್ಥಳಗಳನ್ನು ಇಟ್ಟುಕೊಳ್ಳಬೇಕು. ಉದಾಹರಣೆಗೆಃ anti_shuffle ((('Hi') 'Hi' anti_shuffle ((('hello') ಹಿಂದಿರುಗಿಸುತ್ತದೆ 'ehllo' anti_shuffle (('Hello World!!!') ಹಿಂದಿರುಗಿಸುತ್ತದೆ 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"ನಿಮಗೆ 2 ಆಯಾಮದ ಡೇಟಾವನ್ನು ನೀಡಲಾಗಿದೆ, ಇದು ಒಂದು ನೆಸ್ಟೆಡ್ ಪಟ್ಟಿಗಳಂತೆ, ಇದು ಮ್ಯಾಟ್ರಿಕ್ಸ್ಗೆ ಹೋಲುತ್ತದೆ, ಆದಾಗ್ಯೂ, ಮ್ಯಾಟ್ರಿಕ್ಸ್ಗಳಂತಲ್ಲದೆ, ಪ್ರತಿ ಸಾಲು ವಿಭಿನ್ನ ಸಂಖ್ಯೆಯ ಕಾಲಮ್ಗಳನ್ನು ಹೊಂದಿರಬಹುದು. lst, ಮತ್ತು ಪೂರ್ಣಾಂಕ x ನೀಡಿದರೆ, ಪಟ್ಟಿಯಲ್ಲಿ ಪೂರ್ಣಾಂಕಗಳನ್ನು x ಹುಡುಕಿ, ಮತ್ತು ಟುಪಲ್ಗಳ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿ, [(x1, y1), (x2, y2) ...] ಅಂದರೆ ಪ್ರತಿ ಟುಪಲ್ ಒಂದು ನಿರ್ದೇಶಾಂಕವಾಗಿದೆ - (ಸಾಲ, ಕಾಲಮ್ಗಳು), 0 ರಿಂದ ಪ್ರಾರಂಭವಾಗುತ್ತದೆ. ಆರಂಭದಲ್ಲಿ ಸಾಲುಗಳ ಮೂಲಕ ನಿರ್ದೇಶಾಂಕಗಳನ್ನು ಆರೋಹಣ ಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸಿ. ಅಲ್ಲದೆ, ಸಾಲಿನ ನಿರ್ದೇಶಾಂಕಗಳನ್ನು ಕಾಲಮ್ಗಳ ಮೂಲಕ ಇಳಿಯುವ ಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸಿ. ಉದಾಹರಣೆಗಳುಃ get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 1, 4], 0 (2, 5), (2, 0) get_(], 1) [] == [[ಸಾಲ 1, 1, 2, 3, 2]], []]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"ಋಣಾತ್ಮಕವಲ್ಲದ ಪೂರ್ಣಾಂಕಗಳ ಒಂದು ಶ್ರೇಣಿಯನ್ನು ನೀಡಿದರೆ, ವಿಂಗಡಣೆಯ ನಂತರ ಕೊಟ್ಟಿರುವ ಶ್ರೇಣಿಯ ನಕಲನ್ನು ಹಿಂತಿರುಗಿ, ಕೊಟ್ಟಿರುವ ಶ್ರೇಣಿಯನ್ನು ಏರುತ್ತಿರುವ ಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸಿ, ಮೊತ್ತವು ((ಮೊದಲ ಸೂಚ್ಯಂಕ ಮೌಲ್ಯ, ಕೊನೆಯ ಸೂಚ್ಯಂಕ ಮೌಲ್ಯ) ಬೆಸವಾಗಿದ್ದರೆ, ಅಥವಾ ಮೊತ್ತವು ((ಮೊದಲ ಸೂಚ್ಯಂಕ ಮೌಲ್ಯ, ಕೊನೆಯ ಸೂಚ್ಯಂಕ ಮೌಲ್ಯ) ಸಮವಾಗಿದ್ದರೆ ಅದನ್ನು ಇಳಿಯುವ ಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸಿ. ಗಮನಿಸಿಃ * ಕೊಟ್ಟಿರುವ ಶ್ರೇಣಿಯನ್ನು ಬದಲಾಯಿಸಬೇಡಿ. ಉದಾಹರಣೆಗಳುಃ * sort_array[(]) => [] * sort_array[]] => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಆರ್ಗ್ಯುಮೆಂಟ್ ಆಗಿ ತೆಗೆದುಕೊಳ್ಳುವ ಮತ್ತು ಅಕ್ಷರಮಾಲೆಯೊಂದಿಗೆ ಎನ್ಕ್ರಿಪ್ಟ್ ಮಾಡಲಾದ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂದಿರುಗಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಎನ್ಕ್ರಿಪ್ಟ್ ಮಾಡಿ. ಅಕ್ಷರಮಾಲೆಯನ್ನು ಎರಡು ಸ್ಥಳಗಳಿಗೆ ಎರಡು ಬಾರಿ ಎರಡು ಸ್ಥಳಗಳಿಗೆ ಸ್ಥಳಾಂತರಿಸುವ ರೀತಿಯಲ್ಲಿ ತಿರುಗಿಸಬೇಕು. ಉದಾಹರಣೆಗೆಃ ಎನ್ಕ್ರಿಪ್ಟ್ (('ಹೈ') 'ಎಲ್ಎಂ' ಎನ್ಕ್ರಿಪ್ಟ್ (('ಅಸ್ಫಾಫ್ಘ್ಜ್ಕ್ಲ್') 'ಎವ್ಹ್ಕ್ಲೊಪ್' ಎನ್ಕ್ರಿಪ್ಟ್ (('ಜಿಎಫ್') 'ಕೆ' ಎನ್ಕ್ರಿಪ್ಟ್ (('ಇಟ್') 'ಐಕ್ಸ್' ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ.\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"ನಿಮಗೆ ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಲಾಗಿದೆ. ಪಟ್ಟಿಯ 2 ನೇ ಚಿಕ್ಕ ಅಂಶವನ್ನು ಹಿಂದಿರುಗಿಸುವ next_smallest () ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ. ಅಂತಹ ಅಂಶವಿಲ್ಲದಿದ್ದರೆ ಯಾವುದನ್ನೂ ಹಿಂತಿರುಗಿಸಬೇಡಿ. next_smallest () [1, 2, 3, 4, 5]) == 2 next_smallest () [5, 1, 4, 3, 2]) == 2 next_smallest () == None next_smallest () [1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"ನಿಮಗೆ ಪದಗಳ ಒಂದು ಸರಣಿಯನ್ನು ನೀಡಲಾಗುವುದು, ಮತ್ತು ನಿಮ್ಮ ಕಾರ್ಯವೆಂದರೆ ಬೇಸರಗಳ ಸಂಖ್ಯೆಯನ್ನು ಎಣಿಸುವುದು. \"ನಾನು\" ಎಂಬ ಪದದಿಂದ ಪ್ರಾರಂಭವಾಗುವ ವಾಕ್ಯವು ಬೇಸರವಾಗಿದೆ. ವಾಕ್ಯಗಳನ್ನು '.', '?' ಅಥವಾ '! ' ಎಂದು ಗುರುತಿಸಲಾಗುತ್ತದೆ. ಉದಾಹರಣೆಗೆಃ >>> is_bored ((\"ಹಲೋ ವರ್ಲ್ಡ್\") 0 >>> is_bored ((\"ಆಕಾಶವು ನೀಲಿ. ಸೂರ್ಯ ಹೊಳೆಯುತ್ತಿದೆ. ನಾನು ಈ ಹವಾಮಾನವನ್ನು ಪ್ರೀತಿಸುತ್ತೇನೆ\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''3 ಸಂಖ್ಯೆಗಳನ್ನು ತೆಗೆದುಕೊಳ್ಳುವ ಒಂದು ಕಾರ್ಯವನ್ನು ರಚಿಸಿ. ಒಂದು ಸಂಖ್ಯೆಯು ಇತರ ಎರಡು ಮೊತ್ತಕ್ಕೆ ಸಮನಾಗಿರುತ್ತದೆ ಮತ್ತು ಎಲ್ಲಾ ಸಂಖ್ಯೆಗಳು ಪೂರ್ಣಾಂಕಗಳಾಗಿವೆ. ಯಾವುದೇ ಇತರ ಸಂದರ್ಭಗಳಲ್ಲಿ ತಪ್ಪು ಎಂದು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. ಉದಾಹರಣೆಗಳು ಯಾವುದೇ_ಇಂಟ್ {5, 2, 7) -> ನಿಜವಾದ ಯಾವುದೇ_ಇಂಟ್ {3, 2, 2) -> ಸುಳ್ಳು ಯಾವುದೇ_ಇಂಟ್ {3, -2, 1) -> ನಿಜವಾದ ಯಾವುದೇ_ಇಂಟ್ {3, 6, -2.2, 2) -> ಸುಳ್ಳು '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"ಒಂದು ಸಂದೇಶವನ್ನು ತೆಗೆದುಕೊಳ್ಳುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ, ಮತ್ತು ಅದು ಎಲ್ಲಾ ಅಕ್ಷರಗಳ ಪ್ರಕರಣವನ್ನು ವಿನಿಮಯ ಮಾಡಿಕೊಳ್ಳುವ ರೀತಿಯಲ್ಲಿ ಎನ್ಕೋಡ್ ಮಾಡುತ್ತದೆ, ಸಂದೇಶದಲ್ಲಿನ ಎಲ್ಲಾ ಸ್ವರಗಳನ್ನು ಇಂಗ್ಲಿಷ್ ವರ್ಣಮಾಲೆಯ ಆ ಸ್ವರಕ್ಕಿಂತ 2 ಸ್ಥಾನಗಳ ಮುಂದೆ ಕಾಣಿಸಿಕೊಳ್ಳುವ ಅಕ್ಷರದೊಂದಿಗೆ ಬದಲಾಯಿಸುತ್ತದೆ. ಅಕ್ಷರಗಳನ್ನು ಮಾತ್ರ ಊಹಿಸಿ. ಉದಾಹರಣೆಗಳುಃ >>> ಎನ್ಕೋಡ್ (('ಪರೀಕ್ಷೆ') 'TGST' >>> ಎನ್ಕೋಡ್ (('ಇದು ಒಂದು ಸಂದೇಶ') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"ನಿಮಗೆ ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿ ನೀಡಲಾಗಿದೆ. ನೀವು ದೊಡ್ಡ ಅವಿಭಾಜ್ಯ ಮೌಲ್ಯವನ್ನು ಕಂಡುಹಿಡಿಯಬೇಕು ಮತ್ತು ಅದರ ಅಂಕೆಗಳ ಮೊತ್ತವನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. ಉದಾಹರಣೆಗಳು: lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ಗೆ ಔಟ್ಪುಟ್ 10 ಆಗಿರಬೇಕು lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ಗೆ ಔಟ್ಪುಟ್ 25 ಆಗಿರಬೇಕು lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ಗೆ ಔಟ್ಪುಟ್ 13 ಆಗಿರಬೇಕು lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ಗೆ ಔಟ್ಪುಟ್ 11 ಆಗಿರಬೇಕು lst = [0,81,12,3,21,1] ಗೆ ಔಟ್ಪುಟ್ 3 ಆಗಿರಬೇಕು lst = [0,1,8,1,2,7] ಗೆ ಔಟ್ಪುಟ್ 7 ಆಗಿರಬೇಕು \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"ಒಂದು ನಿಘಂಟನ್ನು ನೀಡಿದರೆ, ಎಲ್ಲಾ ಕೀಲಿಗಳು ಸಣ್ಣ ಅಕ್ಷರಗಳಲ್ಲಿನ ಸ್ಟ್ರಿಂಗ್ ಗಳು ಅಥವಾ ಎಲ್ಲಾ ಕೀಲಿಗಳು ದೊಡ್ಡ ಅಕ್ಷರಗಳಲ್ಲಿನ ಸ್ಟ್ರಿಂಗ್ ಗಳು ಆಗಿದ್ದರೆ True ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ, ಇಲ್ಲದಿದ್ದರೆ False ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. ಕಾರ್ಯವು False ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. ಕೊಟ್ಟಿರುವ ನಿಘಂಟು ಖಾಲಿಯಾಗಿದೆ. ಉದಾಹರಣೆಗಳುಃ check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) True ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) False ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) False ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) False ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"45\") True ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"ಒಂದು ನಕಾರಾತ್ಮಕವಲ್ಲದ ಪೂರ್ಣಾಂಕವನ್ನು ತೆಗೆದುಕೊಳ್ಳುವ ಮತ್ತು ಮೊದಲ n ಪೂರ್ಣಾಂಕಗಳ ಒಂದು ಶ್ರೇಣಿಯನ್ನು ಹಿಂದಿರುಗಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಕಾರ್ಯಗತಗೊಳಿಸಿ ಅದು ಅವಿಭಾಜ್ಯ ಸಂಖ್ಯೆಗಳು ಮತ್ತು n ಗಿಂತ ಕಡಿಮೆ. ಉದಾಹರಣೆಗೆಃ count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"ಎರಡು ಪೂರ್ಣಾಂಕಗಳನ್ನು ತೆಗೆದುಕೊಂಡು ಅವುಗಳ ಘಟಕ ಅಂಕೆಗಳ ಉತ್ಪನ್ನವನ್ನು ಹಿಂದಿರುಗಿಸುವ ಕಾರ್ಯವನ್ನು ಪೂರ್ಣಗೊಳಿಸಿ. ಇನ್ಪುಟ್ ಯಾವಾಗಲೂ ಮಾನ್ಯವಾಗಿದೆ ಎಂದು ಭಾವಿಸಿ. ಉದಾಹರಣೆಗಳುಃ ಗುಣಿಸಿ 148, 412) 16. ಗುಣಿಸಿ 19 , 28 72. ಗುಣಿಸಿ 2020 , 1851 0. ಗುಣಿಸಿ 14 , 15 20.\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"ಒಂದು ಸ್ಟ್ರಿಂಗ್ s ನೀಡಿದರೆ, ಸಮ ಸೂಚ್ಯಂಕಗಳಲ್ಲಿ ದೊಡ್ಡಕ್ಷರ ಸ್ವರಗಳ ಸಂಖ್ಯೆಯನ್ನು ಎಣಿಸಿ. ಉದಾಹರಣೆಗೆಃ count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''ಒಂದು ಸಂಖ್ಯೆಯನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಒಂದು ಮೌಲ್ಯವನ್ನು (ಸ್ಟ್ರಿಂಗ್) ತೆಗೆದುಕೊಳ್ಳುವ ಮತ್ತು ಅದಕ್ಕೆ ಸಮೀಪವಿರುವ ಪೂರ್ಣಾಂಕವನ್ನು ಹಿಂದಿರುಗಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ರಚಿಸಿ. ಸಂಖ್ಯೆ ಎರಡು ಪೂರ್ಣಾಂಕಗಳಿಂದ ಸಮದೂರದಲ್ಲಿದ್ದರೆ, ಅದನ್ನು ಶೂನ್ಯದಿಂದ ಸುತ್ತುವರಿಯಿರಿ. ಉದಾಹರಣೆಗಳು >>> closest_integer ((\"10\") 10 >>> closest_integer ((\"15.3\") 15 ಗಮನಿಸಿ: ಶೂನ್ಯದಿಂದ ಸುತ್ತುವರಿಯುವುದು ಎಂದರೆ ಕೊಟ್ಟಿರುವ ಸಂಖ್ಯೆ ಎರಡು ಪೂರ್ಣಾಂಕಗಳಿಂದ ಸಮದೂರದಲ್ಲಿದ್ದರೆ, ನೀವು ಹಿಂದಿರುಗಿಸಬೇಕಾದದ್ದು ಶೂನ್ಯದಿಂದ ದೂರವಿರುವ ಒಂದು. ಉದಾಹರಣೆಗಾಗಿ closest_integer \" ((14.5\") 15 ಮತ್ತು closest_integer \" ((-14.5\") -15. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"ಒಂದು ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ಅನ್ನು ನೀಡಿದರೆ, ನೀವು n ಮಟ್ಟದ ಕಲ್ಲುಗಳ ರಾಶಿಯನ್ನು ಮಾಡಬೇಕು. ಮೊದಲ ಹಂತದಲ್ಲಿ n ಕಲ್ಲುಗಳು ಇವೆ. ಮುಂದಿನ ಹಂತದಲ್ಲಿ ಕಲ್ಲುಗಳ ಸಂಖ್ಯೆ ಹೀಗಿರುತ್ತದೆ: - ಮುಂದಿನ ಬೆಸ ಸಂಖ್ಯೆ n ಬೆಸವಾಗಿದ್ದರೆ. - ಮುಂದಿನ ಸಮ ಸಂಖ್ಯೆಯ n ಸಮವಾಗಿದ್ದರೆ. ಪ್ರತಿ ಹಂತದಲ್ಲಿ ಕಲ್ಲುಗಳ ಸಂಖ್ಯೆಯನ್ನು ಪಟ್ಟಿಯಲ್ಲಿ ಹಿಂತಿರುಗಿ, ಅಲ್ಲಿ ಸೂಚ್ಯಂಕ i ನಲ್ಲಿರುವ ಅಂಶವು ಮಟ್ಟದಲ್ಲಿನ ಕಲ್ಲುಗಳ ಸಂಖ್ಯೆಯನ್ನು ಪ್ರತಿನಿಧಿಸುತ್ತದೆ (i + 1). ಉದಾಹರಣೆಗಳುಃ >>> make_a_pile (i + 1) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"ನಿಮಗೆ ಅಲ್ಪವಿರಾಮ ಅಥವಾ ಅಂತರಗಳಿಂದ ಬೇರ್ಪಡಿಸಲಾದ ಪದಗಳ ಒಂದು ಸ್ಟ್ರಿಂಗ್ ನೀಡಲಾಗುವುದು. ನಿಮ್ಮ ಕಾರ್ಯವು ಪದಗಳಾಗಿ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ವಿಭಜಿಸುವುದು ಮತ್ತು ಪದಗಳ ಒಂದು ಶ್ರೇಣಿಯನ್ನು ಹಿಂತಿರುಗಿಸುವುದು. ಉದಾಹರಣೆಗೆಃ words_string ((\"ಹಲೋ, ನನ್ನ ಹೆಸರು ಜಾನ್\") == [\"ಹಲೋ\", \"ನನ್ನ\", \"ಹೆಸರು\", \"ಇದು\", \"ಜಾನ್\"] words_string ((\"ಒಂದು, ಎರಡು, ಮೂರು, ನಾಲ್ಕು, ಐದು, ಆರು\") == [\"ಒಂದು\", \"ಎರಡು\", \"ಮೂರು\", \"ನಾಲ್ಕು\", \"ಐದು\", \"ಆರು\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"ಈ ಕಾರ್ಯವು ಎರಡು ಧನಾತ್ಮಕ ಸಂಖ್ಯೆಗಳನ್ನು x ಮತ್ತು y ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ ಮತ್ತು [x, y] ವ್ಯಾಪ್ತಿಯಲ್ಲಿರುವ ಅತಿದೊಡ್ಡ ಸಮ ಸಮಸಂಖ್ಯೆಯ ಪೂರ್ಣಾಂಕವನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ. ಅಂತಹ ಸಂಖ್ಯೆ ಇಲ್ಲದಿದ್ದರೆ, ಕಾರ್ಯವು -1 ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. ಉದಾಹರಣೆಗೆಃ choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"ನಿಮಗೆ n ಮತ್ತು m ಎಂಬ ಎರಡು ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳನ್ನು ನೀಡಲಾಗಿದೆ, ಮತ್ತು ನಿಮ್ಮ ಕಾರ್ಯವು n ರಿಂದ m (n ಮತ್ತು m ಸೇರಿದಂತೆ) ನಡುವಿನ ಪೂರ್ಣಾಂಕಗಳ ಸರಾಸರಿಯನ್ನು ಲೆಕ್ಕಾಚಾರ ಮಾಡುವುದು. ಉತ್ತರವನ್ನು ಹತ್ತಿರದ ಪೂರ್ಣಾಂಕಕ್ಕೆ ಸುತ್ತಿಕೊಳ್ಳಿ ಮತ್ತು ಅದನ್ನು ಬೈನರಿ ಆಗಿ ಪರಿವರ್ತಿಸಿ. n m ಗಿಂತ ದೊಡ್ಡದಾಗಿದ್ದರೆ, -1. ಉದಾಹರಣೆಃ rounded_avg ((1, 5) => \"0b11\" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => \"0b1111\" rounded_avg ((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"ಸಕಾರಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಲಾಗಿದೆ x. ಯಾವುದೇ ಸಮ ಅಂಕಿಯಿಲ್ಲದ ಎಲ್ಲಾ ಅಂಶಗಳ ವಿಂಗಡಿಸಲಾದ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. ಗಮನಿಸಿಃ ಹಿಂತಿರುಗಿಸಿದ ಪಟ್ಟಿಯನ್ನು ಹೆಚ್ಚುತ್ತಿರುವ ಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸಬೇಕು. ಉದಾಹರಣೆಗೆಃ >>> ಅನನ್ಯ_ಅಂಕಿಗಳು (([15, 33, 1422, 1]) [1, 15, 33] >>> ಅನನ್ಯ_ಅಂಕಿಗಳು (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"ಒಂದು ಪೂರ್ಣಾಂಕಗಳ ಶ್ರೇಣಿಯನ್ನು ನೀಡಿದರೆ, 1 ಮತ್ತು 9 ರ ನಡುವಿನ ಪೂರ್ಣಾಂಕಗಳನ್ನು ವಿಂಗಡಿಸಿ, ಪರಿಣಾಮವಾಗಿ ರಚನೆಯನ್ನು ಹಿಮ್ಮುಖಗೊಳಿಸಿ, ತದನಂತರ ಪ್ರತಿ ಅಂಕಿಯನ್ನು ಅದರ ಅನುಗುಣವಾದ ಹೆಸರಿನಿಂದ \"ಒಂದು\", \"ಎರಡು\", \"ಮೂರು\", \"ನಾಲ್ಕು\", \"ಐದು\", \"ಆರು\", \"ಏಳು\", \"ಎಂಟು\", \"ಒಂಬತ್ತು\" ನಿಂದ ಬದಲಾಯಿಸಿ. ಉದಾಹರಣೆಗೆಃ arr = [2, 1, 1, 4, 5, 8, 2, 3] -> ವಿಂಗಡಿಸು arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> ರಿವರ್ಸ್ arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [\"ಎಂಟು\", \"ಐದು\", \"ನಾಲ್ಕು\", \"ಎರಡು\", \"ಎರಡು\", \"ಎರಡು\", \"ಒಂದು\", \"ಒಂದು\"] ರಚನೆಯು ಖಾಲಿಯಾಗಿದ್ದರೆ, ಒಂದು ಖಾಲಿ ಮರಳಿಃ arr = [] return [] ರಚನೆಯು ಯಾವುದೇ ವಿಚಿತ್ರ ಸಂಖ್ಯೆಯನ್ನು ಹೊಂದಿದ್ದರೆ ಅದನ್ನು ನಿರ್ಲಕ್ಷಿಸಿಃ arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [51] return - 'ಒಂದು' \"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"n ಅನ್ನು ನಿಯತಾಂಕವಾಗಿ ತೆಗೆದುಕೊಳ್ಳುವ ಕಾರ್ಯವನ್ನು ಕಾರ್ಯಗತಗೊಳಿಸಿ, ಮತ್ತು n ಗಾತ್ರದ ಪಟ್ಟಿಯನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ, ಅಂದರೆ ಸೂಚ್ಯಂಕ i ನಲ್ಲಿನ ಅಂಶದ ಮೌಲ್ಯವು i ನ ಅಂಶವಾಗಿದೆ, ಅದು i ಕೂಡಿದ್ದರೆ ಅಥವಾ 1 ರಿಂದ i ವರೆಗಿನ ಸಂಖ್ಯೆಗಳ ಮೊತ್ತವು ಇಲ್ಲದಿದ್ದರೆ. i 1 ರಿಂದ ಪ್ರಾರಂಭವಾಗುತ್ತದೆ. i ನ ಅಂಶವು 1 ರಿಂದ i ವರೆಗಿನ ಸಂಖ್ಯೆಗಳ ಗುಣಾಕಾರವಾಗಿದೆ (1 * 2 * . . . * i). ಉದಾಹರಣೆಃ f ((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"ಒಂದು ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ನೀಡಿದರೆ, ವ್ಯಾಪ್ತಿಯಲ್ಲಿ ಬರುವ ಸಮ ಮತ್ತು ಬೆಸ ಪೂರ್ಣಾಂಕದ ಪಾಲಿಂಡ್ರೋಮ್ಗಳ ಸಂಖ್ಯೆಯನ್ನು ಹೊಂದಿರುವ ಟಪುಲ್ ಅನ್ನು ಹಿಂತಿರುಗಿ. ಉದಾಹರಣೆ1: ಇನ್ಪುಟ್ಃ 3 ಔಟ್ಪುಟ್ಃ (1, 2) ವಿವರಣೆಃ ಪೂರ್ಣಾಂಕದ ಪಾಲಿಂಡ್ರೋಮ್ 1, 2, 3. ಅವುಗಳಲ್ಲಿ ಒಂದು ಸಮ ಮತ್ತು ಅವುಗಳಲ್ಲಿ ಎರಡು ಬೆಸ. ಉದಾಹರಣೆ2: ಇನ್ಪುಟ್ಃ 12 ಔಟ್ಪುಟ್ಃ (4, 6) ವಿವರಣೆಃ ಪೂರ್ಣಾಂಕದ ಪಾಲಿಂಡ್ರೋಮ್ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ಅವುಗಳಲ್ಲಿ ನಾಲ್ಕು ಸಮ ಮತ್ತು ಅವುಗಳಲ್ಲಿ 6 ಬೆಸ. ಗಮನಿಸಿಃ 1. 1 <= n <= 10 ^ 3 2. ಟಪುಲ್ ಕ್ರಮವಾಗಿ ಸಮ ಮತ್ತು ಬೆಸ ಪೂರ್ಣಾಂಕಿಯ ಪಾಲಿಂಡ್ರೋಮ್ಗಳ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂತಿರುಗಿಸಿದೆ. \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"ಒಂದು ಪೂರ್ಣಾಂಕಗಳ ಶ್ರೇಣಿಯನ್ನು ತೆಗೆದುಕೊಳ್ಳುವ ಮತ್ತು ಅಂಕಿಗಳ ಮೊತ್ತವನ್ನು ಹೊಂದಿರುವ ಅಂಶಗಳ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂದಿರುಗಿಸುವ count_nums ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ. ಒಂದು ಸಂಖ್ಯೆ ನಕಾರಾತ್ಮಕವಾಗಿದ್ದರೆ, ಅದರ ಮೊದಲ ಸಹಿ ಮಾಡಿದ ಅಂಕೆ ನಕಾರಾತ್ಮಕವಾಗಿರುತ್ತದೆಃ ಉದಾಹರಣೆಗೆ -123 ಅಂಕಿಗಳನ್ನು -1, 2, ಮತ್ತು 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"ನಾವು ಒಂದು ಶ್ರೇಣಿಯನ್ನು ಹೊಂದಿದ್ದೇವೆ 'arr' N ಪೂರ್ಣಾಂಕಗಳ arr[1], arr[2], ..., arr[N]. ಶ್ರೇಣಿಯಲ್ಲಿನ ಸಂಖ್ಯೆಗಳನ್ನು ಯಾದೃಚ್ಛಿಕವಾಗಿ ಕ್ರಮಗೊಳಿಸಲಾಗುತ್ತದೆ. ನಿಮ್ಮ ಕಾರ್ಯವು ಈ ಕೆಳಗಿನ ಕಾರ್ಯಾಚರಣೆಯನ್ನು ನಿರ್ವಹಿಸುವ ಮೂಲಕ ಶ್ರೇಣಿಯನ್ನು ಕಡಿಮೆ ಆಗದ ಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸಲು ಸಾಧ್ಯವೇ ಎಂದು ನಿರ್ಧರಿಸುವುದು. ನಿರ್ದಿಷ್ಟ ಶ್ರೇಣಿಯಲ್ಲಿ ಈ ಕೆಳಗಿನ ಕಾರ್ಯಾಚರಣೆಯನ್ನು ನಿರ್ವಹಿಸಲು ನಿಮಗೆ ಅನುಮತಿ ಇದೆ: ನಿಮಗೆ ಯಾವುದೇ ಸಂಖ್ಯೆಯ ಬಾರಿ ಬಲಕ್ಕೆ ಶಿಫ್ಟ್ ಕಾರ್ಯಾಚರಣೆಯನ್ನು ನಿರ್ವಹಿಸಲು ಅನುಮತಿ ಇದೆ. ಒಂದು ಬಲ ಶಿಫ್ಟ್ ಕಾರ್ಯಾಚರಣೆಯು ಶ್ರೇಣಿಯ ಎಲ್ಲಾ ಅಂಶಗಳನ್ನು ಸರಿಯಾದ ದಿಕ್ಕಿನಲ್ಲಿ ಒಂದು ಸ್ಥಾನದಿಂದ ಸರಿಸುವುದನ್ನು ಅರ್ಥೈಸುತ್ತದೆ. ಶ್ರೇಣಿಯ ಕೊನೆಯ ಅಂಶವನ್ನು ಶ್ರೇಣಿಯಲ್ಲಿನ ಆರಂಭಿಕ ಸ್ಥಾನಕ್ಕೆ ಅಂದರೆ 0 ನೇ ಸೂಚ್ಯಂಕಕ್ಕೆ ಸರಿಸಲಾಗುತ್ತದೆ. ಮೇಲಿನ ಕಾರ್ಯಾಚರಣೆಯನ್ನು ನಿರ್ವಹಿಸುವ ಮೂಲಕ ವಿಂಗಡಿಸಲಾದ ಶ್ರೇಣಿಯನ್ನು ಪಡೆಯಲು ಸಾಧ್ಯವಾದರೆ ನಂತರ True ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ ಇಲ್ಲದಿದ್ದರೆ False ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ. ನಿರ್ದಿಷ್ಟ ಶ್ರೇಣಿಯು ಖಾಲಿಯಾಗಿದ್ದರೆ ನಂತರ True ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಗಮನಿಸಿಃ ನಿರ್ದಿಷ್ಟ ಪಟ್ಟಿಯಲ್ಲಿ ಅನನ್ಯ ಅಂಶಗಳನ್ನು ಹೊಂದಲು ಖಾತರಿಪಡಿಸಲಾಗಿದೆ. ಉದಾಹರಣೆಗೆಃ move_one_{} ball[3, 4, 5, 2]= true ವಿವರಣೆಃ ಸರಿಯಾದ ಕಾರ್ಯಾಚರಣೆಯ ಮೂಲಕ, ಶ್ರೇಣಿಯನ್ನು ಕಡಿಮೆ ಆಗದ ಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸಲು ಸಾಧ್ಯವಿದೆ.\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"ಈ ಸಮಸ್ಯೆಯಲ್ಲಿ, ನೀವು ಎರಡು ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಗಳನ್ನು ತೆಗೆದುಕೊಳ್ಳುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಅಳವಡಿಸುತ್ತೀರಿ, ಮತ್ತು lst1 ಅನ್ನು ಕೇವಲ ಜೋಡಿ ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಯಾಗಿ ಮಾಡಲು ಅವುಗಳ ನಡುವೆ ಅಂಶಗಳ ವಿನಿಮಯವನ್ನು ನಿರ್ವಹಿಸಲು ಸಾಧ್ಯವಿದೆಯೇ ಎಂದು ನಿರ್ಧರಿಸುತ್ತದೆ. lst1 ಮತ್ತು lst2 ನಡುವಿನ ವಿನಿಮಯ ಅಂಶಗಳ ಸಂಖ್ಯೆಗೆ ಯಾವುದೇ ಮಿತಿಯಿಲ್ಲ. lst1 ಮತ್ತು lst2 ನಡುವಿನ ಅಂಶಗಳನ್ನು ವಿನಿಮಯ ಮಾಡಿಕೊಳ್ಳಲು lst1 ನ ಎಲ್ಲಾ ಅಂಶಗಳನ್ನು ಜೋಡಿಯಾಗಿ ಮಾಡಲು ಸಾಧ್ಯವಾದರೆ, \"YES\" ಅನ್ನು ಹಿಂತಿರುಗಿ. ಇಲ್ಲದಿದ್ದರೆ, \"NO\" ಅನ್ನು ಹಿಂತಿರುಗಿ. ಉದಾಹರಣೆಗೆಃ exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" ಇನ್ಪುಟ್ ಪಟ್ಟಿಗಳು ಖಾಲಿಯಾಗಿರುವುದಿಲ್ಲ ಎಂದು ಭಾವಿಸಲಾಗಿದೆ. \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"ಒಂದು ಅಕ್ಷರವು ಒಂದು ಅಕ್ಷರವನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ನೀಡಿದರೆ, ಹೆಚ್ಚು ಪುನರಾವರ್ತನೆಯೊಂದಿಗೆ ಅಕ್ಷರದ ನಿಘಂಟನ್ನು ಹಿಂದಿರುಗಿಸಿ ಮತ್ತು ಅನುಗುಣವಾದ ಎಣಿಕೆಯನ್ನು ಹೊಂದಿರುತ್ತದೆ. ಹಲವಾರು ಅಕ್ಷರಗಳು ಒಂದೇ ರೀತಿಯ ಸಂಭವವನ್ನು ಹೊಂದಿದ್ದರೆ, ಎಲ್ಲವನ್ನೂ ಹಿಂತಿರುಗಿಸಿ. ಉದಾಹರಣೆಃ ಹಿಸ್ಟೋಗ್ರಾಮ್ (('ಎ ಬಿ ಸಿ') == {'ಎ': 1, 'ಬಿ': 1, 'ಸಿ': 1} ಹಿಸ್ಟೋಗ್ರಾಮ್ (('ಎ ಬಿ ಬಿ ಬಿ ಎ') == {'ಎ': 2, 'ಬಿ': 2} ಹಿಸ್ಟೋಗ್ರಾಮ್ (('ಎ ಬಿ ಸಿ ಎ ಬಿ') == {'ಎ': 2, 'ಬಿ': 2} ಹಿಸ್ಟೋಗ್ರಾಮ್ (('ಬಿ ಬಿ ಬಿ ಎ') == {'ಬಿ 4}': ಹಿಸ್ಟೋಗ್ರಾಮ್ ' ((') == {} \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"ಕಾರ್ಯ ನಮಗೆ ಎರಡು ಸ್ಟ್ರಿಂಗ್ ಗಳು s ಮತ್ತು c ನೀಡಲಾಗಿದೆ, ನೀವು s ನಲ್ಲಿನ ಎಲ್ಲಾ ಅಕ್ಷರಗಳನ್ನು ಅಳಿಸಬೇಕು ಅದು c ನಲ್ಲಿನ ಯಾವುದೇ ಅಕ್ಷರಕ್ಕೆ ಸಮನಾಗಿರುತ್ತದೆ ನಂತರ ಫಲಿತಾಂಶದ ಸ್ಟ್ರಿಂಗ್ ಪಾಲಿಂಡ್ರೋಮ್ ಆಗಿದೆಯೇ ಎಂದು ಪರಿಶೀಲಿಸಿ. ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಪಾಲಿಂಡ್ರೋಮ್ ಎಂದು ಕರೆಯಲಾಗುತ್ತದೆ ಅದು ಮುಂದಕ್ಕೆ ಮತ್ತು ಹಿಂದುಳಿದಂತೆಯೇ ಓದುತ್ತದೆ. ನೀವು ಫಲಿತಾಂಶದ ಸ್ಟ್ರಿಂಗ್ ಮತ್ತು True/False ಅನ್ನು ಹೊಂದಿರುವ ಟುಪಲ್ ಅನ್ನು ಪರಿಶೀಲನೆಗಾಗಿ ಹಿಂತಿರುಗಿಸಬೇಕು. ಉದಾಹರಣೆಗಾಗಿ s = \"abcde\", c = \"ae\", ಫಲಿತಾಂಶವು ('bcd', False) ಆಗಿರಬೇಕು s = \"abcdef\", c = \"b\" ಫಲಿತಾಂಶವು ('acdef', False) ಆಗಿರಬೇಕು s = \"abcdedcba\", c = \"ab\", ಫಲಿತಾಂಶವು ('cdedc', True) ಆಗಿರಬೇಕು\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"ಒಂದು ಸ್ಟ್ರಿಂಗ್ ನ ಪಟ್ಟಿಯನ್ನು ನೀಡಿದರೆ, ಅಲ್ಲಿ ಪ್ರತಿ ಸ್ಟ್ರಿಂಗ್ ಕೇವಲ ಅಂಕೆಗಳನ್ನು ಮಾತ್ರ ಒಳಗೊಂಡಿರುತ್ತದೆ, ಒಂದು ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. ಔಟ್ಪುಟ್ನ ಪ್ರತಿ ಅಂಶ i \"ಇನ್ಪುಟ್ನ ಸ್ಟ್ರಿಂಗ್ i ನಲ್ಲಿನ ಬೆಸ ಅಂಶಗಳ ಸಂಖ್ಯೆ. \" ಅಲ್ಲಿ ಎಲ್ಲಾ i ಗಳನ್ನು ಇನ್ಪುಟ್ನ i'th ಸ್ಟ್ರಿಂಗ್ನಲ್ಲಿನ ಬೆಸ ಅಂಕೆಗಳ ಸಂಖ್ಯೆಯಿಂದ ಬದಲಾಯಿಸಬೇಕು. >>> odd_count['1234567']) [\"4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4n ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 4 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ 1 ನ\"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"ಪೂರ್ಣಾಂಕಗಳ ಒಂದು ಶ್ರೇಣಿಯನ್ನು ನೀಡಿದರೆ, ಯಾವುದೇ ಖಾಲಿ ಅಲ್ಲದ ಉಪ-ಶ್ರೇಣಿಯ ಕನಿಷ್ಠ ಮೊತ್ತವನ್ನು ಕಂಡುಹಿಡಿಯಿರಿ. ಉದಾಹರಣೆ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"ನಿಮಗೆ ಒಂದು ಆಯತಾಕಾರದ ಗ್ರಿಡ್ ನೀಡಲಾಗಿದೆ. ಪ್ರತಿ ಸಾಲು ಒಂದು ಬಾವಿಯನ್ನು ಪ್ರತಿನಿಧಿಸುತ್ತದೆ, ಮತ್ತು ಸಾಲಿನ ಪ್ರತಿ 1 ಒಂದು ಏಕೈಕ ನೀರಿನ ಘಟಕವನ್ನು ಪ್ರತಿನಿಧಿಸುತ್ತದೆ. ಪ್ರತಿ ಬಾವಿಗೆ ಅದರ ನೀರನ್ನು ಹೊರತೆಗೆಯಲು ಬಳಸಬಹುದಾದ ಅನುಗುಣವಾದ ಬಕೆಟ್ ಇದೆ, ಮತ್ತು ಎಲ್ಲಾ ಬಕೆಟ್ಗಳು ಒಂದೇ ಸಾಮರ್ಥ್ಯವನ್ನು ಹೊಂದಿವೆ. ನಿಮ್ಮ ಕಾರ್ಯವು ಬಕೆಟ್ಗಳನ್ನು ಬಳಸಿಕೊಂಡು ಬಕೆಟ್ಗಳನ್ನು ಖಾಲಿ ಮಾಡುವುದು. ಬಕೆಟ್ಗಳನ್ನು ಕಡಿಮೆ ಮಾಡಲು ನೀವು ಎಷ್ಟು ಬಾರಿ ಬೇಕಾದರೂ ಔಟ್ಪುಟ್ ಮಾಡಿ. ಉದಾಹರಣೆ 1: ಇನ್ಪುಟ್ಃ ಗ್ರಿಡ್ಃ [[0,0,1,0], [0,1,0,0], [1,1,1,1]] ಬಕೆಟ್_ಸಾಮರ್ಥ್ಯಃ 1 ಔಟ್ಪುಟ್ಃ 6 ಉದಾಹರಣೆ 2: ಇನ್ಪುಟ್ಃ ಗ್ರಿಡ್ಃ [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1,1]] ಬಕೆಟ್_ಸಾಮರ್ಥ್ಯಃ 2 ಔಟ್ಪುಟ್ಃ 5 ಉದಾಹರಣೆ 3: ಇನ್ಪುಟ್ಃ [[:0,0,0], [0,0,0]] ಬಕೆಟ್_ಸಾಮರ್ಥ್ಯಃ 5 ಔಟ್ಪುಟ್ಪುಟ್ ಬಕೆಟ್ಃ 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * * * * 1 * * * * * 1 * * * * * * * 1 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"ಈ ಕಟಾದಲ್ಲಿ, ನೀವು ಒಂದು ಶ್ರೇಣಿಯನ್ನು ಋಣಾತ್ಮಕವಲ್ಲದ ಪೂರ್ಣಾಂಕಗಳನ್ನು ಅವುಗಳ ಬೈನರಿ ಪ್ರಾತಿನಿಧ್ಯದಲ್ಲಿ ಏರುತ್ತಿರುವ ಕ್ರಮದಲ್ಲಿ ಸಂಖ್ಯೆಯ ಪ್ರಕಾರ ವಿಂಗಡಿಸಬೇಕು. ಒಂದೇ ರೀತಿಯ ಸಂಖ್ಯೆಯವರಿಗೆ, ದಶಮಾಂಶ ಮೌಲ್ಯವನ್ನು ಆಧರಿಸಿ ವಿಂಗಡಿಸಿ. ಇದನ್ನು ಈ ರೀತಿ ಕಾರ್ಯಗತಗೊಳಿಸಬೇಕುಃ >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"ಒಂದು ಸ್ಟ್ರಿಂಗ್ s ಮತ್ತು ಒಂದು ನೈಸರ್ಗಿಕ ಸಂಖ್ಯೆಯ n ಅನ್ನು ನೀಡಿದರೆ, ಈ ಪದಗಳು ಸ್ಟ್ರಿಂಗ್ s ನಲ್ಲಿ ಕಾಣಿಸಿಕೊಳ್ಳಲು ಸಲುವಾಗಿ, ಸ್ಟ್ರಿಂಗ್ s ನಿಂದ ನಿಖರವಾಗಿ n ವ್ಯಂಜನಗಳನ್ನು ಹೊಂದಿರುವ ಎಲ್ಲಾ ಪದಗಳ ಪಟ್ಟಿಯನ್ನು ಹಿಂದಿರುಗಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಕಾರ್ಯಗತಗೊಳಿಸಲು ನಿಮಗೆ ಸೂಚಿಸಲಾಗಿದೆ. ಸ್ಟ್ರಿಂಗ್ s ಖಾಲಿಯಾಗಿದ್ದರೆ, ಕಾರ್ಯವು ಖಾಲಿ ಪಟ್ಟಿಯನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು. ಗಮನಿಸಿಃ ಇನ್ಪುಟ್ ಸ್ಟ್ರಿಂಗ್ನಲ್ಲಿ ಅಕ್ಷರಗಳು ಮತ್ತು ಅಂತರಗಳು ಮಾತ್ರ ಇವೆ ಎಂದು ನೀವು ಭಾವಿಸಬಹುದು. ಉದಾಹರಣೆಗಳುಃ select_words \"ಮೇರಿ ಸ್ವಲ್ಪ ಕುರಿಮರಿ ಹೊಂದಿತ್ತು\", 4) ==> [\"little\"] select_words \"ಮೇರಿ ಸ್ವಲ್ಪ ಕುರಿಮರಿ ಹೊಂದಿತ್ತು\", 3) ==> [\"ಮೇರಿ\", \"ಕುರಿಮರಿ\"] select_words \"simple white space\", 2) ==> [] select_words \"ಹಲೋ ವರ್ಲ್ಡ್\", 4) ==> [\"world\"] select_words \"ಅಂಕಲ್ ಸ್ಯಾಮ್\", 3) ==> [\"Uncle\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"ನಿಮಗೆ ಒಂದು ಪದವನ್ನು ನೀಡಲಾಗಿದೆ. ಪದದ ಬಲ ಭಾಗದಿಂದ ಎರಡು ವ್ಯಂಜನಗಳ ನಡುವೆ ಇರುವ ಹತ್ತಿರದ ಸ್ವರವನ್ನು ಕಂಡುಹಿಡಿಯುವುದು ನಿಮ್ಮ ಕಾರ್ಯವಾಗಿದೆ (ಪ್ರಮಾಣ ಸಂವೇದಕ). ಆರಂಭ ಮತ್ತು ಅಂತ್ಯದ ಸ್ವರಗಳು ಎಣಿಸುವುದಿಲ್ಲ. ನೀವು ಯಾವುದೇ ಸ್ವರವನ್ನು ಕಂಡುಕೊಂಡಿಲ್ಲದಿದ್ದರೆ ಮೇಲಿನ ಸ್ಥಿತಿಯನ್ನು ಪೂರೈಸದಿದ್ದರೆ ಖಾಲಿ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂತಿರುಗಿ. ಕೊಟ್ಟಿರುವ ಸ್ಟ್ರಿಂಗ್ ಇಂಗ್ಲಿಷ್ ಅಕ್ಷರವನ್ನು ಮಾತ್ರ ಹೊಂದಿದೆಯೆಂದು ನೀವು ಭಾವಿಸಬಹುದು. ಉದಾಹರಣೆಃ get_closest_vowel ((\"yogurt\") ==> \"u\" get_closest_vowel ((\"F\") ==> \"U\" get_closest_vowel ((\"quick\") ==> \"\" get_closest_vowel\" ((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''ನಿಮಗೆ ಎರಡು ಸ್ಟ್ರಿಂಗ್ಗಳ ಪಟ್ಟಿ ನೀಡಲಾಗಿದೆ, ಎರಡೂ ಸ್ಟ್ರಿಂಗ್ಗಳು ತೆರೆದ ಆವರಣ '(' ಅಥವಾ ಮುಚ್ಚಿದ ಆವರಣ ') ' ಅನ್ನು ಮಾತ್ರ ಒಳಗೊಂಡಿರುತ್ತವೆ. ನಿಮ್ಮ ಕೆಲಸವು ಎರಡು ಸ್ಟ್ರಿಂಗ್ಗಳನ್ನು ಕೆಲವು ಕ್ರಮದಲ್ಲಿ ಜೋಡಿಸಲು ಸಾಧ್ಯವಿದೆಯೇ ಎಂದು ಪರಿಶೀಲಿಸುವುದು, ಇದರಿಂದಾಗಿ ಸ್ಟ್ರಿಂಗ್ ಉತ್ತಮವಾಗಿರುತ್ತದೆ. ಎಸ್ನಲ್ಲಿನ ಎಲ್ಲಾ ಆವರಣಗಳು ಸಮತೋಲಿತವಾಗಿದ್ದರೆ ಮತ್ತು ಮಾತ್ರ ಸ್ಟ್ರಿಂಗ್ ಎಸ್ ಅನ್ನು ಉತ್ತಮವೆಂದು ಪರಿಗಣಿಸಲಾಗುತ್ತದೆ. ಉದಾಹರಣೆಗೆಃ ಸ್ಟ್ರಿಂಗ್ '((()) 'ಉತ್ತಮವಾಗಿದೆ, ಆದರೆ ಸ್ಟ್ರಿಂಗ್ '()) ' ಅಲ್ಲ. ಉತ್ತಮ ಸ್ಟ್ರಿಂಗ್ ಮಾಡಲು ಒಂದು ಮಾರ್ಗವಿದ್ದರೆ 'ಹೌದು' ಅನ್ನು ಹಿಂತಿರುಗಿ, ಮತ್ತು ಇಲ್ಲದಿದ್ದರೆ 'ಇಲ್ಲ' ಅನ್ನು ಹಿಂತಿರುಗಿ. ಉದಾಹರಣೆಗಳುಃ match_parens[('() ', ') ']) == 'ಹೌದು' match_parens[(') ', ') ']) == 'ಇಲ್ಲ' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"ಒಂದು ಪೂರ್ಣಾಂಕಗಳ ಒಂದು ಶ್ರೇಣಿಯನ್ನು ಮತ್ತು ಒಂದು ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ k ಅನ್ನು ನೀಡಿದರೆ, arr ನಲ್ಲಿನ ಗರಿಷ್ಠ k ಸಂಖ್ಯೆಗಳೊಂದಿಗೆ ಉದ್ದ k ನ ವಿಂಗಡಿಸಲಾದ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಉದಾಹರಣೆ 1: ಇನ್ಪುಟ್: arr = [-3, -4, 5], k = 3 ಔಟ್ಪುಟ್ಃ [-4, -3, 5] ಉದಾಹರಣೆ 2: ಇನ್ಪುಟ್: arr = [4, -4, 4], k = 2 ಔಟ್ಪುಟ್ಃ [4, 4] ಉದಾಹರಣೆ 3: ಇನ್ಪುಟ್: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 ಔಟ್ಪುಟ್ಃ [2] ಗಮನಿಸಿಃ 1. ರಚನೆಯ ಉದ್ದವು [1, 1000] ವ್ಯಾಪ್ತಿಯಲ್ಲಿರುತ್ತದೆ. 2. ರಚನೆಯ ಅಂಶಗಳು [-1000, 1000] ವ್ಯಾಪ್ತಿಯಲ್ಲಿರುತ್ತವೆ.\"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"ಪೂರ್ಣಾಂಕಗಳ ಖಾಲಿ ಅಲ್ಲದ ಪಟ್ಟಿಯನ್ನು ನೀಡಿದರೆ, ಸಮ ಸ್ಥಾನದಲ್ಲಿರುವ ಎಲ್ಲಾ ಬೆಸ ಅಂಶಗಳ ಮೊತ್ತವನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಉದಾಹರಣೆ ಪರಿಹಾರಗಳು (([5, 8, 7, 1]) ==> 12 ಪರಿಹಾರ (([3, 3, 3, 3, 3]) ==> 9 ಪರಿಹಾರ (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"ಪೂರ್ಣಾಂಕಗಳ ಒಂದು ಖಾಲಿ ಅಲ್ಲದ ಶ್ರೇಣಿಯನ್ನು ನೀಡಲಾಗಿದೆ arr ಮತ್ತು ಒಂದು ಪೂರ್ಣಾಂಕ k, arr ನ ಮೊದಲ k ಅಂಶಗಳಿಂದ ಗರಿಷ್ಠ ಎರಡು ಅಂಕೆಗಳನ್ನು ಹೊಂದಿರುವ ಅಂಶಗಳ ಮೊತ್ತವನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಉದಾಹರಣೆಃ ಇನ್ಪುಟ್ಃ arr = [111,21,3,4000,5,6,7,8,9], k = 4 ಔಟ್ಪುಟ್ಃ 24 # 21 + 3 ನಿರ್ಬಂಧಗಳ ಮೊತ್ತಃ 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"ಒಂದು ಸಕಾರಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ನೀಡಿದರೆ, ಕೋಲಾಟ್ಜ್ ಅನುಕ್ರಮದಲ್ಲಿ ಬೆಸ ಸಂಖ್ಯೆಗಳನ್ನು ಹೊಂದಿರುವ ವಿಂಗಡಿಸಲಾದ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಕೋಲಾಟ್ಜ್ ಊಹೆ ಗಣಿತದಲ್ಲಿ ಒಂದು ಊಹೆಯಾಗಿದ್ದು, ಇದು ಈ ಕೆಳಗಿನಂತೆ ವ್ಯಾಖ್ಯಾನಿಸಲಾದ ಅನುಕ್ರಮಕ್ಕೆ ಸಂಬಂಧಿಸಿದೆಃ ಯಾವುದೇ ಸಕಾರಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ನೊಂದಿಗೆ ಪ್ರಾರಂಭಿಸಿ. ನಂತರ ಪ್ರತಿ ಪದವನ್ನು ಹಿಂದಿನ ಪದದಿಂದ ಈ ಕೆಳಗಿನಂತೆ ಪಡೆಯಲಾಗುತ್ತದೆಃ ಹಿಂದಿನ ಪದವು ಸಮವಾಗಿದ್ದರೆ, ಮುಂದಿನ ಪದವು ಹಿಂದಿನ ಪದದ ಅರ್ಧದಷ್ಟಿದೆ. ಹಿಂದಿನ ಪದವು ಬೆಸವಾಗಿದ್ದರೆ, ಮುಂದಿನ ಪದವು ಹಿಂದಿನ ಪದದ 3 ಪಟ್ಟು ಮತ್ತು 1 ಆಗಿರುತ್ತದೆ. ಈ ಊಹೆಯು n ನ ಯಾವ ಮೌಲ್ಯವನ್ನು ಹೊಂದಿದ್ದರೂ, ಅನುಕ್ರಮವು ಯಾವಾಗಲೂ 1 ಅನ್ನು ತಲುಪುತ್ತದೆ. ಗಮನಿಸಿಃ 1. ಕೋಲಾಟ್ಜ್ ((1) [1] ಆಗಿದೆ. 2. ಹಿಂದಿರುಗಿದ ಪಟ್ಟಿಯನ್ನು ಹೆಚ್ಚುತ್ತಿರುವ ಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸಲಾಗಿದೆ. ಉದಾಹರಣೆಗೆಃ get_odd_collatz ((5) [1, 5] ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ. 5 ರ ಕೋಲಾಟ್ಜ್ ಅನುಕ್ರಮವು [5, 8, 16, 4, 2, 1], ಆದ್ದರಿಂದ ಬೆಸ ಸಂಖ್ಯೆಗಳು 1, ಮತ್ತು 5 ಮಾತ್ರ.\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"ನೀವು ಒಂದು ನಿರ್ದಿಷ್ಟ ದಿನಾಂಕದ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಮೌಲ್ಯೀಕರಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಬೇಕು ಮತ್ತು ದಿನಾಂಕವು ಮಾನ್ಯವಾಗಿದ್ದರೆ ಅದು True ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ ಇಲ್ಲದಿದ್ದರೆ False. ಕೆಳಗಿನ ಎಲ್ಲಾ ನಿಯಮಗಳನ್ನು ಪೂರೈಸಿದರೆ ದಿನಾಂಕವು ಮಾನ್ಯವಾಗಿರುತ್ತದೆಃ 1. ದಿನಾಂಕದ ಸ್ಟ್ರಿಂಗ್ ಖಾಲಿಯಾಗಿಲ್ಲ. 2. ತಿಂಗಳುಗಳಿಗೆ ದಿನಾಂಕದ ಸಂಖ್ಯೆ 1 ಕ್ಕಿಂತ ಕಡಿಮೆಯಿಲ್ಲ ಅಥವಾ 31 ದಿನಗಳಿಗಿಂತ ಹೆಚ್ಚಿಲ್ಲ. ಮತ್ತು ತಿಂಗಳುಗಳಿಗೆ ದಿನಾಂಕದ ಸಂಖ್ಯೆ 1 ಕ್ಕಿಂತ ಕಡಿಮೆಯಿಲ್ಲ ಅಥವಾ 30 ದಿನಗಳಿಗಿಂತ ಹೆಚ್ಚಿಲ್ಲ. ಮತ್ತು ತಿಂಗಳುಗಳಿಗೆ ದಿನಾಂಕದ ಸಂಖ್ಯೆ 1 ಕ್ಕಿಂತ ಕಡಿಮೆಯಿಲ್ಲ ಅಥವಾ 29 ಕ್ಕಿಂತ ಹೆಚ್ಚಿಲ್ಲ. 2. ತಿಂಗಳುಗಳು 1 ಕ್ಕಿಂತ ಕಡಿಮೆಯಿಲ್ಲ ಅಥವಾ 12. ಗಿಂತ ಹೆಚ್ಚಿಲ್ಲ. 4. ದಿನಾಂಕವು ಈ ಸ್ವರೂಪದಲ್ಲಿರಬೇಕುಃ mm-dd-yyyy ಉದಾಹರಣೆಗೆಃ valid_date (('03-11-2000') => valid_date (('15-01-2012') => false valid_date (('04-02040') => false_date (('06-04-2020') => true_date (('06-04/2020') => false\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''ಪದಗಳ ಒಂದು ಸ್ಟ್ರಿಂಗ್ ನೀಡಲಾಗಿದೆ, ಬಿಳಿ ಜಾಗದಲ್ಲಿ ವಿಭಜನೆ ಪದಗಳ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿ, ಪಠ್ಯದಲ್ಲಿ ಯಾವುದೇ ಬಿಳಿ ಜಾಗಗಳು ಅಸ್ತಿತ್ವದಲ್ಲಿಲ್ಲದಿದ್ದರೆ ನೀವು ಅಕ್ಷರಗಳಲ್ಲಿ ಕಾಮಾಗಳಲ್ಲಿ ವಿಭಜಿಸಬೇಕು ',' ಯಾವುದೇ ಅಕ್ಷರಗಳು ಅಸ್ತಿತ್ವದಲ್ಲಿಲ್ಲದಿದ್ದರೆ ನೀವು ವರ್ಣಮಾಲೆಯಲ್ಲಿ ಬೆಸ ಕ್ರಮದಲ್ಲಿ ಸಣ್ಣ ಅಕ್ಷರಗಳ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು, ord (('a') = 0, ord (('b') = 1, . . . ord (('z') = 25 ಉದಾಹರಣೆಗಳು ವಿಭಜನೆ_ಪದಗಳು ((\"ಹಲೋ ವರ್ಲ್ಡ್! \") â -> [\"ಹಲೋ\", \"ವರ್ಲ್ಡ್! \"] ವಿಭಜನೆ_ಪದಗಳು ((\"ಹಲೋ, ವರ್ಲ್ಡ್! \") â -> [\"ಹಲೋ\", \"ವರ್ಲ್ಡ್! \"] ವಿಭಜನೆ_ಪದಗಳು ((\"abcdef\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಿದರೆ, ಅವು ಏರುತ್ತಿರುವ ಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸಲ್ಪಟ್ಟಿವೆಯೇ ಇಲ್ಲವೇ ಎಂದು ಹಿಂತಿರುಗಿ. ಪಟ್ಟಿಯಲ್ಲಿ ಒಂದೇ ಸಂಖ್ಯೆಯ 1 ಕ್ಕಿಂತ ಹೆಚ್ಚು ನಕಲು ಇದ್ದರೆ, ಸುಳ್ಳು ಹಿಂತಿರುಗಿ. ಯಾವುದೇ ಋಣಾತ್ಮಕ ಸಂಖ್ಯೆಗಳನ್ನು ಮತ್ತು ಪೂರ್ಣಾಂಕಗಳನ್ನು ಮಾತ್ರ ಊಹಿಸಿ. ಉದಾಹರಣೆಗಳು is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 3, 2, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 3, 4 -> False ])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"ನಿಮಗೆ ಎರಡು ಮಧ್ಯಂತರಗಳನ್ನು ನೀಡಲಾಗಿದೆ, ಅಲ್ಲಿ ಪ್ರತಿ ಮಧ್ಯಂತರವು ಒಂದು ಜೋಡಿ ಪೂರ್ಣಾಂಕಗಳು. ಉದಾಹರಣೆಗೆ, ಮಧ್ಯಂತರ = (ಆರಂಭ, ಅಂತ್ಯ) = (1, 2). ನೀಡಲಾದ ಮಧ್ಯಂತರಗಳು ಮುಚ್ಚಲ್ಪಟ್ಟಿವೆ ಅಂದರೆ ಮಧ್ಯಂತರ (ಆರಂಭ, ಅಂತ್ಯ) ಪ್ರಾರಂಭ ಮತ್ತು ಅಂತ್ಯ ಎರಡನ್ನೂ ಒಳಗೊಂಡಿದೆ. ಪ್ರತಿ ನಿರ್ದಿಷ್ಟ ಮಧ್ಯಂತರಕ್ಕಾಗಿ, ಅದರ ಪ್ರಾರಂಭವು ಅದರ ಅಂತ್ಯಕ್ಕಿಂತ ಕಡಿಮೆಯಿರುತ್ತದೆ ಅಥವಾ ಸಮನಾಗಿರುತ್ತದೆ ಎಂದು ಭಾವಿಸಲಾಗಿದೆ. ಈ ಎರಡು ಮಧ್ಯಂತರಗಳ ಛೇದನದ ಉದ್ದವು ಒಂದು ಅವಿಭಾಜ್ಯ ಸಂಖ್ಯೆಯಾಗಿದೆಯೇ ಎಂದು ನಿಮ್ಮ ಕಾರ್ಯವು ನಿರ್ಧರಿಸುವುದು. ಉದಾಹರಣೆಗೆ, ಮಧ್ಯಂತರಗಳ ಛೇದನ (1, 3), (2, 4) (2, 3) ಆಗಿದೆ, ಅದರ ಉದ್ದವು 1 ಆಗಿದೆ, ಇದು ಅವಿಭಾಜ್ಯ ಸಂಖ್ಯೆಯಲ್ಲ. ಛೇದನದ ಉದ್ದವು ಅವಿಭಾಜ್ಯ ಸಂಖ್ಯೆಯಾಗಿದ್ದರೆ, \"ಹೌದು\" ಅನ್ನು ಹಿಂತಿರುಗಿ, ಇಲ್ಲದಿದ್ದರೆ, \"ಇಲ್ಲ\" ಅನ್ನು ಹಿಂತಿರುಗಿ. ಎರಡು ಮಧ್ಯಂತರಗಳು ಛೇದಿಸದಿದ್ದರೆ, \"ಇಲ್ಲ\" ಅನ್ನು ಹಿಂತಿರುಗಿ. [ಇನ್ಪುಟ್ / ಔಟ್ಪುಟ್] ಮಾದರಿಗಳುಃ ಛೇದನ (((1, 2), (2, 3) ==> \"ಅಡ್ಡ-1, ((1), 4) \"ಅಡ್ಡ-\", === \"NO\", 5-1, ((5, - \"ಇದು\" - \"ಇದು\" - \"ಇದು\"\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"ನಿಮಗೆ ಪೂರ್ಣಾಂಕಗಳ ಒಂದು ಶ್ರೇಣಿಯನ್ನು ನೀಡಲಾಗಿದೆ ಮತ್ತು ನೀವು 1, -1 ಅಥವಾ 0 ರ ಮೂಲಕ ಪ್ರತಿನಿಧಿಸುವ ಶ್ರೇಣಿಯಲ್ಲಿನ ಪ್ರತಿ ಸಂಖ್ಯೆಯ ಎಲ್ಲಾ ಚಿಹ್ನೆಗಳ ಉತ್ಪನ್ನದಿಂದ ಗುಣಿಸಿದಾಗ ಪೂರ್ಣಾಂಕಗಳ ಪ್ರಮಾಣಗಳ ಮೊತ್ತವನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕಾಗಿದೆ. ಗಮನಿಸಿಃ ಖಾಲಿ ಆರ್ಆರ್ಗಾಗಿ ಯಾವುದನ್ನೂ ಹಿಂತಿರುಗಿಸಬೇಡಿ. ಉದಾಹರಣೆಃ >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None \"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"N ಸಾಲುಗಳು ಮತ್ತು N ಕಾಲಮ್ಗಳನ್ನು (N >= 2) ಮತ್ತು k ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕವನ್ನು ಹೊಂದಿರುವ ಗ್ರಿಡ್ ಅನ್ನು ನೀಡಿದರೆ, ಗ್ರಿಡ್ನ ಪ್ರತಿಯೊಂದು ಕೋಶವು ಒಂದು ಮೌಲ್ಯವನ್ನು ಹೊಂದಿರುತ್ತದೆ. [1, N * N] ವ್ಯಾಪ್ತಿಯಲ್ಲಿನ ಪ್ರತಿ ಪೂರ್ಣಾಂಕವು ಗ್ರಿಡ್ನ ಕೋಶಗಳಲ್ಲಿ ನಿಖರವಾಗಿ ಒಮ್ಮೆ ಕಾಣಿಸಿಕೊಳ್ಳುತ್ತದೆ. ನೀವು ಗ್ರಿಡ್ನಲ್ಲಿ k ಉದ್ದದ ಕನಿಷ್ಠ ಮಾರ್ಗವನ್ನು ಕಂಡುಹಿಡಿಯಬೇಕು. ನೀವು ಯಾವುದೇ ಕೋಶದಿಂದ ಪ್ರಾರಂಭಿಸಬಹುದು, ಮತ್ತು ಪ್ರತಿ ಹಂತದಲ್ಲಿ ನೀವು ಯಾವುದೇ ನೆರೆಯ ಕೋಶಗಳಿಗೆ ಹೋಗಬಹುದು, ಅಂದರೆ, ನೀವು ಪ್ರಸ್ತುತ ಕೋಶದೊಂದಿಗೆ ಅಂಚನ್ನು ಹಂಚಿಕೊಳ್ಳುವ ಕೋಶಗಳಿಗೆ ಹೋಗಬಹುದು. ದಯವಿಟ್ಟು ಗಮನಿಸಿ k ಉದ್ದದ ಮಾರ್ಗವು k ಕೋಶಗಳನ್ನು ನಿಖರವಾಗಿ ಭೇಟಿ ಮಾಡುವುದು ಎಂದರ್ಥ (ಅಗತ್ಯವಾಗಿ ವಿಭಿನ್ನವಾಗಿಲ್ಲ). ನೀವು ಗ್ರಿಡ್ನಿಂದ ಹೊರಬರಲು ಸಾಧ್ಯವಿಲ್ಲ. A ಮತ್ತು B ಮೂಲಕ ಹೋಗುವ ಕೋಶಗಳ ಮೇಲೆ ಮೌಲ್ಯಗಳ ಕ್ರಮಬದ್ಧ ಪಟ್ಟಿಗಳನ್ನು ಮಾಡಿದ ನಂತರ (ಅವುಗಳನ್ನು l_st ಮತ್ತು l_stA ಎಂದು ಕರೆಯೋಣ), l_stA ಗ್ರಂಥೀಯವಾಗಿ l_stA ಗಿಂತ ಕಡಿಮೆಯಿರುತ್ತದೆ, ಅಂದರೆ, ಒಂದು ಪೂರ್ಣಾಂಕದ ಮೂಲಕ ಹೋಗಬಹುದು. ನೀವು ಯಾವುದೇ ಗ್ರಿಡ್ನಲ್ಲಿರುವ ಯಾವುದೇ ಮೌಲ್ಯಗಳ ಮೂಲಕ ಹೋಗಬಹುದು, ಅಂದರೆ, ನೀವು ನಿಖರವಾಗಿ k ಕೋಶಗಳನ್ನು ಭೇಟಿ ಮಾಡಬಹುದು. ನೀವು ಗ್ರಿಡ್ನಿಂದ ಹೊರಬರಲು ಸಾಧ್ಯವಿಲ್ಲ. ಒಂದು ಮಾರ್ಗ A (k ಉದ್ದ) ಅನ್ನು ಮಾರ್ಗ B (k ಉದ್ದದ) ಗಿಂತ ಕಡಿಮೆ ಎಂದು ಪರಿಗಣಿಸಲಾಗುತ್ತದೆ (ಕೆ) ಒಂದು ಮಾರ್ಗ B (ನ ಮೂಲಕ B (ನ) ಗಿಂತ) (ನಂತರವಾಗಿರುತ್ತದೆ) (ನಂತರದಲ್ಲಿನ ಮೂಲಕ ಹೋಗುವ ಕೋಶಗಳ ಕ್ರಮದಲ್ಲಿನ ಪ್ರತಿಯೊಂದು ಕೋಶದ ಮೇಲೆ ಮೌಲ್ಯಗಳ ಕ್ರಮಬದ್ಧ ಪಟ್ಟಿಗಳನ್ನು ಕ್ರಮಬದ್ಧವಾಗಿ) ಕ್ರಮಬದ್ಧವಾಗಿ, A ಮತ್ತು B ಮೂಲಕ ಹೋಗುವ ಮೌಲ್ಯಗಳನ್ನು ಕ್ರಮಬದ್ಧವಾಗಿ, A ಮತ್ತು B ಮೂಲಕ ಹೋಗಲುವಿರುವ ಮೌಲ್ಯಗಳನ್ನು ಪಟ್ಟಿರಿಸಿದ ಮೌಲ್ಯಗಳನ್ನು ಪಟ್ಟಿರಿಸುವುದು, ಮತ್ತು B ಮೂಲಕ, ಮತ್ತು A ಮತ್ತು B ಮೂಲಕ, ಮತ್ತು A ಮೂಲಕ, ಮತ್ತು A ಮೂಲಕ, ಮತ್ತು A ಮೂಲಕ, ಮತ್ತು A ಮೂಲಕ, ಮತ್ತು A ಮೂಲಕ, ಮತ್ತು A ಮೂಲಕ, ಮತ್ತು A ಮೂಲಕ, ಮತ್ತು A ಮೂಲಕ, ಮತ್ತು A ಮೂಲಕ, ಮತ್ತು A ಮೂಲಕ, ಮತ್ತು A ಮೂಲಕ, ಮತ್ತು A, ಮತ್ತು A, ಮತ್ತು A, ಮತ್ತು A, ಮತ್ತು A, ಮತ್ತು A, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು, ಮತ್ತು,\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"ಪ್ರತಿಯೊಬ್ಬರೂ ಫಿಬೊನಾಕಿ ಅನುಕ್ರಮವನ್ನು ತಿಳಿದಿದ್ದಾರೆ, ಇದನ್ನು ಗಣಿತಜ್ಞರು ಕಳೆದ ಒಂದೆರಡು ಶತಮಾನಗಳಲ್ಲಿ ಆಳವಾಗಿ ಅಧ್ಯಯನ ಮಾಡಿದ್ದಾರೆ. ಆದಾಗ್ಯೂ, ಜನರಿಗೆ ತಿಳಿದಿಲ್ಲದಿರುವುದು ಟ್ರಿಬೊನಾಕಿ ಅನುಕ್ರಮವಾಗಿದೆ. ಟ್ರಿಬೊನಾಕಿ ಅನುಕ್ರಮವನ್ನು ಪುನರಾವರ್ತನೆಯಿಂದ ವ್ಯಾಖ್ಯಾನಿಸಲಾಗಿದೆಃ tri(1) = 3 tri(n) = 1 + n / 2, n ಸಮವಾಗಿದ್ದರೆ. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), n ಬೆಸವಾಗಿದ್ದರೆ. ಉದಾಹರಣೆಗೆಃ tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 ನಿಮಗೆ ಋಣಾತ್ಮಕವಲ್ಲದ ಪೂರ್ಣಾಂಕಿ ಸಂಖ್ಯೆ n ನೀಡಲಾಗಿದೆ, ನೀವು ಟ್ರಿಬೊನಾಕಿ ಅನುಕ್ರಮದ ಮೊದಲ n + 1 ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. ಉದಾಹರಣೆಗಳುಃ tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"ಒಂದು ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ನೀಡಿದರೆ, ಬೆಸ ಅಂಕೆಗಳ ಉತ್ಪನ್ನವನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಎಲ್ಲಾ ಅಂಕೆಗಳು ಸಮವಾಗಿದ್ದರೆ 0 ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಉದಾಹರಣೆಗೆ: ಅಂಕೆಗಳು ((1) == 1 ಅಂಕೆಗಳು ((4) == 0 ಅಂಕೆಗಳು ((235) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''ಕೇವಲ ಚದರ ಆವರಣಗಳನ್ನು ಹೊಂದಿರುವ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಇನ್ಪುಟ್ ಆಗಿ ತೆಗೆದುಕೊಳ್ಳುವ ಒಂದು ಕಾರ್ಯವನ್ನು ರಚಿಸಿ. ಆವರಣದಲ್ಲಿ ಕನಿಷ್ಠ ಒಂದು ಆವರಣವನ್ನು ಗೂಡುಕಟ್ಟಿದ ಆವರಣಗಳ ಮಾನ್ಯ ಉಪಕ್ರಮವಿದ್ದರೆ ಮಾತ್ರ ಕಾರ್ಯವು True ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]]]'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"ನಿಮಗೆ ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿ ನೀಡಲಾಗಿದೆ. ನೀವು ನೀಡಲಾದ ಪಟ್ಟಿಯಲ್ಲಿರುವ ಸಂಖ್ಯೆಗಳ ಚೌಕದ ಮೊತ್ತವನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು, ಪಟ್ಟಿಯಲ್ಲಿರುವ ಪ್ರತಿಯೊಂದು ಅಂಶವನ್ನು ಮೇಲಿನ int ((ಸೀಲಿಂಗ್) ಗೆ ಮೊದಲು ಸುತ್ತಬೇಕು. ಉದಾಹರಣೆಗಳು: lst = [1,2,3] ಗೆ ಔಟ್ಪುಟ್ 14 ಆಗಿರಬೇಕು lst = [1,4,9] ಗೆ ಔಟ್ಪುಟ್ 98 ಆಗಿರಬೇಕು lst = [1,3,5,7] ಗೆ ಔಟ್ಪುಟ್ 84 ಆಗಿರಬೇಕು lst = [1.4,4.2,0] ಗೆ ಔಟ್ಪುಟ್ 29 ಆಗಿರಬೇಕು lst = [-2.4,1,1] ಗೆ ಔಟ್ಪುಟ್ 6 ಆಗಿರಬೇಕು \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''ಒಂದು ನಿರ್ದಿಷ್ಟ ಸ್ಟ್ರಿಂಗ್ನ ಕೊನೆಯ ಅಕ್ಷರವು ವರ್ಣಮಾಲೆಯ ಅಕ್ಷರವಾಗಿದ್ದರೆ ಮತ್ತು ಪದದ ಭಾಗವಾಗದಿದ್ದರೆ ಮತ್ತು ಸುಳ್ಳು ಇಲ್ಲದಿದ್ದರೆ ನಿಜವಾದದನ್ನು ಹಿಂದಿರುಗಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ರಚಿಸಿ. ಗಮನಿಸಿಃ \"ಪದ\" ಎಂಬುದು ಅಕ್ಷರಗಳ ಗುಂಪಾಗಿದ್ದು, ಅಂತರದಿಂದ ಬೇರ್ಪಡಿಸಲಾಗಿದೆ. ಉದಾಹರಣೆಗಳುಃ check_if_last_char_is_a_letter ((\"apple pie\") â -> False check_if_last_char_is_a_letter ((\"apple pi e\") â -> True check_if_last_char_is_a_letter ((\"apple pi e \") â -> False check_if_last_char_is_a_letter\" (((\") â -> False '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"ಒಂದು ಅಂಶದ ಅತಿದೊಡ್ಡ ಸೂಚಿಯನ್ನು ಹಿಂದಿರುಗಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ರಚಿಸಿ ಅದು ತಕ್ಷಣವೇ ಅದರ ಹಿಂದಿನ ಅಂಶಕ್ಕಿಂತ ದೊಡ್ಡದಾಗಿಲ್ಲ ಅಥವಾ ಸಮನಾಗಿರುವುದಿಲ್ಲ. ಅಂತಹ ಯಾವುದೇ ಅಂಶವು ಅಸ್ತಿತ್ವದಲ್ಲಿಲ್ಲದಿದ್ದರೆ ನಂತರ ಹಿಂತಿರುಗಿ -1. ಕೊಟ್ಟಿರುವ ಶ್ರೇಣಿಯು ನಕಲಿ ಮೌಲ್ಯಗಳನ್ನು ಹೊಂದಿರುವುದಿಲ್ಲ. ಉದಾಹರಣೆಗಳುಃ can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''ಒಂದು ಟುಪಲ್ (a, b) ಅನ್ನು ಹಿಂದಿರುಗಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ರಚಿಸಿ, ಅಲ್ಲಿ 'a' ನಕಾರಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳಲ್ಲಿ ದೊಡ್ಡದಾಗಿದೆ, ಮತ್ತು 'b' ಒಂದು ಪಟ್ಟಿಯಲ್ಲಿನ ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳಲ್ಲಿ ಚಿಕ್ಕದಾಗಿದೆ. ಯಾವುದೇ ಋಣಾತ್ಮಕ ಅಥವಾ ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳಿಲ್ಲದಿದ್ದರೆ, ಅವುಗಳನ್ನು None ಎಂದು ಹಿಂತಿರುಗಿಸಿ. ಉದಾಹರಣೆಗಳುಃ ದೊಡ್ಡ_ಸಣ್ಣ_ಸಂಪೂರ್ಣ ಸಂಖ್ಯೆಗಳು[2, 4, 1, 3, 5, 7]) == (ಯಾವುದೂ ಇಲ್ಲ, 1) ದೊಡ್ಡ_ಸಣ್ಣ_ಸಂಪೂರ್ಣ ಸಂಖ್ಯೆಗಳು (([]) == (ಯಾವುದೂ ಇಲ್ಲ, None) ದೊಡ್ಡ_ಸಣ್ಣ_ಸಂಪೂರ್ಣ ಸಂಖ್ಯೆಗಳು (([0]) == (ಯಾವುದೂ ಇಲ್ಲ, None) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"ಒಂದು ಪೂರ್ಣಾಂಕ, ಫ್ಲೋಟ್ಗಳು, ಅಥವಾ ನೈಜ ಸಂಖ್ಯೆಗಳನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಸ್ಟ್ರಿಂಗ್ಗಳನ್ನು ತೆಗೆದುಕೊಳ್ಳುವ ಒಂದು ಕಾರ್ಯವನ್ನು ರಚಿಸಿ ಮತ್ತು ಅದರ ನಿರ್ದಿಷ್ಟ ವೇರಿಯಬಲ್ ಪ್ರಕಾರದಲ್ಲಿ ದೊಡ್ಡ ವೇರಿಯಬಲ್ ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ. ಮೌಲ್ಯಗಳು ಸಮಾನವಾಗಿದ್ದರೆ ಯಾವುದನ್ನೂ ಹಿಂತಿರುಗಿಸುವುದಿಲ್ಲ. ಗಮನಿಸಿ: ಒಂದು ನೈಜ ಸಂಖ್ಯೆಯನ್ನು ಸ್ಟ್ರಿಂಗ್ ಆಗಿ ಪ್ರತಿನಿಧಿಸಿದರೆ, ಫ್ಲೋಟಿಂಗ್ ಪಾಯಿಂಟ್ ಇರಬಹುದು . ಅಥವಾ , compare_one{1, 2.5) â -> 2.5 compare_one{1, \"2,3\") â -> \"2,3\" compare_one{5,1\", \"6\") â -> \"6\" compare_one{1\", 1) â -> None \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"ಕೊಟ್ಟಿರುವ ಸಂಖ್ಯೆಯನ್ನು n ಅನ್ನು ನಿಖರವಾಗಿ 4 ಧನಾತ್ಮಕ ಸಮ ಸಂಖ್ಯೆಗಳ ಮೊತ್ತವಾಗಿ ಬರೆಯಬಹುದೇ ಎಂದು ಮೌಲ್ಯಮಾಪನ ಮಾಡಿ ಉದಾಹರಣೆ is_equal_to_sum_even (ಎರಡೂ) == ಸುಳ್ಳು is_equal_to_sum_even (ಎರಡೂ) == ಸುಳ್ಳು is_equal_to_sum_even (ಎರಡೂ) == ನಿಜ \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"ಬ್ರೆಜಿಲಿಯನ್ ಫ್ಯಾಕ್ಟರಿಯಲ್ ಅನ್ನು ಹೀಗೆ ವ್ಯಾಖ್ಯಾನಿಸಲಾಗಿದೆ: ಬ್ರೆಜಿಲಿಯನ್_ಫ್ಯಾಕ್ಟರಿಯಲ್ ((n) = n! * (n-1)! * (n-2)! * . . . * 1! ಅಲ್ಲಿ n > 0 ಉದಾಹರಣೆಗೆ: >>> ವಿಶೇಷ_ಫ್ಯಾಕ್ಟರಿಯಲ್ ((4) 288 ಈ ಕಾರ್ಯವು ಒಂದು ಪೂರ್ಣಾಂಕವನ್ನು ಇನ್ಪುಟ್ ಆಗಿ ಸ್ವೀಕರಿಸುತ್ತದೆ ಮತ್ತು ಈ ಪೂರ್ಣಾಂಕದ ವಿಶೇಷ ಫ್ಯಾಕ್ಟರಿಯಲ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_ಉದಾಹರಣೆ-3ಠ್ಯವನ್ನು ನೀಡಿದರೆ, ಅದರಲ್ಲಿರುವ ಎಲ್ಲಾ ಸ್ಥಳಗಳನ್ನು ಅಂಡರ್ ಸ್ಕೋರ್ಗಳೊಂದಿಗೆ ಬದಲಾಯಿಸಿ, ಮತ್ತು ಒಂದು ಸ್ಟ್ರಿಂಗ್ನಲ್ಲಿ 2 ಕ್ಕಿಂತ ಹೆಚ್ಚು ಸತತ ಸ್ಥಳಗಳನ್ನು ಹೊಂದಿದ್ದರೆ, ನಂತರ ಎಲ್ಲಾ ಸತತ ಸ್ಥಳಗಳನ್ನು - fix_spaces ((\"ಉದಾಹರಣೆ\") == \"ಉದಾಹರಣೆ\" fix_spaces ((\"ಉದಾಹರಣೆ1\") == \"ಉದಾಹರಣೆ_1\" fix_spaces ((\"ಉದಾಹರಣೆ2\") == \"_ಉದಾಹರಣೆ_2\" fix_spaces ((\"ಉದಾಹರಣೆ 3\") == \"_ಉದಾಹರಣೆ-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"ಒಂದು ಕಡತದ ಹೆಸರನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ತೆಗೆದುಕೊಳ್ಳುವ ಒಂದು ಕಾರ್ಯವನ್ನು ರಚಿಸಿ, ಮತ್ತು ಕಡತದ ಹೆಸರು ಮಾನ್ಯವಾಗಿದ್ದರೆ 'ಹೌದು' ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ, ಮತ್ತು ಇಲ್ಲದಿದ್ದರೆ 'ಇಲ್ಲ' ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ. ಕಡತದ ಹೆಸರಿನಲ್ಲಿ ಮೂರು ಅಂಕೆಗಳಿಗಿಂತ ಹೆಚ್ಚು ('0'-'9') ಇರಬಾರದು ಮತ್ತು ಈ ಕೆಳಗಿನ ಎಲ್ಲಾ ಷರತ್ತುಗಳನ್ನು ಪೂರೈಸಿದರೆ ಮಾತ್ರ ಫೈಲ್ನ ಹೆಸರನ್ನು ಮಾನ್ಯವೆಂದು ಪರಿಗಣಿಸಲಾಗುತ್ತದೆ. - ಫೈಲ್ನ ಹೆಸರಿನಲ್ಲಿ ನಿಖರವಾಗಿ ಒಂದು ಡಾಟ್ '.' - ಡಾಟ್ ಮೊದಲು ಉಪಸರಣಿ ಖಾಲಿಯಾಗಿರಬಾರದು, ಮತ್ತು ಇದು ಲ್ಯಾಟಿನ್ ಅಲ್ಫಾ ಪೆಟ್ ('a'-'z' ಮತ್ತು 'A'Z'-) ಅಕ್ಷರದಿಂದ ಪ್ರಾರಂಭವಾಗುತ್ತದೆ. - ಡಾಟ್ ನಂತರದ ಉಪಸರಣಿ ಇವುಗಳಲ್ಲಿ ಒಂದಾಗಿರಬೇಕುಃ ['txt', 'exe', 'lld'] ಉದಾಹರಣೆಗಳುಃ file_name_check\"{example. txt. #\") => 'ಹೌದು' file_name_check\"{example. d1ll. #\") => 'ಇಲ್ಲ' (ಹೆಸರು ಲ್ಯಾಟಿನ್ ಅಲ್ಫಾ ಪೆಟ್ ಅಕ್ಷರದಿಂದ ಪ್ರಾರಂಭವಾಗಬೇಕು)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" ಈ ಕಾರ್ಯವು ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ. ಪಟ್ಟಿಯಲ್ಲಿರುವ ಎಲ್ಲಾ ನಮೂದುಗಳಿಗೆ, ಕಾರ್ಯವು ಪೂರ್ಣಾಂಕ ನಮೂದನ್ನು ಚೌಕದಲ್ಲಿರಿಸಬೇಕು ಅದರ ಸೂಚ್ಯಂಕವು 3 ರ ಬಹುಸಂಖ್ಯೆಯಾಗಿದ್ದರೆ ಮತ್ತು ಅದರ ಸೂಚ್ಯಂಕವು 4 ರ ಬಹುಸಂಖ್ಯೆಯಾಗಿದ್ದರೆ ಮತ್ತು 3 ರ ಬಹುಸಂಖ್ಯೆಯಲ್ಲದಿದ್ದರೆ ಪೂರ್ಣಾಂಕ ನಮೂದನ್ನು ಘನೀಕರಿಸುತ್ತದೆ. ಕಾರ್ಯವು ಪಟ್ಟಿಯಲ್ಲಿರುವ ನಮೂದುಗಳನ್ನು ಬದಲಾಯಿಸುವುದಿಲ್ಲ, ಅವರ ಸೂಚ್ಯಂಕಗಳು 3 ಅಥವಾ 4 ರ ಬಹುಸಂಖ್ಯೆಯಲ್ಲ. ಕಾರ್ಯವು ನಂತರ ಎಲ್ಲಾ ನಮೂದುಗಳ ಮೊತ್ತವನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. ಉದಾಹರಣೆಗಳು: lst = [1,2,3] ಗೆ output 6 ಆಗಿರಬೇಕು lst = [] ಗೆ output 0 ಆಗಿರಬೇಕು lst = [-1,-5,2,-1,-5] ಗೆ output -126 ಆಗಿರಬೇಕು \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"ನಿಮಗೆ ಒಂದು ವಾಕ್ಯವನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಒಂದು ಸ್ಟ್ರಿಂಗ್ ನೀಡಲಾಗಿದೆ, ವಾಕ್ಯವು ಕೆಲವು ಪದಗಳನ್ನು ಅಂತರದಿಂದ ಬೇರ್ಪಡಿಸಲಾಗಿದೆ, ಮತ್ತು ನೀವು ಮೂಲ ವಾಕ್ಯದಿಂದ ಪದಗಳನ್ನು ಹೊಂದಿರುವ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು, ಇದರ ಉದ್ದಗಳು ಅವಿಭಾಜ್ಯ ಸಂಖ್ಯೆಗಳಾಗಿವೆ, ಹೊಸ ಸ್ಟ್ರಿಂಗ್ನಲ್ಲಿನ ಪದಗಳ ಕ್ರಮವು ಮೂಲದಂತೆಯೇ ಇರಬೇಕು. ಉದಾಹರಣೆ 1: ಇನ್ಪುಟ್ಃ ವಾಕ್ಯ = \"ಇದು ಪರೀಕ್ಷೆ\" ಔಟ್ಪುಟ್ಃ \"is\" ಉದಾಹರಣೆ 2: ಇನ್ಪುಟ್ಃ ವಾಕ್ಯ = \"ನೀರಿನ ಹೋಗಲು ಅವಕಾಶ ಮಾಡಿಕೊಡುತ್ತದೆ\" ಔಟ್ಪುಟ್ಃ \"go for\" ನಿರ್ಬಂಧಗಳುಃ * 1 <= len(sentence) <= 100 * ವಾಕ್ಯವು ಅಕ್ಷರಗಳನ್ನು ಮಾತ್ರ ಒಳಗೊಂಡಿದೆ \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"ನಿಮ್ಮ ಕಾರ್ಯವು x * n ಎಂಬ ಅಭಿವ್ಯಕ್ತಿಯನ್ನು ಸರಳಗೊಳಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಅಳವಡಿಸುವುದು. x * n ಅನ್ನು ಪೂರ್ಣ ಸಂಖ್ಯೆಗೆ ಮೌಲ್ಯೀಕರಿಸಿದರೆ ಮತ್ತು ಇಲ್ಲದಿದ್ದರೆ ತಪ್ಪು ಎಂದು ಕಾರ್ಯವು True ಅನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ. x ಮತ್ತು n ಎರಡೂ, ಒಂದು ಭಿನ್ನರಾಶಿಯ ಸ್ಟ್ರಿಂಗ್ ಪ್ರಾತಿನಿಧ್ಯವಾಗಿದೆ, ಮತ್ತು ಈ ಕೆಳಗಿನ ಸ್ವರೂಪವನ್ನು ಹೊಂದಿವೆ, <ಸಂಖ್ಯೆ> / <ಅಂಶ> ಅಲ್ಲಿ ಸಂಖ್ಯಾ ಮತ್ತು ನಾಮಕ ಎರಡೂ ಧನಾತ್ಮಕ ಪೂರ್ಣ ಸಂಖ್ಯೆಗಳಾಗಿವೆ. ನೀವು x, ಮತ್ತು n ಮಾನ್ಯ ಭಿನ್ನರಾಶಿಗಳು ಎಂದು ಊಹಿಸಬಹುದು, ಮತ್ತು ಶೂನ್ಯವನ್ನು ನಾಮಕ ಎಂದು ಹೊಂದಿಲ್ಲ. ಸರಳೀಕರಿಸಿ \" 1 / 5\", \"5 / 1\") = True ಸರಳೀಕರಿಸಿ \" 1/ 6\", \"2 / 1\") = False ಸರಳೀಕರಿಸಿ \" 7 / 10\", \"10 / 2\") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ಅವುಗಳ ಅಂಕೆಗಳ ಮೊತ್ತದ ಪ್ರಕಾರ ಏರುತ್ತಿರುವ ಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ. ಗಮನಿಸಿಃ ಅವುಗಳ ಅಂಕೆಗಳ ಒಂದೇ ರೀತಿಯ ಮೊತ್ತವನ್ನು ಹೊಂದಿರುವ ಹಲವಾರು ಐಟಂಗಳು ಇದ್ದರೆ, ಅವುಗಳನ್ನು ಮೂಲ ಪಟ್ಟಿಯಲ್ಲಿನ ಸೂಚ್ಯಂಕದ ಆಧಾರದ ಮೇಲೆ ಆದೇಶಿಸಿ. ಉದಾಹರಣೆಗೆಃ >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"ಒಂದು ಶ್ರೇಣಿಯನ್ನು ಸಂಖ್ಯೆಗಳಾಗಿ ಇನ್ಪುಟ್ ಆಗಿ ತೆಗೆದುಕೊಳ್ಳುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ ಮತ್ತು ಶ್ರೇಣಿಯಲ್ಲಿರುವ ಅಂಶಗಳ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ, ಅದು 10 ಕ್ಕಿಂತ ಹೆಚ್ಚಿರುತ್ತದೆ ಮತ್ತು ಸಂಖ್ಯೆಯ ಮೊದಲ ಮತ್ತು ಕೊನೆಯ ಅಂಕೆಗಳು ಬೆಸ (1, 3, 5, 7, 9). ಉದಾಹರಣೆಗೆಃ specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"ನಿಮಗೆ ಒಂದು ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ನೀಡಲಾಗಿದೆ. ನೀವು ಉದ್ದ n ನ ಒಂದು ಪೂರ್ಣಾಂಕ ಶ್ರೇಣಿಯನ್ನು ರಚಿಸಬೇಕು. ಪ್ರತಿ i (1 ‰¤ i ‰¤ n) ಗಾಗಿ, a[i] = i * i - i + 1 ರ ಮೌಲ್ಯವು i < j < k, ಮತ್ತು a[i] + a[j] + a[k] ನ ಮೂರು ಪಟ್ಟು (a[i], a[j], a[k]) ನ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. ಉದಾಹರಣೆಃ ಇನ್ಪುಟ್ಃ n = 5 ಔಟ್ಪುಟ್ಃ 1 ವಿವರಣೆಃ a = [1, 3, 7, 13, 21] ಮಾನ್ಯವಾದ ಏಕೈಕ ತ್ರಿವಳಿ (1, 7, 13) ಆಗಿದೆ.\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''ನಮ್ಮ ಸೌರವ್ಯೂಹದಲ್ಲಿ ಎಂಟು ಗ್ರಹಗಳಿವೆ: ಸೂರ್ಯನಿಗೆ ಹತ್ತಿರದದ್ದು ಮರ್ಕ್ಯುರಿ, ಮುಂದಿನದು ಶುಕ್ರ, ನಂತರ ಭೂಮಿಯ, ಮಂಗಳ, ಗುರು, ಶನಿ, ಯುರೇನಸ್, ನೆಪ್ಚೂನ್. ಎರಡು ಗ್ರಹಗಳ ಹೆಸರುಗಳನ್ನು ಗ್ರಹ1 ಮತ್ತು ಗ್ರಹ2 ಎಂದು ತೆಗೆದುಕೊಳ್ಳುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ. ಕಾರ್ಯವು ಗ್ರಹ1 ನ ಕಕ್ಷೆ ಮತ್ತು ಗ್ರಹ2 ನ ಕಕ್ಷೆಯ ನಡುವೆ ಇರುವ ಎಲ್ಲಾ ಗ್ರಹಗಳನ್ನು ಒಳಗೊಂಡಿರುವ ಒಂದು ಟುಪಲ್ ಅನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು, ಸೂರ್ಯನ ಸಾಮೀಪ್ಯದಿಂದ ವಿಂಗಡಿಸಲಾಗಿದೆ. ಗ್ರಹ1 ಅಥವಾ ಗ್ರಹ2 ಸರಿಯಾದ ಗ್ರಹದ ಹೆಸರುಗಳಲ್ಲದಿದ್ದರೆ ಕಾರ್ಯವು ಖಾಲಿ ಟುಪಲ್ ಅನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು. ಉದಾಹರಣೆಗಳು bf \"(ಜೂಪೈಟರ್\", \"ನೆಪ್ಲುಟ್ಯೂನ್\") ==> (\"ಶನಿ\", \"ಯುರೇನಸ್\") bf ((\"ಭೂಮಿ\", \"ಮರ್ಕ್ಯುರಿ\") ==> (\"ಶುಕ್ರ\") bf (\"ಶುಕ್ರ\", \"ಯುರೇನಸ್\") ==> (\"ಶುಕ್ರ\", \"ಭೂಮಿ\", \"ಮಂಗಳ\", \"ಜೂಪೈಟರ್\", \"ಶನಿ\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ ಅದು ಸ್ಟ್ರಿಂಗ್ಗಳ ಪಟ್ಟಿಯನ್ನು ಪ್ಯಾರಾಮೀಟರ್ ಆಗಿ ಸ್ವೀಕರಿಸುತ್ತದೆ, ಅದರಿಂದ ಬೆಸ ಉದ್ದಗಳನ್ನು ಹೊಂದಿರುವ ಸ್ಟ್ರಿಂಗ್ಗಳನ್ನು ಅಳಿಸುತ್ತದೆ, ಮತ್ತು ವಿಂಗಡಿಸಲಾದ ಕ್ರಮದೊಂದಿಗೆ ಫಲಿತಾಂಶದ ಪಟ್ಟಿಯನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ. ಪಟ್ಟಿಯು ಯಾವಾಗಲೂ ಸ್ಟ್ರಿಂಗ್ಗಳ ಪಟ್ಟಿಯಾಗಿದೆ ಮತ್ತು ಸಂಖ್ಯೆಗಳ ಶ್ರೇಣಿಯನ್ನು ಎಂದಿಗೂ ಹೊಂದಿರುವುದಿಲ್ಲ, ಮತ್ತು ಅದು ಪುನರಾವರ್ತನೆಗಳನ್ನು ಹೊಂದಿರಬಹುದು. ಪಟ್ಟಿಯ ಕ್ರಮವು ಪ್ರತಿ ಪದದ ಉದ್ದದಿಂದ ಏರುತ್ತಿರಬೇಕು, ಮತ್ತು ನೀವು ಆ ನಿಯಮದಿಂದ ವಿಂಗಡಿಸಲಾದ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. ಎರಡು ಪದಗಳು ಒಂದೇ ಉದ್ದವನ್ನು ಹೊಂದಿದ್ದರೆ, ಪಟ್ಟಿಯನ್ನು ವರ್ಣಮಾಲೆಯಂತೆ ವಿಂಗಡಿಸಿ. ಕಾರ್ಯವು ವಿಂಗಡಿಸಲಾದ ಕ್ರಮದಲ್ಲಿ ಸ್ಟ್ರಿಂಗ್ಗಳ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. ಎಲ್ಲಾ ಪದಗಳು ಒಂದೇ ಉದ್ದವನ್ನು ಹೊಂದಿರುತ್ತವೆ ಎಂದು ನೀವು ಭಾವಿಸಬಹುದು. ಉದಾಹರಣೆಗೆಃ assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => [\"ab\", \"cd\"]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"ಒಂದು ಸರಳ ಪ್ರೋಗ್ರಾಂ ಇದು n ಒಂದು ಅವಿಭಾಜ್ಯ ಸಂಖ್ಯೆಯಾಗಿದ್ದರೆ x ನ ಮೌಲ್ಯವನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು ಮತ್ತು y ನ ಮೌಲ್ಯವನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು. ಉದಾಹರಣೆಗಳು: x_or_y{7, 34, 12) == 34 x_or_y{15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಿದರೆ, ಪಟ್ಟಿಯಲ್ಲಿರುವ ಬೆಸ ಸಂಖ್ಯೆಗಳ ಚೌಕಗಳ ಮೊತ್ತವನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಋಣಾತ್ಮಕ ಅಥವಾ ಪೂರ್ಣಾಂಕಗಳಲ್ಲದ ಸಂಖ್ಯೆಗಳನ್ನು ನಿರ್ಲಕ್ಷಿಸಿ. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 ಇನ್ಪುಟ್ ಪಟ್ಟಿ ಖಾಲಿಯಾಗಿದ್ದರೆ, 0 ಅನ್ನು ಹಿಂತಿರುಗಿ '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"ಕೆಲವು ದೀರ್ಘ ಕಾಯುತ್ತಿದ್ದ ಘಟನೆಯ ಫಲಿತಾಂಶವು ಅಂತಿಮವಾಗಿ ತಿಳಿದಿರುವಾಗ ನಾವು ಎಲ್ಲರೂ ಆ ಭಾವನೆಯನ್ನು ನೆನಪಿಸಿಕೊಳ್ಳುತ್ತೇವೆ. ಆ ಕ್ಷಣದಲ್ಲಿ ನೀವು ಹೊಂದಿರುವ ಭಾವನೆಗಳು ಮತ್ತು ಆಲೋಚನೆಗಳು ಖಂಡಿತವಾಗಿಯೂ ಗಮನಿಸಬೇಕಾದ ಮತ್ತು ಹೋಲಿಸುವ ಮೌಲ್ಯದ್ದಾಗಿದೆ. ಒಬ್ಬ ವ್ಯಕ್ತಿಯು ಹಲವಾರು ಪಂದ್ಯಗಳ ಫಲಿತಾಂಶಗಳನ್ನು ಸರಿಯಾಗಿ ಊಹಿಸಿದ್ದಾನೆಯೇ ಎಂದು ನಿರ್ಧರಿಸಲು ನಿಮ್ಮ ಕಾರ್ಯವಾಗಿದೆ. ನಿಮಗೆ ಎರಡು ಶ್ರೇಣಿಗಳ ಅಂಕಗಳು ಮತ್ತು ಸಮಾನ ಉದ್ದದ ಊಹೆಗಳನ್ನು ನೀಡಲಾಗುತ್ತದೆ, ಅಲ್ಲಿ ಪ್ರತಿ ಸೂಚ್ಯಂಕವು ಹೊಂದಾಣಿಕೆಯನ್ನು ತೋರಿಸುತ್ತದೆ. ಪ್ರತಿ ಊಹೆಯು ಎಷ್ಟು ದೂರದಲ್ಲಿದೆ ಎಂಬುದನ್ನು ಸೂಚಿಸುವ ಅದೇ ಉದ್ದದ ಒಂದು ಶ್ರೇಣಿಯನ್ನು ಹಿಂತಿರುಗಿ. ಅವರು ಸರಿಯಾಗಿ ಊಹಿಸಿದರೆ, ಮೌಲ್ಯವು 0 ಆಗಿರುತ್ತದೆ ಮತ್ತು ಇಲ್ಲದಿದ್ದರೆ, ಮೌಲ್ಯವು ಊಹೆ ಮತ್ತು ಸ್ಕೋರ್ ನಡುವಿನ ಸಂಪೂರ್ಣ ವ್ಯತ್ಯಾಸವಾಗಿದೆ. ಉದಾಹರಣೆಃ (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,4],[0,4,1,0,-2]) -> [4,0,1,0,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"ನಿಮಗೆ ಒಂದು ವರ್ಗದ ಹೆಸರು (ಸ್ಟ್ರಿಂಗ್) ಮತ್ತು ವಿಸ್ತರಣೆಗಳ ಪಟ್ಟಿ ನೀಡಲಾಗುವುದು. ವಿಸ್ತರಣೆಗಳನ್ನು ವರ್ಗಕ್ಕೆ ಹೆಚ್ಚುವರಿ ವರ್ಗಗಳನ್ನು ಲೋಡ್ ಮಾಡಲು ಬಳಸಲಾಗುತ್ತದೆ. ವಿಸ್ತರಣೆಯ ಸಾಮರ್ಥ್ಯ ಹೀಗಿದೆ: CAP ವಿಸ್ತರಣೆಯ ಹೆಸರಿನಲ್ಲಿರುವ ದೊಡ್ಡಕ್ಷರಗಳ ಸಂಖ್ಯೆಯಾಗಿರಲಿ, ಮತ್ತು SM ವಿಸ್ತರಣೆಯ ಹೆಸರಿನಲ್ಲಿರುವ ಸಣ್ಣಕ್ಷರಗಳ ಸಂಖ್ಯೆಯಾಗಿರಲಿ, CAP - SM ಭಿನ್ನರಾಶಿಯಿಂದ ಸಾಮರ್ಥ್ಯವನ್ನು ನೀಡಲಾಗುತ್ತದೆ. ನೀವು ಬಲವಾದ ವಿಸ್ತರಣೆಯನ್ನು ಕಂಡುಹಿಡಿಯಬೇಕು ಮತ್ತು ಈ ಸ್ವರೂಪದಲ್ಲಿ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು: ClassName.StrongestExtensionName. ಒಂದೇ ಸಾಮರ್ಥ್ಯದ ಎರಡು ಅಥವಾ ಹೆಚ್ಚಿನ ವಿಸ್ತರಣೆಗಳಿದ್ದರೆ, ನೀವು ಪಟ್ಟಿಯಲ್ಲಿ ಮೊದಲು ಬರುವದನ್ನು ಆರಿಸಬೇಕು. ಉದಾಹರಣೆಗೆ, ನಿಮಗೆ \"Slices\" ಅನ್ನು ವರ್ಗವಾಗಿ ನೀಡಿದರೆ ಮತ್ತು ವಿಸ್ತರಣೆಗಳ ಪಟ್ಟಿಃ ['SEviRNGSliCes', 'Cheese', 'StuFfed'] ನಂತರ ನೀವು 'Slices.SviRNGSliCes' ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು ಏಕೆಂದರೆ 'SviRNGSliCes' 'mySviRNGSliCes']) ವಿಸ್ತರಣೆಯು ಬಲವಾಗಿರುತ್ತದೆ. (ಉದಾಹರಣೆಃ 'AA' = 'Beast_class_Strongest', ಉದಾಹರಣೆಗೆ 'AA' = 'Beast_class_Strongest').\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"ನಿಮಗೆ 2 ಪದಗಳನ್ನು ನೀಡಲಾಗಿದೆ. ನೀವು ಎರಡನೇ ಪದ ಅಥವಾ ಅದರ ಯಾವುದೇ ತಿರುಗುವಿಕೆಗಳು ಮೊದಲ ಪದದ ಉಪಸರಣಿಯಾಗಿದ್ದರೆ True ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕಾಗುತ್ತದೆ cycpattern_check(\"abcd\",\"abd\") => False cycpattern_check(\"hello\",\"ell\") => True cycpattern_check(\"whassup\",\"psus\") => False cycpattern_check\"abab\",\"baa\") => True cycpattern_check\"(\"efef\",\"eeff\") => False cycpattern_check\"(hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"ಒಂದು ಪೂರ್ಣಾಂಕವನ್ನು ನೀಡಲಾಗಿದೆ. ಅನುಕ್ರಮವಾಗಿ ಸಮ ಮತ್ತು ಬೆಸ ಅಂಕೆಗಳ ಸಂಖ್ಯೆಯನ್ನು ಹೊಂದಿರುವ ಟುಪಲ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. ಉದಾಹರಣೆ: ಸಹ_ಅಪರೂಪದ_ಸಂಖ್ಯೆ ((-12) ==> (1, 1) ಸಹ_ಅಪರೂಪದ_ಸಂಖ್ಯೆ ((123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"ಒಂದು ಸಕಾರಾತ್ಮಕ ಪೂರ್ಣಾಂಕವನ್ನು ನೀಡಿದರೆ, ಅದರ ರೋಮನ್ ಸಂಖ್ಯಾ ಸಮಾನತೆಯನ್ನು ಸ್ಟ್ರಿಂಗ್ ಆಗಿ ಪಡೆಯಿರಿ ಮತ್ತು ಅದನ್ನು ಸಣ್ಣ ಅಕ್ಷರಗಳಲ್ಲಿ ಹಿಂತಿರುಗಿಸಿ. ನಿರ್ಬಂಧಗಳುಃ 1 <= num <= 1000 ಉದಾಹರಣೆಗಳುಃ >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''ಒಂದು ತ್ರಿಕೋನವೊಂದರ ಮೂರು ಬದಿಗಳ ಉದ್ದಗಳನ್ನು ನೀಡಲಾಗಿದೆ. ಮೂರು ಬದಿಗಳು ಒಂದು ಬಲ ಕೋನ ತ್ರಿಕೋನವೊಂದನ್ನು ರೂಪಿಸಿದರೆ True ಅನ್ನು ಹಿಂತಿರುಗಿ, ಇಲ್ಲದಿದ್ದರೆ False. ಬಲ ಕೋನ ತ್ರಿಕೋನವೊಂದರಲ್ಲಿ ಒಂದು ಕೋನವು ಬಲ ಕೋನ ಅಥವಾ 90 ಡಿಗ್ರಿ. ಉದಾಹರಣೆ: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"ಸ್ಟ್ರಿಂಗ್ಗಳ ಪಟ್ಟಿಯನ್ನು ಸ್ವೀಕರಿಸುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ. ಪಟ್ಟಿಯು ವಿಭಿನ್ನ ಪದಗಳನ್ನು ಒಳಗೊಂಡಿದೆ. ಗರಿಷ್ಠ ಸಂಖ್ಯೆಯ ಅನನ್ಯ ಅಕ್ಷರಗಳೊಂದಿಗೆ ಪದವನ್ನು ಹಿಂತಿರುಗಿ. ಬಹು ಸ್ಟ್ರಿಂಗ್ಗಳು ಗರಿಷ್ಠ ಸಂಖ್ಯೆಯ ಅನನ್ಯ ಅಕ್ಷರಗಳನ್ನು ಹೊಂದಿದ್ದರೆ, ಶಬ್ದಕೋಶದ ಕ್ರಮದಲ್ಲಿ ಮೊದಲು ಬರುವದನ್ನು ಹಿಂತಿರುಗಿ. find_max (([\"name\", \"of\", \"string\"]) == \"string\" find_max (([\"name\", \"enam\", \"game\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"ನೀವು ಹಸಿದ ಮೊಲ, ಮತ್ತು ನೀವು ಈಗಾಗಲೇ ಒಂದು ನಿರ್ದಿಷ್ಟ ಸಂಖ್ಯೆಯ ಕ್ಯಾರೆಟ್ಗಳನ್ನು ತಿನ್ನುತ್ತಿದ್ದೀರಿ, ಆದರೆ ಈಗ ನೀವು ದಿನದ ಊಟವನ್ನು ಪೂರ್ಣಗೊಳಿಸಲು ಹೆಚ್ಚಿನ ಕ್ಯಾರೆಟ್ಗಳನ್ನು ತಿನ್ನಬೇಕು. ನೀವು ಒಂದು ಶ್ರೇಣಿಯನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು [ನಿಮ್ಮ ಊಟದ ನಂತರ ತಿನ್ನಲಾದ ಕ್ಯಾರೆಟ್ಗಳ ಒಟ್ಟು ಸಂಖ್ಯೆ, ನಿಮ್ಮ ಊಟದ ನಂತರ ಉಳಿದಿರುವ ಕ್ಯಾರೆಟ್ಗಳ ಸಂಖ್ಯೆ ] ಸಾಕಷ್ಟು ಕ್ಯಾರೆಟ್ಗಳು ಉಳಿದಿಲ್ಲದಿದ್ದರೆ, ನೀವು ಉಳಿದಿರುವ ಎಲ್ಲಾ ಕ್ಯಾರೆಟ್ಗಳನ್ನು ತಿನ್ನುತ್ತೀರಿ, ಆದರೆ ಇನ್ನೂ ಹಸಿದಿರುತ್ತೀರಿ. ಉದಾಹರಣೆಃ * ತಿನ್ನಲು ((5, 6, 10) -> [11, 4] * ತಿನ್ನಲು ((4, 8, 9) -> [12, 1] * ತಿನ್ನಲು ((1, 10, 10) -> [11, 0] * ತಿನ್ನಲು ((2, 11, 5) -> [7, 0] ಅಸ್ಥಿರಗಳು: @ ಸಂಖ್ಯೆಃ ನೀವು ತಿನ್ನುತ್ತಿರುವ ಕ್ಯಾರೆಟ್ಗಳ ಪೂರ್ಣಾಂಕ ಸಂಖ್ಯೆ. @ ಅಗತ್ಯತೆಃ ನೀವು ತಿನ್ನಬೇಕಾದ ಕ್ಯಾರೆಟ್ಗಳ ಪೂರ್ಣಾಂಕ ಸಂಖ್ಯೆ. @ ಉಳಿದಿರುವ ಕ್ಯಾರೆಟ್ಗಳ ಪೂರ್ಣಾಂಕ ಸಂಖ್ಯೆ: * ಕಂಟ್ರೈನ್ = 0 * <= 1000 * ಉಳಿದಿರುವ ಕ್ಯಾರೆಟ್ ಸಂಖ್ಯೆ = <= 1000 ಉಳಿದಿರುವ ಕ್ಯಾರೆಟ್ಗಳು <= 1000 ವಿನೋದವನ್ನು ಹೊಂದಿರಿ = 1000:\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"ಎರಡು ಪಟ್ಟಿಗಳು ಆಪರೇಟರ್ ಮತ್ತು ಆಪರೇಂಡನ್ನು ನೀಡಲಾಗಿದೆ. ಮೊದಲ ಪಟ್ಟಿಯಲ್ಲಿ ಮೂಲಭೂತ ಬೀಜಗಣಿತದ ಕಾರ್ಯಾಚರಣೆಗಳು ಇವೆ, ಮತ್ತು ಎರಡನೇ ಪಟ್ಟಿಯು ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯಾಗಿದೆ. ಬೀಜಗಣಿತದ ಅಭಿವ್ಯಕ್ತಿಯನ್ನು ನಿರ್ಮಿಸಲು ಮತ್ತು ಈ ಅಭಿವ್ಯಕ್ತಿಯ ಮೌಲ್ಯಮಾಪನವನ್ನು ಹಿಂತಿರುಗಿಸಲು ಎರಡು ಪಟ್ಟಿಗಳನ್ನು ಬಳಸಿ. ಮೂಲಭೂತ ಬೀಜಗಣಿತದ ಕಾರ್ಯಾಚರಣೆಗಳುಃ ಸೇರ್ಪಡೆ (+) ವ್ಯವಕಲನ (-)) ಗುಣಾಕಾರ ( *) ನೆಲದ ವಿಭಾಗ ( // ) ಘಾತೀಕರಣ ( ** ಉದಾಹರಣೆ): ಆಪರೇಟರ್['+', '*', '-'] ರಚನೆ = [2, 3, 4, 5] ಫಲಿತಾಂಶ = 2 + 3 * 4 - 5 => ಫಲಿತಾಂಶ = 9 ಗಮನಿಸಿಃ ಆಪರೇಟರ್ ಪಟ್ಟಿಯ ಉದ್ದವು ಆಪರೇಂಡ ಪಟ್ಟಿಯ ಉದ್ದಕ್ಕೆ ಸಮಾನವಾಗಿರುತ್ತದೆ. ಆಪರೇಂಡು ಒಂದು ಅಲ್ಲದ ಋಣಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯಾಗಿದೆ. ಆಪರೇಟರ್ ಪಟ್ಟಿಯಲ್ಲಿ ಕನಿಷ್ಠ ಒಂದು ಆಪರೇಟರ್ ಇದೆ, ಮತ್ತು ಆಪರೇಂಡ ಪಟ್ಟಿಯಲ್ಲಿ ಕನಿಷ್ಠ ಎರಡು ಆಪರೇಂಡಗಳಿವೆ. \"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"ನಿಮಗೆ ಒಂದು ಸ್ಟ್ರಿಂಗ್ s ನೀಡಲಾಗಿದೆ. s[i] ಅಕ್ಷರವಾಗಿದ್ದರೆ, ಅದರ ಕೇಸ್ ಅನ್ನು ಕೆಳದಿಂದ ಮೇಲಕ್ಕೆ ಅಥವಾ ವಿರುದ್ಧವಾಗಿ ತಿರುಗಿಸಿ, ಇಲ್ಲದಿದ್ದರೆ ಅದನ್ನು ಹಾಗೆಯೇ ಇರಿಸಿ. ಸ್ಟ್ರಿಂಗ್ನಲ್ಲಿ ಯಾವುದೇ ಅಕ್ಷರಗಳಿಲ್ಲದಿದ್ದರೆ, ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಮ್ಮುಖಗೊಳಿಸಿ. ಕಾರ್ಯವು ಫಲಿತಾಂಶದ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು. ಉದಾಹರಣೆಗಳು solve ((\"1234\") = \"4321\" solve ((\"ab\") = \"AB\" solve ((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"ಒಂದು ಸ್ಟ್ರಿಂಗ್ 'text' ನೀಡಿದರೆ, ಅದರ md5 ಹ್ಯಾಶ್ ಸಮಾನ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ. 'text' ಒಂದು ಖಾಲಿ ಸ್ಟ್ರಿಂಗ್ ಆಗಿದ್ದರೆ, None ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ. >>> string_to_md5 (('ಹಲೋ ವರ್ಲ್ಡ್') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "kan_Knda",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"ಎರಡು ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳನ್ನು ನೀಡಲಾಗಿದೆ a ಮತ್ತು b, a ಮತ್ತು b ನಡುವಿನ ಜೋಡಿ ಅಂಕೆಗಳನ್ನು ಏರುತ್ತಿರುವ ಕ್ರಮದಲ್ಲಿ ಹಿಂತಿರುಗಿಸಿ. ಉದಾಹರಣೆಗೆಃ generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]