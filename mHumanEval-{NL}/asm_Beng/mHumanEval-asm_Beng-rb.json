[{"task_id":"HumanEval_0","nl":"asm_Beng","pl":"rb","prompt":"এটা নিৰ্দিষ্ট পৰিমাণৰ ধন।এটা সংখ্যাৰ সংকলনত, দুটা সংখ্যাৰ মাজত তকৈ বেছি দূৰত্ব আছে নেকি পৰীক্ষা কৰক।# >>> has_close_elements.call([1.0, 2.0, 3.0], 0.5)\n# false\n# >>> has_close_elements.call([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# true\ndef has_close_elements(numbers, threshold)\n","canonical_solution":"def has_close_elements(numbers, threshold)\n  numbers.combination(2).any? { |a, b| (a - b).abs < threshold }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_has_close_elements\n    candidate = method(:has_close_elements)\n    assert_equal(true, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3))\n    assert_equal(false, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05))\n    assert_equal(true, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.95))\n    assert_equal(false, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.8))\n    assert_equal(true, candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1))\n    assert_equal(true, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 1.0))\n    assert_equal(false, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 0.5))\n  end\nend\n"},{"task_id":"HumanEval_1","nl":"asm_Beng","pl":"rb","prompt":"ইনপুট ষ্ট্ৰিংৰ যিকোনো স্পেচ অৱজ্ঞা কৰক।পৃথক গোটবোৰ ভাৰসাম্যপূৰ্ণ (প্ৰতিটো মুকলি ব্ৰেকেট সঠিকভাৱে বন্ধ) আৰু ইজনে সিজনৰ ভিতৰত নিস্তদ্ধ নহয় ।এই গোটবোৰক পৃথক শাৰীলৈ পৃথক কৰক আৰু সেইবোৰৰ এৰে ঘূৰাই দিয়ক।এই ফাংচনৰ ইনপুট হৈছে এটা ষ্ট্ৰিং য'ত বহুতো গোটৰ এনষ্টেড প্যাৰেণ্টেজ থাকে। আপোনাৰ লক্ষ্য হ'ল # >>> separate_paren_groups.call(\"( ) (( )) (( )( ))\")\n# [\"()\", \"(())\", \"(()())\"]\ndef separate_paren_groups(paren_string)\n","canonical_solution":"def separate_paren_groups(paren_string)\n  # Remove spaces from the string\n  paren_string = paren_string.gsub(\" \", \"\")\n  \n  result = []\n  current_group = \"\"\n  balance = 0\n\n  paren_string.each_char do |char|\n    current_group += char\n    balance += 1 if char == '('\n    balance -= 1 if char == ')'\n\n    if balance == 0 && !current_group.empty?\n      result << current_group\n      current_group = \"\"\n    end\n  end\n\n  result\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_separate_paren_groups\n    candidate = method(:separate_paren_groups)\n    assert_equal([\"(()())\", \"((()))\", \"()\", \"((())()())\"], candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([\"()\", \"(())\", \"((()))\", \"(((())))\"], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([\"(()(())((())))\"], candidate.call(\"(()(())((())))\"))\n    assert_equal([\"()\", \"(())\", \"(()())\"], candidate.call(\"( ) (( )) (( )( ))\"))\n  end\nend\n"},{"task_id":"HumanEval_2","nl":"asm_Beng","pl":"rb","prompt":"সংখ্যাৰ দশমিক অংশ ঘূৰাই দিয়ক।(অৱশিষ্ট অংশটো সদায় ১ তকৈ সৰু) ।আৰু পূৰ্ণসংখ্যাৰ অংশ (প্ৰদত্ত সংখ্যাতকৈ ডাঙৰ পূৰ্ণসংখ্যাৰ) আৰু দশমিক সংখ্যা এটা ধনাত্মক ভ্ৰাম্যমাণ বিন্দু সংখ্যা দিয়া হ'লে, ইয়াক লৈ বিভাজিত কৰিব পাৰি।# >>> truncate_number.call(3.5)\n# 0.5\ndef truncate_number(number)\n","canonical_solution":"def truncate_number(number)\n  number - number.to_i\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_truncate_number\n    candidate = method(:truncate_number)\n    assert_equal(0.5, candidate.call(3.5))\n    assert_equal(0.25, candidate.call(1.25))\n    assert_equal(0.0, candidate.call(123.0))\n  end\nend\n"},{"task_id":"HumanEval_3","nl":"asm_Beng","pl":"rb","prompt":"এইখিনিতে ফাংচন true ৰিটাৰ্ণ কৰিব লাগে অন্যথা false ৰিটাৰ্ণ কৰিব লাগে।আপোনাৰ কাম হ'ল যিকোনো মুহূৰ্ততে একাউণ্টৰ বেলেন্স শূন্যৰ তললৈ নামি যায়, আৰু আপুনি এটা বেংক একাউণ্টত জমা আৰু উঠাই লোৱাৰ বিভিন্ন ধৰণৰ কাৰ্য্য প্ৰদান কৰা হয় যিটো ৰ সৈতে আৰম্ভ হয়# >>> below_zero.call([1, 2, 3])\n# false\n# >>> below_zero.call([1, 2, -4, 5])\n# true\ndef below_zero(operations)\n","canonical_solution":"def below_zero(operations)\n  balance = 0\n  operations.each do |operation|\n    balance += operation\n    return true if balance < 0\n  end\n  false\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_below_zero\n    candidate = method(:below_zero)\n    assert_equal(false, candidate.call([]))\n    assert_equal(false, candidate.call([1, 2, -3, 1, 2, -3]))\n    assert_equal(true, candidate.call([1, 2, -4, 5, 6]))\n    assert_equal(false, candidate.call([1, -1, 2, -2, 5, -5, 4, -4]))\n    assert_equal(true, candidate.call([1, -1, 2, -2, 5, -5, 4, -5]))\n    assert_equal(true, candidate.call([1, -2, 2, -2, 5, -5, 4, -4]))\n  end\nend\n"},{"task_id":"HumanEval_4","nl":"asm_Beng","pl":"rb","prompt":"MAD = গড়। x - x_মেনা।এটা উপাদান আৰু এটা কেন্দ্ৰ বিন্দু (এই ক্ষেত্ৰত গড়):গড় নিখুঁত বিচ্যুতি হ'ল প্ৰতিটো এই ডাটা ছেটৰ গড়ৰ আশে-পাশে।ইনপুট নম্বৰসমূহৰ এটা দিয়া এৰেজৰ বাবে, গড় নিখুঁত বিচ্যুতি গণনা কৰক।# >>> mean_absolute_deviation.call([1.0, 2.0, 3.0, 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n","canonical_solution":"def mean_absolute_deviation(numbers)\n  mean = numbers.sum.to_f \/ numbers.size\n  deviations = numbers.map { |num| (num - mean).abs }\n  deviations.sum \/ numbers.size\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"},{"task_id":"HumanEval_5","nl":"asm_Beng","pl":"rb","prompt":"ইনপুট এৰেজৰ প্ৰত্যেক দুটা ক্ৰমাগত উপাদানৰ মাজত এটা সংখ্যা 'ডিলিমিটাৰ' সন্নিৱিষ্ট কৰক ∀numbers' # >>> intersperse.call([], 4)\n# []\n# >>> intersperse.call([1, 2, 3], 4)\n# [1, 4, 2, 4, 3]\ndef intersperse(numbers, delimeter)\n","canonical_solution":"def intersperse(numbers, delimeter)\n  return numbers if numbers.empty?\n  result = []\n  numbers.each_with_index do |num, index|\n    result << num\n    result << delimeter unless index == numbers.size - 1\n  end\n  result\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersperse\n    candidate = method(:intersperse)\n    assert_equal([], candidate.call([], 7))\n    assert_equal([5, 8, 6, 8, 3, 8, 2], candidate.call([5, 6, 3, 2], 8))\n    assert_equal([2, 2, 2, 2, 2], candidate.call([2, 2, 2], 2))\n  end\nend\n"},{"task_id":"HumanEval_6","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপে (() (()) ৰ গঁড়ৰ সংখ্যা সৰ্বাধিক দুটাকৈ স্তৰ হোৱাৰ বিপৰীতে ((())) ৰ সংখ্যা তিনিটা।প্ৰতিটো গোটৰ বাবে, বন্ধনীসমূহৰ অন্তৰালত থকা গভীৰতম স্তৰটো আউটপুট কৰক।এই ফাংচনৰ ইনপুট হৈছে স্পেচৰে পৃথক কৰা ব্ৰেণ্টেজসমূহৰ বাবে একাধিক গোট প্ৰতিনিধিত্ব কৰা এটা ষ্ট্ৰিং।# >>> parse_nested_parens.call(\"(()()) ((())) () ((())()())\")\n# [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n","canonical_solution":"def parse_nested_parens(paren_string)\n  paren_string.split.map do |group|\n    max_depth = current_depth = 0\n    group.chars.each do |char|\n      if char == '('\n        current_depth += 1\n        max_depth = [max_depth, current_depth].max\n      elsif char == ')'\n        current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"},{"task_id":"HumanEval_7","nl":"asm_Beng","pl":"rb","prompt":"কেৱল নিৰ্দিষ্ট উপশ্ৰেণী থকা শাৰীবোৰৰ বাবেহে ইনপুট শাৰী ফিল্টাৰ কৰক ।# >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"]\ndef filter_by_substring(strings, substring)\n","canonical_solution":"def filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"},{"task_id":"HumanEval_8","nl":"asm_Beng","pl":"rb","prompt":"খালী যোগফলটো 0 আৰু খালী উৎপাদিতটো 1 হ'ব লাগে।এটা অখণ্ড সংখ্যাৰ অ্যারেৰ বাবে, এটা অখণ্ড সংখ্যাৰ অ্যারেৰ যোগফল আৰু উৎপাদনৰ পৰা এটা অখণ্ড সংখ্যাৰ অ্যারে ঘূৰাই দিব.# >>> sum_product.call([])\n# [0, 1]\n# >>> sum_product.call([1, 2, 3, 4])\n# [10, 24]\ndef sum_product(numbers)\n","canonical_solution":"def sum_product(numbers)\n  sum = numbers.reduce(0, :+)\n  product = numbers.reduce(1, :*)\n  [sum, product]\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_product\n    candidate = method(:sum_product)\n    assert_equal([0, 1], candidate.call([]))\n    assert_equal([3, 1], candidate.call([1, 1, 1]))\n    assert_equal([100, 0], candidate.call([100, 0]))\n    assert_equal([15, 105], candidate.call([3, 5, 7]))\n    assert_equal([10, 10], candidate.call([10]))\n  end\nend\n"},{"task_id":"HumanEval_9","nl":"asm_Beng","pl":"rb","prompt":"ক্ৰম অনুসাৰে।এটা নিৰ্দিষ্ট সংখ্যাৰ এৰেজৰ পৰা, এটা নিৰ্দিষ্ট মুহূৰ্তলৈকে পোৱা ৰোলিং সৰ্বাধিক উপাদানৰ এৰেজ সৃষ্টি কৰা ।# >>> rolling_max.call([1, 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n","canonical_solution":"def rolling_max(numbers)\n  max_so_far = numbers.first\n  numbers.map do |num|\n    max_so_far = [max_so_far, num].max\n  end\nend\n\n# Example usage:\n# puts rolling_max([1, 2, 3, 2, 3, 4, 2]).inspect","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"},{"task_id":"HumanEval_10","nl":"asm_Beng","pl":"rb","prompt":"- ষ্ট্ৰিংৰ শেষত এটা ষ্ট্ৰিং উপসৰ্গ সংলগ্ন কৰক যিটো পলিণ্ড্ৰোমিক উপসৰ্গৰ আগতে আহে।- এটা পলিণ্ড্ৰ'ম থকা যোগান ধৰা স্ট্ৰিংৰ দীৰ্ঘতম পোষ্টফিক্সটো বিচাৰি উলিওৱা ।অ্যালগৰিদমৰ ধাৰণাটো সহজঃএটা যোগান ধৰা স্ট্ৰিংৰ সৈতে আৰম্ভ হোৱা আটাইতকৈ সৰু পালিনড্ৰমটো বিচাৰি উলিওৱা।# >>> make_palindrome.call(\"\")\n# \"\"\n# >>> make_palindrome.call(\"cat\")\n# \"catac\"\n# >>> make_palindrome.call(\"cata\")\n# \"catac\"\ndef make_palindrome(string)\n","canonical_solution":"def make_palindrome(string)\n  return string if string.empty?\n\n  def is_palindrome?(s)\n    s == s.reverse\n  end\n\n  (0...string.length).reverse_each do |i|\n    if is_palindrome?(string[i..-1])\n      return string + string[0...i].reverse\n    end\n  end\n\n  string\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\", candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n"},{"task_id":"HumanEval_11","nl":"asm_Beng","pl":"rb","prompt":"এই ইনপুটসমূহত বাইনেৰী XOR প্ৰদৰ্শন কৰক আৰু ফলাফলটো এটা ষ্ট্ৰিং হিচাপেও ঘূৰাই দিয়ক।ইনপুট দুটা ষ্ট্ৰিং a আৰু b য'ত কেৱল 1s আৰু 0s থাকে।# >>> string_xor.call(\"010\", \"110\")\n# \"100\"\ndef string_xor(a, b)\n","canonical_solution":"def string_xor(a, b)\n  result = \"\"\n  a.length.times do |i|\n    result << (a[i] == b[i] ? \"0\" : \"1\")\n  end\n  result\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_xor\n    candidate = method(:string_xor)\n    assert_equal(\"010010\", candidate.call(\"111000\", \"101010\"))\n    assert_equal(\"0\", candidate.call(\"1\", \"1\"))\n    assert_equal(\"0101\", candidate.call(\"0101\", \"0000\"))\n  end\nend\n"},{"task_id":"HumanEval_12","nl":"asm_Beng","pl":"rb","prompt":"একে দীঘল শাৰী। যদি ইনপুট এৰে খালী হয় তেন্তে nil ঘূৰাই দিব।এটা অংকন সূত্ৰৰ ভিতৰত দীৰ্ঘতমটো ঘূৰাই দিব. বহুতো অংকন সূত্ৰৰ ক্ষেত্ৰত প্ৰথমটো ঘূৰাই দিব.# >>> longest.call([])\n# nil\n# >>> longest.call([\"a\", \"b\", \"c\"])\n# \"a\"\n# >>> longest.call([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\ndef longest(strings)\n","canonical_solution":"def longest(strings)\n  return nil if strings.empty?\n  strings.max_by(&:length)\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_longest\n    candidate = method(:longest)\n    assert_equal(nil, candidate.call([]))\n    assert_equal(\"x\", candidate.call([\"x\", \"y\", \"z\"]))\n    assert_equal(\"zzzz\", candidate.call([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]))\n  end\nend\n"},{"task_id":"HumanEval_13","nl":"asm_Beng","pl":"rb","prompt":"দুটা পূৰ্ণসংখ্যাৰ a আৰু b ৰ সৰ্ববৃহৎ সাধাৰণ বিভাজক ঘূৰাই দিয়া ।# >>> greatest_common_divisor.call(3, 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a, b)\n","canonical_solution":"def greatest_common_divisor(a, b)\n  while b != 0\n    a, b = b, a % b\n  end\n  a\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"},{"task_id":"HumanEval_14","nl":"asm_Beng","pl":"rb","prompt":"ইনপুট ষ্ট্ৰিংৰ আটাইতকৈ সৰুৰ পৰা দীঘললৈ সকলো উপসৰ্গৰ এৰেজ ঘূৰাই আনে# >>> all_prefixes.call(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\ndef all_prefixes(string)\n","canonical_solution":"def all_prefixes(string)\n  (1..string.length).map { |i| string[0, i] }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"},{"task_id":"HumanEval_15","nl":"asm_Beng","pl":"rb","prompt":"0 ৰ পৰা n লৈকে অন্তৰ্ভুক্ত স্থান-সীমাবদ্ধ সংখ্যা থকা এটা স্ট্ৰিং ঘূৰাই আনে।# >>> string_sequence.call(0)\n# \"0\"\n# >>> string_sequence.call(5)\n# \"0 1 2 3 4 5\"\ndef string_sequence(n)\n","canonical_solution":"def string_sequence(n)\n  (0..n).to_a.join(' ')\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_sequence\n    candidate = method(:string_sequence)\n    assert_equal(\"0\", candidate.call(0))\n    assert_equal(\"0 1 2 3\", candidate.call(3))\n    assert_equal(\"0 1 2 3 4 5 6 7 8 9 10\", candidate.call(10))\n  end\nend\n"},{"task_id":"HumanEval_16","nl":"asm_Beng","pl":"rb","prompt":"এটা ষ্ট্ৰিং দিয়া হৈছে, কত পৃথক বৰ্ণ (কোনো কেচ নাথাকিলেও) ইয়াত আছে জানক।# >>> count_distinct_characters.call(\"xyzXYZ\")\n# 3\n# >>> count_distinct_characters.call(\"Jerry\")\n# 4\ndef count_distinct_characters(string)\n","canonical_solution":"def count_distinct_characters(string)\n  string.downcase.chars.uniq.count\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n    assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"},{"task_id":"HumanEval_17","nl":"asm_Beng","pl":"rb","prompt":"'হ'ব' - কোয়াৰ্টাৰ নোট, এটা বীট থাকে'অ' হ'ব' - আধা নোট, দুটা বীট থাকে।'অ' - সম্পূৰ্ণ নোট, চাৰিটা বীট থাকে।ইয়াত এটা কিংবদন্তি আছে:শেষৰটো নহয়।আপোনাৰ কাম হৈছে এই শাৰীটো বিশ্লেষণ কৰা আৰু প্ৰত্যেকটো কিমান বীট কৰে তাৰ সৈতে সামঞ্জস্য থকা পূৰ্ণসংখ্যাৰ এৰেজ ঘূৰাই দিয়া ।এই ফাংচনৰ ইনপুট হৈছে এটা বিশেষ ASCII ফৰ্মেটত সংগীত নোট প্ৰতিনিধিত্ব কৰা এটা শাৰী।# >>> parse_music.call(\"o o| .| o| o| .| .| .| .| o o\")\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n","canonical_solution":"def parse_music(music_string)\n  # Split the input string into individual notes.\n  notes = music_string.split\n\n  # Map each note to its corresponding number of beats.\n  notes.map do |note|\n    case note\n    when 'o'\n      4\n    when 'o|'\n      2\n    when '.|'\n      1\n    else\n      0\n    end\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"},{"task_id":"HumanEval_18","nl":"asm_Beng","pl":"rb","prompt":"এটা নিৰ্দিষ্ট ছাবষ্ট্ৰিংৰ প্ৰাথমিক ষ্ট্ৰিংত কিমানবাৰ পোৱা যায় বিচাৰক। ওভাৰল্যাপিং কেচবোৰ গণনা কৰক।# >>> how_many_times.call(\"\", \"a\")\n# 0\n# >>> how_many_times.call(\"aaa\", \"a\")\n# 3\n# >>> how_many_times.call(\"aaaa\", \"aa\")\n# 3\ndef how_many_times(string, substring)\n","canonical_solution":"def how_many_times(string, substring)\n  return 0 if substring.empty?\n  count = 0\n  i = 0\n  while i <= string.length - substring.length\n    if string[i, substring.length] == substring\n      count += 1\n    end\n    i += 1\n  end\n  count\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"john doe\", \"john\"))\n  end\nend\n"},{"task_id":"HumanEval_19","nl":"asm_Beng","pl":"rb","prompt":"সৰুৰ পৰা ডাঙৰলৈ শাৰীবদ্ধ কৰা সংখ্যাৰে সৈতে শাৰী ঘূৰাই আনে ।বৈধ বিকল্পসমূহ হৈছে 'শূন্য', 'এটা', 'দুটা', 'তিনি', 'চাৰি', 'পাঁচ', 'ছয়', 'সাত', 'আঠ' আৰু 'নয়'।ইনপুট হৈছে 'শূন্য'ৰ পৰা 'ন'লৈ সংখ্যাসমূহৰ এটা স্থান-সীমাবদ্ধ শৃংখলা।# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\ndef sort_numbers(numbers)\n","canonical_solution":"def sort_numbers(numbers)\n  numeral_map = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n\n  number_words = numbers.split\n  sorted_numbers = number_words.sort_by { |word| numeral_map[word] }\n  sorted_numbers.join(' ')\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"},{"task_id":"HumanEval_20","nl":"asm_Beng","pl":"rb","prompt":"বাকীবোৰ ক্ৰম অনুসাৰে ঘূৰাই দিয়ক (সৰু সংখ্যা, ডাঙৰ সংখ্যা) ।এটা যোগান ধৰা সংখ্যাৰ এৰেজ (অন্তত দুটাৰ দৈৰ্ঘ্যৰ) ৰ পৰা প্ৰতিটো সংখ্যাৰ সৰ্বাধিক কাষৰ দুটা নিৰ্বাচন কৰি উভতাই দিব # >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n# [2.0, 2.2]\n# >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# [2.0, 2.0]\ndef find_closest_elements(numbers)\n","canonical_solution":"def find_closest_elements(numbers)\n  sorted_numbers = numbers.sort\n  closest_pair = [sorted_numbers[0], sorted_numbers[1]]\n  min_difference = (sorted_numbers[1] - sorted_numbers[0]).abs\n\n  (1...(sorted_numbers.length - 1)).each do |i|\n    current_difference = (sorted_numbers[i + 1] - sorted_numbers[i]).abs\n    if current_difference < min_difference\n      min_difference = current_difference\n      closest_pair = [sorted_numbers[i], sorted_numbers[i + 1]]\n    end\n  end\n\n  closest_pair\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"},{"task_id":"HumanEval_21","nl":"asm_Beng","pl":"rb","prompt":"এনেদৰে সৰু সংখ্যাৰ সংখ্যাটো হ'ব 0 আৰু ডাঙৰ সংখ্যাৰ সংখ্যাটো হ'ব 1 ।সংখ্যাৰ এটা অ্যারে (অন্তত দুটা উপাদানৰ), দিয়া হৈছে, সেই অ্যারেৰ এটা ৰেখীয় পৰিবৰ্তন প্ৰয়োগ কৰক, # >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n","canonical_solution":"def rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n  range = max - min\n  return numbers.map { |num| (num - min) \/ range.to_f }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n"},{"task_id":"HumanEval_22","nl":"asm_Beng","pl":"rb","prompt":"কেৱল পূৰ্ণসংখ্যাৰ বাবে যিকোনো rbthon মানৰ দিয়া এৰেজ ফিল্টাৰ কৰক ।# >>> filter_integers.call([\"a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n# [1, 2, 3]\ndef filter_integers(values)\n","canonical_solution":"def filter_integers(values)\n  values.select { |value| value.is_a?(Integer) }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"},{"task_id":"HumanEval_23","nl":"asm_Beng","pl":"rb","prompt":"প্ৰদান কৰা স্ট্ৰিংৰ ৰিটাৰ্ণ দৈৰ্ঘ্য # >>> strlen.call(\"\")\n# 0\n# >>> strlen.call(\"abc\")\n# 3\ndef strlen(string)\n","canonical_solution":"strlen = lambda do |string|\n  string.length\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strlen\n    candidate = method(:strlen)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(1, candidate.call(\"x\"))\n    assert_equal(9, candidate.call(\"asdasnakj\"))\n  end\nend\n"},{"task_id":"HumanEval_24","nl":"asm_Beng","pl":"rb","prompt":"এটা নিৰ্দিষ্ট সংখ্যাৰ বাবে, আটাইতকৈ ডাঙৰ সংখ্যাটো বিচাৰক যি n ৰ সমান ভাঙি, n ৰ পৰা সৰু।# >>> largest_divisor.call(15)\n# 5\ndef largest_divisor(n)\n","canonical_solution":"def largest_divisor(n)\n  (n - 1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"},{"task_id":"HumanEval_25","nl":"asm_Beng","pl":"rb","prompt":"ইনপুট নম্বৰটো সকলো কাৰকৰ উৎপাদনৰ সমান হ'ব লাগে।প্ৰতিটো কাৰকক গুণন পদ্ধতিত কিমানবাৰ দেখা যায় তাৰ অনুপাতে সংখ্যা বৰ্গ কৰি দিয়া উচিত।এটা অখণ্ড সংখ্যাৰ অগ্ৰগণ্য কাৰকসমূহৰ সৰুৰ পৰা ডাঙৰলৈ ক্ৰম অনুসাৰে অংকন কৰা সমষ্টিটো ঘূৰাই আনে।# >>> factorize.call(8)\n# [2, 2, 2]\n# >>> factorize.call(25)\n# [5, 5]\n# >>> factorize.call(70)\n# [2, 5, 7]\ndef factorize(n)\n","canonical_solution":"def factorize(n)\n  factors = []\n  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n      n \/= divisor\n    end\n    divisor += 1\n  end\n  factors\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n"},{"task_id":"HumanEval_26","nl":"asm_Beng","pl":"rb","prompt":"ইনপুটৰ দৰে এলিমেণ্টৰ ক্ৰমটো একেই ৰাখক।এটা সম্পূৰ্ণ সংখ্যাৰ সজ্জাত, এটাতকৈ অধিকবাৰ হোৱা সকলোবোৰ উপাদান আঁতৰাওক।# >>> remove_duplicates.call([1, 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n","canonical_solution":"def remove_duplicates(numbers)\n  numbers.select { |num| numbers.count(num) == 1 }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"},{"task_id":"HumanEval_27","nl":"asm_Beng","pl":"rb","prompt":"এটা নিৰ্দিষ্ট শাৰী বাবে, সৰু আখৰবোৰ ডাঙৰ আখৰলৈ আৰু ডাঙৰ আখৰবোৰ সৰু আখৰলৈ ঘূৰাই দিয়ক।# >>> flip_case.call(\"Hello\")\n# \"hELLO\"\ndef flip_case(string)\n","canonical_solution":"def flip_case(string)\n  string.swapcase\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_flip_case\n    candidate = method(:flip_case)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"hELLO!\", candidate.call(\"Hello!\"))\n    assert_equal(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\", candidate.call(\"These violent delights have violent ends\"))\n  end\nend\n"},{"task_id":"HumanEval_28","nl":"asm_Beng","pl":"rb","prompt":"এটা এটা ষ্ট্ৰিংত ষ্ট্ৰিংৰ সংমিশ্ৰণ কৰক# >>> concatenate.call([])\n# \"\"\n# >>> concatenate.call([\"a\", \"b\", \"c\"])\n# \"abc\"\ndef concatenate(strings)\n","canonical_solution":"def concatenate(strings)\n  strings.join\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_concatenate\n    candidate = method(:concatenate)\n    assert_equal(\"\", candidate.call([]))\n    assert_equal(\"xyz\", candidate.call([\"x\", \"y\", \"z\"]))\n    assert_equal(\"xyzwk\", candidate.call([\"x\", \"y\", \"z\", \"w\", \"k\"]))\n  end\nend\n"},{"task_id":"HumanEval_29","nl":"asm_Beng","pl":"rb","prompt":"কেৱল এটা নিৰ্দিষ্ট উপসৰ্গৰে আৰম্ভ হোৱা শাৰীবোৰৰ বাবে এটা ইনপুট শাৰী ফিল্টাৰ কৰক।# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings, prefix)\n","canonical_solution":"def filter_by_prefix(strings, prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"},{"task_id":"HumanEval_30","nl":"asm_Beng","pl":"rb","prompt":"কেৱল ধনাত্মক সংখ্যাবোৰহে ৰিটাৰ্ণ কৰে।# >>> get_positive.call([-1, 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n","canonical_solution":"get_positive = lambda do |l|\n  l.select { |num| num > 0 }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4, 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3, 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([], candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\nend\n"},{"task_id":"HumanEval_31","nl":"asm_Beng","pl":"rb","prompt":"এটা অংক অংক হ'লে সত্য আৰু অন্যথা মিছা উভতাই দিব।# >>> is_prime.call(6)\n# false\n# >>> is_prime.call(101)\n# true\n# >>> is_prime.call(11)\n# true\n# >>> is_prime.call(13441)\n# true\n# >>> is_prime.call(61)\n# true\n# >>> is_prime.call(4)\n# false\n# >>> is_prime.call(1)\n# false\ndef is_prime(n)\n","canonical_solution":"is_prime = lambda do |n|\n  return false if n <= 1\n  return true if n == 2\n  return false if n.even?\n\n  max_divisor = Math.sqrt(n).to_i\n  (3..max_divisor).step(2).each do |i|\n    return false if n % i == 0\n  end\n\n  true\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_prime\n    candidate = method(:is_prime)\n    assert_equal(false, candidate.call(6))\n    assert_equal(true, candidate.call(101))\n    assert_equal(true, candidate.call(11))\n    assert_equal(true, candidate.call(13441))\n    assert_equal(true, candidate.call(61))\n    assert_equal(false, candidate.call(4))\n    assert_equal(false, candidate.call(1))\n    assert_equal(true, candidate.call(5))\n    assert_equal(true, candidate.call(11))\n    assert_equal(true, candidate.call(17))\n    assert_equal(false, candidate.call(85))\n    assert_equal(false, candidate.call(77))\n    assert_equal(false, candidate.call(255379))\n  end\nend\n"},{"task_id":"HumanEval_33","nl":"asm_Beng","pl":"rb","prompt":"এই সূচকসমূহক 'l'ৰ সৈতে মিলোৱা হয়, কিন্তু এই সূচকসমূহক পৃথকভাৱে ভাগ কৰা হয়।l' হ'ল l ৰ সৈতে একে, যিটো সূচকবোৰ তিনিটাৰে বিভাজ্য নহয়, কিন্তু যিটো সূচকবোৰ তিনিটাৰে বিভাজ্য তাৰ মানবোৰ সমান এই ফাংশনটোৱে এটা এৰেজ লয় আৰু এটা এৰেজ ঘূৰাই আনে l' যেনে # >>> sort_third.call([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_third.call([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4, 8, 9, 5]\ndef sort_third(l)\n","canonical_solution":"def sort_third(l)\n  divisible_by_three = l.each_with_index.select { |_, idx| idx % 3 == 0 }.map(&:first).sort\n  l.each_with_index.map { |val, idx| idx % 3 == 0 ? divisible_by_three.shift : val }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_third\n    candidate = method(:sort_third)\n    assert_equal([2, 6, 3, 4, 8, 9, 5], candidate.call([5, 6, 3, 4, 8, 9, 2]))\n    assert_equal([2, 8, 3, 4, 6, 9, 5], candidate.call([5, 8, 3, 4, 6, 9, 2]))\n    assert_equal([2, 6, 9, 4, 8, 3, 5], candidate.call([5, 6, 9, 4, 8, 3, 2]))\n    assert_equal([2, 6, 3, 4, 8, 9, 5, 1], candidate.call([5, 6, 3, 4, 8, 9, 2, 1]))\n  end\nend\n"},{"task_id":"HumanEval_34","nl":"asm_Beng","pl":"rb","prompt":"এটা সজ্জাত শৃংখলিত অনন্য উপাদানৰ সমল ঘূৰাই আনে# >>> unique.call([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\ndef unique(l)\n","canonical_solution":"def unique(l)\n  l.uniq.sort\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique\n    candidate = method(:unique)\n    assert_equal([0, 2, 3, 5, 9, 123], candidate.call([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n  end\nend\n"},{"task_id":"HumanEval_35","nl":"asm_Beng","pl":"rb","prompt":"অংকনক্ষেত্ৰৰ সৰ্বোচ্চ উপাদান ঘূৰাই আনে।# >>> max_element.call([1, 2, 3])\n# 3\n# >>> max_element.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\ndef max_element(l)\n","canonical_solution":"def max_element(l)\n  l.max\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_element\n    candidate = method(:max_element)\n    assert_equal(3, candidate.call([1, 2, 3]))\n    assert_equal(124, candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]))\n  end\nend\n"},{"task_id":"HumanEval_36","nl":"asm_Beng","pl":"rb","prompt":"11 বা 13 ৰ দ্বাৰা বিভাজ্য n ৰ কম সংখ্যক পূৰ্ণ সংখ্যাত 7 সংখ্যাটো প্ৰকাশ হোৱা বাৰ সংখ্যাটো ঘূৰাই দিয়ক।# >>> fizz_buzz.call(50)\n# 0\n# >>> fizz_buzz.call(78)\n# 2\n# >>> fizz_buzz.call(79)\n# 3\ndef fizz_buzz(n)\n","canonical_solution":"def fizz_buzz(n)\n  count = 0\n  (1...n).each do |i|\n    if i % 11 == 0 || i % 13 == 0\n      count += i.to_s.count('7')\n    end\n  end\n  count\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fizz_buzz\n    candidate = method(:fizz_buzz)\n    assert_equal(0, candidate.call(50))\n    assert_equal(2, candidate.call(78))\n    assert_equal(3, candidate.call(79))\n    assert_equal(3, candidate.call(100))\n    assert_equal(6, candidate.call(200))\n    assert_equal(192, candidate.call(4000))\n    assert_equal(639, candidate.call(10000))\n    assert_equal(8026, candidate.call(100000))\n  end\nend\n"},{"task_id":"HumanEval_37","nl":"asm_Beng","pl":"rb","prompt":"l ৰ জোৰা সূচকৰ মানসমূহলৈ, কিন্তু ছাৰ্ট কৰা হৈছে।l' অদ্ভুত সূচকৰ ক্ষেত্ৰত l ৰ সৈতে একে, যদিও জোৰা সূচকৰ ক্ষেত্ৰত ইয়াৰ মান সমান হয়।এই ফাংশনটোৱে এটা এৰেজ লয় আৰু এটা এৰেজ ঘূৰাই আনে l' যেনে # >>> sort_even.call([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_even.call([5, 6, 3, 4])\n# [3, 6, 5, 4]\ndef sort_even(l)\n","canonical_solution":"def sort_even(l)\n  even_indices = l.each_index.select { |i| i.even? }\n  even_values = even_indices.map { |i| l[i] }.sort\n  \n  even_index = 0\n  l.each_with_index.map do |value, index|\n    if index.even?\n      even_values[even_index].tap { even_index += 1 }\n    else\n      value\n    end\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_even\n    candidate = method(:sort_even)\n    assert_equal([1, 2, 3], candidate.call([1, 2, 3]))\n    assert_equal([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123], candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10], candidate.call([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n  end\nend\n"},{"task_id":"HumanEval_39","nl":"asm_Beng","pl":"rb","prompt":"prime_fib n-তম সংখ্যাক উভতাই দিয়ে যিটো এটা ফিব'নাচি সংখ্যা আৰু ইও এটা অগ্ৰগণ্য সংখ্যা।# >>> prime_fib.call(1)\n# 2\n# >>> prime_fib.call(2)\n# 3\n# >>> prime_fib.call(3)\n# 5\n# >>> prime_fib.call(4)\n# 13\n# >>> prime_fib.call(5)\n# 89\ndef prime_fib(n)\n","canonical_solution":"def prime_fib(n)\n  require 'prime'\n  \n  fibs = Enumerator.new do |y|\n    a, b = 0, 1\n    loop do\n      a, b = b, a + b\n      y << b\n    end\n  end\n  \n  prime_fibs = fibs.lazy.select { |fib| Prime.prime?(fib) }\n  prime_fibs.first(n).last\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_fib\n    candidate = method(:prime_fib)\n    assert_equal(2, candidate.call(1))\n    assert_equal(3, candidate.call(2))\n    assert_equal(5, candidate.call(3))\n    assert_equal(13, candidate.call(4))\n    assert_equal(89, candidate.call(5))\n    assert_equal(233, candidate.call(6))\n    assert_equal(1597, candidate.call(7))\n    assert_equal(28657, candidate.call(8))\n    assert_equal(514229, candidate.call(9))\n    assert_equal(433494437, candidate.call(10))\n  end\nend\n"},{"task_id":"HumanEval_40","nl":"asm_Beng","pl":"rb","prompt":"মুঠতে শূন্য, আৰু অন্যথা মিছা।যদিহে এটা এৰেজত তিনিটা পৃথক উপাদান আছে যি triples_sum_to_zero এটা অখণ্ড সংখ্যাৰ সজ্জা এটা ইনপুট হিচাপে লয়।# >>> triples_sum_to_zero.call([1, 3, 5, 0])\n# false\n# >>> triples_sum_to_zero.call([1, 3, -2, 1])\n# true\n# >>> triples_sum_to_zero.call([1, 2, 3, 7])\n# false\n# >>> triples_sum_to_zero.call([2, 4, -5, 3, 9, 7])\n# true\n# >>> triples_sum_to_zero.call([1])\n# false\ndef triples_sum_to_zero(l)\n","canonical_solution":"def triples_sum_to_zero(l)\n  n = l.length\n  (0...n-2).each do |i|\n    ((i+1)...n-1).each do |j|\n      ((j+1)...n).each do |k|\n        return true if l[i] + l[j] + l[k] == 0\n      end\n    end\n  end\n  false\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triples_sum_to_zero\n    candidate = method(:triples_sum_to_zero)\n    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, 5, -1]))\n    assert_equal(true, candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2, 3, 7]))\n    assert_equal(false, candidate.call([1, 2, 5, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 9, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(false, candidate.call([1, 3, 5, -100]))\n    assert_equal(false, candidate.call([100, 3, 5, -100]))\n  end\nend\n"},{"task_id":"HumanEval_41","nl":"asm_Beng","pl":"rb","prompt":"এই ফাংশনে এনে সংঘৰ্ষৰ সংখ্যা আউটপুট কৰে।তেওঁলোকৰ গতিপথত যেন তেওঁলোক সংঘৰ্ষত নপৰে।কিন্তু এই গাড়ীবোৰ অসীম শক্তিশালী আৰু শক্তিশালী, যাৰ ফলত ইবোৰ চলিয়েই থাকে।যেতিয়া এখন গাড়ী বাওঁৰ পৰা সোঁলৈ গৈ আছে তেতিয়া এটা গাড়ী সোঁৰ পৰা বাওঁলৈ গৈ আছে তেতিয়া ই খুন্দা মাৰে।সকলো গাড়ী একেই গতিত গতি কৰে। দুইখন গাড়ী সংঘৰ্ষ হয় বুলি কোৱা হয়।এই দুটা গাড়ীৰ দলটো আৰম্ভ হয় বহু দূৰৈৰ পৰা।n গাড়ী বামৰ পৰা সোঁলৈ চলিব; একে সময়তে, n গাড়ীসমূহৰ এটা বেলেগ ছেট।এটা পথ কল্পনা কৰক যিটো সম্পূৰ্ণৰূপে সৰল, অসীম দীঘল ৰেখা।def car_race_collision(n)\n","canonical_solution":"def car_race_collision(n)\n  n\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_car_race_collision\n    candidate = method(:car_race_collision)\n    assert_equal(4, candidate.call(2))\n    assert_equal(9, candidate.call(3))\n    assert_equal(16, candidate.call(4))\n    assert_equal(64, candidate.call(8))\n    assert_equal(100, candidate.call(10))\n  end\nend\n"},{"task_id":"HumanEval_42","nl":"asm_Beng","pl":"rb","prompt":"১ যোগ কৰি থকা উপাদানসমূহৰ সৈতে এটা এৰেজ ঘূৰাই আনে।# >>> incr_list.call([1, 2, 3])\n# [2, 3, 4]\n# >>> incr_list.call([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4, 10, 1, 124]\ndef incr_list(l)\n","canonical_solution":"def incr_list(l)\n  l.map { |x| x + 1 }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_incr_list\n    candidate = method(:incr_list)\n    assert_equal([], candidate.call([]))\n    assert_equal([4, 3, 2], candidate.call([3, 2, 1]))\n    assert_equal([6, 3, 6, 3, 4, 4, 10, 1, 124], candidate.call([5, 2, 5, 2, 3, 3, 9, 0, 123]))\n  end\nend\n"},{"task_id":"HumanEval_43","nl":"asm_Beng","pl":"rb","prompt":"মুঠতে শূন্য, আৰু অন্যথা মিছা।যদিহে দুটা পৃথক উপাদান আছে, তেন্তে ই true ঘূৰাই দিয়ে।pairs_sum_to_zero এ এটা অখণ্ড সংখ্যাৰ এৰে ইনপুট হিচাপে গ্ৰহণ কৰে।# >>> pairs_sum_to_zero.call([1, 3, 5, 0])\n# false\n# >>> pairs_sum_to_zero.call([1, 3, -2, 1])\n# false\n# >>> pairs_sum_to_zero.call([1, 2, 3, 7])\n# false\n# >>> pairs_sum_to_zero.call([2, 4, -5, 3, 5, 7])\n# true\n# >>> pairs_sum_to_zero.call([1])\n# false\ndef pairs_sum_to_zero(l)\n","canonical_solution":"def pairs_sum_to_zero(l)\n  num_set = l.to_set\n  l.each do |num|\n    return true if num != 0 && num_set.include?(-num)\n  end\n  false\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\nend\n"},{"task_id":"HumanEval_44","nl":"asm_Beng","pl":"rb","prompt":"মৌলৰ সংখ্যা ১০ তকৈ কম।ৰূপান্তৰ কৰাৰ পিছত ৰিটাৰ্ণ ষ্ট্ৰিং প্ৰতিনিধিত্ব।ইনপুট নম্বৰ x ৰ সংখ্যাসূচক ভিত্তিটো ভিত্তিলৈ পৰিবৰ্তন কৰক।# >>> change_base.call(8, 3)\n# \"22\"\n# >>> change_base.call(8, 2)\n# \"1000\"\n# >>> change_base.call(7, 2)\n# \"111\"\ndef change_base(x, base)\n","canonical_solution":"def change_base(x, base)\n  return '0' if x == 0\n  digits = []\n  while x > 0\n    digits << (x % base).to_s\n    x \/= base\n  end\n  digits.reverse.join\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_change_base\n    candidate = method(:change_base)\n    assert_equal(\"22\", candidate.call(8, 3))\n    assert_equal(\"100\", candidate.call(9, 3))\n    assert_equal(\"11101010\", candidate.call(234, 2))\n    assert_equal(\"10000\", candidate.call(16, 2))\n    assert_equal(\"1000\", candidate.call(8, 2))\n    assert_equal(\"111\", candidate.call(7, 2))\n    assert_equal(\"2\", candidate.call(2, 3))\n    assert_equal(\"3\", candidate.call(3, 4))\n    assert_equal(\"4\", candidate.call(4, 5))\n    assert_equal(\"5\", candidate.call(5, 6))\n    assert_equal(\"6\", candidate.call(6, 7))\n    assert_equal(\"7\", candidate.call(7, 8))\n  end\nend\n"},{"task_id":"HumanEval_45","nl":"asm_Beng","pl":"rb","prompt":"এটা ত্ৰিভুজৰ বাবে এটা পক্ষৰ দৈৰ্ঘ্য আৰু উচ্চ ৰিটাৰ্ণ এৰীয়া দিয়া হৈছে।# >>> triangle_area.call(5, 3)\n# 7.5\ndef triangle_area(a, h)\n","canonical_solution":"def triangle_area(a, h)\n  (a * h) \/ 2.0\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(7.5, candidate.call(5, 3))\n    assert_equal(2.0, candidate.call(2, 2))\n    assert_equal(40.0, candidate.call(10, 8))\n  end\nend\n"},{"task_id":"HumanEval_46","nl":"asm_Beng","pl":"rb","prompt":"অনুগ্ৰহ কৰি fib4 সংখ্যা ক্ৰমৰ n-তম উপাদানটো কাৰ্যকৰীভাৱে গণনা কৰিবলৈ এটা ফাংশন লিখক। পুনৰাবৃত্তি ব্যৱহাৰ নকৰিব।fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) ।fib4(3) -> 0 fib4(2) -> 2 fib4(1) -> 0 fib4(0) -> 0 Fib4 সংখ্যা ক্ৰমটো Fibbonacci ক্ৰমৰ সৈতে একে ধৰণৰ ক্ৰম যিটো তলত দিয়া ধৰণে সংজ্ঞায়িত কৰা হৈছে:# >>> fib4.call(5)\n# 4\n# >>> fib4.call(6)\n# 8\n# >>> fib4.call(7)\n# 14\ndef fib4(n)\n","canonical_solution":"def fib4(n)\n  return 0 if n == 0 || n == 1 || n == 3\n  return 2 if n == 2\n\n  fib4_seq = [0, 0, 2, 0]\n  (4..n).each do |i|\n    fib4_seq[i] = fib4_seq[i-1] + fib4_seq[i-2] + fib4_seq[i-3] + fib4_seq[i-4]\n  end\n  fib4_seq[n]\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib4\n    candidate = method(:fib4)\n    assert_equal(4, candidate.call(5))\n    assert_equal(28, candidate.call(8))\n    assert_equal(104, candidate.call(10))\n    assert_equal(386, candidate.call(12))\n  end\nend\n"},{"task_id":"HumanEval_47","nl":"asm_Beng","pl":"rb","prompt":"মেৰুত থকা উপাদানসমূহৰ মধ্যম সংখ্যা ঘূৰাই আনা l. # >>> median.call([3, 1, 2, 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n","canonical_solution":"def median(l)\n  sorted = l.sort\n  len = sorted.length\n  if len.odd?\n    sorted[len \/ 2]\n  else\n    (sorted[len \/ 2 - 1] + sorted[len \/ 2]) \/ 2.0\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"},{"task_id":"HumanEval_48","nl":"asm_Beng","pl":"rb","prompt":"এটা পলিণ্ড্ৰ'ম হ'লে এই ক্ৰমটো পৰীক্ষা কৰে ।# >>> is_palindrome.call(\"\")\n# true\n# >>> is_palindrome.call(\"aba\")\n# true\n# >>> is_palindrome.call(\"aaaaa\")\n# true\n# >>> is_palindrome.call(\"zbcd\")\n# false\ndef is_palindrome(text)\n","canonical_solution":"is_palindrome = lambda do |text|\n  text == text.reverse\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_palindrome\n    candidate = method(:is_palindrome)\n    assert_equal(true, candidate.call(\"\"))\n    assert_equal(true, candidate.call(\"aba\"))\n    assert_equal(true, candidate.call(\"aaaaa\"))\n    assert_equal(false, candidate.call(\"zbcd\"))\n    assert_equal(true, candidate.call(\"xywyx\"))\n    assert_equal(false, candidate.call(\"xywyz\"))\n    assert_equal(false, candidate.call(\"xywzx\"))\n  end\nend\n"},{"task_id":"HumanEval_49","nl":"asm_Beng","pl":"rb","prompt":"2^n modulo p ঘূৰাই আনা (সংখ্যাটোৰ বিষয়ে অৱগত হ'ব) ।# >>> modp.call(3, 5)\n# 3\n# >>> modp.call(1101, 101)\n# 2\n# >>> modp.call(0, 101)\n# 1\n# >>> modp.call(3, 11)\n# 8\n# >>> modp.call(100, 101)\n# 1\ndef modp(n, p)\n","canonical_solution":"def modp(n, p)\n  return 1 if p == 1\n  2.pow(n, p)\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_modp\n    candidate = method(:modp)\n    assert_equal(3, candidate.call(3, 5))\n    assert_equal(2, candidate.call(1101, 101))\n    assert_equal(1, candidate.call(0, 101))\n    assert_equal(8, candidate.call(3, 11))\n    assert_equal(1, candidate.call(100, 101))\n    assert_equal(4, candidate.call(30, 5))\n    assert_equal(3, candidate.call(31, 5))\n  end\nend\n"},{"task_id":"HumanEval_51","nl":"asm_Beng","pl":"rb","prompt":"remove_vowels এটা ফাংচন যি শাৰী লয় আৰু স্বৰবৰ্ণবিহীন শাৰী ঘূৰাই আনে।# >>> remove_vowels.call(\"\")\n# \"\"\n# >>> remove_vowels.call(\"abcdef\")\n# \"bcdf\"\n# >>> remove_vowels.call(\"aaaaa\")\n# \"\"\n# >>> remove_vowels.call(\"aaBAA\")\n# \"B\"\n# >>> remove_vowels.call(\"zbcd\")\n# \"zbcd\"\ndef remove_vowels(text)\n","canonical_solution":"def remove_vowels(text)\n  text.delete('aeiouAEIOU')\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_vowels\n    candidate = method(:remove_vowels)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"bcdf\nghjklm\", candidate.call(\"abcdef\nghijklm\"))\n    assert_equal(\"fdcb\", candidate.call(\"fedcba\"))\n    assert_equal(\"\", candidate.call(\"eeeee\"))\n    assert_equal(\"cB\", candidate.call(\"acBAA\"))\n    assert_equal(\"cB\", candidate.call(\"EcBOO\"))\n    assert_equal(\"ybcd\", candidate.call(\"ybcd\"))\n  end\nend\n"},{"task_id":"HumanEval_52","nl":"asm_Beng","pl":"rb","prompt":"যদি অংকবোৰ সমতুল্য t তকৈ কম হয় তেন্তে true ৰিটাৰ্ণ কৰক।# >>> below_threshold.call([1, 2, 4, 10], 100)\n# true\n# >>> below_threshold.call([1, 20, 4, 10], 5)\n# false\ndef below_threshold(l, t)\n","canonical_solution":"def below_threshold(l, t)\n  l.all? { |num| num < t }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_below_threshold\n    candidate = method(:below_threshold)\n    assert_equal(true, candidate.call([1, 2, 4, 10], 100))\n    assert_equal(false, candidate.call([1, 20, 4, 10], 5))\n    assert_equal(true, candidate.call([1, 20, 4, 10], 21))\n    assert_equal(true, candidate.call([1, 20, 4, 10], 22))\n    assert_equal(true, candidate.call([1, 8, 4, 10], 11))\n    assert_equal(false, candidate.call([1, 8, 4, 10], 10))\n  end\nend\n"},{"task_id":"HumanEval_53","nl":"asm_Beng","pl":"rb","prompt":"দুটা সংখ্যা x আৰু y যোগ কৰা ।# >>> add.call(2, 3)\n# 5\n# >>> add.call(5, 7)\n# 12\ndef add(x, y)\n","canonical_solution":"add = ->(x, y) { x + y }","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0, 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2, 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7, 5))\n  end\nend\n"},{"task_id":"HumanEval_54","nl":"asm_Beng","pl":"rb","prompt":"দুটা শব্দৰ একে ধৰণৰ বৰ্ণ আছে নে নাই পৰীক্ষা কৰক।# >>> same_chars.call(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n# true\n# >>> same_chars.call(\"abcd\", \"dddddddabc\")\n# true\n# >>> same_chars.call(\"dddddddabc\", \"abcd\")\n# true\n# >>> same_chars.call(\"eabcd\", \"dddddddabc\")\n# false\n# >>> same_chars.call(\"abcd\", \"dddddddabce\")\n# false\n# >>> same_chars.call(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n# false\ndef same_chars(s0, s1)\n","canonical_solution":"def same_chars(s0, s1)\n  s0.chars.uniq.all? { |char| s1.include?(char) } &&\n  s1.chars.uniq.all? { |char| s0.include?(char) }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_same_chars\n    candidate = method(:same_chars)\n    assert_equal(true, candidate.call(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"))\n    assert_equal(true, candidate.call(\"abcd\", \"dddddddabc\"))\n    assert_equal(true, candidate.call(\"dddddddabc\", \"abcd\"))\n    assert_equal(false, candidate.call(\"eabcd\", \"dddddddabc\"))\n    assert_equal(false, candidate.call(\"abcd\", \"dddddddabcf\"))\n    assert_equal(false, candidate.call(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"))\n    assert_equal(false, candidate.call(\"aabb\", \"aaccc\"))\n  end\nend\n"},{"task_id":"HumanEval_55","nl":"asm_Beng","pl":"rb","prompt":"n-তম ফিব'নাচ্চি সংখ্যাটো ঘূৰাই দিয়ক।# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n# 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n","canonical_solution":"def fib(n)\n  return n if n <= 1\n  fib(n - 1) + fib(n - 2)\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"},{"task_id":"HumanEval_56","nl":"asm_Beng","pl":"rb","prompt":"প্ৰত্যেক খোলাৰ ব্ৰেকেটত একেটা বন্ধৰ ব্ৰেকেট থাকিলে true ৰিটাৰ্ণ কৰক।বন্ধনীৰ মাজত \"<\" আৰু \">\" ৰ এটা শাৰী আছে.# >>> correct_bracketing.call(\"<\")\n# false\n# >>> correct_bracketing.call(\"<>\")\n# true\n# >>> correct_bracketing.call(\"<<><>>\")\n# true\n# >>> correct_bracketing.call(\"><<>\")\n# false\ndef correct_bracketing(brackets)\n","canonical_solution":"def correct_bracketing(brackets)\n  balance = 0\n  brackets.chars.each do |char|\n    if char == '<'\n      balance += 1\n    elsif char == '>'\n      balance -= 1\n    end\n    return false if balance < 0\n  end\n  balance == 0\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"},{"task_id":"HumanEval_57","nl":"asm_Beng","pl":"rb","prompt":"সত্য ঘূৰাই দিয়া হ'ল এৰে উপাদানবোৰ এককভাৱে বৃদ্ধি বা হ্ৰাস হৈ আছে।# >>> monotonic.call([1, 2, 4, 20])\n# true\n# >>> monotonic.call([1, 20, 4, 10])\n# false\n# >>> monotonic.call([4, 1, 0, -10])\n# true\ndef monotonic(l)\n","canonical_solution":"def monotonic(l)\n  increasing = true\n  decreasing = true\n\n  (0...l.length - 1).each do |i|\n    if l[i] < l[i + 1]\n      decreasing = false\n    elsif l[i] > l[i + 1]\n      increasing = false\n    end\n  end\n\n  increasing || decreasing\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\nend\n"},{"task_id":"HumanEval_58","nl":"asm_Beng","pl":"rb","prompt":"দুটা এৰেজৰ বাবে ছৰ্ট কৰা অনন্য সাধাৰণ উপাদানসমূহ ঘূৰাই আনে।# >>> common.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n","canonical_solution":"def common(l1, l2)\n  (l1 & l2).uniq.sort\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"},{"task_id":"HumanEval_59","nl":"asm_Beng","pl":"rb","prompt":"n ৰ আটাইতকৈ ডাঙৰ অগ্ৰগণ্য গুণকটো ঘূৰাই দিয়া । n > 1 আৰু এটা অগ্ৰগণ্য নহয় বুলি ধৰি লওক ।# >>> largest_prime_factor.call(13195)\n# 29\n# >>> largest_prime_factor.call(2048)\n# 2\ndef largest_prime_factor(n)\n","canonical_solution":"def largest_prime_factor(n)\n  factor = 2\n  while factor * factor <= n\n    if n % factor == 0\n      n \/= factor\n    else\n      factor += 1\n    end\n  end\n  n\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_prime_factor\n    candidate = method(:largest_prime_factor)\n    assert_equal(5, candidate.call(15))\n    assert_equal(3, candidate.call(27))\n    assert_equal(7, candidate.call(63))\n    assert_equal(11, candidate.call(330))\n    assert_equal(29, candidate.call(13195))\n  end\nend\n"},{"task_id":"HumanEval_60","nl":"asm_Beng","pl":"rb","prompt":"sum_to_n হৈছে এটা ফাংচন যি 1 ৰ পৰা n লৈকে সংখ্যাবোৰৰ যোগফল দিয়ে।# >>> sum_to_n.call(30)\n# 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n# 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n","canonical_solution":"def sum_to_n(n)\n  (1..n).sum\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n  end\nend\n"},{"task_id":"HumanEval_61","nl":"asm_Beng","pl":"rb","prompt":"প্ৰত্যেক খোলাৰ ব্ৰেকেটত একেটা বন্ধৰ ব্ৰেকেট থাকিলে true ৰিটাৰ্ণ কৰক।বন্ধনীৰ মাজত \"(\" আৰু \"\") ৰ এটা শাৰী আছে।# >>> correct_bracketing.call(\"(\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"(()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n","canonical_solution":"def correct_bracketing(brackets)\n  balance = 0\n  brackets.each_char do |char|\n    if char == '('\n      balance += 1\n    elsif char == ')'\n      balance -= 1\n    end\n    return false if balance < 0\n  end\n  balance == 0\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false, candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"(()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false, candidate.call(\"()()(()())()))()\"))\n  end\nend\n"},{"task_id":"HumanEval_62","nl":"asm_Beng","pl":"rb","prompt":"এই বহুপদটোৰ সমানুপাতিক সূত্ৰটো ঘূৰাই দিয়ক।xs[0] + xs[1] * x + xs[2] * x^2 + .... xs হ'ল বহুপদটোৰ সহগ।# >>> derivative.call([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative.call([1, 2, 3])\n# [2, 6]\ndef derivative(xs)\n","canonical_solution":"def derivative(xs)\n  return [] if xs.length < 2\n  xs.each_with_index.map { |coef, index| coef * index }[1..-1]\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_derivative\n    candidate = method(:derivative)\n    assert_equal([1, 4, 12, 20], candidate.call([3, 1, 2, 4, 5]))\n    assert_equal([2, 6], candidate.call([1, 2, 3]))\n    assert_equal([2, 2], candidate.call([3, 2, 1]))\n    assert_equal([2, 2, 0, 16], candidate.call([3, 2, 1, 0, 4]))\n    assert_equal([], candidate.call([1]))\n  end\nend\n"},{"task_id":"HumanEval_63","nl":"asm_Beng","pl":"rb","prompt":"অনুগ্ৰহ কৰি এটা ফাংশন লিখক যিটো ফিবফিব সংখ্যাৰ ক্ৰমৰ n-তম উপাদানটো কাৰ্যকৰীভাৱে গণনা কৰিব।fibfib (n) == fibfib (n-1) + fibfib (n-2) + fibfib (n-3) ।fib fib ((2) == 1 fib fib ((1) == 0 fib fib (০) == ০FibFib সংখ্যা ক্ৰমটো ফিব'নাক্সি ক্ৰমৰ সৈতে একে ধৰণৰ ক্ৰম যিটো তলত দিয়া ধৰণে সংজ্ঞায়িত কৰা হৈছে:# >>> fibfib.call(1)\n# 0\n# >>> fibfib.call(5)\n# 4\n# >>> fibfib.call(8)\n# 24\ndef fibfib(n)\n","canonical_solution":"def fibfib(n)\n  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n\n  a, b, c = 0, 0, 1\n  (3..n).each do\n    a, b, c = b, c, a + b + c\n  end\n  c\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fibfib\n    candidate = method(:fibfib)\n    assert_equal(1, candidate.call(2))\n    assert_equal(0, candidate.call(1))\n    assert_equal(4, candidate.call(5))\n    assert_equal(24, candidate.call(8))\n    assert_equal(81, candidate.call(10))\n    assert_equal(274, candidate.call(12))\n    assert_equal(927, candidate.call(14))\n  end\nend\n"},{"task_id":"HumanEval_64","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃস্বৰবৰ্ণ, কিন্তু কেৱল যেতিয়া ই এটা নিৰ্দিষ্ট শব্দৰ শেষত থাকে।এই ক্ষেত্ৰত স্বৰবৰ্ণবোৰ হ'ল 'a', 'e', 'i', 'o', 'u'। ইয়াত, 'y' হৈছে a এটা শব্দক ইনপুট হিচাপে ব্যৱহাৰ কৰি, শাৰীটোৰ স্বৰবৰ্ণৰ সংখ্যা ঘূৰাই আনে.এটা ফাংচন লিখক য'ত এটা  প্ৰতিনিধিত্ব কৰা এটা  # >>> vowels_count.call(\"abcde\")\n# 2\n# >>> vowels_count.call(\"ACEDY\")\n# 3\ndef vowels_count(s)\n","canonical_solution":"def vowels_count(s)\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  \n  s.chars.each_with_index do |char, index|\n    if vowels.include?(char.downcase)\n      count += 1\n    elsif char.downcase == 'y' && index == s.length - 1\n      count += 1\n    end\n  end\n  \n  count\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_vowels_count\n    candidate = method(:vowels_count)\n    assert_equal(2, candidate.call(\"abcde\"))\n    assert_equal(3, candidate.call(\"Alone\"))\n    assert_equal(2, candidate.call(\"key\"))\n    assert_equal(1, candidate.call(\"bye\"))\n    assert_equal(2, candidate.call(\"keY\"))\n    assert_equal(1, candidate.call(\"bYe\"))\n    assert_equal(3, candidate.call(\"ACEDY\"))\n  end\nend\n"},{"task_id":"HumanEval_65","nl":"asm_Beng","pl":"rb","prompt":"যদি shift > অংক সংখ্যা, তেন্তে অংকবোৰ উলটি দিয়ক।আৰু ফলাফল এটা স্ট্ৰিং হিচাপে ঘূৰাই দিব.বৃত্তীয়ভাৱে x অংকটোৰ অংকবোৰ স্থানান্তৰ কৰক, অংকবোৰ স্থানান্তৰ কৰি সোঁফালে স্থানান্তৰ কৰক।# >>> circular_shift.call(12, 1)\n# \"21\"\n# >>> circular_shift.call(12, 2)\n# \"12\"\ndef circular_shift(x, shift)\n","canonical_solution":"def circular_shift(x, shift)\n  digits = x.to_s.chars\n  num_digits = digits.length\n\n  if shift > num_digits\n    return digits.reverse.join\n  else\n    shift = shift % num_digits\n    shifted_digits = digits.rotate(-shift)\n    return shifted_digits.join\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_circular_shift\n    candidate = method(:circular_shift)\n    assert_equal(\"001\", candidate.call(100, 2))\n    assert_equal(\"12\", candidate.call(12, 2))\n    assert_equal(\"79\", candidate.call(97, 8))\n    assert_equal(\"21\", candidate.call(12, 1))\n    assert_equal(\"11\", candidate.call(11, 101))\n  end\nend\n"},{"task_id":"HumanEval_66","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃASCII কোডসমূহএটা ফাংচন লিখা যি এটা ষ্ট্ৰিংক ইনপুট হিচাপে লয় আৰু কেৱল ওপৰৰ বৰ্ণবোৰৰ যোগফল ঘূৰাই আনে' কাম # >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n","canonical_solution":"def digitSum(s)\n  s.chars.select { |char| char =~ \/[A-Z]\/ }.map(&:ord).sum\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n"},{"task_id":"HumanEval_67","nl":"asm_Beng","pl":"rb","prompt":"ৰহস্যৰ বাবেঃক'ৰবাত ক'ৰবাত থকা আমৰ ফলবোৰৰ সংখ্যা ঘূৰাই দিব।কমলা আৰু আপেল আৰু এটা পূৰ্ণ সংখ্যা যি ফলবোৰৰ মুঠ সংখ্যা প্ৰতিনিধিত্ব কৰে ।আপেল, কমলা আৰু আমৰ ফল দিয়া হৈছে, যিটো  ৰ মুঠ সংখ্যাক প্ৰতিনিধিত্ব কৰে।এই ফলবোৰ এই ফলবোৰত থকা শস্যৰ বাছনিৰ ভিতৰত বিতৰণ কৰা হয়।এই কামত, আপোনাক এটা শাৰী দিয়া হ'ব যি এপল আৰু কমলা সংখ্যাক প্ৰতিনিধিত্ব কৰে।# >>> fruit_distribution.call(\"5 apples and 6 oranges\", 19)\n# 8\n# >>> fruit_distribution.call(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution.call(\"2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution.call(\"100 apples and 1 oranges\", 120)\n# 19\ndef fruit_distribution(s, n)\n","canonical_solution":"def fruit_distribution(s, n)\n  numbers = s.scan(\/\\d+\/).map(&:to_i)\n  apples = numbers[0]\n  oranges = numbers[1]\n  total_fruits = n\n  mangos = total_fruits - (apples + oranges)\n  mangos\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\nend\n"},{"task_id":"HumanEval_68","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণ ১ঃযদি কোনো জোৰা মান নাই বা দিয়া এৰে খালী, ৰিটাৰ্ণ [].পিক কৰা ন'ডটো এটা এৰেজত ঘূৰাই দিব লাগে, [ smalest_value, ইয়াৰ সূচী ], যদি একেটা সৰু মান থকা একাধিক ন'ড পোৱা যায়, তেন্তে ন'ডৰ যিটো আটাইতকৈ সৰু সূচক আছে তাক ঘূৰাই দিব।পিক কৰা নডটো আটাইতকৈ সৰু জোৰা মান থকা নডটো হ'ব লাগে।আপোনাৰ কাম হ'ল এটা ন'ড খুলি লৈ ঘূৰাই দিয়া।\"এটা অংক দিয়া হৈছে যিটো এটা বৃক্ষৰ শাখাক প্ৰতিনিধিত্ব কৰে য'ত অ-নতিবাচক অখণ্ড সংখ্যাৰ ন'ড আছে # >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\ndef pluck(arr)\n","canonical_solution":"def pluck(arr)\n  smallest_even = nil\n  smallest_index = nil\n  \n  arr.each_with_index do |value, index|\n    if value.even?\n      if smallest_even.nil? || value < smallest_even\n        smallest_even = value\n        smallest_index = index\n      end\n    end\n  end\n\n  smallest_even.nil? ? [] : [smallest_even, smallest_index]\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"},{"task_id":"HumanEval_69","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃযদি এনে কোনো মান নাই, তেন্তে -1 ঘূৰাই দিব.এটা পূৰ্ণসংখ্যাৰ সঘনতা হৈছে এৰেজত দেখা পোৱা সংখ্যাৰ সংখ্যা।শূন্য, আৰু ইয়াৰ সঘনতা সম্পূৰ্ণ সংখ্যাৰ মানতকৈ বেছি বা সমান।আপুনি এটা অ-খালি ধনাত্মক পূৰ্ণসংখ্যাৰ অ্যারে দিয়া হৈছে। তকৈ ডাঙৰ আটাইতকৈ ডাঙৰ পূৰ্ণসংখ্যাক ঘূৰাই দিয়ক।# >>> search.call([4, 1, 2, 2, 3, 1])\n# 2\n# >>> search.call([1, 2, 2, 3, 3, 3, 4, 4, 4])\n# 3\n# >>> search.call([5, 5, 4, 4, 4])\n# -1\ndef search(lst)\n","canonical_solution":"def search(lst)\n  freq_hash = lst.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }\n  valid_numbers = freq_hash.select { |num, freq| freq >= num }.keys\n  valid_numbers.empty? ? -1 : valid_numbers.max\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_search\n    candidate = method(:search)\n    assert_equal(1, candidate.call([5, 5, 5, 5, 1]))\n    assert_equal(4, candidate.call([4, 1, 4, 1, 4, 4]))\n    assert_equal(-1, candidate.call([3, 3]))\n    assert_equal(8, candidate.call([8, 8, 8, 8, 8, 8, 8, 8]))\n    assert_equal(2, candidate.call([2, 3, 3, 2, 2]))\n    assert_equal(1, candidate.call([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]))\n    assert_equal(2, candidate.call([3, 2, 8, 2]))\n    assert_equal(1, candidate.call([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]))\n    assert_equal(-1, candidate.call([8, 8, 3, 6, 5, 6, 4]))\n    assert_equal(1, candidate.call([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]))\n    assert_equal(1, candidate.call([1, 9, 10, 1, 3]))\n    assert_equal(5, candidate.call([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]))\n    assert_equal(1, candidate.call([1]))\n    assert_equal(4, candidate.call([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]))\n    assert_equal(2, candidate.call([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]))\n    assert_equal(1, candidate.call([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]))\n    assert_equal(4, candidate.call([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]))\n    assert_equal(4, candidate.call([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]))\n    assert_equal(2, candidate.call([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]))\n    assert_equal(-1, candidate.call([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]))\n    assert_equal(-1, candidate.call([10]))\n    assert_equal(2, candidate.call([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]))\n    assert_equal(1, candidate.call([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]))\n    assert_equal(1, candidate.call([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]))\n    assert_equal(-1, candidate.call([3, 10, 10, 9, 2]))\n  end\nend\n"},{"task_id":"HumanEval_70","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃতাৰ পিছত বাকী থকা পূৰ্ণসংখ্যাৰ সৰ্বোচ্চ, তাৰ পিছত সৰ্বনিম্ন আৰু এনেদৰে।অদ্ভুত শ্ৰেণীবিভাজন, যেতিয়া আপুনি ন্যূনতম মানৰ সৈতে আৰম্ভ কৰে, এটা অখণ্ড সংখ্যাৰ অ্যারে দিয়া হ'লে, অদ্ভুত ক্ৰমত অ্যারে ঘূৰাই দিব.# >>> strange_sort_list.call([1, 2, 3, 4])\n# [1, 4, 2, 3]\n# >>> strange_sort_list.call([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> strange_sort_list.call([])\n# []\ndef strange_sort_list(lst)\n","canonical_solution":"def strange_sort_list(lst)\n  result = []\n  lst.sort!\n  until lst.empty?\n    result << lst.shift\n    result << lst.pop unless lst.empty?\n  end\n  result\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n  end\nend\n"},{"task_id":"HumanEval_71","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃতৃতীয় পক্ষৰ তুলনাত।ত্ৰিপাক্ষই এটা বৈধ ত্ৰিভুজ গঠন কৰে যেতিয়া কোনো দুটা ত্ৰিপাক্ষৰ যোগফল বেছি হয়।অন্যথা -1 ঘূৰি আহিব ।ত্ৰিভুজটো দুটা দশমিক স্থানলৈ ঘূৰণীয়া কৰা হ'ব যদিহে ত্ৰিপাক্ষই এটা বৈধ ত্ৰিভুজ গঠন কৰে।এটা ত্ৰিভুজৰ তিনিটা পক্ষৰ দৈৰ্ঘ্য দিয়া হ'লে,  ৰ ক্ষেত্ৰফল ঘূৰাই দিয়া# >>> triangle_area.call(3, 4, 5)\n# 6.0\n# >>> triangle_area.call(1, 2, 10)\n# -1\ndef triangle_area(a, b, c)\n","canonical_solution":"def triangle_area(a, b, c)\n  # Check for valid triangle\n  if a + b > c && a + c > b && b + c > a\n    # Calculate the semi-perimeter\n    s = (a + b + c) \/ 2.0\n    # Calculate the area using Heron's formula\n    area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    # Round to 2 decimal points\n    return area.round(2)\n  else\n    return -1\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\nend\n"},{"task_id":"HumanEval_72","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃবস্তু q উৰি যাব যদিহে ই ভাৰসাম্যপূৰ্ণ হয় (এয়া এটা পলিণ্ড্ৰোমিক এৰে) আৰু ইয়াৰ উপাদানসমূহৰ যোগফল আটাইতকৈ বেছি বা আটাইতকৈ বেছি সম্ভৱ ওজন w ৰ সমান হয়।এটা ফাংচন লিখা যিটো যদি বস্তু q উৰি যায় সত্য আৰু অন্যথা মিছা উভতাই আনে।# >>> will_it_fly.call([1, 2], 5)\n# false\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> will_it_fly.call([3, 2, 3], 1)\n# false\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly.call([3, 2, 3], 9)\n# true\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> will_it_fly.call([3], 5)\n# true\n# # 3 is less than the maximum possible weight, and it's balanced.\ndef will_it_fly(q, w)\n","canonical_solution":"def will_it_fly(q, w)\n  is_palindrome = q == q.reverse\n  total_weight = q.sum\n  is_balanced_and_under_weight = is_palindrome && total_weight <= w\n  is_balanced_and_under_weight\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_will_it_fly\n    candidate = method(:will_it_fly)\n    assert_equal(true, candidate.call([3, 2, 3], 9))\n    assert_equal(false, candidate.call([1, 2], 5))\n    assert_equal(true, candidate.call([3], 5))\n    assert_equal(false, candidate.call([3, 2, 3], 1))\n    assert_equal(false, candidate.call([1, 2, 3], 6))\n    assert_equal(true, candidate.call([5], 5))\n  end\nend\n"},{"task_id":"HumanEval_73","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃএটা পৰিৱৰ্তনত আপুনি এটা উপাদানক যিকোনো অন্য উপাদানৰ সৈতে পৰিৱৰ্তন কৰিব পাৰে।এটা palindromic array এটা এৰে যিটো এটা এৰেৰ পূৰ্ণসংখ্যাক দিয়া হ'লে,  থকা উপাদানসমূহৰ ন্যূনতম সংখ্যাটো বিচাৰক# >>> smallest_change.call([1, 2, 3, 5, 4, 7, 9, 6])\n# 4\n# >>> smallest_change.call([1, 2, 3, 4, 3, 2, 2])\n# 1\n# >>> smallest_change.call([1, 2, 3, 2, 1])\n# 0\ndef smallest_change(arr)\n","canonical_solution":"def smallest_change(arr)\n  changes = 0\n  left = 0\n  right = arr.length - 1\n\n  while left < right\n    if arr[left] != arr[right]\n      changes += 1\n    end\n    left += 1\n    right -= 1\n  end\n\n  changes\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_smallest_change\n    candidate = method(:smallest_change)\n    assert_equal(4, candidate.call([1, 2, 3, 5, 4, 7, 9, 6]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 3, 2, 2]))\n    assert_equal(1, candidate.call([1, 4, 2]))\n    assert_equal(1, candidate.call([1, 4, 4, 2]))\n    assert_equal(0, candidate.call([1, 2, 3, 2, 1]))\n    assert_equal(0, candidate.call([3, 1, 1, 3]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(1, candidate.call([0, 1]))\n  end\nend\n"},{"task_id":"HumanEval_74","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণসমূহযদি দুয়োটা অক্ষৰ সমসংখ্যক হয়, প্ৰথম অক্ষৰটো ঘূৰাই দিয়া হ'ব।অক্ষৰ সমষ্টিৰ সকলো শাৰী আন অক্ষৰ সমষ্টিতকৈ কম।এটা ফাংচন লিখা যি দুটা শাৰী গ্ৰহণ কৰে আৰু যি শাৰীত  আছে তাক ঘূৰাই দিয়ে# >>> total_match.call([], [])\n# []\n# >>> total_match.call([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n# [\"hI\", \"Hi\"]\n# >>> total_match.call([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n# [\"hi\", \"admin\"]\n# >>> total_match.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n# [\"hI\", \"hi\", \"hi\"]\n# >>> total_match.call([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n# [\"4\"]\ndef total_match(lst1, lst2)\n","canonical_solution":"def total_match(lst1, lst2)\n  total_chars1 = lst1.map(&:length).sum\n  total_chars2 = lst2.map(&:length).sum\n\n  if total_chars1 < total_chars2\n    lst1\n  elsif total_chars2 < total_chars1\n    lst2\n  else\n    lst1\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_total_match\n    candidate = method(:total_match)\n    assert_equal([], candidate.call([], []))\n    assert_equal([\"hi\", \"hi\"], candidate.call([\"hi\", \"admin\"], [\"hi\", \"hi\"]))\n    assert_equal([\"hi\", \"admin\"], candidate.call([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]))\n    assert_equal([\"4\"], candidate.call([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]))\n    assert_equal([\"hI\", \"Hi\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"Hi\"]))\n    assert_equal([\"hI\", \"hi\", \"hi\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]))\n    assert_equal([\"hi\", \"admin\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]))\n    assert_equal([], candidate.call([], [\"this\"]))\n    assert_equal([], candidate.call([\"this\"], []))\n  end\nend\n"},{"task_id":"HumanEval_75","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃ(a) ১০০ তকৈ সৰু বুলি জানিলে।আৰু অন্যথা মিছা।এটা ফাংচন লিখা যিটো true ৰিটাৰ্ণ কৰে যদিহে দিয়া সংখ্যাটো 3টা মৌলিক সংখ্যাৰ গুণন হয় ।# >>> is_multiply_prime.call(30)\n# true\n# 30 = 2 * 3 * 5\ndef is_multiply_prime(a)\n","canonical_solution":"require 'prime'\n\ndef is_multiply_prime(a)\n  return false if a >= 100\n  prime_factors = a.prime_division\n  return true if prime_factors.size == 3 && prime_factors.all? { |_, exponent| exponent == 1 }\n  false\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_multiply_prime\n    candidate = method(:is_multiply_prime)\n    assert_equal(false, candidate.call(5))\n    assert_equal(true, candidate.call(30))\n    assert_equal(true, candidate.call(8))\n    assert_equal(false, candidate.call(10))\n    assert_equal(true, candidate.call(125))\n    assert_equal(true, candidate.call(105))\n    assert_equal(false, candidate.call(126))\n    assert_equal(false, candidate.call(729))\n    assert_equal(false, candidate.call(891))\n    assert_equal(true, candidate.call(1001))\n  end\nend\n"},{"task_id":"HumanEval_76","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃx হৈছে n ৰ এটা সৰল শক্তি যদি n**int=x n ৰ শক্তি আৰু অন্য ক্ষেত্ৰত false।আপোনাৰ কাম হ'ল এটা ফাংচন লিখা যিটো true ৰিটাৰ্ণ কৰে যদি x এটা সৰল সংখ্যা হয়।# >>> is_simple_power.call(1, 4)\n# true\n# >>> is_simple_power.call(2, 2)\n# true\n# >>> is_simple_power.call(8, 2)\n# true\n# >>> is_simple_power.call(3, 2)\n# false\n# >>> is_simple_power.call(3, 1)\n# false\n# >>> is_simple_power.call(5, 3)\n# false\ndef is_simple_power(x, n)\n","canonical_solution":"def is_simple_power(x, n)\n  return false if x <= 0 || n <= 1\n  return true if x == 1\n\n  power = n\n  while power <= x\n    return true if power == x\n    power *= n\n  end\n  false\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_simple_power\n    candidate = method(:is_simple_power)\n    assert_equal(true, candidate.call(16, 2))\n    assert_equal(false, candidate.call(143214, 16))\n    assert_equal(true, candidate.call(4, 2))\n    assert_equal(true, candidate.call(9, 3))\n    assert_equal(true, candidate.call(16, 4))\n    assert_equal(false, candidate.call(24, 2))\n    assert_equal(false, candidate.call(128, 4))\n    assert_equal(false, candidate.call(12, 6))\n    assert_equal(true, candidate.call(1, 1))\n    assert_equal(true, candidate.call(1, 12))\n  end\nend\n"},{"task_id":"HumanEval_77","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃটোকাঃ আপুনি ধাৰণা কৰিব পাৰে যে ইনপুটটো সদায় বৈধ।যদি এই ইনজেগাৰটো কোনো পূৰ্ণসংখ্যাৰ ঘনত্ব হয়।এটা ফাংচন লিখা যি এটা অখণ্ড সংখ্যা a লয় আৰু true ঘুৰাই দিয়ে ।# >>> iscube.call(1)\n# true\n# >>> iscube.call(2)\n# false\n# >>> iscube.call(-1)\n# true\n# >>> iscube.call(64)\n# true\n# >>> iscube.call(0)\n# true\n# >>> iscube.call(180)\n# false\ndef iscube(a)\n","canonical_solution":"def iscube(a)\n  cube_root = a.abs**(1.0\/3)\n  cube_root.round**3 == a\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_iscube\n    candidate = method(:iscube)\n    assert_equal(true, candidate.call(1))\n    assert_equal(false, candidate.call(2))\n    assert_equal(true, candidate.call(-1))\n    assert_equal(true, candidate.call(64))\n    assert_equal(false, candidate.call(180))\n    assert_equal(true, candidate.call(1000))\n    assert_equal(true, candidate.call(0))\n    assert_equal(false, candidate.call(1729))\n  end\nend\n"},{"task_id":"HumanEval_78","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃআৰু চিহ্নবোৰ A,B,C,D,E,F সদায় ডাঙৰ আখৰেৰে লিখা থাকে।টোকাঃ আপুনি ধাৰণা কৰিব পাৰে যে ইনপুটটো সদায় শুদ্ধ বা খালী শাৰী, বি (= দশমিক ১১), ডি (= দশমিক ১৩) ।আপুনি নিম্নলিখিত অংকবোৰৰ এটা সংখ্যা নিৰ্ণয় কৰিব লাগিবঃ 2, 3, 5, 7, মৌলিক সংখ্যাবোৰ হ'ল ২, ৩, ৫, ৭, ১১, ১৩, ১৭,...ষোড়শ সংখ্যাটো হ'ল ০, ১, ২, ৩, ৪, ৫, ৬, ৭, ৮, ৯, এ, বি, চি, ডি, ই, এফ।১তকৈ ডাঙৰ যি দুটা সৰু স্বাভাৱিক সংখ্যাৰ গুণফল নহয়) ।অগনিত সংখ্যা (অগনিত সংখ্যা বা এটা অগনিত সংখ্যা এটা স্বাভাৱিক সংখ্যা)এটা ষোড়শ সংখ্যা এটা শাৰী হিচাপে আৰু ষোড়শ সংখ্যাটো গণনা কৰে ।আপোনাক এটা ফাংচন লিখিবলৈ কোৱা হৈছে যি গ্ৰহণ কৰে ।# >>> hex_key.call(\"AB\")\n# 1\n# >>> hex_key.call(\"1077E\")\n# 2\n# >>> hex_key.call(\"ABED1A33\")\n# 4\n# >>> hex_key.call(\"123456789ABCDEF0\")\n# 6\n# >>> hex_key.call(\"2020\")\n# 2\ndef hex_key(num)\n","canonical_solution":"def hex_key(num)\n  prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n  num.chars.count { |digit| prime_hex_digits.include?(digit) }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_hex_key\n    candidate = method(:hex_key)\n    assert_equal(1, candidate.call(\"AB\"))\n    assert_equal(2, candidate.call(\"1077E\"))\n    assert_equal(4, candidate.call(\"ABED1A33\"))\n    assert_equal(2, candidate.call(\"2020\"))\n    assert_equal(6, candidate.call(\"123456789ABCDEF0\"))\n    assert_equal(12, candidate.call(\"112233445566778899AABBCCDDEEFF00\"))\n  end\nend\n"},{"task_id":"HumanEval_79","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃঅতিৰিক্ত বৰ্ণবোৰ ফৰমেটৰ সহায়ত আছে। শাৰীৰ আৰম্ভণিতে আৰু শেষত অতিৰিক্ত দুটা বৰ্ণ 'db' থাকিব।সংখ্যা। ষ্ট্ৰিংৰ প্ৰতিটো চিহ্ন হ'ব '0' বা '1'।বাইনেৰী বিন্যাস। ফাংশনটোৱে এটা ষ্ট্ৰিং ঘূৰাই দিব লাগে, য'ত প্ৰতিটো বৰ্ণই এটা বাইনেৰী  প্ৰতিনিধিত্ব কৰে।আপুনি এটা সংখ্যাক দশমিক আকাৰত পাব আৰু আপোনাৰ কাম হ'ব ইয়াক লৈ ৰূপান্তৰ কৰা।# >>> decimal_to_binary.call(15)\n# \"db1111db\"\n# >>> decimal_to_binary.call(32)\n# \"db100000db\"\ndef decimal_to_binary(decimal)\n","canonical_solution":"def decimal_to_binary(decimal)\n  \"db\" + decimal.to_s(2) + \"db\"\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"},{"task_id":"HumanEval_80","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃএটা শাৰী haprb হয় যদি ইয়াৰ দৈৰ্ঘ্য কমেও 3 হয় আৰু প্ৰত্যেক 3টা ক্ৰমাগত আখৰ পৃথক হয় ।আপোনাৰ কাম হ'ল ষ্ট্ৰিংটো haprb হয় নে নহয় পৰীক্ষা কৰা।আপোনাক এটা ষ্ট্ৰিং দিয়া হৈছে।# >>> is_happy.call(\"a\")\n# false\n# >>> is_happy.call(\"aa\")\n# false\n# >>> is_happy.call(\"abcd\")\n# true\n# >>> is_happy.call(\"aabb\")\n# false\n# >>> is_happy.call(\"adb\")\n# true\n# >>> is_happy.call(\"xyy\")\n# false\ndef is_happy(s)\n","canonical_solution":"def is_happy(s)\n  return false if s.length < 3\n  \n  (0..s.length - 3).each do |i|\n    return false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n  end\n  \n  true\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"},{"task_id":"HumanEval_81","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃ0.0 E > 0.0 D- > 0.7 D > ১.০ ডি+ > ১.৩ C- > ১.৭ °C> ২.০ চি+ > ২.৩ বি-> ২.৭ বি> ৩.০ বি+ > ৩.৩ এ-> ৩.৭ এ4.0 A+ গড়. চিঠিৰ নম্বৰ.এটা ফাংচন যি নিম্নলিখিত টেবুল ব্যৱহাৰ কৰি আখৰ শ্ৰেণীৰ এটা এৰেজ আউটপুট কৰিব পাৰেঃ তেওঁ তোমাক কিছুমান ছাত্ৰৰ গড়ৰ এক সমষ্টি দিছে আৰু তুমি লিখিব লাগিব ।একমাত্ৰ সমস্যাটো হ'ল, তেওঁ নম্বৰ দিয়া কোডটো হেৰুৱাইছে।শিক্ষকে নিজৰ গ্ৰেডিং এলগৰিথম তৈয়াৰ কৰিছে।ছেমিষ্টাৰৰ শেষ সপ্তাহত শিক্ষকজনে নম্বৰ দিব লাগে।# >>> grade_equation.call([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\ndef numerical_letter_grade(grades)\n","canonical_solution":"def numerical_letter_grade(grades)\n  grades.map do |gpa|\n    case \n    when gpa == 4.0\n      \"A+\"\n    when gpa > 3.7\n      \"A\"\n    when gpa > 3.3\n      \"A-\"\n    when gpa > 3.0\n      \"B+\"\n    when gpa > 2.7\n      \"B\"\n    when gpa > 2.3\n      \"B-\"\n    when gpa > 2.0\n      \"C+\"\n    when gpa > 1.7\n      \"C\"\n    when gpa > 1.3\n      \"C-\"\n    when gpa > 1.0\n      \"D+\"\n    when gpa > 0.7\n      \"D\"\n    when gpa > 0.0\n      \"D-\"\n    else\n      \"E\"\n    end\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_numerical_letter_grade\n    candidate = method(:numerical_letter_grade)\n    assert_equal([\"A+\", \"B\", \"C-\", \"C\", \"A-\"], candidate.call([4.0, 3, 1.7, 2, 3.5]))\n    assert_equal([\"D+\"], candidate.call([1.2]))\n    assert_equal([\"D-\"], candidate.call([0.5]))\n    assert_equal([\"E\"], candidate.call([0.0]))\n    assert_equal([\"D\", \"D-\", \"C-\", \"B\", \"B+\"], candidate.call([1.0, 0.3, 1.5, 2.8, 3.3]))\n    assert_equal([\"E\", \"D-\"], candidate.call([0.0, 0.7]))\n  end\nend\n"},{"task_id":"HumanEval_82","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণসমূহদৈৰ্ঘ্য এটা মৌলিক সংখ্যা বা অন্যথা মিছা এটা ফাংচন লিখা যি এটা ষ্ট্ৰিং লয় আৰু যদি ষ্ট্ৰিংটো হয় তেন্তে true ঘূৰাই আনে# >>> prime_length.call(\"Hello\")\n# true\n# >>> prime_length.call(\"abcdcba\")\n# true\n# >>> prime_length.call(\"kittens\")\n# true\n# >>> prime_length.call(\"orange\")\n# false\ndef prime_length(string)\n","canonical_solution":"def prime_length(string)\n  length = string.length\n  return false if length < 2\n\n  (2..Math.sqrt(length)).each do |i|\n    return false if length % i == 0\n  end\n\n  true\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_length\n    candidate = method(:prime_length)\n    assert_equal(true, candidate.call(\"Hello\"))\n    assert_equal(true, candidate.call(\"abcdcba\"))\n    assert_equal(true, candidate.call(\"kittens\"))\n    assert_equal(false, candidate.call(\"orange\"))\n    assert_equal(true, candidate.call(\"wow\"))\n    assert_equal(true, candidate.call(\"world\"))\n    assert_equal(true, candidate.call(\"MadaM\"))\n    assert_equal(true, candidate.call(\"Wow\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(true, candidate.call(\"HI\"))\n    assert_equal(true, candidate.call(\"go\"))\n    assert_equal(false, candidate.call(\"gogo\"))\n    assert_equal(false, candidate.call(\"aaaaaaaaaaaaaaa\"))\n    assert_equal(true, candidate.call(\"Madam\"))\n    assert_equal(false, candidate.call(\"M\"))\n    assert_equal(false, candidate.call(\"0\"))\n  end\nend\n"},{"task_id":"HumanEval_83","nl":"asm_Beng","pl":"rb","prompt":"ধনাত্মক পূৰ্ণ সংখ্যা যি 1 ৰ সৈতে আৰম্ভ বা শেষ হয়।এটা ধনাত্মক পূৰ্ণ সংখ্যা n দিয়া হ'লে, n-অংকৰ সংখ্যাৰ গণনা ঘূৰাই দিয়ক def starts_one_ends(n)\n","canonical_solution":"def starts_one_ends(n)\n  return 0 if n <= 0\n\n  # Count numbers starting with 1\n  start_with_1 = 9 ** (n - 1)\n\n  # Count numbers ending with 1\n  end_with_1 = 9 ** (n - 1)\n\n  # Adjust for double counting the number that both starts and ends with 1\n  both_start_and_end_with_1 = 9 ** (n - 2) if n > 1\n  \n  start_with_1 + end_with_1 - (both_start_and_end_with_1 || 0)\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_starts_one_ends\n    candidate = method(:starts_one_ends)\n    assert_equal(1, candidate.call(1))\n    assert_equal(18, candidate.call(2))\n    assert_equal(180, candidate.call(3))\n    assert_equal(1800, candidate.call(4))\n    assert_equal(18000, candidate.call(5))\n  end\nend\n"},{"task_id":"HumanEval_84","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণ এটা ধনাত্মক পূৰ্ণ সংখ্যা N দিয়া হ'লে, ইয়াৰ অংকবোৰৰ যোগফল বাইনেৰী পদ্ধতিত ঘূৰাই দিয়া। # >>> solve.call(1000)\n# \"1\"\n# >>> solve.call(150)\n# \"110\"\n# >>> solve.call(147)\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 ≤ N ≤ 10000.\n# Output:\n# a string of binary number\ndef solve(n)\n","canonical_solution":"def solve(n)\n  sum_of_digits = n.to_s.chars.map(&:to_i).sum\n  sum_of_digits.to_s(2)\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"1\", candidate.call(1000))\n    assert_equal(\"110\", candidate.call(150))\n    assert_equal(\"1100\", candidate.call(147))\n    assert_equal(\"1001\", candidate.call(333))\n    assert_equal(\"10010\", candidate.call(963))\n  end\nend\n"},{"task_id":"HumanEval_85","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃএটা অ-খালি অখণ্ড সংখ্যাৰ অ্যাৰ দিয়া হ'লে, প্ৰথমতে অস্বাভাৱিক সূচকত থকা জোৰা উপাদানবোৰ যোগ কৰা হ'ব...# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n","canonical_solution":"def add(lst)\n  lst.each_with_index.select { |num, index| index.odd? && num.even? }.map(&:first).sum\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6, 8]))\n  end\nend\n"},{"task_id":"HumanEval_86","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃটোকাঃ আপুনি বাক্যত শব্দৰ ক্ৰম আৰু খালী স্থান ৰাখিব লাগিব।ASCII মানৰ ওপৰত ভিত্তি কৰি ক্ৰমান্বয়ে বৃদ্ধি কৰা হ'ব।নতুন শব্দৰ দ্বাৰা সলনি কৰা হয় য'ত সকলো বৰ্ণ ত ব্যৱহৃত হয়।শৃংখলাৰ আদেশপ্ৰাপ্ত সংস্কৰণ, এটা শৃংখল য'ত সকলো শব্দ (স্পেছাৰে পৃথক) এটা ফাংচন লিখা যি এটা ষ্ট্ৰিং লয় আৰু তাৰ এটা আদেশযুক্ত সংস্কৰণ ঘূৰাই আনে।# >>> anti_shuffle.call(\"Hi\")\n# \"Hi\"\n# >>> anti_shuffle.call(\"hello\")\n# \"ehllo\"\n# >>> anti_shuffle.call(\"Hello World!!!\")\n# \"Hello !!!Wdlor\"\ndef anti_shuffle(s)\n","canonical_solution":"def anti_shuffle(s)\n  s.split(\/(\\s+)\/).map { |word| word.chars.sort.join }.join\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_anti_shuffle\n    candidate = method(:anti_shuffle)\n    assert_equal(\"Hi\", candidate.call(\"Hi\"))\n    assert_equal(\"ehllo\", candidate.call(\"hello\"))\n    assert_equal(\"bemnru\", candidate.call(\"number\"))\n    assert_equal(\"abcd\", candidate.call(\"abcd\"))\n    assert_equal(\"Hello !!!Wdlor\", candidate.call(\"Hello World!!!\"))\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\".Hi My aemn is Meirst .Rboot How aer ?ouy\", candidate.call(\"Hi. My name is Mister Robot. How are you?\"))\n  end\nend\n"},{"task_id":"HumanEval_87","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃলগতে, ক্ৰমবৰ্ধমান ক্ৰমত কলামৰ দ্বাৰা শাৰীটোৰ সমন্বয়বোৰ ছৰ্ট কৰক।সমন্বয়সমূহক প্ৰথমতে শাৰী অনুসাৰে ক্ৰমাৎ বৃদ্ধিৰ ক্ৰমত ছৰ্ট কৰক।প্ৰতিটো এৰে এটা সমন্বয় - (শাৰী, কলাম), 0 ৰ সৈতে আৰম্ভ।আৰু এটা অংকন-অংকন-অংকন সমষ্টিৰ সমষ্টি ঘূৰাই দিব, [(x1, y1), (x2, y2) ...] যাতে lst আৰু সম্পূৰ্ণ সংখ্যা x দিয়া হৈছে, অংকটোৰ ভিতৰত x সম্পূৰ্ণ সংখ্যাটো বিচাৰি উলিওৱা, প্ৰতিটো শাৰীত ভিন্ন সংখ্যক কলাম থাকিব পাৰে।যিটো মেট্ৰিক্সৰ লগত একে, কিন্তু মেট্ৰিক্সৰ লগত নহয়,আপোনাক এটা 2D ডাটা দিয়া হৈছে, এটা নেষ্টড এৰেজ হিচাপে, # >>> get_row.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row.call([], 1)\n# []\n# >>> get_row.call([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\ndef get_row(lst, x)\n","canonical_solution":"def get_row(lst, x)\n  result = []\n\n  lst.each_with_index do |row, i|\n    row.each_with_index do |value, j|\n      result << [i, j] if value == x\n    end\n  end\n\n  result.sort_by { |coord| [coord[0], -coord[1]] }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"},{"task_id":"HumanEval_88","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃ* প্ৰদান কৰা এৰে সলনি নকৰিব।টোকাঃঅথবা ইয়াক ক্ৰমান্বয়ে বাছনি কৰক যদি যোগফলটো (প্ৰথম সূচকৰ মান, অন্তিম সূচকৰ মান) জোৰা হয়।আপুনি যদি যোগফলটো (প্ৰথম সূচক মান, অন্তিম সূচক মান) অস্বাভাৱিক হয়, তেন্তে আপুনি দিয়া এৰেক ক্ৰমান্বয়ে ছৰ্ট কৰিব, অ-নতিবাচক পূৰ্ণসংখ্যাৰ এটা অ্যারে দিয়া হ'লে, ছ'ৰ্টিং কৰাৰ পিছত, দিয়া অ্যারেৰ এটা ক'ৰব ঘূৰাই দিয়া হ'ব, # >>> sort_array.call([])\n# []\n# >>> sort_array.call([5])\n# [5]\n# >>> sort_array.call([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array.call([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\ndef sort_array(array)\n","canonical_solution":"def sort_array(array)\n  return array if array.empty? || array.size == 1\n\n  if (array.first + array.last).odd?\n    array.sort\n  else\n    array.sort.reverse\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([], candidate.call([]))\n    assert_equal([5], candidate.call([5]))\n    assert_equal([0, 1, 2, 3, 4, 5], candidate.call([2, 4, 3, 0, 1, 5]))\n    assert_equal([6, 5, 4, 3, 2, 1, 0], candidate.call([2, 4, 3, 0, 1, 5, 6]))\n    assert_equal([1, 2], candidate.call([2, 1]))\n    assert_equal([0, 11, 15, 32, 42, 87], candidate.call([15, 42, 87, 32, 11, 0]))\n    assert_equal([23, 21, 14, 11], candidate.call([21, 14, 23, 11]))\n  end\nend\n"},{"task_id":"HumanEval_89","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃতললৈ নামি যাওক দুই গুণ কৰি দুই ঠাইলৈ।বৰ্ণমালাৰ ৰূপটো এনেদৰে ঘূৰাই দিব লাগে যাতে আখৰবোৰ এটা বৰ্ণমালাৰ সৈতে এনক্ৰিপ্ট কৰা এটা ষ্ট্ৰিং ঘূৰাই আনে।এটা ফাংচন এনক্ৰিপ্ট কৰক যি এটা ষ্ট্ৰিংক এটা আর্গুমেণ্ট হিচাপে লয় আৰু # >>> encrypt.call(\"hi\")\n# \"lm\"\n# >>> encrypt.call(\"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt.call(\"gf\")\n# \"kj\"\n# >>> encrypt.call(\"et\")\n# \"ix\"\ndef encrypt(s)\n","canonical_solution":"def encrypt(s)\n  s.chars.map do |char|\n    if char =~ \/[a-z]\/\n      ((char.ord - 'a'.ord + 4) % 26 + 'a'.ord).chr\n    elsif char =~ \/[A-Z]\/\n      ((char.ord - 'A'.ord + 4) % 26 + 'A'.ord).chr\n    else\n      char\n    end\n  end.join\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encrypt\n    candidate = method(:encrypt)\n    assert_equal(\"lm\", candidate.call(\"hi\"))\n    assert_equal(\"ewhjklnop\", candidate.call(\"asdfghjkl\"))\n    assert_equal(\"kj\", candidate.call(\"gf\"))\n    assert_equal(\"ix\", candidate.call(\"et\"))\n    assert_equal(\"jeiajeaijeiak\", candidate.call(\"faewfawefaewg\"))\n    assert_equal(\"lippsqcjvmirh\", candidate.call(\"hellomyfriend\"))\n    assert_equal(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\", candidate.call(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"))\n    assert_equal(\"e\", candidate.call(\"a\"))\n  end\nend\n"},{"task_id":"HumanEval_90","nl":"asm_Beng","pl":"rb","prompt":"যদি তেনে কোনো উপাদান নাই তেন্তে nil ঘূৰাই দিব।এটা ফাংচন next_smallest লিখক যি এৰেৰ দ্বিতীয় ক্ষুদ্ৰতম উপাদানটো ঘূৰাই দিয়ে।আপোনাক এটা সম্পূৰ্ণ সংখ্যাৰ অ্যারে দিয়া হৈছে।# >>> next_smallest.call([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest.call([5, 1, 4, 3, 2])\n# 2\n# >>> next_smallest.call([])\n# nil\n# >>> next_smallest.call([1, 1])\n# nil\ndef next_smallest(lst)\n","canonical_solution":"def next_smallest(lst)\n  unique_sorted = lst.uniq.sort\n  unique_sorted.length >= 2 ? unique_sorted[1] : nil\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_smallest\n    candidate = method(:next_smallest)\n    assert_equal(2, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(2, candidate.call([5, 1, 4, 3, 2]))\n    assert_equal(nil, candidate.call([]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(1, candidate.call([1, 1, 1, 1, 0]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(-35, candidate.call([-35, 34, 12, -45]))\n  end\nend\n"},{"task_id":"HumanEval_91","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃবাক্যবোৰ '', '?' বা '! ' ৰে সীমিত কৰা হৈছে।এক বিৰক্তি হৈছে \"I\" শব্দৰে আৰম্ভ হোৱা এটা বাক্য।আপোনাক এটা শব্দৰ শাৰী দিয়া হ'ব, আৰু আপোনাৰ কাম হ'ব সংখ্যাটো গণনা কৰা।# >>> is_bored.call(\"Hello world\")\n# 0\n# >>> is_bored.call(\"The sky is blue. The sun is shining. I love this weather\")\n# 1\ndef is_bored(s)\n","canonical_solution":"def is_bored(s)\n  sentences = s.split(\/(?<=[.?!])\/)\n  sentences.count { |sentence| sentence.strip.start_with?('I') }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive. will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"},{"task_id":"HumanEval_92","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণসমূহঅন্য যিকোনো ক্ষেত্ৰত false ঘূৰাই আনে।যদি এটা সংখ্যা বাকী দুটা সংখ্যাৰ যোগফলৰ সমান হয় আৰু সকলো সংখ্যা সম্পূৰ্ণ সংখ্যা হয় তেন্তে true প্ৰাপ্ত কৰা হ'ব।এটা ফাংচন সৃষ্টি কৰক যিয়ে ৩টা সংখ্যা গ্ৰহণ কৰে।# >>> any_int.call(5, 2, 7)\n# true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n# true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n","canonical_solution":"def any_int(x, y, z)\n  if [x, y, z].all? { |n| n.is_a?(Integer) }\n    x == y + z || y == x + z || z == x + y\n  else\n    false\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"},{"task_id":"HumanEval_93","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃকেৱল আখৰকেই ধৰি লওক।ইংৰাজী বৰ্ণমালাৰ স্বৰবৰ্ণ।এই বাৰ্তাৰ লগত এই আখৰটো 2টা স্থান আগলৈ আহিব ।এই পদ্ধতিত সকলো আখৰৰে কেচ সলনি হয়, সকলো স্বৰবৰ্ণৰ ঠাইত এটা ফাংচন লিখা যি এটা বাৰ্তা গ্ৰহণ কৰে, আৰু এনে এটা # >>> encode.call(\"test\")\n# \"TGST\"\n# >>> encode.call(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\ndef encode(message)\n","canonical_solution":"def encode(message)\n  vowels = 'aeiou'\n  swap_vowels = {'a' => 'c', 'e' => 'g', 'i' => 'k', 'o' => 'q', 'u' => 'w'}\n  \n  encoded_message = message.chars.map do |char|\n    if vowels.include?(char.downcase)\n      new_char = swap_vowels[char.downcase]\n      char == char.upcase ? new_char.upcase : new_char.downcase\n    else\n      char == char.upcase ? char.downcase : char.upcase\n    end\n  end\n\n  encoded_message.join\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"},{"task_id":"HumanEval_94","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃআপুনি আটাইতকৈ ডাঙৰ অগ্ৰ মানটো বিচাৰিব লাগিব আৰু তাৰ অংকবোৰৰ যোগফল ঘূৰাই দিব লাগিব।আপোনাক এটা সম্পূৰ্ণ সংখ্যাৰ অ্যারে দিয়া হৈছে।# >>> skjkasdkd.call([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n# >>> skjkasdkd.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n# 25\n# >>> skjkasdkd.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n# 13\n# >>> skjkasdkd.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n# 11\n# >>> skjkasdkd.call([0, 81, 12, 3, 1, 21])\n# 3\n# >>> skjkasdkd.call([0, 8, 1, 2, 1, 7])\n# 7\ndef skjkasdkd(lst)\n","canonical_solution":"def skjkasdkd(lst)\n  require 'prime'\n\n  # Find the largest prime number in the array\n  largest_prime = lst.select { |num| Prime.prime?(num) }.max\n  \n  # Return 0 if no prime number is found\n  return 0 if largest_prime.nil?\n\n  # Calculate the sum of digits of the largest prime number\n  largest_prime.to_s.chars.map(&:to_i).sum\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_skjkasdkd\n    candidate = method(:skjkasdkd)\n    assert_equal(10, candidate.call([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\n    assert_equal(25, candidate.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\n    assert_equal(13, candidate.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))\n    assert_equal(11, candidate.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\n    assert_equal(3, candidate.call([0, 81, 12, 3, 1, 21]))\n    assert_equal(7, candidate.call([0, 8, 1, 2, 1, 7]))\n    assert_equal(19, candidate.call([8191]))\n    assert_equal(19, candidate.call([8191, 123456, 127, 7]))\n    assert_equal(10, candidate.call([127, 97, 8192]))\n  end\nend\n"},{"task_id":"HumanEval_95","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃফাংশনটোৱে false ঘূৰাই দিব লাগে যদিহে দিয়া হেচটো খালী হয়।case বা সকলো কীবোৰ বড়ো আকাৰৰ স্ট্ৰিং হয়, অন্যথা false ঘূৰাই দিব.এটা হেচ প্ৰদান কৰি, যদি সকলো কীবোৰ নিম্নতম ত শাৰী হয় তেন্তে true ঘূৰাই দিয়ক# >>> check_dict_case.call({\"a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>> check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\ndef check_dict_case(dict)\n","canonical_solution":"def check_dict_case(dict)\n  return false if dict.empty?\n\n  lowercase_keys = dict.keys.all? { |key| key.is_a?(String) && key == key.downcase }\n  uppercase_keys = dict.keys.all? { |key| key.is_a?(String) && key == key.upcase }\n\n  lowercase_keys || uppercase_keys\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\nend\n"},{"task_id":"HumanEval_96","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণ স্বৰূপেঃপূৰ্ণ সংখ্যা যি অগ্ৰ সংখ্যা আৰু n তকৈ সৰু।এটা ফাংচন প্ৰয়োগ কৰক যি এটা অ-নতিবাচক পূৰ্ণ সংখ্যা লয় আৰু প্ৰথম n ৰ এটা অ্যারে ঘূৰাই আনে ।# >>> count_up_to.call(5)\n# [2, 3]\n# >>> count_up_to.call(11)\n# [2, 3, 5, 7]\n# >>> count_up_to.call(0)\n# []\n# >>> count_up_to.call(20)\n# [2, 3, 5, 7, 11, 13, 17, 19]\n# >>> count_up_to.call(1)\n# []\n# >>> count_up_to.call(18)\n# [2, 3, 5, 7, 11, 13, 17]\ndef count_up_to(n)\n","canonical_solution":"def count_up_to(n)\n  return [] if n <= 2\n  primes = []\n  (2...n).each do |num|\n    is_prime = true\n    (2..Math.sqrt(num)).each do |i|\n      if num % i == 0\n        is_prime = false\n        break\n      end\n    end\n    primes << num if is_prime\n  end\n  primes\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_up_to\n    candidate = method(:count_up_to)\n    assert_equal([2, 3], candidate.call(5))\n    assert_equal([2, 3, 5], candidate.call(6))\n    assert_equal([2, 3, 5], candidate.call(7))\n    assert_equal([2, 3, 5, 7], candidate.call(10))\n    assert_equal([], candidate.call(0))\n    assert_equal([2, 3, 5, 7, 11, 13, 17, 19], candidate.call(22))\n    assert_equal([], candidate.call(1))\n    assert_equal([2, 3, 5, 7, 11, 13, 17], candidate.call(18))\n    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43], candidate.call(47))\n    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], candidate.call(101))\n  end\nend\n"},{"task_id":"HumanEval_97","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃধাৰণা কৰা যে ইনপুটটো সদায় বৈধ।তেওঁলোকৰ একক অংকবোৰৰ উৎপাদনৰ সংখ্যা।দুটা পূৰ্ণ সংখ্যা লোৱা আৰু উভতাই দিয়া ফাংচনটো সম্পূৰ্ণ কৰক।# >>> multiply.call(148, 412)\n# 16\n# >>> multiply.call(19, 28)\n# 72\n# >>> multiply.call(2020, 1851)\n# 0\n# >>> multiply.call(14, -15)\n# 20\ndef multiply(a, b)\n","canonical_solution":"def multiply(a, b)\n  a_unit_digit = a.abs % 10\n  b_unit_digit = b.abs % 10\n  a_unit_digit * b_unit_digit\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_multiply\n    candidate = method(:multiply)\n    assert_equal(16, candidate.call(148, 412))\n    assert_equal(72, candidate.call(19, 28))\n    assert_equal(0, candidate.call(2020, 1851))\n    assert_equal(20, candidate.call(14, -15))\n    assert_equal(42, candidate.call(76, 67))\n    assert_equal(49, candidate.call(17, 27))\n    assert_equal(0, candidate.call(0, 1))\n    assert_equal(0, candidate.call(0, 0))\n  end\nend\n"},{"task_id":"HumanEval_98","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃএটা ষ্ট্ৰিং s দিয়া হ'লে, জোৰা সূচকত থকা বড়ো স্বৰসমূহৰ সংখ্যা গণনা কৰা।# >>> count_upper.call(\"aBCdEf\")\n# 1\n# >>> count_upper.call(\"abcdefg\")\n# 0\n# >>> count_upper.call(\"dBBE\")\n# 0\ndef count_upper(s)\n","canonical_solution":"def count_upper(s)\n  vowels = ['A', 'E', 'I', 'O', 'U']\n  count = 0\n\n  s.chars.each_with_index do |char, index|\n    if index.even? && vowels.include?(char)\n      count += 1\n    end\n  end\n\n  count\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"},{"task_id":"HumanEval_99","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণসমূহদুটা পূৰ্ণসংখ্যাৰ পৰা, ইয়াক শূন্যৰ পৰা দূৰলৈ ঘূৰাই ল'ব।আৰু ইয়াৰ নিকটতম পূৰ্ণ সংখ্যাটো ঘূৰাই দিয়ে। যদি সংখ্যাটো সমান দূৰত্বত থাকে এটা সংখ্যা প্ৰতিনিধিত্ব কৰা এটা মান (শৃংখলা) গ্ৰহণ কৰা এটা ফাংশন সৃষ্টি কৰক ।# >>> closest_integer.call(\"10\")\n# 10\n# >>> closest_integer.call(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\ndef closest_integer(value)\n","canonical_solution":"def closest_integer(value)\n  number = value.to_f\n  if number > 0\n    (number + 0.5).floor\n  else\n    (number - 0.5).ceil\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_closest_integer\n    candidate = method(:closest_integer)\n    assert_equal(10, candidate.call(\"10\"))\n    assert_equal(15, candidate.call(\"14.5\"))\n    assert_equal(-16, candidate.call(\"-15.5\"))\n    assert_equal(15, candidate.call(\"15.3\"))\n    assert_equal(0, candidate.call(\"0\"))\n  end\nend\n"},{"task_id":"HumanEval_100","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃi স্তৰৰ শিলৰ সংখ্যা (i+1) ।এটা এৰেজত প্ৰতিটো স্তৰত থকা শিলৰ সংখ্যা ঘূৰাই আনে, য'ত সূচকৰ এলেমেণ্ট - যদি n জোৰা হয়, তেন্তে পৰৱৰ্তী জোৰা সংখ্যাটো।- যদি n অগণন হয়, তেন্তে পৰৱৰ্তী অগণন সংখ্যাটো।পৰৱৰ্তী স্তৰত শিলৰ সংখ্যা হ'লঃপ্ৰথম স্তৰত nটা শিল আছে।এটা ধনাত্মক পূৰ্ণ সংখ্যা n দিলে, আপুনি n স্তৰৰ শিলৰ এটা গুটি তৈয়াৰ কৰিব লাগিব।# >>> make_a_pile.call(3)\n# [3, 5, 7]\ndef make_a_pile(n)\n","canonical_solution":"def make_a_pile(n)\n  result = []\n  current_stones = n\n  n.times do\n    result << current_stones\n    current_stones += 2\n  end\n  result\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_a_pile\n    candidate = method(:make_a_pile)\n    assert_equal([3, 5, 7], candidate.call(3))\n    assert_equal([4, 6, 8, 10], candidate.call(4))\n    assert_equal([5, 7, 9, 11, 13], candidate.call(5))\n    assert_equal([6, 8, 10, 12, 14, 16], candidate.call(6))\n    assert_equal([8, 10, 12, 14, 16, 18, 20, 22], candidate.call(8))\n  end\nend\n"},{"task_id":"HumanEval_101","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃশব্দবোৰ শাৰীলৈ ভাগ কৰি এটা শব্দৰ এৰেজ ঘূৰাই দিব।আপোনাক এটা শব্দৰ শৃংখলা দিয়া হ'ব, যাক কমা বা স্পেচৰে পৃথক কৰা হ'ব। আপোনাৰ কাম হ'ল # >>> words_string.call(\"Hi, my name is John\")\n# [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# >>> words_string.call(\"One, two, three, four, five, six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\ndef words_string(s)\n","canonical_solution":"def words_string(s)\n  s.split(\/[\\s,]+\/)\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_string\n    candidate = method(:words_string)\n    assert_equal([\"Hi\", \"my\", \"name\", \"is\", \"John\"], candidate.call(\"Hi, my name is John\"))\n    assert_equal([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"], candidate.call(\"One, two, three, four, five, six\"))\n    assert_equal([\"Hi\", \"my\", \"name\"], candidate.call(\"Hi, my name\"))\n    assert_equal([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"], candidate.call(\"One,, two, three, four, five, six,\"))\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([\"ahmed\", \"gamal\"], candidate.call(\"ahmed     , gamal\"))\n  end\nend\n"},{"task_id":"HumanEval_102","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃযদি এনে কোনো সংখ্যা নাই, তেন্তে ফাংচনে -1 ঘূৰাই দিব লাগে।আটাইতকৈ ডাঙৰ সমসংখ্যাৰ সংখ্যা যিটো [x, y] অন্তৰ্ভুক্ত। যদি এই ফাংশনে দুটা ধনাত্মক সংখ্যা x আৰু y লয় আৰু  ঘূৰাই দিয়ে# >>> choose_num.call(12, 15)\n# 14\n# >>> choose_num.call(13, 12)\n# -1\ndef choose_num(x, y)\n","canonical_solution":"def choose_num(x, y)\n  return -1 if x > y\n  # Start looking from the largest number\n  max_even = y.even? ? y : y - 1\n  # Iterate downwards to find the biggest even number\n  max_even.downto(x) do |n|\n    return n if n.even?\n  end\n  -1\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_choose_num\n    candidate = method(:choose_num)\n    assert_equal(14, candidate.call(12, 15))\n    assert_equal(-1, candidate.call(13, 12))\n    assert_equal(12354, candidate.call(33, 12354))\n    assert_equal(-1, candidate.call(5234, 5233))\n    assert_equal(28, candidate.call(6, 29))\n    assert_equal(-1, candidate.call(27, 10))\n    assert_equal(-1, candidate.call(7, 7))\n    assert_equal(546, candidate.call(546, 546))\n  end\nend\n"},{"task_id":"HumanEval_103","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃযদি n m ৰ পৰা ডাঙৰ হয়, তেন্তে -1 ঘূৰাই দিব.উত্তৰটো আটাইতকৈ ওচৰৰ পূৰ্ণ সংখ্যালৈ ঘূৰাই লওক আৰু তাক বাইনেৰীলৈ ৰূপান্তৰ কৰক।n ৰ পৰা m লৈকে (n আৰু m সহ) সম্পূৰ্ণ সংখ্যাৰ গড়।আপোনাক দুটা ধনাত্মক পূৰ্ণ সংখ্যা n আৰু m দিয়া হৈছে, আৰু আপোনাৰ কাম হ'ল # >>> rounded_avg.call(1, 5)\n# \"0b11\"\n# >>> rounded_avg.call(7, 5)\n# -1\n# >>> rounded_avg.call(10, 20)\n# \"0b1111\"\n# >>> rounded_avg.call(20, 33)\n# \"0b11010\"\ndef rounded_avg(n, m)\n","canonical_solution":"def rounded_avg(n, m)\n  return -1 if n > m\n\n  sum = (n..m).reduce(:+)\n  count = m - n + 1\n  average = (sum.to_f \/ count).round\n  \"0b\" + average.to_i.to_s(2)\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"},{"task_id":"HumanEval_104","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃটোকাঃ ঘূৰি অহা এৰেজ বৃদ্ধিৰ ক্ৰমত বাছনি কৰা উচিত।কোনো এটা অংকত কোনো এটা অংক নাই।এটা ধনাত্মক পূৰ্ণসংখ্যাৰ অ্যারে দিয়া হৈছে x. এটা সকলোবোৰ  ৰ সাজগোজিত অ্যারে ঘূৰাই দিব# >>> unique_digits.call([15, 33, 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n","canonical_solution":"def unique_digits(x)\n  x.select { |num| num.to_s.chars.none? { |digit| digit.to_i.even? } }.sort\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n  end\nend\n"},{"task_id":"HumanEval_105","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃএক, দুই, তিনি, চাৰি, পাঁচ, ছয়, সাত, আঠ, ন'ফলাফলৰ এৰে উলটি, আৰু তাৰ পিছত প্ৰতিটো অংকক ইয়াৰ সৈতে সম্পৰ্কিত নামৰ সৈতে প্ৰতিস্থাপন কৰক এটা সম্পূৰ্ণ সংখ্যাৰ অ্যাৰে দিয়া হ'লে, 1 আৰু 9 ৰ মাজত থকা সম্পূৰ্ণ সংখ্যাবোৰ ছৰ্প কৰক,# >>> by_length.call([2, 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>> by_length.call([])\n# []\n# If the array has any strange number ignore it:\n# >>> by_length.call([1, -1, 55])\n# [\"One\"]\ndef by_length(arr)\n","canonical_solution":"def by_length(arr)\n  number_names = {\n    1 => \"One\",\n    2 => \"Two\",\n    3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\",\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\"\n  }\n\n  filtered_sorted_reversed = arr.select { |x| x.between?(1, 9) }.sort.reverse\n  filtered_sorted_reversed.map { |num| number_names[num] }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_by_length\n    candidate = method(:by_length)\n    assert_equal([\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], candidate.call([2, 1, 1, 4, 5, 8, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([\"One\"], candidate.call([1, -1, 55]))\n    assert_equal([\"Three\", \"Two\", \"One\"], candidate.call([1, -1, 3, 2]))\n    assert_equal([\"Nine\", \"Eight\", \"Four\"], candidate.call([9, 4, 8]))\n  end\nend\n"},{"task_id":"HumanEval_106","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃi ৰ কাৰক হ'ল 1 ৰ পৰা i লৈকে থকা সংখ্যাবোৰৰ গুণফল (1 * 2 * ... * i) ।মই ১ৰ পৰা আৰম্ভ কৰোঁ।অথবা ১ৰ পৰা i লৈকে সংখ্যাৰ যোগফল।আৰু আকাৰ n ৰ এটা এৰেজ ঘূৰাই আনে, যাতে সূচক i ত থকা উপাদানৰ মানটো যদি i সম হয়, তেন্তে i ৰ ফেক্টৰিয়েল হয়।f ফাংচনটো ৰূপায়ণ কৰক যি n ক পৰিমাপ হিচাপে লয়, # >>> f.call(5)\n# [1, 2, 6, 24, 15]\ndef f(n)\n","canonical_solution":"def f(n)\n  (1..n).map do |i|\n    if i.even?\n      (1..i).inject(:*) || 1\n    else\n      (1..i).inject(:+)\n    end\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal([1, 2, 6, 24, 15], candidate.call(5))\n    assert_equal([1, 2, 6, 24, 15, 720, 28], candidate.call(7))\n    assert_equal([1], candidate.call(1))\n    assert_equal([1, 2, 6], candidate.call(3))\n  end\nend\n"},{"task_id":"HumanEval_107","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণ ১ঃপূৰ্ণসংখ্যাৰ পলিণ্ড্ৰ'ম যিটো অন্তৰ্ভুক্ত ৰেঞ্জৰ ভিতৰত পৰে ({1, n) ।এটা ধনাত্মক পূৰ্ণসংখ্যা n দিয়া হৈছে, এটা এৰে ঘূৰাই দিয়া যাক সম আৰু অস্বাভাৱিক সংখ্যা আছে # >>> even_odd_palindrome.call(3)\n# [1, 2]\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> even_odd_palindrome.call(12)\n# [4, 6]\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned array has the number of even and odd integer palindromes respectively.\ndef even_odd_palindrome(n)\n","canonical_solution":"def even_odd_palindrome(n)\n  even_count = 0\n  odd_count = 0\n\n  (1..n).each do |num|\n    if num.to_s == num.to_s.reverse\n      if num.even?\n        even_count += 1\n      else\n        odd_count += 1\n      end\n    end\n  end\n\n  [even_count, odd_count]\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_palindrome\n    candidate = method(:even_odd_palindrome)\n    assert_equal([8, 13], candidate.call(123))\n    assert_equal([4, 6], candidate.call(12))\n    assert_equal([1, 2], candidate.call(3))\n    assert_equal([6, 8], candidate.call(63))\n    assert_equal([5, 6], candidate.call(25))\n    assert_equal([4, 6], candidate.call(19))\n    assert_equal([4, 5], candidate.call(9))\n    assert_equal([0, 1], candidate.call(1))\n  end\nend\n"},{"task_id":"HumanEval_108","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপে, -১২৩ৰ স্বাক্ষৰিত অংক -১, ২ আৰু ৩।যদি এটা সংখ্যা ঋণাত্মক হয়, তেন্তে তাৰ প্ৰথম স্বাক্ষৰিত অংকটো ঋণাত্মক হ'ব:সংখ্যাসূচক সংখ্যা যাৰ অংকবোৰৰ যোগফল হ'ল > ০।এটা count_nums ফাংশন লিখা যি এটা অখণ্ড সংখ্যাৰ অ্যারে লয় আৰু ৰিটাৰ্ণ কৰে ।# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11, -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n","canonical_solution":"def count_nums(arr)\n  arr.count do |num|\n    num.to_s.chars.map(&:to_i).sum > 0\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"},{"task_id":"HumanEval_109","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণ স্বৰূপেঃটোকাঃ প্ৰদান কৰা এৰেৰ অনন্য উপাদান থকাটো নিশ্চিত।যদি দিয়া এৰে খালী হয় তেন্তে true ঘূৰাই দিব.তাৰপিছত true ঘূৰাই দিয়ক অথবা false ঘূৰাই দিয়ক।যদি ওপৰৰ কাৰ্য্য সম্পাদন কৰি ছৰ্ট কৰা এৰেজটো প্ৰাপ্ত কৰা সম্ভৱ হয় অংকন সূচকৰ আৰম্ভণিৰ স্থানসঠিক দিশত অৱস্থান কৰক। এৰেৰ শেষ উপাদানটো  লৈ স্থানান্তৰ কৰা হ'বএটা সোঁফালে স্থানান্তৰ কৰা কাৰ্য্যই অৰিজিনৰ সকলোবোৰ উপাদান একোটাকৈ স্থানান্তৰ কৰা বুজায় ।আপুনি যিকোনো সংখ্যক বাৰ ডান স্থানান্তৰ কাৰ্য সম্পাদন কৰিবলৈ অনুমতি দিয়া হৈছে।এই অৰিজিনৰ ওপৰত নিম্নলিখিত ক্ৰিয়াঃএটা অক্ষৰ বিন্যাসক নিম্নগামী নোহোৱা ক্ৰমত ছৰ্ট কৰা সম্ভৱ অংকবোৰ এৰাব নোৱাৰাকৈ ক্ৰমবিন্যাস কৰা হ'ব। আপোনাৰ কাম হ'ল নিৰ্ণয় কৰা যে আমাৰ এটা এৰে 'arr' আছে N সংখ্যক পূৰ্ণসংখ্যাৰ arr[1], arr[2], ..., arr[N]।# >>> move_one_ball.call([3, 4, 5, 1, 2])\n# true\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> move_one_ball.call([3, 5, 4, 1, 2])\n# false\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\ndef move_one_ball(arr)\n","canonical_solution":"def move_one_ball(arr)\n  return true if arr.empty?\n\n  n = arr.size\n  count_rotation_point = 0\n  rotation_index = -1\n\n  (0...n).each do |i|\n    next_index = (i + 1) % n\n    if arr[i] > arr[next_index]\n      count_rotation_point += 1\n      rotation_index = next_index\n    end\n  end\n\n  count_rotation_point <= 1\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_one_ball\n    candidate = method(:move_one_ball)\n    assert_equal(true, candidate.call([3, 4, 5, 1, 2]))\n    assert_equal(true, candidate.call([3, 5, 10, 1, 2]))\n    assert_equal(false, candidate.call([4, 3, 1, 2]))\n    assert_equal(false, candidate.call([3, 5, 4, 1, 2]))\n    assert_equal(true, candidate.call([]))\n  end\nend\n"},{"task_id":"HumanEval_110","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃঅন্যথা, \"NO\" ঘূৰাই দিয়ক।সকলো উপাদান সম হ'বলৈ, \"YES\" ঘূৰাই দিয়ক।যদি ই সম্ভৱ হয় lst1 আৰু lst2 ৰ মাজত উপাদান বিনিময় কৰিবলৈ lst1 আৰু lst2 ৰ মাজত বিনিময় হোৱা উপাদানৰ সংখ্যাৰ ওপৰত কোনো সীমা নাই।ইয়াৰ মাজত এটা এৰেজ তৈয়াৰ কৰা যাক কেৱল জোৰা সংখ্যাৰে গঠিত।আৰু নিৰ্ণয় কৰে যে এটা উপাদানৰ বিনিময় কৰা সম্ভৱ নে নহয় ।এই সমস্যাত, আপুনি এটা ফাংচন প্ৰয়োগ কৰিব যি দুটা সংখ্যাৰ অ্যারে লয়,# >>> exchange.call([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange.call([1, 2, 3, 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input arrays will be non-empty.\ndef exchange(lst1, lst2)\n","canonical_solution":"def exchange(lst1, lst2)\n  # Check if lst1 already consists solely of even numbers\n  return \"YES\" if lst1.all?(&:even?)\n\n  # Check if there are at least as many even numbers in lst2\n  # as there are odd numbers in lst1\n  odd_count_lst1 = lst1.count(&:odd?)\n  even_count_lst2 = lst2.count(&:even?)\n\n  odd_count_lst1 <= even_count_lst2 ? \"YES\" : \"NO\"\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_exchange\n    candidate = method(:exchange)\n    assert_equal(\"YES\", candidate.call([1, 2, 3, 4], [1, 2, 3, 4]))\n    assert_equal(\"NO\", candidate.call([1, 2, 3, 4], [1, 5, 3, 4]))\n    assert_equal(\"YES\", candidate.call([1, 2, 3, 4], [2, 1, 4, 3]))\n    assert_equal(\"YES\", candidate.call([5, 7, 3], [2, 6, 4]))\n    assert_equal(\"NO\", candidate.call([5, 7, 3], [2, 6, 3]))\n    assert_equal(\"NO\", candidate.call([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]))\n    assert_equal(\"YES\", candidate.call([100, 200], [200, 200]))\n  end\nend\n"},{"task_id":"HumanEval_111","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃযদি কেইবাটাও আখৰ একেধৰণৰ হয়, তেন্তে আটাইবোৰ ঘূৰাই দিব লাগে।আটাইতকৈ বেছি সংখ্যক বাৰ পুনৰাবৃত্তি হোৱা আৰু সেই সংখ্যাটো অন্তৰ্ভুক্ত কৰা আখৰটোৰ নাম লিখা।এটা শাৰী দিয়া হৈছে যি এটা স্পেচ পৃথক কৰা সৰু আখৰক প্ৰতিনিধিত্ব কৰে, এটা হেচ ঘূৰাই দিয়ক # >>> histogram.call(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n# >>> histogram.call(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"a b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"b b b b a\")\n# {\"b\" => 4}\n# >>> histogram.call(\"\")\n# {}\ndef histogram(test)\n","canonical_solution":"def histogram(test)\n  return {} if test.empty?\n\n  count = Hash.new(0)\n\n  test.split.each do |char|\n    count[char] += 1\n  end\n\n  max_count = count.values.max\n  count.select { |_, value| value == max_count }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_histogram\n    candidate = method(:histogram)\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"a b b a\"))\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"a b c a b\"))\n    assert_equal({\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1}, candidate.call(\"a b c d g\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({\"b\" => 4}, candidate.call(\"b b b b a\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({}, candidate.call(\"\"))\n    assert_equal({\"a\" => 1}, candidate.call(\"a\"))\n  end\nend\n"},{"task_id":"HumanEval_112","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণ আপুনি এটা এৰে ৰিটাৰ্ণ কৰিব লাগিব য'ত ফলাফলৰ ষ্ট্ৰিং আৰু true\/false আছে।এটা ষ্ট্ৰিংক পলিণ্ড্ৰ'ম বোলা হয় যদি ই আগলৈ আৰু পিছলৈ একেদৰে পঢ়া হয়।তাৰপিছত পৰীক্ষা কৰক যে ফলাফলৰ শাৰীটো পলিণ্ড্ৰম হয় নে নহয়।আমাক দুটা ষ্ট্ৰিং দিয়া হৈছে s আৰু c, আপুনি s ৰ সকলো বৰ্ণ বিলোপ কৰিব লাগিব যি c ৰ যিকোনো বৰ্ণৰ সমান কাম # >>> reverse_delete.call(\"abcde\", \"ae\")\n# [\"bcd\", false]\n# >>> reverse_delete.call(\"abcdef\", \"b\")\n# [\"acdef\", false]\n# >>> reverse_delete.call(\"abcdedcba\", \"ab\")\n# [\"cdedc\", true]\ndef reverse_delete(s, c)\n","canonical_solution":"def reverse_delete(s, c)\n  # Remove all characters in c from s\n  filtered_string = s.delete(c)\n  \n  # Check if the filtered string is a palindrome\n  is_palindrome = filtered_string == filtered_string.reverse\n  \n  # Return the result array\n  [filtered_string, is_palindrome]\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_reverse_delete\n    candidate = method(:reverse_delete)\n    assert_equal([\"bcd\", false], candidate.call(\"abcde\", \"ae\"))\n    assert_equal([\"acdef\", false], candidate.call(\"abcdef\", \"b\"))\n    assert_equal([\"cdedc\", true], candidate.call(\"abcdedcba\", \"ab\"))\n    assert_equal([\"dik\", false], candidate.call(\"dwik\", \"w\"))\n    assert_equal([\"\", true], candidate.call(\"a\", \"a\"))\n    assert_equal([\"abcdedcba\", true], candidate.call(\"abcdedcba\", \"\"))\n    assert_equal([\"abcdedcba\", true], candidate.call(\"abcdedcba\", \"v\"))\n    assert_equal([\"abba\", true], candidate.call(\"vabba\", \"v\"))\n    assert_equal([\"\", true], candidate.call(\"mamma\", \"mia\"))\n  end\nend\n"},{"task_id":"HumanEval_113","nl":"asm_Beng","pl":"rb","prompt":"ইনপুটৰ i'th শাৰীটোত অস্বাভাৱিক অংকবোৰ আছে.ইনপুটৰ ষ্ট্ৰিং i. \" য'ত সকলো i'ক সংখ্যাৰে সলনি কৰা উচিত আউটপুটৰ প্ৰতিটো উপাদান i হ'ব লাগিব এটা অক্ষৰ ক্ৰম দিয়া হৈছে, য'ত প্ৰতিটো অক্ষৰ ক্ৰম কেৱল অংকৰে গঠিত, এটা অক্ষৰ ক্ৰম ঘূৰাই দিব.# >>> odd_count.call([\"1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# >>> odd_count.call([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\ndef odd_count(lst)\n","canonical_solution":"def odd_count(lst)\n  lst.map do |num_str|\n    count = num_str.count('13579')\n    \"the number of odd elements #{count}n the str#{count}ng #{count} of the #{count}nput.\"\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_odd_count\n    candidate = method(:odd_count)\n    assert_equal([\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], candidate.call([\"1234567\"]))\n    assert_equal([\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], candidate.call([\"3\", \"11111111\"]))\n    assert_equal([\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"], candidate.call([\"271\", \"137\", \"314\"]))\n  end\nend\n"},{"task_id":"HumanEval_114","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণ সংখ্যাটোৰে।এটা অখণ্ড সংখ্যাৰ অ্যারে দিয়া হ'লে, কোনো অ-খালি উপ-অৰেৰ ন্যূনতম যোগফলটো বিচাৰি উলিওৱা ।# >>> minSubArraySum.call([2, 3, 4, 1, 2, 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n","canonical_solution":"def minSubArraySum(nums)\n  min_sum = nums[0]\n  current_sum = 0\n  nums.each do |num|\n    if current_sum > 0\n      current_sum = num\n    else\n      current_sum += num\n    end\n    min_sum = [min_sum, current_sum].min\n  end\n  min_sum\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"},{"task_id":"HumanEval_115","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণ ১ঃআপুনি কিমানবাৰ বাল্টিবোৰ নামাব লাগে তাৰ সংখ্যা আউটপুট কৰক।তোমাৰ কাম হ'ল কুঁৱাৰ খালী কৰিবলৈ বালতি ব্যৱহাৰ কৰা।আৰু সকলো বালিত সমান ক্ষমতা আছে।প্ৰতিটো পুখুৰীত এটা সমতুল্য বালতি থাকে যাৰ পৰা পানী আহৰণ কৰিব পাৰি,আৰু এটা শাৰীত থকা প্ৰতিটো ১য়ে এটা পানীৰ একক প্ৰতিনিধিত্ব কৰে।আপুনি এটা আৰ্হিৰ গ্ৰীড লাভ কৰে য'ত প্ৰতিটো শাৰীত এটা কুঁৱাৰ থাকে।# >>> max_fill.call([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n# 6\n# Example 2:\n# >>> max_fill.call([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n# 5\n# Example 3:\n# >>> max_fill.call([[0, 0, 0], [0, 0, 0]], 5)\n# 0\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\ndef max_fill(grid, capacity)\n","canonical_solution":"def max_fill(grid, capacity)\n  total_water_units = grid.flatten.sum\n  (total_water_units.to_f \/ capacity).ceil\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_fill\n    candidate = method(:max_fill)\n    assert_equal(6, candidate.call([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1))\n    assert_equal(5, candidate.call([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2))\n    assert_equal(0, candidate.call([[0, 0, 0], [0, 0, 0]], 5))\n    assert_equal(4, candidate.call([[1, 1, 1, 1], [1, 1, 1, 1]], 2))\n    assert_equal(2, candidate.call([[1, 1, 1, 1], [1, 1, 1, 1]], 9))\n  end\nend\n"},{"task_id":"HumanEval_116","nl":"asm_Beng","pl":"rb","prompt":"ইয়াক এনেদৰে ৰূপায়ণ কৰিব লাগিবঃএকে সংখ্যক এককৰ বাবে, দশমিক মানৰ ভিত্তিত ছাৰ্ট কৰক।একৰ সংখ্যা তেওঁলোকৰ বাইনেৰী প্ৰতিনিধিত্বৰ ক্ৰমান্বয়ে।এই কটাত, আপুনি  অনুসৰি ঋণাত্মক নথকা পূৰ্ণসংখ্যাৰ এটা শৃংখলা বাছনি কৰিব লাগিব।# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1, 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n","canonical_solution":"def sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'), n] }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"},{"task_id":"HumanEval_117","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃটোকাঃ আপুনি ধাৰণা কৰিব পাৰে যে ইনপুট ষ্ট্ৰিংত কেৱল আখৰ আৰু স্পেচ থাকে।যদি string s খালী হয় তেন্তে function এ এটা খালী এৰে ৰিটাৰ্ণ কৰিব লাগে.n বৰ্ণমালাৰ ভিতৰত এই শব্দবোৰ যাতে s শৃংখলাত দেখা যায়।এটা ফাংচন যি  ঠিক পোৱা সকলো শব্দৰ এটা এৰেজ ঘূৰাই আনেএটা ষ্ট্ৰিং s আৰু এটা স্বাভাৱিক সংখ্যা n দিয়া হ'লে, আপোনাক এটা কাৰ্যকৰীকৰণ কৰিবলৈ কোৱা হৈছে # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n# [\"Uncle\"]\ndef select_words(s, n)\n","canonical_solution":"def select_words(s, n)\n  vowels = \"aeiouAEIOU\"\n  words = s.split\n  words.select do |word|\n    consonant_count = word.chars.count { |char| !vowels.include?(char) }\n    consonant_count == n\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"},{"task_id":"HumanEval_118","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃআপুনি ধাৰণা কৰিব পাৰে যে দিয়া শাৰীটোত কেৱল ইংৰাজী আখৰহে আছে।উপৰোক্ত চৰ্ত পূৰণ কৰা কোনো স্বৰবৰ্ণ বিচাৰি উলিয়াওক।আৰম্ভণি আৰু শেষৰ স্বৰসমূহ গণনা কৰা নহয়। যদি আপুনি কৰা নাই তেন্তে খালী শাৰী ঘূৰাই দিয়ক।শব্দটোৰ সোঁফালৰ পৰা দুটা স্ব-সংকেত (কেছ সেনসিটিভ) ।আপোনাক এটা শব্দ দিয়া হৈছে। আপোনাৰ কাম হ'ল আটাইতকৈ ওচৰৰ স্বৰবৰ্ণটো বিচাৰি উলিওৱা যিটো ৰ মাজত ৰৈছে।# >>> get_closest_vowel.call(\"yogurt\")\n# \"u\"\n# >>> get_closest_vowel.call(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel.call(\"quick\")\n# \"\"\n# >>> get_closest_vowel.call(\"ab\")\n# \"\"\ndef get_closest_vowel(word)\n","canonical_solution":"def get_closest_vowel(word)\n  vowels = \"aeiouAEIOU\"\n  (1...word.length - 1).reverse_each do |i|\n    if vowels.include?(word[i]) && !vowels.include?(word[i - 1]) && !vowels.include?(word[i + 1])\n      return word[i]\n    end\n  end\n  return \"\"\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_closest_vowel\n    candidate = method(:get_closest_vowel)\n    assert_equal(\"u\", candidate.call(\"yogurt\"))\n    assert_equal(\"u\", candidate.call(\"full\"))\n    assert_equal(\"\", candidate.call(\"easy\"))\n    assert_equal(\"\", candidate.call(\"eAsy\"))\n    assert_equal(\"\", candidate.call(\"ali\"))\n    assert_equal(\"a\", candidate.call(\"bad\"))\n    assert_equal(\"o\", candidate.call(\"most\"))\n    assert_equal(\"\", candidate.call(\"ab\"))\n    assert_equal(\"\", candidate.call(\"ba\"))\n    assert_equal(\"\", candidate.call(\"quick\"))\n    assert_equal(\"i\", candidate.call(\"anime\"))\n    assert_equal(\"\", candidate.call(\"Asia\"))\n    assert_equal(\"o\", candidate.call(\"Above\"))\n  end\nend\n"},{"task_id":"HumanEval_119","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃযদি এটা ভাল শাৰী তৈয়াৰ কৰাৰ উপায় আছে তেন্তে 'হয়' ঘূৰাই দিব, আৰু অন্যথা 'নহয়' ঘূৰাই দিব।\" (()) \" নহয় ।উদাহৰণস্বৰূপে, '(((() ' শাৰীটো ভাল, আনহাতে  শাৰীটো ভাল।এটা ষ্ট্ৰিং S ভাল বুলি গণ্য কৰা হয় যদি আৰু কেৱল যদি S ৰ সকলো বন্ধনীৰ কোনো এটা আদেশ, যে ফলাফলৰ শাৰী ভাল হ'ব।আপোনাৰ কাম হ'ল দুটা শাৰী সংযোগ কৰা সম্ভৱ নে নহয় পৰীক্ষা কৰা।কেৱল বন্ধনী \" (() \" বা বন্ধনী \") \"তআপোনাক দুটা ষ্ট্ৰিং দিয়া হৈছে, দুয়োটা ষ্ট্ৰিং খোলা # >>> match_parens.call([\"()(\", \")\"])\n# \"Yes\"\n# >>> match_parens.call([\")\", \")\"])\n# \"No\"\ndef match_parens(lst)\n","canonical_solution":"def match_parens(lst)\n  a, b = lst\n\n  # Define a helper method to check if a string is balanced\n  def balanced?(s)\n    count = 0\n    s.each_char do |c|\n      count += 1 if c == '('\n      count -= 1 if c == ')'\n      return false if count < 0\n    end\n    count == 0\n  end\n\n  # Check if either concatenation forms a good string\n  if balanced?(a + b) || balanced?(b + a)\n    \"Yes\"\n  else\n    \"No\"\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_match_parens\n    candidate = method(:match_parens)\n    assert_equal(\"Yes\", candidate.call([\"()(\", \")\"]))\n    assert_equal(\"No\", candidate.call([\")\", \")\"]))\n    assert_equal(\"No\", candidate.call([\"(()(())\", \"())())\"]))\n    assert_equal(\"Yes\", candidate.call([\")())\", \"(()()(\"]))\n    assert_equal(\"Yes\", candidate.call([\"(())))\", \"(()())((\"]))\n    assert_equal(\"No\", candidate.call([\"()\", \"())\"]))\n    assert_equal(\"Yes\", candidate.call([\"(()(\", \"()))()\"]))\n    assert_equal(\"No\", candidate.call([\"((((\", \"((())\"]))\n    assert_equal(\"No\", candidate.call([\")(()\", \"(()(\"]))\n    assert_equal(\"No\", candidate.call([\")(\", \")(\"]))\n    assert_equal(\"Yes\", candidate.call([\"(\", \")\"]))\n    assert_equal(\"Yes\", candidate.call([\")\", \"(\"]))\n  end\nend\n"},{"task_id":"HumanEval_120","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণ ১ঃদীঘ k আৰু সৰ্বাধিক k সংখ্যক arr ৰ সৈতে।এটা সমষ্টি arr আৰু এটা ধনাত্মক k সংখ্যা দিয়া হৈছে, এটা ছৰ্টড এৰেজ ঘূৰাই দিয়ক # >>> maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4, -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n","canonical_solution":"def maximum(arr, k)\n  arr.sort.last(k).sort\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"},{"task_id":"HumanEval_121","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণসমূহএটা অ-খালি অখণ্ড সংখ্যাৰ অ্যারে দিয়া হ'লে, সম-অৱস্থানত থকা সকলো অস্বাভাৱিক উপাদানৰ যোগফল ঘূৰাই দিব.# >>> solution.call([5, 8, 7, 1])\n# 12\n# >>> solution.call([3, 3, 3, 3, 3])\n# 9\n# >>> solution.call([30, 13, 24, 321])\n# 0\ndef solution(lst)\n","canonical_solution":"def solution(lst)\n  lst.each_with_index.reduce(0) do |sum, (val, idx)|\n    (idx.even? && val.odd?) ? sum + val : sum\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"},{"task_id":"HumanEval_122","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃarr ৰ প্ৰথম k টা উপাদানৰ পৰা সৰ্বাধিক দুটা অংক থকা উপাদানৰ যোগফল।এটা অ-খালি সমষ্টিৰ অন্তৰ্গত arr আৰু k এটা সমষ্টিৰ অন্তৰ্গত, return # >>> add_elements.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\ndef add_elements(arr, k)\n","canonical_solution":"def add_elements(arr, k)\n  arr.first(k).select { |num| num.abs.to_s.length <= 2 }.sum\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"},{"task_id":"HumanEval_123","nl":"asm_Beng","pl":"rb","prompt":"get_odd_collatz(5) ৰিটাৰ্ণ কৰে [1, 5] # 5 ৰ বাবে ক'লাটজ ক্ৰম হৈছে [5, 16, 8, 4, 2, 1], সেয়েহে অদ্ভুত সংখ্যাবোৰ কেৱল 1, আৰু 5 ।উদাহৰণস্বৰূপেঃ2. ঘূৰাই দিয়া এৰেজ ক্ৰমান্বয়ে বাঢ়ি অহা ক্ৰমত ছৰ্ট কৰা।1. Collatz(1) হৈছে [1]।টোকাঃধাৰণাটো হ'ল n ৰ মান যিমানেই নহওক কিয়, ক্ৰমটো সদায় 1 লৈ যাব।যদি আগৰ পদটো অগণন হয়, তেন্তে পৰৱৰ্তী পদটো আগৰ পদটোৰ ৩ গুণ হ'ব।পূৰ্বৰ পদটো এনেদৰে: যদি পূৰ্বৰ পদটো জোৰা হয়, পৰৱৰ্তী পদটো হ'ব  ৰ আধা।নিম্নলিখিত ধৰণেঃ যিকোনো ধনাত্মক পূৰ্ণসংখ্যাৰ n ৰ পৰা আৰম্ভ কৰক। তাৰ পিছত প্ৰতিটো পদ  ৰ পৰা পোৱা যায়।কল্যাট্জ অনুমান হৈছে গণিতৰ এটা অনুমান যি এটা নিৰ্দিষ্ট ক্ৰমৰ বিষয়ে ।এটা ধনাত্মক n সংখ্যা দিয়া হৈছে, এটা ছৰ্টড এৰে ঘূৰাই দিয়া হ'ব য'ত ক'লাটজ ক্ৰমত অস্বাভাৱিক সংখ্যা আছে।# >>> get_odd_collatz.call(5)\n# [1, 5]\ndef get_odd_collatz(n)\n","canonical_solution":"def get_odd_collatz(n)\n  collatz_sequence = []\n  while n != 1\n    collatz_sequence << n if n.odd?\n    if n.even?\n      n = n \/ 2\n    else\n      n = 3 * n + 1\n    end\n  end\n  collatz_sequence << 1 if n == 1\n\n  collatz_sequence.sort\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_odd_collatz\n    candidate = method(:get_odd_collatz)\n    assert_equal([1, 5, 7, 11, 13, 17], candidate.call(14))\n    assert_equal([1, 5], candidate.call(5))\n    assert_equal([1, 3, 5], candidate.call(12))\n    assert_equal([1], candidate.call(1))\n  end\nend\n"},{"task_id":"HumanEval_124","nl":"asm_Beng","pl":"rb","prompt":"৪) তাৰিখটো এই বিন্যাসত থাকিব লাগিবঃ এমএম-ডিডি-ইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইই৩. মাহ ১ ৰ কম বা ১২ ৰ অধিক হ'ব নালাগিব।২. মাহ ১,৩,৫,৭,৮,১০,১২ৰ বাবে দিনৰ সংখ্যা ১ৰ কম বা ৩১ৰ অধিক নহয় আৰু মাহ ৪,৬,৯,১১ৰ বাবে দিনৰ সংখ্যা ১ৰ কম বা ৩০ৰ অধিক নহয় আৰু মাহ ২ৰ বাবে দিনৰ সংখ্যা ১ৰ কম বা ২৯ৰ অধিক নহয়।1. তাৰিখৰ শাৰীটো খালী নহয়।নিম্নলিখিত নিয়মসমূহ পূৰণ কৰিলে তাৰিখটো বৈধঃযদি তাৰিখটো বৈধ হয় তেন্তে true ৰিটাৰ্ণ কৰে অন্যথা false ৰিটাৰ্ণ কৰে।আপুনি এটা ফাংচন লিখিব লাগিব যিয়ে এটা নিৰ্দিষ্ট তাৰিখৰ ষ্ট্ৰিংক বৈধতা প্ৰদান কৰিব আৰু# >>> valid_date.call(\"03-11-2000\")\n# true\n# >>> valid_date.call(\"15-01-2012\")\n# false\n# >>> valid_date.call(\"04-0-2040\")\n# false\n# >>> valid_date.call(\"06-04-2020\")\n# true\n# >>> valid_date.call(\"06\/04\/2020\")\n# false\ndef valid_date(date)\n","canonical_solution":"def valid_date(date)\n  return false if date.nil? || date.empty?\n  \n  # Check if the date format is correct\n  match = date.match(\/^(\\d{2})-(\\d{2})-(\\d{4})$\/)\n  return false unless match\n  \n  month, day, year = match.captures.map(&:to_i)\n  \n  # Check if month is valid\n  return false if month < 1 || month > 12\n  \n  # Check if day is valid according to the month\n  case month\n  when 1, 3, 5, 7, 8, 10, 12\n    return day >= 1 && day <= 31\n  when 4, 6, 9, 11\n    return day >= 1 && day <= 30\n  when 2\n    return day >= 1 && day <= 29\n  else\n    return false\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_valid_date\n    candidate = method(:valid_date)\n    assert_equal(true, candidate.call(\"03-11-2000\"))\n    assert_equal(false, candidate.call(\"15-01-2012\"))\n    assert_equal(false, candidate.call(\"04-0-2040\"))\n    assert_equal(true, candidate.call(\"06-04-2020\"))\n    assert_equal(true, candidate.call(\"01-01-2007\"))\n    assert_equal(false, candidate.call(\"03-32-2011\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"04-31-3000\"))\n    assert_equal(true, candidate.call(\"06-06-2005\"))\n    assert_equal(false, candidate.call(\"21-31-2000\"))\n    assert_equal(true, candidate.call(\"04-12-2003\"))\n    assert_equal(false, candidate.call(\"04122003\"))\n    assert_equal(false, candidate.call(\"20030412\"))\n    assert_equal(false, candidate.call(\"2003-04\"))\n    assert_equal(false, candidate.call(\"2003-04-12\"))\n    assert_equal(false, candidate.call(\"04-2003\"))\n  end\nend\n"},{"task_id":"HumanEval_125","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণসমূহআখৰ, আখৰ (a) = 0, আখৰ (b) = 1, ... আখৰ (z) = 25যদি কোনো কমা নাই, আপুনি অদ্ভুত ক্ৰমত থকা সৰু আখৰবোৰৰ সংখ্যা ঘূৰাই দিব লাগিব।এটা শব্দৰ শাৰী দিয়া হৈছে, শূন্যস্থানত বিভক্ত শব্দৰ এটা এৰেজ ঘূৰাই দিব, যদি কোনো শূন্যস্থান আপোনাৰ পাঠত নাই # >>> split_words.call(\"Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words.call(\"Hello,world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words.call(\"abcdef\")\n# 3\ndef split_words(txt)\n","canonical_solution":"def split_words(txt)\n  if txt.include?(' ')\n    return txt.split(' ')\n  elsif txt.include?(',')\n    return txt.split(',')\n  else\n    odd_count = txt.chars.count { |char| ('a'..'z').include?(char) && (char.ord - 'a'.ord).odd? }\n    return odd_count\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_split_words\n    candidate = method(:split_words)\n    assert_equal([\"Hello\", \"world!\"], candidate.call(\"Hello world!\"))\n    assert_equal([\"Hello\", \"world!\"], candidate.call(\"Hello,world!\"))\n    assert_equal([\"Hello\", \"world,!\"], candidate.call(\"Hello world,!\"))\n    assert_equal([\"Hello,Hello,world\", \"!\"], candidate.call(\"Hello,Hello,world !\"))\n    assert_equal(3, candidate.call(\"abcdef\"))\n    assert_equal(2, candidate.call(\"aaabb\"))\n    assert_equal(1, candidate.call(\"aaaBb\"))\n    assert_equal(0, candidate.call(\"\"))\n  end\nend\n"},{"task_id":"HumanEval_126","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণসমূহসংখ্যা, false ঘূৰাই দিব. কোনো ঋণাত্মক সংখ্যা আৰু কেৱল পূৰ্ণ সংখ্যা ধৰা নলওক।যদি এটা এৰেজত একেটা এৰেজৰ ১তকৈ অধিক ডুপ্লিকেট থাকে, তেন্তে ইয়াক এটা সংখ্যাৰ অ্যারে দিয়া হ'লে, সিহঁতে ছৰ্ট কৰা হওক বা নহওক উভতাই দিব # >>> is_sorted.call([5])\n# true\n# >>> is_sorted.call([1, 2, 3, 4, 5])\n# true\n# >>> is_sorted.call([1, 3, 2, 4, 5])\n# false\n# >>> is_sorted.call([1, 2, 3, 4, 5, 6])\n# true\n# >>> is_sorted.call([1, 2, 3, 4, 5, 6, 7])\n# true\n# >>> is_sorted.call([1, 3, 2, 4, 5, 6, 7])\n# false\n# >>> is_sorted.call([1, 2, 2, 3, 3, 4])\n# true\n# >>> is_sorted.call([1, 2, 2, 2, 3, 4])\n# false\ndef is_sorted(lst)\n","canonical_solution":"def is_sorted(lst)\n  lst.each_cons(2).with_index do |(a, b), index|\n    return false if a > b\n    return false if index < lst.length - 2 && a == b && lst[index + 2] == b\n  end\n  true\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_sorted\n    candidate = method(:is_sorted)\n    assert_equal(true, candidate.call([5]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 3, 2, 4, 5]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6, 7]))\n    assert_equal(false, candidate.call([1, 3, 2, 4, 5, 6, 7]))\n    assert_equal(true, candidate.call([]))\n    assert_equal(true, candidate.call([1]))\n    assert_equal(false, candidate.call([3, 2, 1]))\n    assert_equal(false, candidate.call([1, 2, 2, 2, 3, 4]))\n    assert_equal(false, candidate.call([1, 2, 3, 3, 3, 4]))\n    assert_equal(true, candidate.call([1, 2, 2, 3, 3, 4]))\n    assert_equal(true, candidate.call([1, 2, 3, 4]))\n  end\nend\n"},{"task_id":"HumanEval_127","nl":"asm_Beng","pl":"rb","prompt":"[ইনপুট\/আউটপুট] নমুনাঃযদি দুটাকৈ অন্তৰাল পাৰ হৈ নাযায়, \"NO\" ঘূৰাই দিয়ক।অন্যথা, \"NO\" ঘূৰাই দিয়ক।যদি ছেদটোৰ দৈৰ্ঘ্য এটা মৌলিক সংখ্যা হয়, \"YES\" ঘূৰাই দিয়ক, যাৰ দৈৰ্ঘ্য ১, যিটো এটা অগণন সংখ্যা নহয়।উদাহৰণ স্বৰূপে, অন্তৰাল (1, 3), (2, 4) ৰ ছেদ (2, 3) ।অন্তৰাল এটা মৌলিক সংখ্যা।আপোনাৰ কাম হ'ল এই দুটাৰ ছেদক দৈৰ্ঘ্য নিৰ্ণয় কৰাপ্ৰতিটো নিৰ্দিষ্ট অন্তৰালৰ বাবে, এইটো ধাৰণা কৰা হয় যে ইয়াৰ আৰম্ভণি ইয়াৰ শেষৰ সমান বা কম।আৰম্ভণি আৰু শেষ দুয়োটাই অন্তৰ্ভুক্ত কৰে।এই অন্তৰালসমূহ বন্ধ, যাৰ অৰ্থ হৈছে অন্তৰাল (আৰম্ভ, অন্ত) য'ত প্ৰতিটো অন্তৰাল এটা পূৰ্ণসংখ্যাৰ জোৰা। উদাহৰণ স্বৰূপে, অন্তৰাল = (আৰম্ভ, শেষ) = (1, 2) ।আপোনাক দুটা অন্তৰাল দিয়া হৈছে,# >>> intersection.call([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection.call([-1, 1], [0, 4])\n# \"NO\"\n# >>> intersection.call([-3, -1], [-5, 5])\n# \"YES\"\ndef intersection(interval1, interval2)\n","canonical_solution":"def intersection(interval1, interval2)\n  start1, end1 = interval1\n  start2, end2 = interval2\n\n  intersection_start = [start1, start2].max\n  intersection_end = [end1, end2].min\n\n  if intersection_start > intersection_end\n    return \"NO\"\n  end\n\n  intersection_length = intersection_end - intersection_start + 1\n\n  return \"YES\" if prime?(intersection_length)\n\n  \"NO\"\nend\n\ndef prime?(n)\n  return false if n <= 1\n  return true if n == 2 || n == 3\n\n  (2..Math.sqrt(n).to_i).each do |i|\n    return false if n % i == 0\n  end\n\n  true\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection\n    candidate = method(:intersection)\n    assert_equal(\"NO\", candidate.call([1, 2], [2, 3]))\n    assert_equal(\"NO\", candidate.call([-1, 1], [0, 4]))\n    assert_equal(\"YES\", candidate.call([-3, -1], [-5, 5]))\n    assert_equal(\"YES\", candidate.call([-2, 2], [-4, 0]))\n    assert_equal(\"NO\", candidate.call([-11, 2], [-1, -1]))\n    assert_equal(\"NO\", candidate.call([1, 2], [3, 5]))\n    assert_equal(\"NO\", candidate.call([1, 2], [1, 2]))\n    assert_equal(\"NO\", candidate.call([-2, -2], [-3, -2]))\n  end\nend\n"},{"task_id":"HumanEval_128","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃটোকাঃ খালী arr ৰ বাবে nil ৰিটাৰ্ণ কৰক।অংকবোৰক ১, -১ বা ০ ৰে প্ৰতিনিধিত্ব কৰা অংকবোৰক এটা অংক হিচাপে গণ্য কৰা হয়।পূৰ্ণসংখ্যাৰ পৰিমাণৰ যোগফল সকলো চিহ্নৰ উৎপাদনৰ দ্বাৰা গুণিত কৰা আপুনি এটা এৰেৰে পূৰ্ণসংখ্যাক দিয়া হৈছে আৰু আপুনি ঘূৰাই দিব লাগিব # >>> prod_signs.call([1, 2, 2, -4])\n# 9\n# >>> prod_signs.call([0, 1])\n# 0\n# >>> prod_signs.call([])\n# nil\ndef prod_signs(arr)\n","canonical_solution":"def prod_signs(arr)\n  return nil if arr.empty?\n  \n  product_signs = arr.reduce(1) { |prod, num| prod * num <=> 0 }\n  sum_magnitudes = arr.map(&:abs).sum\n  \n  product_signs * sum_magnitudes\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prod_signs\n    candidate = method(:prod_signs)\n    assert_equal(-9, candidate.call([1, 2, 2, -4]))\n    assert_equal(0, candidate.call([0, 1]))\n    assert_equal(-10, candidate.call([1, 1, 1, 2, 3, -1, 1]))\n    assert_equal(nil, candidate.call([]))\n    assert_equal(20, candidate.call([2, 4, 1, 2, -1, -1, 9]))\n    assert_equal(4, candidate.call([-1, 1, -1, 1]))\n    assert_equal(-4, candidate.call([-1, 1, 1, 1]))\n    assert_equal(0, candidate.call([-1, 1, 1, 0]))\n  end\nend\n"},{"task_id":"HumanEval_129","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃন্যূনতম পথ অতিক্ৰম কৰা কোষসমূহৰ মানসমূহৰ এটা আদেশযুক্ত অ্যারে ঘূৰাই আনে।ইয়াৰ উত্তৰ অনন্য হ'ব বুলি নিশ্চিত।lst_A[j] = lst_B[j]।এনেদৰে lst_A[i] < lst_B[i] আৰু যিকোনো j (1 <= j < i) ৰ বাবে আমি পাইছো lst_B, অন্য কথাত, ইয়াত এটা পূৰ্ণসংখ্যাৰ সূচক i (1 <= i <= k) আছে।(আমি সিহঁতক lst_A আৰু lst_B বুলি কওঁ), lst_A শব্দকোষীয়ভাৱে কম ।A আৰু B কক্ষত থকা মানবোৰক এটা ক্ৰমযুক্ত অৰণ্যত স্থান দিয়াৰ পিছত,এটা পথ A (k দৈৰ্ঘ্যৰ) এটা পথ B (k দৈৰ্ঘ্যৰ) তকৈ সৰু বুলি গণ্য কৰা হয় যদিহে আপুনি গ্ৰীডৰ বাহিৰত যাব নোৱাৰে।(অৱশ্যেই পৃথক) ।অনুগ্ৰহ কৰি মন কৰক যে k দৈৰ্ঘ্যৰ এটা পথৰ অৰ্থ হৈছে একেবাৰে k কোষৰ পৰিদৰ্শন কৰা (নক ম'বাইলঅন্য কথাত ক'বলৈ গ'লে, আপুনি আপোনাৰ সৈতে এডাল ভাগ কৰি লোৱা কোষবোৰলৈ যাব পাৰে।যিকোনো কোষৰ পৰা, আৰু প্ৰতিটো পদক্ষেপত আপুনি যিকোনো চুবুৰীয়া কোষলৈ যাব পাৰে,আপুনি গ্ৰীডত k দৈৰ্ঘ্যৰ ন্যূনতম পথটো বিচাৰি উলিয়াব লাগিব। আপুনি আৰম্ভ কৰিব পাৰে।অন্তৰ্ভুক্তিকৰণ গ্ৰীডৰ কোষসমূহত একেবাৰে এবাৰ দেখা যায়।গ্ৰীডৰ প্ৰতিটো কোষত এটা মান থাকে। [1, N * N] ৰ ভিতৰত প্ৰতিটো সম্পূৰ্ণ সংখ্যা।এটা গ্ৰীড দিয়া হ'ল য'ত N শাৰী আৰু N কলাম আছে (N >= 2) আৰু এটা ধনাত্মক পূৰ্ণ সংখ্যা k, # >>> minPath.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n# >>> minPath.call([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\ndef minPath(grid, k)\n","canonical_solution":"def minPath(grid, k)\n  n = grid.size\n  directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]\n  min_path = nil\n\n  n.times do |i|\n    n.times do |j|\n      queue = [[[i, j], [grid[i][j]]]]\n      until queue.empty?\n        position, path = queue.shift\n        if path.size == k\n          min_path = path if min_path.nil? || path < min_path\n          next\n        end\n        directions.each do |dx, dy|\n          x, y = position[0] + dx, position[1] + dy\n          if x.between?(0, n-1) && y.between?(0, n-1)\n            queue.push([[x, y], path + [grid[x][y]]])\n          end\n        end\n      end\n    end\n  end\n  min_path\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minPath\n    candidate = method(:minPath)\n    assert_equal([1, 2, 1], candidate.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))\n    assert_equal([1], candidate.call([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))\n    assert_equal([1, 2, 1, 2], candidate.call([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4))\n    assert_equal([1, 10, 1, 10, 1, 10, 1], candidate.call([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7))\n    assert_equal([1, 7, 1, 7, 1], candidate.call([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5))\n    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1], candidate.call([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9))\n    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6], candidate.call([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12))\n    assert_equal([1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8))\n    assert_equal([1, 5, 1, 5, 1, 5, 1, 5], candidate.call([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8))\n    assert_equal([1, 2, 1, 2, 1, 2, 1, 2, 1, 2], candidate.call([[1, 2], [3, 4]], 10))\n    assert_equal([1, 3, 1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[1, 3], [3, 2]], 10))\n  end\nend\n"},{"task_id":"HumanEval_130","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃট্ৰিবোনাচ্চি ক্ৰমৰ প্ৰথম n + 1 সংখ্যা।আপোনাক এটা অ-নতিবাচক পূৰ্ণ সংখ্যা n দিয়া হৈছে, আপুনি এটা এৰেজ ৰিটাৰ্ণ কৰিব লাগিব = ২ + ৩ + ৩ = ৮ ।ত্ৰিপদ (৩) = ত্ৰিপদ (২) + ত্ৰিপদ (১) + ত্ৰিপদ (৪) ।ত্ৰি () = ৩ত্ৰি (২) = ১ + (২ \/ ২) = ২ ।উদাহৰণস্বৰূপেঃত্ৰি (n) = ত্ৰি (n - 1) + ত্ৰি (n - 2) + ত্ৰি (n + 1), যদি n অস্বাভাৱিক হয়।ত্ৰি (n) = 1 + n \/ 2, যদি n জোৰা হয়।ত্ৰি (২) = ৩ট্ৰিবোনাচি ক্ৰমৰ পুনৰাবৃত্তিৰ দ্বাৰা সংজ্ঞায়িত কৰা হয়ঃকিন্তু মানুহে নাজানে ট্ৰিবোনাচি ক্ৰম কি।ফিব'নাচ্চি ক্ৰমক সকলোৱে জানে, ইয়াক গভীৰভাৱে অধ্যয়ন কৰিছিল গণিতজ্ঞসকলে # >>> tri.call(3)\n# [1, 3, 2, 8]\ndef tri(n)\n","canonical_solution":"def tri(n)\n  sequence = [1, 3]\n  \n  (2..n).each do |i|\n    if i.even?\n      sequence[i] = 1 + i \/ 2\n    else\n      sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1] rescue 0\n    end\n  end\n  \n  sequence[0..n]\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tri\n    candidate = method(:tri)\n    assert_equal([1, 3, 2, 8], candidate.call(3))\n    assert_equal([1, 3, 2, 8, 3], candidate.call(4))\n    assert_equal([1, 3, 2, 8, 3, 15], candidate.call(5))\n    assert_equal([1, 3, 2, 8, 3, 15, 4], candidate.call(6))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24], candidate.call(7))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5], candidate.call(8))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35], candidate.call(9))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11], candidate.call(20))\n    assert_equal([1], candidate.call(0))\n    assert_equal([1, 3], candidate.call(1))\n  end\nend\n"},{"task_id":"HumanEval_131","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃসকলো অংক জোৰা হ'লে 0 ঘূৰাই দিব.এটা ধনাত্মক পূৰ্ণ সংখ্যা n দিয়া হ'লে অদ্ভুত অংকবোৰৰ উৎপাদনৰ সংখ্যাটো ঘূৰাই দিয়া।# >>> digits.call(1)\n# 1\n# >>> digits.call(4)\n# 0\n# >>> digits.call(235)\n# 15\ndef digits(n)\n","canonical_solution":"def digits(n)\n  odd_digits = n.to_s.chars.map(&:to_i).select { |digit| digit.odd? }\n  return 0 if odd_digits.empty?\n  odd_digits.reduce(:*)\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digits\n    candidate = method(:digits)\n    assert_equal(5, candidate.call(5))\n    assert_equal(5, candidate.call(54))\n    assert_equal(1, candidate.call(120))\n    assert_equal(5, candidate.call(5014))\n    assert_equal(315, candidate.call(98765))\n    assert_equal(2625, candidate.call(5576543))\n    assert_equal(0, candidate.call(2468))\n  end\nend\n"},{"task_id":"HumanEval_132","nl":"asm_Beng","pl":"rb","prompt":"য'ত উপ-অনুসৰণত কমেও এটা ব্ৰেকেট অন্তৰ্ভুক্ত হৈ থাকে।ফাংশনটো true ৰিটাৰ্ণ কৰিব লাগে যদিহে আৰু কেৱল যদিহে ব্ৰেকেটৰ এটা বৈধ উপ-অনুসৰণ আছে ।এটা ফাংচন সৃষ্টি কৰক যি এটা ষ্ট্ৰিংক ইনপুট হিচাপে গ্ৰহণ কৰে য'ত কেৱল বৰ্গাক্ৰেট থাকে।# >>> is_nested.call(\"[[]]\")\n# true\n# >>> is_nested.call(\"[]]]]]]][[[[[]\")\n# false\n# >>> is_nested.call(\"[][]\")\n# false\n# >>> is_nested.call(\"[]\")\n# false\n# >>> is_nested.call(\"[[][]]\")\n# true\n# >>> is_nested.call(\"[[]][[\")\n# true\ndef is_nested(string)\n","canonical_solution":"def is_nested(string)\n  stack = []\n  has_nested = false\n\n  string.each_char do |char|\n    if char == '['\n      stack.push(char)\n    elsif char == ']'\n      if stack.empty?\n        return false\n      end\n      stack.pop\n      has_nested = true if stack.any?\n    end\n  end\n\n  has_nested\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"},{"task_id":"HumanEval_133","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃপ্ৰথমে অংকন প্ৰণালীটোৰ প্ৰতিটো উপাদানক ওপৰৰ int ({}) তললৈ ঘূৰাওক।আপুনি দিয়া এৰেজত থকা সংখ্যাৰ স্কোৱাডৰ যোগফল ঘূৰাই দিব লাগিব, আপোনাক এটা সংখ্যাৰ অ্যারে দিয়া হৈছে।# >>> lst.call([1.0, 2.0, 3.0])\n# 14\n# >>> lst.call([1.0, 4.0, 9.0])\n# 98\n# >>> lst.call([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> lst.call([1.4, 4.2, 0.0])\n# 29\n# >>> lst.call([-2.4, 1.0, 1.0])\n# 6\ndef sum_squares(lst)\n","canonical_solution":"def sum_squares(lst)\n  lst.map { |num| (num.ceil)**2 }.sum\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n    candidate = method(:sum_squares)\n    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))\n    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))\n    assert_equal(84, candidate.call([1.0, 3.0, 5.0, 7.0]))\n    assert_equal(29, candidate.call([1.4, 4.2, 0.0]))\n    assert_equal(6, candidate.call([-2.4, 1.0, 1.0]))\n    assert_equal(10230, candidate.call([100.0, 1.0, 15.0, 2.0]))\n    assert_equal(200000000, candidate.call([10000.0, 10000.0]))\n    assert_equal(75, candidate.call([-1.4, 4.6, 6.3]))\n    assert_equal(1086, candidate.call([-1.4, 17.9, 18.9, 19.9]))\n    assert_equal(0, candidate.call([0.0]))\n    assert_equal(1, candidate.call([-1.0]))\n    assert_equal(2, candidate.call([-1.0, 1.0, 0.0]))\n  end\nend\n"},{"task_id":"HumanEval_134","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃটোকাঃ \"word\" হ'ল শাৰীৰে পৃথক কৰা বৰ্ণৰ এটা গোট।এটা শব্দৰ এটা অংশ, আৰু অন্যথা মিছা।এটা নিৰ্দিষ্ট শাৰী এটা বৰ্ণমালাৰ বৰ্ণ আৰু নহয় এটা ফাংশন সৃষ্টি কৰক যিটো true ৰিটাৰ্ণ কৰে যদি শেষৰ বৰ্ণটো  হয়# >>> check_if_last_char_is_a_letter.call(\"apple pie\")\n# false\n# >>> check_if_last_char_is_a_letter.call(\"apple pi e\")\n# true\n# >>> check_if_last_char_is_a_letter.call(\"apple pi e \")\n# false\n# >>> check_if_last_char_is_a_letter.call(\"\")\n# false\ndef check_if_last_char_is_a_letter(txt)\n","canonical_solution":"check_if_last_char_is_a_letter = ->(txt) {\n  return false if txt.strip.empty?\n  words = txt.strip.split(' ')\n  last_word = words.last\n  return false if last_word.empty?\n  last_char = last_word[-1]\n\n  last_char =~ \/[a-zA-Z]\/ && (words.size == 1 || txt[txt.rindex(last_char) - 1] == ' ')\n}","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_if_last_char_is_a_letter\n    candidate = method(:check_if_last_char_is_a_letter)\n    assert_equal(false, candidate.call(\"apple\"))\n    assert_equal(true, candidate.call(\"apple pi e\"))\n    assert_equal(false, candidate.call(\"eeeee\"))\n    assert_equal(true, candidate.call(\"A\"))\n    assert_equal(false, candidate.call(\"Pumpkin pie \"))\n    assert_equal(false, candidate.call(\"Pumpkin pie 1\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"eeeee e \"))\n    assert_equal(false, candidate.call(\"apple pie\"))\n    assert_equal(false, candidate.call(\"apple pi e \"))\n  end\nend\n"},{"task_id":"HumanEval_135","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃনকল মানৰ বাবে।যদি তেনে কোনো উপাদান নাই তেন্তে -১ ঘূৰাই দিব। দিয়া অ্যারেটোত  অন্তৰ্ভুক্ত নহ'ব।যদি  ইয়াৰ আগতে থকা মৌলৰ সমান বা অধিক নহয়।এটা ফাংচন সৃষ্টি কৰক যি এটা উপাদানৰ সৰ্ববৃহৎ সূচক ঘূৰাই দিয়ে যিটো # >>> can_arrange.call([1, 2, 4, 3, 5])\n# 3\n# >>> can_arrange.call([1, 2, 3])\n# -1\ndef can_arrange(arr)\n","canonical_solution":"def can_arrange(arr)\n  (1...arr.length).reverse_each do |i|\n    return i if arr[i] < arr[i - 1]\n  end\n  -1\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_can_arrange\n    candidate = method(:can_arrange)\n    assert_equal(3, candidate.call([1, 2, 4, 3, 5]))\n    assert_equal(-1, candidate.call([1, 2, 4, 5]))\n    assert_equal(2, candidate.call([1, 4, 2, 5, 6, 7, 8, 9, 10]))\n    assert_equal(4, candidate.call([4, 8, 5, 7, 3]))\n    assert_equal(-1, candidate.call([]))\n  end\nend\n"},{"task_id":"HumanEval_136","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃযদি কোনো ঋণাত্মক বা ধনাত্মক পূৰ্ণ সংখ্যা নাই, তেন্তে সেইবোৰক nil হিচাপে ঘূৰাই দিব।এটা এৰেজত ধনাত্মক পূৰ্ণসংখ্যাৰ সংখ্যা।আটাইতকৈ ডাঙৰ ঋণাত্মক পূৰ্ণ সংখ্যাটো, আৰু 'b' আটাইতকৈ সৰুটো।এটা ফাংচন সৃষ্টি কৰক যি এটা এৰে (a, b) ঘূৰাই আনে, য'ত 'a' হৈছে # >>> largest_smallest_integers.call([2, 4, 1, 3, 5, 7])\n# [nil, 1]\n# >>> largest_smallest_integers.call([])\n# [nil, nil]\n# >>> largest_smallest_integers.call([0])\n# [nil, nil]\ndef largest_smallest_integers(lst)\n","canonical_solution":"def largest_smallest_integers(lst)\n  largest_negative = nil\n  smallest_positive = nil\n  \n  lst.each do |num|\n    if num < 0\n      largest_negative = num if largest_negative.nil? || num > largest_negative\n    elsif num > 0\n      smallest_positive = num if smallest_positive.nil? || num < smallest_positive\n    end\n  end\n  \n  [largest_negative, smallest_positive]\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5, 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil, nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100, 1]))\n  end\nend\n"},{"task_id":"HumanEval_137","nl":"asm_Beng","pl":"rb","prompt":"টোকাঃ যদি এটা বাস্তৱ সংখ্যা এটা শাৰী হিচাপে প্ৰতিনিধিত্ব কৰা হয়, তেন্তে ফ্ল'টিং পইণ্ট হ'ব পাৰে . বা , যদি মানবোৰ সমান হয় তেন্তে nil ঘূৰাই দিয়ক।বাস্তৱ সংখ্যা, আৰু ইয়াৰ প্ৰদান কৰা ভৰিবল প্ৰকাৰৰ বৃহত্তৰ ভৰিবলটো ঘূৰাই আনে।এটা ফাংচন সৃষ্টি কৰক যি সম্পূৰ্ণ সংখ্যা, ফ্লাইট, বা  প্ৰতিনিধিত্ব কৰা  # >>> compare_one.call(1, 2.5)\n# 2.5\n# >>> compare_one.call(1, \"2,3\")\n# \"2,3\"\n# >>> compare_one.call(\"5,1\", \"6\")\n# \"6\"\n# >>> compare_one.call(\"1\", 1)\n# nil\ndef compare_one(a, b)\n","canonical_solution":"def compare_one(a, b)\n  a = a.to_s.tr(',', '.').to_f if a.is_a?(String) && a.include?(',')\n  b = b.to_s.tr(',', '.').to_f if b.is_a?(String) && b.include?(',')\n\n  if a.is_a?(String) && b.is_a?(String)\n    return nil if a == b\n    return a > b ? a : b\n  elsif a.is_a?(Float) && b.is_a?(Float)\n    return nil if a == b\n    return a > b ? a : b\n  elsif a.is_a?(Integer) && b.is_a?(Integer)\n    return nil if a == b\n    return a > b ? a : b\n  elsif a.is_a?(Integer) && b.is_a?(Float)\n    a = a.to_f\n    return nil if a == b\n    return a > b ? a : b\n  elsif a.is_a?(Float) && b.is_a?(Integer)\n    b = b.to_f\n    return nil if a == b\n    return a > b ? a : b\n  elsif a.is_a?(String) && b.is_a?(Float)\n    b = b.to_s # Only supporting variable type comparison, retain original types\n    return nil if a == b\n    return a > b ? a : b\n  elsif a.is_a?(Float) && b.is_a?(String)\n    a = a.to_s # Only supporting variable type comparison, retain original types\n    return nil if a == b\n    return a > b ? a : b\n  elsif a.is_a?(String) && b.is_a?(Integer)\n    return nil if a == b\n    return a > b ? a : b\n  elsif a.is_a?(Integer) && b.is_a?(String)\n    return nil if a == b\n    return a > b ? a : b\n  else\n    return nil\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare_one\n    candidate = method(:compare_one)\n    assert_equal(2, candidate.call(1, 2))\n    assert_equal(2.5, candidate.call(1, 2.5))\n    assert_equal(3, candidate.call(2, 3))\n    assert_equal(6, candidate.call(5, 6))\n    assert_equal(\"2,3\", candidate.call(1, \"2,3\"))\n    assert_equal(\"6\", candidate.call(\"5,1\", \"6\"))\n    assert_equal(\"2\", candidate.call(\"1\", \"2\"))\n    assert_equal(nil, candidate.call(\"1\", 1))\n  end\nend\n"},{"task_id":"HumanEval_138","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণ নিৰ্দিষ্ট সংখ্যা n ক সঠিকভাৱে 4 টা ধনাত্মক সম সংখ্যাৰ যোগফল হিচাপে লিখিব পাৰি নেকি তাৰ মূল্যায়ন কৰা ।# >>> is_equal_to_sum_even.call(4)\n# false\n# >>> is_equal_to_sum_even.call(6)\n# false\n# >>> is_equal_to_sum_even.call(8)\n# true\ndef is_equal_to_sum_even(n)\n","canonical_solution":"def is_equal_to_sum_even(n)\n  return false if n < 8\n  n.even?\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_equal_to_sum_even\n    candidate = method(:is_equal_to_sum_even)\n    assert_equal(false, candidate.call(4))\n    assert_equal(false, candidate.call(6))\n    assert_equal(true, candidate.call(8))\n    assert_equal(true, candidate.call(10))\n    assert_equal(false, candidate.call(11))\n    assert_equal(true, candidate.call(12))\n    assert_equal(false, candidate.call(13))\n    assert_equal(true, candidate.call(16))\n  end\nend\n"},{"task_id":"HumanEval_139","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃয'ত n > 0 ব্ৰাজিলিয়ান_ফেক্টৰিয়েল (n) = n! * (n-1)! * (n-2)! * ... * 1! ব্ৰাজিলীয় কাৰকক সংজ্ঞায়িত কৰা হৈছেঃ# >>> special_factorial.call(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\ndef special_factorial(n)\n","canonical_solution":"def special_factorial(n)\n  return 1 if n <= 1\n  (1..n).inject(1) { |product, i| product * factorial(i) }\nend\n\ndef factorial(num)\n  return 1 if num <= 1\n  (2..num).inject(1, :*)\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_special_factorial\n    candidate = method(:special_factorial)\n    assert_equal(288, candidate.call(4))\n    assert_equal(34560, candidate.call(5))\n    assert_equal(125411328000, candidate.call(7))\n    assert_equal(1, candidate.call(1))\n  end\nend\n"},{"task_id":"HumanEval_140","nl":"asm_Beng","pl":"rb","prompt":"তাৰপিছত সকলো ক্ৰমিক স্থানৰ ঠাইত -  লিখকআৰু যদি এটা ষ্ট্ৰিংত 2 টাতকৈ অধিক ক্ৰমাগত স্পেচ থাকে, এটা পাঠৰ শাৰী দিয়া হৈছে, তাত থকা সকলো স্থান আন্ডাৰস্ক'ৰেৰে সলনি কৰক,# >>> fix_spaces.call(\" Example\")\n# \"Example\"\n# >>> fix_spaces.call(\" Example 1\")\n# \"Example_1\"\n# >>> fix_spaces.call(\" Example 2\")\n# \"_Example_2\"\n# >>> fix_spaces.call(\" Example 3\")\n# \"_Example-3\"\ndef fix_spaces(text)\n","canonical_solution":"def fix_spaces(text)\n  text.strip.gsub(\/\\s{3,}\/, '-').gsub(' ', '_')\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fix_spaces\n    candidate = method(:fix_spaces)\n    assert_equal(\"Example\", candidate.call(\"Example\"))\n    assert_equal(\"Mudasir_Hanif_\", candidate.call(\"Mudasir Hanif \"))\n    assert_equal(\"Yellow_Yellow__Dirty__Fellow\", candidate.call(\"Yellow Yellow  Dirty  Fellow\"))\n    assert_equal(\"Exa-mple\", candidate.call(\"Exa   mple\"))\n    assert_equal(\"-Exa_1_2_2_mple\", candidate.call(\"   Exa 1 2 2 mple\"))\n  end\nend\n"},{"task_id":"HumanEval_141","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃ- বিন্দুটোৰ পিছত থকা উপশাৰীটো এইবিলাকৰ ভিতৰত এটা হ'ব লাগেঃ ['txt', 'exe', 'dll'] লেটিন বৰ্ণমালা ('a'-'z' আৰু 'A'-'Z') ।- বিন্দুটোৰ আগত থকা উপশাৰীটো খালী হ'ব নালাগে, আৰু ই  ৰ পৰা এটা আখৰেৰে আৰম্ভ হয়- ফাইলৰ নামত একেবাৰে একেটা বিন্দু আছে '.'- ফাইলৰ নামত তিনিটাতকৈ অধিক অংক থাকিব নালাগে ('0'-'9') ।পূৰণ কৰা হৈছেঃএটা ফাইলৰ নাম বৈধ বুলি গণ্য কৰা হয় যদিহে আৰু কেৱল যদিহে তলত দিয়া সকলো চৰ্ত পূৰণ হয়।ফাইলৰ নাম বৈধ হ'লে 'হয়', অন্যথা 'নহয়' ৰিটাৰ্ণ কৰে।এটা ফাংচন সৃষ্টি কৰক যি এটা ফাইলৰ নাম প্ৰতিনিধিত্ব কৰা এটা ষ্ট্ৰিং লয় আৰু উভতাই দিয়ে # >>> file_name_check.call(\"example.txt\")\n# \"Yes\"\n# >>> file_name_check.call(\"1example.dll\")\n# \"No\"\ndef file_name_check(file_name)\n","canonical_solution":"def file_name_check(file_name)\n  # Check if there's exactly one dot in the filename\n  return 'No' unless file_name.count('.') == 1\n  \n  # Split the filename into the name and extension\n  name, extension = file_name.split('.')\n  \n  # Check if the name part starts with a letter\n  return 'No' if name.empty? || !name[0].match?(\/[a-zA-Z]\/)\n  \n  # Check if the extension is valid\n  return 'No' unless ['txt', 'exe', 'dll'].include?(extension)\n  \n  # Count digits in the file name\n  digit_count = file_name.count(\"0-9\")\n  \n  # Check if digits are more than three\n  return 'No' if digit_count > 3\n  \n  'Yes'\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\", candidate.call(\"\/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"@this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\".txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"},{"task_id":"HumanEval_142","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃএই ফাংচনে তাৰ পিছত সকলো এন্ট্ৰিৰ যোগফল ঘূৰাই দিব।৩ৰ গুণিতক আৰু যদি ইয়াৰ সূচক ৪ৰ গুণিতক আৰু ৩ৰ গুণিতক নহয় তেন্তে ই সম্পূৰ্ণ সংখ্যাৰ প্ৰৱেশক ঘন কৰিব।এই ফাংচনে এটা সম্পূৰ্ণ সংখ্যাৰ এৰেজ ল'ব। এৰেজত থকা সকলো এণ্ট্ৰিৰ বাবে, ফাংচনে সম্পূৰ্ণ সংখ্যাৰ এণ্ট্ৰিটো বৰ্গক্ষেত্ৰ কৰিব যদি ইয়াৰ সূচক a হয়।\" # >>> lst\n# [1, 2, 3]\n# >>> lst\n# []\n# >>> lst\n# [-1, -5, 2, -1, -5]\ndef sum_squares(lst)\n","canonical_solution":"def sum_squares(lst)\n  lst.map.with_index do |num, index|\n    if index % 3 == 0\n      num ** 2\n    elsif index % 4 == 0\n      num ** 3\n    else\n      num\n    end\n  end.sum\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n    candidate = method(:sum_squares)\n    assert_equal(6, candidate.call([1, 2, 3]))\n    assert_equal(14, candidate.call([1, 4, 9]))\n    assert_equal(0, candidate.call([]))\n    assert_equal(9, candidate.call([1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    assert_equal(-3, candidate.call([-1, -1, -1, -1, -1, -1, -1, -1, -1]))\n    assert_equal(0, candidate.call([0]))\n    assert_equal(-126, candidate.call([-1, -5, 2, -1, -5]))\n    assert_equal(3030, candidate.call([-56, -99, 1, 0, -2]))\n    assert_equal(0, candidate.call([-1, 0, 0, 0, 0, 0, 0, 0, -1]))\n    assert_equal(-14196, candidate.call([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]))\n    assert_equal(-1448, candidate.call([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]))\n  end\nend\n"},{"task_id":"HumanEval_143","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণ ১ঃনতুন শাৰীটোৰ শব্দৰ ক্ৰম প্ৰাথমিক শাৰীটোৰ দৰে হ'ব লাগিব।যাৰ দৈৰ্ঘ্য মৌলিক সংখ্যা,আৰু আপুনি এটা ষ্ট্ৰিং ঘূৰাই দিব লাগিব য'ত মূল বাক্যটোৰ শব্দবোৰ আছে, বাক্যটোত কিছুমান শব্দ আছে, যিবোৰ এটা স্পেচাৰে পৃথক কৰা হৈছে,আপোনাক এটা বাক্য প্ৰতিনিধিত্ব কৰা এটা শাৰী দিয়া হৈছে,# >>> words_in_sentence.call(\"This is a test\")\n# \"is\"\n# Example 2:\n# >>> words_in_sentence.call(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\ndef words_in_sentence(sentence)\n","canonical_solution":"def words_in_sentence(sentence)\n  def is_prime?(num)\n    return false if num <= 1\n    (2..Math.sqrt(num)).none? { |i| num % i == 0 }\n  end\n  \n  words = sentence.split(\" \")\n  prime_length_words = words.select { |word| is_prime?(word.length) }\n  prime_length_words.join(\" \")\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_in_sentence\n    candidate = method(:words_in_sentence)\n    assert_equal(\"is\", candidate.call(\"This is a test\"))\n    assert_equal(\"go for\", candidate.call(\"lets go for swimming\"))\n    assert_equal(\"there is no place\", candidate.call(\"there is no place available here\"))\n    assert_equal(\"Hi am Hussein\", candidate.call(\"Hi I am Hussein\"))\n    assert_equal(\"go for it\", candidate.call(\"go for it\"))\n    assert_equal(\"\", candidate.call(\"here\"))\n    assert_equal(\"is\", candidate.call(\"here is\"))\n  end\nend\n"},{"task_id":"HumanEval_144","nl":"asm_Beng","pl":"rb","prompt":"আপুনি ধাৰণা কৰিব পাৰে যে x, আৰু n হৈছে বৈধ ভগ্নাংশ, আৰু শূন্যক দ্ৰাবিষ হিচাপে নাপায়।<numerator>\/<denominator> য'ত নম্বৰ আৰু নাম্বাৰ দুয়োটা ধনাত্মক পূৰ্ণ সংখ্যা।x আৰু n দুয়োটাই ভগ্নাংশৰ এটা শাৰী প্ৰতিনিধিত্ব আৰু নিম্নলিখিত বিন্যাস আছে,x * n. যদি x * n এটা সম্পূৰ্ণ সংখ্যা আৰু false হয়, তেন্তে ফাংশনটো true ঘূৰাই আনে।আপোনাৰ কাম হৈছে এটা ফাংচন প্ৰয়োগ কৰা যি প্ৰকাশনটো সৰল কৰিব # >>> simplify.call(\"1\/5\", \"5\/1\")\n# true\n# >>> simplify.call(\"1\/6\", \"2\/1\")\n# false\n# >>> simplify.call(\"7\/10\", \"10\/2\")\n# false\ndef simplify(x, n)\n","canonical_solution":"def simplify(x, n)\n  # Convert x and n to numerators and denominators\n  num_x, den_x = x.split('\/').map(&:to_i)\n  num_n, den_n = n.split('\/').map(&:to_i)\n\n  # Multiply fractions: (num_x * num_n) \/ (den_x * den_n)\n  numerator = num_x * num_n\n  denominator = den_x * den_n\n\n  # Check if the result is a whole number\n  numerator % denominator == 0\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_simplify\n    candidate = method(:simplify)\n    assert_equal(true, candidate.call(\"1\/5\", \"5\/1\"))\n    assert_equal(false, candidate.call(\"1\/6\", \"2\/1\"))\n    assert_equal(true, candidate.call(\"5\/1\", \"3\/1\"))\n    assert_equal(false, candidate.call(\"7\/10\", \"10\/2\"))\n    assert_equal(true, candidate.call(\"2\/10\", \"50\/10\"))\n    assert_equal(true, candidate.call(\"7\/2\", \"4\/2\"))\n    assert_equal(true, candidate.call(\"11\/6\", \"6\/1\"))\n    assert_equal(false, candidate.call(\"2\/3\", \"5\/2\"))\n    assert_equal(false, candidate.call(\"5\/2\", \"3\/5\"))\n    assert_equal(true, candidate.call(\"2\/4\", \"8\/4\"))\n    assert_equal(true, candidate.call(\"2\/4\", \"4\/2\"))\n    assert_equal(true, candidate.call(\"1\/5\", \"5\/1\"))\n    assert_equal(false, candidate.call(\"1\/5\", \"1\/5\"))\n  end\nend\n"},{"task_id":"HumanEval_145","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃমূল এৰেজত তেওঁলোকৰ সূচকৰ ভিত্তিত তেওঁলোকক ক্ৰম কৰক।টোকাঃ যদি বহুতো প্ৰবন্ধ আছে যিবোৰৰ অংকবোৰৰ সমষ্টি একেই, তেওঁলোকৰ অংকবোৰৰ যোগফল অনুসৰি ক্ৰমান্বয়ে।এটা ফাংচন লিখা যিটো দিয়া পূৰ্ণসংখ্যাৰ অ্যাৰেৰ সাজিব ।# >>> order_by_points.call([1, 11, -1, -11, -12])\n# [-1, -11, 1, -12, 11]\n# >>> order_by_points.call([])\n# []\ndef order_by_points(nums)\n","canonical_solution":"def order_by_points(nums)\n  nums.sort_by.with_index do |num, index|\n    [num.to_s.chars.map(&:to_i).sum.abs, index]\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"},{"task_id":"HumanEval_146","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃএটা সংখ্যাৰ প্ৰথম আৰু শেষ অংকটো অদ্ভুত (1, 3, 5, 7, 9) ।এৰেৰ ১০ ৰ অধিক সংখ্যক উপাদান আৰু দুয়োটা এটা ফাংচন লিখা যি এটা অংক সমষ্টিৰ পৰা ইনপুট আৰু ৰিটাৰ্ণ লয় ।# >>> specialFilter.call([15, -73, 14, -15])\n# 1\n# >>> specialFilter.call([33, -2, -3, 45, 21, 109])\n# 2\ndef specialFilter(nums)\n","canonical_solution":"def specialFilter(nums)\n  nums.count do |num|\n    num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_specialFilter\n    candidate = method(:specialFilter)\n    assert_equal(0, candidate.call([5, -2, 1, -5]))\n    assert_equal(1, candidate.call([15, -73, 14, -15]))\n    assert_equal(2, candidate.call([33, -2, -3, 45, 21, 109]))\n    assert_equal(4, candidate.call([43, -12, 93, 125, 121, 109]))\n    assert_equal(3, candidate.call([71, -2, -33, 75, 21, 19]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(0, candidate.call([]))\n  end\nend\n"},{"task_id":"HumanEval_147","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃআৰু a[i] + a[j] + a[k] হৈছে 3 ৰ গুণিতক।a ৰ ত্ৰিপল সংখ্যাৰ সংখ্যা (a[i], a[j], a[k]) ঘূৰাই দিব য'ত i < j < k, প্ৰত্যেক i (1 ≤ i ≤ n) ৰ বাবে, a[i] = i * i - i + 1 ৰ মান।আপুনি এটা ধনাত্মক পূৰ্ণ সংখ্যা n দিয়া হৈছে। আপুনি এটা পূৰ্ণ সংখ্যা এৰেজ সৃষ্টি কৰিব লাগিব যাৰ দৈৰ্ঘ্য n।# >>> get_max_triples.call(5)\n# 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\ndef get_max_triples(n)\n","canonical_solution":"def get_max_triples(n)\n  a = Array.new(n) { |i| (i + 1) * (i + 1) - (i + 1) + 1 }\n  count = 0\n  \n  (0...n).each do |i|\n    (i+1...n).each do |j|\n      (j+1...n).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  \n  count\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_max_triples\n    candidate = method(:get_max_triples)\n    assert_equal(1, candidate.call(5))\n    assert_equal(4, candidate.call(6))\n    assert_equal(36, candidate.call(10))\n    assert_equal(53361, candidate.call(100))\n  end\nend\n"},{"task_id":"HumanEval_148","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণসমূহএই নামবোৰ সঠিক গ্ৰহ নহয়।ফাংশনটোৱে এটা খালী এৰেজ ঘূৰাই দিব যদি planet1 বা planet2 সূৰ্যৰ নিকটৱৰ্তীতা।গ্ৰহ-১ আৰু গ্ৰহ-২ৰ কক্ষপথৰ মাজত অৱস্থিত, ৰ দ্বাৰা ছৰ্ট কৰা হৈছে।এই ফাংশনটোৱে এটা এৰেজ ঘূৰাই দিব লাগিব য'ত সকলো গ্ৰহ আছে যাৰ কক্ষপথ এটা ফাংচন লিখা যি দুটা গ্ৰহৰ নামক strings plan1 আৰু planet2 হিচাপে লয়।ইউৰেনাছ, নেপচুন।তাৰ পিছত পৃথিৱী, মঙ্গল, বৃহস্পতি, শনি,আমাৰ সৌৰজগতত আঠটা গ্ৰহ আছেঃ সূৰ্যৰ নিকটতম গ্ৰহটো# >>> bf.call(\"Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf.call(\"Earth\", \"Mercury\")\n# \"Venus\"\n# >>> bf.call(\"Mercury\", \"Uranus\")\n# [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\ndef bf(planet1, planet2)\n","canonical_solution":"def bf(planet1, planet2)\n  planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  \n  idx1 = planets.index(planet1)\n  idx2 = planets.index(planet2)\n  \n  return [] if idx1.nil? || idx2.nil?\n\n  start_idx, end_idx = [idx1, idx2].sort\n  \n  planets[(start_idx + 1)...end_idx]\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_bf\n    candidate = method(:bf)\n    assert_equal([\"Saturn\", \"Uranus\"], candidate.call(\"Jupiter\", \"Neptune\"))\n    assert_equal([\"Venus\"], candidate.call(\"Earth\", \"Mercury\"))\n    assert_equal([\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"], candidate.call(\"Mercury\", \"Uranus\"))\n    assert_equal([\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"], candidate.call(\"Neptune\", \"Venus\"))\n    assert_equal([], candidate.call(\"Earth\", \"Earth\"))\n    assert_equal([], candidate.call(\"Mars\", \"Earth\"))\n    assert_equal([], candidate.call(\"Jupiter\", \"Makemake\"))\n  end\nend\n"},{"task_id":"HumanEval_149","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃআপুনি অনুমান কৰিব পাৰে যে সকলো শব্দৰ দীঘল সমান হ'ব।ফাংশনটোৱে এটা শাৰী শাৰীবোৰক ক্ৰম অনুসাৰে ঘূৰাই দিব লাগে।যদি দুটা শব্দৰ দৈৰ্ঘ্য সমান হয়, তেন্তে অ্যাৰেটো বৰ্ণানুক্ৰমিকভাৱে ছৰ্ট কৰক।এই নিয়মৰ দ্বাৰা ছৰ্ট কৰা এৰেটো ঘূৰাই দিব লাগে।এই ক্ৰমত প্ৰতিটো শব্দৰ দৈৰ্ঘ্য বৃদ্ধি হ'ব লাগে, আৰু আপুনিআৰু ইয়াত ডুপ্লিকেট থাকিব পাৰে।এটা এৰে সদায় এটা ষ্ট্ৰিং এৰে আৰু কেতিয়াও এটা সংখ্যাৰ এৰে নহয়,আৰু এটা ছৰ্ট কৰা আদেশৰ সৈতে ফলাফলৰ এৰেজটো ঘূৰাই দিয়ে, ইয়াৰ পৰা অস্বাভাৱিক দৈৰ্ঘ্যৰ শাৰীসমূহ আঁতৰাওক, এটা ফাংচন লিখা যি এটা ষ্ট্ৰিংৰ এৰেক পৰিমাপ হিচাপে গ্ৰহণ কৰে,# >>> list_sort.call([\"aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> list_sort.call([\"ab\", \"a\", \"aaa\", \"cd\"])\n# [\"ab\", \"cd\"]\ndef sorted_list_sum(lst)\n","canonical_solution":"def list_sort(arr)\n  arr.select { |s| s.length.even? }\n     .sort_by { |s| [s.length, s] }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sorted_list_sum\n    candidate = method(:sorted_list_sum)\n    assert_equal([\"aa\"], candidate.call([\"aa\", \"a\", \"aaa\"]))\n    assert_equal([\"AI\", \"asdf\", \"school\"], candidate.call([\"school\", \"AI\", \"asdf\", \"b\"]))\n    assert_equal([], candidate.call([\"d\", \"b\", \"c\", \"a\"]))\n    assert_equal([\"abcd\", \"dcba\"], candidate.call([\"d\", \"dcba\", \"abcd\", \"a\"]))\n    assert_equal([\"AI\", \"ai\", \"au\"], candidate.call([\"AI\", \"ai\", \"au\"]))\n    assert_equal([], candidate.call([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]))\n    assert_equal([\"cc\", \"dd\", \"aaaa\", \"bbbb\"], candidate.call([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]))\n  end\nend\n"},{"task_id":"HumanEval_150","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃএটা অগ্ৰ সংখ্যা আৰু y ৰ মান ঘূৰাই দিব লাগিব অন্যথা।এটা সৰল প্ৰগ্ৰাম যি x ৰ মান ঘূৰাই দিব লাগে যদি n হয় # >>> x_or_y.call(7, 34, 12)\n# 34\n# >>> x_or_y.call(15, 8, 5)\n# 5\ndef x_or_y(n, x, y)\n","canonical_solution":"def x_or_y(n, x, y)\n  require 'prime'\n  n.prime? ? x : y\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_x_or_y\n    candidate = method(:x_or_y)\n    assert_equal(34, candidate.call(7, 34, 12))\n    assert_equal(5, candidate.call(15, 8, 5))\n    assert_equal(33, candidate.call(3, 33, 5212))\n    assert_equal(3, candidate.call(1259, 3, 52))\n    assert_equal(-1, candidate.call(7919, -1, 12))\n    assert_equal(583, candidate.call(3609, 1245, 583))\n    assert_equal(129, candidate.call(91, 56, 129))\n    assert_equal(1234, candidate.call(6, 34, 1234))\n    assert_equal(0, candidate.call(1, 2, 0))\n    assert_equal(2, candidate.call(2, 2, 0))\n  end\nend\n"},{"task_id":"HumanEval_151","nl":"asm_Beng","pl":"rb","prompt":"অগণন সংখ্যা যি অগণন হয়, যি অগণন সংখ্যা যি অগণন হয়, যি অগণন সংখ্যা যি অগণন হয়, যি অগণন সংখ্যা যি অগণন হয়, যি অগণন সংখ্যা যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়।এটা সংখ্যাৰ অ্যারে দিয়া হ'লে, সংখ্যাৰ স্কোৱাডৰ যোগফল ঘূৰাই দিয়ক।# >>> double_the_difference.call([1, 3, 2, 0])\n# 10\n# >>> double_the_difference.call([-1, -2, 0])\n# 0\n# >>> double_the_difference.call([9, -2])\n# 81\n# >>> double_the_difference.call([0])\n# 0\n# If the input array is empty, return 0.\ndef double_the_difference(lst)\n","canonical_solution":"def double_the_difference(lst)\n  lst.select { |n| n.is_a?(Integer) && n.odd? && n >= 0 }\n     .map { |n| n ** 2 }\n     .sum\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"},{"task_id":"HumanEval_152","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃমানটো হ'ল ০ আৰু যদি নহয়, মানটো হ'ল অনুমান আৰু স্ক'ৰৰ মাজৰ সম্পূৰ্ণ পাৰ্থক্য।এটা সম দৈৰ্ঘ্যৰ এৰেজ ঘূৰাই দিব যিয়ে প্ৰতিটো অনুমান কিমান দূৰলৈ আছিল তাক বুজায়। যদি তেওঁলোকে সঠিকভাৱে অনুমান কৰিছে, আপুনি দুটা সম-লম্ব স্ক'ৰ আৰু অনুমানৰ এৰেজ লাভ কৰে, য'ত প্ৰতিটো সূচকে মিল দেখুৱায়।আপোনাৰ কাম হ'ল কোনো ব্যক্তিয়ে সঠিকভাৱে বহু সংখ্যক মেচৰ ফলাফল অনুমান কৰিছে নে নাই সেয়া নিৰ্ণয় কৰা।নিশ্চিতভাৱে নোট কৰি তুলনা কৰাৰ যোগ্য।এই ঘটনাটো অৱশেষত জানিব পাৰিছো। সেই মুহূৰ্তত আপোনাৰ যি অনুভৱ আৰু চিন্তা হৈছে সেইবোৰ হৈছে মই ভাবো আমি সকলোৱে সেই অনুভৱটো মনত ৰাখিম যেতিয়া দীৰ্ঘদিনীয়া অপেক্ষাৰ ফল # >>> compare.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare.call([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\ndef compare(game, guess)\n","canonical_solution":"def compare(game, guess)\n  game.zip(guess).map { |score, prediction| (score - prediction).abs }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"},{"task_id":"HumanEval_153","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃ(এইটোৰ শক্তি হ'ল -১) ।return 'Slices.SErviNGSliCes' যিহেতু 'SErviNGSliCes' হৈছে আটাইতকৈ শক্তিশালী সম্প্ৰসাৰণ extension: ['SErviNGSliCes', 'Cheese', 'StuFfed'] তেতিয়া আপুনি উদাহৰণস্বৰূপে, যদি আপোনাক \"Slices\" দিয়া হয়, যিটো শ্ৰেণী আৰু এটা এৰেজ অংকন প্ৰণালীত প্ৰথমটো অংকন কৰাযদি দুটা বা ততোধিক এক্সটেনশ্যন একেই শক্তিৰ হয়, আপুনি বিন্যাসঃ শ্ৰেণীৰ নাম. শক্তিশালী সম্প্ৰসাৰণ নাম. আপুনি আটাইতকৈ শক্তিশালী সম্প্ৰসাৰণটো বিচাৰি উলিয়াব লাগিব আৰু ইয়াত এটা ষ্ট্ৰিং ঘূৰাই দিব লাগিব।সম্প্ৰসাৰণৰ নামত, শক্তি CAP - SM ভগ্নাংশৰ দ্বাৰা দিয়া হয়।এক্সটেনশ্যনৰ নামত আখৰবোৰ, আৰু SM সৰু আখৰৰ সংখ্যা হওক সম্প্ৰসাৰণৰ শক্তি নিম্নলিখিত ধৰণৰঃ CAPক বড়ো আখৰৰ সংখ্যা বুলি ধৰা হওক ।সম্প্ৰসাৰণসমূহক শ্ৰেণীৰ অতিৰিক্ত শ্ৰেণীসমূহ লোড কৰিবলৈ ব্যৱহাৰ কৰা হয়।আপোনাক এটা শ্ৰেণীৰ নাম (এটা স্ট্ৰিং) আৰু এটা সম্প্ৰসাৰণৰ এৰে দিয়া হ'ব।# >>> Strongest_Extension.call(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\ndef Strongest_Extension(class_name, extensions)\n","canonical_solution":"def Strongest_Extension(class_name, extensions)\n  strongest_extension = extensions.max_by do |extension|\n    cap_count = extension.count('A-Z')\n    sm_count = extension.count('a-z')\n    cap_count - sm_count\n  end\n  \"#{class_name}.#{strongest_extension}\"\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"},{"task_id":"HumanEval_154","nl":"asm_Beng","pl":"rb","prompt":"আপোনাৰ দুটা শব্দ দিয়া হৈছে. আপুনি true ঘূৰাই দিব লাগিব যদি দ্বিতীয় শব্দটো বা ইয়াৰ যিকোনো এটা ঘুৰণ প্ৰথম শব্দটোৰ এটা উপশাৰী হয় # >>> cycpattern_check.call(\"abcd\", \"abd\")\n# false\n# >>> cycpattern_check.call(\"hello\", \"ell\")\n# true\n# >>> cycpattern_check.call(\"whassup\", \"psus\")\n# false\n# >>> cycpattern_check.call(\"abab\", \"baa\")\n# true\n# >>> cycpattern_check.call(\"efef\", \"eeff\")\n# false\n# >>> cycpattern_check.call(\"himenss\", \"simen\")\n# true\ndef cycpattern_check(a, b)\n","canonical_solution":"def cycpattern_check(a, b)\n  (0...b.length).each do |i|\n    rotated_b = b[i..-1] + b[0...i]\n    return true if a.include?(rotated_b)\n  end\n  false\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_cycpattern_check\n    candidate = method(:cycpattern_check)\n    assert_equal(false, candidate.call(\"xyzw\", \"xyw\"))\n    assert_equal(true, candidate.call(\"yello\", \"ell\"))\n    assert_equal(false, candidate.call(\"whattup\", \"ptut\"))\n    assert_equal(true, candidate.call(\"efef\", \"fee\"))\n    assert_equal(false, candidate.call(\"abab\", \"aabb\"))\n    assert_equal(true, candidate.call(\"winemtt\", \"tinem\"))\n  end\nend\n"},{"task_id":"HumanEval_155","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃএটা পূৰ্ণ সংখ্যা দিয়া হৈছে. এটা এৰেজ ঘূৰাই দিব য'ত যথাক্ৰমে জোৰা আৰু অজুৰা অংক থাকিব।# >>> even_odd_count.call(-12)\n# [1, 1]\n# >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n","canonical_solution":"def even_odd_count(num)\n  num.to_s.chars.map(&:to_i).select { |digit| digit != 0 }.partition(&:even?).map(&:count)\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"},{"task_id":"HumanEval_156","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃসীমাবদ্ধতাঃ 1 <= নম্বৰ <= 1000আৰু ইয়াক সৰু আখৰেৰে লিখক।এটা ধনাত্মক পূৰ্ণ সংখ্যা দিয়া হ'লে, ইয়াৰ ৰোমান সংখ্যা সমতুল্য এটা শাৰী হিচাপে প্ৰাপ্ত কৰক, # >>> int_to_mini_roman.call(19)\n# \"xix\"\n# >>> int_to_mini_roman.call(152)\n# \"clii\"\n# >>> int_to_mini_roman.call(426)\n# \"cdxxvi\"\ndef int_to_mini_roman(number)\n","canonical_solution":"def int_to_mini_roman(number)\n  values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n  numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n\n  result = ''\n  values.each_with_index do |value, index|\n    while number >= value\n      number -= value\n      result += numerals[index]\n    end\n  end\n\n  result\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"},{"task_id":"HumanEval_157","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃ৯০ ডিগ্ৰী।এটা সমকোণযুক্ত ত্ৰিভুজ হৈছে এটা ত্ৰিভুজ য'ত এটা কোণ সঠিক কোণ বা ইয়াৰ দুয়োটা পক্ষই এটা সোঁ কোণযুক্ত ত্ৰিভুজ গঠন কৰে, অন্যথা ভুল।এটা ত্ৰিভুজৰ তিনিটা পক্ষৰ দৈৰ্ঘ্য দিয়া হৈছে। যদি তিনিটা # >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1, 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n","canonical_solution":"def right_angle_triangle(a, b, c)\n  sides = [a, b, c].sort\n  sides[0]**2 + sides[1]**2 == sides[2]**2\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"},{"task_id":"HumanEval_158","nl":"asm_Beng","pl":"rb","prompt":"শব্দকোষীয় ক্ৰমত প্ৰথম যিটো আখৰ আহিছে তাক ঘূৰাই দিয়ক।যদি একাধিক শাৰীসমূহত সৰ্বাধিক সংখ্যক অনন্য  থাকেএই এৰে বিভিন্ন শব্দ ধাৰণ কৰে। সৰ্বাধিক সংখ্যক শব্দ ঘূৰাই দিব এটা ফাংচন লিখা যি এটা ষ্ট্ৰিং এৰে গ্ৰহণ কৰে।# >>> find_max.call([\"name\", \"of\", \"string\"])\n# \"string\"\n# >>> find_max.call([\"name\", \"enam\", \"game\"])\n# \"enam\"\n# >>> find_max.call([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\ndef find_max(words)\n","canonical_solution":"def find_max(words)\n  # Helper function to count unique characters\n  def unique_char_count(word)\n    word.chars.uniq.size\n  end\n\n  words.max_by { |word| [unique_char_count(word), -word] }\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n  end\nend\n"},{"task_id":"HumanEval_159","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণঃযদি পৰ্যাপ্ত পৰিমাণৰ গাজৰ নাথাকে, আপুনি বাকী থকা সকলো গাজৰ খাব, কিন্তু তেতিয়াও ভোকত থাকিব।আপোনাৰ আহাৰৰ পিছত বাকী থকা কেৰাটৰ সংখ্যা ] আপুনি [ আহাৰ খোৱাৰ পিছত খোৱা কেৰাহীৰ মুঠ সংখ্যা, ]কিন্তু এতিয়া আপুনি দিনটোৰ আহাৰ সম্পূৰ্ণ কৰিবলৈ অধিক কেৰাচ খাব লাগে।তুমি এটা ভোকাতুৰ কণী, আৰু তুমি ইতিমধ্যে এটা নিৰ্দিষ্ট সংখ্যক গাজৰ খাইছো,# >>> eat.call(5, 6, 10)\n# [11, 4]\n# >>> eat.call(4, 8, 9)\n# [12, 1]\n# >>> eat.call(1, 10, 10)\n# [11, 0]\n# >>> eat.call(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need, remaining)\n","canonical_solution":"def eat(number, need, remaining)\n  total_eaten = number + [need, remaining].min\n  carrots_left = [remaining - need, 0].max\n  [total_eaten, carrots_left]\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"},{"task_id":"HumanEval_160","nl":"asm_Beng","pl":"rb","prompt":"অপাৰেটৰ এৰেজত কমেও এটা অপাৰেটৰ থাকে আৰু অপাৰেণ্ড এৰেজত কমেও দুটা অপাৰেণ্ড থাকে।অপাৰেণ্ড হৈছে অ-নতিবাচক পূৰ্ণসংখ্যাৰ এটা অ্যাৰে।অপাৰেটৰ এৰেজটোৰ দৈৰ্ঘ্য অপাৰেণ্ড এৰেজটোৰ দৈৰ্ঘ্য বিয়োগ একৰ সমান।টোকাঃ=> ফলাফল = 9 ফলাফল = 2 + 3 * 4 - 5 ।অংকন কৰা হৈছে [2, 3, 4, 5] ।অপাৰেটৰ['+', '*', '-'] উদাহৰণঃবিৰূপকৰণ (**)তল ভাগাভাগি ( \/\/ ) গুণন (*) বিয়োগ (- ) যোগ কৰা (+) মৌলিক বীজগণিতৰ ক্ৰিয়াঃএই এক্সপ্ৰেছনটো আৰু ইয়াৰ মূল্যায়ন ঘূৰাই দিব।দ্বিতীয় এৰেজটো হ'ল এটা সম্পূৰ্ণ সংখ্যাৰ এৰেজ। এই দুটা এৰেজ ব্যৱহাৰ কৰি বীজগণিত গঠন কৰা।দুটা অংকনক্ষেত্ৰ অপাৰেটৰ আৰু অপাৰেণ্ড দিয়া হৈছে। প্ৰথম অংকনক্ষেত্ৰৰ মৌলিক বীজগণিতৰ কাৰ্য্য আছে, আৰু def do_algebra(operator, operand)\n","canonical_solution":"def do_algebra(operator, operand)\n  expression = operand[0].to_s\n  operator.each_with_index do |op, index|\n    if op == '\/\/'\n      expression += ' \/ ' + operand[index + 1].to_s\n    else\n      expression += ' ' + op + ' ' + operand[index + 1].to_s\n    end\n  end\n  eval(expression)\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"\/\/\", \"*\"], [7, 3, 4]))\n  end\nend\n"},{"task_id":"HumanEval_161","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণসমূহফাংশনটোৱে ফলাফলৰ শাৰীটো ঘূৰাই দিব লাগে।যদি string ত কোনো আখৰ নাই, string ৰ বিৰতি কৰক.অন্যথা যিদৰে আছে তেনেকৈয়ে থাকক।যদি s[i] এটা আখৰ হয়, ইয়াৰ কেচটো তলৰ পৰা ওপৰলৈ বা বিপৰীতলৈ উলট-পালট কৰা,আপোনাক এটা ষ্ট্ৰিং দিয়া হৈছে।# >>> solve.call(\"1234\")\n# \"4321\"\n# >>> solve.call(\"ab\")\n# \"AB\"\n# >>> solve.call(\"#a@C\")\n# \"#A@c\"\ndef solve(s)\n","canonical_solution":"def solve(s)\n  if s =~ \/[a-zA-Z]\/\n    s.chars.map { |char| char =~ \/[a-zA-Z]\/ ? char.swapcase : char }.join\n  else\n    s.reverse\n  end\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"},{"task_id":"HumanEval_162","nl":"asm_Beng","pl":"rb","prompt":"যদি 'text' এটা খালী শাৰী হয়, null ঘূৰাই দিব.এটা 'text' স্ট্ৰিং দিয়া হৈছে, ইয়াৰ md5 হেশ্ব সমতুল্য ষ্ট্ৰিং ঘূৰাই দিয়ক।# >>> string_to_md5.call(\"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\ndef string_to_md5(text)\n","canonical_solution":"require 'digest'\n\ndef string_to_md5(text)\n  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_md5\n    candidate = method(:string_to_md5)\n    assert_equal(\"3e25960a79dbc69b674cd4ec67a72c62\", candidate.call(\"Hello world\"))\n    assert_equal(nil, candidate.call(\"\"))\n    assert_equal(\"0ef78513b0cb8cef12743f5aeb35f888\", candidate.call(\"A B C\"))\n    assert_equal(\"5f4dcc3b5aa765d61d8327deb882cf99\", candidate.call(\"password\"))\n  end\nend\n"},{"task_id":"HumanEval_163","nl":"asm_Beng","pl":"rb","prompt":"উদাহৰণস্বৰূপেঃআৰু b, ক্ৰমান্বয়ে।দুটা ধনাত্মক পূৰ্ণ সংখ্যা a আৰু b দিয়া হ'লে, a আৰু b ৰ মাজৰ সমসংখ্যাৰ অংকটো ঘূৰাই দিয়া# >>> generate_integers.call(2, 8)\n# [2, 4, 6, 8]\n# >>> generate_integers.call(8, 2)\n# [2, 4, 6, 8]\n# >>> generate_integers.call(10, 14)\n# []\ndef generate_integers(a, b)\n","canonical_solution":"def generate_integers(a, b)\n  (a..b).to_a.concat((b..a).to_a).select { |num| num.even? }.uniq.sort\nend","tests":"require 'test\/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_generate_integers\n    candidate = method(:generate_integers)\n    assert_equal([2, 4, 6, 8], candidate.call(2, 10))\n    assert_equal([2, 4, 6, 8], candidate.call(10, 2))\n    assert_equal([2, 4, 6, 8], candidate.call(132, 2))\n    assert_equal([], candidate.call(17, 89))\n  end\nend\n"}]