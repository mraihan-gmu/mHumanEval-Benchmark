prompt,canonical_solution,test
"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" ලබා දී ඇති අංක ලැයිස්තුවේ, ලබා දී ඇති සීමාවන්ට වඩා එකිනෙකට සමීපව ඇති අංක දෙකක් තිබේදැයි පරීක්ෂා කරන්න. උදාහරණය:
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

"
"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" මෙම ශ් රිතයට ආදානය වන්නේ බහු කණ්ඩායම් සහිත කුරුළු කුරුළු ය. ඔබේ ඉලක්කය වන්නේ එම කණ්ඩායම් වෙන වෙනම නූල් වලට වෙන් කිරීම සහ ඒවායේ ලැයිස්තුව නැවත ලබා දීමයි. වෙනම කණ්ඩායම් සමබරයි (සෑම විවෘත කුරුල්ලක්ම නිසි ලෙස වසා ඇත) සහ එකිනෙකා තුළ කුරුළු කර නැත. ආදාන නූලෙහි ඇති ඕනෑම අවකාශයක් නොසලකා හරින්න. උදාහරණය:
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
"
"

def truncate_number(number: float) -> float:
    """""" ධනාත්මක පාවෙන අක්ෂි අංකයක් ලබා දී ඇති විට, එය පූර්ණ සංඛ් යා කොටසක් (දී ඇති සංඛ් යාවට වඩා විශාලතම පූර්ණ සංඛ් යාව කුඩා) සහ දශම සංඛ් යා (ඉතිරි කොටස සෑම විටම 1 ට වඩා කුඩා වේ) ලෙස බිඳ දැමිය හැකිය. සංඛ් යාවේ දශම කොටස ආපසු ලබා දෙන්න. උදාහරණය:
    >>> truncate_number(3.5)
    0.5
    """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
"
"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" ඔබට බැංකු ගිණුමක තැන්පතු සහ මුදල් ආපසු ගැනීමේ මෙහෙයුම් ලැයිස්තුවක් ලබා දී ඇත. එය ශුන් ය ශේෂයෙන් ආරම්භ වේ. ඔබේ කාර්යය වන්නේ ඕනෑම අවස්ථාවක ගිණුමේ ශේෂය ශුන් යයට වඩා අඩු නම් හඳුනා ගැනීමයි. එම අවස්ථාවෙහිදී ශ් රිතය සත් යයක් ආපසු ලබා දිය යුතුය. එසේ නොමැතිනම් එය අසත් යයක් ආපසු ලබා දිය යුතුය. උදාහරණය:
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
"
"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" ලබා දී ඇති ආදාන සංඛ් යා ලැයිස්තුවක් සඳහා, මෙම දත්ත කට්ටලයේ මධ් යම අගය වටා මධ් යම නිරපේක්ෂ අපගමනය ගණනය කරන්න. මධ් යම නිරපේක්ෂ අපගමනය යනු එක් එක් මූලද් රව් යය සහ මධ් යස්ථානයක් අතර සාමාන් ය නිරපේක්ෂ වෙනසයි (මෙම අවස්ථාවේ දී මධ් ය): MAD = සාමාන් ය  x - x_mean  උදාහරණය:
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

"
"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" ආදාන ලැයිස්තුවේ සෑම අඛණ්ඩ අංග දෙකක් අතරම ""සීමා මායිම"" අංකයක් ඇතුලත් කරන්න `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
"
"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" මෙම ශ් රිතයට ආදානය වන්නේ අවකාශයන්ගෙන් වෙන් කර ඇති කුටිවල කුටිවල බහු කණ්ඩායම් නියෝජනය කරන නූලක් වේ. එක් එක් කණ්ඩායම සඳහා, කුටිවල ගැඹුරුම කුටි මට්ටම ප් රතිදානය කරන්න. උදාහරණයක් ලෙස (() (()) හි උපරිම වශයෙන් කුටි මට්ටම් දෙකක් ඇති අතර ((())) තුන් දෙනෙකු සිටී.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
"
"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" ලබා දී ඇති උප අක්ෂර මාලාවක් සහිත අක්ෂර මාලාවක් පමණක් ඇතුලත් කරන්න
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
"
"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" නිශ්චිත සම්පූර්ණ සංඛ් යා ලැයිස්තුවක් සඳහා, ලැයිස්තුවක ඇති සියලුම සම්පූර්ණ සංඛ් යා වල එකතුවක් සහ ගුණයකින් සමන්විත ටුපල් එකක් ලබා දෙන්න. හිස් එකතුව 0 ට සමාන විය යුතු අතර හිස් ගුණය 1 ට සමාන විය යුතුය.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
"
"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" ලබා දී ඇති සම්පූර්ණ සංඛ් යා ලැයිස්තුවකින්, අනුක් රමයේ දී ඇති මොහොත දක්වා සොයාගත් උපරිම අංග ලැයිස්තුවක් ජනනය කරන්න.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
"
"

def is_palindrome(string: str) -> bool:
    """""" ලබා දී ඇති නූල පාලින්ඩ් රෝම් එකක් නම් පරීක්ෂා කරන්න """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
"
"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" ආදානය යනු 1s සහ 0s වලින් පමණක් සමන්විත a සහ b යන නූල් දෙකයි. මෙම ආදාන මත ද්විමය XOR සිදු කරන්න සහ ප් රති result ලය නූලක් ලෙස ද ලබා දෙන්න.
    >>> string_xor('010', '110')
    '100'
    """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
"
"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" ලැයිස්තුවේ දිගම නූල නැවත ලබා දෙන්න. එකම දිගට නූල් කිහිපයක් තිබේ නම් පළමුවැන්න නැවත ලබා දෙන්න. ආදාන ලැයිස්තුව හිස් නම් කිසිවක් නැවත ලබා දෙන්න එපා.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
"
"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" a සහ b යන පූර්ණ සංඛ් යා දෙකක විශාලතම පොදු බෙදන්නා නැවත ලබා දෙන්න
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
"
"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" ආදාන අකුරු පෙළෙහි කෙටිම සිට දිගම දක්වා සියලුම පෙරනිමිති නැවත ලබාදෙන ලැයිස්තුව
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
"
"

def string_sequence(n: int) -> str:
    """""" 0 සිට n දක්වා අංක සහිත අංක ඇතුළත් නූලක් නැවත ලබා දෙන්න.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
"
"

def count_distinct_characters(string: str) -> int:
    """""" string එකක් දීලා, ඒකෙ වෙන වෙනම අක්ෂර කීයක් තියෙනවද කියලා හොයාගන්න (අකුරු අකුරු වලින් තොරව)
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
"
"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" මෙම ශ් රිතයට ආදානය වන්නේ සංගීත නෝට්ටු නිරූපණය කරන නූලක් විශේෂ ASCII ආකෘතියකින්. ඔබේ කාර්යය වන්නේ මෙම නූල විග් රහ කර එක් එක් නොපවතින ස්පන්දන ගණනට අනුරූප පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දීමයි. මෙන්න පුරාවෘත්තයක්: 'o' - සම්පූර්ණ නෝට්ටුව, ස්පන්දන හතරක් පවතී 'o"" - අර්ධ නෝට්ටුව, ස්පන්දන දෙකක් පවතී '. "" "" - හතරේ නෝට්ටුව, එක් ස්පන්දනයක් පවතී

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
"
"

def how_many_times(string: str, substring: str) -> int:
    """""" මුල් නූලෙහි දී ලබා දී ඇති උප නූල කී වතාවක් සොයාගත හැකිදැයි සොයා ගන්න.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
"
"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" ආදානය යනු '0' සිට '9' දක්වා අංක වලින් යුත් අවකාශය සීමා කරන ලද නූලක් වේ. වලංගු තේරීම් වන්නේ '0', '1', '2', '3', '4', '5', '6', '7', '8' සහ '9' ය. කුඩාම සිට විශාලතම දක්වා වර්ග කර ඇති අංක සහිත නූල නැවත ලබා දෙන්න
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
"
"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" ලබා දී ඇති අංක ලැයිස්තුවෙන් (අවම වශයෙන් දෙකක්) එකිනෙකට ආසන්නතම අංක දෙක තෝරාගෙන ඒවා පිළිවෙලට (කුඩා අංකය, විශාල අංකය) ලබා දෙන්න.
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

"
"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" සංඛ් යා ලැයිස්තුවක් ලබා දී ඇති විට (අවම වශයෙන් අංග දෙකක්), එම ලැයිස්තුවට රේඛීය පරිවර්තනයක් යොදන්න, එනම් කුඩාම සංඛ් යාව 0 වන අතර විශාලතම සංඛ් යාව 1 වේ
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
"
"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" සම්පූර්ණ සංඛ් යා සඳහා පමණක් ලබා දී ඇති ඕනෑම Python අගය ලැයිස්තුවක් පෙරීම
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
"
"

def strlen(string: str) -> int:
    """""" ලබා දී ඇති string එකක දිග
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
"
"

def largest_divisor(n: int) -> int:
    """""" ලබා දී ඇති n සංඛ් යාවක් සඳහා, n ට වඩා කුඩා, n සමානව බෙදන විශාලතම සංඛ් යාව සොයා ගන්න
    >>> largest_divisor(15)
    5
    """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
"
"from typing import List


def factorize(n: int) -> List[int]:
    """""" ලබා දී ඇති පූර්ණ සංඛ් යාවක ප් රථම සාධක ලැයිස්තුව කුඩාම සිට විශාලතම දක්වා පිළිවෙලට ලබා දෙන්න. එක් එක් සාධක සාධකකරණයේ කොපමණ වාරයක් දක්නට ලැබේද යන්නට අනුරූපව ලැයිස්තුගත කළ යුතුය. ආදාන අංකය සියලු සාධකවල ගුණයට සමාන විය යුතුය
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
"
"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" සම්පූර්ණ සංඛ් යා ලැයිස්තුවෙන්, එක් වරකට වඩා ඇති සියලුම අංග ඉවත් කරන්න. අංගයන්ගේ අනුපිළිවෙල ආදානයේ ඇති ආකාරයටම තබා ගන්න.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
"
"

def flip_case(string: str) -> str:
    """""" යම් නූලකට, කුඩා අකුරු ලොකු අකුරු වලට, ලොකු අකුරු කුඩා අකුරු වලට හරවන්න.
    >>> flip_case('Hello')
    'hELLO'
    """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
"
"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" තනි නූලකට නූල් ලැයිස්තුවක් එක් කරන්න
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
"
"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" දත්ත පෙළ ලැයිස්තුවක් පෙරහන් කරන්න.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
"
"

def get_positive(l: list):
    """"""ලැයිස්තුවේ ඇති ධනාත්මක සංඛ් යා පමණක් ලබා දෙන්න.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

"
"

def is_prime(n):
    """"""ලබා දී ඇති අංකය ප් රයිම් නම් true නැවත ලබා දෙන්න, එසේ නොමැති නම් false.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

"
"import math


def poly(xs: list, x: float):
    """"""
    xs හි xs සංගුණකය සහිත බහුපදයක් ගණනය කරයි. xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

"
"

def sort_third(l: list):
    """"""මෙම ශ් රිතය ලැයිස්තුවක් ලබා ගනී l සහ ලැයිස්තුවක් ලබා දෙයි l' එවැනි ලැයිස්තුවක් l' 3 න් බෙදිය නොහැකි දර්ශකවල l හා සමාන වන අතර, එහි අගයන් 3 න් බෙදිය හැකි දර්ශකවල l හි අනුරූප දර්ශකවල අගයන් හා සමාන වේ, නමුත් වර්ග කර ඇත.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

"
"

def unique(l: list):
    """"""ලැයිස්තුවක වර්ග කළ අද්විතීය අංග නැවත ලබාදෙයි
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

"
"

def max_element(l: list):
    """"""ලැයිස්තුවේ ඇති උපරිම අංගය නැවත ලබාදෙනවා.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
"
"

def fizz_buzz(n: int):
    """"""11 හෝ 13 මගින් බෙදිය හැකි n ට අඩු නිඛිල සංඛ් යා වල 7 අංකය දිස්වන වාර ගණන නැවත ලබා දෙන්න.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

"
"

def sort_even(l: list):
    """"""මෙම ශ් රිතය ලැයිස්තුවක් ලබා ගනී l සහ ලැයිස්තුවක් ලබා දෙයි l' එවැනි ලැයිස්තුවක් l' අමුතු දර්ශකවල l හා සමාන වන අතර, එහි අගයන් සම දර්ශකවල l හි සම දර්ශකවල අගයන් හා සමාන වේ, නමුත් වර්ග කර ඇත.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

"
"

def encode_cyclic(s: str):
    """"""
    අක්ෂර 3 කින් යුත් චක් ර කණ්ඩායම් වලින් කේතනය කරන ලද නූල් නැවත ලබා දෙයි.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

"
"

def prime_fib(n: int):
    """"""
    prime_fib නැවත n- වන සංඛ් යාවක් ලබා දෙනවා එය ෆිබොනාච්චි සංඛ් යාවක් වන අතර එය ප් රාථමික සංඛ් යාවක් ද වේ
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

"
"

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero යනු පූර්ණ සංඛ් යා ලැයිස්තුවක් ආදානයක් ලෙස ගනී. එය True නැවත ලබා දෙන්නේ ලැයිස්තුවේ අංග තුනක් ශුන් යයට සමාන නම් සහ False වෙනත් ආකාරයකින්.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

"
"

def car_race_collision(n: int):
    """"""
    නිරපේක්ෂව කෙළින් වූ අනන්ත දිග රේඛාවක් ලෙසින් වූ මාර්ගයක් ගැන සිතන්න. n වාහන වමට දකුණට ධාවනය වේ. එකවරම, වෙනස් වාහන n ක් දකුණට වමට ධාවනය වේ. වාහන කට්ටල දෙක එකිනෙකට ඉතා දුරින් ආරම්භ වේ. සියලුම මෝටර් රථ එකම වේගයකින් ගමන් කරයි. වමට දකුණට ගමන් කරන මෝටර් රථයක් දකුණට වමට ගමන් කරන මෝටර් රථයකට පහර දෙන විට මෝටර් රථ දෙකක් ගැටෙන බව කියනු ලැබේ. කෙසේ වෙතත්, මෝටර් රථ අනන්තවත් ශක්තිමත් සහ ශක්තිමත් ය; එහි ප් රති they ලයක් ලෙස, ඔවුන් ගැටී නැති සේ ඔවුන්ගේ ගමන් පථාවෙහි දිගටම ගමන් කරයි. මෙම ශ් රිතය එවැනි ගැටීම් ගණන ප් රතිදානය කරයි.
    """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

"
"

def incr_list(l: list):
    """"""1 කින් වැඩි කරන ලද අංග සහිත ආපසු ලැයිස්තුවක්.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

"
"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero යනු පූර්ණ සංඛ් යා ලැයිස්තුවක් ආදානයක් ලෙස ගනී. එය True නැවත ලබා දෙන්නේ ලැයිස්තුවේ වෙනම අංග දෙකක් තිබේ නම් එම සංඛ් යාව ශුන් ය වන අතර False වෙනත් ආකාරයකින්.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

"
"

def change_base(x: int, base: int):
    """"""ආදාන අංකය x හි සංඛ් යාමය පදනම පදනම බවට වෙනස් කරන්න. පරිවර්තනයෙන් පසු නූල් නිරූපණය ආපසු ලබා දෙන්න. පදනම සංඛ් යා 10 ට වඩා අඩුය.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

"
"

def triangle_area(a, h):
    """"""ත් රිකෝණයක දිග සහ ඉහළ ප් රදේශය ලබා දී ඇත.
    >>> triangle_area(5, 3)
    7.5
    """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

"
"

def fib4(n: int):
    """"""Fib4 අංක අනුක් රමය ෆිබොනාච්චි අනුක් රමය හා සමාන අනුක් රමයකි. එය පහත පරිදි අර්ථ දක්වා ඇත: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4 අංක අනුක් රමයෙහි n වන අංගය කාර්යක්ෂමව ගණනය කිරීම සඳහා කරුණාකර ශ් රිතයක් ලියන්න. පුනරාවර්තනය භාවිතා නොකරන්න.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

"
"

def median(l: list):
    """"""ලැයිස්තුවේ ඇති මූලද් රව් යයන්ගේ නැවත පැමිණීමේ මධ් යම අගය l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

"
"

def is_palindrome(text: str):
    """"""
    ලබා දී ඇති නූල පාලින්ඩ් රෝම් එකක්දැයි පරීක්ෂා කරයි
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

"
"

def modp(n: int, p: int):
    """"""2^n මොඩියුලය p නැවත ලබා දෙන්න (අංක ගැන සැලකිලිමත් වන්න).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

"
"

def encode_shift(s: str):
    """"""
    අක්ෂර මාරු කිරීමෙන් කේතය ලබා දෙනවා අක්ෂර මාරු කිරීමෙන් අක්ෂර මාරු කිරීමෙන් 5 ක්
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

"
"

def remove_vowels(text):
    """"""
    remove_vowels කියන්නේ ස්වර නැති string එකක් ගන්න ෆන්ෂන් එකක්.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

"
"

def below_threshold(l: list, t: int):
    """"""ලැයිස්තුවේ ඇති සියලුම අංකයන් t අගය යටතේ තිබේ නම් True ලෙස ලබා දෙන්න.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

"
"

def add(x: int, y: int):
    """"""x සහ y අංක දෙක එකතු කරන්න
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

"
"

def same_chars(s0: str, s1: str):
    """"""
    වචන දෙකක එකම අකුරු තියෙනවද කියලා බලන්න.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

"
"

def fib(n: int):
    """"""නැවත n- වන ෆිබොනාච්චි අංකය ලබා දෙන්න.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

"
"

def correct_bracketing(brackets: str):
    """""" brackets යනු ""<"" සහ "">"" යන අකුරු වලින් සමන්විත අරාකි. සෑම විවෘත කිරීමේ කොටුකටම අනුරූප වසා දැමීමේ කොටු තිබේ නම් True නැවත ලබා දෙන්න.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

"
"

def monotonic(l: list):
    """"""ලැයිස්තුවේ අංගයන් ඒකාකාරී ලෙස වැඩි වීම හෝ අඩු වීමයි.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

"
"

def common(l1: list, l2: list):
    """"""ලැයිස්තු දෙකක් සඳහා වර්ග කළ අද්විතීය පොදු මූලද් රව් යයන් නැවත ලබා දෙන්න.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

"
"

def largest_prime_factor(n: int):
    """"""n හි විශාලතම ප් රථම සාධකය ලබා දෙන්න. n > 1 යැයි උපකල්පනය කර ප් රථම අංකයක් නොවේ.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

"
"

def sum_to_n(n: int):
    """"""sum_to_n කියන්නේ 1 සිට n දක්වා අංක එකතු කරන ශ් රිතයක්.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

"
"

def correct_bracketing(brackets: str):
    """""" brackets යනු ""("" සහ """") යන අකුරු වලින් සමන්විත අක්ෂර මාලාවක්. සෑම විවෘත කිරීමේ කොටුකටම අනුරූප වසා දැමීමේ කොටු තිබේ නම් සත් යයක් ලෙස නැවත ලබා දෙන්න.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

"
"

def derivative(xs: list):
    """""" xs යනු බහුපදයක සංගුණකයන් වේ. xs[0] + xs[1] * x + xs[2] * x^2 +.... මෙම බහුපදයේ ව් යුත්පන්නය එකම ආකාරයෙන් ලබා දෙන්න.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

"
"

def fibfib(n: int):
    """"""FibFib අංක අනුක් රමය Fibbonacci අනුක් රමය හා සමාන අනුක් රමයකි. එය පහත පරිදි අර්ථ දක්වා ඇත: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). කරුණාකර fibfib අංක අනුක් රමයෙහි n වන අංගය කාර්යක්ෂමව ගණනය කිරීම සඳහා ශ් රිතයක් ලියන්න.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

"
"
FIX = """"""
තව පරීක්ෂණ අවස්ථා එකතු කරන්න.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def circular_shift(x, shift):
    """"""චක් රය හරහා x හි ඉලක්කම් මාරු කරන්න, ඉලක්කම් මාරු කිරීමෙන් දකුණට මාරු කරන්න සහ ප් රති result ලය නූලක් ලෙස ලබා දෙන්න. shift > ඉලක්කම් ගණන නම්, ඉලක්කම් ආපසු හරවන්න.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def digitSum(s):
    """"""කාර්යය ශ් රිතයක් ලියන්න එය ආදානය ලෙස දත්ත පෙළක් ගනී ඉහළ අක්ෂරවල එකතුව පමණක් ASCII කේත. උදාහරණ: digitSum ((("""") => 0 digitSum (((""abAB"") => 131 digitSum (((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153
    """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

"
"
def fruit_distribution(s,n):
    """"""
    මෙම කාර්යය තුළ, ඔබට පළතුරු කූඩයක බෙදා හරින ඇපල් සහ තැඹිලි ගණනක් නියෝජනය කරන නූලක් ලබා දෙනු ඇත මෙම කූඩයේ ඇපල්, තැඹිලි සහ මැංගුස් පළතුරු අඩංගු වේ. තැඹිලි සහ ඇපල් මුළු සංඛ් යාව නියෝජනය කරන නූල සහ කූඩයේ ඇති පලතුරු මුළු සංඛ් යාව නියෝජනය කරන පූර්ණ සංඛ් යාවක් ලබා දී ඇති විට, කූඩයේ ඇති මැංගුස් පළතුරු ගණන ආපසු ලබා දෙන්න. උදාහරණයක් ලෙස: fruit_distribution""5(ඇපල් සහ තැඹිලි 6"", 19) ->19 - 5 - 6 = 8 fruit_distribution""0 ඇපල් සහ 1 තැඹිලි"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 ඇපල් සහ
    """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
"
"
def pluck(arr):
    """"""
    ""අ ණ නොවන පූර්ණ සංඛ් යා නෝඩ් ඇති ගසක ශාඛාවක් නියෝජනය කරන අරාව ලබා දී ඇති විට ඔබේ කාර්යය වන්නේ නෝඩ් වලින් එකක් උදුරාගෙන එය ආපසු ලබා දීමයි. උදුරාගත් නෝඩ් කුඩාම සම අගය සහිත නෝඩ් විය යුතුය. එකම කුඩාම සම අගය සහිත නෝඩ් කිහිපයක් සොයා ගන්නේ නම් කුඩාම දර්ශකය සහිත නෝඩ් නැවත ලබා දෙන්න. උදුරාගත් නෝඩ් ලැයිස්තුවක ආපසු ලබා දිය යුතුය, [smallest_value, එහි දර්ශකය ], සම අගයන් නොමැති නම් හෝ ලබා දී ඇති අරාව හිස් නම්, නැවත ලබා දෙන්න [].උදාහරණය: 1: ආදානය: [4,2,3] ප් රතිදානය: [2, 1] පැහැදිලි කිරීම: 2 කුඩාම සම අගය සහ 2 කුඩා
    """"""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

"
"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

"
"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

"
"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) â -> False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) â -> False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) â -> True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) â -> True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

"
"
def smallest_change(arr):
    """"""
    පූර්ණ සංඛ් යා අරා ලබා දී ඇති විට, අරා පැලින්ඩ් රෝම බවට පත් කිරීම සඳහා වෙනස් කළ යුතු අවම මූලද් රව් ය ගණන සොයා ගන්න. පැලින්ඩ් රෝම අරා යනු එකම ආකාරයකින් පිටුපසට සහ ඉදිරියට කියවන අරා වේ. එක් වෙනස් කිරීමකින් ඔබට එක් මූලද් රව් යයක් වෙනත් ඕනෑම මූලද් රව් යයක් බවට වෙනස් කළ හැකිය. උදාහරණයක් ලෙස: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0
    """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

"
"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) â -> []
    total_match(['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) â -> ['4']
    '''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

"
"
def is_multiply_prime(a):
    """"""ලබා දී ඇති අංකය ප් රාථමික සංඛ් යා 3 ක ගුණ කිරීම නම් සත් ය ලෙස සහ වෙනත් ආකාරයකින් අසත් ය ලෙස ප් රතිදානය කරන ශ් රිතයක් ලියන්න. (a) 100 ට වඩා අඩු බව දැන ගැනීම. උදාහරණය: is_multiply_prime(30) == සත් ය 30 = 2 * 3 * 5
    """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

"
"
def is_simple_power(x, n):
    """"""ඔබේ කාර්යය වන්නේ x යනු n හි සරල බලයක් නම් true ලෙසත්, වෙනත් අවස්ථාවලදී false ලෙසත් ලබා දෙන ශ් රිතයක් ලිවීමයි. x යනු n හි සරල බලයකි නම් n**int=x උදාහරණයක් ලෙස: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) => false is_simple_power(5, 3) => false
    """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

"
"
def hex_key(num):
    """"""ඔබට හෙක්සඩෙසීමල් අංකයක් ලෙස අරා ලෙස ලබා ගන්නා සහ ප් රයිම් අංක වන හෙක්සඩෙසීමල් ඉලක්කම් ගණන ගණනය කරන ශ් රිතයක් ලිවීමට පැවරී ඇත (ප් රයිම් අංකය, හෝ ප් රයිම් යනු කුඩා ස්වාභාවික සංඛ් යා දෙකක නිෂ්පාදනයක් නොවන 1 ට වඩා වැඩි ස්වාභාවික සංඛ් යාවකි). හෙක්සඩෙසීමල් ඉලක්කම් වන්නේ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. ප් රයිම් අංක 2, 3, 5, 7, 11, 13, 17,... එබැවින් ඔබට පහත සඳහන් ඉලක්කම් වලින් සංඛ් යාවක් තීරණය කිරීමට සිදුවේ: 2, 3, 5, 7, B (= දශම 11), D (= දශම 13). සටහන: ඔබ උපකල්පනය කළ හැකිය ආදානය සෑම විටම
    """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

"
"
def decimal_to_binary(decimal):
    """"""ඔබට දශම සංඛ් යා ආකෘතියේ අංකයක් ලබා දෙනු ඇත. ඔබේ කාර්යය එය ද්විමය ආකෘතියට පරිවර්තනය කිරීමයි. ශ් රිතය ද්විමය සංඛ් යාවක් නියෝජනය කරන සෑම අක්ෂරයක්ම සහිත නූලක් ආපසු ලබා දිය යුතුය. නූලෙහි සෑම අක්ෂරයක්ම '0' හෝ '1' වනු ඇත. නූල ආරම්භයේ සහ අවසානයේ 'db' අක්ෂර කිහිපයක් අමතර වනු ඇත. ආකෘතියට උදව් කිරීම සඳහා අමතර අක්ෂර තිබේ. උදාහරණ: decimal_to_binary(15) # ""db1111db"" දශම_to_binary32) # ""db100000db"" ලබා දෙයි
    """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def is_happy(s):
    """"""ඔබට string s එකක් ලබා දී ඇත. ඔබේ කාර්යය වන්නේ string එක happy ද නැද්ද යන්න පරීක්ෂා කිරීමයි. string එක happy වන්නේ එහි දිග අවම වශයෙන් 3 ක් සහ සෑම අකුරු 3 ක්ම එකිනෙකට වෙනස් නම් උදාහරණය: is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (c) => False is_happy (d) => False is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (c) => False
    """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
"
"
def numerical_letter_grade(grades):
    """"""මේ සිමාස් එක අවසාන සතියේ ගුරුවරයා ශිෂ් යයන්ගේ ලකුණු ලබාදිය යුතුයි. ගුරුවරයා තමන්ගේම ඇල්ගොරිතමයක් හදලා තියෙනවා. එකම ප් රශ්නය තමයි, ඇයට ලකුණු ලබාදීමට භාවිතා කළ කේතය නැති වෙලා. ඇය ඔබට සමහර ශිෂ් යයන්ගේ GPA ලැයිස්තුවක් ලබා දීලා තියෙනවා. ඔබට පහත වගුව භාවිතා කරමින් අකුරු ලකුණු ලැයිස්තුවක් ලබාදිය හැකි ශ් රිතයක් ලිවිය යුතුයි. GPA: අකුරු ලකුණු 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation ([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', '
    """"""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def prime_length(string):
    """"""string එකක් අරගෙන True එකක් ලබා දෙන function එකක් ලියන්න. string එක ප් රයිම් නම් True හෝ False නම් False. උදාහරණ prime_length (අකුරු) == True prime_length (අකුරු) == True prime_length (අකුරු) == True prime_length (අකුරු) == True prime_length (අකුරු) == True prime_length (අකුරු) == True prime_length (අකුරු) == False
    """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

"
"
def starts_one_ends(n):
    """"""
    ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී, 1 සමඟ ආරම්භ වන හෝ අවසන් වන n-ඉලක්කම් ධනාත්මක පූර්ණ සංඛ් යා ගණන නැවත ලබා දෙන්න.
    """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(N):
    """"""ධනාත්මක පූර්ණ සංඛ් යාවක් N ලබා දී ඇති විට, එහි ඉලක්කම්වල මුළු එකතුව ද්විමය අකුරින් ලබා දෙන්න. උදාහරණය N = 1000 සඳහා, ඉලක්කම්වල එකතුව 1 වනු ඇත, ප් රතිදානය ""1"" විය යුතුය. N = 150 සඳහා, ඉලක්කම්වල එකතුව 6 වනු ඇත, ප් රතිදානය ""110"" විය යුතුය. N = 147 සඳහා, ඉලක්කම්වල එකතුව 12 වනු ඇත, ප් රතිදානය ""1100"" විය යුතුය. විචල් යයන්: @N පූර්ණ සංඛ් යාව සීමාවන්: 0 â‰¤ N â‰¤ 10000. ප් රතිදානය: ද්විමය සංඛ් යා පෙළක්
    """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

"
"
def add(lst):
    """"""හිස් නොවන පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දී ඇති විට, lst. අමුතු දර්ශකවල ඇති සම අංග එකතු කරන්න. උදාහරණ: add (([4, 2, 6, 7]) ==> 2 
    """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
"
"
def anti_shuffle(s):
    """"""
    string එකක් අරගෙන ඒකේ ordered version එකක් දෙන function එකක් ලියන්න. ordered version of string, කියන්නේ string එකක්. ඒකේ තියෙන වචන (අයිස් වලින් වෙන් කරලා) වෙනුවට අලුත් word එකක් දාලා, ascii value එක මත පදනම් වෙලා අකුරු ටික ascending order එකකට දාලා. Note: ඔයා වාක් යයේ තියෙන වචන සහ blank spaces වල order එක තියාගන්න ඕන. උදාහරණයක් විදියට: anti_shuffle ((('Hi') return 'Hi' anti_shuffle ((('hello') return 'ehllo' anti_shuffle (('Hello World!!!') return 'Hello!!!Wdlor'
    """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def get_row(lst, x):
    """"""
    ඔබට 2 මාන දත්ත ලබා දී ඇත, නයිට් ලැයිස්තු ලෙස, එය න් යාසයට සමාන ය, කෙසේ වෙතත්, න් යාස මෙන් නොව, සෑම පේළියකටම වෙනස් තීරු ගණනක් අඩංගු විය හැකිය. lst, සහ පූර්ණ සංඛ් යාව x ලබා දී ඇති විට, ලැයිස්තුවේ x පූර්ණ සංඛ් යාව සොයා ගන්න, සහ ත් රිත්ව ලැයිස්තුව ආපසු ලබා දෙන්න, [(x1, y1), (x2, y2)...] සෑම ටුපල් එකක්ම ඛණ්ඩාංකයකි - (පේළිය, තීරු), 0 සිට ආරම්භ වේ. ආරම්භයේ දී අනුකූලතා ඉහළ යන පිළිවෙලට පේළි අනුව වර්ග කරන්න. එසේම, තීරු වල අනුකූලතා පහළ යන පිළිවෙලට පේළි අනුව වර්ග කරන්න. උදාහරණ: get_row [1,
    """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def sort_array(array):
    """"""
    ණ නොවන පූර්ණ සංඛ් යා සමූහයක් ලබා දී ඇති විට, එම සමූහයේ පිටපතක් නැවත ලබා දෙන්න, ඔබ එම සමූහය වර්ධනාත්මකව වර්ග කරයි, එම සමූහය අමුතු නම්, හෝ එය පහළට වර්ග කරයි. සටහන: * ලබා දී ඇති සමූහය වෙනස් නොකරන්න. උදාහරණ: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0]
    """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

"
"
def encrypt(s):
    """"""අක්ෂර මාලාවක් ආගමනයක් ලෙස ගෙන අක්ෂර මාලාවක් එළිදක්වන ක් රියාකාරකමක් encrypt සාදන්න. අක්ෂර මාලාව භ් රමණය වන ආකාරයට අක්ෂර මාලාව පහළට දෙගුණ කිරීමෙන් ස්ථාන දෙකකට මාරු වන ආකාරයට භ් රමණය විය යුතුය. උදාහරණයක් ලෙස: encrypt (('hi') 'lm' encrypt (('asdfghjkl') 'ewhjklnop' encrypt (('gf') 'kj' encrypt (('et') 'ix' ලබා දෙයි.
    """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def next_smallest(lst):
    """"""
    ඔබට පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දී ඇත. ලැයිස්තුවේ 2 වන කුඩාම අංගය ලබා දෙන next_smallest () ශ් රිතයක් ලියන්න. එවැනි අංගයක් නොමැති නම් කිසිවක් ආපසු නොලැබේ. next_smallest () [1, 2, 3, 4, 5]) == 2 next_smallest () [5, 1, 4, 3, 2]) == 2 next_smallest () == next_smallest () [1, 1]) == කිසිවක් නැත
    """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_bored(S):
    """"""
    ඔබට වචන පෙළක් ලබා දෙනු ඇත, ඔබේ කාර්යය වන්නේ කම්මැලි සංඛ් යාව ගණන් කිරීමයි. කම්මැලි යනු ""I"" යන වචනයෙන් ආරම්භ වන වාක් යයක්. වාක් ය සීමා කරනු ලබන්නේ '.', '?' හෝ '!'මගිනි. උදාහරණයක් ලෙස:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) â -> True
    
    any_int(3, 2, 2) â -> False

    any_int(3, -2, 1) â -> True
    
    any_int(3.6, -2.2, 2) â -> False
  

    
    '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

"
"
def encode(message):
    """"""
    පණිවිඩයක් ලබාගන්නා ක් රියාවක් ලියන්න, සහ එය කේතනය කරන ආකාරයට එය සියලු අකුරු වල කේස් මාරු කරයි, පණිවිඩයේ ඇති සියලුම ස්වරයන් ඉංග් රීසි අක්ෂර මාලාවේ එම ස්වරයට ස්ථාන 2 ක් ඉදිරියෙන් ඇති අකුරෙන් ප් රතිස්ථාපනය කරයි. අකුරු පමණක් උපකල්පනය කරන්න. උදාහරණ:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

"
"

def skjkasdkd(lst):
    """"""ඔබට පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දී ඇත. ඔබට විශාලතම ප් රයිම් අගය සොයා ගැනීමට අවශ් ය වන අතර එහි ඉලක්කම්වල එකතුව නැවත ලබා දෙන්න. උදාහරණ: lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] සඳහා ප් රතිදානය 10 විය යුතුය lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] සඳහා ප් රතිදානය 25 විය යුතුය lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] සඳහා ප් රතිදානය 13 විය යුතුය lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] සඳහා ප් රතිදානය 11 විය යුතුය lst = [0,81,
    """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
"
"
def check_dict_case(dict):
    """"""
    ශබ්දකෝෂයක් ලබා දී ඇති විට, සියලුම යතුරු කුඩා අකුරු සහිත හෝ සියලුම යතුරු විශාල අකුරු සහිත නම් සත් ය නැවත ලබා දෙන්න, එසේ නොමැතිනම් අසත් ය නැවත ලබා දෙන්න. ක් රියාකාරකය අසත් ය නැවත ලබා දිය යුතුය. ලබා දී ඇති ශබ්දකෝෂය හිස් නම්. උදාහරණ: check_dict_case{""a"":""apple"", ""b"":""banana""}) සත් ය නැවත ලබා දිය යුතුය. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) අසත් ය නැවත ලබා දිය යුතුය. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) අසත් ය නැවත ලබා දිය යුතුය. check_dict_case{""Name"":""John"", ""
    """"""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

"
"
def count_up_to(n):
    """"""ණ නොවන පූර්ණ සංඛ් යාවක් ගෙන n ට වඩා අඩු ප් රාථමික සංඛ් යා වන පළමු පූර්ණ සංඛ් යා වල අරාවක් ලබා දෙන ශ් රිතයක් ක් රියාත්මක කරන්න. උදාහරණයක් ලෙස: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17]
    """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

"
"
def multiply(a, b):
    """"""සංඛ් යාත දෙකක් ගනිමින් ඒවායේ ඒකක අංකවල ගුණය ලබා දෙන ශ් රිතය සම්පූර්ණ කරන්න. ආදානය සැමවිටම වලංගු යැයි උපකල්පනය කරන්න. උදාහරණ: ගුණ කිරීම ((148, 412) 16 ආපසු ලබා දිය යුතුය. ගුණ කිරීම ((19, 28) 72 ආපසු ලබා දිය යුතුය. ගුණ කිරීම ((2020, 1851) 0 ආපසු ලබා දිය යුතුය. ගුණ කිරීම ((14,-15) 20 ආපසු ලබා දිය යුතුය.
    """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

"
"
def count_upper(s):
    """"""
    S නූලක් ලබා දී ඇති විට, සමාන දර්ශකවල ඇති විශාල ස්වර ගණන ගණනය කරන්න. උදාහරණයක් ලෙස: count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 නැවත ලබා දෙයි
    """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For Exampleclosest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

"
"
def make_a_pile(n):
    """"""
    ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී ඇති විට, ඔබට ගල් මට්ටම් n කින් යුත් ගොඩක් සෑදිය යුතුය. පළමු මට්ටමේ ගල් n ක් ඇත. ඊළඟ මට්ටමේ ගල් ගණන: - ඊළඟ අමුතු අංකය n අමුතු නම්. - ඊළඟ සජීව අංකය n සජීව නම්. ලැයිස්තුවක එක් එක් මට්ටමේ ගල් ගණන ආපසු ලබා දෙන්න, එහිදී දර්ශකයේ මූලද් රව් යය i මට්ටමේ ගල් ගණන නියෝජනය කරයි (i + 1). උදාහරණ:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def words_string(s):
    """"""
    ඔබට කොමා හෝ අවකාශයන් මගින් වෙන් කරන ලද වචන මාලාවක් ලබා දෙනු ඇත. ඔබේ කාර්යය වන්නේ වචන මාලාව වචන වලට බෙදා වචන මාලාවක් ආපසු ලබා දීමයි. උදාහරණයක් ලෙස: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

"
"
def choose_num(x, y):
    """"""මෙම ශ් රිතය ධනාත්මක සංඛ් යා x සහ y දෙකක් ගෙන [x, y] පරාසයේ ඇති විශාලතම සම පූර්ණ සංඛ් යාව නැවත ලබා දෙයි. එවැනි සංඛ් යාවක් නොමැති නම්, ශ් රිතය -1 ආපසු ලබා දිය යුතුය. උදාහරණයක් ලෙස: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1
    """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

"
"
def rounded_avg(n, m):
    """"""ඔබට ධනාත්මක පූර්ණ සංඛ් යා n සහ m ලබා දී ඇති අතර ඔබේ කාර්යය වන්නේ n සිට m දක්වා (n සහ m ඇතුළුව) පූර්ණ සංඛ් යා වල සාමාන් යය ගණනය කිරීමයි. පිළිතුර ආසන්නතම පූර්ණ සංඛ් යාවට වට කර එය ද්විමය බවට පරිවර්තනය කරන්න. n ට වඩා වැඩි නම්, ආපසු -1. උදාහරණය: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010""
    """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

"
"
def unique_digits(x):
    """"""ධනාත්මක පූර්ණ සංඛ් යා x ලැයිස්තුවක් ලබා දී ඇති විට, සංඛ් යා අංකයකින් තොර සියලුම අංගයන්ගෙන් සමූහ ලැයිස්තුවක් ලබා දෙන්න. සටහන: ආපසු ලබා දුන් ලැයිස්තුව වැඩිවන අනුපිළිවෙලකට වර්ග කළ යුතුය. උදාහරණයක් ලෙස:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def by_length(arr):
    """"""
    පූර්ණ සංඛ් යා අරාවක දී, 1 සහ 9 අතර ඇති පූර්ණ සංඛ් යා වර්ග කරන්න, ප් රතිඵල අරාව ආපසු හරවන්න, ඉන්පසු සෑම ඉලක්කම් අංකයක්ම එහි අනුරූප නමින් ""එක"", ""දෙක"", ""තුන"", ""හතර"", ""පහ"", ""හය"", ""හත"", ""අට"", ""නව"" සිට ආදේශ කරන්න. උදාහරණයක් ලෙස: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> වර්ග කරන්න arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> ආපසු arr -> [8, 5, 4, 3, 2, 2, 1, 1] ආපසු යන්න [""අට"", ""පහ"", ""තුන"", ""දෙක"", ""දෙක"", ""එක"", ""එක""] අරාව හිස් නම්, අංකයක් ආපසු හරවන්න: arr = [] return [] අරාවෙහි අමුතු
    """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

"
"
def f(n):
    """""" n අගය ලෙස ගන්නා f ශ් රිතය ක් රියාත්මක කරන්න, සහ n ප් රමාණයේ ලැයිස්තුවක් ලබා දෙයි, i දර්ශකයේ ඇති මූලද් රව් යයේ අගය i හි සාධකය වේ i නම් i සජීවී නම් හෝ 1 සිට i දක්වා සංඛ් යා එකතුවක් නම්. i 1 සිට ආරම්භ වේ. i හි සාධකය 1 සිට i දක්වා සංඛ් යා ගුණ කිරීමයි (1 * 2 *... * i). උදාහරණය: f ((5) == [1, 2, 6, 24, 15]
    """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
"
"
def even_odd_palindrome(n):
    """"""
    ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී ඇති විට, සීමාව තුළට වැටෙන සම සහ අමු පූර්ණ සංඛ් යා පාලින්ඩ් රෝම් ගණනක් ඇති ටියුපලයක් ආපසු ලබා දෙන්න. උදාහරණය1: ආදානය: 3 ප් රතිදානය: (1, 2) පැහැදිලි කිරීම: සම පූර්ණ සංඛ් යා පාලින්ඩ් රෝම් 1, 2, 3. ඒවායින් එකක් සම සහ දෙකක් අමු ය. උදාහරණය 2: ආදානය: 12 ප් රතිදානය: (4, 6) පැහැදිලි කිරීම: සම පූර්ණ සංඛ් යා පාලින්ඩ් රෝම් 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ඒවායින් හතරක් සම සහ 6 අමු ය. සටහන: 1. 1 <= n <= 10^3 2. ටියුපලය පිළිවෙලින් සම සහ අමු පූර්ණ සංඛ් යා පාලින්ඩ් රෝම් ගණන ලබා දී ඇත.
    """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def count_nums(arr):
    """"""
    අංකයක අංක ගණනක් > 0 නම්, එහි පළමු අත්සන් කළ අංකය ණ වේ: උදාහරණයක් ලෙස -123 හි අත්සන් කළ අංක -1, 2 සහ 3 ඇත.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def move_one_ball(arr):
    """"""අපි 'arr' අරා එකක් තියෙනවා N පූර්ණ සංඛ් යා arr[1], arr[2],..., arr[N] අරා වල අංක අහඹු ලෙස පිළිවෙලට සකස් කර ඇත. ඔබගේ කාර්යය වන්නේ පහත දැක්වෙන ක් රියාව සිදු කිරීමෙන් අරා වර්ග කිරීම අඩු නොවන අනුපිළිවෙලකින් ලබා ගත හැකිද යන්න තීරණය කිරීමයි. ඔබට ලබා දී ඇති අරා මත පහත සඳහන් ක් රියාකාරකම් සිදු කිරීමට අවසර ඇත. ඔබට ඕනෑම වාර ගණනක් දකුණට මාරුවීමේ ක් රියාකාරකමක් සිදු කිරීමට අවසර ඇත. එක් දකුණට මාරුවීමේ ක් රියාවක් යනු අරා වල සියලුම අංග එක් ස්ථානයකින් දකුණු දිශාවට මාරු කිරීමයි. අරා වල අවසාන අංගය අරාවෙහි ආරම්භක ස්ථානයට එනම් 0 වන දර්ශකයට ගෙන යනු ඇත. ඉහත ක් රියාකාරකම සිදු කිරීමෙන් වර්ග කළ අ
                
    """"""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
"
"
def exchange(lst1, lst2):
    """"""මෙම ගැටලුවේදී, ඔබ අංක ලැයිස්තු දෙකක් ගන්නා අතර ඒවා අතර අංග හුවමාරු කර lst1 සීමිත සංඛ් යාවක් බවට පත් කළ හැකිද යන්න තීරණය කරයි. lst1 සහ lst2 අතර හුවමාරු වන අංග ගණන සීමා නොවේ. lst1 හි සියලුම අංග සීමිත කිරීමට lst1 සහ lst2 අතර අංග හුවමාරු කර ගත හැකි නම්, ""YES"" ආපසු ලබා දෙන්න. එසේ නොමැති නම්, ""NO"" ආපසු ලබා දෙන්න. උදාහරණයක් ලෙස: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" ආදාන ලැයිස්තු හිස් නොවන බව උපකල්ප කෙරේ.
    """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

"
"
def histogram(test):
    """"""අවකාශය වෙන් කරන ලද කුඩා අකුරු නියෝජනය කරන නූලක් ලබා දී ඇති විට, වඩාත්ම පුනරාවර්තනය වන අකුරෙහි ශබ්දකෝෂයක් ආපසු ලබා දෙන්න. අකුරු කිහිපයක් එකම සිදුවීමක් තිබේ නම්, ඒවා සියල්ලම ආපසු ලබා දෙන්න. උදාහරණය: හිස්ටෝග් රෑම් ((('a b c') == {'a': 1, 'b': 1, 'c': 1} හිස්ටෝග් රෑම් ((('a b b a') == {'a': 2, 'b': 2} හිස්ටෝග් රෑම් ((('a b c a b') == {'a': 2, 'b': 2} හිස්ටෝග් රෑම් ((('b b a') == {'b 4}': හිස්ටෝග් රෑම් ((')) == {}

    """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

"
"
def reverse_delete(s,c):
    """"""කාර්යය අපට s හා c යන අක්ෂර පෙළ දෙකක් ලබා දී ඇත, ඔබට s හි ඕනෑම අක්ෂරයකට සමාන වන සියලු අක්ෂර මකා දැමිය යුතුය c එවිට ප් රති result ල නූල පැලින්ඩ් රෝම් ද යන්න පරීක්ෂා කරන්න. එය පසුපසට හා ඉදිරියට සමාන නම් නූල පැලින්ඩ් රෝම් ලෙස හැඳින්වේ. ඔබ ප් රති result ල නූල සහ සත් ය / අසත් ය ඇතුළත් ටියුපල් එකක් ආපසු ලබා දිය යුතුය. උදාහරණය s = ""abcde"", c = ""ae"", ප් රති result ලය විය යුතුය ('bcd', False) s = ""abcdef"", c = ""b"" ප් රති result ලය විය යුතුය ('acdef', False) s = ""abcdedcba"", c = ""ab"", ප් රති result ලය විය යුතුය ('cdedc', True)
    """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
"
"
def odd_count(lst):
    """"""සෑම string එකකම අංක පමණක් ඇති string ලැයිස්තුවක් ලබා දී, ලැයිස්තුවක් නැවත ලබා දෙන්න. output එකේ සෑම i අංගයක්ම ""input එකේ string i හි odd අංග ගණන විය යුතුය"". මෙහිදී සියලු i's ආදාන i'th string හි odd අංක ගණන මගින් ප් රතිස්ථාපනය කළ යුතුය.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minSubArraySum(nums):
    """"""
    පූර්ණ සංඛ් යා අරා එකක් ලබා දී ඇති විට, හිස් නොවන ඕනෑම උප අරාකයක අවම එකතුව සොයා ගන්න. උදාහරණය minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6
    """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
"
"
def max_fill(grid, capacity):
    import math
    """"""
    ඔබට කුහරවල සෘජුකෝණාස්රාකාර ජාලයක් ලබා දී ඇත. සෑම පේළියක්ම තනි ළිඳක් නියෝජනය කරන අතර සෑම පේළියක 1 ක්ම තනි ජල ඒකකයක් නියෝජනය කරයි. සෑම ළිඳකටම ජලය ලබා ගැනීමට භාවිතා කළ හැකි අනුරූප බාල්දියක් ඇති අතර සියලුම බාල්දියන්ට එකම ධාරිතාවක් ඇත. ඔබේ කාර්යය වන්නේ ළිං හිස් කිරීමට බාල්දිය භාවිතා කිරීමයි. බාල්දිය පහළට දැමීමට ඔබට අවශ් ය වාර ගණන ප් රතිදානය කරන්න. උදාහරණය: 1: ආදානය: ජාලකය: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 ප් රතිදානය: 62: ආදානය: ජාලකය: [[0,0,1,1], [0,0,0,0,
    """"""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

"
"
def sort_array(arr):
    """"""
    මෙම කත තුළ, ඔබ ණ නොවන පූර්ණ සංඛ් යා අරාව වර්ග කළ යුතුය. ඒවායේ ද්විමය නිරූපණයේ ඇති 1 සංඛ් යාව අනුව ඉහළ යන පිළිවෙලට. සමාන 1 සංඛ් යාවක් සඳහා, දශම අගය මත පදනම්ව වර්ග කරන්න. එය මේ ආකාරයෙන් ක් රියාත්මක කළ යුතුය:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def select_words(s, n):
    """"""string s සහ natural number n ලබා දී ඇති විට, string s හි ඇති සියලුම වචන වලින් ලැයිස්තුවක් ලබා දෙන ශ් රිතයක් ක් රියාත්මක කිරීමට ඔබට පැවරී ඇත. මෙම වචන string s හි දිස්වන පරිදි, හරියටම n ඝන පද අඩංගු වේ. string s හිස් නම්, ශ් රිතය හිස් ලැයිස්තුවක් ලබා දිය යුතුය. සටහන: ඔබ උපකල්පනය කළ හැකිය ආදාන නූලෙහි ඇත්තේ අකුරු සහ අවකාශයන් පමණි. උදාහරණ: select_words ""මාරි ට කුඩා බැටළුවෙකු සිටියේය"" (4) ==> [""කුඩා""] select_words ""මාරි ට කුඩා බැටළුවෙකු සිටියේය"" (3) ==> [""මාරි"", ""බැටළුවෙකු""] select_words ""සරල සුදු අවකාශය"", (2) ==> [] select_words ""හෙලෝ ලෝකය"", (4) ==> [""ලෝකය
    """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

"
"
def get_closest_vowel(word):
    """"""ඔබට වචනයක් ලබා දී ඇත. ඔබේ කාර්යය වන්නේ වචනයේ දකුණු පැත්තේ සිට ඝන අකුරු දෙක අතර පිහිටා ඇති ආසන්නතම ස්වරය සොයා ගැනීමයි. ආරම්භයේ සහ අවසානයේ ස්වර ගණන් නොගනී. ඉහත කොන්දේසිය සපුරාලන ස්වරයක් ඔබ සොයා නොගත්තේ නම් හිස් නූලක් ආපසු දෙන්න. ලබා දී ඇති නූලෙහි ඉංග් රීසි අකුරු පමණක් අඩංගු යැයි ඔබ උපකල්පනය කළ හැකිය. උදාහරණය: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """"
    """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

"
"
def maximum(arr, k):
    """"""
    පූර්ණ සංඛ් යා arr සහ ධනාත්මක පූර්ණ සංඛ් යා k ලබා දී ඇති විට, arr හි උපරිම k සංඛ් යා සහිත දිග k හි වර්ග කළ ලැයිස්තුවක් ආපසු ලබා දෙන්න. උදාහරණය 1: ආදානය: arr = [-3, -4, 5], k = 3 ප් රතිදානය: [-4, -3, 5] උදාහරණය 2: ආදානය: arr = [4, -4, 4], k = 2 ප් රතිදානය: [4, 4] උදාහරණය 3: ආදානය: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 ප් රතිදානය: [2] සටහන: 1.
    """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

"
"
def solution(lst):
    """"""හිස් නොවන පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දී ඇති විට, සම ස්ථානවල ඇති සියලුම අමුද් රව් යවල එකතුව නැවත ලබා දෙන්න. උදාහරණ විසඳුම (([5, 8, 7, 1]) ==> 12 විසඳුම (([3, 3, 3, 3, 3]) ==> 9 විසඳුම (([30, 13, 24, 321]) ==> 0
    """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

"
"
def add_elements(arr, k):
    """"""
    පූර්ණ සංඛ් යා arr හා පූර්ණ සංඛ් යා k හිස් නොවන අරාව ලබා දී ඇති විට, arr හි පළමු k මූලද් රව් ය වලින් උපරිම වශයෙන් ඉලක්කම් දෙකක් සහිත මූලද් රව් යවල එකතුව නැවත ලබා දෙන්න. උදාහරණය: ආදානය: arr = [111,21,3,4000,5,6,7,8,9], k = 4 ප් රතිදානය: 24 # 21 + 3 හි එකතුව සීමාවන්: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)
    """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def get_odd_collatz(n):
    """"""
    ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී ඇති විට, අමුතු සංඛ් යා collatz අනුක් රමයෙන් වර්ග කර ලැයිස්තුවක් නැවත ලබා දෙන්න. Collatz උපකල්පනය යනු ගණිතය තුළ අනුකල්පනයකි. එය පහත පරිදි අර්ථ දක්වා ඇති අනුක් රමයකට අදාළ වේ: ඕනෑම ධනාත්මක පූර්ණ සංඛ් යාවක් n සමඟ ආරම්භ කරන්න. ඉන්පසු සෑම පදයක්ම පෙර පදයෙන් පහත පරිදි ලබා ගනී: පෙර පදය සම නම්, ඊළඟ පදය පෙර පදයේ අඩකි. පෙර පදය අමු නම්, ඊළඟ පදය පෙර පදයට වඩා 3 ගුණයක් වේ. උපකල්පනය නම්, n හි කුමන අගයක් වුවද, අනුක් රය සැමවිටම 1 දක්වා ළඟා වනු ඇත. සටහන: 1. Collatz (((1) [1] වේ. 2. ආපසු ලැයිස්තුව වර්ග
    """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def valid_date(date):
    """"""දිනය වලංගු නම් True ලෙස දමනු ලැබේ. එසේ නොමැති නම් False ලෙස දමනු ලැබේ. දිනය වලංගු වන්නේ පහත සඳහන් සියලුම නීතිරීති සපුරා ඇත්නම් පමණි: 1. දිනය හිස් නොවේ. 2. දින ගණන මාස 1,3,5,7,8,10,12 සඳහා දින 1 ට වඩා අඩු හෝ දින 31 ට වඩා වැඩි නොවේ. සහ දින ගණන මාස 4,6,9,11 සඳහා දින 1 ට වඩා අඩු හෝ දින 30 ට වඩා වැඩි නොවේ. සහ දින ගණන මාසය සඳහා දින 1 ට වඩා අඩු හෝ 29 ට වඩා වැඩි නොවේ. 2. මාස 1 ට වඩා අඩු හෝ 12 ට වඩා වැඩි නොවිය යුතුය. 4. දිනය ආකෘතියේ විය යුතුය: mm-dd-yyyy උදාහරණයක් ලෙස: valid_date (('03-11-2000') => valid_date (('15-01-2012') => valid_date (('04-01-2040') => valid
    """"""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
"
"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") â -> [""Hello"", ""world!""]
    split_words(""Hello,world!"") â -> [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
"
"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) â -> True
    is_sorted([1, 2, 3, 4, 5]) â -> True
    is_sorted([1, 3, 2, 4, 5]) â -> False
    is_sorted([1, 2, 3, 4, 5, 6]) â -> True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) â -> True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) â -> False
    is_sorted([1, 2, 2, 3, 3, 4]) â -> True
    is_sorted([1, 2, 2, 2, 3, 4]) â -> False
    '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

"
"
def intersection(interval1, interval2):
    """"""ඔබට කාල පරිච්ඡේද දෙකක් ලබා දී ඇත, එහිදී සෑම කාල පරිච්ඡේදයක්ම පූර්ණ සංඛ් යා යුගලයකි. උදාහරණයක් ලෙස, කාල පරිච්ඡේදය = (ආරම්භය, අවසානය) = (1, 2). ලබා දී ඇති කාල පරිච්ඡේදයන් වසා ඇත, එයින් අදහස් වන්නේ කාල පරිච්ඡේදය (ආරම්භය, අවසානය) ආරම්භය සහ අවසානය යන දෙකම ඇතුළත් බවයි. සෑම ලබා දී ඇති කාල පරිච්ඡේදයක් සඳහාම, එහි ආරම්භය එහි අවසානයට වඩා අඩු හෝ සමාන යැයි උපකල්පනය කෙරේ. ඔබේ කාර්යය වන්නේ මෙම කාල පරිච්ඡේද දෙකේ ඡේදයේ දිග ප් රාථමික සංඛ් යාවක් දැයි තීරණය කිරීමයි. උදාහරණයක් ලෙස, කාල පරිච්ඡේදයන් (1, 3), (2, 4) හි ඡේදයේ දිග (2, 3) වන අතර එහි දිග ප් රාථමික සංඛ් යාවක් නොවේ. ඡේදයේ
    """"""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

"
"
def prod_signs(arr):
    """"""
    ඔබට පූර්ණ සංඛ් යා සමූහයක් ලබා දී ඇති අතර, ඔබ විසින් පූර්ණ සංඛ් යා සමූහයේ ප් රමාණයේ එකතුව නැවත ලබා දිය යුතුය. එය 1, -1 හෝ 0 මගින් නිරූපණය වන අරාවෙහි ඇති සෑම සංඛ් යාවකම සංකේතවල ගුණය මගින් ගුණ කළ යුතුය. සටහන: හිස් arr සඳහා කිසිවක් ආපසු ලබා නොදේ. උදාහරණය:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minPath(grid, k):
    """"""
    N පේළි සහ N තීරු (N >= 2) සහ ධනාත්මක පූර්ණ සංඛ් යාවක් k සහිත ජාලකයක සෑම සෛලයකම අගයක් අඩංගු වේ. [1, N * N] ඇතුළත් පරාසයේ සෑම පූර්ණ සංඛ් යාවක්ම ජාලකයේ සෛලවල හරියටම එක් වරක් දිස් වේ. ඔබට ජාලකයේ k දිගේ අවම මාර්ගය සොයා ගත යුතුය. ඔබට ඕනෑම සෛලයකින් ආරම්භ කළ හැකි අතර සෑම පියවරකදීම ඔබට අසල්වැසි සෛල වෙත යා හැකිය, වෙනත් වචන වලින් කිවහොත්, ඔබට වත්මන් සෛල සමඟ කෙළවරක් බෙදා ගන්නා සෛල වෙත යා හැකිය. k දිගින් යුත් මාර්ගයක් යනු හරියටම k සෛල වෙත පිවිසීමයි (අනිවාර්යයෙන්ම වෙනස් නොවේ). ඔබට ජාලකයෙන් පිටතට යා නොහැක. A (k දිග
    """"""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

"
"
def tri(n):
    """"""ෆිබොනාච්චි අනුක් රමය සෑම දෙනාම දන්නවා. එය පසුගිය සියවස් දෙකක කාලය තුළ ගණිතඥයන් විසින් ගැඹුරින් අධ් යයනය කරන ලදී. කෙසේ වෙතත්, මිනිසුන් නොදන්නා දෙය නම් ට් රිබොනාච්චි අනුක් රමයයි. ට් රිබොනාච්චි අනුක් රමය නැවත නැවතත් අර්ථ දැක්වෙන්නේ: tri(1) = 3 tri(n) = 1 + n / 2, n සක් රීය නම්. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), n අංක නම්. උදාහරණයක් ලෙස: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 ඔබට ණ නොවන පූර්ණ සංඛ් යාවක් n ලබා දී ඇති අතර, ඔබට ට් රිබ
    """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
"
"
def digits(n):
    """"""ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී ඇති විට, අමු ඉලක්කම් වල ගුණය ලබා දෙන්න. සියලු ඉලක්කම් සම නම් 0 ලබා දෙන්න. උදාහරණයක් ලෙස: ඉලක්කම් ((1) == 1 ඉලක්කම් ((4) == 0 ඉලක්කම් ((235) == 15
    """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

"
"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') â -> True
    is_nested('[]]]]]]][[[[[]') â -> False
    is_nested('[][]') â -> False
    is_nested('[]') â -> False
    is_nested('[[][]]') â -> True
    is_nested('[[]][[') â -> True
    '''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

"
"

def sum_squares(lst):
    """"""ඔබට සංඛ් යා ලැයිස්තුවක් ලබා දී ඇත. ඔබට අවශ් ය වන්නේ ලබා දී ඇති ලැයිස්තුවේ ඇති සංඛ් යා වර්ගයේ එකතුව ආපසු ලබා දීමයි. ලැයිස්තුවේ ඇති සෑම අංගයක්ම ඉහළට වට කරන්න. උදාහරණ: lst = [1,2,3] සඳහා ප් රතිදානය 14 විය යුතුය lst = [1,4,9] සඳහා ප් රතිදානය 98 විය යුතුය lst = [1,3,5,7] සඳහා ප් රතිදානය 84 විය යුතුය lst = [1.4,4.2,0] සඳහා ප් රතිදානය 29 විය යුතුය lst = [-2.4,1,1] සඳහා ප් රතිදානය 6 විය යුතුය
    

    """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") â -> False
    check_if_last_char_is_a_letter(""apple pi e"") â -> True
    check_if_last_char_is_a_letter(""apple pi e "") â -> False
    check_if_last_char_is_a_letter("""") â -> False 
    '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def can_arrange(arr):
    """"""අංගයක විශාලතම දර්ශකය එයට පෙර ඇති අංගයට වඩා වැඩි හෝ සමාන නොවන ශ් රිතයක් ලබා දෙන ශ් රිතයක් සාදන්න. එවැනි අංගයක් නොමැති නම් ආපසු -1. ලබා දී ඇති අරාවෙහි අනුපිටපත් අගයන් අඩංගු නොවේ. උදාහරණ: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1
    """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

"
"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
"
"
def compare_one(a, b):
    """"""
    අංකය, අංකය හෝ අංකය ලෙස අර්ථ දැක්වෙන අංකය, අංකය හෝ අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස හැඳින්
    """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_equal_to_sum_even(n):
    """"""ලබා දී ඇති අංකය n නිවැරදිව ධනාත්මක සම සංඛ් යා 4 ක එකතුවක් ලෙස ලිවිය හැකිදැයි තක්සේරු කරන්න උදාහරණය is_equal_to_sum_even (අංකය 4) == අසත් ය is_equal_to_sum_even (අංකය 6) == අසත් ය is_equal_to_sum_even (අංකය 8) == සත් ය
    """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
"
"
def special_factorial(n):
    """"""බ් රසීලියානු සාධකය ලෙස අර්ථ දැක්වෙන්නේ: brazilian_factorial (n) = n! * (n-1)! * (n-2)! *... * 1! මෙහි n > 0 උදාහරණයක් ලෙස:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

"
"
def fix_spaces(text):
    """"""
    පෙළ පෙළක් ලබා දී ඇති විට, එහි ඇති සියලුම අවකාශයන් යටි සලකුණු වලින් ප් රතිස්ථාපනය කරන්න, සහ පෙළක් අඛණ්ඩව අවකාශයන් 2 කට වඩා තිබේ නම්, පසුව අඛණ්ඩව ඇති සියලුම අවකාශයන් - fix_spaces (_) ආදර්ශය) == ""උදාහරණය"" fix_spaces (_) ආදර්ශය 1 (_) ආදර්ශය 1 (_) ආදර්ශය 2 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

"
"
def file_name_check(file_name):
    """"""ගොනුවක නම නිරූපණය කරන නූලක් ගන්නා ක් රියාවක් නිර්මාණය කරන්න, එය වලංගු නම් 'ඔව්' නැවත ලබා දෙයි, එසේ නොමැති නම් 'නැත' නැවත ලබා දෙයි. ගොනුවක නම වලංගු යැයි සලකනු ලබන්නේ පහත සඳහන් කොන්දේසි සියල්ලම සපුරා ඇත්නම් පමණි: - ගොනුවේ නමට ඉලක්කම් තුනකට වඩා තිබිය යුතු නැත ('0'-'9') ගොනුවේ නමට හරියටම එක තිතක් අඩංගු වේ. - තිතට පෙර උප නූල හිස් නොවිය යුතු අතර එය ලතින් අක්ෂරයකින් ආරම්භ වේ ('a'-'z' සහ 'A''-Z'). - තිතට පසු උප නූල ලතින් අක්ෂරයකින් ආරම්භ විය යුතුය: ['txt', 'exe', 'lld'] උදාහරණ: file_name_check""
    """"""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

"
"


def sum_squares(lst):
    """"""මෙම ශ් රිතය පූර්ණ සංඛ් යා ලැයිස්තුවක් ගනී. ලැයිස්තුවේ සියලුම ප් රවේශයන් සඳහා, ශ් රිතය එහි දර්ශකය 3 ක ගුණයක් නම් පූර්ණ සංඛ් යා ප් රවේශය වර්ග කළ යුතු අතර එහි දර්ශකය 4 ක ගුණයක් නම් පූර්ණ සංඛ් යා ප් රවේශය ඝන කරයි. ශ් රිතය ලැයිස්තුවේ ප් රවේශයන් වෙනස් නොකරනු ඇත. එහි දර්ශක 3 හෝ 4 ක ගුණයක් නොවේ. එවිට ශ් රිතය සියලුම ප් රවේශයන්ගේ එකතුව නැවත ලබා දෙයි. උදාහරණ: lst = [1,2,3] සඳහා ප් රතිදානය 6 විය යුතුය lst = [] සඳහා ප් රතිදානය 0 විය යුතුය lst = [-1,-5,2,-1,-5] සඳහා ප් රතිදානය -126 විය යුතුය
    """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
"
"
def words_in_sentence(sentence):
    """"""
    ඔබට වාක් යයක් නියෝජනය කරන නූලක් ලබා දී ඇත, වාක් යයේ ඉඩකින් වෙන් කර ඇති වචන කිහිපයක් අඩංගු වන අතර, මුල් වාක් යයේ වචන අඩංගු නූලක් ආපසු ලබා දිය යුතුය, එහි දිග ප් රාථමික සංඛ් යා වේ, නව නූලෙහි වචන අනුපිළිවෙල මුල් එක හා සමාන විය යුතුය. උදාහරණය 1: ආදානය: වාක් ය = ""මෙය පරීක්ෂණයක්"" ප් රතිදානය: ""is"" උදාහරණය 2: ආදානය: වාක් ය = ""පිහිනීමට යාමට ඉඩ දෙන්න"" ප් රතිදානය: ""go for"" සීමාවන්: * 1 <= len(sentence) <= 100 * වාක් යයේ අකුරු පමණක් අඩංගු වේ
    """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

"
"
def simplify(x, n):
    """"""ඔබේ කාර්යය වන්නේ x * n ප් රකාශනය සරල කරන ශ් රිතයක් ක් රියාත්මක කිරීමයි. x * n පූර්ණ සංඛ් යාවක් ලෙස අගය කළහොත් ශ් රිතය සත් ය නැවත ලබා දෙයි. එසේ නොමැතිනම් ව් යාජය. x සහ n යන දෙකම, අංශුවක නියෝජනය වන අතර පහත දැක්වෙන ආකෘතිය ඇත, <numerator>/<denominator> එහිදී අංකකය සහ නාමකය ධනාත්මක පූර්ණ සංඛ් යා වේ. ඔබට x සහ n වලංගු අංශු යැයි උපකල්පනය කළ හැකි අතර නාමකය ලෙස ශුන් ය නොමැත. සරල කරන්න "" 1 / 5 "", ""5 / 1 "") = සත් ය සරල කරන්න "" 1/ 6 "", ""2 / 1 "") = ව් යාජ සරල කරන්න "" 7 / 10 "", ""10 / 2 "") = ව් යාජ
    """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

"
"
def order_by_points(nums):
    """"""
    ඉලක්කම් ලැයිස්තුවේ අංකවල එකතුව අනුව ඉහළ යන පිළිවෙලට වර්ග කරන ශ් රිතයක් ලියන්න. සටහන: අංකවල එක සමාන එකතුවක් ඇති අයිතම කිහිපයක් තිබේ නම්, මුල් ලැයිස්තුවේ ඇති දර්ශකය මත පදනම්ව ඒවා වර්ග කරන්න. උදාහරණයක් ලෙස:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def specialFilter(nums):
    """"""සංඛ් යා අරාව ආදානය ලෙස ගෙන එම අරාවෙහි ඇති 10 ට වඩා වැඩි අංග ගණන සහ සංඛ් යාවක පළමු හා අවසාන ඉලක්කම් දෙකම අමු (1, 3, 5, 7, 9) වන බව පෙන්වන ශ් රිතයක් ලියන්න. උදාහරණයක් ලෙස: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2
    """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

"
"
def get_max_triples(n):
    """"""
    ඔබට ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී ඇත. ඔබට දිග n ක පූර්ණ සංඛ් යා අරාවක් නිර්මාණය කළ යුතුය. සෑම i (1 ‰¤ i ‰¤ n) සඳහාම, a[i] = i * i - i + 1 හි අගය. i < j < k වන a හි ත් රිත්ව (a[i], a[j], a[k]) සංඛ් යාව නැවත ලබා දෙන්න, සහ a[i] + a[j] + a[k] යනු 3 හි ගුණකයකි. උදාහරණය: ආදානය: n = 5 ප් රතිදානය: 1 පැහැදිලි කිරීම: a = [1, 3, 7, 13, 21] වලංගු ත් රිත්ව (1, 7, 13) පමණි.
    """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
"
"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

"
"
def sorted_list_sum(lst):
    """"""string ලැයිස්තුවක් පරාමිතියක් ලෙස පිළිගන්නා, අමුතු දිග ඇති string මකා දමා, එහි ඇති ලැයිස්තුව වර්ග කළ පිළිවෙලක් සමඟ නැවත ලබා දෙන ශ් රිතයක් ලියන්න. ලැයිස්තුව සැමවිටම string ලැයිස්තුවක් වන අතර කිසි විටෙකත් සංඛ් යා අනුක් රමයක් නොවන අතර එය අනුපිටපත් අඩංගු විය හැකිය. ලැයිස්තුවේ අනුපිළිවෙල එක් එක් වචනයේ දිග අනුව ඉහළ යා යුතුය, ඔබ එම රීතිය අනුව වර්ග කළ ලැයිස්තුව නැවත ලබා දිය යුතුය. වචන දෙකේ දිග සමාන නම්, ලැයිස්තුව අක්ෂර වින් යාසය අනුව වර්ග කරන්න. ශ් රිතය වර්ග කළ පිළිවෙලකින් string ලැයිස්තුවක් නැවත ලබා දිය යුතුය. ඔබට සියලු වචන එකම දිගකින් යුක්ත යැයි උපකල්පනය කළ හැකිය. උදාහරණයක් ලෙස: assert list_
    """"""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

"
"
def x_or_y(n, x, y):
    """"""සරල වැඩසටහනක්, එය n ප් රථම සංඛ් යාවක් නම් x හි අගය ලබා දිය යුතු අතර, එසේ නොමැති නම් y හි අගය ලබා දිය යුතුය. උදාහරණ: x_or_y{7, 34, 12) == 34 x_or_y{15, 8, 5) == 5
    
    """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

"
"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

"
"
def compare(game,guess):
    """"""මම හිතන්නේ අපි හැමෝටම මතකයි ඒ හැඟීම බොහෝ කලක් බලා සිටි සිදුවීමක ප් රතිඵලය අවසානයේදී දැනෙන විට. ඒ මොහොතේ ඔබට ඇති හැඟීම් සහ සිතුවිලි අනිවාර්යයෙන්ම සටහන් කර ගැනීම හා සංසන්දනය කිරීම වටී. ඔබේ කාර්යය පුද්ගලයෙකු ගැලපෙන ප් රති results ල ගණනාවක් නිවැරදිව අනුමාන කර ඇත්දැයි තීරණය කිරීමයි. ඔබට සමාන දිග ලකුණු සහ අනුමාන කිරීම් මාලා දෙකක් ලබා දී ඇත, එහිදී සෑම දර්ශකයක්ම ගැලපීමක් පෙන්වයි. එක් එක් අනුමානය කොතරම් දුරට ඇත්දැයි දැක්වෙන එකම දිග මාලාවක් ආපසු ලබා දෙන්න. ඔවුන් නිවැරදිව අනුමාන කර ඇත්නම්, අගය 0 වන අතර, එසේ නොවේ නම්, අගය අනුමානය සහ ලකුණු අතර නිරපේක්ෂ වෙනස වේ. උදාහරණය: ((([1,
    """"""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def Strongest_Extension(class_name, extensions):
    """"""ඔබට පන්තියක නම (ශ් රේණියක්) සහ දිගු ලැයිස්තුවක් ලබා දෙනු ඇත. දිගු ලැයිස්තුවක් භාවිතා කරනු ලබන්නේ පන්තියට අමතර පන්ති පූරණය කිරීමටයි. දිගු කිරීමේ ශක්තිය පහත පරිදි වේ: CAP දිගු කිරීමේ නමේ ඇති ලොකු අකුරු ගණන වේවා, සහ SM දිගු කිරීමේ නමේ ඇති කුඩා අකුරු ගණන වේවා, ශක්තිය ලබා දෙන්නේ CAP - SM අකුරු කොටුවෙනි. ඔබ ශක්තිමත්ම දිගුව සොයාගෙන මෙම ආකෘතියෙන් නූලක් ආපසු ලබා දිය යුතුය: ClassName.StrongestExtensionName. එකම ශක්තිය සහිත දිගු දෙකක් හෝ වැඩි ගණනක් තිබේ නම්, ඔබ ලැයිස්තුවේ පළමුව එන එක තෝරා ගත යුතුය. උදාහරණයක් ලෙස, ඔබට ""Slices"" පන්තිය ලෙස සහ දිගු ලැයිස්තුවක් ලෙස ලබා
    """"""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
"
"
def cycpattern_check(a , b):
    """"""ඔබට වචන දෙකක් ලබා දී ඇත. ඔබ True නැවත ලබා දිය යුතුයි දෙවන වචනය හෝ එහි ඕනෑම භ් රමණයන් පළමු වචනයේ උප නූලක් නම් cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True

    """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

"
"
def even_odd_count(num):
    """"""පූර්ණ සංඛ් යාවක් ලබා දී ඇත. පිළිවෙලින් සම සහ අමු අංක ගණනක් ඇති ටියුපල් එකක් නැවත ලබා දෙන්න. උදාහරණය: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2)
    """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def int_to_mini_roman(number):
    """"""
    ධනාත්මක පූර්ණ සංඛ් යාවක් ලබා දී එහි රෝමානු සංඛ් යා සමාන අංකය ලබාගෙන එය කුඩා අකුරින් ලබා දෙන්න. සීමාවන්: 1 <= num <= 1000 උදාහරණ:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

"
"
def find_max(words):
    """"""string ලැයිස්තුවක් පිළිගන්නා ක් රියාකාරකමක් ලියන්න. ලැයිස්තුවේ විවිධ වචන අඩංගු වේ. උපරිම අද්විතීය අක්ෂර සංඛ් යාවක් සහිත වචනය ආපසු දෙන්න. බහු string වල උපරිම අද්විතීය අක්ෂර සංඛ් යාවක් තිබේ නම්, ශබ්දකෝෂීය අනුපිළිවෙල අනුව පළමුව එන එක නැවත දෙන්න. find_max (([""name"", ""of"", ""string""]) == ""string"" find_max (([""name"", ""enam"", ""game""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"", ""cc""]) == """"aaaaaaa""
    """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

"
"
def eat(number, need, remaining):
    """"""
    ඔබ බඩගිනි හාවෙක්, ඔබ දැනටමත් කැරට් ගණනාවක් කාලා තියෙනවා, නමුත් දැන් ඔබට අවශ් ය කැරට් ගණන වැඩි කරන්න. ඔබ නැවත අරාවක් ලබා දිය යුතුයි [ඔබේ ආහාර වේලෙන් පසු ආහාරයට ගත් කැරට් ගණන, ඔබේ ආහාර වේලෙන් පසු ඉතිරි වූ කැරට් ගණන] ඉතිරි කැරට් ප් රමාණවත් නොවන්නේ නම්, ඔබ ඉතිරි කැරට් සියල්ලම කනවා, නමුත් ඔබට තවමත් බඩගිනි දැනෙනවා. උදාහරණය: * කන්න (5, 6, 10) -> [11, 4] * කන්න (4, 8, 9) -> [12, 1] * කන්න (1, 10, 10) -> [11, 0] * කන්න (2, 11, 5) -> [7, 0] විචල් යයන්: @ අංකය: ඔබ අනුභව කළ කැරට් ගණන. @ අවශ් යතාවය: ඔබට අනුභව කිරීමට අවශ් ය කැරට් ගණන. @ ඉතිරි කිරීම: ඉතිරි
    """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

"
"
def do_algebra(operator, operand):
    """"""
    මූලික ලැයිස්තුවේ ප් රථම ලැයිස්තුවේ මූලික ඇල්ජිබ් රා ක් රියාකාරකම් ඇති අතර දෙවන ලැයිස්තුවේ පූර්ණ සංඛ් යා ලැයිස්තුවක් ඇත. ඇල්ජිබ් රා ප් රකාශනය ගොඩනඟා ගැනීමට ලබා දී ඇති ලැයිස්තුවේ සංඛ් යා දෙක භාවිතා කර මෙම ප් රකාශනයේ ඇගයීම ආපසු ලබා දෙන්න. මූලික ඇල්ජිබ් රා ක් රියාකාරකම්: එකතු කිරීම (+) අඩු කිරීම ( -) ගුණ කිරීම ( *) බිම් කොටස ( //) ඉහළට ( ** උදාහරණය) ක් රියාකරු['+', '*', '-'] අරාව = [2, 3, 4, 5] ප් රති result ලය = 2 + 3 * 4 - 5 => ප් රති result ලය = 9 සටහන: ක් රියාකාරක ලැයිස්තුවේ දිග ප් රථම ලැයිස්තුවේ දිග

    """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(s):
    """"""ඔබට string එකක් ලබා දී ඇත. s[i] අකුරක් නම්, එහි කේස් එක පහළ සිට ඉහළට හෝ අනෙක් අතට ආපසු හරවන්න, එසේ නොමැතිනම් එය එලෙසම තබා ගන්න. string එකේ අකුරු නොමැති නම්, string එක ආපසු හරවන්න. ශ් රිතය ප් රතිඵලයක් ලෙස ලැබෙන string එක නැවත ලබා දිය යුතුය. උදාහරණ solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c""
    """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
"
"
def string_to_md5(text):
    """"""
    'text' අකුරු පෙළක් ලබා දීලා, එහි md5 හැෂ් සමාන අකුරු පෙළ නැවත ලබා දෙන්න. 'text' හිස් අකුරු පෙළක් නම්, None නැවත ලබා දෙන්න.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def generate_integers(a, b):
    """"""
    ධනාත්මක පූර්ණ සංඛ් යා දෙකක් ලබා දී ඇති විට, a සහ b අතර ඇති සම අංක ඉහළ යන පිළිවෙලට ලබා දෙන්න. උදාහරණයක් ලෙස: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => []
    """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
