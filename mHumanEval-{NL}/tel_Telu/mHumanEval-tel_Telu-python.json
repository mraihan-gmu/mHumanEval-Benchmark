[
    {
        "task_id": "HumanEval/0",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"ఇచ్చిన సంఖ్యల జాబితాలో, ఇచ్చిన పరిమితి కంటే రెండు సంఖ్యలు ఒకదానికొకటి దగ్గరగా ఉన్నాయా అని తనిఖీ చేయండి. ఉదాహరణః >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) తప్పుడు >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) నిజం \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"ఈ ఫంక్షన్కు ఇన్పుట్ అనేది గూడులో ఉన్న కుండలీకరణాల యొక్క బహుళ సమూహాలను కలిగి ఉన్న స్ట్రింగ్. మీ లక్ష్యం ఆ సమూహాన్ని ప్రత్యేక స్ట్రింగ్లుగా వేరు చేయడం మరియు వాటి జాబితాను తిరిగి ఇవ్వడం. ప్రత్యేక సమూహాలు సమతుల్యంగా ఉంటాయి (ప్రతి ఓపెన్ బ్రాకెట్ సరిగ్గా మూసివేయబడుతుంది) మరియు ఒకదానికొకటి గూడులో లేవు ఇన్పుట్ స్ట్రింగ్లోని ఏదైనా ఖాళీలను విస్మరించండి. ఉదాహరణః >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) '['() ', '(()) ', '((()) ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"సానుకూల ఫ్లోటింగ్ పాయింట్ సంఖ్య ఇచ్చినట్లయితే, దానిని పూర్ణాంక భాగంగా (ఇచ్చిన సంఖ్య కంటే పెద్ద పూర్ణాంకము చిన్నది) మరియు దశాంశాలుగా (ఎడమవైపు భాగం ఎల్లప్పుడూ 1 కంటే చిన్నది) విభజించవచ్చు. సంఖ్య యొక్క దశాంశ భాగాన్ని తిరిగి ఇవ్వండి. ఉదాహరణః >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"మీకు సున్నా బ్యాలెన్స్ తో ప్రారంభమయ్యే బ్యాంక్ ఖాతాలో డిపాజిట్ మరియు ఉపసంహరణ కార్యకలాపాల జాబితా ఇవ్వబడుతుంది. ఏ సమయంలోనైనా ఖాతా బ్యాలెన్స్ సున్నా కంటే తక్కువగా ఉంటే గుర్తించడం మీ పని, మరియు ఆ సమయంలో ఫంక్షన్ ట్రూ తిరిగి రావాలి. లేకపోతే అది ఫాల్స్ తిరిగి రావాలి. ఉదాహరణః >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"ఇన్పుట్ సంఖ్యల జాబితా కోసం, ఈ డేటాసెట్ యొక్క సగటు చుట్టూ సగటు సంపూర్ణ విచలనాన్ని లెక్కించండి. సగటు సంపూర్ణ విచలనం ప్రతి మూలకం మరియు కేంద్ర బిందువు మధ్య సగటు సంపూర్ణ వ్యత్యాసం (ఈ సందర్భంలో సగటు): MAD = సగటు  x - x_మధ్య  ఉదాహరణ: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"ఇన్పుట్ జాబితా యొక్క ప్రతి రెండు వరుస అంశాల మధ్య ఒక సంఖ్య 'డిలిమీటర్'ను చొప్పించండి `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"ఈ ఫంక్షన్కు ఇన్పుట్ అనేది స్థలాల ద్వారా వేరు చేయబడిన గూడు కుండలీకరణాల కోసం బహుళ సమూహాలను సూచించే స్ట్రింగ్. ప్రతి సమూహానికి, కుండలీకరణాల యొక్క లోతైన గూడు స్థాయిని అవుట్పుట్ చేయండి. ఉదాహరణకు (() (()) గరిష్టంగా రెండు స్థాయిల గూడును కలిగి ఉంటుంది, అయితే ((())) మూడు. >>> parse_nested_parens('((()) ((())) () (((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"ఇచ్చిన సబ్ స్ట్రింగ్ను కలిగి ఉన్న స్ట్రింగ్ల యొక్క ఇన్పుట్ జాబితాను మాత్రమే ఫిల్టర్ చేయండి >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"పూర్ణాంకాల జాబితా కోసం, ఒక జాబితాలోని అన్ని పూర్ణాంకాల యొక్క మొత్తం మరియు ఉత్పత్తితో కూడిన టపుల్ను తిరిగి ఇవ్వండి. ఖాళీ మొత్తం 0 కి సమానంగా ఉండాలి మరియు ఖాళీ ఉత్పత్తి 1 కి సమానంగా ఉండాలి. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) \"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"ఇచ్చిన పూర్ణాంకాల జాబితా నుండి, క్రమంలో ఇచ్చిన క్షణం వరకు కనుగొనబడిన రోలింగ్ గరిష్ట మూలకం జాబితాను రూపొందించండి. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"సరఫరా చేయబడిన స్ట్రింగ్తో ప్రారంభమయ్యే అతి తక్కువ పాలిండ్రోమ్ను కనుగొనండి. అల్గోరిథం ఆలోచన సులభంః - సరఫరా చేయబడిన స్ట్రింగ్ యొక్క పొడవైన పోస్ట్ఫిక్స్ను కనుగొనండి, ఇది పాలిండ్రోమ్. - పాలిండ్రోమిక్ ప్రత్యయం ముందు వచ్చే స్ట్రింగ్ ప్రీఫిక్స్ యొక్క స్ట్రింగ్ రివర్స్ యొక్క స్ట్రింగ్ చివరకు జోడించండి. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"ఇచ్చిన స్ట్రింగ్ ఒక పాలిండ్రోమ్ అయితే పరీక్షించండి \"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"ఇన్పుట్ అనేది 1 లు మరియు 0 లు మాత్రమే కలిగి ఉన్న రెండు స్ట్రింగ్స్ a మరియు b. ఈ ఇన్పుట్ లపై బైనరీ XOR ను నిర్వహించండి మరియు ఫలితాన్ని స్ట్రింగ్గా కూడా తిరిగి ఇవ్వండి. >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"స్ట్రింగ్స్ జాబితా నుండి, పొడవైనదాన్ని తిరిగి ఇవ్వండి. ఒకే పొడవు యొక్క బహుళ స్ట్రింగ్స్ విషయంలో మొదటిదాన్ని తిరిగి ఇవ్వండి. ఇన్పుట్ జాబితా ఖాళీగా ఉంటే, తిరిగి ఇవ్వవద్దు. >>> పొడవైనది (([]) >>> పొడవైనది ((['a', 'b', 'c']) 'a' >>> పొడవైనది ((['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"రెండు పూర్ణాంకాల a మరియు b >>> greatest_common_divisor ((3, 5) 1 >>> greatest_common_divisor ((25, 15) 5 యొక్క అతిపెద్ద సాధారణ విభజనను తిరిగి ఇవ్వండి.\"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"ఇన్పుట్ స్ట్రింగ్ యొక్క అతి తక్కువ నుండి పొడవైన అన్ని పూర్వపదాల జాబితాను తిరిగి ఇవ్వండి >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"0 నుండి n వరకు ఉన్న సంఖ్యలను కలిగి ఉన్న స్ట్రింగ్ను తిరిగి ఇవ్వండి. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"ఒక స్ట్రింగ్ ఇచ్చినట్లయితే, ఎన్ని విభిన్న అక్షరాలు (కేస్తో సంబంధం లేకుండా) ఉన్నాయో తెలుసుకోండి >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"ఈ ఫంక్షన్కు ఇన్పుట్ అనేది ఒక ప్రత్యేక ASCII ఫార్మాట్లో సంగీత గమనికలను సూచించే స్ట్రింగ్. మీ పని అనేక బీట్లకు అనుగుణంగా ఉన్న పూర్ణాంకాల స్ట్రింగ్ జాబితాను అన్వయించడంః 'o' నోట్, చివరి నాలుగు బీట్స్ 'o' బ్యాక్ - సగం నోట్, చివరి రెండు బీట్స్ 'o' - క్వార్టర్ నోట్, చివరి ఒక బీట్ >>> parse_music '. 'o' o . . . on",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"అసలు స్ట్రింగ్లో ఇచ్చిన సబ్ స్ట్రింగ్ ఎన్నిసార్లు కనుగొనవచ్చు. అతివ్యాప్తి కేసులను లెక్కించండి. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"ఇన్పుట్ అనేది 'సున్నా' నుండి 'తొమ్మిది' వరకు సంఖ్యల యొక్క స్థలం-పరిమిత స్ట్రింగ్. చెల్లుబాటు అయ్యే ఎంపికలు 'సున్నా', 'ఒకటి', 'రెండు', 'మూడు', 'నాలుగు', 'ఐదు', 'ఆరు', 'ఏడు', 'ఎనిమిది' మరియు 'తొమ్మిది'. చిన్న నుండి పెద్ద వరకు క్రమబద్ధీకరించిన సంఖ్యలతో స్ట్రింగ్ను తిరిగి ఇవ్వండి >>> sort_numbers (('మూడు ఒకటి ఐదు') 'ఒకటి మూడు ఐదు' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"అందించిన సంఖ్యల జాబితా నుండి (పొడవు కనీసం రెండు) ఒకదానికొకటి దగ్గరగా ఉన్న రెండు సంఖ్యలను ఎంచుకుని, వాటిని క్రమంలో తిరిగి ఇవ్వండి (చిన్న సంఖ్య, పెద్ద సంఖ్య). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"సంఖ్యల జాబితాను (కనీసం రెండు అంశాలతో) ఇచ్చినట్లయితే, ఆ జాబితాకు సరళ పరివర్తనను వర్తింపజేయండి, తద్వారా అతి చిన్న సంఖ్య 0 అవుతుంది మరియు అతిపెద్దది 1 అవుతుంది >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"ఫిల్టర్ ఇచ్చిన జాబితా ఏ పైథాన్ విలువలు పూర్ణాంకాల కోసం మాత్రమే >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"ఇచ్చిన స్ట్రింగ్ యొక్క తిరిగి పొడవు >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"ఇచ్చిన సంఖ్య n కోసం, n కంటే చిన్న, n ను సమానంగా విభజించే అతిపెద్ద సంఖ్యను కనుగొనండి >>> అతిపెద్ద_విభాజకుడు ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"ఇచ్చిన పూర్ణాంకం యొక్క ప్రధాన కారకాల జాబితాను చిన్న నుండి పెద్ద వరకు క్రమంలో తిరిగి ఇవ్వండి. కారకాలలో ప్రతి ఒక్కటి ఎన్నిసార్లు కారకాలలో కనిపిస్తుందో దానికి అనుగుణంగా ఉండాలి. ఇన్పుట్ సంఖ్య అన్ని కారకాల ఉత్పత్తికి సమానంగా ఉండాలి >>> కారకాలీకరణ ((8) [2, 2, 2] >>> కారకాలీకరణ ((25) [5, 5] >>> కారకాలీకరణ ((70) [2, 5, 7] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"పూర్ణాంకాల జాబితా నుండి, ఒకటి కంటే ఎక్కువసార్లు సంభవించే అన్ని అంశాలను తొలగించండి. ఇన్పుట్లో ఉన్నట్లుగా ఎలిమెంట్ల క్రమాన్ని ఉంచండి. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"ఇచ్చిన స్ట్రింగ్ కోసం, చిన్న అక్షరాలను పెద్ద అక్షరాలకు, పెద్ద అక్షరాలను చిన్న అక్షరాలకు తిప్పండి. >>> flip_case ((('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"ఒకే స్ట్రింగ్ లోకి స్ట్రింగ్స్ యొక్క జాబితాను కలుపు >>> కలుపు (([]) '' >>> కలుపు ((['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"ఇచ్చిన పూర్వపదంతో ప్రారంభమయ్యే వాటి కోసం మాత్రమే స్ట్రింగ్ల ఇన్పుట్ జాబితాను ఫిల్టర్ చేయండి. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"జాబితాలోని సానుకూల సంఖ్యలను మాత్రమే తిరిగి ఇవ్వండి. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"ఇచ్చిన సంఖ్య ప్రైమ్ అయితే true, లేకపోతే false తిరిగి ఇవ్వబడుతుంది. >>> is_prime (అసలు) 6 False >>> is_prime (అసలు) 101) True >>> is_prime (అసలు) 11 True >>> is_prime (అసలు) 13441) True >>> is_prime (అసలు) 61) True >>> is_prime (అసలు) 4) False >>> is_prime (అసలు) 1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"x లు బహుపదాల గుణకాలు. find_zero find x such that poly(x) = 0. find_zero బహుపదాల సంఖ్య 0 అయితే కూడా 0 పాయింట్ మాత్రమే తిరిగి వస్తుంది. అంతేకాకుండా, find_zero అనేది గుణకాల సంఖ్య మరియు అతిపెద్ద నాన్-జీరో గుణకం ఉన్న x ల జాబితాను మాత్రమే తీసుకుంటుంది, ఎందుకంటే ఇది ఒక పరిష్కారాన్ని హామీ ఇస్తుంది. >>> round ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs అనే కోఎఫీషియంట్ తో ఉన్న బహుపదమును xs అనే పాయింట్ వద్ద అంచనా వేస్తుంది. xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"ఈ ఫంక్షన్ ఒక జాబితాను తీసుకుంటుంది l మరియు ఒక జాబితాను తిరిగి ఇస్తుంది l' మూడు ద్వారా విభజించబడని సూచికలలో l తో సమానంగా ఉంటుంది, అయితే మూడు ద్వారా విభజించబడే సూచికలలో దాని విలువలు l యొక్క సంబంధిత సూచికల విలువలకు సమానంగా ఉంటాయి, కానీ క్రమబద్ధీకరించబడతాయి. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"ఒక జాబితాలో క్రమబద్ధీకరించిన ఏకైక అంశాలను తిరిగి ఇవ్వండి >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"జాబితాలోని గరిష్ట మూలకాన్ని తిరిగి ఇవ్వండి. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"11 లేదా 13 ద్వారా విభజించదగిన n కంటే తక్కువ పూర్ణాంకాలలో 7 సంఖ్య ఎన్నిసార్లు కనిపిస్తుందో తిరిగి ఇవ్వండి. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"ఈ ఫంక్షన్ ఒక జాబితాను తీసుకుంటుంది l మరియు ఒక జాబితాను తిరిగి ఇస్తుంది l' అసంఖ్యాక సూచికలలో l తో సమానంగా ఉంటుంది, అయితే దాని విలువలు కూడా సూచికలలో l యొక్క జత సూచికల విలువలకు సమానంగా ఉంటాయి, కానీ క్రమబద్ధీకరించబడతాయి. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"ఎన్కోడ్_సైక్లిక్ ఫంక్షన్తో ఎన్కోడ్ చేసిన స్ట్రింగ్ను ఇన్పుట్గా తీసుకుంటుంది. డీకోడ్ చేసిన స్ట్రింగ్ను తిరిగి ఇస్తుంది. \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"మూడు అక్షరాల సైక్లింగ్ సమూహాల ద్వారా ఎన్కోడ్ చేయబడిన స్ట్రింగ్ను తిరిగి ఇస్తుంది.\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib ఒక ఫిబోనాచి సంఖ్య అయిన n-వ సంఖ్యను తిరిగి ఇస్తుంది మరియు ఇది కూడా ప్రైమ్. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero పూర్ణాంకాల జాబితాను ఇన్పుట్గా తీసుకుంటుంది. జాబితాలో మూడు వేర్వేరు అంశాలు ఉంటే అది నిజం అవుతుంది, లేకపోతే తప్పు. >>> triples_sum_to_zero([1, 3, 5, 0]) తప్పు >>> triples_sum_to_zero[(1, 3, -2, 1]) నిజం >>> triples_sum_to_zero([1, 2, 3, 7]) తప్పు >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) నిజం >>> triples_sum_to_zero[1]) తప్పు \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"ఒక రహదారిని ఊహించుకోండి. ఇది ఒక సంపూర్ణ నిటారుగా ఉన్న అనంతమైన పొడవైన రేఖ. n కార్లు ఎడమ నుండి కుడికి నడుస్తున్నాయి; అదే సమయంలో, వేరే సెట్ n కార్లు కుడి నుండి ఎడమకు నడుస్తున్నాయి. రెండు సెట్ల కార్లు ఒకదానికొకటి చాలా దూరం నుండి ప్రారంభమవుతాయి. అన్ని కార్లు ఒకే వేగంతో కదులుతాయి. ఎడమ నుండి కుడికి కదులుతున్న కారు కుడి నుండి ఎడమకు కదులుతున్న కారును తాకినప్పుడు రెండు కార్లు ఢీకొంటాయని చెబుతారు. అయితే, కార్లు అనంతంగా దృఢమైనవి మరియు బలమైనవి; ఫలితంగా, అవి ఢీకొనకపోయినట్లుగా వారి పథంలో కదులుతూ ఉంటాయి. ఈ ఫంక్షన్ అటువంటి ఢీకొనల సంఖ్యను అవుట్పుట్ చేస్తుంది.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"1. తో పెంచిన అంశాలతో తిరిగి జాబితా. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] \"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero పూర్ణాంకాల జాబితాను ఇన్పుట్గా తీసుకుంటుంది. జాబితాలో సున్నాకి సమానంగా రెండు విభిన్న అంశాలు ఉంటే ఇది True ని తిరిగి ఇస్తుంది, లేకపోతే False. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"ఇన్పుట్ సంఖ్య x యొక్క సంఖ్యా బేస్ ను బేస్ గా మార్చండి. మార్పిడి తరువాత స్ట్రింగ్ ప్రాతినిధ్యం తిరిగి ఇవ్వండి. బేస్ సంఖ్యలు 10 కన్నా తక్కువ. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"ఒక త్రిభుజం కోసం ఒక వైపు మరియు అధిక తిరిగి ప్రాంతం యొక్క పొడవు ఇచ్చిన. >>> triangle_area(5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 సంఖ్యల క్రమం అనేది ఫిబోనాచి క్రమం మాదిరిగానే ఉంటుంది, ఇది ఈ క్రింది విధంగా నిర్వచించబడిందిః fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4 సంఖ్యల క్రమం యొక్క n-వ మూలకాన్ని సమర్థవంతంగా లెక్కించడానికి దయచేసి ఒక ఫంక్షన్ను వ్రాయండి. పునరావృత ఉపయోగించవద్దు. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"జాబితాలోని మూలకాల మధ్యస్థం తిరిగి ఇవ్వండి l. >>> మధ్యస్థం (([3, 1, 2, 4, 5]) 3 >>> మధ్యస్థం (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"ఇచ్చిన స్ట్రింగ్ ఒక పాలిండ్రోమ్ >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False  అని తనిఖీ చేస్తుంది\"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"తిరిగి 2^n మాడ్యూలో p (సంఖ్యల గురించి తెలుసుకోండి). >>> మాడ్యూల్ 3 , 5) 3 >>> మాడ్యూల్ 1101, 101) 2 >>> మాడ్యూల్ 0, 101) 1 >>> మాడ్యూల్ 3, 11) 8 >>> మాడ్యూల్ 100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"ఎన్కోడ్_షిఫ్ట్ ఫంక్షన్తో ఎన్కోడ్ చేయబడిన ఇన్పుట్ స్ట్రింగ్గా తీసుకుంటుంది. డీకోడ్ చేసిన స్ట్రింగ్ను తిరిగి ఇస్తుంది. \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"అక్షరమాలలోని ప్రతి అక్షరాన్ని 5 ద్వారా మార్చడం ద్వారా ఎన్కోడ్ చేయబడిన స్ట్రింగ్ను తిరిగి ఇస్తుంది.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels అనేది స్ట్రింగ్ తీసుకుని, అచ్చులు లేకుండా స్ట్రింగ్ను తిరిగి ఇచ్చే ఫంక్షన్. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"జాబితాలోని అన్ని సంఖ్యలు threshold t కంటే తక్కువగా ఉంటే True ను తిరిగి ఇవ్వండి. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"x మరియు y అనే రెండు సంఖ్యలను కలపండి >>> జతచేయండి ((2, 3) 5 >>> జతచేయండి ((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"రెండు పదాలు ఒకే అక్షరాలను కలిగి ఉన్నాయో లేదో తనిఖీ చేయండి. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars (('abcd', 'dddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddddabc') False >>> same_chars ((('abcd', 'dddddddabc') False >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') False \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"n-వ ఫిబోనాచి సంఖ్యను తిరిగి ఇవ్వండి. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets అనేది \"<\" మరియు \">\". return ప్రతి ప్రారంభ బ్రాకెట్కు సంబంధిత మూసివేసే బ్రాకెట్ ఉంటే True. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"రిటర్న్ ట్రూ అనేది జాబితా అంశాలు ఏకరీతిగా పెరుగుతున్నాయి లేదా తగ్గుతున్నాయి. >>> ఏకరీతిగా (([1, 2, 4, 20]) ట్రూ >>> ఏకరీతిగా (([1, 20, 4, 10]) ఫాల్స్ >>> ఏకరీతిగా (([4, 1, 0, -10]) ట్రూ \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"రెండు జాబితాల కోసం క్రమబద్ధీకరించిన ఏకైక సాధారణ అంశాలను తిరిగి ఇవ్వండి. >>> సాధారణ (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> సాధారణ (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n యొక్క అతిపెద్ద ప్రైమ్ ఫాక్టర్ను తిరిగి ఇవ్వండి. n > 1 అని అనుకుందాం మరియు ప్రైమ్ కాదు. >>> అతిపెద్ద_ప్రైమ్_ఫాక్టర్ ((13195) 29 >>> అతిపెద్ద_ప్రైమ్_ఫాక్టర్ ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n అనేది 1 నుండి n వరకు సంఖ్యలను సంకలనం చేసే ఫంక్షన్. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets అనేది \"(\" మరియు \"\") యొక్క స్ట్రింగ్. ప్రతి ప్రారంభ బ్రాకెట్కు సంబంధిత మూసివేత బ్రాకెట్ ఉంటే True తిరిగి ఇవ్వండి. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\"() False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs ఒక బహుపదానికి గుణకాలు. xs[0] + xs[1] * x + xs[2] * x^2 + .... ఈ బహుపదానికి అదే రూపంలో ఉత్పన్నం తిరిగి ఇవ్వండి. >>> ఉత్పన్నం (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> ఉత్పన్నం ([1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"ఫిబ్ఫిబ్ సంఖ్యల శ్రేణి ఫిబొనాచి శ్రేణికి సమానమైన శ్రేణి, ఇది ఈ క్రింది విధంగా నిర్వచించబడిందిః ఫిబ్ఫిబ్ ((0) == 0 ఫిబ్ఫిబ్ ((1) == 0 ఫిబ్ఫిబ్ ((2) == 1 ఫిబ్ఫిబ్ ((n) == ఫిబ్ఫిబ్ ((n-1) + ఫిబ్ఫిబ్ ((n-2) + ఫిబ్ఫిబ్ ((n-3). దయచేసి ఫిబ్ఫిబ్ సంఖ్యల శ్రేణి యొక్క n-వ మూలకాన్ని సమర్థవంతంగా లెక్కించడానికి ఒక ఫంక్షన్ను వ్రాయండి. >>> ఫిబ్ఫిబ్ ((1) 0 >>> ఫిబ్ఫిబ్ ((5) 4 >>> ఫిబ్ఫిబ్ ((8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"ఒక పదమును సూచించే స్ట్రింగ్ ను ఇన్పుట్ గా తీసుకుని, స్ట్రింగ్ లోని అచ్చుల సంఖ్యను తిరిగి ఇచ్చే ఒక ఫంక్షన్ vowels_count ను వ్రాయండి. ఈ సందర్భంలో అచ్చులు 'a', 'e', 'i', 'o', 'u'. ఇక్కడ, 'y' కూడా ఒక అచ్చు, కానీ అది ఇచ్చిన పదానికి చివర ఉన్నప్పుడు మాత్రమే. ఉదాహరణః >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"మరిన్ని పరీక్ష కేసులను జోడించండి.\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"సర్కిల్ x యొక్క అంకెలను తరలించండి, అంకెలను కుడివైపుకు తరలించండి మరియు ఫలితాన్ని స్ట్రింగ్గా తిరిగి ఇవ్వండి. Shift > అంకెల సంఖ్య అయితే, అంకెలను తిరగండి. >>> circular_shift ((12, 1) \"21\" >>> circular_shift ((12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"టాస్క్ స్ట్రింగ్ ను ఇన్పుట్ గా తీసుకుని, ఎగువ అక్షరాల సమ్మేళనాన్ని మాత్రమే ASCII కోడ్లుగా తిరిగి ఇచ్చే ఫంక్షన్ను వ్రాయండి. ఉదాహరణలుః digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"ఈ పనిలో, మీకు ఒక స్ట్రింగ్ ఇవ్వబడుతుంది, ఇది ఆపిల్ మరియు నారింజల సంఖ్యను సూచిస్తుంది, ఇవి పండ్ల బుట్టలో పంపిణీ చేయబడతాయి ఈ బుట్టలో ఆపిల్, నారింజ మరియు మామిడి పండ్లు ఉన్నాయి. మొత్తం నారింజలు మరియు ఆపిల్ మరియు బుట్టలోని మొత్తం పండ్ల సంఖ్యను సూచించే స్ట్రింగ్ మరియు బుట్టలోని మొత్తం పండ్ల సంఖ్యను సూచించే పూర్ణాంకం ఇచ్చినట్లయితే, బుట్టలోని మామిడి పండ్ల సంఖ్యను తిరిగి ఇవ్వండి. ఉదాహరణకిః fruit_distribution\"5(ఆపిల్ మరియు 6 నారింజలు\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 ఆపిల్ మరియు 1 నారింజ\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 ఆపిల్ మరియు 3 నారింజలు\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 ఆపిల్ మరియు 1 నారింజలు\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"ప్రతికూల పూర్ణాంక నోడ్లు లేని చెట్టు యొక్క శాఖను సూచించే శ్రేణిని ఇచ్చినట్లయితే, మీ పని నోడ్లలో ఒకదాన్ని తీయడం మరియు దానిని తిరిగి ఇవ్వడం. తీసిన నోడ్ అతి చిన్న జత విలువ కలిగిన నోడ్ అయి ఉండాలి. ఒకే చిన్న జత విలువ కలిగిన బహుళ నోడ్లు దొరికితే అతి చిన్న సూచిక కలిగిన నోడ్ను తిరిగి ఇవ్వండి. తీసిన నోడ్ జాబితాలో తిరిగి ఇవ్వాలి, [smallest_value, దాని సూచిక ], జత విలువలు లేకపోతే లేదా ఇచ్చిన శ్రేణి ఖాళీగా ఉంటే, తిరిగి ఇవ్వండి []. ఉదాహరణ 1: ఇన్పుట్ః [4,2,3] అవుట్పుట్ః [2, 1] వివరణః 2 అతి చిన్న జత విలువను కలిగి ఉంది, మరియు 2 అతి చిన్న సూచికను కలిగి ఉంది. ఉదాహరణ 2: ఇన్పుట్ః [1,2,3] అవుట్పుట్ః [2, 1] వివరణః 2 అతి చిన్న విలువను కలిగి ఉంది, మరియు 2 అతి చిన్న సూచికను కలిగి ఉంది. ఉదాహరణ 3: ఇన్పుట్ః [] అవుట్పుట్ః [] ఇన్పుట్ః [4,5, 3, 4, 2] అవుట్పుట్ః 1 [0, 0] అవుట్పుట్ః 1 అతి చిన్న నోడ్, కానీ సూచిక విలువ రెండు సున్నా. కాబట్టి మొదటి నోడ్ను ఎంచుకుంటాము, దీని పొడవు <= 10000 * సున్నా, కాని అతి చిన్నది కాదు. ఉదాహరణః 1 * సున్నా, ఇది సున్నా విలువను కలిగి ఉంది, కానీ మొదటి నోడ్ యొక్క విలువ <= 0 * 1 * సున్నా.\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''మీకు సానుకూల పూర్ణాంకాల యొక్క ఖాళీ కాని జాబితా ఇవ్వబడుతుంది. సున్నా కంటే పెద్దది మరియు పూర్ణాంకం యొక్క విలువ కంటే ఎక్కువ లేదా సమానమైన పౌన frequency పున్యం కలిగిన అతిపెద్ద పూర్ణాంకమును తిరిగి ఇవ్వండి. పూర్ణాంకం యొక్క పౌన frequency పున్యం జాబితాలో కనిపించే సార్లు సంఖ్య. అటువంటి విలువ లేకపోతే, తిరిగి ఇవ్వండి -1. ఉదాహరణలుః search (([4, 1, 2, 2, 3, 1]) == 2 search ([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 search ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''పూర్ణాంకాల జాబితా ఇచ్చినట్లయితే, జాబితాను వింత క్రమంలో తిరిగి ఇవ్వండి. వింత క్రమబద్ధీకరణ, మీరు కనీస విలువతో ప్రారంభించినప్పుడు, మిగిలిన పూర్ణాంకాల గరిష్టంగా, అప్పుడు కనిష్టంగా మొదలవుతుంది. ఉదాహరణలుః strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''ఒక త్రిభుజం యొక్క మూడు వైపుల పొడవులు ఇచ్చినట్లయితే. మూడు వైపులా చెల్లుబాటు అయ్యే త్రిభుజం ఏర్పడితే 2 దశాంశ బిందువులకు గుండ్రంగా ఉన్న త్రిభుజం యొక్క ప్రాంతాన్ని తిరిగి ఇవ్వండి. లేకపోతే -1 తిరిగి ఇవ్వండి ఏదైనా రెండు వైపుల మొత్తం మూడవ వైపు కంటే ఎక్కువగా ఉన్నప్పుడు మూడు వైపులా చెల్లుబాటు అయ్యే త్రిభుజం ఏర్పడుతుంది. ఉదాహరణః త్రిభుజం_ప్రాంతం ((3, 4, 5) == 6.00 త్రిభుజం_ప్రాంతం ((1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''ఒక ఫంక్షన్ వ్రాయండి, అది వస్తువు q ఎగురుతుంది, మరియు False లేకపోతే. వస్తువు q ఎగురుతుంది, అది సమతుల్యమైతే (ఇది ఒక పాలిండ్రోమిక్ జాబితా) మరియు దాని మూలకాల మొత్తం గరిష్ట సాధ్యమైన బరువు w కన్నా తక్కువ లేదా సమానంగా ఉంటుంది. ఉదాహరణః will_it_fly (([1, 2], 5) â -> False # 1+2 గరిష్ట సాధ్యమైన బరువు కంటే తక్కువ, కానీ అది అసమతుల్యంగా ఉంటుంది. will_it_fly (([3, 2, 3], 1) â -> False # ఇది సమతుల్యమైనది, కానీ 3+2+3 గరిష్ట సాధ్యమైన బరువు కంటే ఎక్కువ. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 గరిష్ట సాధ్యమైన బరువు కంటే తక్కువ, మరియు ఇది సమతుల్యమైనది. will_it_fly ((([3], â 5) -> True # 3 గరిష్ట సాధ్యమైన బరువు కంటే తక్కువ, మరియు ఇది సమతుల్యమైనది.'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"పూర్ణాంకాల శ్రేణి arr ఇచ్చినట్లయితే, శ్రేణిని పాలిండ్రోమిక్ చేయడానికి మార్చాల్సిన కనీస సంఖ్యలో మూలకాలను కనుగొనండి. పాలిండ్రోమిక్ శ్రేణి అనేది వెనుకకు మరియు ముందుకు ఒకే విధంగా చదవబడే శ్రేణి. ఒక మార్పులో, మీరు ఒక మూలకాన్ని ఏదైనా ఇతర మూలకానికి మార్చవచ్చు. ఉదాహరణకుః smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''రెండు స్ట్రింగ్స్ జాబితాలను అంగీకరించి, జాబితాలోని అన్ని స్ట్రింగ్స్ లోని అక్షరాల సంఖ్య ఇతర జాబితా కంటే తక్కువగా ఉన్న జాబితాను తిరిగి ఇచ్చే ఫంక్షన్ను వ్రాయండి. రెండు జాబితాలలో ఒకే సంఖ్యలో అక్షరాలు ఉంటే, మొదటి జాబితాను తిరిగి ఇవ్వండి. ఉదాహరణలు total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"ఇచ్చిన సంఖ్య 3 ప్రైమ్ సంఖ్యల గుణకారం అయితే నిజమైనదిగా మరియు లేకపోతే తప్పుగా ఉండే ఫంక్షన్ను వ్రాయండి. (a) 100 కన్నా తక్కువ అని తెలుసుకోవడం. ఉదాహరణః is_multiply_prime(30) == True 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"మీ పని ఏమిటంటే, ఒక సంఖ్య x అనేది n యొక్క సాధారణ శక్తి అయితే, ఇతర సందర్భాల్లో తప్పు అయితే, అది true అని తిరిగి ఇచ్చే ఫంక్షన్ను రాయడం. x అనేది n యొక్క సాధారణ శక్తి అయితే n**int=x ఉదాహరణకు: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''పూర్ణాంకం a ను తీసుకుని, ఈ సంఖ్య పూర్ణాంక సంఖ్య యొక్క ఘనమైతే True ను తిరిగి ఇచ్చే ఫంక్షన్ను వ్రాయండి. గమనికః మీరు ఇన్పుట్ ఎల్లప్పుడూ చెల్లుబాటు అవుతుందని అనుకోవచ్చు. ఉదాహరణలుః iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"మీరు ఒక ఫంక్షన్ వ్రాయడానికి ఒక స్ట్రింగ్ గా హెక్సాడెసిమల్ సంఖ్యను అందుకుంటుంది మరియు హెక్సాడెసిమల్ అంకెల సంఖ్యను లెక్కిస్తుంది (ప్రైమ్ సంఖ్య, లేదా ప్రైమ్, రెండు చిన్న సహజ సంఖ్యల ఉత్పత్తి కాని 1 కంటే పెద్ద సహజ సంఖ్య). హెక్సాడెసిమల్ అంకెలు 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. ప్రైమ్ సంఖ్యలు 2, 3, 5, 7, 11, 13, 17,... కాబట్టి మీరు ఈ క్రింది అంకెల సంఖ్యను నిర్ణయించాలిః 2, 3, 5, 7, B (= దశాంశ 11), D (= దశాంశ 13). గమనికః మీరు ఇన్పుట్ ఎల్లప్పుడూ సరైనది లేదా ఖాళీగా ఉంటుందని భావించవచ్చు స్ట్రింగ్, మరియు చిహ్నాలు A, B, C, D, E, F ఎల్లప్పుడూ పెద్ద అక్షరాలు. ఉదాహరణలుః \"num\" = AB కోసం అవుట్పుట్ num = 1. \"num\" = 1077E కోసం అవుట్పుట్ num = 1077E కోసం అవుట్పుట్ num = 2. \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\" = \"num\"\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"మీకు దశాంశ రూపంలో ఒక సంఖ్య ఇవ్వబడుతుంది మరియు మీ పని దానిని బైనరీ ఫార్మాట్కు మార్చడం. ఫంక్షన్ ఒక స్ట్రింగ్ను తిరిగి ఇవ్వాలి, ప్రతి అక్షరం బైనరీ సంఖ్యను సూచిస్తుంది. స్ట్రింగ్లోని ప్రతి అక్షరం '0' లేదా '1' అవుతుంది. స్ట్రింగ్ ప్రారంభంలో మరియు చివరిలో అదనపు 'db' అక్షరాలు ఉంటాయి. ఫార్మాట్కు సహాయపడటానికి అదనపు అక్షరాలు ఉన్నాయి. ఉదాహరణలుః decimal_to_binary ((15) # తిరిగి \"db1111db\" decimal_to_binary32) # తిరిగి \"db100000db\"\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"మీకు ఒక స్ట్రింగ్ s ఇవ్వబడింది. స్ట్రింగ్ సంతోషంగా ఉందో లేదో తనిఖీ చేయడం మీ పని. ఒక స్ట్రింగ్ దాని పొడవు కనీసం 3 మరియు ప్రతి 3 వరుస అక్షరాలు భిన్నంగా ఉంటే సంతోషంగా ఉంటుంది ఉదాహరణకుః is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"ఇది సెమిస్టర్ యొక్క చివరి వారం మరియు ఉపాధ్యాయుడు విద్యార్థులకు తరగతులు ఇవ్వాలి. ఉపాధ్యాయుడు గ్రేడింగ్ కోసం తన సొంత అల్గోరిథంను తయారు చేస్తూ ఉన్నాడు. ఏకైక సమస్య ఏమిటంటే, ఆమె గ్రేడింగ్ కోసం ఉపయోగించిన కోడ్ను కోల్పోయింది. ఆమె మీకు కొంతమంది విద్యార్థుల కోసం GPA ల జాబితాను ఇచ్చింది మరియు మీరు ఈ క్రింది పట్టికను ఉపయోగించి అక్షర గ్రేడ్ల జాబితాను అవుట్పుట్ చేయగల ఫంక్షన్ను వ్రాయాలిః GPA  లెటర్ గ్రేడ్ 4.0 A + > 3.7 A > 3.3 A- > 3.0 B + > 2.7 B- > 2.3 B- > 2.0 C + > 1.7 C > 1.3 C- > 1.0 D + > 0.7 D > 0.0 D- 0.0 E ఉదాహరణః grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"స్ట్రింగ్ పొడవు ప్రైమ్ సంఖ్య అయితే ట్రూ లేదా ఫాల్స్ అని తిరిగి ఇచ్చే ఫంక్షన్ను వ్రాయండి ఉదాహరణలు prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"ఒక సానుకూల పూర్ణాంకం n ఇచ్చినట్లయితే, 1 తో ప్రారంభమయ్యే లేదా ముగుస్తున్న n-అంకెల సానుకూల పూర్ణాంకాల సంఖ్యను తిరిగి ఇవ్వండి.\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"ఒక సానుకూల పూర్ణాంకం N ఇచ్చినట్లయితే, దాని అంకెల మొత్తం మొత్తాన్ని బైనరీలో తిరిగి ఇవ్వండి. ఉదాహరణ N = 1000 కోసం, అంకెల మొత్తం 1 అవుట్పుట్ \"1\" గా ఉండాలి. N = 150 కోసం, అంకెల మొత్తం 6 అవుట్పుట్ \"110\" గా ఉండాలి. N = 147 కోసం, అంకెల మొత్తం 12 అవుట్పుట్ \"1100\" గా ఉండాలి. వేరియబుల్స్ః @N పూర్ణాంకం పరిమితులుః 0 â‰¤ N â‰¤ 10000. అవుట్పుట్ః బైనరీ సంఖ్యల స్ట్రింగ్ \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"పూర్ణాంకాల జాబితా ఇవ్వబడినట్లయితే, మొదటిది, అసమాన సూచికలలో ఉన్న జత మూలకాలను జోడించండి. ఉదాహరణలుః add (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"స్ట్రింగ్ ను తీసుకుని దాని యొక్క క్రమబద్ధమైన సంస్కరణను తిరిగి ఇచ్చే ఫంక్షన్ను వ్రాయండి. స్ట్రింగ్ యొక్క క్రమబద్ధమైన సంస్కరణ, అన్ని పదాలు (స్పేస్ ద్వారా వేరు చేయబడినవి) కొత్త పదంతో భర్తీ చేయబడే స్ట్రింగ్, ఇక్కడ అన్ని అక్షరాలు ascii విలువ ఆధారంగా పెరుగుతున్న క్రమంలో అమర్చబడి ఉంటాయి. గమనికః మీరు వాక్యంలో పదాల క్రమాన్ని మరియు ఖాళీ ఖాళీలను ఉంచాలి. ఉదాహరణకుః anti_shuffle ((('Hi') తిరిగి 'Hi' anti_shuffle (('hello') తిరిగి 'ehllo' anti_shuffle (('Hello World!!!') తిరిగి 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"మీకు 2 డైమెన్షనల్ డేటా ఇవ్వబడుతుంది, ఇది ఒక గూడు జాబితా వలె ఉంటుంది, ఇది మాతృకతో సమానంగా ఉంటుంది, అయితే, మాతృకలకు భిన్నంగా, ప్రతి వరుసలో వేర్వేరు సంఖ్యలో నిలువు వరుసలు ఉండవచ్చు. lst, మరియు పూర్ణాంకం x ఇచ్చినట్లయితే, జాబితాలో పూర్ణాంకాలు x ను కనుగొనండి మరియు టపుల్స్ జాబితాను తిరిగి ఇవ్వండి, [(x1, y1), (x2, y2) ...] ప్రతి టపుల్ ఒక కోఆర్డినేట్ - (వరుస, నిలువు వరుసలు), 0 తో ప్రారంభమవుతుంది. ప్రారంభంలో నిలువు వరుసల ద్వారా అక్షాంశాలను క్రమబద్ధీకరించండి. అలాగే, నిలువు వరుసల ద్వారా నిలువు వరుసల ద్వారా క్రమబద్ధీకరించండి. ఉదాహరణలుః get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 0), (2, 5), (2, 0) get_(], 1) [] == [[వరుస 1, 1, 2, 3, 2]], == 2, 2]] ]]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"ప్రతికూల సంఖ్యలు లేని పూర్ణాంకాల శ్రేణిని ఇచ్చినట్లయితే, క్రమబద్ధీకరించిన తర్వాత ఇచ్చిన శ్రేణి యొక్క కాపీని తిరిగి ఇవ్వండి, ఇచ్చిన శ్రేణిని పెరుగుతున్న క్రమంలో క్రమబద్ధీకరించండి, మొత్తం ((మొదటి సూచిక విలువ, చివరి సూచిక విలువ) బేసి ఉంటే, లేదా మొత్తం ((మొదటి సూచిక విలువ, చివరి సూచిక విలువ) జత అయితే, లేదా క్రమబద్ధీకరించండి. గమనికః * ఇచ్చిన శ్రేణిని మార్చవద్దు. ఉదాహరణలుః * sort_array[(]) => [] * sort_array[]] => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"ఒక స్ట్రింగ్ ను ఒక వాదనగా తీసుకుని, ఆల్ఫాబెట్ తిరిగే విధంగా ఒక స్ట్రింగ్ ను ఎన్క్రిప్ట్ చేసి తిరిగి ఇచ్చే ఫంక్షన్ ఎన్క్రిప్ట్ ను సృష్టించండి. అక్షరాలు రెండు స్థానాలకు రెండు గుణించి క్రిందికి తరలించే విధంగా ఆల్ఫాబెట్ తిరగాలి. ఉదాహరణకి: ఎన్క్రిప్ట్ (http://en.wikipedia.org/wiki/Encrypt) 'lm' ఎన్క్రిప్ట్ (http://en.wikipedia.org/wiki/Lm' ఎన్క్రిప్ట్ (http://en.wikipedia.org/wiki/Lm' ఎన్క్రిప్ట్ (http://en.wikipedia.org/wiki/Lm' ఎన్క్రిప్ట్ (http://en.wikipedia.org/wiki/Encrypt) 'ewhjklnop' ఎన్క్రిప్ట్ (http://en.wikipedia.org/wiki/Ewhjklnop) 'gf' ఎన్క్రిప్ట్ (http://en.wikipedia.org/wiki/Kj' ఎన్క్రిప్ట్ (http://en.wikipedia.org/Ixp://encrypt) ' kj' ఎన్క్రిప్ట్ (http://encrypt) 'ix' ఎన్క్రిప్ట్ (http://en.w) 'ix' ఎన్క్రిప్ట్' ఎన్క్రిప్ట్' ఎన్క్రిప్ట్ (http://en.\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"మీకు పూర్ణాంకాల జాబితా ఇవ్వబడింది. జాబితాలోని 2వ అతి చిన్న మూలకాన్ని తిరిగి ఇచ్చే ఫంక్షన్ next_smallest () ను వ్రాయండి. అలాంటి మూలకం లేకపోతే None ను తిరిగి ఇవ్వండి. next_smallest () [1, 2, 3, 4, 5]) == 2 next_smallest () [5, 1, 4, 3, 2]) == 2 next_smallest () == None next_smallest () [1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"మీకు పదాల స్ట్రింగ్ ఇవ్వబడుతుంది, మరియు మీ పని విసుగుల సంఖ్యను లెక్కించడం. విసుగు అనేది \"I\" అనే పదంతో ప్రారంభమయ్యే వాక్యం. వాక్యాలు '.', '?' లేదా '! 'తో సరిహద్దులుగా ఉంటాయి. ఉదాహరణకుః >>> is_bored ((\"హలో వరల్డ్\") 0 >>> is_bored ((\"ఆకాశం నీలం. సూర్యుడు ప్రకాశిస్తున్నాడు. నేను ఈ వాతావరణాన్ని ప్రేమిస్తున్నాను\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''3 సంఖ్యలను తీసుకునే ఫంక్షన్ను సృష్టించండి. సంఖ్యలలో ఒకటి మిగిలిన రెండింటి మొత్తానికి సమానంగా ఉంటే నిజమైనదిగా తిరిగి వస్తుంది, మరియు అన్ని సంఖ్యలు పూర్ణాంకాలు. ఏ ఇతర సందర్భాల్లోనైనా తప్పుగా తిరిగి వస్తుంది. ఉదాహరణలు any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) â -> True any_int{3.6, -2.2, 2) â -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"ఒక సందేశాన్ని తీసుకుని, అన్ని అక్షరాల కేసులను మార్చే విధంగా ఎన్కోడ్ చేసే ఫంక్షన్ను వ్రాయండి, సందేశంలోని అన్ని అచ్చులను ఆ అక్షరం ముందు 2 స్థానాల్లో కనిపించే అక్షరంతో భర్తీ చేస్తుంది. ఉదాహరణలుః >>> ఎన్కోడ్ (('పరీక్ష') 'TGST' >>> ఎన్కోడ్ (('ఇది ఒక సందేశం') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"మీకు పూర్ణాంకాల జాబితా ఇవ్వబడింది. మీరు అతిపెద్ద ప్రైమ్ విలువను కనుగొని దాని అంకెల మొత్తాన్ని తిరిగి ఇవ్వాలి. ఉదాహరణలుః lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] అవుట్పుట్ 10 lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] అవుట్పుట్ 25 lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] అవుట్పుట్ 13 lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] అవుట్పుట్ 11 lst = [0,81,12,31,21] అవుట్పుట్ 3 lst = [0,1,8,2,1,7] అవుట్పుట్ 7 \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"ఒక నిఘంటువు ఇచ్చినట్లయితే, అన్ని కీలు చిన్న అక్షరాలలో స్ట్రింగ్స్ అయితే True తిరిగి ఇవ్వాలి లేదా అన్ని కీలు పెద్ద అక్షరాలలో స్ట్రింగ్స్ అయితే, లేకపోతే False తిరిగి ఇవ్వాలి. ఫంక్షన్ తిరిగి ఇవ్వాలి False ఇచ్చిన నిఘంటువు ఖాళీగా ఉంటే. ఉదాహరణలుః check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) తిరిగి ఇవ్వాలి True. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) తిరిగి ఇవ్వాలి False. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) తిరిగి ఇవ్వాలి False. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) తిరిగి ఇవ్వాలి False. check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"12345}) తిరిగి ఇవ్వాలి True.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"ప్రతికూలం కాని పూర్ణాంకాలను తీసుకుని, n కంటే తక్కువ సంఖ్యలో ఉన్న మొదటి n పూర్ణాంకాల శ్రేణిని తిరిగి ఇచ్చే ఫంక్షన్ను అమలు చేయండి. ఉదాహరణకుః count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"రెండు పూర్ణాంకాల యొక్క గుణకారం మరియు వాటి యూనిట్ అంకెల యొక్క ఉత్పత్తిని తిరిగి ఇచ్చే ఫంక్షన్ను పూర్తి చేయండి. ఇన్పుట్ ఎల్లప్పుడూ చెల్లుబాటు అయ్యేదని భావించండి. ఉదాహరణలుః గుణకారం ((148, 412) 16. గుణకారం ((19, 28) 72. గుణకారం ((2020, 1851) 0. గుణకారం ((14,-15) 20. \"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"ఒక స్ట్రింగ్ s ఇచ్చినట్లయితే, పెద్ద అచ్చుల సంఖ్యను కూడా సూచికలలో లెక్కించండి. ఉదాహరణకుః count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 తిరిగి వస్తుంది \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''ఒక సంఖ్యను సూచించే విలువ (స్ట్రింగ్) ను తీసుకుని దానికి దగ్గరగా ఉన్న పూర్ణాంకమును తిరిగి ఇచ్చే ఫంక్షన్ను సృష్టించండి. సంఖ్య రెండు పూర్ణాంకాల నుండి సమాన దూరంలో ఉంటే, దానిని సున్నా నుండి దూరంగా గుండ్రంగా చేయండి. ఉదాహరణలు >>> closest_integer ((\"10\") 10 >>> closest_integer ((\"15.3\") 15 గమనికః సున్నా నుండి దూరంగా గుండ్రంగా ఉండటం అంటే ఇచ్చిన సంఖ్య రెండు పూర్ణాంకాల నుండి సమాన దూరంలో ఉంటే, మీరు తిరిగి ఇవ్వవలసినది సున్నా నుండి చాలా దూరంలో ఉన్నది. ఉదాహరణకి closest_integer \" ((14.5\") 15 మరియు closest_integer \" ((-14.5\") తిరిగి రావాలి -15. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"ఒక సానుకూల పూర్ణాంకం n ఇచ్చినట్లయితే, మీరు n స్థాయిల రాళ్ళతో ఒక కుప్పను తయారు చేయాలి. మొదటి స్థాయిలో n రాళ్ళు ఉన్నాయి. తదుపరి స్థాయిలో రాళ్ల సంఖ్యః - n అసమానంగా ఉంటే తదుపరి బేసి సంఖ్య. - n జత అయితే తదుపరి జత సంఖ్య. ప్రతి స్థాయిలో రాళ్ల సంఖ్యను జాబితాలో తిరిగి ఇవ్వండి, ఇక్కడ ఇండెక్స్ i వద్ద ఉన్న మూలకం స్థాయిలో రాళ్ల సంఖ్యను సూచిస్తుంది (i + 1). ఉదాహరణలుః >>> make_a_pile(3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"మీకు కామాలతో లేదా ఖాళీలతో వేరు చేయబడిన పదాల స్ట్రింగ్ ఇవ్వబడుతుంది. మీ పని స్ట్రింగ్ను పదాలుగా విభజించి, పదాల శ్రేణిని తిరిగి ఇవ్వడం. ఉదాహరణకుః words_string ((\"హలో, నా పేరు జాన్\") == [\"హలో\", \"నా\", \"పేరు\", \"అది\", \"జాన్\"] words_string ((\"ఒకటి, రెండు, మూడు, నాలుగు, ఐదు, ఆరు\") == [\"ఒకటి\", \"రెండు\", \"మూడు\", \"నాలుగు\", \"ఐదు\", \"ఆరు\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"ఈ ఫంక్షన్ రెండు సానుకూల సంఖ్యలను x మరియు y తీసుకుంటుంది మరియు [x, y] పరిధిలో ఉన్న అతిపెద్ద జత పూర్ణాంక సంఖ్యను తిరిగి ఇస్తుంది. అటువంటి సంఖ్య లేకపోతే, ఫంక్షన్ -1 ను తిరిగి ఇవ్వాలి. ఉదాహరణకుః choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"మీకు n మరియు m అనే రెండు సానుకూల పూర్ణాంకాలు ఇవ్వబడ్డాయి, మరియు మీ పని n నుండి m వరకు (n మరియు m తో సహా) పూర్ణాంకాల సగటును లెక్కించడం. సమాధానం సమీప పూర్ణాంకం వరకు గుండ్రంగా మరియు దానిని బైనరీగా మార్చండి. n m కన్నా పెద్దది అయితే, తిరిగి -1. ఉదాహరణః rounded_avg ((1, 5) => \"0b11\" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => \"0b1111\" rounded_avg ((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"సానుకూల పూర్ణాంకాల జాబితా ఇచ్చిన x. ఏ ఒక్క అంకెలు లేని అన్ని అంశాల సార్ట్ జాబితాను తిరిగి ఇవ్వండి. గమనికః తిరిగి వచ్చిన జాబితాను క్రమంలో క్రమబద్ధీకరించాలి. ఉదాహరణకుః >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"పూర్ణాంకాల శ్రేణిని ఇచ్చినట్లయితే, 1 మరియు 9 మధ్య ఉన్న పూర్ణాంకాలను క్రమబద్ధీకరించండి, ఫలిత శ్రేణిని తిరగండి, ఆపై ప్రతి అంకెను దాని సంబంధిత పేరుతో \"ఒకటి\", \"రెండు\", \"మూడు\", \"నాలుగు\", \"ఐదు\", \"ఆరు\", \"ఏడు\", \"ఎనిమిది\", \"తొమ్మిది\" నుండి భర్తీ చేయండి. ఉదాహరణకుః arr = [2, 1, 1, 4, 5, 8, 2, 3] -> క్రమబద్ధీకరించండి arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> రివర్స్ arr -> [8, 5, 4, 3, 2, 2, 1, 1] తిరిగి రండి [\"ఎనిమిది\", \"నాలుగు\", \"మూడు\", \"రెండు\", \"రెండు\", \"ఒకటి\", \"ఒకటి\"] శ్రేణి ఖాళీగా ఉంటే, ఒక శ్రేణిని తిరిగి ఇవ్వండిః arr = [] తిరిగి రండి [] శ్రేణికి ఏదైనా వింత సంఖ్య ఉంటే దానిని విస్మరించండిః arr = [1, -1 , 55] -> arr -> [1, 55] -> రివర్స్ arr = [51] - తిరిగి రండి ['1,' 1] \"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"n ను పరామితిగా తీసుకుని, n పరిమాణం యొక్క జాబితాను తిరిగి ఇచ్చే f ఫంక్షన్ను అమలు చేయండి, ఇటువంటిది ఇండెక్స్ i వద్ద మూలకం యొక్క విలువ i యొక్క కారకం i i జత లేదా 1 నుండి i వరకు సంఖ్యల మొత్తం. i 1 నుండి మొదలవుతుంది. i యొక్క కారకం 1 నుండి i వరకు సంఖ్యల గుణకారం (1 * 2 * . . . * i). ఉదాహరణః f ((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"ఒక సానుకూల పూర్ణాంకం n ఇచ్చినట్లయితే, పరిధిలో వస్తున్న జత మరియు బేసి పూర్ణాంకాల పాలిండ్రోమ్ల సంఖ్యను కలిగి ఉన్న టపుల్ను తిరిగి ఇవ్వండి. ఉదాహరణ 1: ఇన్పుట్ః 3 అవుట్పుట్ః (1, 2) వివరణః పూర్ణాంకాల పాలిండ్రోమ్లు 1, 2, 3. వాటిలో ఒకటి జత, వాటిలో రెండు బేసి. ఉదాహరణ 2: ఇన్పుట్ః 12 అవుట్పుట్ః (4, 6) వివరణః పూర్ణాంకాల పాలిండ్రోమ్లు 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. వాటిలో నాలుగు జత, వాటిలో 6 బేసి. గమనికః 1. 1 <= n <= 10^3 2. టపుల్ వరుసగా జత మరియు బేసి పూర్ణాంకాల పాలిండ్రోమ్ల సంఖ్యను తిరిగి ఇచ్చింది. \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"ఒక ఫంక్షన్ count_nums ను వ్రాయండి, ఇది పూర్ణాంకాల శ్రేణిని తీసుకుంటుంది మరియు అంకెల మొత్తాన్ని కలిగి ఉన్న మూలకాల సంఖ్యను తిరిగి ఇస్తుంది > 0. ఒక సంఖ్య ప్రతికూలంగా ఉంటే, దాని మొదటి సంతకం చేసిన అంకె ప్రతికూలంగా ఉంటుందిః ఉదాహరణకు -123 సంతకం చేసిన అంకెలు -1, 2, మరియు 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"ఈ క్రమంలో, మీరు ఇచ్చిన శ్రేణిపై ఈ క్రింది ఆపరేషన్ చేయడం ద్వారా శ్రేణిని క్రమబద్ధీకరించడం సాధ్యమేనా అని నిర్ణయించుకోవాలి. మీకు ఇచ్చిన శ్రేణిపై ఎన్నిసార్లు కుడివైపుకు షిఫ్ట్ ఆపరేషన్ చేయడానికి అనుమతి ఉంది. ఒక కుడివైపు షిఫ్ట్ ఆపరేషన్ అంటే శ్రేణిలోని అన్ని అంశాలను కుడి దిశలో ఒక స్థానం ద్వారా తరలించడం. శ్రేణి యొక్క చివరి మూలకం శ్రేణిలోని ప్రారంభ స్థానానికి తరలించబడుతుంది అంటే 0 వ సూచిక. పై ఆపరేషన్ చేయడం ద్వారా క్రమబద్ధీకరించిన శ్రేణిని పొందడం సాధ్యమైతే, అప్పుడు తిరిగి True else తిరిగి False. ఇచ్చిన శ్రేణి ఖాళీగా ఉంటే, అప్పుడు తిరిగి True. గమనికః ఇచ్చిన జాబితా ప్రత్యేకమైన అంశాలను కలిగి ఉండటానికి హామీ ఇవ్వబడింది. ఉదాహరణకిః move_one_{}ball[3,4,5,== 1, 2> True వివరణః కుడివైపుకు షిఫ్ట్ ఆపరేషన్లు చేయడం ద్వారా, శ్రేణి కోసం క్రమంలో తగ్గుతున్నది కాదు. ఇచ్చిన శ్రేణిపై ఎన్నిసార్లు కుడివైపుకు షిఫ్ట్ ఆపరేషన్ చేయడానికి మీకు అనుమతి ఉంది. ఒక కుడివైపు షిఫ్ట్ ఆపరేషన్ అంటే శ్రేణిలోని అన్ని అంశాలను కుడి దిశలో ఒక స్థానం ద్వారా తరలించడం. శ్రేణి యొక్క చివరి మూలకం శ్రేణి యొక్క ప్రారంభ స్థానం అంటే 0 వరుస. పైకి తరలానికి తరలించడం సాధ్యమైతే, పై ఆపరేషన్ చేయడం ద్వారా, తిరిగి True తిరిగి True తిరిగి వస్తుంది. ఇచ్చిన శ్రేణిలో సంఖ్యలు ఉంటే, అప్పుడు తిరిగి తప్పుగా ఉంటుంది.\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"ఈ సమస్యలో, మీరు రెండు సంఖ్యల జాబితాలను తీసుకునే ఫంక్షన్ను అమలు చేస్తారు, మరియు lst1 ను కేవలం జత సంఖ్యల జాబితాగా చేయడానికి వాటి మధ్య మూలకాల మార్పిడిని నిర్వహించడం సాధ్యమేనా అని నిర్ణయిస్తుంది. lst1 మరియు lst2 మధ్య మార్పిడి చేయబడిన మూలకాల సంఖ్యపై పరిమితి లేదు. lst1 యొక్క అన్ని అంశాలను జత చేయడానికి lst1 మరియు lst2 మధ్య మూలకాలను మార్పిడి చేయడం సాధ్యమైతే, \"YES\" ను తిరిగి ఇవ్వండి. లేకపోతే, \"NO\" ను తిరిగి ఇవ్వండి. ఉదాహరణకుః exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" ఇన్పుట్ జాబితాలు ఖాళీగా ఉండవని భావించబడుతుంది. \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"స్పేస్ వేరు చేయబడిన చిన్న అక్షరాలను సూచించే స్ట్రింగ్ ఇచ్చినట్లయితే, ఎక్కువ పునరావృతమయ్యే అక్షరం యొక్క నిఘంటువును తిరిగి ఇవ్వండి మరియు సంబంధిత సంఖ్యను కలిగి ఉంటుంది. అనేక అక్షరాలు ఒకే విధంగా ఉంటే, అవన్నీ తిరిగి ఇవ్వండి. ఉదాహరణః హిస్టోగ్రామ్ (('a b c') == {'a': 1, 'b': 1, 'c': 1} హిస్టోగ్రామ్ (('a b b a') == {'a': 2, 'b': 2} హిస్టోగ్రామ్ (('a b c a b') == {'a': 2, 'b': 2} హిస్టోగ్రామ్ (('b b a') == {'b 4}': హిస్టోగ్రామ్ (('a') == {'b 4}'\"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"టాస్క్ మనకు రెండు స్ట్రింగ్స్ s మరియు c ఇవ్వబడ్డాయి, మీరు s లోని అన్ని అక్షరాలను తొలగించాలి, అవి c లోని ఏదైనా అక్షరానికి సమానంగా ఉంటాయి, అప్పుడు ఫలిత స్ట్రింగ్ పాలిండ్రోమ్ కాదా అని తనిఖీ చేయండి. ఒక స్ట్రింగ్ను పాలిండ్రోమ్ అని పిలుస్తారు, అది ముందుకు వెనుకకు అదే రీడ్ చేస్తే. మీరు ఫలిత స్ట్రింగ్ మరియు ట్రూ / ఫాల్స్ ను కలిగి ఉన్న టపుల్ ను తిరిగి ఇవ్వాలి. ఉదాహరణ కోసం s = \"abcde\", c = \"ae\", ఫలితం ఉండాలి ('bcd', False) s = \"abcdef\", c = \"b\" ఫలితం ఉండాలి ('acdef', False) s = \"abcdedcba\", c = \"ab\", ఫలితం ఉండాలి ('cdedc', True)\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"స్ట్రింగ్స్ జాబితా ఇచ్చినట్లయితే, ప్రతి స్ట్రింగ్లో అంకెలు మాత్రమే ఉంటాయి, జాబితాను తిరిగి ఇవ్వండి. అవుట్పుట్ యొక్క ప్రతి మూలకం i అనేది ఇన్పుట్ యొక్క స్ట్రింగ్ i లోని బేసి అంశాల సంఖ్య. ఇక్కడ అన్ని i లు ఇన్పుట్ యొక్క i వ స్ట్రింగ్లో బేసి అంకెల సంఖ్యతో భర్తీ చేయబడాలి. >>> odd_count['1234567']) [\"బేసి అంశాల సంఖ్య 4n 4n యొక్క str4ng 4\".] >>> odd_count['3',\"111111\"]) [\"బేసి అంశాల సంఖ్య 1n 1n 1n 1n 1n 1n\", \"బేసి అంశాల సంఖ్య 8n 8n 8n 8n.\"] \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"పూర్ణాంకాల శ్రేణి n లకు ఇచ్చినట్లయితే, n ల యొక్క ఏదైనా ఖాళీ కాని ఉప శ్రేణి యొక్క కనీస మొత్తాన్ని కనుగొనండి. ఉదాహరణ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"మీకు బావుల యొక్క దీర్ఘచతురస్రాకార గ్రిడ్ ఇవ్వబడుతుంది. ప్రతి వరుస ఒకే బావిని సూచిస్తుంది, మరియు వరుసలో ప్రతి 1 ఒకే నీటి యూనిట్ను సూచిస్తుంది. ప్రతి బావికి దాని నుండి నీటిని సేకరించేందుకు ఉపయోగించే సంబంధిత బకెట్ ఉంది, మరియు అన్ని బకెట్లు ఒకే సామర్థ్యాన్ని కలిగి ఉంటాయి. మీ పని బావులను ఖాళీ చేయడానికి బకెట్లు ఉపయోగించడం. మీరు బకెట్లు తగ్గించాల్సిన సంఖ్యను అవుట్పుట్ చేయండి. ఉదాహరణ 1: ఇన్పుట్ః గ్రిడ్ః [[0,0,1,0], [0,1,0,0], [1,1,1,1]] బకెట్_కాపసిటీః 1 అవుట్పుట్ః 6 ఉదాహరణ 2: ఇన్పుట్ః గ్రిడ్ః [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] బకెట్_కాపసిటీః 2 అవుట్పుట్ః 5 ఉదాహరణ 3: ఇన్పుట్ః [[:0,0,0], [0,0,0]] బకెట్_కాపసిటీః 5 అవుట్పుట్ బావిః 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 10 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 *\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"ఈ కటా లో, మీరు బైనరీ ప్రాతినిధ్యంలో ఉన్న సంఖ్యల సంఖ్య ప్రకారం ప్రతికూల-కాని పూర్ణాంకాల శ్రేణిని క్రమబద్ధీకరించాలి. ఇలాంటి సంఖ్యల కోసం, దశాంశ విలువ ఆధారంగా క్రమబద్ధీకరించండి. దీనిని ఇలా అమలు చేయాలిః >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"స్ట్రింగ్ s మరియు సహజ సంఖ్య n ఇచ్చినట్లయితే, మీరు స్ట్రింగ్ s నుండి అన్ని పదాల జాబితాను తిరిగి ఇచ్చే ఫంక్షన్ను అమలు చేయమని మీకు చెప్పబడింది, ఈ పదాలు స్ట్రింగ్ s లో కనిపించేలా ఖచ్చితంగా n అచ్చులను కలిగి ఉంటాయి. స్ట్రింగ్ s ఖాళీగా ఉంటే ఫంక్షన్ ఖాళీ జాబితాను తిరిగి ఇవ్వాలి. గమనికః మీరు ఇన్పుట్ స్ట్రింగ్లో అక్షరాలు మరియు ఖాళీలు మాత్రమే ఉన్నాయని మీరు అనుకోవచ్చు. ఉదాహరణలుః select_words \"మేరీకి ఒక చిన్న గొర్రెపిల్ల ఉంది\", 4) ==> [\"little\"] select_words \"మేరీకి ఒక చిన్న గొర్రెపిల్ల ఉంది\", 3) ==> [\"మేరీ\", \"గొర్రెపిల్ల\"] select_words \"simple white space\", 2) ==> [] select_words \"హలో వరల్డ్\", 4) ==> [\"world\"] select_words \"అంకుల్ సామ్\", 3) ==> [\"అంకుల్\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"మీకు ఒక పదం ఇవ్వబడింది. మీ పని ఏమిటంటే, పదానికి కుడి వైపు నుండి రెండు హల్లుల మధ్య ఉన్న అతి దగ్గరి అచ్చును కనుగొనడం (కేస్ సెన్సిటివ్). ప్రారంభంలో మరియు ముగింపులో అచ్చులు లెక్కించబడవు. మీరు పైన పేర్కొన్న షరతులకు అనుగుణంగా ఏ అచ్చును కనుగొనకపోతే ఖాళీ స్ట్రింగ్ను తిరిగి ఇవ్వండి. ఇచ్చిన స్ట్రింగ్లో ఆంగ్ల అక్షరం మాత్రమే ఉందని మీరు అనుకోవచ్చు. ఉదాహరణః get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" ((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''మీకు రెండు స్ట్రింగ్స్ జాబితా ఇవ్వబడింది, రెండు స్ట్రింగ్స్ ఓపెన్ బ్రాంచీస్ '(' లేదా క్లోజ్ బ్రాంచీస్ ') ' మాత్రమే. మీ పని రెండు స్ట్రింగ్స్ ను కొంత క్రమంలో కలపడం సాధ్యమేనా అని తనిఖీ చేయడం, ఫలిత స్ట్రింగ్ మంచిదని. S లోని అన్ని బ్రాంచీలు సమతుల్యమైతే మాత్రమే స్ట్రింగ్ S మంచిదని భావిస్తారు. ఉదాహరణకుః స్ట్రింగ్ '((()) ' మంచిదని, స్ట్రింగ్ '()) ' కాదు. మంచి స్ట్రింగ్ చేయడానికి ఒక మార్గం ఉంటే 'అవును' అని తిరిగి ఇవ్వండి మరియు లేకపోతే 'లేదు' అని తిరిగి ఇవ్వండి. ఉదాహరణలుః match_parens[('() ', ') ']) == 'అవును' match_parens[(') ', ') ']) == 'లేదు' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"పూర్ణాంకాల శ్రేణి arr మరియు సానుకూల పూర్ణాంకం k ఇచ్చినట్లయితే, arr లో గరిష్ట k సంఖ్యలతో పొడవు k యొక్క క్రమబద్ధీకరించిన జాబితాను తిరిగి ఇవ్వండి. ఉదాహరణ 1: ఇన్పుట్ః arr = [-3, -4, 5], k = 3 అవుట్పుట్ః [-4, -3, 5] ఉదాహరణ 2: ఇన్పుట్ః arr = [4, -4, 4], k = 2 అవుట్పుట్ః [4, 4] ఉదాహరణ 3: ఇన్పుట్ః arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 అవుట్పుట్ః [2] గమనికః 1. శ్రేణి యొక్క పొడవు [1, 1000] పరిధిలో ఉంటుంది. 2. శ్రేణిలోని అంశాలు [-1000, 1000] పరిధిలో ఉంటాయి. 3. 0 <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"పూర్ణాంకాల యొక్క ఖాళీ కాని జాబితాను ఇచ్చినట్లయితే, సమాన స్థానాల్లో ఉన్న అన్ని బేసి మూలకాల మొత్తాన్ని తిరిగి ఇవ్వండి. ఉదాహరణలు పరిష్కారం (([5, 8, 7, 1]) ==> 12 పరిష్కారం (([3, 3, 3, 3, 3]) ==> 9 పరిష్కారం (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"పూర్ణాంకాల యొక్క ఖాళీ కాని శ్రేణి arr మరియు పూర్ణాంకం k ఇచ్చినట్లయితే, arr యొక్క మొదటి k మూలకాల నుండి గరిష్టంగా రెండు అంకెలతో ఉన్న మూలకాల మొత్తాన్ని తిరిగి ఇవ్వండి. ఉదాహరణః ఇన్పుట్ః arr = [111,21,3,4000,5,6,7,8,9], k = 4 అవుట్పుట్ః 24 # 21 + 3 యొక్క మొత్తం పరిమితులుః 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"ఒక సానుకూల పూర్ణాంకం n ఇచ్చినట్లయితే, కోలాట్జ్ క్రమంలో అసమాన సంఖ్యలను కలిగి ఉన్న క్రమబద్ధీకరించిన జాబితాను తిరిగి ఇవ్వండి. కోలాట్జ్ ఊహ అనేది గణితంలో ఒక ఊహ, ఇది ఈ క్రింది విధంగా నిర్వచించబడిన ఒక క్రమం గురించిః ఏదైనా సానుకూల పూర్ణాంకం n తో ప్రారంభించండి. అప్పుడు ప్రతి పదం మునుపటి పదం నుండి ఈ క్రింది విధంగా పొందబడుతుందిః మునుపటి పదం జత అయితే, తదుపరి పదం మునుపటి పదం యొక్క సగం. మునుపటి పదం బేసి అయితే, తదుపరి పదం మునుపటి పదం యొక్క 3 రెట్లు ఎక్కువ. గమనికః 1. కోలాట్జ్ ((1) [1] 2. క్రమబద్ధీకరించిన జాబితా తిరిగి ఇవ్వబడుతుంది. ఉదాహరణకుః get_odd_collatz ((5) తిరిగి [1, 5] 5 కోసం కోలాట్జ్ క్రమం [5, 8, 16, 4, 2, 1], కాబట్టి బేసి సంఖ్యలు 1, 5 మాత్రమే.\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"మీరు ఇచ్చిన తేదీ స్ట్రింగ్ను ధృవీకరించే ఫంక్షన్ను వ్రాయాలి మరియు తేదీ చెల్లుబాటు అయితే ట్రూ తిరిగి ఇవ్వాలి. లేకపోతే ఫాల్స్. కింది నియమాలన్నీ నెరవేరితే తేదీ చెల్లుతుంది: 1. తేదీ స్ట్రింగ్ ఖాళీగా లేదు. 2. నెలల కోసం రోజుల సంఖ్య 1 కన్నా తక్కువ లేదా 31 రోజుల కంటే ఎక్కువ కాదు. నెలల కోసం రోజుల సంఖ్య 1 కన్నా తక్కువ లేదా 30 రోజుల కంటే ఎక్కువ కాదు. నెలల కోసం రోజుల సంఖ్య 1 కన్నా తక్కువ లేదా 29 కన్నా ఎక్కువ కాదు. నెలలు 1 కన్నా తక్కువ లేదా 12 కన్నా ఎక్కువ ఉండకూడదు. తేదీ ఫార్మాట్లో ఉండాలిః mm-dd-yyyy ఉదాహరణకుః valid_date (('03-11-2000') => true_date (valid_date) => false_date (valid_date) => false_date (valid_date) => false_date (valid_date) => false_date (valid_date) => false_date (valid_date) => false_date (valid_date)\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''పదాల స్ట్రింగ్ ఇచ్చినట్లయితే, శ్వేతజాతిపై విభజించబడిన పదాల జాబితాను తిరిగి ఇవ్వండి, టెక్స్ట్లో శ్వేతజాతులు లేకపోతే మీరు కామాలతో విభజించాలి ',' కామాలు లేకపోతే మీరు అక్షరమాలలో అసమాన క్రమంలో చిన్న అక్షరాల సంఖ్యను తిరిగి ఇవ్వాలి, ord (('a') = 0, ord (('b') = 1, . . . ord (('z') = 25 ఉదాహరణలు split_words ((\"హలో వరల్డ్! \") â -> [\"హలో\", \"వరల్డ్! \") split_words ((\"హలో, వరల్డ్! \") â -> [\"హలో\", \"వరల్డ్! \") split_words ((\"abcdef\") \") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''సంఖ్యల జాబితా ఇచ్చినట్లయితే, అవి క్రమబద్ధీకరించబడినా లేదా లేదో తిరిగి ఇవ్వండి. జాబితాలో ఒకే సంఖ్య యొక్క 1 కంటే ఎక్కువ నకిలీలు ఉంటే, తిరిగి ఇవ్వండి తప్పుడు. ప్రతికూల సంఖ్యలు మరియు పూర్ణాంకాలు మాత్రమే ఉండవని భావించండి. ఉదాహరణలు is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 3, 2, 4, 5, 6, 7]) -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 3, 4 -> False ])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"మీకు రెండు విరామాలు ఇవ్వబడ్డాయి, ఇక్కడ ప్రతి విరామం ఒక జత పూర్ణాంకాలు. ఉదాహరణకు, విరామం = (ప్రారంభం, ముగింపు) = (1, 2). ఇచ్చిన విరామాలు మూసివేయబడ్డాయి, అంటే విరామం (ప్రారంభం, ముగింపు) ప్రారంభం మరియు ముగింపు రెండింటినీ కలిగి ఉంటుంది. ప్రతి ఇచ్చిన విరామం కోసం, దాని ప్రారంభం దాని ముగింపుకు తక్కువ లేదా సమానంగా ఉంటుందని భావించబడుతుంది. ఈ రెండు విరామాల యొక్క ఖండన పొడవు ఒక ప్రధాన సంఖ్య కాదా అని మీ పని. ఉదాహరణ, విరామాల ఖండన (1, 3), (2, 4) (2, 3) దీని పొడవు 1, ఇది ప్రధాన సంఖ్య కాదు. ఖండన పొడవు ఒక ప్రధాన సంఖ్య అయితే, \"అవును\" అని తిరిగి ఇవ్వండి, లేకపోతే, \"లేదు\" అని తిరిగి ఇవ్వండి. రెండు విరామాలు ఖండన చేయకపోతే, \"లేదు\" అని తిరిగి ఇవ్వండి. [input/output] నమూనాలుః ఖండన (((1, 2), (2, 3) ==> \"ఖండన-1, ((1), 4) ==> \"ఖండన (0,\", (NO) ==> 5-1, ((5, (-)) \"అవును\"\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"మీకు పూర్ణాంకాల శ్రేణి ఇవ్వబడింది మరియు మీరు 1, -1 లేదా 0 ద్వారా ప్రాతినిధ్యం వహిస్తున్న శ్రేణిలోని ప్రతి సంఖ్య యొక్క అన్ని సంకేతాల ఉత్పత్తి ద్వారా గుణించబడిన పూర్ణాంకాల పరిమాణాల మొత్తాన్ని తిరిగి ఇవ్వాలి. గమనికః ఖాళీ శ్రేణి కోసం ఏదీ తిరిగి ఇవ్వబడదు. ఉదాహరణః >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None \"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"N వరుసలు మరియు N నిలువు వరుసలు (N >= 2) మరియు సానుకూల పూర్ణాంకం k ఉన్న గ్రిడ్లో, గ్రిడ్ యొక్క ప్రతి సెల్ ఒక విలువను కలిగి ఉంటుంది. [1, N * N] పరిధిలోని ప్రతి పూర్ణాంకం గ్రిడ్ యొక్క కణాలలో సరిగ్గా ఒకసారి కనిపిస్తుంది. మీరు గ్రిడ్లో పొడవు k యొక్క కనీస మార్గాన్ని కనుగొనాలి. మీరు ఏదైనా సెల్ నుండి ప్రారంభించవచ్చు మరియు ప్రతి దశలో మీరు పొరుగు కణాలలో దేనినైనా తరలించవచ్చు, మరో మాటలో చెప్పాలంటే, మీరు ప్రస్తుత సెల్తో అంచును పంచుకునే కణాలకు వెళ్ళవచ్చు. దయచేసి k పొడవు యొక్క మార్గం అంటే k కణాలను (తప్పనిసరిగా భిన్నంగా ఉండకూడదు) సందర్శించడం అని గమనించండి. మీరు గ్రిడ్ నుండి బయటపడలేరు. A మార్గం (పొడవు k) A మరియు B ద్వారా వెళ్ళే కణాల విలువల క్రమానుల జాబితలను చేసిన తర్వాత (వాటిని l_st మరియు l_stA అని పిలుద్దాం), l_stA నిఘాత్మకంగా l_stA కంటే తక్కువగా ఉంటుంది, ఇతర మాటలలో, మీరు ప్రస్తుత సెల్తో అంచును పంచుకునే ఏ పొడవు కణాలకు అయినా వెళ్ళవచ్చు. దయచేసి గమనించండి, k పొడవు యొక్క మార్గం అంటే ఖచ్చితంగా k కణాలను (అవసరంగా విభిన్నంగా ఉండకూడదు). మీరు గ్రిడ్ నుండి బయటపడలేరు. A మార్గం (పొడవు k) B (పొడవు k) కంటే తక్కువ మార్గం B (k (k) (k) కంటే తక్కువ మార్గం B (k) (మించి) (మించి) (మించి) మార్గం B (మించి) కంటే తక్కువ మార్గం B (మించి) కంటే తక్కువ మార్గం B (మించి) కంటే తక్కువ మార్గం B (మించి) కంటే తక్కువ మార్గం B (మించి) మార్గం B (మించి) కంటే తక్కువ మార్గం A మార్గం A మార్గం A మరియు B ద్వారా వెళ్ళండి (మించి) ద్వారా వెళ్ళండి (మించి) A ద్వారా వెళ్ళండి (మించి) A ద్వారా వెళ్ళండి (మించి) A ద్వారా వెళ్ళండి (మించి) A ద్వారా (మించి, A, B, B, B, B, B, B, B, B, B, B, A, B, B, A, B, j, B, B, B, B, B, మరియు B, B, j, B, B, (, (, (, (, (, (,\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"ప్రతి ఒక్కరూ ఫిబోనాచి వరుసను తెలుసు, గత రెండు శతాబ్దాలలో గణిత శాస్త్రవేత్తలు దీనిని లోతుగా అధ్యయనం చేశారు. అయితే, ప్రజలకు తెలియనిది ట్రిబోనాచి వరుస. ట్రిబోనాచి వరుసను పునరావృతం ద్వారా నిర్వచించారుః tri(1) = 3 tri(n) = 1 + n / 2, n జత అయితే. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), n బేసి అయితే. ఉదాహరణకుః tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 మీకు ప్రతికూల సంఖ్య కాని పూర్ణాంకం n ఇవ్వబడింది, మీరు ట్రిబోనాచి వరుస యొక్క మొదటి n + 1 సంఖ్యల జాబితాను తిరిగి ఇవ్వాలి. ఉదాహరణలుః tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"ఒక సానుకూల పూర్ణాంకం n ఇచ్చినట్లయితే, బేసి అంకెల యొక్క ఉత్పత్తిని తిరిగి ఇవ్వండి. అన్ని అంకెలు కూడా ఉంటే 0 ను తిరిగి ఇవ్వండి. ఉదాహరణకుః అంకెలు\"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''చదరపు బ్రాకెట్లను మాత్రమే కలిగి ఉన్న స్ట్రింగ్ను ఇన్పుట్గా తీసుకునే ఫంక్షన్ను సృష్టించండి. ఈ ఫంక్షన్ బ్రాకెట్ల యొక్క చెల్లుబాటు అయ్యే ఉపక్రమణ ఉంటే మరియు ఉపక్రమణలో కనీసం ఒక బ్రాకెట్ను గూడులో ఉంచినట్లయితే మాత్రమే True ను తిరిగి ఇవ్వాలి. is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"మీకు సంఖ్యల జాబితా ఇవ్వబడుతుంది. మీరు ఇచ్చిన జాబితాలోని చతురస్ర సంఖ్యల మొత్తాన్ని తిరిగి ఇవ్వాలి, జాబితాలోని ప్రతి మూలకాన్ని ఎగువ int ((పైకప్పు) కు చుట్టుముట్టాలి. ఉదాహరణలుః lst = [1,2,3] కోసం అవుట్పుట్ 14 lst = [1,4,9] కోసం అవుట్పుట్ 98 lst = [1,3,5,7] కోసం అవుట్పుట్ 84 lst = [1.4,4.2,0] కోసం అవుట్పుట్ 29 lst = [-2.4,1,1] కోసం అవుట్పుట్ 6 \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''ఇచ్చిన స్ట్రింగ్ యొక్క చివరి అక్షరం అక్షరమాల అక్షరం మరియు ఒక పదం యొక్క భాగం కాకపోతే మరియు తప్పుడుది కాకపోతే ట్రూను తిరిగి ఇచ్చే ఫంక్షన్ను సృష్టించండి. గమనికః \"వర్డ్\" అనేది స్పేస్ ద్వారా వేరు చేయబడిన అక్షరాల సమూహం. ఉదాహరణలుః check_if_last_char_is_a_letter ((\"ఆపిల్ పై\") â -> False check_if_last_char_is_a_letter ((\"ఆపిల్ పై e\") â -> True check_if_last_char_is_a_letter ((\"ఆపిల్ పై e\") â -> False check_if_last_char_is_a_letter\" ((\") â -> False check_if_last_char_is_a_letter \"'''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"ఒక మూలకం యొక్క అతిపెద్ద సూచికను తిరిగి ఇచ్చే ఫంక్షన్ను సృష్టించండి, ఇది దాని ముందు ఉన్న మూలకం కంటే ఎక్కువ లేదా సమానం కాదు. అటువంటి మూలకం లేకపోతే తిరిగి -1. ఇచ్చిన శ్రేణిలో నకిలీ విలువలు ఉండవు. ఉదాహరణలుః can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''ఒక టపుల్ (a, b) ను తిరిగి ఇచ్చే ఫంక్షన్ను సృష్టించండి, ఇక్కడ 'a' అనేది ప్రతికూల పూర్ణాంకాలలో అతిపెద్దది, మరియు 'b' అనేది జాబితాలోని సానుకూల పూర్ణాంకాలలో అతిచిన్నది. ప్రతికూల లేదా సానుకూల పూర్ణాంకాలు లేకపోతే, వాటిని None గా తిరిగి ఇవ్వండి. ఉదాహరణలుః largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"వాస్తవ సంఖ్యలను సూచించే పూర్ణాంకాలు, ఫ్లోట్స్ లేదా స్ట్రింగ్లను తీసుకుని, ఇచ్చిన వేరియబుల్ రకంలో పెద్ద వేరియబుల్ను తిరిగి ఇచ్చే ఫంక్షన్ను సృష్టించండి. విలువలు సమానంగా ఉంటే, తిరిగి ఇవ్వవద్దు. గమనికః ఒక వాస్తవ సంఖ్య స్ట్రింగ్గా ప్రాతినిధ్యం వహిస్తే, ఫ్లోటింగ్ పాయింట్ కావచ్చు . లేదా , compare_one{1, 2.5) â -> 2.5 compare_one{1, \"2,3\") â -> \"2,3\" compare_one{5,1\", \"6\") â -> \"6\" compare_one{1\", 1) â -> None \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"ఇచ్చిన సంఖ్య n ను సరిగ్గా 4 సానుకూల జత సంఖ్యల మొత్తంగా వ్రాయవచ్చో లేదో అంచనా వేయండి ఉదాహరణ is_equal_to_sum_even ()) == తప్పుడు is_equal_to_sum_even ()) == తప్పుడు is_equal_to_sum_even ()) == నిజమైనది \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"బ్రెజిలియన్ ఫ్యాక్టరియల్ ను ఇలా నిర్వచించారు: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! ఇక్కడ n > 0 ఉదాహరణకి: >>> special_factorial ((4) 288 ఫంక్షన్ ఒక పూర్ణాంకమును ఇన్పుట్ గా పొందుతుంది మరియు ఈ పూర్ణాంకము యొక్క ప్రత్యేక ఫ్యాక్టరియల్ ను తిరిగి ఇవ్వాలి. \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_ఉదాహరణ-3స్ట్ ఇచ్చినట్లయితే, దానిలోని అన్ని ఖాళీలను అండర్ స్కోర్లతో భర్తీ చేయండి, మరియు ఒక స్ట్రింగ్లో 2 కంటే ఎక్కువ వరుస ఖాళీలు ఉంటే, అప్పుడు అన్ని వరుస ఖాళీలను - fix_spaces తో భర్తీ చేయండి (ఉదాహరణ) == \"ఉదాహరణ\" fix_spaces (ఉదాహరణ 1) == \"ఉదాహరణ 1\" fix_spaces (ఉదాహరణ 2) == \"_Example_2\" fix_spaces (ఉదాహరణ 3) \" == \"_Example-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"ఫైల్ పేరును సూచించే స్ట్రింగ్ తీసుకుని, ఫైల్ పేరు చెల్లుబాటు అయితే 'అవును' అని, లేకపోతే 'కాదు' అని తిరిగి ఇచ్చే ఫంక్షన్ను సృష్టించండి. ఫైల్ పేరులో మూడు అంకెల కంటే ఎక్కువ ('0'-'9') ఉండకూడదు. ఫైల్ పేరులో సరిగ్గా ఒక డాట్ ' ఉండాలి. డాట్ ముందు ఉన్న సబ్ స్ట్రింగ్ ఖాళీగా ఉండకూడదు, మరియు ఇది లాటిన్ అల్ఫాపేట్ ('a'-'z' మరియు 'A'Z'-) నుండి ఒక అక్షరంతో ప్రారంభమవుతుంది. డాట్ తర్వాత ఉన్న సబ్ స్ట్రింగ్ ఈ క్రింది వాటిలో ఒకటిగా ఉండాలిః ['txt', 'exe', 'lld'] ఉదాహరణలుః file_name_check\"{example. txt. #\") => 'అవును' file_name_check\"{example. ll1} => 'లేదు' (పేరు లాటిన్ అల్ఫాపేట్ అక్షరంతో ప్రారంభం కావాలి)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" ఈ ఫంక్షన్ పూర్ణాంకాల జాబితాను తీసుకుంటుంది. జాబితాలోని అన్ని ఎంట్రీల కోసం, ఫంక్షన్ పూర్ణాంక ఎంట్రీని చతురస్రంగా చేయాలి, దాని సూచిక 3 యొక్క గుణకం అయితే, దాని సూచిక 4 యొక్క గుణకం అయితే, 3 యొక్క గుణకం కాకపోతే. ఫంక్షన్ జాబితాలోని ఎంట్రీలను మార్చదు, దీని సూచికలు 3 లేదా 4 యొక్క గుణకం కాదు. ఫంక్షన్ అప్పుడు అన్ని ఎంట్రీల మొత్తాన్ని తిరిగి ఇస్తుంది. ఉదాహరణలుః lst = [1,2,3] కోసం అవుట్పుట్ 6 lst = [] కోసం అవుట్పుట్ 0 lst = [-1,-5,2,-1,-5] కోసం అవుట్పుట్ -126 ఉండాలి \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"మీకు ఒక వాక్యాన్ని సూచించే స్ట్రింగ్ ఇవ్వబడింది, వాక్యంలో కొన్ని పదాలు ఖాళీతో వేరు చేయబడ్డాయి మరియు మీరు అసలు వాక్యం నుండి పదాలను కలిగి ఉన్న స్ట్రింగ్ను తిరిగి ఇవ్వాలి, దీని పొడవులు ప్రైమ్ సంఖ్యలు, కొత్త స్ట్రింగ్లోని పదాల క్రమం అసలు మాదిరిగానే ఉండాలి. ఉదాహరణ 1: ఇన్పుట్ః వాక్యం = \"ఇది ఒక పరీక్ష\" అవుట్పుట్ః \"is\" ఉదాహరణ 2: ఇన్పుట్ః వాక్యం = \"స్విమ్మింగ్ కోసం వెళ్దాం\" అవుట్పుట్ః \"go for\" పరిమితులుః * 1 <= len(sentence) <= 100 * వాక్యం అక్షరాలను మాత్రమే కలిగి ఉంటుంది \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"మీ పని x * n వ్యక్తీకరణను సరళీకృతం చేసే ఫంక్షన్ను అమలు చేయడం. x * n ఒక పూర్ణాంకానికి విలువను ఇస్తే ఫంక్షన్ True ను తిరిగి ఇస్తుంది మరియు లేకపోతే False. x మరియు n రెండూ ఒక భిన్నం యొక్క స్ట్రింగ్ ప్రాతినిధ్యం, మరియు ఈ క్రింది ఫార్మాట్ కలిగి ఉంటాయి, <numerator>/<denominator> ఇక్కడ గుణకం మరియు denominator రెండూ సానుకూల పూర్ణాంకాలు. x, మరియు n చెల్లుబాటు అయ్యే భిన్నాలు అని మీరు అనుకోవచ్చు, మరియు denominator గా సున్నా లేదు. సరళీకృతం \"1/ 5\", \"5/1\") = True simplify \"1/ 6\", \"2/1\") = False simplify \"7/ 10\", \"10/2\") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"పూర్ణాంకాల జాబితాను వాటి అంకెల మొత్తానికి అనుగుణంగా క్రమబద్ధీకరించే ఫంక్షన్ను వ్రాయండి. గమనికః వాటి అంకెల సారూప్య మొత్తంతో అనేక అంశాలు ఉంటే, వాటిని అసలు జాబితాలోని సూచిక ఆధారంగా క్రమబద్ధీకరించండి. ఉదాహరణకుః >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"సంఖ్యల శ్రేణిని ఇన్పుట్గా తీసుకుని, శ్రేణిలోని 10 కంటే ఎక్కువ సంఖ్యలో ఉన్న మూలకాల సంఖ్యను తిరిగి ఇచ్చే ఫంక్షన్ను వ్రాయండి మరియు సంఖ్య యొక్క మొదటి మరియు చివరి అంకెలు రెండూ బేసి (1, 3, 5, 7, 9). ఉదాహరణకుః specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"మీకు ఒక సానుకూల పూర్ణాంకం n ఇవ్వబడింది. మీరు పొడవు n యొక్క పూర్ణాంక శ్రేణిని సృష్టించాలి. ప్రతి i (1 â ‰¤ i â ‰¤ n) కోసం, a[i] = i * i - i + 1. a యొక్క ట్రిపుల్స్ (a[i], a[j], a[k]) సంఖ్యను తిరిగి ఇవ్వండి, ఇక్కడ i < j < k, మరియు a[i] + a[j] + a[k] అనేది 3 యొక్క గుణకం. ఉదాహరణః ఇన్పుట్ః n = 5 అవుట్పుట్ః 1 వివరణః a = [1, 3, 7, 13, 21] చెల్లుబాటు అయ్యే ఏకైక ట్రిపుల్ (1, 7, 13).\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''మన సౌర వ్యవస్థలో ఎనిమిది గ్రహాలు ఉన్నాయి: సూర్యుడికి దగ్గరగా ఉన్నది మెర్క్యురీ, తదుపరిది వీనస్, తరువాత భూమి, మార్స్, జుపిటర్, సాటర్న్, యురేనస్, నెప్ట్యూన్. రెండు గ్రహాల పేర్లను స్ట్రింగ్స్ గ్రహం 1 మరియు గ్రహం 2 గా తీసుకునే ఫంక్షన్ను వ్రాయండి. ఈ ఫంక్షన్ గ్రహం 1 యొక్క కక్ష్య మరియు గ్రహం 2 యొక్క కక్ష్య మధ్య ఉన్న అన్ని గ్రహాలను కలిగి ఉన్న టపుల్ను సూర్యుడికి సమీపంలో క్రమబద్ధీకరించాలి. గ్రహం 1 లేదా గ్రహం 2 సరైన గ్రహ పేర్లు కాకపోతే ఫంక్షన్ ఖాళీ టపుల్ను తిరిగి ఇవ్వాలి. ఉదాహరణలు bf \"(జూపిటర్\", \"నెప్ట్యూన్\") ==> (\"సటర్న్\", \"యురేనస్\") bf ((\"ఎర్త్\", \"మెర్క్యురీ\") ==> (\"వీనస్\") bf (\"మెర్క్యురీ\", \"యురేనస్\") ==> (\"వీనస్\", \"ఎర్త్\", \"మార్స్\", \"జూపిటర్\", \"సూర్యుడు\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"స్ట్రింగ్స్ జాబితాను పారామితిగా అంగీకరించే ఫంక్షన్ను వ్రాయండి, దాని నుండి అసమాన పొడవు ఉన్న స్ట్రింగ్లను తొలగిస్తుంది మరియు క్రమబద్ధమైన క్రమంతో ఫలిత జాబితాను తిరిగి ఇస్తుంది. జాబితా ఎల్లప్పుడూ స్ట్రింగ్స్ జాబితా మరియు సంఖ్యల శ్రేణి కాదు మరియు ఇది నకిలీలను కలిగి ఉండవచ్చు. జాబితా యొక్క క్రమం ప్రతి పదం యొక్క పొడవు ద్వారా పైకి ఉండాలి మరియు మీరు ఆ నియమం ప్రకారం క్రమబద్ధీకరించిన జాబితాను తిరిగి ఇవ్వాలి. రెండు పదాలు ఒకే పొడవు ఉంటే, ఆల్ఫాబెట్గా జాబితాను క్రమబద్ధీకరించండి. ఫంక్షన్ క్రమబద్ధీకరించిన క్రమంలో స్ట్రింగ్స్ జాబితాను తిరిగి ఇవ్వాలి. అన్ని పదాలు ఒకే పొడవును కలిగి ఉంటాయని మీరు అనుకోవచ్చు. ఉదాహరణకుః assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => [\"ab\", \"cd\"]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"ఒక సాధారణ ప్రోగ్రామ్, ఇది n ఒక ప్రధాన సంఖ్య అయితే x విలువను తిరిగి ఇవ్వాలి మరియు y విలువను తిరిగి ఇవ్వాలి. ఉదాహరణలుః x_or_y(7, 34, 12) == 34 x_or_y(15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''సంఖ్యల జాబితా ఇచ్చినట్లయితే, జాబితాలోని సంఖ్యల చతురస్రాల మొత్తాన్ని తిరిగి ఇవ్వండి. ప్రతికూల సంఖ్యలు లేదా పూర్ణాంకాలు లేని సంఖ్యలను విస్మరించండి. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 ఇన్పుట్ జాబితా ఖాళీగా ఉంటే, 0 తిరిగి ఇవ్వండి '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"ఒక వ్యక్తి ఒక మ్యాచ్ ఫలితాన్ని సరిగ్గా అంచనా వేసినా, లేదో తెలుసుకోవడం మీ పని. మీకు రెండు స్కోర్లు మరియు సమాన పొడవు గల అంచనాలు ఇవ్వబడతాయి, ఇక్కడ ప్రతి సూచిక మ్యాచ్ను చూపిస్తుంది. ప్రతి అంచనం ఎంత దూరం అని సూచించే అదే పొడవు గల శ్రేణిని తిరిగి ఇవ్వండి. వారు సరిగ్గా అంచనా వేస్తే, విలువ 0, లేకపోతే, విలువ అంచనా మరియు స్కోర్ మధ్య సంపూర్ణ వ్యత్యాసం. ఉదాహరణ: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,4],[4,1,0,-2]) -> [4,0,1,0,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"మీకు ఒక తరగతి పేరు (ఒక స్ట్రింగ్) మరియు పొడిగింపుల జాబితా ఇవ్వబడుతుంది. పొడిగింపులు తరగతికి అదనపు తరగతులను లోడ్ చేయడానికి ఉపయోగించబడతాయి. పొడిగింపు యొక్క బలం ఈ క్రింది విధంగా ఉంటుంది: CAP పొడిగింపు పేరులోని పెద్ద అక్షరాల సంఖ్యగా ఉండనివ్వండి, మరియు SM పొడిగింపు పేరులోని చిన్న అక్షరాల సంఖ్యగా ఉండనివ్వండి, బలం CAP - SM భిన్నం ద్వారా ఇవ్వబడుతుంది. మీరు బలమైన పొడిగింపును కనుగొని, ఈ ఫార్మాట్లో ఒక స్ట్రింగ్ను తిరిగి ఇవ్వాలిః ClassName.StrongestExtensionName. ఒకే బలం ఉన్న రెండు లేదా అంతకంటే ఎక్కువ పొడిగింపులు ఉంటే, మీరు జాబితాలో మొదట వచ్చేదాన్ని ఎంచుకోవాలి. ఉదాహరణకు, మీకు \"స్లైసెస్\" తరగతి మరియు పొడిగింపుల జాబితాగా ఇవ్వబడితేః ['SEviviSliNGCes', 'Cheese', 'StuFfed'] అప్పుడు మీరు 'SviSliNGCes.SEviSliNGCes' 'mySviSliNGCes' strongest' పొడిగింపు అయినందున మీరు 'SviSliNGCes' ను తిరిగి ఇవ్వాలి.\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"మీకు 2 పదాలు ఇవ్వబడ్డాయి. రెండవ పదం లేదా దాని యొక్క ఏదైనా భ్రమణాలు మొదటి పదం లోని ఉప స్ట్రింగ్ అయితే మీరు True ను తిరిగి ఇవ్వాలి cycpattern_check(\"abcd\",\"abd\") => False cycpattern_check(\"hello\",\"ell\") => True cycpattern_check(\"whassup\",\"psus\") => False cycpattern_check\"abab\",\"baa\") => True cycpattern_check\"(\"efef\",\"eeff\") => False cycpattern_check\"(hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"ఒక పూర్ణాంకం ఇచ్చినట్లయితే, వరుసగా జత మరియు బేసి అంకెల సంఖ్యను కలిగి ఉన్న టపుల్ను తిరిగి ఇవ్వండి. ఉదాహరణః even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"సానుకూల పూర్ణాంక సంఖ్యను ఇచ్చినట్లయితే, దాని రోమన్ సంఖ్య సమానమైన స్ట్రింగ్ను పొందండి మరియు దానిని చిన్న అక్షరాలతో తిరిగి ఇవ్వండి. పరిమితులు: 1 <= num <= 1000 ఉదాహరణలు: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''ఒక త్రిభుజం యొక్క మూడు వైపుల పొడవులు ఇచ్చినట్లయితే. మూడు వైపులా ఒక కుడి కోణ త్రిభుజం ఏర్పడితే True ను తిరిగి ఇవ్వండి, లేకపోతే False. ఒక కుడి కోణ త్రిభుజం ఒక కోణం కుడి కోణం లేదా 90 డిగ్రీల కోణం ఉన్న త్రిభుజం. ఉదాహరణః right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"స్ట్రింగ్స్ జాబితాను అంగీకరించే ఫంక్షన్ రాయండి. జాబితాలో వేర్వేరు పదాలు ఉన్నాయి. గరిష్ట సంఖ్యలో ప్రత్యేకమైన అక్షరాలతో ఉన్న పదాన్ని తిరిగి ఇవ్వండి. బహుళ స్ట్రింగ్స్ గరిష్ట సంఖ్యలో ప్రత్యేకమైన అక్షరాలను కలిగి ఉంటే, పదకోశ క్రమంలో మొదట వచ్చేదాన్ని తిరిగి ఇవ్వండి.\"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"మీరు ఆకలితో ఉన్న కుందేలు, మరియు మీరు ఇప్పటికే కొంత సంఖ్యలో క్యారెట్లు తిన్నారు, కానీ ఇప్పుడు మీరు రోజు భోజనం పూర్తి చేయడానికి ఎక్కువ క్యారెట్లు తినాలి. మీరు ఒక శ్రేణిని తిరిగి ఇవ్వాలి [మీ భోజనం తర్వాత తిన్న క్యారెట్లు మొత్తం సంఖ్య, మీ భోజనం తర్వాత మిగిలి ఉన్న క్యారెట్లు సంఖ్య ] తగినంత క్యారెట్లు లేకపోతే, మీరు మిగిలిన క్యారెట్లు అన్నీ తింటారు, కానీ ఇప్పటికీ ఆకలితో ఉంటారు. ఉదాహరణః * eat(5, 6, 10) -> [11, 4] * eat(4, 8, 9) -> [12, 1] * eat(1, 10, 10) -> [11, 0] * eat(2, 11, 5) -> [7, 0] వేరియబుల్స్ః @number: మీరు తిన్న క్యారెట్లు మొత్తం సంఖ్య. @need:: మీరు తినవలసిన క్యారెట్లు మొత్తం సంఖ్య. @remaining:: మిగిలిన క్యారెట్లు మొత్తం సంఖ్యః * 0 = <= 0 * 0 = <= 1000 * 0 = <= 1000 మిగిలిన క్యారెట్లు స్టాక్ లో ఉన్నాయి.\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"రెండు జాబితాలు ఆపరేటర్ మరియు ఆపరేండ్పై. మొదటి జాబితాలో ప్రాథమిక బీజగణిత కార్యకలాపాలు ఉన్నాయి, మరియు రెండవ జాబితా పూర్ణాంకాల జాబితా. బీజగణిత వ్యక్తీకరణను నిర్మించడానికి మరియు ఈ వ్యక్తీకరణ యొక్క మూల్యాంకనాన్ని తిరిగి ఇవ్వడానికి రెండు ఇచ్చిన జాబితాలను ఉపయోగించండి. ప్రాథమిక బీజగణిత కార్యకలాపాలుః అదనంగా (+) వ్యవకలనం (- ) గుణకారం ( *) ఫ్లోర్ డివిజన్ ( // ) ఎక్స్పోనెన్షియేషన్ ( ** ఉదాహరణ) ఆపరేటర్['+', '*', '-'] శ్రేణి = [2, 3, 4, 5] ఫలితం = 2 + 3 * 4 - 5 => ఫలితం = 9 గమనికః ఆపరేటర్ జాబితా పొడవు ఆపరేండ్పై జాబితా యొక్క పొడవుకు సమానం. ఆపరేండ్పై ప్రతికూల-కాని పూర్ణాంకాల జాబితా ఉంది. ఆపరేటర్ జాబితాలో కనీసం ఒక ఆపరేటర్ ఉంది, మరియు ఆపరేండ్పై జాబితాలో కనీసం రెండు ఆపరేండ్పై ఉన్నాయి. \"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"మీకు ఒక స్ట్రింగ్ s ఇవ్వబడుతుంది. s[i] ఒక అక్షరం అయితే, దాని కేసును దిగువ నుండి ఎగువకు లేదా విసర్సంగా తిరగండి, లేకపోతే అది అలాగే ఉంచండి. స్ట్రింగ్లో అక్షరాలు లేకపోతే, స్ట్రింగ్ను తిరగండి. ఫంక్షన్ ఫలిత స్ట్రింగ్ను తిరిగి ఇవ్వాలి. ఉదాహరణలు solve(\"1234\") = \"4321\" solve(\"ab\") = \"AB\" solve(\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"ఇచ్చిన స్ట్రింగ్ 'text', దాని md5 హాష్ సమానమైన స్ట్రింగ్ను తిరిగి ఇవ్వండి. 'text' ఒక ఖాళీ స్ట్రింగ్ అయితే, None ను తిరిగి ఇవ్వండి. >>> string_to_md5('హలో వరల్డ్') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "tel_Telu",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"రెండు సానుకూల పూర్ణాంకాలు a మరియు b ఇచ్చినట్లయితే, a మరియు b మధ్య ఉన్న జత అంకెలను పెరుగుతున్న క్రమంలో తిరిగి ఇవ్వండి. ఉదాహరణకు: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]