prompt,canonical_solution,test
"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Sure! Here is the translation into Minangkabau:

تحيك ݕوݓ كادوي نان داباليه داݐام دافتار كاݒروݑن، ادا ديا كادوي نان لبياه دياكاݕيݕ داري بادا
ݓنݕاݑݓ نان دياݕايكݓن.
كونتيه:
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

"
"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" ماسوك ك دلام فونسّي ادالا ساتو رنتاي يڠ ترديري درڤد بربراڤ سكبڽق كلوارڠ ڤرڤرينج. تواهن اندا اياله
  منچرايكن كلوارڠ-كلوارڠ تسبوت دالم رنتاي يڠ برسآن-آني و منمبلكن سناراي دري كلوارڠ-كلوارڠ تسبوت.
  كلوارڠ-كلوارڠ تسبوت اداله سيمبان دان تيدق برسرمڤان دالم ساتو سام لعين.
  ابهكن سبراڤاڤون ڤمبجي دالم رنتاي ماسوق.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
"
"

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    an integer part and decimals.

    Return the decimal part of the number.
    Example:

داريه نغكفواكان أونغكا بيلن دسيمال يڠ بوسوا ثوليه، أونغكا إتو بساء ديباجي منجادي باحاڬين إنتجر دان دسيمال.

بالكيكن باحاڬين دسيمال داريه أونغكا إتو.
كونتوه:
    >>> truncate_number(3.5)
    0.5
    """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
"
"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" اندن سايك دافتار اوپراسي ديبوسيت دان پيناريكان ديويتو اكون بنك ين مولي داري سالدو نول. توغس اندا ادوله منديتيكسي اپاكه دي سواتو تيتك سالدو اكون جوه دي بواه نول، دان كتيكا تيتك يتو فونسيني سبوه كيمباليكن بنار. كلاو تيداك، فونسيني سبوه كيمباليكن صلاح.
كوتوه:
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
"
"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" Given the technical nature of the text and the specificity required for accurate translation, below is the translation of the provided sentence into Minangkabau using the Arabic script:

```
Untuak dafta angka masukan nan diberi, hituang Rata-rata Deviasi Absolut 
diseputaran mean dataset ko.
Rata-rata Deviasi Absolut tu adalah rata-rata perbedaan absolut antaro 
tiok unsur jo titik tengah:
MAD = rata-rata | x - x_mean |
Contoh:
```
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

"
"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" دماساݢيكن سواتو 'delimeter' انتارا ستيڠڬه دو اونسور بٮٮيسن ماسوككن `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
"
"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" ٱنپوت ک فڠسي اين اداله سترينغ يڠ مڠندڠکن برباݢاي کلوڤوق انتوق پارنتهسيس برسارڠ يڠ دپيسهکن دڠن ڠرو.
    انتوق ستيڠڬل کلومڤوق، هاسيکن تاهڤ کدالمأن ترݢالي برنتهسيس.
    مستيلڠا.) مڤونياي دوأ تاهڤ کدالمأن يڠ ماکسيموم سمنتارا)) مڤونياي تيڠڬا تاهڤ.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
"
"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" فلتیر داڤتاران ماسوك داري بنگكاي كتاكن ساجو انتوق ݢاتيوڠن يڠ مڽدياكن سبواه سبسترينڠ يڠ دبيريك.
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
"
"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" باريه داٴفتر موبولس كإنتجر، باليه كإنتجرن سموؤ كؤن سارتو سمؤ كإنتجرن دالم داٴفتر. جوئه نولاي سمؤ هاروس ساما دڠن 0 دان جوئه كأنتجرن هاروس ساما دڠن 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
"
"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" داري داٴفتر انتجر يڠ دري باريه، جاديكن داٴفتر اٴلمن ماكسيموم يڠ ديتموکن سامڤي ستياب واكتو يڠ دري دلام سكوانس.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
"
"

def is_palindrome(string: str) -> bool:
    """""" تست جاديك جرانك اداله پاليندروم """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
"
"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" إنبوئن اداله دوا رنتيان ع و ب يڠ ترديري هانيا داري أنكا 1 دان 0.
    لاكوکن XOR بينر دالم إنبوئن ترسبوت دان كواليكن هاسيلا دالم بنتوق رنتيان يوغ.
    >>> string_xor('010', '110')
    '100'
    """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
"
"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" داري سنياني سرانايك، باليكن دنانغ‌نيو. باليكن دنانغ‌نيو ين فرتامو دالم كاسو بانيك دنانغ‌نيو سمو كڤنجڠنيو. باليكن اه دالم كاسو سنياني كوسونغ.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
"
"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" ننباهان سبواه گريئتست كومون ديويسر داري دوه بيلنتر a دان b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
"
"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Here is the translated sentence in Minangkabau:

ڤولڠکن دافتار سموا ڤرفيکس داري يڠ ترفنديق سامڤي يڠ تربيجاك من دالمان سترينغ ماسكن

Note: The Minangkabau language can be written in both the Latin and Arabic scripts. The above translation uses the Arabic script as requested.
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
"
"

def string_sequence(n: int) -> str:
    """""" عودي رنطاي سواي ينغ مݢندڠكن انكا-انكا ينغ دپيسهكن دڠن ستياب سڤي دري 0 سامڤي كڤد ن.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
"
"

def count_distinct_characters(string: str) -> int:
    """""" Diambiak string, cari tahu barek brapo karakto nan barado di dalamnyo.
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
"
"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" Sure, here is the translation of the given sentence into Minangkabau:

إنداتن ك دلام فنكسي اين اداله سران ك دلام بانتوق سترينغ يڠ ممفركن نوتا موسيق د دلام بانتوق ASCII خوصوص.
توقس انك اداله انتوق منفسيركن سترينغ اين دان منيعين داڤتكن دافتار انتجر يڠ مڠكنتال برابا لامه ستياب نوتا.

ايني اداله ليجن:
'o' - نوتا سكولوه، لامهڽ امڤت بيات
'o|' - نوتا ستڠه، لامهڽ دوا بيات
'.|' - نوتا سبوات، لامهڽ ساتو بيات

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
"
"

def how_many_times(string: str, substring: str) -> int:
    """""" تَكِيهَكَن بَركَرَ كَالي بَگَيمَنَا سَبُواَح سُبْسْتْرِيْنَ دَپَت دِتَمُوكَن دِي دَلَم سْتْرِيْنَ أَصْلِي. كِرَكَن كَسُس بِرْتَنْدِيه.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
"
"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" إنتو أدوله سابو كاتا داري 'nol' سامبوي 'sembilan'.
    بيليهان ين سايو 'nol', 'satu', 'dua', 'tigo', 'ampat', 'limo', 'anam', 'tujuh', 'delapan' دان 'sembilan'.
    باليكأن كاتا دنان أنكو ديأورن داري كجيك كبادي باسار.
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
"
"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" داري داٴفتار أنكا ڤيليه دان كمواليكن دوا أنكا يڠ ترڬيكت دڽڠ ساتو سام لايڽ دان كمواليكن مركا دالم اوردن.
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

"
"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers, apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1

داري سيني لست انكا، لاقوكن ترنسفورم لينير كفادا لست ايتو،
    سهنگ كأنكا يڠ تريك كجادي 0 دان يڠ تربسر كجادي 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
"
"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" فلتر داݢي دافتار منغݢوناكن ڤيتون هانيا انتوق انتجر ساهاج.
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
"
"

def strlen(string: str) -> int:
    """""" Sure, here is the translation of the sentence ""Return length of given string"" into Minangkabau:

بالياك طول داري ستياب رنتيان ين دiberikan
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
"
"

def largest_divisor(n: int) -> int:
    """""" با أنغكو ديريكان أنكا ن، كاري أنكا تربيك يڠ مباڬي ن دڠن ساما راٽ، تر كجيك داري ن
    >>> largest_divisor(15)
    5
    """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
"
"from typing import List


def factorize(n: int) -> List[int]:
    """""" Berikan daftar faktorisasi prima dari bilangan bulat yang diberikan dalam urutan dari yang terkecil ke terbesar.
    Setiap faktor harus dicantumkan sesuai dengan jumlah kemunculannya dalam faktorisasi.
    Bilangan yang dimasukkan harus sama dengan hasil kali dari semua faktor tersebut.

Here's the translation in Minangkabau:

بريكن دافتار فاكتوريساسي ڤريما داري بيلڠن بولت يڠ ديريكن دالم اوروتن داري يڠ ترکيچل ك تر بيسار.
    ستياء فاكتور هاروس ديچانتومكن سسوئي دڠن جومله كمونچولنڽ دالم فاكتوريساسي.
    بيلڠن يڠ ديمسوككن هاروس سام دڠن ها سيل كالي داري سموا فاكتور ترسبوت.

Note: The Minangkabau language, particularly in its classical form, uses the Arabic script known as Jawi, but modern usage often employs the Latin script. The translation provided here is in the Arabic script.
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
"
"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" داري داٴفتار انتجير، هيلانكن سمو اينسيس يڠ منجادي لبيه داري سكالي.
    طهنكن اوردن انتجير تينڠال سفرتي دالم ماسوككن.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
"
"

def flip_case(string: str) -> str:
    """""" منتا كاتو داريك، اوڤهكن كركتر كچيل كڤد كركتر بسار دان كركتر بسار كڤد كركتر كچيل.
    >>> flip_case('Hello')
    'hELLO'
    """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
"
"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" منتاقوكن داڤت داري سينيان ک دلمک سينيان تڠݢل
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
"
"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" فلتر سواى دأف ليست داري سترينغ سايو باسا دنان بريفيكس يانك دبيرياكن.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
"
"

def get_positive(l: list):
    """"""Sure, here is the translation of the sentence ""Return only positive numbers in the list"" into Minangkabau:

ٱلنڠكن سايوكڠڽ أنك كوانڠن ڤوسيتيف دالم داڠن.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

"
"

def is_prime(n):
    """"""رجع بنار جكا نان دبيريكه عداله بيلانجان ڤريما، دان ساله جو كابايني.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

"
"import math


def poly(xs: list, x: float):
    """"""
    تلاهيكو بانيڠڠاڠن دڠن كوفيشيين xs ديڤد نقطة x.
    رجاء xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

"
"

def sort_third(l: list):
    """"""This function takes a list l and returns a list l' such that l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal to the values of the corresponding indices of l, but sorted.

فُنكسيون كيو مأڠأمبيل دافتار l دان مڠأمبيلكن دافتار l' سديَمَنكَن l' اداله سام دڠن l دي انديسي يڠ تيدق دافت دباڬي تيݢ، سديَمَنكَن نيلأي دي انديسي يڠ دافت دباڬي تيݢ اداله سام دڠن نيلأي داري انديسي يڠ برسسيان دڠن l، تتيَپ دتَرُتكن.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

"
"

def unique(l: list):
    """"""Mengembaliakan unsur-unsur unik yang diurutkan dalam daftar

In Minangkabau: منڠمباليأكن اونصور-اونصور اونيك يڠ دياوروتكن دالم دافتر
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

"
"

def max_element(l: list):
    """"""بالیکن انصر ماكسيمم دالم داٴفتار.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
"
"

def fizz_buzz(n: int):
    """"""أولن كاليكأن داري أنكا 7 ينغ مونيمل دالم أنكا بوله كبوه ن ينغ هابيح كوديو باوله 11 أو 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

"
"

def sort_even(l: list):
    """"""ڤونڠسي ايني ممبواك دافتار ل دان مڠمباليکن دافتار ل' يڠ دي مان
    ل' سام دڠن ل دالم اينديس ڬنجيل، سمنتارا نيلاء دالم اينديس ڬناب
    سام دڠن نيلاء دالم اينديس ڬناب دافتار ل، تتاڤ تله ديرتيس.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

"
"

def encode_cyclic(s: str):
    """"""
    منغومبالين كترانك ڤد كودو دڠن مموتار ڬروڤ منجاڍي تيڬ كركتر.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

"
"

def prime_fib(n: int):
    """"""
    پرئمے_فۏب مڠمباليکن ن-ک انکڠ يڠ اداله ڠڠکا ڤۏبۏناچي دان جڬاڤرئمے.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

"
"

def triples_sum_to_zero(l: list):
    """"""
    تريبلس سوم تو زيرو منامبك داڤت ساٴواراي ليست انتجر سيبڬاي انپوت.
اين منڬمباليكن بنتول جوك سومبوي تڬا العن دالم ليست تو
سوم كڤدا نول، دان فالس كالو تيدق.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

"
"

def car_race_collision(n: int):
    """"""
    تَصَوَّرَجَلاَنَانَجَسَمْبُرُنْ پَنْجَجَنگْ سَنْتُو. 
ن مُبِلنَجَلَنْ دَرِي كِرِي كَ كَنَن؛ سَكَلِجَ، سَت مُبِلْ لَغِي ن دَرِي كَنَن كَ كِرِي. 
دُوَ كُومْپُلَن مُبِلْ بَسَرَانَجَكْ سَجُه دَجُه لُورُه. سَمُو مُبِلْ بَجَلَنْ دَنْ كَجَپَنْ سَامَو. دُوَ مُبِلْ دِكَتَكَنْ بَرْتَمْبُرَكْ كَلَوَ سَت مُبِلْ يَنْ بَجَلَنْ دَرِي كِرِي كَ كَنَن مَنَبُهْ سَت مُبِلْ يَنْ بَجَلَنْ دَرِي كَنَن كَ كِرِي. 
تَتَپِ، مُبِلْ تَرْلَلُ كُوَتْ دَانْ كُوَحْ؛ جَدِي، مَرِكَي تَرُسْ بَجَلَنْ دَلَمْ جَلُرْ مَرِكَي سَآكَنْ يَدَ مُبِلْ بَرْتَمْبُرَكْ.

فُونْكْسِي إِنِي مَنْغَحِيلْكَنْ جُمْلَهْ بَرْتَمْبُرَكَنْ.
    """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

"
"

def incr_list(l: list):
    """"""Sure, here is the sentence translated into Minangkabau:

بالكأن داڤتكن سناراي دڠن العنمن دتمنبا ١.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

"
"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero مأngambik daftar bilangan bulat sabagai masukannyo.
    Itu balikan True kalau ado duo unsur distinct dalam daftar tu
    nan jumlahnyo jadi nol, dan False kalau indak ado.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

"
"

def change_base(x: int, base: int):
    """"""Sure, here is the translation of your sentence into Minangkabau:

توكار باس اوڠكا مسوقن x ك ماراسه.
كملينغكن جبربمڤكان سبايك توكارن.
باس اوڠكا هيندك داري 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

"
"

def triangle_area(a, h):
    """"""نظرين پانجان ساك سيسي دان تينݢي، هيتوكن لوءس ساكوڠ.
    >>> triangle_area(5, 3)
    7.5
    """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

"
"

def fib4(n: int):
    """"""The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4 -> 0
    fib4 -> 0
    fib4 -> 2
    fib4 -> 0
    fib4 -> fib4 + fib4 + fib4 + fib4.
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.

In Minangkabau:

رنتانگان أنك فب٤ اداله سواتو رنتانگان يڠ سيروڤ فبوناشي يڠ ددفينيسيكأن سغاي برإيكوت:
    فب٤ -> ٠
    فب٤ -> ٠
    فب٤ -> ٢
    فب٤ -> ٠
    فب٤ -> فب٤ + فب٤ + فب٤ + فب٤.
    تولون توليسكن فڠسي اونتوق منغمبيل العنصر ك-ن دالم رنتانگان أنك فب٤ دڠن افيزين. جانن ڤاكي ركورس.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

"
"

def median(l: list):
    """"""بالياك median dari unsur-unsur dalam دافتار l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

"
"

def is_palindrome(text: str):
    """"""
    ييك شديك داريكان سيكالاو سوا تواليك اداله باليندروم
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

"
"

def modp(n: int, p: int):
    """"""ڤولڠكن 2^n مودولو p.
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

"
"

def encode_shift(s: str):
    """"""
    يرتوکک سٹرينڠ يڠ ترديفت دڠن منڤيندهکن ستياڤ حرڤ دڠن ڤڠغسرن 5 دالم الفابت.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

"
"

def remove_vowels(text):
    """"""
    remove_vowels هي تابعٌ يأخذ النص ويعيد النص بدون حروف العلة.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

"
"

def below_threshold(l: list, t: int):
    """"""نيك True جكا سبنيوه أنك دالم دافتار l أداله ديباوه أمبغ t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

"
"

def add(x: int, y: int):
    """"""جمع نان دوك اوغو x دان y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

"
"

def same_chars(s0: str, s1: str):
    """"""
    سياك اذا دوع كتا كدا سمان كركتر.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

"
"

def fib(n: int):
    """"""رجوعانكا فيبوناتشي ك ن.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

"
"

def correct_bracketing(brackets: str):
    """""" براکتس اداله سواتو رانتاي داري ""<"" دان "">"".
    باليك كنباليكن True جك ستياب براکت افا مملكي براکت تيتوب يڠ ساما.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

"
"

def monotonic(l: list):
    """"""بالیکان True جیکو العنصران داالم ليست تربارݢيک مونوٹونیک منيݢکات او منيورون.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

"
"

def common(l1: list, l2: list):
    """"""رجوعكان العنصر يڠ ساماو، اونك، دان سوده ترتورتوڠ داري دوي ڤرنقاي.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

"
"

def largest_prime_factor(n: int):
    """"""بالیککن فاکتور بيلانج بولو تروبيك ساباك بسا ن. أسانكن ن > 1 دان بوكأن بيلانج بولو تروبيك.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

"
"

def sum_to_n(n: int):
    """"""سُم تو ن اداله فونسين عنك جوماهن أنك داري ١ سامباي ىك ن.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

"
"

def correct_bracketing(brackets: str):
    """""" براكيتس ادالا سَتْرِنْغ داري """".
    كَمباليكَن بنار جِكا ستياب براكيت بربوكا مَمڤونياء براكيت تيتوب يڠ سْوَاي.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

"
"

def derivative(xs: list):
    """""" In Minangkabau, the translated sentence would be:

xs منجادي كويفيسيين داري سواتو ڤولينوميل.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
    باليككن تورونن داري ڤولينوميل اين دالم بونتوكن ين سام.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

"
"

def fibfib(n: int):
    """"""سسوأي فبفب ادلا سسوأي سمو كادي فبوناچي ساي دا ديفينيساي سباگي بركوت:
    فبفب == 0
    فبفب == 0
    فبفب == 1
    فبفب == فبفب + فبفب + فبفب.
    تولو سلّساكن فونسوي انتيك مڠيتوڠ العن ك n داري سسوأي فبفب ادلا.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

"
"
FIX = """"""
تامبوا كاسوس اوجي لبيه بانيak.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def circular_shift(x, shift):
    """"""١. پينداہن گيليران انتوك آنكا انته x، پينداہن گيليران كے كأنن سكيرا پينداہن
    دان كنباليكن هاسيلن دلام بنتوق سري.
    جك پينداہن > جمله داري گيليران، كنباليكن گيليران تر باليق.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def digitSum(s):
    """"""Here is the translation of the given sentence into Minangkabau:

تاسك
    توليه فنگسي ينغ مڠمبيل سترين سڬاي ماسوقن دان مڠمباليکن جملهن هروف بيسار سهاج
    ASCII كود.

    كونته:
        digitSum => 0
        digitSum => 131
        digitSum => 67
        digitSum => 69
        digitSum => 131
        digitSum => 153
    """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

"
"
def fruit_distribution(s,n):
    """"""
    In tugas ko, awak akan di beri satu string nan mewakili jumlah apel jo jeruk nan dibagikan dalam satu bakul buah. Bakul ko mancakup apel, jeruk, jo buah mangga. Diberikan string nan mewakili jumlah total jeruk jo apel, jo satu angka bulat nan mewakili jumlah total buah dalam bakul, balian jumlah buah mangga dalam bakul tu.
Contohnya:
fruit_distribution -> 19 - 5 - 6 = 8
fruit_distribution -> 3 - 0 - 1 = 2
fruit_distribution -> 100 - 2 - 3 = 95
fruit_distribution -> 120 - 100 - 1 = 19
    """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
"
"
def pluck(arr):
    """"""
    Given the complexity and specifics of the provided text, translating it into Minangkabau using Arabic script requires a careful approach to ensure the technical details are preserved correctly. Here is the translation:

باريك داري اوراييك مروپكن سواتو رنچين داري پوهن يڠ مميلكي نود نود انتجر بلومڤوس دالم اوراييك
    توگس اوڠكو اداله منچبوت سواتو نود دان منگمبليكنيه.
    نود يڠ ديچبوت هروس نود يڠ مميلكي نيلاء ڤاليڠ كچل يڠ ڤنچاپ.
    كالو ادا بربراڤ نود دڠن نيلاء ڤاليڠ كچل يڠ سم، كمباليكن نود يڠ مميلكي انديكس ڤاليڠ كچل.

    نود يڠ ديچبوت هروس ديكمباليكن دالم لست، [ نيلاء ڤاليڠ كچل، انديكسنيه ],
    كالو تيدق ادا نيلاء ڤنچاپ اتاو اوراييك كوسوڠ، كمباليكن [].

    كنتوه1:
        ماسوقن: [4,2,3]
        هاسيل: [2, 1]
        ڤنجلاسأن: 2 مميلكي نيلاء ڤنچاپ ڤاليڠ كچل، دان 2 مميلكي انديكس ڤاليڠ كچل.

    كنتوه2:
        ماسوقن: [1,2,3]
        هاسيل: [2, 1]
        ڤنجلاسأن: 2 مميلكي نيلاء ڤنچاپ ڤاليڠ كچل، دان 2 مميلكي انديكس ڤاليڠ كچل.

    كنتوه3:
        ماسوقن: []
        هاسيل: []

    كنتوه4:
        ماسوقن: [5, 0, 3, 0, 4, 2]
        هاسيل: [0, 1]
        ڤنجلاسأن: 0 اداله نيلاء ڤاليڠ كچل، تتيپي ترداپت دوا نول،
                     جدي كيتا اكن ميليه نول ڤرتام، يڠ مميلكي انديكس ڤاليڠ كچل.

    كتراتأن:
        * 1 <= ڤنجڤنڠ نود <= 10000
        * 0 <= نيلاء نود
    """"""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

"
"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

"
"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

"
"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) â -> False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) â -> False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) â -> True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) â -> True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

"
"
def smallest_change(arr):
    """"""
    Diberikan sebuah array arr yang berisi bilangan bulat, carilah jumlah minimum elemen yang perlu diubah untuk membuat array tersebut menjadi palindromik. Array palindromik adalah array yang dibaca sama baik dari depan maupun belakang. Dalam satu perubahan, kamu bisa mengubah satu elemen menjadi elemen lainnya.

Sebagai contoh:
smallest_change == 4
smallest_change == 1
smallest_change == 0

مينانغكاباو:
دبريكن سبواه اراي arr يڠ برسي بيلڠن بولاڠ، كريلح جومله مينيموم ايليمين يڠ ڤرلو ديوبه اونتوق مبوات اراي ترسبوت منجادي ڤاليندروميك. اراي ڤاليندروميك اداله اراي يڠ ديباچ سام بايك دري دڤن موڠكوين بلكڠ. دالم ساتو ڤروبهان، كمو بيسا منوبه ساتو ايليمين منجادي ايليمين لاين.

سباڬاي چونتوه:
smallest_change == 4
smallest_change == 1
smallest_change == 0
    """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

"
"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) â -> []
    total_match(['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) â -> ['4']
    '''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

"
"
def is_multiply_prime(a):
    """"""تولih fungsi nan mbalikan benar jiko angka nan diantuah adoah pangalian dari 3 angka prima
    jo salahnyo jiko ndak.
    Mangetahui bahwasanyo kurang dari 100.
    Contoh:
    is_multiply_prime == True
    30 = 2 * 3 * 5
    """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

"
"
def is_simple_power(x, n):
    """"""Tugas angku ialah untuak manyusun fungsi nan baliakannyo true jiko suatu angka x adolah pangkat sederhana dari n dan false untuak kasus lainnyo.
x adolah pangkat sederhana dari n jiko n**int=x
Sebagai conto:
is_simple_power => true
is_simple_power => true
is_simple_power => true
is_simple_power => false
is_simple_power => false
is_simple_power => false
    """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

"
"
def hex_key(num):
    """"""Berikut terjemahan kalimat tersebut ke dalam bahasa Minangkabau:

أنداك دي تغاكهن باريك ساتو فونسين أنك ماندابيك ساتو أنكو هيكساديسيمال سباغاي ساتو سرتي دان منغهيتونك جوملاه ديجيت هيكساديسيمال يأنغ بيلان بيلانغان بريم.
ديجيت هيكساديسيمال أدلاه 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
بيلانغان بريم أدلاه 2, 3, 5, 7, 11, 13, 17,...
جادي أنكا هروس منتوكهن جوملاه ديجيت باريكوت: 2, 3, 5, 7, B, D.
كاتوان: أنكا بوله منغاسومسيكان ماسوكان سلالو بنر أتوا كوسونغ, دان سمبول A, B, C, D, E, F سلالو هوروف بسار.
كونتوه:
كالو نامو = ""AB"" هاسيلنيو 1.
كالو نامو = ""1077E"" هاسيلنيو 2.
كالو نامو = ""ABED1A33"" هاسيلنيو 4.
كالو نامو = ""123456789ABCDEF0"" هاسيلنيو 6.
كالو نامو = ""2020"" هاسيلنيو 2.
    """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

"
"
def decimal_to_binary(decimal):
    """"""أندا كاديكان سيبيك أنغكا دلام بنتوك ديسيمال دان توغاس أندا أداله منغوبيهكنيه ك دلام بنتوك بيناري. فونكسي هاروس منغيمباليكن سترينغ، دنان ستياپ كاركتر منغوواكن أنغكا بيناري. ستياپ كاركتر دي دلام سترينغ أكان بيروڤا '0' أتوا '1'.

أكان أد سچوتي دواس كاركتر 'db' دي أوال دان أكهير سترينغ. كاركتر تامبهن إيني أدا أونتوك منبنتوكن فورمات.

كونتوه:
decimal_to_binary   # منغيمباليكن ""db1111db""
decimal_to_binary   # منغيمباليكن ""db100000db""
    """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def is_happy(s):
    """"""تو دیریه تاليه كاو كتو سیناریو.
توغاس وان كاك تو شادي دك اتو تيداق.
كتو دك كاتو شادي جك پانجانڽ سكوراڠڽ 3 دان سبتياب 3 حروف برتورتورتور برليناڠ.
كنتوهن:
is_happy => تيداق
is_happy => تيداق
is_happy => يا
is_happy => تيداق
is_happy => يا
is_happy => تيداق
    """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
"
"
def numerical_letter_grade(grades):
    """"""Ini adolah minggu terakhir semester dan guru harus mamberikan nilai ka murid-murid. Guru talah mambuek algoritma nyo sandiri untuak manilai. Masalahnyo cuma, guru tu lah hilang kode nan dipake untuak manilai. Guru talah mamberikan daftar GPA ka beberapa murid dan ang harus manulih fungsi nan bisa manghasilkan daftar nilai huruf menggunakan tabel bariku: 
             GPA       |    Nilai huruf
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E

    Contoh:
    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def prime_length(string):
    """"""Here's the translation of the given sentence into Minangkabau:

```plaintext
Tulis fungsi nan manarimo string jo mangembalikan True kalau panjang stringnyo adolah bilangan prima, atau False kalau indak
Contoh
prime_length == True
prime_length == True
prime_length == True
prime_length == False
```
    """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

"
"
def starts_one_ends(n):
    """"""
    مٙنٙ دٙبٙوٙ سٙتُوٙ بٙلٙنٙچٙ ن، بٙلٙيكٙنٙ جُملاَ سٙتُوٙ بٙلٙنٙچٙ نَڠَ دٙبٙوٙ بٙرَنگَكُسٙنٙ بٙرٙپٙنٙڠكاٙ نٙ بٙيٙنٙ سٙتٙرَتَ دٙنٙ بٙرَاكِرٙنٙ دٙنٙگَنٙ سٙتُوٙ.
    """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(N):
    """"""Diberikan bilangan bulat positif N, kembalikan jumlah total digit-digitnya dalam biner.

    Contoh:
        Untuk N = 1000, jumlah digit-digitnya adalah 1 maka outputnya adalah ""1"".
        Untuk N = 150, jumlah digit-digitnya adalah 6 maka outputnya adalah ""110"".
        Untuk N = 147, jumlah digit-digitnya adalah 12 maka outputnya adalah ""1100"".

    Variabel:
        @N integer
             Batasan: 0 â‰¤ N â‰¤ 10000.
    Output:
         sebuah string dari bilangan biner.

Dalam Minangkabau:

دبيركن بيلڠن بولت ڤوسيتيف N, كمباليكن جومله توتل دجيت-دجيتنيو دالم بائنر.

    چنتوه:
        اونتوق N = 1000, جومله دجيت-دجيتنيو اداله 1 مك اوتوڤتنيو اداله ""1"".
        اونتوق N = 150, جومله دجيت-دجيتنيو اداله 6 مك اوتوڤتنيو اداله ""110"".
        اونتوق N = 147, جومله دجيت-دجيتنيو اداله 12 مك اوتوڤتنيو اداله ""1100"".

    ڤريابل:
        @N انتجر
             باتسن: 0 ≤ N ≤ 10000.
    اوتوڤ:
         سواتو سترينغ دري بيلڠن بائنر.
    """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

"
"
def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices.

    Examples:
        add ==> 2
        
Diambek dari daftar bilangan bulat lst nan ndak kosong. tambuah unsur genap nan ado di indeks ganjil.

    Contoh:
        tambuah ==> 2 
    """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
"
"
def anti_shuffle(s):
    """"""
    In Minangkabau:

توليس سايو ك فونسين يڠ منمبواك سواتو رنتيان کات دأن منديولکن ورسي ترتيبه.
    ورسي ترتيب داري کات، أداله سواتو رنتيان ديمانا سموا کات
    ديگنتيکن دڠن کات برو ديمانا سموا حروف ديسوسن دالم
    ورسي ترتيب منوروت نيلأي اسکي يڠ منينکت.
    کيتا حروس منجاغا اوردن کات دأن سپاسي دالم کأنيکن.

    کونتوه:
    anti_shuffle منديولکن 'Hi'
    anti_shuffle منديولکن 'ehllo'
    anti_shuffle منديولکن 'Hello !!!Wdlor'
    """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def get_row(lst, x):
    """"""
    كو ديا دي باريكيو داتا دو ديمينسي، ساڬاي داڤت ڤادا داڤت يڠ برنست،
    يڠ ساڤرتي ماتريكس، تتابي، تيادا ساڤرتي ماتريكس،
    ستياڤ باريس بوليه منغندوڠ جمله كولوم يڠ برلبيهن.
    دياڤن لست، دان انتجر اكس، كاري انتجر-انتجر اكس دالم لست،
    دان باليكن لست داري تيوڤل، [, ...] ساڤرتي
    ستياڤ تيوڤل ادلا كووردينات -، مولايي دڠن 0.
    اورتن كووردينات برأوال دڠن باريس سكاره منينغكت.
    جڬا، اورتن كووردينات داري باريس دڠن كولوم سكاره منورون.
    
    كوتوهن:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [,,,,]
    get_row == []
    get_row == []
    """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def sort_array(array):
    """"""
    ديكيك آن داري نون-نيݢاتيف إنتيجير، كيمبالكن سواتو كوپي داري ديكيك آن ستله دي أوروتكن،
أنكو اكن منغوروتكن ديكيك آن دالم أوروتن منينكات جك جملأ ڤينݢ،
أتاو منغوروتكن دالم أوروتن منورون جك جملأ ڤڠن.

كاتاتن:
* جانن اوبه ديكيك آن ين ديبريكن.

كونتوه:
* sort_array => []
* sort_array => [5]
* sort_array => [0, 1, 2, 3, 4, 5]
* sort_array => [6, 5, 4, 3, 2, 1, 0]
    """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

"
"
def encrypt(s):
    """"""Create a function encrypt nan manarimo string sabagai argumen, dan 
    mangambalikan string nan di-crypt jo alphabet nan dirotasi. 
    Alphabet tu dirotasi sabanaro sehinggo huruf-huruf bakajuah duo kali duo tempat.
    Contohnya:
    encrypt mangambalikan 'lm'
    encrypt mangambalikan 'ewhjklnop'
    encrypt mangambalikan 'kj'
    encrypt mangambalikan 'ix'

خلق ديوه فُنْكْسي انْكْرِبْتْ كَادَكْ مِنَرِيْمُو سْتْرِيْنْكْ سَبَكَي أَغُمَنْ، دَنْ
مَنْكَمْبَالِيْكَنْ سْتْرِيْنْكْ نَنْ دِي-كْرِيْبْتْ جَو أَلْفَابَتْ نَنْ دِيْرُتَسِيْ.
أَلْفَابَتْ تُ دِيْرُتَسِيْ سَبَنَارُ سَهِنْغُغْ هُرُف-هُرُفْ بَكاجُوَهْ دُو كَالِي دُو تَمْفَتْ.
كُنْتُهْنْيُ:
انْكْرِبْتْ مَنْكَمْبَالِيْكَنْ 'lm'
انْكْرِبْتْ مَنْكَمْبَالِيْكَنْ 'ewhjklnop'
انْكْرِبْتْ مَنْكَمْبَالِيْكَنْ 'kj'
انْكْرِبْتْ مَنْكَمْبَالِيْكَنْ 'ix'
    """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def next_smallest(lst):
    """"""
    أnda di bərih daftar bilangan bulat.
Tulih fungsi next_smallest nan maambalikan unsua kedua terkicik dari daftar tərsebut.
Ambalikan None jikɔ tida ada unsua tərsɛbut.
    
next_smallest == 2
next_smallest == 2
next_smallest == None
next_smallest == None
    """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_bored(S):
    """"""
    كمو دﻳ باريك سﻳبواك دﻳري كتا، دان توگس أندا اداله منغيتون جومله كبوسنان. كبوسنان اداله ساتو كلمت يڠ دمولائي دﻧﻏن كتا ""ساي"". كلمت دباتاسي دﻧﻐن '.', '?' أتو '!'.
    
    سباگاي كوتوهن:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) â -> True
    
    any_int(3, 2, 2) â -> False

    any_int(3, -2, 1) â -> True
    
    any_int(3.6, -2.2, 2) â -> False
  

    
    '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

"
"
def encode(message):
    """"""
    نانديكان سايك فونسينغ جانغ نانديك بانديكان، دان منغكود كان سوتو كارا سهنغڬا ميباليك هروف سموا حروف، منغگنتي سموا حروف ڤوكل دالم بانديكان دنان حروف ينڬ مونسول 2 هروف سبلومنيا دالم علفابت إنڬريس. 
    أنڬڬڬ هانيا حروف.
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

"
"

def skjkasdkd(lst):
    """"""أديëh dika dafta integer.
    Ang dika paiëh mancari nilai prima nan gadang bana jo balikan jumlah digitnyo.

    Contoh:
    Untuk dafta lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] hasilnyo adolah 10
    Untuk dafta lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] hasilnyo adolah 25
    Untuk dafta lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] hasilnyo adolah 13
    Untuk dafta lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] hasilnyo adolah 11
    Untuk dafta lst = [0,81,12,3,1,21] hasilnyo adolah 3
    Untuk dafta lst = [0,8,1,2,1,7] hasilnyo adolah 7
    """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
"
"
def check_dict_case(dict):
    """"""
    داري كاومسيويكاو، باليك نايك بنار جو كابيك كوجي اداو سوا رانتاي كتيك كسي كوجي اداو سوا رانتاي كبسار، كالو لا باليك سلا. 
فنكسي حاروس باليك سلا كالو داري كاومسيويكاو كوسونڠ.
كونطوه:
check_dict_case واروس باليك بنار.
check_dict_case واروس باليك سلا.
check_dict_case واروس باليك سلا.
check_dict_case واروس باليك سلا.
check_dict_case واروس باليك بنار.
    """"""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

"
"
def count_up_to(n):
    """"""لمنيةكن فنكسيون سايڠ ممبواك ساڠاڠ ايڠك صفر پوستيڤ دان ممباليك ارراي داري سايڠكاڠ سايڠكاڠ ڠك صفر سايڠ بيلڠاڠ بيلڠاڠ ڤريما دان كباڠك سايڠكڠ ايڠك صفر.
كونتوه:
count_up_to => [٢،٣]
count_up_to => [٢،٣،٥،٧]
count_up_to => []
count_up_to => [٢،٣،٥،٧،١١،١٣،١٧،١٩]
count_up_to => []
count_up_to => [٢،٣،٥،٧،١١،١٣،١٧]
    """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

"
"
def multiply(a, b):
    """"""تامپواكن فڠسي ينڬ ممباوا دو اينتجر دان منغمباليكن
    حاصل كلي بڠساڠن داري ديڠيتن اونيت مريكا.
    اڠݢڤكن ماسوقان ستياڤ كالي صح.
    كونتوه :
    multiply سڤرتيڽت 16.
    multiply سڤرتيڽت 72.
    multiply سڤرتيڽت 0.
    multiply سڤرتيڽت 20.
    """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

"
"
def count_upper(s):
    """"""
    ديريك داري سابوا س، هيتونغ جومله هرج كابار بيسار داري اندس جناب گنجيل.

كونتوه:
count_upper كيمباليكن 1
count_upper كيمباليكن 0
count_upper كيمباليكن 0
    """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For Exampleclosest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

"
"
def make_a_pile(n):
    """"""
    Given n yang positif, angkau harus membuat tumpukan batu nan barisi n tingkat.
    Tingkat pertama punyo n batu.
    Jumlah batu di tingkat berikutnyo adalah:
        - angka ganjil berikutnyo jika n ganjil.
        - angka genap berikutnyo jika n genap.
    Balikkan jumlah batu di setiap tingkat dalam bentuk daftar, di mano elemen di indeks
    i mewakili jumlah batu di tingkat.

    Contoh:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def words_string(s):
    """"""
    أnda akan diberi sebuah rentetan kata yang dipisahkan oleh koma atau spasi. Tugas Anda adalah memecah rentetan tersebut menjadi kata-kata dan mengembalikan sebuah array dari kata-kata tersebut.

Sebagai contoh:
words_string == [""Hi"", ""my"", ""name"", ""is"", ""John""]
words_string == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

"
"
def choose_num(x, y):
    """"""هذه دال وظيفة منغواكوا دوي أنكا بوسيتيف x دان y دان منغبالياكن أنكا جناب بانجسا أنكا بولات يانغ بروادا دالام كيساران [x, y] إنكلوسيف. جك تيداك أدا أنكا تيرسبوت، ماكا دال وظيفة هاروس منغبالياكن -1.

سباڬاي كونتوه:
choose_num = 14
choose_num = -1
    """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

"
"
def rounded_avg(n, m):
    """"""كمو دي باريكن دوا بيلنغن بولات بوسو ن دأ م، دن كرجأن أندو إكو مڠيتوڠ راتو راتو داري بيلنغن بوسو ن ك دأ م. بولهكن هسيلن ك دكنكن ك بيلنغن بولات تداك برباهڬي دن كنويرسكن ك بيلنغن بيناري. جك ن لبيه بيسار داري م، كوالكن -1. 

كونتور:
رندود_افغ => ""0ب11""
رندود_افغ => -1
رندود_افغ => ""0ب1111""
رندود_افغ => ""0ب11010""
    """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

"
"
def unique_digits(x):
    """"""لما داريه سِنجو بِلالو ڤوسيتيف x. كِمباليكن داريه سِنجو بروروتن 
    منوروت اكر بساك ڤاڽو 
    العناصر يڠ تيدق ممڤوني اڤا٢ڤون ڤونجولن ڠناب.

    ڤرينڠتن: داريه يڠ دِكِمباليكن حروس دِروتن دالم اوردن منينݢݢي.

    كونتوهن:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']

Diberikan array bilangan bulat, urutkan bilangan bulat yang berada di antara 1 dan 9 termasuk,
    balikkan array yang dihasilkan, dan kemudian ganti setiap digit dengan nama yang sesuai dari
    ""Satu"", ""Dua"", ""Tiga"", ""Empat"", ""Lima"", ""Enam"", ""Tujuh"", ""Delapan"", ""Sembilan"".

    Misalnya:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> urutkan arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> balikkan arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      kembalikan [""Delapan"", ""Lima"", ""Empat"", ""Tiga"", ""Dua"", ""Dua"", ""Satu"", ""Satu""]
    
      Jika array kosong, kembalikan array kosong:
      arr = []
      kembalikan []
    
      Jika array memiliki angka aneh abaikan saja:
      arr = [1, -1 , 55] 
            -> urutkan arr -> [-1, 1, 55]
            -> balikkan arr -> [55, 1, -1]
      kembalikan = ['Satu']
    """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

"
"
def f(n):
    """""" ملتقن فنكسي f ينغ مباوا n سباڠي پارامتر،
    دان مغمباليكن دافتك دڠن اوكورن n، دميكن روڤ ڤروليهن اليمين دڠن اندیکس i اداله فکتوريال دري i جک i اداله ڤار،
    او اتاو جمعكن انكا-انكا دري 1 هينڠݢ اي i بياساني.
    i بموالا دري 1.
    فکتوريال دري i اداله ڤرقنداين دري انكا-انكا دري 1 سمڤي i.
    کونتو:
    f == [1, 2, 6, 24, 15]
    """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
"
"
def even_odd_palindrome(n):
    """"""
    Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range, inclusive.

Example1:

Input: 3 Output: Explanation: Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

Example2:

Input: 12 Output: Explanation: Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

Note: 1. 1 <= n <= 10^3 2. returned tuple has the number of even and odd integer palindromes respectively.

Translating above paragraph into Minangkabau:

Diberi integer positif n, kembalikan tuple yang memiliki jumlah bilangan bulat palindrom genap dan ganjil yang jatuh dalam rentang, inklusif.

Contoh1:

Input: 3 Output: Penjelasan: Bilangan bulat palindrom adalah 1, 2, 3. satu di antaranya adalah genap, dan dua di antaranya adalah ganjil.

Contoh2:

Input: 12 Output: Penjelasan: Bilangan bulat palindrom adalah 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. empat di antaranya adalah genap, dan 6 di antaranya adalah ganjil.

Catatan: 1. 1 <= n <= 10^3 2. tuple yang dikembalikan memiliki jumlah bilangan bulat palindrom genap dan ganjil masing-masing.

Translating above paragraph into Minangkabau:

دبيري اينتيجر ڤوسيتيف ن، كيمباليكن تيوبل يڠ مميليكي جومله بيلڠن بولت ڤاليندروم ڬينڤ دان ڬنجيل يڠ جتوه دالم رنتڠ، اينكلوسيف.

چونتو١:

ايمڤوت: ٣ اوتڤوت: ڤنجلاسهن: بيلڠن بولت ڤاليندروم اداله ١، ٢، ٣. ساتو دي انتارنيا اداله ڬينڤ، دان دوا دي انتارنيا اداله ڬنجيل.

چونتو٢:

ايمڤوت: ١٢ اوتڤوت: ڤنجلاسهن: بيلڠن بولت ڤاليندروم اداله ١، ٢، ٣، ٤، ٥، ٦، ٧، ٨، ٩، ١١. امڤت دي انتارنيا اداله ڬينڤ، دان ٦ دي انتارنيا اداله ڬنجيل.

كتاتن: ١. ١ <= ن <= ١٠^٣ ٢. تيوبل يڠ ديكمباليكن مميليكي جومله بيلڠن بولت ڤاليندروم ڬينڤ دان ڬنجيل ماسڠ٢.
    """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def count_nums(arr):
    """"""
    توليسكأ فؤنكسى count_nums يڠ ممباوا سواتؤ اراي انتجر دان ممباليكن جوملاه انصر يڠ ممليك ساڠكء دجيت > 0.
جيك سواتؤ انكء نڬاتيف، ماكا دجيت برتامة دڠن تنداكن نڬاتيف:
مثالڽ -123 ممليك دجيت برتامة -1، 2، دان 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def move_one_ball(arr):
    """"""Kami punyo array 'arr' jo N integer arr[1], arr[2], ..., arr[N]. Angko-angko dalam array tu bakarajo sacaro acak. Tugas awak ado untuak memastikan apokah mungkin untuak mendapatkan array nan urut sacaro non-decreasing jo melakukan operasi berikut pada array nan telah diberi:
    Angko dibolehan untuak melakukan operasi right shift sakali atau bariak kali.
    
Satu operasi right shift artinyo memindahkan seluruh elemen dalam array sakali ke posisi kanan. Elemen terakhir dalam array akan dipindahkan ke posisi awal dalam array yaitu indeks 0.

Apabila mungkin untuak mendapatkan array nan urut sacaro non-decreasing jo melakukan operasi di atas, maka kembalikan jawaban True jika tidak maka kembalikan False.
Jika array nan diberi kosong, maka kembalikan True.

Catatan: Daftar nan diberi dipastikan punyo elemen nan unik.

Sebagai Contoh:

move_one_ball==>True
Penjelasan: Jo melakukan 2 kali operasi right shift, urutan non-decreasing bisa dicapai untuk array nan diberi.
move_one_ball==>False
Penjelasan: Tidak mungkin mendapatkan urutan non-decreasing untuk array nan diberi jo melakukan berapa kali pun operasi right shift.
                
    """"""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
"
"
def exchange(lst1, lst2):
    """"""فيه masalah ko, awak ka implementasiakan fungsi nan mambawo duo daftar angka,
    dan manentukaan apakah bisoo untuak tukar unsur antaro mereka 
    untuak mambuek lst1 jadi daftar angka genap saja.
    Indak ado batasan pado jumlah unsur nan ditukaran antaro lst1 jo lst2.
    Janiko bisoo tukar unsur antaro lst1 jo lst2 untuak mambuek
    saban unsur lst1 jadi angka genap, balian ""YA"".
    Kalau indak, balian ""TIDAK"".
    Contohnya:
    tukar => ""YA""
    tukar => ""TIDAK""
    Anggapan ko daftar input indak ka kosong.
    """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

"
"
def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them.

Example:
histogram == {'a': 1, 'b': 1, 'c': 1}
histogram == {'a': 2, 'b': 2}
histogram == {'a': 2, 'b': 2}
histogram == {'b': 4}
histogram == {}

Minangkabau:
سابوءه ستيورغ كاتينيه ممربنتوئكڽ داري حروف كچيل يڠ ديك سڤرا دڠن ڡڠڡونء كوسوڠ، ڤولڠكن دكشين يڠ منجلوقن حروف يڠ لترڠ بانيق ديڤڠڬي دڠن جملهنڽ يڠ برسبندن. جك ادا بربراڤ حروف يڠ ممڤوڽاءي كجاديان يڠ سام، ڤولڠكن سموڽ.

كونتوه:
histogram == {'a': 1, 'b': 1, 'c': 1}
histogram == {'a': 2, 'b': 2}
histogram == {'a': 2, 'b': 2}
histogram == {'b': 4}
histogram == {}

    """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

"
"
def reverse_delete(s,c):
    """"""إني ديواريه باتواريه دوء باريسان كتيك س دان سي، أندا هروس منغحاپوسكن سموا كروكتور دالم س يڠ سام دڠن ستياب كروكتور دالم سي
لالو ممرiksa أڤكه حسيلا باريسان كتيك أداله پاليندروم.
سأباريسان كتيك ديڬيلاركن پاليندروم جك ديباچا سمي سننتياسا ساريه كموكا دڠن كبالك.
أندا هروس منغيمباليكن سواتو توبل يڠ منغاندوڠي حسيلا باريسان كتيك دان بنار/ساله أونتوڠ برمريكساأن.
كونتوه
أنتوق س = ""abcde""، سي = ""ae""، حسيلا حروس جادي
أنتوق س = ""abcdef""، سي = ""b"" حسيلا حروس جادي
أنتوق س = ""abcdedcba""، سي = ""ab""، حسيلا حروس جادي
    """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
"
"
def odd_count(lst):
    """"""دىىكن داٴفتر داري باٴفترٔ ݢرنگن، ديمانا سياڤ-سياڤ باٴفتر تنغري داري انكٔ انكٔ ساݢي، كمباليكن ساٴفتر. 
    سياڤ اكليمن i داري هاسيل مڤرلوكن ""جمله انكٔ ساݢي ڤݢي ݢرنگن i داري ماسوكاً."" ديمانا سموا i هاروس دݢنتيكن دݢن جمله انكٔ ساݢي داري ݢرنگن i داري ماسوكٔ.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minSubArraySum(nums):
    """"""
    مماهيكان ساجران توه ادي انتجر، كاري ساككيك كديك سرنداه‌سرنداهن‌و‌دايه ساب‌أراي‌داري توه.
كونتوه
minSubArraySum == ١
minSubArraySum == -٦
    """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
"
"
def max_fill(grid, capacity):
    import math
    """"""
    You're asking to translate the given sentence into Minangkabau using Arabic script. Here is the translation:

أندا ديبريكأن سواتو كوتاك بروجور سرينجان. ستياب بريس منجلمنكن سواتو سرينجان، دان ستياب 1 دالم سواتو بريس منجلمنكن سواتو سطوات اير. ستياب سرينجان مملكي سواتو تيمبا  يانغ دابت ديغوناكن اونتوق منغلواركن اير داري سرينجان تيرسبوت، دان سموا تيمبا ممليكي كفاسيتاس يانغ ساما. توكس أندا اداله منغوناكن تيمبا-تيمبا ترسبوت اونتوق منغوسونغكن سرينجان. هاسل أندا اداله منغواركن برابا كالي أندا هروس منورونكن تيمبا-تيمبا ترسبوت.

كونتوه1:
مأسوقن:
كوتاك : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
كفاسيتاس تيمبا: 1
هسل: 6

كونتوه2:
مأسوقن:
كوتاك : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
كفاسيتاس تيمبا: 2
هسل: 5

كونتوه3:
مأسوقن:
كوتاك : [[0,0,0], [0,0,0]]
كفاسيتاس تيمبا: 5
هسل: 0

كونترين:
* سموا سرينجان ممليكي بنجانغ يانغ ساما
* 1 <= بنجانغ كوتاك <= 10^2
* 1 <= بنجانغ كوتاك[:,1] <= 10^2
* كوتاك[i][j] -> 0 | 1
* 1 <= كفاسيتاس <= 10
    """"""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

"
"
def sort_array(arr):
    """"""
    In this Kata, angkau harus manyusuah sabuah array dari integer nan indak-positip manuruik jumlah angka satu dalam représentasi binernya dari urutan naik. Untuk jumlah angka satu nan samo, susun barasaskan nilai desimal.

Inyo haru diimplementasikan sakikok iko: 

ين كاتا, انكء هاروس منيوسواه سبواه اراي داري اينتجر نان إندك-بوسيتب منورءك جوملاه أنكء ساتو دالم ريبريسنطاسي بنيرنء داري أورتن ناءي. اونتوق جوملاه أنكء ساتو نان سامو, سوسون براساسكن نياي ديسيميل.

إنيء هاروس ديمبلمنتاسيكن ساكيكوك إكو:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def select_words(s, n):
    """"""Diberikan sebuah string s dan sebuah bilangan asli n, Anda ditugaskan untuk mengimplementasikan sebuah fungsi yang mengembalikan daftar semua kata dari string s yang mengandung tepat n konsonan, sesuai urutan kata-kata tersebut muncul dalam string s. Jika string s kosong maka fungsi harus mengembalikan daftar kosong. Catatan: Anda boleh mengasumsikan string input hanya berisi huruf dan spasi. Contoh-contoh: select_words ==> [""little""] select_words ==> [""Mary"", ""lamb""] select_words ==> [] select_words ==> [""world""] select_words ==> [""Uncle""]
    """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

"
"
def get_closest_vowel(word):
    """"""Berikut adalah terjemahan kalimat tersebut ke dalam bahasa Minangkabau menggunakan aksara Arab:

أندا مݢدڠ کا تاڠه. توݢس أندا أڤلا مڽاري هروف ڤننجڠ ڤالڠ دكتي يڠ برادا انتارا دوا كونسونن داري سبله كاݢا كا تاڠه.

حروف ڤننجڠ دأوال دان دأخا تيدق ديهتيڠ. كأمباليكن كوسوڠ اڤبيلأ أندا تيدق مڠداأكن هروف ڤننجڠ يڠ مڽاڤايت سڤرتي شرط دأتس. 

أندا بوليه مڽڠكأكن بهاو سترينڠ يڠ دبيريكأن هانيه مڠاندوني حروف انجريس ساجا.

كونتوه:
get_closest_vowel ==> ""u""
get_closest_vowel ==> ""U""
get_closest_vowel ==> """"
get_closest_vowel ==> """"
    """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

"
"
def maximum(arr, k):
    """"""
    دياكن اراي arr داري انتيجر دان انك انك ك k، كنباليكن داڤت لست يڠ تله دترتكن دڠن ڤنجڠ k دڠن انك انك تربيك دالم arr.

كونتوه 1:

    ماسكن: arr = [-3, -4, 5], k = 3
    هاسيل: [-4, -3, 5]

كونتوه 2:

    ماسكن: arr = [4, -4, 4], k = 2
    هاسيل: [4, 4]

كونتوه 3:

    ماسكن: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
    هاسيل: [2]

كاتاتن:
    1. ڤنجڠ اراي اكن برادا دالم ڤنجڠ [1، 1000].
    2. العنتيجر دالم اراي اكن برادا دالم ڤنجڠ [-1000، 1000].
    3. 0 <= k <= پانجان
    """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

"
"
def solution(lst):
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.

ديريكان دافتار انتجر نان تاك كوسونغ، باليككن جملوه داري سمو انصر گنجيل نان براد داري بوسيسي گنجاب.
    """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

"
"
def add_elements(arr, k):
    """"""
    Diberikan array integer arr yang tidak kosong dan sebuah integer k, kembalikan jumlah elemen dengan paling banyak dua digit dari k elemen pertama arr.

Contoh:

    Masukan: arr = [111,21,3,4000,5,6,7,8,9], k = 4
    Keluaran: 24 # jumlah dari 21 + 3

Kendala:
    1. 1 <= panjang <= 100
    2. 1 <= k <= panjang

Minangkabau:

دبيركن أريي إنتجر ارر يڠ تيدق كوسوڠ دان سبواه إنتجر ك، كمباليكن جملا إليماڠ دڠن ڤاليڠ باڽق دوا ديجيت دري ك إليماڠ ڤرتام ارر.

چونتوه:

    ماسوقن: ارر = [111,21,3,4000,5,6,7,8,9], ك = 4
    كلوارأن: 24 # جملا دري 21 + 3

كندالا:
    1. 1 <= ڤنجڠ <= 100
    2. 1 <= ك <= ڤنجڠ
    """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def get_odd_collatz(n):
    """"""
    مأريكان إنتجر ن أن، باليكان دافتاران يانغ تله ديأوروتكان يانغ منياكوبكان أنكا-أنكا غانجال ددلام سكوينس كولاتز.

    كولاتز كونجكتر أداله سواتو كونجكتر دالم ماتيماتك يانغ بركناعن دنان سكوينس يانغ ديفينيسيكان
    سباگي بركت: مولاي داري ستياب إنتجر بوسيتف ن. ستياب تيرم ديبروله داري تيرم سبلومني سباگي بركت:
    جكا تيرم سبلومني جناب، تيرم بركوتني اداله ستيانغاه داري تيرم سبلومني. جكا تيرم سبلومني غانجال، تيرم
    بركوتني اداله 3 كالي تيرم سبلومني تامبا 1. كونجكترني أداله باهوا تيداك مميكييركان برابا بيسار ن، سكوينسني
    أكان سلالو منجادي 1.

    كيتراڠن:
        1. كولاتز أداله [1].
        2. داڤتاران يانغ ديبالكين تله ديأوروت دالم أوروتن منينغكت.

    كونتور:
    get_odd_collatz منجادي [1, 5] # كولاتز سكوينس انتوك 5 أداله [5, 16, 8, 4, 2, 1], جادي أنكا-أنكا غانجال هانيا 1، دان 5.
    """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def valid_date(date):
    """"""Kamu harus menulis fungsi yang memeriksa apakah tanggal yang diberikan valid dan mengembalikan True jika tanggal tersebut valid, jika tidak False. Tanggal dianggap valid jika semua aturan berikut terpenuhi:
1. String tanggal tidak kosong.
2. Jumlah hari tidak kurang dari 1 atau lebih dari 31 hari untuk bulan 1,3,5,7,8,10,12. Dan jumlah hari tidak kurang dari 1 atau lebih dari 30 hari untuk bulan 4,6,9,11. Dan, jumlah hari tidak kurang dari 1 atau lebih dari 29 hari untuk bulan 2.
3. Bulan tidak boleh kurang dari 1 atau lebih dari 12.
4. Tanggal harus dalam format: mm-dd-yyyy

Sebagai contoh:
valid_date => True

valid_date => False

valid_date => False

valid_date => True

valid_date => False

Translation in Minangkabau:
كمو هاروس منوليس فوكسي يغ ممريكسا اڤكه تغڠل يغ ديبريكن ڤليد دان مڠمبلكن True جك تغڠل ترسبوت ڤليد، جك تيدق False. تغڠل ديڠڬڤ ڤليد جك سموا اتورن برإيكوت ترپنوهي:
1. سترينغ تغڠل تيدق كوسوڠ.
2. جومله هاري تيدق كرنغ داري 1 او اتس داري 31 هاري اونتوق بولن 1,3,5,7,8,10,12. دان جومله هاري تيدق كرنغ داري 1 او اتس داري 30 هاري اونتوق بولن 4,6,9,11. دان، جومله هاري تيدق كرنغ داري 1 او اتس داري 29 هاري اونتوق بولن 2.
3. بولن تيدق بوليه كرنغ داري 1 او اتس داري 12.
4. تغڠل هاروس دالم فورمات: mm-dd-yyyy

سباڬاي چونته:
valid_date => True

valid_date => False

valid_date => False

valid_date => True

valid_date => False
    """"""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
"
"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") â -> [""Hello"", ""world!""]
    split_words(""Hello,world!"") â -> [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
"
"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) â -> True
    is_sorted([1, 2, 3, 4, 5]) â -> True
    is_sorted([1, 3, 2, 4, 5]) â -> False
    is_sorted([1, 2, 3, 4, 5, 6]) â -> True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) â -> True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) â -> False
    is_sorted([1, 2, 2, 3, 3, 4]) â -> True
    is_sorted([1, 2, 2, 2, 3, 4]) â -> False
    '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

"
"
def intersection(interval1, interval2):
    """"""Berikut adalah terjemahan kalimat tersebut ke dalam Bahasa Minangkabau dengan aksara Arab:

انت دأ چى دؤا ماسة،
    دأ مانج مانسا ادله سجودىي بيلاغو إنتجر. سكونتوه، مانسا = =.
    مانسا-مانسا يڠ دابري ادله دي توتوڠ كرتي ايتو مانسا
    ماسوكن بمولا دان بأكير سكالي.
    ستياب مانسا يڠ دابري، داسومنكن بهاوا بمولا ادله كوروڠر اتؤ ساما دڠن بأكير.
    توغس انكو ادله مننتوكن اپاكه بنجغ منيمبغني دؤا مانسا اين ادله سواتو بيلاغو بريم.
    سكونتوه، منيمبغني مانسا، ادله
    يڠ بنجغني ادله ١، يڠمنڠا ادله بوكأن بيلاغو بريم.
    جك بنجغ منيمبغني ادله بيلاغو بريم، جووبن ""يا""،
    جك تيدق، جووبن ""تيدق"".
    جك دؤا مانسا تيدق برتمبغ، جووبن ""تيدق"".


    [ماسوك/كلووار] سكونتوه:
    منيمبغني،) ==> ""تيدق""
    منيمبغني،) ==> ""تيدق""
    منيمبغني،) ==> ""يا""
    """"""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

"
"
def prod_signs(arr):
    """"""
    Sure, here is the translation of the given sentence into Minangkabau:

إنديك دكاريه إندكسين أراي arr داري أنكا-أنكا صح داري كاو سديك كيمباليكن 
    جملاه مغنتود أنكا-أنكا داري أراي مغليكاتكن داري برودكت سموه تندا-تندا 
    كتيك أنكا دالم أراي، ديواكليكن دنان 1، -1 أو 0.
    كيتيرن: كيمباليكن None أونتوق أراي كوسونغ.

    كونتوه:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minPath(grid, k):
    """"""
    Here's the translation of the given sentence into Minangkabau:

ديركئن سابوا كندوئڠن دڠن ن باريڠ دأر دڠن ن كولوڠن دأر سواتو انتدجر ك، 
سبواڠكو تياب سيل داري كندوئڠن مڠاندوڠي سواتو نيلئي. تياب انتجار دلام جڠكءن [١، ن * ن] 
دلاڤيهي مڠهديڠ دڠن تڤت سكالي دأر سيل داري كندوئڠن.

اندقله مڠچاري جالن منيموم داري ڤنجڠ ك دلاڤيهي كندوئڠن. اندقله مولا داري سكالي سيل، 
دأر تياب لڠكءن اندقله برڠكت كڤد سيل دڠن جيرن، دأر كاتا لاڤيهي، اندقله ڤرڠكت ك سيل 
يڠ برڠكت دڠن اجهن دڠن سيل سكارڠ.
هارڤ ديفهمي بهوا جالن يڠ برڤنجڠ ك برمقصود مڠنجڠكتي تڤت ك سيل.
اندقله تيدا مڠالوه كلوار داري كندوئڠن.
جالن أ ديأنڬڤ كورڠ داري جالن ب جك سيتله مڽوسن ليست يڠ 
برأورد داري نيلئي داري سيل يڠ أ دأر ب مڠلءوتي ليست أ 
أدلا مينليكسكفرافيس منلبهي ليست ب، دڠن كاتا لاڤيهي، تردڤ سكالي انتدجر انديكس ي 
يڠ ليست أ [ي] منلبهي ليست ب [ي] دان دڠن انتدجر ج ليست أ [ج] = ليست ب [ج].
ديجامين بهوا جاوان اني أونديك.
كيمبالي ليست يڠ برأورد داري نيلئي سيل يڠ جالن منيموم مڠلءوتي.

كونتوه:

ماسوكن: كندوئڠن = [ [١،٢،٣]، [٤،٥،٦]، [٧،٨،٩]]، ك = ٣
هسل: [١، ٢، ١]

ماسوكن: كندوئڠن = [ [٥،٩،٣]، [٤،١،٦]، [٧،٨،٢]]، ك = ١
هسل: [١]
    """"""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

"
"
def tri(n):
    """"""سوامو urang tau jo barisan Fibonacci, barisan ko alah didalami dek para ahli matematika dalam duo ratus taun terakhir. Namun, nan urang indak tau iko barisan Tribonacci. Barisan Tribonacci didefinisikan jo rumus rekursi:
tri = 3
tri = 1 + n / 2, lamun n genap.
tri = tri + tri + tri, lamun n ganjil.
Contohnya:
tri = 1 + = 2
tri = 3
tri = tri + tri + tri
       = 2 + 3 + 3 = 8 
Angka n nan indak negatif diantokan, angkau harus mambalikan daftar dari n + 1 angka pertama dari barisan Tribonacci.
Contoh:
tri = [1, 3, 2, 8]
    """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
"
"
def digits(n):
    """"""دياكن دوات انكا ڤوسيتيف ن، باليكن ھسيل كالي داري دجيت ڤيڠا.
باليكن 0 جك سمو دجيت اداله ڤنو.
كونتينه:
digits  == 1
digits  == 0
digits == 15
    """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

"
"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') â -> True
    is_nested('[]]]]]]][[[[[]') â -> False
    is_nested('[][]') â -> False
    is_nested('[]') â -> False
    is_nested('[[][]]') â -> True
    is_nested('[[]][[') â -> True
    '''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

"
"

def sum_squares(lst):
    """"""أندا دبيريا لسوات داري أنكا-أنكا.
أندا برلو منغكمبالين جملح كودرات أنكا-أنكا دالم لسوات يڠ دبيرياكن,
بولت كأطس داهولو ستياب العنصر دالم لسوات إيتو كإنتيج يڠ لبية تينڠي.
كونتوه:
انتوق لسوات = [1,2,3] هاسيلنيا اكن مݢلولو 14
انتوق لسوات = [1,4,9] هاسيلنيا اكن مݢلولو 98
انتوق لسوات = [1,3,5,7] هاسيلنيا اكن مݢلولو 84
انتوق لسوات = [1.4,4.2,0] هاسيلنيا اكن مݢلولو 29
انتوق لسوات = [-2.4,1,1] هاسيلنيا اكن مݢلولو 6
    

    """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") â -> False
    check_if_last_char_is_a_letter(""apple pi e"") â -> True
    check_if_last_char_is_a_letter(""apple pi e "") â -> False
    check_if_last_char_is_a_letter("""") â -> False 
    '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def can_arrange(arr):
    """"""كتو فنكسيون نان مغملن انترڤال تربيك داري سواتو ايليمين نان 
تيداك لبيه بسار او سمدانغ ايكو داري ايليمين سبلمنا. جك 
تيداك ادا ايليمين سرتي اتو مكا كمباليكن -1. ارراي نان ديريكن 
تيداك اكن مڠندڠ دوبليكات.

كونتوه:
can_arrange = 3
can_arrange = -1
    """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

"
"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
"
"
def compare_one(a, b):
    """"""
    Mambuek fungsi nan mambaliak integer, float, atau string nan manyarokan
angka nyata, dan mambalikan variabel nan gadang dari tipe variabel nan diberikannyo.
Balikan None jiko nilainyo samo.
Catatan: Jiko angka nyata manyarokan jo string, titik apung bisa . atau ,

compare_one â -> 2.5
compare_one â -> ""2,3""
compare_one â -> ""6""
compare_one â -> None
    """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_equal_to_sum_even(n):
    """"""لihak apakah angka n bisa ditulih jo jumlah dari 4 angka genap positif
    Contoh
    is_equal_to_sum_even == Salah
    is_equal_to_sum_even == Salah
    is_equal_to_sum_even == Benar
    """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
"
"
def special_factorial(n):
    """"""الفاكتوريال البرازيلي دي تعريف كاي:
    البرازيلي_فاكتوريال = n! *! *! * ... * 1!
    ديما n > 0

    كونتوه:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

"
"
def fix_spaces(text):
    """"""
    Dikasiah satu string teks, ganti sajo spasi dalamnyo jo garis bawah,
    dan kalau ado string nan punyo spasi nan lebih dari 2 baris barurutan,
    ganti sajo semua spasi barurutan tu jo - 
    
    fix_spaces == ""Contoh""
    fix_spaces == ""Contoh_1""
    fix_spaces == ""_Contoh_2""
    fix_spaces == ""_Contoh-3""

In Minangkabau:
ديكاسيه ساتو سترينغ تكس، غانتي ساجو سباسي دالمڽو جو غاريس باوه،
    دان كالو أدو سترينغ نان ڤونيو سباسي نان لبيه داري 2 باريه باروروتن،
    غانتي ساجو سموا سباسي باروروتن تو جو - 
    
    fix_spaces == ""چونتوه""
    fix_spaces == ""چونتوه_1""
    fix_spaces == ""_چونتوه_2""
    fix_spaces == ""_چونتوه-3""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

"
"
def file_name_check(file_name):
    """"""In Minangkabau, the translation would be:

ایك فڠسئن منچپتكن ینگ منمبواه سواتو سترينغ ینگ منوالكن نام سواتو برسءرت، دان منمباليکن 'یا' جك نام برسءرت تسبوت صح، دان منمباليکن 'تدك' جك تيدق.
نام برسءرت دكتكن صح جك دان حني جك سموہ شرط دی بواه ایند تردپت:
- تيدق بولی ادب لبيه دري تیڠݢ دجیٹ دالم نام برسءرت.
- نام برسءرت مڠندڠ سواتو تيتك '.'
- سبلوم تيتك تيدق بولی كوسوڠ، دان هاروس مولي دڠن حروف دري حروف لاتين.
- سسلح تيتك، هاروس اده ساله ساتو دري ایند: ['txt', 'exe', 'dll']
كونته:
file_name_check # => 'یا'
file_name_check # => 'تدك'
    """"""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

"
"


def sum_squares(lst):
    """"""توگاسي اين فنگسي داقو دافطار انتيجر. اوتوک ستياب مدوک ددلام دافطار ايتو، فنگسي اکٰن منْکوادراتکٰن انتيجر جکٰ اوندءکنيا ادٰلا 
کلٗن 3 دان اکان منْکوبٗسکٰن انتيجر جکٰ اوندءکنيا ادٰلا کلٗن 4 دان تيدق کلٗن 3. فنگسي تيدق اکان منْغوبٰه انتيجر ددلام دافطار
يڠ تيدق ادٰلا کلٗن 3 اتاو 4. کمدين فنگسي ايتو اکٰن منْواݢي جمْلا ستياب انتيجر. 

کونطوه:
اوتوق دافطار = [۱،۲،۳] هٰسيل اخير ادٰلا ۶
اوتوق دافطار = [] هٰسيل اخير ادٰلا ۰
اوتوق دافطار = [-۱,-۵,۲,-۱,-۵] هٰسيل اخير ادٰلا -۱۲۶
    """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
"
"
def words_in_sentence(sentence):
    """"""
    Sure, here is the translation of the given sentence into Minangkabau:

أندا دبيركان سواتو سترينغ يڠ مڠواكن سواتو كليمت،
كليمت تيرسبوت مڠاندوڠ بيبرافا كتا يڠ ديڤيسهكن دڠن سواتو روڠن،
دان أندا هاروس مڠمباليكن سواتو سترينغ يڠ مڠاندوڠ كتا-كتا داري كليمت اَسَل،
يڠ ڤنجڠنڽ اداله بيلڠن ڤرائيم،
اورد كتا دالم سترينغ بارو هاروس سما دڠن يڠ اَسَل.

كونتوه ١:
ماسوكَن: كليمت = ""This is a test""
هَسل: ""is""

كونتوه ٢:
ماسوكَن: كليمت = ""lets go for swimming""
هَسل: ""go for""

كترانكن:
* ١ <= ڽا طول كليمت <= ١٠٠
* كليمت هانيا مڠاندوڠ هرف-هرف ساهاج
    """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

"
"
def simplify(x, n):
    """"""Here is the translation of the provided text into Minangkabau:

توغس انكو اداله منغيمپليمينتاسيكن فونكسي يڠ اكن منغسادكن اكسبريسي
    x * n. فونسيني منغحاسيلكن سيبنر جوكا x * n ميڠهسيلكن انكا بولت، دان منغحاسيلكن ساله
    سلاينيتو. كدوا x دان n اداله ربواهن ڤادا فرکسي، دان مملوکي فورمات سباگي بركوت،
    <بيلن/پمبه> ديمانا كدوا بيلن دان پمبه اداله انكا بولت بوساتيف.

    انكو بيسا مغاسومسيكن باهوا x دان n اداله فرکسي يڠ فاليد، دان تيدق مملك دنواليور 0.

    simplify = بنر
    simplify = صلاح
    simplify = صلاح
    """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

"
"
def order_by_points(nums):
    """"""
    Sure! Here is the translation of the sentence into Minangkabau:

بوات فڠسي يڠ منورتكن داڤت دافتر انتجير دالم اوردن ميناكيت سكارانغ منورتكن جملهنڤ ستيڠاڤ دجيتنڤ.
كت: جك ادي برابا ايتم يڠ منيرايكن جملهنڤ دجيت, ترتركن مريك برادسركن انديكني د دافتر اصلي.

كونتوه:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def specialFilter(nums):
    """"""توليه ساڤوڠسي ين منيمبونغ سواتو ارراي بيلن ك ساباگي ماسوكن دان منغاسيلكن 
جمله العنصر دالم ارراي ين لبيه بسار داري 10 دان كدوا دڠكلن ڤرتام دان اخر سواتو بيلن 
اداڤن جڠكيل.
كنتوهن:
specialFilter => 1 
specialFilter => 2
    """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

"
"
def get_max_triples(n):
    """"""
    Given the complexity of the original sentence, here's a translation of the text into Minangkabau using the Arabic script:

أندا ديريككن سا أنكا بيلنغن بوسيتيف ن. أندا هرص ممبوئت أي أنكا انتجر أ دناً بنجنغ ن.
        انتوق سبوتير إ, نيلأي داري أ[إ] = إ * إ - إ + 1.
        كيمبالكن جومله تربل داري أ ديمانا إ < ج < ك, 
        دان أ[إ] + أ[ج] + أ[ك] عادلن كاليبتن داري 3.

    كونته:
        ماسوكان: ن = 5
        هاسل: 1
        بنتجرن: 
        أ = [1, 3, 7, 13, 21]
        ساتو-ساتوني تربل يانق صح إيتو.

This translation attempts to convey the original meaning using Minangkabau language written in the Arabic script.
    """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
"
"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

"
"
def sorted_list_sum(lst):
    """"""Here is the translation of the given sentence into Minangkabau:

كتبوه كفنكسي ينغما سناريكن دافتار سترينغ سباڤرمتر، مموسهن سترينغ ينغپنجنڽا گنجيل دريدافتار ايتو، دان منگمباليكن دافتار ينغتيلاهن دڠن اوردن ترترتيب، دافتار ايتو سللو اداله دافتار سترينغ دان تيدق پرنا منجادي اري داريأنغكا، دان ايتو مبولهكن مڠندوني دوپليكات. ترتيب دافتار هروس برأوردن ممينجڠ داري تياأپ كتا، دان اندا هروس منغموڤ دافتار دڠن كأتوران ايتو. جكأ دوأ كتا مڠندوني پنجن ينغساما، اوردن دافتار هروس دترتيفكن سكراڠ ألبابيت. كفنكسي ايتو هروس منغموڤ دافتار سترينغ دالم اوردن ترترتيب. اندا مبولهكن مغسومسيكن سمو كتا اكن ممڠندوني پنجن ينغساما. سباڬاي كنتوهن: 
assert list_sort => [""aa""]
assert list_sort => [""ab"", ""cd""]
    """"""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

"
"
def x_or_y(n, x, y):
    """"""Ado program sederhana nan baliau balik-an nilai x kalau n ado bilangam prima, dan baliau balik-an nilai y sapanjang nan lain.

Contoh:
untuk x_atau_y == 34
untuk x_atau_y == 5
    
    """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

"
"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

"
"
def compare(game,guess):
    """"""أديك bana kito sadonyo ingek jo raso waktu hasil acara nan ditunggu-tunggu antah pulo. Raso jo pikiran nan ado waktu itu pasti indah dicatuek dek kita baliekan jo bandingkan.
Tugas angko ko untuak menentuan apokah seseorang meneka hasil beberapa pertandingan jo benar.
Angko diberi duo array score jo tekaan nan panjangnyo samo, di manoh saban indeks tunjuak sebuoh pertandingan.
Kembalikan sebuoh array nan panjangnyo samo jo tunjuak seberapa jauh setiap tekaan. Jika tekaan nyo benar, nilainyo 0, jo lamun salah, nilainyo adalah perbedaan absolut antara tekaan jo score nyo.

contoh:

compare -> [0,0,0,0,3,3]
compare -> [4,4,1,0,0,6]
    """"""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def Strongest_Extension(class_name, extensions):
    """"""Sure, here's the translation of your sentence into Minangkabau:

أندا كندو كاساو نمه كلاس دان داڠان داڠان ڤرلووسن.
    داڠان داڠان اين هروس ديڠوناكن انتوق مواد كلاس تمبههن ك فد كلاس. ككواتن ڤرلووسن ادلاه سباڬاي بڬيني: اڠڬڤڠن كاپ اداله جوملاه حرڤن بسار دالم نمه ڤرلووسن, دان اس ام اداله جوملاه حرڤن كچيل دالم نمه ڤرلووسن, ككواتن ڤرلووسن ددافتيكن داري فراكسي كاپ - اس ام.
    أندا هروس منچاري ڤرلووسن يڠ تراكوات دان مموليكا سترينغ دالم فرماڤن اين:
    ClassName.StrongestExtensionName.
    كلو ادا دوا اءتو لبية ڤرلووسن دڠن ككواتن يڠ سام, أندا هروس منچاري يڠ برادا دالم داڠان ڤرتام.
    سبيڬاي كونتوه, كلو أندا دري ""Slices"" سباڬاي كلاس دان داڠان ڤرلووسن: ['SErviNGSliCes', 'Cheese', 'StuFfed'] ماكا أندا هروس مموليكا 'Slices.SErviNGSliCes' كرنا 'SErviNGSliCes' اداله ڤرلووسن يڠ تراكوات.
    كونتوه:
    Strongest_Extension == 'my_class.AA'
    """"""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
"
"
def cycpattern_check(a , b):
    """"""اندن ديوهكن 2 كتا. اندن پرلو منجوبكن True جوك كتا كدوا اتاو سلاساتو روطاسيني اداله سبحاين دلام كتا ڤرتام.

    """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

"
"
def even_odd_count(num):
    """"""دابو أكان انگكا، باليكأن سبواه توبيل يڠ مڽدياکن جومله أنك دڠن ڠيتڠڠڬݢنڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠ
    """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def int_to_mini_roman(number):
    """"""
    Sure, here is the translation of the sentence into Minangkabau:

    ""Jiko ado bilangan buliah positif, dapatan roman numeral nan sarupo jo string, jo balian ko balikannyo jo huruf kaciak. Batasan: 1 <= num <= 1000

    Contohnyo:""

Minangkabau language uses the Arabic script minimally in modern contexts, so this translation uses mainly the Latin alphabet with Minangkabau phonetics. If you require the translation in full Arabic script, please provide additional context or specific phrases, as the Minangkabau language typically uses the Latin script for written communication today.
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

"
"
def find_max(words):
    """"""نوحكان فونسين ين منريما داٴفتار سناراي.
    داٴفتار منگندوڠي بروبا-روبا كتا. كُنباليكن كتا دنان جوملاه
    حروف يڠ برلاينان تربانيق. جك بربراڤ سناراي مميلكي
    جوملاه حروف برلاينان تربانيق، كُنباليكن يڠ برترتيب
    سكراڠكن دلم اوتوت ليكسيكوڠرافي.

    find_max == ""string""
    find_max == ""enam""
    find_max == ""aaaaaaa""
    """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

"
"
def eat(number, need, remaining):
    """"""
    أnda adolah ranciang nan lapeh, dan ang adoh makan sakali jumlah wortel,
tapi kini ang paralu makan lebih banuak wortel untuak manyalasaikan jatah makan hari ko.
Ang paralu mangambalikan array [ jumlah total wortel nan dimakan salamo makan,
                               jumlah wortel nan tetingga sa'atoh makan ]
jika tadoh cukup wortel nan tetingga, ang akan makan sakali wortel nan tetingga, tapi tetap lapeh.

Contoh:
* makan -> [11, 4]
* makan -> [12, 1]
* makan -> [11, 0]
* makan -> [7, 0]

Variabel:
@jumlah : integer
    jumlah wortel yang sudah ang makan.
@paralu : integer
    jumlah wortel yang ang paralu makan.
@tetingga : integer
    jumlah wortel nan masih tetingga di stok.

Batasan:
* 0 <= jumlah <= 1000
* 0 <= paralu <= 1000
* 0 <= tetingga <= 1000

Selamat bersenang-senang :)
    """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

"
"
def do_algebra(operator, operand):
    """"""
    Diberikan duo daftar: operator, dan operand. Daftar pertama punyo operasi aljabar dasar, dan 
daftar kedua adalah daftar bilangan bulat. Gunokan duo daftar nan sudah diberikan untuk 
mambangun ekspresi aljabar dan balikan hasil evaluasi dari ekspresi iko.

Operasi aljabar dasar:
Penambahan 
Pengurangan 
Perkalian 
Pembagian bulat 
Eksponensiasi 

Contoh:
operator['+', '*', '-']
array = [2, 3, 4, 5]
hasil = 2 + 3 * 4 - 5
=> hasil = 9

Catatan:
    Panjang daftar operator adalah sama dengan panjang daftar operand dikurang satu.
    Operand adalah daftar bilangan bulat nan tidak negatif.
    Daftar operator punyo setidaknya satu operator, dan daftar operand punyo setidaknya dua operand.

    """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(s):
    """"""Anda diberi string s.
    jika s[i] adalah huruf, tukar kasusnya dari kecil ke besar atau sebaliknya,
    jika tidak, biarkan sebagaimana adanya.
    Jika string tidak mengandung huruf, balikkan string tersebut.
    Fungsi harus mengembalikan string yang dihasilkan.
    Contoh-contoh:
    solve = ""4321""
    solve = ""AB""
    solve = ""#A@c""

Minangkabau:

اند diberى ستريڠ س.
    جك س[i] اداله حروف، توكر كاسوسڽ داري كچيل ك بسر او س باليكني،
    جك تيدق، بياركن سباڬايمانا اداني.
    جك ستريڠ تيدق مڠندڠي حروف، باليكن ستريڠ ترتسبوت.
    ڤڠسي هروس مڠمباليكن ستريڠ يڠ دحسيلكن.
    چنتوه-چنتوه:
    solve = ""4321""
    solve = ""AB""
    solve = ""#A@c""
    """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
"
"
def string_to_md5(text):
    """"""
    باك ديوه سابواك 'text', باليككن هاش md5 ساباقي ديوه.
    جو 'text' كوسونغ, باليككن None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def generate_integers(a, b):
    """"""
    داريه دُوَ عَطَوْلَ سَعَدُوَ أَجَدْ أَ دَنْ ب، بَلاكَنْ سَاڠْكَرَكْ سَتِگِيَ دِ أَنْ تَرَى أَ دَنْ ب، دَلامْ تِرْتِبْ مَنجَنْجَكْ.

مِسَلْنِيَ:
generate_integers => [2, 4, 6, 8]
generate_integers => [2, 4, 6, 8]
generate_integers => []
    """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
