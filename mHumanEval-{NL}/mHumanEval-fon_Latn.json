[
    {
        "prompt":"from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Kp\u0254\u0301n \u0256\u0254 n\u00f9\u0256\u00e9 \u0256\u00f2 n\u00f9jl\u025b\u0301jl\u025b\u0301 l\u025b\u0301\u025b j\u00ed, n\u00fa \u00e8 na \u0256\u0254 \u0254\u0301, n\u00f9jl\u025b\u0301jl\u025b\u0301 w\u00e8 \u0256\u00e9 \u0256\u00f2 s\u025b\u0301d\u00f3 n\u00fa ye\u0256\u00e9e h\u00fa n\u01d4 e \u00e8 \u0256\u0254 \u00e9 \u00e0 j\u00ed.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "canonical_solution":"for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" az\u0254\u0300n \u00e9l\u0254\u0301 s\u00edn n\u01d4 e \u00e8 n\u0254 s\u0254\u0301 d\u00f3 m\u025b \u00e9 w\u025b ny\u00ed n\u00f9kw\u00edn e n\u0254 \u0256\u00f3 n\u00f9jl\u025b\u0301jl\u025b\u0301 e \u00e8 n\u0254 s\u0254\u0301 d\u00f3 m\u025b l\u025b\u0301\u025b s\u00edn gege l\u025b\u0301\u025b \u00e9. N\u01d4 e a na bl\u00f3 \u0254\u0301 w\u025b ny\u00ed \u0256\u0254 a na m\u00e1 n\u00f9jl\u025b\u0301jl\u025b\u0301 \u00e9n\u025b\u0301 l\u025b\u0301\u025b \u0256\u00f3 vo, b\u00f3 n\u00e1 l\u025b\u0301 w\u00e1 \u0256\u00f3 n\u00f9jl\u025b\u0301jl\u025b\u0301 e m\u025b \u00e8 n\u0254 s\u0254\u0301 m\u025b l\u025b\u0301\u025b s\u00edn n\u00f9jl\u025b\u0301jl\u025b\u0301 l\u025b\u0301\u025b \u00e9. Gege l\u025b\u0301\u025b n\u0254 \u0256\u00f3 jl\u025b\u030c (w\u011b l\u025b\u0301\u025b b\u01d0 n\u0254\u0301 n\u0254 m\u025b l\u025b\u0301\u025b s\u00edn gege l\u025b\u0301\u025b m\u025b) b\u00f3 n\u0254\u0301 s\u0254\u0301 \u0256\u00f3 vo n\u00fa ye\u0256\u00e9e \u01ce.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"
    },
    {
        "prompt":"\n\ndef truncate_number(number: float) -> float:\n    \"\"\" N\u00fa \u00e8 na s\u0254\u0301 n\u00f9jl\u025b\u0301kpo e n\u0254\u0301 ny\u00ed n\u01d4 e n\u0254\u0301 \u0256\u00f2 t\u025bntin \u00e9 \u0256\u00e9 \u0256\u00f3 n\u00f9jl\u025b\u0301kpo \u0256agbe \u0256\u00e9 \u0254\u0301, \u00e8 sixu m\u00e1 \u0256\u00f3 n\u00f9jl\u025b\u0301kpo \u0254\u0301 s\u00edn akp\u00e1xw\u00e9 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed \u00e9 ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed \u00e9 ny\u00ed n\u01d4 e ny\u00ed \u00e9 \u00e9 \u00e9 \u00e9\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "canonical_solution":"    return number % 1.0\n",
        "test":"def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" e na l\u025b\u0301 n\u00e1 we n\u01d4 e \u00e8 n\u0254 d\u00f3 akw\u025b\u0301 d\u00f3 akw\u025b\u0301 j\u00ed l\u025b\u0301\u025b \u00e9 s\u00edn n\u00f9\u0256\u00e9 b\u0254 \u00e8 n\u0254 b\u025b\u0301 d\u00f3 akw\u025b\u0301 j\u00ed \u0254\u0301 j\u00ed. az\u0254\u030c towe w\u025b ny\u00ed \u0256\u0254 a na m\u0254 \u0256\u0254 akw\u025b\u0301 \u0256\u00f2 akw\u025b\u0301 j\u00ed \u0254\u0301 j\u025b ay\u01d0 \u0256\u00f2 n\u01d4t\u00ed \u01ce, b\u0254 n\u01d4 \u0254\u0301 na l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "canonical_solution":"    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" \u0189\u00f3 n\u00f9xwl\u00e9 n\u00f9jl\u025b\u0301jl\u025b\u0301 \u00e8 \u00e8 n\u00e1 d\u00f3 \u00e9 \u0256\u00e9 \u0254\u0301' \u00e8 na l\u025b\u0301 m\u0254\u0300 m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa m\u025b\u0300 n\u00fa\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    mean = sum(numbers) \/ len(numbers)\n    return sum(abs(x - mean) for x in numbers) \/ len(numbers)\n",
        "test":"def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0\/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0\/5.0) < 1e-6\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" \u0189\u0254 n\u00f9xw\u00e1s\u00e1 'delimeter' \u0256\u00f2 n\u01d4 w\u00e8 e \u0256\u00f2 kp\u00f2 l\u025b\u0301\u025b m\u025b \u0256\u00f2 n\u00f9xw\u00e1s\u00e1 \u00e8 \u00e8 n\u0254 s\u0254\u0301 n\u01d4 l\u025b\u0301\u025b d\u00f3 m\u025b \u00e9 m\u025b \u2200numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "canonical_solution":"    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" N\u01d4 e \u00e8 n\u0254 s\u0254\u0301 d\u00f3 az\u0254\u0300n el\u0254 m\u025b \u00e9 w\u025b ny\u00ed n\u00f9jl\u025b\u0301n e n\u0254 \u0256\u00e8 t\u00f2 vovo l\u025b\u0301\u025b \u0256\u00f3 n\u00f9xwl\u00e9ma m\u025b, b\u0254 \u00e8 n\u0254 kl\u00e1n ye \u0256\u00f3 t\u025bn l\u025b\u0301\u025b m\u025b \u00e9. N\u00fa \u00e8 na s\u0254\u0301 t\u00f2 \u0256okpo \u0256okpo \u0256\u00f3 n\u00f9xwl\u00e9ma m\u025b \u0254, \u00e8 n\u0254 s\u0254\u0301 t\u00f2 e m\u025b \u00e8 n\u0254 s\u0254\u0301 n\u00f9xwl\u00e9ma l\u025b\u0301\u025b \u0256\u00f3 d\u00f2 \u0256\u00e8 \u00e9 d\u00f3. \u00c0m\u025b\u0301, (() (()) \u0256\u00f3 n\u00f9xwl\u00e9ma w\u00e8 \u0256\u00f2 b\u01d0b\u025b\u030c, b\u0254 ((())) \u0256\u00f3 at\u0254n.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "canonical_solution":"    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter input list of strings for ones that contain given substring (W\u00f2d\u00f3 \u00e8 n\u0254 d\u00f3 n\u00fa wuntun l\u025b \u00e9 \u0256\u00f3 n\u00fa wuntun l\u025b \u00e9)\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if substring in x]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" n\u00fa n\u00f9xwl\u00e9 l\u025b\u0301\u025b e \u00e8 n\u00e1 n\u00e1 \u00e9 \u0254\u0301, \u00e8 na l\u025b\u0301 s\u0254\u0301 n\u00f9xwl\u00e9 l\u025b\u0301\u025b b\u01d0 s\u00edn n\u00f9xwl\u00e9 l\u025b\u0301\u025b b\u00f3 n\u00e1 l\u025b\u0301 s\u0254\u0301 n\u00f9xwl\u00e9 l\u025b\u0301\u025b b\u01d0 s\u00edn n\u00f9xwl\u00e9 l\u025b\u0301\u025b s\u00edn n\u01d4xwl\u00e9 l\u025b\u0301\u025b. n\u00f9xwl\u00e9 l\u025b\u0301\u025b e \u00e8 s\u0254\u0301 \u0256\u00f3 vo l\u025b\u0301\u025b \u0256\u00f3 na ny\u00ed 0 b\u0254 n\u01d4xwl\u00e9 l\u025b\u0301\u025b e \u00e8 s\u0254\u0301 \u0256\u00f3 vo l\u025b\u0301\u025b \u0256\u00f3 na ny\u00ed 1\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "canonical_solution":"    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test":"def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" \u0189\u00f2 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 e \u00e8 n\u00e1 l\u025b\u0301 n\u00e1 \u00e9 \u0256\u00e9 m\u025b \u0254, \u00e8 na bl\u00f3 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 e \u00e8 na m\u0254 \u0256\u00f2 n\u00f9jl\u025b\u0301jl\u025b\u0301 \u0254 m\u025b k\u00e1k\u00e1 j\u025b hwe\u0256\u00e9nu \u00e9 t\u0254n.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" \u00d0\u0254 \u0256\u0254 wuntun e \u00e8 na \u00e9 ny\u00ed palindrome \u00e0 j\u00ed \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "canonical_solution":"    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" N\u01d4 e \u00e8 n\u0254 s\u0254\u0301 d\u00f3 m\u025b \u00e9 w\u025b ny\u00ed x\u025b we a kpo b kpo e m\u025b 1 kpo 0 kpo k\u025b\u0256\u025b w\u025b \u0256\u00e8.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "canonical_solution":"    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test":"def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n"
    },
    {
        "prompt":"from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" \u0189o xota xota l\u025b t\u0254n l\u025b m\u025b \u0254, na l\u025b\u0301 v\u0254\u0301 xota e n\u0254\u0301 l\u00edn h\u00fa \u0256\u011b l\u025b \u00e9. N\u00fa xota l\u025b\u0301\u025b \u0256\u011b \u0256\u00f2 m\u0254\u030c \u0256okp\u00f3 \u0254\u0301 m\u025b \u0254\u0301, na l\u025b\u0301 v\u0254\u0301 xota nuk\u0254nt\u0254n \u0254. N\u00fa xota l\u025b\u0301\u025b \u0256\u00f2 m\u0254\u030c \u0254\u0301, na l\u025b\u0301 v\u0254\u0301 xota \u0256\u011b \u01ce \u00e9.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "canonical_solution":"    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test":"def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n"
    },
    {
        "prompt":"\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Z\u0254\u0301n n\u00f9jl\u025b\u0301kp\u00e0 w\u00e8 e ny\u00ed n\u00f9jl\u025b\u0301kp\u00e0 a kpo b kpo t\u0254n l\u025b\u0301\u025b s\u00edn m\u025b\u0301jl\u025b\u0301kp\u00e0 e ny\u00ed n\u01d4jl\u025b\u0301kp\u00e0 \u0256ax\u00f3 b\u01d0 \u00e9\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    while b:\n        a, b = b, a % b\n    return a\n",
        "test":"def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" E n\u0254 l\u025b\u0301 l\u025b\u0301 v\u0254\u0301 x\u00f3\u0256\u0254\u0256\u00f3kp\u0254\u0301 l\u025b\u0301\u025b b\u01d0 s\u00edn n\u00f9xw\u00e1s\u00e1 s\u00edn wuntun e \u00e8 n\u0254 z\u00e1n d\u00f3 wlan n\u01d4 l\u025b \u00e9 m\u025b\u0300\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n"
    },
    {
        "prompt":"\n\ndef string_sequence(n: int) -> str:\n    \"\"\" l\u025b\u0301 k\u0254\u0301n n\u00f9jl\u025b\u0301jl\u025b\u0301 e \u0256\u00f2 n\u00f9jl\u025b\u0301jl\u025b\u0301 e \u00e8 \u0256\u00f3 x\u00f2 \u0256\u00f2 n\u00f9jl\u025b\u0301jl\u025b\u0301 \u0254\u0301 j\u00ed l\u025b\u0301\u025b s\u00edn n\u00f9\u0256\u00e9 l\u025b\u0301\u025b.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test":"def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "prompt":"\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" E na m\u0254 wuntun \u0254, m\u0254 wuntun \u0256e\u0256e e na n\u0254 wuntun \u0254 m\u025b l\u025b \u00e9 (e na n\u0254 wuntun \u0254 m\u025b \u01ce)\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "canonical_solution":"    return len(set(string.lower()))\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" az\u0254\u0300n \u00e9l\u0254\u0301 \u0254\u0301 s\u00edn n\u01d4 e \u00e8 n\u0254 s\u0254\u0301 d\u00f3 wlan n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n"
    },
    {
        "prompt":"\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Kp\u0254\u0301n az\u0254n nabi \u00e8 na m\u0254 xw\u025b\u0256uxw\u025b e \u00e8 na m\u0254 \u0256\u00f2 xw\u025b\u0256uxw\u025b \u0254 m\u025b \u00e9. X\u00e0 x\u00f3 e n\u0254 j\u025b kp\u0254\u0301n l\u025b \u00e9.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "canonical_solution":"    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test":"def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" n\u01d4 e \u00e8 n\u0254 s\u0254\u0301 d\u00f3 l\u025b\u0301\u025b \u0254\u0301 w\u025b ny\u00ed n\u00f9kw\u00edn n\u00f9\u0256\u00e9 l\u025b\u0301\u025b t\u0254n e \u00e8 n\u0254 s\u0254\u0301 n\u00fa n\u00fa \u0254\u0301 j\u025b n\u00fa \u0254\u0301 j\u00ed. n\u01d4 e \u00e8 n\u0254 s\u0254\u0301 \u0256\u00f3 l\u025b\u0301\u025b w\u025b ny\u00ed: n\u00fa \u0254\u0301, \u0256okp\u00f3 \u0254\u0301, we \u0254\u0301, at\u0254n \u0254\u0301, \u025bn\u025b \u0254\u0301, at\u0254\u0301\u0254\u0301n \u0254\u0301, ayiz\u025b\u0301n \u0254\u0301, t\u025b\u0301nwe \u0254\u0301, t\u00e1nt\u0254n \u0254\u0301, t\u025bnn\u025b \u0254\u0301.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "canonical_solution":"    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" N\u00fam\u025b e \u00e8 na l\u025b\u0301 n\u00e1 \u00e9 (e na ny\u00ed w\u00e8 \u0256\u00f2 wuntun \u0254 m\u025b \u00e9) m\u025b \u0254, \u0256\u00e8 we e \u0256\u00f2 w\u00e8 l\u025b m\u025b \u00e9, bo l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "canonical_solution":"    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" N\u00fa \u00e8 na w'az\u0254\u030cn l\u025b\u0301\u025b s\u00edn n\u00f9xw\u00e1s\u00e1 (e n\u0254\u0301 \u0256\u00f3 w'az\u0254\u030cn w\u00e8 \u0256\u00f2 w\u016d \u00e9), \u00e8 na z\u00e1n n\u00f9xw\u00e1s\u00e1 \u00e8 \u00e8 w'az\u0254\u030cn l\u025b\u0301\u025b d\u00f3 \u00e9 j\u00ed, b\u0254 n\u00f9xw\u00e1s\u00e1 e \u0256\u00f2 kp\u025bv\u00ed h\u00fa b\u01d0 \u00e9 na h\u00faz\u00fa 0 b\u0254 n\u00f9xw\u00e1s\u00e1 e \u0256\u00f2 \u0256ax\u00f3 h\u00fa b\u01d0 \u00e9 na h\u00faz\u00fa 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "canonical_solution":"    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) \/ (max_number - min_number) for x in numbers]\n",
        "test":"def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n"
    },
    {
        "prompt":"from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter n\u01d4 e \u00e8 na wlan d\u00f3 python l\u025b \u00e9 s\u00edn n\u00f9xw\u025b l\u025b k\u025b\u0256\u025b j\u00ed\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in values if isinstance(x, int)]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n"
    },
    {
        "prompt":"\n\ndef strlen(string: str) -> int:\n    \"\"\" H\u0254n n\u00fa wuntun e \u00e8 n\u00e1 l\u025b\u0301 n\u00e1 \u00e9\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "canonical_solution":"    return len(string)\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n"
    },
    {
        "prompt":"\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" n\u00fa n\u00f9xw\u00e1s\u00f9n n \u0256\u00e9 \u0254, m\u0254 n\u00f9xw\u00e1s\u00f9n \u0256ax\u00f3 e m\u00e1 n \u0256\u00f3 w\u00e8 \u00e9, b\u0254 \u00e9 h\u00fa g\u01cen n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test":"def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" \u00d0\u00e8\u00f1\u00f3\u00ed\u00ee\u00ea \u00f1\u00ef\u00e8\u00f1\u00ea\u00e0 \u00ef\u00e5\u00f0\u00e2\u00fb\u00f5 \u00f4\u00e0\u00ea\u00f2\u00ee\u00f0\u00ee\u00e2 \u00e4\u00e0\u00ed\u00ed\u00ee\u00e3\u00ee \u00ef\u00ee\u00eb\u00ed\u00ee\u00ec\u00ee\u00f7\u00e8\u00ff \u00e2 \u00f0\u00e5\u00e7\u00f3\u00eb\u00fc\u00f2\u00e0\u00f2\u00e5 \u00ee\u00f2 \u00f1\u00e0\u00ec\u00ee\u00e3\u00ee \u00ec\u00e0\u00eb\u00ee\u00e3\u00ee \u00ea \u00e1\u00ee\u00eb\u00fc\u00f8\u00ee\u00ec\u00f3. \u00ca\u00e0\u00e6\u00e4\u00fb\u00e9 \u00e8\u00e7 \u00f4\u00e0\u00ea\u00f2\u00ee\u00f0\u00ee\u00e2 \u00e4\u00ee\u00eb\u00e6\u00e5\u00ed \u00e1\u00fb\u00f2\u00fc \u00f1\u00ef\u00e8\u00f1\u00e0\u00ed \u00f7\u00e8\u00f1\u00eb\u00ee\u00ec \u00f0\u00e0\u00e7, \u00f1\u00ee\u00ee\u00f2\u00e2\u00e5\u00f2\u00f1\u00f2\u00e2\u00f3\u00fe\u00f9\u00e8\u00ec \u00f7\u00e8\u00f1\u00eb\u00f3 \u00f0\u00e0\u00e7, \u00ea\u00e0\u00ea \u00ee\u00ed \u00ef\u00ee\u00ff\u00e2\u00eb\u00ff\u00e5\u00f2\u00f1\u00ff \u00e2 \u00f4\u00e0\u00ea\u00f2\u00ee\u00f0\u00e8\u00e7\u00e0\u00f6\u00e8\u00e8. \u00c2\u00fb\u00ef\u00f3\u00f1\u00ea\u00ed\u00f3\u00fe \u00f7\u00e8\u00f1\u00eb\u00ee \u00e4\u00ee\u00eb\u00e6\u00ed\u00ee \u00e1\u00fb\u00f2\u00fc \u00f0\u00e0\u00e2\u00ed\u00ee \u00ef\u00f0\u00ee\u00e4\u00f3\u00ea\u00f2\u00f3 \u00e2\u00f1\u00e5\u00f5 \u00f4\u00e0\u00ea\u00f2\u00ee\u00f0\u00ee\u00e2\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n \/\/= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test":"def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" \u0189\u00f2 n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 l\u025b\u0301\u025b t\u0254n l\u025b\u0301\u025b j\u00ed \u0254\u0301, \u0256\u00e8 n\u00f9\u0256\u00e9 l\u025b\u0301\u025b e n\u0254\u0301 j\u025b az\u0254n j\u025bji l\u025b\u0301\u025b b\u01d0 s\u00edin. H\u025bn n\u00f9\u0256\u00e9 l\u025b\u0301\u025b s\u00edn tito \u0256'ay\u01d0 l\u011b e \u00e8 ko bl\u00f3 gb\u0254n \u0256\u00f2 n\u01d4 e \u00e8 wlan l\u025b\u0301\u025b m\u025b \u00e9.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n"
    },
    {
        "prompt":"\n\ndef flip_case(string: str) -> str:\n    \"\"\" \u0189o w\u00e8m\u00e1 \u00e8 \u00e8 n\u00e1 w\u00e8m\u00e1 \u0254\u0301 m\u025b \u0254\u0301, y\u00ed w\u00e8m\u00e1 kp\u025bv\u00ed l\u025b\u0301\u025b d\u00f3 w\u00e8m\u00e1 \u0256ax\u00f3 j\u00ed, bo l\u025b\u0301 y\u00ed w\u00e8m\u00e1 \u0256ax\u00f3 l\u025b\u0301\u025b d\u00f3 w\u00e8m\u00e1 kp\u025bv\u00ed j\u00ed.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "canonical_solution":"    return string.swapcase()\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" D\u00e0n w\u00e8m\u00e1 l\u025b\u0301\u025b s\u00edn n\u00f9xw\u00e1s\u00e1 d\u00f3 w\u00e8m\u00e1 \u0256okpo m\u025b\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "canonical_solution":"    return ''.join(strings)\n",
        "test":"def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter n\u01d4 e \u00e8 wlan d\u00f3 wuntun l\u025b j\u00ed \u00e9 \u0256\u00f3 na n\u0254\u0301 s\u0254\u0301 wuntun e n\u0254 b\u025b\u0301 s\u00edn wuntun nuk\u0254n t\u0254n \u0256\u00e9 j\u00ed l\u025b\u0301\u025b k\u025b\u0301\u0256\u025b\u0301 d\u00f3.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if x.startswith(prefix)]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n"
    },
    {
        "prompt":"\n\ndef get_positive(l: list):\n    \"\"\"\u00d0\u0254 n\u00f9xw\u00e1s\u00e1 \u0256agbe l\u025b\u0301\u025b k\u025b\u0256\u025b\u0301 d\u00f3 n\u00f9xw\u00e1s\u00e1 \u0254\u0301 m\u025b.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "canonical_solution":"    return [e for e in l if e > 0]\n",
        "test":"def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n"
    },
    {
        "prompt":"\n\ndef is_prime(n):\n    \"\"\"E n\u0254 l\u025b\u0301 l\u025b\u0301 w\u00e1 y\u00ec n\u00fa n\u00f9\u0256\u00e9 \u0254\u0301' n\u00fa \u00e9 ny\u00ed n\u00f9\u0256\u00e9 b\u0254 \u00e8 n\u0254 yl\u0254 \u0256\u0254 n\u00f9\u0256\u00e9 \u01ce \u0254' \u00e9 n\u0254 ny\u00ed n\u01d4 e n\u0254 ny\u00ed n\u00f9\u0256\u00e9 \u01ce \u00e9.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "canonical_solution":"    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n"
    },
    {
        "prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    \u00d0\u00e0\u00f1\u00f7\u00e8\u00f2\u00fb\u00e2\u00e0\u00e5\u00f2 \u00ef\u00eb\u00ee\u00f2\u00ed\u00ee\u00f1\u00f2\u00fc \u00f1 \u00ea\u00ee\u00fd\u00f4\u00f4\u00e8\u00f6\u00e8\u00e5\u00ed\u00f2\u00e0\u00ec\u00e8 xs \u00e2 \u00f2\u00ee\u00f7\u00ea\u00e5 x. \u00e2\u00ee\u00e7\u00e2\u00f0\u00e0\u00f9\u00e0\u00e5\u00f2 xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) \/ 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test":"def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n"
    },
    {
        "prompt":"\n\ndef sort_third(l: list):\n    \"\"\"az\u0254\u0300 \u00e9l\u0254\u0301 n\u0254\u0301 s\u0254\u0301 n\u00f9xwl\u00e9 l b\u00f3 n\u0254\u0301 l\u025b\u0301 s\u0254\u0301 n\u00f9xwl\u00e9 l' b\u0254\u0300 l' c\u00ed l \u0256\u00f2 n\u00f9xwl\u00e9 l' e \u00e8 ma n\u0254\u0301 m\u00e1 \u0256\u00f3 at\u0254n j\u00ed \u01ce l\u025b\u0301\u025b m\u025b\u0300, b\u0254\u0300 n\u00f9xwl\u00e9 t\u0254n l\u025b\u0301\u025b \u0256\u00f2 n\u00f9xwl\u00e9 l e \u00e8 n\u0254 m\u00e1 \u0256\u00f3 at\u0254n j\u00ed l\u025b\u0301\u025b m\u025b\u0300 n\u0254\u0301 c\u00ed n\u00f9xwl\u00e9 l t\u0254n e \u00e8 n\u0254 m\u00e1 \u0256\u00f3 at\u0254n j\u00ed l\u025b\u0301\u025b t\u0254n l\u025b\u0301\u025b \u0256\u0254hun, c\u00f3 \u00e8 n\u0254 s\u0254\u0301 y\u011b \u0256\u00f3 al\u0254kpa m\u025b\u0300.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "canonical_solution":"    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n"
    },
    {
        "prompt":"\n\ndef unique(l: list):\n    \"\"\"Z\u0254\u0301n n\u01d4 e \u00e8 \u0256\u00e8 \u0256\u00f2 n\u00f9wlanwlan \u0256\u00e9 m\u025b \u00e9\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(list(set(l)))\n",
        "test":"def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n"
    },
    {
        "prompt":"\n\ndef max_element(l: list):\n    \"\"\"Z\u0254\u0301n n\u01d4 e \u0256\u00f2 n\u00f9jl\u025b\u0301jl\u025b\u0301 \u0254\u0301 m\u025b \u00e9 b\u01d0.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "canonical_solution":"    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n"
    },
    {
        "prompt":"\n\ndef fizz_buzz(n: int):\n    \"\"\"\u00d0\u0254 az\u0254n nab\u00ed e xawema 7 \u0254 na t\u0254\u0301n \u0256\u00f2 n\u00f9xwl\u00e9ma e \u0256\u00f2 kp\u00f2 h\u00fa n b\u0254 \u00e8 na m\u00e1 n\u00fa 11 al\u01d2 13 \u00e9 m\u025b \u00e9.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "canonical_solution":"    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test":"def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n"
    },
    {
        "prompt":"\n\ndef sort_even(l: list):\n    \"\"\"az\u0254\u0300 \u00e9l\u0254\u0301 n\u0254\u0301 y\u00ed n\u00f9xwl\u00e9 l bo n\u0254\u0301 l\u025b\u0301 y\u00ed n\u00f9xwl\u00e9 l' b\u0254\u0300 \u00e9 c\u00ed l' \u0256\u00f2 n\u00f9xwl\u00e9 l' l\u025b\u0301\u025b m\u025b\u0300, c\u00f3 n\u00f9xwl\u00e9 l' l\u025b\u0301\u025b \u0256\u00f2 n\u00f9xwl\u00e9 l' l\u025b\u0301\u025b m\u025b\u0300 \u0254\u0301, n\u00f9xwl\u00e9 l' l\u025b\u0301\u025b t\u0254n n\u0254\u0301 c\u00ed n\u00f9xwl\u00e9 l' l\u025b\u0301\u025b t\u0254n l\u025b\u0301\u025b \u0256\u0254hun, c\u00f3 \u00e8 n\u0254 \u0256\u00e8 ye \u0256\u00f3 al\u0254kpa m\u025b\u0300.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "canonical_solution":"    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n"
    },
    {
        "prompt":"\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    \u00e9 n\u0254\u0301 l\u025b\u0301 y\u00ed wuntun e \u00e8 wlan d\u00f3 wuntun j\u00ed \u00e9 d\u00f3 wuntun at\u0254n j\u00ed.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) \/\/ 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return encode_cyclic(encode_cyclic(s))\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n"
    },
    {
        "prompt":"\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib n\u0254 l\u025b\u0301 y\u00ed n\u00f9\u0256\u00e9 n\u00fa n-g\u0254\u0301 \u0254\u0301 d\u00f3 n\u00f9\u0256\u00e9 Fibonacci t\u0254n m\u025b\u0300 b\u0254 \u00e9 l\u0254 ny\u00ed n\u00f9\u0256\u00e9 n\u00fa prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "canonical_solution":"    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test":"def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n"
    },
    {
        "prompt":"\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero n\u0254 s\u0254\u0301 n\u00f9xwl\u00e9 l\u025b\u0301\u025b s\u00edn n\u00f9xwl\u00e9 d\u00f3 w'az\u0254\u030c. \u00e9 n\u0254 l\u025b\u0301 l\u025b\u0301 w\u00e1 True n\u00fa n\u00f9xwl\u00e9 l\u025b\u0301\u025b at\u0254n \u0256\u00f2 n\u00f9xwl\u00e9 \u0254\u0301 m\u025b b\u0254 n\u01d4 l\u025b\u0301\u025b n\u0254 s\u0254\u0301 n\u00fa \u0254\u0301 ny\u00ed n\u01d4 \u0256okpo \u0254\u0301, \u00e9 n\u0254 l\u025b\u0301 l\u025b\u0301 w\u00e1 False n\u00fa n\u00f9xwl\u00e9 l\u025b\u0301\u025b \u0256\u011b.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n"
    },
    {
        "prompt":"\n\ndef car_race_collision(n: int):\n    \"\"\"\n    mi kp\u0254\u0301n ali e ny\u00ed ali \u0256agbe e n\u0254\u0301 z\u0254\u0301n k\u00e1k\u00e1 b\u0254 \u00e8 n\u0254 m\u0254\u0300 \u01ce \u00e9 \u0256\u00e9. m\u0254\u030cto n n\u0254\u0301 \u0256o yiyi w\u025b s\u00edn amy\u0254xw\u00e9 y\u00ec \u0256is\u00edxw\u00e9; \u0256\u00f2 hwe \u0256okpo \u0254\u0301 nu \u0254\u0301, m\u0254\u030cto n \u0256evo l\u025b\u0301\u025b n\u0254\u0301 \u0256o yiyi w\u025b s\u00edn \u0256is\u00edxw\u00e9 y\u00ec amy\u0254xw\u00e9. m\u0254\u030cto we l\u025b\u0301\u025b b\u01d0 n\u0254\u0301 j\u025b z\u0254 n\u00fa ye\u0256\u00e9e. m\u0254\u030cto l\u025b\u0301\u025b b\u01d0 n\u0254\u0301 z\u0254n d\u00f3 gan \u0256okpo \u0254\u0301 m\u025b. \u00e8 n\u0254 \u0256\u0254 m\u0254\u030cto we l\u025b\u0301\u025b n\u0254\u0301 x\u00f2 ye\u0256\u00e9e hwe hwenu e m\u0254\u030cto e \u0256\u00f2 yiyi w\u025b s\u00edn amy\u0254xw\u00e9 y\u00ec \u0256is\u00edxw\u00e9 \u00e9 n\u0254\u0301 x\u00f2 m\u0254\u030cto e \u0256\u00f2 yiyi w\u025b s\u00edn \u0256is\u00edxw\u00e9 y\u00ec amy\u0254xw\u00e9 \u00e9. am\u0254\u030c, m\u0254\u030cto l\u025b\u0301\u025b \u0256\u00f3 hl\u0254nhl\u0254n bo n\u0254\u0301 sy\u025b\u0301n k\u00e1k\u00e1 b\u0254 \u00e8 n\u0254 m\u0254\u0300 ye\u0256\u00e9e hwe \u01ce; en\u025b wu \u0254\u0301, ye n\u0254\u0301\n    \"\"\"\n",
        "canonical_solution":"    return n**2\n",
        "test":"def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n"
    },
    {
        "prompt":"\n\ndef incr_list(l: list):\n    \"\"\"E\u0256es\u0254 l\u025b n\u0254 \u0256o n\u01d4 l\u025b m\u025b b\u0254 \u00e8 n\u0254 s\u0254\u0301 \u0256okpo d\u00f3 kpl\u00e9kpl\u00e9.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "canonical_solution":"    return [(e + 1) for e in l]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n"
    },
    {
        "prompt":"\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero n\u0254 s\u0254\u0301 n\u00f9xwl\u00e9 l\u025b\u0301\u025b s\u00edn n\u00f9xwl\u00e9 d\u00f3 w'az\u0254\u030cn. \u00e9 n\u0254 l\u025b\u0301 l\u025b\u0301 w\u00e1 n\u00fa True n\u00fa n\u00f9xwl\u00e9 l\u025b\u0301\u025b w\u00e8 \u0256\u00f2 n\u00f9xwl\u00e9 \u0254\u0301 m\u025b b\u0254 ye n\u0254 s\u0254\u0301 n\u00fa \u0254\u0301 ny\u00ed n\u01d4 w\u00e8, bo n\u0254 l\u025b\u0301 l\u025b\u0301 w\u00e1 n\u00fa False n\u00fa ye ma ny\u00ed m\u0254\u030c \u01ce \u0254\u0301.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n"
    },
    {
        "prompt":"\n\ndef change_base(x: int, base: int):\n    \"\"\"\u0189\u0254 n\u00f9xw\u00e1s\u00e1 n\u00fa n\u00f9xw\u00e1s\u00e1 x t\u0254n d\u00f3 n\u00f9xw\u00e1s\u00e1. l\u025b\u0301 k\u0254\u0300n wuntun s\u00edn n\u00f9jl\u025b\u0301jl\u025b\u0301 \u0256\u00f2 n\u00f9xw\u00e1s\u00e1 l\u025b\u0301\u025b y\u00ed\u0256\u00ed\u0256\u00f3 gudo. n\u00f9xw\u00e1s\u00e1 n\u00fa n\u00f9xw\u00e1s\u00e1 l\u025b\u0301\u025b \u0256\u00f2 kp\u025bv\u00ed h\u00fa 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "canonical_solution":"    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x \/\/= base\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n"
    },
    {
        "prompt":"\n\ndef triangle_area(a, h):\n    \"\"\"E na m\u0254\u0300 h\u00f9n akp\u00e1xw\u00e9 \u0256\u00e9 t\u0254n kpo f\u00ed e \u00e8 na l\u025b\u0301 l\u025b\u0301 k\u0254\u0301n n\u01d4 \u0256\u00e8 \u00e9 kpo n\u00fa at\u0254nv\u00ed \u0256\u00e9.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "canonical_solution":"    return a * h \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n"
    },
    {
        "prompt":"\n\ndef fib4(n: int):\n    \"\"\"Fib4 n\u00f9xw\u00e1s\u00e1 \u0254\u0301 ny\u00ed n\u00f9xw\u00e1s\u00e1 e c\u00ed Fibbonacci s\u00edn n\u00f9xw\u00e1s\u00e1 \u0254\u0301 \u0256\u0254hun b\u0254 \u00e8 \u0256\u00e8 gb\u0254n m\u0254\u030c: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). B\u00f2 wlan az\u0254\u0300 \u0256\u00e9 bo na d\u00f3 m\u0254 n\u01d4 \u00e8 n\u00e1 z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 n\u00e1 z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3 m\u0254 n\u01d4 \u00e8 na z\u00e1n d\u00f3\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "canonical_solution":"    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test":"def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n"
    },
    {
        "prompt":"\n\ndef median(l: list):\n    \"\"\"\u00d0\u00e8\u00f1\u00f3\u00ed\u00ee\u00ea \u00f1\u00f0\u00e5\u00e4\u00ed\u00e5\u00e9 \u00f1\u00f0\u00e5\u00e4\u00ed\u00e5\u00e9 \u00f1\u00f2\u00f3\u00ef\u00e5\u00ed\u00e8 \u00e8\u00e7 \u00f1\u00ef\u00e8\u00f1\u00ea\u00e0 l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "canonical_solution":"    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) \/\/ 2]\n    else:\n        return (l[len(l) \/\/ 2 - 1] + l[len(l) \/\/ 2]) \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(text: str):\n    \"\"\"\n    E n\u0254 kp\u0254\u0301n \u0256\u0254 x\u025b e \u00e8 n\u00e1 \u00e9 ny\u00ed palindrome \u00e0 j\u00ed\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n"
    },
    {
        "prompt":"\n\ndef modp(n: int, p: int):\n    \"\"\"Z\u0254\u0301n 2^n modulo p (w\u0254n n\u00fa n\u00f9jl\u025b\u0301kpo l\u025b).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "canonical_solution":"    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n"
    },
    {
        "prompt":"\n\ndef encode_shift(s: str):\n    \"\"\"\n    \u00e9 n\u0254\u0301 l\u025b\u0301 y\u00ed x\u00f3kw\u00edn \u00e8 \u00e8 wlan d\u00f3 w\u00e8m\u00e1 j\u00ed \u00e9 d\u00f3 w\u00e8m\u00e1 j\u00ed gb\u0254n n\u01d4w\u0254n\u00fam\u025b 5 j\u00ed.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n"
    },
    {
        "prompt":"\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels ny\u00ed az\u0254\u0300 e n\u0254 y\u00ed w\u00e8m\u00e1 b\u00f3 n\u0254 l\u025b\u0301 l\u025b\u0301 w\u00e8m\u00e1 e m\u025b w\u00e8m\u00e1 \u0256\u011b ma \u0256\u00e8 \u01ce \u00e9.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n"
    },
    {
        "prompt":"\n\ndef below_threshold(l: list, t: int):\n    \"\"\"E na l\u025b\u0301 l\u025b\u0301 w\u00e1 y\u00ec True n\u00fa n\u00f9jl\u025b\u0301kpo l l\u025b\u0301\u025b b\u01d0 \u0256\u00f2 f\u00ed e \u00e8 n\u0254 yl\u0254 \u0256\u0254 t \u00e9.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "canonical_solution":"    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n"
    },
    {
        "prompt":"\n\ndef add(x: int, y: int):\n    \"\"\"Z\u0254\u0301n x kp\u00f3d\u00f3 y kp\u00f3 \u0256\u00f3 kp\u0254\u0301\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "canonical_solution":"    return x + y\n",
        "test":"def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n"
    },
    {
        "prompt":"\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Kp\u0254\u0301n \u0256\u0254 x\u00f3kwin w\u00e8 \u0256\u00f3 wuntun \u0256okpo \u0254 \u00e0 j\u00ed.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "canonical_solution":"    return set(s0) == set(s1)\n",
        "test":"def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n"
    },
    {
        "prompt":"\n\ndef fib(n: int):\n    \"\"\"Z\u0254\u0301n n\u00fa n\u00fam\u025b\u0301 Fibonacci t\u0254n n-\u0254\u0301.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test":"def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets ny\u00ed wuntun \"<\" kpo \">\". l\u025b\u0301 k\u0254\u0301n True n\u00fa bracket \u00e8 n\u0254\u0301 hun \u0254\u0301 \u0256\u00f3 bracket \u00e8 n\u0254\u0301 s\u00fa \u0254\u0301.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n"
    },
    {
        "prompt":"\n\ndef monotonic(l: list):\n    \"\"\"Return True w\u025b ny\u00ed n\u01d4 l\u025b\u0301\u025b \u0256\u00f2 jij\u025bji w\u025b\u0300 al\u01d2 \u0256\u00f2 d\u00edn w\u025b\u0300.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "canonical_solution":"    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n"
    },
    {
        "prompt":"\n\ndef common(l1: list, l2: list):\n    \"\"\"E n\u0254 l\u025b\u0301 l\u025b\u0301 w\u00e1 n\u00fa n\u01d4 e ny\u00ed n\u01d4 \u0256okpo \u0254 b\u0254 \u00e8 \u0256\u00e8 \u0256\u00f3 vo n\u00fa l\u025b\u0301\u025b \u0256\u00f2 n\u00f9xa w\u00e8 m\u025b \u00e9.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "canonical_solution":"    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test":"def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n"
    },
    {
        "prompt":"\n\ndef largest_prime_factor(n: int):\n    \"\"\"\u00d0\u0254 n\u01d4\u0256\u00f3kp\u0254\u0301 n\u00f9g\u0254\u0301m\u0254n\u0254 t\u0254n \u0256ax\u00f3 hug\u01cen n t\u0254n.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test":"def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n"
    },
    {
        "prompt":"\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n ny\u00ed az\u0254\u0300 e n\u0254\u0301 s\u0254\u0301 n\u00f9\u0256\u00e9 l\u025b\u0301\u025b \u0256\u00f3 kp\u0254\u0301 s\u00edn 1 j\u025b n j\u00ed \u00e9.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "canonical_solution":"    return sum(range(n + 1))\n",
        "test":"def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets ny\u00ed wuntun \"(\" kpo \"\". l\u025b\u0301 l\u025b\u0301 k\u0254\u0301n true n\u00fa bracket \u00e8 n\u0254\u0301 hun \u0254\u0301 \u0256\u00f3 bracket \u00e8 n\u0254\u0301 s\u00fa \u0254\u0301.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n"
    },
    {
        "prompt":"\n\ndef derivative(xs: list):\n    \"\"\" xs n\u0254 \u0256e xl\u025b\u0301 n\u00f9xwl\u00e9 l\u025b\u0301\u025b n\u00fa n\u00f9xwl\u00e9 l\u025b\u0301\u025b. xs[0] + xs[1] * x + xs[2] * x^2 +....\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "canonical_solution":"    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n"
    },
    {
        "prompt":"\n\ndef fibfib(n: int):\n    \"\"\"FibFib n\u00f9xw\u00e1s\u00e1 \u0254\u0301' n\u00f9xw\u00e1s\u00e1 e c\u00ed Fibbonacci s\u00edn n\u00f9xw\u00e1s\u00e1 \u0254\u0301 \u0256\u0254hun \u00e9 w\u025b b\u0254 \u00e8 \u0256\u00e8 l\u011b: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test":"def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n"
    },
    {
        "prompt":"\nFIX = \"\"\"\nD\u01d2 kp\u0254\u0301n d'em\u025b j\u00ed.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef circular_shift(x, shift):\n    \"\"\"Z\u0254\u0301n n\u00f9jl\u025b\u0301kpo x t\u0254n l\u025b\u0301\u025b d\u00f3 l\u025b\u0301\u025b w\u00fa, z\u0254\u0301n n\u00f9jl\u025b\u0301kpo l\u025b\u0301\u025b d\u00f3 \u0256is\u00edxw\u00e9 n\u00fa z\u0254\u0301n j\u00ed, bo l\u025b\u0301 y\u00ed n\u00f9jl\u025b\u0301kpo \u0254\u0301 d\u00f3 wuntun \u0256\u00e9 m\u025b. N\u00fa z\u0254\u0301n j\u00ed h\u00fa n\u00f9jl\u025b\u0301kpo l\u025b\u0301\u025b \u0254\u0301, l\u025b\u0301 y\u00ed n\u00f9jl\u025b\u0301kpo l\u025b\u0301\u025b d\u00f3 g\u01d4do.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "canonical_solution":"    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef digitSum(s):\n    \"\"\"az\u0254\u030c Wlan az\u0254\u0300 e n\u0254 s\u0254\u0301 wuntun wuntun \u0256\u00e9 d\u00f3 wlan n\u01d4 \u00e9 n\u0254 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 s\u00edn n\u00f9\u0256\u00e9 l\u025b\u0301\u025b s\u00edn n\u00f9\u0256\u00e9 l\u025b\u0301\u025b => 0 digitSum{\"} => 131 digitSum{\"} => 67 digitSum{\"} => 69 digitSum{\"} => 131 digitSum{\"} => 153\n    \"\"\"\n",
        "canonical_solution":"    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef fruit_distribution(s,n):\n    \"\"\"\n    \u00f0\u00f2 az\u0254\u030c \u00e9l\u0254\u0301 m\u025b \u0254\u0301, \u00e8 na s\u0254\u0301 n\u00f9jl\u025b\u0301kpo \u0256\u00e9 d\u00f3 wlan n\u00f9jl\u025b\u0301kpo e n\u0254 xl\u025b\u0301 at\u00edn kp\u00f3 at\u00ednla kp\u00f3 e \u00e8 m\u00e1 d\u00f3 at\u00ednkw\u00ednkw\u00edn \u0256\u00e9 m\u025b \u00e9. At\u00ednkw\u00edn \u00e9l\u0254\u0301 \u0256\u00f3 at\u00edn, at\u00ednla kp\u00f3d\u00f3 mang\u00f3 kp\u00f3. \u00c8 na s\u0254\u0301 n\u00f9jl\u025b\u0301kpo e n\u0254 xl\u025b\u0301 at\u00ednla kp\u00f3d\u00f3 at\u00ednla kp\u00f3 b\u01d0 \u00e9 kp\u00f3d\u00f3 n\u00f9jl\u025b\u0301kpo e n\u0254 xl\u025b\u0301 at\u00ednla kpo at\u00ednla kpo b\u01d0 \u00e9 \u0254\u0301, \u00e8 na l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 v\u0254\u0301 at\u00ednla s\u00edn at\u00ednkw\u00edn e \u0256\u00f2 at\u00ednkw\u00edn \u0254\u0301 m\u025b \u00e9. kp\u0254\u0301nd\u00e9w\u00fa: at\u00edn_wlan \"5\" at\u00ednla kpo 6\" at\u00ednla kpo 19) -> 19 - 5 - 6 = 8 at\u00ednla_wlan\"0 at\u00ednla kpo 1 at\u00ednla kpo\",3) ->\n    \"\"\"\n",
        "canonical_solution":"    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n"
    },
    {
        "prompt":"\ndef pluck(arr):\n    \"\"\"\n    \"\u00c9e \u00e8 na wlan n\u01d4 e n\u0254 xl\u025b\u0301 \u0256\u0254 at\u00edn \u0256\u00e9 s\u00edn ala \u0256\u00e9 w\u025b b\u0254 n\u00f9jl\u025b\u0301n e ny\u00ed n\u01d4mas\u0254gbe l\u025b \u00e9 \u0256\u00f2 at\u00edn \u0254\u0301 m\u025b \u0254\u0301, az\u0254\u030c towe w\u025b ny\u00ed \u0256\u0254 a na y\u00ed n\u00f9jl\u025b\u0301n l\u025b\u0301\u025b \u0256okp\u00f3 bo na l\u025b\u0301 w\u00e1. N\u01d4jl\u025b\u0301n e \u00e8 y\u00ed \u0254\u0301 \u0256\u00f3 na ny\u00ed n\u00f9jl\u025b\u0301n e \u0256\u00f3 akw\u025b\u0301 e ny\u00ed n\u01d4mas\u0254gbe \u00e9 kp\u025bv\u00ed b\u01d0 \u00e9. N\u00fa \u00e8 m\u0254 n\u00f9jl\u025b\u0301n g\u00e8g\u011b b\u0254 akw\u025b\u0301 e ny\u00ed n\u01d4mas\u0254gbe \u00e9 \u0256okp\u00f3 \u0254\u0301, \u00e8 na l\u025b\u0301 w\u00e1 n\u00fa n\u00f9jl\u025b\u0301n e \u0256\u00f3 ayixw\u025b kp\u025bv\u00ed b\u01d0 \u00e9. N\u01d4jl\u025b\u0301n e \u00e8 y\u00ed \u0254\u0301 \u0256\u00f3 na l\u025b\u0301 w\u00e1 \u0256\u00f2 n\u00f9jl\u025b\u0301n l\u025b\u0301 m\u025b, [smallest_value, its index]. N\u00fa akw\u025b\u0301 e ny\u00ed n\u01d4mas\u0254gbe l\u025b\u0301\u025b \u0256\u011b ma \u0256\u00f2 at\u00edn \u0254 m\u025b \u01ce al\u01d2\n    \"\"\"\n",
        "canonical_solution":"    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "canonical_solution":"    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test":"def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n"
    },
    {
        "prompt":"\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "canonical_solution":"    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "canonical_solution":"    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)\/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n"
    },
    {
        "prompt":"\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u00e2 -> False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u00e2 -> False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u00e2 -> True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u00e2 -> True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "canonical_solution":"    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n"
    },
    {
        "prompt":"\ndef smallest_change(arr):\n    \"\"\"\n    \u00e9 \u0256\u00f2 m\u0254\u030c c\u00f3, n\u01d4 e \u00e8 n\u0254 yl\u0254 \u0256\u0254 palindromic \u0254\u0301 w\u025b ny\u00ed n\u01d4 e \u00e8 n\u0254 x\u00e0 d\u00f3 gudo kpo nuk\u0254n kpo gb\u0254n \u0256okpo \u0254 \u00e9. \u00d0\u00f2 huzuhuzu \u0256okpo m\u025b \u0254, \u00e8 sixu \u0256y\u0254 n\u01d4\u0256ogb\u025b \u0256okpo d\u00f3 n\u01d4\u0256ogb\u025b \u0256evo l\u025b b\u01d0 m\u025b. C\u0254\u0301n: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
        "canonical_solution":"    ans = 0\n    for i in range(len(arr) \/\/ 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n"
    },
    {
        "prompt":"\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u00e2 -> []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u00e2 -> ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u00e2 -> ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u00e2 -> ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u00e2 -> ['4']\n    '''\n",
        "canonical_solution":"    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n"
    },
    {
        "prompt":"\ndef is_multiply_prime(a):\n    \"\"\"\u00d0\u00e8\u00f1\u00f3\u00e9\u00f2 \u00f4\u00f3\u00ed\u00ea\u00f6\u00e8\u00fe, \u00ea\u00ee\u00f2\u00ee\u00f0\u00e0\u00ff \u00e2\u00ee\u00e7\u00e2\u00f0\u00e0\u00f9\u00e0\u00e5\u00f2 \u00ef\u00f0\u00e0\u00e2\u00e8\u00eb\u00fc\u00ed\u00ee, \u00e5\u00f1\u00eb\u00e8 \u00f3\u00ea\u00e0\u00e7\u00e0\u00ed\u00ed\u00fb\u00e9 \u00ed\u00ee\u00ec\u00e5\u00f0 \u00ff\u00e2\u00eb\u00ff\u00e5\u00f2\u00f1\u00ff \u00f0\u00e0\u00f1\u00ef\u00f0\u00ee\u00f1\u00f2\u00f0\u00e0\u00ed\u00e5\u00ed\u00e8\u00e5\u00ec 3 \u00ef\u00e5\u00f0\u00e2\u00fb\u00f5 \u00ed\u00ee\u00ec\u00e5\u00f0\u00ee\u00e2, \u00e0 \u00e2\u00ee\u00f2 \u00e8\u00ed\u00f2\u00e5\u00f0\u00e5\u00f1\u00ed\u00ee. \u00c7\u00ed\u00e0\u00ff, \u00f7\u00f2\u00ee (a) \u00ed\u00e8\u00e6\u00e5 100: \u00cf\u00f0\u00e8\u00ec\u00e5\u00f0: is_multiply_prime(30) == \u00cf\u00f0\u00e0\u00e2\u00e8\u00eb\u00fc\u00ed\u00ee 30 = 2 * 3 * 5\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n"
    },
    {
        "prompt":"\ndef is_simple_power(x, n):\n    \"\"\"az\u0254 towe w\u025b ny\u00ed \u0256\u0254 a na wlan az\u0254\u0300 e na l\u025b\u0301 l\u025b\u0301 w\u00e1 n\u00fa n\u00f9jl\u025b\u0301kpo x ny\u00ed n\u00f9jl\u025b\u0301kpo kp\u00f2 n\u00fa n b\u0254 \u00e9 na l\u025b\u0301 w\u00e1 n\u00fa n\u01d4ma\u0256in\u01d4 \u0256\u00f2 nin\u0254m\u025b \u0256evo l\u025b m\u025b \u00e9. x ny\u00ed n\u01d4ma\u0256in\u01d4 kp\u00f2 n\u00fa n n\u00fa n**int=x \u00d0i kp\u0254\u0301nd\u00e9w\u00fa \u0254: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) => false is_simple_power(5, 3) => false\n    \"\"\"\n",
        "canonical_solution":"    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "canonical_solution":"    a = abs(a)\n    return int(round(a ** (1. \/ 3))) ** 3 == a\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n"
    },
    {
        "prompt":"\ndef hex_key(num):\n    \"\"\"\u00c8 by\u0254 mi \u0256\u0254 mi ni wlan az\u0254\u030c e n\u0254 y\u00ed xixazadecimalu n\u00f9xw\u00e1s\u00e1 \u0256\u00e9 d\u00f3 wuntun \u0256\u00e9 m\u025b bo n\u0254 xa xixazadecimalu n\u00f9xw\u00e1s\u00e1 e ny\u00ed n\u00f9jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301 (n\u00fam\u025b\u0300 n\u00f9jl\u025b\u0301jl\u025b\u0301, al\u01d2 n\u00f9jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301, w\u025b ny\u00ed n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9xw\u00e1s\u00e1 e h\u00fa 1 b\u0254 \u00e9 ny\u00ed n\u00f9jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301 n\u00f9xw\u00e1s\u00e1 w\u00e8 e \u0256\u00f2 kp\u025bv\u00ed h\u00fa \u00e9 t\u0254n \u01ce \u00e9) \u00e9. Xixazadecimalu n\u00f9xw\u00e1s\u00e1 l\u025b\u0301\u025b w\u025b ny\u00ed 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. N\u00fam\u025b\u0301n\u00fa xixazadecimalu l\u025b\u0301\u025b w\u025b ny\u00ed 2, 3, 5, 7, 11, 13, 17,... \u00c9 \u0256\u00f2 m\u0254\u030c c\u00f3, mi\n    \"\"\"\n",
        "canonical_solution":"    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n"
    },
    {
        "prompt":"\ndef decimal_to_binary(decimal):\n    \"\"\"\u00e8 na na mi n\u00f9xw\u00e1s\u00e1 \u0256\u00f2 wuntun w\u01d2-v\u00ed \u0254\u0301 m\u025b\u0300 b\u0254 az\u0254\u030c mit\u0254n w\u025b ny\u00ed \u0256\u0254 mi na y\u00ed d\u00f3 wuntun w\u00e8v\u00ed \u0254\u0301 m\u025b\u0300. az\u0254\u0300 \u0254\u0301 \u0256\u00f3 na l\u025b\u0301 l\u025b\u0301 w\u00e1 n\u00fa wuntun \u0256okp\u00f3, b\u0254 wuntun \u0256okpo \u0256okpo n\u0254\u0301 xl\u025b\u0301 wuntun w\u00e8v\u00ed \u0254\u0301. wuntun \u0256okpo \u0256okpo \u0256\u00f2 wuntun \u0254\u0301 m\u025b \u0254\u0301 na ny\u00ed '0' al\u01d2 '1'. \u00e8 na l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 w\u00e1 n\u00fa wuntun w\u00e8v\u00ed 'db' \u0256\u00f2 wuntun \u0254\u0301 s\u00edn b\u01d0b\u025b\u0301m\u025b kpo f\u00f3 t\u0254n kpo. wuntun w\u00e8v\u00ed l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 \u0256\u00f2 fin\u025b bo na d'al\u0254 mi \u0256\u00f2 wuntun \u0254\u0301 m\u025b\u0300. kp\u0254\u0301nd\u00e9w\u00fa: decimal_to_binary ((15) # l\u025b\u0301 l\u025b\u0301 w\u00e1 n\u00fa \"db1111db\" decimal_to_binary32) # l\u025b\u0301 l\u025b\u0301 w\u00e1 n\u00fa \"db100000db\n    \"\"\"\n",
        "canonical_solution":"    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef is_happy(s):\n    \"\"\"\u00e8 na s\u0254\u0301 wuntun s. az\u0254\u030c towe w\u025b ny\u00ed \u0256\u0254 a na kp\u0254\u0301n \u0256\u0254 wuntun \u0254 ny\u0254\u0301 \u00e0 j\u00ed \u01ce. wuntun \u0254 ny\u0254\u0301 n\u00fa \u00e9 \u0256\u00f2 3 j\u00ed \u0256\u00f2 hwe\u0256el\u025bnu b\u0254 wuntun 3 e \u0256\u00f2 wuntun \u0254 m\u025b l\u025b\u0301\u025b b\u01d0 n\u0254 gb\u0254n vo n\u00fa ye\u0256\u00e9\u00e9. kp\u0254\u0301n kp\u0254\u0301n: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False\n    \"\"\"\n",
        "canonical_solution":"    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n"
    },
    {
        "prompt":"\ndef numerical_letter_grade(grades):\n    \"\"\"az\u0254m\u03b5 gudo t\u0254n \u0254 w\u025b b\u0254 m\u025bsi \u0254 \u0256o na na nu az\u0254wan\u00fa l\u025b. m\u025bsi \u0254 \u0256o na bl\u00f3 az\u0254wan\u00fa t\u0254n e n\u0254 na nu az\u0254wan\u00fa l\u025b \u00e9 w\u025b. tagba \u0256okpo \u0254 w\u025b ny\u00ed \u0256\u0254 \u00e9 b\u00fa wuntun e \u00e9 n\u0254 d\u00f3 na nu az\u0254wan\u00fa l\u025b \u00e9. \u00e9 na we az\u0254wan\u00fa l\u025b t\u0254n l\u025b s\u00edn wuntun bo na wlan az\u0254wan\u00fa e n\u0254 na nu az\u0254wan\u00fa l\u025b t\u0254n l\u025b \u00e9 gb\u0254n wuntun el\u0254 m\u025b: az\u0254wan\u00fa l\u025b t\u0254n 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
        "canonical_solution":"\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef prime_length(string):\n    \"\"\"Wlan az\u0254\u0300 e n\u0254 y\u00ed n\u00f9jl\u025b\u0301jl\u025b\u0301 xw\u025b \u0256\u00e9 b\u00f3 n\u0254 l\u025b\u0301 l\u025b\u0301 y\u00ed True n\u00fa xw\u025b \u0254 ny\u00ed n\u00f9jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 \u0256\u00e9 al\u01d2 False n\u00fa \u00e9 ma ny\u00ed m\u0254\u030c \u01ce \u0254  kp\u0254\u0301nd\u00e9w\u00fa prime_length{'Hello') == True prime_length{'abcdcba') == True prime_length{'kittens') == True prime_length{'orange') == False\n    \"\"\"\n",
        "canonical_solution":"    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n"
    },
    {
        "prompt":"\ndef starts_one_ends(n):\n    \"\"\"\n    N\u00fa \u00e8 na w'az\u0254nkp\u0254n \u0256agbe n \u0254, na l\u025b\u0301 y\u00ed n\u00f9jl\u025b\u0301n n\u00f9jl\u025b\u0301n \u0256agbe n-kw\u025b\u0301n t\u0254n e b\u025b\u0301 al\u01d2 na f\u00f3 \u0256\u00f2 1 \u00e9 t\u0254n.\n    \"\"\"\n",
        "canonical_solution":"    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(N):\n    \"\"\"n\u00f9xwl\u00e9 \u0256agbe \u0256\u00e9 N \u0254, na l\u025b\u0301 y\u00ed n\u00f9xwl\u00e9 t\u0254n l\u025b\u0301\u025b s\u00edn n\u00f9xwl\u00e9 \u0254\u0301 d\u00f3 n\u00f9xwl\u00e9 w\u00e8 j\u00ed. kp\u0254\u0301nd\u00e9w\u00fa n\u00fa N = 1000 \u0254, n\u00f9xwl\u00e9 l\u025b\u0301\u025b n\u00e1 ny\u00ed 1 b\u0254 n\u01d4 \u00e8 n\u00e1 t\u0254\u0301n \u0254\u0301 n\u00e1 ny\u00ed \"1\". n\u00fa N = 150 \u0254\u0301, n\u00f9xwl\u00e9 l\u025b\u0301\u025b n\u00e1 ny\u00ed 6 b\u0254 n\u01d4 \u00e8 n\u00e1 t\u0254\u0301n \u0254\u0301 n\u00e1 ny\u00ed \"110\". n\u00fa N = 147 \u0254\u0301, n\u00f9xwl\u00e9 l\u025b\u0301\u025b n\u00e1 ny\u00ed 12 b\u0254 n\u01d4 e \u00e8 n\u00e1 t\u0254\u0301n \u0254\u0301 n\u00e1 ny\u00ed \"1100\". n\u00f9xwl\u00e9 l\u025b\u0301\u025b: @N n\u00f9xwl\u00e9 l\u025b\u0301\u025b: 0 \u00e2\u2030\u00a4 N \u00e2\u2030\u00a4 10000. n\u01d4 \u00e8 n\u00e1 t\u0254\u0301n \u0254\u0301: n\u00f9xwl\u00e9 w\u00e8 j\u00ed \u0254\u0301 s\u00edn xw\u025b\n    \"\"\"\n",
        "canonical_solution":"    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n"
    },
    {
        "prompt":"\ndef add(lst):\n    \"\"\"E na bo na w'az\u0254\u030c n\u00fa n\u00f9jl\u025b\u0301jl\u025b\u0301 e ny\u00ed n\u00f9jl\u025b\u0301jl\u025b\u0301 \u01ce l\u025b\u0301\u025b \u0254\u0301, w'az\u0254\u030c n\u00fa n\u00f9jl\u025b\u0301jl\u025b\u0301 e ny\u00ed n\u01d4 e \u0256\u00f2 n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e ny\u00ed n\u01d4 e \u00e9 ny\u00ed n\u01d4 e \u00e9 ny\u00ed \u00e9 ny\u00ed n\u01d4 e \u00e9 ny\u00ed \u00e9 \n    \"\"\"\n",
        "canonical_solution":"    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n"
    },
    {
        "prompt":"\ndef anti_shuffle(s):\n    \"\"\"\n    wlan az\u0254\u0300 e n\u0254 y\u00ed w\u00e8m\u00e1 \u0256\u00e9 b\u00f3 n\u0254\u0301 l\u025b\u0301 l\u025b\u0301 y\u00ed gb\u00e8 n\u00fa w\u00e8m\u00e1 \u0254\u0301 s\u00edn n\u00f9xw\u00e1s\u00e1 \u0256\u00e9. W\u00e8m\u00e1 \u0254\u0301 s\u00edn n\u00f9xw\u00e1s\u00e1 w\u025b ny\u00ed w\u00e8m\u00e1 e m\u025b \u00e8 n\u0254 s\u0254\u0301 x\u00f3kw\u00edn l\u025b\u0301\u025b b\u01d0 \u0256\u00f3 t\u025bn y\u011bt\u0254n m\u025b, b\u0254 \u00e8 n\u0254 s\u0254\u0301 x\u00f3kw\u00edn l\u025b\u0301\u025b b\u01d0 \u0256\u00f3 t\u025bn y\u011bt\u0254n m\u025b, b\u0254 \u00e8 n\u0254 s\u0254\u0301 x\u00f3kw\u00edn l\u025b\u0301\u025b b\u01d0 \u0256\u00f3 t\u025bn y\u011bt\u0254n m\u025b \u0256\u00f2 n\u00f9xw\u00e1s\u00e1 \u0254\u0301 m\u025b. Wema: A \u0256\u00f3 na h\u025bn x\u00f3kw\u00edn l\u025b\u0301\u025b kpo w\u00e8m\u00e1 bl\u011b l\u025b\u0301\u025b kpo s\u00edn tito \u0254\u0301 \u0256\u00f3 t\u025bn yet\u0254n m\u025b \u0256\u00f2 n\u01d4 e \u00e8 n\u0254 yl\u0254\u0301 \u0256\u0254 ascii l\u025b\u0301\u025b m\u025b. Wema: anti_shuffle ((('Hi') n\u0254 l\u025b\u0301 l\u025b\u0301 y\u00ed gb\u00e8 n\u00fa 'Hi' anti_shuffle (('hello') n\u0254 l\u025b\u0301 y\u00ed gb\u00e8 n\u00fa 'eh\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef get_row(lst, x):\n    \"\"\"\n    \u00c8 na w\u00e8m\u00e1 2 m\u025b\u0300si t\u0254n, \u0256i n\u00f9jl\u025b\u0301jl\u025b\u0301 e \u00e8 s\u0254\u0301 d\u00f3 m\u025b\u0300, b\u0254 \u00e9 c\u00ed m\u025b\u0301tli \u0256\u0254hun, am\u0254\u030c, \u00e9 c\u00ed m\u025b\u0301tli \u0256\u0254hun \u01ce, x\u00f2 l\u025b\u0301\u025b b\u01d0 \u0254\u0301, \u00e8 sixu \u0256\u00f3 n\u00f9jl\u025b\u0301jl\u025b\u0301 k\u0254\u0301n vovo. N\u00fa \u00e8 na w\u00e8m\u00e1 lst, kp\u00f3d\u00f3 n\u00f9jl\u025b\u0301jl\u025b\u0301 x kp\u00e1n \u0254\u0301, \u00e8 na m\u0254 n\u00f9jl\u025b\u0301jl\u025b\u0301 x \u0256\u00f2 n\u00f9jl\u025b\u0301jl\u025b\u0301 \u0254\u0301 m\u025b, b\u00f3 na l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 x\u00f2 l\u025b\u0301\u025b b\u01d0 \u0254\u0301, \u00e8 na l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 w\u00e1 l\u025b\u0301 l\u025b, [(x1, y1), (x2, y2)...] b\u0254 n\u01d4jl\u025b\u0301jl\u025b\u0301 l\u025b b\u01d0 \u0254\u0301 na ny\u00ed n\u01d4jl\u025b\u0301jl\u025b\u0301 - (w\u00e8m\u00e1, k\u0254\u0301n), b\u0254\n    \"\"\"\n",
        "canonical_solution":"    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef sort_array(array):\n    \"\"\"\n    \u00d0\u00e0\u00e7\u00f0\u00e0\u00e1\u00ee\u00f2\u00ea\u00e0 \u00e1\u00eb\u00ee\u00ea\u00e0 \u00ed\u00e5\u00ef\u00f0\u00e5\u00f0\u00fb\u00e2\u00ed\u00fb\u00f5 \u00ef\u00ee\u00eb\u00ee\u00e2\u00fb\u00f5 \u00ed\u00ee\u00ec\u00e5\u00f0\u00ee\u00e2, \u00e2\u00ee\u00e7\u00e2\u00f0\u00e0\u00f9\u00e5\u00ed\u00e8\u00e5 \u00ea\u00ee\u00ed\u00f2\u00f0\u00ee\u00eb\u00ff \u00e7\u00e0\u00e4\u00e0\u00ed\u00ed\u00ee\u00e3\u00ee \u00e1\u00eb\u00ee\u00ea\u00e0 \u00ef\u00ee\u00f1\u00eb\u00e5 \u00f1\u00f4\u00ee\u00f0\u00ec\u00e8\u00f0\u00ee\u00e2\u00e0\u00ed\u00e8\u00ff, \u00e2\u00fb \u00f1\u00f4\u00ee\u00f0\u00ec\u00e8\u00f0\u00ee\u00e2\u00e0\u00ed\u00e8\u00e5 \u00e7\u00e0\u00e4\u00e0\u00ed\u00ed\u00ee\u00e3\u00ee \u00e1\u00eb\u00ee\u00ea\u00e0 \u00e2 \u00e2\u00ee\u00f1\u00f1\u00f2\u00e0\u00ed\u00ee\u00e2\u00e8\u00f2\u00e5\u00eb\u00fc\u00ed\u00ee\u00ec \u00ef\u00ee\u00f0\u00ff\u00e4\u00ea\u00e5, \u00e5\u00f1\u00eb\u00e8 \u00f1\u00f3\u00ec\u00ec\u00e0 ((\u00ef\u00e5\u00f0\u00e2\u00fb\u00e9 \u00e8\u00ed\u00e4\u00e5\u00ea\u00f1\u00ed\u00fb\u00e9 \u00f6\u00e5\u00ed\u00f2\u00f0, \u00ef\u00ee\u00f1\u00eb\u00e5\u00e4\u00ed\u00e8\u00e9 \u00e8\u00ed\u00e4\u00e5\u00ea\u00f1\u00ed\u00fb\u00e9 \u00f6\u00e5\u00ed\u00f2\u00f0) \u00ff\u00f0\u00ea\u00e8\u00e9, \u00e8\u00eb\u00e8 \u00f1\u00f4\u00ee\u00f0\u00ec\u00e8\u00f0\u00ee\u00e2\u00e0\u00ed\u00e8\u00e5 \u00e2 \u00f1\u00ed\u00e8\u00e6\u00e0\u00fe\u00f9\u00e5\u00ec \u00ef\u00ee\u00f0\u00ff\u00e4\u00ea\u00e5, \u00e5\u00f1\u00eb\u00e8 \u00f1\u00f3\u00ec\u00ec\u00e0 ((\u00ef\u00e5\u00f0\u00e2\u00fb\u00e9 \u00e8\u00ed\u00e4\u00e5\u00ea\u00f1\u00ed\u00fb\u00e9 \u00f6\u00e5\u00ed\u00f2\u00f0, \u00ef\u00ee\u00f1\u00eb\u00e5\u00e4\u00ed\u00e8\u00e9 \u00e8\u00ed\u00e4\u00e5\u00ea\u00f1\u00ed\u00fb\u00e9 \u00f6\u00e5\u00ed\n    \"\"\"\n",
        "canonical_solution":"    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef encrypt(s):\n    \"\"\"bl\u01d2 az\u0254\u0300 encrypt \u0256\u00e9 b\u0254 \u00e9 n\u0254 s\u0254\u0301 w\u00e8m\u00e1 w\u00e8m\u00e1 \u0256\u00e9 d\u00f3 w'az\u0254nm\u025b j\u00ed b\u00f3 n\u0254\u0301 l\u025b\u0301 y\u00ed w\u00e8m\u00e1 w\u00e8m\u00e1 \u0254\u0301 t\u0254n d\u00f3. W\u00e8m\u00e1 \u0254\u0301 \u0256\u00f3 n\u00e1 l\u025b\u0301 y\u00ed d\u00f3 l\u00ecn j\u00ed b\u0254 w\u00e8m\u00e1 l\u025b\u0301\u025b n\u0254\u0301 j\u025b w\u00e8 j\u00ed d\u00f3 t\u025bn w\u00e8 j\u00ed. C\u0254\u0301n: encrypt (('hi') n\u0254 l\u025b\u0301 y\u00ed w\u00e8m\u00e1 'lm' encrypt (('asdfghjkl') n\u0254 l\u025b\u0301 y\u00ed w\u00e8m\u00e1 'ewhjklnop' encrypt (('gf') n\u0254 l\u025b\u0301 y\u00ed w\u00e8m\u00e1 'kj' encrypt (('et') n\u0254 l\u025b\u0301 y\u00ed w\u00e8m\u00e1 'ix')\n    \"\"\"\n",
        "canonical_solution":"    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef next_smallest(lst):\n    \"\"\"\n    \u00e8 na w'az\u0254\u030c n\u00fa we n\u00fa n\u00f9jl\u025b\u0301kp\u00e1 l\u025b\u0301\u025b. Wlan az\u0254\u0300 next_smallest (() e na l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301\n    \"\"\"\n",
        "canonical_solution":"    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_bored(S):\n    \"\"\"\n    \u00c8 na s\u0254\u0301 x\u00f3kwin l\u025b\u0301\u025b d\u00f3 n\u00f9\u0256\u00e9 m\u025b, b\u0254 az\u0254\u030c e a na wa \u00e9 w\u025b ny\u00ed \u0256\u0254 a na xa xw\u025b e \u00e8 n\u0254 d\u00f3 n\u00fa m\u025b l\u025b\u0301\u025b. Xw\u025b w\u025b ny\u00ed x\u00f3kwin e n\u0254 b\u025b\u0301 x\u00f3kwin \"I\" \u0254\u0301. Xw\u025b l\u025b\u0301\u025b n\u0254\u0301 \u0256\u00f3 dogb\u00f3 n\u00fa x\u00f3kwin l\u025b\u0301\u025b w\u025b ny\u00ed '.', '?' al\u01d2 '!'. \u00d0i kp\u0254\u0301nd\u00e9w\u00fa \u0254:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "canonical_solution":"    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u00e2 -> True\n    \n    any_int(3, 2, 2) \u00e2 -> False\n\n    any_int(3, -2, 1) \u00e2 -> True\n    \n    any_int(3.6, -2.2, 2) \u00e2 -> False\n  \n\n    \n    '''\n",
        "canonical_solution":"    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef encode(message):\n    \"\"\"\n    Wl\u03b5 az\u0254 e n\u0254 s\u0254\u0301 w\u025bn \u0256\u00e9, bo n\u0254 wlan \u0256\u00f2 m\u0254\u030c j\u00ed bo n\u0254 \u0256y\u0254\u0301 x\u00f3kwin l\u025b b\u01d0, bo n\u0254 s\u0254\u0301 x\u00f3kwin e \u0256\u00f2 w\u025bn \u0254 m\u025b l\u025b \u00e9 b\u01d0 \u0256\u00f3 w\u03b5n e n\u0254 t\u0254\u0301n \u0256\u00f2 w\u03b5n e \u0256\u00f2 w\u03b5n \u0254 nuk\u0254n n\u00fa w\u03b5n \u0254 \u0256\u00f2 wlanwl\u025bnwl\u025bn e \u00e8 n\u0254 wlan \u0256\u00f2 gl\u025bkigbe m\u025b \u00e9 m\u025b.\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\n\ndef skjkasdkd(lst):\n    \"\"\"\u00e8 na w'az\u0254\u030c n\u00fa n\u00f9jl\u025b\u0301n \u0254\u0301 l\u025b\u0301\u025b. A \u0256\u00f3 n\u00e1 m\u0254 n\u00f9jl\u025b\u0301n taj\u00ed e h\u00fa b\u01d0 \u00e9, bo na l\u025b\u0301 y\u00ed n\u00f9jl\u025b\u0301n taj\u00ed e \u0256\u00f2 n\u00f9jl\u025b\u0301n \u0254\u0301 m\u025b l\u025b\u0301\u025b s\u00edn xwi. Kp\u0254\u0301nd\u00e9w\u00fa: N\u00fa lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] \u0254\u0301, \u00e8 \u0256\u00f3 n\u00e1 m\u0254 10 N\u00fa lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] \u0254\u0301, \u00e8 \u0256\u00f3 n\u00e1 m\u0254 25 N\u00fa lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] \u0254\u0301, \u00e8 \u0256\u00f3 n\u00e1 m\u0254 13 N\u00fa lst = [0,724,32,71,99,3\n    \"\"\"\n",
        "canonical_solution":"    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n"
    },
    {
        "prompt":"\ndef check_dict_case(dict):\n    \"\"\"\n    \u00e9 n\u00e1 l\u025b\u0301 w\u00e1 ny\u00ed True n\u00fa n\u01d4 e \u00e8 wlan d\u00f3 wuntun l\u025b\u0301\u025b b\u01d0 \u0254\u0301 ny\u00ed wuntun l\u025b\u0301\u025b \u0256\u00f2 wema kp\u025bv\u00ed l\u025b\u0301\u025b m\u025b, al\u01d2 n\u01d4 e \u00e8 wlan d\u00f3 wuntun l\u025b\u0301\u025b b\u01d0 \u0254\u0301 ny\u00ed wuntun l\u025b\u0301\u025b \u0256\u00f2 wema \u0256ax\u00f3 l\u025b\u0301\u025b m\u025b, \u00e9 m\u00e1 ny\u00ed m\u0254\u030c \u01ce \u0254\u0301, \u00e9 n\u00e1 l\u025b\u0301 w\u00e1 ny\u00ed False. Function should return False is the given dictionary is empty. Kp\u0254\u0301nd\u00e9w\u00fa: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) should return True. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False. check\n    \"\"\"\n",
        "canonical_solution":"    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n"
    },
    {
        "prompt":"\ndef count_up_to(n):\n    \"\"\"Z\u0254\u0300 n\u00f9\u0256\u00e9 b\u00f3 n\u00e1 y\u00ed n\u00f9\u0256\u00e9 l\u025b\u0301\u025b b\u00f3 n\u00e1 l\u025b\u0301 y\u00ed n\u00f9\u0256\u00e9 l\u025b\u0301\u025b s\u00edn n\u00f9\u0256\u00e9 l\u025b\u0301\u025b. N\u01ce kp\u0254\u0301n n\u01d4 e ny\u00ed n\u00f9\u0256\u00e9 l\u025b\u0301\u025b \u00e9.\n    \"\"\"\n",
        "canonical_solution":"    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n"
    },
    {
        "prompt":"\ndef multiply(a, b):\n    \"\"\"Z\u011b n\u00f9jl\u025b\u0301n w\u00e8 b\u00f3 n\u00e1 d\u00f3 m\u0254 n\u01d4 e \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2 n\u01d4 \u00e8 \u00e8 \u00e8 \u00e8 \u00e8 \u00e8 \u00e8 n\u0254 m\u0254 \u0256\u00f2\n    \"\"\"\n",
        "canonical_solution":"    return abs(a % 10) * abs(b % 10)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n"
    },
    {
        "prompt":"\ndef count_upper(s):\n    \"\"\"\n    n\u00f9xw\u00e1s\u00e1 s \u0256\u00e9 \u0254\u0301, kp\u0254\u0301n n\u00f9xw\u00e1s\u00e1 x\u00f3kw\u00edn \u0256ax\u00f3 l\u025b\u0301\u025b t\u0254n \u0256\u00f2 n\u01d4xixa l\u025b\u0301\u025b m\u025b. kp\u0254\u0301n kp\u0254\u0301n: count_upper (('aBCdEf') n\u0254 l\u025b\u0301 k\u0254 n\u00fa 1 count_upper (('abcdefg') n\u0254 l\u025b\u0301 k\u0254 n\u00fa 0 count_upper (('dBBE') n\u0254 l\u025b\u0301 k\u0254 n\u00fa 0\n    \"\"\"\n",
        "canonical_solution":"    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For Exampleclosest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "canonical_solution":"    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n"
    },
    {
        "prompt":"\ndef make_a_pile(n):\n    \"\"\"\n    \u00e9 n\u00e1 ny\u00ed n\u00f9xwl\u00e9 \u0256agbe \u0256\u00e9 \u0254\u0301, \u00e8 \u0256\u00f3 n\u00e1 bl\u00f3 aw\u01d0nnyakanm\u025b kp\u00f2 n. Aw\u01d0nnyakanm\u025b nuk\u0254nt\u0254n \u0254\u0301 \u0256\u00f3 aw\u01d0nnyakanm\u025b n. At\u0254xw\u025b e \u0256\u00f2 aw\u01d0nnyakanm\u025b e b\u0254 d'\u00e9 j\u00ed \u00e9 w\u025b ny\u00ed: - at\u0254xw\u025b e b\u0254 d'\u00e9 j\u00ed \u00e9, n\u00fa n ny\u00ed at\u0254xw\u025b \u0254\u0301. - at\u0254xw\u025b e b\u0254 d'\u00e9 j\u00ed \u00e9, n\u00fa n ny\u00ed at\u0254xw\u025b \u0254\u0301. Hwl\u025b\u030cn at\u0254xw\u025b e \u0256\u00f2 aw\u01d0nnyakanm\u025b \u0256okp\u00f3 \u0256okp\u00f3 m\u025b \u00e9 \u0256\u00f2 n\u00f9jl\u025b\u030cn \u0256\u00e9 m\u025b, f\u00ed e n\u01d4 e \u0256\u00f2 n\u01d4jl\u025b\u030cn i m\u025b \u00e9 n\u0254te n\u00fa at\u0254xw\u025b e \u0256\u00f2 aw\u01d0nnyakanm\u025b \u0254\u0301 (i+1) \u00e9. Kp\u0254\u0301nd\u00e9w\u00fa:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    return [n + 2*i for i in range(n)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef words_string(s):\n    \"\"\"\n    \u00e8 na s\u0254\u0301 x\u00f3kw\u00edn \u0256\u00e9 l\u025b\u0301\u025b d\u00f3 wlan x\u00f3kw\u00edn \u0254\u0301 n\u00e1 b\u0254 \u00e8 na s\u0254\u0301 xw\u025b\u0301 d\u00f3 \u0256\u00f3 vo n\u00fa x\u00f3kw\u00edn \u0254\u0301, b\u0254 \u00e8 na s\u0254\u0301 x\u00f3kw\u00edn \u0254\u0301 \u0256\u00f3 vo n\u00fa x\u00f3kw\u00edn \u0254\u0301, b\u0254 \u00e8 na s\u0254\u0301 x\u00f3kw\u00edn \u0254\u0301 \u0256\u00f3 vo n\u00fa x\u00f3kw\u00edn \u0254\u0301, b\u0254 \u00e8 na s\u0254\u0301 x\u00f3kw\u00edn \u0254\u0301 \u0256\u00f3 vo n\u00fa x\u00f3kw\u00edn \u0254\u0301, b\u0254 \u00e8 na s\u0254\u0301 x\u00f3kw\u00edn \u0254\u0301 \u0256\u00f3 vo n\u00fa x\u00f3kw\u00edn \u0254\u0301.\n    \"\"\"\n",
        "canonical_solution":"    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n"
    },
    {
        "prompt":"\ndef choose_num(x, y):\n    \"\"\"n\u00f9xw\u00e1s\u00e1 w\u00e8 w\u025b ny\u00ed x kp\u00f3d\u00f3 y kp\u00f3 b\u0254 \u00e9 n\u0254\u0301 l\u025b\u0301 n\u00fa n\u00f9xw\u00e1s\u00e1 e ny\u00ed n\u00f9xw\u00e1s\u00e1 \u0256ax\u00f3 \u0256\u00f2 f\u00ed e \u00e8 n\u0254 yl\u0254\u0301 \u0256\u0254 [x, y] \u00e9. N\u00fa n\u00f9xw\u00e1s\u00e1 m\u0254\u030chunk\u0254t\u0254n ma \u0256\u00f2 f\u00ed \u01ce \u0254, n\u00f9xw\u00e1s\u00e1 \u0254 na l\u025b\u0301 l\u025b\u0301 n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa n\u00fa\n    \"\"\"\n",
        "canonical_solution":"    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n"
    },
    {
        "prompt":"\ndef rounded_avg(n, m):\n    \"\"\"\u00e8 na na we n\u00f9xw\u025b\u0301 e ny\u00ed n\u00f9xw\u025b\u0301 \u0256agbe l\u025b\u0301\u025b n kpo m kpo, b\u0254 az\u0254\u030c towe w\u025b ny\u00ed \u0256\u0254 a na \u0256\u00f3 n\u00f9xw\u025b\u0301 e ny\u00ed n\u00f9xw\u025b\u0301 e ny\u00ed n\u00f9xw\u025b\u0301 e ny\u00ed n\u00f9xw\u025b\u0301 e n\u0254 j\u025b s\u00edn n j\u00ed j\u025b m j\u00ed \u00e9 s\u00edn av\u03b5j\u03b5. l\u025b\u0301 l\u025b\u030c d\u00f3 n\u00f9xw\u025b\u0301 e \u0256\u00f2 s\u025b\u0301d\u00f3 \u0254 m\u025b \u00e9 bo y\u00ed d\u00f3 n\u00f9xw\u025b\u0301 wexw\u025b\u0301 e ny\u00ed n\u00f9xw\u025b\u0301 wexw\u025b\u0301 e \u0256\u00f2 s\u025b\u0301d\u00f3 \u0254 m\u025b \u00e9 j\u00ed. enyi n h\u00fa m \u0254, l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 k\u0254 n\u00fa -1.\n    \"\"\"\n",
        "canonical_solution":"    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation\/(m - n + 1)))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n"
    },
    {
        "prompt":"\ndef unique_digits(x):\n    \"\"\"n\u00f9xwl\u00e9 \u0256agbe l\u025b\u0301\u025b x. l\u025b\u0301 v\u0254\u0301 n\u00f9xwl\u00e9 e \u00e8 \u0256\u00e8 l\u025b\u0301\u025b b\u01d0 s\u00edn n\u00f9xwl\u00e9 e \u00e8 \u0256\u00e8 l\u025b\u0301\u025b \u00e9. Akp\u00e1: \u00c8 \u0256\u00f3 na \u0256\u00e8 n\u00f9xwl\u00e9 e \u00e8 \u0256\u00e8 l\u025b\u0301\u025b \u0256\u00f2 tito j\u00ed.\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "canonical_solution":"    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef by_length(arr):\n    \"\"\"\n    \u00d0\u00e0\u00e7\u00f0\u00e0\u00e1\u00ee\u00f2\u00e0\u00ed\u00ed\u00fb\u00e9 \u00e1\u00eb\u00ee\u00ea \u00ef\u00ee\u00eb\u00ee\u00e2\u00fb\u00f5 \u00f7\u00e8\u00f1\u00eb\u00ee\u00e2, \u00f1\u00f4\u00ee\u00f0\u00ec\u00e8\u00f0\u00ee\u00e2\u00e0\u00f2\u00fc \u00ef\u00ee\u00eb\u00ee\u00e2\u00fb\u00e5 \u00f7\u00e8\u00f1\u00eb\u00fb, \u00ea\u00ee\u00f2\u00ee\u00f0\u00fb\u00e5 \u00ed\u00e0\u00f5\u00ee\u00e4\u00ff\u00f2\u00f1\u00ff \u00ec\u00e5\u00e6\u00e4\u00f3 1 \u00e8 9 \u00e2\u00ea\u00eb\u00fe\u00f7\u00e8\u00f2\u00e5\u00eb\u00fc\u00ed\u00ee, \u00ef\u00f0\u00e5\u00e2\u00f0\u00e0\u00f9\u00e0\u00f2\u00fc \u00e2 \u00f0\u00e5\u00e7\u00f3\u00eb\u00fc\u00f2\u00e0\u00f2\u00e5 \u00e8 \u00e7\u00e0\u00ec\u00e5\u00ed\u00e8\u00f2\u00fc \u00ea\u00e0\u00e6\u00e4\u00f3\u00fe \u00ed\u00ee\u00ec\u00e5\u00f0\u00f3 \u00f1\u00e2\u00ee\u00e8\u00ec \u00f1\u00ee\u00ee\u00f2\u00e2\u00e5\u00f2\u00f1\u00f2\u00e2\u00f3\u00fe\u00f9\u00e8\u00ec \u00e8\u00ec\u00e5\u00ed\u00e5\u00ec \u00e8\u00e7 \"\u00ce\u00e4\u00e8\u00ed\", \"\u00c4\u00e2\u00e5\", \"\u00d2\u00f0\u00e8\", \"\u00d2\u00f0\u00e8\", \"\u00cb\u00e5\u00f2\u00ee\", \"\u00cb\u00e5\u00f2\u00ee\", \"\u00cb\u00e5\u00f2\u00ee\", \"\u00cb\u00e5\u00f2\u00ee\". \u00cf\u00ee \u00ef\u00f0\u00e8\u00ec\u00e5\u00f0\u00f3: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> \u00f1\u00f4\u00ee\u00f0\u00ec\u00e8\u00f0\u00ee\u00e2\u00e0\u00f2\u00fc arr -> [1, 1, 2, 3, 4, 5, 8] -> \u00f1\u00f4\u00ee\u00f0\u00ec\u00e8\u00f0\u00ee\u00e2\u00e0\u00f2\u00fc arr -> [8, 5, 4, 3, 2, 2,\n    \"\"\"\n",
        "canonical_solution":"    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n"
    },
    {
        "prompt":"\ndef f(n):\n    \"\"\" \u00d0\u00e5\u00e0\u00eb\u00e8\u00e7\u00e8\u00f0\u00ee\u00e2\u00e0\u00f2\u00fc \u00f4\u00f3\u00ed\u00ea\u00f6\u00e8\u00fe f, \u00ea\u00ee\u00f2\u00ee\u00f0\u00e0\u00ff \u00ef\u00f0\u00e8\u00ed\u00e8\u00ec\u00e0\u00e5\u00f2 n \u00ea\u00e0\u00ea \u00ef\u00f0\u00e8\u00ec\u00e5\u00f0, \u00e8 \u00ef\u00f0\u00e8\u00e2\u00ee\u00e4\u00e8\u00f2 \u00f1\u00ef\u00e8\u00f1\u00ee\u00ea \u00f1\u00f3\u00ec\u00ec\u00fb n, \u00f2\u00e0\u00ea\u00e8\u00ec, \u00f7\u00f2\u00ee \u00e7\u00ed\u00e0\u00f7\u00e5\u00ed\u00e8\u00e5 \u00fd\u00eb\u00e5\u00ec\u00e5\u00ed\u00f2\u00e0 \u00ed\u00e0 \u00ed\u00e8\u00e6\u00ed\u00e5\u00e9 \u00ef\u00eb\u00ee\u00f1\u00ea\u00ee\u00f1\u00f2\u00e8 i \u00ff\u00e2\u00eb\u00ff\u00e5\u00f2\u00f1\u00ff \u00f4\u00f3\u00ed\u00ea\u00f6\u00e8\u00ee\u00ed\u00e0\u00eb\u00fc\u00ed\u00fb\u00ec \u00ed\u00e8\u00e6\u00ed\u00e5\u00e9 \u00ef\u00eb\u00ee\u00f1\u00ea\u00ee\u00f1\u00f2\u00e8 i, \u00e5\u00f1\u00eb\u00e8 \u00ed\u00e8\u00e6\u00ed\u00e8\u00e9 \u00ed\u00e8\u00e6\u00ed\u00e8\u00e9, \u00e8\u00eb\u00e8 \u00f1\u00f3\u00ec\u00ec\u00ee\u00e9 \u00f7\u00e8\u00f1\u00eb\u00ee\u00e2 \u00f3 1 \u00e4\u00ee \u00ed\u00e8\u00e6\u00ed\u00e5\u00e9 \u00ef\u00eb\u00ee\u00f1\u00ea\u00ee\u00f1\u00f2\u00e8 i. i \u00ed\u00e0\u00f7\u00e8\u00ed\u00e0\u00e5\u00f2\u00f1\u00ff \u00f3 1. \u00f4\u00f3\u00ed\u00ea\u00f6\u00e8\u00ee\u00ed\u00e0\u00eb\u00fc\u00ed\u00fb\u00e9 \u00ed\u00e8\u00e6\u00ed\u00e8\u00e9 - \u00fd\u00f2\u00ee \u00ef\u00f0\u00ee\u00f7\u00e8\u00f2\u00e0\u00ed\u00e8\u00e5 \u00f7\u00e8\u00f1\u00eb\u00ee\u00e2 \u00f3 1 \u00e4\u00ee \u00ed\u00e8\u00e6\u00ed\u00e5\u00e9 \u00ef\u00eb\u00ee\u00f1\u00ea\u00ee\u00f1\u00f2\u00e8 (1 * 2 *\n    \"\"\"\n",
        "canonical_solution":"    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n"
    },
    {
        "prompt":"\ndef even_odd_palindrome(n):\n    \"\"\"\n    \u011be \u00e8 na w'az\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254n\n    \"\"\"\n",
        "canonical_solution":"    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef count_nums(arr):\n    \"\"\"\n    \u00d0\u0254 az\u0254\u0300 count_nums e n\u0254 y\u00ed n\u00f9xwl\u00e9 l\u025b s\u00edn n\u00f9xwl\u00e9 \u0256\u00e9 bo n\u0254 l\u025b\u0301 l\u025b\u0301 n\u00fa n\u00f9xwl\u00e9 l\u025b\u0301\u025b e n\u00f9xwl\u00e9 l\u025b\u0301\u025b t\u0254n s\u00edn n\u00f9xwl\u00e9 l\u025b\u0301\u025b n\u0254\u0301 ny\u00ed 0 => 0 \u00e9. N\u00fa n\u00f9xwl\u00e9 \u0256\u00e9 ny\u00ed n\u01d4ag\u0254\u0301 \u01ce \u0254\u0301, n\u00f9xwl\u00e9 t\u0254n nuk\u0254nt\u0254n e \u00e8 wlan d\u00f3 wlan j\u00ed \u00e9 na ny\u00ed n\u01d4ag\u0254\u0301 \u01ce: kp\u0254\u0301n -123 \u0256\u00f3 wlan d\u00f3 wlan j\u00ed -1, 2 kpo 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef move_one_ball(arr):\n    \"\"\"E \u0256o na m\u0254 nu\u0256e\u0256e b\u0254 e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e n\u0254 nyi nu\u0256e e\n                \n    \"\"\"\n",
        "canonical_solution":"    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n"
    },
    {
        "prompt":"\ndef exchange(lst1, lst2):\n    \"\"\"\u00d0i n\u00f9xw\u00e1s\u00e1 w\u00e8, bo na kp\u0254\u0301n \u0256\u0254 \u00e8 na kp\u00e9w\u00fa bo \u0256y\u0254 n\u00f9xw\u00e1s\u00e1 l\u025b\u0301\u025b \u0256\u00f2 n\u00f9xw\u00e1s\u00e1 w\u00e8 l\u025b\u0301\u025b m\u025b bo bl\u00f3 b\u0254 lst1 na ny\u00ed n\u00f9xw\u00e1s\u00e1 n\u00f9xw\u00e1s\u00e1 l\u025b\u0301\u025b t\u0254n kpowun. N\u00fa \u00e8 na kp\u00e9w\u00fa bo \u0256y\u0254 n\u00f9xw\u00e1s\u00e1 l\u025b\u0301\u025b \u0256\u00f2 lst1 kpo lst2 kpo t\u025bntin bo bl\u00f3 b\u0254 n\u01d4xw\u00e1s\u00e1 lst1 l\u025b\u0301\u025b b\u01d0 na ny\u00ed n\u00f9xw\u00e1s\u00e1 l\u025b\u0301\u025b \u0254, y\u00ed gb\u00e8. N\u00fa \u00e8 ma kp\u00e9w\u00fa bo \u0256y\u0254 n\u01d4xw\u00e1s\u00e1 lst1 kpo lst2 kpo t\u025bntin bo bl\u00f3 b\u0254 n\u01d4xw\u00e1s\u00e1 lst1 l\u025b\u0301\u025b b\u01d0 na ny\u00ed n\u00f9xw\u00e1s\u00e1 l\u025b\u0301\u025b \u0254, y\u00ed gb\u00e8. N\u00fa \u00e8 ma kp\u00e9w\u00fa \u01ce \u0254, y\u00ed gb\u00e8. N\u00fa \u00e8 na bl\u00f3 \u0254, y\u00ed gb\u00e8.\n    \"\"\"\n",
        "canonical_solution":"    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n"
    },
    {
        "prompt":"\ndef histogram(test):\n    \"\"\"E \u0256o x\u025b e n\u0254 \u0256e wuntun e n\u0254 \u0256e wuntun e \u0256o wuntun e \u0256o wuntun \u0254 m\u025b l\u025b \u00e9 xl\u025b\u0301 w\u025b \u0254, wuntun e n\u0254 \u0256e wuntun e m\u025b wuntun \u0254 n\u0254 l\u025b\u0301 j\u025b kp\u0254\u0301n b\u0254 \u00e8 n\u0254 l\u025b\u0301 wuntun \u0254 \u0254 s\u00edn n\u00f9xw\u00e1s\u00f9n \u0254\u0301. N\u00fa wuntun l\u025b\u0301\u025b \u0256\u011b n\u0254 l\u025b\u0301 wuntun \u0254\u0301, wuntun l\u025b\u0301\u025b b\u01d0 w\u025b \u00e8 n\u0254 l\u025b\u0301 wuntun \u0254\u0301.\n\n    \"\"\"\n",
        "canonical_solution":"    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef reverse_delete(s,c):\n    \"\"\"az\u0254\u030c \u00e8 na m\u01d0 w\u00e8m\u00e1 w\u00e8 s kpo c kpo, a \u0256\u00f3 na \u0256\u00e8 w\u00e8m\u00e1 l\u025b\u0301\u025b b\u01d0 \u0256\u00f2 s m\u025b e c\u00ed w\u00e8m\u00e1 c \u0256\u00e9 l\u025b\u0301\u025b \u0256\u0254hun \u00e9, bo kp\u0254\u0301n \u0256\u0254 w\u00e8m\u00e1 e \u00e8 m\u0254 \u00e9 ny\u00ed palindrome \u00e0. w\u00e8m\u00e1 \u00e8 n\u0254 yl\u0254 \u0256\u0254 palindrome enyi \u00e9 n\u0254 m\u0254 n\u01d4 \u0256okpo \u0254 \u0256\u00f2 gudo kpo nuk\u0254n kpo. A \u0256\u00f3 na l\u025b\u0301 k\u0254 n\u00fa w\u00e8m\u00e1 e \u00e8 m\u0254 \u00e9 kpo n\u01d4 e ny\u00ed n\u01d4 \u00e8 m\u0254 \u00e9 kpo. kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n\n    \"\"\"\n",
        "canonical_solution":"    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test":"def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n"
    },
    {
        "prompt":"\ndef odd_count(lst):\n    \"\"\"E na s\u0254\u0301 wuntun l\u025b\u0301\u025b s\u00edn n\u00f9xw\u00e1s\u00e1, b\u0254 wuntun \u0256okpo \u0256okpo n\u0254\u0301 \u0256\u00f3 n\u00f9jl\u025b\u0301jl\u025b\u0301 kpowun, bo na l\u025b\u0301 l\u025b\u0301 s\u0254\u0301 wuntun l\u025b\u0301\u025b s\u00edn n\u00f9xw\u00e1s\u00e1.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "canonical_solution":"    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minSubArraySum(nums):\n    \"\"\"\n    \u0189\u0254 n\u00f9xwl\u00e9ma n\u00f9xwl\u00e9ma n\u00f9xwl\u00e9ma t\u0254n l\u025b\u0301\u025b s\u00edn n\u00f9xwl\u00e9ma \u0256\u00e9 \u0254, kp\u0254\u0301n n\u00f9xwl\u00e9ma n\u00fa n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma n\u00fa n\u00f9xwl\u00e9ma \u0256\u00e9 \u01ce l\u025b\u0301\u025b s\u00edn n\u00f9xwl\u00e9ma kp\u025bv\u00ed b\u01d0 \u00e9.  kp\u0254\u0301n minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6\n    \"\"\"\n",
        "canonical_solution":"    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n"
    },
    {
        "prompt":"\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    \u00c8 na mi k\u0254\u0301nkp\u00f3 \u00e8 \u00e8 \u0256\u00f2 t\u0254 \u0254\u0301 m\u025b \u00e9. G\u01cen \u0256okpo \u0256okpo n\u0254\u0301 xl\u025b\u0301 t\u0254 \u0256okpo, b\u0254 m\u025b \u0256okp\u00f3 \u0256okp\u00f3 n\u0254\u0301 xl\u025b\u0301 t\u0254 \u0256okpo. G\u01cen \u0256okpo \u0256okpo \u0256\u00f3 t\u0254jihun e \u00e8 n\u0254 d\u00f3 t\u0254 \u0254\u0301 m\u025b \u00e9, b\u0254 t\u0254jihun l\u025b\u0301\u025b b\u01d0 s\u00edn n\u01d4jl\u025b\u0301jl\u025b\u0301 n\u0254\u0301 s\u0254gbe. Az\u0254\u030c towe w\u025b ny\u00ed \u0256\u0254 a na z\u00e1n t\u0254jihun l\u025b\u0301\u025b b\u00f3 n\u00e1 d\u00f3 t\u0254jihun l\u025b\u0301\u025b. N\u0254 s\u0254\u0301 az\u0254n e a na d\u00f3 t\u0254jihun l\u025b\u0301\u025b n\u00e1 \u00e9. Kp\u0254\u0301n 1: G\u01cen: G\u01cen: G\u01cen: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 G\u01cen: 6 G\u01cen: G\u01cen: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 G\n    \"\"\"\n",
        "canonical_solution":"    return sum([math.ceil(sum(arr)\/capacity) for arr in grid])\n",
        "test":"def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef sort_array(arr):\n    \"\"\"\n    \u00d0\u00e9\u00f3\u00f4\u00e5\u00fd\u00f9 \u00fc\u00f4\u00e9 \u00ef\u00e9 \u00f0\u00f1\u00fe\u00f4\u00e5\u00f2 \u00e5\u00f0\u00e9\u00eb\u00ef\u00e3\u00dd\u00f2 \u00f0\u00ef\u00f5 \u00e8\u00e1 \u00f0\u00f1\u00ef\u00f3\u00f6\u00dd\u00f1\u00ef\u00f5\u00ec\u00e5 \u00e5\u00df\u00ed\u00e1\u00e9 \u00f3\u00e1\u00ed \u00f4\u00ef \u00f0\u00f1\u00f9\u00df \u00f4\u00e7\u00f2 \u00f0\u00e5\u00f1\u00e9\u00ef\u00f7\u00de\u00f2.\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef select_words(s, n):\n    \"\"\"\u011be \u00e8 n\u00e1 w\u00e8m\u00e1 s kpo n\u00f9xw\u00e1s\u00f9n n\u00f9j\u0254n\u01d4 t\u0254n n kpo \u0254, \u00e8 by\u0254 \u0256\u0254 a ni bl\u00f3 az\u0254\u030c \u0256\u00e9 b\u0254 \u00e9 na l\u025b\u0301 l\u025b\u0301 w\u00e8m\u00e1 s l\u025b\u0301\u025b b\u01d0 s\u00edn n\u00f9jl\u025b\u0301jl\u025b\u0301 e m\u025b \u00e8 n\u0254 m\u0254 x\u00f3kwin n l\u025b\u0301\u025b \u00e9, b\u0254 x\u00f3kwin en\u025b l\u025b\u0301\u025b n\u00e1 t\u0254\u0301n \u0256\u00f2 w\u00e8m\u00e1 s m\u025b. N\u00fa w\u00e8m\u00e1 s ma \u0256\u00f2 n\u01d4t\u00ed \u01ce \u0254, az\u0254\u030c \u0254 na l\u025b\u0301 l\u025b\u0301 w\u00e8m\u00e1 m\u025b ma \u0256\u00e8 \u01ce \u00e9. Akp\u00e1: a sixu \u0256\u0254 w\u00e8m\u00e1 \u0254 \u0256\u00f3 wuntun l\u025b kpo t\u025bn l\u025b kpo kpowun. Kp\u0254\u0301nd\u00e9w\u00fa: select_words \"Mary had a little lamb\", 4) ==> [\"little\"] select_words \"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"] select_words \"simple white space\", 2) ==> [] select_words \"\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n"
    },
    {
        "prompt":"\ndef get_closest_vowel(word):\n    \"\"\"\u00e8 na wlan x\u00f3 \u0256\u00e9 n\u00fa we. az\u0254\u030c towe w\u025b ny\u00ed \u0256\u0254 a na m\u0254 x\u00f3kwin e s\u025bkp\u0254\u0301 we \u0256\u00f2 x\u00f3kwin \u0254 s\u00edn akp\u00e1xw\u00e9 \u0256is\u00ed \u0254\u0301 j\u00ed \u00e9 (w\u0254n\u00fam\u025b \u00e8 n\u0254 z\u00e1n d\u00f3 wlan x\u00f3kwin l\u025b\u0301\u025b \u00e9). x\u00f3kwin e \u0256\u00f2 nuk\u0254n kpo gudo kpo \u00e9 n\u0254\u0301 n\u0254 kp\u0254\u0301n \u01ce. bo l\u025b\u0301 l\u025b\u0301 w\u00e1 wlan x\u00f3kwin e m\u025b x\u00f3kwin \u0256\u011b ma \u0256\u00f2 \u01ce \u00e9. a sixu \u0256\u0254 \u0256\u0254 wlan x\u00f3kwin e \u00e8 wlan \u00e9 k\u00fan \u0256\u00f3 wlan e \u00e8 wlan d\u00f3 wlan x\u00f3kwin l\u025b\u0301\u025b j\u00ed \u00f3. kp\u0254\u0301n kp\u0254\u0301n kp\u0254\u0301n: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_\n    \"\"\"\n",
        "canonical_solution":"    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "canonical_solution":"    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n"
    },
    {
        "prompt":"\ndef maximum(arr, k):\n    \"\"\"\n    \u00d0\u00e0\u00e7\u00f0\u00e5\u00f8\u00e5\u00ed\u00ed\u00fb\u00e9 \u00e1\u00eb\u00ee\u00ea arr \u00e8 \u00ef\u00ee\u00eb\u00ed\u00fb\u00e9 \u00e1\u00eb\u00ee\u00ea k, \u00ef\u00f0\u00e8\u00e2\u00ee\u00e4\u00e8\u00f2 \u00f1\u00f4\u00ee\u00f0\u00ec\u00e8\u00f0\u00ee\u00e2\u00e0\u00ed\u00ed\u00fb\u00e9 \u00f1\u00ef\u00e8\u00f1\u00ee\u00ea \u00f1 \u00f1\u00ea\u00ee\u00f0\u00ee\u00f1\u00f2\u00fc\u00fe k \u00e8 \u00ec\u00e0\u00ea\u00f1\u00e8\u00ec\u00e0\u00eb\u00fc\u00ed\u00fb\u00ec\u00e8 k \u00f7\u00e8\u00f1\u00eb\u00e0\u00ec\u00e8 \u00e2 arr. \u00cf\u00f0\u00e8\u00ec\u00e5\u00f01: \u00c2\u00f5\u00ee\u00e4: arr = [-3, -4, 5], k = 3 \u00cf\u00f0\u00e8\u00ec\u00e5\u00f0: [-4, -3, 5] \u00cf\u00f0\u00e8\u00ec\u00e5\u00f02: \u00c2\u00f5\u00ee\u00e4: arr = [4, -4, 4], k = 2 \u00cf\u00f0\u00e8\u00ec\u00e5\u00f0: [4, 4] \u00cf\u00f0\u00e8\u00ec\u00e5\u00f03: \u00c2\u00f5\u00ee\u00e4: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 \u00cf\u00f0\u00e8\u00ec\u00e5\u00f0: [2] \u00c7\u00ed\u00e0\u00f7\u00e5\u00ed\u00e8\u00e5: 1.\n    \"\"\"\n",
        "canonical_solution":"    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n"
    },
    {
        "prompt":"\ndef solution(lst):\n    \"\"\"\u0189\u00f2 n\u00f9xwl\u00e9 l\u025b\u0301\u025b e ny\u00ed n\u00f9\u0256\u00e9 \u01ce l\u025b\u0301\u025b \u0254\u0301, l\u025b\u0301 k\u0254 n\u00fa n\u00f9xwl\u00e9 l\u025b\u0301\u025b e \u0256\u00f2 t\u025bn m\u025b l\u025b\u0301\u025b b\u01d0 s\u00edn n\u01d4 e ny\u00ed n\u01d4m\u025b\u0301 l\u025b\u0301\u025b \u00e9. Kp\u0254\u0301nd\u00e9w\u00fa n\u00f9xwll\u00e9 \u0254\u0301 => [5, 8, 7, 1]) ==> n\u00f9xwll\u00e9 12 => [3, 3, 3, 3]) ==> n\u00f9xwll\u00e9 9 => [30, 13, 24, 321]) ==> 0\n    \"\"\"\n",
        "canonical_solution":"    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n"
    },
    {
        "prompt":"\ndef add_elements(arr, k):\n    \"\"\"\n    E na bo na w'az\u0254\u030cn e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma e ny\u00ed n\u00f9xwl\u00e9ma\n    \"\"\"\n",
        "canonical_solution":"    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef get_odd_collatz(n):\n    \"\"\"\n    \u00d0\u00e0\u00e7\u00e2\u00e8\u00f2\u00e8\u00e5 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00ea\u00ee\u00f0\u00ee\u00f1\u00f2\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8\n    \"\"\"\n",
        "canonical_solution":"    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n\/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef valid_date(date):\n    \"\"\"A na wlan az\u0254\u0300 e na d\u00f3 m\u0254 az\u01cen \u00e8 \u00e8 wlan \u0254\u0301 s\u00edn x\u00f3 \u0254\u0301 b\u00f3 na l\u025b\u0301 s\u0254\u0301 True d\u00f3 wlan \u00e9 j\u00ed, enyi az\u01cen \u0254\u0301 s\u0254gbe \u0254\u0301. \u00c9 ny\u0254\u0301 \u0254\u0301, \u00e9 na l\u025b\u0301 s\u0254\u0301 False d\u00f3 wlan \u00e9 j\u00ed, enyi \u00e8 bl\u00f3 n\u01d4 e b\u0254 d'ewu l\u025b \u00e9 b\u01d0 \u0254\u0301: 1. Az\u01cen \u0254\u0301 ny\u00ed n\u01d4t\u00ed \u01ce. 2. Az\u01cen l\u025b\u0301\u025b k\u00fan na d\u00edn d\u00f3 az\u01cen 1 j\u00ed \u00f3, al\u01d2 h\u00fa az\u01cen 31 \u0256\u00f2 sun 1,3,5,7,8,10,12 l\u025b\u0301\u025b m\u025b \u00f3. Az\u01cen l\u025b\u0301\u025b k\u00fan na d\u00edn d\u00f3 az\u01cen 1 j\u00ed \u00f3, ab\u01d0 h\u00fa az\u01cen 30 \u0256\u00f2 sun 4,6,9,11 l\u025b\u0301\u025b m\u025b \u00f3. Az\u01cen l\u025b\u0301\u025b k\u00fan na d\u00edn d\u00f3 az\u01cen 1 j\u00ed \u00f3, ab\u01d0 h\u00fa az\u01cen 29 \u0256\u00f2 sun 2. 3. Sun l\u025b\u0301\u025b \u0256\u00f3 na d\u00edn d\u00f3 az\u01cen 1 j\u00ed \u00f3, ab\u01d0 h\u00fa az\u01cen 12 \u00f3. Az\u01cen \u0254\u0301 \u0256\u00f3 na \u0256\u00f2\n    \"\"\"\n",
        "canonical_solution":"    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n"
    },
    {
        "prompt":"\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "canonical_solution":"    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test":"def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n"
    },
    {
        "prompt":"\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5]) \u00e2 -> False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u00e2 -> False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u00e2 -> True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u00e2 -> False\n    '''\n",
        "canonical_solution":"    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef intersection(interval1, interval2):\n    \"\"\"\u00c8 na we t\u025bnkp\u0254n we, b\u0254 t\u025bnkp\u0254n \u0256okpo \u0256okpo ny\u00ed n\u00f9jl\u025b\u0301kpo w\u00e8. C\u0254\u0301nkp\u0254n = (b\u025b\u0301, f\u00f3) = (1, 2). N\u01d4jl\u025b\u0301kpo we l\u025b\u0301\u025b \u0256\u00f2 hunhun, b\u0254 en\u025b s\u00edn tinm\u025b w\u025b ny\u00ed \u0256\u0254 t\u025bnkp\u0254n \u0254 (b\u025b\u0301, f\u00f3) n\u0254 l\u025b\u0301 \u0256\u00f3 t\u025bnkp\u0254n we l\u025b\u0301\u025b b\u01d0. \u0189\u00f2 t\u025bnkp\u0254n \u0256okpo \u0256okpo m\u025b \u0254, \u00e8 n\u0254 \u0256\u0254 \u0256\u0254 t\u025bnkp\u0254n t\u0254n n\u0254 hwe al\u01d2 n\u0254 c\u00ed t\u025bnkp\u0254n t\u0254n. Az\u0254\u030c towe w\u025b ny\u00ed \u0256\u0254 a na tu\u00f9n \u0256\u0254 t\u025bnkp\u0254n we l\u025b\u0301\u025b s\u00edn alix\u0254m\u025b ny\u00ed n\u00f9\u0256\u00e9 n\u00f9\u0256\u00e9. C\u0254\u0301nkp\u0254n (1, 3), (2, 4) l\u025b\u0301\u025b s\u00edn alix\u0254m\u025b ny\u00ed (2, 3) b\u0254 alix\u0254m\u025b t\u0254n ny\u00ed 1, b\u0254 alix\u0254m\u025b ny\u00ed n\u00f9\u0256\u00e9 \u01ce. N\u00fa alix\u0254m\u025b \u0254 s\u00edn alix\u0254m\u025b ny\u00ed n\u00f9\u0256\u00e9 n\u00f9\u0256\u00e9 \u0254, l\u025b\u0301 y\u00ed gb\u00e8,\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n"
    },
    {
        "prompt":"\ndef prod_signs(arr):\n    \"\"\"\n    \u00c8 na mi n\u00f9xwl\u00e9ma kp\u00f2 \u0256\u00f2 n\u00f9xwl\u00e9ma l\u025b\u0301\u025b m\u025b b\u0254 mi na l\u025b\u0301 y\u00ed n\u00f9xwl\u00e9ma l\u025b\u0301\u025b s\u00edn n\u00f9xwl\u00e9ma e \u00e8 s\u0254\u0301 n\u00f9xwl\u00e9ma l\u025b\u0301\u025b b\u01d0 s\u00edn n\u00f9xwl\u00e9ma d\u00f3 n\u00f9xwl\u00e9ma \u0254\u0301 m\u025b b\u0254 \u00e8 n\u0254 yl\u0254 \u0256\u0254 1, -1 al\u01d2 0 \u00e9 s\u00edn n\u00f9xwl\u00e9ma.\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "canonical_solution":"    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minPath(grid, k):\n    \"\"\"\n    \u00d0\u00e0\u00e7\u00f0\u00e0\u00e1\u00ee\u00f2\u00e0\u00ed\u00ed\u00fb\u00e9 \u00f1\u00e5\u00f0\u00e2\u00e5\u00f0 \u00f1 N \u00f0\u00ff\u00e4\u00e0\u00ec\u00e8 \u00e8 N \u00ea\u00ee\u00ef\u00e5\u00ff\u00ec\u00e8 (N >= 2) \u00e8 \u00ef\u00ee\u00eb\u00ee\u00e6\u00e8\u00f2\u00e5\u00eb\u00fc\u00ed\u00ee\u00e9 \u00ef\u00ee\u00eb\u00ee\u00e2\u00e8\u00ed\u00ee\u00e9 k, \u00ea\u00e0\u00e6\u00e4\u00e0\u00ff \u00ea\u00eb\u00e0\u00ef\u00e0\u00ed\u00e0 \u00f1\u00e5\u00f0\u00e2\u00e5\u00f0\u00e0 \u00f1\u00ee\u00e4\u00e5\u00f0\u00e6\u00e8\u00f2 \u00e7\u00ed\u00e0\u00f7\u00e5\u00ed\u00e8\u00e5. \u00ca\u00e0\u00e6\u00e4\u00fb\u00e9 \u00ef\u00ee\u00eb\u00ee\u00e2\u00e8\u00ed\u00e0 \u00e2 \u00f0\u00e0\u00e9\u00ee\u00ed\u00e5 [1, N * N] \u00e2\u00ea\u00eb\u00fe\u00f7\u00e0\u00e5\u00f2\u00f1\u00ff \u00e8\u00ec\u00e5\u00ed\u00ed\u00ee \u00f0\u00e0\u00e7 \u00ed\u00e0 \u00ea\u00eb\u00e0\u00ef\u00e0\u00ed\u00e0\u00f5 \u00f1\u00e5\u00f0\u00e2\u00e5\u00f0\u00e0. \u00c2\u00e0\u00ec \u00ed\u00f3\u00e6\u00ed\u00ee \u00ed\u00e0\u00e9\u00f2\u00e8 \u00ec\u00e0\u00ea\u00f1\u00e8\u00ec\u00e0\u00eb\u00fc\u00ed\u00fb\u00e9 \u00ef\u00f3\u00f2\u00fc \u00f1\u00e5\u00f0\u00e2\u00e5\u00f0\u00e0 k \u00e2 \u00f1\u00e5\u00f0\u00e2\u00e5\u00f0\u00e5. \u00c2\u00e0\u00ec \u00ed\u00f3\u00e6\u00ed\u00ee \u00ed\u00e0\u00f7\u00e0\u00f2\u00fc \u00e8\u00e7 \u00eb\u00fe\u00e1\u00ee\u00e9 \u00ea\u00eb\u00e0\u00ef\u00e0\u00ed\u00e0, \u00e8 \u00ed\u00e0 \u00ea\u00e0\u00e6\u00e4\u00ee\u00ec \u00fd\u00f2\u00ee\u00ec \u00fd\u00f2\u00e0\u00ef\u00e5 \u00e2\u00fb \u00ec\u00ee\u00e6\u00e5\u00f2\u00e5 \u00ef\u00e5\u00f0\u00e5\u00f5\u00ee\u00e4\u00e8\u00f2\u00fc \u00ea \u00ea\u00eb\u00e0\u00ef\u00e0\u00ed\u00e0\u00ec, \u00ea\u00ee\u00f2\u00ee\u00f0\u00fb\u00e5 \u00e8\u00ec\u00e5\n    \"\"\"\n",
        "canonical_solution":"    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n"
    },
    {
        "prompt":"\ndef tri(n):\n    \"\"\"M\u025b b\u01d0 n\u0254\u0301 tunwun f\u00edb\u0254natc\u00ed s\u00edn n\u00f9jl\u025b\u0301jl\u025b\u0301, n\u00f9nyw\u025b\u0301t\u0254\u0301 l\u025b\u0301\u025b kpl\u0254\u0301n n\u01d4 d\u00f3 j\u00ed \u0256\u00f2 xw\u00e8 kanweko w\u00e8 gudogudo t\u0254n l\u025b\u0301\u025b m\u025b. Am\u0254\u030c, n\u01d4 e m\u025b l\u025b\u0301\u025b ma tunwun \u01ce \u0254\u0301 w\u025b ny\u00ed n\u00f9jl\u025b\u0301jl\u025b\u0301 Tribonacci t\u0254n. N\u01d4jl\u025b\u0301jl\u025b\u0301 Tribonacci t\u0254n \u0254\u0301, \u00e8 n\u0254 z\u00e1n n\u00f9jl\u025b\u0301jl\u025b\u0301: tri(1) = 3 tri(n) = 1 + n \/ 2, n\u00fa n ny\u00ed n\u00f9jl\u025b\u0301jl\u025b\u0301. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), n\u00fa n ny\u00ed n\u00f9jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301jl\u025b\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i \/ 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) \/ 2)\n    return my_tri\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n"
    },
    {
        "prompt":"\ndef digits(n):\n    \"\"\"\u0189\u00f2 n\u00f9jl\u025b\u0301kp\u00e1 \u0256agbe \u0256\u00e9 n j\u00ed \u0254\u0301, l\u025b\u0301 y\u00ed n\u00f9jl\u025b\u0301kp\u00e1 e ny\u00ed n\u00f9jl\u025b\u0301kp\u00e1 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed n\u01d4 \u00e8 n\u0254 ny\u00ed\n    \"\"\"\n",
        "canonical_solution":"    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n"
    },
    {
        "prompt":"\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u00e2 -> True\n    is_nested('[]]]]]]][[[[[]') \u00e2 -> False\n    is_nested('[][]') \u00e2 -> False\n    is_nested('[]') \u00e2 -> False\n    is_nested('[[][]]') \u00e2 -> True\n    is_nested('[[]][[') \u00e2 -> True\n    '''\n",
        "canonical_solution":"    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n"
    },
    {
        "prompt":"\n\ndef sum_squares(lst):\n    \"\"\"\u00e8 na w'az\u0254\u030cnxixa n\u00f9jl\u025b\u0301nkpo l\u025b\u0301\u025b t\u0254n. \u00e8 \u0256\u00f3 na l\u025b\u0301 v\u0254\u0301 n\u00f9jl\u025b\u0301nxixa l\u025b\u0301\u025b s\u00edn n\u01d4 e \u00e8 s\u0254\u0301 d\u00f3 wezun \u0254\u0301 m\u025b \u00e9 s\u00edn n\u01d4 l\u025b\u0301\u025b n\u00e1, b\u00f3 n\u00e1 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 l\u025b\n    \n\n    \"\"\"\n",
        "canonical_solution":"    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u00e2 -> True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"\") \u00e2 -> False \n    '''\n",
        "canonical_solution":" \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef can_arrange(arr):\n    \"\"\"\u00d0\u00e5\u00f8\u00e8\u00f2\u00fc \u00f4\u00f3\u00ed\u00ea\u00f6\u00e8\u00fe, \u00ea\u00ee\u00f2\u00ee\u00f0\u00e0\u00ff \u00e2\u00ee\u00e7\u00e2\u00f0\u00e0\u00f9\u00e0\u00e5\u00f2 \u00f1\u00e0\u00ec\u00fb\u00e9 \u00e1\u00ee\u00eb\u00fc\u00f8\u00ee\u00e9 \u00e8\u00ed\u00f2\u00e5\u00f0\u00ed\u00e5\u00f2 \u00fd\u00eb\u00e5\u00ec\u00e5\u00ed\u00f2\u00e0, \u00ea\u00ee\u00f2\u00ee\u00f0\u00fb\u00e9 \u00ed\u00e5 \u00e1\u00ee\u00eb\u00fc\u00f8\u00e5 \u00e8\u00eb\u00e8 \u00f0\u00e0\u00e2\u00e5\u00ed \u00f1\u00f0\u00e0\u00e7\u00f3 \u00ef\u00e5\u00f0\u00e5\u00e4\u00ed\u00e5\u00ec\u00f3 \u00fd\u00eb\u00e5\u00ec\u00e5\u00ed\u00f2\u00f3. \u00c5\u00f1\u00eb\u00e8 \u00f2\u00e0\u00ea\u00ee\u00e9 \u00fd\u00eb\u00e5\u00ec\u00e5\u00ed\u00f2 \u00ed\u00e5 \u00e8\u00ec\u00e5\u00e5\u00f2\u00f1\u00ff, \u00e2\u00ee\u00e7\u00e2\u00f0\u00e0\u00f9\u00e0\u00e5\u00f2 -1.\n    \"\"\"\n",
        "canonical_solution":"    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n"
    },
    {
        "prompt":"\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "canonical_solution":"    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n"
    },
    {
        "prompt":"\ndef compare_one(a, b):\n    \"\"\"\n    \u00d0\u00e5\u00f8\u00e0\u00e5\u00f2\u00f1\u00ff \u00f1\u00ee\u00e7\u00e4\u00e0\u00f2\u00fc \u00f4\u00f3\u00ed\u00ea\u00f6\u00e8\u00fe, \u00ea\u00ee\u00f2\u00ee\u00f0\u00e0\u00ff \u00ef\u00f0\u00e8\u00ed\u00e8\u00ec\u00e0\u00e5\u00f2 \u00ef\u00ee\u00eb\u00ee\u00e2\u00e8\u00ed\u00fb, \u00f4\u00f3\u00ed\u00ea\u00f6\u00e8\u00e8 \u00e8\u00eb\u00e8 \u00f1\u00e5\u00f0\u00e8\u00e8, \u00ef\u00f0\u00e5\u00e4\u00f1\u00f2\u00e0\u00e2\u00eb\u00ff\u00fe\u00f9\u00e8\u00e5 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00fb\u00e5 \u00f7\u00e8\u00f1\u00eb\u00fb, \u00e8 \u00ef\u00f0\u00e8\u00e2\u00ee\u00e4\u00e8\u00f2 \u00e1\u00ee\u00eb\u00fc\u00f8\u00f3\u00fe \u00e8\u00e7\u00ec\u00e5\u00ed\u00ff\u00fe\u00f9\u00f3\u00fe \u00e2 \u00f1\u00e2\u00ee\u00e5\u00e9 \u00e4\u00e0\u00ed\u00ed\u00ee\u00e9 \u00f4\u00f3\u00ed\u00ea\u00f6\u00e8\u00e8. \u00d0\u00e0\u00f1\u00f5\u00ee\u00e4\u00e8\u00f2 \u00ed\u00e8\u00ea\u00e0\u00ea \u00ed\u00e5, \u00e5\u00f1\u00eb\u00e8 \u00e7\u00ed\u00e0\u00f7\u00e5\u00ed\u00e8\u00ff \u00f0\u00e0\u00e2\u00ed\u00fb. \u00c7\u00ed\u00e0\u00f7\u00e5\u00ed\u00e8\u00e5: \u00c5\u00f1\u00eb\u00e8 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00fb\u00e9 \u00f7\u00e8\u00f1\u00eb \u00ef\u00f0\u00e5\u00e4\u00f1\u00f2\u00e0\u00e2\u00eb\u00ff\u00e5\u00f2\u00f1\u00ff \u00ea\u00e0\u00ea \u00f1\u00e5\u00f0\u00e8\u00ff, \u00f1\u00e5\u00f0\u00e8\u00ff \u00f1\u00e5\u00f0\u00e8\u00e8 \u00ec\u00ee\u00e6\u00e5\u00f2 \u00e1\u00fb\u00f2\u00fc. \u00e8\u00eb\u00e8, \u00f1\u00f0\u00e0\u00e2\u00ed\u00e8\u00f2\u00fc_\u00e4\u00e2\u00e0 ((1, 2.5) \u00e2 -> 2.5 \u00f1\u00f0\u00e0\u00e2\u00ed\u00e8\u00f2\u00fc_\u00e4\u00e2\u00e0 ((1, \"2,3\") \u00e2 -> \"2,3\" \u00f1\u00f0\u00e0\u00e2\u00ed\u00e8\u00f2\u00fc_\u00e4\u00e2\u00e0 ((5,\n    \"\"\"\n",
        "canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_equal_to_sum_even(n):\n    \"\"\"\u00d0\u00e8\u00f1\u00f3\u00ed\u00ea\u00ee\u00e2\u00fb\u00e9 \u00ed\u00ee\u00ec\u00e5\u00f0 n \u00e8\u00ed\u00f2\u00e5\u00f0\u00e5\u00f1\u00e5\u00ed \u00ea\u00e0\u00ea \u00f1\u00f3\u00ec\u00ec\u00e0 4 \u00ef\u00f0\u00e0\u00e2\u00e8\u00eb\u00fc\u00ed\u00fb\u00f5 \u00f7\u00e0\u00f1\u00f2\u00ed\u00fb\u00f5 \u00ed\u00ee\u00ec\u00e5\u00f0\u00ee\u00e2. \u00d0\u00e5\u00e7\u00f3\u00eb\u00fc\u00f2\u00e0\u00f2: is_equal_to_sum_even ({4) == False is_equal_to_sum_even ({6) == False is_equal_to_sum_even ({8) == True\n    \"\"\"\n",
        "canonical_solution":"    return n%2 == 0 and n >= 8\n",
        "test":"def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n"
    },
    {
        "prompt":"\ndef special_factorial(n):\n    \"\"\"Brazil-faktorial \u0254 \u00e8 n\u0254 \u0256\u0254 \u0256\u0254: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! *... * 1! f\u00ed e n > 0 \u00d0i kp\u0254\u0301nd\u00e9w\u00fa \u0254:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "canonical_solution":"    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n"
    },
    {
        "prompt":"\ndef fix_spaces(text):\n    \"\"\"\n    E na m\u0254 w\u00e8m\u00e1 xw\u025b \u0256\u00e9 \u0254, s\u0254\u0301 w\u00e8m\u00e1 e \u0256\u00f2 w\u00e8m\u00e1 \u0254 m\u025b l\u025b\u0301\u025b b\u01d0 d\u00f3 w\u00e8m\u00e1 e \u00e8 n\u0254 \u0256\u00f3 w\u00e8m\u00e1 e \u00e8 n\u0254 \u0256\u00f3 w\u00e8m\u00e1 l\u025b\u0301\u025b d\u00f3 \u00e9 j\u00ed, bo n\u00fa w\u00e8m\u00e1 \u0254 \u0256\u00f3 w\u00e8m\u00e1 e n\u0254 \u0256\u00f3 w\u00e8m\u00e1 e n\u0254 \u0256\u00f3 w\u00e8m\u00e1 l\u025b\u0301\u025b d\u00f3 \u00e9 j\u00ed h\u00fa w\u00e8 \u0254, s\u0254\u0301 w\u00e8m\u00e1 e n\u0254 \u0256\u00f3 w\u00e8m\u00e1 e n\u0254 \u0256\u00f3 w\u00e8m\u00e1 l\u025b\u0301\u025b d\u00f3 \u00e9 b\u01d0 d\u00f3 w\u00e8m\u00e1 e \u00e8 n\u0254 \u0256\u00f3 w\u00e8m\u00e1 l\u025b\u0301\u025b j\u00ed => \"Example1\" => \"Example2\". => \"Example3\". => \"Example3\".\n    \"\"\"\n",
        "canonical_solution":"    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef file_name_check(file_name):\n    \"\"\"\u00d0\u00e5\u00f8\u00e8\u00f2\u00fc \u00f4\u00f3\u00ed\u00ea\u00f6\u00e8\u00fe, \u00ea\u00ee\u00f2\u00ee\u00f0\u00e0\u00ff \u00ef\u00f0\u00e8\u00ed\u00e8\u00ec\u00e0\u00e5\u00f2 \u00f1\u00ea\u00ee\u00f0\u00ee\u00f1\u00f2\u00fc, \u00ef\u00f0\u00e5\u00e4\u00f1\u00f2\u00e0\u00e2\u00eb\u00ff\u00fe\u00f9\u00f3\u00fe \u00e8\u00ec\u00e5\u00ed\u00e0 \u00f4\u00e0\u00e9\u00eb\u00e0, \u00e8 \u00e2\u00ee\u00e7\u00e2\u00f0\u00e0\u00f9\u00e0\u00e5\u00f2 \"\u00ec\u00f3\u00e6\u00f7\u00e8\u00ed\u00f3\", \u00e5\u00f1\u00eb\u00e8 \u00e8\u00ec\u00e5\u00ed\u00e0 \u00f4\u00e0\u00e9\u00eb\u00e0 \u00ff\u00e2\u00eb\u00ff\u00e5\u00f2\u00f1\u00ff \u00e2\u00e5\u00f0\u00ee\u00ff\u00f2\u00ed\u00fb\u00ec, \u00e0 \u00e2\u00ee\u00f2 \u00e8 \u00e2\u00ee\u00f2 \u00f3\u00e6\u00e5 \"\u00f2\u00e0\u00ea\u00e8\". \u00c8\u00ec\u00e5\u00ed\u00e0 \u00f4\u00e0\u00e9\u00eb\u00e0 \u00f1\u00f7\u00e8\u00f2\u00e0\u00e5\u00f2\u00f1\u00ff \u00e2\u00e5\u00f0\u00ee\u00ff\u00f2\u00ed\u00fb\u00ec, \u00e5\u00f1\u00eb\u00e8 \u00e8\u00ec\u00e5\u00ed\u00e0 \u00f4\u00e0\u00e9\u00eb\u00e0 \u00f1\u00ee\u00ee\u00f2\u00e2\u00e5\u00f2\u00f1\u00f2\u00e2\u00f3\u00e5\u00f2 \u00e2\u00f1\u00e5\u00ec \u00ef\u00ee\u00e4\u00f0\u00ee\u00e1\u00ed\u00fb\u00ec \u00f3\u00f1\u00eb\u00ee\u00e2\u00e8\u00ff\u00ec: - \u00cd\u00e0 \u00e8\u00ec\u00e5\u00ed\u00f3 \u00f4\u00e0\u00e9\u00eb\u00e0 \u00e4\u00ee\u00eb\u00e6\u00e5\u00ed \u00e1\u00fb\u00f2\u00fc \u00ed\u00e5 \u00e1\u00ee\u00eb\u00e5\u00e5 \u00f2\u00f0\u00e5\u00f5 \u00e7\u00ed\u00e0\u00f7\u00e5\u00ed\u00e8\u00e9 ('0'-'9') - \u00c8\u00ec\u00e5\u00ed\u00e0 \u00f4\u00e0\u00e9\u00eb\u00e0 \u00f1\u00ee\u00f1\u00f2\u00e0\u00e2\u00eb\u00ff\u00e5\u00f2 \u00f1\u00ea\u00ee\u00f0\u00ee \u00ee\u00e4\n    \"\"\"\n",
        "canonical_solution":"    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('\/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n"
    },
    {
        "prompt":"\n\n\ndef sum_squares(lst):\n    \"\"\"\" N\u01d4wiwa el\u0254 na s\u0254\u0301 n\u00f9xwl\u00e9 l\u025b s\u00edn n\u00f9xwl\u00e9. N\u00fa n\u00f9xwl\u00e9 l\u025b\u0301\u025b b\u01d0 \u0256\u00f2 n\u00f9xwl\u00e9 \u0254\u0301 m\u025b \u0254\u0301, n\u00f9xwl\u00e9 \u0254 na s\u0254\u0301 n\u00f9xwl\u00e9 \u0254\u0301 s\u00edn n\u00f9xwl\u00e9 \u0254\u0301 d\u00f3 z\u0254\u0301n f\u00ed e n\u00f9xwl\u00e9 \u0254\u0301 ny\u00ed \u00e9, n\u00fa n\u00f9xwl\u00e9 \u0254\u0301 ny\u00ed 3 s\u00edn n\u01d4xwl\u00e9 \u0254\u0301, \u00e9 na s\u0254\u0301 n\u00f9xwl\u00e9 \u0254 d\u00f3 z\u0254\u0301n f\u00ed e n\u00f9xwl\u00e9 \u0254 ny\u00ed \u00e9, n\u00fa n\u00f9xwl\u00e9 \u0254\u0301 ny\u00ed 4 s\u00edn n\u01d4xwl\u00e9 \u00e9, \u00e9 ma ny\u00ed 3 s\u00edn n\u01d4xwl\u00e9 \u01ce. N\u01d4wiwa \u0254\u0301 na \u0256y\u0254 n\u00f9xwl\u00e9 l\u025b \u0256\u00f2 n\u00f9xwl\u00e9 \u0254\u0301 m\u025b n\u00fa n\u00f9xwl\u00e9 l\u025b\u0301\u025b e s\u00edn n\u01d4xwl\u00e9 l\u025b\u0301\u025b ma ny\u00ed 3 s\u00edn n\u01d4xwl\u00e9 \u01ce \u00e9 \u01ce. N\u01d4wiwa \u0254\u0301 na l\u025b\u0301 l\u025b\u0301\n    \"\"\"\n",
        "canonical_solution":"    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef words_in_sentence(sentence):\n    \"\"\"\n    \u00e8 na wlan wuntun e n\u0254 \u0256e nu\u0256evonu \u0256\u00e9 xl\u025b\u0301, wuntun \u0254 na \u0256\u00f3 x\u00f3 \u0256\u00e9 l\u025b b\u0254 \u00e8 na \u0256\u00f3 ganm\u025b \u0256\u00e9 l\u025b d\u00f3 ye, b\u0254 a na l\u025b\u0301 wlan wuntun e m\u025b x\u00f3 l\u025b \u0256\u00f2 wuntun \u0254 m\u025b \u00e9, b\u0254 wuntun \u0254 na \u0256\u00f3 n\u00f9xw\u00e1s\u00fan l\u025b, b\u0254 x\u00f3 l\u025b \u0256\u00f2 wuntun y\u0254y\u0254 \u0254 m\u025b \u0254 na c\u00ed wuntun \u0254 \u0256\u0254hun. kp\u0254\u0301nd\u00e9w\u00fa1: n\u01d4 by\u0254: wuntun = \"wuntun en\u025b \u0254 ny\u00ed kp\u0254\u0301nkp\u0254\u0301n \u0256\u00e9\" n\u01d4 \u00e8 n\u0254 t\u0254\u0301n s\u00edn m\u025b: \"e ny\u00ed\" kp\u0254\u0301nd\u00e9w\u00fa2: n\u01d4 by\u0254: wuntun = \"n\u01d0 n\u00e1 y\u00ec t\u0254\u0301n\" n\u01d4 \u00e8 n\u0254 t\u0254\u0301n s\u00edn m\u025b: \"n\u01d0 n\u00e1 y\u00ec t\u0254\u0301n\" n\u01d4 \u00e8 n\u0254 t\u0254\u0301n s\u00edn m\u025b: \"go for\" n\u01d4jl\u025b\u0301n: * 1 <= len(sentence) <= 100 * wuntun \u0254 na \u0256\u00f3 w\n    \"\"\"\n",
        "canonical_solution":"    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n"
    },
    {
        "prompt":"\ndef simplify(x, n):\n    \"\"\"az\u0254 towe w\u025b ny\u00ed \u0256\u0254 a na bl\u00f3 az\u0254\u0300 e na bl\u00f3 b\u0254 x\u00f3gbe x * n na ny\u00ed n\u00f9\u0256\u00e9 b\u0254 \u00e9 na ny\u00ed n\u00f9\u0256\u00e9 b\u0254 \u00e9 na ny\u00ed n\u00f9\u0256\u00e9 \u01ce \u0254 \u00e9. x kpo n kpo \u0254, n\u00f9\u0256\u00e9 w\u025b ye n\u0254 \u0256\u00e8 n\u00fa n\u00f9\u0256\u00e9 l\u025b, b\u0254 n\u01d4 e ye n\u0254 z\u00e1n \u00e9 w\u025b ny\u00ed: <numerator>\/<denominator>, b\u0254 n\u00f9\u0256\u00e9 l\u025b kpo n\u01d4\u0256\u00f3kp\u0254\u0301 l\u025b kpo b\u01d0 ny\u00ed n\u00f9\u0256\u00e9 l\u025b. a sixu \u0256\u0254 \u0256\u0254 x kpo n kpo ny\u00ed n\u00f9\u0256\u00e9 l\u025b bo \u0256\u00f3 n\u01d4v\u0254\u0301 \u01ce. simplify \"1\/5, \"5\/1\") = True simplify \"1\/6\", \"2\/1\") = False simplify \"7\/10\", \"10\/2\") = False\n    \"\"\"\n",
        "canonical_solution":"    a, b = x.split(\"\/\")\n    c, d = n.split(\"\/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator\/denom == int(numerator\/denom)):\n        return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test1'\n    assert candidate(\"1\/6\", \"2\/1\") == False, 'test2'\n    assert candidate(\"5\/1\", \"3\/1\") == True, 'test3'\n    assert candidate(\"7\/10\", \"10\/2\") == False, 'test4'\n    assert candidate(\"2\/10\", \"50\/10\") == True, 'test5'\n    assert candidate(\"7\/2\", \"4\/2\") == True, 'test6'\n    assert candidate(\"11\/6\", \"6\/1\") == True, 'test7'\n    assert candidate(\"2\/3\", \"5\/2\") == False, 'test8'\n    assert candidate(\"5\/2\", \"3\/5\") == False, 'test9'\n    assert candidate(\"2\/4\", \"8\/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2\/4\", \"4\/2\") == True, 'test11'\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test12'\n    assert candidate(\"1\/5\", \"1\/5\") == False, 'test13'\n\n"
    },
    {
        "prompt":"\ndef order_by_points(nums):\n    \"\"\"\n    \u00d0\u0254 az\u0254\u0300 e n\u0254 \u0256\u00e8 n\u00f9xwl\u00e9 l\u025b s\u00edn n\u00f9xwl\u00e9 l\u025b \u0256\u00f2 n\u00f9xwl\u00e9 l\u025b s\u00edn n\u00f9xwl\u00e9 l\u025b s\u00edn n\u00f9xwl\u00e9 l\u025b j\u00ed \u00e9.\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef specialFilter(nums):\n    \"\"\"\u00d0\u00e8\u00f1\u00f3\u00e9\u00f2 \u00f4\u00f3\u00ed\u00ea\u00f6\u00e8\u00fe, \u00ea\u00ee\u00f2\u00ee\u00f0\u00e0\u00ff \u00ef\u00f0\u00e8\u00ed\u00e8\u00ec\u00e0\u00e5\u00f2 \u00e1\u00eb\u00ee\u00ea \u00ed\u00ee\u00ec\u00e5\u00f0\u00ee\u00e2 \u00ea\u00e0\u00ea \u00e2\u00f5\u00ee\u00e4 \u00e8 \u00ef\u00f0\u00e8\u00e2\u00ee\u00e4\u00e8\u00f2 \u00f7\u00e8\u00f1\u00eb\u00ee \u00fd\u00eb\u00e5\u00ec\u00e5\u00ed\u00f2\u00ee\u00e2 \u00e2 \u00e1\u00eb\u00ee\u00ea\u00e5, \u00ea\u00ee\u00f2\u00ee\u00f0\u00fb\u00e5 \u00e1\u00ee\u00eb\u00fc\u00f8\u00e5 10 \u00e8 \u00ef\u00e5\u00f0\u00e2\u00fb\u00e9 \u00e8 \u00ef\u00ee\u00f1\u00eb\u00e5\u00e4\u00ed\u00e8\u00e9 \u00ed\u00ee\u00ec\u00e5\u00f0\u00fb \u00ed\u00ee\u00ec\u00e5\u00f0\u00e0 \u00ff\u00e2\u00eb\u00ff\u00fe\u00f2\u00f1\u00ff \u00ed\u00e5\u00ea\u00f0\u00ee\u00ec\u00ea\u00e8\u00ec\u00e8 (1, 3, 5, 7, 9).\n    \"\"\"\n",
        "canonical_solution":"    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n"
    },
    {
        "prompt":"\ndef get_max_triples(n):\n    \"\"\"\n    \u00c8 na mi xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301 \u0256agbe \u00e9 n. Mi \u0256\u00f3 na bl\u00f3 n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9xw\u025b\u0301n\u00fam\u025b e ny\u00ed n\u00f9\n    \"\"\"\n",
        "canonical_solution":"    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n"
    },
    {
        "prompt":"\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "canonical_solution":"    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n"
    },
    {
        "prompt":"\ndef sorted_list_sum(lst):\n    \"\"\"\u00d0\u0254 az\u0254\u0300 e n\u0254 y\u00ed gb\u00e8 n\u00fa n\u00f9jl\u025b\u0301jl\u025b\u0301 x\u00f3jl\u025b\u0301jl\u025b\u0301 l\u025b\u0301\u025b t\u0254n d\u00f3 n\u00f9jl\u025b\u0301jl\u025b\u0301 j\u00ed, n\u0254 \u0256\u00e8 n\u00f9jl\u025b\u0301jl\u025b\u0301 x\u00f3jl\u025b\u0301jl\u025b\u0301 e \u0256\u00f3 wuntun l\u025b\u0301\u025b s\u00edn n\u00f9jl\u025b\u0301jl\u025b\u0301 j\u00ed, b\u00f3 n\u0254 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 v\u0254\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 e \u00e8 m\u0254 b\u0254 \u00e8 \u0256\u00e8 \u00e9 d\u00f3 tito j\u00ed \u00e9 j\u00ed. N\u01d4jl\u025b\u0301jl\u025b\u0301 \u0254\u0301 \u0256\u00f3 n\u0254\u0301 ny\u00ed n\u00f9jl\u025b\u0301jl\u025b\u0301 x\u00f3jl\u025b\u0301jl\u025b\u0301 l\u025b\u0301\u025b t\u0254n hweb\u01d0nu, \u00e9 ka n\u0254 ny\u00ed n\u00f9jl\u025b\u0301jl\u025b\u0301 x\u00f3jl\u025b\u0301jl\u025b\u0301 l\u025b\u0301\u025b t\u0254n \u01ce, \u00e9 ka n\u0254 l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 v\u0254\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301jl\u025b\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 l\u025b\u0301\u025b t\u0254n \u01ce, \u00e9 sixu l\u025b\u0301 \u0256\u00f3 n\u00f9jl\u025b\n    \"\"\"\n",
        "canonical_solution":"    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n"
    },
    {
        "prompt":"\ndef x_or_y(n, x, y):\n    \"\"\"E\u0256esun\u0254 t\u0254n \u0254 e na l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 y\u00ed x t\u0254n \u0254\u0301, n\u00fa n ny\u00ed n\u00f9jl\u025b\u0301kp\u00e1 \u0256\u00e9 \u0254\u0301, \u00e9 na l\u025b\u0301 l\u025b\u0301 l\u025b\u0301 y\u00ed y t\u0254n \u0254\u0301. Kp\u0254\u0301nd\u00e9w\u00fa: n\u00fa x_ al\u01d2_y{7, 34, 12) == 34 n\u00fa x_ al\u01d2_y{15, 8, 5) == 5\n    \n    \"\"\"\n",
        "canonical_solution":"    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n"
    },
    {
        "prompt":"\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "canonical_solution":"    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef compare(game,guess):\n    \"\"\"un lin \u0256\u0254 mi b\u01d0 n\u0254 fl\u00edn n\u01d4 e m\u025b n\u0254 m\u0254 hwenu e \u00e8 n\u0254 m\u0254 n\u01d4 j\u025b n\u01d4 e m\u025b l\u025b n\u0254 m\u0254 \u0256\u00f3 xw\u00e8 m\u0254kpan \u00e9 wu \u00e9. n\u01d4 e m\u025b n\u0254 m\u0254 \u00e9 kpo n\u01d4 e m\u025b n\u0254 lin \u00e9 kpo n\u0254 ny\u00ed n\u01d4 \u0256agbe \u0256\u00e9 bo n\u0254 d\u00f3 jl\u025b\u0301. az\u0254\u030c towe w\u025b ny\u00ed \u0256\u0254 a na kp\u0254\u0301n \u0256\u0254 m\u025b \u0254 m\u0254 n\u01d4 j\u025b n\u01d4 e m\u025b l\u025b n\u0254 m\u0254 \u00e9 m\u025b ganji \u00e0 j\u00ed. \u00e8 na we n\u01d4 e m\u025b l\u025b n\u0254 m\u0254 n\u01d4 j\u025b n\u01d4 l\u025b \u00e9 s\u00edn n\u01d4 l\u025b \u00e9 s\u00edn n\u01d4 l\u025b \u00e9 kpo n\u01d4 l\u025b \u00e9 t\u0254n l\u025b \u00e9 kpo b\u0254 n\u01d4 l\u025b b\u01d0 n\u0254 \u0256\u00f3 jl\u025b\u030c \u0256okp\u00f3 \u0254\u0301 j\u00ed. n\u00fa n\u01d4 l\u025b b\u01d0 n\u0254 m\u0254 n\u01d4 j\u025b n\u01d4 l\u025b \u00e9 \u0254, a na l\u025b\u0301 \u0256\u00f3 jl\u025b\u030c \u0256okp\u00f3 \u0254\u0301 j\u00ed bo n\u0254 \u0256\u0254 n\u01d4 l\u025b b\u01d0 n\u0254 s\u0254gbe \u00e0 j\u00ed. n\u00fa n\u01d4 l\u025b b\u01d0 n\u0254 m\u0254 n\u01d4 j\u025b n\u01d4 l\u025b \u00e9 m\u025b \u0254, n\u01d4 l\u025b n\u0254 ny\u00ed 0 b\u0254 n\u01d4 l\u025b b\u01d0 n\u0254 ny\u00ed n\u01d4 e m\u025b l\u025b n\u0254 m\u0254 n\u01d4 j\u025b\n    \"\"\"\n",
        "canonical_solution":"    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"A na m\u0254 az\u0254m\u025b \u0256\u00e9 s\u00edn nyik\u0254 (w\u0254ntin) kpo n\u00f9jl\u025b\u0301n e \u00e8 n\u0254 z\u00e1n d\u00f3 wlan n\u01d4 l\u025b \u00e9 \u0256\u00e9 kpo. Ak\u0254\u0301nkpinkpan \u0254\u0301 w\u025b ny\u00ed: n\u00fa CAP ny\u00ed wuntun \u0256ax\u00f3 l\u025b s\u00edn n\u00f9jl\u025b\u0301n \u0256\u00f2 az\u0254m\u025b \u0254 s\u00edn nyik\u0254 m\u025b, b\u0254 SM ny\u00ed wuntun kp\u025bv\u00ed l\u025b s\u00edn n\u00f9jl\u025b\u0301n \u0256\u00f2 az\u0254m\u025b \u0254 s\u00edn nyik\u0254 m\u025b \u0254, ak\u0254\u0301nkpinkpan \u0254 w\u025b ny\u00ed n\u01d4 e \u00e8 n\u0254 yl\u0254 \u0256\u0254 CAP - SM \u00e9. A na m\u0254 az\u0254m\u025b e n\u0254 wlan n\u01d4 l\u025b \u00e9 t\u0254n e n\u0254 ny\u00ed wuntun kp\u025bv\u00ed l\u025b \u00e9 bo na wlan wuntun \u0256\u00f2 tito el\u0254 m\u025b: ClassName.StrongestExtensionName. Enyi az\u0254m\u025b w\u00e8 al\u01d2 h\u00fa m\u0254 w\u025b \u0256\u00f2 wlan m\u025b b\u0254 wuntun yet\u0254n l\u025b n\u0254 \u0256\u00f3 jij\u025b \u0256okp\u00f3 \u0254\u0301 \u0254\u0301, a na s\u0254\u0301 \u00e9e n\u0254 j\u025b nuk\u0254n \u0256\u00f2 n\u00f9jl\u025b\u0301n \u0254\n    \"\"\"\n",
        "canonical_solution":"    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n"
    },
    {
        "prompt":"\ndef cycpattern_check(a , b):\n    \"\"\"\u00c8 na we x\u00f3gbe. A na l\u025b\u0301 v\u0254\u0301 x\u00f3gbe True \u0254\u0301 d\u00f3 n\u00fa x\u00f3gbe weg\u0254\u0301 \u0254\u0301 al\u01d2 x\u00f3gbe t\u0254n l\u025b\u0301\u025b \u0256\u011b ny\u00ed wuntun kp\u025bv\u00ed \u0256\u00e9 \u0256\u00f2 x\u00f3gbe nuk\u0254nt\u0254n \u0254\u0301 m\u025b cycpattern_check{\"abcd\",\"abd\") => False cycpattern_check{\"hello\",\"ell\") => True cycpattern_check{\"whassup\",\"psus\") => False cycpattern_check{\"abab\",\"baa\") => True cycpattern_check{\"efef\",\"eeff\") => False cycpattern_check{\"hims\",\"simen\") => True\n\n    \"\"\"\n",
        "canonical_solution":"    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n"
    },
    {
        "prompt":"\ndef even_odd_count(num):\n    \"\"\"\u00e9 n\u00e1 l\u025b\u0301 y\u00ed n\u00f9jl\u025b\u0301kpo e \u0256\u00f3 n\u00f9jl\u025b\u0301kpo e ny\u00ed ganj\u025b l\u025b \u00e9 kpo \u00e9e ny\u00ed ganj\u025b l\u025b \u00e9 kpo \u00e9. Kp\u0254\u0301n: ganj\u025b_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9_xwl\u00e9\n    \"\"\"\n",
        "canonical_solution":"    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef int_to_mini_roman(number):\n    \"\"\"\n    \u00d0\u00e0\u00e7\u00e2\u00e8\u00f2\u00e8\u00e5 \u00e8\u00ed\u00f2\u00e5\u00f0\u00e5\u00f1\u00e0 \u00ea \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00ec\u00f3 \u00ef\u00ee\u00eb\u00f3\u00f7\u00e5\u00ed\u00e8\u00fe \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e3\u00ee \u00ef\u00ee\u00eb\u00f3\u00f7\u00e5\u00ed\u00e8\u00ff \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9 \u00f0\u00e5\u00e0\u00eb\u00fc\u00ed\u00ee\u00e9\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "canonical_solution":"    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number \/\/ num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "canonical_solution":"    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n"
    },
    {
        "prompt":"\ndef find_max(words):\n    \"\"\"wlan az\u0254\u0300 e n\u0254 y\u00ed gb\u00e8 n\u00fa n\u00f9jl\u025b\u0301jl\u025b\u0301 x\u025b\u0301\u025b\u0301 l\u025b\u0301\u025b t\u0254n \u00e9. X\u025b\u0301\u025b\u0301 l\u025b\u0301\u025b \u0256\u00f3 x\u00f3kw\u00edn vovo l\u025b\u0301\u025b. Na x\u00f3kw\u00edn e \u0256\u00f3 wuntun bun\u0254 l\u025b\u0301\u025b b\u01d0 \u00e9. N\u00fa wuntun bun\u0254 l\u025b\u0301\u025b \u0256\u00f3 wuntun bun\u0254 l\u025b\u0301\u025b b\u01d0 \u0254\u0301, na wuntun bun\u0254 e j\u025b nuk\u0254n \u0254\u0301 w\u025b \u00e8 na l\u025b\u0301 w\u00e1.\n    \"\"\"\n",
        "canonical_solution":"    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n"
    },
    {
        "prompt":"\ndef eat(number, need, remaining):\n    \"\"\"\n    A ny\u00ed x\u025bvi xov\u025b\u0301, bo ko \u0256u at\u00ednkw\u00edn xixa \u0256\u00e9, am\u0254\u030c din \u0254\u0301, a \u0256\u00f3 na \u0256u at\u00ednkw\u00edn \u0256evo bo na f\u00f3 n\u00f9\u0256u\u0256u az\u01cen \u0254\u0301 t\u0254n. a \u0256\u00f3 na l\u025b\u0301 l\u025b\u0301 v\u0254\u0301 n\u01d4 e ny\u00ed [aj\u00ednkw\u00edn e a \u0256u b\u01d0 \u0256\u00f2 n\u00f9\u0256u\u0256u towe gudo \u00e9, at\u00ednkw\u00edn e kpo \u0256\u00f2 n\u00f9\u0256u\u0256u towe gudo \u00e9] \u00e9. enyi at\u00ednkw\u00edn e kpo l\u025b\u0301 kpo \u01ce \u0254\u0301, a na \u0256u at\u00ednkw\u00edn e kpo l\u025b\u0301 kpo, am\u0254\u030c a na l\u025b\u0301 kpo xov\u025b\u0301. Kp\u0254\u0301nd\u00e9w\u00fa: * \u0256u n\u01d4 => 5, 6, 10) -> [11, 4] * \u0256u n\u01d4 => 4, 8, 9) -> [12, 1] * \u0256u n\u01d4 => 1, 10, 10) -> [11, 0] * \u0256u n\u01d4 => 2, 11, 5) -> [7, 0] N\u01d4\u0256\u00ed\u0256\u00f3: @number: n\u00f9jl\u025b\u0301n: n\u00f9jl\u025b\u0301\n    \"\"\"\n",
        "canonical_solution":"    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef do_algebra(operator, operand):\n    \"\"\"\n    \u011b \u0254, \u00e8 n\u0254 s\u0254\u0301 n\u00f9jl\u025b\u0301jl\u025b\u0301 w\u00e8 d\u00f3 wlan n\u00f9jl\u025b\u0301kpikpa \u0254\u0301, b\u0254 \u00e8 n\u0254 s\u0254\u0301 n\u00f9jl\u025b\u0301kpikpa weg\u0254\u0301 \u0254\u0301 d\u00f3 wlan n\u00f9jl\u025b\u0301kpikpa e ny\u00ed n\u00f9jl\u025b\u0301kpikpa al\u025b\u0301gb\u00ed t\u0254n l\u025b\u0301\u025b. \u00c8 n\u0254 s\u0254\u0301 n\u00f9jl\u025b\u0301kpikpa we l\u025b d\u00f3 wlan n\u00f9jl\u025b\u0301kpikpa al\u025b\u0301gb\u00ed t\u0254n l\u025b, b\u0254 \u00e8 n\u0254 l\u025b\u0301 s\u0254\u0301 n\u00f9jl\u025b\u0301kpikpa \u00e9n\u025b\u0301 l\u025b s\u00edn n\u01d4 \u00e8 \u00e8 n\u0254 yl\u0254 \u0256\u0254 \u00e9 l\u025b\u0301\u025b d\u00f3 wlan n\u00f9jl\u025b\u0301kpikpa \u0254\u0301. N\u01d4jl\u025b\u0301kpikpa al\u025b\u0301gb\u00ed t\u0254n l\u025b: H\u0254n (+) H\u0254n (-)) H\u0254n (*) H\u0254n (\/-) H\u0254n (**) Kp\u0254\u0301nd\u00e9w\u00fa: n\u01d4jl\u025b\u0301kpikpa \u0254\n\n    \"\"\"\n",
        "canonical_solution":"    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['\/\/', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(s):\n    \"\"\"\u00e8 na w'az\u0254n s. enyi s[i] ny\u00ed w\u00e8m\u00e1 \u0254, y\u00ed x\u00f3 t\u0254n l\u025b\u0301\u025b s\u00edn d\u00f2 bo w\u00e1 d\u00f3 d\u00f2, al\u01d2 l\u025b\u0301 y\u00ed gb\u00e8, enyi \u00e9 ma ny\u00ed m\u0254\u030c \u01ce \u0254, n\u0254 t\u025bn \u025b\u0301. N\u00fa w\u00e8m\u00e1 \u0254 k\u00fan \u0256\u00f3 w\u00e8m\u00e1 \u0256\u011b \u00f3 \u0254, y\u00ed w\u00e8m\u00e1 \u0254. Function \u0254 na l\u025b\u0301 l\u025b\u0301 w\u00e1 w\u00e8m\u00e1 e \u00e8 m\u0254 \u00e9. Kp\u0254\u0301nd\u00e9w\u00fa solve{\"1234\") = \"4321\"{\"ab\") = \"AB\"{\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
        "canonical_solution":"    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef string_to_md5(text):\n    \"\"\"\n    E na m\u0254 wuntun 'text' \u0254, na l\u025b\u0301 k\u0254 wuntun e \u0256'em\u025b \u00e9 s\u00edn xwi \u0256'em\u025b. Enyi wuntun 'text' \u0254 ma \u0256\u00f2 n\u01d4 \u01ce \u0254, na l\u025b\u0301 k\u0254 None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "canonical_solution":"    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef generate_integers(a, b):\n    \"\"\"\n    n\u00fa \u00e8 na w'az\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254nkp\u0254n\n    \"\"\"\n",
        "canonical_solution":"    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    }
]