task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,tzm_Tfng,rb,"ⴰⵥⵕⵓ ⵥⵕⵖ ⵉⵖ ⴳ ⵓⵎⵙⴳⵔⴰⵡ ⵏ ⵡⵓⵟⵟⵓⵏⵏ, ⵍⵍⴰⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵢⴰⴹⵏⵉⵏ ⵢⵓⴳⵔⵏ # >>> has_close_elements.call([1.0, 2.0, 3.0], 0.5)
# false
# >>> has_close_elements.call([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
# true
def has_close_elements(numbers, threshold)
","def has_close_elements(numbers, threshold)
  numbers.combination(2).any? { |a, b| (a - b).abs < threshold }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_has_close_elements
    candidate = method(:has_close_elements)
    assert_equal(true, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3))
    assert_equal(false, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05))
    assert_equal(true, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.95))
    assert_equal(false, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.8))
    assert_equal(true, candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1))
    assert_equal(true, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 1.0))
    assert_equal(false, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 0.5))
  end
end
"
HumanEval_1,tzm_Tfng,rb,"ⵓⵔ ⴷⴰ ⵏⵜⵜⴰⴼⴰ ⴽⵔⴰ ⵏ ⵡⴰⵏⵙⴰ ⴳ ⵜⵣⵍⵉⵜ ⵏ ⵓⵙⴽⵛⵎ.ⵜⴱⴹⴰⵏⵜ ⵜⵔⵓⴱⴱⴰ ⵏ ⵜⴱⴰⵏⴽⴰ (ⵢⴰⵜⵜⵓⵇⵇⵏ ⴽⵓ ⵜⴰⴱⴰⵏⴽⴰ ⵉⵕⵥⵎⵏ ⵙ ⵓⵖⵓⴷⵓ) ⴷ ⵓⵔ ⵜⵜⵓⵙⵎⵓⵏ ⴳⵔⵙⵏⵜ ⴰⴷ ⵏⵙⴱⴹ ⵜⴰⵔⴰⴱⴱⵓⵜ ⴰⴷ ⵖⵔ ⵜⵉⴼⵉⵏⴰⵖ ⵉⵥⵍⵉⵏ ⴷ ⴰⴷ ⵏⵔⴰⵔ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵜⵉⵏⵏⴰ.ⴰⵙⴽⵛⵎ ⵙ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵉⴳⴰ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⴽⵉⴳⴰⵏ ⵏ ⵜⵔⵓⴱⴱⴰ ⵏ ⵉⴽⵛⵛⵓⵎⵏ ⵉⵎⵣⴳⵓⵏⵏ. ⴰⵡⵜⵜⴰⵙ ⵏⵏⴽ ⵉⴳⴰ ⴰⴷ # >>> separate_paren_groups.call(""( ) (( )) (( )( ))"")
# [""()"", ""(())"", ""(()())""]
def separate_paren_groups(paren_string)
","def separate_paren_groups(paren_string)
  # Remove spaces from the string
  paren_string = paren_string.gsub("" "", """")
  
  result = []
  current_group = """"
  balance = 0

  paren_string.each_char do |char|
    current_group += char
    balance += 1 if char == '('
    balance -= 1 if char == ')'

    if balance == 0 && !current_group.empty?
      result << current_group
      current_group = """"
    end
  end

  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_separate_paren_groups
    candidate = method(:separate_paren_groups)
    assert_equal([""(()())"", ""((()))"", ""()"", ""((())()())""], candidate.call(""(()()) ((())) () ((())()())""))
    assert_equal([""()"", ""(())"", ""((()))"", ""(((())))""], candidate.call(""() (()) ((())) (((())))""))
    assert_equal([""(()(())((())))""], candidate.call(""(()(())((())))""))
    assert_equal([""()"", ""(())"", ""(()())""], candidate.call(""( ) (( )) (( )( ))""))
  end
end
"
HumanEval_2,tzm_Tfng,rb,"ⵔⵣⴼ ⵜⴰⴳⵣⵣⵓⵎⵜ ⵏ ⵓⵟⵟⵓⵏ ⴰⵎⵔⴰⵡ.(ⴰⴳⵣⵣⵓⵎ ⵏ ⵓⵃⴹⵓ ⵉⴳⴰ ⴰⵀⴰ ⵉⵎⵥⵥⵉⵢⵏ ⵙⴳ 1).ⴷ ⵓⴳⵣⵣⵓⵎ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ (ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵅⴰⵜⴰⵔ ⵉⵎⵥⵥⵉⵢⵏ ⵙⴳ ⵓⵟⵟⵓⵏ ⵉⵜⵜⵓⴼⴽⴰⵏ) ⴷ ⵉⵎⴹⴰⵏ ⵉⵎⵔⴰⵡⵏ ⵉⵖ ⵏⴰⴽⴽⴰ ⵢⴰⵏ ⵓⵟⵟⵓⵏ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⵙⵏⴼⵍⵓⵍ ⴰⵎⵢⴰⴷⴰⵙ, ⵏⵣⵎⵔ ⴰⴷ ⵏⵙⴱⴹ # >>> truncate_number.call(3.5)
# 0.5
def truncate_number(number)
","def truncate_number(number)
  number - number.to_i
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_truncate_number
    candidate = method(:truncate_number)
    assert_equal(0.5, candidate.call(3.5))
    assert_equal(0.25, candidate.call(1.25))
    assert_equal(0.0, candidate.call(123.0))
  end
end
"
HumanEval_3,tzm_Tfng,rb,"ⴳ ⵓⵙⴰⵜⵉ ⴷⵖ, ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵙⴽⵔ ⵜⵎⵔⵙⵍⵜ true. ⵎⴽ ⵓⵔ ⵜⴽⴽⴰ, ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵙⴽⵔ false.ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵏⴼⵍⴷ ⵉⵖ ⴳ ⴽⵔⴰ ⵏ ⵜⴰⵙⴳⴰ ⵢⴰⴳⴳⵡⴰⵔ ⵏ ⵓⵎⵢⴰ, ⴷ ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵉⴳⴰⵏ ⵏ ⵜⵎⴳⴳⵉⵜⵉⵏ ⵏ ⵓⵙⵙⴰⵔⵓ ⴷ ⵓⵙⵙⴰⵢ ⴳ ⵢⴰⵏ ⵓⴽⵓⵏⵟⵓⵔ ⵏ ⵍⴱⴰⵏⴽ ⵏⵏⴰ ⵉⵜⵜⴱⴷⴰⴷⵏ ⵙ # >>> below_zero.call([1, 2, 3])
# false
# >>> below_zero.call([1, 2, -4, 5])
# true
def below_zero(operations)
","def below_zero(operations)
  balance = 0
  operations.each do |operation|
    balance += operation
    return true if balance < 0
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_below_zero
    candidate = method(:below_zero)
    assert_equal(false, candidate.call([]))
    assert_equal(false, candidate.call([1, 2, -3, 1, 2, -3]))
    assert_equal(true, candidate.call([1, 2, -4, 5, 6]))
    assert_equal(false, candidate.call([1, -1, 2, -2, 5, -5, 4, -4]))
    assert_equal(true, candidate.call([1, -1, 2, -2, 5, -5, 4, -5]))
    assert_equal(true, candidate.call([1, -2, 2, -2, 5, -5, 4, -4]))
  end
end
"
HumanEval_4,tzm_Tfng,rb,"MAD = ⴰⵙⵖⵏ. x - x_mean. ⵉⴼⵔⴷⵉⵙⵏ ⴷ ⵜⵏⵇⵇⵉⴹⵜ ⵜⴰⵏⴰⵎⵎⴰⵙⵜ (ⴰⵎⵎⴰⵙⵙ ⴳ ⵡⴰⴷⴷⴰⴷ ⴰⴷ): ⵉⴳⴰ ⵡⵓⴳⴳⵓⴳ ⵏ ⵓⴱⴰⵢⵢⵓⵕ ⴰⴱⵔⵙⴳⴳⵡⴰⴷ ⴰⵎⵣⴰⵔⴰⵢ ⴰⴱⵔⵙⴳⴳⵡⴰⴷ ⴳⵔ ⴽⵓ ⴳ ⵓⵜⵉⴳ ⵏ ⵡⴰⵜⵉⴳ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵉⵙⴼⴽⴰ.ⵉ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⴽⵛⵛⵓⵎ, ⵙⵙⵉⴹⵏ ⴰⵎⵏⵣⴰⵢ ⴰⵖⴰⵔⴰⵏ # >>> mean_absolute_deviation.call([1.0, 2.0, 3.0, 4.0])
# 1.0
def mean_absolute_deviation(numbers)
","def mean_absolute_deviation(numbers)
  mean = numbers.sum.to_f / numbers.size
  deviations = numbers.map { |num| (num - mean).abs }
  deviations.sum / numbers.size
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_mean_absolute_deviation
    candidate = method(:mean_absolute_deviation)
    assert_equal(0.5, candidate.call([1.0, 2.0]))
    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))
    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))
  end
end
"
HumanEval_5,tzm_Tfng,rb,"ⵙⴽⵛⵎ ⴰⵎⴹⴰⵏ ""ⴷⵉⵍⵉⵜⵔ"" ⴳⵔ ⴽⵓ ⵙⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⴹⴼⴰⵕⵏ ⵏ ⵓⵎⵙⴷⵓⵙ ⵏ ⵓⴽⵛⵛⵓⵎ ∀numbers"" # >>> intersperse.call([], 4)
# []
# >>> intersperse.call([1, 2, 3], 4)
# [1, 4, 2, 4, 3]
def intersperse(numbers, delimeter)
","def intersperse(numbers, delimeter)
  return numbers if numbers.empty?
  result = []
  numbers.each_with_index do |num, index|
    result << num
    result << delimeter unless index == numbers.size - 1
  end
  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_intersperse
    candidate = method(:intersperse)
    assert_equal([], candidate.call([], 7))
    assert_equal([5, 8, 6, 8, 3, 8, 2], candidate.call([5, 6, 3, 2], 8))
    assert_equal([2, 2, 2, 2, 2], candidate.call([2, 2, 2], 2))
  end
end
"
HumanEval_6,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ (() (()) ⵖⵓⵔⵙ ⵙⵉⵏ ⵉⵙⵡⵉⵔⵏ ⵏ ⵓⵖⵔⵔⴰⴱⵓ ⴳ ⵜⵉⵣⵉ ⵏⵏⴰ ⴳ ((())) ⵖⵓⵔⵙ ⴽⵕⴰⴹ. ⵉ ⴽⵓ ⵜⴰⵔⴰⴱⴱⵓⵜ, ⵙⵙⵓⴼⵖ ⴰⵙⵡⵉⵔ ⵏ ⵓⵙⵎⵓⵏ ⵏ ⵜⴱⵕⴰⵏⴽⵉⵙⵉⵏ.ⴰⵙⴽⵛⵎ ⵏ ⵜⵡⵓⵔⵉ ⴰⴷ ⵉⴳⴰ ⵢⴰⵏ ⵓⴽⵛⵛⵓⵎ ⵉⵙⵎⴷⵢⴰⵏ ⴽⵉⴳⴰⵏ ⵏ ⵜⵔⵓⴱⴱⴰ ⵉ ⵜⴱⵕⴰⵏⴽⵉⵙⵉⵏ ⵉⵜⵜⵓⵙⵏⵎⵍⴰⵏ ⵉⴱⴹⴰⵏ ⵙ ⵉⵎⵏⵉⴷⵏ.# >>> parse_nested_parens.call(""(()()) ((())) () ((())()())"")
# [2, 3, 1, 3]
def parse_nested_parens(paren_string)
","def parse_nested_parens(paren_string)
  paren_string.split.map do |group|
    max_depth = current_depth = 0
    group.chars.each do |char|
      if char == '('
        current_depth += 1
        max_depth = [max_depth, current_depth].max
      elsif char == ')'
        current_depth -= 1
      end
    end
    max_depth
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_parse_nested_parens
    candidate = method(:parse_nested_parens)
    assert_equal([2, 3, 1, 3], candidate.call(""(()()) ((())) () ((())()())""))
    assert_equal([1, 2, 3, 4], candidate.call(""() (()) ((())) (((())))""))
    assert_equal([4], candidate.call(""(()(())((())))""))
  end
end
"
HumanEval_7,tzm_Tfng,rb,"ⵙⵙⵓⴼⵖ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵓⴽⵛⵛⵓⵎ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵖⴰⵙ ⵉ ⵡⵉⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵓⵙⵏⵙⵉ ⵏ ⵜⵏⴰⴼⵓⵜ # >>> filter_by_substring.call([], ""a"")
# []
# >>> filter_by_substring.call([""abc"", ""bacd"", ""cde"", ""array""], ""a"")
# [""abc"", ""bacd"", ""array""]
def filter_by_substring(strings, substring)
","def filter_by_substring(strings, substring)
  strings.select { |string| string.include?(substring) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_filter_by_substring
    candidate = method(:filter_by_substring)
    assert_equal([], candidate.call([], ""john""))
    assert_equal([""xxx"", ""xxxAAA"", ""xxx""], candidate.call([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""))
    assert_equal([""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""], candidate.call([""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xx""))
    assert_equal([""grunt"", ""prune""], candidate.call([""grunt"", ""trumpet"", ""prune"", ""gruesome""], ""run""))
  end
end
"
HumanEval_8,tzm_Tfng,rb,"ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⴳ ⵜⵔⵎⵜ ⵜⵓⵎⵍⵉⵍⵜ 0 ⴷ ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⴳ ⵜⵔⵎⵜ ⵜⵓⵎⵍⵉⵍⵜ 1.ⵉ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴼⵖ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵓⵖⵣⵓⵔ ⴷ ⵓⵙⴼⴰⵔ ⵏ ⵉⵎⴹⴰⵏⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳ ⵓⵙⵏⵙⵍ.# >>> sum_product.call([])
# [0, 1]
# >>> sum_product.call([1, 2, 3, 4])
# [10, 24]
def sum_product(numbers)
","def sum_product(numbers)
  sum = numbers.reduce(0, :+)
  product = numbers.reduce(1, :*)
  [sum, product]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sum_product
    candidate = method(:sum_product)
    assert_equal([0, 1], candidate.call([]))
    assert_equal([3, 1], candidate.call([1, 1, 1]))
    assert_equal([100, 0], candidate.call([100, 0]))
    assert_equal([15, 105], candidate.call([3, 5, 7]))
    assert_equal([10, 10], candidate.call([10]))
  end
end
"
HumanEval_9,tzm_Tfng,rb,"ⴳ ⵓⴹⴼⴼⵓⵕ.ⵙⴳ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴼⵖ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵓⴽⵜⵜⴰⵢ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵜⵜⵢⴰⴼⴰⵏ ⴰⵔ ⵜⵉⵣⵉ ⵏⵏⴰ ⵔⴰⴷ ⵉⵜⵜⵢⴰⴼⴰ.# >>> rolling_max.call([1, 2, 3, 2, 3, 4, 2])
# [1, 2, 3, 3, 3, 4, 4]
def rolling_max(numbers)
","def rolling_max(numbers)
  max_so_far = numbers.first
  numbers.map do |num|
    max_so_far = [max_so_far, num].max
  end
end

# Example usage:
# puts rolling_max([1, 2, 3, 2, 3, 4, 2]).inspect","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_rolling_max
    candidate = method(:rolling_max)
    assert_equal([], candidate.call([]))
    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))
    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))
    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))
  end
end
"
HumanEval_10,tzm_Tfng,rb,"- ⴰⴷ ⵏⴰⵔⵉ ⴳ ⵜⴳⵉⵔⴰ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵜⵣⴳⴰⵍ ⵏ ⵜⵣⴳⴰⵍ ⵏ ⵜⵣⴳⴰⵍ ⵏⵏⴰ ⵉⵜⵜⵓⵢⴰⵍⵙⵏ ⴷⴰⵜ ⵏ ⵜⵣⴳⴰⵍⵜ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉⵜ.- ⵥⴹⴰⵕⵖ ⴰⴷ ⵙⵏⵓⵎⵍⵖ ⵜⴰⵡⴰⵍⵜ ⵜⴰⵖⵣⵉⴼⵜ ⵏ ⵜⵔⴳⴰⵍⵜ ⵏⵏⴰ ⵉⴳⴰⵏ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵜ. ⵜⴰⵡⵏⴳⵉⵎⵜ ⵏ ⴰⵍⴳⵓⵔⵉⵜⵎ ⵜⴳⴰ ⵜⵓⵏⵙⵉⴱⵜ: ⵥⴹⴰⵕⵖ ⴰⴷ ⵙⵏⵓⵎⵍⵖ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵜ ⵜⴰⵔⵓⵙⵜ ⵏⵏⴰ ⵉⵜⵜⴱⴷⴰⴷⵏ ⵙ ⵜⵣⵍⵉⵜ ⵏⵏⴰ ⵙ ⴷ ⵢⵉⵡⵉ.# >>> make_palindrome.call("""")
# """"
# >>> make_palindrome.call(""cat"")
# ""catac""
# >>> make_palindrome.call(""cata"")
# ""catac""
def make_palindrome(string)
","def make_palindrome(string)
  return string if string.empty?

  def is_palindrome?(s)
    s == s.reverse
  end

  (0...string.length).reverse_each do |i|
    if is_palindrome?(string[i..-1])
      return string + string[0...i].reverse
    end
  end

  string
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_make_palindrome
    candidate = method(:make_palindrome)
    assert_equal("""", candidate.call(""""))
    assert_equal(""x"", candidate.call(""x""))
    assert_equal(""xyzyx"", candidate.call(""xyz""))
    assert_equal(""xyx"", candidate.call(""xyx""))
    assert_equal(""jerryrrej"", candidate.call(""jerry""))
  end
end
"
HumanEval_11,tzm_Tfng,rb,"ⵙⴽⵔ XOR ⴱⵉⵏⴰⵔⵉ ⵅⴼ ⵉⵙⴽⴽⵉⵍⵏ ⴰⴷ ⵏ ⵓⵙⴽⵛⵎ ⴷ ⵜⵔⴰⵔ ⵜⴰⵢⴰⴼⵓⵜ ⴰⵡⴷ ⵏⵜⵜⴰⵜ ⴰⵎⵎ ⵜⵉⴼⵉⵏⴰⵖ.ⵉⵏⴽⵛⵎ ⵙⵉⵏ ⵉⵙⴽⴽⵉⵍⵏ a ⴷ b ⴳ ⵍⵍⴰⵏⵜ ⵅⴰⵙ 1 ⴷ 0# >>> string_xor.call(""010"", ""110"")
# ""100""
def string_xor(a, b)
","def string_xor(a, b)
  result = """"
  a.length.times do |i|
    result << (a[i] == b[i] ? ""0"" : ""1"")
  end
  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_string_xor
    candidate = method(:string_xor)
    assert_equal(""010010"", candidate.call(""111000"", ""101010""))
    assert_equal(""0"", candidate.call(""1"", ""1""))
    assert_equal(""0101"", candidate.call(""0101"", ""0000""))
  end
end
"
HumanEval_12,tzm_Tfng,rb,"ⵔⴰⴷ ⵢⴰⴽⴽⴰ nil ⴳ ⵡⴰⴷⴷⴰⴷ ⵏ ⵓⵙⵏⴼⵍⵓⵍ ⵏ ⵓⵙⴽⵛⵎ ⵉⴳⴰⵏ ⵡⴰⴽⴰⵍ.ⴳ ⵓⵎⵙⴳⵔⴰⵡ ⵏ ⵉⵙⴽⴽⵉⵍⵏ, ⵙⵙⵓⴼⵖ ⴰⵎⵣⵡⴰⵔⵓ ⴳ ⵡⴰⴷⴷⴰⴷ ⵏ ⴽⵉⴳⴰⵏ ⵏ # >>> longest.call([])
# nil
# >>> longest.call([""a"", ""b"", ""c""])
# ""a""
# >>> longest.call([""a"", ""bb"", ""ccc""])
# ""ccc""
def longest(strings)
","def longest(strings)
  return nil if strings.empty?
  strings.max_by(&:length)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_longest
    candidate = method(:longest)
    assert_equal(nil, candidate.call([]))
    assert_equal(""x"", candidate.call([""x"", ""y"", ""z""]))
    assert_equal(""zzzz"", candidate.call([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""]))
  end
end
"
HumanEval_13,tzm_Tfng,rb,"ⴰⴷ ⵏⵔⴰⵔ ⴰⵎⵟⵟⵓ ⴰⵎⵛⵛⴰⵔⵏ ⴰⵅⴰⵜⴰⵔ ⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ a ⴷ b # >>> greatest_common_divisor.call(3, 5)
# 1
# >>> greatest_common_divisor.call(25, 15)
# 5
def greatest_common_divisor(a, b)
","def greatest_common_divisor(a, b)
  while b != 0
    a, b = b, a % b
  end
  a
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_greatest_common_divisor
    candidate = method(:greatest_common_divisor)
    assert_equal(1, candidate.call(3, 7))
    assert_equal(5, candidate.call(10, 15))
    assert_equal(7, candidate.call(49, 14))
    assert_equal(12, candidate.call(144, 60))
  end
end
"
HumanEval_14,tzm_Tfng,rb,"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⴰⵙⵏⵙⵍ ⵏ ⴽⵓⵍⵍⵓ ⵉⵙⵏⴼⴰⵔⵏ ⵙⴳ ⵓⵏⵥⵥⵓ ⴰⵔ ⵓⵣⵉⵍ ⵏ ⵜⵣⵍⵉⵜ ⵏ ⵓⵙⴽⵛⵎ # >>> all_prefixes.call(""abc"")
# [""a"", ""ab"", ""abc""]
def all_prefixes(string)
","def all_prefixes(string)
  (1..string.length).map { |i| string[0, i] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_all_prefixes
    candidate = method(:all_prefixes)
    assert_equal([], candidate.call(""""))
    assert_equal([""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""], candidate.call(""asdfgh""))
    assert_equal([""W"", ""WW"", ""WWW""], candidate.call(""WWW""))
  end
end
"
HumanEval_15,tzm_Tfng,rb,"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵉⵎⴹⴰⵏⵏ ⵉⵜⵜⵓⵙⵏⴽⴰⴷⵏ ⵙ ⵓⵙⴰⵢⵔⴰⵔ ⴳ ⵓⵎⵣⵡⴰⵔⵓ ⵙⴳ 0 ⴰⵔ n. # >>> string_sequence.call(0)
# ""0""
# >>> string_sequence.call(5)
# ""0 1 2 3 4 5""
def string_sequence(n)
","def string_sequence(n)
  (0..n).to_a.join(' ')
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_string_sequence
    candidate = method(:string_sequence)
    assert_equal(""0"", candidate.call(0))
    assert_equal(""0 1 2 3"", candidate.call(3))
    assert_equal(""0 1 2 3 4 5 6 7 8 9 10"", candidate.call(10))
  end
end
"
HumanEval_16,tzm_Tfng,rb,"ⴹⴼⵓⵕ ⵢⴰⵜ ⵜⵉⴼⵉⵏⴰⵖ, ⵥⵕ ⵎⵏⵏⴰⵡⵜ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵢⴰⵏⴰⵡⵏ (ⵓⵔ ⵜⵥⵍⵉ ⵙ ⵓⵙⴽⴽⵉⵍ ⴰⵎⵥⵥⵢⴰⵏ) # >>> count_distinct_characters.call(""xyzXYZ"")
# 3
# >>> count_distinct_characters.call(""Jerry"")
# 4
def count_distinct_characters(string)
","def count_distinct_characters(string)
  string.downcase.chars.uniq.count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_count_distinct_characters
    candidate = method(:count_distinct_characters)
    assert_equal(0, candidate.call(""""))
    assert_equal(5, candidate.call(""abcde""))
    assert_equal(5, candidate.call(""abcdecadeCADE""))
    assert_equal(1, candidate.call(""aaaaAAAAaaaa""))
    assert_equal(5, candidate.call(""Jerry jERRY JeRRRY""))
  end
end
"
HumanEval_17,tzm_Tfng,rb,"'ⴰⵙⴰⴽⴰ' - ⴰⴽⴽⵡⵓⵥ ⵏ ⵓⵥⴰⵡⴰⵏ, ⴷⴰ ⵉⵜⵜⴳⴳ ⵢⴰⵏ ⵓⴽⴰⴱⴰⵕ ""oǧoǧoǧ"" - ⴰⵣⴳⵏ ⵏ ⵜⵓⵏⵖⵉⵍⵜ, ⴷⴰ ⵉⵇⵇⵉⵎ ⵙⵏⴰⵜ ⵜⵓⵔⵉⵏ 'o' - ⴰⵖⵏⵏⵉⵊ ⴰⴽⴽⵡ, ⴷⴰ ⵉⵜⵜⴳⴳⴰⵔ ⴽⴽⵓⵥ ⵏ ⵉⵔⵖⴰⵏ ⵀⴰ ⵢⴰⵏ ⵓⵎⵣⵔⵓⵢ:ⵓⵔ ⴷ ⴰⵎⴳⴳⴰⵔⵓ.ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⴼⵙⵉ ⵜⴰⵡⴰⵍⵜ ⴰⴷ ⴷ ⴰⴷ ⵜⵔⴰⵔ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵏⴰ ⵉⵣⴷⵉⵏ ⴷ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⴽⵙⵙⵉ ⵏ ⴽⵓ ⵜⴰⵡⴰⵍⵜ.ⴰⵙⴽⵛⵎ ⵏ ⵜⵡⵓⵔⵉ ⴰⴷ ⵉⴳⴰ ⵜ ⵢⴰⵏ ⵓⴽⵙⵉⵍ ⵉⵙⵎⴷⵢⴰⵏ ⵜⵉⵔⵔⴰ ⵏ ⵓⵥⴰⵡⴰⵏ ⵙ ⵜⵍⵖⴰ ⵏ ASCII ⵉⵥⵍⵉⵏ.# >>> parse_music.call(""o o| .| o| o| .| .| .| .| o o"")
# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
def parse_music(music_string)
","def parse_music(music_string)
  # Split the input string into individual notes.
  notes = music_string.split

  # Map each note to its corresponding number of beats.
  notes.map do |note|
    case note
    when 'o'
      4
    when 'o|'
      2
    when '.|'
      1
    else
      0
    end
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_parse_music
    candidate = method(:parse_music)
    assert_equal([], candidate.call(""""))
    assert_equal([4, 4, 4, 4], candidate.call(""o o o o""))
    assert_equal([1, 1, 1, 1], candidate.call("".| .| .| .|""))
    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(""o| o| .| .| o o o o""))
    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(""o| .| o| .| o o| o o|""))
  end
end
"
HumanEval_18,tzm_Tfng,rb,"ⵥⵕ ⵎⵏⵏⴰⵡⵜ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⵔⴰⴷ ⵢⵉⵍⵉ ⵡⴰⵜⵉⴳ ⵏ ⵜⵔⴳⴰⵍⵜ ⴳ ⵜⵔⴳⴰⵍⵜ ⵜⴰⵢⵎⵎⴰⵜ. ⵥⵕ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⵔⴰⴷ ⵢⵉⵍⵉ ⵡⴰⵜⵉⴳ ⵏ ⵜⵔⴳⴰⵍⵜ.# >>> how_many_times.call("""", ""a"")
# 0
# >>> how_many_times.call(""aaa"", ""a"")
# 3
# >>> how_many_times.call(""aaaa"", ""aa"")
# 3
def how_many_times(string, substring)
","def how_many_times(string, substring)
  return 0 if substring.empty?
  count = 0
  i = 0
  while i <= string.length - substring.length
    if string[i, substring.length] == substring
      count += 1
    end
    i += 1
  end
  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_how_many_times
    candidate = method(:how_many_times)
    assert_equal(0, candidate.call("""", ""x""))
    assert_equal(4, candidate.call(""xyxyxyx"", ""x""))
    assert_equal(4, candidate.call(""cacacacac"", ""cac""))
    assert_equal(1, candidate.call(""john doe"", ""john""))
  end
end
"
HumanEval_19,tzm_Tfng,rb,"ⴰⵔ ⵏⵙⵙⴽⵛⵎ ⵜⵉⴼⵉⵏⴰⵖ ⵙ ⵉⵎⴹⴰⵏⵏ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙⴳ ⵉⵎⵥⵥⵢⴰⵏⵏ ⴰⵔ ⵉⵎⵇⵇⵔⴰⵏⵏ ⵉⵙⵜⴰⵢⵏ ⵉⵣⵔⴼⴰⵏ ⴳⴰⵏ ""ⵥⴹⴰⵕ"", ""ⵢⵉⵡⵏ"", "" ⵙⵉⵏ"", "" ⴽⵕⴰⴹ"", "" ⴽⴽⵓⵥ"", ""ⵎⵎⵓⵙ"", ""ⵚⴹⵉⵚ"", ""ⴰⵙⵙⴰ"", ""ⴰⵙⴰ"" ⴷ ""ⴰⵥⴰ"". ⴰⵙⴽⵛⵎ ⵉⴳⴰ ⵜ ⵢⴰⵏ ⵓⴽⵛⵛⵓⵎ ⵏ ⵡⵓⵟⵟⵓⵏ ⵙⴳ ""ⵙⵢⴰ"" ⴰⵔ ""ⵜⵥⴰ""# >>> sort_numbers.call(""three one five"")
# ""one three five""
def sort_numbers(numbers)
","def sort_numbers(numbers)
  numeral_map = {
    'zero' => 0,
    'one' => 1,
    'two' => 2,
    'three' => 3,
    'four' => 4,
    'five' => 5,
    'six' => 6,
    'seven' => 7,
    'eight' => 8,
    'nine' => 9
  }

  number_words = numbers.split
  sorted_numbers = number_words.sort_by { |word| numeral_map[word] }
  sorted_numbers.join(' ')
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_numbers
    candidate = method(:sort_numbers)
    assert_equal("""", candidate.call(""""))
    assert_equal(""three"", candidate.call(""three""))
    assert_equal(""three five nine"", candidate.call(""three five nine""))
    assert_equal(""zero four five seven eight nine"", candidate.call(""five zero four seven nine eight""))
    assert_equal(""zero one two three four five six"", candidate.call(""six five four three two one zero""))
  end
end
"
HumanEval_20,tzm_Tfng,rb,"ⴹⴰⵕⵜ ⵓⵢⴰ, ⵔⴰⴷ ⵜⵏⵜ ⵙⵙⵓⴼⵖ ⵙ ⵓⵙⵓⴷⵙ (ⴰⵎⴹⴰⵏ ⴰⵎⵥⵥⵢⴰⵏ, ⴰⵎⴹⴰⵏ ⴰⵎⵇⵇⵔⴰⵏ).ⵙⴳ ⵓⵎⵙⴷⵓⵙ ⵏ ⵉⵎⴹⴰⵏⵏ (ⵙ ⵓⴳⴳⴰⵔ ⵏ ⵙⵉⵏ) ⵉⵙⵜⴰⵢ ⴷ ⵢⴰⴽⴽⴰ ⵙⵉⵏ ⵉⵎⴹⴰⵏⵏ ⵏⵏⴰ ⵢⵜⵜⵎⴰⵥⵏ ⴽⵓ ⵢⴰⵏ # >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
# [2.0, 2.2]
# >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
# [2.0, 2.0]
def find_closest_elements(numbers)
","def find_closest_elements(numbers)
  sorted_numbers = numbers.sort
  closest_pair = [sorted_numbers[0], sorted_numbers[1]]
  min_difference = (sorted_numbers[1] - sorted_numbers[0]).abs

  (1...(sorted_numbers.length - 1)).each do |i|
    current_difference = (sorted_numbers[i + 1] - sorted_numbers[i]).abs
    if current_difference < min_difference
      min_difference = current_difference
      closest_pair = [sorted_numbers[i], sorted_numbers[i + 1]]
    end
  end

  closest_pair
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_find_closest_elements
    candidate = method(:find_closest_elements)
    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))
    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))
    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))
    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))
    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))
  end
end
"
HumanEval_21,tzm_Tfng,rb,"ⵣⵓⵏⴷ ⵎⴰⵙⴷ ⴰⵎⴹⴰⵏ ⴰⵎⵥⵥⵢⴰⵏ ⴰⴷ ⵉⴳⴰⵏ 0 ⴷ ⴰⵎⴹⴰⵏ ⴰⵎⵇⵔⴰⵏ ⴰⴷ ⵉⴳⴰⵏ 1 ⴳ ⵓⵙⵏⵙⵉ ⵏ ⵡⵓⵟⵟⵓⵏⵏ (ⵙ ⵙⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵓⴷⵖⴰⵔ), ⵙⵙⵎⵔⵙⵏ ⴰⵙⵏⴼⵍ ⴰⵎⵏⵣⵓ ⵉ ⵓⵙⵏⵙⵉ ⵢⴰⴷ, # >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])
# [0.0, 0.25, 0.5, 0.75, 1.0]
def rescale_to_unit(numbers)
","def rescale_to_unit(numbers)
  min = numbers.min
  max = numbers.max
  range = max - min
  return numbers.map { |num| (num - min) / range.to_f }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_rescale_to_unit
    candidate = method(:rescale_to_unit)
    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))
    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))
    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))
    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))
    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))
  end
end
"
HumanEval_22,tzm_Tfng,rb,"ⴰⵙⴼⵉⵍⵍ ⵏ ⵓⵙⵏⵙⵉ ⵏ ⴽⵔⴰ ⵏ ⵡⴰⵜⵉⴳⵏ ⵏ rbthon ⵖⴰⵙ ⵉ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ # >>> filter_integers.call([""a"", 3.14, 5])
# [5]
# >>> filter_integers.call([1, 2, 3, ""abc"", {}, []])
# [1, 2, 3]
def filter_integers(values)
","def filter_integers(values)
  values.select { |value| value.is_a?(Integer) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_filter_integers
    candidate = method(:filter_integers)
    assert_equal([], candidate.call([]))
    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, ""adasd""]))
    assert_equal([3, 3, 3], candidate.call([3, ""c"", 3, 3, ""a"", ""b""]))
  end
end
"
HumanEval_23,tzm_Tfng,rb,"ⵔⴰⴷ ⵜⵔⴰⵔ ⵜⴰⵖⵣⵉ ⵏ ⵜⵣⵍⵉⵜ # >>> strlen.call("""")
# 0
# >>> strlen.call(""abc"")
# 3
def strlen(string)
","strlen = lambda do |string|
  string.length
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_strlen
    candidate = method(:strlen)
    assert_equal(0, candidate.call(""""))
    assert_equal(1, candidate.call(""x""))
    assert_equal(9, candidate.call(""asdasnakj""))
  end
end
"
HumanEval_24,tzm_Tfng,rb,"ⵉ ⵓⵎⴹⴰⵏ n, ⵥⴹⴰⵕⵖ ⴰⴷ ⵙⵙⵏⵖ ⴰⵎⴹⴰⵏ ⴰⵅⴰⵜⴰⵔ ⵏⵏⴰ ⵉⵜⵜⴱⴹⵓⵏ n ⵙ ⵉⵎⵉⴽ, ⴷ ⵉⵎⵥⵥⵉⵏ ⵓⴳⴳⴰⵔ ⵏ n # >>> largest_divisor.call(15)
# 5
def largest_divisor(n)
","def largest_divisor(n)
  (n - 1).downto(1) do |i|
    return i if n % i == 0
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_largest_divisor
    candidate = method(:largest_divisor)
    assert_equal(1, candidate.call(3))
    assert_equal(1, candidate.call(7))
    assert_equal(5, candidate.call(10))
    assert_equal(50, candidate.call(100))
    assert_equal(7, candidate.call(49))
  end
end
"
HumanEval_25,tzm_Tfng,rb,"ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⵙⴽⵛⵎ ⴰⵎⵢⴰⵡⴰⵙ ⵏ ⴽⵓⵍⵍⵓ ⵉⵎⴳⴳⵉⵜⵏ.ⴽⵓ ⵢⴰⵏ ⴳ ⵉⵎⴳⴳⵉⵜⵏ ⴰⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⵜⵜⵓⵙⵏⵎⴰⵍⴰ ⵙ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⵉⵣⴷⵉⵏ ⴷ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⴷⴰ ⵉⵜⵜⵓⴳⴰ ⴳ ⵓⵙⴼⵙⵔ.ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵉⵎⴹⴰⵏⵏ ⵉⵎⵣⵡⵓⵔⴰ ⵏ ⵉⵎⴳⴳⵉⵜⵏ ⵉⵎⵣⵡⵓⵔⴰ ⵏ ⵉⵎⴹⴰⵏⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳ ⵓⴱⵔⵉⴷ ⵙⴳ ⵉⵎⵥⵥⵉⵏ ⴰⵔ ⵉⵎⵇⵇⵔⴰⵏ.# >>> factorize.call(8)
# [2, 2, 2]
# >>> factorize.call(25)
# [5, 5]
# >>> factorize.call(70)
# [2, 5, 7]
def factorize(n)
","def factorize(n)
  factors = []
  divisor = 2
  while n > 1
    while n % divisor == 0
      factors << divisor
      n /= divisor
    end
    divisor += 1
  end
  factors
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_factorize
    candidate = method(:factorize)
    assert_equal([2], candidate.call(2))
    assert_equal([2, 2], candidate.call(4))
    assert_equal([2, 2, 2], candidate.call(8))
    assert_equal([3, 19], candidate.call(57))
    assert_equal([3, 3, 19, 19], candidate.call(3249))
    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))
    assert_equal([3, 19, 19, 19], candidate.call(20577))
    assert_equal([2, 3, 3], candidate.call(18))
  end
end
"
HumanEval_26,tzm_Tfng,rb,"ⵃⴹⵓ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵥⵍⵉⵏⵉⵏ ⵙ ⵡⴰⵏⴰⵡ ⵏ ⵓⵙⴽⵛⵎ.ⵙⴳ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴼⵖ ⴽⵓⵍⵍⵓ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⵉⵜⵜⵊⵕⴰⵏ ⵓⴳⴳⴰⵔ ⵏ ⵢⴰⵜ ⵜⵉⴽⴽⵍⵜ.# >>> remove_duplicates.call([1, 2, 3, 2, 4])
# [1, 3, 4]
def remove_duplicates(numbers)
","def remove_duplicates(numbers)
  numbers.select { |num| numbers.count(num) == 1 }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_remove_duplicates
    candidate = method(:remove_duplicates)
    assert_equal([], candidate.call([]))
    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))
    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))
  end
end
"
HumanEval_27,tzm_Tfng,rb,"ⵉ ⵢⴰⵏ ⵓⴽⵜⵓⵎ, ⵙⵙⵓⵜⵍ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵥⵥⵉⵏ ⵙ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵇⵔⴰⵏⵏ ⴷ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵥⵥⵉⵏⵏ ⵙ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵥⵥⵉⵏⵏ.# >>> flip_case.call(""Hello"")
# ""hELLO""
def flip_case(string)
","def flip_case(string)
  string.swapcase
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_flip_case
    candidate = method(:flip_case)
    assert_equal("""", candidate.call(""""))
    assert_equal(""hELLO!"", candidate.call(""Hello!""))
    assert_equal(""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"", candidate.call(""These violent delights have violent ends""))
  end
end
"
HumanEval_28,tzm_Tfng,rb,"ⴰⵙⵎⵓⵏ ⵏ ⵜⵓⴳⵜ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⴳ ⵢⴰⵜ ⵜⵉⵔⵔⴰ # >>> concatenate.call([])
# """"
# >>> concatenate.call([""a"", ""b"", ""c""])
# ""abc""
def concatenate(strings)
","def concatenate(strings)
  strings.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_concatenate
    candidate = method(:concatenate)
    assert_equal("""", candidate.call([]))
    assert_equal(""xyz"", candidate.call([""x"", ""y"", ""z""]))
    assert_equal(""xyzwk"", candidate.call([""x"", ""y"", ""z"", ""w"", ""k""]))
  end
end
"
HumanEval_29,tzm_Tfng,rb,"ⵔⴰⴷ ⵏⵙⵓⴼⵔ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵉⵏⵙⴰⵏ ⵏ ⵓⵙⴽⵛⵎ ⵖⴰⵙ ⵉ ⵡⵉⵏⵏⴰ ⵉⵙⵙⵏⵜⵉⵢⵏ ⵙ ⵢⴰⵏ ⵓⵣⵡⵍ ⵉⵜⵜⵓⵙⴽⴰⵔⵏ.# >>> filter_by_prefix.call([], ""a"")
# []
# >>> filter_by_prefix.call([""abc"", ""bcd"", ""cde"", ""array""], ""a"")
# [""abc"", ""array""]
def filter_by_prefix(strings, prefix)
","def filter_by_prefix(strings, prefix)
  strings.select { |string| string.start_with?(prefix) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_filter_by_prefix
    candidate = method(:filter_by_prefix)
    assert_equal([], candidate.call([], ""john""))
    assert_equal([""xxx"", ""xxxAAA"", ""xxx""], candidate.call([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""))
  end
end
"
HumanEval_30,tzm_Tfng,rb,"ⴷⴰⴷⴷⴰ ⴷⴰⵢ ⴷⴰⴷⴷⴰ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⵏⵖⴰⵏⵏ ⴳ ⵓⵎⵙⴳⴷⴰⵍ.# >>> get_positive.call([-1, 2, -4, 5, 6])
# [2, 5, 6]
# >>> get_positive.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
# [5, 3, 2, 3, 9, 123, 1]
def get_positive(l)
","get_positive = lambda do |l|
  l.select { |num| num > 0 }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_positive
    candidate = method(:get_positive)
    assert_equal([4, 5, 6], candidate.call([-1, -2, 4, 5, 6]))
    assert_equal([5, 3, 2, 3, 3, 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))
    assert_equal([], candidate.call([-1, -2]))
    assert_equal([], candidate.call([]))
  end
end
"
HumanEval_31,tzm_Tfng,rb,"ⴰⵔ ⵉⵜⵜⵔ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵓⵟⵟⵓⵏ ⴰⵎⵣⵡⴰⵔⵓ, ⴷ ⵜⵉⴷⵜ ⵎⴽ ⵓⵔ ⵉⴳⵉ.# >>> is_prime.call(6)
# false
# >>> is_prime.call(101)
# true
# >>> is_prime.call(11)
# true
# >>> is_prime.call(13441)
# true
# >>> is_prime.call(61)
# true
# >>> is_prime.call(4)
# false
# >>> is_prime.call(1)
# false
def is_prime(n)
","is_prime = lambda do |n|
  return false if n <= 1
  return true if n == 2
  return false if n.even?

  max_divisor = Math.sqrt(n).to_i
  (3..max_divisor).step(2).each do |i|
    return false if n % i == 0
  end

  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_prime
    candidate = method(:is_prime)
    assert_equal(false, candidate.call(6))
    assert_equal(true, candidate.call(101))
    assert_equal(true, candidate.call(11))
    assert_equal(true, candidate.call(13441))
    assert_equal(true, candidate.call(61))
    assert_equal(false, candidate.call(4))
    assert_equal(false, candidate.call(1))
    assert_equal(true, candidate.call(5))
    assert_equal(true, candidate.call(11))
    assert_equal(true, candidate.call(17))
    assert_equal(false, candidate.call(85))
    assert_equal(false, candidate.call(77))
    assert_equal(false, candidate.call(255379))
  end
end
"
HumanEval_33,tzm_Tfng,rb,"ⵀⴰⵜ ⵓⵔ ⴷⴰⵔⵙⵏⵜ ⵜⵉⵣⵎⵎⴰⵔ ⵏ ⵓⵙⵎⵓⵜⵜⴳ ⵏ ⵡⴰⵜⵉⴳⵏ ⵏ ⵉⵙⵏⴼⴰⵔⵏ ⵏ l, ⵎⴰⵛⴰ ⵜⵜⵓⵙⵎⵉⵍⵏⵜ.l' ⵉⵎⵙⴰⵙⴰ ⴷ l ⴳ ⵉⵙⵏⴼⴰⵔⵏ ⵏⵏⴰ ⵓⵔ ⵉⵜⵜⵓⴹⴼⴰⵔⵏ ⵙ ⴽⵕⴰⴹ, ⵎⴰⵛⴰ ⵜⵉⵏⵉⴳⵉⵏ ⵏⵏⵙ ⴳ ⵉⵙⵏⴼⴰⵔⵏ ⵏⵏⴰ ⵉⵜⵜⵓⴹⴼⴰⵔⵏ ⵙ ⴽⵕⴰⴹ ⴳⴰⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⴷⴰ ⵜⴻⵜⵜⵓⵎⵢⵓⴷⴷⵉ ⴰⵙⵔⴷⴰⵙ l ⴰⵔ ⵜⵔⴰⵔ ⴰⵙⵔⴷⴰⵙ l' ⵣⵓⵏⴷ # >>> sort_third.call([1, 2, 3])
# [1, 2, 3]
# >>> sort_third.call([5, 6, 3, 4, 8, 9, 2])
# [2, 6, 3, 4, 8, 9, 5]
def sort_third(l)
","def sort_third(l)
  divisible_by_three = l.each_with_index.select { |_, idx| idx % 3 == 0 }.map(&:first).sort
  l.each_with_index.map { |val, idx| idx % 3 == 0 ? divisible_by_three.shift : val }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_third
    candidate = method(:sort_third)
    assert_equal([2, 6, 3, 4, 8, 9, 5], candidate.call([5, 6, 3, 4, 8, 9, 2]))
    assert_equal([2, 8, 3, 4, 6, 9, 5], candidate.call([5, 8, 3, 4, 6, 9, 2]))
    assert_equal([2, 6, 9, 4, 8, 3, 5], candidate.call([5, 6, 9, 4, 8, 3, 2]))
    assert_equal([2, 6, 3, 4, 8, 9, 5, 1], candidate.call([5, 6, 3, 4, 8, 9, 2, 1]))
  end
end
"
HumanEval_34,tzm_Tfng,rb,"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵢⵉⵡⴰⵏⵏ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⴳ ⵢⴰⵏ ⵓⵙⵏⵙⵉ# >>> unique.call([5, 3, 5, 2, 3, 3, 9, 0, 123])
# [0, 2, 3, 5, 9, 123]
def unique(l)
","def unique(l)
  l.uniq.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_unique
    candidate = method(:unique)
    assert_equal([0, 2, 3, 5, 9, 123], candidate.call([5, 3, 5, 2, 3, 3, 9, 0, 123]))
  end
end
"
HumanEval_35,tzm_Tfng,rb,"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⵉⵔⵙⴰⵍ ⵏ ⵓⴳⴳⴰⵔ ⴳ ⵓⵎⵙⴳⵏⴰⴼ.# >>> max_element.call([1, 2, 3])
# 3
# >>> max_element.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
# 123
def max_element(l)
","def max_element(l)
  l.max
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_max_element
    candidate = method(:max_element)
    assert_equal(3, candidate.call([1, 2, 3]))
    assert_equal(124, candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]))
  end
end
"
HumanEval_36,tzm_Tfng,rb,"ⵔⴰⴷ ⵏⵔⴰⵔ ⵉⵎⵉⴹ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⵉⵜⵜⵓⵢⴰⵔⴰⵏ ⵓⵟⵟⵓⵏ 7 ⴳ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵥⵥⵉⵏ ⵏⵏⴰ ⵓⵔ ⵏⵏⵉⴳⵏ n ⵏⵏⴰ ⵉⵜⵜⵓⵢⴰⵔⴰⵏ ⵙ 11 ⵏⵖ 13. # >>> fizz_buzz.call(50)
# 0
# >>> fizz_buzz.call(78)
# 2
# >>> fizz_buzz.call(79)
# 3
def fizz_buzz(n)
","def fizz_buzz(n)
  count = 0
  (1...n).each do |i|
    if i % 11 == 0 || i % 13 == 0
      count += i.to_s.count('7')
    end
  end
  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fizz_buzz
    candidate = method(:fizz_buzz)
    assert_equal(0, candidate.call(50))
    assert_equal(2, candidate.call(78))
    assert_equal(3, candidate.call(79))
    assert_equal(3, candidate.call(100))
    assert_equal(6, candidate.call(200))
    assert_equal(192, candidate.call(4000))
    assert_equal(639, candidate.call(10000))
    assert_equal(8026, candidate.call(100000))
  end
end
"
HumanEval_37,tzm_Tfng,rb,"ⵔⵣⴼⵖ ⵉ ⵡⴰⵜⵉⴳⵏ ⵏ ⵉⵙⵏⴼⴰⵔⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵏ l, ⵎⴰⵛⴰ ⵙⵙⵓⴷⵙⵖ.l' ⴷⴰ ⵢⴰⴽⵣ l ⴳ ⵉⵙⵏⴼⴰⵔⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ, ⵎⴰⵛⴰ ⵡⴰⵜⵉⴳⵏ ⵏⵏⵙ ⴳ ⵉⵙⵏⴼⴰⵔⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳⴰⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⴷⴰ ⵜⴻⵜⵜⵓⵎⵢⵓⴷⴷⵉ ⴰⵙⵔⴷⴰⵙ l ⴰⵔ ⵜⵔⴰⵔ ⴰⵙⵔⴷⴰⵙ l' ⵣⵓⵏⴷ # >>> sort_even.call([1, 2, 3])
# [1, 2, 3]
# >>> sort_even.call([5, 6, 3, 4])
# [3, 6, 5, 4]
def sort_even(l)
","def sort_even(l)
  even_indices = l.each_index.select { |i| i.even? }
  even_values = even_indices.map { |i| l[i] }.sort
  
  even_index = 0
  l.each_with_index.map do |value, index|
    if index.even?
      even_values[even_index].tap { even_index += 1 }
    else
      value
    end
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_even
    candidate = method(:sort_even)
    assert_equal([1, 2, 3], candidate.call([1, 2, 3]))
    assert_equal([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123], candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert_equal([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10], candidate.call([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
  end
end
"
HumanEval_39,tzm_Tfng,rb,"prime_fib ⴷⴰ ⵢⴰⴽⴽⴰ ⵡⵓⵟⵟⵓⵏ n-ⵜⵏ ⵡⵉ-ⵏⵏⴰ ⵉⴳⴰⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵉ ⴷ ⵉⴳⴰ ⴰⵡⴷ ⴰⵎⵣⵡⴰⵔⵓ. # >>> prime_fib.call(1)
# 2
# >>> prime_fib.call(2)
# 3
# >>> prime_fib.call(3)
# 5
# >>> prime_fib.call(4)
# 13
# >>> prime_fib.call(5)
# 89
def prime_fib(n)
","def prime_fib(n)
  require 'prime'
  
  fibs = Enumerator.new do |y|
    a, b = 0, 1
    loop do
      a, b = b, a + b
      y << b
    end
  end
  
  prime_fibs = fibs.lazy.select { |fib| Prime.prime?(fib) }
  prime_fibs.first(n).last
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_prime_fib
    candidate = method(:prime_fib)
    assert_equal(2, candidate.call(1))
    assert_equal(3, candidate.call(2))
    assert_equal(5, candidate.call(3))
    assert_equal(13, candidate.call(4))
    assert_equal(89, candidate.call(5))
    assert_equal(233, candidate.call(6))
    assert_equal(1597, candidate.call(7))
    assert_equal(28657, candidate.call(8))
    assert_equal(514229, candidate.call(9))
    assert_equal(433494437, candidate.call(10))
  end
end
"
HumanEval_40,tzm_Tfng,rb,"ⴰⵖⵎⵉⵙ ⵏ ⵓⵎⵢⴰ, ⴷ ⵡⴰⵍⴰ ⵏ ⵓⵢⴰ.ⴰⵔ ⵜⵔⴰⵔ ⵜⵉⴷⵜ ⵎⴽ ⵍⵍⴰⵏ ⴽⵕⴰⴹ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵓⵎⵙⴳⴷⴰⵍ ⵏⵏⴰ triple_sum_to_zero ⴷⴰ ⵉⵜⵜⴰⵙⵉ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴰⵎⵎ ⵓⴽⵛⵛⵓⵎ.# >>> triples_sum_to_zero.call([1, 3, 5, 0])
# false
# >>> triples_sum_to_zero.call([1, 3, -2, 1])
# true
# >>> triples_sum_to_zero.call([1, 2, 3, 7])
# false
# >>> triples_sum_to_zero.call([2, 4, -5, 3, 9, 7])
# true
# >>> triples_sum_to_zero.call([1])
# false
def triples_sum_to_zero(l)
","def triples_sum_to_zero(l)
  n = l.length
  (0...n-2).each do |i|
    ((i+1)...n-1).each do |j|
      ((j+1)...n).each do |k|
        return true if l[i] + l[j] + l[k] == 0
      end
    end
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_triples_sum_to_zero
    candidate = method(:triples_sum_to_zero)
    assert_equal(false, candidate.call([1, 3, 5, 0]))
    assert_equal(false, candidate.call([1, 3, 5, -1]))
    assert_equal(true, candidate.call([1, 3, -2, 1]))
    assert_equal(false, candidate.call([1, 2, 3, 7]))
    assert_equal(false, candidate.call([1, 2, 5, 7]))
    assert_equal(true, candidate.call([2, 4, -5, 3, 9, 7]))
    assert_equal(false, candidate.call([1]))
    assert_equal(false, candidate.call([1, 3, 5, -100]))
    assert_equal(false, candidate.call([100, 3, 5, -100]))
  end
end
"
HumanEval_41,tzm_Tfng,rb,"ⵜⴰⵡⵡⵓⵔⵉ ⴰⴷ ⴷⴰ ⵜⵙⵙⵓⴼⵖ ⵓⵟⵟⵓⵏ ⵏ ⵉⵎⵏⵖⵉ ⴰⴷ.ⴳ ⵓⴱⵔⵉⴷ ⵏⵏⵙⵏ ⴰⵎⵎ ⵉⵙ ⵓⵔ ⵜⵜⵓⵥⴹⴰⵕⵏ ⴰⴷ ⵜⵜⵓⵥⴹⴰⵕⵏ.ⵎⴰⵛⴰ, ⵍⵍⴰⵏⵜ ⵜⴽⴰⵔⵉⵏⵉⵏ ⵜⵉⴷⵓⵙⵏⵉⵏ ⴷ ⵉⴷⵓⵙⵏⵉⵏ ⴱⴰⵀⵔⴰ, ⴷ ⵙ ⵎⴰⵏⴰⵢⴰ, ⴰⵔ ⵙⵓⵍⵏⵜ ⵙⵎⵓⵜⵜⴳⵏ.ⴰⴷⴷⴰⵢ ⵜⵙⵙⵉⴽⵙⵍ ⵢⴰⵜ ⵜⴽⴰⵔⴹⴰ ⵍⵍⵉ ⵢⵎⵓⵙⵙⵓⵏ ⵙ ⵓⵣⵍⵎⴰⴹ ⵙ ⵓⵣⵔⴼ ⵢⴰⵜ ⵜⴽⴰⵔⴹⴰ ⵍⵍⵉ ⵢⵎⵓⵙⵙⵓⵏ ⵙ ⵓⵣⵔⴼ ⵙ ⵓⵣⵍⵎⴰⴹ.ⴽⵓⵍⵍⵓ ⵜⴽⴰⵔⵢⵉⵏ ⴷⴰ ⵙⵙⵓⴷⵙⵏ ⵙ ⵢⴰⵜ ⵜⴰⵣⵣⵍⴰ. ⴷⴰ ⵜⵜⵉⵏⵉⵏ ⵙⵏⴰⵜ ⵜⴽⴰⵔⵢⵉⵏ ⴷⴰ ⵜⵜⵎⵔⵓⵏ.ⵙⵏⴰⵜ ⵜⴱⵔⴰⵜⵜⵉⵏ ⵏ ⵜⴽⴰⵔⴹⵉⵡⵉⵏ ⵔⴰⴷ ⴱⴷⴰⵏⵜ ⴳ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⴹⴹⴰⵕⵍⴱⵉⴹⴰ.ⴷⴰ ⵙⵙⵓⴷⵓⵏ n ⵏ ⵜⴽⴰⵔⵉⵏ ⵙⴳ ⵓⵥⵍⵎⴰⴹ ⵖⵔ ⵓⵢⴼⴼⵓⵙ, ⴳ ⵢⴰⵜ ⵜⵉⵣⵉ, ⵜⴰⵔⴰⴱⴱⵓⵜ ⵏ ⵜⴽⴰⵔⵉⵏ ⵙⵙⵏⵎⵍ ⵜⴰⴱⵔⵉⴷⵜ ⵏⵏⴰ ⵉⴳⴰⵏ ⵜⴰⵖⵔⵉ ⵜⴰⵣⵣⵉⴳⵣⵜ ⴱⴰⵀⵔⴰ.def car_race_collision(n)
","def car_race_collision(n)
  n
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_car_race_collision
    candidate = method(:car_race_collision)
    assert_equal(4, candidate.call(2))
    assert_equal(9, candidate.call(3))
    assert_equal(16, candidate.call(4))
    assert_equal(64, candidate.call(8))
    assert_equal(100, candidate.call(10))
  end
end
"
HumanEval_42,tzm_Tfng,rb,"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵙ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵜⵜⵓⵢⴰⵔⴰⵏ ⵙ 1.# >>> incr_list.call([1, 2, 3])
# [2, 3, 4]
# >>> incr_list.call([5, 3, 5, 2, 3, 3, 9, 0, 123])
# [6, 4, 6, 3, 4, 4, 10, 1, 124]
def incr_list(l)
","def incr_list(l)
  l.map { |x| x + 1 }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_incr_list
    candidate = method(:incr_list)
    assert_equal([], candidate.call([]))
    assert_equal([4, 3, 2], candidate.call([3, 2, 1]))
    assert_equal([6, 3, 6, 3, 4, 4, 10, 1, 124], candidate.call([5, 2, 5, 2, 3, 3, 9, 0, 123]))
  end
end
"
HumanEval_43,tzm_Tfng,rb,"ⴰⵖⵎⵉⵙ ⵏ ⵓⵎⵢⴰ, ⴷ ⵡⴰⵍⴰ ⵏ ⵓⵢⴰ.ⴰⵔ ⵜⵔⴰⵔ ⵜⵉⴷⵜ ⵎⴽ ⵍⵍⴰⵏ ⵙⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵓⵎⵙⴳⴷⴰⵍ ⵏⵏⴰ pairs_sum_to_zero ⴷⴰ ⵉⵜⵜⴰⵙⵉ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴰⵎⵎ ⵓⴽⵛⵛⵓⵎ. # >>> pairs_sum_to_zero.call([1, 3, 5, 0])
# false
# >>> pairs_sum_to_zero.call([1, 3, -2, 1])
# false
# >>> pairs_sum_to_zero.call([1, 2, 3, 7])
# false
# >>> pairs_sum_to_zero.call([2, 4, -5, 3, 5, 7])
# true
# >>> pairs_sum_to_zero.call([1])
# false
def pairs_sum_to_zero(l)
","def pairs_sum_to_zero(l)
  num_set = l.to_set
  l.each do |num|
    return true if num != 0 && num_set.include?(-num)
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_pairs_sum_to_zero
    candidate = method(:pairs_sum_to_zero)
    assert_equal(false, candidate.call([1, 3, 5, 0]))
    assert_equal(false, candidate.call([1, 3, -2, 1]))
    assert_equal(false, candidate.call([1, 2, 3, 7]))
    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))
    assert_equal(false, candidate.call([1]))
    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 30]))
    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))
    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 30]))
    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))
  end
end
"
HumanEval_44,tzm_Tfng,rb,"ⵉⵎⴹⴰⵏ ⵏ ⵜⵔⵙⴰⵍ ⴳⴰⵏ ⵡⴰⵔ 10.ⵔⴰⴷ ⵢⴰⵖ ⵜⵉⴼⵔⵜ ⵏ ⵓⵖⵉⵍⵓⴼ ⴷⴼⴼⵉⵔ ⵏ ⵓⵙⵏⴼⵍ.ⵙⵏⴼⵍ ⵜⴰⵙⵉⵍⴰ ⵏ ⵓⵟⵟⵓⵏ ⵏ ⵓⴽⵛⵛⵓⵎ x ⵙ ⵜⴰⵙⵉⵍⴰ.# >>> change_base.call(8, 3)
# ""22""
# >>> change_base.call(8, 2)
# ""1000""
# >>> change_base.call(7, 2)
# ""111""
def change_base(x, base)
","def change_base(x, base)
  return '0' if x == 0
  digits = []
  while x > 0
    digits << (x % base).to_s
    x /= base
  end
  digits.reverse.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_change_base
    candidate = method(:change_base)
    assert_equal(""22"", candidate.call(8, 3))
    assert_equal(""100"", candidate.call(9, 3))
    assert_equal(""11101010"", candidate.call(234, 2))
    assert_equal(""10000"", candidate.call(16, 2))
    assert_equal(""1000"", candidate.call(8, 2))
    assert_equal(""111"", candidate.call(7, 2))
    assert_equal(""2"", candidate.call(2, 3))
    assert_equal(""3"", candidate.call(3, 4))
    assert_equal(""4"", candidate.call(4, 5))
    assert_equal(""5"", candidate.call(5, 6))
    assert_equal(""6"", candidate.call(6, 7))
    assert_equal(""7"", candidate.call(7, 8))
  end
end
"
HumanEval_45,tzm_Tfng,rb,"ⴰⵖⵣⵉ ⵏ ⵓⴳⴰⴼⴰ ⴷ ⵢⵉⴳⵔ ⵏ ⵓⴽⵛⵛⵓⵎ ⴰⵎⵇⵔⴰⵏ ⵉ ⵢⴰⵏ ⵓⴽⵕⴰⴹ.# >>> triangle_area.call(5, 3)
# 7.5
def triangle_area(a, h)
","def triangle_area(a, h)
  (a * h) / 2.0
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_triangle_area
    candidate = method(:triangle_area)
    assert_equal(7.5, candidate.call(5, 3))
    assert_equal(2.0, candidate.call(2, 2))
    assert_equal(40.0, candidate.call(10, 8))
  end
end
"
HumanEval_46,tzm_Tfng,rb,"ⵔⵔⴰⵢⵖ ⵜⴰⵡⵡⵓⵔⵉ ⵃⵎⴰ ⴰⴷ ⵙⵙⵉⴹⵏⵖ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵓⵎⴹⴰⵏ ⵏ fib4 ⵙ ⵢⴰⵜ ⵜⵖⴰⵔⴰⵙⵜ ⵉⴼⵓⵍⴽⵉⵏ. ⵔⵔⴰⵢⵖ ⵓⵔ ⵜⵙⵙⵎⵔⵙ ⵜⵉⵔⵔⴰ.fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4(3) -> 0 fib4(2) -> 2 fib4(1) -> 0 fib4(0) -> 0 ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵡⵓⵟⵟⵓⵏ Fib4 ⵜⴳⴰ ⵢⴰⵜ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵣⵓⵏⴷ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵏⵎⵍⵏ ⵙ: # >>> fib4.call(5)
# 4
# >>> fib4.call(6)
# 8
# >>> fib4.call(7)
# 14
def fib4(n)
","def fib4(n)
  return 0 if n == 0 || n == 1 || n == 3
  return 2 if n == 2

  fib4_seq = [0, 0, 2, 0]
  (4..n).each do |i|
    fib4_seq[i] = fib4_seq[i-1] + fib4_seq[i-2] + fib4_seq[i-3] + fib4_seq[i-4]
  end
  fib4_seq[n]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fib4
    candidate = method(:fib4)
    assert_equal(4, candidate.call(5))
    assert_equal(28, candidate.call(8))
    assert_equal(104, candidate.call(10))
    assert_equal(386, candidate.call(12))
  end
end
"
HumanEval_47,tzm_Tfng,rb,"ⵔⴰⴷ ⵢⴰⴽⴽⴰ ⵡⴰⵎⵎⴰⵙ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵓⵎⵙⴳⴷⴰⵍ l. # >>> median.call([3, 1, 2, 4, 5])
# 3
# >>> median.call([-10, 4, 6, 1000, 10, 20])
# 15.0
def median(l)
","def median(l)
  sorted = l.sort
  len = sorted.length
  if len.odd?
    sorted[len / 2]
  else
    (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_median
    candidate = method(:median)
    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))
    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))
    assert_equal(5, candidate.call([5]))
    assert_equal(5.5, candidate.call([6, 5]))
    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))
  end
end
"
HumanEval_48,tzm_Tfng,rb,"ⴷⴰ ⵉⵜⵜⵉⵔⵉ ⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵉⴳⴰ ⴱⴰⵍⵉⵏⴷⵔⵓⵎ # >>> is_palindrome.call("""")
# true
# >>> is_palindrome.call(""aba"")
# true
# >>> is_palindrome.call(""aaaaa"")
# true
# >>> is_palindrome.call(""zbcd"")
# false
def is_palindrome(text)
","is_palindrome = lambda do |text|
  text == text.reverse
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_palindrome
    candidate = method(:is_palindrome)
    assert_equal(true, candidate.call(""""))
    assert_equal(true, candidate.call(""aba""))
    assert_equal(true, candidate.call(""aaaaa""))
    assert_equal(false, candidate.call(""zbcd""))
    assert_equal(true, candidate.call(""xywyx""))
    assert_equal(false, candidate.call(""xywyz""))
    assert_equal(false, candidate.call(""xywzx""))
  end
end
"
HumanEval_49,tzm_Tfng,rb,"ⵔⵣⴼ 2^n modulo p (ⴰⴷ ⵜⵙⵙⵏⴷ ⵉⵎⴹⴰⵏⵏ).# >>> modp.call(3, 5)
# 3
# >>> modp.call(1101, 101)
# 2
# >>> modp.call(0, 101)
# 1
# >>> modp.call(3, 11)
# 8
# >>> modp.call(100, 101)
# 1
def modp(n, p)
","def modp(n, p)
  return 1 if p == 1
  2.pow(n, p)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_modp
    candidate = method(:modp)
    assert_equal(3, candidate.call(3, 5))
    assert_equal(2, candidate.call(1101, 101))
    assert_equal(1, candidate.call(0, 101))
    assert_equal(8, candidate.call(3, 11))
    assert_equal(1, candidate.call(100, 101))
    assert_equal(4, candidate.call(30, 5))
    assert_equal(3, candidate.call(31, 5))
  end
end
"
HumanEval_51,tzm_Tfng,rb,"remove_vowels ⵜⴳⴰ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵉⵜⵜⴰⵙⵉⵏ ⵜⵉⴼⵉⵏⴰⵖ ⴷ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵜⵉⴼⵉⵏⴰⵖ ⴱⵍⴰ ⵉⵎⵙⵍⵉ. # >>> remove_vowels.call("""")
# """"
# >>> remove_vowels.call(""abcdef"")
# ""bcdf""
# >>> remove_vowels.call(""aaaaa"")
# """"
# >>> remove_vowels.call(""aaBAA"")
# ""B""
# >>> remove_vowels.call(""zbcd"")
# ""zbcd""
def remove_vowels(text)
","def remove_vowels(text)
  text.delete('aeiouAEIOU')
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_remove_vowels
    candidate = method(:remove_vowels)
    assert_equal("""", candidate.call(""""))
    assert_equal(""bcdf
ghjklm"", candidate.call(""abcdef
ghijklm""))
    assert_equal(""fdcb"", candidate.call(""fedcba""))
    assert_equal("""", candidate.call(""eeeee""))
    assert_equal(""cB"", candidate.call(""acBAA""))
    assert_equal(""cB"", candidate.call(""EcBOO""))
    assert_equal(""ybcd"", candidate.call(""ybcd""))
  end
end
"
HumanEval_52,tzm_Tfng,rb,"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴷⵜ ⵎⴽ ⴳⴰⵏ ⵉⵎⴹⴰⵏⵏ ⴳ ⵓⵎⵙⴷⵓⵙ l ⴷⴷⴰⵡ ⵏ ⵓⴽⵜⵜⴰⵢ t. # >>> below_threshold.call([1, 2, 4, 10], 100)
# true
# >>> below_threshold.call([1, 20, 4, 10], 5)
# false
def below_threshold(l, t)
","def below_threshold(l, t)
  l.all? { |num| num < t }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_below_threshold
    candidate = method(:below_threshold)
    assert_equal(true, candidate.call([1, 2, 4, 10], 100))
    assert_equal(false, candidate.call([1, 20, 4, 10], 5))
    assert_equal(true, candidate.call([1, 20, 4, 10], 21))
    assert_equal(true, candidate.call([1, 20, 4, 10], 22))
    assert_equal(true, candidate.call([1, 8, 4, 10], 11))
    assert_equal(false, candidate.call([1, 8, 4, 10], 10))
  end
end
"
HumanEval_53,tzm_Tfng,rb,"ⵙⵙⵎⵓⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏⵏ x ⴷ y # >>> add.call(2, 3)
# 5
# >>> add.call(5, 7)
# 12
def add(x, y)
","add = ->(x, y) { x + y }","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_add
    candidate = method(:add)
    assert_equal(1, candidate.call(0, 1))
    assert_equal(1, candidate.call(1, 0))
    assert_equal(5, candidate.call(2, 3))
    assert_equal(12, candidate.call(5, 7))
    assert_equal(12, candidate.call(7, 5))
  end
end
"
HumanEval_54,tzm_Tfng,rb,"ⵥⵕ ⵎⴽ ⴳⴰⵏ ⵙⵉⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵖⵓⵔⵙⵏ ⵉⵎⵙⴽⴰⵔⵏ ⵉⵎⵎⵙⴰⵙⴰⵏ.# >>> same_chars.call(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
# true
# >>> same_chars.call(""abcd"", ""dddddddabc"")
# true
# >>> same_chars.call(""dddddddabc"", ""abcd"")
# true
# >>> same_chars.call(""eabcd"", ""dddddddabc"")
# false
# >>> same_chars.call(""abcd"", ""dddddddabce"")
# false
# >>> same_chars.call(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
# false
def same_chars(s0, s1)
","def same_chars(s0, s1)
  s0.chars.uniq.all? { |char| s1.include?(char) } &&
  s1.chars.uniq.all? { |char| s0.include?(char) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_same_chars
    candidate = method(:same_chars)
    assert_equal(true, candidate.call(""eabcdzzzz"", ""dddzzzzzzzddeddabc""))
    assert_equal(true, candidate.call(""abcd"", ""dddddddabc""))
    assert_equal(true, candidate.call(""dddddddabc"", ""abcd""))
    assert_equal(false, candidate.call(""eabcd"", ""dddddddabc""))
    assert_equal(false, candidate.call(""abcd"", ""dddddddabcf""))
    assert_equal(false, candidate.call(""eabcdzzzz"", ""dddzzzzzzzddddabc""))
    assert_equal(false, candidate.call(""aabb"", ""aaccc""))
  end
end
"
HumanEval_55,tzm_Tfng,rb,"ⵙⵏⵓⵍⴼⵓ ⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵉ ⵡⵉⵙⵙ ⵏ. # >>> fib.call(10)
# 55
# >>> fib.call(1)
# 1
# >>> fib.call(8)
# 21
def fib(n)
","def fib(n)
  return n if n <= 1
  fib(n - 1) + fib(n - 2)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fib
    candidate = method(:fib)
    assert_equal(55, candidate.call(10))
    assert_equal(1, candidate.call(1))
    assert_equal(21, candidate.call(8))
    assert_equal(89, candidate.call(11))
    assert_equal(144, candidate.call(12))
  end
end
"
HumanEval_56,tzm_Tfng,rb,"return true ⵎⴽ ⴷⴰⵔ ⴽⵓ ⵜⴰⴳⴳⴰⵢⵜ ⵏ ⵓⵕⵥⵥⵓⵎ ⵢⴰⵏ ⵜⴰⴳⴳⴰⵢⵜ ⵏ ⵓⵇⵇⵏ. brackets ⵉⴳⴰ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⵏ ""<"" ⴷ "">"". # >>> correct_bracketing.call(""<"")
# false
# >>> correct_bracketing.call(""<>"")
# true
# >>> correct_bracketing.call(""<<><>>"")
# true
# >>> correct_bracketing.call(""><<>"")
# false
def correct_bracketing(brackets)
","def correct_bracketing(brackets)
  balance = 0
  brackets.chars.each do |char|
    if char == '<'
      balance += 1
    elsif char == '>'
      balance -= 1
    end
    return false if balance < 0
  end
  balance == 0
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_correct_bracketing
    candidate = method(:correct_bracketing)
    assert_equal(true, candidate.call(""<>""))
    assert_equal(true, candidate.call(""<<><>>""))
    assert_equal(true, candidate.call(""<><><<><>><>""))
    assert_equal(true, candidate.call(""<><><<<><><>><>><<><><<>>>""))
    assert_equal(false, candidate.call(""<<<><>>>>""))
    assert_equal(false, candidate.call(""><<>""))
    assert_equal(false, candidate.call(""<""))
    assert_equal(false, candidate.call(""<<<<""))
    assert_equal(false, candidate.call("">""))
    assert_equal(false, candidate.call(""<<>""))
    assert_equal(false, candidate.call(""<><><<><>><>><<>""))
    assert_equal(false, candidate.call(""<><><<><>><>>><>""))
  end
end
"
HumanEval_57,tzm_Tfng,rb,"Return true ⵉⴳⴰⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵓⵙⵏⵙⵍ ⴷⴰ ⵙⵙⵓⴷⵓⵏ ⵙ ⵓⵖⵍⵉ ⵏⵖⴷ ⵙ ⵓⴷⵔⴰⵔ.# >>> monotonic.call([1, 2, 4, 20])
# true
# >>> monotonic.call([1, 20, 4, 10])
# false
# >>> monotonic.call([4, 1, 0, -10])
# true
def monotonic(l)
","def monotonic(l)
  increasing = true
  decreasing = true

  (0...l.length - 1).each do |i|
    if l[i] < l[i + 1]
      decreasing = false
    elsif l[i] > l[i + 1]
      increasing = false
    end
  end

  increasing || decreasing
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_monotonic
    candidate = method(:monotonic)
    assert_equal(true, candidate.call([1, 2, 4, 10]))
    assert_equal(true, candidate.call([1, 2, 4, 20]))
    assert_equal(false, candidate.call([1, 20, 4, 10]))
    assert_equal(true, candidate.call([4, 1, 0, -10]))
    assert_equal(true, candidate.call([4, 1, 1, 0]))
    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))
    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))
    assert_equal(true, candidate.call([9, 9, 9, 9]))
  end
end
"
HumanEval_58,tzm_Tfng,rb,"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵢⵉⵡⴰⵏⵏ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵉ ⵙⵉⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ.# >>> common.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
# [1, 5, 653]
# >>> common.call([5, 3, 2, 8], [3, 2])
# [2, 3]
def common(l1, l2)
","def common(l1, l2)
  (l1 & l2).uniq.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_common
    candidate = method(:common)
    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))
    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))
    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))
    assert_equal([], candidate.call([4, 3, 2, 8], []))
  end
end
"
HumanEval_59,tzm_Tfng,rb,"ⵔⵎⵙⵏ ⴰⵎⴳⴳⴰⵔⵓ ⴰⵎⵣⵡⴰⵔⵓ ⴰⵅⴰⵜⴰⵔ ⵏ n. ⵏⵙⵙⵏ ⵉⵙ n > 1 ⵓⵔ ⵉⴳⵉ ⴰⵎⵣⵡⴰⵔⵓ. # >>> largest_prime_factor.call(13195)
# 29
# >>> largest_prime_factor.call(2048)
# 2
def largest_prime_factor(n)
","def largest_prime_factor(n)
  factor = 2
  while factor * factor <= n
    if n % factor == 0
      n /= factor
    else
      factor += 1
    end
  end
  n
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_largest_prime_factor
    candidate = method(:largest_prime_factor)
    assert_equal(5, candidate.call(15))
    assert_equal(3, candidate.call(27))
    assert_equal(7, candidate.call(63))
    assert_equal(11, candidate.call(330))
    assert_equal(29, candidate.call(13195))
  end
end
"
HumanEval_60,tzm_Tfng,rb,"sum_to_n ⵜⴳⴰ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵉⵙⵎⵓⵏⵏ ⵉⵎⴹⴰⵏ ⵙⴳ 1 ⴰⵔ n. # >>> sum_to_n.call(30)
# 465
# >>> sum_to_n.call(100)
# 5050
# >>> sum_to_n.call(5)
# 15
# >>> sum_to_n.call(10)
# 55
# >>> sum_to_n.call(1)
# 1
def sum_to_n(n)
","def sum_to_n(n)
  (1..n).sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sum_to_n
    candidate = method(:sum_to_n)
    assert_equal(1, candidate.call(1))
    assert_equal(21, candidate.call(6))
    assert_equal(66, candidate.call(11))
    assert_equal(465, candidate.call(30))
    assert_equal(5050, candidate.call(100))
  end
end
"
HumanEval_61,tzm_Tfng,rb,"return true ⵎⴽ ⴷⴰⵔ ⴽⵓ ⵜⴰⴳⴳⴰⵢⵜ ⵏ ⵓⵕⵥⵥⵓⵎ ⵢⴰⵏ ⵜⴰⴳⴳⴰⵢⵜ ⵏ ⵓⵇⵇⵏ. brackets ⵉⴳⴰ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⵏ ""("" ⴷ "")"".# >>> correct_bracketing.call(""("")
# false
# >>> correct_bracketing.call(""()"")
# true
# >>> correct_bracketing.call(""(()())"")
# true
# >>> correct_bracketing.call("")(()"")
# false
def correct_bracketing(brackets)
","def correct_bracketing(brackets)
  balance = 0
  brackets.each_char do |char|
    if char == '('
      balance += 1
    elsif char == ')'
      balance -= 1
    end
    return false if balance < 0
  end
  balance == 0
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_correct_bracketing
    candidate = method(:correct_bracketing)
    assert_equal(true, candidate.call(""()""))
    assert_equal(true, candidate.call(""(()())""))
    assert_equal(true, candidate.call(""()()(()())()""))
    assert_equal(true, candidate.call(""()()((()()())())(()()(()))""))
    assert_equal(false, candidate.call(""((()())))""))
    assert_equal(false, candidate.call("")(()""))
    assert_equal(false, candidate.call(""(""))
    assert_equal(false, candidate.call(""((((""))
    assert_equal(false, candidate.call("")""))
    assert_equal(false, candidate.call(""(()""))
    assert_equal(false, candidate.call(""()()(()())())(()""))
    assert_equal(false, candidate.call(""()()(()())()))()""))
  end
end
"
HumanEval_62,tzm_Tfng,rb,"ⵔⴰⴷ ⵏⵔⴰⵔ ⵜⴰⵙⵏⴼⵍⵓⵍⵜ ⵏ ⵓⵎⴳⴳⵉⵡⵙ ⴰⴷ ⴳ ⵢⴰⵜ ⵜⴰⵍⵖⴰ ⵢⴰⴷⵏⵉⵏ.xs[0] + xs[1] * x + xs[2] * x^2 + .... xs ⴷⴰ ⵉⵙⵎⴷⵢⴰ ⵉⵎⵙⴽⴰⵔⵏ ⵏ ⴽⵉⴳⴰⵏ ⵏ ⵉⵡⵏⴳⵉⵎⵏ.# >>> derivative.call([3, 1, 2, 4, 5])
# [1, 4, 12, 20]
# >>> derivative.call([1, 2, 3])
# [2, 6]
def derivative(xs)
","def derivative(xs)
  return [] if xs.length < 2
  xs.each_with_index.map { |coef, index| coef * index }[1..-1]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_derivative
    candidate = method(:derivative)
    assert_equal([1, 4, 12, 20], candidate.call([3, 1, 2, 4, 5]))
    assert_equal([2, 6], candidate.call([1, 2, 3]))
    assert_equal([2, 2], candidate.call([3, 2, 1]))
    assert_equal([2, 2, 0, 16], candidate.call([3, 2, 1, 0, 4]))
    assert_equal([], candidate.call([1]))
  end
end
"
HumanEval_63,tzm_Tfng,rb,"ⵔⵔⴰⵢⵖ ⵜⴰⵡⵓⵔⵉ ⵃⵎⴰ ⴰⴷ ⵙⵙⵉⴹⵏⵖ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵓⵎⴹⴰⵏ ⵏ ⵓⴼⵉⴼⴼⵉⴼ ⵙ ⵢⴰⵜ ⵜⵖⴰⵔⴰⵙⵜ ⵉⴼⵓⵍⴽⵉⵏ.fibfib{n} == fibfib{n-1} + fibfib{n-2} + fibfib{n-3} fibfib(2) == 1 fibfib{1) == 0 fibfib{0} == 0 ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱ ⴼⵉⴱ ⵜⴳⴰ ⵢⴰⵜ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵣⵓⵏⴷ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵏⵎⵍⵏ ⵙ:# >>> fibfib.call(1)
# 0
# >>> fibfib.call(5)
# 4
# >>> fibfib.call(8)
# 24
def fibfib(n)
","def fibfib(n)
  return 0 if n == 0 || n == 1
  return 1 if n == 2

  a, b, c = 0, 0, 1
  (3..n).each do
    a, b, c = b, c, a + b + c
  end
  c
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fibfib
    candidate = method(:fibfib)
    assert_equal(1, candidate.call(2))
    assert_equal(0, candidate.call(1))
    assert_equal(4, candidate.call(5))
    assert_equal(24, candidate.call(8))
    assert_equal(81, candidate.call(10))
    assert_equal(274, candidate.call(12))
    assert_equal(927, candidate.call(14))
  end
end
"
HumanEval_64,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: ⴰⴽⴽⵡ ⵎⵉⵏ ⵉⵇⵇⴰⵏ ⴷ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⴳⵓⵔⵉ, ⵎⴰⵛⴰ ⵖⴰⵙ ⵍⵍⵉⵖ ⵉⴳⴰ ⴳ ⵜⴳⵉⵔⴰ ⵏ ⵜⴳⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⴼⴽⴰⵏ.ⵉⵎⵓⴽⴽⴰⵙⵏ ⴳ ⵡⴰⴷⴷⴰⴷ ⴰⴷ ⴳⴰⵏ ""ⴰ"", ""ⵢ"", ""ⵉ"", ""ⵓ"", ""ⵓ"". ⴷⵖⵉ, ""ⵢ"" ⵉⴳⴰ ⴰⵡⴷ ⵢⴰⵏ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⴰⴳⵓⵔⵉ ⵙ ⵓⴽⵛⵛⵓⵎ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵓⵟⵟⵓⵏ ⵏ ⵉⵎⵙⵍⵉ ⴳ ⵜⵣⵍⵉⵜ.ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ vowels_count ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵜⴰⵡⵓⵔⵉ ⵏ # >>> vowels_count.call(""abcde"")
# 2
# >>> vowels_count.call(""ACEDY"")
# 3
def vowels_count(s)
","def vowels_count(s)
  vowels = ['a', 'e', 'i', 'o', 'u']
  count = 0
  
  s.chars.each_with_index do |char, index|
    if vowels.include?(char.downcase)
      count += 1
    elsif char.downcase == 'y' && index == s.length - 1
      count += 1
    end
  end
  
  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_vowels_count
    candidate = method(:vowels_count)
    assert_equal(2, candidate.call(""abcde""))
    assert_equal(3, candidate.call(""Alone""))
    assert_equal(2, candidate.call(""key""))
    assert_equal(1, candidate.call(""bye""))
    assert_equal(2, candidate.call(""keY""))
    assert_equal(1, candidate.call(""bYe""))
    assert_equal(3, candidate.call(""ACEDY""))
  end
end
"
HumanEval_65,tzm_Tfng,rb,"ⵎⴽ ⵜⵔⴰⵔ > ⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏⵏ, ⵔⴰⴷ ⵜⵔⴰⵔ ⵉⵎⵉⴹⴰⵏⵏ ⵙ ⵓⴷⴼⵍ.ⴷ ⴰⵔ ⵏⵙⵙⴽⵛⵎ ⵜⴰⵢⴰⴼⵓⵜ ⵙ ⵢⴰⵜ ⵜⵉⵔⵔⴰ. ⴰⵖⵍⵍⵓⵢ ⵏ ⵓⵙⵏⴼⵍ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ x, ⵙⵏⴼⵍ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵙ ⵓⵣⵔⴼ ⵙ ⵓⵙⵏⴼⵍ # >>> circular_shift.call(12, 1)
# ""21""
# >>> circular_shift.call(12, 2)
# ""12""
def circular_shift(x, shift)
","def circular_shift(x, shift)
  digits = x.to_s.chars
  num_digits = digits.length

  if shift > num_digits
    return digits.reverse.join
  else
    shift = shift % num_digits
    shifted_digits = digits.rotate(-shift)
    return shifted_digits.join
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_circular_shift
    candidate = method(:circular_shift)
    assert_equal(""001"", candidate.call(100, 2))
    assert_equal(""12"", candidate.call(12, 2))
    assert_equal(""79"", candidate.call(97, 8))
    assert_equal(""21"", candidate.call(12, 1))
    assert_equal(""11"", candidate.call(11, 101))
  end
end
"
HumanEval_66,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵉⵙⵏⴼⴰⵔⵏ ⵏ ASCII.ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵖⵉⵍⵓⴼ ⴰⵎⵎ ⵓⴽⵛⵛⵓⵎ ⴷ ⴰⵔ ⵉⵙⵙⴽⵛⵎ ⴰⵖⵣⵓⵔ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵏ ⵓⴼⵍⵍⴰ ⵅⴰⵙ'ⵜⴰⵡⵓⵔⵉ # >>> digitSum.call("""")
# 0
# >>> digitSum.call(""abAB"")
# 131
# >>> digitSum.call(""abcCd"")
# 67
# >>> digitSum.call(""helloE"")
# 69
# >>> digitSum.call(""woArBld"")
# 131
# >>> digitSum.call(""aAaaaXa"")
# 153
def digitSum(s)
","def digitSum(s)
  s.chars.select { |char| char =~ /[A-Z]/ }.map(&:ord).sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_digitSum
    candidate = method(:digitSum)
    assert_equal(0, candidate.call(""""))
    assert_equal(131, candidate.call(""abAB""))
    assert_equal(67, candidate.call(""abcCd""))
    assert_equal(69, candidate.call(""helloE""))
    assert_equal(131, candidate.call(""woArBld""))
    assert_equal(153, candidate.call(""aAaaaXa""))
    assert_equal(151, candidate.call("" How are yOu?""))
    assert_equal(327, candidate.call(""You arE Very Smart""))
  end
end
"
HumanEval_67,tzm_Tfng,rb,"ⵉ ⵓⴱⵔⴰⵔⴳ: ⴳ ⵜⴽⴰⵔⴹⴰ ⵔⵎⵙⵏ ⴰⵎⴹⴰⵏ ⵏ ⵜⴽⴰⵔⴹⴰ ⵏ ⵍⵎⵉⵏⴳⵓ ⴳ ⵜⴽⴰⵔⴹⴰ.ⵜⵉⴼⵔⵖⴰⵍⵉⵏ ⴷ ⵜⴱⵔⵖⴰⵍⵉⵏ ⴷ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏⵏ ⴰⵎⴹⴰⵏ ⵏ ⵜⵢⴰⴼⵓⵜⵉⵏ ⵥⵕⵖ ⵜⴰⵡⵔⵉⵔⵜ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏⵏ ⴰⵎⴹⴰⵏ ⵏ ⵉⵜⵜⵓⵣⵟⵟⴰ ⴳ ⵢⴰⵜ ⵜⴽⵕⴹⴰ ⵏ ⵜⴽⵕⴹⴰ ⴰⴷ ⴳ ⵜⵎⵙⴰⵔⵜ ⴰⴷ, ⵔⴰⴷ ⴽⴽⵙⵜ ⵢⴰⵏ ⵓⴽⵙⵉⵍ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏⵏ ⴽⵉⴳⴰⵏ ⵏ ⵜⴱⵔⵣⴰ ⴷ ⵜⴱⵓⵕⵜⵓⵖⴰⵍⵉⵏ.# >>> fruit_distribution.call(""5 apples and 6 oranges"", 19)
# 8
# >>> fruit_distribution.call(""0 apples and 1 oranges"", 3)
# 2
# >>> fruit_distribution.call(""2 apples and 3 oranges"", 100)
# 95
# >>> fruit_distribution.call(""100 apples and 1 oranges"", 120)
# 19
def fruit_distribution(s, n)
","def fruit_distribution(s, n)
  numbers = s.scan(/\d+/).map(&:to_i)
  apples = numbers[0]
  oranges = numbers[1]
  total_fruits = n
  mangos = total_fruits - (apples + oranges)
  mangos
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fruit_distribution
    candidate = method(:fruit_distribution)
    assert_equal(8, candidate.call(""5 apples and 6 oranges"", 19))
    assert_equal(10, candidate.call(""5 apples and 6 oranges"", 21))
    assert_equal(2, candidate.call(""0 apples and 1 oranges"", 3))
    assert_equal(2, candidate.call(""1 apples and 0 oranges"", 3))
    assert_equal(95, candidate.call(""2 apples and 3 oranges"", 100))
    assert_equal(0, candidate.call(""2 apples and 3 oranges"", 5))
    assert_equal(19, candidate.call(""1 apples and 100 oranges"", 120))
  end
end
"
HumanEval_68,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ 1: ⵎⴽ ⵓⵔ ⵍⵍⵉⵏ ⵡⴰⵜⵉⴳⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ ⵏⵖⴷ ⵉⴳ ⵓⵎⵙⴳⵔⴰⵡ ⵉⵜⵜⵓⴼⴽⴰⵏ ⵉⵍⵍⴰ ⴱⵍⴰ, ⵙⵙⵓⴼⵖ [].ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵜⵓⵙⵏⴰⵍ ⵜⵓⵏⵏⵓⵏⵜ ⵉⵜⵜⵓⵙⵏⴱⴹⵏ ⴳ ⵢⴰⵏ ⵓⵙⵏⵙⵍ, [ smalest_value, ⴰⵙⵖⵍ ⵏⵏⵙ ], ⵎⴽ ⵜⵢⴰⴼⴰ ⴽⵉⴳⴰⵏ ⵏ ⵜⵓⵏⵏⵓⵜⵉⵏ ⵙ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ ⴰⵎⵥⵢⴰⵏ, ⵙⵙⵓⴼⵖ ⵜⵓⵏⵏⵓⵜ ⵏⵏⴰ ⵖⵓⵔ ⵉⵍⵍⴰ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵥⵥⵢⴰⵏ. ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⴳ ⵜⵓⵏⵏⵓⵏⵜ ⵉⵜⵜⵓⵙⵜⴰⵢⵏ ⵜⴰⵡⵏⴳⵉⵎⵜ ⵏ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ.ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⴽⵛⵎ ⵢⴰⵜ ⵙⴳ ⵜⵓⵏⵏⵓⵏⵜⵉⵏ ⴰⴷ ⴷ ⵜⵔⴰⵔ.""ⴰⴽⵓⴷ ⵉⵜⵜⵓⴼⴽⴰ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵉⵙⵎⴷⵢⴰⵏ ⵢⴰⵏ ⵓⵥⵟⵟⴰ ⵏ ⵢⴰⵜ ⵜⵙⴽⵍⴰ ⵏⵏⴰ ⵖⵓⵔⵙ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⵔⵉⵏ # >>> pluck.call([4, 2, 3])
# [2, 1]
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 2:
# >>> pluck.call([1, 2, 3])
# [2, 1]
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 3:
# >>> pluck.call([])
# []
# Example 4:
# >>> pluck.call([5, 0, 3, 0, 4, 2])
# [0, 1]
# Explanation: 0 is the smallest value, but  there are two zeros,
# so we will choose the first zero, which has the smallest index.
# Constraints:
# * 1 <= nodes.length <= 10000
# * 0 <= node.value
def pluck(arr)
","def pluck(arr)
  smallest_even = nil
  smallest_index = nil
  
  arr.each_with_index do |value, index|
    if value.even?
      if smallest_even.nil? || value < smallest_even
        smallest_even = value
        smallest_index = index
      end
    end
  end

  smallest_even.nil? ? [] : [smallest_even, smallest_index]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_pluck
    candidate = method(:pluck)
    assert_equal([2, 1], candidate.call([4, 2, 3]))
    assert_equal([2, 1], candidate.call([1, 2, 3]))
    assert_equal([], candidate.call([]))
    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))
    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))
    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))
    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))
    assert_equal([], candidate.call([7, 9, 7, 1]))
  end
end
"
HumanEval_69,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵡⴰⵜⵉⴳ ⴰⴷ, ⵔⴰⴷ ⵏⵔⴰⵔ -1.ⵜⴰⴽⴰⵜ ⵏ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⵉⴳⴰ ⵜ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⴷⴰ ⵉⵜⵜⴼⴼⵖ ⴳ ⵓⵎⵙⴳⴷⴰⵍ.ⴰⵎⵢⴰ, ⴷ ⴷⴰⵔⵙ ⵢⴰⵏ ⵓⴽⵓⴷ ⴰⵅⴰⵜⴰⵔ ⵏⵖⴷ ⵉⵎⵣⴳⵉ ⴷ ⵡⴰⵜⵉⴳ ⵏ ⵉⵎⵉⴹ ⴰⵎⴷⴷⴰⴷ ⵉⵎⴰⵏ ⵏⵏⵙ.ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⵅⵍⵍⵙⵏ. ⵔⵎⴹ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵅⴰⵜⴰⵔ ⵏⵏⴰ ⵢⵎⵇⵇⵓⵔⵏ # >>> search.call([4, 1, 2, 2, 3, 1])
# 2
# >>> search.call([1, 2, 2, 3, 3, 3, 4, 4, 4])
# 3
# >>> search.call([5, 5, 4, 4, 4])
# -1
def search(lst)
","def search(lst)
  freq_hash = lst.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }
  valid_numbers = freq_hash.select { |num, freq| freq >= num }.keys
  valid_numbers.empty? ? -1 : valid_numbers.max
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_search
    candidate = method(:search)
    assert_equal(1, candidate.call([5, 5, 5, 5, 1]))
    assert_equal(4, candidate.call([4, 1, 4, 1, 4, 4]))
    assert_equal(-1, candidate.call([3, 3]))
    assert_equal(8, candidate.call([8, 8, 8, 8, 8, 8, 8, 8]))
    assert_equal(2, candidate.call([2, 3, 3, 2, 2]))
    assert_equal(1, candidate.call([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]))
    assert_equal(2, candidate.call([3, 2, 8, 2]))
    assert_equal(1, candidate.call([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]))
    assert_equal(-1, candidate.call([8, 8, 3, 6, 5, 6, 4]))
    assert_equal(1, candidate.call([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]))
    assert_equal(1, candidate.call([1, 9, 10, 1, 3]))
    assert_equal(5, candidate.call([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]))
    assert_equal(1, candidate.call([1]))
    assert_equal(4, candidate.call([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]))
    assert_equal(2, candidate.call([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]))
    assert_equal(1, candidate.call([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]))
    assert_equal(4, candidate.call([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]))
    assert_equal(4, candidate.call([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]))
    assert_equal(2, candidate.call([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]))
    assert_equal(-1, candidate.call([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]))
    assert_equal(-1, candidate.call([10]))
    assert_equal(2, candidate.call([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]))
    assert_equal(1, candidate.call([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]))
    assert_equal(1, candidate.call([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]))
    assert_equal(-1, candidate.call([3, 10, 10, 9, 2]))
  end
end
"
HumanEval_70,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⴹⴰⵕⵜ ⵓⵢⴰ, ⵔⴰⴷ ⵢⵉⵍⵉ ⵡⵓⴳⴳⴰⵔ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴹⴰⵕⵜ ⵓⵢⴰ, ⵔⴰⴷ ⵢⵉⵍⵉ ⵡⵓⴳⴳⴰⵔ.ⴰⵙⵎⵉⵍ ⴰⵎⵣⴳⵓⵏ, ⵉⴳ ⴷⴰ ⵜⵙⵙⵏⵜⵉⴷ ⵙ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ, ⴳ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵔⴰⴷ ⵏⵔⴰⵔ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵙ ⵓⵙⵙⵓⴷⵙ ⵓⵔ ⵉⵃⵍⵉⵏ.# >>> strange_sort_list.call([1, 2, 3, 4])
# [1, 4, 2, 3]
# >>> strange_sort_list.call([5, 5, 5, 5])
# [5, 5, 5, 5]
# >>> strange_sort_list.call([])
# []
def strange_sort_list(lst)
","def strange_sort_list(lst)
  result = []
  lst.sort!
  until lst.empty?
    result << lst.shift
    result << lst.pop unless lst.empty?
  end
  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_strange_sort_list
    candidate = method(:strange_sort_list)
    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))
    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))
    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))
    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))
    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))
    assert_equal([], candidate.call([]))
    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))
    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))
    assert_equal([111111], candidate.call([111111]))
  end
end
"
HumanEval_71,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: ⵅⵙⵖ ⴰⴷ ⵙⵙⴽⵔⵖ ⴽⵕⴰⴹ ⵏ ⵜⵙⴳⴰ.ⴽⵕⴰⴹ ⵏ ⵜⴼⵓⵍⵉⵏ ⴷⴰ ⵙⴽⴰⵔⵏ ⵢⴰⵏ ⵓⴽⵕⴰⴹ ⵉⵖⵓⴷⴰⵏ ⵉⴳ ⵜⵍⵍⴰ ⵜⵔⵎⵜ ⵏ ⵙⵏⴰⵜ ⵜⴼⵓⵍⵉⵏ ⵅⴰⵜⴰⵔⵎⴽ ⵓⵔ ⵜⵍⵍⵉ, ⵔⴰⴷ ⵜⵔⴰⵔ -1 ⵜⴰⴳⴳⴰⵢⵜ ⵏ ⴽⵕⴰⴹⵜ ⵜⴱⵔⴷⴰⵏ ⵙ 2 ⵏ ⵜⵏⵇⵇⵉⴹⵉⵏ ⵜⵉⵎⵔⴰⵡⵉⵏ ⵎⴽⵍⵍⵉ ⴳⴰⵏⵜ ⴽⵕⴰⴹⵜ ⵜⴼⵓⵍⵉⵏ ⵢⴰⵜ ⵜⵔⴳⴰⵍⵜ ⵜⵓⵏⵏⵓⵏⵜ.ⵙ ⵓⵙⴽⵙⵍ ⵏ ⵜⵉⵖⵣⵉ ⵏ ⴽⵕⴰⴹ ⵏ ⵜⴼⵓⵍⵉⵏ ⵏ ⵢⴰⵏ ⵓⴽⵕⴰⴹ. ⵔⵎⵙⵏ ⵜⴰⵊⵓⵎⵎⴰ ⵏ # >>> triangle_area.call(3, 4, 5)
# 6.0
# >>> triangle_area.call(1, 2, 10)
# -1
def triangle_area(a, b, c)
","def triangle_area(a, b, c)
  # Check for valid triangle
  if a + b > c && a + c > b && b + c > a
    # Calculate the semi-perimeter
    s = (a + b + c) / 2.0
    # Calculate the area using Heron's formula
    area = Math.sqrt(s * (s - a) * (s - b) * (s - c))
    # Round to 2 decimal points
    return area.round(2)
  else
    return -1
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_triangle_area
    candidate = method(:triangle_area)
    assert_equal(6.0, candidate.call(3, 4, 5))
    assert_equal(-1, candidate.call(1, 2, 10))
    assert_equal(8.18, candidate.call(4, 8, 5))
    assert_equal(1.73, candidate.call(2, 2, 2))
    assert_equal(-1, candidate.call(1, 2, 3))
    assert_equal(16.25, candidate.call(10, 5, 7))
    assert_equal(-1, candidate.call(2, 6, 3))
    assert_equal(0.43, candidate.call(1, 1, 1))
    assert_equal(-1, candidate.call(2, 2, 10))
  end
end
"
HumanEval_72,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: ⵔⴰⴷ ⵉⵢⵉ ⵜⴱⴰⵢⵢ ⵉⴳ ⵉⴳⴰ ⵡⴰⵏⴰⵡ q ⴰⵎⵙⴰⵙⴰ (ⵉⴳⴰ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉ) ⴷ ⵡⴰⵜⵉⴳ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⵙ ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⴳⴳⴰⵔ ⵏ ⵡⴰⵜⵉⴳ ⵏ ⵓⴳⴳⴰⵔ ⵏ ⵓⴽⵙⴰⵢ w.ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⵊⵊⴰⵏ ⴰⴷ ⵜⴳ ⵜⵉⴷⵜ ⵎⴽ ⴷⴰ ⵉⵜⵜⵓⵖⴰⵍ ⵓⴷⵎ q, ⴷ ⵜⵉⴷⵜ ⵎⴽ ⵓⵔ ⵉⴳⵉ. # >>> will_it_fly.call([1, 2], 5)
# false
# # 1+2 is less than the maximum possible weight, but it's unbalanced.
# >>> will_it_fly.call([3, 2, 3], 1)
# false
# # it's balanced, but 3+2+3 is more than the maximum possible weight.
# >>> will_it_fly.call([3, 2, 3], 9)
# true
# # 3+2+3 is less than the maximum possible weight, and it's balanced.
# >>> will_it_fly.call([3], 5)
# true
# # 3 is less than the maximum possible weight, and it's balanced.
def will_it_fly(q, w)
","def will_it_fly(q, w)
  is_palindrome = q == q.reverse
  total_weight = q.sum
  is_balanced_and_under_weight = is_palindrome && total_weight <= w
  is_balanced_and_under_weight
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_will_it_fly
    candidate = method(:will_it_fly)
    assert_equal(true, candidate.call([3, 2, 3], 9))
    assert_equal(false, candidate.call([1, 2], 5))
    assert_equal(true, candidate.call([3], 5))
    assert_equal(false, candidate.call([3, 2, 3], 1))
    assert_equal(false, candidate.call([1, 2, 3], 6))
    assert_equal(true, candidate.call([5], 5))
  end
end
"
HumanEval_73,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⵥⴹⴰⵕⵏ ⴰⴷ ⵙⵏⴼⵍⵏ ⵢⴰⵏ ⵉⴼⵔⴷⵉⵙ ⵙ ⴽⵔⴰ ⵢⴳⴰⵜ ⵉⴼⵔⴷⵉⵙ ⵢⴰⴹⵏ.ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵜⵓⵙⵏⴼⵍⵏ ⵃⵎⴰ ⴰⴷ ⵜⴳ ⵜⴳ ⵜⵎⵙⴷⴰⵍⵜ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉⵜ. ⵜⴰⵎⵙⴷⴰⵍⵜ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉⵜ ⵜⴳⴰ ⵢⴰⵜ ⵜⵎⵙⴷⴰⵍⵜ ⵏⵏⴰ ⴹⴼⴰⵕⵖ ⵢⴰⵏ ⵓⵙⵏⵙⵍ arr ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵥⵕⵖ ⵓⵟⵟⵓⵏ ⴰⵎⵥⵥⵢⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ # >>> smallest_change.call([1, 2, 3, 5, 4, 7, 9, 6])
# 4
# >>> smallest_change.call([1, 2, 3, 4, 3, 2, 2])
# 1
# >>> smallest_change.call([1, 2, 3, 2, 1])
# 0
def smallest_change(arr)
","def smallest_change(arr)
  changes = 0
  left = 0
  right = arr.length - 1

  while left < right
    if arr[left] != arr[right]
      changes += 1
    end
    left += 1
    right -= 1
  end

  changes
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_smallest_change
    candidate = method(:smallest_change)
    assert_equal(4, candidate.call([1, 2, 3, 5, 4, 7, 9, 6]))
    assert_equal(1, candidate.call([1, 2, 3, 4, 3, 2, 2]))
    assert_equal(1, candidate.call([1, 4, 2]))
    assert_equal(1, candidate.call([1, 4, 4, 2]))
    assert_equal(0, candidate.call([1, 2, 3, 2, 1]))
    assert_equal(0, candidate.call([3, 1, 1, 3]))
    assert_equal(0, candidate.call([1]))
    assert_equal(1, candidate.call([0, 1]))
  end
end
"
HumanEval_74,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ ⵎⴽ ⴷⴰⵔ ⵙⵏⴰⵜ ⵏ ⵜⴳⵡⵎⵎⴰ ⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ ⵉⵎⵏⴹⴰⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ, ⵙⵙⵓⴼⵖ ⵜⴰⴳⵡⵎⵎⴰ ⵜⴰⵎⵣⵡⴰⵔⵓⵜ.ⴰⵎⴹⴰⵏ ⴰⵖⵓⵍⴰⵏ ⵏ ⵜⴽⴰⵔⵉⵏ ⴳ ⴽⵓⵍⵍⵓ ⵜⵉⵙⴷⴷⴰⵔ ⵏ ⵓⵙⵏⵙⵍ ⵎⵥⵥⵉⵢⵏ ⴳ ⵓⵙⵏⵙⵍ ⵢⴰⴹⵏ.ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⵎⵥⵏ ⵙⵏⴰⵜ ⵏ ⵜⴳⵔⵓⵎⵎⴰ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⴷ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏⵏⴰ ⵖⵓⵔ ⵉⵍⵍⴰ # >>> total_match.call([], [])
# []
# >>> total_match.call([""hi"", ""admin""], [""hI"", ""Hi""])
# [""hI"", ""Hi""]
# >>> total_match.call([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])
# [""hi"", ""admin""]
# >>> total_match.call([""hi"", ""admin""], [""hI"", ""hi"", ""hi""])
# [""hI"", ""hi"", ""hi""]
# >>> total_match.call([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])
# [""4""]
def total_match(lst1, lst2)
","def total_match(lst1, lst2)
  total_chars1 = lst1.map(&:length).sum
  total_chars2 = lst2.map(&:length).sum

  if total_chars1 < total_chars2
    lst1
  elsif total_chars2 < total_chars1
    lst2
  else
    lst1
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_total_match
    candidate = method(:total_match)
    assert_equal([], candidate.call([], []))
    assert_equal([""hi"", ""hi""], candidate.call([""hi"", ""admin""], [""hi"", ""hi""]))
    assert_equal([""hi"", ""admin""], candidate.call([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""]))
    assert_equal([""4""], candidate.call([""4""], [""1"", ""2"", ""3"", ""4"", ""5""]))
    assert_equal([""hI"", ""Hi""], candidate.call([""hi"", ""admin""], [""hI"", ""Hi""]))
    assert_equal([""hI"", ""hi"", ""hi""], candidate.call([""hi"", ""admin""], [""hI"", ""hi"", ""hi""]))
    assert_equal([""hi"", ""admin""], candidate.call([""hi"", ""admin""], [""hI"", ""hi"", ""hii""]))
    assert_equal([], candidate.call([], [""this""]))
    assert_equal([], candidate.call([""this""], []))
  end
end
"
HumanEval_75,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: ⵥⵕⵖ ⵉⵙ (ⴰ) ⵉⴳⴰ ⵜⵜ ⵉⵎⵥⵥⵉⵢⵏ ⵙⴳ 100.ⴷ ⵜⵉⵣⴳⴰⵍⵜ ⵙ ⵡⵉⵢⵢⴰⴹ.ⵙⴽⵔ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵉⵜⵜⴰⵡⵙⵏ ⴰⴷ ⵏⴰⴼ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵏⵏⴰ ⵏⵓⵎⵥ ⴰⵙⴼⵙⵔ ⵏ 3 ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵉⵎⵣⵡⵓⵔⴰ # >>> is_multiply_prime.call(30)
# true
# 30 = 2 * 3 * 5
def is_multiply_prime(a)
","require 'prime'

def is_multiply_prime(a)
  return false if a >= 100
  prime_factors = a.prime_division
  return true if prime_factors.size == 3 && prime_factors.all? { |_, exponent| exponent == 1 }
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_multiply_prime
    candidate = method(:is_multiply_prime)
    assert_equal(false, candidate.call(5))
    assert_equal(true, candidate.call(30))
    assert_equal(true, candidate.call(8))
    assert_equal(false, candidate.call(10))
    assert_equal(true, candidate.call(125))
    assert_equal(true, candidate.call(105))
    assert_equal(false, candidate.call(126))
    assert_equal(false, candidate.call(729))
    assert_equal(false, candidate.call(891))
    assert_equal(true, candidate.call(1001))
  end
end
"
HumanEval_76,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: x ⴷ ⵜⴰⵣⴷⵓⵖⵜ ⵜⴰⵎⵢⵉⵡⴰⵏⵜ ⵏ n ⵎⴽ n**int=x ⵜⴰⵣⵎⵔⵜ ⵏ n ⴷ false ⴳ ⵡⴰⴷⴷⴰⴷⵏ ⵢⴰⴹⵏⵉⵏ.ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵔⵔⴰⵎ ⵢⴰⵜ ⵜⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵓⵟⵟⵓⵏ x ⵢⴰⵏ ⵓⵟⵟⵓⵏ ⵀⴰⵢⵢⴰⵏ# >>> is_simple_power.call(1, 4)
# true
# >>> is_simple_power.call(2, 2)
# true
# >>> is_simple_power.call(8, 2)
# true
# >>> is_simple_power.call(3, 2)
# false
# >>> is_simple_power.call(3, 1)
# false
# >>> is_simple_power.call(5, 3)
# false
def is_simple_power(x, n)
","def is_simple_power(x, n)
  return false if x <= 0 || n <= 1
  return true if x == 1

  power = n
  while power <= x
    return true if power == x
    power *= n
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_simple_power
    candidate = method(:is_simple_power)
    assert_equal(true, candidate.call(16, 2))
    assert_equal(false, candidate.call(143214, 16))
    assert_equal(true, candidate.call(4, 2))
    assert_equal(true, candidate.call(9, 3))
    assert_equal(true, candidate.call(16, 4))
    assert_equal(false, candidate.call(24, 2))
    assert_equal(false, candidate.call(128, 4))
    assert_equal(false, candidate.call(12, 6))
    assert_equal(true, candidate.call(1, 1))
    assert_equal(true, candidate.call(1, 12))
  end
end
"
HumanEval_77,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵜⴰⵖⴹⴼⵜ: ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⴷ ⵉⵙ ⵉⴳⴰ ⵡⵉⵏ ⵜⴽⵛⵛⵓⵎⵜ ⴰⵀⴰ ⵉⴳⴰ ⵡⵉⵏ ⵜⴽⵛⵛⵓⵎⵜ.ⵉⵖ ⵉⴳⴰ ⵡⵉⴽⵉⴱⵉⴷⵢⴰ ⴰⴷ ⵢⴰⵏ ⵓⴽⵡⴼⴰⵢ ⵏ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ.ⵙⴽⵔ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ a ⴰⵔ ⵉⵜⵜⴰⴽⴰ true # >>> iscube.call(1)
# true
# >>> iscube.call(2)
# false
# >>> iscube.call(-1)
# true
# >>> iscube.call(64)
# true
# >>> iscube.call(0)
# true
# >>> iscube.call(180)
# false
def iscube(a)
","def iscube(a)
  cube_root = a.abs**(1.0/3)
  cube_root.round**3 == a
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_iscube
    candidate = method(:iscube)
    assert_equal(true, candidate.call(1))
    assert_equal(false, candidate.call(2))
    assert_equal(true, candidate.call(-1))
    assert_equal(true, candidate.call(64))
    assert_equal(false, candidate.call(180))
    assert_equal(true, candidate.call(1000))
    assert_equal(true, candidate.call(0))
    assert_equal(false, candidate.call(1729))
  end
end
"
HumanEval_78,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⴷ ⵉⵙⵎⵎⴰⵍⵏ A,B,C,D,E,F ⴰⵀⴰ ⴳⴰⵏ ⵉⵎⵣⴳⵓⵏⵏ ⵉⵎⵇⵔⴰⵏⵏ.ⵜⵓⵏⵖⵉⵍⵜ: ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⴷ ⵉⵙ ⵉⴳⴰ ⵡⴰⵏⵙⴰ ⵏ ⵓⵙⴽⵛⵎ ⴰⵀⴰ ⵉⴳⴰ ⵜⴷⵓⵙ ⵏⵖⴷ ⵉⴳⴰ ⵡⴰⵏⵙⴰ ⵏ ⵜⵣⵍⵉⵜ, ⴱ (= ⴷⵣⴰⵢⵔ 11), ⴷ (= ⴷⵣⴰⵢⵔ 13). ⵔⴰⴷ ⵜⵙⵙⵏⵎⴹⵎ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵙⴳ ⵡⵓⵟⵟⵓⵏⵏ ⴰⴷ: 2, 3, 5, 7, ⵉⵎⴹⴰⵏ ⵉⵎⵣⵡⵓⵔⴰ ⴳⴰⵏ 2, 3, 5, 7, 11, 13, 17,...ⵉⵎⴹⴰⵏⵏ ⵏ ⵓⴽⵙⵡⴰⵜ ⴳⴰⵏ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. ⴰⵢⴰⴷ ⵓⵔ ⵉⴳⵉ ⵢⴰⵏ ⵓⵢⴰⴼⵓ ⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵔⴰⵔⵏ).ⵉⵎⴹⴰⵏⵏ ⵉⵎⵣⵡⵓⵔⴰ (ⵉⴹ ⴰⵎⵣⵡⴰⵔⵓ, ⵏⵖ ⴰⵎⵣⵡⴰⵔⵓ, ⵉⴳⴰ ⴰⵎⴹⴰⵏ ⴰⴳⴰⵎⴰⵏ ⴰⵎⴹⴰⵏ ⴰⵀⵉⵊⴰⴷⵉⴽⵉⵎⴰⵍ ⴰⵎⵎ ⵜⴰⵡⵜⵉⵍⵜ ⴷ ⴰⵔ ⵉⵙⵉⴹⵏ ⴰⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⴰⵀⵉⵊⴰⴷⵉⴽⵉⵎⴰⵍ ⵜⵓⵎⵥⴷ ⵜⴰⵡⵓⵔⵉ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ # >>> hex_key.call(""AB"")
# 1
# >>> hex_key.call(""1077E"")
# 2
# >>> hex_key.call(""ABED1A33"")
# 4
# >>> hex_key.call(""123456789ABCDEF0"")
# 6
# >>> hex_key.call(""2020"")
# 2
def hex_key(num)
","def hex_key(num)
  prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']
  num.chars.count { |digit| prime_hex_digits.include?(digit) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_hex_key
    candidate = method(:hex_key)
    assert_equal(1, candidate.call(""AB""))
    assert_equal(2, candidate.call(""1077E""))
    assert_equal(4, candidate.call(""ABED1A33""))
    assert_equal(2, candidate.call(""2020""))
    assert_equal(6, candidate.call(""123456789ABCDEF0""))
    assert_equal(12, candidate.call(""112233445566778899AABBCCDDEEFF00""))
  end
end
"
HumanEval_79,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵉⵙⴽⴽⵉⵍⵏ ⵢⴰⴹⵏ ⵉⵍⵍⴰⵏ ⴰⴼⴰⴷ ⴰⴷ ⵙⵙⵓⴷⵙⵏ ⵜⴰⵍⵖⴰ. ⵔⴰⴷ ⵉⵍⵉⵏ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵢⴰⴹⵏⵉⵏ 'db' ⴳ ⵍⴱⴷⵓ ⴷ ⵜⴳⵉⵔⴰ ⵏ ⵜⵣⵍⵉⵜ.ⴽⵓ ⵉⵙⴽⴽⵉⵍⵏ ⴳ ⵜⵣⵍⵉⵜ ⵔⴰⴷ ⴳⵉⵏ ""0"" ⵏⵖ ""1"".ⵜⴰⵍⵖⴰ ⴰⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵙⴽⵔ ⵢⴰⵏ ⵓⵙⴽⴽⵉⵍ, ⵙ ⴽⵓ ⵉⵙⴽⴽⵉⵍ ⵉⵙⵎⴷⵢⴰⵏ ⵢⴰⵏ ⵓⵙⴽⴽⵉⵍ ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵏⵉⵡⵏ ⴳ ⵜⴰⵍⵖⴰ ⵏ ⵜⵓⵙⴷⵉⴷⵜ ⴷ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⴰⴷ ⵜⵙⵙⵏⴼⵍⵜ ⵔ# >>> decimal_to_binary.call(15)
# ""db1111db""
# >>> decimal_to_binary.call(32)
# ""db100000db""
def decimal_to_binary(decimal)
","def decimal_to_binary(decimal)
  ""db"" + decimal.to_s(2) + ""db""
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_decimal_to_binary
    candidate = method(:decimal_to_binary)
    assert_equal(""db0db"", candidate.call(0))
    assert_equal(""db100000db"", candidate.call(32))
    assert_equal(""db1100111db"", candidate.call(103))
    assert_equal(""db1111db"", candidate.call(15))
  end
end
"
HumanEval_80,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⵉⴳⴰ ⵓⵖⵉⵍⴰⵍ haprb ⵎⴽ ⴷⴰⵔⵙ ⵓⴳⴳⴰⵔ ⵏ 3 ⵏ ⵜⵉⵔⵔⴰ ⴷ ⴽⵓ 3 ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵉⵔⵉⵎ ⵎⴽ ⵜⴳⴰ ⵜⵊⵕⵕⵓⵎⵜ ⵜⴰⵡⵍⴰⴼⵜ ⵏⵖ ⵓⵔ ⵜⵍⵍⵉ.ⵔⴰⴷ ⴽⴽⵙⴷ ⵢⴰⵏ ⵓⴽⵛⵛⵓⵎ ⵙ# >>> is_happy.call(""a"")
# false
# >>> is_happy.call(""aa"")
# false
# >>> is_happy.call(""abcd"")
# true
# >>> is_happy.call(""aabb"")
# false
# >>> is_happy.call(""adb"")
# true
# >>> is_happy.call(""xyy"")
# false
def is_happy(s)
","def is_happy(s)
  return false if s.length < 3
  
  (0..s.length - 3).each do |i|
    return false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]
  end
  
  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_happy
    candidate = method(:is_happy)
    assert_equal(false, candidate.call(""a""))
    assert_equal(false, candidate.call(""aa""))
    assert_equal(true, candidate.call(""abcd""))
    assert_equal(false, candidate.call(""aabb""))
    assert_equal(true, candidate.call(""adb""))
    assert_equal(false, candidate.call(""xyy""))
    assert_equal(true, candidate.call(""iopaxpoi""))
    assert_equal(false, candidate.call(""iopaxioi""))
  end
end
"
HumanEval_81,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: 0.0 E > 0.0 ⴷ- > 0.7 D > 1.0 ⴷ+ > 1.3 C- > 1.7 C > 2.0 C+ > 2.3 ⴱ- > 2.7 B > 3.0 ⴱ+ > 3.3 ⴰ- > 3.7 ⴰ 4.0 ⴰ+ GPA. ⵜⴰⵡⴰⵍⵜ ⵏ ⵜⵉⵔⵔⴰ.ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵥⴹⴰⵕⵏ ⴰⴷ ⵉⴼⴽ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵉⵙⵡⵉⵔⵏ ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⵙ ⵓⵙⵎⵔⵙ ⵏ ⵜⴼⵍⵡⵉⵜ ⴰⴷ: ⵜⴽⴽⴰ ⵜⵜ ⵉⵏⵏ ⴽⵔⴰ ⵏ ⵉⵙⵍⵎⴰⴷⵏ ⴷ ⵜⵏⵍⵎⴰⴷⵉⵏ ⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵔⵔⴰⵎ.ⵜⴰⵎⵓⴽⵔⵉⵙⵜ ⵏⵜⵜⴰⵜ ⴷ ⵉⵙ ⵜⵙⵙⵓⵜⵍⵜ ⵏ ⵓⴽⵓⴷ ⵏⵏⴰ ⵙⵙⵎⵔⴰⵙⵏⵜ ⵉ ⵓⵙⵜⴰⵍ.ⵉⵙⴽⵔ ⵓⵙⵍⵎⴰⴷ ⴰⵍⴳⵓⵔⵉⵜⵎ ⵏⵏⵙ ⵉ ⵉⵎⵍⵎⴰⴷⵏ.ⵉⴳⴰ ⵡⴰⵢⵢⵓⵔ ⴰⵎⴳⴳⴰⵔⵓ ⵏ ⵜⵙⵓⵜⵍⵜ ⴷ ⵉⵇⵇⴰⵏ ⴷ ⵓⵙⵍⵎⴰⴷ ⴰⴷ ⵉⴼⴽ ⵉ ⵉⵎⵙⵍⵎⴰⴷⵏ ⴰⵙⵡⵉⵔ ⵏⵏⵙⵏ # >>> grade_equation.call([4.0, 3, 1.7, 2, 3.5])
# [""A+"", ""B"", ""C-"", ""C"", ""A-""]
def numerical_letter_grade(grades)
","def numerical_letter_grade(grades)
  grades.map do |gpa|
    case 
    when gpa == 4.0
      ""A+""
    when gpa > 3.7
      ""A""
    when gpa > 3.3
      ""A-""
    when gpa > 3.0
      ""B+""
    when gpa > 2.7
      ""B""
    when gpa > 2.3
      ""B-""
    when gpa > 2.0
      ""C+""
    when gpa > 1.7
      ""C""
    when gpa > 1.3
      ""C-""
    when gpa > 1.0
      ""D+""
    when gpa > 0.7
      ""D""
    when gpa > 0.0
      ""D-""
    else
      ""E""
    end
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_numerical_letter_grade
    candidate = method(:numerical_letter_grade)
    assert_equal([""A+"", ""B"", ""C-"", ""C"", ""A-""], candidate.call([4.0, 3, 1.7, 2, 3.5]))
    assert_equal([""D+""], candidate.call([1.2]))
    assert_equal([""D-""], candidate.call([0.5]))
    assert_equal([""E""], candidate.call([0.0]))
    assert_equal([""D"", ""D-"", ""C-"", ""B"", ""B+""], candidate.call([1.0, 0.3, 1.5, 2.8, 3.3]))
    assert_equal([""E"", ""D-""], candidate.call([0.0, 0.7]))
  end
end
"
HumanEval_82,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ ⵜⵉⵖⵣⵉ ⵜⴳⴰ ⴰⵎⴹⴰⵏ ⴰⵎⵣⵡⴰⵔⵓ ⵏⵖⴷ ⵜⵉⴳⵡⴷⵓⵜ ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⴰⵏⵎⵍⴰⵏ ⴰⵔ ⵉⵙⴽⴰⵔ ⵜⵉⴷⵜ ⵎⴽ ⵜⴳⴰ ⵓⵡⵉⴽⵉ ⴰⵏⵎⵍⴰⵏ # >>> prime_length.call(""Hello"")
# true
# >>> prime_length.call(""abcdcba"")
# true
# >>> prime_length.call(""kittens"")
# true
# >>> prime_length.call(""orange"")
# false
def prime_length(string)
","def prime_length(string)
  length = string.length
  return false if length < 2

  (2..Math.sqrt(length)).each do |i|
    return false if length % i == 0
  end

  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_prime_length
    candidate = method(:prime_length)
    assert_equal(true, candidate.call(""Hello""))
    assert_equal(true, candidate.call(""abcdcba""))
    assert_equal(true, candidate.call(""kittens""))
    assert_equal(false, candidate.call(""orange""))
    assert_equal(true, candidate.call(""wow""))
    assert_equal(true, candidate.call(""world""))
    assert_equal(true, candidate.call(""MadaM""))
    assert_equal(true, candidate.call(""Wow""))
    assert_equal(false, candidate.call(""""))
    assert_equal(true, candidate.call(""HI""))
    assert_equal(true, candidate.call(""go""))
    assert_equal(false, candidate.call(""gogo""))
    assert_equal(false, candidate.call(""aaaaaaaaaaaaaaa""))
    assert_equal(true, candidate.call(""Madam""))
    assert_equal(false, candidate.call(""M""))
    assert_equal(false, candidate.call(""0""))
  end
end
"
HumanEval_83,tzm_Tfng,rb,"ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵏⴰ ⵉⵙⵙⵏⵜⵉⵢⵏ ⵏⵖⴷ ⵉⵜⵜⵉⵔⴰⵢⵏ ⵙ 1.ⴳ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵙⴽⵔ ⴰⵙⵉⴹⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ n def starts_one_ends(n)
","def starts_one_ends(n)
  return 0 if n <= 0

  # Count numbers starting with 1
  start_with_1 = 9 ** (n - 1)

  # Count numbers ending with 1
  end_with_1 = 9 ** (n - 1)

  # Adjust for double counting the number that both starts and ends with 1
  both_start_and_end_with_1 = 9 ** (n - 2) if n > 1
  
  start_with_1 + end_with_1 - (both_start_and_end_with_1 || 0)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_starts_one_ends
    candidate = method(:starts_one_ends)
    assert_equal(1, candidate.call(1))
    assert_equal(18, candidate.call(2))
    assert_equal(180, candidate.call(3))
    assert_equal(1800, candidate.call(4))
    assert_equal(18000, candidate.call(5))
  end
end
"
HumanEval_84,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ ⴳ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ N, ⵙⵙⵓⴼⵖ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⵙ ⵜⴱⵉⵏⴰⵔⵉⵜ. # >>> solve.call(1000)
# ""1""
# >>> solve.call(150)
# ""110""
# >>> solve.call(147)
# ""1100""
# Variables:
# @N integer
# Constraints: 0 ≤ N ≤ 10000.
# Output:
# a string of binary number
def solve(n)
","def solve(n)
  sum_of_digits = n.to_s.chars.map(&:to_i).sum
  sum_of_digits.to_s(2)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_solve
    candidate = method(:solve)
    assert_equal(""1"", candidate.call(1000))
    assert_equal(""110"", candidate.call(150))
    assert_equal(""1100"", candidate.call(147))
    assert_equal(""1001"", candidate.call(333))
    assert_equal(""10010"", candidate.call(963))
  end
end
"
HumanEval_85,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⴳ ⵓⵙⴰⵜⵉ ⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⵅⴷⴷⴰⵎⵏ, ⵣⵡⴰⵔ ⴰⴷ ⵏⵔⵏⵓ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳ ⵉⵙⵓⵎⴰⵔ ⵉⵎⵣⴰⵔⴰⵢⵏ.# >>> add.call([4, 2, 6, 7])
# 2
def add(lst)
","def add(lst)
  lst.each_with_index.select { |num, index| index.odd? && num.even? }.map(&:first).sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_add
    candidate = method(:add)
    assert_equal(88, candidate.call([4, 88]))
    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))
    assert_equal(0, candidate.call([4, 0, 6, 7]))
    assert_equal(12, candidate.call([4, 4, 6, 8]))
  end
end
"
HumanEval_86,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⵜⴰⵖⴹⴼⵜ: ⵔⴰⴷ ⵜⵙⵙⵓⴷⵙⴷ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴷ ⵡⴰⵏⵙⴰ ⴳ ⵜⴳⵓⵔⵉ.ⴹⴼⵓⵕⵜ ⵏ ⵓⵙⵙⵓⴷⵙ ⵙ ⵓⵙⵙⴼⵍⴷ ⵅⴼ ⵡⴰⵜⵉⴳ ⵏ ascii.ⴷⴰ ⵜⵜⵓⵙⵏⴼⴰⵍⵏ ⵙ ⵜⴳⵓⵔⵉ ⵜⴰⵎⴰⵢⵏⵓⵜ ⴳ ⵔⴰⴷ ⵙⵙⵓⴷⵙⵏ ⴽⵓⵍⵍⵓ ⵉⵙⴽⴽⵉⵍⵏ ⴳⵜⴰⵡⵍⴰⴼⵜ ⵉⵜⵜⵓⵙⵏⵎⴰⵍⴰⵏ ⵏ ⵜⵉⴼⵉⵏⴰⵖ, ⵜⴳⴰ ⵜⵉⴼⵉⵏⴰⵖ ⴳ ⵍⵍⴰⵏⵜ ⴽⵓⵍⵍⵓ ⵜⴳⵓⵔⵉⵡⵉⵏ (ⵉⴱⴹⴰⵏ ⵙ ⵓⵙⴰⵢⵔⴰⵔ) ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⴰⵏⵎⵎⴰⵍ ⴷ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵢⴰⵜ ⵜⵓⵏⵖⵉⵍⵜ ⵉⵜⵜⵓⵙⵏⵎⴰⵍⵏ.# >>> anti_shuffle.call(""Hi"")
# ""Hi""
# >>> anti_shuffle.call(""hello"")
# ""ehllo""
# >>> anti_shuffle.call(""Hello World!!!"")
# ""Hello !!!Wdlor""
def anti_shuffle(s)
","def anti_shuffle(s)
  s.split(/(\s+)/).map { |word| word.chars.sort.join }.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_anti_shuffle
    candidate = method(:anti_shuffle)
    assert_equal(""Hi"", candidate.call(""Hi""))
    assert_equal(""ehllo"", candidate.call(""hello""))
    assert_equal(""bemnru"", candidate.call(""number""))
    assert_equal(""abcd"", candidate.call(""abcd""))
    assert_equal(""Hello !!!Wdlor"", candidate.call(""Hello World!!!""))
    assert_equal("""", candidate.call(""""))
    assert_equal("".Hi My aemn is Meirst .Rboot How aer ?ouy"", candidate.call(""Hi. My name is Mister Robot. How are you?""))
  end
end
"
HumanEval_87,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⴰⵡⴷ, ⵙⵙⵓⴷⵙ ⴰⴽⵓⵓⵔⴷⵉⴰⵜⵏ ⵏ ⵜⵉⵙⴳⵉⵡⵉⵏ ⵙ ⵜⵔⵙⴰⵍ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵣⴷⵓⵖ.ⵙⵙⵓⴷⵙ ⴰⴽⵓⵓⵔⴷⵉⴰⵜⵏ ⴳ ⵜⵉⵣⵡⵉⵔⵉ ⵙ ⵜⵉⴼⵔⵉⵙⵉⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵇⵔⴰⵏ.ⴽⵓ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵜⴳⴰ ⵢⴰⵜ ⵜⴽⵓⵓⵔⴷⵉⵏⴰⵜ - (ⵜⴰⵏⴳⴳⴰ, ⵜⵉⵔⵙⴰⵍ), ⴰⵔ ⵜⴱⴷⴰⴷ ⵙ 0.ⴷ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⴰⵙⵏⵙⵍ ⵏ ⵉⵙⵏⵙⵍⵏ, [(x1, y1), (x2, y2) ...] ⵣⵓⵏⴷ ⵎⴰⵙ ⴹⴼⴰⵕⵖ lst, ⴷ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ x, ⵔⴰⴷ ⵙⵏⴼⵍⵖ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ x ⴳ ⵓⵙⴼⵙⵔ, ⴽⵓ ⵜⴰⵡⵔⵉⵔⵜ ⵜⵣⵎⵔ ⴰⴷ ⵜⴰⴽⴽⴰ ⵉⵎⴹⴰⵏⵏ ⵏ ⵜⵔⵙⴰⵍ.ⵏⵏⴰ ⵢⴰⴽⵙⵓⵍⵏ ⴷ ⵜⵎⵜⵜⵓⵍⵜ, ⵎⴰⵛⴰ, ⵓⵔ ⵢⴰⴽⵙⵓⵍⵏ ⴷ ⵜⵎⵜⵜⵓⵍⵉⵏ, ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵔⴰ ⵏ ⵉⵏⵖⵎⵉⵙⵏ ⵉⴽⵙⵡⴰⵜⵏ, ⵙ ⵜⴰⵍⵖⴰ ⵏ ⵉⵎⵙⴷⴷⵉⵢⵏ, # >>> get_row.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)
# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]
# >>> get_row.call([], 1)
# []
# >>> get_row.call([[], [1], [1, 2, 3]], 3)
# [[2, 2]]
def get_row(lst, x)
","def get_row(lst, x)
  result = []

  lst.each_with_index do |row, i|
    row.each_with_index do |value, j|
      result << [i, j] if value == x
    end
  end

  result.sort_by { |coord| [coord[0], -coord[1]] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_row
    candidate = method(:get_row)
    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))
    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))
    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))
    assert_equal([], candidate.call([], 1))
    assert_equal([], candidate.call([[1]], 2))
    assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))
  end
end
"
HumanEval_88,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: * ⵓⵔ ⴷⴰ ⵏⵙⵙⵏⴼⵍ ⴰⵙⵏⴼⵍⵓⵍ ⵏⵏⴰ ⵏⴽⴽⴰ. ⵜⴰⵖⴹⴼⵜ: ⵏⵖ ⴰⴷ ⵜⵙⵙⵓⴷⵙⴷ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵣⴷⴰⵔⵓ ⵎⴽ ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵣⵡⴰⵔⵓ ⴷ ⵡⴰⵜⵉⴳ ⵏ ⵓⵙⵙⵓⴷⵙ ⴰⵎⴳⴳⴰⵔⵓ ⵥⴹⴰⵕⵏ ⴰⴷ ⴳⵉⵏ ⴰⵎⵙⴷⴷⴰⵔ.ⵔⴰⴷ ⵜⵙⵙⵓⴷⵙⴷ ⴰⵙⵏⵙⵉ ⵏ ⵓⵙⵏⵙⵉ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵓⵙⵙⵓ ⵎⴽ ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵣⵡⴰⵔⵓ ⴷ ⵡⴰⵜⵉⴳ ⵏ ⵓⵙⵙⵓⴷⵙ ⴰⵎⴳⴳⴰⵔⵓ ⴷⴼⴼⵉⵔ ⵏ ⵓⵙⵎⵓⵜⵜⴳ ⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⵔⵉⵏ, ⵔⵎⵙⵏ ⵜⴰⴽⵓⵔⴱ ⵏ ⵓⵙⵏⵙⵍ ⴷⴼⴼⵉⵔ ⵏ ⵓⵙⵎⵓⵜⵜⴳ,# >>> sort_array.call([])
# []
# >>> sort_array.call([5])
# [5]
# >>> sort_array.call([2, 4, 3, 0, 1, 5])
# [0, 1, 2, 3, 4, 5]
# >>> sort_array.call([2, 4, 3, 0, 1, 5, 6])
# [6, 5, 4, 3, 2, 1, 0]
def sort_array(array)
","def sort_array(array)
  return array if array.empty? || array.size == 1

  if (array.first + array.last).odd?
    array.sort
  else
    array.sort.reverse
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_array
    candidate = method(:sort_array)
    assert_equal([], candidate.call([]))
    assert_equal([5], candidate.call([5]))
    assert_equal([0, 1, 2, 3, 4, 5], candidate.call([2, 4, 3, 0, 1, 5]))
    assert_equal([6, 5, 4, 3, 2, 1, 0], candidate.call([2, 4, 3, 0, 1, 5, 6]))
    assert_equal([1, 2], candidate.call([2, 1]))
    assert_equal([0, 11, 15, 32, 42, 87], candidate.call([15, 42, 87, 32, 11, 0]))
    assert_equal([23, 21, 14, 11], candidate.call([21, 14, 23, 11]))
  end
end
"
HumanEval_89,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⵙⵙⵉⴼⵍ ⵙ ⵙⵉⵏ ⵙ ⵙⵏⴰⵜ ⵜⵎⵏⴰⴹⵉⵏ.ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵏⵙⵙⵏⴼⵍ ⴰⴱⵢⵢⵢⵉ ⵙ ⵢⴰⵜ ⵜⵖⴰⵔⴰⵙⵜ ⵏⵏⴰ ⵔⴰⴷ ⵔⴰⵔⵏⵜ ⵜⵓⵎⵍⴰⵢⵉⵏ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⵉⵜⵜⵓⵣⵎⵎⴻⵎⵏ ⵙ ⵓⵙⵎⵓⵜⵜⴳ ⵏ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⴼⵉⵏⴰⵖ.ⵙⴽⵔ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏ ⵓⵙⵉⴼⵙⵉ ⵏⵏⴰ ⵉⵙⵎⴷⵏ ⵜⴰⵡⵉⵍⴰ ⵏ ⵉⵎⵙⵍⵉ ⴷ # >>> encrypt.call(""hi"")
# ""lm""
# >>> encrypt.call(""asdfghjkl"")
# ""ewhjklnop""
# >>> encrypt.call(""gf"")
# ""kj""
# >>> encrypt.call(""et"")
# ""ix""
def encrypt(s)
","def encrypt(s)
  s.chars.map do |char|
    if char =~ /[a-z]/
      ((char.ord - 'a'.ord + 4) % 26 + 'a'.ord).chr
    elsif char =~ /[A-Z]/
      ((char.ord - 'A'.ord + 4) % 26 + 'A'.ord).chr
    else
      char
    end
  end.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_encrypt
    candidate = method(:encrypt)
    assert_equal(""lm"", candidate.call(""hi""))
    assert_equal(""ewhjklnop"", candidate.call(""asdfghjkl""))
    assert_equal(""kj"", candidate.call(""gf""))
    assert_equal(""ix"", candidate.call(""et""))
    assert_equal(""jeiajeaijeiak"", candidate.call(""faewfawefaewg""))
    assert_equal(""lippsqcjvmirh"", candidate.call(""hellomyfriend""))
    assert_equal(""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"", candidate.call(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh""))
    assert_equal(""e"", candidate.call(""a""))
  end
end
"
HumanEval_90,tzm_Tfng,rb,"ⵔⵔⵓⵜⵓⵔ ⵏⵉⵍ ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⴽⵔⴰ ⵏ ⵓⵏⴰⵡ ⴰⴷ.ⵔⵔⴰ ⵜⴰⵡⵓⵔⵉ next_smallest (() ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⵉⴽⴽⵍⵜ ⵜⵉⵙⵙ ⵙⵏⴰⵜ ⴳ ⵉⵎⵥⵥⵢⴰⵏⵏ ⵏ ⵓⵎⵙⴳⴷⴰⵍ. ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ.# >>> next_smallest.call([1, 2, 3, 4, 5])
# 2
# >>> next_smallest.call([5, 1, 4, 3, 2])
# 2
# >>> next_smallest.call([])
# nil
# >>> next_smallest.call([1, 1])
# nil
def next_smallest(lst)
","def next_smallest(lst)
  unique_sorted = lst.uniq.sort
  unique_sorted.length >= 2 ? unique_sorted[1] : nil
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_next_smallest
    candidate = method(:next_smallest)
    assert_equal(2, candidate.call([1, 2, 3, 4, 5]))
    assert_equal(2, candidate.call([5, 1, 4, 3, 2]))
    assert_equal(nil, candidate.call([]))
    assert_equal(nil, candidate.call([1, 1]))
    assert_equal(1, candidate.call([1, 1, 1, 1, 0]))
    assert_equal(nil, candidate.call([1, 1]))
    assert_equal(-35, candidate.call([-35, 34, 12, -45]))
  end
end
"
HumanEval_91,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⴷⴰ ⵜⵜⵓⵙⵏⵎⴰⵍⴰⵏⵜ ⵜⵡⴰⵍⵉⵡⵉⵏ ⵙ "" "" "" "" "" "" "" "" ⵏⵖ "" ! ""ⵏ ⵜⵔⴳⴰⵍⵉⵏ. ⵜⴰⵔⴳⴰⵍⵜ ⵏ ⵜⵔⴳⴰⵍⵜ ⵜⴳⴰ ⵢⴰⵜ ⵜⴳⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴱⴷⴰⴷⵏ ⵙ ⵜⴳⵓⵔⵉ ""ⵉ"".ⵔⴰⴷ ⴽⴽⵙⵎ ⴽⵔⴰ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ, ⴷ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⴰⴷ ⵜⵙⵙⵉⴹⵏ ⴰⵎⴹⴰⵏ.# >>> is_bored.call(""Hello world"")
# 0
# >>> is_bored.call(""The sky is blue. The sun is shining. I love this weather"")
# 1
def is_bored(s)
","def is_bored(s)
  sentences = s.split(/(?<=[.?!])/)
  sentences.count { |sentence| sentence.strip.start_with?('I') }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_bored
    candidate = method(:is_bored)
    assert_equal(0, candidate.call(""Hello world""))
    assert_equal(0, candidate.call(""Is the sky blue?""))
    assert_equal(1, candidate.call(""I love It !""))
    assert_equal(0, candidate.call(""bIt""))
    assert_equal(2, candidate.call(""I feel good today. I will be productive. will kill It""))
    assert_equal(0, candidate.call(""You and I are going for a walk""))
  end
end
"
HumanEval_92,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴼⵍⵡⵉⵜ ⴳ ⴽⵔⴰ ⵏ ⵡⴰⴷⴷⴰⴷⵏ ⵢⴰⴹⵏⵉⵏ.ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵢⴰⵏ ⵙⴳ ⵉⵎⴹⴰⵏⵏ ⴰⵎⵎ ⵓⴳⵣⵓⵎ ⵏ ⵙⵉⵏ ⵢⴰⴹⵏⵉⵏ, ⴷ ⵎⴰⵕⵕⴰ ⵉⵎⴹⴰⵏⵏ ⴳⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ.ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵢⵓⵎⵥⵏ 3 ⵏ ⵡⵓⵟⵟⵓⵏ.# >>> any_int.call(5, 2, 7)
# true
# >>> any_int.call(3, 2, 2)
# false
# >>> any_int.call(3, -2, 1)
# true
# >>> any_int.call(3.6, -2.2, 2)
# false
def any_int(x, y, z)
","def any_int(x, y, z)
  if [x, y, z].all? { |n| n.is_a?(Integer) }
    x == y + z || y == x + z || z == x + y
  else
    false
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_any_int
    candidate = method(:any_int)
    assert_equal(true, candidate.call(2, 3, 1))
    assert_equal(false, candidate.call(2.5, 2, 3))
    assert_equal(false, candidate.call(1.5, 5, 3.5))
    assert_equal(false, candidate.call(2, 6, 2))
    assert_equal(true, candidate.call(4, 2, 2))
    assert_equal(false, candidate.call(2.2, 2.2, 2.2))
    assert_equal(true, candidate.call(-4, 6, 2))
    assert_equal(true, candidate.call(2, 1, 1))
    assert_equal(true, candidate.call(3, 4, 7))
    assert_equal(false, candidate.call(3.0, 4, 7))
  end
end
"
HumanEval_93,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵥⵕ ⵉⵙ ⵜⴳⴰ ⵖⴰⵙ ⵜⵉⵔⵔⴰ.ⴰⵖⵔⵉ ⴳ ⵓⴳⵎⵎⴰⵢ ⴰⵎⴰⵣⵉⵖ.ⵜⴰⴱⵔⴰⵜ ⵙ ⵜⴱⵔⴰⵜ ⵏⵏⴰ ⵢⴰⴷ ⵉⵍⵍⴰⵏ ⵙⵏⴰⵜ ⵜⴷⵖⴰⵔⵉⵏ ⴷⴰⵜ ⵏ ⵜⴱⵔⴰⵜ ⵙ ⵜⵖⴰⵔⴰⵙⵜ ⵏⵏⴰ ⵉⵙⵏⴼⵍⵏ ⵜⵉⴽⴽⵍⵜ ⵏ ⴽⵓⵍⵍⵓ ⵜⵉⵔⵔⴰ, ⵉⵙⵏⴼⵍ ⴽⵓⵍⵍⵓ ⵉⵎⵙⵍⵉ ⴳ ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵜ ⵜⴱⵔⴰⵜ, ⴷ ⵉⵜⵜⵓⵢⵙⴽⵔ ⴳ ⵢⴰⵏ # >>> encode.call(""test"")
# ""TGST""
# >>> encode.call(""This is a message"")
# ""tHKS KS C MGSSCGG""
def encode(message)
","def encode(message)
  vowels = 'aeiou'
  swap_vowels = {'a' => 'c', 'e' => 'g', 'i' => 'k', 'o' => 'q', 'u' => 'w'}
  
  encoded_message = message.chars.map do |char|
    if vowels.include?(char.downcase)
      new_char = swap_vowels[char.downcase]
      char == char.upcase ? new_char.upcase : new_char.downcase
    else
      char == char.upcase ? char.downcase : char.upcase
    end
  end

  encoded_message.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_encode
    candidate = method(:encode)
    assert_equal(""tgst"", candidate.call(""TEST""))
    assert_equal(""mWDCSKR"", candidate.call(""Mudasir""))
    assert_equal(""ygs"", candidate.call(""YES""))
    assert_equal(""tHKS KS C MGSSCGG"", candidate.call(""This is a message""))
    assert_equal(""k dQnT kNqW wHcT Tq wRkTg"", candidate.call(""I DoNt KnOw WhAt tO WrItE""))
  end
end
"
HumanEval_94,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵏⴰⴼ ⴰⵜⵉⴳ ⴰⵎⵣⵡⴰⵔⵓ ⴰⵅⴰⵜⴰⵔ ⴷ ⴰⴷ ⵏⵔⴰⵔ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ.ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ.# >>> skjkasdkd.call([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
# 10
# >>> skjkasdkd.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
# 25
# >>> skjkasdkd.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
# 13
# >>> skjkasdkd.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
# 11
# >>> skjkasdkd.call([0, 81, 12, 3, 1, 21])
# 3
# >>> skjkasdkd.call([0, 8, 1, 2, 1, 7])
# 7
def skjkasdkd(lst)
","def skjkasdkd(lst)
  require 'prime'

  # Find the largest prime number in the array
  largest_prime = lst.select { |num| Prime.prime?(num) }.max
  
  # Return 0 if no prime number is found
  return 0 if largest_prime.nil?

  # Calculate the sum of digits of the largest prime number
  largest_prime.to_s.chars.map(&:to_i).sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_skjkasdkd
    candidate = method(:skjkasdkd)
    assert_equal(10, candidate.call([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))
    assert_equal(25, candidate.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))
    assert_equal(13, candidate.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))
    assert_equal(11, candidate.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))
    assert_equal(3, candidate.call([0, 81, 12, 3, 1, 21]))
    assert_equal(7, candidate.call([0, 8, 1, 2, 1, 7]))
    assert_equal(19, candidate.call([8191]))
    assert_equal(19, candidate.call([8191, 123456, 127, 7]))
    assert_equal(10, candidate.call([127, 97, 8192]))
  end
end
"
HumanEval_95,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵜⵔⴰⵔ false ⵉⴳ ⵀⴰⵛⵉ ⵏⵏⴽ ⵉⵍⵍⴰ ⴱⵍⴰ. case ⵏⵖ ⴽⵓⵍⵍⵓ ⵜⵉⴼⵉⵏⴰⵖ ⴳⴰⵏ ⵜⵉⴼⵉⵏⴰⵖ ⴳ case, ⵎⴽⵍⵍⵉ ⵔⴰⴷ ⵏⵔⴰⵔ false.ⵉⴳ ⴷⴰⵔⴽ ⵓⵀⵛⵉ, ⵙⵙⵓⴼⵖ true ⵎⴽ ⵜⴳⴰ ⴽⵓⵍⵍⵓ ⵜⵉⵙⵍⵉⵜⵉⵏ ⵜⵉⵙⵉⴹⴼⴰⵏⵉⵏ ⴳ ⵍⵉⵙⵜⵔⴰⵔ # >>> check_dict_case.call({""a"" => ""apple"", ""b"" => ""banana""})
# true
# >>> check_dict_case.call({""a"" => ""apple"", ""A"" => ""banana"", ""B"" => ""banana""})
# false
# >>> check_dict_case.call({""a"" => ""apple"", 8 => ""banana"", ""a"" => ""apple""})
# false
# >>> check_dict_case.call({""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""})
# false
# >>> check_dict_case.call({""STATE"" => ""NC"", ""ZIP"" => ""12345""})
# true
def check_dict_case(dict)
","def check_dict_case(dict)
  return false if dict.empty?

  lowercase_keys = dict.keys.all? { |key| key.is_a?(String) && key == key.downcase }
  uppercase_keys = dict.keys.all? { |key| key.is_a?(String) && key == key.upcase }

  lowercase_keys || uppercase_keys
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_check_dict_case
    candidate = method(:check_dict_case)
    assert_equal(true, candidate.call({""p"" => ""pineapple"", ""b"" => ""banana""}))
    assert_equal(false, candidate.call({""p"" => ""pineapple"", ""A"" => ""banana"", ""B"" => ""banana""}))
    assert_equal(false, candidate.call({""p"" => ""pineapple"", ""5"" => ""banana"", ""a"" => ""apple""}))
    assert_equal(false, candidate.call({""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""}))
    assert_equal(true, candidate.call({""STATE"" => ""NC"", ""ZIP"" => ""12345""}))
    assert_equal(true, candidate.call({""fruit"" => ""Orange"", ""taste"" => ""Sweet""}))
    assert_equal(false, candidate.call({}))
  end
end
"
HumanEval_96,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵣⵡⵓⵔⴰ ⴷ ⵉⵎⵥⵥⵉⵏ ⵙⴳ n. ⵙⵙⴽⵔ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⵓⵔ ⵉⵔⵉⵏⵉ ⴷ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⵉⴹⵏ ⵉⵎⵣⵡⵓⵔⴰ n # >>> count_up_to.call(5)
# [2, 3]
# >>> count_up_to.call(11)
# [2, 3, 5, 7]
# >>> count_up_to.call(0)
# []
# >>> count_up_to.call(20)
# [2, 3, 5, 7, 11, 13, 17, 19]
# >>> count_up_to.call(1)
# []
# >>> count_up_to.call(18)
# [2, 3, 5, 7, 11, 13, 17]
def count_up_to(n)
","def count_up_to(n)
  return [] if n <= 2
  primes = []
  (2...n).each do |num|
    is_prime = true
    (2..Math.sqrt(num)).each do |i|
      if num % i == 0
        is_prime = false
        break
      end
    end
    primes << num if is_prime
  end
  primes
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_count_up_to
    candidate = method(:count_up_to)
    assert_equal([2, 3], candidate.call(5))
    assert_equal([2, 3, 5], candidate.call(6))
    assert_equal([2, 3, 5], candidate.call(7))
    assert_equal([2, 3, 5, 7], candidate.call(10))
    assert_equal([], candidate.call(0))
    assert_equal([2, 3, 5, 7, 11, 13, 17, 19], candidate.call(22))
    assert_equal([], candidate.call(1))
    assert_equal([2, 3, 5, 7, 11, 13, 17], candidate.call(18))
    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43], candidate.call(47))
    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], candidate.call(101))
  end
end
"
HumanEval_97,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵔⵥⵎ ⵉⵙ ⵉⴳⴰ ⵓⴽⵛⵛⵓⵎ ⴰⵀⴰ ⵉⴳⴰ ⵜ ⴰⵣⵔⴼⴰⵏ.ⴰⵙⵎⵓⵜⵜⴳ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⴰⴳⵣⵣⵓⵎⵜ ⵏⵏⵙⵏ.ⵙⵎⵓⵜⵜⴳ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵢⵓⵎⵥⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⴰⵔ ⵉⵜⵜⵔ # >>> multiply.call(148, 412)
# 16
# >>> multiply.call(19, 28)
# 72
# >>> multiply.call(2020, 1851)
# 0
# >>> multiply.call(14, -15)
# 20
def multiply(a, b)
","def multiply(a, b)
  a_unit_digit = a.abs % 10
  b_unit_digit = b.abs % 10
  a_unit_digit * b_unit_digit
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_multiply
    candidate = method(:multiply)
    assert_equal(16, candidate.call(148, 412))
    assert_equal(72, candidate.call(19, 28))
    assert_equal(0, candidate.call(2020, 1851))
    assert_equal(20, candidate.call(14, -15))
    assert_equal(42, candidate.call(76, 67))
    assert_equal(49, candidate.call(17, 27))
    assert_equal(0, candidate.call(0, 1))
    assert_equal(0, candidate.call(0, 0))
  end
end
"
HumanEval_98,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⵙ ⵜⴽⵍⵉⵜ ⵏ ⵓⵙⴽⴽⵉⵍ s, ⵙⵙⵉⴹⵏ ⵉⵎⵓⵙⵙⵓⵜⵏ ⵉⵎⵣⵡⵓⵔⴰ ⵏ ⵜⴳⵓⵔⵉ ⵙ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵎⵓⵟⵟⵓⵏⵏ. # >>> count_upper.call(""aBCdEf"")
# 1
# >>> count_upper.call(""abcdefg"")
# 0
# >>> count_upper.call(""dBBE"")
# 0
def count_upper(s)
","def count_upper(s)
  vowels = ['A', 'E', 'I', 'O', 'U']
  count = 0

  s.chars.each_with_index do |char, index|
    if index.even? && vowels.include?(char)
      count += 1
    end
  end

  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_count_upper
    candidate = method(:count_upper)
    assert_equal(1, candidate.call(""aBCdEf""))
    assert_equal(0, candidate.call(""abcdefg""))
    assert_equal(0, candidate.call(""dBBE""))
    assert_equal(0, candidate.call(""B""))
    assert_equal(1, candidate.call(""U""))
    assert_equal(0, candidate.call(""""))
    assert_equal(2, candidate.call(""EEEE""))
  end
end
"
HumanEval_99,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ ⵙⴳ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴷⵓⵏ-ⵜ ⵙⴳ ⵓⵎⵢⴰ.ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⴽⴽⵡ ⵉⵎⵉⵣⵉⵏ. ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⴰⴷ ⴰⵎⴹⴰⵏ ⵉⵎⵉⵣⴰⵏ ⵙⴽⵔ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵡⴰⵜⵉⴳ (ⵜⴰⵙⴷⴷⵉⵜ) ⵉⵙⵎⴷⵢⴰⵏ ⴰⵎⴹⴰⵏ # >>> closest_integer.call(""10"")
# 10
# >>> closest_integer.call(""15.3"")
# 15
# Note:
# Rounding away from zero means that if the given number is equidistant
# from two integers, the one you should return is the one that is the
# farthest from zero. For example closest_integer(""14.5"") should
# return 15 and closest_integer(""-14.5"") should return -15.
def closest_integer(value)
","def closest_integer(value)
  number = value.to_f
  if number > 0
    (number + 0.5).floor
  else
    (number - 0.5).ceil
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_closest_integer
    candidate = method(:closest_integer)
    assert_equal(10, candidate.call(""10""))
    assert_equal(15, candidate.call(""14.5""))
    assert_equal(-16, candidate.call(""-15.5""))
    assert_equal(15, candidate.call(""15.3""))
    assert_equal(0, candidate.call(""0""))
  end
end
"
HumanEval_100,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: i ⴷⴰ ⵉⵙⵎⴷⵢⴰ ⵓⵟⵟⵓⵏ ⵏ ⵉⵔⵖⴰⵏ ⴳ ⵓⵙⵡⵉⵔ (i+1).ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵓⵟⵟⵓⵏ ⵏ ⵉⵔⵖⴰⵏ ⴳ ⴽⵓ ⴰⵙⵡⵉⵔ ⴳ ⵢⴰⵏ ⵓⵙⵏⵙⵍ, ⴳ ⵉⵍⵍⴰ ⵓⵙⵏⵙⵍ ⴳ ⵓⴷⵍⵉⵙ - ⴰⵎⴹⴰⵏ ⴰⵎⵎⵓⴹⴰⵏ ⴰⵎⵣⵡⴰⵔⵓ ⵉⴳ n ⵉⴳⴰ ⴰⵎⵎⵓⴹⴰⵏ. - ⴰⵎⴹⴰⵏ ⴰⵎⵢⵉⵡⵏ ⴰⴹⵏⵉⵏ ⵎⴽ n ⵉⴳⴰ ⴰⵎⵢⵉⵡⵏ. ⴰⵎⴹⴰⵏ ⵏ ⵉⵔⵖⴰⵏ ⴳ ⵓⵙⵡⵉⵔ ⵢⴰⴹⵏ ⵉⴳⴰ ⵜ: ⴰⵙⵡⵉⵔ ⴰⵎⵣⵡⴰⵔⵓ ⴷⴰⵔⵙ n ⵉⵔⵖⴰⵏ.ⵉⴳ ⴷⴰⵔⴽ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⴰⵔⵡⵍⴷ ⵢⴰⵜ ⵜⵔⴱⴰⵜ ⵏ n ⵉⵙⵡⵉⵔⵏ ⵏ ⵉⵔⵖⴰⵏ.# >>> make_a_pile.call(3)
# [3, 5, 7]
def make_a_pile(n)
","def make_a_pile(n)
  result = []
  current_stones = n
  n.times do
    result << current_stones
    current_stones += 2
  end
  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_make_a_pile
    candidate = method(:make_a_pile)
    assert_equal([3, 5, 7], candidate.call(3))
    assert_equal([4, 6, 8, 10], candidate.call(4))
    assert_equal([5, 7, 9, 11, 13], candidate.call(5))
    assert_equal([6, 8, 10, 12, 14, 16], candidate.call(6))
    assert_equal([8, 10, 12, 14, 16, 18, 20, 22], candidate.call(8))
  end
end
"
HumanEval_101,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⴰⴷ ⵜⴱⴹⵉⴷ ⵜⵉⴼⵉⵏⴰⵖ ⵖⴼ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴷ ⴰⴷ ⵜⵙⴽⵔⴷ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ.ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵔⴰ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵉⴱⴹⴰⵏ ⵙ ⵜⴱⵔⵣⴰ ⵏⵖⴷ ⵉⵎⵏⵥⵉ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ # >>> words_string.call(""Hi, my name is John"")
# [""Hi"", ""my"", ""name"", ""is"", ""John""]
# >>> words_string.call(""One, two, three, four, five, six"")
# [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
def words_string(s)
","def words_string(s)
  s.split(/[\s,]+/)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_words_string
    candidate = method(:words_string)
    assert_equal([""Hi"", ""my"", ""name"", ""is"", ""John""], candidate.call(""Hi, my name is John""))
    assert_equal([""One"", ""two"", ""three"", ""four"", ""five"", ""six""], candidate.call(""One, two, three, four, five, six""))
    assert_equal([""Hi"", ""my"", ""name""], candidate.call(""Hi, my name""))
    assert_equal([""One"", ""two"", ""three"", ""four"", ""five"", ""six""], candidate.call(""One,, two, three, four, five, six,""))
    assert_equal([], candidate.call(""""))
    assert_equal([""ahmed"", ""gamal""], candidate.call(""ahmed     , gamal""))
  end
end
"
HumanEval_102,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⵓⵔ ⵉⵍⵍⵉ ⵡⵓⵟⵟⵓⵏ ⴰⴷ, ⵔⴰⴷ ⵜⵔⴰⵔ ⵜⴰⵡⵓⵔⵉ -1.ⴰⵎⴹⴰⵏ ⴰⵎⵇⵇⵔⴰⵏ ⴰⵎⴷⴷⴰⴽⴽⵍ ⴳ ⵓⵙⵏⴼⵍ [x, y] ⴳ ⵉⵍⵍⴰ.ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⴷⴰ ⵜⴻⵜⵜⵓⵎ ⵙⵉⵏ ⵉⵎⴹⴰⵏⵏ ⵉⵊⴷⵉⴷⵏ x ⴷ y ⴰⵔ ⵜⵙⵙⴽⵛⵎ # >>> choose_num.call(12, 15)
# 14
# >>> choose_num.call(13, 12)
# -1
def choose_num(x, y)
","def choose_num(x, y)
  return -1 if x > y
  # Start looking from the largest number
  max_even = y.even? ? y : y - 1
  # Iterate downwards to find the biggest even number
  max_even.downto(x) do |n|
    return n if n.even?
  end
  -1
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_choose_num
    candidate = method(:choose_num)
    assert_equal(14, candidate.call(12, 15))
    assert_equal(-1, candidate.call(13, 12))
    assert_equal(12354, candidate.call(33, 12354))
    assert_equal(-1, candidate.call(5234, 5233))
    assert_equal(28, candidate.call(6, 29))
    assert_equal(-1, candidate.call(27, 10))
    assert_equal(-1, candidate.call(7, 7))
    assert_equal(546, candidate.call(546, 546))
  end
end
"
HumanEval_103,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: ⵎⴽ n ⵢⵓⴳⵔⵏ m, ⵔⵎⵙⵏ -1.ⵙⵙⵎⵓⵏ ⵜⴰⵔⴰⵔⵓⵜ ⵙ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⴽⴽⵡ ⵉⵎⵇⵇⵓⵔⵏ ⴷ ⵙⵙⴼⵍⴷ ⵙ ⵜⴱⵉⵏⴰⵔⵉⵜ.ⴰⵎⵎⴰⵙⵙ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵙⴳ n ⴰⵔ m (ⴰⵎⵎ n ⴷ m).ⵏⵜⵜⴰⴼⴰ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏ ⴷ ⵎ, ⴷ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵉⴹⵏ # >>> rounded_avg.call(1, 5)
# ""0b11""
# >>> rounded_avg.call(7, 5)
# -1
# >>> rounded_avg.call(10, 20)
# ""0b1111""
# >>> rounded_avg.call(20, 33)
# ""0b11010""
def rounded_avg(n, m)
","def rounded_avg(n, m)
  return -1 if n > m

  sum = (n..m).reduce(:+)
  count = m - n + 1
  average = (sum.to_f / count).round
  ""0b"" + average.to_i.to_s(2)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_rounded_avg
    candidate = method(:rounded_avg)
    assert_equal(""0b11"", candidate.call(1, 5))
    assert_equal(""0b1010"", candidate.call(7, 13))
    assert_equal(""0b1111001010"", candidate.call(964, 977))
    assert_equal(""0b1111100100"", candidate.call(996, 997))
    assert_equal(""0b1011000010"", candidate.call(560, 851))
    assert_equal(""0b101101110"", candidate.call(185, 546))
    assert_equal(""0b110101101"", candidate.call(362, 496))
    assert_equal(""0b1001110010"", candidate.call(350, 902))
    assert_equal(""0b11010111"", candidate.call(197, 233))
    assert_equal(-1, candidate.call(7, 5))
    assert_equal(-1, candidate.call(5, 1))
    assert_equal(""0b101"", candidate.call(5, 5))
  end
end
"
HumanEval_104,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⵜⴰⵖⴹⴼⵜ: ⵉⵇⵇⴰⵏ ⴰⴷ ⵏⵙⵎⵓⵏ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵉⵜⵜⵓⵢⴰⴽⴽⴰⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵔⵏⵉⵡ.ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⵓⵔ ⵉⵍⵍⵉ ⴽⵔⴰ ⵏ ⵓⵟⵟⵓⵏ ⴰⵡⴷ ⵢⴰⵏ.ⴳ ⵓⵙⴰⵜⵉ ⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵏⵖⵓⴷⵏ x, ⵔⴰⴷ ⵏⵔⴰⵔ ⵜⴰⵡⵍⴰⴼⵜ ⵏ # >>> unique_digits.call([15, 33, 1422, 1])
# [1, 15, 33]
# >>> unique_digits.call([152, 323, 1422, 10])
# []
def unique_digits(x)
","def unique_digits(x)
  x.select { |num| num.to_s.chars.none? { |digit| digit.to_i.even? } }.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_unique_digits
    candidate = method(:unique_digits)
    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))
    assert_equal([], candidate.call([152, 323, 1422, 10]))
    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))
    assert_equal([31, 135], candidate.call([135, 103, 31]))
  end
end
"
HumanEval_105,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ""ⵢⵉⵡⵏ"", "" ⵙⵉⵏ"", "" ⴽⵕⴰⴹ"", "" ⴽⴽⵓⵥ"", "" ⵙⵎⵎⵓⵙ"", "" ⵙⴹⵉⵙ"", "" ⵙⴰ"", "" ⵜⴰⵎ"", "" ⵜⵥⴰ"". ⵔⴰⴷ ⵏⵙⵙⵏⴼⵍ ⴰⵙⵏⴼⴰⵔ ⵏ ⵓⵙⵏⴼⴰⵔ, ⴷ ⵔⴰⴷ ⵏⵙⵎⵓⵜⵜⴳ ⴽⵓ ⵓⵟⵟⵓⵏ ⵙ ⵢⵉⵙⵎ ⵏⵏⵙ ⵙⴳ ⴳ ⵓⵙⴰⵜⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴷⵙ ⵉⵎⴹⴰⵏⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳⵔ 1 ⴷ 9 ⴳ ⵜⴰⵎⵎ ⵏⵙⵏ, # >>> by_length.call([2, 1, 1, 4, 5, 8, 2, 3])
# [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
# If the array is empty, return an empty array:
# >>> by_length.call([])
# []
# If the array has any strange number ignore it:
# >>> by_length.call([1, -1, 55])
# [""One""]
def by_length(arr)
","def by_length(arr)
  number_names = {
    1 => ""One"",
    2 => ""Two"",
    3 => ""Three"",
    4 => ""Four"",
    5 => ""Five"",
    6 => ""Six"",
    7 => ""Seven"",
    8 => ""Eight"",
    9 => ""Nine""
  }

  filtered_sorted_reversed = arr.select { |x| x.between?(1, 9) }.sort.reverse
  filtered_sorted_reversed.map { |num| number_names[num] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_by_length
    candidate = method(:by_length)
    assert_equal([""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], candidate.call([2, 1, 1, 4, 5, 8, 2, 3]))
    assert_equal([], candidate.call([]))
    assert_equal([""One""], candidate.call([1, -1, 55]))
    assert_equal([""Three"", ""Two"", ""One""], candidate.call([1, -1, 3, 2]))
    assert_equal([""Nine"", ""Eight"", ""Four""], candidate.call([9, 4, 8]))
  end
end
"
HumanEval_106,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: ⵉⴳⴰ ⵓⴼⴰⴽⵜⵓⵔⵢⴰⵍ ⵏ i ⴰⵙⴼⵓⴽⵍⵓ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵙⴳ 1 ⴰⵔ i (1 * 2 * ... * i).ⵔⴰⴷ ⵔⵎⵙⵖ ⵙⴳ 1.ⵏⵖ ⴷ ⵓⴳⵣⵓⵎ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵙⴳ 1 ⴰⵔ i. ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵡⵓⵟⵟⵓⵏ n, ⵣⵓⵏⴷ ⴰⵜⵉⴳ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵓⵙⵏⵎⵍ i ⵉⴳⴰ ⵜ ⵓⴼⴰⵔⵙ ⵏ i ⵎⴽ ⵉⴳⴰ i ⴰⵎⵎ ⵙⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ f ⵏⵏⴰ ⵢⵓⵎⵥⵏ n ⴰⵎⵎ ⵓⵎⵙⴽⴰⵔ, # >>> f.call(5)
# [1, 2, 6, 24, 15]
def f(n)
","def f(n)
  (1..n).map do |i|
    if i.even?
      (1..i).inject(:*) || 1
    else
      (1..i).inject(:+)
    end
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_f
    candidate = method(:f)
    assert_equal([1, 2, 6, 24, 15], candidate.call(5))
    assert_equal([1, 2, 6, 24, 15, 720, 28], candidate.call(7))
    assert_equal([1], candidate.call(1))
    assert_equal([1, 2, 6], candidate.call(3))
  end
end
"
HumanEval_107,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ 1: ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵏⴰ ⴳ ⴳⴰⵏ ⴳ ⵓⵎⵏⵉⴷ ((1, n), ⵙⵍⴰⵡⴰⵏ ⴰⴽⴽⵡ. ⴳ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵙⵙⵓⴼⵖ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵓⵟⵟⵓⵏ ⵏ ⵉⵎⵉⴹⵏ ⵉⵎⵎⵔⵉⵏⵏ ⴷ ⵉⵎⵣⴰⵔⴰⵢⵏⵏ # >>> even_odd_palindrome.call(3)
# [1, 2]
# Explanation:
# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
# Example 2:
# >>> even_odd_palindrome.call(12)
# [4, 6]
# Explanation:
# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
# Note:
# 1. 1 <= n <= 10^3
# 2. returned array has the number of even and odd integer palindromes respectively.
def even_odd_palindrome(n)
","def even_odd_palindrome(n)
  even_count = 0
  odd_count = 0

  (1..n).each do |num|
    if num.to_s == num.to_s.reverse
      if num.even?
        even_count += 1
      else
        odd_count += 1
      end
    end
  end

  [even_count, odd_count]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_even_odd_palindrome
    candidate = method(:even_odd_palindrome)
    assert_equal([8, 13], candidate.call(123))
    assert_equal([4, 6], candidate.call(12))
    assert_equal([1, 2], candidate.call(3))
    assert_equal([6, 8], candidate.call(63))
    assert_equal([5, 6], candidate.call(25))
    assert_equal([4, 6], candidate.call(19))
    assert_equal([4, 5], candidate.call(9))
    assert_equal([0, 1], candidate.call(1))
  end
end
"
HumanEval_108,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ -123 ⵖⵓⵔⵙ ⵉⵎⵉⴹⵏ ⵉⵎⵓⵙⵙⵓⵜⵏ -1, 2, ⴷ 3. ⵎⴽ ⵉⴳⴰ ⵓⵟⵟⵓⵏ ⴰⵎⵓⵔⴰⵏ, ⵔⴰⴷ ⵉⴳ ⵓⵟⵟⵓⵏ ⴰⵎⵣⵡⴰⵔⵓ ⵏⵏⵙ ⴰⵎⵓⵔⴰⵏ ⴰⵎⵓⵔⴰⵏ:ⴰⵎⴹⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵓⵎⴹⴰⵏ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵏⵏⵙⵏ > 0. ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ count_nums ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⴰⵔ ⵉⵜⵜⴰⴽⴰ # >>> count_nums.call([])
# 0
# >>> count_nums.call([-1, 11, -11])
# 1
# >>> count_nums.call([1, 1, 2])
# 3
def count_nums(arr)
","def count_nums(arr)
  arr.count do |num|
    num.to_s.chars.map(&:to_i).sum > 0
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_count_nums
    candidate = method(:count_nums)
    assert_equal(0, candidate.call([]))
    assert_equal(0, candidate.call([-1, -2, 0]))
    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))
    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))
    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))
    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))
    assert_equal(1, candidate.call([0, 1]))
    assert_equal(1, candidate.call([1]))
  end
end
"
HumanEval_109,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⵜⴰⵖⴹⴼⵜ: ⴰⵙⵔⴷⴰⵙ ⵉⵜⵜⵓⵙⵏⵎⴰⵍⴰⵏ ⵖⵓⵔⵙ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵢⵉⵡⴰⵏⵏ.ⵎⴽ ⵜⴳⴰ ⵜⵔⴰⴱⴱⵓⵜ ⵉⵜⵜⵓⴼⴽⴰⵏ ⵜⵓⵏⵏⵓⵏⵜ, ⵔⴰⴷ ⵏⵔⴰⵔ true.ⵔⴰⴷ ⵜⵔⵉⵜ true ⵏⵖ return false.ⵉⵖ ⵜⵣⵎⵔⵎ ⴰⴷ ⵜⴰⵡⵉⵖ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙ ⵜⵎⵙⴽⵔⵜ ⵏ ⴰⴼⵍⵍⴰ ⴰⴷⵖⴰⵔ ⵏ ⵓⵣⵡⵓ ⴳ ⵓⵎⵙⴳⵔⴰⵡ, ⴷ ⵡⵉⵙ 0 ⴳ ⵓⴷⵍⵉⵙ.ⴰⴷⵖⴰⵔ ⴳ ⵓⴱⵔⵉⴷ ⵏ ⵓⵣⵔⴼ. ⵔⴰⴷ ⵉⵜⵜⵓⵙⵎⵓⵜⵜⵓ ⵓⵏⴰⵡ ⴰⵎⴳⴳⴰⵔⵓ ⵏ ⵓⵙⵏⵙⵉ ⵙ ⵢⴰⵜ ⵜⵎⵀⵍⴰ ⵏ ⵓⵙⵏⴼⵍ ⵙ ⵓⵣⵔⴼ ⵜⵔⵏⴰ ⵜⵙⵙⵏⴼⵍ ⴽⵓⵍⵍⵓ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵓⵙⵏⴼⵍ ⵙ ⵢⴰⵏ.ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⴽⵔⴷ ⵜⵉⵡⵓⵔⵉⵡⵉⵏ ⵏ ⵓⵙⵏⴼⵍ ⵙ ⵓⵣⵔⴼ ⴽⵉⴳⴰⵏ ⵏ ⵜⵉⴽⴽⴰⵍ.ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵅⴼ ⵓⵎⵙⴳⵔⴰⵡ ⴰⴷ: ⵉⵖⵢ ⴰⴷ ⵏⵙⵎⵙⴰⵙⴰ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵙ ⵓⵍⵓⴳ ⵓⵔ ⵢⴰⴽⴽⵉⵏ ⴰⵙⵏⴼⵍ ⵙ ⵓⵙⴽⴰⵔ ⵏ:ⵔⴰⴷ ⵜⵜⵓⵙⵏⵎⴰⵍⴰⵏ ⵡⵓⵟⵟⵓⵏ ⴳ ⵓⵙⵏⵙⵉ ⵙ ⵜⴱⵔⵉⴷⵜ ⵏ ⵓⵙⴽⵙⵍ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵏⵎ ⵎⴰ ⵔⴰⴷ ⵖⴰⵔⵉⵖ ⵢⴰⵏ ⵓⵙⵏⵙⵉ 'arr' ⵏ N ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ arr[1], arr[2], ..., arr[N].# >>> move_one_ball.call([3, 4, 5, 1, 2])
# true
# Explanation: By performin 2 right shift operations, non-decreasing order can
# be achieved for the given array.
# >>> move_one_ball.call([3, 5, 4, 1, 2])
# false
# Explanation:It is not possible to get non-decreasing order for the given
# array by performing any number of right shift operations.
def move_one_ball(arr)
","def move_one_ball(arr)
  return true if arr.empty?

  n = arr.size
  count_rotation_point = 0
  rotation_index = -1

  (0...n).each do |i|
    next_index = (i + 1) % n
    if arr[i] > arr[next_index]
      count_rotation_point += 1
      rotation_index = next_index
    end
  end

  count_rotation_point <= 1
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_move_one_ball
    candidate = method(:move_one_ball)
    assert_equal(true, candidate.call([3, 4, 5, 1, 2]))
    assert_equal(true, candidate.call([3, 5, 10, 1, 2]))
    assert_equal(false, candidate.call([4, 3, 1, 2]))
    assert_equal(false, candidate.call([3, 5, 4, 1, 2]))
    assert_equal(true, candidate.call([]))
  end
end
"
HumanEval_110,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⵎⴽ ⵓⵔ ⵜⵍⵍⵉ, ⵔⵣⴼ ""ⵓⵀⵓ"".ⵎⴰⵕⵕⴰ ⵉⴼⵔⴷⵉⵙⵏ ⵏ lst1 ⴰⴷ ⴳⵉⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ, ⵔⴰⵔⴰⵏ ""YES"".ⵉⵖ ⵜⵣⵎⵔⵎ ⴰⴷ ⵜⵙⵎⵓⵜⵜⵉⴷ ⵉⴼⵔⴷⵉⵙⵏ ⴳⵔ lst1 ⴷ lst2 ⵃⵎⴰ ⴰⴷ ⵜⵙⵙⴽⵔⵎ ⵓⵔ ⵉⵍⵍⵉ ⵓⵡⵜⵜⵓ ⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵜⵜⵓⵙⵏⴼⴰⵍⵏ ⴳⵔ lst1 ⴷ lst2.ⵔⴰⴷ ⵏⴰⵔⵉ ⵜⵉⴼⵉⵏⴰⵖ ⵀⴰⵜ ⴰⴷ ⵏⴰⵔⵉ ⵉⵎⴹⴰⵏⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ ⴰⵔ ⵉⵜⵜⵉⵔⵉ ⴰⴷ ⵉⵙⴽⵔ ⵓⵙⵏⴼⵍ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵜⵎⵓⴽⵔⵉⵙⵜ ⴰⴷ, ⵔⴰⴷ ⵜⵙⵙⴽⵔⵎ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵢⵓⵎⵥⵏ ⵙⵏⴰⵜ ⵏ ⵜⵔⴱⴰⵜⵉⵏ ⵏ ⵉⵎⴹⴰⵏⵏ, # >>> exchange.call([1, 2, 3, 4], [1, 2, 3, 4])
# ""YES""
# >>> exchange.call([1, 2, 3, 4], [1, 5, 3, 4])
# ""NO""
# It is assumed that the input arrays will be non-empty.
def exchange(lst1, lst2)
","def exchange(lst1, lst2)
  # Check if lst1 already consists solely of even numbers
  return ""YES"" if lst1.all?(&:even?)

  # Check if there are at least as many even numbers in lst2
  # as there are odd numbers in lst1
  odd_count_lst1 = lst1.count(&:odd?)
  even_count_lst2 = lst2.count(&:even?)

  odd_count_lst1 <= even_count_lst2 ? ""YES"" : ""NO""
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_exchange
    candidate = method(:exchange)
    assert_equal(""YES"", candidate.call([1, 2, 3, 4], [1, 2, 3, 4]))
    assert_equal(""NO"", candidate.call([1, 2, 3, 4], [1, 5, 3, 4]))
    assert_equal(""YES"", candidate.call([1, 2, 3, 4], [2, 1, 4, 3]))
    assert_equal(""YES"", candidate.call([5, 7, 3], [2, 6, 4]))
    assert_equal(""NO"", candidate.call([5, 7, 3], [2, 6, 3]))
    assert_equal(""NO"", candidate.call([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]))
    assert_equal(""YES"", candidate.call([100, 200], [200, 200]))
  end
end
"
HumanEval_111,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: ⵎⴽ ⵍⵍⴰⵏ ⴽⵉⴳⴰⵏ ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⵖⵓⵔⵙⵏ ⵢⴰⵏ ⵡⴰⴷⴷⴰⴷ, ⵙⵙⵓⴼⵖ-ⴰⵙ ⴰⴽⴽⵡ.ⵏ ⵜⴱⵔⴰⵜ ⵏⵏⴰ ⴳ ⵢⵓⴳⴳⴰⵔ ⵓⵙⴽⴽⵉⵍ ⴷ ⵉⵍⵍⴰ ⴳⵉⵙ ⵓⵟⵟⵓⵏ ⵏ ⵜⴱⵔⴰⵜⵉⵏ ⵏⵏⴰ ⴷ ⵢⵓⴳⴳⴰⵔ.ⵎⴽ ⵜⵍⵍⴰ ⵢⴰⵜ ⵜⵊⵓⵎⵎⴰ ⵉⵙⵎⴷⵢⴰⵏ ⵜⵉⵔⵔⴰ ⵜⵉⵎⵥⵢⴰⵏⵉⵏ ⵉⵜⵜⵢⴰⵡⴱⴹⴰⵏ ⵙ ⵓⵙⴰⵢⵔⴰⵔ, ⵙⵙⵓⴼⵖ ⵢⴰⵏ ⵀⴰⵛⵉ.# >>> histogram.call(""a b c"")
# {""a"" => 1, ""b"" => 1, ""c"" => 1}
# >>> histogram.call(""a b b a"")
# {""a"" => 2, ""b"" => 2}
# >>> histogram.call(""a b c a b"")
# {""a"" => 2, ""b"" => 2}
# >>> histogram.call(""b b b b a"")
# {""b"" => 4}
# >>> histogram.call("""")
# {}
def histogram(test)
","def histogram(test)
  return {} if test.empty?

  count = Hash.new(0)

  test.split.each do |char|
    count[char] += 1
  end

  max_count = count.values.max
  count.select { |_, value| value == max_count }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_histogram
    candidate = method(:histogram)
    assert_equal({""a"" => 2, ""b"" => 2}, candidate.call(""a b b a""))
    assert_equal({""a"" => 2, ""b"" => 2}, candidate.call(""a b c a b""))
    assert_equal({""a"" => 1, ""b"" => 1, ""c"" => 1, ""d"" => 1, ""g"" => 1}, candidate.call(""a b c d g""))
    assert_equal({""r"" => 1, ""t"" => 1, ""g"" => 1}, candidate.call(""r t g""))
    assert_equal({""b"" => 4}, candidate.call(""b b b b a""))
    assert_equal({""r"" => 1, ""t"" => 1, ""g"" => 1}, candidate.call(""r t g""))
    assert_equal({}, candidate.call(""""))
    assert_equal({""a"" => 1}, candidate.call(""a""))
  end
end
"
HumanEval_112,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵙⵎⵓⵜⵜⵉⴷ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⵢⴰⴼⵓⵜ ⴷ true/false ⵉ ⵓⵣⵣⵔⴰⵢ.ⴷⴰ ⵜⵜⵉⵏⵉⵏ ⵉ ⵢⴰⵏ ⵓⵖⵉⵍⵓⴼ ⴱⴰⵍⵉⵏⴷⵔⵓⵎ ⵎⴽ ⴷⴰ ⵢⴰⵙⵙⵏ ⵙ ⵓⵎⵣⴳⵓⵏ ⴰⵎ ⵡⴰⵏⵏⴰ ⵢⴰⵙⵙⵏ ⵙ ⵓⵎⵣⴳⵓⵏ.ⴹⴰⵕⵜ ⵓⵢⴰ, ⵥⵕⵖ ⵉⵙ ⵜⴳⴰ ⵜⵊⵎⵉⵍⵜ ⵏ ⵜⵢⴰⴼⵓⵜ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉⵜ.ⵏⵜⵜⴰⴼⴰ ⵙⵏⴰⵜ ⵜⵓⵙⴷⵉⴷⵉⵏ s ⴷ c, ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵏⵙⵙⴽⵙⵓ ⴽⵓⵍⵍⵓ ⵉⵙⴽⴽⵉⵍⵏ ⴳ s ⵏⵏⴰ ⵉⴳⴰⵏ ⵉⵎⵙⴰⵙⴰⵏ ⴷ ⴽⵓⵍⵍⵓ ⵉⵙⴽⴽⵉⵍⵏ ⴳ c ⵜⴰⵡⵓⵔⵉ # >>> reverse_delete.call(""abcde"", ""ae"")
# [""bcd"", false]
# >>> reverse_delete.call(""abcdef"", ""b"")
# [""acdef"", false]
# >>> reverse_delete.call(""abcdedcba"", ""ab"")
# [""cdedc"", true]
def reverse_delete(s, c)
","def reverse_delete(s, c)
  # Remove all characters in c from s
  filtered_string = s.delete(c)
  
  # Check if the filtered string is a palindrome
  is_palindrome = filtered_string == filtered_string.reverse
  
  # Return the result array
  [filtered_string, is_palindrome]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_reverse_delete
    candidate = method(:reverse_delete)
    assert_equal([""bcd"", false], candidate.call(""abcde"", ""ae""))
    assert_equal([""acdef"", false], candidate.call(""abcdef"", ""b""))
    assert_equal([""cdedc"", true], candidate.call(""abcdedcba"", ""ab""))
    assert_equal([""dik"", false], candidate.call(""dwik"", ""w""))
    assert_equal(["""", true], candidate.call(""a"", ""a""))
    assert_equal([""abcdedcba"", true], candidate.call(""abcdedcba"", """"))
    assert_equal([""abcdedcba"", true], candidate.call(""abcdedcba"", ""v""))
    assert_equal([""abba"", true], candidate.call(""vabba"", ""v""))
    assert_equal(["""", true], candidate.call(""mamma"", ""mia""))
  end
end
"
HumanEval_113,tzm_Tfng,rb,"ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵜⵔⴳⴰⵍⵜ ⵜⵉⵙⵙ i ⵏ ⵓⵙⴽⵛⵎ.ⴰⵖⵉⵍ ⵏ ⵓⵙⴽⴽⵉⵍ i ⵏ ⵓⵙⴽⴽⵉⵍ ⵏ ⵓⵙⴽⵛⵎ. "" ⴳ ⵓⵢⵏⵏⴰ ⴳ ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵜⵓⵙⵏⴼⴰⵍⵏ ⴽⵓⵍⵍⵓ ⵉⵎⵉⴹⴰⵏⵏ i ⵙ ⵓⵟⵟⵓⵏ ⴽⵓ ⵉⴼⵔⴷⵉⵙ i ⵏ ⵜⵏⴰⴼⵓⵜ ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴳ ""ⵉⴹ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⴳ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⵉⴼⵉⵏⴰⵖ, ⴳ ⴽⵓ ⵜⵉⴼⵉⵏⴰⵖ ⵉⵍⵍⴰ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ, ⵙⵙⵓⴼⵖ ⵜⴰⵡⴰⵍⵜ ⵏ ⵜⵉⴼⵉⵏⴰⵖ.# >>> odd_count.call([""1234567""])
# [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
# >>> odd_count.call([""3"", ""11111111""])
# [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
def odd_count(lst)
","def odd_count(lst)
  lst.map do |num_str|
    count = num_str.count('13579')
    ""the number of odd elements #{count}n the str#{count}ng #{count} of the #{count}nput.""
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_odd_count
    candidate = method(:odd_count)
    assert_equal([""the number of odd elements 4n the str4ng 4 of the 4nput.""], candidate.call([""1234567""]))
    assert_equal([""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], candidate.call([""3"", ""11111111""]))
    assert_equal([""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""], candidate.call([""271"", ""137"", ""314""]))
  end
end
"
HumanEval_114,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ ⵏ ⵉⵎⴹⴰⵏⵏ.ⴳ ⵓⵙⴰⵜⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⵜⵔ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵜⴰⴷⵔⵓⵙⵜ ⵏ ⴽⵓ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵜⴰⴷⵔⵓⵙⵜ # >>> minSubArraySum.call([2, 3, 4, 1, 2, 4])
# 1
# >>> minSubArraySum.call([-1, -2, -3])
# -6
def minSubArraySum(nums)
","def minSubArraySum(nums)
  min_sum = nums[0]
  current_sum = 0
  nums.each do |num|
    if current_sum > 0
      current_sum = num
    else
      current_sum += num
    end
    min_sum = [min_sum, current_sum].min
  end
  min_sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_minSubArraySum
    candidate = method(:minSubArraySum)
    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))
    assert_equal(-6, candidate.call([-1, -2, -3]))
    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))
    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))
    assert_equal(0, candidate.call([0, 10, 20, 1000000]))
    assert_equal(-6, candidate.call([-1, -2, -3, 10, -5]))
    assert_equal(-6, candidate.call([100, -1, -2, -3, 10, -5]))
    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))
    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))
    assert_equal(-10, candidate.call([-10]))
    assert_equal(7, candidate.call([7]))
    assert_equal(-1, candidate.call([1, -1]))
  end
end
"
HumanEval_115,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ 1: ⵙⵙⵓⴼⵖ ⴰⵎⴹⴰⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⵜⵔⴰⵎ ⴰⴷ ⵜⵙⵙⴷⵉⴷⵎ ⵉⴽⵛⵛⵓⵎⵏ.ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵎⵔⵙⴷ ⵉⴽⵛⵛⵓⵎⵏ ⴰⴷ ⵥⵕⵖ ⵜⵉⵖⵔⵎⵉⵏ.ⴷ ⴽⵓⵍⵍⵓ ⵉⴽⵛⵛⵓⵎⵏ ⵖⵓⵔⵙⵏ ⵜⴰⵣⵎⵔⵜ ⵢⴰⵜⵜⵓⵢⵏ.ⴽⵓ ⵜⵓⵏⵙ ⵖⵓⵔⵙ ⵢⴰⵏ ⵍⴱⵉⴽⴰⵜ ⵏⵏⴰ ⵉⵣⴷⵉⵏ ⵏⵏⴰ ⵉⵖⵢ ⴰⴷ ⵉⵜⵜⵓⵙⵎⵔⴰⵙ ⴳ ⵓⵙⵎⵓⵜⵜⴳ ⵏ ⵡⴰⵎⴰⵏ ⵙⴳ ⵜⵓⵏⵙ, ⴷ ⴽⵓ 1 ⴳ ⵢⴰⵏ ⵓⵡⵔⵉⴽ ⵉⵙⵎⴷⵢⴰⵏ ⵢⴰⵜ ⵜⴰⵢⵎⵓⵏⵜ ⵏ ⵡⴰⵎⴰⵏ.ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵛⵛⵓⵎⵏ ⵏ ⵜⵔⴳⴰ ⵜⴰⵣⴳⵣⴰⵡⵜ. ⴽⵓ ⵜⴰⵡⵔⵉⵔⵜ ⴷⴰ ⵜⵙⵎⴷⵢⴰⵏ ⵢⴰⵏ ⵓⴳⴰⴷⵉⵔ, # >>> max_fill.call([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)
# 6
# Example 2:
# >>> max_fill.call([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)
# 5
# Example 3:
# >>> max_fill.call([[0, 0, 0], [0, 0, 0]], 5)
# 0
# Constraints:
# * all wells have the same length
# * 1 <= grid.length <= 10^2
# * 1 <= grid[:,1].length <= 10^2
# * grid[i][j] -> 0 | 1
# * 1 <= capacity <= 10
def max_fill(grid, capacity)
","def max_fill(grid, capacity)
  total_water_units = grid.flatten.sum
  (total_water_units.to_f / capacity).ceil
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_max_fill
    candidate = method(:max_fill)
    assert_equal(6, candidate.call([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1))
    assert_equal(5, candidate.call([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2))
    assert_equal(0, candidate.call([[0, 0, 0], [0, 0, 0]], 5))
    assert_equal(4, candidate.call([[1, 1, 1, 1], [1, 1, 1, 1]], 2))
    assert_equal(2, candidate.call([[1, 1, 1, 1], [1, 1, 1, 1]], 9))
  end
end
"
HumanEval_116,tzm_Tfng,rb,"ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵜⵓⵙⴽⴰⵔ ⵣⵓⵏⴷ ⴰⴷ: ⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⵢⴰⴳⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ, ⵙⵙⵓⴷⵙ ⵅⴼ ⵡⴰⵜⵉⴳ ⴰⵎⵔⴰⵡ.ⴹⴼⵕⵏ ⴰⵙⵏⵎⵍ ⵏ ⵉⵎⵉⴹⴰⵏⵏ ⴳ ⵓⵙⵎⴷⵢⴰ ⵏⵏⵙⵏ ⴰⵎⵉⵏⴰⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵇⵔⴰⵏ.ⴳ ⴽⴰⵜⴰ ⴰⴷ, ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵙⵙⵓⴷⵙⴷ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⵔⵉⵏ # >>> sort_array.call([1, 5, 2, 3, 4])
# [1, 2, 3, 4, 5]
# >>> sort_array.call([-2, -3, -4, -5, -6])
# [-6, -5, -4, -3, -2]
# >>> sort_array.call([1, 0, 2, 3, 4])
# [0, 1, 2, 3, 4]
def sort_array(arr)
","def sort_array(arr)
  arr.sort_by { |n| [n.to_s(2).count('1'), n] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_array
    candidate = method(:sort_array)
    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))
    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))
    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))
    assert_equal([], candidate.call([]))
    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))
    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))
    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))
    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))
  end
end
"
HumanEval_117,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵜⴰⵖⴹⴼⵜ: ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⴷ ⵉⵙ ⴳⴰⵏ ⵉⵙⴽⴽⵉⵍⵏ ⴷ ⵡⴰⵏⵙⴰ ⴳ ⵜⵣⵎⵔⵜ ⵏ ⵓⵙⴽⵛⵎ.ⵎⴽ ⵜⴳⴰ ⵜⵉⴼⵉⵏⴰⵖ s ⵜⴰⵍⵍⵉⵜ, ⵔⴰⴷ ⵜⵔⴰⵔ ⵜⴰⵡⵓⵔⵉ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵉⵍⵍⵓⵍⵏ.n ⵉⵎⵙⵍⵉ, ⵙ ⵓⵍⵖⵓ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴰⴷ ⴳ ⵜⵣⵍⵉⵜ s. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴰⴽⴽⵡ ⵙⴳ ⵜⵉⴼⵉⵏⴰⵖ s ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⴹⴼⴰⵕⵖ ⵢⴰⵏ ⵓⵖⵉⵍⵓⴼ s ⴷ ⵢⴰⵏ ⵓⵟⵟⵓⵏ ⴰⴳⴰⵎⴰⵏ n, ⵔⴰⴷ ⴽⴽⵖ ⴰⴷ ⵜⵙⵙⴽⵔⴷ # >>> select_words.call(""Mary had a little lamb"", 4)
# [""little""]
# >>> select_words.call(""Mary had a little lamb"", 3)
# [""Mary"", ""lamb""]
# >>> select_words.call(""simple white space"", 2)
# []
# >>> select_words.call(""Hello world"", 4)
# [""world""]
# >>> select_words.call(""Uncle sam"", 3)
# [""Uncle""]
def select_words(s, n)
","def select_words(s, n)
  vowels = ""aeiouAEIOU""
  words = s.split
  words.select do |word|
    consonant_count = word.chars.count { |char| !vowels.include?(char) }
    consonant_count == n
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_select_words
    candidate = method(:select_words)
    assert_equal([""little""], candidate.call(""Mary had a little lamb"", 4))
    assert_equal([""Mary"", ""lamb""], candidate.call(""Mary had a little lamb"", 3))
    assert_equal([], candidate.call(""simple white space"", 2))
    assert_equal([""world""], candidate.call(""Hello world"", 4))
    assert_equal([""Uncle""], candidate.call(""Uncle sam"", 3))
    assert_equal([], candidate.call("""", 4))
    assert_equal([""b"", ""c"", ""d"", ""f""], candidate.call(""a b c d e f"", 1))
  end
end
"
HumanEval_118,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⴷ ⵉⵙ ⴷⵉⴳⵙ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵜⴰⵏⴳⵍⵉⵣⵜ ⵅⴰⵙ.ⵔⴰⴷ ⵏⴰⴼ ⴽⵔⴰ ⵏ ⵓⵡⵉⴽⵉⵍ ⵉⵙⵎⵓⵏⵏ ⴰⵙⵏⵎⵍⴰⵢ ⵏⵏⵉⴳ ⵏ ⵓⵢⴰ.ⵓⵔ ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔⵏ ⵉⵎⵙⵍⵉ ⴳ ⵍⴱⴷⵓ ⴷ ⵜⴳⵉⵔⴰ. ⵔⵎⵙⵏ ⵜⴰⴳⵓⵔⵉ ⵏ ⵓⵥⵍⴰⵢ ⵎⴽ ⵓⵔ ⵜⵍⵍⵉ.ⵙⵉⵏ ⵉⵎⵙⵍⵉⵢⵏ ⵙⴳ ⵜⵙⴳⴰ ⵏ ⵓⴼⵓⵙ ⵏ ⵜⴳⵓⵔⵉ (ⴰⵙⵙⴰⵖ ⵏ ⵓⵙⴽⴽⵉⵍ).ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵢⴰⵜ ⵜⴳⵓⵔⵉ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⴰⴼⴷ ⵓⵡⵉⴽⵉⵍ ⴰⵎⵉⴽⴽⵙⵓ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳⵔ # >>> get_closest_vowel.call(""yogurt"")
# ""u""
# >>> get_closest_vowel.call(""FULL"")
# ""U""
# >>> get_closest_vowel.call(""quick"")
# """"
# >>> get_closest_vowel.call(""ab"")
# """"
def get_closest_vowel(word)
","def get_closest_vowel(word)
  vowels = ""aeiouAEIOU""
  (1...word.length - 1).reverse_each do |i|
    if vowels.include?(word[i]) && !vowels.include?(word[i - 1]) && !vowels.include?(word[i + 1])
      return word[i]
    end
  end
  return """"
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_closest_vowel
    candidate = method(:get_closest_vowel)
    assert_equal(""u"", candidate.call(""yogurt""))
    assert_equal(""u"", candidate.call(""full""))
    assert_equal("""", candidate.call(""easy""))
    assert_equal("""", candidate.call(""eAsy""))
    assert_equal("""", candidate.call(""ali""))
    assert_equal(""a"", candidate.call(""bad""))
    assert_equal(""o"", candidate.call(""most""))
    assert_equal("""", candidate.call(""ab""))
    assert_equal("""", candidate.call(""ba""))
    assert_equal("""", candidate.call(""quick""))
    assert_equal(""i"", candidate.call(""anime""))
    assert_equal("""", candidate.call(""Asia""))
    assert_equal(""o"", candidate.call(""Above""))
  end
end
"
HumanEval_119,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵔⴰⴷ ⵏⵔⴰⵔ ""ⵉⵀ"" ⵎⴽ ⵉⵍⵍⴰ ⵢⴰⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⵙⴽⴰⵔ ⵏ ⵢⴰⵏ ⵓⵖⵉⵍⵓⴼ ⵉⵖⵓⴷⴰⵏ, ⵔⴰⴷ ⵏⵔⴰⵔ ""ⵓⵄ"" ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ."" ((()) "" ⵓⵔ ⵉⴳⵉ. ⵙ ⵓⵎⴷⵢⴰ: ⵜⵉⴼⵉⵏⴰⵖ ""(((() "" ⵜⴳⴰ ⵜⵣⵔⴼⴰⵏⵜ, ⵎⴰⵛⴰ ⵜⵉⴼⵉⵏⴰⵖ ⴷⴰ ⵜⵜⵓⵙⵎⵔⴰⵙ ⵜⵉⴼⵉⵏⴰⵖ S ⴰⴷ ⵜⴳ ⵢⴰⵜ ⵜⵉⴼⵉⵏⴰⵖ ⵉⵖⵓⴷⴰⵏ ⵎⴽ ⴷ ⴽⵓⵍⵍⵓ ⵜⵉⵙⴳⵏⵓⵜⵉⵏ ⴳ S ⴽⵔⴰ ⵏ ⵓⴽⵓⴷ, ⵎⴰⵙⴷ ⵜⵉⴼⵉⵏⴰⵖ ⵏⵏⴰ ⴷ ⵢⵓⵛⴽⴰⵏ ⵔⴰⴷ ⵉⴳ ⵉⵖⵓⴷⴰⵏ.ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵥⵕⵎ ⵎⴽ ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⴽⴷⴷⴷ ⵙⵏⴰⵜ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⴳ ⴷⴰⵢ ⵜⵙⵙⴽⵛⵎ ⵜⵔⴰⵜⵙⴰ "" (() "" ⵏⵖⴷ ⵜⵔⴰⵜⵙⴰ "") "".ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵏⵉⵡⵏ ⵏ ⵙⵉⵏ ⵉⵙⵉⵔⴰⵏ, ⵙⵉⵏ ⵉⵙⵉⵔⴰⵏ ⴳⴰⵏ ⵉⵕⵥⵎⵏ # >>> match_parens.call([""()("", "")""])
# ""Yes""
# >>> match_parens.call(["")"", "")""])
# ""No""
def match_parens(lst)
","def match_parens(lst)
  a, b = lst

  # Define a helper method to check if a string is balanced
  def balanced?(s)
    count = 0
    s.each_char do |c|
      count += 1 if c == '('
      count -= 1 if c == ')'
      return false if count < 0
    end
    count == 0
  end

  # Check if either concatenation forms a good string
  if balanced?(a + b) || balanced?(b + a)
    ""Yes""
  else
    ""No""
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_match_parens
    candidate = method(:match_parens)
    assert_equal(""Yes"", candidate.call([""()("", "")""]))
    assert_equal(""No"", candidate.call(["")"", "")""]))
    assert_equal(""No"", candidate.call([""(()(())"", ""())())""]))
    assert_equal(""Yes"", candidate.call(["")())"", ""(()()(""]))
    assert_equal(""Yes"", candidate.call([""(())))"", ""(()())((""]))
    assert_equal(""No"", candidate.call([""()"", ""())""]))
    assert_equal(""Yes"", candidate.call([""(()("", ""()))()""]))
    assert_equal(""No"", candidate.call([""(((("", ""((())""]))
    assert_equal(""No"", candidate.call(["")(()"", ""(()(""]))
    assert_equal(""No"", candidate.call(["")("", "")(""]))
    assert_equal(""Yes"", candidate.call([""("", "")""]))
    assert_equal(""Yes"", candidate.call(["")"", ""(""]))
  end
end
"
HumanEval_120,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ 1: ⵏ ⵜⵉⵖⵣⵉ k ⵙ ⵓⴳⴳⴰⵔ ⵏ k ⵉⵎⴹⴰⵏⵏ ⴳ arr. ⴳ ⵓⵙⴰⵜⵉ ⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵍ arr ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⵢⴰⵏ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ k, ⵙⵙⵓⴼⵖ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵉⵜⵜⵓⵙⵎⵙⴰⵙⴰⵏ # >>> maximum.call([-3, -4, 5], 3)
# [-4, -3, 5]
# Example 2:
# >>> maximum.call([4, -4, 4], 2)
# [4, 4]
# Example 3:
# >>> maximum.call([-3, 2, 1, 2, -1, -2, 1], 1)
# [2]
# Note:
# 1. The length of the array will be in the range of [1, 1000].
# 2. The elements in the array will be in the range of [-1000, 1000].
# 3. 0 <= k <= len(arr)
def maximum(arr, k)
","def maximum(arr, k)
  arr.sort.last(k).sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_maximum
    candidate = method(:maximum)
    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))
    assert_equal([4, 4], candidate.call([4, -4, 4], 2))
    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))
    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))
    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))
    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))
    assert_equal([3, 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))
    assert_equal([5], candidate.call([1, 0, 5, -7], 1))
    assert_equal([-4, 4], candidate.call([4, -4], 2))
    assert_equal([-10, 10], candidate.call([-10, 10], 2))
    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0], 0))
  end
end
"
HumanEval_121,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ ⴳ ⵓⵙⴰⵜⵉ ⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⵅⵡⴰⵏ, ⵙⵙⵓⴼⵖ ⵜⴰⴳⵓⵜ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳ ⵜⵣⴷⵓⵖⵉⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ. # >>> solution.call([5, 8, 7, 1])
# 12
# >>> solution.call([3, 3, 3, 3, 3])
# 9
# >>> solution.call([30, 13, 24, 321])
# 0
def solution(lst)
","def solution(lst)
  lst.each_with_index.reduce(0) do |sum, (val, idx)|
    (idx.even? && val.odd?) ? sum + val : sum
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_solution
    candidate = method(:solution)
    assert_equal(12, candidate.call([5, 8, 7, 1]))
    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))
    assert_equal(0, candidate.call([30, 13, 24, 321]))
    assert_equal(5, candidate.call([5, 9]))
    assert_equal(0, candidate.call([2, 4, 8]))
    assert_equal(23, candidate.call([30, 13, 23, 32]))
    assert_equal(3, candidate.call([3, 13, 2, 9]))
  end
end
"
HumanEval_122,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: ⴰⵖⵎⵉⵙ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵙⵏⴰⵜ ⵜⵓⵙⴷⵉⴷⵉⵏ ⴳ ⵓⴳⴳⴰⵔ ⵙⴳ ⵉⴼⵔⴷⵉⵙⵏ ⵏ arr ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⴽⴽⵓⵥ.ⴳ ⵓⵙⴰⵜⵉ ⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵓⵔ ⵉⴳⵉⵏ ⵡⴰⴹⵓ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ arr ⴷ ⵢⴰⵏ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ k, return # >>> add_elements.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
# 24
# Constraints:
# 1. 1 <= len(arr) <= 100
# 2. 1 <= k <= len(arr)
def add_elements(arr, k)
","def add_elements(arr, k)
  arr.first(k).select { |num| num.abs.to_s.length <= 2 }.sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_add_elements
    candidate = method(:add_elements)
    assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))
    assert_equal(0, candidate.call([111, 121, 3, 4000, 5, 6], 2))
    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))
    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))
    assert_equal(1, candidate.call([1], 1))
  end
end
"
HumanEval_123,tzm_Tfng,rb,"get_odd_collatz(5) ⴰⵔ ⵉⵜⵜⵔⴰⵔ [1, 5] # ⵜⴰⵔⵔⴰ ⵏ ⴽⵓⵍⵍⴰⵜⵣ ⵉ 5 ⵜⴳⴰ [5, 16, 8, 4, 2, 1], ⴰⵢⴰⴷ ⵉⴳⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵎⵢⴰⵏⴰⵡⵏ ⴳⴰⵏ 1, ⴷ 5. ⵙ ⵓⵎⴷⵢⴰ: 2. ⵉⵙⵡⵓⵜⵜⵓ ⵓⵙⵎⵉⵍ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵔⵏⵉⵡ.1. ⴽⵓⵍⵍⴰⵣ ((1) ⵉⴳⴰ [1]. ⵜⴰⵖⴹⴼⵜ: ⴰⵖⵏⵏⵉⵊ ⵉⴳⴰ ⵜ ⵎⴰⵙ ⴷ ⵡⴰⵜⵉⴳ ⴰⴽⴽⵡ ⵏ n, ⵔⴰⴷ ⵜⵍⴽⵎ ⵜⵉⴼⵔⴽⵜ ⴰⵀⴰ 1.ⵎⴽ ⵉⴳⴰ ⵓⵏⴰⵎⴽ ⵉⵣⵔⵉⵏ ⴰⵎⵢⵉⵡⵏ, ⵓⵏⴰⵎⴽ ⴰⴷ ⵢⴰⴹⵏ ⵉⴳⴰⵏ 3 ⵏ ⵓⵏⴰⵎⴽ ⵉⵣⵔⵉⵏ.ⴰⵖⵔⵓⵎ ⵉⵣⵔⵉⵏ ⵙ ⵓⵎⴽ ⴰⴷ: ⵎⴽ ⵉⴳⴰ ⵓⵖⵔⵓⵎ ⵉⵣⵔⵉⵏ ⴰⵎⵙⴳⴷ, ⵉⴳⴰ ⵓⵖⵔⵓⵎ ⴰⴷ ⵢⵓⵛⴽⴰⵏ ⵢⴰⵏ ⵓⵣⴳⵏ ⵏ ⵙ ⵡⴰⵏⴰⵡ ⴰⴷ: ⵔⴰⴷ ⵜⴱⴷⵓ ⵙ ⴽⵔⴰ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ n. ⵔⴰⴷ ⵢⵉⵍⵉ ⴽⵓ ⵉⵎⵉⴹ ⵙⴳ ⵜⴰⵖⵏⵙⴰ ⵏ ⴽⵓⵍⵍⴰⵣ ⵜⴳⴰ ⵢⴰⵜ ⵜⵖⵏⵙⴰ ⴳ ⵜⵓⵙⵏⴰⴽⵜ ⵏⵏⴰ ⵉⵥⵍⵉⵏ ⵙ ⵢⴰⵜ ⵜⵣⵍⵉⵜ ⵉⵜⵜⵓⵙⵙⴰⵏⵏ ⴳ ⵓⴽⵓⴷ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵏⵥⴰⵢⵏ n, ⵙⵙⵓⴼⵖ ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵉⵎⴹⴰⵏⵏ ⵉⵎⵢⴰⵏⴰⵡⵏ ⴳ ⵓⵙⵏⵙⵍ ⵏ ⴽⵓⵍⴰⵜⵣ. # >>> get_odd_collatz.call(5)
# [1, 5]
def get_odd_collatz(n)
","def get_odd_collatz(n)
  collatz_sequence = []
  while n != 1
    collatz_sequence << n if n.odd?
    if n.even?
      n = n / 2
    else
      n = 3 * n + 1
    end
  end
  collatz_sequence << 1 if n == 1

  collatz_sequence.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_odd_collatz
    candidate = method(:get_odd_collatz)
    assert_equal([1, 5, 7, 11, 13, 17], candidate.call(14))
    assert_equal([1, 5], candidate.call(5))
    assert_equal([1, 3, 5], candidate.call(12))
    assert_equal([1], candidate.call(1))
  end
end
"
HumanEval_124,tzm_Tfng,rb,"4. ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵢⵉⵍⵉ ⵓⵙⵙⴰⵏ ⴳ ⵜⵍⵖⴰ: ⵎⵎ-ⴷⵉ-ⵢⵢⴰⵢⵢⴰ ⵓⵔ ⵉⵅⵚⵚⴰ ⴰⴷ ⵉⴳ ⵡⴰⵢⵢⵓⵔ ⴷⴷⵖ ⵉⵎⵥⵥⵢⴰⵏⵏ ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 12 ⵏ ⵡⴰⵢⵢⵓⵔ.2. ⵓⵔ ⵉⴳⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵙⵙⴰⵏ ⴷⴷⵔⵓⵙⵏ ⵙⴳ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 31 ⵏ ⵡⵓⵙⵙⴰⵏ ⵉ ⵡⴰⵢⵢⵓⵔⵏ 1,3,5,7,8,10,12. ⴷ ⵓⵔ ⵉⴳⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵙⵙⴰⵏ ⴷⴷⵔⵓⵙⵏ ⵙⴳ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 30 ⵏ ⵡⵓⵙⵙⴰⵏ ⵉ ⵡⴰⵢⵢⵓⵔⵏ 4,6,9,11. ⴷ ⵓⵔ ⵉⴳⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵙⵙⴰⵏ ⴷⴷⵔⵓⵙⵏ ⵙⴳ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 29 ⵉ ⵡⴰⵢⵢⵓⵔ 2.1. ⵓⵔ ⵜⵍⵍⵉ ⵜⵣⴳⵍⵜ ⵏ ⵡⴰⵙⵙ ⵅⴷⴷⴰ.ⴰⵙⵙ ⴰⴷ ⵉⴳⴰ ⵡⵉⵏ ⵜⵣⵎⵎⴰⵔ ⵉⴳ ⵜⵜⵓⵙⵎⵔⵏ ⴽⵓⵍⵍⵓ ⵉⵍⵓⴳⵏⵏ ⴰⴷ: ⴰⵔ ⵉⵜⵜⵔ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵡⴰⵙⵙ ⵢⴰⵜ ⵜⵉⴷⵜ ⵎⴽ ⵓⵔ ⵉⴳⵉ ⵜⵉⴷⵜ. ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⵉⵜ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵙⵎⴷⵏ ⵜⴰⵡⵓⵔⵉ ⵏ ⵓⵣⵎⵣ ⴷ # >>> valid_date.call(""03-11-2000"")
# true
# >>> valid_date.call(""15-01-2012"")
# false
# >>> valid_date.call(""04-0-2040"")
# false
# >>> valid_date.call(""06-04-2020"")
# true
# >>> valid_date.call(""06/04/2020"")
# false
def valid_date(date)
","def valid_date(date)
  return false if date.nil? || date.empty?
  
  # Check if the date format is correct
  match = date.match(/^(\d{2})-(\d{2})-(\d{4})$/)
  return false unless match
  
  month, day, year = match.captures.map(&:to_i)
  
  # Check if month is valid
  return false if month < 1 || month > 12
  
  # Check if day is valid according to the month
  case month
  when 1, 3, 5, 7, 8, 10, 12
    return day >= 1 && day <= 31
  when 4, 6, 9, 11
    return day >= 1 && day <= 30
  when 2
    return day >= 1 && day <= 29
  else
    return false
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_valid_date
    candidate = method(:valid_date)
    assert_equal(true, candidate.call(""03-11-2000""))
    assert_equal(false, candidate.call(""15-01-2012""))
    assert_equal(false, candidate.call(""04-0-2040""))
    assert_equal(true, candidate.call(""06-04-2020""))
    assert_equal(true, candidate.call(""01-01-2007""))
    assert_equal(false, candidate.call(""03-32-2011""))
    assert_equal(false, candidate.call(""""))
    assert_equal(false, candidate.call(""04-31-3000""))
    assert_equal(true, candidate.call(""06-06-2005""))
    assert_equal(false, candidate.call(""21-31-2000""))
    assert_equal(true, candidate.call(""04-12-2003""))
    assert_equal(false, candidate.call(""04122003""))
    assert_equal(false, candidate.call(""20030412""))
    assert_equal(false, candidate.call(""2003-04""))
    assert_equal(false, candidate.call(""2003-04-12""))
    assert_equal(false, candidate.call(""04-2003""))
  end
end
"
HumanEval_125,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ ⴰⵍⵍⴰⵙ, ord{""a"") = 0, ord{""b"") = 1, ... ord{""z"") = 25 ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⴱⴹⵓ ⵅⴼ ⵓⴽⵓⵎⵉ ',' ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵓⴽⵓⵎⵉ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵔⴰⵔⵉ ⵉⵎⴹⴰⵏ ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⵉⵎⵥⵥⵉⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵥⵥⵢⴰⵏ ⴳ ⴳ ⵓⴹⵕⵉⵚ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ, ⵙⵙⵓⴼⵖ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵉⵜⵜⵓⵥⵍⴰⵢⵏ ⵅⴼ ⵡⴰⵏⵙⴰ ⴰⵣⴳⵣⴰ, ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵡⴰⵏⵙⴰ ⴰⵣⴳⵣⴰ ⴳ ⵓⴹⵕⵉⵚ ⵏⵏⴰ ⵜⵔⴰⴷ # >>> split_words.call(""Hello world!"")
# [""Hello"", ""world!""]
# >>> split_words.call(""Hello,world!"")
# [""Hello"", ""world!""]
# >>> split_words.call(""abcdef"")
# 3
def split_words(txt)
","def split_words(txt)
  if txt.include?(' ')
    return txt.split(' ')
  elsif txt.include?(',')
    return txt.split(',')
  else
    odd_count = txt.chars.count { |char| ('a'..'z').include?(char) && (char.ord - 'a'.ord).odd? }
    return odd_count
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_split_words
    candidate = method(:split_words)
    assert_equal([""Hello"", ""world!""], candidate.call(""Hello world!""))
    assert_equal([""Hello"", ""world!""], candidate.call(""Hello,world!""))
    assert_equal([""Hello"", ""world,!""], candidate.call(""Hello world,!""))
    assert_equal([""Hello,Hello,world"", ""!""], candidate.call(""Hello,Hello,world !""))
    assert_equal(3, candidate.call(""abcdef""))
    assert_equal(2, candidate.call(""aaabb""))
    assert_equal(1, candidate.call(""aaaBb""))
    assert_equal(0, candidate.call(""""))
  end
end
"
HumanEval_126,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ ⴹⴹⴰⵕⵜ ⵓⵢⴰ, ⴷⴰ ⵏⵙⵙⴽⵛⵎ ⵜⵉⴼⵍⵓⵜ ⵏ false. ⵀⴰⵜ ⵓⵔ ⵉⵍⵍⵉ ⵡⵓⵟⵟⵓⵏ ⵉⵔⵉⵏⵉⵢⵏ ⴷ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ.ⴳ ⵓⴹⴼⴼⵓⵕ ⵏ ⵓⴽⴼⴼⵓ. ⵎⴽ ⵜⵍⵍⴰ ⴳ ⵓⵎⵙⴳⵏⴰⴼ ⵓⴳⴳⴰⵔ ⵏ 1 ⵜⴰⵔⵡⴰ ⵏ ⵢⴰⵏ ⵉⴳ ⴷⴰⵔⴽ ⵓⵎⵙⴰⵙⴰ ⵏ ⵡⵓⵟⵟⵓⵏⵏ, ⵙⴽⵔ ⴰⵙⵏⵖⵎⵙ ⵙ ⵎⴽⵏⵏⴰ ⵜⵜⵓⵙⵎⵉⵍⵏ ⵏⵖⴷ ⵓⵔ ⵜⵜⵓⵙⵎⵉⵍⵏ.# >>> is_sorted.call([5])
# true
# >>> is_sorted.call([1, 2, 3, 4, 5])
# true
# >>> is_sorted.call([1, 3, 2, 4, 5])
# false
# >>> is_sorted.call([1, 2, 3, 4, 5, 6])
# true
# >>> is_sorted.call([1, 2, 3, 4, 5, 6, 7])
# true
# >>> is_sorted.call([1, 3, 2, 4, 5, 6, 7])
# false
# >>> is_sorted.call([1, 2, 2, 3, 3, 4])
# true
# >>> is_sorted.call([1, 2, 2, 2, 3, 4])
# false
def is_sorted(lst)
","def is_sorted(lst)
  lst.each_cons(2).with_index do |(a, b), index|
    return false if a > b
    return false if index < lst.length - 2 && a == b && lst[index + 2] == b
  end
  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_sorted
    candidate = method(:is_sorted)
    assert_equal(true, candidate.call([5]))
    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))
    assert_equal(false, candidate.call([1, 3, 2, 4, 5]))
    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6]))
    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6, 7]))
    assert_equal(false, candidate.call([1, 3, 2, 4, 5, 6, 7]))
    assert_equal(true, candidate.call([]))
    assert_equal(true, candidate.call([1]))
    assert_equal(false, candidate.call([3, 2, 1]))
    assert_equal(false, candidate.call([1, 2, 2, 2, 3, 4]))
    assert_equal(false, candidate.call([1, 2, 3, 3, 3, 4]))
    assert_equal(true, candidate.call([1, 2, 2, 3, 3, 4]))
    assert_equal(true, candidate.call([1, 2, 3, 4]))
  end
end
"
HumanEval_127,tzm_Tfng,rb,"[ⴰⴽⵛⵛⵓⵎ/ⴰⴽⵛⵓⵎ] ⵏ ⵉⵎⴷⵢⴰⵣⵏ: ⵎⴽ ⵓⵔ ⴷⴰ ⵜⵜⵎⵓⵏⵏ ⵙⵉⵏ ⵉⵏⴱⴰⵔⴰⵣⵏ, ⵙⵙⵓⴼⵖ ""NO"".ⵎⴽ ⵓⵔ ⵜⵍⵍⵉ, ⵔⴰⴷ ⵜⵔⴰⵔ ""ⵓⵀⵓ"".ⵎⴽ ⵜⴳⴰ ⵜⵉⵖⵣⵉ ⵏ ⵓⵙⵎⵓⵜⵜⴳ ⴰⵎⵉⴹⴰⵏ ⴰⵎⵣⵡⴰⵔⵓ, ⵙⵙⵓⴼⵖ ""YES"", ⴷ ⵡⵉ-ⵏⵏⴰ ⵓⵔ ⵉⴳⵉⵏ ⴰⵎⴹⴰⵏ ⴰⵎⵣⵡⴰⵔⵓ.ⴰⵎⴷⵢⴰ, ⴰⵙⵎⵓⵜⵜⴳ ⵏ ⵉⵎⵣⴳⵓⵏⵏ (1, 3), (2, 4) ⵉⴳⴰ (2, 3) ⵉⵙⵎ ⵏ ⵓⵎⴹⴰⵏ ⴰⵎⵣⵡⴰⵔⵓ.ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵏⵎ ⵎⴰⵙ ⴷ ⵜⵉⵖⵣⵉ ⵏ ⵓⵙⵎⵓⵜⵜⴳ ⵏ ⵙⵏⴰⵜ ⵉ ⴽⵓ ⵓⵣⵎⵣ, ⴷⴰ ⵏⵙⵡⵉⵏⴳⵉⵎ ⵎⴰⵙⴷ ⴰⵙⵏⵜⵉ ⵏⵏⵙ ⵉⴳⴰ ⵉⵎⵥⵥⵉ ⵏⵖⴷ ⵉⵎⵎⵔⵡⴰⵙⵏ ⴷ ⵜⴳⵉⵔⴰ ⵏⵏⵙ.ⵜⵓⵎⵣ ⴳⵉⵙ ⵜⵉⵣⵡⵉⵔⵉ ⴷ ⵜⴳⵉⵔⴰ.ⵜⵉⵣⵉⵡⵉⵏ ⵉⵜⵜⵓⴼⴽⴰⵏ ⴳⴰⵏ ⵜⵉⵍⴳⴳⵡⵉⵜ, ⴰⵢⵏⵏⴰ ⵎⵉ ⵉⴳⴰ ⵓⴽⵓⴷ (ⵜⴰⵎⵣⵡⴰⵔⵓⵜ, ⵜⴳⵉⵔⴰ) ⴳ ⴽⵓ ⵢⴰⵏ ⵏ ⵉⵏⴱⵔⴰⵣⵏ ⵉⴳⴰ ⵢⴰⵏ ⵓⵎⵉⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ. ⵙ ⵓⵎⴷⵢⴰ, ⵉⵏⴱⵔⴰⵣ = (ⵜⴰⵏⵣⵡⵉ, ⵜⴳⵉⵔⴰ) = (1, 2).ⵔⴰⴷ ⴽⴽⵡⵏ ⵙⵉⵏ ⵉⵏⴱⵉⵔⴰⵍⵏ,# >>> intersection.call([1, 2], [2, 3])
# ""NO""
# >>> intersection.call([-1, 1], [0, 4])
# ""NO""
# >>> intersection.call([-3, -1], [-5, 5])
# ""YES""
def intersection(interval1, interval2)
","def intersection(interval1, interval2)
  start1, end1 = interval1
  start2, end2 = interval2

  intersection_start = [start1, start2].max
  intersection_end = [end1, end2].min

  if intersection_start > intersection_end
    return ""NO""
  end

  intersection_length = intersection_end - intersection_start + 1

  return ""YES"" if prime?(intersection_length)

  ""NO""
end

def prime?(n)
  return false if n <= 1
  return true if n == 2 || n == 3

  (2..Math.sqrt(n).to_i).each do |i|
    return false if n % i == 0
  end

  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_intersection
    candidate = method(:intersection)
    assert_equal(""NO"", candidate.call([1, 2], [2, 3]))
    assert_equal(""NO"", candidate.call([-1, 1], [0, 4]))
    assert_equal(""YES"", candidate.call([-3, -1], [-5, 5]))
    assert_equal(""YES"", candidate.call([-2, 2], [-4, 0]))
    assert_equal(""NO"", candidate.call([-11, 2], [-1, -1]))
    assert_equal(""NO"", candidate.call([1, 2], [3, 5]))
    assert_equal(""NO"", candidate.call([1, 2], [1, 2]))
    assert_equal(""NO"", candidate.call([-2, -2], [-3, -2]))
  end
end
"
HumanEval_128,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: Note: return nil for empty arr.  ⴰⴱⵔⵔⴽ ⵏ ⵡⴰⵔⵔⴰⵏ ⴽⵓ ⵓⵟⵟⵓⵏ ⴳ ⵓⵎⵙⴳⴷⴰⵍ, ⵉⵜⵜⵓⵢⵙⵎⴷⵢⴰ ⵙ 1, -1 ⵏⵖⴷ 0. ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵜⵉⵙⴽⴼⴰⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵙ ⵜⵢⴰⴼⵓⵜ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵔⴰⴷ ⵜⵔⵉⵜⵓⵔⵏ# >>> prod_signs.call([1, 2, 2, -4])
# 9
# >>> prod_signs.call([0, 1])
# 0
# >>> prod_signs.call([])
# nil
def prod_signs(arr)
","def prod_signs(arr)
  return nil if arr.empty?
  
  product_signs = arr.reduce(1) { |prod, num| prod * num <=> 0 }
  sum_magnitudes = arr.map(&:abs).sum
  
  product_signs * sum_magnitudes
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_prod_signs
    candidate = method(:prod_signs)
    assert_equal(-9, candidate.call([1, 2, 2, -4]))
    assert_equal(0, candidate.call([0, 1]))
    assert_equal(-10, candidate.call([1, 1, 1, 2, 3, -1, 1]))
    assert_equal(nil, candidate.call([]))
    assert_equal(20, candidate.call([2, 4, 1, 2, -1, -1, 9]))
    assert_equal(4, candidate.call([-1, 1, -1, 1]))
    assert_equal(-4, candidate.call([-1, 1, 1, 1]))
    assert_equal(0, candidate.call([-1, 1, 1, 0]))
  end
end
"
HumanEval_129,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵉⵜⵜⵓⵙⵓⴷⵙⵏ ⵏ ⵡⴰⵜⵉⴳⵏ ⵏ ⵜⵖⵔⴰⵙⵉⵏ ⵏⵏⴰ ⵙ ⵉⴳⴳⵡⴰⵔ ⴰⴱⵔⵉⴷ ⵏ ⵓⵙⵎⵓⵜⵜⴳ. ⴷⴰ ⵉⵜⵜⵓⵙⴷⴷⴰⴷ ⵎⴰⵙⴷ ⵜⴰⵔⴰⵔⵓⵜ ⵜⴳⴰ ⵢⴰⵜ.lst_A[j] = lst_B[j] ⵣⵓⵏⴷ lst_A[i] < lst_B[i] ⴷ ⵉ ⴽⵓ j (1 <= j < i) ⵖⵓⵔⵖ ⵓⴳⴳⴰⵔ ⵏ lst_B, ⵙ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵢⴰⴹⵏ, ⵉⵍⵍⴰ ⵢⴰⵏ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ i (1 <= i <= k) ⵙ (ⴰⴷ ⵏⵉⵏⵉ ⴰⵙⵏ lst_A ⴷ lst_B), lst_A ⵉⴳⴰ ⵡⵉⵏ ⵍⵉⴽⵙⵉⴽⵓⵔⴰⴼⵉ ⴷⴼⴼⵉⵔ ⵍⵍⵉⵖ ⵏⵙⴽⵔ ⵉⵎⵙⴷⴷⵉⵢⵏ ⵏ ⵡⴰⵜⵉⴳⵏ ⵏ ⵜⵖⵔⴰⵙⵉⵏ ⵏⵏⴰ ⵔⴰⴷ ⵙⴽⵔⵏ A ⴷ Bⴰⴱⵔⵉⴷ A (ⵙ ⵜⵉⵖⵣⵉ k) ⵉⴳⴰ ⵡⵉⵏ ⵓⴷⵔⴰⵔ ⵏ ⵓⴱⵔⵉⴷ B (ⵙ ⵜⵉⵖⵣⵉ k) ⵎⴽ ⵓⵔ ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵣⵔⵉⴷ ⵙⴳ ⵜⵔⴰⴱⴱⵓⵜ.ⵓⵔ ⵉⵅⵚⵚⴰ ⴰⴷ ⵏⵣⵣⵉⴳⵉⵣ).ⵔⵥⵎ ⵜⴰⵡⵡⵓⵔⵜ ⵏ ⵓⵖⵣⵓ k ⵔⴰⴷ ⴰⴷ ⵉⵙⵎⵓⵏ ⴽⵔⴰ ⵏ ⵜⵖⵔⴰⵙⵉⵏ (ⵓⵔ ⵔⴰⴷ ⵜⴰⵢⵍⴰⵍⵜ ⵙ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵢⴰⴹⵏ, ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵣⵔⴷ ⵉ ⵜⵖⵔⴰⵙⵉⵏ ⵏⵏⴰ ⴷⴰⵔ ⵢⴰⵏ ⵓⴽⴼⴼⴰⵢ ⴰⴽⴷ ⵡⴰⵙⵙⴰⵢ ⵙⴳ ⴽⵔⴰ ⵏ ⵜⵖⵔⴰⵙⵜ, ⴷ ⴳ ⴽⵓ ⵜⴰⵙⵓⵔⵉⴼⵜ ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵓⴷⵙⴷ ⵖⵔ ⴽⵔⴰ ⵏ ⵜⵖⵔⴰⵙⵜ ⵜⴰⴷⴷⴰⵔⵜ ⵜⵓⵎⵍⵉⵍⵜ, ⵔⴰⴷ ⵜⵙⵙⵏⵎⴽⵜⵉⴷ ⴰⴱⵔⵉⴷ ⵏ ⵓⴷⵔⴰⵔ ⵏ ⵜⵉⵣⵉ k ⴳ ⵜⴽⵔⵔⴰⵢⵜ.ⴷⴰ ⵉⵜⵜⵓⴳⴰ inclusive ⵢⴰⵜ ⵜⵉⴽⴽⵍⵜ ⴳ ⵜⵖⵔⴰⵙⵉⵏ ⵏ ⵜⴽⵔⵟⴰ.ⴽⵓ ⵜⴰⵖⵔⴰⵙⵜ ⵏ ⵜⴽⵔⵟⴰ ⵜⵍⴰ ⵢⴰⵏ ⵡⴰⵜⵉⴳ. ⴽⵓ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳ ⵓⵙⵏⴼⵍ [1, N * N] ⴳ ⵢⴰⵜ ⵜⴽⵔⵔⴰⵢⵜ ⴷ N ⵏ ⵜⵉⵙⴳⵓⵔⵉⵡⵉⵏ ⴷ N ⵏ ⵜⵉⵔⵙⴰⵍ (N >= 2) ⴷ ⵢⴰⵏ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ k, # >>> minPath.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
# [1, 2, 1]
# >>> minPath.call([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)
# [1]
def minPath(grid, k)
","def minPath(grid, k)
  n = grid.size
  directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]
  min_path = nil

  n.times do |i|
    n.times do |j|
      queue = [[[i, j], [grid[i][j]]]]
      until queue.empty?
        position, path = queue.shift
        if path.size == k
          min_path = path if min_path.nil? || path < min_path
          next
        end
        directions.each do |dx, dy|
          x, y = position[0] + dx, position[1] + dy
          if x.between?(0, n-1) && y.between?(0, n-1)
            queue.push([[x, y], path + [grid[x][y]]])
          end
        end
      end
    end
  end
  min_path
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_minPath
    candidate = method(:minPath)
    assert_equal([1, 2, 1], candidate.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))
    assert_equal([1], candidate.call([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))
    assert_equal([1, 2, 1, 2], candidate.call([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4))
    assert_equal([1, 10, 1, 10, 1, 10, 1], candidate.call([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7))
    assert_equal([1, 7, 1, 7, 1], candidate.call([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5))
    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1], candidate.call([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9))
    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6], candidate.call([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12))
    assert_equal([1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8))
    assert_equal([1, 5, 1, 5, 1, 5, 1, 5], candidate.call([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8))
    assert_equal([1, 2, 1, 2, 1, 2, 1, 2, 1, 2], candidate.call([[1, 2], [3, 4]], 10))
    assert_equal([1, 3, 1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[1, 3], [3, 2]], 10))
  end
end
"
HumanEval_130,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵉⵎⴹⴰⵏⵏ ⵏ ⵜⵔⴱⵓⵏⴰⵛⵛⵉ ⵏ n + 1 ⴰⵎⵣⵡⴰⵔⵓ. ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽ ⵢⴰⵏ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⵓⵔ ⵉⴳⵉⵏ ⴰⵎⵏⴳⵓ n, ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⵉⵜⵔⵓⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ = 2 + 3 + 3 = 8 tri(3) = tri(2) + tri(1) + tri(4) tri ((4) = 3 tri(2) = 1 + (2 / 2) = 2 ⵙ ⵓⵎⴷⵢⴰ: tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ⵎⴽ n ⵉⴳⴰ ⴰⵎⵣⴳⵓⵏ. tri ((n) = 1 + n / 2, ⵉⴳ n ⵉⴳⴰ ⴰⵡⴷ ⵢⴰⵏ. tri(1) = 3 ⵜⴰⴹⴼⵉⵕⵜ ⵏ ⵜⵔⵉⴱⵓⵏⴰⵛⵛⵉ ⵜⵙⵙⵏ ⵙ ⵓⵙⵏⴼⵍⵓⵍ: ⵎⴰⵛⴰ, ⵎⴰ ⵓⵔ ⵉⵙⵙⵏ ⵓⴼⴳⴰⵏ ⵉⴳⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵟⵔⵉⴱⵓⵏⴰⵛⵉ.ⴽⵓ ⵢⴰⵏ ⵉⵙⵙⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵉ, ⵜⵜⵓⵙⵏⵎⵍⵏ ⵙ ⵓⴳⴳⴰⵔ ⵙⴳ ⵉⵎⵓⵙⵏⴰⵡⵏ ⵏ ⵜⵓⵙⵏⴰⴽⵜ ⴳ # >>> tri.call(3)
# [1, 3, 2, 8]
def tri(n)
","def tri(n)
  sequence = [1, 3]
  
  (2..n).each do |i|
    if i.even?
      sequence[i] = 1 + i / 2
    else
      sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1] rescue 0
    end
  end
  
  sequence[0..n]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_tri
    candidate = method(:tri)
    assert_equal([1, 3, 2, 8], candidate.call(3))
    assert_equal([1, 3, 2, 8, 3], candidate.call(4))
    assert_equal([1, 3, 2, 8, 3, 15], candidate.call(5))
    assert_equal([1, 3, 2, 8, 3, 15, 4], candidate.call(6))
    assert_equal([1, 3, 2, 8, 3, 15, 4, 24], candidate.call(7))
    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5], candidate.call(8))
    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35], candidate.call(9))
    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11], candidate.call(20))
    assert_equal([1], candidate.call(0))
    assert_equal([1, 3], candidate.call(1))
  end
end
"
HumanEval_131,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⴰⵔ ⵉⵜⵜⵔⴰⵔ 0 ⵎⴽ ⴳⴰⵏ ⴰⴽⴽⵡ ⵡⵓⵟⵟⵓⵏⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ.ⴳ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵙⴽⵔ ⴰⵙⵢⴰⴼⵓ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵢⴰⵏⴰⵡⵏ. # >>> digits.call(1)
# 1
# >>> digits.call(4)
# 0
# >>> digits.call(235)
# 15
def digits(n)
","def digits(n)
  odd_digits = n.to_s.chars.map(&:to_i).select { |digit| digit.odd? }
  return 0 if odd_digits.empty?
  odd_digits.reduce(:*)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_digits
    candidate = method(:digits)
    assert_equal(5, candidate.call(5))
    assert_equal(5, candidate.call(54))
    assert_equal(1, candidate.call(120))
    assert_equal(5, candidate.call(5014))
    assert_equal(315, candidate.call(98765))
    assert_equal(2625, candidate.call(5576543))
    assert_equal(0, candidate.call(2468))
  end
end
"
HumanEval_132,tzm_Tfng,rb,"ⴳ ⵉⵍⵍⴰ ⴽⵔⴰ ⵏ ⵢⴰⵏ ⴳ ⵜⵔⴳⴰⵍⵉⵏ ⵏ ⵜⴹⴼⵉⵕⵜ.ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵜⵔⴰ ⴰⴷ ⵜⵔⴰⵔ true ⵎⴽ ⴷ ⵖⴰⵙ ⵎⴽ ⵉⵍⵍⴰ ⵢⴰⵏ ⵓⴹⴼⴼⵓⵕ ⵏ ⵜⴷⵔⴰⵡⵜ ⵏ ⵜⴷⵔⴰⵡⵉⵏ ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⴰⵏⵎⵎⴰⵍ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⵜⵓⵙⴷⵉⴷⵉⵏ ⵜⵉⴽⵓⵥⴰⵥⵉⵏ ⵅⴰⵙ.# >>> is_nested.call(""[[]]"")
# true
# >>> is_nested.call(""[]]]]]]][[[[[]"")
# false
# >>> is_nested.call(""[][]"")
# false
# >>> is_nested.call(""[]"")
# false
# >>> is_nested.call(""[[][]]"")
# true
# >>> is_nested.call(""[[]][["")
# true
def is_nested(string)
","def is_nested(string)
  stack = []
  has_nested = false

  string.each_char do |char|
    if char == '['
      stack.push(char)
    elsif char == ']'
      if stack.empty?
        return false
      end
      stack.pop
      has_nested = true if stack.any?
    end
  end

  has_nested
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_nested
    candidate = method(:is_nested)
    assert_equal(true, candidate.call(""[[]]""))
    assert_equal(false, candidate.call(""[]]]]]]][[[[[]""))
    assert_equal(false, candidate.call(""[][]""))
    assert_equal(false, candidate.call(""[]""))
    assert_equal(true, candidate.call(""[[[[]]]]""))
    assert_equal(false, candidate.call(""[]]]]]]]]]]""))
    assert_equal(true, candidate.call(""[][][[]]""))
    assert_equal(false, candidate.call(""[[]""))
    assert_equal(false, candidate.call(""[]]""))
    assert_equal(true, candidate.call(""[[]][[""))
    assert_equal(true, candidate.call(""[[][]]""))
    assert_equal(false, candidate.call(""""))
    assert_equal(false, candidate.call(""[[[[[[[[""))
    assert_equal(false, candidate.call(""]]]]]]]]""))
  end
end
"
HumanEval_133,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⴰⵔⵏ ⵉ ⴽⵓ ⵢⴰⵏ ⴳ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵓⵙⵏⵙⵍ ⵙ ⵜⴽⵍⵉⵜ ⵏ ⵓⴼⵍⵍⴰ.ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⵉⵜ ⵙ ⵓⵖⵣⵓⵔ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵓⴽⵓⵥ ⴳ ⵓⵙⵏⵙⵉ ⵏⵏⴰ ⴷ ⵢⵓⴼⵏ, ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵏⵉⵡⵏ ⵏ ⵡⵓⵟⵟⵓⵏⵏ.# >>> lst.call([1.0, 2.0, 3.0])
# 14
# >>> lst.call([1.0, 4.0, 9.0])
# 98
# >>> lst.call([1.0, 3.0, 5.0, 7.0])
# 84
# >>> lst.call([1.4, 4.2, 0.0])
# 29
# >>> lst.call([-2.4, 1.0, 1.0])
# 6
def sum_squares(lst)
","def sum_squares(lst)
  lst.map { |num| (num.ceil)**2 }.sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sum_squares
    candidate = method(:sum_squares)
    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))
    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))
    assert_equal(84, candidate.call([1.0, 3.0, 5.0, 7.0]))
    assert_equal(29, candidate.call([1.4, 4.2, 0.0]))
    assert_equal(6, candidate.call([-2.4, 1.0, 1.0]))
    assert_equal(10230, candidate.call([100.0, 1.0, 15.0, 2.0]))
    assert_equal(200000000, candidate.call([10000.0, 10000.0]))
    assert_equal(75, candidate.call([-1.4, 4.6, 6.3]))
    assert_equal(1086, candidate.call([-1.4, 17.9, 18.9, 19.9]))
    assert_equal(0, candidate.call([0.0]))
    assert_equal(1, candidate.call([-1.0]))
    assert_equal(2, candidate.call([-1.0, 1.0, 0.0]))
  end
end
"
HumanEval_134,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵜⴰⵖⴹⴼⵜ: ""word"" ⵉⴳⴰ ⵜ ⵢⴰⵏ ⵓⴳⵔⴰⵡ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵜⵜⵓⵢⴼⴼⵖⵏ ⵙ ⵓⵙⴰⵢⵔⴰⵔ.ⴷ ⴰⴳⵣⵣⵓⵎ ⵏ ⵜⴳⵓⵔⵉ, ⴷ ⵜⵉⵣⴳⵉⵍⵜ ⵎⵇⵇⴰⵔ ⵓⵔ ⵜⴳⵉ.ⵏ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⴰⵏⵎⵍⴰⵏ ⵉⴳⴰ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⴰⵍⴼⴰⵚⵜⵉⴽⵉ ⵓⵔ ⵉⴳⵉ ⵙⴽⵔ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵉⵜⵜⴰⵊⵊⴰⵏ ⴰⴷ ⵜⴳ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵡⵓⵎⵓⵖ ⴰⵎⴳⴳⴰⵔⵓ # >>> check_if_last_char_is_a_letter.call(""apple pie"")
# false
# >>> check_if_last_char_is_a_letter.call(""apple pi e"")
# true
# >>> check_if_last_char_is_a_letter.call(""apple pi e "")
# false
# >>> check_if_last_char_is_a_letter.call("""")
# false
def check_if_last_char_is_a_letter(txt)
","check_if_last_char_is_a_letter = ->(txt) {
  return false if txt.strip.empty?
  words = txt.strip.split(' ')
  last_word = words.last
  return false if last_word.empty?
  last_char = last_word[-1]

  last_char =~ /[a-zA-Z]/ && (words.size == 1 || txt[txt.rindex(last_char) - 1] == ' ')
}","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_check_if_last_char_is_a_letter
    candidate = method(:check_if_last_char_is_a_letter)
    assert_equal(false, candidate.call(""apple""))
    assert_equal(true, candidate.call(""apple pi e""))
    assert_equal(false, candidate.call(""eeeee""))
    assert_equal(true, candidate.call(""A""))
    assert_equal(false, candidate.call(""Pumpkin pie ""))
    assert_equal(false, candidate.call(""Pumpkin pie 1""))
    assert_equal(false, candidate.call(""""))
    assert_equal(false, candidate.call(""eeeee e ""))
    assert_equal(false, candidate.call(""apple pie""))
    assert_equal(false, candidate.call(""apple pi e ""))
  end
end
"
HumanEval_135,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⴰⵜⵉⴳⵏ ⵉⵎⵢⴰⵍⵍⴰⵏ.ⵓⵔ ⵉⵍⵍⵉ ⴽⵔⴰ ⵏ ⵓⵏⴰⵡ ⴰⴷ, ⵔⴰⴷ ⵏⵔⴰⵔ -1.ⵓⵔ ⵉⴳⵉ ⴰⵅⴰⵜⴰⵔ ⵏⵖⴷ ⵉⵎⵣⴷⴰⵖ ⴷ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⴷ ⵢⵣⵔⵉⵏ.ⵙⴽⵔ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⴰⵙⵖⵍ ⴰⵎⵇⵔⴰⵏ ⵏ ⵢⴰⵏ ⵉⴼⵔⴷⵉⵙ ⵏⵏⴰ # >>> can_arrange.call([1, 2, 4, 3, 5])
# 3
# >>> can_arrange.call([1, 2, 3])
# -1
def can_arrange(arr)
","def can_arrange(arr)
  (1...arr.length).reverse_each do |i|
    return i if arr[i] < arr[i - 1]
  end
  -1
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_can_arrange
    candidate = method(:can_arrange)
    assert_equal(3, candidate.call([1, 2, 4, 3, 5]))
    assert_equal(-1, candidate.call([1, 2, 4, 5]))
    assert_equal(2, candidate.call([1, 4, 2, 5, 6, 7, 8, 9, 10]))
    assert_equal(4, candidate.call([4, 8, 5, 7, 3]))
    assert_equal(-1, candidate.call([]))
  end
end
"
HumanEval_136,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⴽⵔⴰ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⴳⴳⵓⵜⵏ ⵏⵖⴷ ⵉⵔⴰⵔⵏ, ⵙⵙⵓⴼⵖ-ⴰⵙⵏ ⵣⵓⵏⴷ nil. ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳ ⵢⴰⵏ ⵓⵙⵏⵙⵍ.ⵉⴳⴰ ⵡⵉⵏ ""ⴱ"" ⴰⵎⵥⵥⵢⴰⵏ ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⴰⵙⵔⴷⴰⵙ (ⴰ,ⴱ), ⴳ ⵉⵍⵍⴰ 'ⴰ' # >>> largest_smallest_integers.call([2, 4, 1, 3, 5, 7])
# [nil, 1]
# >>> largest_smallest_integers.call([])
# [nil, nil]
# >>> largest_smallest_integers.call([0])
# [nil, nil]
def largest_smallest_integers(lst)
","def largest_smallest_integers(lst)
  largest_negative = nil
  smallest_positive = nil
  
  lst.each do |num|
    if num < 0
      largest_negative = num if largest_negative.nil? || num > largest_negative
    elsif num > 0
      smallest_positive = num if smallest_positive.nil? || num < smallest_positive
    end
  end
  
  [largest_negative, smallest_positive]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_largest_smallest_integers
    candidate = method(:largest_smallest_integers)
    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7]))
    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7, 0]))
    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5, 6, -2]))
    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))
    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))
    assert_equal([nil, nil], candidate.call([]))
    assert_equal([nil, nil], candidate.call([0]))
    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))
    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6, 0]))
    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, 1]))
    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100, 1]))
  end
end
"
HumanEval_137,tzm_Tfng,rb,"ⵜⴰⵖⴹⴼⵜ: ⵎⴽ ⴷⴰ ⵉⵜⵜⵓⵙⵎⴷⵢⴰ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⵙ ⵢⴰⵜ ⵜⵣⵍⵉⵜ, ⵜⵣⵎⵔ ⵜⴱⵔⵉⴷⵜ ⵏ ⵓⵙⵏⴼⵍ ⴰⴷ ⵜⴳ . ⵏⵖ , ⴰⵔ ⵉⵜⵜⵔⴰⵔ nil ⵎⴽ ⵜⴳⴰⴷ ⵜⵉⵏⴷⵉⵜⵉⵏ ⵜⵉⵙⴳⵏⴰⵏⵉⵏ. ⵉⵎⴹⴰⵏⵏ ⵏ ⵜⵉⴷⵜ, ⴰⵔ ⵉⵙⴽⴰⵔ ⴰⵎⵙⵏⴼⵍⵓⵍ ⴰⵅⴰⵜⴰⵔ ⴳ ⵡⴰⵏⴰⵡ ⵏ ⵓⵎⵙⵏⴼⵍⵓⵍ ⵏⵏⵙ.ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵉⵎⵙⵙⵓⴷⴷⵓⵏ, ⵏⵖ ⵜⵉⵙⴷⴷⵉⵢⵏ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏⵏ # >>> compare_one.call(1, 2.5)
# 2.5
# >>> compare_one.call(1, ""2,3"")
# ""2,3""
# >>> compare_one.call(""5,1"", ""6"")
# ""6""
# >>> compare_one.call(""1"", 1)
# nil
def compare_one(a, b)
","def compare_one(a, b)
  a = a.to_s.tr(',', '.').to_f if a.is_a?(String) && a.include?(',')
  b = b.to_s.tr(',', '.').to_f if b.is_a?(String) && b.include?(',')

  if a.is_a?(String) && b.is_a?(String)
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Float) && b.is_a?(Float)
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Integer) && b.is_a?(Integer)
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Integer) && b.is_a?(Float)
    a = a.to_f
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Float) && b.is_a?(Integer)
    b = b.to_f
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(String) && b.is_a?(Float)
    b = b.to_s # Only supporting variable type comparison, retain original types
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Float) && b.is_a?(String)
    a = a.to_s # Only supporting variable type comparison, retain original types
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(String) && b.is_a?(Integer)
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Integer) && b.is_a?(String)
    return nil if a == b
    return a > b ? a : b
  else
    return nil
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_compare_one
    candidate = method(:compare_one)
    assert_equal(2, candidate.call(1, 2))
    assert_equal(2.5, candidate.call(1, 2.5))
    assert_equal(3, candidate.call(2, 3))
    assert_equal(6, candidate.call(5, 6))
    assert_equal(""2,3"", candidate.call(1, ""2,3""))
    assert_equal(""6"", candidate.call(""5,1"", ""6""))
    assert_equal(""2"", candidate.call(""1"", ""2""))
    assert_equal(nil, candidate.call(""1"", 1))
  end
end
"
HumanEval_138,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ ⵙⵙⴼⵔⴰⵢ ⵎⴽ ⵜⵣⵎⵔⵎ ⴰⴷ ⵜⵔⴰⵔⴷ ⴰⵎⴹⴰⵏ n ⴰⵎⵎ ⵓⴳⵣⵓⵎ ⵏ ⴽⴽⵓⵥ ⵉⵎⴹⴰⵏ ⵉⵎⵎⵓⴹⴰⵏⵏ ⵉⴽⵙⵡⴰⵜⵏ # >>> is_equal_to_sum_even.call(4)
# false
# >>> is_equal_to_sum_even.call(6)
# false
# >>> is_equal_to_sum_even.call(8)
# true
def is_equal_to_sum_even(n)
","def is_equal_to_sum_even(n)
  return false if n < 8
  n.even?
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_equal_to_sum_even
    candidate = method(:is_equal_to_sum_even)
    assert_equal(false, candidate.call(4))
    assert_equal(false, candidate.call(6))
    assert_equal(true, candidate.call(8))
    assert_equal(true, candidate.call(10))
    assert_equal(false, candidate.call(11))
    assert_equal(true, candidate.call(12))
    assert_equal(false, candidate.call(13))
    assert_equal(true, candidate.call(16))
  end
end
"
HumanEval_139,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⴳ ⵉⵍⵍⴰ n > 0 brazilian_factorial{n} = n! * (n-1)! * (n-2)! * ... * 1! ⵉⵜⵜⵓⵙⵙⵏ ⵓⵙⴽⴽⵉⵍ ⵏ ⴱⵔⴰⵣⵉⵍ ⵙ: # >>> special_factorial.call(4)
# 288
# The function will receive an integer as input and should return the special
# factorial of this integer.
def special_factorial(n)
","def special_factorial(n)
  return 1 if n <= 1
  (1..n).inject(1) { |product, i| product * factorial(i) }
end

def factorial(num)
  return 1 if num <= 1
  (2..num).inject(1, :*)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_special_factorial
    candidate = method(:special_factorial)
    assert_equal(288, candidate.call(4))
    assert_equal(34560, candidate.call(5))
    assert_equal(125411328000, candidate.call(7))
    assert_equal(1, candidate.call(1))
  end
end
"
HumanEval_140,tzm_Tfng,rb,"ⴹⴰⵕⵜ ⵓⵢⴰ, ⵙⵙⵓⵜⵍ ⴰⴽⴽⵡ ⵉⵎⵙⴷⴷⴰⵔⵏ ⵙ - ⴷ ⵎⴽ ⴷⴰⵔ ⵢⴰⵏ ⵓⴽⵜⵓⵎ ⵓⴳⴳⴰⵔ ⵏ 2 ⵏ ⵡⴰⵏⵙⴰ ⵉⵎⴹⴼⴰⵕⵏ, ⴳ ⵓⴹⵕⵉⵚ ⵏ ⵜⵣⵍⵉⵜ, ⵙⵏⴼⵍ ⴰⴽⴽⵡ ⵡⴰⵏⵙⴰ ⵙ ⵜⴱⵔⵉⴷⵜ ⵏ ⵓⵙⵡⵓⴷⴷⵓ, # >>> fix_spaces.call("" Example"")
# ""Example""
# >>> fix_spaces.call("" Example 1"")
# ""Example_1""
# >>> fix_spaces.call("" Example 2"")
# ""_Example_2""
# >>> fix_spaces.call("" Example 3"")
# ""_Example-3""
def fix_spaces(text)
","def fix_spaces(text)
  text.strip.gsub(/\s{3,}/, '-').gsub(' ', '_')
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fix_spaces
    candidate = method(:fix_spaces)
    assert_equal(""Example"", candidate.call(""Example""))
    assert_equal(""Mudasir_Hanif_"", candidate.call(""Mudasir Hanif ""))
    assert_equal(""Yellow_Yellow__Dirty__Fellow"", candidate.call(""Yellow Yellow  Dirty  Fellow""))
    assert_equal(""Exa-mple"", candidate.call(""Exa   mple""))
    assert_equal(""-Exa_1_2_2_mple"", candidate.call(""   Exa 1 2 2 mple""))
  end
end
"
HumanEval_141,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: - ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⴳ ⵓⵙⴽⴽⵉⵍ ⵏ ⴷⴼⴼⵉⵔ ⵏ ⵜⵓⵙⴷⵉⴷⵜ ⵢⴰⵏ ⵙⴳ ⵡⵉⵏⵏⴰ ⴷⴷⵖ: ['txt', 'exe', 'dll'] ⵉⵙⴽⴽⵉⵍⵏ ⵏ ⵜⴼⵉⵏⴰⵖ ⵙ ⵜⵓⵜⵍⴰⵢⵜ ⵜⴰⵍⴰⵜⵉⵏⵉⵜ ('a'-'z' ⴷ 'A'-'Z'). - ⵓⵔ ⵉⵅⵚⵚⴰ ⴰⴷ ⵢⵉⵍⵉ ⵡⴰⵏⵙⴰ ⴷⴰⵜ ⵏ ⵜⵓⵙⴷⵉⴷⵜ, ⴰⵔ ⵜⴱⴷⴰⴷ ⵙ ⵓⴱⵔⴰⵜ ⵙⴳ - ⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ ⵉⵍⵍⴰ ⴳⵉⵙ ⵢⴰⵏ ⵓⴱⵔⵛⴽ '.' - ⵓⵔ ⵉⵅⵚⵚⴰ ⴰⴷ ⵉⵍⵉⵏ ⵓⴳⴳⴰⵔ ⵏ ⴽⵕⴰⴹ ⵏ ⵡⵓⵟⵟⵓⵏ ⴳ ⵉⵙⵎ ⵏ ⵓⴷⵍⵉⵙ (""0"" - ""9"").ⵜⵜⵓⵙⵎⵓⵏ: ⴷⴰ ⵉⵜⵜⵓⵙⵎⴳⴰⵍ ⵢⵉⵙⵎ ⵏ ⵓⴷⵍⵉⵙ ⵙ ⵉⵙⵎ ⵏ ⵜⵎⴰⵣⵉⵖⵜ ⵎⴽ ⴷ ⵎⴽ ⴷⴰ ⵇⵇⴰⵔⵏ ⴽⵓⵍⵍⵓ ⵜⵎⵣⴰⵣⵉⵏ ⴰⴷ ⴹⴰⵕⵜ:""ⴰⵢ"" ⵉⴳ ⵉⴳⴰ ⵢⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ ⴰⵣⵔⴼⴰⵏ, ⴰⵔ ⵉⵙⵡⵓⵜⵜⵓ ""ⵓⵀⵓ"" ⵎⴽ ⵓⵔ ⵉⴳⵉ. ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏ ⵉⵙⵎ ⵏ ⵓⵡⵉⴽⵉ, ⴰⵔ ⵉⵜⵜⵔⴰⵔ # >>> file_name_check.call(""example.txt"")
# ""Yes""
# >>> file_name_check.call(""1example.dll"")
# ""No""
def file_name_check(file_name)
","def file_name_check(file_name)
  # Check if there's exactly one dot in the filename
  return 'No' unless file_name.count('.') == 1
  
  # Split the filename into the name and extension
  name, extension = file_name.split('.')
  
  # Check if the name part starts with a letter
  return 'No' if name.empty? || !name[0].match?(/[a-zA-Z]/)
  
  # Check if the extension is valid
  return 'No' unless ['txt', 'exe', 'dll'].include?(extension)
  
  # Count digits in the file name
  digit_count = file_name.count(""0-9"")
  
  # Check if digits are more than three
  return 'No' if digit_count > 3
  
  'Yes'
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_file_name_check
    candidate = method(:file_name_check)
    assert_equal(""Yes"", candidate.call(""example.txt""))
    assert_equal(""No"", candidate.call(""1example.dll""))
    assert_equal(""No"", candidate.call(""s1sdf3.asd""))
    assert_equal(""Yes"", candidate.call(""K.dll""))
    assert_equal(""Yes"", candidate.call(""MY16FILE3.exe""))
    assert_equal(""No"", candidate.call(""His12FILE94.exe""))
    assert_equal(""No"", candidate.call(""_Y.txt""))
    assert_equal(""No"", candidate.call(""?aREYA.exe""))
    assert_equal(""No"", candidate.call(""/this_is_valid.dll""))
    assert_equal(""No"", candidate.call(""this_is_valid.wow""))
    assert_equal(""Yes"", candidate.call(""this_is_valid.txt""))
    assert_equal(""No"", candidate.call(""this_is_valid.txtexe""))
    assert_equal(""No"", candidate.call(""#this2_i4s_5valid.ten""))
    assert_equal(""No"", candidate.call(""@this1_is6_valid.exe""))
    assert_equal(""No"", candidate.call(""this_is_12valid.6exe4.txt""))
    assert_equal(""No"", candidate.call(""all.exe.txt""))
    assert_equal(""Yes"", candidate.call(""I563_No.exe""))
    assert_equal(""Yes"", candidate.call(""Is3youfault.txt""))
    assert_equal(""Yes"", candidate.call(""no_one#knows.dll""))
    assert_equal(""No"", candidate.call(""1I563_Yes3.exe""))
    assert_equal(""No"", candidate.call(""I563_Yes3.txtt""))
    assert_equal(""No"", candidate.call(""final..txt""))
    assert_equal(""No"", candidate.call(""final132""))
    assert_equal(""No"", candidate.call(""_f4indsartal132.""))
    assert_equal(""No"", candidate.call("".txt""))
    assert_equal(""No"", candidate.call(""s.""))
  end
end
"
HumanEval_142,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵔⴰⴷ ⵜⵙⵏⴼⵍ ⵜⵎⵙⴽⵔⵜ ⴳ ⵓⵎⵙⴷⴰⵍ ⵏⵏⴰ ⴷ ⵓⵔ ⵉⴳⵉⵏ ⵉⵏⵓⴹⴰⵏ ⵏⵏⵙ ⴰⵎⵎ ⴽⵉⴳⴰⵏ ⵏ 3 ⵏⵖ 4. ⵔⴰⴷ ⵜⵔⴰⵔ ⵜⴰⵡⵓⵔⵉ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵜⵎⵙⴽⵔⵜ ⴰⴽⴽⵡ.ⴰⴷⴷⴰⵢ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⵓⴳⴳⴰⵔ ⵏ 3 ⵔⴰⴷ ⵜⵙⵙⴽⵔ ⵜⴰⴳⵣⵣⵓⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⵓⴳⴳⴰⵔ ⵏ 4 ⵓⵔ ⵉⴳⵉ ⵓⴳⴳⴰⵔ ⵏ 3.ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵔⴰⴷ ⵜⴽⴽⵉ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵉ ⴽⵓⵍⵍⵓ ⵉⵎⴷⵢⴰⵡⵏ ⴳ ⵓⵙⵏⵙⵉ, ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵔⴰⴷ ⵜⴽⴽⵉ ⴰⵎⴽⴽⵓⵥ ⵏ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ "" # >>> lst
# [1, 2, 3]
# >>> lst
# []
# >>> lst
# [-1, -5, 2, -1, -5]
def sum_squares(lst)
","def sum_squares(lst)
  lst.map.with_index do |num, index|
    if index % 3 == 0
      num ** 2
    elsif index % 4 == 0
      num ** 3
    else
      num
    end
  end.sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sum_squares
    candidate = method(:sum_squares)
    assert_equal(6, candidate.call([1, 2, 3]))
    assert_equal(14, candidate.call([1, 4, 9]))
    assert_equal(0, candidate.call([]))
    assert_equal(9, candidate.call([1, 1, 1, 1, 1, 1, 1, 1, 1]))
    assert_equal(-3, candidate.call([-1, -1, -1, -1, -1, -1, -1, -1, -1]))
    assert_equal(0, candidate.call([0]))
    assert_equal(-126, candidate.call([-1, -5, 2, -1, -5]))
    assert_equal(3030, candidate.call([-56, -99, 1, 0, -2]))
    assert_equal(0, candidate.call([-1, 0, 0, 0, 0, 0, 0, 0, -1]))
    assert_equal(-14196, candidate.call([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]))
    assert_equal(-1448, candidate.call([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]))
  end
end
"
HumanEval_143,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ 1: ⵔⴰⴷ ⵜⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴳ ⵜⵣⵍⵉⵜ ⵜⴰⵎⴰⵢⵏⵓⵜ ⵢⴰⵜ ⴷ ⵜⵣⵍⵉⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴳ ⵜⵣⵍⵉⵜ ⵜⴰⵣⵡⴰⵔⵓⵜ.ⵜⵉⵖⵣⵉ ⵏⵏⵙ ⵜⴳⴰ ⵉⵎⴹⴰⵏ ⵉⵎⵣⵡⵓⵔⴰ, ⴷ ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⵉⵜ ⵙ ⵜⵙⵏⵜⴰⵢⵜ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵏ ⵜⴳⵓⵔⵉ ⵜⴰⵢⵎⵎⴰⵜ, ⴳ ⵜⴳⵓⵔⵉ ⴰⴷ ⵍⵍⴰⵏⵜ ⴽⵔⴰ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵉⵜⵜⵓⵣⵍⴰⵢⵏ ⵙ ⵢⴰⵏ ⵓⵙⴰⵢⵔⴰⵔ, ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵛⵛⵓⵎⵏ ⵉⵙⵎⴷⵢⴰⵏⵏ ⵜⴰⴳⵓⵔⵉ, # >>> words_in_sentence.call(""This is a test"")
# ""is""
# Example 2:
# >>> words_in_sentence.call(""lets go for swimming"")
# ""go for""
# Constraints:
# * 1 <= len(sentence) <= 100
# * sentence contains only letters
def words_in_sentence(sentence)
","def words_in_sentence(sentence)
  def is_prime?(num)
    return false if num <= 1
    (2..Math.sqrt(num)).none? { |i| num % i == 0 }
  end
  
  words = sentence.split("" "")
  prime_length_words = words.select { |word| is_prime?(word.length) }
  prime_length_words.join("" "")
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_words_in_sentence
    candidate = method(:words_in_sentence)
    assert_equal(""is"", candidate.call(""This is a test""))
    assert_equal(""go for"", candidate.call(""lets go for swimming""))
    assert_equal(""there is no place"", candidate.call(""there is no place available here""))
    assert_equal(""Hi am Hussein"", candidate.call(""Hi I am Hussein""))
    assert_equal(""go for it"", candidate.call(""go for it""))
    assert_equal("""", candidate.call(""here""))
    assert_equal(""is"", candidate.call(""here is""))
  end
end
"
HumanEval_144,tzm_Tfng,rb,"ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⴷ ⵉⵙ ⴳⴰⵏ x, ⴷ n ⵉⵎⵉⴽⵏ ⵉⵣⵔⴼⴰⵏ, ⴷ ⵓⵔ ⵖⵓⵔⵙⵏ ⴰⵔⴰ ⴰⵎⵢⴰ ⴰⵎ ⵉⵎⵙⵙⴰⵖⵏ.<numerator>/<denominator> ⴳⴰⵏ ⵉⵎⵉⴹⴰⵏ ⴷ ⵉⵎⵙⵙⴰⵖⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵓⴼⴰⵢⵏ.ⵎⴽⵍⵍⵉ ⵀⴰⵜ x ⴷ n, ⴳⴰⵏ ⴰⵙⵎⴷⵢⴰ ⵏ ⵜⵉⴼⵔⴽⵜ, ⴷ ⵖⵓⵔⵙⵏ ⵜⴰⵍⵖⴰ ⴷ ⵢⵓⵛⴽⴰⵏ, x * n. ⴷⴰ ⵜⵔⴰⵔ ⵜⴰⵡⵓⵔⵉ true ⵎⴽ ⵜⵙⵙⵎⵔⴰⵙ x * n ⵉ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴷ false ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⴽⵔⵎ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵔⴰⴷ ⵉⵙⴱⴷⴷⴰⴷⵏ ⵜⴰⴳⵓⵔⵉ # >>> simplify.call(""1/5"", ""5/1"")
# true
# >>> simplify.call(""1/6"", ""2/1"")
# false
# >>> simplify.call(""7/10"", ""10/2"")
# false
def simplify(x, n)
","def simplify(x, n)
  # Convert x and n to numerators and denominators
  num_x, den_x = x.split('/').map(&:to_i)
  num_n, den_n = n.split('/').map(&:to_i)

  # Multiply fractions: (num_x * num_n) / (den_x * den_n)
  numerator = num_x * num_n
  denominator = den_x * den_n

  # Check if the result is a whole number
  numerator % denominator == 0
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_simplify
    candidate = method(:simplify)
    assert_equal(true, candidate.call(""1/5"", ""5/1""))
    assert_equal(false, candidate.call(""1/6"", ""2/1""))
    assert_equal(true, candidate.call(""5/1"", ""3/1""))
    assert_equal(false, candidate.call(""7/10"", ""10/2""))
    assert_equal(true, candidate.call(""2/10"", ""50/10""))
    assert_equal(true, candidate.call(""7/2"", ""4/2""))
    assert_equal(true, candidate.call(""11/6"", ""6/1""))
    assert_equal(false, candidate.call(""2/3"", ""5/2""))
    assert_equal(false, candidate.call(""5/2"", ""3/5""))
    assert_equal(true, candidate.call(""2/4"", ""8/4""))
    assert_equal(true, candidate.call(""2/4"", ""4/2""))
    assert_equal(true, candidate.call(""1/5"", ""5/1""))
    assert_equal(false, candidate.call(""1/5"", ""1/5""))
  end
end
"
HumanEval_145,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⵙⵙⵓⴷⵙ-ⵜⵏⵜ ⵅⴼ ⵓⵙⵏⴼⴰⵔ ⵏⵏⵙⵏⵜ ⴳ ⵓⵙⵏⵙⵍ ⴰⵎⵣⵡⴰⵔⵓ.ⵜⴰⵖⴹⴼⵜ: ⵎⴽ ⵍⵍⴰⵏⵜ ⴽⵉⴳⴰⵏ ⵏ ⵜⵏⴰⴼⵓⵜⵉⵏ ⵙ ⵓⵖⵣⵓⵔ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙⵏⵜ, ⵙ ⵓⵙⵙⵓⴷⵙ ⵏ ⵓⴽⵙⴰⵢ ⵙ ⵓⵖⵣⵓⵔ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙⵏ.ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵙⵎⵓⵏⵏ ⴰⵙⵔⵔⵓⵙ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ # >>> order_by_points.call([1, 11, -1, -11, -12])
# [-1, -11, 1, -12, 11]
# >>> order_by_points.call([])
# []
def order_by_points(nums)
","def order_by_points(nums)
  nums.sort_by.with_index do |num, index|
    [num.to_s.chars.map(&:to_i).sum.abs, index]
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_order_by_points
    candidate = method(:order_by_points)
    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))
    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))
    assert_equal([], candidate.call([]))
    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))
    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))
    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))
  end
end
"
HumanEval_146,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⵉⵎⵉⴹⵏ ⵉⵎⵣⵡⵓⵔⴰ ⴷ ⵉⵎⵉⴹⵏ ⵉⵎⴳⴳⵓⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⴳⴰⵏ ⵉⵎⵉⴹⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ (1, 3, 5, 7, 9).ⴰⵎⴹⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵓⵙⵏⵙⵍ ⵏⵏⴰ ⵢⵓⴳⵔⵏ 10 ⴷ ⵙⵏⴰⵜ ⵙⴽⵔ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏⵏ ⴰⵎⵎ ⵉⵏⴽⵛⵓⵎⵏ ⴷ ⵉⵏⴽⵔⴰⴼ # >>> specialFilter.call([15, -73, 14, -15])
# 1
# >>> specialFilter.call([33, -2, -3, 45, 21, 109])
# 2
def specialFilter(nums)
","def specialFilter(nums)
  nums.count do |num|
    num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_specialFilter
    candidate = method(:specialFilter)
    assert_equal(0, candidate.call([5, -2, 1, -5]))
    assert_equal(1, candidate.call([15, -73, 14, -15]))
    assert_equal(2, candidate.call([33, -2, -3, 45, 21, 109]))
    assert_equal(4, candidate.call([43, -12, 93, 125, 121, 109]))
    assert_equal(3, candidate.call([71, -2, -33, 75, 21, 19]))
    assert_equal(0, candidate.call([1]))
    assert_equal(0, candidate.call([]))
  end
end
"
HumanEval_147,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: ⴷ a[i] + a[j] + a[k] ⴷ ⴰⵎⵔⴽⵙ ⵏ 3. ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵓⵟⵟⵓⵏ ⵏ ⵜⵔⴱⴰⵜⵉⵏ (a[i], a[j], a[k]) ⵏ a ⴳ i < j < k, ⵉ ⴽⵓ i (1 ≤ i ≤ n), ⴰⵜⵉⴳ ⵏ a[i] = i * i - i + 1. ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽ ⵢⴰⵏ ⵉⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n. ⵅⵙ ⴰⴷ ⵜⵙⴽⵔⴷ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ a ⵏ ⵜⵉⵖⵣⵉ n.# >>> get_max_triples.call(5)
# 1
# Explanation: 
# a = [1, 3, 7, 13, 21]
# The only valid triple is (1, 7, 13).
def get_max_triples(n)
","def get_max_triples(n)
  a = Array.new(n) { |i| (i + 1) * (i + 1) - (i + 1) + 1 }
  count = 0
  
  (0...n).each do |i|
    (i+1...n).each do |j|
      (j+1...n).each do |k|
        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0
      end
    end
  end
  
  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_max_triples
    candidate = method(:get_max_triples)
    assert_equal(1, candidate.call(5))
    assert_equal(4, candidate.call(6))
    assert_equal(36, candidate.call(10))
    assert_equal(53361, candidate.call(100))
  end
end
"
HumanEval_148,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ ⵓⵔ ⴳⵉⵏ ⵉⵙⵎⴰⵡⵏ ⵏ ⵜⵣⵡⵉⵏⵏⵉⵜⵏ ⵉⴽⵔⵓⵔⵏ.ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵔⴰⴷ ⵜⵙⴽⵔ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵉⴼⵓⵍⴽⵉⵏ ⵎⴽ ⵜⵔⴰⴱⴱⵓⵜ1 ⵏⵖⴷ ⵜⵔⴰⴱⴱⵓⵜ2 ⵜⴰⵎⴰ ⵏ ⵜⴰⴼⵓⴽⵜ.ⵉⵍⵍⴰⵏ ⴳⵔ ⵜⵣⵡⴰⴳⵜ ⵏ ⵜⵣⵡⴰⴳⵜ 1 ⴷ ⵜⵣⵡⴰⴳⵜ ⵏ ⵜⵣⵡⴰⴳⵜ 2, ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵔⴰⴷ ⵜⵙⴽⵔ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⴰⴽⴽⵡ ⵉⵜⵔⴰⵏ ⵏⵏⴰ ⵖⵓⵔ ⵉⵍⵍⴰ ⵓⴽⵎⵓⵔ ⵏ ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵙⵉⵏ ⵉⵙⵎⴰⵡⵏ ⵏ ⵜⵣⵡⵉⵏⵏⵉⵜⵉⵏ ⴰⵎⵎ ⵜⵉⴼⵉⵏⴰⵖ planet1 ⴷ planet2. ⵓⵕⴰⵏⵓⵙ, ⵏⵉⴱⵜⵓⵏ.ⵉⴳⴰ ⵎⵉⵔⴽⵓⵔⵉ, ⵡⴰⵏⵏⴰ ⵢⴰⴹⵏ ⵉⴳⴰ ⴼⵉⵏⵓⵙ, ⴷⴼⴼⵉⵔ ⵏ ⵖⴰ ⵉⴳⴰ ⵡⴰⴽⴰⵍ, ⵎⴰⵕⵚ, ⵊⵓⴱⵉⵜⵔ, ⵙⴰⵜⵓⵔⵏ, ⵍⵍⴰⵏⵜ 8 ⵏ ⵜⵣⵡⵉⵏⵏⵉⵏ ⴳ ⵓⴳⵔⴰⵡ ⵏ ⵜⴰⴼⵓⴽⵜ ⵏⵏⵖ: ⵡⵉⵏⵏⴰ ⵢⵓⴳⵔⵏ ⵉ ⵜⴰⴼⵓⴽⵜ # >>> bf.call(""Jupiter"", ""Neptune"")
# [""Saturn"", ""Uranus""]
# >>> bf.call(""Earth"", ""Mercury"")
# ""Venus""
# >>> bf.call(""Mercury"", ""Uranus"")
# [""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""]
def bf(planet1, planet2)
","def bf(planet1, planet2)
  planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
  
  idx1 = planets.index(planet1)
  idx2 = planets.index(planet2)
  
  return [] if idx1.nil? || idx2.nil?

  start_idx, end_idx = [idx1, idx2].sort
  
  planets[(start_idx + 1)...end_idx]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_bf
    candidate = method(:bf)
    assert_equal([""Saturn"", ""Uranus""], candidate.call(""Jupiter"", ""Neptune""))
    assert_equal([""Venus""], candidate.call(""Earth"", ""Mercury""))
    assert_equal([""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""], candidate.call(""Mercury"", ""Uranus""))
    assert_equal([""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""], candidate.call(""Neptune"", ""Venus""))
    assert_equal([], candidate.call(""Earth"", ""Earth""))
    assert_equal([], candidate.call(""Mars"", ""Earth""))
    assert_equal([], candidate.call(""Jupiter"", ""Makemake""))
  end
end
"
HumanEval_149,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⴷ ⵉⵙ ⵔⴰⴷ ⵖⵓⵔ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴰⴽⴽⵡ ⵜⵉⵖⵣⵉ ⵜⴰⵣⴳⵣⴰⵡⵜ.ⵜⵅⵙ ⵜⵡⵓⵔⵉ ⴰⴷ ⵜⵙⴽⵔ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⴳ ⵓⵙⵙⵓⴷⵙ ⵉⵜⵜⵓⵙⵎⵙⴰⵙⴰⵏ.ⵎⴽ ⴷⴰⵔ ⵙⵏⴰⵜ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵜⵉⵖⵣⵉ ⵜⴰⵣⴳⵣⴰⵡⵜ, ⵙⵙⵓⴷⵙ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵙ ⵓⴽⵍⵉⵙ.ⵔⴰⴷ ⵢⴰⴽⴽⴰ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙ ⵓⵡⵜⵜⴰⵙ ⴰⴷ.ⵔⴰⴷ ⵜⵙⵙⵓⴷⵙⵜ ⵜⴰⵍⵖⴰ ⵏ ⵓⵙⵏⵙⵍ ⵙ ⵓⴽⵓⴷ ⵏ ⴽⵓ ⵜⴳⵓⵔⵉ, ⴷ ⵔⴰⴷ ⵜⵙⵙⵓⴷⵙⵜ ⴷ ⵖⵉⵢⵏ ⴰⴷ ⴷⵉⴳⵙ ⵉⵍⵉⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵢⴰⵍⵍⴰⵏ.ⵉⴳⴰ ⵓⵎⵙⴳⵏⴰⴼ ⴰⵀⴰ ⵢⴰⵏ ⵓⵎⵙⴳⵏⴰⴼ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵓⵔ ⴷ ⴰⵎⵙⴳⵏⴰⴼ ⵏ ⵉⵎⴹⴰⵏⵏ, ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵉⵜⵜⵓⵙⵎⵓⵜⵜⴳⵏ ⵙ ⵢⴰⵏ ⵓⴽⵓⴷ ⵉⵜⵜⵓⵙⵎⵓⵜⵜⴳⵏ, ⴷⴰ ⵉⵜⵜⵓⵙⵉⴼⴹ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵏⵏⴰ ⵖⵓⵔⵙⵏ ⵜⵉⵖⵣⵉ ⵜⴰⵣⴳⵣⴰⵡⵜ ⵙⴳ ⵜ, ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⵎⵥⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵙⵉⴹⵏⵏ ⴰⵎⵎ ⵓⴱⴰⵔⴰⵣ, # >>> list_sort.call([""aa"", ""a"", ""aaa""])
# [""aa""]
# >>> list_sort.call([""ab"", ""a"", ""aaa"", ""cd""])
# [""ab"", ""cd""]
def sorted_list_sum(lst)
","def list_sort(arr)
  arr.select { |s| s.length.even? }
     .sort_by { |s| [s.length, s] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sorted_list_sum
    candidate = method(:sorted_list_sum)
    assert_equal([""aa""], candidate.call([""aa"", ""a"", ""aaa""]))
    assert_equal([""AI"", ""asdf"", ""school""], candidate.call([""school"", ""AI"", ""asdf"", ""b""]))
    assert_equal([], candidate.call([""d"", ""b"", ""c"", ""a""]))
    assert_equal([""abcd"", ""dcba""], candidate.call([""d"", ""dcba"", ""abcd"", ""a""]))
    assert_equal([""AI"", ""ai"", ""au""], candidate.call([""AI"", ""ai"", ""au""]))
    assert_equal([], candidate.call([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]))
    assert_equal([""cc"", ""dd"", ""aaaa"", ""bbbb""], candidate.call([""aaaa"", ""bbbb"", ""dd"", ""cc""]))
  end
end
"
HumanEval_150,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵉⴳⴰ ⵓⵟⵟⵓⵏ ⴰⵎⵣⵡⴰⵔⵓ ⵔⴰⴷ ⵢⴰⴽⴽⴰ ⴰⵜⵉⴳ ⵏ y ⵎⴽ ⵓⵔ ⵢⴰⴽⴽⴰ.ⴰⵖⴰⵡⴰⵙ ⴰⵎⵢⵉⵡⵏ ⵏⵏⴰ ⵉⵇⵇⴰⵏ ⴰⴷ ⵢⴰⴽⴽⴰ ⴰⵜⵉⴳ ⵏ x ⵎⴽ ⵜⴳⴰ n # >>> x_or_y.call(7, 34, 12)
# 34
# >>> x_or_y.call(15, 8, 5)
# 5
def x_or_y(n, x, y)
","def x_or_y(n, x, y)
  require 'prime'
  n.prime? ? x : y
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_x_or_y
    candidate = method(:x_or_y)
    assert_equal(34, candidate.call(7, 34, 12))
    assert_equal(5, candidate.call(15, 8, 5))
    assert_equal(33, candidate.call(3, 33, 5212))
    assert_equal(3, candidate.call(1259, 3, 52))
    assert_equal(-1, candidate.call(7919, -1, 12))
    assert_equal(583, candidate.call(3609, 1245, 583))
    assert_equal(129, candidate.call(91, 56, 129))
    assert_equal(1234, candidate.call(6, 34, 1234))
    assert_equal(0, candidate.call(1, 2, 0))
    assert_equal(2, candidate.call(2, 2, 0))
  end
end
"
HumanEval_151,tzm_Tfng,rb,"ⴳ ⵓⵎⵙⴳⵏⴰⵙ ⵏⵏⴰ ⵓⵔ ⵉⵎⵙⴰⵙⴰⵏ. ⵔⵥⵎ ⵉⵎⴹⴰⵏⵏ ⵏⵏⴰ ⵓⵔ ⵉⴳⵉⵏ ⵉⵎⴹⴰⵏⵏ ⵉⵎⴷⴷⴰⴷⵏ.ⵙ ⵓⵙⴽⴽⵉⵍ ⵏ ⵉⵎⴹⴰⵏⵏ, ⵙⵙⵓⴼⵖ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵉⵎⴹⴰⵏⵏ ⵏ ⵓⵙⴽⴽⵉⵍ # >>> double_the_difference.call([1, 3, 2, 0])
# 10
# >>> double_the_difference.call([-1, -2, 0])
# 0
# >>> double_the_difference.call([9, -2])
# 81
# >>> double_the_difference.call([0])
# 0
# If the input array is empty, return 0.
def double_the_difference(lst)
","def double_the_difference(lst)
  lst.select { |n| n.is_a?(Integer) && n.odd? && n >= 0 }
     .map { |n| n ** 2 }
     .sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_double_the_difference
    candidate = method(:double_the_difference)
    assert_equal(0, candidate.call([]))
    assert_equal(25, candidate.call([5.0, 4.0]))
    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))
    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))
    assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))
    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))
    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))
  end
end
"
HumanEval_152,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: ⴰⵜⵉⴳ ⵏⵏⵓⵏ ⵉⴳⴰ 0, ⵎⴽ ⵓⵔ ⵉⴳⵉ, ⴰⵜⵉⴳ ⵏⵏⵓⵏ ⵉⴳⴰ ⴰⵎⵣⴰⵔⴰⵢ ⴰⵖⴰⵔⴰⵏ ⴳⵔ ⵓⵙⵏⵖⵎⵙ ⴷ ⵜⵏⴰⴼⵓⵜ.ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵜⵉⵖⵣⵉ ⵏⵏⴰ ⴷ ⵢⴰⴽⴽⴰⵏ ⵜⴰⵖⵣⵉ ⵏ ⴽⵓ ⴰⵙⵏⵖⵎⵙ. ⵎⴽ ⵜⵔⵉⵜ ⵙ ⵜⴷⵓⵙⵉ, ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵙⵏⴰⵜ ⵏ ⵜⵔⵎⵉⵏ ⵏ ⵜⵏⵇⵇⵉⵟⵉⵏ ⴷ ⵉⵙⵏⵓⵎⵎⴰⵍⵏ ⵏ ⵜⵉⵖⵣⵉ ⵉⵎⵣⴰⵔⴰⵢⵏ, ⴳ ⴽⵓ ⵢⴰⵏ ⵏ ⵉⵙⵏⵎⴽⵜⴰⵏ ⴷⴰ ⵉⵙⵙⴼⵍⴷ ⵢⴰⵏ ⵓⵎⵙⴰⵙⴰ.ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵏⵎ ⵎⴽ ⵜⵙⵙⵏ ⵢⴰⵏ ⵓⴼⴳⴰⵏ ⵙ ⵜⴷⵓⵙⵉ ⵜⵢⴰⴼⵓⵜⵉⵏ ⵏ ⴽⵔⴰ ⵏ ⵉⵎⵃⵉⵣⵡⴰⵔⵏ.ⵙ ⵡⴰⴷⴷⴰⴷ ⵉⵖⵓⴷⴰⵏ ⵔⴰⴷ ⵏⵙⵙⴽⵜⵉ ⴷ ⵏⵙⵎⵣⴰⵣⴰⵍ.ⵔⴰⴷ ⵜⵙⵙⵏⵎ ⵜⵉⴼⵔⵉⵙⵉⵏ ⴷ ⵜⵡⵏⴳⵉⵎⵉⵏ ⵏⵏⴰ ⵖⵓⵔⴽ ⴳ ⵜⵉⵣⵉ ⴰⴷⵀⴰⵜ ⵓⵔ ⵍⵉⵖ ⴽⵓⵍⵍⵓ ⵢⴰⵏ ⵡⴰⵜⵉⴳ ⵏ ⵜⵢⴰⴼⵓⵜ ⵏ ⴽⵔⴰ ⵏ ⵓⵙⵡⵓⵔⵉ ⵉⵜⵜⵓⵣⵎⵔⵏ ⵣⵉ ⵣⵉⴽⴽ .# >>> compare.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
# [0, 0, 0, 0, 3, 3]
# >>> compare.call([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])
# [4, 4, 1, 0, 0, 6]
def compare(game, guess)
","def compare(game, guess)
  game.zip(guess).map { |score, prediction| (score - prediction).abs }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_compare
    candidate = method(:compare)
    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))
    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))
    assert_equal([2, 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))
    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))
  end
end
"
HumanEval_153,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: (ⴰⵣⵎⵣ ⵏⵏⵙ ⵉⴳⴰ -1).return ""Slices.SErviNGSliCes"" ⴰⵛⴽⵓ ""SErviNGSliCes"" ⵉⴳⴰ ⴰⵙⵖⵣⵣⵉⴼ ⴰⴽⴽⵡ ⵉⴷⵓⵙⵏ ⵉⵙⵎⵓⵜⵜⴳⵏ: ['SERVINGSliCes', 'Cheese', 'StuFfed'] ⵀⴰⵜ ⵔⴰⴷ ⵜⵙⵙⵏⴷⵙ ⵓⵎⴷⵢⴰ, ⵎⴽ ⵜⵓⵎⵥⴷ ""Slices"" ⴰⵎⵎ ⵜⵔⵎⵜ ⴷ ⵓⵎⵙⴳⴷⴰⵍ ⵏ ⵔⵥⵎ ⴰⵢⵏⵏⴰ ⴷ ⵢⵓⵛⴽⴰⵏ ⴳ ⵓⵎⵣⵡⴰⵔⵓ ⴳ ⵓⵙⵏⵙⵉ.ⵎⴽ ⵍⵍⴰⵏⵜ ⵙⵏⴰⵜ ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ ⵜⵣⵣⵉⴳⵣⵉⵏ ⵙ ⵢⴰⵜ ⵜⵣⵎⵔⵜ, ⵔⴰⴷ ⵜⵙⵙⵏⵎformat: ClassName.StrongestExtensionName.  ⴰⵖⴰⵡⴰⵙ ⵏ ⵓⵙⵎⵓⵜⵜⴳⵔⴰⴷ ⵜⵙⵙⵏⵎ ⴰⵙⵖⵣⵣⵉⴼ ⴰⴷⵓⵙⵏ ⴷ ⵜⵔⴰⵔ ⵢⴰⵜ ⵜⵉⴼⵔⵜ ⴳ ⵓⵢⴰ ⴳ ⵉⵙⵎ ⵏ ⵓⵙⵖⵣⵣⵉⴼ, ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⵣⵎⵔⵜ ⵙ ⵜⴽⵔⵔⴰⵢⵜ CAP - SM. ⵜⵉⵔⵔⴰ ⴳ ⵉⵙⵎ ⵏ ⵓⵙⵖⵣⵣⵉⴼ, ⴷ SM ⴰⴷ ⵉⴳⴰⵏ ⵓⵟⵟⵓⵏ ⵏ ⵜⵉⵔⵔⴰ ⵜⵉⵎⵥⵢⴰⵏⵉⵏ ⵜⴰⴷⵓⵙⵉ ⵏ ⵓⵙⵙⵖⵣⵣⵉⴼ ⴰⴷ ⵜⴳⴰ ⵜⵜ: ⴰⴷ ⵜⴳ CAP ⵓⵟⵟⵓⵏ ⵏ ⵓⵡⵔⵉⴽ ⴰⵎⵇⵔⴰⵏ ⵔⴰⴷ ⵜⵜⵓⵙⵎⵔⴰⵙⵏ ⵉⵙⵖⵣⵏⵏ ⵃⵎⴰ ⴰⴷ ⵜⵜⵓⵣⵏⵉⵏ ⵉⵙⵍⵎⴰⴷⵉⵏ ⵢⴰⴹⵏⵉⵏ ⵉ ⵓⵙⵍⵎⴷ.ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵡⵍⴰⵏ ⵏ ⵓⵙⵎⵉⵍ (ⵜⴰⵙⵉⵔⵜ) ⴷ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵉⵙⵖⵣⵏ.# >>> Strongest_Extension.call(""my_class"", [""AA"", ""Be"", ""CC""])
# ""my_class.AA""
def Strongest_Extension(class_name, extensions)
","def Strongest_Extension(class_name, extensions)
  strongest_extension = extensions.max_by do |extension|
    cap_count = extension.count('A-Z')
    sm_count = extension.count('a-z')
    cap_count - sm_count
  end
  ""#{class_name}.#{strongest_extension}""
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_Strongest_Extension
    candidate = method(:Strongest_Extension)
    assert_equal(""Watashi.eIGHt8OKe"", candidate.call(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""]))
    assert_equal(""Boku123.YEs.WeCaNe"", candidate.call(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""]))
    assert_equal(""__YESIMHERE.NuLl__"", candidate.call(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""]))
    assert_equal(""K.TAR"", candidate.call(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""]))
    assert_equal(""__HAHA.123"", candidate.call(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""]))
    assert_equal(""YameRore.okIWILL123"", candidate.call(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""]))
    assert_equal(""finNNalLLly.WoW"", candidate.call(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""]))
    assert_equal(""_.Bb"", candidate.call(""_"", [""Bb"", ""91245""]))
    assert_equal(""Sp.671235"", candidate.call(""Sp"", [""671235"", ""Bb""]))
  end
end
"
HumanEval_154,tzm_Tfng,rb,"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵙⵏⴰⵜ ⵜⴳⵓⵔⵉⵡⵉⵏ. ⵔⴰⴷ ⵜⵔⵉⵜⵓⵔⵏ ⵜⵉⴷⵜ ⵎⴽ ⵜⴳⴰ ⵜⴳⵓⵔⵉ ⵜⵉⵙⵙ ⵙⵏⴰⵜ ⵏⵖ ⴽⵔⴰ ⵏ ⵜⵙⵓⵜⵍⵜ ⵏⵏⵙ ⵢⴰⵜ ⵜⵉⵔⵔⴰ ⵏ ⵜⴳⵓⵔⵉ ⵜⴰⵎⵣⵡⴰⵔⵓⵜ # >>> cycpattern_check.call(""abcd"", ""abd"")
# false
# >>> cycpattern_check.call(""hello"", ""ell"")
# true
# >>> cycpattern_check.call(""whassup"", ""psus"")
# false
# >>> cycpattern_check.call(""abab"", ""baa"")
# true
# >>> cycpattern_check.call(""efef"", ""eeff"")
# false
# >>> cycpattern_check.call(""himenss"", ""simen"")
# true
def cycpattern_check(a, b)
","def cycpattern_check(a, b)
  (0...b.length).each do |i|
    rotated_b = b[i..-1] + b[0...i]
    return true if a.include?(rotated_b)
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_cycpattern_check
    candidate = method(:cycpattern_check)
    assert_equal(false, candidate.call(""xyzw"", ""xyw""))
    assert_equal(true, candidate.call(""yello"", ""ell""))
    assert_equal(false, candidate.call(""whattup"", ""ptut""))
    assert_equal(true, candidate.call(""efef"", ""fee""))
    assert_equal(false, candidate.call(""abab"", ""aabb""))
    assert_equal(true, candidate.call(""winemtt"", ""tinem""))
  end
end
"
HumanEval_155,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: ⵉⴳ ⴷⴰⵔⴽ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ, ⵙⵙⵓⴼⵖ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ ⴷ ⵡⵉⵏ ⵡⴰⵔ ⵉⵎⵎⵔⵡⴰⵙⵏ. # >>> even_odd_count.call(-12)
# [1, 1]
# >>> even_odd_count.call(123)
# [1, 2]
def even_odd_count(num)
","def even_odd_count(num)
  num.to_s.chars.map(&:to_i).select { |digit| digit != 0 }.partition(&:even?).map(&:count)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_even_odd_count
    candidate = method(:even_odd_count)
    assert_equal([0, 1], candidate.call(7))
    assert_equal([1, 1], candidate.call(-78))
    assert_equal([2, 2], candidate.call(3452))
    assert_equal([3, 3], candidate.call(346211))
    assert_equal([3, 3], candidate.call(-345821))
    assert_equal([1, 0], candidate.call(-2))
    assert_equal([2, 3], candidate.call(-45347))
    assert_equal([1, 0], candidate.call(0))
  end
end
"
HumanEval_156,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ: ⵜⵉⵎⵥⴰ: 1 <= num <= 1000 ⴷ ⵙⵔⵙⵏ-ⵜ ⵙ ⵡⴰⵔⵔⴰⵜⵏ ⵉⵎⵥⵥⵢⴰⵏⵏ.ⵙ ⵓⵙⵙⴽⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵏⵖⴰⵏⵏ, ⵙⵙⵓⴼⵖ ⴰⵎⴹⴰⵏ ⵏⵏⵙ ⴰⵕⵓⵎⴰⵏ ⴰⵎⵎ ⵜⴰⵖⵉⵍⵜ, # >>> int_to_mini_roman.call(19)
# ""xix""
# >>> int_to_mini_roman.call(152)
# ""clii""
# >>> int_to_mini_roman.call(426)
# ""cdxxvi""
def int_to_mini_roman(number)
","def int_to_mini_roman(number)
  values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
  numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']

  result = ''
  values.each_with_index do |value, index|
    while number >= value
      number -= value
      result += numerals[index]
    end
  end

  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_int_to_mini_roman
    candidate = method(:int_to_mini_roman)
    assert_equal(""xix"", candidate.call(19))
    assert_equal(""clii"", candidate.call(152))
    assert_equal(""ccli"", candidate.call(251))
    assert_equal(""cdxxvi"", candidate.call(426))
    assert_equal(""d"", candidate.call(500))
    assert_equal(""i"", candidate.call(1))
    assert_equal(""iv"", candidate.call(4))
    assert_equal(""xliii"", candidate.call(43))
    assert_equal(""xc"", candidate.call(90))
    assert_equal(""xciv"", candidate.call(94))
    assert_equal(""dxxxii"", candidate.call(532))
    assert_equal(""cm"", candidate.call(900))
    assert_equal(""cmxciv"", candidate.call(994))
    assert_equal(""m"", candidate.call(1000))
  end
end
"
HumanEval_157,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: 90 ⵜⵉⵙⴽⴼⵍⵜ. ⵉⴳⴰ ⵓⴽⵏⴰⵔⵉ ⵏ ⵓⵥⵍⴰⵢ ⵏ ⵜⵉⴼⵓⵍⵜ ⵢⴰⵏ ⵓⴽⵏⴰⵔⵉ ⴳ ⵉⵍⵍⴰ ⵢⴰⵏ ⵓⴽⵏⴰⵔⵉ ⵏ ⵜⵉⴼⵓⵍⵜ ⵏ ⵜⵉⴼⵓⵍⵜ ⵏⵖ ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵢⴰⵏ ⵓⴽⵏⵉⵡ ⴰⵎⵣⴳⵓⵏ, ⵓⵔ ⵉⴳⵉ ⵜⵉⴷⵜ.ⵥⵕⵏ ⵜⵉⵖⵣⵉ ⵏ ⴽⵕⴰⴹ ⵏ ⵜⴼⵓⵍⵉⵏ ⵏ ⵢⴰⵏ ⵓⴽⵕⴰⴹ. ⵔⵔⵓⵜⵓⵔ ⵜⵉⴷⵜ ⵎⴽ ⵥⵕⵏ ⴽⵕⴰⴹ # >>> right_angle_triangle.call(3, 4, 5)
# true
# >>> right_angle_triangle.call(1, 2, 3)
# false
def right_angle_triangle(a, b, c)
","def right_angle_triangle(a, b, c)
  sides = [a, b, c].sort
  sides[0]**2 + sides[1]**2 == sides[2]**2
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_right_angle_triangle
    candidate = method(:right_angle_triangle)
    assert_equal(true, candidate.call(3, 4, 5))
    assert_equal(false, candidate.call(1, 2, 3))
    assert_equal(true, candidate.call(10, 6, 8))
    assert_equal(false, candidate.call(2, 2, 2))
    assert_equal(true, candidate.call(7, 24, 25))
    assert_equal(false, candidate.call(10, 5, 7))
    assert_equal(true, candidate.call(5, 12, 13))
    assert_equal(true, candidate.call(15, 8, 17))
    assert_equal(true, candidate.call(48, 55, 73))
    assert_equal(false, candidate.call(1, 1, 1))
    assert_equal(false, candidate.call(2, 2, 10))
  end
end
"
HumanEval_158,tzm_Tfng,rb,"ⵉⵙⴽⴽⵉⵍⵏ, ⵔⵎⵙⵏ ⵡⴰⵏⵏⴰ ⵢⵓⵛⴽⴰⵏ ⴳ ⵓⵣⵡⵍ ⴳ ⵓⵏⵎⴰⵍⴰ ⵏ ⵓⵙⴽⴽⵉⵍ. ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵢⵉⵡⵏ. ⵎⴽ ⴷⴰⵔ ⴽⵉⴳⴰⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵢⵉⵡⵏ ⴰⵔ ⵉⵜⵜⵉⵍⵉ ⴳ ⵓⵎⵙⴳⵏⴰⴼ ⴽⵉⴳⴰⵏ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ. ⵔⴰⴷ ⵢⴰⴽⴽⴰ ⵜⴳⵓⵔⵉ ⵙ ⵓⵟⵟⵓⵏ ⴰⵎⵇⵔⴰⵏ ⵙⵔⵓⵙ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⵎⵥⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵙⴽⴽⵉⵍⵏ.# >>> find_max.call([""name"", ""of"", ""string""])
# ""string""
# >>> find_max.call([""name"", ""enam"", ""game""])
# ""enam""
# >>> find_max.call([""aaaaaaa"", ""bb"", ""cc""])
# ""aaaaaaa""
def find_max(words)
","def find_max(words)
  # Helper function to count unique characters
  def unique_char_count(word)
    word.chars.uniq.size
  end

  words.max_by { |word| [unique_char_count(word), -word] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_find_max
    candidate = method(:find_max)
    assert_equal(""string"", candidate.call([""name"", ""of"", ""string""]))
    assert_equal(""enam"", candidate.call([""name"", ""enam"", ""game""]))
    assert_equal(""aaaaaaa"", candidate.call([""aaaaaaa"", ""bb"", ""cc""]))
    assert_equal(""abc"", candidate.call([""abc"", ""cba""]))
    assert_equal(""footbott"", candidate.call([""play"", ""this"", ""game"", ""of"", ""footbott""]))
    assert_equal(""gonna"", candidate.call([""we"", ""are"", ""gonna"", ""rock""]))
    assert_equal(""nation"", candidate.call([""we"", ""are"", ""a"", ""mad"", ""nation""]))
    assert_equal(""this"", candidate.call([""this"", ""is"", ""a"", ""prrk""]))
    assert_equal(""b"", candidate.call([""b""]))
    assert_equal(""play"", candidate.call([""play"", ""play"", ""play""]))
  end
end
"
HumanEval_159,tzm_Tfng,rb,"ⴰⵎⴷⵢⴰ: ⵎⴽ ⵓⵔ ⵍⵍⵉⵏ ⵉⵇⵇⵉⵎⵏ ⵏ ⵜⵔⵖⵉ, ⵔⴰⴷ ⵜⵙⵙⵓⵜⵎ ⴰⴽⴽⵡ ⵜⵔⵖⵉ ⵢⴰⴷⵏ, ⵎⴰⵛⴰ ⵔⴰⴷ ⵜⵇⵇⵉⵎ ⵜⵔⵖⵉ.ⴰⵟⵟⴰⵙ ⵏ ⵜⵔⵖⵉ ⵍⵍⵉ ⴷ ⵢⴰⴷⴷⴰⴷⵏ ⴷⴼⴼⵉⵔ ⵏ ⵜⴷⴰⵍⴰ ⵏⵏⴽ ] ⵔⴰⴷ ⵜⵙⵙⵏⴼⵍⴷ ⵢⴰⵏ ⵓⵙⵏⴼⵍⵓⵍ ⵏ [ ⵡⵓⵟⵟⵓⵏ ⴰⴽⴽⵡ ⵏ ⵜⵔⵖⵉ ⵍⵍⵉ ⵜⵙⵙⵓⵜⵎⴷ ⴷⴼⴼⵉⵔ ⵏ ⵜⴷⴰⵍⴰ, ⵎⴰⵛⴰ ⵖⵉⵍⴰⴷ ⵉⵅⵚⵚⴰ ⴰⴷ ⵜⵙⵙⵓⵜⵎ ⵓⴳⴳⴰⵔ ⵏ ⵉⴽⴰⵔⵉⵜⵏ ⵃⵎⴰ ⴰⴷ ⵜⵙⵙⵓⵜⵎ ⵉⵛⴰⴽⴰⵏ ⵏ ⵡⴰⵙⵙ.ⵏⵜⵜⴰ ⴷ ⴰⵎⵛⵉⵏⵡⵉ ⵉⵔⵖⴰⵏ, ⴷ ⵜⵙⵙⵓⵜⵎ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵔⵖⴰⵏ, # >>> eat.call(5, 6, 10)
# [11, 4]
# >>> eat.call(4, 8, 9)
# [12, 1]
# >>> eat.call(1, 10, 10)
# [11, 0]
# >>> eat.call(2, 11, 5)
# [7, 0]
# Variables:
# @number : integer
# the number of carrots that you have eaten.
# @need : integer
# the number of carrots that you need to eat.
# @remaining : integer
# the number of remaining carrots thet exist in stock
# Constrain:
# * 0 <= number <= 1000
# * 0 <= need <= 1000
# * 0 <= remaining <= 1000
# Have fun :)
def eat(number, need, remaining)
","def eat(number, need, remaining)
  total_eaten = number + [need, remaining].min
  carrots_left = [remaining - need, 0].max
  [total_eaten, carrots_left]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_eat
    candidate = method(:eat)
    assert_equal([11, 4], candidate.call(5, 6, 10))
    assert_equal([12, 1], candidate.call(4, 8, 9))
    assert_equal([11, 0], candidate.call(1, 10, 10))
    assert_equal([7, 0], candidate.call(2, 11, 5))
    assert_equal([9, 2], candidate.call(4, 5, 7))
    assert_equal([5, 0], candidate.call(4, 5, 1))
  end
end
"
HumanEval_160,tzm_Tfng,rb,"ⴰⵔⵔⴰⵢ ⵏ ⵓⵎⵙⴽⴰⵔ ⵖⵓⵔⵙ ⵢⴰⵏ ⵓⵎⵙⴽⴰⵔ, ⴷ ⴰⵔⵔⴰⵢ ⵏ ⵓⵎⵙⴽⴰⵔ ⵖⵓⵔⵙ ⵙⵉⵏ ⵉⵎⵙⴽⴰⵔⵏ.ⵉⴳⴰ ⵓⴱⵔⴰⵏⴷ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⵔⵉⵏ.ⵜⵉⵖⵣⵉ ⵏ ⵓⵙⵏⵙⵉ ⵏ ⵓⵎⵙⴽⴰⵔ ⵜⴳⴰ ⵜⵜ ⵜⵉⵖⵣⵉ ⵏ ⵓⵙⵏⵙⵉ ⵏ ⵓⵎⵙⴽⴰⵔ ⵎⵉⵏⵓⵙ ⵢⴰⵏ.ⵜⴰⵖⴹⴼⵜ: => ⵜⴰⵢⴰⴼⵓⵜ = 9 ⵜⴰⵢⴰⴼⵓⵜ = 2 + 3 * 4 - 5 array = [2, 3, 4, 5] ⵓⵎⵙⵡⵓⵔⵉ['+', '*', '-'] ⴰⵎⴷⵢⴰ: ⴰⵙⵎⵓⵜⵜⴳ (**) ⴰⴱⵟⵟⵓ ⵏ ⵓⵙⵡⵉⵔ ( //) ⴰⵙⴼⵓⴽⵍⵓ (*) ⴰⵙⵏⵓⵎⵔ ( - ) ⴰⵙⵎⵓⵏ ( +) ⵜⵉⴳⴳⵉⵜⵉⵏ ⵏ ⵍⵊⵉⴱⵔ ⵜⵉⵙⵍⴽⵉⵎⵉⵏ: ⴰⵙⵏⵎⴰⵍⴰ ⵏ ⵜⴳⵓⵔⵉ ⴷ ⵓⵙⵏⴼⵍ ⵏ ⵓⵙⵜⴰⵍ ⵏ ⵜⴳⵓⵔⵉ ⴰⴷ.ⵜⴰⴳⵔⵓⵎⵎⴰ ⵜⵉⵙⵙ ⵙⵏⴰⵜ ⵜⴳⴰ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵙⵎⵔⵙⵏⵜ ⵙⵏⴰⵜ ⵏ ⵜⴳⵔⵓⵎⵎⴰ ⵉⵜⵜⵓⴼⴽⴰⵏ ⵃⵎⴰ ⴰⴷ ⵜⵜⵓⵙⴽⴰⵔⵏⵜ ⵜⴰⵍⵊⵉⴱⵔⵉⵜ.ⴳ ⵓⵙⴰⵜⵉ ⵏ ⵙⵉⵏ ⵉⵎⵙⴽⴰⵔⵏ ⵏ ⵉⵎⵙⴽⴰⵔⵏ, ⴷ ⵓⵎⵙⴽⴰⵔ. ⴰⵎⵙⴽⴰⵔ ⴰⵎⵣⵡⴰⵔⵓ ⴷⴰⵔ ⵜⵉⴳⴳⵉⵜⵉⵏ ⵏ ⵍⵊⵉⴱⵔ ⵜⵉⴷⵙⵍⴰⵏⵉⵏ, ⴷ def do_algebra(operator, operand)
","def do_algebra(operator, operand)
  expression = operand[0].to_s
  operator.each_with_index do |op, index|
    if op == '//'
      expression += ' / ' + operand[index + 1].to_s
    else
      expression += ' ' + op + ' ' + operand[index + 1].to_s
    end
  end
  eval(expression)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_do_algebra
    candidate = method(:do_algebra)
    assert_equal(37, candidate.call([""**"", ""*"", ""+""], [2, 3, 4, 5]))
    assert_equal(9, candidate.call([""+"", ""*"", ""-""], [2, 3, 4, 5]))
    assert_equal(8, candidate.call([""//"", ""*""], [7, 3, 4]))
  end
end
"
HumanEval_161,tzm_Tfng,rb,"ⵉⵎⴷⵢⴰⵜⵏ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵔⴰⴷ ⵜⵙⴽⵔ ⴰⵙⴽⴽⵉⵍ ⵏ ⵜⵢⴰⴼⵓⵜ.ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⴳ ⵜⵊⵎⵉⵍⵜ ⴽⵔⴰ ⵏ ⵉⵙⴽⴽⵉⵍⵏ, ⵙⵙⵓⵜⵍ ⵜⴰⵊⵎⵉⵍⵜ.ⵎⴽⵍⵍⵉ ⵔⴰⴷ ⵜ ⵇⵇⵉⵎⵖ ⵙ ⵡⴰⵏⴰⵡ ⵏⵏⵙ.ⵎⴽ ⵜⴳⴰ s[i] ⵢⴰⵜ ⵜⴱⵔⴰⵜ, ⵔⴰⴷ ⵜⵙⵙⵏⴼⵍ ⵙⴳ ⴷⴷⴰⵡ ⵙ ⴰⴼⵍⵍⴰ ⵏⵖⴷ ⵙ ⵓⵎⵣⴰⵔⴰⵢ, ⵔⴰⴷ ⴽⴽⵙⴷ ⵢⴰⵏ ⵓⴽⵛⵛⵓⵎ ⵙ# >>> solve.call(""1234"")
# ""4321""
# >>> solve.call(""ab"")
# ""AB""
# >>> solve.call(""#a@C"")
# ""#A@c""
def solve(s)
","def solve(s)
  if s =~ /[a-zA-Z]/
    s.chars.map { |char| char =~ /[a-zA-Z]/ ? char.swapcase : char }.join
  else
    s.reverse
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_solve
    candidate = method(:solve)
    assert_equal(""aSdF"", candidate.call(""AsDf""))
    assert_equal(""4321"", candidate.call(""1234""))
    assert_equal(""AB"", candidate.call(""ab""))
    assert_equal(""#A@c"", candidate.call(""#a@C""))
    assert_equal(""#aSDFw^45"", candidate.call(""#AsdfW^45""))
    assert_equal(""2@6#"", candidate.call(""#6@2""))
    assert_equal(""#$A^d"", candidate.call(""#$a^D""))
    assert_equal(""#CCC"", candidate.call(""#ccc""))
  end
end
"
HumanEval_162,tzm_Tfng,rb,"ⵎⴽ ⵜⴳⴰ 'text' ⵢⴰⵜ ⵜⵉⴼⵉⵏⴰⵖ ⵜⵓⵎⵍⵉⵍⵜ, ⵙⵓⵍⵏ nil. ⴳ ⵓⴽⵓⴷ ⵏ ⵓⴹⵕⵉⵚ, ⵙⵙⵓⴼⵖ ⵜⴰⵡⵓⵔⵉ ⵏ ⵓⴽⵓⴷ ⵏ ⵓⵙⵙⴼⵍⴷ md5 ⵏⵏⵙ.# >>> string_to_md5.call(""Hello world"")
# ""3e25960a79dbc69b674cd4ec67a72c62""
def string_to_md5(text)
","require 'digest'

def string_to_md5(text)
  return nil if text.empty?
  Digest::MD5.hexdigest(text)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_string_to_md5
    candidate = method(:string_to_md5)
    assert_equal(""3e25960a79dbc69b674cd4ec67a72c62"", candidate.call(""Hello world""))
    assert_equal(nil, candidate.call(""""))
    assert_equal(""0ef78513b0cb8cef12743f5aeb35f888"", candidate.call(""A B C""))
    assert_equal(""5f4dcc3b5aa765d61d8327deb882cf99"", candidate.call(""password""))
  end
end
"
HumanEval_163,tzm_Tfng,rb,"ⵙ ⵓⵎⴷⵢⴰ: ⴷ b, ⴳ ⵓⵍⵓⴳ ⵏ ⵓⵙⵙⴰⵔⵓ.ⴳ ⵓⵙⴰⵜⵉ ⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵏⵖⴰⵏⵏ a ⴷ b, ⵙⴽⵔ ⵜⵉⴼⵔⵉⵙⵜ ⵏ ⵉⵎⴹⴰⵏⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ ⴳⵔ a # >>> generate_integers.call(2, 8)
# [2, 4, 6, 8]
# >>> generate_integers.call(8, 2)
# [2, 4, 6, 8]
# >>> generate_integers.call(10, 14)
# []
def generate_integers(a, b)
","def generate_integers(a, b)
  (a..b).to_a.concat((b..a).to_a).select { |num| num.even? }.uniq.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_generate_integers
    candidate = method(:generate_integers)
    assert_equal([2, 4, 6, 8], candidate.call(2, 10))
    assert_equal([2, 4, 6, 8], candidate.call(10, 2))
    assert_equal([2, 4, 6, 8], candidate.call(132, 2))
    assert_equal([], candidate.call(17, 89))
  end
end
"
