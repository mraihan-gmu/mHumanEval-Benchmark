[
    {
        "task_id": "HumanEval/0",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"ⵥⵕ ⵎⴽ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵡⵓⵟⵟⵓⵏ, ⵉⵍⵍⴰ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵢⴰⴹⵏ ⵢⵓⴳⵔⵏ ⵢⴰⵏ ⵡⵉⵢⴰⴹ ⵏ ⵓⴽⵜⵜⵓⵔ. ⴰⵎⴷⵢⴰ: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"ⴰⵙⴽⵛⵎ ⵙ ⵜⵡⵓⵔⵉ ⴰⴷ ⵉⴳⴰ ⵢⴰⵏ ⵓⴽⵛⵛⵎ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⵜⵔⵓⴱⴱⴰ ⵏ ⵜⵔⴳⴰⵍⵉⵏ ⵉⵜⵜⵓⵙⵎⴳⴰⵍⵏ. ⴰⵡⵜⵜⴰⵙ ⵏⵏⴽ ⵉⴳⴰ ⴰⴷ ⵜⴱⴹⵉⴷ ⵜⵔⵓⴱⴱⴰ ⴰⴷ ⵙ ⵜⵔⴳⴰⵍⵉⵏ ⵉⵥⵍⵉⵏ ⴷ ⴰⴷ ⵜⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⵔⴳⴰⵍⵉⵏ ⴰⴷ. ⵜⵔⵓⴱⴱⴰ ⵉⵥⵍⵉⵏ ⴳⴰⵏ ⵉⵎⵙⴰⵙⴰⵏ (ⵢⴰⵜ ⵜⵔⴳⴰⵍⵜ ⵉⵜⵜⵓⵙⵎⴳⴰⵍⵏ ⵉⵜⵜⵓⵙⵎⴳⴰⵍⵏ ⵙ ⵜⵖⴰⵔⴰⵙⵜ ⵉⵖⵓⴷⴰⵏ) ⴷ ⵓⵔ ⴳⵉⵏⵜ ⵜⵔⴳⴰⵍⵉⵏ ⴳ ⵡⴰⵏⴰⵡ ⵏⵏⵙⵏⵜ. ⵙⵙⵓⴷⴷⵓⵏ ⴽⵔⴰ ⵏ ⵡⴰⵏⴰⵡⵏ ⴳ ⵜⵔⴳⴰⵍⵜ ⵏ ⵓⵙⴽⵛⵎ. ⴰⵎⴷⵢⴰ: >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ) ['() ', '(()) ', '((()) ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"ⵉⴳ ⴷⴰⵔⴽ ⵓⵟⵟⵓⵏ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⵙⴼⵍⴷ ⴰⵎⵏⵉⴳ, ⵉⵖⵢ ⴰⴷ ⵜ ⵜⴱⴹⵓ ⵅⴼ ⵓⴳⵣⵣⵓⵎ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ (ⴰⴳⵣⵣⵓⵎ ⴰⵎⵇⵇⵔⴰⵏ ⵉⵎⵥⵥⵉⵏ ⵏ ⵓⵟⵟⵓⵏ ⵉⵜⵜⵓⵢⴰⴽⴽⴰⵏ) ⴷ ⵉⵎⴹⴰⵏ ⵉⵎⵔⴰⵡⵏ (ⴰⴳⵣⵣⵓⵎ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⵙⴼⵍⴷ ⴰⵀⴰ ⵉⵎⵥⵥⵉⵏ ⵏ 1). ⵙⵙⵓⴼⵖ ⴰⴳⵣⵣⵓⵎ ⴰⵎⵔⴰⵡⴰⵏ ⵏ ⵓⵟⵟⵓⵏ. ⴰⵎⴷⵢⴰ: >>> truncate_number(3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵓ ⵢⴰⵏ ⵢⴰⵏ ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵏ ⵜⵎⴳⴳⵉⵜⵉⵏ ⵏ ⵓⵙⵙⴰⵔⵓ ⴷ ⵓⵙⵙⴰⵢ ⴳ ⵓⴽⵓⵏⵟⵓ ⵏ ⵍⴱⴰⵏⴽ ⵏⵏⴰ ⵉⵜⵜⴱⴷⴰⴷⵏ ⵙ ⵓⵎⵢⴰ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵏⴼⵍ ⵎⴽ ⴳ ⴽⵓ ⵜⴰⵙⴳⴰ ⵢⴰⴳⴳⵓⴳ ⵓⵎⵢⴰ ⵏ ⵓⴽⵓⵏⵟⵓ, ⴷ ⴳ ⵜⵙⴳⴰ ⵏⵏⴰⵖ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ True. ⵎⴽ ⵓⵔ ⵜⵍⵍⴰ, ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵙⴽⵔ False. ⴰⵎⴷⵢⴰ: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"ⴳ ⵓⵎⴹⴰⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⵙⴽⵛⵎ, ⵙⵙⵉⵟⵏ ⴰⵎⵏⵣⴰⵢ ⴰⵎⵙⵜⴰⵔ ⴰⵖⵣⵓⵔⴰⵏ ⴳ ⵓⵏⴰⵎⴽ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵉⵙⵎⵎⴰⵍⵏ ⴰⴷ. ⴰⵎⵏⵣⴰⵢ ⴰⵎⵙⵜⴰⵔ ⴰⵖⵣⵓⵔⴰⵏ ⵉⴳⴰ ⴰⵎⵣⴰⵔⴰⵢ ⴰⵎⵙⵜⴰⵔ ⴰⵎⵙⵜⴰⵔ ⴳⵔ ⴽⵓ ⵉⴼⵔⴷⵉⵙ ⴷ ⵜⵏⵇⵇⵉⴹⵜ ⵜⴰⵏⴰⵎⵎⴰⵙⵜ (ⴰⵎⵏⵣⴰⵢ ⴳ ⵡⴰⴷⴷⴰⴷ ⴰⴷ: MAD = average  x - x_mean  ⴰⵎⴷⵢⴰ: >>> mean_absolute_deviation (([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"ⵙⵙⴽⵛⵎ ⴰⵎⴹⴰⵏ \"ⴷⵉⵍⵉⵜⵔ\" ⴳⵔ ⴽⵓ ⵙⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⴹⴼⴰⵕⵏ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵓⴽⵛⵛⵓⵎ `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"ⵉⴽⵛⵎ ⵓⵡⵡⵓⵔ ⴰⴷ ⵜⴰⵡⵓⵔⵉ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏ ⴽⵉⴳⴰⵏ ⵏ ⵜⵔⵓⴱⴱⴰ ⵏ ⵜⴱⵕⴰⵏⴽⵉⵙⵜⵉⵏ ⵉⵜⵜⵓⵙⵏⵎⵍⴰⵏ ⵏⵏⴰ ⵉⴱⴹⴰⵏ ⵙ ⵉⵎⵏⵖⵉ. ⵉ ⴽⵓ ⵜⴰⵔⴰⴱⴱⵓⵜ, ⵙⵙⵓⴼⵖ ⴰⵙⵡⵉⵔ ⴰⴽⴽⵡ ⵉⴳⴳⵓⵜⵏ ⵏ ⵜⴱⵕⴰⵏⴽⵉⵙⵜⵉⵏ ⵉⵜⵜⵓⵙⵏⵎⵍⴰⵏ. ⵙ ⵓⵎⴷⵢⴰ (() (()) ⵖⵓⵔⵙ ⵙⵉⵏ ⵉⵙⵡⵉⵔⵏ ⵏ ⵜⴱⵕⴰⵏⴽⵉⵙⵜⵉⵏ ⴳ ⵜⵉⵣⵉ ⵏⵏⴰ ⵖⵓⵔⵙ ((())) ⴽⵕⴰⴹ. >>> parse_nested_parens (('((()) ((())) () (((()) ((((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"ⵙⵙⴼⵉⵍⵜⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵓⴽⵛⵛⵓⵎ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵖⴰⵙ ⵉ ⵡⵉⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵓⵙⵏⴼⵍⵓⵍ >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"ⵉ ⵢⴰⵏ ⵓⵙⴼⵙⵔ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴰⴷ ⵏⵔⴰⵔ ⵢⴰⵏ ⵓⵙⴼⵙⵔ ⵏ ⵜⵓⵏⵖⵉⵍⵜ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵓⵙⵖⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳ ⵓⵙⴼⵙⵔ. ⴰⵙⵖⵍ ⵏ ⵓⵎⴷⴷⴰⴷ ⵉⵍⵍⴰⵏ ⵉⵍⵍⴰ ⴳ 0 ⴷ ⵓⵙⵖⵍ ⵏ ⵓⵎⴷⴷⴰⴷ ⵉⵍⵍⴰⵏ ⵉⵍⵍⴰ ⴳ 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) \"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"ⵙⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴼⵖ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵓⴳⴳⴰⵔ ⵏ ⵓⵙⵎⵓⵜⵜⴳ ⵏⵏⴰ ⵉⵜⵜⵢⴰⴼⴰⵏ ⴰⵔ ⵜⵉⵣⵉ ⵏ ⵓⵙⵎⵓⵜⵜⴳ. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"ⵥⵕ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵜ ⵜⴰⵔⵓⵙⵜ ⵏⵏⴰ ⵉⵜⵜⴱⴷⴷⴰ ⵙ ⵢⴰⵏ ⵓⵖⵉⵍⵓⴼ ⵉⵜⵜⵓⵙⵎⵔⴰⵙⵏ. ⵜⴰⵡⵏⴳⵉⵎⵜ ⵏ ⴰⵍⴳⵓⵔⵉⵜⵎ ⵜⴳⴰ ⵜⵓⵏⵏⵓⵜ: - ⵥⵕ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵜ ⵜⴰⵔⵓⵙⵜ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵎⵔⴰⵙⵏ. - ⵥⵕ ⴳ ⵜⴳⵉⵔⴰ ⵏ ⵓⵖⵉⵍⵓⴼ ⴰⵏⴳⴰⵍ ⵏ ⵢⴰⵏ ⵓⵖⵉⵍⵓⴼ ⵏⵏⴰ ⵉⵜⵜⵓⵣⵔⵉⵏ ⴷⴰⵜ ⵏ ⵓⵖⵉⵍⵓⴼ ⵏ ⴱⴰⵍⵉⵏⴷⵔⵓⵎ. >>> make_palindrome' ((') ' ' >>> make_palindrome' ((('catac') ' >>> make_palindrome' ((('catac') ' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"ⵙⵙⴼⵔⴰⵢ ⵎⴽ ⵜⴳⴰ ⵜⵊⵓⵎⵎⴰ ⵜⴰⵡⵍⴰⴼⵜ ⵢⴰⵜ ⵜⴱⴰⵍⵉⵏⴷⵔⵓⵎⵜ \"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"ⵉⵙⴽⵔ XOR ⴱⵉⵏⴰⵔⵉ ⵅⴼ ⵉⵙⴽⵛⵓⵎⵏ ⴰⴷ ⴷ ⵢⴰⴽⴽⴰ ⵜⴰⵢⴰⴼⵓⵜ ⴰⵡⴷ ⵏⵜⵜⴰⵜ ⴰⵎⵎ ⵜⵉⴼⵉⵏⴰⵖ. >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"ⵙⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵙⴽⴽⵉⵍⵏ, ⵙⵙⴽⵛⵎ ⴰⵙⴽⴽⵉⵍ ⴰⵣⵣⴰⵢⵔⵉ. ⵙⵙⴽⵛⵎ ⴰⵙⴽⴽⵉⵍ ⴰⵎⵣⵡⴰⵔⵓ ⴳ ⵡⴰⴷⴷⴰⴷ ⵏ ⴽⵉⴳⴰⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵏ ⵓⵣⵣⴰⵢⵔⵉ ⴰⵎⵎ. ⵙⵙⴽⵛⵎ None ⴳ ⵡⴰⴷⴷⴰⴷ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵓⴽⵛⵛⵓⵎ ⵉⴳⴰ ⵜ ⵡⴰⴽⴰⵍ. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"ⴰⵔ ⵏⵙⵙⴽⵛⵎ ⴰⵎⵟⵟⵓ ⴰⵎⵢⵉⵡⵏ ⴰⵅⴰⵜⴰⵔ ⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ a ⴷ b >>> ⴰⵎⵟⵟⵓ ⴰⵎⵢⵉⵡⵏ ⴰⵅⴰⵜⴰⵔ ((3, 5) 1 >>> ⴰⵎⵟⵟⵓ ⴰⵎⵢⵉⵡⵏ ⴰⵅⴰⵜⴰⵔ ((25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"ⴰⵔ ⵜⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵙⵏⴼⴰⵔⵏ ⴰⴽⴽⵡ ⵙⴳ ⵓⵥⵥⵉⴹⵕ ⴰⵔ ⵓⵣⵉⵍ ⵏ ⵜⵣⵍⵉⵜ ⵏ ⵓⵙⴽⵛⵎ >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵉⵎⴹⴰⵏⵏ ⵉⵜⵜⵓⵙⵏⴽⴰⴷⵏ ⵙ ⵓⵙⴰⵢⵔⴰⵔ ⴳⵔ 0 ⴷ n. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"ⵙ ⵜⴽⵍⵉⵜ ⵏ ⵜⴽⵔⵔⴰⵢⵜ, ⵙⵙⵏⵖ ⵎⵏⵏⴰⵡ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵢⴰⵏⴰⵡⵏ (ⵓⵔ ⵏⵜⵜⴰⴼⴰ ⴽⵔⴰ ⵏ ⵓⵙⴽⴽⵉⵍ ⴰⵎⵥⵥⵢⴰⵏ) ⵉⵙ ⴷⵉⴳⵙ >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"ⴰⴷ ⵜⵙⵙⴽⵛⵎⴷ ⵜⴰⵡⵡⵓⵔⵉ ⴰⴷ ⴳ ⵢⴰⵏ ⵓⵖⵉⵍⵓⴼ ⵉⵙⵎⴷⵢⴰⵏ ⵜⵉⴼⵉⵏⴰⵖ ⴳ ⵓⵙⵎⵉⵍ ⴰⵙⴽⵉⵉ. ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⴼⵙⵉ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵓⵖⵉⵍⵓⴼ ⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵟⵟⴰⴼⵏ ⴽⵉⴳⴰⵏ ⵏ ⵉⵎⵉⴽⴽ. ⴷⵉ ⴷⴷⴰⵡ ⵏ ⵢⴰⵏ ⵓⵡⵉⴽⵉ: 'o' note, lasts four beats 'o, dak' - half note, lasts two beats 'o, quater note, lasts one beat >>> parse_music. 'o o. o, dak' o. o, dak' o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o. dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak o dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak dak\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"ⵥⵕ ⵎⵏⵏⴰⵡⵜ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⵔⴰⴷ ⵢⵉⵍⵉ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⴰⵎⵣⵡⴰⵔⵓ ⴳ ⵓⵡⵉⴽⵉ ⴰⵎⵣⵡⴰⵔⵓ. ⵥⵕ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⵔⴰⴷ ⵢⵉⵍⵉ ⵓⴽⵙⴰⵢ. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"ⴰⵙⴽⵛⵎ ⵉⴳⴰ ⵢⴰⵏ ⵓⴽⵛⵛⵓⵎ ⵏ ⵡⵓⵟⵟⵓⵏ ⵙⴳ \"ⵙⵢⴰ\" ⴰⵔ \"ⵜⵥⴰ\". ⵉⵙⵜⴰⵢⵏ ⵉⵣⵔⴼⴰⵏ ⴳⴰⵏ \"ⵙⵢⴰ\", \"ⵢⵉⵡⵏ\", \" ⵙⵉⵏ\", \" ⴽⵕⴰⴹ\", \"ⴽⴽⵓⵥ\", \"ⵎⵎⵓⵙ\", \"ⵚⴹⵉⵚ\", \"ⴰⵙⵙⴰ\", \"ⴰⵙⴰ\" ⴷ \"ⵜⵥⴰ\". ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵓⴽⵛⵛⵓⵎ ⵙ ⵡⵓⵟⵟⵓⵏⵏ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙⴳ ⵉⵎⵥⵥⵢⴰⵏⵏ ⴰⵔ ⵉⵎⵇⵇⵔⴰⵏⵏ >>> sort_numbers ((' ⴽⵕⴰⴹ ⵢⴰⵏ ⵙⵎⵎⵓⵙ') ' ⵢⴰⵏ ⴽⵕⴰⴹ ⵙⵎⵎⵓⵙ' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"ⵙⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵡⵓⵟⵟⵓⵏⵏ (ⵙ ⵓⴳⴳⴰⵔ ⵏ ⵙⵉⵏ) ⵙⵜⴰⵢ ⴷ ⵙⵏⵓⵍⴼⴰ ⵙⵉⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵏⵏⴰ ⵢⵓⴳⵔⵏ ⴽⵔⴰ ⵢⴳⴰⵜⵜ ⵢⴰⵏ ⴷ ⵙⵙⵓⴷⵙ (ⵉⴹ ⴰⵎⵥⵥⵢⴰⵏ, ⵡⵓⵟⵟⵓⵏ ⴰⵎⵇⵔⴰⵏ). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"ⴳ ⵓⵎⴹⴰⵏ ⵏ ⵡⵓⵟⵟⵓⵏ (ⵙ ⵎⵔⴰⵡ ⵏ ⵉⴼⵔⴷⵉⵙⵏ), ⵙⵙⵎⵔⵙ ⵜⴰⵙⵏⴼⵍⵜ ⵜⴰⵍⵉⵉⵏⴰⵔⵉⵜ ⵉ ⵡⵓⵟⵟⵓⵏ ⴰⴷ, ⵣⵓⵏⴷ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵥⵥⵢⴰⵏ ⴰⴷ ⵉⴳⴰⵏ 0 ⴷ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵇⵔⴰⵏ ⴰⴷ ⵉⴳⴰⵏ 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"ⴰⴼⵉⵍⵜⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⴽⵓ ⵜⵉⵏⴷⵉⵜⵉⵏ ⵏ ⴱⵉⵜⵓⵏ ⵉ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⵉⵖⵣⵉ ⵏ ⵜⵣⵍⵉⵜ ⵏ ⵓⵙⴽⴽⵉⵍ >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"ⵉ ⵓⵎⴹⴰⵏ n, ⵙⵙⵏ ⴰⵎⴹⴰⵏ ⴰⵅⴰⵜⴰⵔ ⵏⵏⴰ ⵉⵜⵜⴱⴹⵓⵏ n ⵙ ⵓⵖⵣⵓ, ⴷ ⵉⵎⵥⵥⵉⵏ ⵙⴳ n >>> largest_divisor ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"ⵔⴰⴷ ⵏⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴳⴳⵓⵔⴰ ⵉⵎⵣⵡⵓⵔⴰ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⵙⴳ ⵉⵎⵥⵥⵉⵏ ⴰⵔ ⵉⵎⵇⵇⵔⴰⵏ. ⴽⵓ ⵢⴰⵏ ⴳ ⵉⵎⴳⴳⵓⵔⴰ ⴰⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⵜⵜⵓⵢⵙⴽⴰⵔ ⵙ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⵉⵣⴷⵉⵏ ⴷ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⵢⴰⴷ ⵉⵍⵍⴰ ⴳ ⵓⵙⴼⵙⵔ. ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⵙⴽⵛⵎ ⴰⵎⵎ ⵜⵢⴰⴼⵓⵜ ⵏ ⵉⵎⴳⴳⵓⵔⴰ >>> ⵉⵙⴼⵙⵔ ((8) [2, 2, 2] >>> ⵉⵙⴼⵙⵔ ((25) [5, 5] >>> ⵉⵙⴼⵙⵔ ((70) [2, 5, 7] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"ⵙⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴼⵖ ⴰⴽⴽⵡ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⵉⵜⵜⵓⴳⴰⵏ ⵓⴳⴳⴰⵔ ⵏ ⵢⴰⵜ ⵜⵉⴽⴽⵍⵜ. ⵃⴹⵓ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⵇⵇⵉⵎⵏ ⴰⵎⵎ ⵡⵉⵏⵏⴰ ⴳ ⵜⴽⵛⵛⵓⵎⵜ. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"ⵉ ⵢⴰⵏ ⵓⴽⵜⵓⵎ, ⵙⵙⴼⵍⴷ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵥⵥⵉⵏ ⵙ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵇⵔⴰⵏⵏ ⴷ ⵉⵎⵇⵔⴰⵏⵏ ⵙ ⵉⵎⵥⵥⵉⵏⵏ. >>> flip_case ((('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"ⵜⵓⵏⵏⵓⵏⵜ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⴳ ⵢⴰⵏ ⵓⵙⴽⴽⵉⵍ >>> concatenate (([]) '' >>> concatenate ((['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"ⵙⵙⴼⵉⵍⵜⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵏ ⵓⵙⴽⵛⵎ ⵖⴰⵙ ⵉ ⵡⵉⵏⵏⴰ ⵉⵙⵙⵏⵜⵉⵢⵏ ⵙ ⵢⴰⵏ ⵓⵙⵏⵜⵉ ⵉⵜⵜⵓⵙⴽⴰⵔⵏ. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵉⵎⴹⴰⵏⵏ ⵉⵏⴰⵎⵓⵔⵏ ⵖⴰⵙ ⴳ ⵜⵍⴳⴰⵎⵜ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵓⵟⵟⵓⵏ ⴰⴽⴽⵡ ⴰⵎⵣⵡⴰⵔⵓ, ⴷ ⵜⵉⴷⵜ ⵎⴽ ⵓⵔ ⵉⴳⵉ. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs ⴳⴰⵏ ⵉⵎⵙⴽⴰⵔⵏ ⵏ ⴽⵉⴳⴰⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ. find_zero ⵔⴰⴷ ⵏⴰⴼ x ⵣⵓⵏⴷ poly ((x) = 0. find_zero ⵔⴰⴷ ⵏⴰⴼ ⵖⴰⵙ ⵜⵏⵇⵇⵉⴹⵜ ⵏ ⵓⵎⵢⴰ, ⴰⵡⴷ ⵉⴳ ⵍⵍⴰⵏ ⴽⵉⴳⴰⵏ. ⵓⵍⴰ, find_zero ⵔⴰⴷ ⵏⴰⴼ ⵖⴰⵙ xs ⵏⵏⴰ ⵖⵓⵔ ⵉⵍⵍⴰ ⵓⵟⵟⵓⵏ ⵏ ⵉⵎⵙⴽⴰⵔⵏ ⴷ ⵓⵎⵙⴽⴰⵔ ⵓⵔ ⵉⴳⵉⵏ ⴰⵎⵢⴰ ⴰⵛⴽⵓ ⵔⴰⴷ ⵏⴰⴼ ⵢⴰⵏ ⵓⴼⵙⵙⴰⵢ. >>> round ((find_zero[(1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"ⴷⴰ ⵉⵜⵜⵙⵜⴰⵍ ⴱⵓⵍⵉⵏⵓⵎⵉ ⵙ ⵉⵎⵙⴽⴰⵔⵏ xs ⴳ ⵜⵏⵇⵇⵉⴹⵜ x. ⴷⴰ ⵉⵜⵜⵔⴰⵔ xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⴷⴰ ⵜⵙⵙⵓⵎⵓⵔ ⵜⴰⵍⴳⴰⵎⵜ l ⴰⵔ ⵜⵙⵙⴽⵛⵎ ⵜⴰⵍⴳⴰⵎⵜ l' ⵣⵓⵏⴷ ⵎⴰⵙ ⵜⴳⴰ l' ⵜⴰⵎⴷⴷⴰⴽⵍⵜ ⵏ l ⴳ ⵉⵙⵏⴼⴰⵔⵏ ⵏⵏⴰ ⵓⵔ ⵏⵣⴹⴰⵕ ⴰⴷ ⵏⴱⴹⵓ ⵙ ⴽⵕⴰⴹ, ⵎⴰⵛⴰ ⵜⵉⵏⵉⴳⵉⵏ ⵏⵏⵙ ⴳ ⵉⵙⵏⴼⴰⵔⵏ ⵏⵏⴰ ⵉⵜⵜⵣⴹⴰⵕⵏ ⴰⴷ ⵏⴱⴹⵓ ⵙ ⴽⵕⴰⴹ ⴳⴰⵏⵉⵏ ⵜⵉⵏⵉⴳⵉⵏ ⵏ ⵉⵙⵏⴼⴰⵔⵏ ⵏⵏⴰ ⵉⵣⴷⵉⵏ ⵏ l, ⵎⴰⵛⴰ ⵜⵜⵓⵙⵎⵉⵍⵏ. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵢⵉⵡⴰⵏⵏ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⴳ ⵜⵍⴳⴰⵎⵜ >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵓⴳⴳⴰⵔ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵜⵍⴳⴰⵎⵜ. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"ⴰⵔ ⵏⵙⵙⴽⵛⵎ ⴰⵎⴹⴰⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⵉⵜⵜⵓⵢⴰⵔⴰⵏ ⵓⵟⵟⵓⵏ 7 ⴳ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵥⵥⵉⵏ ⵏⵏⴰ ⵓⵔ ⵏⵏⵉⴳⵏ ⵏ n ⵏⵏⴰ ⵉⵜⵜⵓⵢⴰⵔⴰⵏ ⵙ 11 ⵏⵖ 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⴷⴰ ⵜⵙⵙⵓⵎⵓⵔ ⵜⴰⵍⴳⴰⵎⵜ l ⴰⵔ ⵜⵙⵙⴽⵛⵎ ⵜⴰⵍⴳⴰⵎⵜ l' ⵣⵓⵏⴷ l' ⴷⴰ ⵢⴰⴽⵣ ⵉ l ⴳ ⵉⵙⵏⴼⴰⵔⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ, ⵎⴰⵛⴰ ⵡⴰⵜⵉⴳⵏ ⵏⵏⵙ ⴳ ⵉⵙⵏⴼⴰⵔⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴷⴰ ⵢⴰⴽⵣ ⵉ ⵡⴰⵜⵉⴳⵏ ⵏ ⵉⵙⵏⴼⴰⵔⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵏ l, ⵎⴰⵛⴰ ⴷⴰ ⵉⵜⵜⵓⵙⵎⵉⵍ. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⴰⵎⴽ ⵜⴰⵡⵓⵔⵉ ⵏ ⵓⵙⴽⵛⵎ ⵉⵜⵜⵓⵢⵙⴽⵛⵎⵏ ⵙ encode_cyclic. ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵜⵉⵡⵓⵔⵉ ⵏ ⵓⵙⴽⵛⵎ ⵉⵜⵜⵓⵢⵙⴽⵛⵎⵏ.\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴼⵉⵏⴰⵖ ⵉⵜⵜⵓⵢⵙⴽⴰⵔⵏ ⵙ ⵜⵔⴰⴱⴱⵓⵜⵉⵏ ⵏ ⴽⵕⴰⴹ ⵉⵙⴽⴽⵉⵍⵏ.\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib ⴷⴰ ⵢⴰⴽⴽⴰ ⵡⵓⵟⵟⵓⵏ n-ⵜⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵉ ⴷ ⵉⴳⴰ ⴰⵡⴷ ⴰⵎⵣⵡⴰⵔⵓ. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triple_sum_to_zero ⴷⴰ ⵉⵜⵜⴰⵎⵥ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴰⵎⵎ ⵓⴽⵛⵛⵓⵎ. ⴷⴰ ⵢⴰⴽⴽⴰ ⵜⵉⴷⵜ ⵎⴽ ⵍⵍⴰⵏ ⴽⵕⴰⴹ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏⵏⴰ ⵉⵜⵜⵎⵓⵏⵏ ⵙ ⵓⵎⵢⴰ, ⴷ ⵜⵉⴱⵔⵙⴳⴳⵡⴰⴷⵜ ⵎⴽ ⵓⵔ ⵍⵍⵉⵏ. >>> triple_sum_to_zero (([1, 3, -2, 1]) ⵜⵉⴱⵔⵙⴳⴳⵡⴰⴷⵜ >>> triple_sum_to_zero (([1, 3, -2, 1]) ⵜⵉⴷⵜ >>> triple_sum_to_zero (([1, 2, 3, 7]) ⵜⵉⴱⵔⵙⴳⴳⵡⴰⴷⵜ >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) ⵜⵉⴷⵜ >>> triple_sum_to_zero [1]) ⵜⵉⴱⵔⵙⴳⴳⵡⴰⴷⵜ \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"ⵙⵙⵏⵎⴷ ⵜⴰⴱⵔⵉⴷⵜ ⵏⵏⴰ ⵉⴳⴰⵏ ⵜⴰⵍⵖⴰ ⵜⴰⵣⵣⵉⴳⵣⵜ ⵓⵔ ⵉⵍⵉⵏ ⵓⴳⴳⴰⵔ. n ⵏ ⵜⴽⴰⵔⴷⵉⵡⵉⵏ ⴰⵔ ⵜⵜⴰⵡⵉⵏ ⵙ ⵓⵥⵍⵎⴰⴹ ⵙ ⵓⵣⵔⴼ; ⴳ ⵢⴰⵜ ⵜⵉⵣⵉ, ⵢⴰⵜ ⵜⴰⵔⴰⴱⴱⵓⵜ ⵢⴰⴹⵏ ⵏ n ⵏ ⵜⴽⴰⵔⴷⵉⵡⵉⵏ ⴰⵔ ⵜⵜⴰⵡⵉⵏ ⵙ ⵓⵣⵔⴼ ⵙ ⵓⵥⵍⵎⴰⴹ. ⵙⵏⴰⵜ ⵜⵔⴰⴱⴱⵓⵜⵉⵏ ⵏ ⵜⴽⴰⵔⴷⵉⵡⵉⵏ ⴰⵔ ⵜⵜⴱⴷⵓⵏⵜ ⵙ ⵓⴱⵔⴰⵔⴳ ⵏⵏⵙⵏⵜ. ⴽⵓⵍⵍⵓ ⵜⴽⴰⵔⴷⵉⵡⵉⵏ ⴰⵔ ⵜⵜⵎⵓⵙⵙⵓⵏ ⵙ ⵢⴰⵜ ⵜⴰⵣⵣⵍⴰ. ⴷⴰ ⵜⵜⵉⵏⵉⵏⵜ ⵙⵏⴰⵜ ⵜⴽⴰⵔⴷⵉⵡⵉⵏ ⴰⵔ ⵜⵜⵎⵓⵏⵉⵏ ⴽⵓⴷ ⵏⵏⴰ ⴷⴰ ⵜⵙⵙⵓⴷⵓ ⵜⴽⴰⵔⴷⴰⵙⵜ ⵏⵏⴰ ⵉⵜⵜⵎⵓⵙⵙⵓⵏ ⵙ ⵓⵥⵍⵎⴰⴹ ⵙ ⵓⵣⵔⴼ ⵜⵙⵙⵓⴷⵓ ⵜⴽⴰⵔⴷⴰⵙⵜ ⵏⵏⴰ ⵉⵜⵜⵎⵓⵙⵙⵓⵏ ⵙ ⵓⵣⵔⴼ ⵙ ⵓⵥⵍⵎⴰⴹ. ⵎⴰⵛⴰ, ⵜⴽⴰⵔⴷⴰⵙⵉⵏ ⴰⴷ ⴳⴰⵏⵜ ⴱⴰⵀⵔⴰ ⵉⴷⵓⵙⵏⵉⵏ ⴷ ⵉⴷⵓⵙⵏⵉⵏ; ⵙ ⵜⵢⴰ, ⴰⵔ ⵙⵓⵍⵏⵜ ⵙⵎⵓⵙⵙⵏ ⴳ ⵓⴱⵔⵉⴷ ⵏⵏⵙⵏⵜ ⴰⵎⵎⴽⵍⵍⵉ. ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⴰⵔ ⵜⵙⵙⵓⴼⵓⵖⵏ ⴰⵎⴹⴰⵏ ⵏ ⵉⵎⵎⵓⵏⵏ. \"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵙ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵜⵜⵓⵢⴰⵔⴰⵏ ⵙ 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] \"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero ⴷⴰ ⵉⵜⵜⴰⵎⵥ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴰⵎⵎ ⵓⴽⵛⵛⵓⵎ. ⴷⴰ ⵢⴰⴽⴽⴰ ⵜⵉⴷⵜ ⵎⴽ ⵍⵍⴰⵏ ⵙⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏⵏⴰ ⵉⵜⵜⵎⵓⵏⵏ ⵙ ⵓⵎⵢⴰ, ⴷ ⵜⵉⴷⵜ ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ. >>> pairs_sum_to_zero([1, 3, 5, 0]) ⵜⵉⴷⵜ >>> pairs_sum_to_zero[(1, 3, -2, 1]) ⵜⵉⴷⵜ >>> pairs_sum_to_zero[[1, 2, 3, 7]) ⵜⵉⴷⵜ >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) ⵜⵉⴷⵜ >>> pairs_sum_to_zero[1]) ⵜⵉⴷⵜ \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"ⵙⵏⴼⵍ ⵜⴰⵙⵉⵍⴰ ⵏ ⵓⵟⵟⵓⵏ ⵏ ⵓⴽⵛⵛⵓⵎ x ⵙ ⵜⴰⵙⵉⵍⴰ. ⵙⵏⴼⵍ ⴰⵙⵎⴷⵢⴰ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⴷⴼⴼⵉⵔ ⵏ ⵓⵙⵏⴼⵍ. ⵉⵎⴹⴰⵏⵏ ⵏ ⵜⵙⵉⵍⴰ ⴷⵔⵓⵙⵏ ⵙⴳ 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"ⵉⴳ ⴷⴰⵔⵙ ⵜⵉⵖⵣⵉ ⵏ ⵓⴳⴰⴼⴰ ⴷ ⵢⵉⴳⵔ ⵏ ⵓⴽⵛⵛⵓⵎ ⴰⵎⵇⵔⴰⵏ ⵉ ⵢⴰⵏ ⵓⴽⵕⴰⴹ. >>> triangle_area\"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵏ Fib4 ⵜⴳⴰ ⵢⴰⵜ ⵜⴰⵍⴳⴰⵎⵜ ⵣⵓⵏⴷ ⵜⴰⵍⴳⴰⵎⵜ ⵏ Fibbonacci ⵏⵏⴰ ⵉⵜⵜⵓⵙⵏⵎⵍⵏ ⵙ: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). ⵙⴽⵔ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵃⵎⴰ ⴰⴷ ⵜⵙⵙⵓⴷⵙⴷ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵜⵉⵙⵙ n ⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵏ Fib4. ⵓⵔ ⵜⵙⵙⵎⵔⵙⴷ ⴰⵙⵏⴼⵍ. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"ⴰⵔ ⵉⵜⵜⴰⵊⵊⴰ ⵡⴰⵎⵎⴰⵙ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵜⵍⴳⴰⵎⵜ l. >>> ⵡⴰⵎⵎⴰⵙ (([3, 1, 2, 4, 5]) 3 >>> ⵡⴰⵎⵎⴰⵙ (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"ⴷⴰ ⵉⵜⵜⵉⵔⵉ ⴰⴷ ⵉⴳ ⵜⵉⴼⵉⵏⴰⵖ ⵉⴳⴰ ⵜ ⵢⴰⵏ ⵓⴽⵛⵛⵓⵎ >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"ⵔⴰⴷ ⵏⵔⴰⵔ 2^n modulo p (ⴰⴷ ⵏⵙⵙⵏ ⵉⵎⴹⴰⵏⵏ). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⴰⵎⴽ ⵜⴰⵡⵉⵍⴰ ⵏ ⵓⵙⴽⵛⵎ ⵉⵜⵜⵓⵢⵙⴽⵛⵎⵏ ⵙ encode_shift. ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵜⵉⵡⵉⵍⴰ ⵉⵜⵜⵓⵢⵙⴽⵛⵎⵏ. \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴼⵉⵏⴰⵖ ⵙ ⵓⵙⵎⵓⵜⵜⴳ ⵏ ⴽⵓ ⵉⵙⴽⴽⵉⵍⵏ ⵙ 5 ⴳ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⴼⵉⵏⴰⵖ.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels ⵜⴳⴰ ⵢⴰⵜ ⵜⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵜⵉⴼⵉⵏⴰⵖ ⴷ ⴰⵔ ⵢⴰⴽⴽⴰ ⵜⵉⴼⵉⵏⴰⵖ ⴱⵍⴰ ⵉⵎⵙⵍⵉ. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"ⴰⵔ ⵉⵜⵜⵔ ⵜⵉⴷⵜ ⵎⴽ ⴷⴰ ⵜⵜⴳⵡⴷⵏ ⵉⵎⴹⴰⵏⵏ ⴳ ⵜⵍⴳⴰⵎⵜ l ⴷⴷⴰⵡ ⵏ ⵓⵖⴰⵔⴰⵙ t. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"ⵙⵙⵎⵓⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏⵏ x ⴷ y >>> ⵙⵙⵎⵓⵏ ((2, 3) 5 >>> ⵙⵙⵎⵓⵏ ((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"ⵙⵙⵉⵔⵉⵡ ⵎⴽ ⴳⴰⵏ ⵙⵉⵏ ⵡⴰⵡⴰⵍⵏ ⵖⵓⵔⵙⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ. >>> same_chars (('eabcdzzzz', 'dddzzzzzzzddeddabc') True >>> same_chars (('abcd', 'dddddddddabc') True >>> same_chars (('dddddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddddabc') False >>> same_chars ((('abcd', 'dddddddabddce') False >>> same_chars (('eabcdzzzz', 'dddzzzzzzzddabc') False \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵉ ⵡⵉⵙⵙ n. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets ⵉⴳⴰ ⵢⴰⵏ ⵓⵡⵜⵜⵓ ⵏ \"<\" ⴷ \">\". return True ⵎⴽ ⴷⴰⵔ ⴽⵓ ⴰⴱⵕⴰⴽⴰⵜ ⵏ ⵓⵕⵥⵥⵓⵎ ⵢⴰⵏ ⴰⴱⵕⴰⴽⴰⵜ ⵏ ⵓⵇⵇⵏ. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True   ⴰⵣⵓⵍ ⴼⵉⵔⵏⴰⵏⵙ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙ, ⵙⵙ, ⵙⵙⵉⵔⵉⵡ, ⵙⵙ, ⵙⵙ, ⵙⵙ, ⵙⵙ, ⵙⵙ, ⵙⵙ, ⵙⵙ, ⵙⵙ, ⵙⵙ, ⵙⵙ, ⵙⵙ, ⵙⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ, ⵙ,\"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵢⵉⵡⴰⵏⵏ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵉ ⵙⵏⴰⵜ ⵜⵍⴳⴰⵎⵉⵏ. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"ⴰⵔ ⵏⵙⵙⴽⵛⵎ ⴰⵎⴳⴳⴰⵔⵓ ⴰⵎⵣⵡⴰⵔⵓ ⴰⵅⴰⵜⴰⵔ ⵏ n. ⵏⵙⵙⵏ ⵉⵙ n > 1 ⴷ ⵓⵔ ⵉⴳⵉ ⴰⵎⵣⵡⴰⵔⵓ. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n ⵜⴳⴰ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵉⵜⵜⵎⵓⵏⵏ ⵉⵎⴹⴰⵏⵏ ⵙⴳ 1 ⴰⵔ n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets ⵉⴳⴰ ⵢⴰⵏ ⵓⵡⵜⵜⵓ ⵏ \"(\" ⴷ \")\". return True ⵎⴽ ⴷⴰⵔ ⴽⵓ bracket ⵉⵕⵥⵎⵏ ⵢⴰⵏ bracket ⵉⵇⵇⵏⵏ. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs ⴷⴰ ⵉⵙⵎⴷⵢⴰ ⵉⵎⵙⴽⴰⵔⵏ ⵏ ⴽⵉⴳⴰⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ. xs[0] + xs[1] * x + xs[2] * x^2 + .... ⵔⵡⵍ ⵜⴰⵙⵏⴼⵍⵜ ⵏ ⴽⵉⴳⴰⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵙ ⵜⴰⵍⵖⴰ ⵢⴰⴷⵏⵉⵏ. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"ⵜⴰⵔⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱⴱⵓⴱⵉⴱ ⵜⴳⴰ ⵢⴰⵜ ⵜⴰⵔⵔⴰ ⵢⴰⴽⵙⵓⵍⵏ ⵙ ⵜⴰⵔⵔⴰ ⵏ ⴼⵉⴱⴱⵓⵏⴰⵛⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵏⵎⵍⵏ ⵙ: ⴼⵉⴱⴱⵓⴱⵉⴱ ((0) == 0 ⴼⵉⴱⴱⵓⴱⵉⴱ ((1) == 0 ⴼⵉⴱⴱⵓⴱⵉⴱ ((2) == 1 ⴼⵉⴱⴱⴱⵉⵏ ((n) == ⴼⵉⴱⴱⴱⵉⵏ ((n-1) + ⴼⵉⴱⴱⴱⵉⵏ ((n-2) + ⴼⵉⴱⴱⴱⵉⵏ ((n-3). ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏ ⵓⵙⵉⴹⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵜⵔⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱⴱⵓⴱⵉⴱ ⵙ ⵢⴰⵜ ⵜⵏⴰⴼⵓⵜ ⵉⴼⵓⵍⴽⵉⵏ. >>> ⴼⵉⴱⴱⴱⵉⵏ ((1) 0 >>> ⴼⵉⴱⴱⴱⵉⵏ ((5) 4 >>> ⴼⵉⴱⴱⴱⵉⵏ ((8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ vowels_count ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⴽⵛⵛⵓⵎ ⵉⵙⵎⴷⵢⴰⵏ ⵢⴰⵜ ⵜⴳⵓⵔⵉ ⴰⵔ ⵉⵙⵙⴽⵛⵎ ⵓⵟⵟⵓⵏ ⵏ ⵉⵎⵓⵙⵙⵓⵜⵏ ⴳ ⵓⴽⵛⵛⵓⵎ. ⵉⵎⵓⵙⵙⵓⵜⵏ ⴳ ⵡⴰⴷⴷⴰⴷ ⴰⴷ ⴳⴰⵏ 'a', 'e', 'i', 'o', 'u'. ⴷⵖⵉ, 'y' ⵉⴳⴰ ⴰⵡⴷ ⵢⴰⵏ ⵉⵎⵓⵙⵙⵓⵜⵏ, ⵎⴰⵛⴰ ⴷⴰ ⵉⵜⵜⵉⵍⵉ ⵖ ⵜⴳⵉⵔⴰ ⵏ ⵜⴳⵓⵔⵉ ⵉⵜⵜⵓⴼⴽⴰⵏ. ⴰⵎⴷⵢⴰ: >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"ⴰⵖ ⵢⴰⴷⵉ ⴽⵔⴰ ⵏ ⵡⴰⴷⴷⴰⴷⵏ ⵏ ⵉⵔⵉⵎⵏ.\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"ⵙⵙⵓⵜⵍ ⴰⵎⵎ ⵜⵙⵓⵜⵍⵜ ⵉⵎⵉⴹⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏ x, ⵙⵙⵓⵜⵍ ⵉⵎⵉⴹⵏ ⵙ ⵓⵥⵍⵎⴰⴹ ⵙ ⵓⵙⵓⵜⵍ ⴷ ⵙⵙⵓⵜⵍ ⵜⴰⵢⴰⴼⵓⵜ ⴰⵎⵎ ⵜⴰⵡⴰⵍⵜ. ⵎⴽ ⵜⵙⵙⵓⵜⵍ > ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⵉⴹⴰⵏ, ⵙⵙⵓⵜⵍ ⵉⵎⵉⴹⴰⵏ ⵙ ⵓⴱⵔⴰⵔⴳ. >>> circular_shift{12}, 1) \"21\" >>> circular_shift{12}, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"ⵜⴰⵡⵓⵔⵉ ⵙⵔⵙⵏ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵜⴰⵡⵡⵓⵔⵉ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⴷ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵏ ⵓⴼⵍⵍⴰ ⴷⴰⵢ' ⵉⵙⴽⵉⴷⵏ ⵏ ASCII. ⵉⵎⴷⵢⴰⵜⵏ: digitSum{\"}\" => 0 digitSum{\"abAB\") => 131 digitSum{\"abcCd\") => 67 digitSum{\"helloE\") => 69 digitSum{\"woArBld\") => 131 digitSum{\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"ⴳ ⵜⵎⵙⴰⵔⵜ ⴰⴷ, ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵢⴰⵜ ⵜⵉⵙⵉ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏⵏ ⵉⵎⴹⴰⵏ ⵏ ⵜⴱⵔⵔⵜⵜⵉⵏ ⴷ ⵜⴱⵕⵕⴰⵏⵚⵉⵏ ⵏⵏⴰ ⵉⵜⵜⵓⵣⵟⵟⴰⵢⵏ ⴳ ⵢⴰⵜ ⵜⴽⵕⴹⴰ ⵏ ⵜⴽⵕⴹⴰ ⴰⴷ ⴳ ⵍⵍⴰⵏⵜ ⵜⴱⵔⵔⵜⵜⵉⵏ ⴷ ⵜⴱⵕⵕⴰⵏⵚⵉⵏ ⴷ ⵜⴽⵕⴹⴰ ⵏ ⵍⵎⴰⵏⴳⵓ. ⴷⴼⴼⵉⵔ ⵏ ⵜⵉⵙⵉ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏⵏ ⵉⵎⴹⴰⵏ ⵏ ⵜⴱⵕⵕⴰⵏⵚⵉⵏ ⴷ ⵜⴱⵕⵕⴰⵏⵚⵉⵏ ⴷ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏⵏ ⵉⵎⴹⴰⵏ ⵏ ⵜⴽⵕⴹⴰ ⵏ ⵜⴽⵕⴹⴰ, ⵙⵏⵓⵍⴼⵓ ⴰⵎⴹⴰⵏ ⵏ ⵜⴽⵕⴹⴰ ⵏ ⵜⴽⵕⴹⴰ ⵏ ⵍⵎⴰⵏⴳⵓ. ⵙ ⵓⵎⴷⵢⴰ: fruit_distribution\"5(ⴱⵔⵔⵔⵜⵜⵉⵏ ⴷ 6 ⵜⴱⵕⵕⴰⵏⵚⵉⵏ\", 19) ->19 - 5 - 6 = 8 fruit_distribution\"0 ⵜⵉⴱⵕⵕⴰⵏⵚⵉⵏ ⴷ 1 ⵜⴱⵕⵕⴰⵏⵚⵉⵏ\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 ⵜⵉⴱⵕⵕⴰⵏⵚⵉⵏ ⴷ 3 ⵜⴱⵕⴰⵏⵚⵉⵏ\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 ⵜⵉⴱⵕⴰⵏⵚⵉⵏ ⴷ 1 ⵜⴱⵕⴰⵏⵚⵉⵏ\"20) \",1 -> 120 - 100 - 100 - 1 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"ⴰⴳⵡⴷⴰⵍ ⵏ ⵓⵙⵏⵎⴰⵍⴰ ⵏ ⵢⴰⵏ ⵓⴽⴰⴱⴰⵕ ⵏ ⵜⵙⴽⵍⴰ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⴳⵓⵜⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⴽⵜⵔ ⵢⴰⵜ ⵙⴳ ⵜⵏⵇⵇⵉⵟⵉⵏ ⴷ ⴰⴷ ⵜⵙⵙⴽⵜⵔ. ⵜⵙⵙⴽⵜⵔ ⵜⵙⵙⴽⵜⵔ ⴰⴷ ⵜⴳ ⵜⵙⵙⴽⵜⵔ ⵏⵏⴰ ⵖⵓⵔ ⵉⵍⵍⴰ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ. ⵎⴽ ⵜⵜⵢⴰⴼⴰⵏ ⴽⵉⴳⴰⵏ ⵏ ⵜⵏⵇⵇⵉⵟⵉⵏ ⵖⵓⵔ ⵉⵍⵍⴰ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ ⴰⵎⵥⵢⴰⵏ, ⵙⴽⵜⵔ ⵜⵙⵙⴽⵜⵔ ⵏⵏⴰ ⵖⵓⵔ ⵉⵍⵍⴰ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ. ⵜⵙⵙⴽⵜⵔ ⵜⵙⵙⴽⵜⵔ ⴰⴷ ⴰⴷ ⵜⵜⵓⵙⴽⵜⵔ ⴳ ⵜⵍⴳⴰⵎⵜ, [smallest_value, its index], ⵎⴽ ⵓⵔ ⵍⵍⵉⵏ ⵡⴰⵜⵉⴳⵏ ⵉⵎⵥⵢⴰⵏⵏ ⵏⵖ ⴷ ⴰⵙⵏⵎⴰⵍⴰ ⵏ ⵓⵙⵏⵎⴰⵍⴰ ⵉⴳⴰ ⵜⵍⴳⴰⵎⵜ ⵜⵓⵎⵍⵉⵍⵜ, ⵙⴽⵜⵔ []. ⴰⵎⴷⵢⴰ1: ⴰⵙⴽⵛⵎ: [4,2,3] ⴰⵙⴽⵛⵎ: [2, 1] ⴰⵙⴼⵍ: 2 ⵖⵓⵔ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵢⴰⵏ ⴰⵎⵥⵢⴰⵏ, ⴷ 2 ⵖⵓⵔ ⵉⵍⵍⴰ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵢⴰⵏ. ⴰⵎⴷⴰⵍ 3: ⴰⵙⴽⵜⵔ: [1,2,3]: ⴰⵙⴽⵜⵔ: [1,2,3] ⴰⵙⴽⵜⵔ: [2,2,3, [2, 4] ⴰⵙⴽⵛⵎ: 2 ⵖⵓⵔⴰⵔ: 0, 4, [0, ⴰⵙⴽⵛⵎ: 1] ⴰⵙⴽⵜⵔ: 0 ⴰⵙⴽⵜⵔ: 0 ⴰⵙⴽⵜⵔ ⴰⵎⵥⵢⴰⵏ ⴰⵎⵥⵢⴰⵏ ⴰⵎⵥⵢⴰⵏ, ⵎⴰⵛⵎⵜⵔ ⴰⵎⵥⵢⴰⵏ ⴰⵎⵥⵢⴰⵏ, ⵎⴰⵛⵎⵜⵔ ⴰⵎⵥⵢⴰⵏ ⴰⵎⵥⵢⴰⵏ, ⴷ ⵡⴰⵜⵉⴳ ⴰⵎⴷ ⴰⵎⴷ ⴰⵎⵥⵥⵥⵥⵥⵥⵥⵢⴰⵏ, ⴰⵎⴷ==1=0 * ⵙⵉⵏ, ⴰⵎⵢⴰⴷ ⴰⵎⵢⴰⴷ ⴰⵎⵢⴰⴷ ⴰⵎⵢⴰⴷ ⴰⵎⵢⴰⴷ ⴰⵎⵢⴰⴷ ⴰⵎⵢⴰⴷ ⴰⵎⵥⴰⵏ ⴰⵎⵥⴰⵏ ⴰⵎⵥⴰⵏ.\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⵅⵍⵍⵙⵏ. ⵔⴰⴷ ⵏⵔⴰⵔ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵅⴰⵜⴰⵔ ⴰⴽⴽⵡ ⵏⵏⴰ ⵢⵓⴳⵔⵏ ⵥⵕⵓ, ⴷ ⵏⵏⴰ ⵖⵓⵔⵙ ⵜⴽⵍⵉⵜ ⵏ ⵜⴽⵍⵉⵜ ⵢⵓⴳⵔⵏ ⵏⵖⴷ ⵉⵎⴽⵍⴰⵍⵏ ⴷ ⵡⴰⵜⵉⴳ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵜⴰⴽⵍⵉⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵜⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⵉⵜⵜⵓⴼⴽⴰⵏ ⴳ ⵜⵍⴳⴰⵎⵜ. ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵡⴰⵜⵉⴳ ⴰⴷ, ⵔⴰⴷ ⵏⵔⴰⵔ -1. ⴰⵎⴷⵢⴰ: ⵔⵣⵣⵓ (([4, 1, 2, 2, 3, 3, 4, 4]) == 2 ⵔⵣⵣⵓ (([1, 2, 2, 3, 3, 3, 4, 4]) == 3 ⵔⵣⵣⵓ (([5, 5, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''ⴰⵙⵎⵉⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴷⴰ ⵉⵜⵜⵓⴳⴰ ⵙ ⵓⵍⵓⴳ ⴰⵎⵣⴳⵓⵏ. ⴰⵙⵎⵉⵍ ⴰⵎⵣⴳⵓⵏ, ⵉⴳⴰ ⴰⵙⵎⵉⵍ ⵏ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ, ⴷ ⵡⴰⵜⵉⴳ ⴰⵎⵇⵔⴰⵏ ⵏ ⵉⵎⴹⴰⵏⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵢⴰⴹⵏⵉⵏ, ⴷ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ ⴰⵢⴰⴷ. ⵉⵎⴷⵢⴰⵜⵏ: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''ⵉⴳⴰⵏ ⵜⵉⵖⵣⵉ ⵏ ⴽⵕⴰⴹ ⵏ ⵉⴳⵏⵙⴰⵙ ⵏ ⵢⴰⵏ ⵓⴽⵕⴰⴹ. ⵙⵙⴽⵔ ⴰⵙⴰⵢⵔⴰⵔ ⵏ ⵓⴽⵕⴰⴹ ⵙ 2 ⵏ ⵜⵏⵇⵇⵉⴹⵉⵏ ⵜⵉⵎⵉⴹⵉ ⵎⴽⵍⵍⵉ ⵙⴽⵔⵏⵜ ⴽⵕⴰⴹ ⵏ ⵉⴳⵏⵙⴰⵙ ⵢⴰⵏ ⵓⴽⵕⴰⴹ ⵉⵣⴷⵉⵢⵏ. ⵙ ⵡⵉⵢⴰⴹ, ⵙⵙⴽⵔ -1 ⴽⵕⴰⴹ ⵏ ⵉⴳⵏⵙⴰⵙ ⵙⴽⵔⵏ ⵢⴰⵏ ⵓⴽⵕⴰⴹ ⵉⵣⴷⵉⵢⵏ ⵎⴽⵍⵍⵉ ⵜⴳⴰ ⵜⵓⵎⴰⵏⵜ ⵏ ⴽⵕⴰⴹ ⵏ ⵉⴳⵏⵙⴰⵙⵏ ⵢⴰⵜ ⵜⴰⵖⵣⵉ ⵜⴰⵅⴰⵜⴰⵔⵜ ⵓⴳⴳⴰⵔ ⵏ ⵓⴽⵕⴰⴹ. ⴰⵎⴷⵢⴰ: triangle_area ({3,4,5) == 6.00 triangle_area ({1,2,10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⵊⵊⴰⵏ ⴰⴷ ⵜⴳ ⵜⵉⴷⵜ ⵎⴽⵍⵍⵉ ⵔⴰⴷ ⵉⵣⵔⵉ ⵓⴷⵎ q, ⴷ ⵜⵉⴷⵜ ⵎⴽⵍⵍⵉ ⵓⵔ ⵉⴳⵉ. ⵔⴰⴷ ⵉⵣⵔⵉ ⵓⴷⵎ q ⵎⴽⵍⵍⵉ ⵉⴳⴰ ⴰⵎⵙⴰⵙⴰ (ⵜⴳⴰ ⵢⴰⵜ ⵜⵍⴳⴰⵎⵜ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉⵜ) ⴷ ⵡⴰⵜⵉⴳ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⵙ ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⴽⵙⴰⵢ ⴰⵎⵇⵔⴰⵏ w. ⴰⵎⴷⵢⴰ: will_it_fly([1, 2], 5) â -> False # 1+2 ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⴽⵙⴰⵢ ⴰⵎⵇⵔⴰⵏ, ⵎⴰⵛⴰ ⵓⵔ ⵉⴳⵉ ⴰⵎⵙⴰⵙⴰ. will_it_fly([3, 2, 3], 1) â -> False # ⵉⴳⴰ ⴰⵎⵙⴰⵙⴰ, ⵎⴰⵛⴰ 3+2+3 ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⴽⵙⴰⵢ ⴰⵎⵇⵔⴰⵏ. will_it_fly[3, 2, 3], 9) â -> True # 3+23 ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⴽⵙⴰⵢ ⴰⵎⵇⵔⴰⵏ, ⴷ ⵉⴳⴰ ⴰⵎⵙⴰⵙⴰ. will_it_fly([3], â 5) -> True # 3 ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⴽⵙⴰⵢ ⴰⵎⵇⵔⴰⵏ, ⵎⴰⵛⴰ ⵉⴳⴰ ⴰⵎⵙⴰⵙⴰ '''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"ⴳ ⵓⵎⵙⴷⵓⵙ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⵜⵔ ⴰⴷ ⵜⵙⵙⵏⴼⵍⴷ ⴽⵉⴳⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵃⵎⴰ ⴰⴷ ⵜⴳ ⵜⵎⵙⴷⵓⵙⵜ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉⵜ. ⵜⴰⵎⵙⴷⵓⵙⵜ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉⵜ ⵜⴳⴰ ⵢⴰⵜ ⵜⵎⵙⴷⵓⵙⵜ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵙⴰⵏⵏ ⵙ ⵢⴰⵜ ⵜⵖⴰⵔⴰⵙⵜ ⵙ ⵓⵎⵏⵉⴷ ⴷ ⵙ ⵓⵎⵏⵉⴷ. ⴳ ⵢⴰⵏ ⵓⵙⵏⴼⵍ, ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⴼⵍⴷ ⵢⴰⵏ ⵉⴼⵔⴷⵉⵙ ⵙ ⴽⵔⴰ ⵢⴳⴰⵜⵜ ⵉⴼⵔⴷⵉⵙ. ⵙ ⵓⵎⴷⵢⴰ: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''ⵙⵔⵙⵏ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⵎⵥⵏ ⵙⵏⴰⵜ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⴷ ⴰⵔ ⵢⴰⴽⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵓⵎⴹⴰⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⴳ ⴽⵓⵍⵍⵓ ⵉⵙⴽⴽⵉⵍⵏ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏⵏⴰ ⴷⵔⵓⵙⵏ ⵙⴳ ⵜⵍⴳⴰⵎⵜ ⵢⴰⴹⵏ. ⵎⴽ ⴷⴰⵔ ⵙⵏⴰⵜ ⵜⵍⴳⴰⵎⵉⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ, ⵙⵔⵙⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵜⴰⵎⵣⵡⴰⵔⵓⵜ. ⵉⵎⴷⵢⴰⵜⵏ total_match{\\\\displaystyle total_match{\\\\displaystyle total_match{\\\\displaystyle total_match{\\\\displaystyle total_match{\\\\displaystyle total_match{\\\\displaystyle total_match{\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {1}{\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathfrak {\\\\mathrm}}}}}}}}}}}}}}}}}} } }'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"ⵙⵔⵙⵏ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵓⵟⵟⵓⵏ ⵏⵏⴰ ⵉⵜⵜⵓⴼⴽⴰⵏ ⴰⵙⴼⵙⵔ ⵏ 3 ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵉⵎⵣⵡⵓⵔⴰ ⴷ ⵜⵉⴷⵜ ⵎⴽ ⵓⵔ ⵉⴳⵉ. ⵏⵙⵙⵏ ⵎⴰⵙⴷ (ⴰ) ⵉⴳⴰ ⵓⴳⴳⴰⵔ ⵏ 100. ⴰⵎⴷⵢⴰ: is_multiply_prime(30) == True 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵔⵔⴰ ⵢⴰⵜ ⵜⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵓⵟⵟⵓⵏ x ⵜⴰⵣⴷⵓⵖⵜ ⵜⴰⵣⴷⵓⵖⵜ ⵏ n ⴷ ⵜⵉⴷⵜ ⴳ ⵡⴰⴷⴷⴰⴷⵏ ⵢⴰⴹⵏⵉⵏ. x ⵜⴳⴰ ⵜⴰⵣⴷⵓⵖⵜ ⵜⴰⵣⴷⵓⵖⵜ ⵏ n ⵎⴽ n**int=x ⵙ ⵓⵎⴷⵢⴰ: is_simple_power{1, 4) => true is_simple_power{2, 2) => true is_simple_power{8, 2) => true is_simple_power{3, 2) => false is_simple_power{3, 1) => false is_simple_power{5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ a ⴰⵔ ⵉⵜⵜⴰⴽⴰ True ⵎⴽ ⵉⴳⴰ ingeger ⴰⴷ ⴰⵎⴷⵢⴰ ⴰⵎⴷⴷⴰⴷ ⵏ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ. ⵜⴰⵖⴹⴼⵜ: ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⵎⴽⵜⵉ ⵉⵙ ⵉⴳⴰ ⵡⴰⵏⵙⴰ ⵏ ⵓⵙⴽⵛⵎ ⴰⵀⴰ ⵉⴳⴰ. ⵉⵎⴷⵢⴰⵜⵏ: iscube ((1) ==> true iscube ((2) ==> false iscube ((-1) ==> true iscube ((64) ==> true iscube ((0) ==> true iscube ((180) ==> false '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⴰⵡⵓⵔⵉⵎ ⵢⴰⵜ ⵜⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵟⵟⵓⵏ ⴰⵀⵉⵊⴰⴷⵉⵛⵎⴰⵍ ⵙ ⵢⴰⵜ ⵜⵣⵍⵉⵜ ⴷ ⴰⵔ ⵉⵙⵉⴹⵏ ⵉⵎⵉⴹⵏ ⵏ ⵓⵟⵟⵓⵏ ⴰⵀⵉⵊⴰⴷⵉⵛⵎⴰⵍ ⵏⵏⴰ ⵉⴳⴰⵏ ⵉⵎⵉⴹⵏ ⵉⵎⵣⵡⵓⵔⴰ (ⵉⴹ ⴰⵎⵣⵡⴰⵔⵓ, ⵏⵖ ⴰⵎⵣⵡⴰⵔⵓ, ⵉⴳⴰ ⴰⵎⴹⴰⵏ ⴰⴳⴰⵎⴰⵏ ⴰⵅⴰⵜⴰⵔ ⵙⴳ 1 ⵏⵏⴰ ⵓⵔ ⵉⴳⵉⵏ ⴰⵙⵢⴰⴼⵓ ⵏ ⵙⵉⵏ ⵉⵎⵉⴹⵏ ⵉⵎⵥⵥⵉⵏ). ⵉⵎⵉⴹⵏ ⵏ ⵓⵟⵟⵓⵏ ⴰⵀⵉⵊⴰⴷⵉⵛⵎⴰⵍ ⴳⴰⵏ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. ⵉⵎⵉⴹⵏ ⵉⵎⵣⵡⵓⵔⴰ ⴳⴰⵏ 2, 3, 5, 7, 11, 13, 17,... ⴰⵢⴰⴷ ⵉⴳⴰⵏ ⴰⴷ ⵜⵜⵓⵙⵜⴰⵢⵎ ⴽⵔⴰ ⵏ ⵉⵎⵉⴹⵏ ⵏ ⵓⵟⵟⵓⵏ ⴰⴷ: 2, 3, 5, 7, B (= ⵓⵟⵟⵓⵏ ⴰⵎⵔⴰⵡ 11), D (= ⵓⵟⵟⵓⵏ ⴰⵎⵔⴰⵡ 13). ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⴽⵜⵉⵎ ⵉⵙ ⵉⴳⴰ ⵓⴽⵛⵛⵛⵓⵎ ⴰⵀⴰ ⵉⴳⴰ ⵜⵓⵙⴷⵉⴷ ⵏⵖ ⴷ ⵓⵟⵟⵓⵏ, ⴷ ⵉⵙⵎⵎⴰⵡⵏ A,B,C,D,E,F ⴰⵀⴰ ⴰⵀⴰ ⴳⴰⵏ ⵉⵎⵉⴹⴰⵏ ⵉⵎⵇⵔⴰⵏ. ⵉⵎⴷⵢⴰⵏ: ⵉ ⵓⵎⴹⴰⵏ \"AB\" ⵉⵇⵇⴰⵔ ⵉ ⵓⵙⵓⵖⵕⵏ ⵉ ⵓⵙⵓⵖⵕ ⵉ ⵓⵙⵓⵖⵕ ⵉⵇⵇⴰⵔ ⵉⵇⵇⴰⵏ 1.\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵙ ⵜⴰⵍⵖⴰ ⵏ ⵜⵓⵙⴷⵉⴷⵜ ⴷ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵏⴼⵍ ⵙ ⵜⴰⵍⵖⴰ ⵏ ⵜⵓⵙⴷⵉⴷⵜ. ⵔⴰⴷ ⵜⵕⵏⵓ ⵜⴰⵡⵓⵔⵉ ⵢⴰⵜ ⵜⵉⴼⵔⵜ, ⴷ ⴽⵓ ⵉⵙⴽⴽⵉⵍ ⵉⵙⵎⴷⵢⴰⵏ ⵢⴰⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵓⵙⴷⵉⴷⵜ. ⴽⵓ ⵉⵙⴽⴽⵉⵍ ⴳ ⵜⵉⴼⵔⵜ ⵔⴰⴷ ⵉⴳ '0' ⵏⵖ '1'. ⵔⴰⴷ ⵉⵍⵉⵏ ⴽⵔⴰ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵢⴰⴹⵏⵉⵏ 'db' ⴳ ⵍⴱⴷⵓ ⴷ ⵜⴳⵉⵔⴰ ⵏ ⵜⵉⴼⵔⵜ. ⵉⵙⴽⴽⵉⵍⵏ ⵢⴰⴹⵏⵉⵏ ⵔⴰⴷ ⵉⵍⵉⵏ ⴰⴼⴰⴷ ⴰⴷ ⵙⵙⵔⵙⵏ ⵜⴰⵍⵖⴰ. ⵉⵎⴷⵢⴰⵜⵏ: decimal_to_binary ((15) # ⴰⵔ ⵉⵜⵜⵔⴰⵔ \"db1111db\" decimal_to_binary32) # ⴰⵔ ⵉⵜⵜⵔⴰⵔ \"db100000db\"\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵓ ⵢⴰⵏ ⵢⴰⵏ ⵓⵡⵉⴽⵉ s. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵥⵕ ⵉⵙ ⵉⴳⴰ ⵓⵡⵉⴽⵉ ⴰⴷ ⴰⵎⵓⵔ ⵏⵖ ⵓⵔ ⵉⴳⵉ. ⵉⴳⴰ ⵓⵡⵉⴽⵉ ⴰⴷ ⴰⵎⵓⵔ ⵉⴳ ⵜⵉⵖⵣⵉ ⵏⵏⵙ 3 ⴷ ⴽⵓ 3 ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵙ ⵓⵎⴷⵢⴰ: is_happy{\\displaystyle is_happy{\\displaystyle is_happy{\\displaystyle is_happy{\\displaystyle is_happy{\\text{a}}={\\displaystyle is_happy{\\text{a}}={\\text{a}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{a}}}={\\text{x}}={\\text{x}}={\\text{a}}}={\\text{\\text{x}}}={\\text{a}}}}={\\text{\\text{\\text{x}}}}}={\\text{\\text{\\text{\\text{a}}}}}}}\"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"ⵉⴳⴰ ⵡⴰⵢⵢⵓⵔ ⴰⵎⴳⴳⴰⵔⵓ ⵏ ⵜⵙⵓⵜⵍⵜ ⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴼⴽ ⵓⵙⵍⵎⴰⴷ ⵜⵉⵙⴽⴼⴰⵍ ⵉ ⵉⵏⵍⵎⴰⴷⵏ. ⵉⵙⴽⵔ ⵓⵙⵍⵎⴰⴷ ⴰⵍⴳⵓⵔⵉⵜⵎ ⵏⵏⵙ ⵏ ⵓⵙⵜⴰⵍ. ⴰⵙⴳⵓⵎ ⴰⵎⵢⵉⵡⵏ ⵉⴳⴰ ⵜ ⵎⴰⵙ ⵉⵙⴽⵔ ⴰⵙⵏⴼⴰⵔ ⵏ ⵓⵙⵜⴰⵍ. ⵜⵙⴽⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵙⴽⴼⴰⵍ ⵏ ⴽⵔⴰ ⵏ ⵉⵏⵍⵎⴰⴷⵏ ⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵔⵔⴰⵎ ⵢⴰⵜ ⵜⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵥⴹⴰⵕⵏ ⴰⴷ ⵉⴼⴽ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵙⴽⴼⴰⵍ ⵏ ⵜⵉⵔⵔⴰ ⵙ ⵓⵙⵎⵔⵙ ⵏ ⵜⴽⴰⴷⵉⵢⵜ ⴰⴷ: GPA.\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵖⵉⵍⵓⴼ ⴷ ⴰⵔ ⵉⵜⵜⴰⴽⴰ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵓⵖⵉⵍⵓⴼ ⴰⵎⵣⵡⴰⵔⵓ ⵏⵖⴷ ⵜⵉⴽⵡⴰⵍⵜ ⵎⴽ ⵓⵔ ⵉⴳⵉ ⴰⵎⵣⵡⴰⵔⵓ ⵉⵎⴷⵢⴰⵜⵏ prime_length{\"Hello\") == True prime_length{\"abcdcba\") == True prime_length{\"kittens\") == True prime_length{\"orange\") == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"ⴳ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵙⴽⵔ ⴰⵙⵉⴹⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵏⵉⴳⵏ ⵏ n ⵡⵓⵟⵟⵓⵏ ⵏⵏⴰ ⵉⵜⵜⴱⴷⴰⴷⵏ ⵏⵖⴷ ⵉⵜⵜⵎⵜⵉⵏ ⵙ 1. \"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ N, ⵙⵙⵓⴼⵖ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⵙ ⵜⴱⵉⵏⵉⵜ. ⴰⵎⴷⵢⴰ: N = 1000, ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⵜⴳⴰ 1 ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⴳ \"1\". N = 150, ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⵜⴳⴰ 6 ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⴳ \"110\". N = 147, ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⵜⴳⴰ 12 ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⴳ \"1100\". ⵉⵎⵙⵏⴼⴰⵍⵏ: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. Output: a string of binary number \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"ⴳ ⵓⵎⴷⵢⴰ ⵏ ⵜⵍⴳⴰⵎⵜ ⵓⵔ ⵉⴳⵉⵏ ⵜⵓⵎⵍⵉⵍⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵔⵏⵓⵏ ⵉⵎⴷⵢⴰⵡⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳ ⵉⵙⵓⵎⴰⵔ ⵉⵎⵣⴰⵔⴰⵢⵏ. ⵉⵎⴷⵢⴰⵡⵏ: add (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"ⵙⵔⵙⵏ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⴰⵏⵎⵏⴰⴹ ⴷ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵢⴰⵜ ⵜⵓⵏⵖⵉⵍⵜ ⵉⵜⵜⵓⵙⵏⵎⴰⵍⴰⵏ. ⵜⴰⵡⵉⴽⵉ ⴰⵏⵎⵏⴰⴹ ⵏ ⵓⵡⵉⴽⵉ, ⵉⴳⴰ ⵢⴰⵏ ⵓⵡⵉⴽⵉ ⴳ ⵜⵜⵓⵙⵏⴼⴰⵍⵏ ⴽⵓⵍⵍⵓ ⵜⴳⵓⵔⵉⵡⵉⵏ (ⵜⵓⵙⴱⴹⴰⵏⵜ ⵙ ⵓⵙⴰⵢⵔⴰⵔ) ⵙ ⵢⴰⵜ ⵜⴳⵓⵔⵉ ⵜⴰⵎⴰⵢⵏⵓⵜ ⴳ ⵜⵜⵓⵙⵏⵎⴰⵍⴰⵏ ⴽⵓⵍⵍⵓ ⵉⵙⴽⴽⵉⵍⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵇⵔⴰⵏ ⵅⴼ ⵡⴰⵜⵉⴳ ⵏ ascii. ⵜⴰⵖⴹⴼⵜ: ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵃⴹⵓ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴷ ⵉⵙⴰⵢⵔⴰⵔⵏ ⴳ ⵜⴳⵓⵔⵉ. ⵙ ⵓⵎⴷⵢⴰ: anti_shuffle ((('Hi') ⴰⵔ ⵉⵜⵜⵔⴰⵔ 'Hi' anti_shuffle ((('hello') ⴰⵔ ⵉⵜⵜⵔⴰⵔ 'ehllo' anti_shuffle (('Hello World!!!') ⴰⵔ ⵉⵜⵜⵔⴰⵔ 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵓ ⵢⴰⵏ ⵉⵏⵖⵎⵉⵙⵏ ⵉⴽⵙⵡⴰⵜⵏ, ⴰⵎⵎ ⵜⵍⴳⴰⵎⵉⵏ ⵉⵜⵜⵓⵙⵎⴳⴰⵍⵏ, ⵏⵏⴰ ⵢⴰⵥⵏ ⵙ ⵜⵎⵜⵜⵉ, ⵎⴰⵛⴰ, ⵓⵔ ⵢⴰⵥⵏ ⵙ ⵜⵎⵜⵜⵉ, ⴽⵓ ⵜⴰⵡⵔⵉⵔⵜ ⵜⵣⵎⵔ ⴰⴷ ⵜⵍⵍⴰ ⴳⵉⵙ ⵓⵟⵟⵓⵏ ⵏ ⵜⵔⵙⴰⵍ ⵉⵎⵣⴰⵔⴰⵢⵏ. ⴷⴰⵜ ⵏ lst, ⴷ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ x, ⵙⵜⵓⵜⵔ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ x ⴳ ⵜⵍⴳⴰⵎⵜ, ⴷ ⵜⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴷⴱⵍⵜⵉⵏ, [(x1, y1), (x2, y2) ...] ⵣⵓⵏⴷ ⵎⴰⵙ ⴷ ⴽⵓ ⵜⴰⵡⵔⵉⵔⵜ ⵜⴳⴰ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ ⴽⵓ\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"ⴳ ⵓⵎⵙⴷⵓⵙ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⴳⵓⵜⵏ, ⵙⵙⵓⴼⵖ ⵜⴰⴽⵓⴱⵉⵢⵜ ⵏ ⵓⵎⵙⴷⵓⵙ ⴷⴼⴼⵉⵔ ⵏ ⵓⵙⵎⵙⴰⵙⴰ, ⵔⴰⴷ ⵜⵙⵙⵓⴷⵙⴷ ⴰⵎⵙⴷⵓⵙ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵇⵔⴰⵏ ⵎⴽ ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⵖⵎⵉⵙ ⴰⵎⵣⵡⴰⵔⵓ, ⵡⴰⵜⵉⴳ ⵏ ⵓⵖⵎⵉⵙ ⴰⵎⴳⴳⴰⵔⵓ, ⵓⵔ ⵉⵎⵢⴰⵏⴰⵡⵏ, ⵏⵖⴷ ⵙ ⵓⵙⵙⵓⴷⵙ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⴳⴳⴰⵔⵓ ⵎⴽ ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⵖⵎⵉⵙ ⴰⵎⵣⵡⴰⵔⵓ, ⵡⴰⵜⵉⴳ ⵏ ⵓⵖⵎⵉⵙ ⴰⵎⴳⴳⴰⵔⵓ, ⵉⵎⵢⴰⵏⴰⵡⵏ. ⵜⴰⵖⴹⴼⵜ: * ⵓⵔ ⵜⵙⵙⵓⴷⵙⴷ ⴰⵎⵙⴷⵓⵙ. ⴰⵎⴷⵢⴰ: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 2, 3, 4, 5] => [6, 5, 4, 3, 2, 1, 5, 6])  0\"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ encrypt ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⴽⵙⵉⵍ ⴰⵎⵎ ⵓⵎⵏⵣⴰⵖ ⴷ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵢⴰⵏ ⵓⴽⵙⵉⵍ ⵉⵜⵜⵓⵣⵎⵎⴻⵎⵏ ⵙ ⵓⵙⵎⵓⵜⵜⴳ ⵏ ⵓⵙⴽⴽⵉⵍ. ⴰⵙⴽⴽⵉⵍ ⴰⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⵜⵜⵓⵣⵎⵎⴻⵎ ⵙ ⵢⴰⵜ ⵜⵖⴰⵔⴰⵙⵜ ⵏⵏⴰ ⵙ ⴰⵔ ⵜⵜⵎⵓⵜⵜⵓⵢⵏ ⵡⴰⵔⵔⴰⵜⵏ ⵙ ⵙⵏⴰⵜ ⵏ ⵜⵉⴽⴽⴰⵍ ⵙ ⵙⵉⵏ ⵡⴰⵏⵙⴰ. ⵙ ⵓⵎⴷⵢⴰ: encrypt('hi') ⴰⵔ ⵉⵜⵜⵔⴰⵔ 'lm' encrypt('asdfghjkl') ⴰⵔ ⵉⵜⵜⵔⴰⵔ 'ewhjklnop' encrypt('gf') ⴰⵔ ⵉⵜⵜⵔⴰⵔ 'kj' encrypt('et') ⴰⵔ ⵉⵜⵜⵔⴰⵔ 'ix' \"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵓ ⵢⴰⵏ ⵢⴰⵏ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵙⴽⵔ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ next_smallest (() ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⴰⵙⴽⴽⵉⵍ ⵡⵉⵙⵙ ⵙⵉⵏ ⴳ ⵜⵍⴳⴰⵎⵜ. ⴷⴰ ⵜⵜⴰⴽⴽⴰ None ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵓⵙⴽⴽⵉⵍ ⴰⴷ. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵢⴰⵜ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ, ⴷ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵉⴹⵏ ⵉⵎⵉⴹⵏ ⵏ ⵜⵔⴳⴰⵍⵉⵏ. ⵜⴰⵔⴳⴰⵍⵜ ⵜⴳⴰ ⵢⴰⵜ ⵜⴳⵓⵔⵉ ⵏⵏⴰ ⵢⴱⴷⴰⵏ ⵙ ⵜⴳⵓⵔⵉ \"ⵉ\". ⴷⴰ ⵜⵜⵓⵙⵏⵎⴰⵍⴰⵏⵜ ⵜⵉⴳⵓⵔⵉⵡⵉⵏ ⵙ '.', '?' ⵏⵖ '!'. ⵙ ⵓⵎⴷⵢⴰ: >>> is_bored(\"Hello world\") 0 >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵢⵓⵎⵥⵏ 3 ⵏ ⵡⵓⵟⵟⵓⵏ. ⴷⴰ ⵢⴰⴽⴽⴰ ⵜⵉⴷⵜ ⵎⴽ ⵍⵍⵉ ⵉⴳⴰ ⵢⴰⵏ ⵙⴳ ⵡⵓⵟⵟⵓⵏⵏ ⴰⵎⵎ ⵓⵖⵣⵓⵔ ⵏ ⵙⵉⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵢⴰⴹⵏⵉⵏ, ⴷ ⵡⵓⵟⵟⵓⵏⵏ ⴰⴽⴽⵡ ⴳⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⴷⴰ ⵢⴰⴽⴽⴰ ⵜⵉⴷⵜ ⴳ ⴽⵔⴰ ⵏ ⵡⴰⴷⴷⴰⴷⵏ ⵢⴰⴹⵏⵉⵏ. ⵉⵎⴷⵢⴰⵜⵏ ⴽⵓ_ⴰⵏⵜ_5, 2, 7) â -> ⵜⵉⴷⵜ ⴽⵓ_ⴰⵏⵜ_3, 2, 2) â -> ⵜⵉⴷⵜ ⴽⵓ_ⴰⵏⵜ_3, -2, 1) â -> ⵜⵉⴷⵜ ⴽⵓ_ⴰⵏⵜ_3.6, -2.2, 2) â -> ⵜⵉⴷⵜ '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"ⵙⵔⵙⵏ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵜ ⵜⴱⵔⴰⵜ, ⴰⵔ ⵜⵙⵙⵓⴷⵙ ⵙ ⵜⵖⴰⵔⴰⵙⵜ ⵏⵏⴰ ⵉⵙⵏⴼⵍⵏ ⵜⵉⴽⴽⵍⵜ ⵏ ⴽⵓⵍⵍⵓ ⵜⵉⵔⵔⴰ, ⴰⵔ ⵉⵙⵎⴷⵢⴰ ⴽⵓⵍⵍⵓ ⵉⵎⵙⵍⵉ ⴳ ⵜⴱⵔⴰⵜ ⵙ ⵜⵉⵔⵔⴰ ⵏⵏⴰ ⵉⵜⵜⵉⵍⵉⵏ ⵙ 2 ⵏ ⵡⴰⵏⵙⴰ ⴷⴰⵜ ⵏ ⵓⵎⵙⵍⵉ ⴳ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⴼⵉⵏⴰⵖ. ⵙⵙⵓⵎⵔ ⴷⴰⵢ ⵜⵉⵔⵔⴰ. ⵉⵎⴷⵢⴰⵜⵏ: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⴷⴰ ⵜⵜⵉⵔⵉⵎ ⴰⴷ ⵜⴰⴼⵎ ⴰⵜⵉⴳ ⴰⵎⵣⵡⴰⵔⵓ ⴰⵅⴰⵜⴰⵔ ⴷ ⴰⴷ ⵜⵔⵎⵙⴷ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵏⵏⵙ. ⵉⵎⴷⵢⴰⵜⵏ: ⵉ lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3], ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵢⵉⵍⵉ ⵓⵙⵓⵖⵍ 10 ⵉ lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1], ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵢⵉⵍⵉ ⵓⵙⵓⵖⵍ 25 ⵉ lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3], ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵢⵉⵍⵉ ⵓⵙⵓⵖⵍ 13 ⵉ lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6], ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵢⵉⵍⵉ ⵓⵙⵓⵖⵍ 11 ⵉ lst = [0,81,12,31,21,21], ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵢⵉⵍⵉ ⵓⵙⵓⵖⵍ 3 ⵉ lst = [0,1,8,1,2,1,7] ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵢⵉⵍⵉ ⵓⵙⵓⵖⵍ 7 \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"ⴳ ⵓⴷⵍⵉⵙ, ⴰⵔ ⵏⵙⵙⴽⵛⵎ True ⵎⴽⵍⵍⵉ ⴳⴰⵏ ⴽⵓⵍⵍⵓ ⵉⵙⵍⴽⵉⵏ ⵜⵉⴼⵔⵉⵙⵉⵏ ⴳ ⵜⵉⴼⵔⵉⵙⵉⵏ ⵜⵉⵎⵥⵢⴰⵏⵉⵏ ⵏⵖ ⴽⵓⵍⵍⵓ ⵉⵙⵍⴽⵉⵏ ⴳⴰⵏ ⵜⵉⴼⵔⵉⵙⵉⵏ ⴳ ⵜⵉⴼⵔⵉⵙⵉⵏ ⵜⵉⵎⵇⵔⴰⵏⵉⵏ, ⵎⴽⵍⵍⵉ ⴷⴰ ⵏⵙⵙⴽⵛⵎ False. ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⴰⵔ ⵜⵙⵙⴽⵛⵎ False ⵉⴳ ⵓⴷⵍⵉⵙ ⵉⵜⵜⵓⵙⴽⴰⵔⵏ ⵉⴳⴰ ⵜ ⵡⴰⴽⴰⵍ. ⵉⵎⴷⵢⴰⵜⵏ: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) ⴰⵔ ⵜⵙⵙⴽⵛⵎ True. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) ⴰⵔ ⵜⵙⵙⴽⵛⵎ False. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) ⴰⵔ ⵜⵙⵙⴽⵛⵎ False. check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"}) ⴰⵔ ⵜⵙⵙⴽⵛⵎ False.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"ⵙⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⵓⵔ ⵉⵔⵉⵏ ⴷ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵣⵡⵓⵔⴰ ⵏⵏⴰ ⵉⴳⴰⵏ ⵉⵎⴹⴰⵏⵏ ⵉⵎⵣⵡⵓⵔⴰ ⴷ ⵉⵎⵥⵥⵉⵏⵏ ⵏⵉⴳ ⵏ n. ⵙ ⵓⵎⴷⵢⴰ: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"ⵔⵎⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵜⴰⵢⴰⴼⵓⵜ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⴰⴳⵣⵣⵓⵎⵜ ⵏⵏⵙⵏ. ⵏⵙⵙⵏ ⵉⵙ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⴰⴷ ⴰⵀⴰ ⵉⴳⴰ ⵡⵉⵏⵏⵙ. ⵉⵎⴷⵢⴰⵜⵏ: ⵓⵎⵔⵔⵓⴽ ((148, 412) ⵉⵇⵇⴰⵏ ⴰⴷ ⵢⴰⴽⴽⴰ 16. ⵓⵎⵔⵔⵓⴽ ((19, 28) ⵉⵇⵇⴰⵏ ⴰⴷ ⵢⴰⴽⴽⴰ 72. ⵓⵎⵔⵔⵓⴽ ((2020, 1851) ⵉⵇⵇⴰⵏ ⴰⴷ ⵢⴰⴽⴽⴰ 0. ⵓⵎⵔⵔⵓⴽ ((14,-15) ⵉⵇⵇⴰⵏ ⴰⴷ ⵢⴰⴽⴽⴰ 20. \"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"ⴳ ⵓⵎⴷⵢⴰ: count_upper{\"aBCdEf\") ⴰⵔ ⵉⵜⵜⵔⴰⵔ 1 count_upper{\"abcdefg\") ⴰⵔ ⵉⵜⵜⵔⴰⵔ 0 count_upper{\"dBBE\") ⴰⵔ ⵉⵜⵜⵔⴰⵔ 0 \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵡⴰⵜⵉⴳ (ⵜⴰⵏⴳⴰⵍⵜ) ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏⵏ ⴰⵎⴹⴰⵏ ⴰⵔ ⵉⵜⵜⴰⴽⴰ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⵏⵏⴰ ⵢⴰⴷ ⵉⴳⴳⵓⴳⵏ. ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⴰⴷ ⴰⵎⵣⴰⵔⴰⵢ ⴰⴽⴷ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴷⵓⵏ ⴰⵙ ⵙⴳ ⵓⵎⵢⴰ. ⴰⵎⴷⵢⴰ >>> closest_integer (((\"10\") 10 >>> closest_integer (((\"15.3\") 15 ⴰⵙⴼⵙⵉ: ⴰⵙⵎⵓⵜⵜⴳ ⵙⴳ ⵓⵎⴹⴰⵏ ⴰⵎⵣⴰⵔⴰⵢ ⴰⴽⴷ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴰⵙⵎⵓⵜⵜⴳ ⴰⴷ ⵉⴳⴰⵏ ⵡⴰⵏⵏⴰ ⵢⴰⴷ ⵉⴳⴳⵓⴳⵏ ⵙⴳ ⵓⵎⴹⴰⵏ. ⵙ ⵓⵎⴷⵢⴰ: closest_integer (((14.5\") ⴰⴷ ⵉⴽⴽⴰ 15 ⴷ closest_integer (((-14.5\") ⴰⴷ ⵉⴽⴽⴰ -15. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"ⵉⴳ ⴷⴰⵔⴽ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵙⵙⴽⵔⴷ ⵢⴰⵜ ⵜⵔⴱⴰⵜ ⵏ n ⵉⵙⵡⵉⵔⵏ ⵏ ⵉⵔⴱⴰⵏ. ⴰⵙⵡⵉⵔ ⴰⵎⵣⵡⴰⵔⵓ ⴷⴰⵔⵙ n ⵉⵔⴱⴰⵏ. ⵉⵎⴹⴰⵏ ⵏ ⵉⵔⴱⴰⵏ ⴳ ⵓⵙⵡⵉⵔ ⴰⴹⵏⵉⵏ ⵉⴳⴰ ⵜⵜ: - ⵡⵓⵟⵟⵓⵏ ⴰⵎⵏⴹⴰⵏ ⴰⵎⵏⴹⴰⵏ ⴰⴷ ⵢⵓⵛⴽⴰⵏ ⵉⵖ ⵉⴳⴰ n ⴰⵎⵏⴹⴰⵏ ⴰⵎⵏⴹⴰⵏ. - ⵡⵓⵟⵟⵓⵏ ⴰⵎⵏⴹⴰⵏ ⴰⴷ ⵢⵓⵛⴽⴰⵏ ⵉⵖ ⵉⴳⴰ n ⴰⵎⵏⴹⴰⵏ ⴰⵎⵏⴹⴰⵏ. ⵙⵙⴽⵔⴷ ⴰⵎⴹⴰⵏ ⵏ ⵉⵔⴱⴰⵏ ⴳ ⴽⵓ ⴰⵙⵡⵉⵔ ⴳ ⵜⵍⴳⴰⵎⵜ, ⴳ ⵉⵍⵍⴰ ⵓⵙⴽⴽⵉⵍ ⴳ ⵓⵙⵏⵎⵍ i ⵉⵙⵎⴷⵢⴰ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵔⴱⴰⵏ ⴳ ⵓⵙⵡⵉⵔ (ⵉ+1). ⴰⵎⴷⵢⴰ: >>> make_a_pile(3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵔⴰ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵉⵜⵜⵓⵢⴼⴼⵖⵏ ⵙ ⵉⵎⵉⴹⴰⵏⵏ ⵏⵖⴷ ⵙ ⵉⵎⵏⵖⵉ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⴱⴹⵉⴷ ⵜⵉⴼⵉⵏⴰⵖ ⵖⵔ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴷ ⴰⴷ ⵜⵙⴽⵔ ⵢⴰⵜ ⵜⵔⵔⴰⵢⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ. ⵙ ⵓⵎⴷⵢⴰ: words_string (((\"ⵙⵍⵉⵎⵜ, ⵉⵙⵎ ⵏⵏⵖ ⵊⵓⵏ)) == [\"ⵙⵍⵉⵎⵜ\", \"ⵙⵍⵉⵎⵜ\", \"ⵉⵙⵎ\", \"ⵊⵓⵏ\"] words_string (((\"ⵢⵉⵡⵜ, ⵙⵏⴰⵜ, ⴽⵕⴰⴹ, ⴽⴽⵓⵥ, ⵙⵎⵎⵓⵙ, ⵚⴹⵉⵚ\") == [\"ⵢⵉⵡⵜ\", \"ⵙⵏⴰⵜ\", \"ⵙ ⴽⵕⴰⴹ\", \"ⴽⵓⵥ\", \"ⵎⵎⵓⵙ\", \"ⵚⴹⵉⵚ\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"ⵜⴰⵡⵡⵓⵔⵉ ⴰⴷ ⴷⴰ ⵜⴻⵜⵜⵓⵎ ⵙⵉⵏ ⵉⵎⴹⴰⵏⵏ ⵉⴽⵙⵡⴰⵜⵏ x ⴷ y ⴰⵔ ⵜⵙⵙⴽⵛⵎ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵇⵇⵔⴰⵏ ⴳ ⵓⵙⵏⴼⴰⵔ [x, y] ⴳ ⵓⵎⵏⵉⴷ. ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵡⵓⵟⵟⵓⵏ ⴰⴷ, ⵔⴰⴷ ⵜⵙⵙⴽⵛⵎ -1. ⵙ ⵓⵎⴷⵢⴰ: choose_num(12, 15) = 14 choose_num(13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵙⵡⴰⵜⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ n ⴷ m, ⴷ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵉⴹⵏ ⴰⵎⵎⴰⵙ ⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵙⴳ n ⴰⵔ m (ⵙ ⵓⵙⵙⴽⵛⵎ ⵏ n ⴷ m). ⵙⵙⵓⴷⵓⵏ ⵜⴰⵔⴰⵔⵓⵜ ⵙ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⴽⴽⵡ ⵢⵓⵛⴽⴰⵏ ⴷ ⵙⵙⴼⵍⴷⵏ ⵙ ⴱⵉⵏⴰⵔⵉ. ⵎⴽ n ⵢⵓⴳⵔ m, ⵙⵙⵓⴷⵓⵏ -1. ⴰⵎⴷⵢⴰ: rounded_avg{1, 5} => \"0b11\" rounded_avg{7, 5} => -1 rounded_avg{10, 20} => \"0b1111\" rounded_avg{20, 33} => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"ⴳ ⵓⵎⴷⵢⴰ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵏⵖⵓⴷⵏ x, ⵔⴰⴷ ⵏⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵓⵔ ⵉⵍⵍⵉⵏ ⴳⵉⵙ ⵉⵎⴹⴰⵏ ⵉⵎⵎⵔⴽⵙⵏ. ⵜⴰⵍⴳⴰⵎⵜ: ⵔⴰⴷ ⵏⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵔⵏⵉⵡ. ⵙ ⵓⵎⴷⵢⴰ: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"ⴳ ⵓⵎⵙⴷⵓⵙ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴷⵙ ⵉⵎⴹⴰⵏⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳⵔ 1 ⴷ 9 ⴳ ⵜⴰⵎⵎⵏⵜ, ⵙⵙⵓⴷⵙ ⴰⵎⵙⴷⵓⵙ ⵏⵏⴰ ⴷ ⵢⵓⵛⴽⴰⵏ, ⴷ ⵙⵙⵎⴷ ⵉⵙⵎ ⵏ ⴽⵓ ⵓⵟⵟⵓⵏ ⵙ ⵉⵙⵎ ⵏⵏⵙ ⵙⴳ \" ⵢⴰⵏ\", \" ⵙⵉⵏ\", \" ⴽⵕⴰⴹ\", \" ⴽⴽⵓⵥ\", \" ⵙⵎⵎⵓⵙ\", \" ⵚⴹⵉⵚ\", \" ⵙⴰ\", \" ⵙⵎⵎⵓⵙ\", \" ⵙⵎⵎⵓⵙ\", \" ⵙⵎⵎⵓⵙ\", \" ⵙⵉⵏ\". ⵙ ⵓⵎⴷⵢⴰ: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> ⵙⵙⵓⴷⵙ arr -> [1, 1, 2, 3, 4, 5, 8] -> ⵙⵙⵓⴷⵙ arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [\" ⵙⵎⵎⵓⵙ\", \" ⴽⴽⵓⵥ\", \" ⵙⵉⵏ\", \" ⵙⵉⵏ\", \" ⵙⵉⵏ\", \" ⵢⴰⵏ \", \" ⵢⴰⵏ \" ] ⵎⴽ ⵉⴳⴰ ⵓⵎⵙⴷⵓⵙ ⴰⵣⴳⵡⴰⵏ, ⵙⵙⵓⴷⵙ ⴰⵎⵙⴷⵓⵙ: arr = [] return [] ⵎⴽ ⵉⴳⴰ ⵓⵎⵙⴷⵓⵙ ⴽⵔⴰⴹ ⴰⵎⵢⴰⵡⴰⵏ: arr = [1, -1 , 55] -> arr -> [1, 55] -> [1, 55] -> reverse arr -> [55, arr = 1] return - ['One'] ].\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"ⵙⵙⵎⵔⵙ ⵜⴰⵡⵓⵔⵉ f ⵏⵏⴰ ⵢⵓⵎⵥⵏ n ⴰⵎⵎ ⵓⵎⵙⴽⴰⵔ, ⴰⵔ ⵉⵙⴽⴰⵔ ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵏ ⵜⵉⴷⴷⵉ n, ⵣⵓⵏⴷ ⴰⵜⵉⴳ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵓⵙⵏⵎⵍ i ⵉⴳⴰ ⵜⴰⴳⴳⴰⵢⵜ ⵏ i ⵎⴽ ⵉⴳⴰ i ⴰⵎⵎ ⵉⵎⵉⴹⵏ ⵏⵖⴷ ⵜⴰⴳⴳⴰⵢⵜ ⵏ ⵉⵎⴹⴰⵏⵏ ⵙⴳ 1 ⴰⵔ i ⵎⴽ ⵓⵔ ⵉⴳⵉ. i ⴰⵔ ⵉⵜⵜⴱⴷⵓ ⵙⴳ 1. ⵜⴰⴳⴳⴰⵢⵜ ⵏ i ⵜⴳⴰ ⵜⴰⴳⴳⴰⵢⵜ ⵏ ⵉⵎⴹⴰⵏⵏ ⵙⴳ 1 ⴰⵔ i (1 * 2 * ... * i). ⴰⵎⴷⵢⴰ: f(5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ n, ⵙⵙⵓⴼⵖ ⵜⴰⵡⵡⵓⵔⵜ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳ ⵓⵙⵏⵙⵓ ((1, n), ⵙⵍⴰⵡⴰⵏ ⴰⴽⴽⵡ. ⴰⵎⴷⵢⴰ1: ⴰⵙⴽⵛⵎ: 3 ⴰⵙⵓⴼⵖ: (1, 2) ⴰⵙⴼⵔⵓ: ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳⴰⵏ 1, 2, 3. ⵢⴰⵏ ⴳⵉⵙⵏ ⵉⴳⴰ ⴰⵎⴷⴷⴰⴷ, ⴷ ⵙⵉⵏ ⴳⵉⵙⵏ ⴳⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⴰⵎⴷⵢⴰ2: ⴰⵙⴽⵛⵎ: 12 ⴰⵙⴼⵔⵓ: (4, 6) ⴰⵙⴼⵔⵓ: ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳⴰⵏ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ⴽⴽⵓⵥ ⴳⵉⵙⵏ ⴳⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴷ 6 ⴳⵉⵙⵏ ⴳⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵜⴰⵖⴹⴼⵜ: 1. 1 <= n <= 10^3 2.\"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"ⵔⵔⴰ ⵜⴰⵡⵓⵔⵉ count_nums ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⴰⵎⴹⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⵜⵓⵏⵏⵓⵏⵜ ⵏ ⵡⵓⵟⵟⵓⵏ > 0. ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵉⵔⴰⵏ, ⵔⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⴰⵎⵣⵡⴰⵔⵓ ⴰⵎⵉⵔⴰⵏ: ⵙ ⵓⵎⴷⵢⴰ -123 ⵖⵓⵔⵙ ⵜⵓⵏⵏⵓⵏⵜ ⵏ ⵡⵓⵟⵟⵓⵏⵏ -1, 2, ⴷ 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"ⵏⵍⵍⴰ ⴷⴰⵔⴽ ⴰⵙⵔⴷⴰⵙ 'ⴰⵔⵔ' ⵏ N ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ arr[1], arr[2], ..., arr[N].ⴰⴷ ⵜⵜⵓⵙⵏⵎⴰⵍⴰⵏ ⵉⵎⴹⴰⵏⵏ ⴳ ⵓⵙⵔⴷⴰⵙ ⵙ ⵓⵙⵖⵓⴷⵓ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⴽⵜⵔⵎ ⵉⵙ ⵜⵣⵎⵔⵎ ⴰⴷ ⵜⵙⵏⵎⴰⵍⴰⴷ ⴰⵙⵔⴷⴰⵙ ⵙ ⵓⵙⵙⵓⴷⵓ ⵓⵔ ⵢⴰⴽⵡⵣⵏ ⵙ ⵓⴳⴳⴰⵔ ⵏ ⵓⵙⵎⴽⵍ ⴰⴷ: ⵜⵣⵎⵔⵎ ⴰⴷ ⵜⵙⵙⴽⵜⵔⵎ ⴰⵙⵎⴽⵍ ⵙ ⵓⵢⴼⴼⴰⵙ ⵙ ⵓⵢⴼⴼⴰⵙ ⴽⵉⴳⴰⵏ ⵏ ⵜⵉⴽⴽⴰⵍ. ⵢⴰⵜ ⵜⵎⵀⵍⵜ ⵏ ⵓⵢⴼⴼⴰⵙ ⵙ ⵓⵢⴼⴼⴰⵙ ⵜⵣⵎⵔ ⴰⴷ ⵜⵙⵙⴽⵜⵔⵎ ⴽⵓⵍⵍⵓ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵓⵙⵔⴷⴰⵙ ⵙ ⵢⴰⵜ ⵜⴷⵖⵉ ⴳ ⵓⴱⵔⵉⴷ ⵏ ⵓⵢⴼⴼⴰⵙ. ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵓⵙⵔⴷⴰⵙ ⴰⴷ ⵔⴰⴷ ⵜⵜⵓⵙⴽⵜⵔⵎ ⵙ ⵓⴷⵖⴰⵔ ⵏ ⵓⵣⵡⴰ ⴳ ⵓⵙⵔⴷⴰⵙ, ⵙ ⵓⵎⴽⵍ 0 . ⵎⴽⵓ ⵉⵖ ⵜⵣⵎⵔⵎ ⴰⴷ ⵜⵙⵏⵎⴰⵍⴰⴷ ⴰⵙⵔⴷⴰⵙ ⵙ ⵓⵙⵙⵓⴷⵓ ⴰⴷ, ⵔⴰⴷ ⵜⵙⵙⴽⵜⵔⵎⴽⵎⴷⴷⴷⴷⴷ ⴰⵙⵔⴷⴰⵙ. ⵙ ⵓⵎⴷⵢⴰ: move_one{(ball_[4, 5, 4, 4, 5, 4, 5, 1, 1, 2}== ⴰⵙⴼⴼⵙⵉⴼⴰⵙ: ⴰⵙⵔⴷⴰⵙ ⵏ ⵓⵙⵎⴽⵍ: ⵙ ⵓⵙⵙⵓⴷⵓ ⵏ ⵓⵙⵎⴽⵜⵔⴷⴰⵙ ⵏ ⵓⵙⵔⴷⴰⵙ ⵏ ⵓⵙⵔⴷⴰⵙ ⵏ ⵓⵙⵔⴷⴰⵙ ⵏ ⵓⵙⵔⴷⴰⵙ ⵏ ⵓⵙⵔⴷⴰⵙ ⵏ ⵓⵙⵔⴷⴰⵙ ⵏ ⵓⵙⵔⴷⴰⵙⵔⴷⴰⵙ ⵏ ⵓⵙⵔⴷⴰⵙⵔⴷⴰⵙ.\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"ⴳ ⵜⵎⵙⴰⵔⵜ ⴰⴷ, ⵔⴰⴷ ⵜⵙⵙⴽⵔⵎ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵢⵓⵎⴰⵏ ⵙⵏⴰⵜ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵡⵓⵟⵟⵓⵏ, ⴷ ⴰⵔ ⵉⵙⵜⴰⵢ ⵎⴽⵍⵍⵉ ⵜⵣⵎⵔⵎ ⴰⴷ ⵜⵙⴽⵔⵎ ⴰⵙⵏⴼⵍ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳⵔⵙⵏⵜ ⴰⴼⴰⴷ ⴰⴷ ⵜⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ. ⵓⵔ ⵉⵍⵍⵉ ⴽⵔⴰ ⵏ ⵓⵜⵜⵓ ⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵜⵜⵓⵙⵏⴼⵍⵏ ⴳⵔ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ. ⵎⴽ ⵜⵣⵎⵔⵎ ⴰⴷ ⵜⵙⵏⴼⵍⵜ ⵉⴼⵔⴷⵉⵙⵏ ⴳⵔ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵜⵍⴳⴰⵎⵉⵏ. ⵙ ⵓⵎⴷⵉⴹ: exchange[1, 2, 3, 4], [1, 2, 3, 4] => \"NO\" ⴷⴰ ⵉⵜⵜⵓⵙⵎⵎⴰ ⵉⵙ ⵓⵔ ⵉⴳ ⵓⵙⵏⴼⵍ ⵏ ⵜⵍⴳⴰⵎ ⵏ ⵜⵍⴳⴰⵎⵉⵏ.\"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"ⵉⴳ ⴷⴰⵔⴽ ⵢⴰⵜ ⵜⵣⵍⵉⵜ ⵉⵙⵎⴷⵢⴰⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵜⵉⵥⵥⵉⵏ ⵙ ⵓⴱⵔⴰⵔⴳ, ⵙⵙⵓⴼⵖ ⵢⴰⵜ ⵜⵓⵙⵏⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⵜⵓⴳⵜⵜ ⵏ ⵜⵉⴽⴽⴰⵍ ⴷ ⵡⵉⵏ ⵓⵙⵙⵉⴹⵏ ⵏⵏⴰ ⴷ ⵢⵓⵙⴰⵏ. ⵎⴽ ⴷⴰⵔⴽ ⴽⵉⴳⴰⵏ ⵏ ⵜⵉⵔⵔⴰ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴷ ⵢⵓⵙⴰⵏ, ⵙⵙⵓⴼⵖ ⴰⴽⴽⵡ ⵏⵏⵙⵏⵜ. ⴰⵎⴷⵢⴰ: histogram{\"a b c\") == {'a\": 1, 'b': 1, 'c': 1} histogram{\"a b b a\") == {'a': 2, 'b': 2} histogram{\"a b c a b\") == {'a': 2, 'b': 2} histogram{\"b b a\") == {'b 4}': histogram{\"a b\") == {} \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"ⵜⴰⵡⵓⵔⵉ ⵏⵜⵜⴰ ⴷⴰⵔⵙ ⵙⵉⵏ ⵉⵙⴽⴽⵉⵍⵏ s ⴷ c, ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵙⵙⴽⵛⵎ ⴽⵓⵍⵍⵓ ⵉⵙⴽⴽⵉⵍⵏ ⴳ s ⵏⵏⴰ ⵉⴳⴰⵏ ⵉⵎⵙⴰⵙⴰⵏ ⴷ ⴽⵓⵍⵍⵓ ⵉⵙⴽⴽⵉⵍⵏ ⴳ c ⴷ ⴰⴷ ⵜⵥⵕⵎ ⵉⵙ ⵉⴳⴰ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⵢⴰⴼⵓⵜ ⴱⴰⵍⵉⵏⴷⵔⵓⵎ. ⵉⵙⵎ ⵏ ⵓⵙⴽⴽⵉⵍ ⴱⴰⵍⵉⵏⴷⵔⵓⵎ ⵉⴳ ⵉⴳⴰ ⴰⵎⵎ ⵓⵎⵏⵉⴷ ⵙ ⵓⵎⵏⵉⴷ. ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⴰⵔⵎ ⵢⴰⵜ ⵜⴱⵔⵣⴰ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⵢⴰⴼⵓⵜ ⴷ True/False ⵉ ⵓⵣⵣⵔⴰⵢ. ⴰⵎⴷⵢⴰ: s = \"abcde\", c = \"ae\", ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⴳ ⵜⵢⴰⴼⵓⵜ ('bcd',False) ⵙ s = \"abcdef\", c = \"b\" ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⴳ ⵜⵢⴰⴼⵓⵜ ('acdef',False) ⵙ s = \"abcdedcba\", c = \"abc\", ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⴳ ⵜⵢⴰⴼⵓⵜ ('cdedc',True) \"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"ⴽⵓ ⵢⴰⵏ ⵙⴳ ⵉⴼⵔⴷⵉⵙⵏ i ⵏ ⵜⵏⴰⴼⵓⵜ ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴳ \"ⴰⵎⴹⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵢⴰⵏⴰⵡⵏ ⴳ ⵜⵏⴰⴼⵓⵜ i ⵏ ⵓⵙⴽⵛⵎ\". ⴳ ⵎⴰⵏⵉ ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵜⵓⵙⵏⴼⴰⵍⵏ ⴽⵓⵍⵍⵓ i ⵙ ⵉⵎⴹⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵢⴰⵏⴰⵡⵏ ⴳ ⵜⵏⴰⴼⵓⵜ i. >>> odd_count['1234567']) [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"] >>> odd_count['3',\"111111\"]) [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"] \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"ⴳ ⵓⵎⵙⴷⵓⵙ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⵜⵔ ⴰⴷ ⵜⵙⵙⴽⵔ ⵜⵓⵏⵏⵓⵏⵜ ⵏ ⴽⵓ ⵜⴰⵔⵔⴰⵢⵜ ⵏ ⵉⵎⴹⴰⵏⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⴳⵓⵎⵎⴰ. ⴰⵎⴷⵢⴰ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵓ ⵢⴰⵏ ⵢⴰⵏ ⵓⴽⵡⴰⵍ ⵏ ⵉⵙⵏⴼⴰⵔⵏ. ⴽⵓ ⵜⴰⵡⵔⵉⵔⵜ ⴷⴰ ⵜⵙⵎⴷⵢⴰⵏ ⵢⴰⵏ ⵓⴽⵡⴰⵍ, ⴷ ⴽⵓ 1 ⴳ ⵜⴰⵡⵔⵉⵔⵜ ⴷⴰ ⵉⵙⵎⴷⵢⴰⵏ ⵢⴰⵜ ⵜⴰⵢⵎⵓⵏⵜ ⵏ ⵡⴰⵎⴰⵏ. ⴽⵓ ⵢⴰⵏ ⵓⴽⵡⴰⵍ ⵖⵓⵔⵙ ⵢⴰⵏ ⵓⴽⵡⴰⵍ ⵏⵏⴰ ⵉⵥⴹⴰⵕⵏ ⴰⴷ ⵉⵜⵜⵓⵙⵎⵔⴰⵙ ⴳ ⵓⵙⵎⵓⵜⵜⴳ ⵏ ⵡⴰⵎⴰⵏ, ⴷ ⴽⵓ ⵉⵙⵏⴼⴰⵔⵏ ⵖⵓⵔⵙⵏ ⵢⴰⵜ ⵜⴰⵣⵎⵔⵜ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵎⵔⵙⴷ ⵉⴽⵡⵍⴰⵏ ⴰⴷ ⵃⵎⴰ ⴰⴷ ⵜⵙⵙⵓⴼⵖⴷ ⵉⴽⵡⵍⴰⵏ. ⵜⵕⵥⵎⴷ ⴰⵎⴹⴰⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵙⵙⵓⴼⵖⴷ ⵉⴽⵡⵍⴰⵏ. ⴰⵎⴷⵢⴰ1: ⴰⵙⴽⵛⵎ: ⵜⴰⵡⵔⵉⵔⵜ: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 ⴰⵙⴽⵛⵎ: 62: ⴰⵙⴽⵛⵎ: ⵜⴰⵡⵔⵉⵔⵜ: [[0,0,1,1], [0,0,0,0,0,0,0], [1,1,1], [0,1,1] bucket_capacity: 2 ⴰⵙⴽⵛⵎ: 53: [[0,0,0,0,0,0]] ⵜⴰⵡⵔⵉⵔⵜ: 0: 0 *1 * ⴰⵙⴽⵛⵎ: 1 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"ⴳ ⴽⴰⵜⴰ ⴰⴷ, ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵙⵙⵓⴷⵙⴷ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⵔⵉⵏ ⵙ ⵓⵟⵟⵓⵏ ⵏ ⵉⵎⵢⴰⴳⵏ ⴳ ⵓⵙⵎⴷⵢⴰ ⵏⵏⵙⵏ ⴰⵎⵉⵏⴰⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵇⵔⴰⵏ. ⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⵢⴰⴳⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ, ⵙⵙⵓⴷⵙⴷ ⵅⴼ ⵡⴰⵜⵉⴳ ⴰⵎⵔⴰⵡ. ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⵜⵜⵓⵙⵎⵔⵙ ⵣⵓⵏⴷ ⴰⴷ: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"ⵉⴳ ⴷⴰⵔⴽ ⵓⵡⵉⴽⵉ s ⴷ ⵓⵟⵟⵓⵏ ⴰⴳⴰⵎⴰⵏ n, ⵜⵙⵙⵏⵎⴽⵜ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴰⴽⴽⵡ ⵙⴳ ⵓⵡⵉⴽⵉ s ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ n ⵏ ⵜⵣⵓⵏⵉⵏ, ⵃⵎⴰ ⴰⴷ ⵜⵜⵓⵢⵙⴽⴰⵔⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴰⴷ ⴳ ⵓⵡⵉⴽⵉ s. ⵎⴽ ⵜⴳⴰ ⵓⵡⵉⴽⵉ s ⵜⴰⵍⵍⵉⵜ ⵓⵔ ⵉⵍⵉⵏ, ⵔⴰⴷ ⵜⵙⵙⵏⵎⴽⵜ ⵜⴰⵡⵡⵓⵔⵉ ⵜⴰⵍⵍⵉⵜ ⵓⵔ ⵉⵍⵉⵏ. ⵜⴰⵖⴹⴼⵜ: ⵉⵖⵢ ⴰⴷ ⵜⵙⵙⵏⵎⴽⵜ ⵎⴰⵙ ⵓⵡⵉⴽⵉ ⵏ ⵓⴽⵛⵛⵓⵎ ⵖⴰⵙ ⵉⵙⴽⴽⵉⵍⵏ ⴷ ⵉⵙⴰⵢⵔⴰⵔⵏ. ⵉⵎⴷⵢⴰⵜⵏ: select_words (((\"ⵎⴰⵔⵉ ⵖⵓⵔⵙ ⵢⴰⵏ ⵓⴳⴰⵔⵉⵣ ⴰⵎⵥⵥⵢⴰⵏ\", 4) ==> [\"little\"] select_words (((\"ⵎⴰⵔⵉ ⵖⵓⵔⵙ ⵢⴰⵏ ⵓⴳⴰⵔⵉⵣ ⴰⵎⵥⵢⴰⵏ\", 3) ==> [\"little\"] select_words\"{(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵢⴰⵜ ⵜⴳⵓⵔⵉ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⴰⴼⴷ ⵓⵖⵔⵉ ⴰⵎⴳⴳⵓⴳ ⵏⵏⴰ ⵢⵍⵍⴰⵏ ⴳⵔ ⵙⵏⴰⵜ ⵜⵓⵏⵙⵉⵏ ⵙⴳ ⵜⵙⴳⴰ ⵏ ⵡⴰⴷⴰⵙ ⵏ ⵜⴳⵓⵔⵉ (ⴰⵙⵙⴰⵖ ⵏ ⵓⵙⴽⴽⵉⵍ). ⵓⵔ ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔⵏ ⵉⵇⵔⵉⴱⵏ ⴳ ⵍⴱⴷⵓ ⴷ ⵜⴳⵉⵔⴰ. ⵔⵎⴹ ⵜⴰⴳⵓⵔⵉ ⵜⴰⵅⵅⴰⵔⵜ ⵎⴽ ⵓⵔ ⵜⵢⴰⴼⴰ ⴽⵔⴰ ⵏ ⵓⵖⵔⵉⴱ ⵏⵏⴰ ⵢⵍⵍⴰⵏ ⴳ ⵡⴰⴷⴷⴰⴷ ⵏⵏⵉⴳ. ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⴷ ⵉⵙ ⵜⴰⴳⵓⵔⵉ ⵜⴰⵅⵅⴰⵔⵜ ⵜⵍⵍⴰ ⵖⴰⵙ ⴳ ⵡⴰⴷⴷⴰⴷ ⴰⵏⴳⵍⵉⵣ. ⴰⵎⴷⵢⴰ: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"UULL\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" (((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵓ ⵢⴰⵏ ⵢⴰⵏ ⵢⴰⵏ ⵓⵙⴼⵙⵔ ⵏ ⵙⵉⵏ ⵉⵙⴽⴽⵉⵍⵏ, ⵙⵉⵏ ⵉⵙⴽⴽⵉⵍⵏ ⴰⴷ ⴳⴰⵏ ⵉⵊⵊⵏ '(' ⵏⵖ ⵉⵊⵊⵏ ') '. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵥⵕ ⵉⵙ ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵓⴷⵙⴷ ⵙⵉⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵙ ⴽⵔⴰ ⵏ ⵓⵙⵏⵎⴰⵍⴰ, ⵎⴰ ⵔⴰⴷ ⵉⴳ ⵓⵙⴽⴽⵉⵍ ⵏⵏⴰ ⴷ ⵢⵓⵛⴽⴰⵏ ⵉⵖⵓⴷⴰⵏ. ⴰⵙⴽⴽⵉⵍ S ⴷⴰ ⵉⵜⵜⵓⵙⵎⴳⴰⵍ ⵉⵖ ⵉⴳⴰ ⵉⵖⵓⴷⴰⵏ ⵉⴳ ⴷ ⴽⵓⵍⵍⵓ ⵉⵙⴽⴽⵉⵍⵏ ⴳ S ⴳⴰⵏ ⵉⵎⵙⴰⵙⴰⵏ. ⵙ ⵓⵎⴷⵢⴰ: ⴰⵙⴽⴽⵉⵍ '((()) ' ⵉⵖⵓⴷⴰⵏ, ⵎⴰⵛ ⴰⵙⴽⴽⵉⵍ '()) ' ⵓⵔ ⵉⴳⵉ. ⵔⵣⵓ 'Yes' ⵉⵖ ⵉⵍⵍⴰ ⵢⴰⵏ ⵓⴱⵔⵉⴷ ⵉ ⵓⵙⴽⴰⵔ ⵏ ⵓⵙⴽⴽⵉⵍ ⵉⵖⵓⴷⴰⵏ, ⴷ ⵔⵣⵓ 'No' ⵉⵖ ⵓⵔ ⵉⵍⵍⵉ ⵡⴰⵏⵏⴰ ⵢⴰⴹⵏⵉⵏ. ⵉⵎⴷⵢⴰⵜⵏ: match_parens[('(() ', ') ']) == 'Yes' match_parens[(') ', ') ']) =='No' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"ⴰⵙⵏⵎⴰⵍⴰ ⵏ ⵢⴰⵏ ⵓⵙⵏⵎⴰⵍⴰ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⵢⴰⵏ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ k, ⵙⵙⵓⴼⵖ ⵢⴰⵏ ⵓⵙⵏⵎⴰⵍⴰ ⵏ ⵓⵖⵣⵉ k ⵙ ⵓⴳⴳⴰⵔ ⵏ k ⵉⵎⴹⴰⵏⵏ ⴳ arr. ⴰⵎⴷⵢⴰ1: ⴰⵙⵏⴼⴰⵔ: arr = [-3, -4, 5], k = 3 ⴰⵙⵏⴼⴰⵔ: [-4, -3, 5] ⴰⵎⴷⵢⴰ2: ⴰⵙⵏⴼⴰⵔ: arr = [4, -4, 4], k = 2 ⴰⵙⵏⴼⴰⵔ: [4, 4] ⴰⵎⴷⵢⴰ3: ⴰⵙⵏⴼⴰⵔ: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 ⴰⵙⵏⴼⴰⵔ: [2] ⴰⵙⵏⵜⵉ: 1. ⵜⴰⵖⵣⵉ ⵏ ⵓⵙⵏⵎⴰⵍⴰ ⴰⴷ ⵜⵍⵍⴰ ⴳ ⵓⵙⵏⴼⴰⵔ ⵏ [1, 1000]. 2. ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵓⵙⵏⵎⴰⵍⴰ ⴰⴷ ⴳ ⵓⵙⵏⴼⴰⵔ ⵏ [-1000, 1000]. 3. 0 <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"ⵙ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⵅⵡⴰⵏ, ⵙⵙⵓⴼⵖ ⵜⴰⴳⵓⵜ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳ ⵡⴰⵏⵙⴰ ⵉⵎⵣⴰⵔⴰⵢⵏ. ⴰⵎⴷⵢⴰ ⵏ ⵓⴼⵙⵙⴰⵢ (([5, 8, 7, 1]) ==> 12 ⵓⴼⵙⵙⴰⵢ (([3, 3, 3, 3, 3]) ==> 9 ⵓⴼⵙⵙⴰⵢ (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"ⵉⴳ ⴷⴰⵔⴽ ⵓⵎⵙⴷⵓⵙ ⵓⵔ ⵉⴳⵏ ⵡⴰⴽⴰⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ arr ⴷ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ k, ⵙⴽⵔ ⴰⵙⵎⵓⵜⵜⴳ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵙ ⵙⵉⵏ ⵡⵓⵟⵟⵓⵏ ⵙⴳ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⵡⵓⵔⴰ ⵏ arr. ⴰⵎⴷⵢⴰ: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"ⵉⴳ ⴷⴰⵔⴽ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ n, ⵙⵙⵓⴼⵖ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵡⴰⵏⴰⵡⵏ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵓⵙⵏⵙⵍ ⵏ ⴽⵓⵍⴰⵜⵣ. ⵜⴰⵡⵏⴳⵉⵎⵜ ⵏ ⴽⵓⵍⴰⵜⵣ ⵜⴳⴰ ⵢⴰⵜ ⵜⴰⵡⵏⴳⵉⵎⵜ ⴳ ⵜⵓⵙⵏⴰⴽⵜ ⵏⵏⴰ ⵉⵥⵍⵉⵏ ⵙ ⵓⵙⵏⵙⵍ ⵉⵜⵜⵓⵙⵙⴰⵏⵏ ⵙ: ⵔⵥⵎ ⵙ ⴽⵓ ⵓⵟⵟⵓⵏ ⴰⵎⵏⵉⴳ n. ⴷⴼⴼⵉⵔ ⴰⴷ, ⴽⵓ ⵓⴽⵓⴷ ⵉⵜⵜⵓⵢⴰⵡⵙ ⵙⴳ ⵓⴽⵓⴷ ⵉⵣⵔⵉⵏ ⵙ: ⵉⴳ ⵓⴽⵓⴷ ⵉⵣⵔⵉⵏ ⴰⵎⵎ ⵡⵉ-ⵏ ⵡⵉ-ⵏ ⵡⵉ-ⵏ, ⵓⴽⵓⴷ ⵢⴰⴹⵏ ⵉⴳⴰ ⵜ ⵢⴰⵏ ⵓⵣⴳⵏ ⵏ ⵓⴽⵓⴷ ⵉⵣⵔⵉⵏ. ⵉⴳ ⵓⴽⵓⴷ ⵉⵣⵔⵉⵏ ⴰⵎⵎ ⵡⵉ-ⵏ ⵡⵉ-ⵏ ⵡⵉ-ⵏ, ⵓⴽⵓⴷ ⵢⴰⴹⵏ ⵉⴳⴰ 3 ⵏ ⵓⴽⵓⴷ ⵉⵣⵔⵉⵏ ⵓⴳⴳⴰⵔ 1. ⵜⴰⵡⵏⴳⵉⵎⵜ ⵜⴳⴰ ⵜⵜ ⵎⴰⵙ ⵓⵔ ⵜⵍⵍⵉ ⵜⴰⵜⵉⴳⵜ ⵏ n, ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵡⴰⵏⴰⵡⵏ ⵔⴰⴷ ⴰⵔ ⵜⵍⴽⵓⴷ 1.\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⵔⴰⵎ ⵢⴰⵜ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵙⵎⴷⵏ ⵜⴰⵡⵉⵍⴰ ⵏ ⵡⴰⵙⵙ ⵉⵜⵜⵢⴰⴽⴽⴰⵏ ⴷ ⴰⵔ ⵜⵙⴽⴰⵔ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵡⴰⵙⵙ ⴰⵣⵔⴼⴰⵏ ⵎⴽⵍⵍⵉ ⵓⵔ ⵉⴳⵉ ⴰⵣⵔⴼⴰⵏ. ⴷⴰ ⵉⵜⵜⵓⵙⴽⴰⵔ ⵡⴰⵙⵙ ⵎⴽ ⴳⴰⵏ ⴽⵓⵍⵍⵓ ⵉⵙⵍⴳⵏⵏ ⴰⴷ: 1. ⵓⵔ ⵉⴳⵉ ⵓⵡⵉⵍⴰ ⵏ ⵡⴰⵙⵙ ⴰⵣⵔⴼⴰⵏ ⴰⵣⵔⴼⴰⵏ. 2. ⵓⵔ ⵉⴳⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵙⵙⴰⵏ ⵓⴳⴳⴰⵔ ⵏ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 31 ⵏ ⵡⵓⵙⵙⴰⵏ ⵉ ⵡⴰⵢⵢⵓⵔⵏ 1,3,5,7,8,10,12. ⴷ ⵓⵔ ⵉⴳⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵙⵙⴰⵏ ⵓⴳⴳⴰⵔ ⵏ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 30 ⵏ ⵡⵓⵙⵙⴰⵏ ⵉ ⵡⴰⵢⵢⵓⵔⵏ 4,6,9,11. ⴷ, ⵓⵔ ⵉⴳⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵙⵙⴰⵏ ⵓⴳⴳⴰⵔ ⵏ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 29 ⵉ ⵡⴰⵢⵢⵓⵔ 2. 3. ⵓⵔ ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⴰⵢⵢⵓⵔⵏ ⵓⴳⴳⴰⵔ ⵏ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 12. 4. ⴷⴰ ⵉⵜⵜⵓⵙⴽⴰⵔ ⵡⴰⵙⵙ ⵙ ⵜⴰⵍⵖⴰ: mm-dd-dd-yyyy ⴰⵎⴷⵎⴷⵢⴰ: valid_date{('03-11-2000') => true_valid_date{'15-01-2012') => false_valid_valid_date{'04-01-2040') => false_valid_date{'06-04'06-04'2020') => true_valid_date{'06/04/06/04/2020')\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''ⴳ ⵓⴹⵕⵉⵚ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ, ⵙⵙⵓⴼⵖ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵉⵜⵜⵓⵣⵍⴰⵢⵏ ⵙ ⵡⴰⵏⵙⴰ ⴰⵎⵍⵍⴰⵍ, ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵡⴰⵏⵙⴰ ⴰⵎⵍⵍⴰⵍ ⴳ ⵓⴹⵕⵉⵚ, ⵔⴰⴷ ⵜⵙⵙⵓⴼⵖⴷ ⵙ ⵡⴰⵏⵙⴰ ⵏ ⵉⵎⵙⵜⴳⴳⴰⵔⵏ ',' ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵓⵎⵙⵜⴳⴳⴰⵔ ⵔⴰⴷ ⵜⵙⵓⴼⵖⴷ ⵓⵟⵟⵓⵏ ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⵉⵎⵥⵥⵉⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵍⵍⴰⵍ, ord{\"a\") = 0, ord{\"b\") = 1, ... ord{\"z\") = 25 ⵉⵎⴷⵢⴰⵜⵏ split_words{\"Hello world!\")'''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''ⵉⴳ ⴷⴰⵔⴽ ⵉⵍⵍⴰ ⵢⴰⵏ ⵓⵙⴼⵙⵔ ⵏ ⵉⵎⴹⴰⵏⵏ, ⵙⵙⵓⴼⵖ ⵉⵙ ⴳⴰⵏ ⵙ ⵓⵙⵓⴷⵙ ⴰⵎⵇⵔⴰⵏ. ⵉⵖ ⴷⴰⵔⴽ ⵉⵍⵍⴰ ⵓⴳⴳⴰⵔ ⵏ ⵢⴰⵏ ⵓⵎⴹⴰⵏ ⴰⵎⵎ ⵢⴰⵏ, ⵙⵙⵓⴼⵖ False. ⵓⵔ ⵉⵍⵍⵉ ⵡⵓⵟⵟⵓⵏⵏ ⵉⵔⵉⵏⵉⵏ ⴷ ⵉⵎⴹⴰⵏⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵉⵎⴷⵢⴰⵜⵏ is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 3, 4, 5, 6, 7]) â -> False is_sorted (([1, 3, 2, 4, 5, 6, 7]) -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵙⵉⵏ ⵉⵏⴱⵔⴰⵣⵏ, ⴽⵓ ⵢⴰⵏ ⴳⵉⵙⵏ ⵉⴳⴰ ⵢⴰⵏ ⵓⴽⵏⵉⵡ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵙ ⵓⵎⴷⵢⴰ, ⵉⵏⴱⵔⴰⵣ = (ⵜⴰⵏⵣⵡⵉ, ⵜⴳⵉⵔⴰ) = (1, 2). ⵉⵏⴱⵔⴰⵣⵏ ⴰⴷ ⴽⵛⵎⵏ, ⵎⴰ ⵢⴰⴷ ⵉⴳⴰⵏ ⵉⵙ ⴳⴰⵏ ⵉⵏⴱⵔⴰⵣⵏ (ⵜⴰⵏⵣⵡⵉ, ⵜⴳⵉⵔⴰ) ⵜⵉⵣⵡⵉⵔⵉ ⴷ ⵜⴳⵉⵔⴰ. ⴳ ⴽⵓ ⵉⵏⴱⵔⴰⵣⵏ, ⴷⴰ ⵜⵜⵓⵙⵎⴳⴰⵍⵏ ⵉⵙ ⵉⴳⴰ ⵓⵣⵡⵉⵔⵉ ⵏⵏⵙ ⴰⵎⵥⵥⵢⴰⵏ ⵏⵖ ⴰⵎⵥⵢⴰⵏ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵏ ⵉⵙ ⵜⴳⴰ ⵜⵉⵣⵉ ⵏ ⵓⵙⵎⴽⵍ ⵏ ⵉⵏⴱⵔⴰⵣⵏ ⴰⴷ ⵙⵉⵏ ⵉⵎⴹⴰⵏⵏ ⵉⵎⵣⵡⵓⵔⴰ. ⴰⵎⴷⵢⴰ, ⴰⵙⵎⴽⵍ ⵏ ⵉⵏⴱⵔⴰⵣⵏ (1, 3), (2, 4) ⵉⴳⴰ (2, 3) ⴷ ⵜⵉⵣⵉ ⵏⵏⵙ ⵜⴳⴰ 1, ⴷ ⵓⵔ ⵉⴳⵉ ⵢⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵎⵣⵡⵓⵔⴰ. ⵎⴽ ⵜⴳⴰ ⵜⵉⵣⵉ ⵏ ⵓⵙⵎⴽⵍ ⵢⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵎⵣⵡⵓⵔⴰ, ⵙⵙⵓⵖⵍ \"ⵉⵀⴰ\", ⵎⴽ ⵓⵔ ⵉⴳⵉ, ⵙⵙⵓⵖⵍ \"ⵍⴰ\". ⵎⴽⵉⵏ ⵉⵏⴱⵔⴰⵣⵏ ⵓⵔ ⵙⵙⴳⵉⵏ, ⵙⵙⵓⵖⵍⵏ \"ⵍⴰ\". [input/output] samples: intersection[in]{((((1, 2), (2, ==, 3) \">\" intersection{\", intersection}{\",{\",{\",}{\",}{intersection}{\",{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{intersection}{inter}{inter}{inter}}{inter}{inter}}{inter}}{inter}}{intersection}{inter}}{inter}}}{inter}{inter}}}{inter}{inter}}{inter}}{inter}}{inter}}}{inter}{inter}\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵛⵛⵓⵎⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵔⴰⵔⴷ ⵜⴰⴳⵓⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵏⴰ ⵉⵜⵜⵓⵢⴰⴽⴽⴰⵏ ⵙ ⵓⵙⴼⴰⵔ ⵏ ⵉⵙⵎⴰⵡⵏ ⵏ ⴽⵓ ⵓⵟⵟⵓⵏ ⴳ ⵓⵎⴹⴰⵏ, ⵏⵏⴰ ⵉⵜⵜⵓⵢⵙⵎⴷⵢⴰⵏ ⵙ 1, -1 ⵏⵖⴷ 0. ⵜⴰⵏⵏⴰⵢⵜ: ⵓⵔ ⵜⵔⴰⵔⴷ ⴽⵔⴰ ⵉⴽⵛⵛⵓⵎⵏ ⵏ ⵉⵎⴹⴰⵏⵏ ⵓⵔ ⵉⵍⵉⵏ. ⴰⵎⴷⵢⴰ: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) ==  ⵓⵔ ⵜⵔⴰⵔⴷ\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"ⵉⵖ ⵏⴰⵔⵉ ⵢⴰⵏ ⵓⵖⵎⵉⵙ ⵏ N ⵜⵉⴼⵔⵉⵙⵉⵏ ⴷ N ⵜⵉⵔⵙⴰⵍ (N >= 2) ⴷ ⴽⵓ ⵜⴰⵖⵔⴰⵙⵜ ⵏ ⵓⵖⵎⵉⵙ ⴷⴰⵔⵙ ⵢⴰⵏ ⵡⴰⵜⵉⴳ. ⴽⵓ ⵓⵖⵎⵉⵙ ⴳ ⵓⵙⵏⵓⵎⵎⵍ [1, N * N] ⵉⵍⵍⴰ ⵢⴰⵜ ⵜⵉⴽⴽⵍⵜ ⴳ ⵜⵖⵔⴰⵙⵉⵏ ⵏ ⵓⵖⵎⵉⵙ. ⵜⵅⵙⴷ ⴰⴷ ⵜⴰⵡⵉ ⵜⴱⵔⵉⴷⵜ ⵜⴰⴷⵔⵓⵙⵜ ⵏ ⵓⵖⵎⵉⵙ ⴷⴰⵔⵙ ⵜⴰⵖⵣⵉ k. ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⴱⴷⵓ ⵙⴳ ⴽⵓ ⵜⴰⵖⵔⴰⵙⵜ, ⴷ ⴳ ⴽⵓ ⵜⴰⵙⵓⵔⵉⴼⵜ ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵓⵜⵍⵜ ⵖⵔ ⴽⵓ ⵜⴰⵖⵔⴰⵙⵉⵏ ⵜⵉⵎⴰⴹⵍⴰⵏⵉⵏ, ⵙ ⵜⴳⵓⵔⵉ ⵢⴰⴹⵏ, ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵣⵔⵉⴷ ⵖⵔ ⵜⵖⵔⴰⵙⵉⵏ ⵏⵏⴰ ⴷⴰⵔⵙⵏ ⵢⴰⵏ ⵓⵖⵎⵉⵙ ⴷⴰⵔⵙⵏ. ⵜⵣⵎⵔⴷ ⴰⴷ ⵓⵔ ⵜⵣⵔⵉⴷ ⴳ ⵓⵖⵎⵉⵙ. ⴰⵖⵎⵉⵙ A (ⵙ ⵓⵖⵎⵉⵙ k) ⵉⴳⴰ ⵓⴷⵔⵓⵙ ⵏ ⵓⵖⵎⵉⵙ B (ⵙ ⵓⵖⵎⵉⵙ k) ⵉⵖ ⴷⴼⴼⴼⵉⵔ ⵏ ⵓⵙⵎⵙ ⵏ ⵓⵖⵎⵉⵙⵏ ⴳ ⵜⵖⵔⴰⵙⵉⵏ A ⴷ B (ⴰⴷ ⵏⵜⵜⵉⵏⵉⵖ ⴰⵙⵏ ⴷ l_ⴰ_ⴰ_ⴰ_ⴰ_ⴰ ⴷ l_ⴰ), ⵍⵉⵖⵎⵙ ⵓⵖⵎⵙ ⵓⵖⵎⵙ ⵏ ⵓⵖⵎⵉⵙ l_ⴰ), ⵉⵇⵇⴰⵔ ⵏ ⵓⵖⵎⵉⵙ ⵏ ⵓⵖⵎⵉⵙ ⵏ ⵓⵖⵎⵉⵙ ⵓⵖⵎⵉⵙ ⵓⵖⵎⵉⵙ ⵍⵉ ⵉⴳⴰ ⵓⴷⵔⵓⵙⵜ ⴳ ⵓⵖⵔⴰⵙ ⵏ ⵓⵖⵎⵉⵙ ⵏ ⵓⵖⵎⵉⵙ ⵏ ⵓⵖⵎⵉⵙ j_ⴰ, ⴳ ⵓⵖⵎⵉⵙ ⵓⵖⵎⵉⵙ ⵓⵖⵎⵉⵙ ⵓⵖⵎⵉⵙ ⵓⵖⵎⵉⵙ ⵓⵖⵎⵉⵙ ⵓⵖⵎⵙ ⵏ ⵜⵖⵔⴰⵙ ⵏ ⵜⵖⵔⴰⵙ ⵏ ⵜⵖⵔⴰⵙ ⴳ ⵓⵖⵎⵉⵙⵜ, ⴳ ⵓⵖⵎⵙ ⵏ ⵓⵖⵎⵙ ⴳ ⵓⵖⵎⵙ ⵏ ⵓⵖⵎⵙⵖⵎⵙ ⵏ ⵜⵖⵔⴰⵙ ⴳ ⵓⵖⵎⵙⵖⵎⵙ ⴳ ⵓⵖⵎⵙⵖⵎⵙ ⴳ ⴽⵓ, ⴳ ⵡⴰⵏ: [1, [j = j_ⴰ 1], [A=1, [j = j_[1, [4, [1, j_ⴰ 1],\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"ⴽⵓ ⵢⴰⵏ ⵉⵙⵙⵏ ⵜⴰⴹⴰ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵉ, ⵜⵜⵓⵙⵎⵔⵙⵏⵜ ⵙ ⵓⴳⴳⴰⵔ ⵏ ⵉⵎⵓⵙⵏⴰⵡⵏ ⴳ ⵜⴰⵙⵓⵜⵉⵏ ⵜⵉⵎⴳⴳⵓⵔⴰ. ⵎⴰⵛⴰ, ⵎⴰ ⵓⵔ ⵉⵙⵙⵏ ⵎⵉⴷⴷⵏ ⵜⴳⴰ ⵜⴰⴹⴰ ⵏ ⵜⵔⵉⴱⵓⵏⴰⵛⵉ. ⵜⴰⴹⴰ ⵏ ⵜⵔⵉⴱⵓⵏⴰⵛⵉ ⵜⴻⵜⵜⵓⵙⵏⵎⵍ ⵙ ⵓⵙⵏⵓⵍⴼⵓ: tri(1) = 3 tri(n) = 1 + n / 2, ⵉⴳ n ⴰⵎⵎ ⵓⵎⵉⴹⴰⵏ ⴰⵎⵎ ⵓⵎⵉⴹⴰⵏ. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ⵉⴳ n ⴰⵎⵉⴹⴰⵏ ⴰⵎⵎ ⵓⵎⵉⴹⴰⵏ. ⵙ ⵓⵎⴷⵢⴰ: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽ ⵢⴰⵏ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⵓⵔ ⵉⴳⵉⵏ ⴰⵎⵏⴳⴰⵍ n, ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵔⴰⵔⴷ ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵏ ⵉⵎⵉⴹⴰⵏ ⵉⵎⵣⵡⵓⵔⴰ n + 1 ⵏ ⵜⴰⴹⴰ ⵏ ⵜⵔⵉⴱⵓⵏⴰⵛⵉ. ⵉⵎⴷⵢⴰⵜⴰⵔ: tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"ⵉⴳ ⴷⴰⵔⴽ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵙⵙⵓⴼⵖ ⵜⴰⵢⴰⴼⵓⵜ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵉⵎⵢⴰⵏⴰⵡⵏ. ⵙⵙⵓⴼⵖ 0 ⵎⴽ ⴳⴰⵏ ⴰⴽⴽⵡ ⵡⵓⵟⵟⵓⵏⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ. ⵙ ⵓⵎⴷⵢⴰ: ⵡⵓⵟⵟⵓⵏⵏ ((1) == 1 ⵡⵓⵟⵟⵓⵏ ((4) == 0 ⵡⵓⵟⵟⵓⵏⵏ ((235) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵜⴰⵡⵓⵔⵉ ⵏ ⵜⵉⵔⵔⴰ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵓⴽⵛⵛⵓⵎ ⵏ ⵉⴽⵛⵛⵓⵎⵏ ⵉⵎⴽⴽⵓⵥⵏ. ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵜⵔⴰ ⴰⴷ ⵜⴰⵡⵉ ⵜⵉⴷⵜ ⵎⴽ ⴷ ⵖⴰⵙ ⵎⴽ ⵉⵍⵍⴰ ⵢⴰⵏ ⵓⴽⵛⵛⵓⵎ ⵏ ⵉⴽⵛⵛⵓⵎⵏ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵓⴳⴳⴰⵔ ⵏ ⵢⴰⵏ ⵓⴽⵛⵛⵓⵎ ⴳ ⵓⴽⵛⵛⵓⵎ. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏⵏ. ⴷⴰ ⵜⵜⵓⵜⵔⴰ ⴰⴷ ⵜⵔⴰⵔ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵉⵎⴹⴰⵏⵏ ⵏ ⵓⵙⴽⴽⵉⵍ ⴳ ⵜⵍⴳⴰⵎⵜ ⵉⵜⵜⵓⴼⴽⴰⵏ, ⵜⵙⵙⵓⵜⵍ ⴽⵓ ⵉⴼⵔⴷⵉⵙ ⴳ ⵜⵍⴳⴰⵎⵜ ⵙ ⵜⴽⵍⵉⵜ ⵏ ⵓⴼⵍⵍⴰ. ⵉⵎⴷⵢⴰⵜⵏ: ⵉ lst = [1,2,3] ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴳ 14 ⵉ lst = [1,4,9] ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴳ 98 ⵉ lst = [1,3,5,7] ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴳ 84 ⵉ lst = [1.4,4.2,0] ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴳ 29 ⵉ lst = [-2.4,1,1] ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴳ 6 \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵡⵓⵎⵓⵖ ⴰⵎⴳⴳⴰⵔⵓ ⵏ ⵓⵖⵉⵍⵓⴼ ⵉⵜⵜⵢⴰⴽⴽⴰⵏ ⵢⴰⵏ ⵡⵓⵎⵓⵖ ⵏ ⵓⵙⴽⴽⵉⵍ ⴷ ⵓⵔ ⵉⴳⵉ ⴰⴳⵣⵣⵓⵎ ⵏ ⵜⴳⵓⵔⵉ, ⴷ ⵜⵉⴷⵜ ⵎⴽ ⵓⵔ ⵉⴳⵉ. ⵜⴰⵖⴹⴼⵜ: \" ⵜⴳⵓⵔⵉ \" ⵜⴳⴰ ⵢⴰⵜ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵡⵓⵎⵓⵖⵏ ⵉⵜⵜⵓⵢⵙⴱⴹⵏ ⵙ ⵓⵙⴰⵢⵔⴰⵔ. ⵉⵎⴷⵢⴰⵜⵏ: check_if_last_char_is_a_letter (((\" apple pie \") â -> False check_if_last_char_is_a_letter (((apple pi e\") â -> True check_if_last_char_is_a_letter (((\"apple pi e \") â -> False check_if_last_char_is_a_letter\" (((\") â -> False '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⴰⵙⵏⵎⴽⵍ ⴰⵎⵇⵔⴰⵏ ⵏ ⵢⴰⵏ ⵉⴼⵔⴷⵉⵙ ⵏⵏⴰ ⵓⵔ ⵉⴳⵉⵏ ⴰⵎⵇⵔⴰⵏ ⵏⵖⴷ ⴰⵎⵎ ⵉⴼⵔⴷⵉⵙ ⵏⵏⴰ ⴷ ⵢⵣⵔⵉⵏ. ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⴽⵔⴰ ⵏ ⵉⴼⵔⴷⵉⵙ ⴰⴷ, ⵔⵎⵙ -1. ⵓⵔ ⵔⴰⴷ ⵉⵟⵟⴰⴼ ⵓⵙⵏⵙⵍ ⴰⵖⵣⵓⵔⴰⵏ. ⵉⵎⴷⵢⴰⵜⵏ: can_arrange{1,2,4,3,5]) = 3 can_arrange{1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⴰⵔⵔⴰⵢⵜ ⵏ ⵓⵎⴷⵢⴰ (ⴰ,ⴱ), ⴳ ⵉⵍⵍⴰ 'ⴰ' ⴰⵎⵇⵇⵔⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵔⵉⵏⵉⵏ, ⴷ 'ⴱ' ⴰⵎⵥⵥⵢⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵔⵉⵏⵏ ⴳ ⵜⵍⴳⴰⵎⵜ. ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵉⵎⴹⴰⵏⵏ ⵉⵔⵉⵏⵏ ⵏⵖ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵔⵉⵏⵏ, ⵙⵙⵓⴼⵖ-ⴰⵙⵏ ⴰⵎⵎ None. ⵉⵎⴷⵢⴰⵜⵏ: largest_smallest_integers[2,4,1,3,5,7]) == (None,1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵉⵙⵏⴼⵍⵏ, ⵏⵖ ⵜⵉⴼⵉⵏⴰⵖ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏ ⵉⵎⴹⴰⵏⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴷ ⴰⵔ ⵉⵙⵙⴽⵛⵎ ⴰⵎⵙⵏⴼⵍⵓⵍ ⴰⵅⴰⵜⴰⵔ ⴳ ⵡⴰⵏⴰⵡ ⵏ ⵓⵎⵙⵏⴼⵍⵓⵍ ⵏⵏⴰ ⵢⵜⵜⵓⵎⵥⵏ. ⵓⵔ ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵎⴽ ⵜⴳⴰ ⵜⵉⵜⵉⴳⵉⵏ ⵏⵏⵙ ⵢⴰⵜ. ⵜⴰⵖⴹⴼⵜ: ⵎⴽ ⵉⴳⴰ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵎ ⵜⵉⴼⵉⵏⴰⵖ, ⵜⴰⵖⴹⴼⵜ ⵜⴰⴱⵔⵙⵉⵡⵜ ⵜⵣⵎⵔ ⴰⴷ ⵜⴳ . ⵏⵖⴷ , compare_one{1, 2.5) â -> 2.5 compare_one{1, \"2,3\") â -> \"2,3\" compare_one{5,1\", \"6\") â -> \"6\" compare_one{1\", 1) â -> None \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"ⵙⵙⴼⵔⴰⵏ ⵉⵙ ⵉⵥⴹⴰⵕ ⵓⵟⵟⵓⵏ n ⴰⴷ ⵉⵜⵜⵢⴰⵔⴰⵏ ⵙ ⵓⵖⵣⵓⵔ ⵏ 4 ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵎⵓⴹⴰⵏ ⵉⵎⵏⵖⴰⵏⵏ ⵉⵎⵏⵖⴰⵏⵏ ⴰⵎⴷⵢⴰ: is_equal_to_sum_even ({4) == False is_equal_to_sum_even ({6) == False is_equal_to_sum_even ({8) == True \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"ⴷⴰ ⵉⵜⵜⵓⵙⵏⵎⵍ ⵓⴼⴰⵔⵙ ⴰⴱⵕⴰⵣⵉⵍⵉ ⵙ: brazilian_factorial{n} = n! * (n-1)! * (n-2)! * ... * 1! ⴳ n > 0 ⵙ ⵓⵎⴷⵢⴰ: >>> special_factorial{4) 288 ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵔⴰⴷ ⵜⵓⵎⵥ ⴰⵎⵉⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴷ ⵔⴰⴷ ⵜⵔⴰⵔ ⵓⴼⴰⵔⵙ ⴰⴷ ⴰⵎⴷⴷⴰⴷ. \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_ⴰⵎⴷⵢⴰ-3ⵙⵙⵓⵜⵍ ⴰⴽⴽⵡ ⵉⴷⵖⴰⵔⵏ ⴳⵉⵙ ⵙ ⵉⵙⵏⴼⵍⵏ, ⴷ ⵎⴽ ⴷⴰⵔ ⵜⵣⵍⵖⴰ ⵓⴳⴳⴰⵔ ⵏ 2 ⵉⴷⵖⴰⵔⵏ ⵉⵎⵎⴹⴼⴰⵕⵏ, ⵙⵙⵓⵜⵍ ⴰⴽⴽⵡ ⵉⴷⵖⴰⵔⵏ ⵉⵎⵎⴹⴼⴰⵕⵏ ⵙ - fix_spaces (((\"ⴰⵎⴷⵢⴰ\") == \"ⴰⵎⴷⵢⴰ\" fix_spaces (((\"ⴰⵎⴷⵢⴰ1\") == \"ⴰⵎⴷⵢⴰ1\" fix_spaces (((\"ⴰⵎⴷⵢⴰ2\") == \"_Example_2\" fix_spaces (((\"ⴰⵎⴷⵢⴰ3\") == \"_Example-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⴽⵜⵓⵎ ⵉⵙⵎⴷⵢⴰ ⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ, ⴰⵔ ⵉⵙⵙⴽⵛⵎ \"ⵉⵀ\" ⵎⴽ ⵉⴳⴰ ⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ ⴰⵣⵔⴼⴰⵏ, ⴰⵔ ⵉⵙⵙⴽⵛⵎ \"ⵓⵅ\" ⵎⴽ ⵓⵔ ⵉⴳⵉ. ⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ ⴰⵔ ⵉⵜⵜⵓⵙⵡⴰⵏⴳⵎ ⴰⴷ ⵉⴳ ⴰⵣⵔⴼⴰⵏ ⵎⴽ ⴷ ⴽⵓⵍⵍⵓ ⵉⵙⵎⴷⵏ ⴰⴷ: - ⵓⵔ ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⵍⵉⵏ ⴽⵕⴰⴹ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ('0'-'9') ⴳ ⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ. - ⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ ⵉⵍⵍⴰ ⵢⴰⵏ ⵓⴽⵜⵓⵎ '.' - ⵓⵔ ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴳ ⵓⴽⵜⵓⵎ ⴷⴰⵜ ⵏ ⵓⴽⵜⵓⵎ ⴰⵣⵔⴼⴰⵏ, ⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴱⴷⵓ ⵙ ⵢⴰⵜ ⵜⵉⵔⵔⴰⵜ ⵙⴳ ⵉⵙⴽⴽⵉⵍⵏ ⵏ ⵍⵍⴰⵜⵉⵏ ('a'-'z' ⴷ 'A'-Z'). - ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴳ ⵓⴽⵜⵓⵎ ⴷⴼⵉⵔ ⵏ ⵓⴽⵜⵓⵎ ⵢⴰⵏ ⵙⴳ ⵡⵉⵏⵏⴰ ⴷ ⵉⴷⴷⴰⵏ: ['txt', 'exe', 'll'] ⴰⵎⴷⵢⴰ: file_name_check\"{example.txt.txt\") # => 'Yes'name_file_check\"{example.dll1}\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" ⵜⴰⵡⵡⵓⵔⵉ ⴰⴷ ⵔⴰⴷ ⵜⴽⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵉ ⴽⵓⵍⵍⵓ ⵉⵎⴹⴰⵏⵏ ⴳ ⵜⵍⴳⴰⵎⵜ, ⵜⴰⵡⵡⵓⵔⵉ ⴰⴷ ⵔⴰⴷ ⵜⴽⴽⵙ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴳ ⵉⴳⵔ ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⴰⵎⴳⴳⴰⵔⵓ ⵏ 3 ⴷ ⵔⴰⴷ ⵜⴽⴽⵙ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴳ ⵉⴳⵔ ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⴰⵎⴳⴳⴰⵔⵓ ⵏ 4 ⴷ ⵓⵔ ⵉⴳⵉ ⴰⵎⴳⴳⴰⵔⵓ ⵏ 3. ⵜⴰⵡⵡⵓⵔⵉ ⴰⴷ ⵓⵔ ⵔⴰⴷ ⵜⵙⵏⴼⵍ ⵉⵎⴹⴰⵏⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏⵏⴰ ⵓⵔ ⵉⴳⵉⵏ ⵉⵎⴳⴳⴰⵔⵏ ⵏ 3 ⵏⵖ 4. ⵜⴰⵡⵡⵓⵔⵉ ⴰⴷ ⵔⴰⴷ ⵜⵔⴰⵔ ⵜⴰⴳⵓⵜ ⵏ ⵉⵎⴹⴰⵏⵏ ⴳ ⵜⵍⴳⴰⵎⵜ. ⵉⵎⴷⵢⴰⵜⵏ: ⵉ lst = [1,2,3] ⵔⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ 6 ⵉ lst = [] ⵔⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ 0 ⵉ lst = [-1,-5,2,-1,-5] ⵔⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ -126 \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵙⵎⴷⵢⴰⵏ ⵜⴰⴳⵓⵔⵉ, ⵜⴰⴳⵓⵔⵉ ⵜⵍⴰ ⴽⵔⴰ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵉⵜⵜⵓⵢⵙⴱⴹⵏ ⵙ ⵢⴰⵏ ⵓⵙⴰⵢⵔⴰⵔ, ⴷ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵔⴰⵔ ⵜⴰⴳⵓⵔⵉ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵏ ⵜⴳⵓⵔⵉ ⵜⴰⵢⵎⵎⴰⵜ, ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⵜⵉⵖⵣⵉ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵉⵎⵣⵡⵓⵔⴰ, ⴷ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⴳ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴳ ⵜⵔⵉⵜ ⵜⴰⵎⴰⵢⵏⵓⵜ ⴰⵎⵎ ⵜⵉⴳⵓⵔⵉ ⵜⴰⵢⵎⵎⴰⵜ. ⴰⵎⴷⵢⴰ1: Input: phrase = \"This is a test\" Output: \"is\" ⴰⵎⴷⵢⴰ2: Input: sentence = \"lets go for swimming\" Output: \"go for\" ⵜⵉⵎⵥⵍⴰⵢ: * 1 <= len(sentence) <= 100 * ⵜⴰⴳⵓⵔⵉ ⵜⵍⴰ ⴷⴰⵢ ⵜⵉⵔⵔⴰ \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵎⵔⵙ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵔⴰⴷ ⵉⵙⴱⴷⴷⴰⴷ ⴰⵙⵏⵓⵎⵎⵍ x * n. ⴷⴰ ⵜⵙⵎⵓⵜⵜⴳ ⵜⵉⴷⵜ ⵎⴽⵍⵍⵉ x * n ⵉⴳⴰ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴷ ⵜⵉⴷⵜ ⵎⴰⵛⴰ. ⵙⵡⴰ x ⴷ n, ⴳⴰⵏ ⴰⵙⵎⴷⵢⴰ ⵏ ⵜⵉⵙⴳⵏⵉⵜ ⵏ ⵓⴽⵛⵛⵓⵎ, ⴷ ⵖⵓⵔⵙⵏ ⵜⴰⵍⵖⴰ ⴷ ⵢⵓⵛⴽⴰⵏ, <numerator>/<denominator> ⴳⴰⵏ ⵉⵎⴹⴰⵏ ⴷ ⵓⵎⵙⵙⴰⵖ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⵎⴽⵜ ⵎⴰⵙ ⴷ x ⴷ n ⴳⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴷ ⵓⵔ ⵖⵓⵔⵙⵏ ⴰⵔⴰ ⴰⵎⵙⵙⴰⵖ. simplify{\"1/5\", \"5/1\") = True{\"1/6\", \"2/1\") = False{\"7/10\", \"10/2\") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"ⵙⵙⵓⴷⵙ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵙⵎⵓⵏⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵔⵏⵉⵡ ⵖⴼ ⵓⵖⵣⵓ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙⵏ. ⵙⵙⵓⴷⵙ: ⵎⴽ ⵍⵍⴰⵏ ⴽⵉⴳⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵙ ⵓⵖⵣⵓ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙⵏ, ⵙⵙⵓⴷⵙ-ⴰⵙⵏ ⵖⴼ ⵓⵖⵣⵓ ⵏⵏⵙⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵜⴰⵢⵎⵎⴰⵜ. ⵙ ⵓⵎⴷⵢⴰ: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"ⵙⴽⵔ ⵢⴰⵜ ⵜⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵉ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⴰⵎⵎ ⵓⴽⵛⵛⵓⵎ ⴷ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵓⵙⵏⵙⵉ ⵏⵏⴰ ⵎⵇⵇⵓⵔⵏⵉⵏ 10 ⴷ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵣⵡⴰⵔⵓ ⴷ ⵡⵓⴳⴳⴰⵔⵓ ⵏ ⵡⵓⵟⵟⵓⵏ ⴳⴰⵏ ⵉⵎⵢⴰⵏⴰⵡⵏ (1, 3, 5, 7, 9). ⵙ ⵓⵎⴷⵢⴰ: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵓ ⵢⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ n. ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵙⵙⴽⵔⴷ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ a ⵏ ⵜⵉⵖⵣⵉ n. ⵉ ⴽⵓ i (1 â‰¤ i â‰¤ n), ⴰⵜⵉⴳ ⵏ a[i] = i * i - i + 1. ⴰⵔⵏ ⵉⴽⴽⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵉⵎⵉⴹⴰⵏ ⵏ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎⵉ ⵉⵎ\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''ⵍⵍⴰⵏⵜ 8 ⵏ ⵜⵣⵡⵉⵏⵏⵉⵏ ⴳ ⵓⵏⴳⵔⴰⵡ ⵏ ⵜⴰⴼⵓⴽⵜ ⵏⵏⵖ: ⵜⴰⵎⴰⵜⴰⵢⵜ ⵏ ⵜⴰⴼⵓⴽⵜ ⵜⴳⴰ ⵜⵊⵎⵉⵍⵜ, ⴷ ⵜⴰⵎⴰⵜⴰⵢⵜ ⵏⵏⵙ ⵜⴳⴰ ⵜⵊⵎⵉⵍⵜ ⵏ ⵓⵊⵏⵏⴰ, ⴷⴼⴼⵉⵔ ⵏ ⵖⵉⴽⴰⴷ ⵜⴰⵡⴰⵍⴰ ⵏ ⵡⴰⴽⴰⵍ, ⵎⴰⵕⵚ, ⵊⵓⴱⵉⵜⵔ, ⵙⴰⵜⵓⵔⵏ, ⵓⵕⴰⵏⵓⵙ, ⵏⵉⴱⵜⵓⵏ. ⵙⴽⵔ ⵢⴰⵜ ⵜⵎⵔⵙⵍⵜ ⵏⵏⴰ ⵢⵓⵎⵥⵏ ⵙⵉⵏ ⵉⵙⵎⴰⵡⵏ ⵏ ⵜⵣⵡⵉⵏⵏⵉⵏ ⵣⵓⵏⴷ ⵜⵉⵙⵉⵔⵎⵉⵏ ⵜⵊⵎⵉⵍⵜ1 ⴷ ⵜⵊⵎⵉⵍⵜ2. ⵜⴰⵡⴰⵍⴰ ⴰⴷ ⵜⵙⵙⴽⵔ ⵢⴰⵏ ⵓⵙⵏⴼⵍⵍ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⵜⵣⵡⵉⵏⵏⵉⵏ ⴰⴽⴽⵡ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳⵔ ⵜⵊⵎⵉⵍⵜ ⵏ ⵜⵣⵡⵉⵏⵏⵉⵏ1 ⴷ ⵜⵊⵎⵉⵍⵜ ⵏ ⵜⵣⵡⵉⵏⵏⵉⵏ2, ⵙ ⵓⵙⵏⴼⵍ ⵙ ⵜⴰⵎⴰ ⵏ ⵜⴰⴼⵓⴽⵜ. ⵜⴰⵡⴰⵍⴰ ⴰⴷ ⵜⵙⵙⴽⵔ ⵢⴰⵏ ⵓⵙⵏⴼⵍ ⴱⵍⴰ ⵉⵙⵎⴰⵡⵏ ⵏ ⵜⵣⵡⵉⵏⵏⵉⵏ ⵎⴽⴰⴷ ⵜⵍⵍⴰ ⵜⵣⵡⵉⵏⵏⵉⵏ1 ⵏⵖⴷ ⵜⵣⵡⵉⵏⵏⵉⵏ2 ⵓⵔ ⴳⵉⵏ ⵉⵙⵎⴰⵡⵏ ⵏ ⵜⵣⵡⵉⵏⵏⵉⵏ. ⴰⵎⴷ ⴰⵎⴷⵢⴰ: bf \"{\"}{\"}, \"\"ⵊⵓⴱⵉⵜⵔ\", \"ⵏ\") ==> b> (\"ⵊⵎⵍⵎⵉⵍⴰⵍ\", \"ⴽⵔ\") ==> bf (\"ⵊⵎⵉⵍⴰⵍ\", \"ⴽⵔ\") bf\")'''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"ⵔⵔⴰ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⵎⵥⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⴰⵎⵎ ⵓⴱⴰⵔⴰⵣ, ⴰⵔ ⵉⵙⴽⵛⵎ ⵜⵉⴼⵉⵏⴰⵖ ⵏⵏⴰ ⵖⵓⵔⵙⵏ ⵜⵉⵖⵣⵉ ⵓⵔ ⵉⵎⵙⴰⵙⴰⵏ, ⴰⵔ ⵉⵙⴽⵛⵎ ⵜⴰⵍⴳⴰⵎⵜ ⵏⵏⴰ ⴷ ⵢⵓⵛⴽⴰⵏ ⵙ ⵓⵙⵓⴷⵙ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ. ⵜⴰⵍⴳⴰⵎⵜ ⵜⴳⴰ ⴰⵀⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵓⵔ ⴷ ⴰⴽⴽⵡ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵉⵎⴹⴰⵏⵏ, ⴷ ⵉⵖⵢ ⴰⴷ ⵢⵉⵍⵉ ⴳⵉⵙ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵢⴰⵍⵍⴰⵏ. ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⴰⴷ ⵜⵍⵍⴰ ⵙ ⵓⵖⵣⵉ ⵏ ⴽⵓ ⵜⴳⵓⵔⵉ, ⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵙⴽⵛⵎ ⵜⴰⵍⴳⴰⵎⵜ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙ ⵜⵖⴰⵔⴰⵙⵜ ⴰⴷ. ⵎⴽⵍⵍⵉ ⵖⵓⵔ ⵙⵉⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵜⵉⵖⵣⵉ ⵢⴰⵜ, ⵙⵙⵓⴷⵙ ⵜⴰⵍⴳⴰⵎⵜ ⵙ ⵜⴰⵍⵖⴰ ⵜⴰⴽⵍⵉⴼⵜ. ⵜⴰⵡⵡⵓⵔⵉ ⴰⴷ ⵜⵔⴰ ⴰⴷ ⵜⵙⴽⵛⵎ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵙ ⵓⵖⵣⵉ. ⵉⵖⵢ ⴰⴷ ⵜⵙⵙⵏⵎ ⵉⵙ ⴷⴰⵔ ⵜⵉⴼⵉⵏⴰⵖ ⴰⴽⴽⵡ. ⴰⵎⴷ ⵏ ⵓⵎⴷⵢⴰ: assert list_sort[\"aa\", \"a\", \"a\", \"aaa\"]) => assert_list_sort[ab]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"ⴰⵖⴰⵡⴰⵙ ⴰⵎⵢⵉⵡⵏ ⵏⵏⴰ ⵉⵇⵇⴰⵏ ⴰⴷ ⵢⴰⴽⴽⴰ ⴰⵜⵉⴳ ⵏ x ⵎⴽ ⵉⴳⴰ n ⴰⵎⴹⴰⵏ ⴰⵎⵣⵡⴰⵔⵓ, ⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵢⴰⴽⴽⴰ ⴰⵜⵉⴳ ⵏ y ⵎⴽ ⵓⵔ ⵉⴳⵉ. ⵉⵎⴷⵢⴰⵜⵏ: ⵉ x_or_y{7, 34, 12) == 34 ⵉ x_or_y{15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''ⴳ ⵓⵎⵉⴹⴰⵏ ⵏ ⵜⵍⴳⴰⵎⵜ, ⵙⵙⴽⵛⵎ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵓⴽⵓⵥ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏⵏⴰ ⵓⵔ ⵉⵎⵢⴰⵏⴰⵡⵏ. ⵥⴹⴰⵕⵖ ⴰⴷ ⵙⵙⴽⵛⵎ ⵡⵓⵟⵟⵓⵏⵏ ⵏⵏⴰ ⵓⵔ ⵉⴳⵉⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵓⵙⴽⵛⵎ ⴰⵣⴳⵏ, ⵙⵙⴽⵛⵎ 0. '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"ⵔⴰⴷ ⵏⵙⵙⴽⵜⵉ ⴽⵓⵍⵍⵓ ⵜⴰⵡⵏⴳⵉⵎⵜ ⴰⴷ ⵍⵍⵉⵖ ⴷⴰ ⵏⵙⵙⵏ ⵜⴰⵢⴰⴼⵓⵜ ⵏ ⴽⵔⴰ ⵏ ⵜⵎⵙⴰⵔⵜ ⵉⵜⵜⵓⵢⵙⴽⴰⵔⵏ ⵙ ⵓⵣⵣⴳⵉⵔ. ⵜⴰⵡⵏⴳⵉⵎⵜ ⴷ ⵜⵡⵏⴳⵉⵎⵜ ⵏⵏⴰ ⵖⵓⵔⴽ ⴳ ⵜⵉⵣⵉ ⴰⴷ ⴷⴰⵔⵙ ⴰⵜⵉⴳ ⵉ ⵓⵙⴽⵛⵎ ⴷ ⵓⵙⵎⵣⴰⵣⴰⵍ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵏⵎ ⵎⴽ ⵍⵍⵉ ⵢⵙⵙⵏ ⵢⴰⵏ ⵓⴼⴳⴰⵏ ⵙ ⵜⴷⵓⵙⵉ ⵜⴰⵢⴰⴼⵓⵜ ⵏ ⴽⵔⴰ ⵏ ⵉⵎⵏⴽⴰⴷⵏ. ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵙⵉⵏ ⵉⵙⵏⴼⴰⵔⵏ ⵏ ⵜⵏⵇⵇⵉⵟⵉⵏ ⴷ ⵉⵙⵏⴼⴰⵔⵏ ⵏ ⵓⵣⵣⴳⵉⵔ ⵉⵎⵣⴰⵢⵏ, ⴳ ⴽⵓ ⵢⴰⵏ ⵉⵙⵏⴼⴰⵔⵏ ⴷⴰ ⵉⵙⵙⴼⴰⵖ ⵢⴰⵏ ⵓⵎⵏⴽⴰⴷ ⵏ ⵓⵣⵣⴳⵉⵔ ⵉⵎⵣⴰⵢⵏ ⵏⵏⴰ ⵉⵙⵏⵎⴰⵍⵏ ⵎⴰⵎⴽ ⵍⵍⵉ ⵢⵣⵔⵉⵏ ⴽⵓ ⵢⴰⵏ. ⵎⴽ ⵍⵍⵉ ⵙⵙⴽⵛⵎⵏ ⵙ ⵜⴷⵓⵙⵉ, ⴰⵜⵉⴳ ⵏⵏⵙ ⵉⴳⴰ 0, ⴷ ⵎⴽ ⵍⵍⵉ ⵓⵔ ⵉⴳⵉ, ⴰⵜⵉⴳ ⵏⵏⵙ ⵉⴳⴰ ⴰⵎⵣⴰⵔⴰⵢ ⴰⵖⵣⴰⵔⵉ ⴳⵔ ⵓⵙⵏⴼⴰⵔ ⴷ ⵜⵏⴰⵡⵏⴽⴰⴷ. ⴰⵎⴷⵢⴰ: ((([1,2,3,4,4,4,4,4,5,1],[1,2,4,4,2,]) -> [0,0,0,0,0,0,0,0,0,0,0,1,2,])\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵢⵉⵙⵎ ⵏ ⵜⵔⵎⵜ (ⵜⴰⵏⴳⴳⴰ) ⴷ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵙⵖⵣⵏ. ⵉⵙⵖⵣⵏⵏ ⴰⴷ ⵜⵜⵓⵙⵎⵔⴰⵙⵏ ⵉ ⵓⵙⵙⴽⵛⵎ ⵏ ⵜⵔⵎⵉⵏ ⵢⴰⴹⵏⵉⵏ ⵙ ⵜⵔⵎⵜ. ⵜⴰⴷⵓⵙⵉ ⵏ ⵓⵙⵖⵣⵏ ⵜⴳⴰ ⵣⵓⵏⴷ ⴰⵢⴰ: ⴰⴷ ⵜⴳ CAP ⵓⵟⵟⵓⵏ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵜⴰⵎⵇⵕⴰⵏⵜ ⴳ ⵢⵉⵙⵎ ⵏ ⵓⵙⵖⵣⵏ, ⴷ ⴰⴷ ⵜⴳ SM ⵓⵟⵟⵓⵏ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵜⴰⵎⵥⵥⵢⴰⵏⵜ ⴳ ⵢⵉⵙⵎ ⵏ ⵓⵙⵖⵣⵏ, ⵜⴰⴷⵓⵙⵉ ⵜⵜⵓⴼⴽⴰ ⵙ ⵜⴽⵔⵔⴰ CAP - SM. ⵔⴰⴷ ⵜⵙⵙⵓⴼⵖ ⵜⴰⴷⵓⵙⵉ ⵜⴰⵅⴰⵜⴰⵔⵜ ⴷ ⵜⵔⵎⵜ ⴳ ⵓⵙⵖⵣⵏ ⴰⴷ: ClassName.StrongestExtensionName. ⵉⵖ ⴳⴰⵏ ⵙⵉⵏ ⵉⵙⵖⵣⵏⵏ ⵏ ⵢⴰⵜ ⵜⴷⵓⵙⵉ, ⵔⴰⴷ ⵜⵙⵙⵓⴼⵖ ⵢⴰⵜ ⵏⵏⴰ ⴷ ⵜⵣⵡⴰⵔ ⴳ ⵜⵍⴳⴰⵎⵜ. ⵙ ⵓⵎⴷⵢⴰ, ⵉⵖ ⵜⵜⵓⴼⴽⴰ \"Slices\" ⴰⵎⵎ ⵏ ⵜⵔⵎⵜ ⴷ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵙⵖⵣⵏ: ['SEviviRNGliSliCliCes', 'Cheese', 'Stufed'] ⵔⴰⴷ ⵜⵔⵎⴽⵛⵎ 'Slices' ⵙ 'SliCliCliCliCliSliCliSliSliSliSliSliSliSliCliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSli\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"ⵜⵍⵍⴰⴷ ⴷⵉⴳⵙ 2 ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ. ⵜⵅⵙⴷ ⴰⴷ ⵜⵔⴰⵔⴷ True ⵎⴽ ⵜⴳⴰ ⵜⴳⵓⵔⵉ ⵜⵉⵙⵙ ⵙⵏⴰⵜ ⵏⵖ ⴽⵔⴰ ⵏ ⵜⵙⵓⵜⵍⵜ ⵏⵏⵙ ⵢⴰⵜ ⵜⵉⵔⵔⴰ ⴳ ⵜⴳⵓⵔⵉ ⵜⴰⵎⵣⵡⴰⵔⵓⵜ cycpattern_check{\"abcd\",\"abd\") => False cycpattern_check{\"hello\",\"ell\") => True cycpattern_check{\"whassup\",\"psus\") => False cycpattern_check{\"abab\",\"baa\") => True cycpattern_check{\"efef\",\"eeff\") => False cycpattern_check{\"hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"ⵉⴳ ⴷⴰⵔⵙ ⵢⴰⵏ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ, ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵢⴰⵏ ⵓⵟⵟⵓⵏ ⵏ ⵜⴱⵍⴽⵉⵎⵜ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵓⵟⵟⵓⵏⵏ ⵉⵎⵎⵔⵡⴰⵙⵏ ⴷ ⵡⵉⵏ ⵡⵉⵏ ⵡⴰⵔ ⴰⵎⴷⴷⴰⴷ. ⴰⵎⴷⵢⴰ: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"ⵉⴳ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ, ⵙⵙⵓⵜⵔ ⴰⵎⴹⴰⵏ ⵏⵏⵙ ⴰⵎⵎ ⵢⴰⵏ ⵓⴽⵜⵓⵎ, ⴷ ⵙⵙⵓⴼⵖ ⵙ ⵉⵎⴷⵢⴰⵡⵏ ⵉⵎⵥⵥⵉⵏ. ⵜⵉⵎⵥⴰ: 1 <= num <= 1000 ⵉⵎⴷⵢⴰⵜⵏ: >>> int_to_mini_roman{19} == 'xix' >>> int_to_mini_roman{152} == 'clii' >>> int_to_mini_roman{426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''ⵉⴳⴰⵏ ⵜⵉⵣⵉ ⵏ ⴽⵕⴰⴹ ⵏ ⵜⴼⵓⵍⵉⵏ ⵏ ⵢⴰⵏ ⵓⴽⵕⴰⴹ. ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴷⵜ ⵎⴽⵍⵍⵉ ⴳⴰⵏ ⴽⵕⴰⴹ ⵏ ⵜⴼⵓⵍⵉⵏ ⵢⴰⵏ ⵓⴽⵕⴰⴹ ⴰⵎⵙⴷⵓⵙ, ⵎⴰⵛⴰ ⴰⵔ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴷⵜ ⵎⴽⵍⵍⵉ ⵓⵔ ⵉⴳⵉ. ⵢⴰⵏ ⵓⴽⵕⴰⴹ ⴰⵎⵙⴷⵓⵙ ⵉⴳⴰ ⵢⴰⵏ ⵓⴽⵕⴰⴹ ⴳ ⵉⵍⵍⴰ ⵢⴰⵏ ⵓⴽⵕⴰⴹ ⴰⵎⵙⴷⵓⵙ ⵏⵖⴷ 90 ⵏ ⵜⵙⴽⵡⴼⵍⵜ. ⴰⵎⴷⵢⴰ: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"ⵙⵔⵙⵏ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⵎⵥⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵙⴽⴽⵉⵍⵏ. ⵜⴰⵍⴳⴰⵎⵜ ⵜⵍⴰ ⴽⵉⴳⴰⵏ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ. ⵙⴽⵔ ⵜⴰⴳⵓⵔⵉ ⵏⵏⴰ ⴷⴰⵔ ⵓⵟⵟⵓⵏ ⴰⵎⵇⵔⴰⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵢⵉⵡⴰⵏⵏ. ⵎⴽ ⴷⴰⵔ ⴽⵉⴳⴰⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵢⵉⵡⴰⵏⵏ, ⵙⴽⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏⵏⴰ ⴷ ⵢⵓⵛⴽⴰⵏ ⴳ ⵓⵣⵡⴰⵔ ⴳ ⵓⵏⵎⴰⵍⴰ ⵏ ⵓⵙⴽⴽⵉⵍ. find_max (([\"name\", \"of\", \"string\"]) == \"string\" find_max (([\"name\", \"enam\", \"game\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"ⵀⴰⵜ ⴷ ⴰⵎⵔⵔⵓⴽ ⵉⵔⵖⴰⵏ, ⴷ ⵜⵙⵙⵓⵜⵔ ⴰⴷ ⵜⵙⵙⵓⵜⵔ ⴽⵉⴳⴰⵏ ⵏ ⵜⴽⴰⵔⵓⵜⵉⵏ, ⵎⴰⵛⴰ ⵔⴰⴷ ⵜⵙⵙⵓⵜⵔ ⴰⴷ ⵜⵙⵙⵓⵜⵔ ⴽⵉⴳⴰⵏ ⵏ ⵜⴽⴰⵔⵓⵜⵉⵏ ⵃⵎⴰ ⴰⴷ ⵜⵙⵙⵓⵜⵔ ⴽⵉⴳⴰⵏ ⵏ ⵜⴽⴰⵔⵓⵜⵉⵏ ⵏ ⵡⴰⵙⵙ. ⵔⴰⴷ ⵜⵙⵙⵓⵜⵔ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ [ⴰⵎⴹⴰⵏ ⴰⴽⴽⵡ ⵏ ⵜⴽⴰⵔⵓⵜⵉⵏ ⵉⵜⵜⵓⵙⵎⵓⵜⵜⴳⵏ ⴷⴼⴼⵉⵔ ⵏ ⵜⴽⴰⵔⵓⵜⵉⵏ, ⴰⵎⴹⴰⵏ ⵏ ⵜⴽⴰⵔⵓⵜⵉⵏ ⵉⵜⵜⵓⵙⵇⵇⵉⵎⵏ ⴷⴼⴼⵉⵔ ⵏ ⵜⴽⴰⵔⵓⵜⵉⵏ ] ⵎⴽ ⵓⵔ ⵍⵍⵉⵏ ⵜⴽⴰⵔⵓⵜⵉⵏ ⵉⵜⵜⵓⵙⵇⵇⵉⵎⵏ, ⵔⴰⴷ ⵜⵙⵙⵓⵜⵔ ⴰⴷ ⵜⵙⵙⵓⵜⵔ ⴽⵓⵍⵍⵓ ⵜⴽⴰⵔⵓⵜⵉⵏ ⵉⵜⵜⵓⵙⵇⵇⵉⵎⵏ, ⵎⴰⵛ ⵔⴰⴷ ⵜⵙⵙⵓⵜⵔ ⴰⴷ ⵜⵙⵙⵓⵜⵔ. ⴰⵎⴷⵢⴰ: * eat(5, 6, 10) -> [11, 4] * eat(4, 8, 9) -> [12, 1] * eat(1, 10, 10) -> [11, 0] * eat(2, 11, 5) -> [7, 0] Variables: @number: integer the number of carrots that you have eaten. @need:: integer the number of carrots that you need to eat. @remaining::remaining: integer the number of carrots that you need to eat. @remaining: integer the number of carrots that you need to eat.\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"ⴳ ⵓⵎⴷⵢⴰ ⵏ ⵜⵙⵏⵙⵉ, ⴷⴰ ⵏⵙⵙⴽⵏ ⵙⵉⵏ ⵉⵙⴼⵙⵔⵏ ⵏ ⵓⵎⵙⴽⴰⵔ ⴷ ⵓⵎⵙⴽⴰⵔ. ⴰⵙⴼⵙⵔ ⴰⵎⵣⵡⴰⵔⵓ ⴷⴰⵔⵙ ⵜⵉⴳⴳⵉⵜⵉⵏ ⵏ ⵍⵊⵉⴱⵔ, ⴷ ⵓⵙⴼⵙⵔ ⵡⵉⵙⵙ ⵙⵉⵏ ⵉⴳⴰ ⴰⵙⴼⵙⵔ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵙⵙⵎⵔⴰⵙ ⵙⵉⵏ ⵉⵙⴼⵙⵔⵏ ⴰⴷ ⴰⴼⴰⴷ ⴰⴷ ⵜⴱⵏⵓ ⵜⴰⴳⵓⵔⵉ ⵏ ⵍⵊⵉⴱⵔ ⴷ ⴰⴷ ⵜⵔⴰⵔ ⵜⴰⵖⴰⵔⴰ ⵏ ⵓⵙⴼⵙⵔ ⴰⴷ. ⵜⵉⴳⴳⵉⵜⵉⵏ ⵏ ⵍⵊⵉⴱⵔ ⵜⵉⵎⴷⴷⴰⴷⵏ: ⴰⵙⵎⵓⵏ (+) ⴰⵙⵏⵓⵎⵎ (-)) ⴰⵙⵎⵓⵜⵜⴰⵔ (*) ⴰⵙⴱⴹⵓ (//) ⴰⵙⴼⵙⵔ (**) ⴰⵎⴷⵢⴰ: ⴰⵎⵙⴽⴰⵔ['+', '*', '-'] ⴰⵙⴼⵙⵔ = [2, 3, 4, 5] ⵜⵢⴰⴼⵓⵜ = 2 + 3 * 4 - 5 => ⵜⵢⴰⴼⵓⵜ = 9 ⵜⵓⵏⵖⵉⵍⵜ: ⵜⵉⵖⵣⵉ ⵏ ⵓⵙⴼⵙⵔ ⵏ ⵓⵎⵙⴽⴰⵔ ⵜⴳⴰ ⴰⵎⵎ ⵜⵉⵖⵣⵉ ⵏ ⵓⵙⴼⵙⵔ ⵏ ⵓⵎⴳⴰⵔ. ⴰⵙⴼⵙⴽⴰⵔ ⵉⴳⴰ ⴰⵙⴼⵙⵔ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⴷⴰⴷⵏⴳⵏ. ⴰⵎⵙⴽⴰⵔ ⴷⴰⵔ ⵖⵓⵔ ⵢⴰⵏ ⵓⵙⴼⵙⵔ ⵏ ⵓⵎⵙⴽⴰⵔ, ⴷ ⵓⵙⴼⵙⴽⴰⵔ ⵖⵓⵔⴰⵔ ⵖⵓⵔ ⵙⵉⵏ ⵙⵉⵏ ⵙⵉⵏ ⵉⵙⴼⵙⵔ ⵙⵉⵏ ⵉⵙⴼⵙⵔ.\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵔⴰ ⵏ ⵓⵡⵉⴽⵉⵍ s. ⵎⴽ ⵜⴳⴰ s[i] ⵢⴰⵜ ⵜⴱⵔⴰⵜ, ⵙⵙⵓⵜⵍ ⵜⴰⵡⵉⴽⵉⵍⵜ ⵏⵏⵙ ⵙⴳ ⴷⴷⴰⵡ ⵙ ⴰⴼⵍⵍⴰ ⵏⵖⴷ ⵙ ⵓⴱⵔⴰⵔⴳ, ⵎⴽ ⵓⵔ ⵜⵍⵍⴰ. ⵎⴽ ⵓⵔ ⵜⵍⵍⴰ ⴳ ⵓⵡⵉⴽⵉⵍ ⴽⵔⴰ ⵏ ⵜⴱⵔⴰⵜⵉⵏ, ⵙⵙⵓⵜⵍ ⵜⴰⵡⵉⴽⵉⵍⵜ. ⵜⴰⵡⵡⵓⵔⵉ ⴰⴷ ⵜⵔⴰ ⴰⴷ ⵜⵙⴽⵔ ⵜⴰⵡⵉⴽⵉⵍⵜ ⵏⵏⴰ ⴷ ⵢⵓⵛⴽⴰⵏ. ⵉⵎⴷⵢⴰⵜⵏ solve{\"1234\") = \"4321\"{\"ab\") = \"AB\"{\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"ⵉⴳ ⴷⴰⵔⴽ ⵓⵡⵉⴽⵉ 'text', ⵙⴽⵔ ⴰⵙⴽⵔ ⵏ ⵓⵡⵉⴽⵉ ⵏ ⵓⴱⵟⵟⵓ md5 ⵏⵏⵙ. ⵉⴳ 'text' ⵉⴳⴰ ⵓⵡⵉⴽⵉ ⴰⵣⴳⵣⴰ, ⵙⴽⵔ None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "tzm_Tfng",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"ⵙ ⵓⵙⵙⴽⵛⵎ ⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵏⵖⴰⵏⵏ a ⴷ b, ⵙⵙⵓⴼⵖ ⵉⵎⴹⴰⵏⵏ ⵉⵎⵎⵔⴽⵙⵏ ⴳⵔ a ⴷ b, ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵇⵔⴰⵏ. ⵙ ⵓⵎⴷⵢⴰ: generate_integers{2, 8) => [2, 4, 6, 8] generate_integers{8, 2) => [2, 4, 6, 8] generate_integers{10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]