[
    {
        "task_id": "HumanEval/0",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଦତ୍ତ ସଂଖ୍ୟାର ଭେକ୍ଟରରେ, କୌଣସି ଦୁଇଟି ସଂଖ୍ୟା ଦତ୍ତ ସୀମା ଠାରୁ ପରସ୍ପରର ନିକଟତର କି ନାହିଁ ଯାଞ୍ଚ କରନ୍ତୁ. >>> has_close_elements{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}{}{}{}}{}{}}{}{}}{}{}}{}{}}{}}{}}{}}{}}{}}{}}{}}}{}}{}}}{}}{}}}{}}}{}}}{}}}{}}}{}}}}{}}}{}}}}}{}}}}{}}}}{}}}}{}}}}}}{}}}}}}{}}}}}}}}}{}}}}}}}}}}{}}}}}}}}}}{}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n",
        "canonical_solutions": "bool has_close_elements(std::vector<float> numbers, float threshold) {\n    std::sort(numbers.begin(), numbers.end());  // Sort the numbers in ascending order\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (std::abs(numbers[i] - numbers[i - 1]) < threshold) {\n            return true;\n        }\n    }\n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = has_close_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/1",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏହି ଫଳନ ପାଇଁ ଇନପୁଟ୍ ହେଉଛି ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଯେଉଁଥିରେ ନେଷ୍ଟେଡ୍ ବନ୍ଧନୀ ର ଏକାଧିକ ଗୋଷ୍ଠୀ ଅଛି। ଆପଣଙ୍କର ଲକ୍ଷ୍ୟ ହେଉଛି ସେହି ଗୋଷ୍ଠୀକୁ ପୃଥକ ଷ୍ଟ୍ରିଙ୍ଗରେ ଅଲଗା କରିବା ଏବଂ ସେଗୁଡିକର ଭେକ୍ଟର ଫେରସ୍ତ କରିବା। ପୃଥକ ଗୋଷ୍ଠୀ ସନ୍ତୁଳିତ (ପ୍ରତ୍ୟେକ ଖୋଲା ବନ୍ଧନୀ ସଠିକ୍ ଭାବରେ ବନ୍ଦ ହୋଇଛି) ଏବଂ ପରସ୍ପର ମଧ୍ୟରେ ନେଷ୍ଟେଡ୍ ନୁହେଁ _ ଇନପୁଟ୍ ଷ୍ଟ୍ରିଙ୍ଗରେ କୌଣସି ସ୍ପେସ୍ ଅଣଦେଖା କରନ୍ତୁ _ >>> ପୃଥକ_ପ୍ୟାରେନ୍_ଗ୍ରୁପ୍ _ \" ()) \" ()) \" ()) \" ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ())\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n",
        "canonical_solutions": "std::vector<std::string> separate_paren_groups(std::string paren_string) {\n    std::vector<std::string> groups;\n    std::string current_group;\n    int balance = 0;\n\n    for (char ch : paren_string) {\n        if (ch == ' ') continue;  // Ignore spaces\n\n        current_group += ch;\n        if (ch == '(') {\n            balance++;\n        } else if (ch == ')') {\n            balance--;\n            if (balance == 0) {  // Found a balanced group\n                groups.push_back(current_group);\n                current_group.clear();\n            }\n        }\n    }\n\n    return groups;\n}",
        "test": "}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"(()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/2",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ସକାରାତ୍ମକ ଫ୍ଲୋଟିଂ ପଏଣ୍ଟ ସଂଖ୍ୟା ଦିଆଯାଇଥିବା ବେଳେ ଏହାକୁ ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା (ଦତ୍ତ ସଂଖ୍ୟା ଠାରୁ ବଡ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା) ଏବଂ ଦଶମିକ ସଂଖ୍ୟା (ବାକି ଅଂଶ ସର୍ବଦା 1 ରୁ ଛୋଟ) ରେ ବିଭକ୍ତ କରାଯାଇପାରିବ । ସଂଖ୍ୟା ର ଦଶମିକ ଅଂଶକୁ ଫେରାନ୍ତୁ । >>> truncate_number((3.5f)) (0.5f)\nfloat truncate_number(float number) {\n",
        "canonical_solutions": "float truncate_number(float number) {\n    return number - std::floor(number);\n}",
        "test": "}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5f)) == (0.5f));\n    assert(candidate((1.25f)) == (0.25f));\n    assert(candidate((123.0f)) == (0.0f));\n}\n"
    },
    {
        "task_id": "HumanEval/3",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ବ୍ୟାଙ୍କ ଖାତାରେ ଜମା ଏବଂ ଉଠାଣ କାରବାରର ଭେକ୍ଟର ଦିଆଯାଇଛି ଯାହା ଶୂନ ସନ୍ତୁଳନ ସହିତ ଆରମ୍ଭ ହୁଏ । ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଯେ କୌଣସି ସମୟରେ ଖାତାର ସନ୍ତୁଳନ ଶୂନ ତଳେ ପଡ଼େ, ଏବଂ ସେହି ସମୟରେ ଫଳନଟି ସତ୍ୟ ଫେରସ୍ତ ହେବା ଉଚିତ । ଅନ୍ୟଥା ଏହା ମିଥ୍ୟା ଫେରସ୍ତ ହେବା ଉଚିତ । >>> below_zero((std::vector<long>({long) 1, (long) 2, (long) 3}))) (ମିଥ୍ୟା) >>> below_zero(std::vector<long>({long) 1, (long) 2, (long) -4, (long) 5}))) (true)\nbool below_zero(std::vector<long> operations) {\n",
        "canonical_solutions": "bool below_zero(std::vector<long> operations) {\n    long balance = 0;\n    for (long op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/4",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଇନପୁଟ୍ ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ଭେକ୍ଟର ପାଇଁ, ଏହି ଡାଟାସେଟର ମଧ୍ୟମ ଆଖପାଖରେ ମିଆନ୍ ଅବ୍ ସଲ୍ଟ ଡିଭିଆଏନ୍ ଗଣନା କରନ୍ତୁ । ମିଆନ୍ ଅବ୍ ସଲ୍ଟ ଡିଭିଆଏନ୍ ହେଉଛି ପ୍ରତ୍ୟେକ ଉପାଦାନ ଏବଂ ଏକ କେନ୍ଦ୍ର ବିନ୍ଦୁ (ଏହି କ୍ଷେତ୍ରରେ ମଧ୍ୟମ) ମଧ୍ୟରେ ହାରାହାରି ଅବ୍ ସଲ୍ଟ ଡିଭିଆନ୍: MAD = ̊ x - x_mean ̊ >>> mean_absolute_deviation (((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) {\n",
        "canonical_solutions": "float mean_absolute_deviation(std::vector<float> numbers) {\n    float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f) / numbers.size();\n    float mad = std::accumulate(numbers.begin(), numbers.end(), 0.0f, \n                                [mean](float sum, float x) { return sum + std::abs(x - mean); }) \n                / numbers.size();\n    return mad;\n}",
        "test": "}\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f}))) == (0.5f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n}\n"
    },
    {
        "task_id": "HumanEval/5",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ପ୍ରବେଶ ଭେକ୍ଟର ର ପ୍ରତ୍ୟେକ ଦୁଇ କ୍ରମିକ ଉପାଦାନ ମଧ୍ୟରେ ଏକ ସଂଖ୍ୟା 'ଡିଲିମିଟର' ଭର୍ତ୍ତି କରନ୍ତୁ `numbers' >>> intersperse((std::vector<long>()), (4)) (std::vector<long>()) >>> intersperse((std::vector<long>({long) 1, (long) 2, (long) 3}), (4)) (std::vector<long>({long) 1, (long) 4, (long) 2, (long) 4, (long) 3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n",
        "canonical_solutions": "std::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n    if (numbers.empty()) return numbers;\n\n    std::vector<long> result;\n    for (size_t i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = intersperse;\n    assert(candidate((std::vector<long>()), (7)) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6, (long)8, (long)3, (long)8, (long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2, (long)2})));\n}\n"
    },
    {
        "task_id": "HumanEval/6",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏହି ଫଳନ ପାଇଁ ଇନପୁଟ୍ ହେଉଛି ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଯାହାକି ଅନ୍ତଃସ୍ଥଳ ବନ୍ଧନୀ ପାଇଁ ଏକାଧିକ ଗୋଷ୍ଠୀକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ। ପ୍ରତ୍ୟେକ ଗୋଷ୍ଠୀ ପାଇଁ, ବନ୍ଧନୀଗୁଡ଼ିକର ଗଭୀରତମ ସ୍ତରର ନେଷ୍ଟିଂକୁ ଆଉଟପୁଟ୍ କରନ୍ତୁ। ଉଦାହରଣ ସ୍ୱରୂପ (() (()) ରେ ସର୍ବାଧିକ ଦୁଇଟି ସ୍ତର ଅଛି ଯେତେବେଳେ ((())) ରେ ତିନୋଟି ଅଛି। >>> parse_nested_parens ((((((()) ((())) () (((()))))))) (std::vector<long>({(long) 2, (long) 3, (long) 1, (long) 3}))\nstd::vector<long> parse_nested_parens(std::string paren_string) {\n",
        "canonical_solutions": "std::vector<long> parse_nested_parens(std::string paren_string) {\n    std::vector<long> depths;\n    long current_depth = 0, max_depth = 0;\n\n    for (char ch : paren_string) {\n        if (ch == ' ') {\n            if (max_depth > 0) {\n                depths.push_back(max_depth);\n                max_depth = 0;\n            }\n            current_depth = 0;\n        } else if (ch == '(') {\n            current_depth++;\n            max_depth = std::max(max_depth, current_depth);\n        } else if (ch == ')') {\n            current_depth--;\n        }\n    }\n\n    if (max_depth > 0) {\n        depths.push_back(max_depth);\n    }\n\n    return depths;\n}",
        "test": "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
    },
    {
        "task_id": "HumanEval/7",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଇନପୁଟ୍ ଭେକ୍ଟରକୁ କେବଳ ସେହିସବୁ ସ୍ଟ୍ରିଙ୍ଗ୍ ପାଇଁ ଫିଲ୍ଟର୍ କରନ୍ତୁ ଯେଉଁଥିରେ ଦିଆଯାଇଥିବା ସ୍ଟ୍ରିଙ୍ଗ୍ >>> filter_by_substring(((std::vector<std::string>()), (\"a\")) (std::vector<std::string>()) >>> filter_by_substring((((std::vector<std::string>({(std::string) \"abc\", (std::string) \"bacd\", (std::string) \"cde\", (std::string) \"array\"})), (\"a\") (std::vector<std::string>(({(std::string) abc\", (std::string) \"bacd\", (std::string) \"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n",
        "canonical_solutions": "std::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n    std::vector<std::string> result;\n    for (const auto& str : strings) {\n        if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\", (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"})), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"prune\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/8",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ଭେକ୍ଟର ପାଇଁ, ଏକ ଟାପଲ୍ ଫେରାନ୍ତୁ ଯାହା ଏକ ଭେକ୍ଟରରେ ଥିବା ସମସ୍ତ ଇଣ୍ଟେଜରଗୁଡିକର ସମୁଦାୟ ଏବଂ ଉତ୍ପାଦିତ _ ଖାଲି ସମୁଦାୟ 0 ସହିତ ସମାନ ହେବା ଉଚିତ ଏବଂ ଖାଲି ଉତ୍ପାଦ 1 ସହିତ ସମାନ ହେବା ଉଚିତ _ >>> ସମ_ ଉତ୍ପାଦ _ (((std:: ଭେକ୍ଟର _<long> _))) (std::make_tuple _0, 1)) >>> ସମ_ ଉତ୍ପାଦ _ (((std:: ଭେକ୍ଟର _<long> _{long) 1, (long) 2, (long) 3, (long) 4}))) (std::make_tuple _________, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\n",
        "canonical_solutions": "std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum = std::accumulate(numbers.begin(), numbers.end(), 0L);\n    long product = std::accumulate(numbers.begin(), numbers.end(), 1L, std::multiplies<long>());\n    return std::make_tuple(sum, product);\n}",
        "test": "}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10}))) == (std::make_tuple(10, 10)));\n}\n"
    },
    {
        "task_id": "HumanEval/9",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ଭେକ୍ଟରରୁ, କ୍ରମରେ ଦିଆଯାଇଥିବା ମୁହୂର୍ତ୍ତ ପର୍ଯ୍ୟନ୍ତ ମିଳିଥିବା ରୋଲିଂ ସର୍ବାଧିକ ଉପାଦାନର ଭେକ୍ଟର ସୃଷ୍ଟି କରନ୍ତୁ. >>> rolling_max(((std::vector<long>({long) 1, (long) 2, (long) 3, (long) 2, (long) 3, (long) 4, (long) 2}))) (std::vector<long>({long) 1, (long) 2, (long) 3, (long) 3, (long) 3, (long) 3, (long) 4, (long) 4}))\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n",
        "canonical_solutions": "std::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long> result;\n    long max_so_far = LONG_MIN;\n\n    for (long num : numbers) {\n        max_so_far = std::max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n}\n"
    },
    {
        "task_id": "HumanEval/10",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ହେଉଛିଃ - ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ସର୍ବୋଚ୍ଚ ପାଲିଣ୍ଡ୍ରୋମ ଖୋଜନ୍ତୁଃ - ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ସର୍ବୋଚ୍ଚ ପାଲିଣ୍ଡ୍ରୋମ ଖୋଜନ୍ତୁଃ - ପାଲିଣ୍ଡ୍ରୋମିକ୍ ସଫିକ୍ସ ପୂର୍ବରୁ ଆସୁଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ପ୍ରିଫିକ୍ସର ଷ୍ଟ୍ରିଙ୍ଗ୍ ରିଭର୍ସକୁ ଷ୍ଟ୍ରିଙ୍ଗ୍ ର ଶେଷକୁ ଯୋଡନ୍ତୁଃ >>> make_palindrome (((\"\")) (\"\") >>> make_palindrome (((\"cat\")) (\"catac\") >>> make_palindrome (((\"cata\")) (\"catac\")\nstd::string make_palindrome(std::string string) {\n",
        "canonical_solutions": "std::string make_palindrome(std::string string) {\n    auto is_palindrome = [](const std::string &s) {\n        return std::equal(s.begin(), s.begin() + s.size() / 2, s.rbegin());\n    };\n\n    for (size_t i = 0; i < string.size(); ++i) {\n        if (is_palindrome(string.substr(i))) {\n            std::string prefix = string.substr(0, i);\n            std::reverse(prefix.begin(), prefix.end());\n            return string + prefix;\n        }\n    }\n\n    return string;\n}",
        "test": "}\nint main() {\n    auto candidate = make_palindrome;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"x\")) == (\"x\"));\n    assert(candidate((\"xyz\")) == (\"xyzyx\"));\n    assert(candidate((\"xyx\")) == (\"xyx\"));\n    assert(candidate((\"jerry\")) == (\"jerryrrej\"));\n}\n"
    },
    {
        "task_id": "HumanEval/11",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଇନପୁଟ୍ ହେଉଛି ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗ୍ a ଏବଂ b ଯାହା କେବଳ 1s ଏବଂ 0s ରେ ଗଠିତ । ଏହି ଇନପୁଟ୍ ଉପରେ ବାଇନାରୀ XOR କରନ୍ତୁ ଏବଂ ଫଳାଫଳକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭାବରେ ଫେରାନ୍ତୁ । >>> string_xor((\"010\"), (\"110\")) (\"100\")\nstd::string string_xor(std::string a, std::string b) {\n",
        "canonical_solutions": "std::string string_xor(std::string a, std::string b) {\n    std::string result;\n    for (size_t i = 0; i < a.size(); ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
    },
    {
        "task_id": "HumanEval/12",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string ର ଭେକ୍ଟର ମଧ୍ୟରୁ, ସବୁଠାରୁ ଲମ୍ବାକୁ ଫେରାଇଦିଅନ୍ତୁ. ସମାନ ଲମ୍ବର ଏକାଧିକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଥିଲେ ପ୍ରଥମକୁ ଫେରାଇଦିଅନ୍ତୁ. ଇନପୁଟ୍ ଭେକ୍ଟର ଖାଲି ଥିଲେ None କୁ ଫେରାଇଦିଅନ୍ତୁ. >>> longest(((std::vector<std::string>())) std::nullopt >>> longest(((std::vector<std::string>{(std::string) \"a\", (std::string) \"b\", (std::string) \"c\"}))) \"a\" >>> longest(((std::vector<std::string>({(std::string) \"a\", (std::string) \"bb\", (stdstring) \"ccc\"}))) \"ccc\"\nstd::optional<std::string> longest(std::vector<std::string> strings) {\n",
        "canonical_solutions": "std::optional<std::string> longest(std::vector<std::string> strings) {\n    if (strings.empty()) return std::nullopt;\n\n    return *std::max_element(strings.begin(), strings.end(), \n                             [](const std::string& a, const std::string& b) {\n                                 return a.size() < b.size();\n                             });\n}",
        "test": "}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
    },
    {
        "task_id": "HumanEval/13",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଦୁଇଟି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ସର୍ବୋଚ୍ଚ ସାଧାରଣ ବିଭାଜକ a ଏବଂ b >>> ସର୍ବୋଚ୍ଚ_ସମାନ_ବିଭାଜକ (((3), (5)) (1) >>> ସର୍ବୋଚ୍ଚ_ସମାନ_ବିଭାଜକ (((25), (15)) (5)\nlong greatest_common_divisor(long a, long b) {\n",
        "canonical_solutions": "long greatest_common_divisor(long a, long b) {\n    return std::gcd(a, b);\n}",
        "test": "}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
    },
    {
        "task_id": "HumanEval/14",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ସମସ୍ତ ଉପସର୍ଗର ଭେକ୍ଟରକୁ ଫେରାଇଥାଏ, ଯାହାକି ଇନପୁଟ୍ ଷ୍ଟ୍ରିଙ୍ଗର ସବୁଠାରୁ ଛୋଟରୁ ସବୁଠାରୁ ଲମ୍ବା ପର୍ଯ୍ୟନ୍ତ ହୋଇଥାଏ ।\nstd::vector<std::string> all_prefixes(std::string string) {\n",
        "canonical_solutions": "std::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string> prefixes;\n    for (size_t i = 1; i <= string.size(); ++i) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return prefixes;\n}",
        "test": "}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/15",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 0 ରୁ ଆରମ୍ଭ କରି n ପର୍ଯ୍ୟନ୍ତ ଅନ୍ତର୍ଭୁକ୍ତ ଥିବା ସ୍ଥାନ-ସୀମିତ ସଂଖ୍ୟା ବିଶିଷ୍ଟ ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଫେରାଇଥାଏ. >>> string_sequence((0)) (\"0\") >>> string_sequence((5)) (\"0 1 2 3 4 5\")\nstd::string string_sequence(long n) {\n",
        "canonical_solutions": "std::string string_sequence(long n) {\n    std::ostringstream oss;\n    for (long i = 0; i <= n; ++i) {\n        if (i > 0) oss << \" \";\n        oss << i;\n    }\n    return oss.str();\n}",
        "test": "}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
    },
    {
        "task_id": "HumanEval/16",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଦିଆଗଲା, କେତେ ଅଲଗା ଅକ୍ଷର (କେସକୁ ନେଇ ନିର୍ବିଶେଷରେ) ଏହା ତିଆରି ହୁଏ ଜାଣନ୍ତୁ >>> count_distinct_characters (((\"xyzXYZ\")) (3) >>> count_distinct_characters (((\"Jerry\")) (4)\nlong count_distinct_characters(std::string string) {\n",
        "canonical_solutions": "long count_distinct_characters(std::string string) {\n    std::unordered_set<char> distinct_chars;\n    for (char ch : string) {\n        distinct_chars.insert(std::tolower(ch));\n    }\n    return distinct_chars.size();\n}",
        "test": "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
    },
    {
        "task_id": "HumanEval/17",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏହି ଫଙ୍କସନକୁ ଇନପୁଟ କରିବା ପାଇଁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଅଛି ଯାହା ASCII ଫର୍ମାଟରେ ମ୍ୟୁଜିକାଲ ନୋଟସ୍ କୁ ଦର୍ଶାଏ । ଆପଣଙ୍କର କାମ ହେଉଛି ଅନେକ ବିଟ୍ କୁ ସନ୍ତୁଳିତ ଇଣ୍ଟେଜର ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭେକ୍ଟର କୁ ବିଶ୍ଳେଷଣ କରିବା: 'o' ନୋଟ୍, ଶେଷ ଚାରି ବିଟ୍ 'o' ର ର' - ଅଧା ନୋଟ୍, ଶେଷ ଦୁଇ ବିଟ୍ 'ର' - ଚତୁର୍ଥ ନୋଟ୍, ଶେଷ ଏକ ବିଟ୍ >>> parse_music. ((\"o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\nstd::vector<long> parse_music(std::string music_string) {\n",
        "canonical_solutions": "std::vector<long> parse_music(std::string music_string) {\n    std::vector<long> beats;\n    std::istringstream iss(music_string);\n    std::string note;\n    \n    while (iss >> note) {\n        if (note == \"o\") beats.push_back(4);\n        else if (note == \"o|\") beats.push_back(2);\n        else if (note == \".|\") beats.push_back(1);\n    }\n\n    return beats;\n}",
        "test": "}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));\n}\n"
    },
    {
        "task_id": "HumanEval/18",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ମୂଳ ବାକ୍ୟଖଣ୍ଡରେ କେତେଥର ଗୋଟିଏ ଉପବାକ୍ୟଖଣ୍ଡ ମିଳିପାରିବ ତାହା ଖୋଜନ୍ତୁ. ପରସ୍ପର ଉପରେ ଅତିବାହିତ ହେଉଥିବା ଘଟଣା ଗୁଡିକୁ ଗଣନା କରନ୍ତୁ. >>> how_many_times((\"\"), (\"a\")) (0) >>> how_many_times(\"aaa\"), (\"a\")) (3) >>> how_many_times(\"aaaa\"), (\"aa\") (3)\nlong how_many_times(std::string string, std::string substring) {\n",
        "canonical_solutions": "long how_many_times(std::string string, std::string substring) {\n    if (substring.empty()) return 0;\n    \n    long count = 0;\n    size_t pos = 0;\n    \n    while ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n        pos++;  // Move one position forward to count overlapping occurrences\n    }\n    \n    return count;\n}",
        "test": "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/19",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ନିବେଶ ହେଉଛି 'ଶୂନ'ରୁ 'ନଅ' ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ସ୍ପେସ୍-ସୀମିତ ଷ୍ଟ୍ରିଙ୍ଗ୍. ବୈଧ ବିକଳ୍ପଗୁଡ଼ିକ ହେଉଛି 'ଶୂନ', 'ଏକ', 'ଦୁଇ', 'ତିନି', 'ଚାରି', 'ପାଞ୍ଚ', 'ଛଅ', 'ସାତ', 'ଆଠ' ଏବଂ 'ନଅ'। ସଂଖ୍ୟାଗୁଡ଼ିକ ସହିତ ଷ୍ଟ୍ରିଙ୍ଗ୍ କୁ ଛୋଟରୁ ବଡ଼ ପର୍ଯ୍ୟନ୍ତ ସର୍ଟ କରନ୍ତୁ >>> sort_numbers (((\"ତିନି ଏକ ପାଞ୍ଚ\")) (\"ଏକ ତିନି ପାଞ୍ଚ\")\nstd::string sort_numbers(std::string numbers) {\n",
        "canonical_solutions": "std::string sort_numbers(std::string numbers) {\n    std::unordered_map<std::string, int> num_map = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    std::unordered_map<int, std::string> rev_map = {\n        {0, \"zero\"}, {1, \"one\"}, {2, \"two\"}, {3, \"three\"}, {4, \"four\"},\n        {5, \"five\"}, {6, \"six\"}, {7, \"seven\"}, {8, \"eight\"}, {9, \"nine\"}\n    };\n\n    std::istringstream iss(numbers);\n    std::vector<int> num_list;\n    std::string word;\n\n    while (iss >> word) {\n        num_list.push_back(num_map[word]);\n    }\n\n    std::sort(num_list.begin(), num_list.end());\n\n    std::ostringstream oss;\n    for (size_t i = 0; i < num_list.size(); ++i) {\n        if (i > 0) oss << \" \";\n        oss << rev_map[num_list[i]];\n    }\n\n    return oss.str();\n}",
        "test": "}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
    },
    {
        "task_id": "HumanEval/20",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଯୋଗାଣ ଭେକ୍ଟରରୁ (ଅତିକମରେ ଦୁଇଟି ଲମ୍ବ) ଦୁଇଗୋଟିକୁ ବାଛନ୍ତୁ ଏବଂ ପରସ୍ପରର ନିକଟତମ ହୋଇଥିବା ଦୁଇଟିକୁ ଫେରାନ୍ତୁ ଏବଂ ସେଗୁଡିକୁ କ୍ରମରେ ଫେରାନ୍ତୁ (ଛୋଟ ସଂଖ୍ୟା, ବଡ ସଂଖ୍ୟା) । >>> find_closest_elements (ନିଜ ନିକଟତମ ଉପାଦାନ) >>> find_closest_elements (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ)) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ)\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n",
        "canonical_solutions": "std::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float num1 = 0, num2 = 0;\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            num1 = numbers[i - 1];\n            num2 = numbers[i];\n        }\n    }\n\n    return std::make_tuple(num1, num2);\n}",
        "test": "}\nint main() {\n    auto candidate = find_closest_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(3.9f, 4.0f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))) == (std::make_tuple(5.0f, 5.9f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(2.0f, 2.2f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))) == (std::make_tuple(2.0f, 2.0f)));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))) == (std::make_tuple(2.2f, 3.1f)));\n}\n"
    },
    {
        "task_id": "HumanEval/21",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଭେକ୍ଟର ସଂଖ୍ୟା (ଅତିକମରେ ଦୁଇଟି ଉପାଦାନର) ଦିଆଗଲା, ସେହି ଭେକ୍ଟରକୁ ଏକ ସରଳ ପରିବର୍ତ୍ତନ ପ୍ରୟୋଗ କରନ୍ତୁ, ଯେପରି ସର୍ବନିମ୍ନ ସଂଖ୍ୟା 0 ହେବ ଏବଂ ସର୍ବବୃହତ 1 ହେବ >>> rescale_to_unit{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}{}{}}{}}{}{}}{}}{}{}}{}}{}}{}{}}{}}{}{}{}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}}{}}}{}}}{}}}{}}}{}}}{}}}}{}}}}{}}}}}{}}}}}{}}}}}}{}}}}}}}{}}}}}}}{}}}}}}}}}{}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n",
        "canonical_solutions": "std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n\n    if (min_val == max_val) {\n        std::fill(numbers.begin(), numbers.end(), 0.0f);\n        return numbers;\n    }\n\n    for (float &num : numbers) {\n        num = (num - min_val) / (max_val - min_val);\n    }\n\n    return numbers;\n}",
        "test": "}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0f, (float)49.9f}))) == (std::vector<float>({(float)0.0f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)49.9f}))) == (std::vector<float>({(float)1.0f, (float)0.0f})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n    assert(candidate((std::vector<float>({(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n}\n"
    },
    {
        "task_id": "HumanEval/22",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଫିଲ୍ଟର ଯେକୌଣସି cppthon ମୂଲ୍ୟର ଦିଆଯାଇଥିବା ଭେକ୍ଟର କେବଳ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପାଇଁ >>> ଫିଲ୍ଟର_ଇଣ୍ଟିଜରସ (((std::vector<std::any>({(std::string) \"a\", (std::string) 3.14f, (std::string) 5}))) (std::vector<long>({(long) 5})) >>> ଫିଲ୍ଟର_ଇଣ୍ଟିଜରସ (((std::vector<std::any>({1, 2, 3, \"abc\", std::<long,map>), std::vector<long>()))) (std::vector<long>({(long) 1, (long) 2, (long) 3}))\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n",
        "canonical_solutions": "std::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (const auto& val : values) {\n        if (val.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(val));\n        } else if (val.type() == typeid(int)) {\n            result.push_back(std::any_cast<int>(val));\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2f, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n"
    },
    {
        "task_id": "HumanEval/23",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଦିଆଯାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗର ଲମ୍ବକୁ ଫେରାଇଥାଏ >>> string_length((\"\")) (0) >>> string_length((\"abc\")) (3)\nlong string_length(std::string string) {\n",
        "canonical_solutions": "long string_length(std::string string) {\n    return string.length();\n}",
        "test": "}\nint main() {\n    auto candidate = string_length;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"x\")) == (1));\n    assert(candidate((\"asdasnakj\")) == (9));\n}\n"
    },
    {
        "task_id": "HumanEval/24",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n ପାଇଁ, ସବୁଠାରୁ ବଡ ସଂଖ୍ୟା ଖୋଜନ୍ତୁ ଯାହା n କୁ ସମାନ ଭାବରେ ବିଭକ୍ତ କରେ, n ଠାରୁ ଛୋଟ >>> ସବୁଠାରୁ ବଡ_ବିଭାଜକ (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_) (_BAR_) (_) (_BAR_) (_BAR_) (_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_) (_BAR_\nlong largest_divisor(long n) {\n",
        "canonical_solutions": "long largest_divisor(long n) {\n    for (long i = n / 2; i > 0; --i) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;\n}",
        "test": "}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
    },
    {
        "task_id": "HumanEval/25",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଗୋଟିଏ ନିର୍ଦ୍ଦିଷ୍ଟ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ପ୍ରାଥମିକ ଗୁଣକଗୁଡ଼ିକର ଭେକ୍ଟର ଫେରାନ୍ତୁ, ଛୋଟରୁ ବଡ଼ ପର୍ଯ୍ୟନ୍ତ କ୍ରମରେ _ ପ୍ରତ୍ୟେକ ଗୁଣକକୁ କେତେଥର ଫ୍ୟାକ୍ଟୋରିଜରେ ଦେଖାଯାଏ ତାହା ସହିତ ସମାନ ହେବା ଉଚିତ _ ଇନପୁଟ୍ ସଂଖ୍ୟା ସମସ୍ତ ଗୁଣକଗୁଡ଼ିକର ଗୁଣନ ସହିତ ସମାନ ହେବା ଉଚିତ _ >>> ଫ୍ୟାକ୍ଟୋରିଜ କରନ୍ତୁ _ (((8)) (std::vector<long>{(long) 2, (long) 2, (long) 2})) >>> ଫ୍ୟାକ୍ଟୋରିଜ କରନ୍ତୁ _ (((25)) (std::vector<long>{(long) 5, (long) 5})) >>> >>> ଫ୍ୟାକ୍ଟୋରିଜ କରନ୍ତୁ _ ((((70)) (std::vector<long>{(long) 2, (long) 5, (long) 7}))\nstd::vector<long> factorize(long n) {\n",
        "canonical_solutions": "std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for (long i = 2; i * i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}",
        "test": "}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
    },
    {
        "task_id": "HumanEval/26",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଭେକ୍ଟରରୁ, ସମସ୍ତ ଉପାଦାନଗୁଡ଼ିକୁ କାଢ଼ି ଦିଅନ୍ତୁ ଯାହା ଏକାଧିକ ଥର ଦେଖାଯାଏ। ଉପାଦାନଗୁଡ଼ିକର କ୍ରମାଙ୍କକୁ ଇନପୁଟରେ ଥିବା ସମାନ ରଖନ୍ତୁ। >>> remove_duplicates((std::vector<long>({(long) 1, (long) 2, (long) 3, (long) 2, (long) 4}))) (std::vector<long>({(long) 1, (long) 3, (long) 4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n",
        "canonical_solutions": "std::vector<long> remove_duplicates(std::vector<long> numbers) {\n    std::unordered_map<long, int> freq;\n    for (long num : numbers) {\n        freq[num]++;\n    }\n\n    std::vector<long> result;\n    for (long num : numbers) {\n        if (freq[num] == 1) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n}\n"
    },
    {
        "task_id": "HumanEval/27",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଗୋଟିଏ ଧାଡ଼ି ପାଇଁ, ଛୋଟ ଅକ୍ଷରକୁ ବଡ଼ ଅକ୍ଷର ଓ ବଡ଼ ଅକ୍ଷରକୁ ଛୋଟ ଅକ୍ଷର ଭାବରେ ଫ୍ଲପ୍ କରନ୍ତୁ. >>> flip_case (((\"Hello\")) (\"HELLO\")\nstd::string flip_case(std::string string) {\n",
        "canonical_solutions": "std::string flip_case(std::string string) {\n    for (char &ch : string) {\n        if (std::islower(ch)) {\n            ch = std::toupper(ch);\n        } else if (std::isupper(ch)) {\n            ch = std::tolower(ch);\n        }\n    }\n    return string;\n}",
        "test": "}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
    },
    {
        "task_id": "HumanEval/28",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକକ ଷ୍ଟ୍ରିଙ୍ଗ ରେ ଷ୍ଟ୍ରିଙ୍ଗ ଗୁଡିକର କନକଟେନେଟ ଭେକ୍ଟର >>> କନକଟେନେଟ ((((std::vector<std::string>())) (\"\") >>> କନକଟେନେଟ ((((std::vector<std::string>({(std::string) \"a\", (std::string) \"b\", (std::string) \"c\"}))) (\"abc\")\nstd::string concatenate(std::vector<std::string> strings) {\n",
        "canonical_solutions": "std::string concatenate(std::vector<std::string> strings) {\n    std::string result;\n    for (const auto& str : strings) {\n        result += str;\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"k\"}))) == (\"xyzwk\"));\n}\n"
    },
    {
        "task_id": "HumanEval/29",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଇନପୁଟ୍ ଭେକ୍ଟର ରେ କେବଳ ସେହି ଷ୍ଟ୍ରିଙ୍ଗ୍ କୁ ଫିଲ୍ଟର୍ କରନ୍ତୁ ଯାହା ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ଉପସର୍ଗ ସହିତ ଆରମ୍ଭ ହୋଇଥାଏ. >>> filter_by_prefix((std::vector<std::string>()), (\"a\")) (std::vector<std::string>()) >>> filter_by_prefix(((std::vector<std::string>({(std::string) \"abc\", (std::string) \"bcd\", (std::string) \"cde\", (stdstring) \"array\"})), (\"a\") (std::vector<std::string>({(std::string) \"abc\", (std::string) \"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n",
        "canonical_solutions": "std::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n    std::vector<std::string> result;\n    for (const auto& str : strings) {\n        if (str.rfind(prefix, 0) == 0) {  // Check if 'str' starts with 'prefix'\n            result.push_back(str);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/30",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nnstd::vector<long> get_positive(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for (long num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/31",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଯଦି କୌଣସି ସଂଖ୍ୟା ଅଶୂନ୍ୟ ହୋଇଥାଏ ତେବେ ଏହା ସତ୍ୟ ହୋଇଥାଏ ଏବଂ ଅନ୍ୟଥା ଭୁଲ ହୋଇଥାଏ । >>> is_prime((6)) (false) >>> is_prime((101)) (true) >>> is_prime((11) (true) >>> is_prime((13441)) (true) >>> is_prime(61)) (true) >>> is_prime(4)) (false) >>> is_prime(1)) (false)\nbool is_prime(long n) {\n",
        "canonical_solutions": "bool is_prime(long n) {\n    if (n < 2) return false;\n    if (n < 4) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}",
        "test": "}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/33",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏହି ଫଙ୍କସନ ଏକ ଭେକ୍ଟର l ନେଇଥାଏ ଏବଂ ଏକ ଭେକ୍ଟର l' ଫେରାଇଥାଏ, ଯେପରିକି l' ସେହି ସବୁ ସୂଚକାଙ୍କରେ l ସହିତ ସମାନ ହୋଇଥାଏ ଯାହା ତିନି ଭାଗରେ ବିଭକ୍ତ ହୋଇନଥାଏ, କିନ୍ତୁ ଏହାର ମୂଲ୍ୟ ସେହି ସବୁ ସୂଚକାଙ୍କରେ lର ମୂଲ୍ୟ ସହିତ ସମାନ ହୋଇଥାଏ, କିନ୍ତୁ ସର୍ଟ ହୋଇଥାଏ । >>> sort_third: vector<long>{(long) 1, (long) 2, (long) 3}))) (std: vector<long>{(long) 1, (long) 2, (long) 3})) >>> sort_third: vector<long>{(long>{(long) 5, (long) 6, (long) 3, (long) 4, (long) 8, (long) 9, (long) 2}))) (std: vector<(long>{(long>{(long) 2, (long) 6, (long) 3, (long) 4, (long) 8, (long) 9, (long) 5})\nstd::vector<long> sort_third(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> sort_third(std::vector<long> l) {\n    std::vector<long> third_indices;\n    for (size_t i = 0; i < l.size(); i += 3) {\n        third_indices.push_back(l[i]);\n    }\n    std::sort(third_indices.begin(), third_indices.end());\n    \n    size_t idx = 0;\n    for (size_t i = 0; i < l.size(); i += 3) {\n        l[i] = third_indices[idx++];\n    }\n    \n    return l;\n}",
        "test": "}\nint main() {\n    auto candidate = sort_third;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)3, (long)4, (long)6, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)8, (long)3, (long)4, (long)6, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)9, (long)4, (long)8, (long)3, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)9, (long)4, (long)8, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5, (long)1})));\n}\n"
    },
    {
        "task_id": "HumanEval/34",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଭେକ୍ଟରରେ ସର୍ଟ ହୋଇଥିବା ଅନନ୍ୟ ଉପାଦାନଗୁଡ଼ିକୁ ଫେରାଇଥାଏ >>> unique((std::vector<long>({(long) 5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>{(long) 0, (long) 2, (long) 3, (long) 5, (long) 9, (long) 123}))\nstd::vector<long> unique(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}",
        "test": "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
    },
    {
        "task_id": "HumanEval/35",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଭେକ୍ଟରରେ ସର୍ବାଧିକ ଉପାଦାନକୁ ଫେରାଇଥାଏ. >>> max_element((std::vector<long>({long) 1, (long) 2, (long) 3}))) (3) >>> max_element((std::vector<long>({long) 5, (long) 3, (long) -5, (long) 2, (long) -3, (long) 3, (long) 9, (long) 0, (long) 123, (long) 1, (long) -10}))) (123)\nlong max_element(std::vector<long> l) {\n",
        "canonical_solutions": "long max_element(std::vector<long> l) {\n    return *std::max_element(l.begin(), l.end());\n}",
        "test": "}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n}\n"
    },
    {
        "task_id": "HumanEval/36",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 7 ଅଙ୍କଟି 11 କିମ୍ବା 13 ଦ୍ବାରା ବିଭକ୍ତ ହେଉଥିବା n ଠାରୁ କମ୍ ସଂଖ୍ଯା ରେ କେତେଥର ଦେଖାଯାଏ ତାହା ଫେରାଇଥାଏ. >>> fizz_buzz((50)) (0) >>> fizz_buzz((78)) (2) >>> fizz_buzz((79) (3)\nlong fizz_buzz(long n) {\n",
        "canonical_solutions": "long fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) count++;\n                temp /= 10;\n            }\n        }\n    }\n    return count;\n}",
        "test": "}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
    },
    {
        "task_id": "HumanEval/37",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏହି ଫଙ୍କସନ ଏକ ଭେକ୍ଟର l ନେଇଥାଏ ଏବଂ ଏକ ଭେକ୍ଟର l' ଫେରାଇଥାଏ, ଯେପରିକି l ଅଜଣା ସୂଚକାଙ୍କରେ l ସହିତ ସମାନ ହୋଇଥାଏ, କିନ୍ତୁ ଏହାର ମୂଲ୍ୟ l ର ଯୁଗ୍ମ ସୂଚକାଙ୍କରେ ସମାନ ହୋଇଥାଏ, କିନ୍ତୁ ସର୍ଟ ହୋଇଥାଏ । >>> sort_even: vector<long>{(long) 1, (long) 2, (long) 3}))) (std: vector<long>{(long) 1, (long) 2, (long) 3})) >>> sort_even: vector<long>{(long) 5, (long) 6, (long) 3, (long) 4}))) (std: vector<long>{(long) 3, (long) 6, (long) 5, (long) 4}))\nstd::vector<long> sort_even(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> sort_even(std::vector<long> l) {\n    std::vector<long> even_indices;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_indices.push_back(l[i]);\n    }\n    std::sort(even_indices.begin(), even_indices.end());\n    \n    size_t idx = 0;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        l[i] = even_indices[idx++];\n    }\n    \n    return l;\n}",
        "test": "}\nint main() {\n    auto candidate = sort_even;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)-10, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)5, (long)0, (long)9, (long)1, (long)123})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)-12, (long)4, (long)23, (long)2, (long)3, (long)11, (long)12, (long)-10}))) == (std::vector<long>({(long)-12, (long)8, (long)3, (long)4, (long)5, (long)2, (long)12, (long)11, (long)23, (long)-10})));\n}\n"
    },
    {
        "task_id": "HumanEval/39",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib n-ତମ ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ ଯାହାକି ଏକ ଫିବୋନାସୀ ସଂଖ୍ୟା ଅଟେ ଏବଂ ଏହା ମଧ୍ୟ ଏକ ପ୍ରାଇମ ଅଟେ. >>> prime_fib((1)) (2) >>> prime_fib(2)) (3) >>> prime_fib(3)) (5) >>> prime_fib(4)) (13) >>> prime_fib(5)) (89)\nlong prime_fib(long n) {\n",
        "canonical_solutions": "bool is_prime(long num) {\n    if (num < 2) return false;\n    if (num < 4) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (long i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nlong prime_fib(long n) {\n    std::vector<long> prime_fibs;\n    long a = 1, b = 1;\n    while (prime_fibs.size() < n) {\n        long next = a + b;\n        a = b;\n        b = next;\n        if (is_prime(next)) {\n            prime_fibs.push_back(next);\n        }\n    }\n    return prime_fibs[n - 1];\n}",
        "test": "}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n"
    },
    {
        "task_id": "HumanEval/40",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଟ୍ରିପଲ୍ସସମ୍-ଟୁ-ଜିରୋ ଏକ ଭେକ୍ଟର ଇଣ୍ଟିଜରକୁ ଇନପୁଟ୍ ଭାବରେ ଗ୍ରହଣ କରେ । ଏହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଭେକ୍ଟରରେ ତିନୋଟି ଭିନ୍ନ ଉପାଦାନ ଅଛି ଯାହା ଶୂନ୍ୟକୁ ଯୋଗ କରିଥାଏ, ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା । >>> ଟ୍ରିପଲ୍ସମ୍-ଟୁ-ଜିରୋ, ଏବଂ ମିଥ୍ୟା ଅନ୍ୟଥା । >>> ଟ୍ରିପଲ୍ସମ୍-ଟୁ-ଜିରୋ, ଏବଂ ମିଥ୍ୟା ଅନ୍ୟଥା । >>> ଟ୍ରିପଲ୍ସମ୍-ଟୁ-ଜିରୋ, ଏବଂ ମିଥ୍ୟା ଅନ୍ୟଥା । >>> ଟ୍ରିପଲ୍ସମ୍-ଟୁ-ଜିରୋ, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା । >>> ଟ୍ରିପଲ୍ସମ୍-ଟୁ-ଜିରୋ, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମି\nbool triples_sum_to_zero(std::vector<long> l) {\n",
        "canonical_solutions": "bool triples_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    size_t n = l.size();\n    \n    for (size_t i = 0; i < n - 2; i++) {\n        size_t left = i + 1, right = n - 1;\n        while (left < right) {\n            long sum = l[i] + l[left] + l[right];\n            if (sum == 0) return true;\n            else if (sum < 0) left++;\n            else right--;\n        }\n    }\n    \n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100, (long)3, (long)5, (long)-100}))) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/41",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ସଡକ କୁ କଳ୍ପନା କର ଯାହା ଏକ ଅନନ୍ତ ରୂପରେ ସଠିକ ଅଟେ. n ଗାଡି ବାମ ରୁ ଡାହାଣ କୁ ଯାଉଛି; ଏକ ସମୟରେ, n ଗାଡି ର ଅଲଗା ସେଟ ଡାହାଣ ରୁ ବାମ କୁ ଯାଉଛି. ଗାଡି ର ଦୁଇ ସେଟ ପରସ୍ପର ଠାରୁ ବହୁତ ଦୂରରେ ଆରମ୍ଭ ହୁଏ. ସବୁ ଗାଡି ସମାନ ବେଗ ରେ ଗତି କରେ. ଦୁଇ ଗାଡି କୁ ଧକ୍କା ଲାଗେ ଯେବେ ବାମ ରୁ ଡାହାଣ କୁ ଯାଉଥିବା ଗାଡି ଡାହାଣ ରୁ ବାମ କୁ ଯାଉଥିବା ଗାଡି କୁ ଧକ୍କା ଦିଏ. କିନ୍ତୁ ଗାଡି ଗୁଡିକ ଅନନ୍ତ ରୂପରେ ଦୃଢ ଓ ମଜବୁତ; ଫଳ ସ୍ବରୂପ ସେମାନେ ନିଜ ଗତି ପଥ ରେ ଗତି ଜାରି ରଖନ୍ତି ଯେପରି ସେମାନେ ଧକ୍କା ଖାଇ ନାହାଁନ୍ତି. ଏହି ଫଳନ ଏହିପରି ଧକ୍କା ର ସଂଖ୍ୟା କୁ output କରେ.\nlong car_race_collision(long n) {\n",
        "canonical_solutions": "long car_race_collision(long n) {\n    return n * n;\n}",
        "test": "}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
    },
    {
        "task_id": "HumanEval/42",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଉପାଦାନ ସହିତ ଭେକ୍ଟରକୁ ୧ ଦ୍ୱାରା ବୃଦ୍ଧି କରନ୍ତୁ. >>> incr_list((std::vector<long>({long) 1, (long) 2, (long) 3}))) (std::vector<long>{(long) 2, (long) 3, (long) 4})) >>> incr_list((std::vector<long>{long>(5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>{(long) 6, (long) 4, (long) 6, (long) 3, (long) 4, (long) 4, (long) 10, (long) 1, (long) 124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> incr_list(std::vector<long> l) {\n    for (long &num : l) {\n        num++;\n    }\n    return l;\n}",
        "test": "}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n}\n"
    },
    {
        "task_id": "HumanEval/43",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero ଏକ ଭେକ୍ଟର ଇଣ୍ଟେଜରକୁ ଇନପୁଟ ଭାବରେ ଗ୍ରହଣ କରିଥାଏ । ଏହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଭେକ୍ଟରରେ ଦୁଇଟି ଭିନ୍ନ ଉପାଦାନ ଅଛି ଯାହା ଶୂନ୍ୟକୁ ଯୋଗ କରିଥାଏ, ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା । >>> pairs_sum_to_zero(std::vector<long>(long) 1, (long) 3, (long) 5, (long) 0}))) (false) >>> pairs_sum_to_zero(std::vector<long>(long) 1, (long) 3, (long)-2, (long) 1} >>> (false) pairs_sum_to_zero(std::vector<long>(long) 1, (long) 2, (long) 3, (long) 7}))) (se) pairs >>>_sum_to_zero(std::vector<long>{(long>{(long>), (long) 2, (long) 4, (long) 5, (long) 3, (long) 5, (long) 7))) >>> (true) pairs_sum_to_zero))) (long_long) >>> (long_long) >>> (long)\nbool pairs_sum_to_zero(std::vector<long> l) {\n",
        "canonical_solutions": "bool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long> seen;\n    for (long num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/44",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ପ୍ରବେଶ ସଂଖ୍ଯା x ର ସଂଖ୍ଯା ଭିତ୍ତିକୁ ଭିତ୍ତିରେ ପରିବର୍ତ୍ତନ କରନ୍ତୁ. ରୂପାନ୍ତର ପରେ ଶୃଙ୍ଖଳ ପ୍ରତିନିଧିତ୍ବକୁ ଫେରାନ୍ତୁ. ଭିତ୍ତି ସଂଖ୍ୟା 10 ରୁ କମ୍. >>> change_base((8), (3)) (\"22\") >>> change_base(8), (2)) (\"1000\") >>> change_base((7), (2)) (\"111\")\nstd::string change_base(long x, long base) {\n",
        "canonical_solutions": "std::string change_base(long x, long base) {\n    if (x == 0) return \"0\";\n    \n    std::string result;\n    while (x > 0) {\n        result += std::to_string(x % base);\n        x /= base;\n    }\n    \n    std::reverse(result.begin(), result.end());\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
    },
    {
        "task_id": "HumanEval/45",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ତ୍ରିଭୁଜ ପାଇଁ ଏକ ପାର୍ଶ୍ବ ଏବଂ ଉଚ୍ଚ ରିଟର୍ଣ୍ଣ କ୍ଷେତ୍ରର ଦତ୍ତ ଦୈର୍ଘ୍ୟ. >>> ତ୍ରିଭୁଜ_ କ୍ଷେତ୍ର (), (), ()) (7.5f)\nfloat triangle_area(long a, long h) {\n",
        "canonical_solutions": "float triangle_area(long a, long h) {\n    return 0.5f * a * h;\n}",
        "test": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((5), (3)) == (7.5f));\n    assert(candidate((2), (2)) == (2.0f));\n    assert(candidate((10), (8)) == (40.0f));\n}\n"
    },
    {
        "task_id": "HumanEval/46",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Fib4 ସଂଖ୍ୟା କ୍ରମ ହେଉଛି Fibbonacci କ୍ରମ ପରି ଏକ କ୍ରମ ଯାହା ନିମ୍ନଲିଖିତ ପରିଭାଷା ପ୍ରାପ୍ତ ହୋଇଥାଏ: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). ଦୟାକରି fib4 ସଂଖ୍ୟା କ୍ରମର n-ତମ ଉପାଦାନକୁ ଦକ୍ଷତାର ସହିତ ଗଣନା କରିବା ପାଇଁ ଏକ ଫଳନ ଲେଖନ୍ତୁ । ପୁନଃସକ୍ରିୟତା ବ୍ୟବହାର କରନ୍ତୁ ନାହିଁ । >>> fib4((5)) (4) >>> fib4(6)) (8) >>> fib4(7)) (14)\nlong fib4(long n) {\n",
        "canonical_solutions": "long fib4(long n) {\n    if (n == 0 || n == 1 || n == 3) return 0;\n    if (n == 2) return 2;\n\n    std::vector<long> dp(n + 1, 0);\n    dp[2] = 2;\n\n    for (long i = 4; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];\n    }\n\n    return dp[n];\n}",
        "test": "}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
    },
    {
        "task_id": "HumanEval/47",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଭେକ୍ଟର l ରେ ଥିବା ଉପାଦାନ ଗୁଡିକର ରିଟର୍ଣ୍ଣ ମିଡିୟାନ. >>> ମିଡିୟାନ (((std::vector<long> (((long) 3, (long) 1, (long) 2, (long) 4, (long) 5}))) (ଫ୍ଲୋଟ୍ (((3)) >>> ମିଡିୟାନ (((std::vector<long> (((long) -10, (long) 4, (long) 6, (long) 1000, (long) 10, (long) 20}))) (15.0f)\nfloat median(std::vector<long> l) {\n",
        "canonical_solutions": "float median(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    size_t n = l.size();\n    \n    if (n % 2 == 1) {\n        return static_cast<float>(l[n / 2]);\n    } else {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n    }\n}",
        "test": "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0f));\n    assert(candidate((std::vector<long>({(long)5}))) == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5}))) == (5.5f));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3, (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
    },
    {
        "task_id": "HumanEval/48",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଯାଞ୍ଚ କରେ ଯେ ଦିଆଯାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗ୍ ଏକ ପାଲିଣ୍ଡ୍ରୋମ୍ >>> is_palindrome (((\"\")) (true) >>> is_palindrome (((\"aba\")) (true) >>> is_palindrome (((\"aaaaa\")) (true) >>> is_palindrome (((\"zbcd\")) (false)\nbool is_palindrome(std::string text) {\n",
        "canonical_solutions": "bool is_palindrome(std::string text) {\n    return std::equal(text.begin(), text.begin() + text.size() / 2, text.rbegin());\n}",
        "test": "}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/49",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2^n ମଡୁଲୋ p (ସଂଖ୍ୟାନକୁ ଧ୍ୟାନରେ ରଖନ୍ତୁ) କୁ ଫେରାଇଦିଏ. >>> ମଡୁଲୋnlong modp(long n, long p) {\n",
        "canonical_solutions": "long modp(long n, long p) {\n    return std::pow(2, n) % p;\n}",
        "test": "}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
    },
    {
        "task_id": "HumanEval/51",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels ହେଉଛି ଏକ ଫଙ୍କସନ୍ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ନେଇଥାଏ ଏବଂ ବିନା ସ୍ୱରରେ ଷ୍ଟ୍ରିଙ୍ଗ୍ ରିଟର୍ନ କରିଥାଏ. >>> remove_vowels(\"\")) (\"\") >>> remove_vowels((\"abcdef\")) (\"bcdf\") >>> remove_vowels((\"aaaaa\")) (\"\") >>> remove_vowels(\"aaBAA\")) (\"B\") >>> remove_vowels((\"zbcd\")) (\"zbcd\")\nstd::string remove_vowels(std::string text) {\n",
        "canonical_solutions": "std::string remove_vowels(std::string text) {\n    std::string result;\n    std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    for (char ch : text) {\n        if (vowels.find(ch) == vowels.end()) {\n            result += ch;\n        }\n    }\n    \n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = remove_vowels;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"abcdef\\nghijklm\")) == (\"bcdf\\nghjklm\"));\n    assert(candidate((\"fedcba\")) == (\"fdcb\"));\n    assert(candidate((\"eeeee\")) == (\"\"));\n    assert(candidate((\"acBAA\")) == (\"cB\"));\n    assert(candidate((\"EcBOO\")) == (\"cB\"));\n    assert(candidate((\"ybcd\")) == (\"ybcd\"));\n}\n"
    },
    {
        "task_id": "HumanEval/52",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଯଦି ଭେକ୍ଟର l ରେ ଥିବା ସମସ୍ତ ସଂଖ୍ୟା threshold t ତଳେ ଥାଏ ତେବେ true କୁ ଫେରାଇଦେବେ. >>> below_threshold((std::vector<long>({(long) 1, (long) 2, (long) 4, (long) 10})), (100)) (true) >>> below_threshold((std::vector<long>({(long) 1, (long) 20, (long) 4, (long) 10})), (5)) (false)\nbool below_threshold(std::vector<long> l, long t) {\n",
        "canonical_solutions": "bool below_threshold(std::vector<long> l, long t) {\n    return std::all_of(l.begin(), l.end(), [t](long num) { return num < t; });\n}",
        "test": "}\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/53",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଦୁଇଟି ସଂଖ୍ୟା x ଓ y ଯୋଡିବା >>> ଯୋଡିବା (), (3)) (5) >>> ଯୋଡିବା (), (7) (12)\nlong add(long x, long y) {\n",
        "canonical_solutions": "long add(long x, long y) {\n    return x + y;\n}",
        "test": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((0), (1)) == (1));\n    assert(candidate((1), (0)) == (1));\n    assert(candidate((2), (3)) == (5));\n    assert(candidate((5), (7)) == (12));\n    assert(candidate((7), (5)) == (12));\n}\n"
    },
    {
        "task_id": "HumanEval/54",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଦୁଇଟି ଶବ୍ଦର ସମାନ ଅକ୍ଷର ଅଛି କି ନାହିଁ ଯାଞ୍ଚ କରନ୍ତୁ. >>> same_chars(\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) (true) >>> same_chars((\"abcd\"), (\"dddddddabc\")) (true) >>> same_chars(\"dddddddabc\"), (\"abcd\") (true) >>> same_chars(\"eabcd\"), (\"dddddddabc\")) (false) >>> same_chars >>>\"((abcd\"), (\"dddddddabce\") (false) (false) >>> same_chars((\"eabcd\"), (\"ddddzzzzzdzddddabc\") (false) (true)\nbool same_chars(std::string s0, std::string s1) {\n",
        "canonical_solutions": "bool same_chars(std::string s0, std::string s1) {\n    std::unordered_set<char> set0(s0.begin(), s0.end());\n    std::unordered_set<char> set1(s1.begin(), s1.end());\n    return set0 == set1;\n}",
        "test": "}\nint main() {\n    auto candidate = same_chars;\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(candidate((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(candidate((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(candidate((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(candidate((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(candidate((\"aabb\"), (\"aaccc\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/55",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n-ତମ ଫାଇବୋନ୍ୟାଚି ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ. >>> ଫାଇବନ୍ୟାଚି (୧୦) (୫୫) >>> ଫାଇବନ୍ୟାଚି (୧) (୧) >>> ଫାଇବନ୍ୟାଚି (୮) (୨୧)\nlong fib(long n) {\n",
        "canonical_solutions": "long fib(long n) {\n    if (n <= 1) return n;\n    \n    long a = 0, b = 1, c;\n    for (long i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    \n    return b;\n}",
        "test": "}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
    },
    {
        "task_id": "HumanEval/56",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets ହେଉଛି \"<\" ଏବଂ \">\" ର ଏକ ଷ୍ଟ୍ରିଙ୍ଗ. ଯଦି ପ୍ରତ୍ୟେକ ଖୋଲିବା ବ୍ରାକେଟରେ ସମାନ ବନ୍ଦ ବ୍ରାକେଟ ଥାଏ ତେବେ true ଫେରାଇଦିଅନ୍ତୁ. >>> correct_bracketing((\"<\")) (false) >>> correct_bracketing(\"<>\")) (true) >>> correct_bracketing(\"<><>\")) (true) >>> correct_bracketing(\">(<>\") (false)\nbool correct_bracketing(std::string brackets) {\n",
        "canonical_solutions": "bool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '<') balance++;\n        else if (ch == '>') balance--;\n        if (balance < 0) return false;\n    }\n    return balance == 0;\n}",
        "test": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/57",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is ଭେକ୍ଟର ଉପାଦାନଗୁଡ଼ିକ ଏକକ ଭାବରେ ବୃଦ୍ଧି କିମ୍ବା ହ୍ରାସ ହେଉଛି. >>> ଏକକ ଭାବରେ (long) 1, (long) 2, (long) 4, (long) 20))) (true) >>> ଏକକ ଭାବରେ (long) 1, (long) 20, (long) 4, (long) 10))) (false) >>> ଏକକ ଭାବରେ (monotonic)\nbool monotonic(std::vector<long> l) {\n",
        "canonical_solutions": "bool monotonic(std::vector<long> l) {\n    bool increasing = true, decreasing = true;\n    \n    for (size_t i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1]) decreasing = false;\n        if (l[i] < l[i - 1]) increasing = false;\n    }\n    \n    return increasing || decreasing;\n}",
        "test": "}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9, (long)9, (long)9, (long)9}))) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/58",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଦୁଇ ଭେକ୍ଟର ପାଇଁ ସର୍ଟ ହୋଇଥିବା ଅନନ୍ୟ ସାଧାରଣ ଉପାଦାନକୁ ଫେରାଇଥାଏ. >>> common((std::vector<long>({long) 1, (long) 4, (long) 3, (long) 34, (long) 653, (long) 2, (long) 5), (std::vector<long>({long) 5, (long) 7, (long) 1, (long) 5, (long) 9, (long) 653, (long) 121}))) (std::vector<long>({long) 1, (long) 5, (long) 653})) >>> common(std::vector<long>{(long) 5, (long) 3, (long) 2, (long) 8}), (std::vector<long>{(long) 3, (long) 2))) (std::vector<long>{(long>{long} 2, (long) 3))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n",
        "canonical_solutions": "std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::unordered_set<long> set1(l1.begin(), l1.end());\n    std::unordered_set<long> result_set;\n    \n    for (long num : l2) {\n        if (set1.count(num)) {\n            result_set.insert(num);\n        }\n    }\n    \n    std::vector<long> result(result_set.begin(), result_set.end());\n    std::sort(result.begin(), result.end());\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/59",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n ର ସବୁଠାରୁ ବଡ ଅକ୍ଷର ଫ୍ୟାକ୍ଟର ଫେରାଇ ଦିଅନ୍ତୁ. n > 1 କୁ ଧରି ନିଅନ୍ତୁ ଏବଂ ଏହା ଅକ୍ଷର ନୁହେଁ. >>> ସବୁଠାରୁ ବଡ_ଅକ୍ଷର_ଫ୍ୟାକ୍ଟର ({13195)) (29) >>> ସବୁଠାରୁ ବଡ_ଅକ୍ଷର_ଫ୍ୟାକ୍ଟର ({2048)) (2)\nlong largest_prime_factor(long n) {\n",
        "canonical_solutions": "long largest_prime_factor(long n) {\n    long largest = -1;\n    \n    while (n % 2 == 0) {\n        largest = 2;\n        n /= 2;\n    }\n    \n    for (long i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\n    }\n    \n    if (n > 1) largest = n;\n    \n    return largest;\n}",
        "test": "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n"
    },
    {
        "task_id": "HumanEval/60",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n ହେଉଛି ଏକ ଫଙ୍କସନ୍ ଯାହା 1 ରୁ n ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାଗୁଡିକୁ ଯୋଗ କରିଥାଏ । >>> sum_to_n((30)) (465) >>> sum_to_n(100)) (5050) >>> sum_to_n((5)) (15) >>> sum_to_n(10)) (55) >>> sum_to_n(1)) (1)\nlong sum_to_n(long n) {\n",
        "canonical_solutions": "long sum_to_n(long n) {\n    return n * (n + 1) / 2;\n}",
        "test": "}\nint main() {\n    auto candidate = sum_to_n;\n    assert(candidate((1)) == (1));\n    assert(candidate((6)) == (21));\n    assert(candidate((11)) == (66));\n    assert(candidate((30)) == (465));\n    assert(candidate((100)) == (5050));\n}\n"
    },
    {
        "task_id": "HumanEval/61",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets ହେଉଛି \"(\" ଏବଂ \"\") ର ଏକ ଷ୍ଟ୍ରିଙ୍ଗ. ଯଦି ପ୍ରତ୍ୟେକ ଖୋଲିବା ବ୍ରାକେଟରେ ସମାନ ବନ୍ଦ ବ୍ରାକେଟ ଥାଏ ତେବେ TRUE ଫେରାଇଥାଏ. >>> correct_bracketing((\"(\")) (false) >>> correct_bracketing(\"() (true) >>> correct_bracketing(\"(()))) (true) >>> correct_bracketing((\") (false)\nbool correct_bracketing(std::string brackets) {\n",
        "canonical_solutions": "bool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '(') balance++;\n        else if (ch == ')') balance--;\n        if (balance < 0) return false;\n    }\n    return balance == 0;\n}",
        "test": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/62",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// xs ଏକ ବହୁଖଣ୍ଡର ଗୁଣକକୁ ଦର୍ଶାଏ. xs[0] + xs[1] * x + xs[2] * x^2 + .... ଏହି ବହୁଖଣ୍ଡର ନିର୍ଗମକୁ ସମାନ ଫର୍ମରେ ଫେରାଇଦିଅନ୍ତୁ. >>> derivative((std::vector<long>({long) 3, (long) 1, (long) 2, (long) 4, (long) 5}))) (std::vector<long>{(long) 1, (long) 4, (long) 12, (long) 20})) >>> derivative::std::vector<long>({long) 1, (long) 2, (long) 3}))) (std::vector<(long>{(long) 2, (long) 6}))\nstd::vector<long> derivative(std::vector<long> xs) {\n",
        "canonical_solutions": "std::vector<long> derivative(std::vector<long> xs) {\n    std::vector<long> result;\n    for (size_t i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1}))) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/63",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଫିବିବ ସଂଖ୍ୟା କ୍ରମ ହେଉଛି ଫିବୋନାସୀ କ୍ରମ ପରି ଏକ କ୍ରମ ଯାହାକି ନିମ୍ନଲିଖିତ ପରିଭାଷା ପ୍ରାପ୍ତ ହୋଇଥାଏ: ଫିବିବ (୦) == ୦ ଫିବିବ (୧) == ୦ ଫିବିବ (୨) == ୧ ଫିବିବ (ଏନ) == ଫିବିବ (ଏନ -୧) + ଫିବିବ (ଏନ -୨) + ଫିବିବ (ଏନ -୩) ଦୟାକରି ଫିବିବ ସଂଖ୍ୟା କ୍ରମର n-ତମ ଉପାଦାନକୁ ଦକ୍ଷତାର ସହିତ ଗଣନା କରିବା ପାଇଁ ଏକ ଫଳନ ଲେଖନ୍ତୁ । >>> ଫିବିବ (ଏନ -୧) (0) >>> ଫିବ (ଏନ -୫) (4) >>> ଫିବ (ଏନ -୮) (24)\nlong fibfib(long n) {\n",
        "canonical_solutions": "long fibfib(long n) {\n    if (n == 0 || n == 1) return 0;\n    if (n == 2) return 1;\n\n    std::vector<long> dp(n + 1, 0);\n    dp[2] = 1;\n\n    for (long i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n    }\n\n    return dp[n];\n}",
        "test": "}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n}\n"
    },
    {
        "task_id": "HumanEval/64",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଙ୍କସନ୍ vowels_count ଲେଖନ୍ତୁ ଯାହା ଏକ ଶବ୍ଦକୁ ସୂଚାଉଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଇନପୁଟ୍ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ ଷ୍ଟ୍ରିଙ୍ଗରେ ଥିବା ସ୍ୱରଗୁଡ଼ିକର ସଂଖ୍ୟା ଫେରାଇଥାଏ । ଏହି କ୍ଷେତ୍ରରେ ସ୍ୱରଗୁଡ଼ିକ ହେଉଛି 'a', 'e', 'i', 'o', 'u' । ଏଠାରେ, 'y' ମଧ୍ୟ ଏକ ସ୍ୱର ଅଟେ, କିନ୍ତୁ କେବଳ ଯେତେବେଳେ ଏହା ଦିଆଯାଇଥିବା ଶବ୍ଦର ଶେଷରେ ଥାଏ । ଉଦାହରଣଃ >>> vowels_count ({\"abcde\")) (2) >>> vowels_count ({\"ACEDY\")) (3)\nlong vowels_count(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong vowels_count(std::string s) {\n  long count = 0;\n  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  for (char c : s) {\n    if (vowels.count(c)) {\n      count++;\n    }\n  }\n  if (!s.empty() && (s.back() == 'y' || s.back() == 'Y')) {\n    count++;\n  }\n  return count;\n}",
        "test": "}\nint main() {\n    auto candidate = vowels_count;\n    assert(candidate((\"abcde\")) == (2));\n    assert(candidate((\"Alone\")) == (3));\n    assert(candidate((\"key\")) == (2));\n    assert(candidate((\"bye\")) == (1));\n    assert(candidate((\"keY\")) == (2));\n    assert(candidate((\"bYe\")) == (1));\n    assert(candidate((\"ACEDY\")) == (3));\n}\n"
    },
    {
        "task_id": "HumanEval/65",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ସର୍କୁଲାର ଭାବରେ x ର ଅଙ୍କକୁ ସ୍ଥାନାନ୍ତର କରନ୍ତୁ, ସ୍ଥାନାନ୍ତର ଦ୍ୱାରା ଅଙ୍କକୁ ଡାହାଣକୁ ସ୍ଥାନାନ୍ତର କରନ୍ତୁ ଏବଂ ଫଳାଫଳକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଭାବରେ ଫେରାନ୍ତୁ _ ଯଦି ସ୍ଥାନାନ୍ତର > ଅଙ୍କ ସଂଖ୍ୟା, ଅଙ୍କକୁ ବିପରୀତ ଭାବରେ ଫେରାନ୍ତୁ _ >>> ସର୍କୁଲାର_ସିଫ୍ଟ (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift)) (_shift) (_shift) (_shift) (_shift) (_shift)) (_shift) (_shift) (_shift) (_shift) (_shift)) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift)\nstd::string circular_shift(long x, long shift) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n  long n = s.length();\n  if (n == 0) {\n    return \"\";\n  }\n  shift %= n;\n  if (shift < 0) {\n    shift += n;\n  }\n  if (shift == 0) {\n    return s;\n  }\n  if (shift > n) {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::string shifted_s = s.substr(n - shift) + s.substr(0, n - shift);\n  return shifted_s;\n}",
        "test": "}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
    },
    {
        "task_id": "HumanEval/66",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// କାର୍ଯ୍ୟ ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଇନପୁଟ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ କେବଳ ଉପର ଅକ୍ଷରର ସମୁଦାୟକୁ ଫେରାଇଥାଏ। ଉଦାହରଣଃ >>> digitSum((\"\")) (0) >>> digitSum((\"abAB\")) (131) >>> digitSum(\"abcCd\")) (67) >>> digitSum((\"helloE\")) (69) >>> digitSum((\"woArBld\")) (131) >>> digitSum((\"aAXaaaa\") (153)\nlong digitSum(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong digitSum(std::string s) {\n  long sum = 0;\n  for (char c : s) {\n    if (isupper(c)) {\n      sum += static_cast<long>(c);\n    }\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
    },
    {
        "task_id": "HumanEval/67",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏହି କାର୍ଯ୍ୟରେ, ଆପଣଙ୍କୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଦିଆଯିବ ଯାହା ଏକ ଫଳ ବାସ୍କେଟରେ ବିତରଣ ହୋଇଥିବା ଆପଲ୍ ଏବଂ କମଳା ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ ଏହି ବାସ୍କେଟରେ ସେଓ, କମଳା ଏବଂ ଆମ୍ବ ଫଳ ଅଛି _ ଯେଉଁ ଷ୍ଟ୍ରିଙ୍ଗ ମୋଟ କମଳା ଏବଂ ସେଓ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ ଏବଂ ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଯାହା ବାସ୍କେଟରେ ଫଳ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ, ବାସ୍କେଟରେ ଆମ୍ବ ଫଳ ସଂଖ୍ୟା ଫେରାଇଥାଏ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> ଫଳ_ ବିତରଣ (_) ((((\"୫ଟି ସେଓ ଏବଂ ୬ଟି କମଳା\"), (19)) (8) >>> ଫଳ_ ବିତରଣ (_) (((\"0ଟି ସେଓ ଏବଂ 1ଟି କମଳା\"), (3)) (2) >>> ଫଳ_ ବିତରଣ (_) (((\"2ଟି ସେଓ ଏବଂ 3ଟି କମଳା\"), (100)) (95) >>> ଫଳ_ ବିତରଣ (_) ((\"100ଟି ସେଓ ଏବଂ 1ଟି କମଳା\"), (120)) (19)\nlong fruit_distribution(std::string s, long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong fruit_distribution(std::string s, long n) {\n  long apples = 0;\n  long oranges = 0;\n  size_t apples_pos = s.find(\"apples\");\n  if (apples_pos != std::string::npos) {\n    size_t start = 0;\n    while (!isdigit(s[start])) {\n      start++;\n    }\n    apples = std::stoll(s.substr(start, apples_pos - start));\n  }\n  size_t oranges_pos = s.find(\"oranges\");\n  if (oranges_pos != std::string::npos) {\n    size_t and_pos = s.find(\"and\");\n    size_t start = and_pos + 3;\n    while (!isdigit(s[start])) {\n      start++;\n    }\n    oranges = std::stoll(s.substr(start, oranges_pos - start));\n  }\n  return n - apples - oranges;\n}",
        "test": "}\nint main() {\n    auto candidate = fruit_distribution;\n    assert(candidate((\"5 apples and 6 oranges\"), (19)) == (8));\n    assert(candidate((\"5 apples and 6 oranges\"), (21)) == (10));\n    assert(candidate((\"0 apples and 1 oranges\"), (3)) == (2));\n    assert(candidate((\"1 apples and 0 oranges\"), (3)) == (2));\n    assert(candidate((\"2 apples and 3 oranges\"), (100)) == (95));\n    assert(candidate((\"2 apples and 3 oranges\"), (5)) == (0));\n    assert(candidate((\"1 apples and 100 oranges\"), (120)) == (19));\n}\n"
    },
    {
        "task_id": "HumanEval/68",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \"ଯଦି ଏକ ଭେକ୍ଟର ଏକ ବୃକ୍ଷର ଏକ ଶାଖାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ ଯେଉଁଥିରେ ଅଣ-ନକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ନୋଡ ଅଛି, ତେବେ ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଗୋଟିଏ ନୋଡକୁ କାଢ଼ିବା ଏବଂ ଏହାକୁ ଫେରସ୍ତ କରିବା _ କାଢ଼ାଯାଇଥିବା ନୋଡଟି ସର୍ବନିମ୍ନ ଯୁଗ୍ମ ମୂଲ୍ୟ ସହିତ ନୋଡ ହେବା ଉଚିତ _ ଯଦି ସମାନ ସର୍ବନିମ୍ନ ଯୁଗ୍ମ ମୂଲ୍ୟ ସହିତ ଏକାଧିକ ନୋଡ ମିଳନ୍ତି ତେବେ ସର୍ବନିମ୍ନ ସୂଚକାଙ୍କ ଥିବା ନୋଡକୁ ଫେରସ୍ତ କରନ୍ତୁ _ ଏକ ଭେକ୍ଟରରେ କାଢ଼ାଯାଇଥିବା ନୋଡକୁ ଫେରସ୍ତ କରିବା ଉଚିତ, [smallest_value, ଏହାର ସୂଚକାଙ୍କ] _ ଯଦି କୌଣସି ଯୁଗ୍ମ ମୂଲ୍ୟ ନାହିଁ କିମ୍ବା ଦିଆଯାଇଥିବା ଭେକ୍ଟର ଖାଲି ଅଛି, ଫେରସ୍ତ କରନ୍ତୁ _ ଉଦାହରଣ 1: >>> pluck((stdvector<<(long>{(long) 4, (long) 2, (long) 3}))) (stdvector:::::::::::::: long) 2)) (long) 0 (long) 0 (long) 0 (long) 0 (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)\nstd::vector<long> pluck(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> pluck(std::vector<long> arr) {\n  if (arr.empty()) {\n    return {};\n  }\n  long min_even = -1;\n  long min_index = -1;\n  for (long i = 0; i < arr.size(); ++i) {\n    if (arr[i] % 2 == 0) {\n      if (min_even == -1 || arr[i] < min_even) {\n        min_even = arr[i];\n        min_index = i;\n      }\n    }\n  }\n  if (min_even == -1) {\n    return {};\n  }\n  return {min_even, min_index};\n}",
        "test": "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1}))) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/69",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ଅଣ-ଖାଲି ଭେକ୍ଟର ଦିଆଯାଇଛି. ଏହା ହେଉଛି ସର୍ବ ବୃହତ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଯାହା ଶୂନ ଠାରୁ ବଡ ଏବଂ ଏହାର ଫ୍ରିକ୍ୱେନ୍ସି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଠାରୁ ଅଧିକ କିମ୍ବା ସମାନ ଅଟେ. ଏକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ର ଫ୍ରିକ୍ୱେନ୍ସି ହେଉଛି ଭେକ୍ଟରରେ ଏହା କେତେ ଥର ଦେଖାଯାଏ. ଯଦି ଏପରି କୌଣସି ମୂଲ୍ୟ ନାହିଁ, ତେବେ -୧ ଫେରାନ୍ତୁ. ଉଦାହରଣଃ >>> search:{(std::vector<long>{(long) 4, (long) 1, (long) 2, (long) 3, (long) 1}))) (2) >>> search:{(std::vector<(long>1, (long) 2, (long) 2, (long) 3, (long) 3, (long) 3, (long) 4, (long) 4, (long) 4} (3)))) >>> >>> search:{(std::vector<(long>5, (long) 5, (long) 4, (long) 4, (long) 4}-1 (long)))\nlong search(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong search(std::vector<long> lst) {\n  std::map<long, long> counts;\n  for (long x : lst) {\n    counts[x]++;\n  }\n  long result = -1;\n  for (auto const& [value, count] : counts) {\n    if (value > 0 && count >= value) {\n      result = std::max(result, value);\n    }\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3, (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6, (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4, (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3, (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8, (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10, (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5, (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5, (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10, (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8, (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1, (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9, (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4, (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6, (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2, (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9, (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8, (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7, (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10, (long)10, (long)9, (long)2}))) == (-1));\n}\n"
    },
    {
        "task_id": "HumanEval/70",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଭେକ୍ଟର ଦିଆଯାଇଥିବା ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା, ଏକ ଅଜବ କ୍ରମରେ ଭେକ୍ଟର ଫେରାଇଥାଏ _ ଅଜବ ସର୍ଟ, ଯେତେବେଳେ ଆପଣ ସର୍ବନିମ୍ନ ମୂଲ୍ୟ ସହିତ ଆରମ୍ଭ କରନ୍ତି, ତାପରେ ଅବଶିଷ୍ଟ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକର ସର୍ବାଧିକ, ତାପରେ ସର୍ବନିମ୍ନ ଏବଂ ଅନ୍ୟାନ୍ୟ _ ଉଦାହରଣଃ >>> ଅଜବ_ସର୍ଟ_ଲିଷ୍ଟ _ (std::vector<long>{long) 1, (long) 2, (long) 3, (long) 4}))) (std::vector<long>{long) 1, (long) 4, (long) 2, (long) 3})) >>> ଅଜବ_ସର୍ଟ_ଲିଷ୍ଟ _ (std::vector<long>{long) 5, (long) 5, (long) 5}))) (std::vector<long>{long) 5, (long) 5, (long) 5}))) >>> ଅଜବ_ସର୍ଟ_ଲିଷ୍ଟ _ (std::vector<long>))) (std::vector<long>))\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.empty()) {\n    return {};\n  }\n  std::sort(lst.begin(), lst.end());\n  std::vector<long> result;\n  long left = 0;\n  long right = lst.size() - 1;\n  bool take_min = true;\n  while (left <= right) {\n    if (take_min) {\n      result.push_back(lst[left++]);\n    } else {\n      result.push_back(lst[right--]);\n    }\n    take_min = !take_min;\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0, (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5, (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111}))) == (std::vector<long>({(long)111111})));\n}\n"
    },
    {
        "task_id": "HumanEval/71",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ତ୍ରିଭୁଜର ତିନି ପାର୍ଶ୍ବ ର ଲମ୍ବ ଦିଆଗଲା. ତ୍ରିଭୁଜର କ୍ଷେତ୍ରଫଳକୁ 2 ଦଶମିକ ବିନ୍ଦୁରେ ଗୋଲ କରନ୍ତୁ ଯଦି ତିନୋଟି ପାର୍ଶ୍ବ ଏକ ବୈଧ ତ୍ରିଭୁଜ ଗଠନ କରନ୍ତି. ଅନ୍ୟଥା -1 ଫେରାନ୍ତୁ ତିନୋଟି ପାର୍ଶ୍ବ ଏକ ବୈଧ ତ୍ରିଭୁଜ ଗଠନ କରନ୍ତି ଯେତେବେଳେ କୌଣସି ଦୁଇଟି ପାର୍ଶ୍ବ ର ସମୁଦାୟ ତୃତୀୟ ପାର୍ଶ୍ବ ଠାରୁ ବଡ _ ଉଦାହରଣଃ >>> ତ୍ରିଭୁଜ_ କ୍ଷେତ୍ରଫଳ (), (), (), ()) (6.0f) >>> ତ୍ରିଭୁଜ_ କ୍ଷେତ୍ରଫଳ (), (), ()) (float-1))\nfloat triangle_area(long a, long b, long c) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat triangle_area(long a, long b, long c) {\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1.0f;\n  }\n  double s = static_cast<double>(a + b + c) / 2.0;\n  double area = std::sqrt(s * (s - a) * (s - b) * (s - c));\n  std::stringstream ss;\n  ss << std::fixed << std::setprecision(2) << area;\n  return std::stof(ss.str());\n}",
        "test": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0f));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18f));\n    assert(candidate((2), (2), (2)) == (1.73f));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25f));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43f));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n"
    },
    {
        "task_id": "HumanEval/72",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ବସ୍ତୁ q ଉଡିଯିବ, ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା _ ବସ୍ତୁ q ଉଡିଯିବ ଯଦି ଏହା ସନ୍ତୁଳିତ (ଏହା ଏକ ପାଲିଣ୍ଡ୍ରୋମିକ ଭେକ୍ଟର) ଏବଂ ଏହାର ଉପାଦାନଗୁଡିକର ସମୁଦାୟ ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନ ଠାରୁ କମ୍ କିମ୍ବା ସମାନ _ ଉଦାହରଣଃ >>> will_it_fly((std::vector<long>({long) 1, (long) 2}), (5)) (false) # 1+2 ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନ ଠାରୁ କମ୍, କିନ୍ତୁ ଏହା ଅସନ୍ତୁଳିତ _ >>> will_it_fly((std::vector<long>((long) 3, (long) 2, (long) 3})), (1)) (ମିଥ୍ୟା) # ଏହା ସନ୍ତୁଳିତ, କିନ୍ତୁ 3+2+3 ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନ ଠାରୁ ଅଧିକ _ >>> will_it_fly(std::vector<long>{(long>{long}3, (long) 2, (long) 3}), (9) (true) # 3+2::vector<long>3 ହେଉଛି ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନ, କିନ୍ତୁ ଏହା ସନ୍ତୁଳିତ _ (5) _ (long_true) # ଏହା ସନ୍ତୁଳିତ, କିନ୍ତୁ ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନ ଠାରୁ କମ୍ _\nbool will_it_fly(std::vector<long> q, long w) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool will_it_fly(std::vector<long> q, long w) {\n  std::vector<long> reversed_q = q;\n  std::reverse(reversed_q.begin(), reversed_q.end());\n  if (q != reversed_q) {\n    return false;\n  }\n  long sum = 0;\n  for (long val : q) {\n    sum += val;\n  }\n  return sum <= w;\n}",
        "test": "}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5)) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/73",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଭେକ୍ଟର ଆର୍ ରେ ଦିଆଯାଇଥିବା ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ, ଭେକ୍ଟରକୁ ପାଲିଣ୍ଡ୍ରୋମିକ କରିବା ପାଇଁ ସର୍ବନିମ୍ନ ସଂଖ୍ୟା ପରିବର୍ତ୍ତନ କରିବାକୁ ପଡିବ _ ପାଲିଣ୍ଡ୍ରୋମିକ ଭେକ୍ଟର ହେଉଛି ଏକ ଭେକ୍ଟର ଯାହା ସମାନ ଭାବରେ ପଛକୁ ଏବଂ ଆଗକୁ ପ read ାଯାଏ _ ଗୋଟିଏ ପରିବର୍ତ୍ତନରେ, ଆପଣ ଗୋଟିଏ ଉପାଦାନକୁ ଅନ୍ୟ ଯେକ any ଣସି ଉପାଦାନରେ ପରିବର୍ତ୍ତନ କରିପାରିବେ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> smallest_change(std::vector<long>({long) 1, (long) 2, (long) 3, (long) 5, (long) 4, (long) 7, (long) 9, (long) 6}))) (4) >>> smallest_change(std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 2, (long) 2} (1)))) >>> smallest_change(std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 1, (long) 0)))\nlong smallest_change(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong smallest_change(std::vector<long> arr) {\n  long n = arr.size();\n  long changes = 0;\n  for (long i = 0; i < n / 2; ++i) {\n    if (arr[i] != arr[n - 1 - i]) {\n      changes++;\n    }\n  }\n  return changes;\n}",
        "test": "}\nint main() {\n    auto candidate = smallest_change;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)1, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/74",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଗୋଟିଏ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭେକ୍ଟର ଗ୍ରହଣ କରେ ଏବଂ ସେହି ଭେକ୍ଟରକୁ ଫେରାଇଥାଏ ଯାହାର ସମସ୍ତ ଷ୍ଟ୍ରିଙ୍ଗ୍ ରେ ଥିବା ଅକ୍ଷର ସଂଖ୍ୟା ଅନ୍ୟ ଭେକ୍ଟର ତୁଳନାରେ କମ୍ ହୋଇଥାଏ । ଯଦି ଦୁଇଟି ଭେକ୍ଟରରେ ଅକ୍ଷର ସଂଖ୍ୟା ସମାନ ଥାଏ, ତେବେ ପ୍ରଥମ ଭେକ୍ଟରକୁ ଫେରାଇଥାଏ । ଉଦାହରଣ >>> total_match (), (std::vector (), (std::string (), (std::string (), (std::string (), (std::string (), (std::string (), (std:string (), (std:string (), (std:string (), (std:string ()) (), (std:string ()) (), (std:string (), (std:string ()) (), (std:string ()) (), (std:string ()) (), (std:string (), (std:string ()) (), (std:string ()) (), (std:string ()) (), (std:string (), (string) (string) (string) (string) (string) (string) (string) (string) (string) (string) (string (string) (string) (string) (string) (string) (string) (string) (string (string) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n  long count1 = 0;\n  for (const std::string& s : lst1) {\n    count1 += s.length();\n  }\n  long count2 = 0;\n  for (const std::string& s : lst2) {\n    count2 += s.length();\n  }\n  if (count1 <= count2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>())) == (std::vector<std::string>()));\n}\n"
    },
    {
        "task_id": "HumanEval/75",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଦିଆଯାଇଥିବା ସଂଖ୍ୟା 3 ଟି ଅଶୂର ସଂଖ୍ୟା ଗୁଡ଼ିକର ଗୁଣନ ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା ଅଟେ । ଜାଣି ରଖନ୍ତୁ ଯେ (a) 100 ରୁ କମ୍ ଅଟେ _ ଉଦାହରଣଃ >>> is_multiply_prime((30)) (true) 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_multiply_prime(long a) {\n  if (a <= 0) {\n    return false;\n  }\n  std::vector<int> primes;\n  std::vector<bool> is_prime(100, true);\n  is_prime[0] = is_prime[1] = false;\n  for (int p = 2; p * p < 100; p++) {\n    if (is_prime[p]) {\n      for (int i = p * p; i < 100; i += p)\n        is_prime[i] = false;\n    }\n  }\n  for (int p = 2; p < 100; p++) {\n    if (is_prime[p]) {\n      primes.push_back(p);\n    }\n  }\n  int count = 0;\n  for (int p1 : primes) {\n    if (a % p1 == 0) {\n      count++;\n      int rem = a / p1;\n      for (int p2 : primes) {\n        if (rem % p2 == 0) {\n          count++;\n          int rem2 = rem / p2;\n          for (int p3 : primes) {\n            if (rem2 == p3) {\n              count++;\n              if (count == 3) {\n                return true;\n              }\n              count--;\n            }\n          }\n          count--;\n        }\n      }\n      count--;\n    }\n  }\n  return false;\n}",
        "test": "}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/76",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କର କାମ ହେଉଛି ଏକ ଫଙ୍କସନ ଲେଖିବା ଯାହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଏକ ସଂଖ୍ୟା x ହେଉଛି n ର ଏକ ସରଳ ଶକ୍ତି ଏବଂ ଅନ୍ୟାନ୍ୟ କ୍ଷେତ୍ରରେ ମିଥ୍ୟା ଅଟେ. x ହେଉଛି n ର ଏକ ସରଳ ଶକ୍ତି ଯଦି n**int=x ଉଦାହରଣ ସ୍ୱରୂପଃ >>> is_simple_power((1), (4)) (true) >>> is_simple_power(2), (2)) (true) >>> is_simple_power(8), (2)) (true) >>> is_simple_power(3), (2)) (false) >>> is_simple_power(3), (1)) (false) >>> is_simple_power(5), (3)) (false)\nbool is_simple_power(long x, long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_simple_power(long x, long n) {\n  if (x == n) return true;\n  if (n == 1) return x == 1;\n  if (n == 0) return x == 0;\n  if (x == 0) return false;\n  if (x == 1) return true;\n  long power = n;\n  while (power < x) {\n    if (x % n != 0) return false;\n    if (power > x / n) return false;\n    power *= n;\n  }\n  return power == x;\n}",
        "test": "}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/77",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା a କୁ ନେଇଥାଏ ଏବଂ ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଏହି ଇନଗେଜର କିଛି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ଘନ ହୋଇଥାଏ। ଟିପ୍ପଣୀଃ ଆପଣ ଧରି ନେଇପାରିବେ ଯେ ଇନପୁଟ୍ ସର୍ବଦା ବୈଧ ଅଟେ। ଉଦାହରଣଃ >>> iscube (((1)) (true) >>> iscube (((2)) (false) >>> iscube (((-1)) (true) >>> iscube (((64)) (true) >>> iscube (((0)) (true) >>> iscube (((180)) (false)\nbool iscube(long a) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool iscube(long a) {\n  if (a == 0) return true;\n  long abs_a = std::abs(a);\n  long root = round(std::cbrt(abs_a));\n  return root * root * root == abs_a;\n}",
        "test": "}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/78",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ଫଙ୍କସନ ଲେଖିବାକୁ କୁହାଯାଇଥିଲା ଯାହା ଏକ ହେକ୍ସାଡେସିମାଲ ସଂଖ୍ୟାକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ ହେକ୍ସାଡେସିମାଲ ଅଙ୍କ ସଂଖ୍ୟା ଗଣନା କରେ ଯାହା ପ୍ରାଇମ ଅଟେ (ପ୍ରାଇମ ସଂଖ୍ୟା, କିମ୍ବା ଏକ ପ୍ରାଇମ, ହେଉଛି 1 ରୁ ବଡ ପ୍ରାକୃତିକ ସଂଖ୍ୟା ଯାହା ଦୁଇଟି ଛୋଟ ପ୍ରାକୃତିକ ସଂଖ୍ୟା ର ଉତ୍ପାଦ ନୁହେଁ) । ହେକ୍ସାଡେସିମାଲ ଅଙ୍କ ହେଉଛି 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. ପ୍ରାଇମ ସଂଖ୍ୟା ହେଉଛି 2, 3, 5, 7, 11, 13, 17,... ତେଣୁ ଆପଣଙ୍କୁ ନିମ୍ନଲିଖିତ ଅଙ୍କ ମଧ୍ୟରୁ ଏକ ସଂଖ୍ୟା ନିର୍ଣ୍ଣୟ କରିବାକୁ ପଡିବଃ 2, 3, 5, 7, B (= ଦଶମିକ 11), D (= ଦଶମିକ 13) ଟିପ୍ପଣୀଃ ଆପଣ ଧରିବା ଉଚିତ ଯେ ଇନପୁଟ୍ ସର୍ବଦା ସଠିକ୍ କିମ୍ବା ଖାଲି, ଏବଂ ପ୍ରତୀକ A,B,C,D,E,F ସର୍ବଦା ବଡ଼ ଅକ୍ଷର ଅଟେ । ଉଦାହରଣଃ >>> hex_((AB\"key\") >>> hex_(AB\"key\") >>> hex_(10\") >>> hex_(77\") >>> hex_(AB\"key\") >>> hex_(1\") hex_33\") hex_(ABC\"((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\nlong hex_key(std::string num) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong hex_key(std::string num) {\n  long count = 0;\n  std::unordered_set<char> prime_hex = {'2', '3', '5', '7', 'B', 'D'};\n  for (char c : num) {\n    if (prime_hex.count(c)) {\n      count++;\n    }\n  }\n  return count;\n}",
        "test": "}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
    },
    {
        "task_id": "HumanEval/79",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଦଶମିକ ରୂପରେ ଏକ ସଂଖ୍ୟା ଦିଆଯିବ ଏବଂ ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଏହାକୁ ବାଇନାରୀ ଫର୍ମାଟରେ ରୂପାନ୍ତର କରିବା. ଫଳନକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଫେରାଇବ, ଯେଉଁଥିରେ ପ୍ରତ୍ୟେକ ଅକ୍ଷର ଏକ ବାଇନାରୀ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରିଥାଏ. ଷ୍ଟ୍ରିଙ୍ଗ୍ ରେ ପ୍ରତ୍ୟେକ ଅକ୍ଷର '0' କିମ୍ବା '1' ହେବ. ଷ୍ଟ୍ରିଙ୍ଗ୍ ର ଆରମ୍ଭରେ ଏବଂ ଶେଷରେ ଏକ ଅତିରିକ୍ତ ଯୋଡି ଅକ୍ଷର 'db' ରହିବ. ଫର୍ମାଟ୍ ସହିତ ସାହାଯ୍ୟ କରିବାକୁ ଅତିରିକ୍ତ ଅକ୍ଷର ଅଛି. ଉଦାହରଣଃ >>> ଦଶମିକ_ବାୟିନାରୀକୁ_ବିନାରୀକୁ (((15)) (\"db1111db\") >>> ଦଶମିକ_ବାୟିନାରୀକୁ_ବାୟିନାରୀକୁ_ବିନାରୀକୁ ((32)) (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string decimal_to_binary(long decimal) {\n  if (decimal == 0) {\n    return \"db0db\";\n  }\n  std::string binaryString = \"\";\n  long temp = std::abs(decimal);\n  while (temp > 0) {\n    binaryString = (temp % 2 == 0 ? \"0\" : \"1\") + binaryString;\n    temp /= 2;\n  }\n  return \"db\" + binaryString + \"db\";\n}",
        "test": "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
    },
    {
        "task_id": "HumanEval/80",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ s ଦିଆ ଯାଇଛି. ଆପଣଙ୍କର କାମ ହେଉଛି ଷ୍ଟ୍ରିଙ୍ଗଟି hapcpp କି ନୁହେଁ ତାହା ଯାଞ୍ଚ କରିବା. ଗୋଟିଏ ଷ୍ଟ୍ରିଙ୍ଗ hapcpp ଅଟେ ଯଦି ଏହାର ଲମ୍ବ ଅତି କମରେ 3 ଏବଂ ପ୍ରତ୍ୟେକ 3 କ୍ରମିକ ଅକ୍ଷର ଅଲଗା ଅଲଗା ଅଟେ ଉଦାହରଣ ସ୍ୱରୂପ: >>> is_happy(\"a\")) (false) >>> is_happy(\"aa\")) (false) >>> is_happy(\"abcd\")) (true) >>> is_happy(\"aabb\")) (false) >>> is_happy(\"adb\")) (true) >>> is_happy(\"xyy\") (false)\nbool is_happy(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_happy(std::string s) {\n  if (s.length() < 3) {\n    return false;\n  }\n  for (size_t i = 0; i <= s.length() - 3; ++i) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "test": "}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/81",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏହା ସେମିଷ୍ଟରର ଶେଷ ସପ୍ତାହ ଏବଂ ଶିକ୍ଷକଙ୍କୁ ଛାତ୍ରଛାତ୍ରୀଙ୍କୁ ଗ୍ରେଡ୍ ଦେବାକୁ ପଡିବ _ ଶିକ୍ଷକ ଗ୍ରେଡ୍ ପାଇଁ ନିଜର ଆଲଗୋରିଦମ ତିଆରି କରୁଛନ୍ତି _ କେବଳ ସମସ୍ୟା ହେଉଛି ସେ ଗ୍ରେଡ୍ ପାଇଁ ବ୍ୟବହାର କରିଥିବା କୋଡ୍ ହଜିଯାଇଛି _ ସେ ଆପଣଙ୍କୁ କିଛି ଛାତ୍ରଙ୍କ ପାଇଁ GPA ର ଭେକ୍ଟର ଦେଇଛନ୍ତି ଏବଂ ଆପଣଙ୍କୁ ଏକ ଫଙ୍କସନ୍ ଲେଖିବାକୁ ପଡିବ ଯାହା ନିମ୍ନଲିଖିତ ଟେବୁଲ୍ ବ୍ୟବହାର କରି ଅକ୍ଷର ଗ୍ରେଡ୍ ର ଭେକ୍ଟର output କରିପାରିବ _ GPA ଅକ୍ଷର ଗ୍ରେଡ୍ 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E ଉଦାହରଣଃ >>>_grade_equation:\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string> letter_grades;\n  for (float gpa : grades) {\n    if (gpa == 4.0f) {\n      letter_grades.push_back(\"A+\");\n    } else if (gpa > 3.7f) {\n      letter_grades.push_back(\"A\");\n    } else if (gpa > 3.3f) {\n      letter_grades.push_back(\"A-\");\n    } else if (gpa > 3.0f) {\n      letter_grades.push_back(\"B+\");\n    } else if (gpa > 2.7f) {\n      letter_grades.push_back(\"B\");\n    } else if (gpa > 2.3f) {\n      letter_grades.push_back(\"B-\");\n    } else if (gpa > 2.0f) {\n      letter_grades.push_back(\"C+\");\n    } else if (gpa > 1.7f) {\n      letter_grades.push_back(\"C\");\n    } else if (gpa > 1.3f) {\n      letter_grades.push_back(\"C-\");\n    } else if (gpa > 1.0f) {\n      letter_grades.push_back(\"D+\");\n    } else if (gpa > 0.7f) {\n      letter_grades.push_back(\"D\");\n    } else if (gpa > 0.0f) {\n      letter_grades.push_back(\"D-\");\n    } else {\n      letter_grades.push_back(\"E\");\n    }\n  }\n  return letter_grades;\n}",
        "test": "}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2f}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5f}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0f, (float)0.7f}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/82",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଗୋଟିଏ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ନେଇଥାଏ ଏବଂ ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଷ୍ଟ୍ରିଙ୍ଗର ଲମ୍ବ ଏକ ଅଶୂର ସଂଖ୍ୟା ହୋଇଥାଏ କିମ୍ବା ଅନ୍ୟଥା ମିଥ୍ୟା ଉଦାହରଣ >>> prime_length((\"ହାଲୋ\")) (true) >>> prime_length((\"abcdcba\")) (true) >>> prime_length((\"କିଟନ୍ସ\")) (true) >>> prime_length((\"ଅରେଞ୍ଜ\")) (false)\nbool prime_length(std::string string) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_prime(int n) {\n  if (n <= 1) return false;\n  for (int i = 2; i * i <= n; ++i) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nbool prime_length(std::string string) {\n  return is_prime(string.length());\n}",
        "test": "}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/83",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଗଲା, 1 ସହିତ ଆରମ୍ଭ ହେଉଥିବା କିମ୍ବା ସମାପ୍ତ ହେଉଥିବା n-ଅଙ୍କ ବିଶିଷ୍ଟ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକର ଗଣନା ଫେରାଇବ.\nlong starts_one_ends(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong starts_one_ends(long n) {\n  if (n <= 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  long starts_with_one = std::pow(10, n - 1);\n  long ends_with_one = std::pow(10, n - 1);\n  long starts_and_ends_with_one = std::pow(10, n - 2);\n  return starts_with_one + ends_with_one - starts_and_ends_with_one;\n}",
        "test": "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n}\n"
    },
    {
        "task_id": "HumanEval/84",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା N ଦିଆଗଲା, ଏହାର ଅଙ୍କଗୁଡ଼ିକର ସମୁଦାୟ ସମୁଦାୟକୁ ବାଇନାରୀରେ ଫେରାଇବ. ଉଦାହରଣ >>> solve((1000)) (\"1\") >>> solve((150)) (\"110\") >>> solve((147)) (\"1100\") ଭେରିଏବଲ୍ସ: @N ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା କଣ୍ଟ୍ରାଇଣ୍ଟସ୍: 0 ≤ N ≤ 10000. ଆଉଟପୁଟ୍: ବାଇନାରୀ ସଂଖ୍ୟାର ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍\nstd::string solve(long N) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string solve(long N) {\n  if (N < 0 || N > 10000) {\n    return \"\"; // Or handle invalid input as needed\n  }\n  long sum = 0;\n  std::string s = std::to_string(N);\n  for (char c : s) {\n    sum += c - '0';\n  }\n  if (sum == 0) {\n    return \"0\";\n  }\n  std::string binary_sum = \"\";\n  while (sum > 0) {\n    binary_sum = (sum % 2 == 0 ? \"0\" : \"1\") + binary_sum;\n    sum /= 2;\n  }\n  return binary_sum;\n}",
        "test": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
    },
    {
        "task_id": "HumanEval/85",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଅସରନ୍ତି ଭେକ୍ଟର ଦିଆଯାଇଥିବା lst. ଅଙ୍କରେ ଥିବା ଯୁଗ୍ମ ଉପାଦାନଗୁଡିକୁ ଯୋଗ କରନ୍ତୁ. ଉଦାହରଣଃ >>> add((std::vector<long>({(long) 4, (long) 2, (long) 6, (long) 7}))) (2)\nlong add(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong add(std::vector<long> lst) {\n  long sum = 0;\n  for (long i = 1; i < lst.size(); i += 2) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4, (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4, (long)4, (long)6, (long)8}))) == (12));\n}\n"
    },
    {
        "task_id": "HumanEval/86",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଙ୍କସନ୍ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ନେଇଥାଏ ଏବଂ ଏହାର ଏକ ଅର୍ଡର ହୋଇଥିବା ସଂସ୍କରଣ ଫେରାଇଥାଏ. ଷ୍ଟ୍ରିଙ୍ଗ୍ ର ଅର୍ଡର ହୋଇଥିବା ସଂସ୍କରଣ ହେଉଛି ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଯେଉଁଠାରେ ସମସ୍ତ ଶବ୍ଦ (ସ୍ପେସ୍ ଦ୍ୱାରା ପୃଥକ) ଏକ ନୂତନ ଶବ୍ଦ ଦ୍ୱାରା ବଦଳାଯାଇଥାଏ ଯେଉଁଠାରେ ସମସ୍ତ ଅକ୍ଷର ASCII ମୂଲ୍ୟ ଉପରେ ଆଧାର କରି କ୍ରମାନୁସାରେ ସଜାଯାଇଛି _ ଟିପ୍ପଣୀଃ ଆପଣ ବାକ୍ୟରେ ଶବ୍ଦ ଏବଂ ଖାଲି ସ୍ଥାନର କ୍ରମାନୁସାରେ ରଖିବା ଉଚିତ୍ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> ଆଣ୍ଟି_ସଫଲ୍ (((\"ହାଏ\")) (\"ହାଏ\") >>> ଆଣ୍ଟି_ସଫଲ୍ (((\"ହାଲୋ\")) (\"ehllo\") >>> ଆଣ୍ଟି_ସଫଲ୍ (((\"ହାଲୋ ୱାର୍ଲ୍ଡ! !\") (\"ହାଲୋ !!!Wdlor\")\nstd::string anti_shuffle(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string anti_shuffle(std::string s) {\n  std::string result = \"\";\n  std::string current_word = \"\";\n  for (char c : s) {\n    if (c == ' ') {\n      std::sort(current_word.begin(), current_word.end());\n      result += current_word;\n      result += c;\n      current_word = \"\";\n    } else {\n      current_word += c;\n    }\n  }\n  std::sort(current_word.begin(), current_word.end());\n  result += current_word;\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = anti_shuffle;\n    assert(candidate((\"Hi\")) == (\"Hi\"));\n    assert(candidate((\"hello\")) == (\"ehllo\"));\n    assert(candidate((\"number\")) == (\"bemnru\"));\n    assert(candidate((\"abcd\")) == (\"abcd\"));\n    assert(candidate((\"Hello World!!!\")) == (\"Hello !!!Wdlor\"));\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hi. My name is Mister Robot. How are you?\")) == (\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n"
    },
    {
        "task_id": "HumanEval/87",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ 2D ତଥ୍ୟ ଦିଆଯାଇଛି, ଯାହାକି ଏକ ନେଷ୍ଟେଡ୍ ଭେକ୍ଟର ଭାବରେ ଅଛି, ଯାହା ମାଟ୍ରିକ୍ସ ପରି, କିନ୍ତୁ ମାଟ୍ରିକ୍ସ ପରି ନୁହେଁ, ପ୍ରତ୍ୟେକ ଧାଡ଼ିରେ ଭିନ୍ନ ସଂଖ୍ୟକ କ୍ଲୋମ୍ ରହିପାରେ _ lst, ଏବଂ integer x ଦିଆଯାଇଥିବା, ଭେକ୍ଟରରେ x ସଂଖ୍ୟକ ଖୋଜନ୍ତୁ, ଏବଂ ଟାପଲ୍ସର ରିଟର୍ଣ୍ଣ ଭେକ୍ଟର, [(x1, y1), (x2, y2) ...] ଏପରି ଯେ ପ୍ରତ୍ୟେକ ଟାପଲ୍ ହେଉଛି ଏକ କୋର୍ଡିନେଟ୍ - (row, columns), 0 ରୁ ଆରମ୍ଭ କରି _ ଆରମ୍ଭରେ କ୍ରମିକ କ୍ରମରେ ଧାଡ଼ିଗୁଡ଼ିକ ଦ୍ୱାରା ଆରମ୍ଭ କରନ୍ତୁ _ ଏହା ସହିତ, କ୍ରମିକ କ୍ରମରେ କ୍ରମିକ କ୍ରମରେ ଧାଡ଼ିଗୁଡ଼ିକ ଦ୍ୱାରା ଧାଡ଼ିଗୁଡ଼ିକର କୋର୍ଡିନେଟ୍ ସର୍ଟ କରନ୍ତୁ _ ଉଦାହରଣଃ >>> get_row(std::vector<std::vector<d>, (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n  std::vector<std::tuple<long, long>> coordinates;\n  for (long i = 0; i < lst.size(); ++i) {\n    std::vector<std::pair<long, long>> row_coords;\n    for (long j = 0; j < lst[i].size(); ++j) {\n      if (lst[i][j] == x) {\n        row_coords.push_back({j, i});\n      }\n    }\n    std::sort(row_coords.rbegin(), row_coords.rend());\n    for (const auto& coord_pair : row_coords) {\n      coordinates.emplace_back(coord_pair.second, coord_pair.first);\n    }\n  }\n  return coordinates;\n}",
        "test": "}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5, 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2, 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3, 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4, 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5, 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})), (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)})));\n}\n"
    },
    {
        "task_id": "HumanEval/88",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ନନ୍-ନଗେଟିଭ୍ ଇଣ୍ଟେଜର ଭେକ୍ଟର ଦିଆଯାଇଥାଏ, ସର୍ଟ କରିବା ପରେ ଦିଆଯାଇଥିବା ଭେକ୍ଟରର ଏକ କୋକ୍ପି ଫେରାଇ ଦିଅନ୍ତୁ, ଯଦି ସମୁଦାୟ (ପ୍ରଥମ ଇଣ୍ଡେକ୍ସ ମୂଲ୍ୟ, ଶେଷ ଇଣ୍ଡେକ୍ସ ମୂଲ୍ୟ) ଅଙ୍କକୋଷୀୟ ହୋଇଥାଏ ତେବେ ଆପଣ ଦିଆଯାଇଥିବା ଭେକ୍ଟରକୁ ଉର୍ଦ୍ଧମାନ କ୍ରମରେ ସର୍ଟ କରିବେ, କିମ୍ବା ଯଦି ସମୁଦାୟ (ପ୍ରଥମ ଇଣ୍ଡେକ୍ସ ମୂଲ୍ୟ, ଶେଷ ଇଣ୍ଡେକ୍ସ ମୂଲ୍ୟ) ଯୁଗ୍ମ ହୋଇଥାଏ ତେବେ ଏହାକୁ ତଳୁ କ୍ରମରେ ସର୍ଟ କରିବେ _ ଟିପ୍ପଣୀଃ * ଦିଆଯାଇଥିବା ଭେକ୍ଟରକୁ ପରିବର୍ତ୍ତନ କରନ୍ତୁ ନାହିଁ _ ଉଦାହରଣଃ >>> sort_array (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (\nstd::vector<long> sort_array(std::vector<long> array) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> sort_array(std::vector<long> array) {\n  std::vector<long> sorted_array = array;\n  if (sorted_array.empty()) {\n    return sorted_array;\n  }\n  long first = 0;\n  long last = sorted_array.size() - 1;\n  if ((first + last) % 2 != 0) {\n    std::sort(sorted_array.begin(), sorted_array.end());\n  } else {\n    std::sort(sorted_array.rbegin(), sorted_array.rend());\n  }\n  return sorted_array;\n}",
        "test": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2, (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15, (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0, (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21, (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14, (long)11})));\n}\n"
    },
    {
        "task_id": "HumanEval/89",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଙ୍କସନ୍ encrypt ତିଆରି କରନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଏକ ଆର୍ଗୁମେଣ୍ଟ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ ଆଲଫାବେଟ୍ ଘୂର୍ଣ୍ଣନ ସହିତ ଏକ ଏନକ୍ରିପ୍ଟ ହୋଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗକୁ ଫେରାଇଥାଏ। ଆଲଫାବେଟ୍ ଏପରି ଭାବରେ ଘୂର୍ଣ୍ଣନ କରାଯିବା ଉଚିତ ଯେ ଅକ୍ଷରଗୁଡିକ ଦୁଇଗୁଣିତ ଦୁଇ ସ୍ଥାନକୁ ଘୁଞ୍ଚିଯାଏ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> encrypt((\"hi\")) (\"lm\") >>> encrypt((\"asdfghjkl\")) (\"ewhjklnop\") >>> encrypt(\"gf\")) (\"kj\") >>> encrypt((\"et\")) (\"ix\")\nstd::string encrypt(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string encrypt(std::string s) {\n  std::string encrypted_s = \"\";\n  int shift = 2 * 2;\n  for (char c : s) {\n    if (isalpha(c)) {\n      char base = islower(c) ? 'a' : 'A';\n      encrypted_s += static_cast<char>((c - base + shift) % 26 + base);\n    } else {\n      encrypted_s += c;\n    }\n  }\n  return encrypted_s;\n}",
        "test": "}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n"
    },
    {
        "task_id": "HumanEval/90",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ଭେକ୍ଟର ଦିଆ ଯାଇଛି. ଏକ ଫଙ୍କସନ next_smallest ଲେଖନ୍ତୁ ଯାହା ଭେକ୍ଟରର ଦ୍ବିତୀୟ କ୍ଷୁଦ୍ରତମ ଉପାଦାନକୁ ଫେରାଇବ. ଯଦି ଏପରି କୌଣସି ଉପାଦାନ ନଥାଏ ତେବେ None ଫେରାଇବ. >>> next_smallest:st:vector<long>{long> (long) 1, (long) 2, (long) 3, (long) 4, (long) 5}))) 2 >>> next_smallest:st:vector<long>{long) 5, (long) 1, (long) 4, (long) 3, (long) 2))) >>> 2 next_smallest:st:vector<long>(long))) st:nullopt >>> next_smallest:st:vector<long>{long} 1, (long) 1))) st:nullopt >>> next_smallest:st:vector<long>{long} 1, (long) 1))) st:nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n\nstd::optional<long> next_smallest(std::vector<long> lst) {\n  if (lst.size() < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n  if (lst[0] == lst[1]) {\n    return std::nullopt;\n  }\n  return lst[1];\n}",
        "test": "}\nint main() {\n    auto candidate = next_smallest;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == 2);\n    assert(candidate((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2}))) == 2);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)0}))) == 1);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)-35, (long)34, (long)12, (long)-45}))) == -35);\n}\n"
    },
    {
        "task_id": "HumanEval/91",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ଶବ୍ଦ ଶୃଙ୍ଖଳ ଦିଆଯିବ, ଏବଂ ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ବିରକ୍ତିକର ସଂଖ୍ୟା ଗଣନା କରିବା । ଏକ ବିରକ୍ତିକର ହେଉଛି ଏକ ବାକ୍ୟ ଯାହା \"I\" ଶବ୍ଦ ସହିତ ଆରମ୍ଭ ହୁଏ । ବାକ୍ୟଗୁଡ଼ିକ '.', '?' କିମ୍ବା '! ' ଦ୍ୱାରା ସୀମିତ । ଉଦାହରଣ ସ୍ୱରୂପଃ >>> is_bored((\"ହାଲୋ ୱାର୍ଲ୍ଡ\")) (0) >>> is_bored((\"ଆକାଶ ନୀଳ । ସୂର୍ଯ୍ୟ ଉଜ୍ଜ୍ୱଳ । ମୁଁ ଏହି ପାଣିପାଗକୁ ଭଲ ପାଏ\")) (1)\nlong is_bored(std::string S) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong is_bored(std::string S) {\n  long boredom_count = 0;\n  std::string current_sentence = \"\";\n  for (char c : S) {\n    current_sentence += c;\n    if (c == '.' || c == '?' || c == '!') {\n      std::stringstream ss(current_sentence);\n      std::string first_word;\n      ss >> first_word;\n      if (first_word == \"I\") {\n        boredom_count++;\n      }\n      current_sentence = \"\";\n    }\n  }\n  return boredom_count;\n}",
        "test": "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/92",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା 3ଟି ସଂଖ୍ୟା ଗ୍ରହଣ କରେ. ଯଦି ଗୋଟିଏ ସଂଖ୍ୟା ଅନ୍ୟ ଦୁଇଟିର ସମୁଦାୟ ସହିତ ସମାନ ହୋଇଥାଏ ଏବଂ ସମସ୍ତ ସଂଖ୍ୟା ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ହୋଇଥାଏ ତେବେ ଏହା ସତ୍ୟ ଫେରାଇଥାଏ _ ଅନ୍ୟ ସମସ୍ତ କ୍ଷେତ୍ରରେ ଏହା ଭୁଲ ଫେରାଇଥାଏ _ ଉଦାହରଣ >>> any_int (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float)) (float) (float) (float)) (float) (float) (float) (float) (float) (float)) (float) (float) (float) (float)) (float) (float) (float) (float) (float) (float)) (float) (float) (float) (float)) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float (float) (float) (float (float)) (float) (float (float) (float (float) (float (float) (float (float)) (float (float) (float) (float (float) (float (float) (float (float)) (float (float) (float (float) (float) (float (float) (flo) (flo) (flo) (flo) (float (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo\nbool any_int(float x, float y, float z) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool any_int(float x, float y, float z) {\n  if (std::floor(x) != x || std::floor(y) != y || std::floor(z) != z) {\n    return false;\n  }\n  long ix = static_cast<long>(x);\n  long iy = static_cast<long>(y);\n  long iz = static_cast<long>(z);\n  return (ix == iy + iz) || (iy == ix + iz) || (iz == ix + iy);\n}",
        "test": "}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5f), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5f), (float(5)), (3.5f)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2f), (2.2f), (2.2f)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0f), (float(4)), (float(7))) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/93",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଙ୍କସନ୍ ଲେଖନ୍ତୁ ଯାହା ଏକ ବାର୍ତ୍ତା ଗ୍ରହଣ କରେ, ଏବଂ ଏପରି ଭାବରେ ଏନକୋଡ୍ କରେ ଯାହା ସମସ୍ତ ଅକ୍ଷରର କେସ୍ ବଦଳାଇଥାଏ, ବାର୍ତ୍ତାରେ ଥିବା ସମସ୍ତ ସ୍ୱରଗୁଡ଼ିକୁ ଇଂରାଜୀ ଅକ୍ଷରରେ ସେହି ସ୍ୱରଠାରୁ 2 ଟି ସ୍ଥାନ ଆଗରେ ଥିବା ଅକ୍ଷର ସହିତ ବଦଳାଇଥାଏ _ କେବଳ ଅକ୍ଷର ଧରନ୍ତୁ _ ଉଦାହରଣଃ >>> encode((\"test\")) (\"TGST\") >>> encode((\"This is a message\")) (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string encode(std::string message) {\n  std::string encoded_message = \"\";\n  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  std::map<char, char> vowel_map = {\n      {'a', 'c'}, {'e', 'g'}, {'i', 'k'}, {'o', 'q'}, {'u', 'w'},\n      {'A', 'C'}, {'E', 'G'}, {'I', 'K'}, {'O', 'Q'}, {'U', 'W'}};\n  for (char c : message) {\n    if (isalpha(c)) {\n      char swapped_case = islower(c) ? toupper(c) : tolower(c);\n      if (vowels.count(c)) {\n        encoded_message += vowel_map[c];\n      } else {\n        encoded_message += swapped_case;\n      }\n    } else {\n      encoded_message += c;\n    }\n  }\n  return encoded_message;\n}",
        "test": "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
    },
    {
        "task_id": "HumanEval/94",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ଭେକ୍ଟର ଦିଆଯାଇଛି, ଆପଣଙ୍କୁ ଏହାର ସର୍ବବୃହତ ପ୍ରାଥମିକ ମୂଲ୍ୟ ଖୋଜିବାକୁ ହେବ ଏବଂ ଏହାର ଅଙ୍କଗୁଡିକର ସମୁଦାୟ ଫେରାଇବାକୁ ହେବ _ ଉଦାହରଣଃ >>> skjkasdkd{\\\\displaystyle \\\\mathbb {\\\\mathbb {D} } }, (long) (long) (long) (long)), (long) (long) (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long)), (long) (long)), (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long)), (long) (long) (long)), (long) (long) (long) (long)), (long) (long) (long) (long) (long)), (long) (long) (long) (long) (long) (long) (long)), (long) (long) (long) (long) (long) (long) (long) (long)), (long) (long) (long) (long) (long) (long) (long) (long) (long)), (long) (long) (long) (long) (long) (long) (long) (long) (long)), (long) (long) (long) (long) (long) (long)), (long) (long) (long) (long) (long) (long) (long) (long)),long) (long) (long) (long) (long) (long) (long)), long) (long) (long) (long) (long) (long) (long) (long) (long)), long) (long) (long) (long) (long) (long) (long) (long)), long) (long) (long) (\nlong skjkasdkd(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  for (long i = 2; i * i <= n; ++i) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nlong sum_digits(long n) {\n  long sum = 0;\n  std::string s = std::to_string(n);\n  for (char c : s) {\n    sum += c - '0';\n  }\n  return sum;\n}\n\nlong skjkasdkd(std::vector<long> lst) {\n  long largest_prime = -1;\n  for (long num : lst) {\n    if (num > largest_prime && is_prime(num)) {\n      largest_prime = num;\n    }\n  }\n  if (largest_prime == -1) {\n    return 0;\n  }\n  return sum_digits(largest_prime);\n}",
        "test": "}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191}))) == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456, (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127, (long)97, (long)8192}))) == (10));\n}\n"
    },
    {
        "task_id": "HumanEval/95",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ମାନଚିତ୍ର ଦିଆଯାଇଥିବା, ଯଦି ସମସ୍ତ କୀ ଛୋଟ ଅକ୍ଷରରେ ଥିବା ବା ସମସ୍ତ କୀ ବଡ଼ ଅକ୍ଷରରେ ଥିବା ତେବେ true ଫେରାଇବ, ନଚେତ୍ false ଫେରାଇବ _ ଫଳନଟି false ଫେରାଇବ ତେବେ ଦିଆଯାଇଥିବା ମାନଚିତ୍ରଟି ଖାଲି ରହିବ _ ଉଦାହରଣ: >>> check_dict_case, {\"}, {\"b\", \"apple\"}, {\"b\", \"banana\"}}))) (true) >>> check_dict_case, {\"}, {\"}, \"apple\" ({\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, {\"}, \"}, \"}, \"}, \"}, \"}, \" (ଆଉଦାଖଣ୍ଡର ଏକ ମାନଚିତ୍ରରେ ଥିବା ମାନଚିତ୍ରଟି ହେଉଛି \"ଆପଣଙ୍କ ମାନଚିତ୍ରରେ ଥିବା ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ \"_\nbool check_dict_case(std::map<std::string,std::string> dict) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_dict_case(std::map<std::string,std::string> dict) {\n  if (dict.empty()) {\n    return false;\n  }\n  bool first_key_lower = false;\n  bool first_key_upper = false;\n  auto it = dict.begin();\n  if (!it->first.empty() && islower(it->first[0])) {\n    first_key_lower = true;\n  } else if (!it->first.empty() && isupper(it->first[0])) {\n    first_key_upper = true;\n  } else {\n    return false;\n  }\n  for (const auto& pair : dict) {\n    if (pair.first.empty()) {\n      return false;\n    }\n    bool current_lower = true;\n    bool current_upper = true;\n    for (char c : pair.first) {\n      if (!islower(c)) {\n        current_lower = false;\n      }\n      if (!isupper(c)) {\n        current_upper = false;\n      }\n    }\n    if (first_key_lower && !current_lower) {\n      return false;\n    }\n    if (first_key_upper && !current_upper) {\n      return false;\n    }\n    if (!first_key_lower && !first_key_upper) {\n        if (current_lower) first_key_lower = true;\n        else if (current_upper) first_key_upper = true;\n        else return false;\n    }\n  }\n  return first_key_lower || first_key_upper;\n}",
        "test": "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/96",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଳନକୁ କାର୍ଯ୍ୟକାରୀ କରନ୍ତୁ ଯାହା ଏକ ନନ୍-ନଗେଟିଭ୍ ଇଣ୍ଟେଜର ନେଇଥାଏ ଏବଂ ପ୍ରଥମ n ଇଣ୍ଟେଜରର ଭେକ୍ଟର ଫେରାଇଥାଏ ଯାହା ପ୍ରାଇମ ନମ୍ବର ଏବଂ n ରୁ ଛୋଟ ହୋଇଥାଏ । ଉଦାହରଣ ସ୍ୱରୂପଃ >>> count_up_to((5)) (std::vector<long>{(long) 2, (long) 3})) >>> count_up_to(11)) (std::vector<long>{(long) 2, (long) 3, (long) 5, (long) 7}) >>> count_up_to(0)) (std::vector<long>)) >>> count_up_to(20)) (std::vector<long>{(2, (long) 3, (long) 5, (long) 7, (long) 11, (long) 13, (long) 17, (long) 19} >>> count_up_1) (std::vector<long>>1 to(8): (std::vector<long>11, (long) 3, (long) 5, (long) 17)) (long) 1, (long) 2, (long) (long))\nstd::vector<long> count_up_to(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_prime(long num) {\n  if (num <= 1) return false;\n  for (long i = 2; i * i <= num; ++i) {\n    if (num % i == 0) return false;\n  }\n  return true;\n}\n\nstd::vector<long> count_up_to(long n) {\n  std::vector<long> primes;\n  if (n <= 2) {\n    return primes;\n  }\n  for (long i = 2; i < n; ++i) {\n    if (is_prime(i)) {\n      primes.push_back(i);\n    }\n  }\n  return primes;\n}",
        "test": "}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
    },
    {
        "task_id": "HumanEval/97",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଫଳନକୁ ପୂର୍ଣ୍ଣ କରନ୍ତୁ ଯାହା ଦୁଇଟି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଗ୍ରହଣ କରେ ଏବଂ ସେମାନଙ୍କର ଏକକ ଅଙ୍କଗୁଡ଼ିକର ଉତ୍ପାଦ ଫେରାଇଥାଏ _ ଧରନ୍ତୁ ଇନପୁଟ୍ ସର୍ବଦା ବୈଧ _ ଉଦାହରଣଃ >>> ଗୁଣନ (((148), (412)) (16) >>> ଗୁଣନ (((19), (28)) (72) >>> ଗୁଣନ (((2020), (1851)) (0) >>> ଗୁଣନ (((14), (-15)) (20)\nlong multiply(long a, long b) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong multiply(long a, long b) {\n  long unit_a = std::abs(a) % 10;\n  long unit_b = std::abs(b) % 10;\n  return unit_a * unit_b;\n}",
        "test": "}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/98",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଷ୍ଟ୍ରିଙ୍ଗ s ଦିଆଗଲା, ସମ ସୂଚକାଙ୍କରେ ଥିବା ବଡ଼ ଅକ୍ଷର ସ୍ୱର ସଂଖ୍ୟା ଗଣନା କରନ୍ତୁ. ଉଦାହରଣ ସ୍ୱରୂପଃ >>> count_upper (((\"aBCdEf\")) (1) >>> count_upper (((\"abcdefg\")) (0) >>> count_upper (((\"dBBE\")) (0)\nlong count_upper(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_upper(std::string s) {\n  long count = 0;\n  std::unordered_set<char> upper_vowels = {'A', 'E', 'I', 'O', 'U'};\n  for (long i = 0; i < s.length(); ++i) {\n    if (i % 2 == 0 && upper_vowels.count(s[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "test": "}\nint main() {\n    auto candidate = count_upper;\n    assert(candidate((\"aBCdEf\")) == (1));\n    assert(candidate((\"abcdefg\")) == (0));\n    assert(candidate((\"dBBE\")) == (0));\n    assert(candidate((\"B\")) == (0));\n    assert(candidate((\"U\")) == (1));\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"EEEE\")) == (2));\n}\n"
    },
    {
        "task_id": "HumanEval/99",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହାକି ଏକ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ମୂଲ୍ୟ (ଷ୍ଟ୍ରିଙ୍ଗ) ଗ୍ରହଣ କରେ ଏବଂ ଏହାର ନିକଟତମ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ _ ଯଦି ସଂଖ୍ୟାଟି ଦୁଇଟି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଠାରୁ ସମାନ ଦୂରତାରେ ଥାଏ, ତେବେ ଏହାକୁ ଶୂନରୁ ଦୂରେଇ ଘୁଞ୍ଚାଇ ଦିଅନ୍ତୁ _ ଉଦାହରଣ >>> ନିକଟତମ_ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା (((\"10\")) (10) >>> ନିକଟତମ_ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା (((\"15.3\")) ନୋଟ୍ (15): ଶୂନରୁ ଦୂରେଇ ଘୁଞ୍ଚାଇବାର ଅର୍ଥ ହେଉଛି ଯଦି ଦିଆଯାଇଥିବା ସଂଖ୍ୟା ଦୁଇଟି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଠାରୁ ସମାନ ଦୂରତାରେ ଥାଏ, ତେବେ ଆପଣ ଫେରାଇଥିବା ସଂଖ୍ୟାଟି ଶୂନରୁ ଦୂରରେ ଥିବା ସଂଖ୍ୟା _ ଉଦାହରଣ ସ୍ୱରୂପ ନିକଟତମ_ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା (((\"14.5\") ଫେରାଇବ 15 ଏବଂ ନିକଟତମ_ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା (((-14.5\") ଫେରାଇବ -15.\nlong closest_integer(std::string value) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong closest_integer(std::string value) {\n  double num = std::stod(value);\n  if (num >= 0) {\n    if (num - std::floor(num) <= 0.5) {\n      return static_cast<long>(std::floor(num));\n    } else {\n      return static_cast<long>(std::ceil(num));\n    }\n  } else {\n    if (std::ceil(num) - num <= 0.5) {\n      return static_cast<long>(std::ceil(num));\n    } else {\n      return static_cast<long>(std::floor(num));\n    }\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/100",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆ ଯାଇ, ଆପଣଙ୍କୁ ପଥରର n ସ୍ତର ଏକ ଗଦା କରିବାକୁ ପଡିବ _ ପ୍ରଥମ ସ୍ତରରେ n ପଥର ଅଛି _ ପରବର୍ତ୍ତୀ ସ୍ତରରେ ପଥର ସଂଖ୍ୟା ହେଉଛି: - ପରବର୍ତ୍ତୀ ଅଙ୍କ ଯଦି n ଅଙ୍କ _ - ପରବର୍ତ୍ତୀ ଯୁଗ୍ମ ସଂଖ୍ୟା ଯଦି n ଯୁଗ୍ମ _ ଏକ ଭେକ୍ଟରରେ ପ୍ରତ୍ୟେକ ସ୍ତରରେ ପଥର ସଂଖ୍ୟା ଫେରାନ୍ତୁ, ଯେଉଁଠାରେ ସୂଚକାଙ୍କ i ରେ ଥିବା ଉପାଦାନ ସ୍ତରରେ ପଥର ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ (i+1) _ ଉଦାହରଣଃ >>> make_a_pile(3)) (std::vector<long>{long) 3, (long) 5, (long) 7}))\nstd::vector<long> make_a_pile(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> pile;\n  long current_stones = n;\n  for (int i = 0; i < n; ++i) {\n    pile.push_back(current_stones);\n    if (current_stones % 2 != 0) {\n      current_stones += 2;\n    } else {\n      current_stones += 2;\n    }\n  }\n  return pile;\n}",
        "test": "}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n}\n"
    },
    {
        "task_id": "HumanEval/101",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ଶବ୍ଦ ଶୃଙ୍ଖଳ ଦିଆଯିବ ଯାହା କମା କିମ୍ବା ସ୍ପେସ୍ ଦ୍ୱାରା ପୃଥକ ହେବ । ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଶବ୍ଦକୁ ଶବ୍ଦ ମଧ୍ୟରେ ବିଭକ୍ତ କରିବା ଏବଂ ଶବ୍ଦଗୁଡ଼ିକର ଏକ ଭେକ୍ଟର ଫେରାଇବା _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> words_string (((\"Hi, my name is John\")) (std::vector<std::string>({(std::string) \"Hi\", (std::string) \"my\", (std::string) \"name\", (std::string) \"is\", (std::string) \"John\"}) >>> words_string (((\"One, two, three, four, five, six\")) (std::vector<std::string>{(stdstring) \"One\", (std::string) \"two\", (std::string) \"three\", (std::string) \"four\", (std::string) \"five\", (std::string) \"six\"})\nstd::vector<std::string> words_string(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> words_string(std::string s) {\n  std::vector<std::string> words;\n  std::string current_word;\n  for (char c : s) {\n    if (c == ',' || c == ' ') {\n      if (!current_word.empty()) {\n        words.push_back(current_word);\n        current_word = \"\";\n      }\n    } else {\n      current_word += c;\n    }\n  }\n  if (!current_word.empty()) {\n    words.push_back(current_word);\n  }\n  return words;\n}",
        "test": "}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"gamal\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/102",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏହି ଫଙ୍କସନ ଦୁଇଟି ସକାରାତ୍ମକ ସଂଖ୍ୟା x ଓ y ନେଇଥାଏ ଏବଂ [x, y] ଅନ୍ତର୍ଭୁକ୍ତ ରେ ଥିବା ସବୁଠାରୁ ବଡ ସମ ସଂଖ୍ଯା ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ । ଯଦି ଏପରି କୌଣସି ସଂଖ୍ୟା ନଥାଏ, ତେବେ ଫଙ୍କସନ -1 ଫେରାଇଥାଏ । ଉଦାହରଣ ସ୍ୱରୂପ: >>> choose_num((12), (15)) (14) >>> choose_num((13), (12)) (-1)\nlong choose_num(long x, long y) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong choose_num(long x, long y) {\n  if (x > y) {\n    return -1;\n  }\n  long end = y;\n  if (end % 2 != 0) {\n    end--;\n  }\n  if (end < x) {\n    return -1;\n  }\n  return end;\n}",
        "test": "}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
    },
    {
        "task_id": "HumanEval/103",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// ଆପଣଙ୍କୁ ଦୁଇଟି ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଏବଂ m ଦିଆ ଯାଇଛି, ଏବଂ ଆପଣଙ୍କର କାମ ହେଉଛି n ରୁ m ପର୍ଯ୍ୟନ୍ତ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଗୁଡିକର ହାରାହାରି ଗଣନା କରିବା (n ଏବଂ m ଅନ୍ତର୍ଭୁକ୍ତ କରି) । ଉତ୍ତରକୁ ନିକଟତମ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ ଗୋଲ କରନ୍ତୁ ଏବଂ ଏହାକୁ ବାଇନାରୀକୁ ରୂପାନ୍ତର କରନ୍ତୁ । ଯଦି n m ରୁ ବଡ, ତେବେ -1 ଫେରାନ୍ତୁ _ ଉଦାହରଣଃ >>> ଗୋଲ_ଅବଗ_ (), (5)) \"0b11\" >>> ଗୋଲ_ଅବଗ_ (), (5)) -1 >>> ଗୋଲ_ଅବଗ_ (), (20)) \"0b1111\" >>> ଗୋଲ_ଅବଗ_ (), (20)) \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;\n    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }\n    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nUnion_std_string_long rounded_avg(long n, long m) {\n  if (n > m) {\n    return Union_std_string_long(-1);\n  }\n  double sum = 0;\n  for (long i = n; i <= m; ++i) {\n    sum += i;\n  }\n  double avg = sum / (m - n + 1);\n  long rounded_avg_long = std::round(avg);\n  if (rounded_avg_long == 0) {\n    return Union_std_string_long(\"0b0\");\n  }\n  std::string binary_string = \"\";\n  long temp = std::abs(rounded_avg_long);\n  while (temp > 0) {\n    binary_string = (temp % 2 == 0 ? \"0\" : \"1\") + binary_string;\n    temp /= 2;\n  }\n  return Union_std_string_long(\"0b\" + binary_string);\n}",
        "test": "}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
    },
    {
        "task_id": "HumanEval/104",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଭେକ୍ଟର ଧନାତ୍ମକ ସଂଖ୍ଯା x ଦିଆୟାଇଥିବା ବେଳେ, ସମସ୍ତ ଉପାଦାନର ଏକ ସର୍ଟ ଭେକ୍ଟର ଫେରାଇଥାଏ ଯେଉଁଥିରେ କୌଣସି ଯୁଗ୍ମ ଅଙ୍କ ନଥାଏ. ଟିପ୍ପଣୀ: ଫେରାଇଥିବା ଭେକ୍ଟରକୁ ବୃଦ୍ଧି କ୍ରମରେ ସର୍ଟ କରାଯିବା ଉଚିତ. ଉଦାହରଣ ସ୍ବରୂପ: >>> unique_digits(std::vector<long>({long) 15, (long) 33, (long) 1422, (long) 1}))) (std::vector<long>{(long) 1, (long) 15, (long) 33})) >>> unique_digits(std::vector<long>{(long) 152, (long) 323, (long) 1422, (long) 10}))) (std::vector<long>(long))\nstd::vector<long> unique_digits(std::vector<long> x) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool has_even_digit(long n) {\n  std::string s = std::to_string(n);\n  for (char c : s) {\n    if ((c - '0') % 2 == 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nstd::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  for (long val : x) {\n    if (!has_even_digit(val)) {\n      result.push_back(val);\n    }\n  }\n  std::sort(result.begin(), result.end());\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n"
    },
    {
        "task_id": "HumanEval/105",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଭେକ୍ଟର ସମୁଦାୟ ସଂଖ୍ୟାକୁ ଦେଇ, 1 ରୁ 9 ସମେତ ଥିବା ସଂଖ୍ୟାଗୁଡ଼ିକୁ ସର୍ଟ କରନ୍ତୁ, ଫଳସ୍ୱରୂପ ଭେକ୍ଟରକୁ ଓଲଟାନ୍ତୁ, ଏବଂ ତାପରେ ପ୍ରତ୍ୟେକ ଅଙ୍କକୁ ଏହାର ଅନୁରୂପ ନାମ ସହିତ \"ଏକ\", \"ଦୁଇ\", \"ତିନି\", \"ଚାରି\", \"ପାଞ୍ଚ\", \"ଛଅ\", \"ସାତ\", \"ଆଠ\", \"ନଅ\" ରୁ ବଦଳାନ୍ତୁ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> by_length, (long) 1, (long) 1, (long) 4, (long) 5, (long) 8, (long) 2, (long) 3}))) (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string)))))) (long_string, (long_string, (long_string)) (long_string, (long_string, (long_string)) (long_string, (long_string, (long_string)) (long_string, (long_string, (long)) (long_string, (long)) (long_string, (long)) (long)) (long_string, (long)) (long)) (long_string, (long)) (long)) (long)) (long)) (long)) (long_long)) (long)) (long)) (long)) (long_long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long))\nstd::vector<std::string> by_length(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> by_length(std::vector<long> arr) {\n  std::vector<long> valid_numbers;\n  std::vector<std::string> result;\n  std::map<long, std::string> number_names = {\n      {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"},\n      {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n  for (long num : arr) {\n    if (num >= 1 && num <= 9) {\n      valid_numbers.push_back(num);\n    }\n  }\n  std::sort(valid_numbers.begin(), valid_numbers.end());\n  std::reverse(valid_numbers.begin(), valid_numbers.end());\n  for (long num : valid_numbers) {\n    result.push_back(number_names[num]);\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3, (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9, (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"Eight\", (std::string)\"Four\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/106",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଫଳନ f କୁ କାର୍ଯ୍ୟକାରୀ କରନ୍ତୁ ଯାହା n କୁ ଏକ ପାରାମିଟର ଭାବରେ ଗ୍ରହଣ କରେ, ଏବଂ n ଆକାରର ଏକ ଭେକ୍ଟର ଫେରାଇଥାଏ, ଯେପରିକି ସୂଚକାଙ୍କ i ରେ ଥିବା ଉପାଦାନର ମୂଲ୍ୟ i ର କାରକ ଅଟେ ଯଦି i ସମାନ କିମ୍ବା 1 ରୁ i ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାର ସମୁଦାୟ ଅନ୍ୟଥା _ i 1 ରୁ ଆରମ୍ଭ ହୁଏ _ i ର କାରକ ହେଉଛି 1 ରୁ i ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାର ଗୁଣନ _ ଉଦାହରଣଃ >>> f ({}) (std::vector<long>{} (long) 1, (long) 2, (long) 6, (long) 24, (long) 15}))\nstd::vector<long> f(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(long n) {\n  std::vector<long> result;\n  for (long i = 1; i <= n; ++i) {\n    if (i % 2 == 0) {\n      long factorial = 1;\n      for (long j = 1; j <= i; ++j) {\n        factorial *= j;\n      }\n      result.push_back(factorial);\n    } else {\n      long sum = 0;\n      for (long j = 1; j <= i; ++j) {\n        sum += j;\n      }\n      result.push_back(sum);\n    }\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = f;\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15, (long)720, (long)28})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)2, (long)6})));\n}\n"
    },
    {
        "task_id": "HumanEval/107",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଗଲା, ଏକ ଟାପଲ୍ ଫେରାଇଥାଏ ଯେଉଁଥିରେ ଅନ୍ତର୍ଭୁକ୍ତ ଥିବା ସମ ଏବଂ ଅଜଣା ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପଲିଣ୍ଡ୍ରୋମ୍ ସଂଖ୍ୟା ଥାଏ । ଉଦାହରଣ 1: >>> even_odd_palindrome (((3)) (std::make_tuple (((1, 2)) ବ୍ୟାଖ୍ୟା: ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପଲିଣ୍ଡ୍ରୋମ୍ ହେଉଛି 1, 2, 3. ସେଥିମଧ୍ୟରୁ ଗୋଟିଏ ସମ ଏବଂ ଦୁଇଟି ଅଜଣା ଅଟେ । ଉଦାହରଣ 2: >>> even_odd_palindrome (((12)) (std::make_tuple (((4, 6)) ବ୍ୟାଖ୍ୟା: ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପଲିଣ୍ଡ୍ରୋମ୍ ହେଉଛି 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ସେଥିମଧ୍ୟରୁ ଚାରିଟି ସମ ଏବଂ ସେଥିମଧ୍ୟରୁ 6 ଅଜଣା ଅଟେ । ଟିପ୍ପଣୀ: 1 <= n = 10 ^ 3 < 3 2. ଫେରସ୍ତ ହୋଇଥିବା ଟାପଲ୍ ଯଥାକ୍ରମେ ସମ ଏବଂ ଅଜଣା ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପଲିଣ୍ଡ୍ରୋମ୍ ସଂଖ୍ୟା ଅଛି ।\nstd::tuple<long, long> even_odd_palindrome(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_palindrome(long num) {\n  std::string s = std::to_string(num);\n  std::string reversed_s = s;\n  std::reverse(reversed_s.begin(), reversed_s.end());\n  return s == reversed_s;\n}\n\nstd::tuple<long, long> even_odd_palindrome(long n) {\n  long even_count = 0;\n  long odd_count = 0;\n  for (long i = 1; i <= n; ++i) {\n    if (is_palindrome(i)) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n  }\n  return std::make_tuple(even_count, odd_count);\n}",
        "test": "}\nint main() {\n    auto candidate = even_odd_palindrome;\n    assert(candidate((123)) == (std::make_tuple(8, 13)));\n    assert(candidate((12)) == (std::make_tuple(4, 6)));\n    assert(candidate((3)) == (std::make_tuple(1, 2)));\n    assert(candidate((63)) == (std::make_tuple(6, 8)));\n    assert(candidate((25)) == (std::make_tuple(5, 6)));\n    assert(candidate((19)) == (std::make_tuple(4, 6)));\n    assert(candidate((9)) == (std::make_tuple(4, 5)));\n    assert(candidate((1)) == (std::make_tuple(0, 1)));\n}\n"
    },
    {
        "task_id": "HumanEval/108",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଙ୍କସନ count_nums ଲେଖନ୍ତୁ ଯାହା ଏକ ଭେକ୍ଟର ନେଇଥାଏ ଏବଂ ସେହି ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ ଯାହାର ଅଙ୍କ ସମୁଦାୟ > 0 ହୋଇଥାଏ । ଯଦି କୌଣସି ସଂଖ୍ୟା ନକାରାତ୍ମକ ହୋଇଥାଏ, ତେବେ ଏହାର ପ୍ରଥମ ଅଙ୍କ ନକାରାତ୍ମକ ହେବ: ଉଦାହରଣ ସ୍ୱରୂପ -123 ଅଙ୍କ -1, 2, ଏବଂ 3 କୁ ଚିହ୍ନିତ କରିଥାଏ । >>> count_nums{(std::vector<long>())) (0) >>> count_nums{(std::vector<long>{(long) -1, (long) -11, (long) -11}))) (1) >>> count_nums::std::vector<long>{(long) -1, (long) -1, (long) -2} (3))))\nlong count_nums(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_digits_signed(long n) {\n  std::string s = std::to_string(n);\n  long sum = 0;\n  for (long i = 0; i < s.length(); ++i) {\n    if (i == 0 && s[i] == '-') {\n      if (s.length() > 1) {\n        sum -= (s[i + 1] - '0');\n        i++;\n      }\n    } else {\n      sum += (s[i] - '0');\n    }\n  }\n  return sum;\n}\n\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n  for (long num : arr) {\n    if (sum_digits_signed(num) > 0) {\n      count++;\n    }\n  }\n  return count;\n}",
        "test": "}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12, (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/109",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆମେ N ସଂଖ୍ୟକ ଭେକ୍ଟର 'arr' ପାଇଛୁ arr[1], arr[2], ..., arr[N]। ଭେକ୍ଟରରେ ଥିବା ସଂଖ୍ୟା ଗୁଡ଼ିକ ଆକସ୍ମିକ ଭାବରେ ସଜାଡାଯିବ । ଆପଣଙ୍କ କାର୍ଯ୍ୟ ହେଉଛି ନିର୍ଣ୍ଣୟ କରିବା ଯେ କୌଣସି ଭେକ୍ଟରକୁ ଅଣ-ହ୍ରାସ କ୍ରମରେ ସଜାଡିବା ସମ୍ଭବ କି ନାହିଁ । ଦିଆଯାଇଥିବା ଭେକ୍ଟରରେ ନିମ୍ନଲିଖିତ କାର୍ଯ୍ୟ ସମ୍ପାଦନ କରି: ଆପଣଙ୍କୁ ଯେକୌଣସି ସଂଖ୍ୟକ ଥର ଡାହାଣକୁ ଘୁଞ୍ଚିବା କାର୍ଯ୍ୟ କରିବାକୁ ଅନୁମତି ଅଛି । ଗୋଟିଏ ଡାହାଣକୁ ଘୁଞ୍ଚିବା କାର୍ଯ୍ୟର ଅର୍ଥ ଭେକ୍ଟରର ସମସ୍ତ ଉପାଦାନକୁ ଡାହାଣ ଦିଗରେ ଗୋଟିଏ ସ୍ଥାନକୁ ଘୁଞ୍ଚାଇବା । ଭେକ୍ଟରର ଶେଷ ଉପାଦାନ ଭେକ୍ଟରରେ ଆରମ୍ଭ ସ୍ଥିତିକୁ ଘୁଞ୍ଚାଯିବ ଅର୍ଥାତ୍ ୦.th ସୂଚକାଙ୍କ । ଯଦି ଉପରୋକ୍ତ କାର୍ଯ୍ୟ ସମ୍ପାଦନ କରି ସଜାଡ ହୋଇଥିବା ଭେକ୍ଟରକୁ ପ୍ରାପ୍ତ କରିବା ସମ୍ଭବ ତେବେ true ଫେରସ୍ତ ହୁଏ, ନଚେତ୍ true ଫେରସ୍ତ ହୁଏ । ଯଦି ଦିଆଯାଇଥିବା ଭେକ୍ଟର ଖାଲି ଅଛି ତେବେ true ଫେରସ୍ତ ହୁଏ । ଟିପ୍ପଣୀ: ଦିଆଯାଇଥିବା ଭେକ୍ଟରରେ ଅନନ୍ୟ ଉପାଦାନ ରହିବା ନିଶ୍ଚିତ । ଉଦାହରଣଃ >>> move_one_ball_{(st_vector::{(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\nbool move_one_ball(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool move_one_ball(std::vector<long> arr) {\n  if (arr.empty()) {\n    return true;\n  }\n  int n = arr.size();\n  std::vector<long> sorted_arr = arr;\n  std::sort(sorted_arr.begin(), sorted_arr.end());\n  for (int shift = 0; shift < n; ++shift) {\n    std::vector<long> shifted_arr(n);\n    for (int i = 0; i < n; ++i) {\n      shifted_arr[i] = arr[(i - shift + n) % n];\n    }\n    if (shifted_arr == sorted_arr) {\n      return true;\n    }\n  }\n  return false;\n}",
        "test": "}\nint main() {\n    auto candidate = move_one_ball;\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)10, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/110",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏହି ସମସ୍ୟା ରେ, ଆପଣ ଏକ ଫଙ୍କସନ କୁ କାର୍ଯ୍ୟକାରୀ କରିବେ ଯାହା ଦୁଇଟା ସଂଖ୍ୟା ଭେକ୍ଟର କୁ ନେଇଥାଏ, ଏବଂ ନିର୍ଣ୍ଣୟ କରେ ଯେ କଣ ଏହା ସମ୍ଭବ ଅଟେ କି ସେଗୁଡିକ ମଧ୍ୟରେ ଉପାଦାନ ଗୁଡିକର ଏକ ଆଦାନ ପ୍ରଦାନ କରିବା lst1 କୁ କେବଳ ଯୁଗ୍ମ ସଂଖ୍ୟା ର ଏକ ଭେକ୍ଟର କରିବା ପାଇଁ. lst1 ଏବଂ lst2 ମଧ୍ୟରେ ଆଦାନ ପ୍ରଦାନ ଉପାଦାନ ଗୁଡିକର ସଂଖ୍ୟା ଉପରେ କୌଣସି ସୀମା ନାହିଁ. lst1 ଏବଂ lst2 ମଧ୍ୟରେ ଉପାଦାନ ଗୁଡିକର ଆଦାନ ପ୍ରଦାନ କରିବା ସମ୍ଭବ ଅଟେ lst1 ର ସମସ୍ତ ଉପାଦାନ କୁ ଯୁଗ୍ମ କରିବା ପାଇଁ, \"YES\" କୁ ଫେରାଇବ. ଅନ୍ୟଥା, \"NO\" କୁ ଫେରାଇବ. ଉଦାହରଣ ସ୍ବରୂପ: >>> exchange((std::vector<>(long) {1, (long) 2, (long) 3, (long) 4})), (std::vector<>(long) {1, (long) 2, (long) 3, (long) 4}), (std::vector<>(long) 4}))) (\"YES\") >>>((std::exchange<>vector<>{1, (long) 2, (long) 3, (long) 4} (std::vector<>(long) {1, (long) 5} (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n  long odd_count_lst1 = 0;\n  for (long num : lst1) {\n    if (num % 2 != 0) {\n      odd_count_lst1++;\n    }\n  }\n  long even_count_lst2 = 0;\n  for (long num : lst2) {\n    if (num % 2 == 0) {\n      even_count_lst2++;\n    }\n  }\n  if (even_count_lst2 >= odd_count_lst1) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = exchange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)2, (long)1, (long)4, (long)3}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)3}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)6, (long)1, (long)8, (long)9})), (std::vector<long>({(long)3, (long)5, (long)5, (long)1, (long)1, (long)1}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)100, (long)200})), (std::vector<long>({(long)200, (long)200}))) == (\"YES\"));\n}\n"
    },
    {
        "task_id": "HumanEval/111",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ସ୍ପେସ୍ ପୃଥକ ଛୋଟ ଅକ୍ଷର ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଦିଆଯାଇଥିବା, ଅଧିକତମ ପୁନରାବୃତ୍ତି ସହିତ ଅକ୍ଷରର ଏକ ମ୍ୟାପ୍ ଫେରାନ୍ତୁ ଏବଂ ସମାନ ଗଣନା ଧାରଣ କରନ୍ତୁ _ ଯଦି ଏକାଧିକ ଅକ୍ଷର ସମାନ ଘଟନା ଅଛି, ତେବେ ସେଗୁଡିକ ଫେରାନ୍ତୁ _ ଉଦାହରଣଃ >>> ହିଷ୍ଟୋଗ୍ରାମ୍ (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.histogram.org/) (https://www.histogram.histogram.org/) (https://www.histogram.org/) (https://www.histogram.histogram.org/) (https://www.histogram.org/) (https://www.histogram.histogram.org/) (https://www.histogram.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.stststststststst.stst.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.org/) (long/) (long/) (long/) (long\nstd::map<std::string,long> histogram(std::string test) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> histogram(std::string test) {\n  std::map<std::string, long> counts;\n  std::string current_word;\n  std::stringstream ss(test);\n  while (ss >> current_word) {\n    counts[current_word]++;\n  }\n  if (counts.empty()) {\n    return {};\n  }\n  long max_count = 0;\n  for (const auto& pair : counts) {\n    if (pair.second > max_count) {\n      max_count = pair.second;\n    }\n  }\n  std::map<std::string, long> result;\n  for (const auto& pair : counts) {\n    if (pair.second == max_count) {\n      result[pair.first] = pair.second;\n    }\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n"
    },
    {
        "task_id": "HumanEval/112",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// କାର୍ଯ୍ୟ ଆମକୁ ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗ s ଏବଂ c ଦିଆଯାଇଛି, ଆପଣଙ୍କୁ s ରେ ଥିବା ସମସ୍ତ ଅକ୍ଷରକୁ ଅପସାରଣ କରିବାକୁ ପଡିବ ଯାହା c ରେ ଥିବା ଯେକୌଣସି ଅକ୍ଷର ସହିତ ସମାନ ଅଟେ ତାପରେ ଯାଞ୍ଚ କରନ୍ତୁ ଯେ ଫଳାଫଳ ଷ୍ଟ୍ରିଙ୍ଗ୍ ପାଲିଣ୍ଡ୍ରୋମ୍ ଅଟେ କି ନାହିଁ _ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ପାଲିଣ୍ଡ୍ରୋମ୍ କୁହାଯାଏ ଯଦି ଏହା ପଛକୁ ସମାନ ପଛୁଆ ଭାବରେ ପ read ାଯାଏ _ ଆପଣ ଯାଞ୍ଚ ପାଇଁ ଫଳାଫଳ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଏବଂ ସତ୍ୟ / ମିଥ୍ୟା ଥିବା ଏକ ଟାପଲ୍ ଫେରସ୍ତ କରିବା ଉଚିତ୍ _ ଉଦାହରଣ >>> reverse_delete (((\"abcde\"), (\"ae\")) (std::make_tuple (((bcd\", false)) >>> reverse_delete (((\"abcdef\"), (\"b\") (std::make_tuple (((acdef\",)) >>> reverse_delete (((abcded\", false)) >>> reverse_delete (((abcded\"), (\"abcba\") (std::make_tuple\", true))\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n  std::string result = \"\";\n  std::unordered_set<char> chars_to_delete(c.begin(), c.end());\n  for (char ch : s) {\n    if (chars_to_delete.find(ch) == chars_to_delete.end()) {\n      result += ch;\n    }\n  }\n  std::string reversed_result = result;\n  std::reverse(reversed_result.begin(), reversed_result.end());\n  return std::make_tuple(result, result == reversed_result);\n}",
        "test": "}\nint main() {\n    auto candidate = reverse_delete;\n    assert(candidate((\"abcde\"), (\"ae\")) == (std::make_tuple(\"bcd\", false)));\n    assert(candidate((\"abcdef\"), (\"b\")) == (std::make_tuple(\"acdef\", false)));\n    assert(candidate((\"abcdedcba\"), (\"ab\")) == (std::make_tuple(\"cdedc\", true)));\n    assert(candidate((\"dwik\"), (\"w\")) == (std::make_tuple(\"dik\", false)));\n    assert(candidate((\"a\"), (\"a\")) == (std::make_tuple(\"\", true)));\n    assert(candidate((\"abcdedcba\"), (\"\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"abcdedcba\"), (\"v\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"vabba\"), (\"v\")) == (std::make_tuple(\"abba\", true)));\n    assert(candidate((\"mamma\"), (\"mia\")) == (std::make_tuple(\"\", true)));\n}\n"
    },
    {
        "task_id": "HumanEval/113",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଗୋଟିଏ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭେକ୍ଟର ଦିଆଗଲା, ଯେଉଁଠାରେ ପ୍ରତ୍ୟେକ ଷ୍ଟ୍ରିଙ୍ଗ୍ କେବଳ ଅଙ୍କ ବିଶିଷ୍ଟ, ଏକ ଭେକ୍ଟର ଫେରାଇଦେବେ. ଆଉଟପୁଟର ପ୍ରତ୍ୟେକ ଉପାଦାନ i \"ଇନପୁଟ୍ ର ଷ୍ଟ୍ରିଙ୍ଗ୍ i ରେ ଥିବା ଅଙ୍କ ସଂଖ୍ୟା\" ହେବା ଉଚିତ. ଯେଉଁଠାରେ ସମସ୍ତ i କୁ ଇନପୁଟ୍ ର i'th ଷ୍ଟ୍ରିଙ୍ଗ୍ ରେ ଥିବା ଅଙ୍କ ସଂଖ୍ୟା ଦ୍ୱାରା ବଦଳାଯିବା ଉଚିତ. >>> odd_count((std::vector<std::string>(({std::string) \"1234567\"}))) (std::vector<std::string>({stdstring) \" 4n ର str4ng 4 ର ଅଙ୍କ ସଂଖ୍ୟା 4n. \"})) >>> odd_count(stdvector<stdstring>::{(stdstring) \"\", \"3 (stdstring) \"::\"\"1111\"11\"}))) (stdvector<stdstring::{stdstring>) \"n: 1n: 1n\" 8n ର ଅଙ୍କ ସଂଖ୍ୟା 8n. \" (string) 8n.\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n  std::vector<std::string> result;\n  for (const std::string& s : lst) {\n    int count = 0;\n    for (char c : s) {\n      if ((c - '0') % 2 != 0) {\n        count++;\n      }\n    }\n    std::string count_str = std::to_string(count);\n    std::string modified_s = s;\n    for (char& c : modified_s) {\n      if (isdigit(c) && (c - '0') % 2 != 0) {\n        c = count_str[0];\n      }\n    }\n    result.push_back(\"the number of odd elements \" + count_str + \"n the str\" + modified_s + \"ng \" + modified_s + \" of the \" + modified_s + \"nput.\");\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = odd_count;\n    assert(candidate((std::vector<std::string>({(std::string)\"1234567\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"271\", (std::string)\"137\", (std::string)\"314\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (std::string)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/114",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଭେକ୍ଟର ସମୁଦାୟ ସଂଖ୍ୟା n ଦିଆଗଲା, କୌଣସି ବି ଅଣ-ଖାଲି ଉପ-ଭେକ୍ଟର ସମୁଦାୟ ସଂଖ୍ୟା n ର ସର୍ବନିମ୍ନ ସମୁଦାୟକୁ ଖୋଜ _ ଉଦାହରଣ >>> minSubArraySum(((std::vector<long>({long) 2, (long) 3, (long) 4, (long) 1, (long) 2, (long) 4}))) (1) >>> minSubArraySum(std::vector<long>{(long) -1, (long) -2, (long) -3)))) (-6)\nlong minSubArraySum(std::vector<long> nums) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.empty()) {\n    throw std::invalid_argument(\"Input vector cannot be empty.\");\n  }\n  long min_so_far = nums[0];\n  long current_min = nums[0];\n  for (size_t i = 1; i < nums.size(); ++i) {\n    current_min = std::min(nums[i], current_min + nums[i]);\n    min_so_far = std::min(min_so_far, current_min);\n  }\n  return min_so_far;\n}",
        "test": "}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999}))) == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0, (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100, (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100, (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10}))) == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
    },
    {
        "task_id": "HumanEval/115",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣ କୁଅର ଏକ ଆୟତନିକ ଗ୍ରୀଡ ପାଇବେ _ ପ୍ରତ୍ୟେକ ଧାଡି ଏକ କୁଅକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ, ଏବଂ ପ୍ରତ୍ୟେକ ଧାଡିରେ 1 ଗୋଟିଏ ଜଳର ଏକକକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ _ ପ୍ରତ୍ୟେକ କୁଅରେ ଏକ ସମାନ ବାଲ୍ଟି ଅଛି ଯାହାକୁ ଏଥିରୁ ଜଳ ବାହାର କରିବା ପାଇଁ ବ୍ୟବହାର କରାଯାଇପାରିବ, ଏବଂ ସମସ୍ତ ବାଲ୍ଟିରେ ସମାନ କ୍ଷମତା ଅଛି _ ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି କୁଅକୁ ଖାଲି କରିବା ପାଇଁ ବାଲ୍ଟି ବ୍ୟବହାର କରିବା _ ଆପଣ ବାଲ୍ଟିକୁ କେତେଥର ତଳକୁ ଆଣିବା ଆବଶ୍ୟକ ତାହା ଆଉଟପୁଟ୍ କରନ୍ତୁ _ ଉଦାହରଣ 1: >>> max_fill((long_long:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n  long bucket_lowering_count = 0;\n  for (const auto& row : grid) {\n    long water_in_well = 0;\n    for (long unit : row) {\n      water_in_well += unit;\n    }\n    bucket_lowering_count += (water_in_well + capacity - 1) / capacity;\n  }\n  return bucket_lowering_count;\n}",
        "test": "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
    },
    {
        "task_id": "HumanEval/116",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏହି କଟା ରେ, ଆପଣଙ୍କୁ ଏକ ନକାରାତ୍ମକ ସଂଖ୍ୟାର ଭେକ୍ଟରକୁ ସେମାନଙ୍କର ବାଇନାରୀ ପ୍ରତିନିଧିତ୍ୱରେ ଏକ ସଂଖ୍ୟା ଅନୁଯାୟୀ କ୍ରମାନୁସାରେ ସର୍ଟ କରିବାକୁ ପଡିବ _ ସମାନ ସଂଖ୍ୟକ ଏକ ପାଇଁ, ଦଶମିକ ମୂଲ୍ୟ ଉପରେ ଆଧାର କରି ସର୍ଟ କରନ୍ତୁ _ ଏହାକୁ ଏହିପରି କାର୍ଯ୍ୟକାରୀ କରିବାକୁ ପଡିବଃ >>> sort_array((std::vector<long>{(long) 1, (long) 5, (long) 2, (long) 3, (long) 4}))) (std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 4, (long) 5})) >>> sort_array((std::vector<long>{(long>{(long-2, (long) 3, (long) 4, (long) 5, (long) -6}))) (std::vector<long>{(long>{-6, (long) -5, (long) -4, (long) -3, (long) -2) >>> array_std::vector<long>{(long>{0, (long) 1, (long) 3, (long)) (long) 4, (long) 1, (long) (long) (long)) (long) (long) 3, (long)) (long) (long) (long) (long) (long)) (long) (long) (long)) (long) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long))\nstd::vector<long> sort_array(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nint count_set_bits(long n) {\n  int count = 0;\n  if (n < 0) {\n    n = std::abs(n);\n  }\n  while (n > 0) {\n    n &= (n - 1);\n    count++;\n  }\n  return count;\n}\n\nbool compare(long a, long b) {\n  int bits_a = count_set_bits(a);\n  int bits_b = count_set_bits(b);\n  if (bits_a != bits_b) {\n    return bits_a < bits_b;\n  }\n  return a < b;\n}\n\nstd::vector<long> sort_array(std::vector<long> arr) {\n  std::sort(arr.begin(), arr.end(), compare);\n  return arr;\n}",
        "test": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n}\n"
    },
    {
        "task_id": "HumanEval/117",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଗୋଟିଏ string s ଏବଂ ଏକ ପ୍ରାକୃତିକ ସଂଖ୍ୟା n ଦିଆଗଲା, ଆପଣଙ୍କୁ ଏକ ଫଙ୍କସନ କାର୍ଯ୍ୟକାରୀ କରିବାକୁ କୁହାଯାଇଛି ଯାହା string s ରୁ ସମସ୍ତ ଶବ୍ଦଗୁଡ଼ିକର ଏକ ଭେକ୍ଟର ଫେରାଇଥାଏ ଯେଉଁଥିରେ ସଠିକ୍ ଭାବରେ n ବର୍ଣ୍ଣମାଳା ଥାଏ, ଏହି ଶବ୍ଦଗୁଡ଼ିକ string s ରେ ଦେଖାଯିବା ପାଇଁ। ଯଦି string s ଖାଲି ଥାଏ ତେବେ ଫଙ୍କସନଟି ଏକ ଖାଲି ଭେକ୍ଟର ଫେରାଇବ _ ଟିପ୍ପଣୀଃ ଆପଣ ଧରି ନେଇପାରିବେ ଯେ ଇନପୁଟ୍ ଷ୍ଟ୍ରିଙ୍ଗରେ କେବଳ ଅକ୍ଷର ଏବଂ ସ୍ପେସ୍ ଅଛି _ ଉଦାହରଣଃ >>> select_words ({\"ମେରୀଙ୍କର ଏକ ଛୋଟ ମେଷ ଥିଲା\"), (4)) (std::vector<std::string>) ({\"ମ୍ୟାରିଙ୍କର ଏକ ଛୋଟ ମେଷ ଥିଲା\"}) ({\"ମ୍ୟାରିଙ୍କର ଏକ ଛୋଟ ମେଷ ଥିଲା\"}) ({\"ମେରୀଙ୍କର ଏକ ଛୋଟ ମେଷ ଥିଲା\"}) ({\"ମେରୀ\", ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟାରି\",}) ({\"ମ୍ୟ\",}) (}) ({\"ମ୍ୟ\"ମ୍ୟ\"ମ୍ୟ\"ମ୍ୟ\"ମ୍ୟ\") ({\"ମ୍ୟ\"ମ୍ୟ\"ମ୍ୟ\"ମ୍ୟ\"ମ୍ୟ\"ମ୍ୟ\"} (\", (\", (\",) (\", (\",) (\", (\",)\nstd::vector<std::string> select_words(std::string s, long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_consonant(char c) {\n  c = tolower(c);\n  return (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');\n}\n\nstd::vector<std::string> select_words(std::string s, long n) {\n  std::vector<std::string> result;\n  std::string current_word;\n  for (char c : s) {\n    if (c == ' ') {\n      long consonant_count = 0;\n      for (char word_char : current_word) {\n        if (is_consonant(word_char)) {\n          consonant_count++;\n        }\n      }\n      if (consonant_count == n) {\n        result.push_back(current_word);\n      }\n      current_word = \"\";\n    } else {\n      current_word += c;\n    }\n  }\n  long consonant_count = 0;\n  for (char word_char : current_word) {\n    if (is_consonant(word_char)) {\n      consonant_count++;\n    }\n  }\n  if (consonant_count == n) {\n    result.push_back(current_word);\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/118",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ଶବ୍ଦ ଦିଆ ଯାଇଛି. ଆପଣଙ୍କର କାମ ହେଉଛି ଶବ୍ଦ ର ଡାହାଣ ପାର୍ଶ୍ବ ରୁ ଦୁଇଟା ସ୍ୱରବର୍ଣ୍ଣ ମଧ୍ୟରେ ଥିବା ନିକଟତମ ସ୍ୱରବର୍ଣ୍ଣକୁ ଖୋଜିବା (ମୌଳିକ ବର୍ଣ୍ଣର ସଂଯୋଜକ) । ଆରମ୍ଭ ଓ ଶେଷ ରେ ଥିବା ସ୍ୱରବର୍ଣ୍ଣ ଗୁଡିକୁ ଗଣନା କରାଯାଏ ନାହିଁ । ଯଦି ଆପଣ ଉପରୋକ୍ତ ସର୍ତ୍ତ ପୂରଣ କରୁଥିବା କୌଣସି ସ୍ୱରବର୍ଣ୍ଣ ନ ପାଇଛନ୍ତି ତେବେ ଖାଲି string କୁ ଫେରାଇ ଦିଅନ୍ତୁ । ଆପଣ ଧରି ନେଇ ପାରିବେ ଯେ ଦିଆଯାଇଥିବା string ରେ କେବଳ ଇଂରାଜୀ ଅକ୍ଷର ଅଛି । ଉଦାହରଣଃ >>> get_closest_vowel((\"yogurt\")) (\"u\") >>> get_closest_vowel(\"FULL\")) (\"U\") >>> get_closest_vowel(\"quick\")) (\"\") >>> get_closest_vowel((ab\") (\"\")\nstd::string get_closest_vowel(std::string word) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_vowel(char c) {\n  c = tolower(c);\n  return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n}\n\nbool is_consonant(char c) {\n  return isalpha(c) && !is_vowel(c);\n}\n\nstd::string get_closest_vowel(std::string word) {\n  if (word.length() < 3) {\n    return \"\";\n  }\n  for (int i = word.length() - 2; i >= 1; --i) {\n    if (is_vowel(word[i]) && is_consonant(word[i - 1]) && is_consonant(word[i + 1])) {\n      return std::string(1, word[i]);\n    }\n  }\n  return \"\";\n}",
        "test": "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
    },
    {
        "task_id": "HumanEval/119",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗର ଏକ ଭେକ୍ଟର ଦିଆଯାଇଛି, ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗରେ କେବଳ ଖୋଲା ବନ୍ଧନୀ '(' କିମ୍ବା ବନ୍ଦ ବନ୍ଧନୀ ') ' ରହିଛି । ଆପଣଙ୍କର କାମ ହେଉଛି ଯାଞ୍ଚ କରିବା ଯେ ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗକୁ କିଛି କ୍ରମରେ ସଂଯୋଗ କରିବା ସମ୍ଭବ କି ନାହିଁ, ଯେ ଫଳସ୍ୱରୂପ ଷ୍ଟ୍ରିଙ୍ଗ ଭଲ ହେବ । ଏକ ଷ୍ଟ୍ରିଙ୍ଗ S କୁ ଭଲ ବୋଲି ବିବେଚନା କରାଯାଏ ଯଦି ଏବଂ କେବଳ ଯଦି S ରେ ଥିବା ସମସ୍ତ ବନ୍ଧନୀ ସନ୍ତୁଳିତ ହୋଇଥାଏ । ଉଦାହରଣ ସ୍ୱରୂପଃ ଷ୍ଟ୍ରିଙ୍ଗ '(()) ' ଭଲ ଅଟେ, ଯେତେବେଳେ ଷ୍ଟ୍ରିଙ୍ଗ '()) ' ନୁହେଁ _ ଭଲ ଷ୍ଟ୍ରିଙ୍ଗ ତିଆରି କରିବାର ଉପାୟ ଅଛି ତେବେ 'ହଁ' ଫେରାନ୍ତୁ, ଏବଂ ଅନ୍ୟଥା 'ନା' ଫେରାନ୍ତୁ _ ଉଦାହରଣଃ >>> match_parens(std:: vector<std:: string>{((stdstring) \") \", ((std:: string) \")) \" (\" ହଁ \") >>> match_parens<std:: vector<std:: string>{(stdstring>\" (\"ନା\") \" ())\nstd::string match_parens(std::vector<std::string> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_good(const std::string& s) {\n  int balance = 0;\n  for (char c : s) {\n    if (c == '(') {\n      balance++;\n    } else if (c == ')') {\n      balance--;\n    }\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return balance == 0;\n}\n\nstd::string match_parens(std::vector<std::string> lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  if (is_good(s1 + s2) || is_good(s2 + s1)) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
    },
    {
        "task_id": "HumanEval/120",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଭେକ୍ଟର arr ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଏବଂ ଏକ ସକାରାତ୍ମକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା k ଦିଆଗଲା, ଏକ ସର୍ଟ ହୋଇଥିବା ଭେକ୍ଟର ଫେରାଇଦିଅନ୍ତୁ k ସଂଖ୍ୟା ସହିତ arr ରେ ସର୍ବାଧିକ k ସଂଖ୍ୟା ସହିତ. ଉଦାହରଣ 1: >>> ସର୍ବାଧିକ((std::vector<long>({long) -3, (long) -4, (long) -5, (long)), (3)) (std::vector<long>({long) -4, (long) -3, (long) 5}) ଉଦାହରଣ 2: >>> ସର୍ବାଧିକ((std::vector<long>({long) -4, (long) -4})), (2)) (std::vector<long>{long} -4, (long) 4}) ଉଦାହରଣ 3: >>> ସର୍ବାଧିକ((std::vector<long>{long} -3, (long) -2, (long) -1, (long) -2, (long) -1, (long) -2, (long) -1, (long) (1)) (1) (std::vector<long>) = 1. ଭେକ୍ଟରର ଲମ୍ବ 1000, ଭେକ୍ଟରର ତ୍ରୈାଙ୍କ ମଧ୍ୟରେ ରହିବ _ ଦୟାକରଣରେ 1000, ଭେକ୍ଟରଗୁଡ଼ିକର ଦୈର୍ଘ୍ୟରେ ରହିବ _ [ len-1, len-1, len-1, len-1]\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n  std::sort(arr.rbegin(), arr.rend());\n  std::vector<long> result;\n  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {\n    result.push_back(arr[i]);\n  }\n  std::sort(result.begin(), result.end());\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5, (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13, (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5, (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10, (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/121",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଅଣ-ଖାଲି ଭେକ୍ଟର ଦିଆଯାଇଥିବା, ସମ ସମ ସମୁଦାୟର ସମୁଦାୟକୁ ଫେରାଇଥାଏ _ ଉଦାହରଣ >>> ସମାଧାନ >>> ଷ୍ଟଡିଃ ଭେକ୍ଟର <long> (long) 5, (long) 8, (long) 7, (long) 1}))) (12) >>> ସମାଧାନ >>> ଷ୍ଟଡିଃ ଭେକ୍ଟର <long> (long) 3, (long) 3, (long) 3, (long) 3}))) (9) >>> ସମାଧାନ >>> ଷ୍ଟଡିଃ ଭେକ୍ଟର <long> (long) 30, (long) 13, (long) 24, (long) 321}))) (0)\nlong solution(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong solution(std::vector<long> lst) {\n  long sum = 0;\n  for (long i = 0; i < lst.size(); i += 2) {\n    if (lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5, (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3, (long)13, (long)2, (long)9}))) == (3));\n}\n"
    },
    {
        "task_id": "HumanEval/122",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଅସରନ୍ତି ଭେକ୍ଟର ଦିଆଯାଇଥିବା ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା arr ଏବଂ ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା k, arr ର ପ୍ରଥମ k ଉପାଦାନରୁ ସର୍ବାଧିକ ଦୁଇଟି ଅଙ୍କ ସହିତ ଉପାଦାନଗୁଡ଼ିକର ସମୁଦାୟ ଫେରାଇଥାଏ _ ଉଦାହରଣଃ >>> add_elements{}std::vector<long>{(long) 111, (long) 21, (long) 3, (long) 4000, (long) 5, (long) 6, (long) 7, (long) 8, (long) 9})), (4)) (24) ପ୍ରତିବନ୍ଧକଃ 1. 1 <= len(arr) <= 100 2. 1 <= k <= lenarr)\nlong add_elements(std::vector<long> arr, long k) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {\n    if (arr[i] >= -99 && arr[i] <= 99) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11, (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/123",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆ ଯାଇଥାଏ, ଏକ ସର୍ଟ ହୋଇଥିବା ଭେକ୍ଟର ଫେରାଇଥାଏ ଯେଉଁଥିରେ କ୍ଲାଟଜ କ୍ରମରେ ଅଜଣା ସଂଖ୍ୟା ଥାଏ । କ୍ଲାଟଜ ଅନୁମାନ ଗଣିତରେ ଏକ ଅନୁମାନ ଅଟେ ଯାହା ନିମ୍ନଲିଖିତ ଭାବରେ ବ୍ୟାଖ୍ୟା କରାଯାଇଥିବା ଏକ କ୍ରମକୁ ନେଇଥାଏ: ଯେକୌଣସି ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ସହିତ ଆରମ୍ଭ କରନ୍ତୁ । ତାପରେ ପ୍ରତ୍ୟେକ ପଦ ପୂର୍ବବର୍ତ୍ତୀ ପଦରୁ ନିମ୍ନଲିଖିତ ଭାବରେ ପ୍ରାପ୍ତ ହୁଏ: ଯଦି ପୂର୍ବବର୍ତ୍ତୀ ପଦ ସମାନ, ପରବର୍ତ୍ତୀ ପଦ ପୂର୍ବବର୍ତ୍ତୀ ପଦର ଅଧା ଅଟେ _ ଯଦି ପୂର୍ବବର୍ତ୍ତୀ ପଦ ଅଜଣା, ପରବର୍ତ୍ତୀ ପଦ ପୂର୍ବବର୍ତ୍ତୀ ପଦର 3 ଗୁଣ ଅଧିକ 1 ଅଟେ _ ଅନୁମାନ ହେଉଛି ଯେ n ର ମୂଲ୍ୟ ଯାହା ହେଲେ ମଧ୍ୟ, କ୍ରମ ସର୍ବଦା 1 କୁ ପହଞ୍ଚିବ _ ଟିପ୍ପଣୀଃ 1. Collatz ((1) ହେଉଛି [1] _ 2. ଫେରସ୍ତ ଭେକ୍ଟର ବୃଦ୍ଧି କ୍ରମରେ ସର୍ଟ ହୋଇଛି _ ଉଦାହରଣ ସ୍ୱରୂପଃ get_odd_collatz (5) ଫେରସ୍ତ କରେ [1, 5] _ 5 ପାଇଁ କ୍ଲାଟଜ କ୍ରମ ହେଉଛି [5, 8, 16, 4, 2, 1], ତେଣୁ ଅଜଣା ସଂଖ୍ୟାଗୁଡ଼ିକ କେବଳ 1 ଏବଂ 5 _ >>> get_collatz ((5) (st ଭେକ୍ଟରଃ{d} (<1} (long) {}) _\nstd::vector<long> get_odd_collatz(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> get_odd_collatz(long n) {\n  std::vector<long> odd_numbers;\n  std::unordered_set<long> seen;\n  long current = n;\n  while (seen.find(current) == seen.end()) {\n    seen.insert(current);\n    if (current % 2 != 0) {\n      odd_numbers.push_back(current);\n    }\n    if (current == 1) {\n      break;\n    }\n    if (current % 2 == 0) {\n      current /= 2;\n    } else {\n      current = 3 * current + 1;\n    }\n  }\n  std::sort(odd_numbers.begin(), odd_numbers.end());\n  return odd_numbers;\n}",
        "test": "}\nint main() {\n    auto candidate = get_odd_collatz;\n    assert(candidate((14)) == (std::vector<long>({(long)1, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)5})));\n    assert(candidate((12)) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n}\n"
    },
    {
        "task_id": "HumanEval/124",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ଫଙ୍କସନ୍ ଲେଖିବାକୁ ହେବ ଯାହା ଦିଆଯାଇଥିବା ତାରିଖକୁ ବୈଧ କରେ ଏବଂ ଯଦି ତାରିଖ ବୈଧ ତେବେ ସତ୍ୟ ଫେରାଇଥାଏ ଅନ୍ୟଥା ମିଥ୍ୟା। ତାରିଖ ବୈଧ ହୋଇଥାଏ ଯଦି ନିମ୍ନଲିଖିତ ସମସ୍ତ ନିୟମଗୁଡିକ ସନ୍ତୁଷ୍ଟ ହୋଇଥାଏ: 1. ତାରିଖ ଷ୍ଟ୍ରିଙ୍ଗ ଖାଲି ନୁହେଁ 2. ମାସ ପାଇଁ ଦିନ ସଂଖ୍ୟା 1 ରୁ କମ୍ କିମ୍ବା 31 ଦିନରୁ ଅଧିକ ନୁହେଁ 1,3,5,7,8,10,12. ଏବଂ ମାସ ପାଇଁ ଦିନ ସଂଖ୍ୟା 1 ରୁ କମ୍ କିମ୍ବା 30 ଦିନରୁ ଅଧିକ ନୁହେଁ 4,6,9,11. ଏବଂ ମାସ ପାଇଁ ଦିନ ସଂଖ୍ୟା 1 ରୁ କମ୍ କିମ୍ବା 29 ରୁ ଅଧିକ ନୁହେଁ 2. ମାସ 1 ରୁ କମ୍ କିମ୍ବା 12 ରୁ ଅଧିକ ହେବା ଉଚିତ ନୁହେଁ 4. ତାରିଖ ଫର୍ମାଟରେ ହେବା ଉଚିତଃ mm-dd-yyyy >>> ବୈଧ_(ତାରିଖ(103-11-2000\")) (true >>> valid_date((15-01-2012\")) (false) >>> valid_date (((04-040-20\") (false) >>> valid_(ତାରିଖ_2020-06-04\") (true >>> valid_date (((06/04/2020) (false))\nbool valid_date(std::string date) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool valid_date(std::string date) {\n  if (date.empty()) {\n    return false;\n  }\n  if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n    return false;\n  }\n  int month, day, year;\n  try {\n    month = std::stoi(date.substr(0, 2));\n    day = std::stoi(date.substr(3, 2));\n    year = std::stoi(date.substr(6, 4));\n  } catch (const std::invalid_argument& e) {\n    return false;\n  } catch (const std::out_of_range& e) {\n    return false;\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1) {\n    return false;\n  }\n  if (month == 2) {\n    if (day > 29) {\n      return false;\n    }\n  } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day > 30) {\n      return false;\n    }\n  } else {\n    if (day > 31) {\n      return false;\n    }\n  }\n  return true;\n}",
        "test": "}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/125",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// ଏକ ଶବ୍ଦ ଶୃଙ୍ଖଳ ଦିଆଯାଇ, ଶ୍ବେତସ୍ଥାନରେ ବିଭକ୍ତ ଶବ୍ଦଗୁଡ଼ିକର ଏକ ଭେକ୍ଟର ଫେରାନ୍ତୁ, ଯଦି ପାଠ୍ୟରେ କୌଣସି ଶ୍ବେତସ୍ଥାନ ନଥାଏ ତେବେ ଆପଣ କମାସ୍ରେ ବିଭକ୍ତ କରିବା ଉଚିତ ',' ଯଦି କମାସ୍ ନଥାଏ ତେବେ ଆପଣ ଅକ୍ଷରଗୁଡିକର ସଂଖ୍ୟା ଫେରାଇବା ଉଚିତ, ଅକ୍ଷରଗୁଡିକର ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅ\nUnion_std_vector_std_string__long split_words(std::string txt) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;\n    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }\n    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nUnion_std_vector_std_string__long split_words(std::string txt) {\n  if (txt.find(' ') != std::string::npos) {\n    std::vector<std::string> words;\n    std::stringstream ss(txt);\n    std::string word;\n    while (ss >> word) {\n      words.push_back(word);\n    }\n    return Union_std_vector_std_string__long(words);\n  } else if (txt.find(',') != std::string::npos) {\n    std::vector<std::string> words;\n    std::string current_word;\n    for (char c : txt) {\n      if (c == ',') {\n        words.push_back(current_word);\n        current_word = \"\";\n      } else {\n        current_word += c;\n      }\n    }\n    words.push_back(current_word);\n    return Union_std_vector_std_string__long(words);\n  } else {\n    long odd_order_count = 0;\n    for (char c : txt) {\n      if (islower(c)) {\n        if ((c - 'a') % 2 != 0) {\n          odd_order_count++;\n        }\n      }\n    }\n    return Union_std_vector_std_string__long(odd_order_count);\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"}));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\")) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
    },
    {
        "task_id": "HumanEval/126",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଭେକ୍ଟର ସଂଖ୍ୟା ଦିଆଗଲା, ସେମାନେ କ୍ରମାନୁସାରେ ସର୍ଟ କରା ଯାଇଛନ୍ତି କି ନାହିଁ ଫେରାଇ ଦିଅନ୍ତୁ. ଯଦି ଭେକ୍ଟରରେ ସମାନ ସଂଖ୍ୟାର 1 ରୁ ଅଧିକ ଡୁପ୍ଲିକେଟ୍ ଅଛି, ମିଥ୍ୟା ଫେରାଇ ଦିଅନ୍ତୁ. କୌଣସି ନକାରାତ୍ମକ ସଂଖ୍ୟା ନାହିଁ ଏବଂ କେବଳ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଧରନ୍ତୁ. ଉଦାହରଣ >>> is_sorted (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long_long) (long_long_long_long) (long_long_long_long_long) (long_long_long_long_long) (long_long_long_long_long_long_long) (long_long_long_long_long_long_long_long_long) (long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long\nbool is_sorted(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() <= 1) {\n    return true;\n  }\n  std::map<long, int> counts;\n  for (long x : lst) {\n    counts[x]++;\n  }\n  for (auto const& [key, val] : counts) {\n    if (val > 2) {\n      return false;\n    }\n  }\n  for (size_t i = 0; i < lst.size() - 1; ++i) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "test": "}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/127",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଦୁଇଟି ଅନ୍ତରାଳ ଦିଆଯାଏ, ଯେଉଁଠାରେ ପ୍ରତ୍ୟେକ ଅନ୍ତରାଳ ହେଉଛି ଏକ ଯୋଡି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା. ଉଦାହରଣ ସ୍ୱରୂପ, ଅନ୍ତରାଳ = (ଆରମ୍ଭ, ଶେଷ) = (1, 2) । ଦିଆଯାଇଥିବା ଅନ୍ତରାଳଗୁଡ଼ିକ ବନ୍ଦ ହୋଇଥାଏ, ଯାହାର ଅର୍ଥ ହେଉଛି ଅନ୍ତରାଳ (ଆରମ୍ଭ, ଶେଷ) ଉଭୟ ଆରମ୍ଭ ଏବଂ ଶେଷ ଅନ୍ତର୍ଭୁକ୍ତ କରିଥାଏ । ପ୍ରତ୍ୟେକ ଅନ୍ତରାଳ ପାଇଁ, ଏହା ଧରାଯାଏ ଯେ ଏହାର ଆରମ୍ଭ ଏହାର ଶେଷ ଠାରୁ କମ୍ କିମ୍ବା ସମାନ ଅଟେ । ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଏହି ଦୁଇଟି ଅନ୍ତରାଳର କ୍ରିୟାକାରଣର ଲମ୍ବ ଏକ ଅଶୂର ସଂଖ୍ୟା କି ନାହିଁ ନିର୍ଣ୍ଣୟ କରିବା । ଉଦାହରଣ ସ୍ୱରୂପ, ଅନ୍ତରାଳଗୁଡ଼ିକର କ୍ରିୟାକାରଣ (1, 3), (2, 4) ହେଉଛି (2, 3) ଯାହାର ଲମ୍ବ 1 ଅଟେ, ଯାହା ଏକ ଅଶୂର ସଂଖ୍ୟା ନୁହେଁ । ଯଦି କ୍ରିୟାକାରଣର ଲମ୍ବ ଏକ ଅଶୂର ସଂଖ୍ୟା, \"YES\" ଫେରାଇଦିଅନ୍ତୁ, ଅନ୍ୟଥା, \"NO\" ଫେରାଇଦିଅନ୍ତୁ । ଯଦି ଦୁଇଟି ଅନ୍ତରାଳ କ୍ରିୟାକାରଣ ନକରନ୍ତି, \"NO\" ଫେରାଇଦିଅନ୍ତୁ । [input/output] ନମୁନାଃ >>> ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  for (long i = 2; i * i <= n; ++i) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n  long start1 = std::get(interval1);\n  long end1 = std::get(interval1);\n  long start2 = std::get(interval2);\n  long end2 = std::get(interval2);\n  long intersection_start = std::max(start1, start2);\n  long intersection_end = std::min(end1, end2);\n  long intersection_length = intersection_end - intersection_start + 1;\n  if (intersection_length <= 0) {\n    return \"NO\";\n  }\n  if (is_prime(intersection_length)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = intersection;\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(2, 3))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-1, 1)), (std::make_tuple(0, 4))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-2, 2)), (std::make_tuple(-4, 0))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-11, 2)), (std::make_tuple(-1, -1))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(3, 5))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(1, 2))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-2, -2)), (std::make_tuple(-3, -2))) == (\"NO\"));\n}\n"
    },
    {
        "task_id": "HumanEval/128",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ଭେକ୍ଟର arr ଦିଆ ଯାଇଛି ଏବଂ ଆପଣଙ୍କୁ ଭେକ୍ଟରରେ ଥିବା ପ୍ରତ୍ୟେକ ସଂଖ୍ୟାର ସମସ୍ତ ଚିହ୍ନର ଗୁଣନ ଦ୍ୱାରା ଗୁଣିତ ହୋଇଥିବା ସଂଖ୍ୟାର ପରିମାଣର ସମୁଦାୟ ଫେରାଇବାକୁ ପଡିବ, ଯାହାକି 1, -1 କିମ୍ବା 0 ଦ୍ୱାରା ପ୍ରତିନିଧିତ୍ୱ ହୋଇଥାଏ _ ଟିପ୍ପଣୀଃ ଖାଲି arr ପାଇଁ କୌଣସିଟି ଫେରାନ୍ତୁ ନାହିଁ _ ଉଦାହରଣଃ >>> prod_signs(((std::vector<long>{(long) 1, (long) 2, (long) 2, (long) -4}))) 9 >>> prod_signs(std::vector<long>({(long) 0, (long) 1}))) 0 >>> prod_signs((std::vector<long>(())) std::nopt\nstd::optional<long> prod_signs(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n\nstd::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum_magnitudes = 0;\n  long product_of_signs = 1;\n  for (long num : arr) {\n    sum_magnitudes += std::abs(num);\n    if (num > 0) {\n      product_of_signs *= 1;\n    } else if (num < 0) {\n      product_of_signs *= -1;\n    } else {\n      product_of_signs *= 0;\n    }\n  }\n  return sum_magnitudes * product_of_signs;\n}",
        "test": "}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n"
    },
    {
        "task_id": "HumanEval/129",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// N ଧାଡି ଏବଂ N ସ୍ତମ୍ଭ (N >= 2) ଏବଂ ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା k ସହିତ ଏକ ଗ୍ରୀଡକୁ ଦିଆଯାଇଥାଏ, ଗ୍ରୀଡର ପ୍ରତ୍ୟେକ କୋଷରେ ଏକ ମୂଲ୍ୟ ରହିଥାଏ _ [1, N * N] ଅନ୍ତର୍ଭୁକ୍ତ ରେ ଥିବା ପ୍ରତ୍ୟେକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଗ୍ରୀଡର କୋଷରେ ଠିକ୍ ଥରେ ଦେଖାଯାଏ _ ଆପଣଙ୍କୁ ଗ୍ରୀଡରେ k ଲମ୍ବର ସର୍ବନିମ୍ନ ପଥ ଖୋଜିବାକୁ ପଡିବ _ ଆପଣ ଯେକୌଣସି କୋଷରୁ ଆରମ୍ଭ କରିପାରିବେ, ଏବଂ ପ୍ରତ୍ୟେକ ପଦକ୍ଷେପରେ ଆପଣ ଯେକୌଣସି ପଡୋଶୀ କୋଷକୁ ଯାଇପାରିବେ, ଅନ୍ୟ ଶବ୍ଦରେ, ଆପଣ ଯେକୌଣସି କୋଷକୁ ଯାଇପାରିବେ ଯାହା ଆପଣଙ୍କ ସାମ୍ପ୍ରତିକ କୋଷ ସହିତ ଏକ କଡ଼କୁ ଅଂଶୀଦାର କରନ୍ତି _ ଦୟାକରି ଧ୍ୟାନ ଦିଅନ୍ତୁ ଯେ k ଲମ୍ବର ପଥ ଅର୍ଥାତ୍ k କୋଷ ପରିଦର୍ଶନ କରିବା (ଅବଶ୍ୟକ ଭାବରେ ଭିନ୍ନ ନୁହେଁ) _ ଆପଣ ଗ୍ରୀଡରୁ ବାହାରକୁ ଯାଇପାରିବେ ନାହିଁ _ ଏକ ପଥ A (ଲମ୍ବ k) କୁ ପଥ B (ଲମ୍ବ k) ଠାରୁ କମ୍ ବୋଲି ବିବେଚନା କରାଯାଏ ଯଦି A ଏବଂ B (ସେଗୁଡ଼ିକୁ l_stA ଏବଂ l_stB) କୁ ଯାଞ୍ଚ କରିବା ପରେ, l_stA_stA_ଜୀବୀ ଭାଷାଗତ ଭାବରେ l_stB_stB ଠାରୁ କମ୍, ଅନ୍ୟ ଶବ୍ଦରେ, ଆପଣ ଯେକୌଣସି କୋଷରୁ ଆରମ୍ଭ କରିପାରିବେ _ ଏହା ହେଉଛି ଯେକୌଣସି କୋଷର ପଥାର ଏକକ _[i] l_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n",
        "canonical_solutions": "#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n  int n = grid.size();\n  std::vector<long> min_path;\n\n  std::function<void(int, int, std::vector<long>)> dfs = \n    [&](int row, int col, std::vector<long> current_path) {\n    if (current_path.size() == k) {\n      if (min_path.empty() || current_path < min_path) {\n        min_path = current_path;\n      }\n      return;\n    }\n\n    current_path.push_back(grid[row][col]);\n\n    int dr= {-1, 1, 0, 0};\n    int dc= {0, 0, -1, 1};\n\n    for (int i = 0; i < 4; ++i) {\n      int next_row = row + dr[i];\n      int next_col = col + dc[i];\n      if (next_row >= 0 && next_row < n && next_col >= 0 && next_col < n) {\n        dfs(next_row, next_col, current_path);\n      }\n    }\n  };\n\n  for (int start_row = 0; start_row < n; ++start_row) {\n    for (int start_col = 0; start_col < n; ++start_col) {\n      dfs(start_row, start_col, {});\n    }\n  }\n\n  return min_path;\n}",
        "test": "}\nint main() {\n    auto candidate = minPath;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) == (std::vector<long>({(long)1, (long)2, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) == (std::vector<long>({(long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15, (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16, (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1, (long)10, (long)1, (long)10, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10, (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1, (long)7, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) == (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n}\n"
    },
    {
        "task_id": "HumanEval/130",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ସମସ୍ତେ ଫିବୋନାସୀ କ୍ରମାଙ୍କ ବିଷୟରେ ଜାଣିଛନ୍ତି, ଏହାକୁ ଗଣିତଜ୍ଞମାନେ ଗତ ଦୁଇ ଶତାବ୍ଦୀ ମଧ୍ୟରେ ଗଭୀର ଭାବରେ ଅଧ୍ୟୟନ କରିଥିଲେ । ତଥାପି, ଲୋକମାନେ ଯାହା ଜାଣନ୍ତି ନାହିଁ ତାହା ହେଉଛି ଟ୍ରିବୋନାସୀ କ୍ରମାଙ୍କ । ଟ୍ରିବୋନାସୀ କ୍ରମାଙ୍କ ପୁନଃ ଘଟଣାର ପରିଭାଷା ହେଉଛିଃ ତ୍ରି (୧) = ୩ ତ୍ରି (ଏନ) = ୧ + ଏନ / ୨, ଯଦି ଏନ ଯୁଗ୍ମ ଅଟେ । ତ୍ରି (ଏନ) = ତ୍ରି (ଏନ - ୧) + ତ୍ରି (ଏନ - ୨) + ତ୍ରି (ଏନ + ୧), ଯଦି ଏନ ଅଙ୍କ ଅଙ୍କ ଅଙ୍କ ଅଙ୍କ ଅଙ୍କ । ଉଦାହରଣ ସ୍ୱରୂପଃ ତ୍ରି (୨) = ୧ + (୨ / ୨) = ୨ ତ୍ରି (ଏନ - ୪) = ୩ ତ୍ରି (ଏନ - ୩) = ତ୍ରି (ଏନ - ୨) + ତ୍ରି (ଏନ - ୧) + ତ୍ରି (ଏନ - ୪) = ୨ + ୩ = ୮ ଆପଣଙ୍କୁ ଏକ ଅଣ-ନକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଯାଇଛି, ଆପଣଙ୍କୁ ତ୍ରିବୋନାସୀ କ୍ରମାଙ୍କ ପ୍ରଥମ n + 1 ର ଭେକ୍ଟର ଫେରାଇବାକୁ ପଡିବ । ଉଦାହରଣଃ >>> ତ୍ରି (ଏନ - ୩) (ଦଶତୀୟ ଭେକ୍ଟର) (ଦଶତଃ<<< (ଏନ - ୧) (୩, (ଦଶତକ) (ଦଶତକ) (ଦଶତକ) (ଦଶତକ) (ଦଶତକ) (ଦଶତକ) (ଦଶତକତକ)\nstd::vector<long> tri(long n) {\n",
        "canonical_solutions": "#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::vector<long> tri(long n) {\n  std::vector<long> result;\n  if (n >= 0) {\n    result.push_back(1);\n  }\n  if (n >= 1) {\n    result.push_back(3);\n  }\n  for (long i = 2; i <= n; ++i) {\n    if (i % 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      if (i - 1 >= 0 && i - 2 >= 0 && i + 1 <= n)\n      {\n          result.push_back(result[i-1] + result[i-2] + result[i]);\n      }\n      else if (i - 1 >= 0 && i - 2 >= 0)\n      {\n          result.push_back(result[i-1] + result[i-2]);\n      }\n      else if (i - 1 >= 0)\n      {\n          result.push_back(result[i-1]);\n      }\n      else\n      {\n          result.push_back(0);\n      }\n    }\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
    },
    {
        "task_id": "HumanEval/131",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଗଲା, ଅଙ୍କଗୁଡ଼ିକର ଗୁଣନକୁ ଫେରାଇବ. 0 ଫେରାଇବ ଯଦି ସମସ୍ତ ଅଙ୍କ ଯୁଗ୍ମ ହୋଇଥାଏ. ଉଦାହରଣ ସ୍ୱରୂପଃ >>> ଅଙ୍କଗୁଡ଼ିକ (ସୂଚକ) (୧) (1) >>> ଅଙ୍କଗୁଡ଼ିକ (ସୂଚକ) (୪) (0) >>> ଅଙ୍କଗୁଡ଼ିକ (ସୂଚକ) (୨୩୫) (15)\nlong digits(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong digits(long n) {\n  long product = 1;\n  std::string s = std::to_string(n);\n  bool has_odd = false;\n  for (char c : s) {\n    long digit = c - '0';\n    if (digit % 2 != 0) {\n      product *= digit;\n      has_odd = true;\n    }\n  }\n  if (!has_odd) {\n    return 0;\n  }\n  return product;\n}",
        "test": "}\nint main() {\n    auto candidate = digits;\n    assert(candidate((5)) == (5));\n    assert(candidate((54)) == (5));\n    assert(candidate((120)) == (1));\n    assert(candidate((5014)) == (5));\n    assert(candidate((98765)) == (315));\n    assert(candidate((5576543)) == (2625));\n    assert(candidate((2468)) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/132",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା କେବଳ ବର୍ଗୀକୃତ ବନ୍ଧନୀ ଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଇନପୁଟ୍ ଭାବରେ ଗ୍ରହଣ କରେ. ଫଳନଟି ସତ୍ୟ ଫେରସ୍ତ କରିବା ଉଚିତ ଯଦି ଏବଂ କେବଳ ଯଦି ବନ୍ଧନୀଗୁଡ଼ିକର ଏକ ବୈଧ ଉପକ୍ରମ ଥାଏ ଯେଉଁଠାରେ ଉପକ୍ରମରେ ଅତି କମରେ ଗୋଟିଏ ବନ୍ଧନୀ ଗଣ୍ଠିତ ହୋଇଥାଏ. >>> is_nested(\"[[]]\")) (true) >>> is_nested((\"[]]]]]]]]]][[[[[]\")) (false) >>> is_nested(\"[][]\")) (false) >>> is_nested(\"[]\")) (false) >>> is_nested(\"[[]]\")) (true) >>> is_nested(\"[[]]\") (true)\nbool is_nested(std::string string) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_nested(std::string string) {\n  int balance = 0;\n  bool nested = false;\n  for (char c : string) {\n    if (c == '[') {\n      balance++;\n    } else if (c == ']') {\n      if (balance > 1) {\n        nested = true;\n      }\n      balance--;\n      if (balance < 0) {\n        return false;\n      }\n    }\n  }\n  return balance == 0 && nested;\n}",
        "test": "}\nint main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/133",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ସଂଖ୍ୟା ଭେକ୍ଟର ଦିଆଯାଇଛି. ଆପଣଙ୍କୁ ଦିଆଯାଇଥିବା ଭେକ୍ଟରରେ ବର୍ଗ ସଂଖ୍ୟାଗୁଡ଼ିକର ସମୁଦାୟ ଫେରାଇବାକୁ ପଡିବ, ଭେକ୍ଟରରେ ପ୍ରତ୍ୟେକ ଉପାଦାନକୁ ପ୍ରଥମେ ଉପର int{} ଉପର ସ୍ତର ପର୍ଯ୍ୟନ୍ତ ଘୋଡାଇ ଦିଅନ୍ତୁ. ଉଦାହରଣଃ >>> lst{}: vector<float>{(float) 1.0f, (float) 2.0f, (float) 3.0f}))) (14) >>> lst{}: vector<float>{(float) 1.0f, (float) 4.0f, (float) 9.0f}))) >>> (98) lst{}: vector<float>{(float) 1.0f, (float) 3.0f, (float) 5.0f, (float) 7.0f} (84) >>> lst{}: vector<float>{{{(float) 1.4f, (float) 2.4.0f, (float) 2.0.0f}))) (6) >>> lst{}: vector<float>{(f} (float) 2.4.0f, (float) (6) >>>\nlong sum_squares(std::vector<float> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float num : lst) {\n    long rounded_up = std::ceil(num);\n    sum += rounded_up * rounded_up;\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0f, (float)10000.0f}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f}))) == (1));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2));\n}\n"
    },
    {
        "task_id": "HumanEval/134",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଦିଆଯାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗର ଶେଷ ଅକ୍ଷର ଏକ ଅକ୍ଷରୀୟ ଅକ୍ଷର ଅଟେ ଏବଂ ଏକ ଶବ୍ଦର ଅଂଶ ନୁହେଁ, ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା _ ଟିପ୍ପଣୀଃ \"କଥା\" ହେଉଛି ଅକ୍ଷରଗୁଡିକର ଏକ ଗୋଷ୍ଠୀ ସ୍ପେସ୍ ଦ୍ୱାରା ପୃଥକ _ ଉଦାହରଣଃ >>> ଚେକ୍_ଇଫ_ଲଷ୍ଟ_ଚାର୍_ଇସ୍_ଏ_ଲେଟର (ସ) (ସ) (ଫଲସ) >>> ଚେକ୍_ଇଫ_ଲଷ୍ଟ_ଚାର୍_ଇସ୍_ଏ_ଲେଟର (ସ) (ସ) (ସ) (ସତ) >>> ଚେକ୍_ଇଫ_ଲଷ୍ଟ_ଚାର୍_ଇସ୍_ଏ_ଲେଟର (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ)\nbool check_if_last_char_is_a_letter(std::string txt) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_if_last_char_is_a_letter(std::string txt) {\n  if (txt.empty()) {\n    return false;\n  }\n  if (!isalpha(txt.back())) {\n    return false;\n  }\n  if (txt.length() > 1 && txt[txt.length() - 2] != ' ') {\n    return false;\n  }\n  return true;\n}",
        "test": "}\nint main() {\n    auto candidate = check_if_last_char_is_a_letter;\n    assert(candidate((\"apple\")) == (false));\n    assert(candidate((\"apple pi e\")) == (true));\n    assert(candidate((\"eeeee\")) == (false));\n    assert(candidate((\"A\")) == (true));\n    assert(candidate((\"Pumpkin pie \")) == (false));\n    assert(candidate((\"Pumpkin pie 1\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"eeeee e \")) == (false));\n    assert(candidate((\"apple pie\")) == (false));\n    assert(candidate((\"apple pi e \")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/135",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା ଏକ ଉପାଦାନର ସର୍ବ ବୃହତ ସୂଚକାଙ୍କ ଫେରାଇଥାଏ ଯାହା ଏହାଠାରୁ ତୁରନ୍ତ ପୂର୍ବବର୍ତ୍ତୀ ଉପାଦାନ ସହିତ ସମାନ କିମ୍ବା ଅଧିକ ନୁହେଁ _ ଯଦି ଏପରି କୌଣସି ଉପାଦାନ ନଥାଏ ତେବେ -୧ ଫେରାଇଥାଏ _ ଦିଆଯାଇଥିବା ଭେକ୍ଟରରେ ଡୁପ୍ଲିକେଟ୍ ମୂଲ୍ୟ ରହିବ ନାହିଁ _ ଉଦାହରଣଃ >>> can_arrange(((std::vector<long>({long) 1, (long) 2, (long) 4, (long) 3, (long) 5}))) (3) >>> can_arrange((std::vector<long>{(long) 1, (long) 2, (long) 3}))) (-1)\nlong can_arrange(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong can_arrange(std::vector<long> arr) {\n  for (long i = 1; i < arr.size(); ++i) {\n    if (arr[i] < arr[i - 1]) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "test": "}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) == (-1));\n}\n"
    },
    {
        "task_id": "HumanEval/136",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା ଏକ ଟାପଲ୍ (a, b) ଫେରାଇଥାଏ, ଯେଉଁଠାରେ 'a' ହେଉଛି ନକାରାତ୍ମକ ସଂଖ୍ୟାର ସର୍ବ ବୃହତ ଏବଂ 'b' ହେଉଛି ଭେକ୍ଟରରେ ଥିବା ସକାରାତ୍ମକ ସଂଖ୍ୟାର ସର୍ବ ଛୋଟ। ଯଦି କୌଣସି ନକାରାତ୍ମକ କିମ୍ବା ସକାରାତ୍ମକ ସଂଖ୍ୟାର ନଥାଏ, ତେବେ ସେଗୁଡ଼ିକୁ None ଭାବରେ ଫେରାନ୍ତୁ। ଉଦାହରଣଃ >>> ସର୍ବ ବୃହତ_ସାନ_ସଂଖ୍ୟକଗୁଡ଼ିକ __________ (std::vector<long> (long) 2, (long) 4, (long) 1, (long) 3, (long) 5, (long) 7}))) std::make_tuplest_d::optional<long> (long) std::optional<long> (long) std::optional<long> (long)) std::make_smallest_integers::optional<long> (long)) std::optional<long> (long)) std::optional<long> (long)) std::optional<long> (long)) std::optional<long> (long)) std::optional<long> (long)) std::optional<long> (long)) std::optional<long> (long)) std) std::optional<long> (long>long>) std))\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n#include<tuple>\n#include<vector>\n\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n    std::optional<long> largest_negative = std::nullopt;\n    std::optional<long> smallest_positive = std::nullopt;\n    for (long num : lst) {\n        if (num < 0) {\n            if (!largest_negative.has_value() || num > largest_negative.value()) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            if (!smallest_positive.has_value() || num < smallest_positive.value()) {\n                smallest_positive = num;\n            }\n        }\n    }\n    return std::make_tuple(largest_negative, smallest_positive);\n}",
        "test": "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2, (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7, (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9, 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6, (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n}\n"
    },
    {
        "task_id": "HumanEval/137",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହାକି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା, ଫ୍ଲୋଟ୍, କିମ୍ବା ପ୍ରକୃତ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଷ୍ଟ୍ରିଙ୍ଗ୍ ଗ୍ରହଣ କରେ ଏବଂ ଦିଆଯାଇଥିବା ଭେରିଏବଲ୍ ପ୍ରକାରରେ ବଡ଼ ଭେରିଏବଲ୍ ଫେରାଇଥାଏ. ଯଦି ମୂଲ୍ୟ ସମାନ ହୋଇଥାଏ ତେବେ ନନ୍ ଫେରାଇଥାଏ. ଟିପ୍ପଣୀଃ ଯଦି ପ୍ରକୃତ ସଂଖ୍ୟା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭାବରେ ପ୍ରତିନିଧିତ୍ୱ କରାଯାଏ, ତେବେ ଭାସମାନ ବିନ୍ଦୁ ହୋଇପାରେ . କିମ୍ବା , >>> compare_one(1, 2.5f) 2.5f >>> compare_one(1, \"2,3\") \"2,3\" >>> compare_one(\"5,1\", \"6\") \"6\" >>> compare_one(\"1\", 1) std::nullopt\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n#include<string>\n\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;\n    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }\n    bool operator==(float f) {\n        return f1 == f ;\n    }\n    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;\n    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }\n    bool operator==(float f) {\n        return f1 == f ;\n    }\n    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n\ndouble parse_real(const std::string& s) {\n    std::string temp = s;\n    std::replace(temp.begin(), temp.end(), ',', '.');\n    try {\n        return std::stod(temp);\n    } catch (const std::invalid_argument& e) {\n        return std::numeric_limits<double>::quiet_NaN();\n    } catch (const std::out_of_range& e) {\n        return std::numeric_limits<double>::quiet_NaN();\n    }\n}\n\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\n    if (a.f2.empty() && b.f2.empty()) {\n        if (typeid(a.f0) == typeid(long) && typeid(b.f0) == typeid(long)) {\n            if (a.f0 > b.f0) return Union_long_float_std_string_std_nullopt(a.f0);\n            if (b.f0 > a.f0) return Union_long_float_std_string_std_nullopt(b.f0);\n        } else if (typeid(a.f1) == typeid(float) && typeid(b.f1) == typeid(float)) {\n            if (a.f1 > b.f1) return Union_long_float_std_string_std_nullopt(a.f1);\n            if (b.f1 > a.f1) return Union_long_float_std_string_std_nullopt(b.f1);\n        } else if (typeid(a.f0) == typeid(long) && typeid(b.f1) == typeid(float)) {\n            if (static_cast<float>(a.f0) > b.f1) return Union_long_float_std_string_std_nullopt(a.f0);\n            if (b.f1 > static_cast<float>(a.f0)) return Union_long_float_std_string_std_nullopt(b.f1);\n        } else if (typeid(a.f1) == typeid(float) && typeid(b.f0) == typeid(long)) {\n            if (a.f1 > static_cast<float>(b.f0)) return Union_long_float_std_string_std_nullopt(a.f1);\n            if (static_cast<float>(b.f0) > a.f1) return Union_long_float_std_string_std_nullopt(b.f0);\n        }\n    } else {\n        double val_a, val_b;\n        if (!a.f2.empty()) val_a = parse_real(a.f2);\n        else if (typeid(a.f0) == typeid(long)) val_a = static_cast<double>(a.f0);\n        else val_a = static_cast<double>(a.f1);\n\n        if (!b.f2.empty()) val_b = parse_real(b.f2);\n        else if (typeid(b.f0) == typeid(long)) val_b = static_cast<double>(b.f0);\n        else val_b = static_cast<double>(b.f1);\n\n        if (!std::isnan(val_a) && !std::isnan(val_b)) {\n            if (val_a > val_b) return Union_long_float_std_string_std_nullopt(a);\n            if (val_b > val_a) return Union_long_float_std_string_std_nullopt(b);\n        }\n    }\n    return Union_long_float_std_string_std_nullopt(std::nullopt{});\n}",
        "test": "}\nint main() {\n    auto candidate = compare_one;\n    assert(candidate(1, 2) == 2);\n    assert(candidate(1, 2.5f) == 2.5f);\n    assert(candidate(2, 3) == 3);\n    assert(candidate(5, 6) == 6);\n    assert(candidate(1, \"2,3\") == \"2,3\");\n    assert(candidate(\"5,1\", \"6\") == \"6\");\n    assert(candidate(\"1\", \"2\") == \"2\");\n    assert(candidate(\"1\", 1) == std::nullopt);\n}\n"
    },
    {
        "task_id": "HumanEval/138",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n କୁ 4 ଟି ଯୁକ୍ତାତ୍ମକ ଯୁକ୍ତ ସଂଖ୍ୟାର ସମୁଦାୟ ଭାବରେ ଲେଖାଯାଇପାରିବ କି ନାହିଁ ତାହା ମୂଲ୍ୟାଙ୍କନ କରନ୍ତୁ _ ଉଦାହରଣ >>> is_equal_to_sum_even ({}) (ମିଥ୍ୟା) >>> is_equal_to_sum_even ({}) (ମିଥ୍ୟା) >>> is_equal_to_sum_even ({}) (ଠିକ୍)\nbool is_equal_to_sum_even(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_equal_to_sum_even(long n) {\n    if (n <= 6 || n % 2 != 0) {\n        return false;\n    }\n    return true;\n}",
        "test": "}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/139",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ବ୍ରାଜିଲୀୟ ଫ୍ୟାକ୍ଟୋରିଆଲକୁ ନିମ୍ନଲିଖିତ ଭାବରେ ବ୍ୟାଖ୍ୟା କରାଯାଇଛି: ବ୍ରାଜିଲୀୟ_ଫ୍ୟାକ୍ଟୋରିଆଲ (n) = n! * (n-1)! * (n-2)! * ... * 1! ଯେଉଁଠାରେ n > 0 ଉଦାହରଣ ସ୍ୱରୂପ: >>> ବିଶେଷ_ଫ୍ୟାକ୍ଟୋରିଆଲ (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n\nlong special_factorial(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong factorial(long k) {\n    long res = 1;\n    for (long i = 2; i <= k; ++i) {\n        res *= i;\n    }\n    return res;\n}\n\nlong special_factorial(long n) {\n    if (n <= 0) {\n        return 1;\n    }\n    long result = 1;\n    for (long i = 1; i <= n; ++i) {\n        result *= factorial(i);\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/140",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଟେକ୍ସଟ ଦିଆଗଲା, ସେଥିରେ ଥିବା ସମସ୍ତ ସ୍ପେସକୁ ଅଣ୍ଡରସ୍କୋର ସହିତ ବଦଳାନ୍ତୁ, ଏବଂ ଯଦି ଏକ ଷ୍ଟ୍ରିଙ୍ଗରେ 2 ରୁ ଅଧିକ କ୍ରମିକ ସ୍ପେସ ଅଛି, ତେବେ ସମସ୍ତ କ୍ରମିକ ସ୍ପେସକୁ - >>> fix_spaces (((\"ଉଦାହରଣ\") ସହିତ ବଦଳାନ୍ତୁ) (\"ଉଦାହରଣ\") >>> fix_spaces (((\"ଉଦାହରଣ 1\")) (\"ଉଦାହରଣ_1\") >>> fix_spaces (((\"ଉଦାହରଣ 2\")) (\"_ଉଦାହରଣ_2\") >>> fix_spaces (((\"ଉଦାହରଣ 3\")) (\"_ଉଦାହରଣ-3\")\nstd::string fix_spaces(std::string text) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    int space_count = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            space_count++;\n        } else {\n            if (space_count == 1) {\n                result += '_';\n            } else if (space_count > 1) {\n                result += '-';\n            }\n            result += c;\n            space_count = 0;\n        }\n    }\n    if (space_count == 1 && !result.empty() && result.back() != '_') {\n        result += '_';\n    } else if (space_count > 1 && !result.empty() && result.back() != '-') {\n        result += '-';\n    } else if (space_count > 0 && result.empty()) {\n        if (space_count > 2) result += '-';\n        else if (space_count == 1) result += '_';\n    } else if (space_count == 1 && result.empty()) {\n        result += '_';\n    }\n\n    std::string trimmed_result = \"\";\n    bool non_space_found = false;\n    for (char c : result) {\n        if (c != ' ') {\n            non_space_found = true;\n            trimmed_result += c;\n        } else if (non_space_found) {\n            trimmed_result += c;\n        }\n    }\n\n    while (!trimmed_result.empty() && trimmed_result.front() == '_') {\n        trimmed_result.erase(trimmed_result.begin());\n    }\n    while (!trimmed_result.empty() && trimmed_result.back() == '_') {\n        trimmed_result.pop_back();\n    }\n     while (!trimmed_result.empty() && trimmed_result.front() == '-') {\n        trimmed_result.erase(trimmed_result.begin());\n    }\n    while (!trimmed_result.empty() && trimmed_result.back() == '-') {\n        trimmed_result.pop_back();\n    }\n\n    std::string final_result = \"\";\n    space_count = 0;\n    for (char c : trimmed_result) {\n        if (c == '_') {\n            space_count++;\n        } else {\n            if (space_count == 1) {\n                final_result += '_';\n            } else if (space_count > 1) {\n                final_result += '-';\n            }\n            final_result += c;\n            space_count = 0;\n        }\n    }\n    if (space_count == 1) {\n        final_result += '_';\n    } else if (space_count > 1) {\n        final_result += '-';\n    }\n\n    return final_result;\n}",
        "test": "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
    },
    {
        "task_id": "HumanEval/141",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା ଏକ ଫାଇଲ ନାମକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ନେଇଥାଏ, ଏବଂ ଯଦି ଫାଇଲ ନାମ ବୈଧ ହୋଇଥାଏ, ଏବଂ ଅନ୍ୟଥା 'ନା' ଫେରାଇଥାଏ _ ଏକ ଫାଇଲ ନାମ ବୈଧ ବୋଲି ବିବେଚନା କରାଯାଏ ଯଦି ଏବଂ କେବଳ ଯଦି ସମସ୍ତ ନିମ୍ନଲିଖିତ ସର୍ତ୍ତ ପୂରଣ ହୋଇଥାଏ _ - ଫାଇଲ ନାମରେ ତିନୋଟି ଅଙ୍କ ('0'-'9') ରୁ ଅଧିକ ହେବା ଉଚିତ ନୁହେଁ _ - ଫାଇଲ ନାମରେ ସଠିକ୍ ଭାବରେ ଗୋଟିଏ ବିନ୍ଦୁ '_' ଅଛି _ - ବିନ୍ଦୁ ପୂର୍ବରୁ ସବଷ୍ଟ୍ରିଙ୍ଗ ଖାଲି ହେବା ଉଚିତ ନୁହେଁ, ଏବଂ ଏହା ଲାଟିନ ଆଲଫାବେଟର ଅକ୍ଷର ('a'-'z' ଏବଂ 'A'Z'-) ସହିତ ଆରମ୍ଭ ହୁଏ _ ବିନ୍ଦୁ ପରେ ସବଷ୍ଟ୍ରିଙ୍ଗ ଏହିଗୁଡ଼ିକ ମଧ୍ୟରୁ ଗୋଟିଏ ହେବା ଉଚିତଃ ['txt', 'exe', 'll'] ଉଦାହରଣଃ >>> file_name_check\"{\"ଉଦାହରଣଃ{\"txt\")) (\"ହଁ\") >>> file_name\"{\"ଉଦାହରଣଃ{\"d1\") (\"ନା\")\nstd::string file_name_check(std::string file_name) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string file_name_check(std::string file_name) {\n    int digit_count = 0;\n    int dot_count = 0;\n    size_t dot_pos = std::string::npos;\n\n    for (size_t i = 0; i < file_name.length(); ++i) {\n        if (isdigit(file_name[i])) {\n            digit_count++;\n        } else if (file_name[i] == '.') {\n            dot_count++;\n            dot_pos = i;\n        }\n    }\n\n    if (digit_count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n\n    if (dot_pos == 0 || dot_pos == file_name.length() - 1) {\n        return \"No\";\n    }\n\n    std::string name_part = file_name.substr(0, dot_pos);\n    std::string ext_part = file_name.substr(dot_pos + 1);\n\n    if (name_part.empty() || !isalpha(name_part[0])) {\n        return \"No\";\n    }\n\n    if (ext_part == \"txt\" || ext_part == \"exe\" || ext_part == \"dll\") {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}",
        "test": "}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) == (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n    assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"_f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
    },
    {
        "task_id": "HumanEval/142",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \" ଏହି ଫଳନଟି ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଭେକ୍ଟର ନେବ. ଭେକ୍ଟରରେ ଥିବା ସମସ୍ତ ଏଣ୍ଟ୍ରି ପାଇଁ, ଫଳନଟି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଏଣ୍ଟ୍ରିକୁ ବର୍ଗ କରିବ ଯଦି ଏହାର ଇଣ୍ଡେକ୍ସ 3 ର ଗୁଣକ ଅଟେ ଏବଂ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଏଣ୍ଟ୍ରିକୁ ଘନ କରିବ ଯଦି ଏହାର ଇଣ୍ଡେକ୍ସ 4 ର ଗୁଣକ ଅଟେ ଏବଂ 3 ର ଗୁଣକ ନୁହେଁ। ଫଳନଟି ଭେକ୍ଟରରେ ଥିବା ଏଣ୍ଟ୍ରିଗୁଡ଼ିକୁ ପରିବର୍ତ୍ତନ କରିବ ନାହିଁ ଯାହାର ଇଣ୍ଡେକ୍ସ 3 କିମ୍ବା 4 ର ଗୁଣକ ନୁହେଁ। ଫଳନଟି ସମସ୍ତ ଏଣ୍ଟ୍ରିଗୁଡିକର ସମୁଦାୟ ଫେରାଇବ _ ଉଦାହରଣଃ >>> lst (long({(long) 1, (long) 2, (long) 3})) >>> lst ((long)) >>> lst ({(long) -1, (long) -5, (long) 2, (long) -1, (long) -5}))\nlong sum_squares(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong sum_squares(std::vector<long> lst) {\n    long sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)9}))) == (14));\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1}))) == (9));\n    assert(candidate((std::vector<long>({(long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1}))) == (-3));\n    assert(candidate((std::vector<long>({(long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))) == (-126));\n    assert(candidate((std::vector<long>({(long)-56, (long)-99, (long)1, (long)0, (long)-2}))) == (3030));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)-1}))) == (0));\n    assert(candidate((std::vector<long>({(long)-16, (long)-9, (long)-2, (long)36, (long)36, (long)26, (long)-20, (long)25, (long)-40, (long)20, (long)-4, (long)12, (long)-26, (long)35, (long)37}))) == (-14196));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)17, (long)-1, (long)-15, (long)13, (long)-1, (long)14, (long)-14, (long)-12, (long)-5, (long)14, (long)-14, (long)6, (long)13, (long)11, (long)16, (long)16, (long)4, (long)10}))) == (-1448));\n}\n"
    },
    {
        "task_id": "HumanEval/143",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ବାକ୍ୟକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ବାକ୍ୟଖଣ୍ଡ ଦିଆଯାଏ, ବାକ୍ୟରେ କିଛି ଶବ୍ଦ ଅନ୍ତର ଥାଏ, ଏବଂ ଆପଣଙ୍କୁ ଏକ ବାକ୍ୟଖଣ୍ଡ ଫେରାଇବାକୁ ପଡିବ ଯେଉଁଥିରେ ମୂଳ ବାକ୍ୟର ଶବ୍ଦ ଅଛି, ଯାହାର ଲମ୍ବ ଅଶୂର ସଂଖ୍ୟା, ନୂତନ ବାକ୍ୟଖଣ୍ଡରେ ଥିବା ଶବ୍ଦଗୁଡ଼ିକର କ୍ରମ ମୂଳ ସହିତ ସମାନ ହେବା ଉଚିତ _ ଉଦାହରଣ 1: >>> words_in_sentence (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_sentence) (_in_sentence) (_sentence) (_sentence) (_sentence (_sentence) (_sentence (sentence) (sentence (sentence) (sentence (sentence) (sentence (sentence) (sentence (sentence) (sentence (sentence) (sentence) (sentence (sentence) (sentence (sentence) (sentence) (sentence (sentence) (sentence) (sentence) (sentence) (sentence (sentence) (sentence) (sentence) (sentence) (sentence) (sentence) (sentence) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent)\nstd::string words_in_sentence(std::string sentence) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstd::string words_in_sentence(std::string sentence) {\n    std::string result = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
    },
    {
        "task_id": "HumanEval/144",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଏକ ଫଙ୍କସନ୍ କାର୍ଯ୍ୟକାରୀ କରିବା ଯାହା x * n ଅଭିବ୍ୟକ୍ତିକୁ ସରଳ କରିବ। ଫଙ୍କସନ୍ଟି ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି x * n ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ ମୂଲ୍ୟାଙ୍କନ କରେ ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା _ ଉଭୟ x ଏବଂ n, ଏକ ভগ্নাଂଶର ଷ୍ଟ୍ରିଙ୍ଗ୍ ପ୍ରତିନିଧିତ୍ୱ ଅଟେ, ଏବଂ ନିମ୍ନଲିଖିତ ଫର୍ମାଟ୍ ଅଛି, <numerator>/<denominator> ଯେଉଁଠାରେ ଉଭୟ ସଂଖ୍ୟା ଏବଂ ନାମକ ଧନାତ୍ମକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା _ ଆପଣ ଧରି ନେଇପାରିବେ ଯେ x, ଏବଂ n ବୈଧ ভগ্নাଂଶ, ଏବଂ ନାମକ ଭାବରେ ଶୂନ୍ୟ ନାହିଁ _ >>> ସରଳ କରନ୍ତୁ _\nbool simplify(std::string x, std::string n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong gcd(long a, long b) {\n    while (b) {\n        a %= b;\n        std::swap(a, b);\n    }\n    return a;\n}\n\nbool simplify(std::string x, std::string n) {\n    long x_num, x_den, n_num, n_den;\n    size_t slash_pos = x.find('/');\n    x_num = std::stol(x.substr(0, slash_pos));\n    x_den = std::stol(x.substr(slash_pos + 1));\n\n    slash_pos = n.find('/');\n    n_num = std::stol(n.substr(0, slash_pos));\n    n_den = std::stol(n.substr(slash_pos + 1));\n\n    long num = x_num * n_num;\n    long den = x_den * n_den;\n\n    long common_divisor = gcd(num, den);\n    den /= common_divisor;\n\n    return den == 1;\n}",
        "test": "}\nint main() {\n    auto candidate = simplify;\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/6\"), (\"2/1\")) == (false));\n    assert(candidate((\"5/1\"), (\"3/1\")) == (true));\n    assert(candidate((\"7/10\"), (\"10/2\")) == (false));\n    assert(candidate((\"2/10\"), (\"50/10\")) == (true));\n    assert(candidate((\"7/2\"), (\"4/2\")) == (true));\n    assert(candidate((\"11/6\"), (\"6/1\")) == (true));\n    assert(candidate((\"2/3\"), (\"5/2\")) == (false));\n    assert(candidate((\"5/2\"), (\"3/5\")) == (false));\n    assert(candidate((\"2/4\"), (\"8/4\")) == (true));\n    assert(candidate((\"2/4\"), (\"4/2\")) == (true));\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/5\"), (\"1/5\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/145",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଙ୍କସନ ଲେଖନ୍ତୁ ଯାହା ଦ୍ବାରା ଦିଆଯାଇଥିବା ଭେକ୍ଟର ସଂଖ୍ୟା ଗୁଡିକର ଅଙ୍କ ସମୂହ ଅନୁସାରେ କ୍ରମାନୁସାରେ ସର୍ଟ କରାଯାଏ. ନୋଟ: ଯଦି ଏକାଧିକ ଆଇଟମ ଅଛି ଯାହାର ଅଙ୍କ ସମୂହ ସମାନ, ତେବେ ମୂଳ ଭେକ୍ଟରରେ ସେମାନଙ୍କର ସୂଚକାଙ୍କ ଆଧାରରେ ସର୍ଟ କରନ୍ତୁ. ଉଦାହରଣ ସ୍ୱରୂପ: >>> order_by_points((std::vector<long>({long) 1, (long) 11, (long) -1, (long) -1, (long) -12}))) (std::vector<long>({long) -1, (long) -11, (long) -1, (long) -12, (long) 11})) >>> order_by_points((std::vector<long>())) (std::vector<long>(long))\nstd::vector<long> order_by_points(std::vector<long> nums) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong sum_digits(long n) {\n    long sum = 0;\n    std::string s = std::to_string(std::abs(n));\n    for (char c : s) {\n        sum += c - '0';\n    }\n    return sum;\n}\n\nstd::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<std::pair<long, size_t>> indexed_nums;\n    for (size_t i = 0; i < nums.size(); ++i) {\n        indexed_nums.push_back({nums[i], i});\n    }\n\n    std::sort(indexed_nums.begin(), indexed_nums.end(), [](const std::pair<long, size_t>& a, const std::pair<long, size_t>& b) {\n        long sum_a = sum_digits(a.first);\n        long sum_b = sum_digits(b.first);\n        if (sum_a != sum_b) {\n            return sum_a < sum_b;\n        }\n        return a.second < b.second;\n    });\n\n    std::vector<long> result;\n    for (const auto& pair : indexed_nums) {\n        result.push_back(pair.first);\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234, (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) == (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2, (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11}))) == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0, (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76, (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
    },
    {
        "task_id": "HumanEval/146",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ସଂଖ୍ୟା ଭେକ୍ଟରକୁ ଇନପୁଟ୍ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ ଭେକ୍ଟରରେ ଥିବା ତତ୍ତ୍ବ ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ ଯାହା 10 ରୁ ଅଧିକ ଏବଂ ଏକ ସଂଖ୍ୟାର ଉଭୟ ପ୍ରଥମ ଏବଂ ଶେଷ ଅଙ୍କ ଅଙ୍କ (1, 3, 5, 7, 9) ଅଟେ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> specialFilter((std::vector<long>({long) 15, (long) -73, (long) -14, (long) -15}))) (1) >>> specialFilter((std::vector<long>({long) -2, (long) -3, (long) -4, (long) 21, (long) 109} (2))))\nlong specialFilter(std::vector<long> nums) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_odd_digit(char c) {\n    return (c == '1' || c == '3' || c == '5' || c == '7' || c == '9');\n}\n\nlong specialFilter(std::vector<long> nums) {\n    long count = 0;\n    for (long num : nums) {\n        if (std::abs(num) > 10) {\n            std::string s = std::to_string(std::abs(num));\n            if (!s.empty() && is_odd_digit(s.front()) && is_odd_digit(s.back())) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
        "test": "}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43, (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71, (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/147",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆ ଯାଇଛି. ଆପଣଙ୍କୁ ଲମ୍ବ n ର ଏକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଭେକ୍ଟର a ସୃଷ୍ଟି କରିବାକୁ ପଡିବ. ପ୍ରତ୍ୟେକ i (1 ≤ i ≤ n) ପାଇଁ, a[i] = i * i - i + 1 ର ମୂଲ୍ୟ. a ର ଟ୍ରିପଲ୍ସ (a[i], a[j], a[k]) ର ସଂଖ୍ୟା ଫେରାନ୍ତୁ ଯେଉଁଠାରେ i < j < k, ଏବଂ a[i] + a[j] + a[k] ହେଉଛି 3 ର ଗୁଣନ । ଉଦାହରଣ: >>> get_max_triples((5)) (1) ବ୍ୟାଖ୍ୟାଃ a = [1, 3, 7, 13, 21] ଏକମାତ୍ର ବୈଧ ଟ୍ରିପଲ୍ ହେଉଛି (1, 7, 13)\nlong get_max_triples(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong get_max_triples(long n) {\n    if (n < 3) {\n        return 0;\n    }\n    std::vector<long> a(n);\n    for (long i = 0; i < n; ++i) {\n        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n    }\n\n    long count = 0;\n    for (long i = 0; i < n; ++i) {\n        for (long j = i + 1; j < n; ++j) {\n            for (long k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "test": "}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100)) == (53361));\n}\n"
    },
    {
        "task_id": "HumanEval/148",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆମ ସୌରମଣ୍ଡଳରେ ଆଠଟି ଗ୍ରହ ଅଛି: ସୂର୍ଯ୍ୟଙ୍କ ନିକଟତମ ମଙ୍ଗଳ ଗ୍ରହ, ପରବର୍ତ୍ତୀ ଗ୍ରହ ହେଉଛି ଶୁକ୍ର, ତାପରେ ପୃଥିବୀ, ମଙ୍ଗଳ, ବୃହସ୍ପତି, ଶନି, ୟୁରେନସ୍, ନେପଚୁନ୍ । ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଦୁଇଟି ଗ୍ରହ ନାମକୁ ଗ୍ରହ 1 ଏବଂ ଗ୍ରହ 2 ଭାବରେ ଗ୍ରହଣ କରେ । ଫଳନଟି ସୂର୍ଯ୍ୟଙ୍କ ନିକଟତା ଅନୁଯାୟୀ ସର୍ଟ ହୋଇଥିବା ଗ୍ରହ 1 ଏବଂ ଗ୍ରହ 2 ର କକ୍ଷ ମଧ୍ୟରେ ଅବସ୍ଥିତ ସମସ୍ତ ଗ୍ରହକୁ ନେଇ ଏକ ଟାପଲ୍ ଫେରାଇବ । ଯଦି ଗ୍ରହ 1 କିମ୍ବା ଗ୍ରହ 2 ସଠିକ୍ ଗ୍ରହ ନାମ ନୁହେଁ ତେବେ ଫଳନଟି ଏକ ଖାଲି ଟାପଲ୍ ଫେରାଇବ । ଉଦାହରଣ >>> bf((\"ଜୁବ\"), (\"ନ\")) (std::vector<std::string>{(std::string) \" (Saturn\", (std::string) \"Uranus\"})) >>> bf(\"Earth\"), (\"Mercury\") (std::vector<std::string>) (Jupiter:Venus) (std::vector:Venus) (Earth) (std::std::string) (Sup (string) \" (\", \" (\", \"\") (\", \" (\",) ()) (\",) ()) (\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    auto it1 = std::find(planets.begin(), planets.end(), planet1);\n    auto it2 = std::find(planets.begin(), planets.end(), planet2);\n\n    if (it1 == planets.end() || it2 == planets.end()) {\n        return {};\n    }\n\n    int index1 = std::distance(planets.begin(), it1);\n    int index2 = std::distance(planets.begin(), it2);\n\n    if (index1 == index2) {\n        return {};\n    }\n\n    int start = std::min(index1, index2) + 1;\n    int end = std::max(index1, index2);\n\n    std::vector<std::string> result;\n    for (int i = start; i < end; ++i) {\n        result.push_back(planets[i]);\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n}\n"
    },
    {
        "task_id": "HumanEval/149",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଗୋଟିଏ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭେକ୍ଟର କୁ ଏକ ପାରାମିଟର ଭାବରେ ଗ୍ରହଣ କରେ, ସେହି ଷ୍ଟ୍ରିଙ୍ଗ୍ କୁ ହଟାଇ ଦିଏ ଯାହାର ଅଜଣା ଲମ୍ବ ଅଛି, ଏବଂ ଫଳାଫଳ ଭେକ୍ଟରକୁ ଏକ ସର୍ଟ କରାଯାଇଥିବା କ୍ରମରେ ଫେରାଇ ଦିଏ, ଭେକ୍ଟର ସର୍ବଦା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭେକ୍ଟର ଅଟେ ଏବଂ କେବେ ବି ଏକ ସଂଖ୍ୟା ଭେକ୍ଟର ନୁହେଁ, ଏବଂ ଏଥିରେ ଡୁପ୍ଲିକେଟ୍ ରହିପାରେ _ ଭେକ୍ଟରର କ୍ରମରେ ପ୍ରତ୍ୟେକ ଶବ୍ଦର ଲମ୍ବ ଅନୁଯାୟୀ ବୃଦ୍ଧି ହେବା ଉଚିତ, ଏବଂ ଆପଣ ସେହି ନିୟମ ଅନୁଯାୟୀ ସର୍ଟ ହୋଇଥିବା ଭେକ୍ଟରକୁ ଫେରାଇ ଦେବା ଉଚିତ _ ଯଦି ଦୁଇଟି ଶବ୍ଦର ଲମ୍ବ ସମାନ, ଭେକ୍ଟରକୁ ଆଲଫାବେଟିକ୍ ଭାବରେ ସର୍ଟ କରନ୍ତୁ _ ଫଳନକୁ ସର୍ଟ ହୋଇଥିବା କ୍ରମରେ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭେକ୍ଟର ଫେରାଇଦେବା ଉଚିତ _ ଆପଣ ଧରି ନେଇପାରିବେ ଯେ ସମସ୍ତ ଶବ୍ଦର ଲମ୍ବ ସମାନ ହେବ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> list_sort{\"}std::stdvector<stdstring>{\"}std::stdstring\"{\"} (a\"} (a\"}) (a\" (a\"a\"a\"a\"a\"a) (a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\"a\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n    std::vector<std::string> even_length_strings;\n    for (const std::string& s : lst) {\n        if (s.length() % 2 == 0) {\n            even_length_strings.push_back(s);\n        }\n    }\n\n    std::sort(even_length_strings.begin(), even_length_strings.end(), [](const std::string& a, const std::string& b) {\n        if (a.length() != b.length()) {\n            return a.length() < b.length();\n        }\n        return a < b;\n    });\n\n    return even_length_strings;\n}",
        "test": "}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\", (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) == (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"aaaa\", (std::string)\"bbbb\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/150",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ସରଳ ପ୍ରୋଗ୍ରାମ ଯାହା x ର ମୂଲ୍ୟ ଫେରାଇଥାଏ ଯଦି n ଏକ ପ୍ରଧାନ ସଂଖ୍ୟା ଏବଂ y ର ମୂଲ୍ୟ ଫେରାଇଥାଏ ଅନ୍ୟଥା _ ଉଦାହରଣଃ >>> x_or_y((7), (34), (12)) (34) >>> x_or_y(15), (8), (5) (5)\nlong x_or_y(long n, long x, long y) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    for (long i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nlong x_or_y(long n, long x, long y) {\n    if (is_prime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}",
        "test": "}\nint main() {\n    auto candidate = x_or_y;\n    assert(candidate((7), (34), (12)) == (34));\n    assert(candidate((15), (8), (5)) == (5));\n    assert(candidate((3), (33), (5212)) == (33));\n    assert(candidate((1259), (3), (52)) == (3));\n    assert(candidate((7919), (-1), (12)) == (-1));\n    assert(candidate((3609), (1245), (583)) == (583));\n    assert(candidate((91), (56), (129)) == (129));\n    assert(candidate((6), (34), (1234)) == (1234));\n    assert(candidate((1), (2), (0)) == (0));\n    assert(candidate((2), (2), (0)) == (2));\n}\n"
    },
    {
        "task_id": "HumanEval/151",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଭେକ୍ଟର ସଂଖ୍ୟା ଦେଇ, ଭେକ୍ଟରରେ ଥିବା ସଂଖ୍ୟାଗୁଡ଼ିକର ବର୍ଗର ସମୁଦାୟକୁ ଫେରାନ୍ତୁ ଯାହା ଅଜଣା ଅଟେ _ ନକାରାତ୍ମକ କିମ୍ବା ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକୁ ଅଣଦେଖା କରନ୍ତୁ _ >>> double_the_difference ({(((std::vector<float> ({(long) 1, (long) 3, (long) 2, (long) 0}))) (10) >>> double_the_difference ({(((vector<float> ({(long) -1, (long) -2, (long) 0})) (0) >>> double_the_difference ({((std::vector<float> ({(long) -9, (long) -2)))) (81) >>> double_the_difference ({(((std::vector<float> ({(long) -0)))) (0) ଯଦି ନିବେଶ ଭେକ୍ଟରଟି ଖାଲି, ତେବେ 0 ଫେରାନ୍ତୁ _\nlong double_the_difference(std::vector<float> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong double_the_difference(std::vector<float> lst) {\n    long sum_of_squares = 0;\n    for (float num : lst) {\n        if (num > 0 && static_cast<long>(num) == num && static_cast<long>(num) % 2 != 0) {\n            sum_of_squares += static_cast<long>(num) * static_cast<long>(num);\n        }\n    }\n    return sum_of_squares;\n}",
        "test": "}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0f, (float)4.0f}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1f, (float)0.2f, (float)0.3f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2f, (float)3.0f, (float)5.0f}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165));\n}\n"
    },
    {
        "task_id": "HumanEval/152",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ମୁଁ ଭାବୁଛି ଆମେ ସମସ୍ତେ ସେହି ଅନୁଭବକୁ ମନେ ରଖିଛୁ ଯେତେବେଳେ କିଛି ଦୀର୍ଘ ପ୍ରତୀକ୍ଷିତ ଘଟଣାର ଫଳାଫଳ ଶେଷରେ ଜଣା ପଡିଥାଏ _ ସେହି ମୁହୂର୍ତ୍ତରେ ଆପଣଙ୍କ ପାଖରେ ଥିବା ଭାବନା ଏବଂ ଚିନ୍ତାଧାରା ନିଶ୍ଚିତ ଭାବରେ ନୋଟ୍ କରିବା ଏବଂ ତୁଳନା କରିବା ପାଇଁ ଉପଯୁକ୍ତ _ ଆପଣଙ୍କ କାର୍ଯ୍ୟ ହେଉଛି ଜଣେ ବ୍ୟକ୍ତି ଅନେକ ମ୍ୟାଚ୍ ର ଫଳାଫଳକୁ ସଠିକ୍ ଭାବରେ ଅନୁମାନ କରିଛନ୍ତି କି ନାହିଁ ତାହା ନିର୍ଣ୍ଣୟ କରିବା _ ଆପଣଙ୍କୁ ସମାନ ଲମ୍ବର ସ୍କୋର ଏବଂ ଅନୁମାନର ଦୁଇଟି ଭେକ୍ଟର ଦିଆଯାଇଛି, ଯେଉଁଠାରେ ପ୍ରତ୍ୟେକ ସୂଚକ ଏକ ମ୍ୟାଚ୍ ଦେଖାଏ _ ସମାନ ଲମ୍ବର ଭେକ୍ଟର ଫେରାନ୍ତୁ ଯାହା ପ୍ରତ୍ୟେକ ଅନୁମାନ କେତେ ଦୂରରେ ଅଛି ତାହା ଦର୍ଶାଏ _ ଯଦି ସେମାନେ ସଠିକ୍ ଅନୁମାନ କରିଛନ୍ତି, ମୂଲ୍ୟ 0 ଅଟେ, ଏବଂ ଯଦି ନୁହେଁ, ମୂଲ୍ୟ ହେଉଛି ଅନୁମାନ ଏବଂ ସ୍କୋର ମଧ୍ୟରେ ସମ୍ପୂର୍ଣ୍ଣ ପାର୍ଥକ୍ୟ _ ଉଦାହରଣଃ >>> (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n    std::vector<long> diff;\n    for (size_t i = 0; i < game.size(); ++i) {\n        diff.push_back(std::abs(game[i] - guess[i]));\n    }\n    return diff;\n}",
        "test": "}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n}\n"
    },
    {
        "task_id": "HumanEval/153",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ଶ୍ରେଣୀ ର ନାମ (ଏକ ଷ୍ଟ୍ରିଙ୍ଗ) ଏବଂ ଏକ୍ସଟେନସନ ର ଭେକ୍ଟର ଦିଆଯିବ. ଏକ୍ସଟେନସନ କୁ ଶ୍ରେଣୀ ରେ ଅତିରିକ୍ତ ଶ୍ରେଣୀ ଲୋଡ କରିବା ପାଇଁ ବ୍ୟବହାର କରାଯିବ. ଏକ୍ସଟେନସନ ର ଶକ୍ତି ଏହିପରି ହେବ: CAP କୁ ଏକ୍ସଟେନସନ ର ନାମ ରେ ଥିବା ବଡ଼ ଅକ୍ଷର ର ସଂଖ୍ୟା କୁହନ୍ତୁ, ଏବଂ SM କୁ ଏକ୍ସଟେନସନ ର ନାମ ରେ ଥିବା ଛୋଟ ଅକ୍ଷର ର ସଂଖ୍ୟା କୁହନ୍ତୁ, ଶକ୍ତି ଫ୍ରାକସନ CAP - SM ଦ୍ୱାରା ଦିଆଯାଏ. ଆପଣଙ୍କୁ ସବୁଠାରୁ ଶକ୍ତିଶାଳୀ ଏକ୍ସଟେନସନ କୁ ଖୋଜିବା ଉଚିତ ଏବଂ ଏହି ଫର୍ମାଟରେ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ କୁ ଫେରାଇ ଦେବା ଉଚିତ: ClassName.StrongestExtensionName. ଯଦି ସମାନ ଶକ୍ତି ସହିତ ଦୁଇଟି କିମ୍ବା ଅଧିକ ଏକ୍ସଟେନସନ ଅଛି, ତେବେ ଆପଣଙ୍କୁ ଭେକ୍ଟର ରେ ପ୍ରଥମେ ଆସୁଥିବା ଏକ୍ସଟେନସନ କୁ ବାଛିବା ଉଚିତ. ଉଦାହରଣ ସ୍ୱରୂପ, ଯଦି ଆପଣଙ୍କୁ \"Slices\" ଶ୍ରେଣୀ ଏବଂ ଏକ୍ସଟେନସନର ଭେକ୍ଟର ଭାବରେ ଦିଆଯାଏ: ['SE'viviSliCes','Cheese', 'StuFfed'] ତେବେ ଆପଣ 'Slices.viSliCes' କୁ ଫେରାଇ ଦେବା ଉଚିତ, କାରଣ 'SliCes'::::st:myst:myst:myst:SliCliCes::st:myst:myst:SliC::st:myst:SliSliSliSliS:st:S:st:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nint calculate_strength(const std::string& extension) {\n    int cap_count = 0;\n    int sm_count = 0;\n    for (char c : extension) {\n        if (isupper(c)) {\n            cap_count++;\n        } else if (islower(c)) {\n            sm_count++;\n        }\n    }\n    return cap_count - sm_count;\n}\n\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n    if (extensions.empty()) {\n        return class_name;\n    }\n\n    std::string strongest_extension = extensions[0];\n    int max_strength = calculate_strength(extensions[0]);\n\n    for (size_t i = 1; i < extensions.size(); ++i) {\n        int current_strength = calculate_strength(extensions[i]);\n        if (current_strength > max_strength) {\n            max_strength = current_strength;\n            strongest_extension = extensions[i];\n        }\n    }\n\n    return class_name + \".\" + strongest_extension;\n}",
        "test": "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"}))) == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"}))) == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"}))) == (\"Sp.671235\"));\n}\n"
    },
    {
        "task_id": "HumanEval/154",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ୨ଟି ଶବ୍ଦ ଦିଆ ଯାଇଛି. ଆପଣଙ୍କୁ ସତ୍ୟ ଫେରାଇବାକୁ ହେବ ଯଦି ଦ୍ବିତୀୟ ଶବ୍ଦ କିମ୍ବା ଏହାର କୌଣସି ଘୂର୍ଣ୍ଣନ ପ୍ରଥମ ଶବ୍ଦରେ ଏକ ସବଷ୍ଟ୍ରିଙ୍ଗ >>> cycpattern_check((\"abcd\"), (\"abd\")) (false) >>> cycpattern_check((\"hello\"), (\"ell\")) (true) >>> cycpattern_check(\"whassup\"), (\"psus\")) (false) >>> cycpattern_check(\"abab\"), (\"baa\")) (true) >>> cycpattern_(check\"efef\"), (\"eeff\") (false) >>> cycpattern_check((\"himens\"), (\"simen\") (true)\nbool cycpattern_check(std::string a, std::string b) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool cycpattern_check(std::string a, std::string b) {\n    if (b.empty()) {\n        return true;\n    }\n    if (a.length() < b.length()) {\n        return false;\n    }\n    for (int i = 0; i < b.length(); ++i) {\n        std::rotate(b.begin(), b.begin() + 1, b.end());\n        if (a.find(b) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = cycpattern_check;\n    assert(candidate((\"xyzw\"), (\"xyw\")) == (false));\n    assert(candidate((\"yello\"), (\"ell\")) == (true));\n    assert(candidate((\"whattup\"), (\"ptut\")) == (false));\n    assert(candidate((\"efef\"), (\"fee\")) == (true));\n    assert(candidate((\"abab\"), (\"aabb\")) == (false));\n    assert(candidate((\"winemtt\"), (\"tinem\")) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/155",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଦିଆଗଲା. ଏକ ଟାପଲ୍ ଫେରାଇଥାଏ ଯେଉଁଥିରେ ଯଥାକ୍ରମେ ଯୁଗ୍ମ ଏବଂ ଅଙ୍କ ସଂଖ୍ୟା ଥାଏ. ଉଦାହରଣଃ >>> even_odd_count((-12)) (std::make_tuple(1, 1)) >>> even_odd_count((123)) (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<tuple>\n\nstd::tuple<long, long> even_odd_count(long num) {\n    long even_count = 0;\n    long odd_count = 0;\n    std::string s = std::to_string(std::abs(num));\n    for (char c : s) {\n        int digit = c - '0';\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return std::make_tuple(even_count, odd_count);\n}",
        "test": "}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
    },
    {
        "task_id": "HumanEval/156",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଦିଆଗଲା, ଏହାର ରୋମାନ୍ ସଂଖ୍ୟା ସମକକ୍ଷକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଭାବରେ ପ୍ରାପ୍ତ କରନ୍ତୁ, ଏବଂ ଏହାକୁ ଛୋଟ ଅକ୍ଷରରେ ଫେରାନ୍ତୁ _ ପ୍ରତିବନ୍ଧକଃ 1 <= num <= 1000 ଉଦାହରଣଃ >>> int_to_mini_roman((19)) (\"xix\") >>> int_to_mini_roman((152)) (\"clii\") >>> int_to_mini_roman(426)) (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string int_to_mini_roman(long number) {\n    std::string roman = \"\";\n    std::vector<std::pair<int, std::string>> roman_map = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n\n    for (const auto& pair : roman_map) {\n        while (number >= pair.first) {\n            roman += pair.second;\n            number -= pair.first;\n        }\n    }\n    return roman;\n}",
        "test": "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19)) == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251)) == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500)) == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4)) == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90)) == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532)) == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994)) == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n"
    },
    {
        "task_id": "HumanEval/157",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ତ୍ରିଭୁଜର ତିନି ପାର୍ଶ୍ବ ର ଲମ୍ବ ଦିଆଗଲା. ଯଦି ତିନି ପାର୍ଶ୍ବ ଏକ ସଠିକ କୋଣ ବିଶିଷ୍ଟ ତ୍ରିଭୁଜ ଗଠନ କରନ୍ତି, ତେବେ ସତ୍ୟ ଫେରାଇବ, ଅନ୍ୟଥା ମିଥ୍ୟା। ଏକ ସଠିକ କୋଣ ବିଶିଷ୍ଟ ତ୍ରିଭୁଜ ହେଉଛି ଏକ ତ୍ରିଭୁଜ ଯେଉଁଥିରେ ଏକ କୋଣ ସଠିକ କୋଣ କିମ୍ବା 90 ଡିଗ୍ରୀ ଅଟେ। ଉଦାହରଣଃ >>> right_angle_triangle((3), (4), (5)) (true) >>> right_angle_triangle(1), (2), (3)) (false)\nbool right_angle_triangle(long a, long b, long c) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool right_angle_triangle(long a, long b, long c) {\n    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n}",
        "test": "}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/158",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଭେକ୍ଟର ଗ୍ରହଣ କରେ. ଭେକ୍ଟରରେ ବିଭିନ୍ନ ଶବ୍ଦ ଅଛି. ସର୍ବାଧିକ ଅନନ୍ୟ ଅକ୍ଷର ସହିତ ଶବ୍ଦକୁ ଫେରାନ୍ତୁ. ଯଦି ଏକାଧିକ ଷ୍ଟ୍ରିଙ୍ଗରେ ସର୍ବାଧିକ ଅନନ୍ୟ ଅକ୍ଷର ଅଛି, ତେବେ ଶବ୍ଦକୋଷୀୟ କ୍ରମରେ ପ୍ରଥମେ ଆସୁଥିବା ଏକକୁ ଫେରାନ୍ତୁ. >>> find_max(std::vector<std::string>({(std::string) \"name\", (std::string) \"of\", (std::string) \"string\"}))) (\"string\") >>> find_max{(std::vector<std::string>({(std::string) \"name\", (std::string) \"enam\") >>> find_max{(std::vector<std::string>{((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\nstd::string find_max(std::vector<std::string> words) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nint count_unique_chars(const std::string& s) {\n    std::set<char> unique_chars;\n    for (char c : s) {\n        unique_chars.insert(c);\n    }\n    return unique_chars.size();\n}\n\nstd::string find_max(std::vector<std::string> words) {\n    if (words.empty()) {\n        return \"\";\n    }\n\n    std::string max_unique_word = words[0];\n    int max_unique_count = count_unique_chars(words[0]);\n\n    for (size_t i = 1; i < words.size(); ++i) {\n        int current_unique_count = count_unique_chars(words[i]);\n        if (current_unique_count > max_unique_count) {\n            max_unique_count = current_unique_count;\n            max_unique_word = words[i];\n        } else if (current_unique_count == max_unique_count && words[i] < max_unique_word) {\n            max_unique_word = words[i];\n        }\n    }\n    return max_unique_word;\n}",
        "test": "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
    },
    {
        "task_id": "HumanEval/159",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣ ଭୋକିଲା ବିଲେଇ, ଏବଂ ଆପଣ ପୂର୍ବରୁ ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ସଂଖ୍ୟକ ଗାଜର ଖାଇଛନ୍ତି, କିନ୍ତୁ ବର୍ତ୍ତମାନ ଆପଣଙ୍କୁ ଦିନର ଭୋଜନ ସମ୍ପୂର୍ଣ୍ଣ କରିବା ପାଇଁ ଅଧିକ ଗାଜର ଖାଇବା ଆବଶ୍ୟକ _ ଆପଣ ଏକ ଭେକ୍ଟର ଫେରାଇବେ [ ଆପଣଙ୍କ ଭୋଜନ ପରେ ଖାଇଥିବା ଗାଜରର ସମୁଦାୟ ସଂଖ୍ୟା, ଆପଣଙ୍କ ଭୋଜନ ପରେ ବାକି ଗାଜରର ସଂଖ୍ୟା ] ଯଦି ପର୍ଯ୍ୟାପ୍ତ ବାକି ଗାଜର ନଥାଏ, ତେବେ ଆପଣ ବାକି ଗାଜର ଖାଇବେ, କିନ୍ତୁ ତଥାପି ଭୋକିଲା ରହିବେ _ ଉଦାହରଣଃ >>> ଖାଇବା __________ (୫), (୬), (୧୦) (std::vector<long>{(() __________ (୧୧, (ଲମ୍ବା) __________ (୪)) >>> ଖାଇବା __________ (୪), (୮), (୯) (std::vector<long>{() __________ (୧୨, (୧) __________ (୧)) >>> ଖାଇବା __________ (୧୧), (୧୦) __________ (୧୦) __________ (୧୧) __________ (୦)) >>> ଖାଇବା __________ (୧୧୧) __________ (୨), (୫) (std::vector<<<d::vector> (୭) __________ (ଲମ୍ବା) __________ (୭) __________ (୭) __________ (୭) __________) __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ __________ _________\nstd::vector<long> eat(long number, long need, long remaining) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> eat(long number, long need, long remaining) {\n    long eaten = 0;\n    long left = remaining;\n    long to_eat = need;\n\n    if (left >= to_eat) {\n        eaten = to_eat;\n        left -= to_eat;\n    } else {\n        eaten = left;\n        left = 0;\n    }\n\n    return {(long)number + eaten, left};\n}",
        "test": "}\nint main() {\n    auto candidate = eat;\n    assert(candidate((5), (6), (10)) == (std::vector<long>({(long)11, (long)4})));\n    assert(candidate((4), (8), (9)) == (std::vector<long>({(long)12, (long)1})));\n    assert(candidate((1), (10), (10)) == (std::vector<long>({(long)11, (long)0})));\n    assert(candidate((2), (11), (5)) == (std::vector<long>({(long)7, (long)0})));\n    assert(candidate((4), (5), (7)) == (std::vector<long>({(long)9, (long)2})));\n    assert(candidate((4), (5), (1)) == (std::vector<long>({(long)5, (long)0})));\n}\n"
    },
    {
        "task_id": "HumanEval/160",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଦୁଇ ଭେକ୍ଟର ଅପରେଟର ଏବଂ ଅପରେଣ୍ଡ ଦିଆଗଲା । ପ୍ରଥମ ଭେକ୍ଟରରେ ମୌଳିକ ବୀଜାଣୁ କାର୍ଯ୍ୟ ଅଛି, ଏବଂ ଦ୍ୱିତୀୟ ଭେକ୍ଟର ହେଉଛି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ଭେକ୍ଟର । ବୀଜାଣୁ ଅଭିବ୍ୟକ୍ତି ନିର୍ମାଣ କରିବା ପାଇଁ ଦୁଇଟି ଦିଆଯାଇଥିବା ଭେକ୍ଟର ବ୍ୟବହାର କରନ୍ତୁ ଏବଂ ଏହି ଅଭିବ୍ୟକ୍ତିର ମୂଲ୍ୟାଙ୍କନ ଫେରାନ୍ତୁ । ମୌଳିକ ବୀଜାଣୁ କାର୍ଯ୍ୟଃ ଯୋଗ (+) ହ୍ରାସ ( ) - ଗୁଣନ ( *) ତଳ ବିଭାଜନ ( // ) ବିସ୍ତାର ( **) ଉଦାହରଣ: ଅପରେଟର['+', '*', '-'] ଭେକ୍ଟର = [2, 3, 4, 5] ଫଳାଫଳ = 2 + 3 * 4 - 5 => ଫଳାଫଳ = 9 ଟିପ୍ପଣୀ: ଅପରେଟର ଭେକ୍ଟରର ଲମ୍ବ ଅପରେଣ୍ଡ ଭେକ୍ଟର ମାଇନସ ୱାନର ଲମ୍ବ ସହିତ ସମାନ _ ଅପରେଣ୍ଡ ହେଉଛି ଅଣ-ନକାରାତ୍ମକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ଭେକ୍ଟର _ ଅପରେଟର ଭେକ୍ଟରରେ ଅତି କମରେ ଗୋଟିଏ ଅପରେଟର ଅଛି, ଏବଂ ଅପରେଣ୍ଡ ଭେକ୍ଟରରେ ଅତି କମରେ ଦୁଇଟି ଅପରେଣ୍ଡ ଅଛି _\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n    std::vector<long> current_operand = operand;\n    std::vector<std::string> current_operator = op;\n\n    auto apply_op = [&](long a, long b, const std::string& o) {\n        if (o == \"+\") return a + b;\n        if (o == \"-\") return a - b;\n        if (o == \"*\") return a * b;\n        if (o == \"//\") return a / b;\n        if (o == \"**\") return static_cast<long>(pow(a, b));\n        return 0L; // Should not happen\n    };\n\n    std::vector<std::string> precedence1 = {\"**\"};\n    std::vector<std::string> precedence2 = {\"*\", \"//\"};\n    std::vector<std::string> precedence3 = {\"+\", \"-\"};\n\n    auto evaluate = [&](const std::vector<std::string>& prec) {\n        size_t i = 0;\n        while (i < current_operator.size()) {\n            bool found = false;\n            for (const auto& o : prec) {\n                if (current_operator[i] == o) {\n                    current_operand[i] = apply_op(current_operand[i], current_operand[i + 1], current_operator[i]);\n                    current_operand.erase(current_operand.begin() + i + 1);\n                    current_operator.erase(current_operator.begin() + i);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                i++;\n            }\n        }\n    };\n\n    evaluate(precedence1);\n    evaluate(precedence2);\n    evaluate(precedence3);\n\n    return current_operand[0];\n}",
        "test": "}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"//\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4}))) == (8));\n}\n"
    },
    {
        "task_id": "HumanEval/161",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଆପଣଙ୍କୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ s ଦିଆ ଯାଇଛି. ଯଦି s[i] ଏକ ଅକ୍ଷର, ତେବେ ଏହାର କେସକୁ ନିମ୍ନରୁ ଉପର କିମ୍ବା ବାମପଟେ ପରିବର୍ତ୍ତନ କରନ୍ତୁ, ଅନ୍ୟଥା ଏହାକୁ ସେମିତି ରଖନ୍ତୁ. ଯଦି ଷ୍ଟ୍ରିଙ୍ଗରେ କୌଣସି ଅକ୍ଷର ନାହିଁ, ତେବେ ଷ୍ଟ୍ରିଙ୍ଗକୁ ପରିବର୍ତ୍ତନ କରନ୍ତୁ. ଫଙ୍କସନକୁ ଫଳାଫଳ ଷ୍ଟ୍ରିଙ୍ଗ ଫେରାଇଦେବା ଉଚିତ. ଉଦାହରଣ >>> solve((\"1234\")) (\"4321\") >>> solve(\"ab\")) (\"AB\") >>> solve(\"#a@C\")) (\"#A@c\")\nstd::string solve(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string solve(std::string s) {\n    bool has_letter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            has_letter = true;\n            break;\n        }\n    }\n\n    if (has_letter) {\n        for (char& c : s) {\n            if (islower(c)) {\n                c = toupper(c);\n            } else if (isupper(c)) {\n                c = tolower(c);\n            }\n        }\n    } else {\n        std::reverse(s.begin(), s.end());\n    }\n    return s;\n}",
        "test": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
    },
    {
        "task_id": "HumanEval/162",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 'text' ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଦିଆଗଲା, ଏହାର md5 ହ୍ୟାଶ୍ ସମକକ୍ଷ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଫେରାଇଦେବେ. ଯଦି 'text' ଏକ ଖାଲି ଷ୍ଟ୍ରିଙ୍ଗ୍, ଫେରାଇଦେବେ None. >>> string_to_md5 ((((\"ହେଲୋ ୱାର୍ଲ୍ଡ\")) \"3e25960a79dbc69b674cd4ec67a72c62\"\nstd::optional<std::string> string_to_md5(std::string text) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include <optional>\n\n#include <openssl/md5.h>\n#include <iomanip>\n#include <sstream>\n\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n\n    std::stringstream ss;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];\n    }\n    return ss.str();\n}",
        "test": "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n"
    },
    {
        "task_id": "HumanEval/163",
        "nl": "ory_Orya",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ଦୁଇଟି ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା a ଏବଂ b ଦିଆଗଲା, a ଏବଂ b ମଧ୍ୟରେ ଥିବା ଯୁଗ୍ମ ଅଙ୍କକୁ ଉଦୟ କ୍ରମରେ ଫେରାଇବ. ଉଦାହରଣ ସ୍ୱରୂପ: >>> generate_integers (((2), (8)) (std::vector<long> (((long) 2, (long) 4, (long) 6, (long) 8})) >>> generate_integers (((8), (2)) (std::vector<long> (((long) 2, (long) 4, (long) 6, (long) 8})) >>> generate_integers (((10), (14)) (std::vector<long> ((())\nstd::vector<long> generate_integers(long a, long b) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> generate_integers(long a, long b) {\n    std::vector<long> result;\n    long start = std::min(a, b);\n    long end = std::max(a, b);\n    for (long i = start; i <= end; ++i) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = generate_integers;\n    assert(candidate((2), (10)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((10), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((132), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((17), (89)) == (std::vector<long>()));\n}\n"
    }
]