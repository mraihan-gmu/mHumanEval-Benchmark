[{"task_id":"HumanEval_0","nl":"dzo_Tibt","pl":"hs","prompt":"--ཚད་གཞི་འདི་ ཚད་གཞི་འདི་ཨིན།--ཁྱོད་ཀྱིས་ཨང་གྲངས་ཀྱི་ཐོ་འདི་ནང་ ཨང་གྲངས་གཉིས་ ཇི་ཇི་ལས་ ཇི་ཇི་གི་ཉེ་སུ་ཡོད་མེད་བརྟག་དཔྱད་འབད།--  >>> hasCloseElements [1.0,2.0,3.0] 0.5\n--  False\n--  >>> hasCloseElements [1.0,2.8,3.0,4.0,5.0,2.0] 0.3\n--  True\nhasCloseElements :: [Float] -> Float -> Bool\nhasCloseElements numbers threshold =","canonical_solution":"hasCloseElements :: [Float] -> Float -> Bool\nhasCloseElements numbers threshold = any (\\(x,y) -> abs (x - y) < threshold) [(a, b) | a <- numbers, b <- numbers, a \/= b]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = hasCloseElements\n  if candidate [1.0,2.0,3.9,4.0,5.0,2.2] 0.3 == True then pure () else error \"assertion failed\"\n  if candidate [1.0,2.0,3.9,4.0,5.0,2.2] 0.05 == False then pure () else error \"assertion failed\"\n  if candidate [1.0,2.0,5.9,4.0,5.0] 0.95 == True then pure () else error \"assertion failed\"\n  if candidate [1.0,2.0,5.9,4.0,5.0] 0.8 == False then pure () else error \"assertion failed\"\n  if candidate [1.0,2.0,3.0,4.0,5.0,2.0] 0.1 == True then pure () else error \"assertion failed\"\n  if candidate [1.1,2.2,3.1,4.1,5.1] 1.0 == True then pure () else error \"assertion failed\"\n  if candidate [1.1,2.2,3.1,4.1,5.1] 0.5 == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_1","nl":"dzo_Tibt","pl":"hs","prompt":"--ནང་བསྐྱོད་ཐིག་ནང་ བར་སྟོང་ཚུ་སྣང་མེད་སྦེ་བཞག་དགོ།--སྡེ་ཚན་སོ་སོ་འདི་ ཚད་ལྡན་ (སྒོ་ཕྱེ་ཡོད་པའི་རྒྱབ་ལག་རེ་རེ་འདི་ ལེགས་ཤོམ་སྦེ་བསྡམས་ཏེ་ཡོདཔ་) དང་ གཅིག་གིས་གཅིག་ལུ་ སྦྲེལ་མ་རྐྱབ་པར་ཡོདཔ་ཨིན།--ཕྲ་རིང་འདི་ནང་ ཕྲ་རིང་གི་མིང་ཚུ་དབྱེ་བ་ཕྱེ་ཞིནམ་ལས་ ཕྲ་རིང་གི་མིང་ཚུ་ལོག་གཏང་།--འ་ནི་ལས་འགན་ནང་ ནང་ཐིག་འདི་ ནང་ཐིག་གི་སྒོ་སྒྲིག་སྡེ་ཚན་ལེ་ཤ་ཡོད་པའི་ string ཅིག་ཨིན། ཁྱོད་ཀྱི་དམིགས་གཏད་འདི་ --  >>> separateParenGroups \"( ) (( )) (( )( ))\"\n--  [\"()\",\"(())\",\"(()())\"]\nseparateParenGroups :: String -> [String]\nseparateParenGroups paren_string =","canonical_solution":"separateParenGroups :: String -> [String]\nseparateParenGroups paren_string = go paren_string 0 [] \"\" []\n  where\n    go [] _ _ current acc = if null current then acc else acc ++ [current]\n    go (x:xs) depth stack current acc\n      | x == ' ' = go xs depth stack current acc\n      | x == '(' = go xs (depth + 1) ('(':stack) (current ++ [x]) acc\n      | x == ')' =\n          let newCurrent = current ++ [x]\n              newDepth = depth - 1\n          in if newDepth == 0\n             then go xs newDepth (tail stack) \"\" (acc ++ [newCurrent])\n             else go xs newDepth (tail stack) newCurrent acc\n      | otherwise = error \"Unexpected character\"","tests":"\nmain :: IO ()\nmain = do\n  let candidate = separateParenGroups\n  if candidate \"(()()) ((())) () ((())()())\" == [\"(()())\",\"((()))\",\"()\",\"((())()())\"] then pure () else error \"assertion failed\"\n  if candidate \"() (()) ((())) (((())))\" == [\"()\",\"(())\",\"((()))\",\"(((())))\"] then pure () else error \"assertion failed\"\n  if candidate \"(()(())((())))\" == [\"(()(())((())))\"] then pure () else error \"assertion failed\"\n  if candidate \"( ) (( )) (( )( ))\" == [\"()\",\"(())\",\"(()())\"] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_2","nl":"dzo_Tibt","pl":"hs","prompt":"--ཨང་གྲངས་ཀྱི་བཅུ་ཆ་ཆ་འདི་སླར་ལོག་འབདཝ་ཨིན།--(ལྷག་ལུས་ཆ་ཤས་འདི་ རྟག་བུ་རང་ ༡ ལས་ཆུང་བ་ཨིན།)--ཨང་གྲངས་ཧྲིལ་བུམ་ (ཨང་གྲངས་སྦོམ་ཤོས་འདི་ བྱིན་ཡོད་པའི་ཨང་གྲངས་ལས་ཆུང་བ་) དང་ཨང་གྲངས་བཅུ་ཆ་ཚུ་ཨིན།--ཌའི་ལོག་གི་ཨང་གྲངས་འདི་ ཌའི་ལོག་གི་ཨང་གྲངས་འདི་ ཌའི་ལོག་གི་ཨང་གྲངས་འདི་ ཌའི་ལོག་གི་ཨང་གྲངས་འདི་ ཌའི་ལོག་གི་ཨང་གྲངས་འདི་ ཌའི་ལོག་གི་ཨང་གྲངས་འདི་ ཌའི་ལོག་གི་ཨང་གྲངས་འདི་ ཌའི་ལོག་གི་ཨང་གྲངས་འདི་ ཌའི་ལོག་གི་ཨང་གྲངས་འདི་ཨིན།--  >>> truncateNumber 3.5\n--  0.5\ntruncateNumber :: Float -> Float\ntruncateNumber number =","canonical_solution":"truncateNumber :: Float -> Float\ntruncateNumber number = number - fromIntegral (floor number)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = truncateNumber\n  if candidate 3.5 == 0.5 then pure () else error \"assertion failed\"\n  if candidate 1.25 == 0.25 then pure () else error \"assertion failed\"\n  if candidate 123.0 == 0.0 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_3","nl":"dzo_Tibt","pl":"hs","prompt":"--དེ་བསྒང་ལས་ལས་ function གིས་ true སླར་ལོག་འབད་དགོཔ་ཨིན། དེ་མེན་པ་ཅིན་ false སླར་ལོག་འབད་དགོཔ་ཨིན།--ཁྱོད་ཀྱི་ལཱ་འདི་ ཚོད་བལྟ་འབད་དགོ འདི་ཡང་ ཚོད་བལྟ་འབད་དགོ--ཁྱོད་ཀྱིས་ དངུལ་ཁང་གི་རྩིས་ཁྲ་ནང་ལས་ དངུལ་བཏོན་དང་བཙུགས་ཀྱི་ལཱ་གི་ཐོ་འདི་ དང་གཅིག་ཁར་འགོ་བཙུགས་འོང་།--  >>> belowZero [1,2,3]\n--  False\n--  >>> belowZero [1,2,(-4),5]\n--  True\nbelowZero :: [Int] -> Bool\nbelowZero operations =","canonical_solution":"belowZero :: [Int] -> Bool\nbelowZero operations = any (< 0) $ scanl (+) 0 operations","tests":"\nmain :: IO ()\nmain = do\n  let candidate = belowZero\n  if candidate [] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,(-3),1,2,(-3)] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,(-4),5,6] == True then pure () else error \"assertion failed\"\n  if candidate [1,(-1),2,(-2),5,(-5),4,(-4)] == False then pure () else error \"assertion failed\"\n  if candidate [1,(-1),2,(-2),5,(-5),4,(-5)] == True then pure () else error \"assertion failed\"\n  if candidate [1,(-2),2,(-2),5,(-5),4,(-4)] == True then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_4","nl":"dzo_Tibt","pl":"hs","prompt":"--MAD = average ཨིན། x - x_mean ཨིན།--སྦུག་རྟགས་དང་ལྟེ་བ་ (གནས་སྟངས་འདི་ནང་ལུ་ མནོ་བསམ་བཏང་སྟེ་)--Mean Absolute Deviation འདི་ སྦྲེལ་མཐུད་ཆ་མཉམ་གྱི་བར་ནའི་བར་ནའི་ཁྱད་པར་ཨིན།--གནས་སྡུད་འདི་ནང་ལུ་ ཚད་གཞི་འདི་ ཚད་གཞི་གི་མཐའ་མར་ཡོདཔ་ཨིན།--ནང་ཐིག་ཨང་གྲངས་ཀྱི་ཐོ་ཡིག་ཅིག་ལུ་ བརྒྱ་ཆ་ཆ་ཆ་མཉམ་གྱི་འགྱུར་ཚད་རྩིས་སྟོནམ་ཨིན།--  >>> meanAbsoluteDeviation [1.0,2.0,3.0,4.0]\n--  1.0\nmeanAbsoluteDeviation :: [Float] -> Float\nmeanAbsoluteDeviation numbers =","canonical_solution":"meanAbsoluteDeviation :: [Float] -> Float\nmeanAbsoluteDeviation numbers = sum absoluteDifferences \/ fromIntegral (length numbers)\n  where\n    mean = sum numbers \/ fromIntegral (length numbers)\n    absoluteDifferences = map (\\x -> abs (x - mean)) numbers","tests":"\nmain :: IO ()\nmain = do\n  let candidate = meanAbsoluteDeviation\n  if candidate [1.0,2.0] == 0.5 then pure () else error \"assertion failed\"\n  if candidate [1.0,2.0,3.0,4.0] == 1.0 then pure () else error \"assertion failed\"\n  if candidate [1.0,2.0,3.0,4.0,5.0] == 1.2 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_5","nl":"dzo_Tibt","pl":"hs","prompt":"--ཌའི་ལོག་ནང་ཐིག་གི་རིམ་པ་གཉིས་ཆ་རའི་བར་ནའི་ 'delimeter' ཨང་གྲངས་བཙུགས་ ≠numbers' --  >>> intersperse [] 4\n--  []\n--  >>> intersperse [1,2,3] 4\n--  [1,4,2,4,3]\nintersperse :: [Int] -> Int -> [Int]\nintersperse numbers delimeter =","canonical_solution":"intersperse :: [Int] -> Int -> [Int]\nintersperse [] _ = []\nintersperse [x] _ = [x]\nintersperse (x:xs) delimeter = x : delimeter : intersperse xs delimeter","tests":"\nmain :: IO ()\nmain = do\n  let candidate = intersperse\n  if candidate [] 7 == [] then pure () else error \"assertion failed\"\n  if candidate [5,6,3,2] 8 == [5,8,6,8,3,8,2] then pure () else error \"assertion failed\"\n  if candidate [2,2,2] 2 == [2,2,2,2,2] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_6","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེར་ན་ (() (()) འདི་ནང་ལུ་ ཚང་བཟོ་ནིའི་གནས་ཚད་གཉིས་ཡོདཔ་དང་ ((())) འདི་ནང་ལུ་ ༣ ཡོདཔ་ཨིན།--སྡེ་ཚན་རེ་རེ་བཞིན་དུ་ལུ་ ནང་ཐིག་གི་ཧེ་མའི་གནས་ཚད་འདི་བཏོན་དགོ།--སྦྲགས་སྦྲགས་ཡོད་པའི་པེརེཊི་སི་ཚུ་ བར་སྟོང་གིས་སོ་སོར་འབད་ཡོད་པའི་སྡེ་ཚན་ལེ་ཤ་ཅིག་ལུ་ ངོ་ཚབ་འབད་མི་ སྐུད་པ་འདི་འགན་ཁུར་འདི་ཨིན།--  >>> parseNestedParens \"(()()) ((())) () ((())()())\"\n--  [2,3,1,3]\nparseNestedParens :: String -> [Int]\nparseNestedParens paren_string =","canonical_solution":"parseNestedParens :: String -> [Int]\nparseNestedParens paren_string = map maxDepth (words paren_string)\n  where\n    maxDepth :: String -> Int\n    maxDepth = go 0 0\n      where\n        go :: Int -> Int -> String -> Int\n        go currentDepth maxDepth [] = maxDepth\n        go currentDepth maxDepth (c:cs)\n          | c == '('  = go (currentDepth + 1) (max currentDepth maxDepth) cs\n          | c == ')'  = go (currentDepth - 1) maxDepth cs\n          | otherwise = go currentDepth maxDepth cs","tests":"\nmain :: IO ()\nmain = do\n  let candidate = parseNestedParens\n  if candidate \"(()()) ((())) () ((())()())\" == [2,3,1,3] then pure () else error \"assertion failed\"\n  if candidate \"() (()) ((())) (((())))\" == [1,2,3,4] then pure () else error \"assertion failed\"\n  if candidate \"(()(())((())))\" == [4] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_7","nl":"dzo_Tibt","pl":"hs","prompt":"--ཌའི་ལོག་ནང་ཐིག་གི་ཐོ་ཡིག་ནང་ལུ་ ཌའི་ལོག་གི་ཐིག་ཡིག་ ཡོད་པའི་ཐིག་ཡིག་ཚུ་རྐྱངམ་ཅིག་ ཌའི་ལོག་ནང་ཐིག་ཡིག་ ཡོད་པའི་ཐིག་ཡིག་ཚུ་ ཌའི་ལོག་ནང་ཐིག་ཡིག་ ཡོད་པའི་ཐིག་ཡིག་ཚུ་ ཡོད་པའི་ཐིག་ཡིག་ཚུ་ ཡོད་པའི་ཐིག་ཡིག་ཚུ་ ཡོད་པའི་ཐིག་ཡིག་ཚུ་--  >>> filterBySubstring [] \"a\"\n--  []\n--  >>> filterBySubstring [\"abc\",\"bacd\",\"cde\",\"array\"] \"a\"\n--  [\"abc\",\"bacd\",\"array\"]\nfilterBySubstring :: [String] -> String -> [String]\nfilterBySubstring strings substring =","canonical_solution":"filterBySubstring :: [String] -> String -> [String]\nfilterBySubstring strings substring = filter (substring `isInfixOf`) strings\n  where isInfixOf = isInfixOf","tests":"\nmain :: IO ()\nmain = do\n  let candidate = filterBySubstring\n  if candidate [] \"john\" == [] then pure () else error \"assertion failed\"\n  if candidate [\"xxx\",\"asd\",\"xxy\",\"john doe\",\"xxxAAA\",\"xxx\"] \"xxx\" == [\"xxx\",\"xxxAAA\",\"xxx\"] then pure () else error \"assertion failed\"\n  if candidate [\"xxx\",\"asd\",\"aaaxxy\",\"john doe\",\"xxxAAA\",\"xxx\"] \"xx\" == [\"xxx\",\"aaaxxy\",\"xxxAAA\",\"xxx\"] then pure () else error \"assertion failed\"\n  if candidate [\"grunt\",\"trumpet\",\"prune\",\"gruesome\"] \"run\" == [\"grunt\",\"prune\"] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_8","nl":"dzo_Tibt","pl":"hs","prompt":"--ཨང་གྲངས་སྟོངམ་འདི་ ༠ དང་ ཨང་གྲངས་སྟོངམ་ཐོན་སྐྱེད་འདི་ ༡ སྦེ་ཆ་མཉམ་འབད་དགོཔ་ཨིན།--སྐར་མ་ ༡༠ དང་ ༡༠ ཚུ་སླར་ལོག་འབདཝ་ཨིན།--  >>> sumProduct []\n--  (0, 1)\n--  >>> sumProduct [1,2,3,4]\n--  (10, 24)\nsumProduct :: [Int] -> (Int, Int)\nsumProduct numbers =","canonical_solution":"sumProduct :: [Int] -> (Int, Int)\nsumProduct numbers = (sum numbers, product numbers)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = sumProduct\n  if candidate [] == (0, 1) then pure () else error \"assertion failed\"\n  if candidate [1,1,1] == (3, 1) then pure () else error \"assertion failed\"\n  if candidate [100,0] == (100, 0) then pure () else error \"assertion failed\"\n  if candidate [3,5,7] == (15, 105) then pure () else error \"assertion failed\"\n  if candidate [10] == (10, 10) then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_9","nl":"dzo_Tibt","pl":"hs","prompt":"--ཤུལ་ཐིག་ནང་--སྐར་མ་གྲངས་སུ་རྩིས་གཞི་བཙུགས་འབད་ཞིནམ་ལས་ ད་ཚུན་གྱི་བར་ན་ཐོབ་མི་ སྐར་མ་གྲངས་སུ་རྩིས་གཞི་བཙུགས་འབད་འོང་།--  >>> rollingMax [1,2,3,2,3,4,2]\n--  [1,2,3,3,3,4,4]\nrollingMax :: [Int] -> [Int]\nrollingMax numbers =","canonical_solution":"rollingMax :: [Int] -> [Int]\nrollingMax = scanl1 max","tests":"\nmain :: IO ()\nmain = do\n  let candidate = rollingMax\n  if candidate [] == [] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4] == [1,2,3,4] then pure () else error \"assertion failed\"\n  if candidate [4,3,2,1] == [4,4,4,4] then pure () else error \"assertion failed\"\n  if candidate [3,2,3,100,3] == [3,3,3,100,100] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_10","nl":"dzo_Tibt","pl":"hs","prompt":"--- ཚད་འཛིན་གྱི་མཐའ་མ་ལུ་ ཚད་འཛིན་གྱི་སྔོན་འཇུག་འདི་བཙུགས་ ཚད་འཛིན་གྱི་ཤུལ་འཇུག་གི་ཧེ་མ་འོང་འོང་།--- ཇི་ཇི་ཨའི་གི་ནང་ཐིག་གི་ཤུལ་མ་གི་ཡིག་འབྲུ་འདི་ ཇི་ཇི་ཨའི་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་ཚུ་ཨིན།--ཨེལ་གོར་ཇི་མིཊི་གི་བསམ་འཆར་འདི་འཇམ་ཏོང་ཏོ་ཨིན།--སྐར་མ་འདི་ནང་ ཕྲང་ཡིག་ཅིག་བཙུགསཔ་ད་ ཕྲང་ཡིག་འདི་ནང་ ཕྲང་ཡིག་ཅིག་བཙུགསཔ་ད་ ཕྲང་ཡིག་འདི་ནང་ ཕྲང་ཡིག་ཅིག་བཙུགསཔ་ད་--  >>> makePalindrome \"\"\n--  \"\"\n--  >>> makePalindrome \"cat\"\n--  \"catac\"\n--  >>> makePalindrome \"cata\"\n--  \"catac\"\nmakePalindrome :: String -> String\nmakePalindrome string =","canonical_solution":"makePalindrome :: String -> String\nmakePalindrome string = string ++ reverse (take (length string - palindromeLength) string)\n  where\n    palindromeLength = longestPalindromicSuffix string\n\nlongestPalindromicSuffix :: String -> Int\nlongestPalindromicSuffix str = maximum [l | l <- [0..length str], isPalindrome (drop l str)]\n\nisPalindrome :: String -> Bool\nisPalindrome s = s == reverse s","tests":"\nmain :: IO ()\nmain = do\n  let candidate = makePalindrome\n  if candidate \"\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"x\" == \"x\" then pure () else error \"assertion failed\"\n  if candidate \"xyz\" == \"xyzyx\" then pure () else error \"assertion failed\"\n  if candidate \"xyx\" == \"xyx\" then pure () else error \"assertion failed\"\n  if candidate \"jerry\" == \"jerryrrej\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_11","nl":"dzo_Tibt","pl":"hs","prompt":"--འ་ནི་ནང་འདྲེན་ཚུ་ནང་ binary XOR འདི་འབད་ཞིནམ་ལས་ གྲུབ་འབྲས་འདི་ string སྦེ་ལོག་གཏང་།--ནང་བསྐྱོད་འདི་ ༡ དང་ ༠ འབད་མི་ཐིག་ཁྲམ་གཉིས་ a དང་ b ཚུ་ཨིན།--  >>> stringXor \"010\" \"110\"\n--  \"100\"\nstringXor :: String -> String -> String\nstringXor a b =","canonical_solution":"stringXor :: String -> String -> String\nstringXor a b = [if x == y then '0' else '1' | (x, y) <- zip a b]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = stringXor\n  if candidate \"111000\" \"101010\" == \"010010\" then pure () else error \"assertion failed\"\n  if candidate \"1\" \"1\" == \"0\" then pure () else error \"assertion failed\"\n  if candidate \"0101\" \"0000\" == \"0101\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_12","nl":"dzo_Tibt","pl":"hs","prompt":"--strings of the same length སླར་ལོག་འབདཝ་ཨིན། ནང་བསྐྱོད་ཐོ་ཡིག་འདི་ སྟོངམ་ཡོད་པ་ཅིན་ Nothing སླར་ལོག་འབདཝ་ཨིན།--string ཚུ་གི་ཐོ་ཡིག་ནང་ལས་ ཚེ་རིང་ཤོས་དེ་སླར་ལོག་འབདཝ་ཨིན། ཇི་ཨེམ་ཨེམ་ཨེམ་ཨེམ་ཨེམ་ཨེམ་ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་ ཨེམ་ཨེམ་--  >>> longest []\n--  Just (Nothing)\n--  >>> longest [\"a\",\"b\",\"c\"]\n--  Just (\"a\")\n--  >>> longest [\"a\",\"bb\",\"ccc\"]\n--  Just (\"ccc\")\nlongest :: [String] -> Maybe String\nlongest strings =","canonical_solution":"longest :: [String] -> Maybe String\nlongest [] = Nothing\nlongest strings = Just $ foldl1 (\\acc x -> if length x > length acc then x else acc) strings","tests":"\nmain :: IO ()\nmain = do\n  let candidate = longest\n  if candidate [] == Just (Nothing) then pure () else error \"assertion failed\"\n  if candidate [\"x\",\"y\",\"z\"] == Just (\"x\") then pure () else error \"assertion failed\"\n  if candidate [\"x\",\"yyy\",\"zzzz\",\"www\",\"kkkk\",\"abc\"] == Just (\"zzzz\") then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_13","nl":"dzo_Tibt","pl":"hs","prompt":"--ཨང་གྲངས་ཧྲིལ་པོ་ a དང་ b གཉིས་ཀྱི་སྤྱིར་བཏང་ཆ་བགོས་སྦོམ་ཤོས་འདི་སླར་ལོག་འབདཝ་ཨིན།--  >>> greatestCommonDivisor 3 5\n--  1\n--  >>> greatestCommonDivisor 25 15\n--  5\ngreatestCommonDivisor :: Int -> Int -> Int\ngreatestCommonDivisor a b =","canonical_solution":"greatestCommonDivisor :: Int -> Int -> Int\ngreatestCommonDivisor a b\n  | b == 0    = a\n  | otherwise = greatestCommonDivisor b (a `mod` b)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = greatestCommonDivisor\n  if candidate 3 7 == 1 then pure () else error \"assertion failed\"\n  if candidate 10 15 == 5 then pure () else error \"assertion failed\"\n  if candidate 49 14 == 7 then pure () else error \"assertion failed\"\n  if candidate 144 60 == 12 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_14","nl":"dzo_Tibt","pl":"hs","prompt":"--སྐར་ཁུང་ནང་ལུ་ ཕྲ་རིང་ལས་ ཕྲ་རིང་ལུ་ཡོད་པའི་ སྔོན་འཇུག་གི་ཐོ་ཡིག་སླར་ལོག་འབདཝ་ཨིན།--  >>> allPrefixes \"abc\"\n--  [\"a\",\"ab\",\"abc\"]\nallPrefixes :: String -> [String]\nallPrefixes string =","canonical_solution":"allPrefixes :: String -> [String]\nallPrefixes string = [take n string | n <- [1 .. length string]]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = allPrefixes\n  if candidate \"\" == [] then pure () else error \"assertion failed\"\n  if candidate \"asdfgh\" == [\"a\",\"as\",\"asd\",\"asdf\",\"asdfg\",\"asdfgh\"] then pure () else error \"assertion failed\"\n  if candidate \"WWW\" == [\"W\",\"WW\",\"WWW\"] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_15","nl":"dzo_Tibt","pl":"hs","prompt":"--༠ ལས་ n ཚུན་གྱི་བར་ནའི་བར་སྟོང་གི་གྲངས་རྩིས་ཚུ་ཡོད་པའི་ string སླར་ལོག་འབདཝ་ཨིན།--  >>> stringSequence 0\n--  \"0\"\n--  >>> stringSequence 5\n--  \"0 1 2 3 4 5\"\nstringSequence :: Int -> String\nstringSequence n =","canonical_solution":"stringSequence :: Int -> String\nstringSequence n = unwords $ map show [0..n]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = stringSequence\n  if candidate 0 == \"0\" then pure () else error \"assertion failed\"\n  if candidate 3 == \"0 1 2 3\" then pure () else error \"assertion failed\"\n  if candidate 10 == \"0 1 2 3 4 5 6 7 8 9 10\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_16","nl":"dzo_Tibt","pl":"hs","prompt":"--ཕྲ་རིང་ཅིག་བྱིན་པ་ཅིན་ འདི་ནང་ལུ་ཡིག་འབྲུ་ག་དེ་ཅིག་ཡོདཔ་ཨིན་ན་འཚོལ་དགོ།--  >>> countDistinctCharacters \"xyzXYZ\"\n--  3\n--  >>> countDistinctCharacters \"Jerry\"\n--  4\ncountDistinctCharacters :: String -> Int\ncountDistinctCharacters string =","canonical_solution":"import Data.Char (toLower)\nimport Data.Set (fromList, size)\n\ncountDistinctCharacters :: String -> Int\ncountDistinctCharacters string = size . fromList $ map toLower string","tests":"\nmain :: IO ()\nmain = do\n  let candidate = countDistinctCharacters\n  if candidate \"\" == 0 then pure () else error \"assertion failed\"\n  if candidate \"abcde\" == 5 then pure () else error \"assertion failed\"\n  if candidate \"abcdecadeCADE\" == 5 then pure () else error \"assertion failed\"\n  if candidate \"aaaaAAAAaaaa\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"Jerry jERRY JeRRRY\" == 5 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_17","nl":"dzo_Tibt","pl":"hs","prompt":"--'High' འདི་ ཀོ་ཝེཊ་ཊར་གྱི་གློག་སྒྲ་ཨིནམ་ད་ གློག་སྒྲ་འདི་ beat གཅིག་ལས་བརྒལ་མི་ལེན་--'o Sa Ri' - ཟླཝ་ཕྱེད་ཀྱི་གློག་སྒྲ་དང་ གློག་སྒྲ་གཉིས་ནང་ཚངམ་ཨིན།--'o' - སྒྲ་དབྱངས་ཀྱི་རྣམ་པ་ཅིག་ཨིན་ འདི་ཡང་ གློག་ཤུགས་བཞི་ལུ་གནས་འོང་།--འདི་ནང་ལུ་ ལོ་རྒྱུས་ཅིག་ཡང་འདུག--མཇུག་མ་བསྡུ་བར་--ཁྱོད་ཀྱི་ལཱ་འདི་ string འདི་དབྱེ་ཞིབ་འབད་དེ་ ཨང་གྲངས་ཚུའི་ཐོ་ཡིག་འདི་སླར་ལོག་འབདཝ་ཨིན།--ཝིན་ཌིང་གི་ཡིག་འབྲུ་འདི་ ཨེས་སི་ཀི་ཨའི་ཡིག་གཟུགས་ནང་ལུ་ སྒྲ་དབྱངས་ཀྱི་ཨང་ཡིག་འདི་ཨིན།--  >>> parseMusic \"o o| .| o| o| .| .| .| .| o o\"\n--  [4,2,1,2,2,1,1,1,1,4,4]\nparseMusic :: String -> [Int]\nparseMusic music_string =","canonical_solution":"parseMusic :: String -> [Int]\nparseMusic music_string = map beats (words music_string)\n  where\n    beats \"o\" = 4\n    beats \"o|\" = 2\n    beats \".|\" = 1\n    beats _ = 0","tests":"\nmain :: IO ()\nmain = do\n  let candidate = parseMusic\n  if candidate \"\" == [] then pure () else error \"assertion failed\"\n  if candidate \"o o o o\" == [4,4,4,4] then pure () else error \"assertion failed\"\n  if candidate \".| .| .| .|\" == [1,1,1,1] then pure () else error \"assertion failed\"\n  if candidate \"o| o| .| .| o o o o\" == [2,2,1,1,4,4,4,4] then pure () else error \"assertion failed\"\n  if candidate \"o| .| o| .| o o| o o|\" == [2,1,2,1,4,2,4,2] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_18","nl":"dzo_Tibt","pl":"hs","prompt":"--སྐར་མ་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་གྱངས་ཁ་འདི་ ག་དེ་མང་མང་ཨིན་ན་འཚོལ་ཏེ་ གྱངས་ཁ་འདི་རྩིས་སྟོནམ་ཨིན།--  >>> howManyTimes \"\" \"a\"\n--  0\n--  >>> howManyTimes \"aaa\" \"a\"\n--  3\n--  >>> howManyTimes \"aaaa\" \"aa\"\n--  3\nhowManyTimes :: String -> String -> Int\nhowManyTimes string substring =","canonical_solution":"howManyTimes :: String -> String -> Int\nhowManyTimes string substring\n  | null substring = 0\n  | otherwise = length . filter isPrefixOfSubstring $ tails string\n  where\n    isPrefixOfSubstring = isPrefixOf substring\n    isPrefixOf :: Eq a => [a] -> [a] -> Bool\n    isPrefixOf prefix str = prefix `isPrefixOf` str","tests":"\nmain :: IO ()\nmain = do\n  let candidate = howManyTimes\n  if candidate \"\" \"x\" == 0 then pure () else error \"assertion failed\"\n  if candidate \"xyxyxyx\" \"x\" == 4 then pure () else error \"assertion failed\"\n  if candidate \"cacacacac\" \"cac\" == 4 then pure () else error \"assertion failed\"\n  if candidate \"john doe\" \"john\" == 1 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_19","nl":"dzo_Tibt","pl":"hs","prompt":"--ཆུང་ཤོས་ལས་སྦོམ་ཤོས་ལུ་རིམ་སྒྲིག་འབད་མི་ ཨང་གྲངས་ཚུ་དང་གཅིག་ཁར་ string སླར་ལོག་འབདཝ་ཨིན།--གདམ་ཁ་ཚུ་ \" ༠\", \" ༡\", \" ༢ \", \" ༣ \", \" ༤ \", \" ༥ \", \" ༦ \", \" ༧ \", \" ༨ \" དང་ \" ༩ \" ཚུ་ཨིན།--ནང་བསྐྱོད་འདི་ ས་སྒོ་ནང་ཐིག་ཡིག་སྦེ་ཆ་སྒྲིག་འབད་ཡོད་པའི་ ཨང་གྲངས་ཚུ་ ' ༠' ལས་ ' ༩' ཚུན་གྱི་གྲངས་སུ་ཨིན།--  >>> sortNumbers \"three one five\"\n--  \"one three five\"\nsortNumbers :: String -> String\nsortNumbers numbers =","canonical_solution":"import Data.List (sort)\nimport Data.Maybe (fromJust)\nimport Data.Map (Map, fromList, lookup)\n\nsortNumbers :: String -> String\nsortNumbers numbers = unwords $ map snd $ sort $ map (\\w -> (fromJust $ lookup w wordToNumber, w)) (words numbers)\n  where\n    wordToNumber :: Map String Int\n    wordToNumber = fromList [(\"zero\", 0), (\"one\", 1), (\"two\", 2), (\"three\", 3), (\"four\", 4),\n                             (\"five\", 5), (\"six\", 6), (\"seven\", 7), (\"eight\", 8), (\"nine\", 9)]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = sortNumbers\n  if candidate \"\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"three\" == \"three\" then pure () else error \"assertion failed\"\n  if candidate \"three five nine\" == \"three five nine\" then pure () else error \"assertion failed\"\n  if candidate \"five zero four seven nine eight\" == \"zero four five seven eight nine\" then pure () else error \"assertion failed\"\n  if candidate \"six five four three two one zero\" == \"zero one two three four five six\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_20","nl":"dzo_Tibt","pl":"hs","prompt":"--གཞན་ཚུ་དང་རིམ་པ་བཞིན་དུ་ལོག་གཏང་ (གྱངས་ཁ་ཉུང་སུ་དང་གྱངས་ཁ་ཆེ་ཤོས་) །--ཌའི་ལོག་ཨང་གྲངས་ (ཉུང་ཤོས་ཨང་གྲངས་གཉིས་) ཡོད་མི་ལས་ ཨང་གྲངས་གཉིས་ གདམ་ཁ་རྐྱབ་སྟེ་ལོག་གཏང་།--  >>> findClosestElements [1.0,2.0,3.0,4.0,5.0,2.2]\n--  (2.0, 2.2)\n--  >>> findClosestElements [1.0,2.0,3.0,4.0,5.0,2.0]\n--  (2.0, 2.0)\nfindClosestElements :: [Float] -> (Float, Float)\nfindClosestElements numbers =","canonical_solution":"findClosestElements :: [Float] -> (Float, Float)\nfindClosestElements numbers = head . foldr1 minByDiff $ zip sortedNumbers (tail sortedNumbers)\n  where\n    sortedNumbers = sort numbers\n    minByDiff (a1, b1) (a2, b2)\n      | abs (a1 - b1) < abs (a2 - b2) = (a1, b1)\n      | otherwise = (a2, b2)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = findClosestElements\n  if candidate [1.0,2.0,3.9,4.0,5.0,2.2] == (3.9, 4.0) then pure () else error \"assertion failed\"\n  if candidate [1.0,2.0,5.9,4.0,5.0] == (5.0, 5.9) then pure () else error \"assertion failed\"\n  if candidate [1.0,2.0,3.0,4.0,5.0,2.2] == (2.0, 2.2) then pure () else error \"assertion failed\"\n  if candidate [1.0,2.0,3.0,4.0,5.0,2.0] == (2.0, 2.0) then pure () else error \"assertion failed\"\n  if candidate [1.1,2.2,3.1,4.1,5.1] == (2.2, 3.1) then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_21","nl":"dzo_Tibt","pl":"hs","prompt":"--དེ་བཟུམ་སྦེ་ ཨང་ཆུང་ཤོས་འདི་ ༠ དང་སྦོམ་ཤོས་འདི་ ༡ ཨིན།--ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཀྱི་ཐོ་འདི་ཐོབ་པ་ཅིན་ (ཉུང་ཤོས་རང་ ཨེ་རེ་གཉིས་ལས་) ཚད་ལྡན་འགྱུར་བཅོས་དེ་ ཐོ་ལུ་ལག་ལེན་འཐབ་དགོ།--  >>> rescaleToUnit [1.0,2.0,3.0,4.0,5.0]\n--  [0.0,0.25,0.5,0.75,1.0]\nrescaleToUnit :: [Float] -> [Float]\nrescaleToUnit numbers =","canonical_solution":"rescaleToUnit :: [Float] -> [Float]\nrescaleToUnit numbers = map (\\x -> (x - minVal) \/ range) numbers\n  where\n    minVal = minimum numbers\n    maxVal = maximum numbers\n    range = maxVal - minVal","tests":"\nmain :: IO ()\nmain = do\n  let candidate = rescaleToUnit\n  if candidate [2.0,49.9] == [0.0,1.0] then pure () else error \"assertion failed\"\n  if candidate [100.0,49.9] == [1.0,0.0] then pure () else error \"assertion failed\"\n  if candidate [1.0,2.0,3.0,4.0,5.0] == [0.0,0.25,0.5,0.75,1.0] then pure () else error \"assertion failed\"\n  if candidate [2.0,1.0,5.0,3.0,4.0] == [0.25,0.0,1.0,0.5,0.75] then pure () else error \"assertion failed\"\n  if candidate [12.0,11.0,15.0,13.0,14.0] == [0.25,0.0,1.0,0.5,0.75] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_23","nl":"dzo_Tibt","pl":"hs","prompt":"--བྱིན་ཡོད་པའི་ཐིག་ཡིག་གི་རིང་ཚད་སླར་ལོག་འབདཝ་ཨིན།--  >>> strlen \"\"\n--  0\n--  >>> strlen \"abc\"\n--  3\nstrlen :: String -> Int\nstrlen string =","canonical_solution":"strlen :: String -> Int\nstrlen string = length string","tests":"\nmain :: IO ()\nmain = do\n  let candidate = strlen\n  if candidate \"\" == 0 then pure () else error \"assertion failed\"\n  if candidate \"x\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"asdasnakj\" == 9 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_24","nl":"dzo_Tibt","pl":"hs","prompt":"--ཁྱོད་ཀྱིས་ཨང་གྲངས་ n ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་སྦོམ་ཤོས་འདི་ n ལས་ཆུང་བ་ཅིག་སྦེ་ དབྱེ་བ་ཕྱེ་མི་ཨང་གྲངས་སྦོམ་ཤོས་འདི་འཚོལ་དགོ།--  >>> largestDivisor 15\n--  5\nlargestDivisor :: Int -> Int\nlargestDivisor n =","canonical_solution":"largestDivisor :: Int -> Int\nlargestDivisor n = head [ x | x <- [n-1, n-2..1], n `mod` x == 0 ]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = largestDivisor\n  if candidate 3 == 1 then pure () else error \"assertion failed\"\n  if candidate 7 == 1 then pure () else error \"assertion failed\"\n  if candidate 10 == 5 then pure () else error \"assertion failed\"\n  if candidate 100 == 50 then pure () else error \"assertion failed\"\n  if candidate 49 == 7 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_25","nl":"dzo_Tibt","pl":"hs","prompt":"--ཨང་གྲངས་འདི་ ཨང་གྲངས་ཆ་མཉམ་གྱི་ཐོན་རིམ་དང་འདྲན་འདྲ་འབད་དགོཔ་ཨིན།--འབྱོར་རྟགས་རེ་རེ་ ཚར་གྲངས་ནང་ཐོ་བཀོད་འབད་དགོཔ་ཨིན།--སྐར་མ་ཆུང་ཤོས་ལས་སྦོམ་ཤོས་ལུ་རིམ་པ་སྒྲིག་ཐོག་ལས་ ཨང་གྲངས་ཧྲིལ་བུའི་གཞི་གྲངས་ཚུའི་ཐོ་ཡིག་སླར་ལོག་འབདཝ་ཨིན།--  >>> factorize 8\n--  [2,2,2]\n--  >>> factorize 25\n--  [5,5]\n--  >>> factorize 70\n--  [2,5,7]\nfactorize :: Int -> [Int]\nfactorize n =","canonical_solution":"factorize :: Int -> [Int]\nfactorize n = factorize' n 2\n  where\n    factorize' 1 _ = []\n    factorize' m f\n      | m `mod` f == 0 = f : factorize' (m `div` f) f\n      | otherwise      = factorize' m (f + 1)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = factorize\n  if candidate 2 == [2] then pure () else error \"assertion failed\"\n  if candidate 4 == [2,2] then pure () else error \"assertion failed\"\n  if candidate 8 == [2,2,2] then pure () else error \"assertion failed\"\n  if candidate 57 == [3,19] then pure () else error \"assertion failed\"\n  if candidate 3249 == [3,3,19,19] then pure () else error \"assertion failed\"\n  if candidate 185193 == [3,3,3,19,19,19] then pure () else error \"assertion failed\"\n  if candidate 20577 == [3,19,19,19] then pure () else error \"assertion failed\"\n  if candidate 18 == [2,3,3] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_26","nl":"dzo_Tibt","pl":"hs","prompt":"--ནང་ཐིག་ནང་བཟུམ་སྦེ་ དབྱེ་བ་ཚུ་བཞག་ནིའི་རིམ་པ་བཞག་དགོ།--རྒྱུན་ལྡན་ཨང་གྲངས་ཀྱི་ཐོ་ཡིག་ནང་ལས་ ཚར་གཅིག་ལས་ལྷག་སྟེ་འོང་མི་ ཨང་གྲངས་ཚུ་བཏོན་གཏང་།--  >>> removeDuplicates [1,2,3,2,4]\n--  [1,3,4]\nremoveDuplicates :: [Int] -> [Int]\nremoveDuplicates numbers =","canonical_solution":"removeDuplicates :: [Int] -> [Int]\nremoveDuplicates numbers = filter (\\x -> count x numbers == 1) numbers\n  where\n    count x = length . filter (== x)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = removeDuplicates\n  if candidate [] == [] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4] == [1,2,3,4] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,2,4,3,5] == [1,4,5] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_27","nl":"dzo_Tibt","pl":"hs","prompt":"--སྐར་ཆ་ཨང་གྲངས་ཀྱི་དོན་ལུ་ ཡིག་འབྲུ་ཆུང་བ་འདི་ ཆེ་ཆུང་ལུ་དང་ ཆེ་ཆུང་འདི་ ཆུང་བ་ལུ་བསྒྱུར་གཏང་།--  >>> flipCase \"Hello\"\n--  \"hELLO\"\nflipCase :: String -> String\nflipCase string =","canonical_solution":"flipCase :: String -> String\nflipCase = map flipChar\n  where\n    flipChar c\n      | c >= 'a' && c <= 'z' = toEnum (fromEnum c - 32)\n      | c >= 'A' && c <= 'Z' = toEnum (fromEnum c + 32)\n      | otherwise = c","tests":"\nmain :: IO ()\nmain = do\n  let candidate = flipCase\n  if candidate \"\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"Hello!\" == \"hELLO!\" then pure () else error \"assertion failed\"\n  if candidate \"These violent delights have violent ends\" == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_28","nl":"dzo_Tibt","pl":"hs","prompt":"--ཝང་གི་ཐོ་ཡིག་ཚུ་ ཚིག་ཡིག་གཅིག་ནང་བསྡོམས་འབད།--  >>> concatenate []\n--  \"\"\n--  >>> concatenate [\"a\",\"b\",\"c\"]\n--  \"abc\"\nconcatenate :: [String] -> String\nconcatenate strings =","canonical_solution":"concatenate :: [String] -> String\nconcatenate strings = concat strings","tests":"\nmain :: IO ()\nmain = do\n  let candidate = concatenate\n  if candidate [] == \"\" then pure () else error \"assertion failed\"\n  if candidate [\"x\",\"y\",\"z\"] == \"xyz\" then pure () else error \"assertion failed\"\n  if candidate [\"x\",\"y\",\"z\",\"w\",\"k\"] == \"xyzwk\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_29","nl":"dzo_Tibt","pl":"hs","prompt":"--ཌའི་ལོག་ནང་ཐིག་ཚུ་ ཚད་འཛིན་འབད་ནིའི་དོན་ལས་ ཚད་འཛིན་འབད་ཡོད་པའི་ཡིག་རྒྱུན་ཚུ་ ཚད་འཛིན་འབད་ཡོད་པའི་ཡིག་རྒྱུན་ཚུ་ ཚད་འཛིན་འབད་ཡོད་པའི་ཡིག་རྒྱུན་ཚུ་ ཚད་འཛིན་འབད་ཡོད་པའི་ཡིག་རྒྱུན་ཚུ་ ཚད་འཛིན་འབད་ཡོད་པའི་ཡིག་རྒྱུན་ཚུ་ ཚད་འཛིན་འབད་ཡོད་པའི་ཡིག་རྒྱུན་ཚུ་ ཚད་འཛིན་འབད་ཡོད་པའི་ཡིག་རྒྱུན་ཚུ་ ཚད་འཛིན་འབད་ཡོད་པའི་ཡིག་རྒྱུན་ཚུ་--  >>> filterByPrefix [] \"a\"\n--  []\n--  >>> filterByPrefix [\"abc\",\"bcd\",\"cde\",\"array\"] \"a\"\n--  [\"abc\",\"array\"]\nfilterByPrefix :: [String] -> String -> [String]\nfilterByPrefix strings prefix =","canonical_solution":"filterByPrefix strings prefix = filter (isPrefixOf prefix) strings\n  where\n    isPrefixOf pfx str = take (length pfx) str == pfx","tests":"\nmain :: IO ()\nmain = do\n  let candidate = filterByPrefix\n  if candidate [] \"john\" == [] then pure () else error \"assertion failed\"\n  if candidate [\"xxx\",\"asd\",\"xxy\",\"john doe\",\"xxxAAA\",\"xxx\"] \"xxx\" == [\"xxx\",\"xxxAAA\",\"xxx\"] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_30","nl":"dzo_Tibt","pl":"hs","prompt":"--སྐར་མ་ནང་ ཨང་གྲངས་ཚུའི་ནང་ ནུས་པ་ཅན་རྐྱངམ་ཅིག་ལོག་གཏང་།--  >>> getPositive [(-1),2,(-4),5,6]\n--  [2,5,6]\n--  >>> getPositive [5,3,(-5),2,(-3),3,9,0,123,1,(-10)]\n--  [5,3,2,3,9,123,1]\ngetPositive :: [Int] -> [Int]\ngetPositive l =","canonical_solution":"getPositive :: [Int] -> [Int]\ngetPositive l = filter (> 0) l","tests":"\nmain :: IO ()\nmain = do\n  let candidate = getPositive\n  if candidate [(-1),(-2),4,5,6] == [4,5,6] then pure () else error \"assertion failed\"\n  if candidate [5,3,(-5),2,3,3,9,0,123,1,(-10)] == [5,3,2,3,3,9,123,1] then pure () else error \"assertion failed\"\n  if candidate [(-1),(-2)] == [] then pure () else error \"assertion failed\"\n  if candidate [] == [] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_31","nl":"dzo_Tibt","pl":"hs","prompt":"--ཌའི་ལོག་འདི་ ཨང་གྲངས་ངོ་མ་ཅིག་ཨིན་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན།--  >>> isPrime 6\n--  False\n--  >>> isPrime 101\n--  True\n--  >>> isPrime 11\n--  True\n--  >>> isPrime 13441\n--  True\n--  >>> isPrime 61\n--  True\n--  >>> isPrime 4\n--  False\n--  >>> isPrime 1\n--  False\nisPrime :: Int -> Bool\nisPrime n =","canonical_solution":"isPrime :: Int -> Bool\nisPrime n\n  | n <= 1 = False\n  | n == 2 = True\n  | even n = False\n  | otherwise = not (any (\\x -> n `mod` x == 0) [3,5..floor (sqrt (fromIntegral n))])","tests":"\nmain :: IO ()\nmain = do\n  let candidate = isPrime\n  if candidate 6 == False then pure () else error \"assertion failed\"\n  if candidate 101 == True then pure () else error \"assertion failed\"\n  if candidate 11 == True then pure () else error \"assertion failed\"\n  if candidate 13441 == True then pure () else error \"assertion failed\"\n  if candidate 61 == True then pure () else error \"assertion failed\"\n  if candidate 4 == False then pure () else error \"assertion failed\"\n  if candidate 1 == False then pure () else error \"assertion failed\"\n  if candidate 5 == True then pure () else error \"assertion failed\"\n  if candidate 11 == True then pure () else error \"assertion failed\"\n  if candidate 17 == True then pure () else error \"assertion failed\"\n  if candidate 85 == False then pure () else error \"assertion failed\"\n  if candidate 77 == False then pure () else error \"assertion failed\"\n  if candidate 255379 == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_33","nl":"dzo_Tibt","pl":"hs","prompt":"--ཚད་གཞི་ཚུ་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་--l' འདི་ ༣ ལུ་མི་བཏུབ་པའི་བརྡ་སྟོན་ནང་ l དང་མཚུངས་པ་ཨིནམ་དང་ འདི་ཡང་ ༣ ལུ་མི་བཏུབ་པའི་བརྡ་སྟོན་ནང་ གྱི་གནས་གོང་ཚུ་འདྲན་འདྲ་ཨིན།--འ་ནི་ལས་འགན་འདི་གིས་ ཤོག་ལེབ་ཅིག་ལེན་ཏེ་ འདི་བཟུམ་ཅིག་སྦེ་ལོག་འབདཝ་ཨིན།--  >>> sortThird [1,2,3]\n--  [1,2,3]\n--  >>> sortThird [5,6,3,4,8,9,2]\n--  [2,6,3,4,8,9,5]\nsortThird :: [Int] -> [Int]\nsortThird l =","canonical_solution":"sortThird :: [Int] -> [Int]\nsortThird l = map selectElem indexed\n  where\n    indexed = zip [0..] l\n    thirdIndicesElems = [elem | (i, elem) <- indexed, i `mod` 3 == 0]\n    sortedThirdElems = sortedElems thirdIndicesElems\n    sortedElems = id -- or List.sort if imported\n    selectElem (i, x)\n      | i `mod` 3 == 0 = head sortedThirdElems\n      | otherwise = x\n    replaceSortedElem xs sorted = map selectElem indexed\n      where\n        replaceElem i (x:xs)\n          | i == 0 = x:xs\n          | otherwise = replaceElem (i - 1) xs\n        selectElem (i, x)\n          | i `mod` 3 == 0 = head (replaceElem (i `div` 3) sortedThirdElems)\n          | otherwise = x","tests":"\nmain :: IO ()\nmain = do\n  let candidate = sortThird\n  if candidate [5,6,3,4,8,9,2] == [2,6,3,4,8,9,5] then pure () else error \"assertion failed\"\n  if candidate [5,8,3,4,6,9,2] == [2,8,3,4,6,9,5] then pure () else error \"assertion failed\"\n  if candidate [5,6,9,4,8,3,2] == [2,6,9,4,8,3,5] then pure () else error \"assertion failed\"\n  if candidate [5,6,3,4,8,9,2,1] == [2,6,3,4,8,9,5,1] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_34","nl":"dzo_Tibt","pl":"hs","prompt":"--ཌའི་ལོག་འདི་གིས་ གྱངས་ཁ་རྐྱབས་ཡོད་པའི་ཐོ་ཡིག་ནང་ལུ་ དབྱེ་བ་ཕྱེ་ཡོད་པའི་ཆ་ཤས་ཚུ་ལོག་འབདཝ་ཨིན།--  >>> unique [5,3,5,2,3,3,9,0,123]\n--  [0,2,3,5,9,123]\nunique :: [Int] -> [Int]\nunique l =","canonical_solution":"unique :: [Int] -> [Int]\nunique l = sort $ nub l\n  where\n    -- | Remove duplicate elements from a list.\n    nub :: (Eq a) => [a] -> [a]\n    nub [] = []\n    nub (x:xs) = x : nub (filter (\/= x) xs)\n\n    -- | Sort a list of elements (using QuickSort algorithm).\n    sort :: (Ord a) => [a] -> [a]\n    sort [] = []\n    sort (x:xs) =\n      let smallerSorted = sort [a | a <- xs, a <= x]\n          biggerSorted = sort [a | a <- xs, a > x]\n      in  smallerSorted ++ [x] ++ biggerSorted","tests":"\nmain :: IO ()\nmain = do\n  let candidate = unique\n  if candidate [5,3,5,2,3,3,9,0,123] == [0,2,3,5,9,123] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_35","nl":"dzo_Tibt","pl":"hs","prompt":"--སྐར་མ་འདི་ནང་ ཚད་འཛིན་འབད་ཡོད་པའི་ ཕྲ་རིང་འདི་སླར་ལོག་འབདཝ་ཨིན།--  >>> maxElement [1,2,3]\n--  3\n--  >>> maxElement [5,3,(-5),2,(-3),3,9,0,123,1,(-10)]\n--  123\nmaxElement :: [Int] -> Int\nmaxElement l =","canonical_solution":"maxElement :: [Int] -> Int\nmaxElement [] = error \"List cannot be empty\"\nmaxElement (x:xs) = maxElementHelper xs x\n  where\n    maxElementHelper [] currentMax = currentMax\n    maxElementHelper (y:ys) currentMax = maxElementHelper ys (max y currentMax)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = maxElement\n  if candidate [1,2,3] == 3 then pure () else error \"assertion failed\"\n  if candidate [5,3,(-5),2,(-3),3,9,0,124,1,(-10)] == 124 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_36","nl":"dzo_Tibt","pl":"hs","prompt":"--ཌི་ཇི་ཨེམ་དེ་ ཨང་གྲངས་ 7 གིས་ ཨང་གྲངས་ n ལས་ཆུང་བ་ནང་ལུ་མཐོང་མི་ ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་འདི་ ༡༡ དང་ ༡༣ ལུ་བགོ་བཤའ་རྐྱབ་ཨིན།--  >>> fizzBuzz 50\n--  0\n--  >>> fizzBuzz 78\n--  2\n--  >>> fizzBuzz 79\n--  3\nfizzBuzz :: Int -> Int\nfizzBuzz n =","canonical_solution":"fizzBuzz :: Int -> Int\nfizzBuzz n = length [x | x <- [1..n-1], (x `mod` 11 == 0 || x `mod` 13 == 0), '7' `elem` show x]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = fizzBuzz\n  if candidate 50 == 0 then pure () else error \"assertion failed\"\n  if candidate 78 == 2 then pure () else error \"assertion failed\"\n  if candidate 79 == 3 then pure () else error \"assertion failed\"\n  if candidate 100 == 3 then pure () else error \"assertion failed\"\n  if candidate 200 == 6 then pure () else error \"assertion failed\"\n  if candidate 4000 == 192 then pure () else error \"assertion failed\"\n  if candidate 10000 == 639 then pure () else error \"assertion failed\"\n  if candidate 100000 == 8026 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_37","nl":"dzo_Tibt","pl":"hs","prompt":"--ཚད་འཛིན་ཚུ་དང་ འདྲ་མཉམ་སྦེ་ཡོད་རུང་ དབྱེ་བ་ཕྱེ་སྟེ་འདུག--l' འདི་ ཌིཌི་ཨེན་ཌི་ནང་ལུ་ l དང་འདྲ་མཉམ་ཨིན་པའི་ཁར་ ཌིཌི་ཨེན་ཌི་ཨེན་ཌི་ནང་ལུ་ ཚད་ཚུ་ཆ་མཉམ་ཨིན།--འ་ནི་ལས་འགན་འདི་གིས་ ཤོག་ལེབ་ཅིག་ལེན་ཏེ་ འདི་བཟུམ་ཅིག་སྦེ་ལོག་འབདཝ་ཨིན།--  >>> sortEven [1,2,3]\n--  [1,2,3]\n--  >>> sortEven [5,6,3,4]\n--  [3,6,5,4]\nsortEven :: [Int] -> [Int]\nsortEven l =","canonical_solution":"sortEven :: [Int] -> [Int]\nsortEven l = merge odds sortedEvens\n  where\n    (odds, evens) = partitionList l\n    sortedEvens = sort evens\n\n    partitionList :: [Int] -> ([Int], [Int])\n    partitionList [] = ([], [])\n    partitionList [x] = ([x], [])\n    partitionList (x:y:xs) = (x:xsOdds, y:xsEvens)\n      where\n        (xsOdds, xsEvens) = partitionList xs\n\n    merge :: [Int] -> [Int] -> [Int]\n    merge [] ys = ys\n    merge (x:xs) [] = x:xs\n    merge (x:xs) (y:ys) = x:y:merge xs ys","tests":"\nmain :: IO ()\nmain = do\n  let candidate = sortEven\n  if candidate [1,2,3] == [1,2,3] then pure () else error \"assertion failed\"\n  if candidate [5,3,(-5),2,(-3),3,9,0,123,1,(-10)] == [(-10),3,(-5),2,(-3),3,5,0,9,1,123] then pure () else error \"assertion failed\"\n  if candidate [5,8,(-12),4,23,2,3,11,12,(-10)] == [(-12),8,3,4,5,2,12,11,23,(-10)] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_39","nl":"dzo_Tibt","pl":"hs","prompt":"--prime_fib གིས་ ཨང་གྲངས་ nth དེ་ ཕི་བཱོན་ཀིཤི་ཨང་གྲངས་ཨིནམ་དང་ དེ་ཡང་ ཨང་གྲངས་ཨང་གྲངས་ཨང་གྲངས་ཨང་གྲངས་ཨིན།--  >>> primeFib 1\n--  2\n--  >>> primeFib 2\n--  3\n--  >>> primeFib 3\n--  5\n--  >>> primeFib 4\n--  13\n--  >>> primeFib 5\n--  89\nprimeFib :: Int -> Int\nprimeFib n =","canonical_solution":"primeFib :: Int -> Int\nprimeFib n = primeFibs !! (n - 1)\n  where\n    primeFibs = filter isPrime fibs\n    fibs = map fst $ iterate (\\(a, b) -> (b, a + b)) (0, 1)\n\nisPrime :: Int -> Bool\nisPrime k\n  | k < 2 = False\n  | k == 2 = True\n  | even k = False\n  | otherwise = null [x | x <- [3,5..upperLimit], k `mod` x == 0]\n  where\n    upperLimit = floor . sqrt $ fromIntegral k","tests":"\nmain :: IO ()\nmain = do\n  let candidate = primeFib\n  if candidate 1 == 2 then pure () else error \"assertion failed\"\n  if candidate 2 == 3 then pure () else error \"assertion failed\"\n  if candidate 3 == 5 then pure () else error \"assertion failed\"\n  if candidate 4 == 13 then pure () else error \"assertion failed\"\n  if candidate 5 == 89 then pure () else error \"assertion failed\"\n  if candidate 6 == 233 then pure () else error \"assertion failed\"\n  if candidate 7 == 1597 then pure () else error \"assertion failed\"\n  if candidate 8 == 28657 then pure () else error \"assertion failed\"\n  if candidate 9 == 514229 then pure () else error \"assertion failed\"\n  if candidate 10 == 433494437 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_40","nl":"dzo_Tibt","pl":"hs","prompt":"--མཉམ་བསྡོམས་དེ་ ༠ དང་གཞན་ན་ False ཨིན་པིན་།--དེ་གི་དོན་ལུ་ ཐོ་ཡིག་ནང་ལུ་ ཁྱད་པར་ཅན་གྱི་ཆ་ཤས་གསུམ་ཡོད་པ་ཅིན་ འདི་ True སླར་ལོག་འབདཝ་ཨིན།--triples_sum_to_zero གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ཅིག་ ནང་བསྐྱོད་འབད་ཡོདཔ་ཨིན།--  >>> triplesSumToZero [1,3,5,0]\n--  False\n--  >>> triplesSumToZero [1,3,(-2),1]\n--  True\n--  >>> triplesSumToZero [1,2,3,7]\n--  False\n--  >>> triplesSumToZero [2,4,(-5),3,9,7]\n--  True\n--  >>> triplesSumToZero [1]\n--  False\ntriplesSumToZero :: [Int] -> Bool\ntriplesSumToZero l =","canonical_solution":"triplesSumToZero :: [Int] -> Bool\ntriplesSumToZero l = any (== 0) [x + y + z | (x:ys) <- tails l, (y:zs) <- tails ys, z <- zs]\n  where\n    tails [] = []\n    tails xs@(_:xs') = xs : tails xs'","tests":"\nmain :: IO ()\nmain = do\n  let candidate = triplesSumToZero\n  if candidate [1,3,5,0] == False then pure () else error \"assertion failed\"\n  if candidate [1,3,5,(-1)] == False then pure () else error \"assertion failed\"\n  if candidate [1,3,(-2),1] == True then pure () else error \"assertion failed\"\n  if candidate [1,2,3,7] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,5,7] == False then pure () else error \"assertion failed\"\n  if candidate [2,4,(-5),3,9,7] == True then pure () else error \"assertion failed\"\n  if candidate [1] == False then pure () else error \"assertion failed\"\n  if candidate [1,3,5,(-100)] == False then pure () else error \"assertion failed\"\n  if candidate [100,3,5,(-100)] == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_41","nl":"dzo_Tibt","pl":"hs","prompt":"--འ་ནི་ལས་འགན་འདི་གིས་ དེ་བཟུམ་གྱི་འཐབ་རྒོལ་གྱི་གྱངས་ཁ་བཏོན་འབདཝ་ཨིན།--ཁོང་གཉིས་མ་རེག་པའི་ཁར་ འགྱོ་དོ་ཡོདཔ་ཨིན་མས།--ཨིན་རུང་ སྣུམ་འཁོར་ཚུ་ གནམ་མེད་ས་མེད་སྒྲིང་སྒྲིང་དང་སྒྲིང་སྒྲིང་ཨིནམ་ལས་ ཁོང་གིས་ འཕྲོ་མཐུད་དེ་ར་ འགྲོ་འགྲུལ་འབད་དོ་ཡོདཔ་ཨིན་མས།--གཡས་ལས་གཡོན་ཁ་ཐུག་འགྱོ་མི་ སྣུམ་འཁོར་ཅིག་གིས་ གཡས་ལས་གཡོན་ཁ་ཐུག་འགྱོ་མི་ སྣུམ་འཁོར་ཅིག་ལུ་ ཐུག་པའི་སྐབས་ཨིན།--སྣུམ་འཁོར་ཆ་མཉམ་ འདི་ཚུ་མགྱོགས་ཚད་གཅིག་སྦེ་འགྱོ་དོ་ སྣུམ་འཁོར་གཉིས་ཅིག་ ཐུག་དོ་ཡོདཔ་སྦེ་སླབ་ཨིན།--ཕྲང་ལམ་འདི་གཡོན་ཁ་ཐུག་འགྱོ་དོ་ཡོདཔ་དང་ སྣུམ་འཁོར་གཉིས་འདི་ ཕྲང་ལམ་འདི་ལས་ ཐག་རིང་ས་ཅིག་ཁར་འགྱོ་དོ་ཡོདཔ་དང་--སྣུམ་འཁོར་ n གིས་ གཡས་ལས་གཡས་ཁ་ཐུག་འགྱོ་དོ་ཡོདཔ་དང་ དེ་བསྒང་ སྣུམ་འཁོར་ n གི་སྡེ་ཚན་སོ་སོ་ཅིག་ --ཚད་མེད་རིང་ཚད་ཀྱི་ཐིག་ཁྲམ་ཅིག་ ཕྲང་ལམ་ཅིག་སྦེ་ སྣང་འཆར་བཀོལ་དགོ།carRaceCollision :: Int -> Int\ncarRaceCollision n =","canonical_solution":"carRaceCollision :: Int -> Int\ncarRaceCollision n = n","tests":"\nmain :: IO ()\nmain = do\n  let candidate = carRaceCollision\n  if candidate 2 == 4 then pure () else error \"assertion failed\"\n  if candidate 3 == 9 then pure () else error \"assertion failed\"\n  if candidate 4 == 16 then pure () else error \"assertion failed\"\n  if candidate 8 == 64 then pure () else error \"assertion failed\"\n  if candidate 10 == 100 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_42","nl":"dzo_Tibt","pl":"hs","prompt":"--ཌའི་ལོག་གི་ཐོ་ཡིག་ནང་ལུ་ ཨེཆ་ཨེམ་ཚུ་ ༡ ལུ་ཡར་སེང་འབད་ཡོདཔ་ཨིན།--  >>> incrList [1,2,3]\n--  [2,3,4]\n--  >>> incrList [5,3,5,2,3,3,9,0,123]\n--  [6,4,6,3,4,4,10,1,124]\nincrList :: [Int] -> [Int]\nincrList l =","canonical_solution":"incrList :: [Int] -> [Int]\nincrList l = map (+1) l","tests":"\nmain :: IO ()\nmain = do\n  let candidate = incrList\n  if candidate [] == [] then pure () else error \"assertion failed\"\n  if candidate [3,2,1] == [4,3,2] then pure () else error \"assertion failed\"\n  if candidate [5,2,5,2,3,3,9,0,123] == [6,3,6,3,4,4,10,1,124] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_43","nl":"dzo_Tibt","pl":"hs","prompt":"--མཉམ་བསྡོམས་དེ་ ༠ དང་གཞན་ན་ False ཨིན་པིན་།--དེ་གི་དོན་ལུ་ ཐོ་བཀོད་ནང་ཁྱད་པར་ཅན་གྱི་ཆ་ཤས་གཉིས་ཡོད་པ་ཅིན་ འདི་ True སླར་ལོག་འབདཝ་ཨིན།--pairs_sum_to_zero གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ཅིག་ ནང་བསྐྱོད་འབད་ཡོདཔ་ཨིན།--  >>> pairsSumToZero [1,3,5,0]\n--  False\n--  >>> pairsSumToZero [1,3,(-2),1]\n--  False\n--  >>> pairsSumToZero [1,2,3,7]\n--  False\n--  >>> pairsSumToZero [2,4,(-5),3,5,7]\n--  True\n--  >>> pairsSumToZero [1]\n--  False\npairsSumToZero :: [Int] -> Bool\npairsSumToZero l =","canonical_solution":"pairsSumToZero :: [Int] -> Bool\npairsSumToZero l = any (\\x -> -x `elem` l) l && (length l > 1)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = pairsSumToZero\n  if candidate [1,3,5,0] == False then pure () else error \"assertion failed\"\n  if candidate [1,3,(-2),1] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,3,7] == False then pure () else error \"assertion failed\"\n  if candidate [2,4,(-5),3,5,7] == True then pure () else error \"assertion failed\"\n  if candidate [1] == False then pure () else error \"assertion failed\"\n  if candidate [(-3),9,(-1),3,2,30] == True then pure () else error \"assertion failed\"\n  if candidate [(-3),9,(-1),3,2,31] == True then pure () else error \"assertion failed\"\n  if candidate [(-3),9,(-1),4,2,30] == False then pure () else error \"assertion failed\"\n  if candidate [(-3),9,(-1),4,2,31] == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_44","nl":"dzo_Tibt","pl":"hs","prompt":"--གཞི་གྲངས་ཚུ་ ༡༠ ལས་ཉུང་ཡོདཔ་ཨིན།--བསྒྱུར་བཅོས་འབད་བའི་ཤུལ་ལས་ string ངོ་ཚབ་ལོག་འབདཝ་ཨིན།--ཌའི་ལོག་གི་ཨང་གྲངས་ x གི་ཨང་གྲངས་གཞི་རྟེན་ལུ་ བསྒྱུར་བཅོས་འབད།--  >>> changeBase 8 3\n--  \"22\"\n--  >>> changeBase 8 2\n--  \"1000\"\n--  >>> changeBase 7 2\n--  \"111\"\nchangeBase :: Int -> Int -> String\nchangeBase x base =","canonical_solution":"changeBase :: Int -> Int -> String\nchangeBase x base\n  | x < base  = show x\n  | otherwise = changeBase (x `div` base) base ++ show (x `mod` base)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = changeBase\n  if candidate 8 3 == \"22\" then pure () else error \"assertion failed\"\n  if candidate 9 3 == \"100\" then pure () else error \"assertion failed\"\n  if candidate 234 2 == \"11101010\" then pure () else error \"assertion failed\"\n  if candidate 16 2 == \"10000\" then pure () else error \"assertion failed\"\n  if candidate 8 2 == \"1000\" then pure () else error \"assertion failed\"\n  if candidate 7 2 == \"111\" then pure () else error \"assertion failed\"\n  if candidate 2 3 == \"2\" then pure () else error \"assertion failed\"\n  if candidate 3 4 == \"3\" then pure () else error \"assertion failed\"\n  if candidate 4 5 == \"4\" then pure () else error \"assertion failed\"\n  if candidate 5 6 == \"5\" then pure () else error \"assertion failed\"\n  if candidate 6 7 == \"6\" then pure () else error \"assertion failed\"\n  if candidate 7 8 == \"7\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_45","nl":"dzo_Tibt","pl":"hs","prompt":"--ཚད་དང་མཐོ་ཚད་སླར་ལོག་འབད་ཡོད་པའི་ས་སྒོ་འདི་གསུམ་ཟུར་ཅིག་ལུ་བྱིན་ནུག--  >>> triangleArea 5 3\n--  7.5\ntriangleArea :: Int -> Int -> Float\ntriangleArea a h =","canonical_solution":"triangleArea :: Int -> Int -> Float\ntriangleArea a h = 0.5 * fromIntegral a * fromIntegral h","tests":"\nmain :: IO ()\nmain = do\n  let candidate = triangleArea\n  if candidate 5 3 == 7.5 then pure () else error \"assertion failed\"\n  if candidate 2 2 == 2.0 then pure () else error \"assertion failed\"\n  if candidate 10 8 == 40.0 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_46","nl":"dzo_Tibt","pl":"hs","prompt":"--ཁྱོད་ཀྱིས་ཨང་རིམ་ fib4 ནང་ལུ་ ཨེ་རེ་ nth དེ་ངེས་འཛིན་འབད་ནིའི་དོན་ལུ་ ལས་འགན་ཅིག་འབྲི་གནང་། ལོག་བསྐྱར་བཀོད་འདི་ལག་ལེན་འཐབ་མ་བཏུབ།--fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) ཚུ་ཨིན།--fib4(3) -> ༠ ཨིན་པུཊི་--fib4(2) -> ༢ ཨིན།--fib4(1) -> ༠ ཨིན།--fib4(0) -> ༠ ཨིན་པུཊི་--Fib4 ཨང་རིམ་འདི་ Fibbonacci གི་རིམ་པ་བཟུམ་ཅིག་ཨིནམ་དང་ འདི་ཚུ་ནང་བཀོད་མི་བཟུམ་སྦེ་ཨིན།--  >>> fib4 5\n--  4\n--  >>> fib4 6\n--  8\n--  >>> fib4 7\n--  14\nfib4 :: Int -> Int\nfib4 n =","canonical_solution":"fib4 :: Int -> Int\nfib4 n\n  | n == 0 = 0\n  | n == 1 = 0\n  | n == 2 = 2\n  | n == 3 = 0\n  | otherwise = iter 0 0 2 0 n\n  where\n    iter a b c d 4 = a + b + c + d\n    iter a b c d n = iter b c d (a + b + c + d) (n - 1)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = fib4\n  if candidate 5 == 4 then pure () else error \"assertion failed\"\n  if candidate 8 == 28 then pure () else error \"assertion failed\"\n  if candidate 10 == 104 then pure () else error \"assertion failed\"\n  if candidate 12 == 386 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_47","nl":"dzo_Tibt","pl":"hs","prompt":"--སྐར་མ་འདི་ནང་ སྐར་མ་གི་ཐོ་ཡིག་གི་བར་མཚམས་སླར་ལོག་འབདཝ་ཨིན།--  >>> median [3,1,2,4,5]\n--  3.0\n--  >>> median [(-10),4,6,1000,10,20]\n--  15.0\nmedian :: [Int] -> Float\nmedian l =","canonical_solution":"median :: [Int] -> Float\nmedian l \n  | odd n     = fromIntegral $ sorted !! mid\n  | otherwise = (fromIntegral (sorted !! (mid - 1)) + fromIntegral (sorted !! mid)) \/ 2\n  where\n    sorted = sort l\n    n = length l\n    mid = n `div` 2\n    sort = sortBy compare","tests":"\nmain :: IO ()\nmain = do\n  let candidate = median\n  if candidate [3,1,2,4,5] == 3.0 then pure () else error \"assertion failed\"\n  if candidate [(-10),4,6,1000,10,20] == 8.0 then pure () else error \"assertion failed\"\n  if candidate [5] == 5.0 then pure () else error \"assertion failed\"\n  if candidate [6,5] == 5.5 then pure () else error \"assertion failed\"\n  if candidate [8,1,3,9,9,2,7] == 7.0 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_48","nl":"dzo_Tibt","pl":"hs","prompt":"--ཇི་ཇི་ཨའི་དེ་ ཇི་ཇི་ཨའི་དེ་ ཇི་ཇི་ཨའི་དེ་ ཇི་ཇི་ཨའི་དེ་ ཇི་ཇི་ཨའི་དེ་ ཇི་ཇི་ཨའི་དེ་ ཇི་ཇི་ཨའི་དེ་--  >>> isPalindrome \"\"\n--  True\n--  >>> isPalindrome \"aba\"\n--  True\n--  >>> isPalindrome \"aaaaa\"\n--  True\n--  >>> isPalindrome \"zbcd\"\n--  False\nisPalindrome :: String -> Bool\nisPalindrome text =","canonical_solution":"isPalindrome :: String -> Bool\nisPalindrome text = text == reverse text","tests":"\nmain :: IO ()\nmain = do\n  let candidate = isPalindrome\n  if candidate \"\" == True then pure () else error \"assertion failed\"\n  if candidate \"aba\" == True then pure () else error \"assertion failed\"\n  if candidate \"aaaaa\" == True then pure () else error \"assertion failed\"\n  if candidate \"zbcd\" == False then pure () else error \"assertion failed\"\n  if candidate \"xywyx\" == True then pure () else error \"assertion failed\"\n  if candidate \"xywyz\" == False then pure () else error \"assertion failed\"\n  if candidate \"xywzx\" == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_49","nl":"dzo_Tibt","pl":"hs","prompt":"--ཌའི་ལོག་ 2^n modulo p (ཨང་གྲངས་ཚུ་ཆ་བཞག་)--  >>> modp 3 5\n--  3\n--  >>> modp 1101 101\n--  2\n--  >>> modp 0 101\n--  1\n--  >>> modp 3 11\n--  8\n--  >>> modp 100 101\n--  1\nmodp :: Int -> Int -> Int\nmodp n p =","canonical_solution":"modp :: Int -> Int -> Int\nmodp n p = powMod 2 n p\n\npowMod :: Int -> Int -> Int -> Int\npowMod base exp modulus\n  | modulus == 1 = 0\n  | exp == 0     = 1\n  | exp == 1     = base `mod` modulus\n  | otherwise    = if odd exp\n                   then (base * halfExp * halfExp) `mod` modulus\n                   else (halfExp * halfExp) `mod` modulus\n  where\n    halfExp = powMod base (exp `div` 2) modulus","tests":"\nmain :: IO ()\nmain = do\n  let candidate = modp\n  if candidate 3 5 == 3 then pure () else error \"assertion failed\"\n  if candidate 1101 101 == 2 then pure () else error \"assertion failed\"\n  if candidate 0 101 == 1 then pure () else error \"assertion failed\"\n  if candidate 3 11 == 8 then pure () else error \"assertion failed\"\n  if candidate 100 101 == 1 then pure () else error \"assertion failed\"\n  if candidate 30 5 == 4 then pure () else error \"assertion failed\"\n  if candidate 31 5 == 3 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_51","nl":"dzo_Tibt","pl":"hs","prompt":"--remove_vowels འདི་ལས་ ཀེར་ཐིག་འདི་ལེན་ཏེ་ ཀེར་ཐིག་འདི་ ཀེར་ཐིག་མེད་པར་ལོག་གཏང་མི་ལས་འགན་ཨིན།--  >>> removeVowels \"\"\n--  \"\"\n--  >>> removeVowels \"abcdef\"\n--  \"bcdf\"\n--  >>> removeVowels \"aaaaa\"\n--  \"\"\n--  >>> removeVowels \"aaBAA\"\n--  \"B\"\n--  >>> removeVowels \"zbcd\"\n--  \"zbcd\"\nremoveVowels :: String -> String\nremoveVowels text =","canonical_solution":"removeVowels :: String -> String\nremoveVowels text = filter (`notElem` \"aeiouAEIOU\") text","tests":"\nmain :: IO ()\nmain = do\n  let candidate = removeVowels\n  if candidate \"\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"abcdef\nghijklm\" == \"bcdf\nghjklm\" then pure () else error \"assertion failed\"\n  if candidate \"fedcba\" == \"fdcb\" then pure () else error \"assertion failed\"\n  if candidate \"eeeee\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"acBAA\" == \"cB\" then pure () else error \"assertion failed\"\n  if candidate \"EcBOO\" == \"cB\" then pure () else error \"assertion failed\"\n  if candidate \"ybcd\" == \"ybcd\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_52","nl":"dzo_Tibt","pl":"hs","prompt":"--ལེགས་ལྡན་སླར་ལོག་འབདཝ་ཨིན། གལ་སྲིད་ཐོ་ཡིག་ནང་གི་ཨང་གྲངས་ཚུ་ཆ་མཉམ་ནང་ ཐོ་ཡིག་གི་འོག་ལུ་ཡོད་པ་ཅིན་--  >>> belowThreshold [1,2,4,10] 100\n--  True\n--  >>> belowThreshold [1,20,4,10] 5\n--  False\nbelowThreshold :: [Int] -> Int -> Bool\nbelowThreshold l t =","canonical_solution":"belowThreshold l t = all (< t) l","tests":"\nmain :: IO ()\nmain = do\n  let candidate = belowThreshold\n  if candidate [1,2,4,10] 100 == True then pure () else error \"assertion failed\"\n  if candidate [1,20,4,10] 5 == False then pure () else error \"assertion failed\"\n  if candidate [1,20,4,10] 21 == True then pure () else error \"assertion failed\"\n  if candidate [1,20,4,10] 22 == True then pure () else error \"assertion failed\"\n  if candidate [1,8,4,10] 11 == True then pure () else error \"assertion failed\"\n  if candidate [1,8,4,10] 10 == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_53","nl":"dzo_Tibt","pl":"hs","prompt":"--ཨང་གྲངས་ x དང་ y གཉིས་བསྡོམས་འབད།--  >>> add 2 3\n--  5\n--  >>> add 5 7\n--  12\nadd :: Int -> Int -> Int\nadd x y =","canonical_solution":"add :: Int -> Int -> Int\nadd x y = x + y","tests":"\nmain :: IO ()\nmain = do\n  let candidate = add\n  if candidate 0 1 == 1 then pure () else error \"assertion failed\"\n  if candidate 1 0 == 1 then pure () else error \"assertion failed\"\n  if candidate 2 3 == 5 then pure () else error \"assertion failed\"\n  if candidate 5 7 == 12 then pure () else error \"assertion failed\"\n  if candidate 7 5 == 12 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_54","nl":"dzo_Tibt","pl":"hs","prompt":"--ཌའི་ལོག་གི་མིང་ཚིག་གཉིས་ཆ་ར་ འདྲ་མཉམ་ཡོདཔ་ཨིན་ན་ བརྟག་ཞིབ་འབད་།--  >>> sameChars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\n--  True\n--  >>> sameChars \"abcd\" \"dddddddabc\"\n--  True\n--  >>> sameChars \"dddddddabc\" \"abcd\"\n--  True\n--  >>> sameChars \"eabcd\" \"dddddddabc\"\n--  False\n--  >>> sameChars \"abcd\" \"dddddddabce\"\n--  False\n--  >>> sameChars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\n--  False\nsameChars :: String -> String -> Bool\nsameChars s0 s1 =","canonical_solution":"import Data.List (nub, sort)\n\nsameChars :: String -> String -> Bool\nsameChars s0 s1 = sort (nub s0) == sort (nub s1)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = sameChars\n  if candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\" == True then pure () else error \"assertion failed\"\n  if candidate \"abcd\" \"dddddddabc\" == True then pure () else error \"assertion failed\"\n  if candidate \"dddddddabc\" \"abcd\" == True then pure () else error \"assertion failed\"\n  if candidate \"eabcd\" \"dddddddabc\" == False then pure () else error \"assertion failed\"\n  if candidate \"abcd\" \"dddddddabcf\" == False then pure () else error \"assertion failed\"\n  if candidate \"eabcdzzzz\" \"dddzzzzzzzddddabc\" == False then pure () else error \"assertion failed\"\n  if candidate \"aabb\" \"aaccc\" == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_55","nl":"dzo_Tibt","pl":"hs","prompt":"--ཌའི་ལོག་གིས་ ཕི་བེ་ནའཅི (Fibonacci) གི་ཨང་གྲངས་ n སླར་ལོག་འབདཝ་ཨིན།--  >>> fib 10\n--  55\n--  >>> fib 1\n--  1\n--  >>> fib 8\n--  21\nfib :: Int -> Int\nfib n =","canonical_solution":"fib :: Int -> Int\nfib n = fibHelper 0 1 n\n  where\n    fibHelper a _ 0 = a\n    fibHelper a b n = fibHelper b (a + b) (n - 1)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = fib\n  if candidate 10 == 55 then pure () else error \"assertion failed\"\n  if candidate 1 == 1 then pure () else error \"assertion failed\"\n  if candidate 8 == 21 then pure () else error \"assertion failed\"\n  if candidate 11 == 89 then pure () else error \"assertion failed\"\n  if candidate 12 == 144 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_56","nl":"dzo_Tibt","pl":"hs","prompt":"--return True ག་དེམ་ཅིག་སྦེ་ འགོ་བཙུགས་པའི་ཀེར་ཐིག་རེ་རེ་ནང་ འདྲ་མཉམ་གྱི་མཇུག་གི་ཀེར་ཐིག་ཅིག་ཡོད་པ་ཅིན་--ཚད་འཛིན་འདི་ \"<\" དང་ \">\" ཚུ་ཡོད་པའི་ཐིག་ཁྲམ་ཨིན།--  >>> correctBracketing \"<\"\n--  False\n--  >>> correctBracketing \"<>\"\n--  True\n--  >>> correctBracketing \"<<><>>\"\n--  True\n--  >>> correctBracketing \"><<>\"\n--  False\ncorrectBracketing :: String -> Bool\ncorrectBracketing brackets =","canonical_solution":"correctBracketing :: String -> Bool\ncorrectBracketing brackets = checkBrackets brackets 0 == 0\n\ncheckBrackets :: String -> Int -> Int\ncheckBrackets [] n = n\ncheckBrackets (x:xs) n\n  | n < 0 = -1\n  | x == '<' = checkBrackets xs (n + 1)\n  | x == '>' = checkBrackets xs (n - 1)\n  | otherwise = checkBrackets xs n","tests":"\nmain :: IO ()\nmain = do\n  let candidate = correctBracketing\n  if candidate \"<>\" == True then pure () else error \"assertion failed\"\n  if candidate \"<<><>>\" == True then pure () else error \"assertion failed\"\n  if candidate \"<><><<><>><>\" == True then pure () else error \"assertion failed\"\n  if candidate \"<><><<<><><>><>><<><><<>>>\" == True then pure () else error \"assertion failed\"\n  if candidate \"<<<><>>>>\" == False then pure () else error \"assertion failed\"\n  if candidate \"><<>\" == False then pure () else error \"assertion failed\"\n  if candidate \"<\" == False then pure () else error \"assertion failed\"\n  if candidate \"<<<<\" == False then pure () else error \"assertion failed\"\n  if candidate \">\" == False then pure () else error \"assertion failed\"\n  if candidate \"<<>\" == False then pure () else error \"assertion failed\"\n  if candidate \"<><><<><>><>><<>\" == False then pure () else error \"assertion failed\"\n  if candidate \"<><><<><>><>>><>\" == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_57","nl":"dzo_Tibt","pl":"hs","prompt":"--ཌའི་ལོག་ true འདི་ཐོ་ཡིག་གི་ཆ་ཤས་ཚུ་ གཅིག་མཚུངས་སྦེ་ཡར་འཕར་འགྱོ་ ཡང་ན་ མར་ཕབ་འགྱོ་དོ་ཡོདཔ་ཨིན།--  >>> monotonic [1,2,4,20]\n--  True\n--  >>> monotonic [1,20,4,10]\n--  False\n--  >>> monotonic [4,1,0,(-10)]\n--  True\nmonotonic :: [Int] -> Bool\nmonotonic l =","canonical_solution":"monotonic :: [Int] -> Bool\nmonotonic l = increasing l || decreasing l\n  where\n    increasing xs = all (uncurry (<=)) (zip xs (tail xs))\n    decreasing xs = all (uncurry (>=)) (zip xs (tail xs))","tests":"\nmain :: IO ()\nmain = do\n  let candidate = monotonic\n  if candidate [1,2,4,10] == True then pure () else error \"assertion failed\"\n  if candidate [1,2,4,20] == True then pure () else error \"assertion failed\"\n  if candidate [1,20,4,10] == False then pure () else error \"assertion failed\"\n  if candidate [4,1,0,(-10)] == True then pure () else error \"assertion failed\"\n  if candidate [4,1,1,0] == True then pure () else error \"assertion failed\"\n  if candidate [1,2,3,2,5,60] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,60] == True then pure () else error \"assertion failed\"\n  if candidate [9,9,9,9] == True then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_58","nl":"dzo_Tibt","pl":"hs","prompt":"--ཌའི་ལོག་འདི་ འདྲ་བཤུས་གཉིས་ཆ་རའི་དོན་ལུ་ ཁྱད་ཆོས་ཅན་གྱི་ཆ་ཤས་ཅིག་སྦེ་ལོག་སྒྲིག་འབདཝ་ཨིན།--  >>> common [1,4,3,34,653,2,5] [5,7,1,5,9,653,121]\n--  [1,5,653]\n--  >>> common [5,3,2,8] [3,2]\n--  [2,3]\ncommon :: [Int] -> [Int] -> [Int]\ncommon l1 l2 =","canonical_solution":"common :: [Int] -> [Int] -> [Int]\ncommon l1 l2 = uniqueSortedCommon\n  where\n    commonElements = filter (`elem` l2) l1\n    uniqueCommon = removeDuplicates commonElements\n    uniqueSortedCommon = sort uniqueCommon\n\n    removeDuplicates :: [Int] -> [Int]\n    removeDuplicates = foldr (\\x seen -> if x `elem` seen then seen else x : seen) []\n\n    sort :: [Int] -> [Int]\n    sort [] = []\n    sort (p:xs) = (sort lesser) ++ [p] ++ (sort greater)\n      where\n        lesser  = filter (< p) xs\n        greater = filter (>= p) xs","tests":"\nmain :: IO ()\nmain = do\n  let candidate = common\n  if candidate [1,4,3,34,653,2,5] [5,7,1,5,9,653,121] == [1,5,653] then pure () else error \"assertion failed\"\n  if candidate [5,3,2,8] [3,2] == [2,3] then pure () else error \"assertion failed\"\n  if candidate [4,3,2,8] [3,2,4] == [2,3,4] then pure () else error \"assertion failed\"\n  if candidate [4,3,2,8] [] == [] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_59","nl":"dzo_Tibt","pl":"hs","prompt":"--ཕྲང་གྲངས་ n > 1 དང་ཕྲང་གྲངས་མེན་པ་ཅིན་ ཕྲང་གྲངས་ n གི་གཞི་གྲངས་ངོ་མ་སྦོམ་ཤོས་འདི་སླར་ལོག་འབདཝ་ཨིན།--  >>> largestPrimeFactor 13195\n--  29\n--  >>> largestPrimeFactor 2048\n--  2\nlargestPrimeFactor :: Int -> Int\nlargestPrimeFactor n =","canonical_solution":"largestPrimeFactor :: Int -> Int\nlargestPrimeFactor n = helper n 2\n  where\n    helper n factor\n      | factor * factor > n = n\n      | n `mod` factor == 0 = helper (n `div` factor) factor\n      | otherwise = helper n (factor + 1)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = largestPrimeFactor\n  if candidate 15 == 5 then pure () else error \"assertion failed\"\n  if candidate 27 == 3 then pure () else error \"assertion failed\"\n  if candidate 63 == 7 then pure () else error \"assertion failed\"\n  if candidate 330 == 11 then pure () else error \"assertion failed\"\n  if candidate 13195 == 29 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_60","nl":"dzo_Tibt","pl":"hs","prompt":"--sum_to_n འདི་ལས་ 1 ལས་ n ཚུན་གྱི་ཨང་གྲངས་ཚུ་བསྡོམས་འབདཝ་ཨིན།--  >>> sumToN 30\n--  465\n--  >>> sumToN 100\n--  5050\n--  >>> sumToN 5\n--  15\n--  >>> sumToN 10\n--  55\n--  >>> sumToN 1\n--  1\nsumToN :: Int -> Int\nsumToN n =","canonical_solution":"sumToN :: Int -> Int\nsumToN n = sum [1..n]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = sumToN\n  if candidate 1 == 1 then pure () else error \"assertion failed\"\n  if candidate 6 == 21 then pure () else error \"assertion failed\"\n  if candidate 11 == 66 then pure () else error \"assertion failed\"\n  if candidate 30 == 465 then pure () else error \"assertion failed\"\n  if candidate 100 == 5050 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_61","nl":"dzo_Tibt","pl":"hs","prompt":"--return True ག་དེམ་ཅིག་སྦེ་ འགོ་བཙུགས་པའི་ཀེར་ཐིག་རེ་རེ་ནང་ འདྲ་མཉམ་གྱི་མཇུག་གི་ཀེར་ཐིག་ཅིག་ཡོད་པ་ཅིན་--སྐར་ཆ་འདི་ \"(\" དང་ \"\") ཚུ་ཡོད་པའི་ཐིག་ཁྲམ་ཨིན།--  >>> correctBracketing \"(\"\n--  False\n--  >>> correctBracketing \"()\"\n--  True\n--  >>> correctBracketing \"(()())\"\n--  True\n--  >>> correctBracketing \")(()\"\n--  False\ncorrectBracketing :: String -> Bool\ncorrectBracketing brackets =","canonical_solution":"correctBracketing :: String -> Bool\ncorrectBracketing brackets = checkBalance brackets 0\n  where\n    checkBalance [] 0 = True\n    checkBalance [] _ = False\n    checkBalance (x:xs) n\n      | x == '('  = checkBalance xs (n + 1)\n      | x == ')' && n > 0 = checkBalance xs (n - 1)\n      | otherwise = False","tests":"\nmain :: IO ()\nmain = do\n  let candidate = correctBracketing\n  if candidate \"()\" == True then pure () else error \"assertion failed\"\n  if candidate \"(()())\" == True then pure () else error \"assertion failed\"\n  if candidate \"()()(()())()\" == True then pure () else error \"assertion failed\"\n  if candidate \"()()((()()())())(()()(()))\" == True then pure () else error \"assertion failed\"\n  if candidate \"((()())))\" == False then pure () else error \"assertion failed\"\n  if candidate \")(()\" == False then pure () else error \"assertion failed\"\n  if candidate \"(\" == False then pure () else error \"assertion failed\"\n  if candidate \"((((\" == False then pure () else error \"assertion failed\"\n  if candidate \")\" == False then pure () else error \"assertion failed\"\n  if candidate \"(()\" == False then pure () else error \"assertion failed\"\n  if candidate \"()()(()())())(()\" == False then pure () else error \"assertion failed\"\n  if candidate \"()()(()())()))()\" == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_62","nl":"dzo_Tibt","pl":"hs","prompt":"--ཚད་ལྡན་འདི་གི་ དོ་འགྲན་འདི་ འདྲ་མཉམ་སྦེ་སླར་ལོག་འབདཝ་ཨིན།--xs[0] + xs[1] * x + xs[2] * x^2 + .... ཟེར་མི་འདི་ཨིན།--ཕྲང་གྲངས་ x འདི་ མང་གྲངས་ཀྱི་གནས་གོང་ཨིན།--  >>> derivative [3,1,2,4,5]\n--  [1,4,12,20]\n--  >>> derivative [1,2,3]\n--  [2,6]\nderivative :: [Int] -> [Int]\nderivative xs =","canonical_solution":"derivative :: [Int] -> [Int]\nderivative xs = zipWith (*) (tail xs) [1..]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = derivative\n  if candidate [3,1,2,4,5] == [1,4,12,20] then pure () else error \"assertion failed\"\n  if candidate [1,2,3] == [2,6] then pure () else error \"assertion failed\"\n  if candidate [3,2,1] == [2,2] then pure () else error \"assertion failed\"\n  if candidate [3,2,1,0,4] == [2,2,0,16] then pure () else error \"assertion failed\"\n  if candidate [1] == [] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_63","nl":"dzo_Tibt","pl":"hs","prompt":"--ཕབ་ལེན་འབད་ཡོད་པའི་ཡིག་ཆ་འདི་ ཨང་གྲངས་རིམ་པ་ fibfib ནང་ལུ་ n-th པ་ཨིན་པའི་ཆ་ཤས་འདི་ དབྱེ་དཔྱད་འབད་ནིའི་དོན་ལུ་འབྲི་གནང་།--fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) ཨིན་པུཊི་གིས་འབད་ཚུགས།--fib fib (((2) == ༡ --fib fib ((1)) == 0 --fib fib ((0) == 0 --ཕི་བཱོན་ཨའི་བི་ཨའི་ཨང་རིམ་དེ་ ཕི་བཱོན་ཨའི་བི་ཨའི་རིམ་དང་འདྲཝ་ཅིག་ཨིན་ འདི་ཚུ་ འོག་གི་བཟུམ་སྦེ་ དབྱེ་ཞིབ་འབདཝ་ཨིན།--  >>> fibfib 1\n--  0\n--  >>> fibfib 5\n--  4\n--  >>> fibfib 8\n--  24\nfibfib :: Int -> Int\nfibfib n =","canonical_solution":"fibfib :: Int -> Int\nfibfib n\n  | n == 0 = 0\n  | n == 1 = 0\n  | n == 2 = 1\n  | otherwise = fibs !! n\n  where\n    fibs = 0 : 0 : 1 : zipWith3 (\\a b c -> a + b + c) fibs (tail fibs) (drop 2 fibs)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = fibfib\n  if candidate 2 == 1 then pure () else error \"assertion failed\"\n  if candidate 1 == 0 then pure () else error \"assertion failed\"\n  if candidate 5 == 4 then pure () else error \"assertion failed\"\n  if candidate 8 == 24 then pure () else error \"assertion failed\"\n  if candidate 10 == 81 then pure () else error \"assertion failed\"\n  if candidate 12 == 274 then pure () else error \"assertion failed\"\n  if candidate 14 == 927 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_64","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ཨང་བཏགས་ནི་དེ་ ཁ་ཚིག་གི་མཇུག་ལུ་ཡོད་པའི་སྐད་ཡིག་ནང་ལུ་རྐྱངམ་གཅིག་ཨིན།--འ་ནི་གནས་སྟངས་ནང་ལུ་ ཚིག་ཡིག་འདི་ \"a\", \"e\", \"i\", \"o\", \"u\" ཨིན། འ་ནི་ནང་ལུ་ \"y\" འདི་ཡང་ \"a\" ཨིན།--ཚིག་ཅིག་ནང་བཙུགས་ཏེ་ string ནང་གི་ཕྲ་རིང་གི་གྱངས་ཁ་ལོག་གཏང་འོང་།--ཕྲ་རིང་གི་གྲངས་རྩིས་འདི་ ཕྲ་རིང་གི་གྲངས་རྩིས་ལུ་གཞི་བསྟུན་འབད་ཡོད་པའི་ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> vowelsCount \"abcde\"\n--  2\n--  >>> vowelsCount \"ACEDY\"\n--  3\nvowelsCount :: String -> Int\nvowelsCount s =","canonical_solution":"vowelsCount :: String -> Int\nvowelsCount s = length $ filter isVowel $ zip s [1..]\n  where\n    isVowel (c, pos) =\n      let lowercaseC = toLower c\n          isRegularVowel = lowercaseC `elem` \"aeiou\"\n          isLastCharY = lowercaseC == 'y' && pos == length s\n      in isRegularVowel || isLastCharY","tests":"\nmain :: IO ()\nmain = do\n  let candidate = vowelsCount\n  if candidate \"abcde\" == 2 then pure () else error \"assertion failed\"\n  if candidate \"Alone\" == 3 then pure () else error \"assertion failed\"\n  if candidate \"key\" == 2 then pure () else error \"assertion failed\"\n  if candidate \"bye\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"keY\" == 2 then pure () else error \"assertion failed\"\n  if candidate \"bYe\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"ACEDY\" == 3 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_65","nl":"dzo_Tibt","pl":"hs","prompt":"--Shift > ཨང་གྲངས་ཚུ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ལོག་གཏང་།--དེ་ལས་ གྲུབ་འབྲས་འདི་ string སྦེ་ལོག་འབདཝ་ཨིན།--ཕྲང་སྒྲིག་འདི་ནང་ ཨང་གྲངས་ x གི་ཨང་གྲངས་ཚུ་ ཕྱོགས་གཅིག་ལས་གཞན་ཁ་ཐུག་ བསྒྱུར་གཏང་།--  >>> circularShift 12 1\n--  \"21\"\n--  >>> circularShift 12 2\n--  \"12\"\ncircularShift :: Int -> Int -> String\ncircularShift x shift =","canonical_solution":"circularShift :: Int -> Int -> String\ncircularShift x shift =\n  let digits = show x\n      len = length digits\n      effectiveShift = shift `mod` len\n  in if shift > len\n     then reverse digits\n     else let (begin, end) = splitAt (len - effectiveShift) digits\n          in end ++ begin","tests":"\nmain :: IO ()\nmain = do\n  let candidate = circularShift\n  if candidate 100 2 == \"001\" then pure () else error \"assertion failed\"\n  if candidate 12 2 == \"12\" then pure () else error \"assertion failed\"\n  if candidate 97 8 == \"79\" then pure () else error \"assertion failed\"\n  if candidate 12 1 == \"21\" then pure () else error \"assertion failed\"\n  if candidate 11 101 == \"11\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_66","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ཨེསི་སི་ཨི་ཨའི་ཡིག་བྱང་ཚུ་ཨིན།--ནང་བསྐྱོད་སྦེ་ string དང་ སྟེང་གི་ཡིག་འབྲུ་ཚུ་བསྡོམས་འབད་མི་འདི་ལོག་གཏང་མི་ function ཅིག་འབྲི་དགོ།--ལཱ་འགན་ --  >>> digitsum \"\"\n--  0\n--  >>> digitsum \"abAB\"\n--  131\n--  >>> digitsum \"abcCd\"\n--  67\n--  >>> digitsum \"helloE\"\n--  69\n--  >>> digitsum \"woArBld\"\n--  131\n--  >>> digitsum \"aAaaaXa\"\n--  153\ndigitsum :: String -> Int\ndigitsum s =","canonical_solution":"digitsum :: String -> Int\ndigitsum s = sum $ map fromEnum $ filter isUpper s","tests":"\nmain :: IO ()\nmain = do\n  let candidate = digitsum\n  if candidate \"\" == 0 then pure () else error \"assertion failed\"\n  if candidate \"abAB\" == 131 then pure () else error \"assertion failed\"\n  if candidate \"abcCd\" == 67 then pure () else error \"assertion failed\"\n  if candidate \"helloE\" == 69 then pure () else error \"assertion failed\"\n  if candidate \"woArBld\" == 131 then pure () else error \"assertion failed\"\n  if candidate \"aAaaaXa\" == 153 then pure () else error \"assertion failed\"\n  if candidate \" How are yOu?\" == 151 then pure () else error \"assertion failed\"\n  if candidate \"You arE Very Smart\" == 327 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_67","nl":"dzo_Tibt","pl":"hs","prompt":"--གི་དོན་ལུ་:--སྦ་ཟེ་ནང་ མན་ངག་གི་འབྲས་བུ་ཚུ་ སྦ་ཟེ་ནང་ཡོད་མི་འདི་ ལོག་གཏང་།--ཨེ་རེ་དང་ ཨེ་པཱལ་དང་ ཨང་གྲངས་ཧྲིལ་བུམ་འདི་ ཨང་གྲངས་ཡོངས་བསྡོམས་ལུ་མཚོན་འབདཝ་ཨིན།--ཨེཔ་ལིསི་དང་ ཨེཔ་ལིསི་ དེ་ལས་ མེན་གོའི་འབྲས་བུ་ཚུ་ཨིན། ཨེཔ་ལིསི་དང་ ཨེཔ་ལིསི་ དེ་ལས་ མེན་གོའི་འབྲས་བུ་ཚུ་ཨིན།--འདི་ཚུ་ཤིང་འབྲས་ཀྱི་ཙེལ་ཀ་ནང་ལུ་ བཀྲམ་སྤེལ་འབད་ཡོདཔ་ཨིན།--ཝའི་ཨེམ་པི་ཨའི་གི་ཨང་གྲངས་འདི་ ཨེཕ་ལཱསི་དང་ ཨེ་རེནཇི་གི་ཨང་གྲངས་ཨིན།--  >>> fruitDistribution \"5 apples and 6 oranges\" 19\n--  8\n--  >>> fruitDistribution \"0 apples and 1 oranges\" 3\n--  2\n--  >>> fruitDistribution \"2 apples and 3 oranges\" 100\n--  95\n--  >>> fruitDistribution \"100 apples and 1 oranges\" 120\n--  19\nfruitDistribution :: String -> Int -> Int\nfruitDistribution s n =","canonical_solution":"import Text.Read (readMaybe)\n\nfruitDistribution :: String -> Int -> Int\nfruitDistribution s n = n - totalApplesOranges\n  where\n    totalApplesOranges = sum $ map (readNumber . words) [\"apples\", \"oranges\"]\n    readNumber keyword = case dropWhile (not . (==\" \") . dropWhile (\/=' ')) $ words s of\n      [] -> 0\n      (num:_:rest) -> if num `elem` keyword then read num :: Int else 0","tests":"\nmain :: IO ()\nmain = do\n  let candidate = fruitDistribution\n  if candidate \"5 apples and 6 oranges\" 19 == 8 then pure () else error \"assertion failed\"\n  if candidate \"5 apples and 6 oranges\" 21 == 10 then pure () else error \"assertion failed\"\n  if candidate \"0 apples and 1 oranges\" 3 == 2 then pure () else error \"assertion failed\"\n  if candidate \"1 apples and 0 oranges\" 3 == 2 then pure () else error \"assertion failed\"\n  if candidate \"2 apples and 3 oranges\" 100 == 95 then pure () else error \"assertion failed\"\n  if candidate \"2 apples and 3 oranges\" 5 == 0 then pure () else error \"assertion failed\"\n  if candidate \"1 apples and 100 oranges\" 120 == 19 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_68","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་གཞི་ ༡:--གལ་སྲིད་ གནས་གོང་ཆ་སྙོམ་མེད་པ་ཅིན་ ཡང་ན་ འོག་ལུ་ཡོད་པའི་ཐོ་ཡིག་འདི་ སྟོངམ་ཡོད་པ་ཅིན་ སླར་ལོག་འབདཝ་ཨིན།--བཏོན་གཏང་མི་ཨང་འདི་ཐོ་ཡིག་ནང་ལུ་ལོག་གཏང་དགོ། [ smalest_value, its index ], --ཕྲང་སྒྲིག་ནང་ ཕྲང་སྒྲིག་ཆུང་ཤོས་ཅིག་དང་ཕྲང་སྒྲིག་ཆུང་ཤོས་ཅིག་ཡོད་པ་ཅིན་ ཕྲང་སྒྲིག་ཆུང་ཤོས་ཡོད་པའི་ཕྲང་སྒྲིག་དེ་སླར་ལོག་འབདཝ་ཨིན།--ཕྱིར་བཏོན་འབད་ཡོད་པའི་ཨང་འདི་ ཆུང་ཤོས་རང་ ཕྲང་རྟགས་ཡོད་པའི་ཨང་འདི་དགོཔ་ཨིན།--ཁྱོད་ཀྱི་ལཱ་འདི་ ཀེར་ཐིག་གཅིག་བཏོན་ཏེ་ ལོག་གཏང་ནི་ཨིན།--\"ཚལ་གྱི་ཡན་ལག་གི་མིང་ཐོ་འདི་ འབྲས་བུ་མེད་མི་ཨང་གྲངས་ཧྲིལ་བུམ་ཚུ་ཡོད་པའི་ ཚལ་ཐོ་ཅིག་ལུ་བརྟེན་ཨིན།--  >>> pluck [4,2,3]\n--  [2,1]\n--  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n--  Example 2:\n--  >>> pluck [1,2,3]\n--  [2,1]\n--  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n--  Example 3:\n--  >>> pluck []\n--  []\n--  Example 4:\n--  >>> pluck [5,0,3,0,4,2]\n--  [0,1]\n--  Explanation: 0 is the smallest value, but  there are two zeros,\n--  so we will choose the first zero, which has the smallest index.\n--  Constraints:\n--  * 1 <= nodes.length <= 10000\n--  * 0 <= node.value\npluck :: [Int] -> [Int]\npluck arr =","canonical_solution":"pluck :: [Int] -> [Int]\npluck arr = case filter (\\(x, _) -> even x) (zip arr [0..]) of\n    [] -> []\n    evens -> let (value, index) = minimum evens in [value, index]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = pluck\n  if candidate [4,2,3] == [2,1] then pure () else error \"assertion failed\"\n  if candidate [1,2,3] == [2,1] then pure () else error \"assertion failed\"\n  if candidate [] == [] then pure () else error \"assertion failed\"\n  if candidate [5,0,3,0,4,2] == [0,1] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,0,5,3] == [0,3] then pure () else error \"assertion failed\"\n  if candidate [5,4,8,4,8] == [4,1] then pure () else error \"assertion failed\"\n  if candidate [7,6,7,1] == [6,1] then pure () else error \"assertion failed\"\n  if candidate [7,9,7,1] == [] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_69","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--དེ་བཟུམ་གྱི་གནས་གོང་མེད་པ་ཅིན་ -༡ སླར་ལོག་འབདཝ་ཨིན།--ཨང་གྲངས་ཧྲིལ་བུའི་འཕྲལ་འཕྲལ་འདི་ ཨང་གྲངས་ཚུ་ཐོ་ནང་མཐོང་མི་གྱངས་ཁ་ཨིན།--༠ དང་ རྒྱུན་ལྡན་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་གནས་གོང་ལས་ སྦོམ་ ཡང་ན་ འདྲན་འདྲ་ཨིན།--ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་ཀྱི་ཐོ་ཡིག་སྟོངམ་མེན་པའི་ ཨང་གྲངས་སྦོམ་ཤོས་འདི་སླར་ལོག་འབད་ --  >>> search [4,1,2,2,3,1]\n--  2\n--  >>> search [1,2,2,3,3,3,4,4,4]\n--  3\n--  >>> search [5,5,4,4,4]\n--  (-1)\nsearch :: [Int] -> Int\nsearch lst =","canonical_solution":"import Data.List (group, sort)\nimport Data.Ord (comparing)\n\nsearch :: [Int] -> Int\nsearch lst = \n    let frequencies = map (\\g -> (head g, length g)) . group . sort $ lst\n        candidates = filter (\\(val, freq) -> freq >= val) frequencies\n    in case candidates of\n         [] -> -1\n         _  -> fst . maximum $ candidates","tests":"\nmain :: IO ()\nmain = do\n  let candidate = search\n  if candidate [5,5,5,5,1] == 1 then pure () else error \"assertion failed\"\n  if candidate [4,1,4,1,4,4] == 4 then pure () else error \"assertion failed\"\n  if candidate [3,3] == (-1) then pure () else error \"assertion failed\"\n  if candidate [8,8,8,8,8,8,8,8] == 8 then pure () else error \"assertion failed\"\n  if candidate [2,3,3,2,2] == 2 then pure () else error \"assertion failed\"\n  if candidate [2,7,8,8,4,8,7,3,9,6,5,10,4,3,6,7,1,7,4,10,8,1] == 1 then pure () else error \"assertion failed\"\n  if candidate [3,2,8,2] == 2 then pure () else error \"assertion failed\"\n  if candidate [6,7,1,8,8,10,5,8,5,3,10] == 1 then pure () else error \"assertion failed\"\n  if candidate [8,8,3,6,5,6,4] == (-1) then pure () else error \"assertion failed\"\n  if candidate [6,9,6,7,1,4,7,1,8,8,9,8,10,10,8,4,10,4,10,1,2,9,5,7,9] == 1 then pure () else error \"assertion failed\"\n  if candidate [1,9,10,1,3] == 1 then pure () else error \"assertion failed\"\n  if candidate [6,9,7,5,8,7,5,3,7,5,10,10,3,6,10,2,8,6,5,4,9,5,3,10] == 5 then pure () else error \"assertion failed\"\n  if candidate [1] == 1 then pure () else error \"assertion failed\"\n  if candidate [8,8,10,6,4,3,5,8,2,4,2,8,4,6,10,4,2,1,10,2,1,1,5] == 4 then pure () else error \"assertion failed\"\n  if candidate [2,10,4,8,2,10,5,1,2,9,5,5,6,3,8,6,4,10] == 2 then pure () else error \"assertion failed\"\n  if candidate [1,6,10,1,6,9,10,8,6,8,7,3] == 1 then pure () else error \"assertion failed\"\n  if candidate [9,2,4,1,5,1,5,2,5,7,7,7,3,10,1,5,4,2,8,4,1,9,10,7,10,2,8,10,9,4] == 4 then pure () else error \"assertion failed\"\n  if candidate [2,6,4,2,8,7,5,6,4,10,4,6,3,7,8,8,3,1,4,2,2,10,7] == 4 then pure () else error \"assertion failed\"\n  if candidate [9,8,6,10,2,6,10,2,7,8,10,3,8,2,6,2,3,1] == 2 then pure () else error \"assertion failed\"\n  if candidate [5,5,3,9,5,6,3,2,8,5,6,10,10,6,8,4,10,7,7,10,8] == (-1) then pure () else error \"assertion failed\"\n  if candidate [10] == (-1) then pure () else error \"assertion failed\"\n  if candidate [9,7,7,2,4,7,2,10,9,7,5,7,2] == 2 then pure () else error \"assertion failed\"\n  if candidate [5,4,10,2,1,1,10,3,6,1,8] == 1 then pure () else error \"assertion failed\"\n  if candidate [7,9,9,9,3,4,1,5,9,1,2,1,1,10,7,5,6,7,6,7,7,6] == 1 then pure () else error \"assertion failed\"\n  if candidate [3,10,10,9,2] == (-1) then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_70","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--དེ་ལས་ལྷག་ལུས་ཨང་གྲངས་ཆ་མཉམ་ནང་ལས་ མཐོ་ཤོས་དང་ དམའ་ཤོས་ དེ་ལས་གཞན་ཚུ་ཨིན།--ཚད་ལྡན་རིམ་སྒྲིག་འདི་ ཁྱོད་ཀྱིས་ཉུང་མཐའི་གནས་གོང་ལས་ འགོ་བཙུགས་པ་ཅིན་ཨིན།--སྐར་མ་ ༡.༠ འདི་ སྐར་མ་ ༡.༠ ཨིན།--  >>> strangeSortList [1,2,3,4]\n--  [1,4,2,3]\n--  >>> strangeSortList [5,5,5,5]\n--  [5,5,5,5]\n--  >>> strangeSortList []\n--  []\nstrangeSortList :: [Int] -> [Int]\nstrangeSortList lst =","canonical_solution":"strangeSortList :: [Int] -> [Int]\nstrangeSortList [] = []\nstrangeSortList lst = go (sort lst) True\n  where\n    go [] _ = []\n    go xs toggle\n      | toggle    = head xs : go (tail xs) False\n      | otherwise = last xs : go (init xs) True","tests":"\nmain :: IO ()\nmain = do\n  let candidate = strangeSortList\n  if candidate [1,2,3,4] == [1,4,2,3] then pure () else error \"assertion failed\"\n  if candidate [5,6,7,8,9] == [5,9,6,8,7] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5] == [1,5,2,4,3] then pure () else error \"assertion failed\"\n  if candidate [5,6,7,8,9,1] == [1,9,5,8,6,7] then pure () else error \"assertion failed\"\n  if candidate [5,5,5,5] == [5,5,5,5] then pure () else error \"assertion failed\"\n  if candidate [] == [] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6,7,8] == [1,8,2,7,3,6,4,5] then pure () else error \"assertion failed\"\n  if candidate [0,2,2,2,5,5,(-5),(-5)] == [(-5),5,(-5),5,0,2,2,2] then pure () else error \"assertion failed\"\n  if candidate [111111] == [111111] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_71","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--དེ་ལས་ ཕྱོགས་གསུམ་པ་ལས་ལྷག་སྟེ་མེད།--གཡོན་གསུམ་གྱིས་ ཟུར་གཉིས་ཆ་རའི་བསྡོམས་སྦོམ་སྦེ་ཡོད་པ་ཅིན་ ཟུར་གསུམ་ཅིག་སྦེ་ ཆ་གནས་འབདཝ་ཨིན།--དེ་མེན་པ་ཅིན་ལོག་གཏང་ -1 --ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཆ་མཉམ་སྦེ་ཡོད་འོང་།--ཚད་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་འདི་བྱིན་ཏེ་ ཚད་གསུམ་གྱི་ཟུར་གསུམ་གྱི་ཁྱབ་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།--  >>> triangleArea 3 4 5\n--  6.0\n--  >>> triangleArea 1 2 10\n--  (-1).0\ntriangleArea :: Int -> Int -> Int -> Float\ntriangleArea a b c =","canonical_solution":"import Text.Printf (printf)\n\ntriangleArea :: Int -> Int -> Int -> Float\ntriangleArea a b c\n    | isValidTriangle a b c = roundToTwoDecimals (sqrt (s * (s - fromIntegral a) * (s - fromIntegral b) * (s - fromIntegral c)))\n    | otherwise = -1\n  where\n    s = (fromIntegral (a + b + c)) \/ 2\n    isValidTriangle x y z = x + y > z && x + z > y && y + z > x\n    roundToTwoDecimals x = read (printf \"%.2f\" x) :: Float","tests":"\nmain :: IO ()\nmain = do\n  let candidate = triangleArea\n  if candidate 3 4 5 == 6.0 then pure () else error \"assertion failed\"\n  if candidate 1 2 10 == (-1).0 then pure () else error \"assertion failed\"\n  if candidate 4 8 5 == 8.18 then pure () else error \"assertion failed\"\n  if candidate 2 2 2 == 1.73 then pure () else error \"assertion failed\"\n  if candidate 1 2 3 == (-1).0 then pure () else error \"assertion failed\"\n  if candidate 10 5 7 == 16.25 then pure () else error \"assertion failed\"\n  if candidate 2 6 3 == (-1).0 then pure () else error \"assertion failed\"\n  if candidate 1 1 1 == 0.43 then pure () else error \"assertion failed\"\n  if candidate 2 2 10 == (-1).0 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_72","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--དངོས་པོ་ q འདི་ཚད་ལྡན་ཨིན་པ་ཅིན་ འཕུར་འགྲུལ་འབད་འོང་། (འདི་ palindromic list ཨིན་) དེ་ལས་ འདི་གི་ཆ་ཤས་ཚུ་གི་བསྡོམས་དེ་ w ཟེར་བའི་ནུས་ཤུགས་སྦོམ་ཤོས་ལས་ ཆུང་བ་ ཡང་ན་ འདྲན་འདྲ་ཨིན།--དངོས་པོ་ q འདི་འཕུར་འགྱོ་བ་ཅིན་ གྲུབ་རྟགས་ True སླར་ལོག་འབད་ཡོད་པའི་ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> willItFly [1,2] 5\n--  False\n--  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n--  >>> willItFly [3,2,3] 1\n--  False\n--  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n--  >>> willItFly [3,2,3] 9\n--  True\n--  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n--  >>> willItFly [3] 5\n--  True\n--  # 3 is less than the maximum possible weight, and it's balanced.\nwillItFly :: [Int] -> Int -> Bool\nwillItFly q w =","canonical_solution":"willItFly :: [Int] -> Int -> Bool\nwillItFly q w = isPalindrome q && sum q <= w\n\nisPalindrome :: Eq a => [a] -> Bool\nisPalindrome xs = xs == reverse xs","tests":"\nmain :: IO ()\nmain = do\n  let candidate = willItFly\n  if candidate [3,2,3] 9 == True then pure () else error \"assertion failed\"\n  if candidate [1,2] 5 == False then pure () else error \"assertion failed\"\n  if candidate [3] 5 == True then pure () else error \"assertion failed\"\n  if candidate [3,2,3] 1 == False then pure () else error \"assertion failed\"\n  if candidate [1,2,3] 6 == False then pure () else error \"assertion failed\"\n  if candidate [5] 5 == True then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_73","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --ཕྱིར་འཐོན་དང་རྒྱབ་ལོག་གཉིས་ཆ་ར་ལུ་ དབྱེ་བ་འདྲ་མཉམ་སྦེ་ལྷག་ཚུགས། བསྒྱུར་བཅོས་གཅིག་གི་ནང་ ཁྱོད་ཀྱིས་ ཨེཆ་ཨེམ་ཅིག་ ཨེཆ་ཨེམ་གཞན་ཅིག་ལུ་ བསྒྱུར་བཅོས་འབད་ཚུགས།--ཤོག་ལེབ་འདི་ ཇི་ཨའི་ཨེམ་སི་གི་ཡིག་གཟུགས་ལུ་འགྱུར་དགོ་པ་ཅིན་ ཇི་ཨེམ་སི་དེ་ ཇི་ཨེམ་སི་གི་ཡིག་གཟུགས་ལུ་འགྱུར་དགོ།--སྐར་མ་ཚུ་ ཇི་ཨར་ཨར་གྱི་ཐོ་ཡིག་ཅིག་ནང་ཡོད་པ་ཅིན་ ཇི་ཨར་ཨར་གྱི་ ཇི་ཨར་ཨར་གྱི་ ཇི་ཨར་ཨར་གྱི་ ཇི་ཨར་ཨར་གྱི་ ཇི་ཨར་ཨར་གྱི་ ཇི་ཨར་ཨར་གྱི་ ཇི་ཨར་ཨར་གྱི་ ཇི་ཨར་ཨར་གྱི་ ཇི་ཨར་ཨར་གྱི་ ཇི་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་ཨར་--  >>> smallestChange [1,2,3,5,4,7,9,6]\n--  4\n--  >>> smallestChange [1,2,3,4,3,2,2]\n--  1\n--  >>> smallestChange [1,2,3,2,1]\n--  0\nsmallestChange :: [Int] -> Int\nsmallestChange arr =","canonical_solution":"smallestChange :: [Int] -> Int\nsmallestChange arr = sum $ zipWith (\\x y -> if x \/= y then 1 else 0) arr (reverse arr)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = smallestChange\n  if candidate [1,2,3,5,4,7,9,6] == 4 then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,3,2,2] == 1 then pure () else error \"assertion failed\"\n  if candidate [1,4,2] == 1 then pure () else error \"assertion failed\"\n  if candidate [1,4,4,2] == 1 then pure () else error \"assertion failed\"\n  if candidate [1,2,3,2,1] == 0 then pure () else error \"assertion failed\"\n  if candidate [3,1,1,3] == 0 then pure () else error \"assertion failed\"\n  if candidate [1] == 0 then pure () else error \"assertion failed\"\n  if candidate [0,1] == 1 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_74","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་སྟོན་ --གལ་སྲིད་ཐོ་ཡིག་གཉིས་ཆ་ར་ལུ་ ཡིག་འབྲུ་གྱངས་ཁ་འདྲ་མཉམ་ཡོད་པ་ཅིན་ དང་པ་ཐོ་ཡིག་འདི་ལོག་གཏང་།--ཐོ་བཀོད་ནང་ལུ་ཡིག་འབྲུ་ཚུ་ གྱངས་ཁ་གཞན་གྱི་ཐོ་ཡིག་ལས་ཉུང་བ་ཡོདཔ་ཨིན།--ཕྲ་རིང་གི་ཐོ་ཡིག་གཉིས་ཆ་ར་ལུ་ ངོས་ལེན་འབད་ཞིནམ་ལས་ ཕྲ་རིང་ཡོད་མི་དེ་ལོག་གཏང་ནིའི་ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> totalMatch [] []\n--  []\n--  >>> totalMatch [\"hi\",\"admin\"] [\"hI\",\"Hi\"]\n--  [\"hI\",\"Hi\"]\n--  >>> totalMatch [\"hi\",\"admin\"] [\"hi\",\"hi\",\"admin\",\"project\"]\n--  [\"hi\",\"admin\"]\n--  >>> totalMatch [\"hi\",\"admin\"] [\"hI\",\"hi\",\"hi\"]\n--  [\"hI\",\"hi\",\"hi\"]\n--  >>> totalMatch [\"4\"] [\"1\",\"2\",\"3\",\"4\",\"5\"]\n--  [\"4\"]\ntotalMatch :: [String] -> [String] -> [String]\ntotalMatch lst1 lst2 =","canonical_solution":"totalMatch :: [String] -> [String] -> [String]\ntotalMatch lst1 lst2\n  | totalChars lst1 < totalChars lst2 = lst1\n  | totalChars lst1 > totalChars lst2 = lst2\n  | otherwise = lst1\n  where\n    totalChars = sum . map length","tests":"\nmain :: IO ()\nmain = do\n  let candidate = totalMatch\n  if candidate [] [] == [] then pure () else error \"assertion failed\"\n  if candidate [\"hi\",\"admin\"] [\"hi\",\"hi\"] == [\"hi\",\"hi\"] then pure () else error \"assertion failed\"\n  if candidate [\"hi\",\"admin\"] [\"hi\",\"hi\",\"admin\",\"project\"] == [\"hi\",\"admin\"] then pure () else error \"assertion failed\"\n  if candidate [\"4\"] [\"1\",\"2\",\"3\",\"4\",\"5\"] == [\"4\"] then pure () else error \"assertion failed\"\n  if candidate [\"hi\",\"admin\"] [\"hI\",\"Hi\"] == [\"hI\",\"Hi\"] then pure () else error \"assertion failed\"\n  if candidate [\"hi\",\"admin\"] [\"hI\",\"hi\",\"hi\"] == [\"hI\",\"hi\",\"hi\"] then pure () else error \"assertion failed\"\n  if candidate [\"hi\",\"admin\"] [\"hI\",\"hi\",\"hii\"] == [\"hi\",\"admin\"] then pure () else error \"assertion failed\"\n  if candidate [] [\"this\"] == [] then pure () else error \"assertion failed\"\n  if candidate [\"this\"] [] == [] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_75","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--(a) འདི་ ༡༠༠ ལས་ཆུང་བ་ཨིནམ་ཤེས་པ་ཅིན་--དེ་མེན་པ་ཅིན་ རྫུན་ཁ་བཟེད་འོང་།--ཁྱོད་ཀྱིས་གྲངས་འདི་ ཨང་གྲངས་གཙོ་བོ་༣ གྱི་གྱངས་ཁ་ཨིནམ་སྦེ་ལོག་བྱིན་པ་ཅིན་ ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> isMultiplyPrime 30\n--  True\n--  30 = 2 * 3 * 5\nisMultiplyPrime :: Int -> Bool\nisMultiplyPrime a =","canonical_solution":"isMultiplyPrime :: Int -> Bool\nisMultiplyPrime a = any isTriplePrimeProduct primeTriples\n  where\n    primes = filter isPrime [2..99]\n    primeTriples = [(x, y, z) | x <- primes, y <- primes, z <- primes, x <= y, y <= z]\n    isTriplePrimeProduct (x, y, z) = x * y * z == a\n\nisPrime :: Int -> Bool\nisPrime n \n  | n < 2     = False\n  | otherwise = not (any (\\d -> n `mod` d == 0) [2..(floor . sqrt . fromIntegral) n])","tests":"\nmain :: IO ()\nmain = do\n  let candidate = isMultiplyPrime\n  if candidate 5 == False then pure () else error \"assertion failed\"\n  if candidate 30 == True then pure () else error \"assertion failed\"\n  if candidate 8 == True then pure () else error \"assertion failed\"\n  if candidate 10 == False then pure () else error \"assertion failed\"\n  if candidate 125 == True then pure () else error \"assertion failed\"\n  if candidate 105 == True then pure () else error \"assertion failed\"\n  if candidate 126 == False then pure () else error \"assertion failed\"\n  if candidate 729 == False then pure () else error \"assertion failed\"\n  if candidate 891 == False then pure () else error \"assertion failed\"\n  if candidate 1001 == True then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_76","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --x འདི་ n གི་ཤུགས་རྐྱང་ཅིག་ཨིན་པ་ཅིན་ n**int=x --power of n དང་ གཞན་གནས་སྟངས་ཚུ་ནང་ false ཨིན།--ཁྱོད་ཀྱིས་འབད་དགོ་པའི་ལཱ་འདི་ གྲངས་ཀ་ x འདི་ ཕྲང་ཨིན་པ་ཅིན་ གནས་གོང་དེ་ true སྦེ་ལོག་བྱིན་པའི་འགན་ཡིག་འབྲི་ནི་ཨིན།--  >>> isSimplePower 1 4\n--  True\n--  >>> isSimplePower 2 2\n--  True\n--  >>> isSimplePower 8 2\n--  True\n--  >>> isSimplePower 3 2\n--  False\n--  >>> isSimplePower 3 1\n--  False\n--  >>> isSimplePower 5 3\n--  False\nisSimplePower :: Int -> Int -> Bool\nisSimplePower x n =","canonical_solution":"isSimplePower :: Int -> Int -> Bool\nisSimplePower x n\n  | x < 1 || n < 1 = False\n  | n == 1 = x == 1\n  | otherwise = x == n ^ round (logBase (fromIntegral n) (fromIntegral x))","tests":"\nmain :: IO ()\nmain = do\n  let candidate = isSimplePower\n  if candidate 16 2 == True then pure () else error \"assertion failed\"\n  if candidate 143214 16 == False then pure () else error \"assertion failed\"\n  if candidate 4 2 == True then pure () else error \"assertion failed\"\n  if candidate 9 3 == True then pure () else error \"assertion failed\"\n  if candidate 16 4 == True then pure () else error \"assertion failed\"\n  if candidate 24 2 == False then pure () else error \"assertion failed\"\n  if candidate 128 4 == False then pure () else error \"assertion failed\"\n  if candidate 12 6 == False then pure () else error \"assertion failed\"\n  if candidate 1 1 == True then pure () else error \"assertion failed\"\n  if candidate 1 12 == True then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_77","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--དྲན་གསོ། ཁྱོད་ཀྱིས་འཛུལ་ཞུགས་འདི་ དུས་རྒྱུན་དུ་ ཆ་གནས་འབད་འོང་ཟེར་ཆ་བཞག་བཏུབ།--འ་ནི་ཨང་གྲངས་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་ཅིག་གི་ ཀུ་བིཀ་ཨིན་པ་ཅིན་།--ཁྱོད་ཀྱིས་ཧྲིལ་ཨང་ aལེན་ཏེ་ ལོག་ True སྦེ་སླར་ལོག་འབད་མི་ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> iscube 1\n--  True\n--  >>> iscube 2\n--  False\n--  >>> iscube (-1)\n--  True\n--  >>> iscube 64\n--  True\n--  >>> iscube 0\n--  True\n--  >>> iscube 180\n--  False\niscube :: Int -> Bool\niscube a =","canonical_solution":"iscube :: Int -> Bool\niscube a = let n = round (fromIntegral a ** (1\/3)) in n^3 == a","tests":"\nmain :: IO ()\nmain = do\n  let candidate = iscube\n  if candidate 1 == True then pure () else error \"assertion failed\"\n  if candidate 2 == False then pure () else error \"assertion failed\"\n  if candidate (-1) == True then pure () else error \"assertion failed\"\n  if candidate 64 == True then pure () else error \"assertion failed\"\n  if candidate 180 == False then pure () else error \"assertion failed\"\n  if candidate 1000 == True then pure () else error \"assertion failed\"\n  if candidate 0 == True then pure () else error \"assertion failed\"\n  if candidate 1729 == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_78","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--དེ་ལས་ བརྡ་རྟགས་ A,B,C,D,E,F འདི་ཨ་རྟག་རང་ སྦོམ་ཡིག་སྦེ་རང་ཨིན།--དྲན་གསོ། ཁྱོད་ཀྱིས་ཨེབ་གཏང་འདི་ རྒྱུན་ཆད་མེད་པར་ཕྲང་ ཡང་ན་ སྟོང་པ་སྦེ་བཟོཝ་ཨིན།--བི་ (=བཅུ་ཆ་༡༡) དང་ཌི་ (=བཅུ་ཆ་༡༣) ཨིན།--ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཚུ་ ངེས་གཏན་བཟོ་དགོཔ་ཨིན། ༢,༣,༥,༧, --ཨང་གྲངས་ཚུའི་ཨང་གྲངས་འདི་ ༢,༣,༥,༧,༡༡,༡༣,༡༧ ...ཨིན།--ཨང་གྲངས་ཧེ་ཀ་ཌེ་སི་མཱལ་འདི་ ༠,༡,༢,༣,༤,༥,༦,༧,༨,༩, A,B,C,D,E,Fཨིན།--༡ ལས་སྦོམ་ཤོས་འདི་ རང་བཞིན་གྱི་ཨང་གྲངས་ཆུང་བ་གཉིས་ལས་ཐོན་མི་ཨིན།)--ཨང་གྲངས་ཚུ་ (ཨང་གྲངས་ངོ་མ་ ཡང་ན་ ཨང་གྲངས་ངོ་མ་འདི་ རང་བཞིན་གྱི་ཨང་གྲངས་ཨིན།--ཨང་གྲངས་ཧེ་ཀ་ཌེ་སི་མཱལ་འདི་ string སྦེ་བཙུགས་ཏེ་ ཨང་གྲངས་ཧེ་ཀ་ཌེ་སི་མཱལ་ ཚུ་རྩིས་སྟོནམ་ཨིན།--ཁྱོད་ཀྱིས་ ཌའི་ལོག་ཅིག་ཐོབ་པའི་འགན་ཁུར་འདི་ འབྲི་དགོཔ་ཨིན།--  >>> hexKey \"AB\"\n--  1\n--  >>> hexKey \"1077E\"\n--  2\n--  >>> hexKey \"ABED1A33\"\n--  4\n--  >>> hexKey \"123456789ABCDEF0\"\n--  6\n--  >>> hexKey \"2020\"\n--  2\nhexKey :: String -> Int\nhexKey num =","canonical_solution":"hexKey :: String -> Int\nhexKey num = length . filter (`elem` primeHexDigits) $ num\n  where\n    primeHexDigits = \"2357BD\"","tests":"\nmain :: IO ()\nmain = do\n  let candidate = hexKey\n  if candidate \"AB\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"1077E\" == 2 then pure () else error \"assertion failed\"\n  if candidate \"ABED1A33\" == 4 then pure () else error \"assertion failed\"\n  if candidate \"2020\" == 2 then pure () else error \"assertion failed\"\n  if candidate \"123456789ABCDEF0\" == 6 then pure () else error \"assertion failed\"\n  if candidate \"112233445566778899AABBCCDDEEFF00\" == 12 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_79","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ལྷག་ལུས་ཡིག་འབྲུ་ཚུ་ ཤོག་ལེབ་བཟོ་རྣམ་ལུ་ཕན་ཐོགས་ཡོདཔ་ཨིན།--string གི་འགོ་དང་མཇུག་ནང་ལུ་ ཌི་བི་ཡིག་འབྲུ་གཉིས་རེ་ལྷག་ལུས་འོང་།--ཨང་གྲངས་ནང་ཐིག་ཡིག་རེ་རེ་ '0' ཡང་ན་ '1' ཨིན།--binary format. functionའདི་གིས་ string སླར་ལོག་འབད་དགོཔ་ཨིན་ དེ་ལས་ཡིག་འབྲུ་རེ་རེ་གིས་ binary འདི་ངོ་ཚབ་འབདཝ་ཨིན།--ཁྱོད་ཀྱིས་ཨང་གྲངས་འདི་ ཨང་གྲངས་བཅུ་གྲངས་སྦེ་ཐོབ་སྟེ་ ཁྱོད་ཀྱི་ལཱ་འདི་ ཨང་གྲངས་འདི་ སྦེ་བསྒྱུར་ནི་ཨིན།--  >>> decimalToBinary 15\n--  \"db1111db\"\n--  >>> decimalToBinary 32\n--  \"db100000db\"\ndecimalToBinary :: Int -> String\ndecimalToBinary decimal =","canonical_solution":"decimalToBinary :: Int -> String\ndecimalToBinary decimal = \"db\" ++ toBinary decimal ++ \"db\"\n  where\n    toBinary 0 = \"0\"\n    toBinary n = reverse (binaryHelper n)\n\n    binaryHelper 0 = \"\"\n    binaryHelper n = let (q, r) = n `divMod` 2 in show r ++ binaryHelper q","tests":"\nmain :: IO ()\nmain = do\n  let candidate = decimalToBinary\n  if candidate 0 == \"db0db\" then pure () else error \"assertion failed\"\n  if candidate 32 == \"db100000db\" then pure () else error \"assertion failed\"\n  if candidate 103 == \"db1100111db\" then pure () else error \"assertion failed\"\n  if candidate 15 == \"db1111db\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_80","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --string འདི་ haphs ཨིནམ་ད་ འདི་ཡང་ ཡི་གུ་༣ གྱི་རིང་ཚད་དང་ ཡི་གུ་༣ གྱི་རིང་ཚད་སོ་སོར་ཡོད་པ་ཅིན་ཨིན།--ཁྱོད་ཀྱི་ལཱ་འདི་ stringའདི་ haphs ཡང་ན་མེན་ན་བརྟག་དཔྱད་འབད་དགོ--ཁྱོད་ཀྱིས་ string s ཅིག་ཐོབ་ནུག--  >>> isHappy \"a\"\n--  False\n--  >>> isHappy \"aa\"\n--  False\n--  >>> isHappy \"abcd\"\n--  True\n--  >>> isHappy \"aabb\"\n--  False\n--  >>> isHappy \"adb\"\n--  True\n--  >>> isHappy \"xyy\"\n--  False\nisHappy :: String -> Bool\nisHappy s =","canonical_solution":"isHappy :: String -> Bool\nisHappy s\n  | length s < 3 = False\n  | otherwise = all distinctTriples (windows 3 s)\n  where\n    distinctTriples [x, y, z] = x \/= y && y \/= z && x \/= z\n    distinctTriples _ = False\n    windows n xs\n      | length xs < n = []\n      | otherwise = take n xs : windows n (tail xs)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = isHappy\n  if candidate \"a\" == False then pure () else error \"assertion failed\"\n  if candidate \"aa\" == False then pure () else error \"assertion failed\"\n  if candidate \"abcd\" == True then pure () else error \"assertion failed\"\n  if candidate \"aabb\" == False then pure () else error \"assertion failed\"\n  if candidate \"adb\" == True then pure () else error \"assertion failed\"\n  if candidate \"xyy\" == False then pure () else error \"assertion failed\"\n  if candidate \"iopaxpoi\" == True then pure () else error \"assertion failed\"\n  if candidate \"iopaxioi\" == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_81","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--༠.༠ ཨེ--> ༠.༠ D- --> 0.7 D ཨིན།-->༡.༠ D+ ཨིན།--> ༡.༣ C- --> ༡.༧ C ཨིན།-->༢.༠ C+ ཨིན།--> 2.3 B- ཟེར་མི་འདི་-->2.7 B ཟེར་མི་འདི་ཨིན།-->༣.༠ བི་+ ཨིན།--> ༣.༣ A- ཟེར་--> ༣.༧ A ཨིན།--༤.༠ ཨེ+ ཨིན།--GPA འབྲི་ཤོག་གི་ཨང་རྟགས་ --འོག་གི་ཐིག་ཁྲམ་འདི་ལག་ལེན་འཐབ་ཐོག་ལས་ ཡིག་འབྲུ་གི་དབྱེ་བ་ཚུ་ ཕྱིར་ཐོན་འབད་ཚུགས་པའི་འགན་ཁ།--ཁོ་གིས་ སློབ་ཕྲུག་ཚུ་གི་ GPA ཚུ་གི་ཐོ་ཅིག་ ཁྱོད་ལུ་བྱིན་ཏེ་ཡོདཔ་ལས་ ཁྱོད་ཀྱིས་ འབྲི་དགོཔ་ཨིན།--དཀའ་ངལ་འདི་ མོ་གིས་ཚད་གཞི་བཟོ་ནིའི་དོན་ལུ་ ལག་ལེན་འཐབ་མི་ ཨང་བཏགས་འདི་འབྱང་སོང་ཡོདཔ་ཨིན།--སློབ་དཔོན་གྱིས་ སློབ་ཕྲུག་ཚུ་ལུ་ ཨང་བཏགས་ནི་གི་ ཨལ་གོར་ཇི་མཱིས་འདི་ མོ་རང་བཟོ་ནུག--ད་ལོ་འདི་ སློབ་རིམ་མཇུག་གི་ བདུན་ཕྲག་འདི་ཨིནམ་ལས་ སློབ་དཔོན་གྱིས་ སྐུགས་ཚད་ཚུ་བྱིན་དགོཔ་ཨིན།--  >>> gradeEquation [4.0,3,1.7,2,3.5]\n--  [\"A+\",\"B\",\"C-\",\"C\",\"A-\"]\nnumericalLetterGrade :: [Float] -> [String]\nnumericalLetterGrade grades =","canonical_solution":"numericalLetterGrade :: [Float] -> [String]\nnumericalLetterGrade grades = map gpaToLetterGrade grades\n  where\n    gpaToLetterGrade gpa\n      | gpa == 4.0 = \"A+\"\n      | gpa > 3.7  = \"A\"\n      | gpa > 3.3  = \"A-\"\n      | gpa > 3.0  = \"B+\"\n      | gpa > 2.7  = \"B\"\n      | gpa > 2.3  = \"B-\"\n      | gpa > 2.0  = \"C+\"\n      | gpa > 1.7  = \"C\"\n      | gpa > 1.3  = \"C-\"\n      | gpa > 1.0  = \"D+\"\n      | gpa > 0.7  = \"D\"\n      | gpa > 0.0  = \"D-\"\n      | otherwise  = \"E\"","tests":"\nmain :: IO ()\nmain = do\n  let candidate = numericalLetterGrade\n  if candidate [4.0,3,1.7,2,3.5] == [\"A+\",\"B\",\"C-\",\"C\",\"A-\"] then pure () else error \"assertion failed\"\n  if candidate [1.2] == [\"D+\"] then pure () else error \"assertion failed\"\n  if candidate [0.5] == [\"D-\"] then pure () else error \"assertion failed\"\n  if candidate [0.0] == [\"E\"] then pure () else error \"assertion failed\"\n  if candidate [1.0,0.3,1.5,2.8,3.3] == [\"D\",\"D-\",\"C-\",\"B\",\"B+\"] then pure () else error \"assertion failed\"\n  if candidate [0.0,0.7] == [\"E\",\"D-\"] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_82","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་སྟོན་ --length དེ་ཨང་གྲངས་ངོ་མ་ཅིག་ཨིན་པ་ཅིན་ ཡང་ན་ False དེ་མེན་པ་ཅིན་ --ཁྱོད་ཀྱིས་ཐིག་ཁྲམ་ཅིག་ལེན་ཏེ་ ཕྲང་སྒྲིག་ཅིག་ཡོད་པ་ཅིན་ True སླར་ལོག་འབད་ནིའི་ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> primeLength \"Hello\"\n--  True\n--  >>> primeLength \"abcdcba\"\n--  True\n--  >>> primeLength \"kittens\"\n--  True\n--  >>> primeLength \"orange\"\n--  False\nprimeLength :: String -> Bool\nprimeLength string =","canonical_solution":"primeLength :: String -> Bool\nprimeLength string = isPrime (length string)\n\nisPrime :: Int -> Bool\nisPrime n\n  | n < 2     = False\n  | n == 2    = True\n  | even n    = False\n  | otherwise = null [ x | x <- [3, 5 .. floor (sqrt (fromIntegral n))], n `mod` x == 0 ]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = primeLength\n  if candidate \"Hello\" == True then pure () else error \"assertion failed\"\n  if candidate \"abcdcba\" == True then pure () else error \"assertion failed\"\n  if candidate \"kittens\" == True then pure () else error \"assertion failed\"\n  if candidate \"orange\" == False then pure () else error \"assertion failed\"\n  if candidate \"wow\" == True then pure () else error \"assertion failed\"\n  if candidate \"world\" == True then pure () else error \"assertion failed\"\n  if candidate \"MadaM\" == True then pure () else error \"assertion failed\"\n  if candidate \"Wow\" == True then pure () else error \"assertion failed\"\n  if candidate \"\" == False then pure () else error \"assertion failed\"\n  if candidate \"HI\" == True then pure () else error \"assertion failed\"\n  if candidate \"go\" == True then pure () else error \"assertion failed\"\n  if candidate \"gogo\" == False then pure () else error \"assertion failed\"\n  if candidate \"aaaaaaaaaaaaaaa\" == False then pure () else error \"assertion failed\"\n  if candidate \"Madam\" == True then pure () else error \"assertion failed\"\n  if candidate \"M\" == False then pure () else error \"assertion failed\"\n  if candidate \"0\" == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_83","nl":"dzo_Tibt","pl":"hs","prompt":"--ཨང་གྲངས་ཚུའི་ནང་ ཚུད་དེ་ཡོད་པའི་ཨང་གྲངས་ཚུའི་ནང་ ཚུད་དེ་ཡོད་པའི་ཨང་གྲངས་ཚུའི་ནང་ ཚུད་དེ་ཡོད་པའི་ཨང་གྲངས་ཚུའི་ནང་ ཚུད་དེ་ཡོདཔ་ཨིན།--ཌའི་ལོག་ནང་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཚུ་སླར་ལོག་འབདཝ་ཨིན།startsOneEnds :: Int -> Int\nstartsOneEnds n =","canonical_solution":"startsOneEnds :: Int -> Int\nstartsOneEnds n\n  | n <= 0    = 0\n  | n == 1    = 1\n  | otherwise = 18 * 10^(n-2)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = startsOneEnds\n  if candidate 1 == 1 then pure () else error \"assertion failed\"\n  if candidate 2 == 18 then pure () else error \"assertion failed\"\n  if candidate 3 == 180 then pure () else error \"assertion failed\"\n  if candidate 4 == 1800 then pure () else error \"assertion failed\"\n  if candidate 5 == 18000 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_84","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་ --ཌའི་ལོག་ནང་ ཨང་གྲངས་ཚུའི་བསྡོམས་དེ་སླར་ལོག་འབདཝ་ཨིན།--  >>> solve 1000\n--  \"1\"\n--  >>> solve 150\n--  \"110\"\n--  >>> solve 147\n--  \"1100\"\n--  Variables:\n--  @N integer\n--  Constraints: 0 ≤ N ≤ 10000.\n--  Output:\n--  a string of binary number\nsolve :: Int -> String\nsolve N =","canonical_solution":"solve :: Int -> String\nsolve N = toBinary (sumOfDigits N)\n  where\n    sumOfDigits 0 = 0\n    sumOfDigits n = (n `mod` 10) + sumOfDigits (n `div` 10)\n\n    toBinary 0 = \"0\"\n    toBinary n = reverse (toBinary' n)\n      where\n        toBinary' 0 = \"\"\n        toBinary' x = let (q, r) = x `divMod` 2 in intToDigit r : toBinary' q","tests":"\nmain :: IO ()\nmain = do\n  let candidate = solve\n  if candidate 1000 == \"1\" then pure () else error \"assertion failed\"\n  if candidate 150 == \"110\" then pure () else error \"assertion failed\"\n  if candidate 147 == \"1100\" then pure () else error \"assertion failed\"\n  if candidate 333 == \"1001\" then pure () else error \"assertion failed\"\n  if candidate 963 == \"10010\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_85","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ལྡེ་མིག་འདི་ སྟོངམ་མེན་པའི་ཨང་གྲངས་མཐའ་དག་གི་ཐོ་ཡིག་ཅིག་ལུ་བྱིན་ཏེ་ དང་པ་རང་ ཨང་གྲངས་ཆ་སྙོམས་ཚུ་ ཨང་གྲངས་ཆ་སྙོམས་དང་མ་འདྲ་བའི་ཨང་གྲངས་ཚུ་ནང་བསྡོམས་དགོ།--  >>> add [4,2,6,7]\n--  2\nadd :: [Int] -> Int\nadd lst =","canonical_solution":"add :: [Int] -> Int\nadd lst = sum [x | (i, x) <- zip [0..] lst, odd i, even x]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = add\n  if candidate [4,88] == 88 then pure () else error \"assertion failed\"\n  if candidate [4,5,6,7,2,122] == 122 then pure () else error \"assertion failed\"\n  if candidate [4,0,6,7] == 0 then pure () else error \"assertion failed\"\n  if candidate [4,4,6,8] == 12 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_86","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --དྲན་གསོ། ཁྱོད་ཀྱིས་ཚིག་དང་ བར་སྟོང་གི་རིམ་པ་ཚུ་ ཚིག་ཡིག་ནང་ལུ་བཞག་དགོ།--ཚད་འཛིན་གྱི་གོང་ཚད་ལུ་གཞི་བཞག་སྟེ་ ཡར་སེང་འབད་ཐངས་ཨིན།--ཚིག་གསརཔ་ཅིག་གིས་ཚབ་བཙུགས་ཡོདཔ་ད་ དེ་ནང་ལུ་ ཡིག་འབྲུ་ཆ་མཉམ་རིམ་སྒྲིག་འབད་ཡོདཔ་ཨིན།--string གི་རིམ་སྒྲིག་འབད་ཡོད་པའི་རྣམ་པ་འདི་ string འདི་ནང་ལུ་ ཚིག་ཆ་མཉམ་ (བར་སྟོང་གིས་སོ་སོར་) ཨིན།--ཕྲ་རིང་ཅིག་ལེན་ཏེ་ འདི་གི་རིམ་སྒྲིག་ཅིག་སླར་ལོག་འབད་ནིའི་དོན་ལས་ ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> antiShuffle \"Hi\"\n--  \"Hi\"\n--  >>> antiShuffle \"hello\"\n--  \"ehllo\"\n--  >>> antiShuffle \"Hello World!!!\"\n--  \"Hello !!!Wdlor\"\nantiShuffle :: String -> String\nantiShuffle s =","canonical_solution":"import Data.List (sort)\nimport Data.Char (isAlpha)\n\nantiShuffle :: String -> String\nantiShuffle s = unwords $ map sortWord (wordsAndSpaces s)\n  where\n    sortWord word = if all isAlpha word then sort word else word\n    wordsAndSpaces [] = []\n    wordsAndSpaces xs = if head xs == ' ' \n                        then \" \" : wordsAndSpaces (dropWhile (== ' ') xs)\n                        else let (word, rest) = break (== ' ') xs\n                             in word : wordsAndSpaces rest","tests":"\nmain :: IO ()\nmain = do\n  let candidate = antiShuffle\n  if candidate \"Hi\" == \"Hi\" then pure () else error \"assertion failed\"\n  if candidate \"hello\" == \"ehllo\" then pure () else error \"assertion failed\"\n  if candidate \"number\" == \"bemnru\" then pure () else error \"assertion failed\"\n  if candidate \"abcd\" == \"abcd\" then pure () else error \"assertion failed\"\n  if candidate \"Hello World!!!\" == \"Hello !!!Wdlor\" then pure () else error \"assertion failed\"\n  if candidate \"\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is Meirst .Rboot How aer ?ouy\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_87","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--དེ་བཟུམ་སྦེ་ ཐིག་ཁྲམ་ནང་གི་ས་སྒོ་ཚུ་ གྱལ་རིམ་གྱིས་རིམ་སྒྲིག་འབད་དགོ--ཚད་འཛིན་ཚུ་ འགོ་དང་པ་གྲལ་རིམ་ནང་ ཡར་སེང་གི་རིམ་པ་ལས་རིམ་སྒྲིག་འབད།--ཕྲང་སྒྲིག་རེ་འདི་ ༠ ལས་འགོ་བཙུགསཔ་ཨིན།--དེ་ལས་ ཌའི་ལོག་གི་ཐོ་ཡིག་འདི་ [(x1, y1), (x2, y2) ...] འདི་བཟུམ་འབད་འབདཝ་ལས་ --lst དང་ཧྲིལ་ཨང་ x ཚུ་བྱིན་ཏེ་ ཨང་གྲངས་ཧྲིལ་ཨང་ x འདི་ཐོ་ཡིག་ནང་ལུ་འཚོལ་དགོ།--ཐིག་ཁྲམ་རེ་རེའི་ནང་ ཀེར་ཐིག་གི་གྱངས་ཁ་མ་འདྲཝ་སྦེ་འོང་ཚུགས།--འདི་ཡང་ matrix དང་འདྲཝ་ཅིག་ཨིན་རུང་ matrix དང་མ་འདྲ་བ་ཨིན།--ཁྱོད་ཀྱིས་ ཌི་ཨེམ་ཌི་ཌི་གི་ གནས་སྡུད་ཅིག་ཐོབ་སྟེ་ འདི་ཡང་ སྦྲགས་ཡོད་པའི་ཐོ་ཡིག་བཟུམ་ཅིག་སྦེ་ ཌི་ཨེམ་ཌི་ཌི་ཌི་གི་ གནས་སྡུད་དེ་ ཌི་ཨེམ་ཌི་ཌི་གི་ གནས་སྡུད་ཨིནམ་སྦེ་--  >>> getRow [[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]] 1\n--  [(0, 0),(1, 4),(1, 0),(2, 5),(2, 0)]\n--  >>> getRow [] 1\n--  []\n--  >>> getRow [[],[1],[1,2,3]] 3\n--  [(2, 2)]\ngetRow :: [[Int]] -> Int -> [(Int, Int)]\ngetRow lst x =","canonical_solution":"getRow :: [[Int]] -> Int -> [(Int, Int)]\ngetRow lst x = concatMap processRow (zip [0..] lst)\n  where\n    processRow (rowIndex, row) = \n      let colIndices = reverse $ findIndices (== x) row\n      in [(rowIndex, colIndex) | colIndex <- colIndices]\n\nfindIndices :: (a -> Bool) -> [a] -> [Int]\nfindIndices p lst = [i | (i, val) <- zip [0..] lst, p val]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = getRow\n  if candidate [[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]] 1 == [(0, 0),(1, 4),(1, 0),(2, 5),(2, 0)] then pure () else error \"assertion failed\"\n  if candidate [[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]] 2 == [(0, 1),(1, 1),(2, 1),(3, 1),(4, 1),(5, 1)] then pure () else error \"assertion failed\"\n  if candidate [[1,2,3,4,5,6],[1,2,3,4,5,6],[1,1,3,4,5,6],[1,2,1,4,5,6],[1,2,3,1,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]] 1 == [(0, 0),(1, 0),(2, 1),(2, 0),(3, 2),(3, 0),(4, 3),(4, 0),(5, 4),(5, 0),(6, 5),(6, 0)] then pure () else error \"assertion failed\"\n  if candidate [] 1 == [] then pure () else error \"assertion failed\"\n  if candidate [[1]] 2 == [] then pure () else error \"assertion failed\"\n  if candidate [[],[1],[1,2,3]] 3 == [(2, 2)] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_88","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--* ཁྱོད་ཀྱིས་ བྱིན་ཡོད་པའི་ཐོ་ཡིག་འདི་ བསྒྱུར་བཅོས་མ་རྐྱབས་།--དྲན་གསོ།--ཡང་ན་ ཨང་གྲངས་ཚུ་མར་འབབ་འགྱོ་མི་རིམ་པ་ལུ་དབྱེ་བ་ཕྱེ་བ་ཅིན་ (རྩིས་གཞི་དང་པའི་གནས་གོང་དང་ མཇུག་གི་གནས་གོང་) འདི་ཡང་ཨིན།--ཁྱོད་ཀྱིས་ཐོ་ཡིག་འདི་ཡར་སེང་གི་རིམ་པ་ལུ་དབྱེ་བ་ཕྱེ་ནི་ཨིན་པ་ཅིན་བསྡོམས་ (ཐོག་མའི་ཨང་རྟགས་གོང་ཚད་དང་ མཇུག་གི་ཨང་རྟགས་གོང་ཚད་) འདི་རྣམ་རྟོག་ཨིནམ་སྦེ་མཐོང་འོང་།--ནུས་མེད་ཨང་གྲངས་ཀྱི་ཐོ་འདི་བྱིན་ཏེ་ རིམ་སྒྲིག་འབད་བའི་ཤུལ་ལས་ བྱིན་ཡོད་པའི་ཐོ་ཡིག་གི་ cohs སླར་ལོག་འབདཝ་ཨིན།--  >>> sortArray []\n--  []\n--  >>> sortArray [5]\n--  [5]\n--  >>> sortArray [2,4,3,0,1,5]\n--  [0,1,2,3,4,5]\n--  >>> sortArray [2,4,3,0,1,5,6]\n--  [6,5,4,3,2,1,0]\nsortArray :: [Int] -> [Int]\nsortArray array =","canonical_solution":"sortArray :: [Int] -> [Int]\nsortArray array\n  | null array = array\n  | otherwise =\n    let first = head array\n        last = last array\n        sumFirstLast = first + last\n    in if odd sumFirstLast\n       then sort array\n       else reverse (sort array)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = sortArray\n  if candidate [] == [] then pure () else error \"assertion failed\"\n  if candidate [5] == [5] then pure () else error \"assertion failed\"\n  if candidate [2,4,3,0,1,5] == [0,1,2,3,4,5] then pure () else error \"assertion failed\"\n  if candidate [2,4,3,0,1,5,6] == [6,5,4,3,2,1,0] then pure () else error \"assertion failed\"\n  if candidate [2,1] == [1,2] then pure () else error \"assertion failed\"\n  if candidate [15,42,87,32,11,0] == [0,11,15,32,42,87] then pure () else error \"assertion failed\"\n  if candidate [21,14,23,11] == [23,21,14,11] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_89","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --གྱངས་ཁ་འདི་ ༢ ལུ་ཡར་འཕར་ཏེ་ ༢ ལུ་ཡར་འཕར་འགྱོ་འོང་།--ཨེཕ་བི་འདི་ ཚིག་ཡིག་ ཚུ་ ཡོད་པའི་ཐབས་ལམ་ཅིག་ནང་ བསྒྱུར་དགོཔ་ཨིན།--ཨེབ་གཏང་འབད་ཡོད་པའི་ཡིག་འབྲུ་འདི་ ཕྱིར་འཐོན་འབདཝ་ཨིན།--སྐར་ཁུང་ནང་ལུ་ གྲུབ་རྟགས་སྦེ་ གྲལ་ཐིག་ཅིག་ལེན་ཏེ་ ཌའི་ལོག་ནང་ ཌའི་ལོག་ནང་ ཌའི་ལོག་ནང་ ཌའི་ལོག་ནང་ ཌའི་ལོག་ནང་ ཌའི་ལོག་ནང་ ཌའི་ལོག་ནང་ ཌའི་ལོག་ནང་ ཌའི་ལོག་ནང་--  >>> encrypt \"hi\"\n--  \"lm\"\n--  >>> encrypt \"asdfghjkl\"\n--  \"ewhjklnop\"\n--  >>> encrypt \"gf\"\n--  \"kj\"\n--  >>> encrypt \"et\"\n--  \"ix\"\nencrypt :: String -> String\nencrypt s =","canonical_solution":"encrypt :: String -> String\nencrypt s = map shiftChar s\n  where\n    shiftChar c\n      | 'a' <= c && c <= 'z' = chr ((ord c - ord 'a' + 4) `mod` 26 + ord 'a')\n      | 'A' <= c && c <= 'Z' = chr ((ord c - ord 'A' + 4) `mod` 26 + ord 'A')\n      | otherwise = c","tests":"\nmain :: IO ()\nmain = do\n  let candidate = encrypt\n  if candidate \"hi\" == \"lm\" then pure () else error \"assertion failed\"\n  if candidate \"asdfghjkl\" == \"ewhjklnop\" then pure () else error \"assertion failed\"\n  if candidate \"gf\" == \"kj\" then pure () else error \"assertion failed\"\n  if candidate \"et\" == \"ix\" then pure () else error \"assertion failed\"\n  if candidate \"faewfawefaewg\" == \"jeiajeaijeiak\" then pure () else error \"assertion failed\"\n  if candidate \"hellomyfriend\" == \"lippsqcjvmirh\" then pure () else error \"assertion failed\"\n  if candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\" == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" then pure () else error \"assertion failed\"\n  if candidate \"a\" == \"e\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_90","nl":"dzo_Tibt","pl":"hs","prompt":"--དེ་བཟུམ་ཅིག་མེད་པ་ཅིན་ ག་ནི་ཡང་ལོག་གཏང་།--Next_smallest () ལས་འགན་འབྲི་ཞིནམ་ལས་ ཐོ་ཡིག་ནང་གི་ ཨང་གཉིས་པ་ཆུང་ཤོས་འདི་ལོག་བྱིན་འོང་།--ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་ཚུ་ བྱིན་ཡོདཔ་ཨིན།--  >>> nextSmallest [1,2,3,4,5]\n--  Just (2)\n--  >>> nextSmallest [5,1,4,3,2]\n--  Just (2)\n--  >>> nextSmallest []\n--  Just (Nothing)\n--  >>> nextSmallest [1,1]\n--  Just (Nothing)\nnextSmallest :: [Int] -> Maybe Int\nnextSmallest lst =","canonical_solution":"nextSmallest :: [Int] -> Maybe Int\nnextSmallest lst =\n  let uniqueSorted = removeDuplicates $ quicksort lst\n  in if length uniqueSorted < 2\n     then Nothing\n     else Just (uniqueSorted !! 1)\n\nremoveDuplicates :: (Ord a) => [a] -> [a]\nremoveDuplicates = foldr (\\x acc -> if x `elem` acc then acc else x : acc) []\n\nquicksort :: (Ord a) => [a] -> [a]\nquicksort [] = []\nquicksort (x:xs) =\n  let smallerSorted = quicksort [a | a <- xs, a <= x]\n      biggerSorted = quicksort [a | a <- xs, a > x]\n  in smallerSorted ++ [x] ++ biggerSorted","tests":"\nmain :: IO ()\nmain = do\n  let candidate = nextSmallest\n  if candidate [1,2,3,4,5] == Just (2) then pure () else error \"assertion failed\"\n  if candidate [5,1,4,3,2] == Just (2) then pure () else error \"assertion failed\"\n  if candidate [] == Just (Nothing) then pure () else error \"assertion failed\"\n  if candidate [1,1] == Just (Nothing) then pure () else error \"assertion failed\"\n  if candidate [1,1,1,1,0] == Just (1) then pure () else error \"assertion failed\"\n  if candidate [1,1] == Just (Nothing) then pure () else error \"assertion failed\"\n  if candidate [(-35),34,12,(-45)] == Just ((-35)) then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_91","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --ཚིག་ཡིག་ཚུ་ \"\", \"?\" ཡང་ན་ \"!\" དང་གཅིག་ཁར་ དབྱེ་སེལ་འབདཝ་ཨིན།--རྒྱུད་བསྐུལ་འདི་ \"I\" ཟེར་མི་ཚིག་འདི་དང་འགོ་བཙུགས་མི་ཚིག་ཅིག་ཨིན།--ཁྱོད་ཀྱིས་ ཚིག་ཡིག་གི་ཐིག་ཁྲམ་ཅིག་ཐོབ་སྟེ་ ཁྱོད་ཀྱི་ལཱ་འདི་ ཨང་གྲངས་རྩིས་ནི་ཨིན།--  >>> isBored \"Hello world\"\n--  0\n--  >>> isBored \"The sky is blue. The sun is shining. I love this weather\"\n--  1\nisBored :: String -> Int\nisBored S =","canonical_solution":"isBored :: String -> Int\nisBored s = length $ filter (startsWithI . words) $ splitSentences s\n  where\n    splitSentences :: String -> [String]\n    splitSentences = filter (not . null) . map (dropWhile (== ' ')) . splitOnDelimiters \".?!\"\n    \n    splitOnDelimiters :: String -> String -> [String]\n    splitOnDelimiters delims str = case dropWhile (`elem` delims) str of\n      \"\" -> []\n      s' -> let (w, s'') = break (`elem` delims) s' in w : splitOnDelimiters delims s''\n    \n    startsWithI :: [String] -> Bool\n    startsWithI [] = False\n    startsWithI (x:_) = map toLower x == \"i\"","tests":"\nmain :: IO ()\nmain = do\n  let candidate = isBored\n  if candidate \"Hello world\" == 0 then pure () else error \"assertion failed\"\n  if candidate \"Is the sky blue?\" == 0 then pure () else error \"assertion failed\"\n  if candidate \"I love It !\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"bIt\" == 0 then pure () else error \"assertion failed\"\n  if candidate \"I feel good today. I will be productive. will kill It\" == 2 then pure () else error \"assertion failed\"\n  if candidate \"You and I are going for a walk\" == 0 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_92","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་སྟོན་ --གནད་དོན་གཞན་ཚུ་ནང་ false སླར་ལོག་འབདཝ་ཨིན།--ཨང་གྲངས་གཅིག་འདི་ གཞན་གཉིས་བསྡོམས་དང་ ཨང་གྲངས་ཆ་མཉམ་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་ཚུ་ཨིན་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན།--ཨང་གྲངས་༣ འབད་མི་ལས་འགན་ཅིག་བཟོ།--  >>> anyInt 5 2 7\n--  True\n--  >>> anyInt 3 2 2\n--  False\n--  >>> anyInt 3 (-2) 1\n--  True\n--  >>> anyInt 3.6 -2.2 2\n--  False\nanyInt :: Float -> Float -> Float -> Bool\nanyInt x y z =","canonical_solution":"anyInt :: Float -> Float -> Float -> Bool\nanyInt x y z\n  | x == fromInteger (round x) && y == fromInteger (round y) && z == fromInteger (round z) =\n      x == y + z || y == x + z || z == x + y\n  | otherwise = False","tests":"\nmain :: IO ()\nmain = do\n  let candidate = anyInt\n  if candidate 2.0 3.0 1.0 == True then pure () else error \"assertion failed\"\n  if candidate 2.5 2.0 3.0 == False then pure () else error \"assertion failed\"\n  if candidate 1.5 5.0 3.5 == False then pure () else error \"assertion failed\"\n  if candidate 2.0 6.0 2.0 == False then pure () else error \"assertion failed\"\n  if candidate 4.0 2.0 2.0 == True then pure () else error \"assertion failed\"\n  if candidate 2.2 2.2 2.2 == False then pure () else error \"assertion failed\"\n  if candidate (-4).0 6.0 2.0 == True then pure () else error \"assertion failed\"\n  if candidate 2.0 1.0 1.0 == True then pure () else error \"assertion failed\"\n  if candidate 3.0 4.0 7.0 == True then pure () else error \"assertion failed\"\n  if candidate 3.0 4.0 7.0 == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_93","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ཡིག་འབྲུ་ཚུ་རྐྱངམ་ཅིག་ ཆ་འཇོག་འབད།--ཨིང་ལིཤ་གི་ཡིག་གཟུགས་ནང་ ཚིག་ཡིག་ཅིག་ཡོདཔ་ཨིན།--ཌའི་ལོག་ནང་ཡིག་འབྲུ་འདི་ ཌའི་ལོག་གི་ཧེ་མ་ས་སྒོ་ ༢ ཡོད་མི་ཡིག་འབྲུ་འདི་ཨིན།--ནང་ལུ་ ཚིག་ཡིག་ཆ་མཉམ་ལུ་ ཆེ་ཆུང་གི་ཚབ་ལུ་ ཟེར་བའི་ཚིག་ཡིག་འདི་བཙུགས་ཡོདཔ་ཨིན།--བརྡ་འཕྲིན་ཅིག་ལེན་ཏེ་ འདི་བཟུམ་ཅིག་སྦེ་ ཨང་བཏགས་མི་ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> encode \"test\"\n--  \"TGST\"\n--  >>> encode \"This is a message\"\n--  \"tHKS KS C MGSSCGG\"\nencode :: String -> String\nencode message =","canonical_solution":"encode :: String -> String\nencode = map transformChar\n  where\n    transformChar :: Char -> Char\n    transformChar c\n      | isVowel lowerC = toEnum (fromEnum lowerC + 2) `swapCase` c\n      | otherwise      = swapCase c c\n      where\n        lowerC = toLower c\n\n    isVowel :: Char -> Bool\n    isVowel c = c `elem` \"aeiou\"\n\n    swapCase :: Char -> Char -> Char\n    swapCase origC c\n      | isUpper origC = toLower c\n      | otherwise     = toUpper c","tests":"\nmain :: IO ()\nmain = do\n  let candidate = encode\n  if candidate \"TEST\" == \"tgst\" then pure () else error \"assertion failed\"\n  if candidate \"Mudasir\" == \"mWDCSKR\" then pure () else error \"assertion failed\"\n  if candidate \"YES\" == \"ygs\" then pure () else error \"assertion failed\"\n  if candidate \"This is a message\" == \"tHKS KS C MGSSCGG\" then pure () else error \"assertion failed\"\n  if candidate \"I DoNt KnOw WhAt tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_94","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ཁྱོད་ཀྱིས་ སྦོམ་ཤོས་ཨང་གྲངས་དང་པོ་འདི་འཚོལ་ཏེ་ ཨང་གྲངས་ཀྱི་བསྡོམས་འདི་ལོག་གཏང་དགོ།--ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་ཚུ་ བྱིན་ཡོདཔ་ཨིན།--  >>> skjkasdkd [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n--  10\n--  >>> skjkasdkd [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\n--  25\n--  >>> skjkasdkd [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n--  13\n--  >>> skjkasdkd [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\n--  11\n--  >>> skjkasdkd [0,81,12,3,1,21]\n--  3\n--  >>> skjkasdkd [0,8,1,2,1,7]\n--  7\nskjkasdkd :: [Int] -> Int\nskjkasdkd lst =","canonical_solution":"skjkasdkd :: [Int] -> Int\nskjkasdkd lst = sumDigits (largestPrime lst)\n\n-- Function to check if a number is prime\nisPrime :: Int -> Bool\nisPrime n\n  | n <= 1 = False\n  | n == 2 = True\n  | even n = False\n  | otherwise = null [x | x <- [3,5..isqrt n], n `mod` x == 0]\n\n-- Integer square root using binary search, O(log n)\nisqrt :: Int -> Int\nisqrt n = floor . sqrt $ fromIntegral n\n\n-- Function to find the largest prime in the list\nlargestPrime :: [Int] -> Int\nlargestPrime = foldr (\\x acc -> if isPrime x && x > acc then x else acc) 0\n\n-- Function to calculate the sum of the digits of a number\nsumDigits :: Int -> Int\nsumDigits 0 = 0\nsumDigits n = n `mod` 10 + sumDigits (n `div` 10)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = skjkasdkd\n  if candidate [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] == 10 then pure () else error \"assertion failed\"\n  if candidate [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] == 25 then pure () else error \"assertion failed\"\n  if candidate [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] == 13 then pure () else error \"assertion failed\"\n  if candidate [0,724,32,71,99,32,6,0,5,91,83,0,5,6] == 11 then pure () else error \"assertion failed\"\n  if candidate [0,81,12,3,1,21] == 3 then pure () else error \"assertion failed\"\n  if candidate [0,8,1,2,1,7] == 7 then pure () else error \"assertion failed\"\n  if candidate [8191] == 19 then pure () else error \"assertion failed\"\n  if candidate [8191,123456,127,7] == 19 then pure () else error \"assertion failed\"\n  if candidate [127,97,8192] == 10 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_95","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ལས་འགན་འདི་གིས་ false སླར་ལོག་འབད་དགོཔ་ཨིན། འདི་ཡང་འབྲེལ་མཐུད་ཐོ་འདི་ སྟོངམ་ཨིན།--case ཡང་ན་ ཀི་ཝི་ཚུ་ཆ་མཉམ་ uppercase ལུ་ཐིག་ཁྲམ་ཨིནམ་དང་ གཞན་འབད་བ་ཅིན་ false སླར་ལོག་འབདཝ་ཨིན།--འབྲེལ་བ་ཐོ་འདི་བྱིན་ཏེ་ ཁྱོད་ཀྱིས་ ཨེབ་རྟ་ག་ར་ འོག་ལུ་ཡོད་པའི་ཐིག་ཁྲམ་ཚུ་ཨིན་པ་ཅིན་ True སླར་ལོག་འབདཝ་ཨིན།--  >>> checkDictCase [(\"a\", \"apple\"), (\"b\", \"banana\")]\n--  True\n--  >>> checkDictCase [(\"a\", \"apple\"), (\"A\", \"banana\"), (\"B\", \"banana\")]\n--  False\n--  >>> checkDictCase [(\"a\", \"apple\"), (8, \"banana\"), (\"a\", \"apple\")]\n--  False\n--  >>> checkDictCase [(\"Name\", \"John\"), (\"Age\", \"36\"), (\"City\", \"Houston\")]\n--  False\n--  >>> checkDictCase [(\"STATE\", \"NC\"), (\"ZIP\", \"12345\")]\n--  True\ncheckDictCase :: [(String, String)] -> Bool\ncheckDictCase dict =","canonical_solution":"import Data.Char (isUpper, isLower)\n\ncheckDictCase :: [(String, String)] -> Bool\ncheckDictCase [] = False\ncheckDictCase dict = all isLower allKeys || all isUpper allKeys\n  where\n    allKeys = concatMap fst dict","tests":"\nmain :: IO ()\nmain = do\n  let candidate = checkDictCase\n  if candidate [(\"p\", \"pineapple\"), (\"b\", \"banana\")] == True then pure () else error \"assertion failed\"\n  if candidate [(\"p\", \"pineapple\"), (\"A\", \"banana\"), (\"B\", \"banana\")] == False then pure () else error \"assertion failed\"\n  if candidate [(\"p\", \"pineapple\"), (\"5\", \"banana\"), (\"a\", \"apple\")] == False then pure () else error \"assertion failed\"\n  if candidate [(\"Name\", \"John\"), (\"Age\", \"36\"), (\"City\", \"Houston\")] == False then pure () else error \"assertion failed\"\n  if candidate [(\"STATE\", \"NC\"), (\"ZIP\", \"12345\")] == True then pure () else error \"assertion failed\"\n  if candidate [(\"fruit\", \"Orange\"), (\"taste\", \"Sweet\")] == True then pure () else error \"assertion failed\"\n  if candidate [] == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_96","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེར་ན་: --ཨང་གྲངས་ཧྲིལ་བུམ་ཚུ་ ཨང་གྲངས་དང་པོ་དང་ n ལས་ཆུང་བ་ཨིན།--ཌའི་ལོག་གི་མིང་ཐོ་འདི་ ཌའི་ལོག་གི་མིང་ཐོ་ལུ་ གཞི་སྒྲིག་འབདཝ་ཨིན།--  >>> countUpTo 5\n--  [2,3]\n--  >>> countUpTo 11\n--  [2,3,5,7]\n--  >>> countUpTo 0\n--  []\n--  >>> countUpTo 20\n--  [2,3,5,7,11,13,17,19]\n--  >>> countUpTo 1\n--  []\n--  >>> countUpTo 18\n--  [2,3,5,7,11,13,17]\ncountUpTo :: Int -> [Int]\ncountUpTo n =","canonical_solution":"countUpTo :: Int -> [Int]\ncountUpTo n = filter isPrime [2..n-1]\n\nisPrime :: Int -> Bool\nisPrime k\n  | k < 2     = False\n  | otherwise = null [ x | x <- [2..isqrt k], k `mod` x == 0 ]\n\nisqrt :: Int -> Int\nisqrt = floor . sqrt . fromIntegral","tests":"\nmain :: IO ()\nmain = do\n  let candidate = countUpTo\n  if candidate 5 == [2,3] then pure () else error \"assertion failed\"\n  if candidate 6 == [2,3,5] then pure () else error \"assertion failed\"\n  if candidate 7 == [2,3,5] then pure () else error \"assertion failed\"\n  if candidate 10 == [2,3,5,7] then pure () else error \"assertion failed\"\n  if candidate 0 == [] then pure () else error \"assertion failed\"\n  if candidate 22 == [2,3,5,7,11,13,17,19] then pure () else error \"assertion failed\"\n  if candidate 1 == [] then pure () else error \"assertion failed\"\n  if candidate 18 == [2,3,5,7,11,13,17] then pure () else error \"assertion failed\"\n  if candidate 47 == [2,3,5,7,11,13,17,19,23,29,31,37,41,43] then pure () else error \"assertion failed\"\n  if candidate 101 == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_97","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ནང་བསྐྱོད་དེ་ དུས་རྒྱུན་དུ་ ཆ་གནས་ཅན་སྦེ་ར་སྡོད་འོང་ཟེར་ཆ་བཞགཔ་ཨིན།--ཤོག་ལེབ་འདི་ནང་ལུ་ ཨང་གྲངས་ཚུ་ གྱངས་ཁ་སྦེ་བཙུགས་ཏེ་བཙུགསཔ་ཨིན།--ཌའི་ལོག་ནང་ ཨང་གྲངས་ཧྲིལ་པོ་གཉིས་ལེན་པའི་ལས་འགན་འདི་ཚུ།--  >>> multiply 148 412\n--  16\n--  >>> multiply 19 28\n--  72\n--  >>> multiply 2020 1851\n--  0\n--  >>> multiply 14 (-15)\n--  20\nmultiply :: Int -> Int -> Int\nmultiply a b =","canonical_solution":"multiply :: Int -> Int -> Int\nmultiply a b = (abs a `mod` 10) * (abs b `mod` 10)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = multiply\n  if candidate 148 412 == 16 then pure () else error \"assertion failed\"\n  if candidate 19 28 == 72 then pure () else error \"assertion failed\"\n  if candidate 2020 1851 == 0 then pure () else error \"assertion failed\"\n  if candidate 14 (-15) == 20 then pure () else error \"assertion failed\"\n  if candidate 76 67 == 42 then pure () else error \"assertion failed\"\n  if candidate 17 27 == 49 then pure () else error \"assertion failed\"\n  if candidate 0 1 == 0 then pure () else error \"assertion failed\"\n  if candidate 0 0 == 0 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_98","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --སྐར་མ་ s ཅིག་བྱིན་པ་ཅིན་ ཕྲ་རིང་གི་ཡིག་འབྲུ་སྦོམ་ཚུ་རྩིས་སྟོནམ་ཨིན།--  >>> countUpper \"aBCdEf\"\n--  1\n--  >>> countUpper \"abcdefg\"\n--  0\n--  >>> countUpper \"dBBE\"\n--  0\ncountUpper :: String -> Int\ncountUpper s =","canonical_solution":"countUpper :: String -> Int\ncountUpper s = length [c | (i, c) <- zip [0..] s, i `mod` 2 == 0, c `elem` \"AEIOU\"]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = countUpper\n  if candidate \"aBCdEf\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"abcdefg\" == 0 then pure () else error \"assertion failed\"\n  if candidate \"dBBE\" == 0 then pure () else error \"assertion failed\"\n  if candidate \"B\" == 0 then pure () else error \"assertion failed\"\n  if candidate \"U\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"\" == 0 then pure () else error \"assertion failed\"\n  if candidate \"EEEE\" == 2 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_99","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་སྟོན་ --ཨང་གྲངས་ཆ་མཉམ་གཉིས་ལས་ བསྐོར་རྒྱབ་འབད་ཞིནམ་ལས་ ༠ ལས་ཁ་འབྱལ་གཏང་།--དེ་ལས་ ཕྲང་ཕྲང་གི་གྲངས་འདི་ རྒྱང་ཕྲང་སྦེ་ཡོད་པ་ཅིན་ ཕྲང་ཕྲང་གི་གྲངས་འདི་ རྒྱང་ཕྲང་སྦེ་ཡོད་པ་ཅིན་--ཌའི་ལོག་ཅིག་བཙུགསཔ་ཨིན།--  >>> closestInteger \"10\"\n--  10\n--  >>> closestInteger \"15.3\"\n--  15\n--  Note:\n--  Rounding away from zero means that if the given number is equidistant\n--  from two integers, the one you should return is the one that is the\n--  farthest from zero. For example closest_integer(\"14.5\") should\n--  return 15 and closest_integer(\"-14.5\") should return -15.\nclosestInteger :: String -> Int\nclosestInteger value =","canonical_solution":"closestInteger :: String -> Int\nclosestInteger value = \n  let n = read value :: Double\n  in if n > 0 then floor (n + 0.5) else ceiling (n - 0.5)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = closestInteger\n  if candidate \"10\" == 10 then pure () else error \"assertion failed\"\n  if candidate \"14.5\" == 15 then pure () else error \"assertion failed\"\n  if candidate \"-15.5\" == (-16) then pure () else error \"assertion failed\"\n  if candidate \"15.3\" == 15 then pure () else error \"assertion failed\"\n  if candidate \"0\" == 0 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_100","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--i འདི་ཚད་ (i+1) ནང་ རྡོ་གི་གྱངས་ཁ་འདི་ཨིན།--ཌེ་བི་ནང་ཡོད་པའི་ཐོ་ཡིག་ནང་ལུ་ ཚད་རེ་རེ་ནང་ཡོད་པའི་རྡོ་གྱངས་ཁ་སླར་ལོག་འབདཝ་ཨིན།--- nའདི་ཆ་མཉམ་ཨིན་པ་ཅིན་ ཤུལ་མའི་ཆ་མཉམ་ཨང་འདི་ཨིན།--- nའདི་ གྱངས་ཁ་མ་ཚངམ་ཨིན་པ་ཅིན་ ཤུལ་མའི་གྱངས་ཁ་འདི་ཨིན།--ཤུལ་མའི་གནས་ཚད་ནང་ལུ་ རྡོ་གི་གྱངས་ཁ་འདི་:--ཐོག་ཚད་དང་པ་འདི་ལུ་ རྡོ་ n ཡོདཔ་ཨིན།--ཁྱོད་ཀྱིས་ ཕྲ་རིང་གི་ཚད་ n འབད་མི་རྡོའི་ཐིག་ཁྲམ་ཅིག་བཟོ་དགོ་པ་ཅིན་ ཕྲ་རིང་གི་ཚད་ n འབད་མི་རྡོའི་ཐིག་ཁྲམ་ཅིག་བཟོ་དགོ་པ་ཅིན་ ཕྲ་རིང་གི་ཚད་ n འབད་མི་རྡོའི་ཐིག་ཁྲམ་ཅིག་བཟོ་དགོ་པ་ཅིན་ ཕྲ་རིང་གི་ཚད་ n འབད་མི་རྡོའི་ཐིག་ཁྲམ་ཅིག་བཟོ་དགོ་པ་ཅིན་--  >>> makeAPile 3\n--  [3,5,7]\nmakeAPile :: Int -> [Int]\nmakeAPile n =","canonical_solution":"makeAPile :: Int -> [Int]\nmakeAPile n = take n [n, n + 2 ..]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = makeAPile\n  if candidate 3 == [3,5,7] then pure () else error \"assertion failed\"\n  if candidate 4 == [4,6,8,10] then pure () else error \"assertion failed\"\n  if candidate 5 == [5,7,9,11,13] then pure () else error \"assertion failed\"\n  if candidate 6 == [6,8,10,12,14,16] then pure () else error \"assertion failed\"\n  if candidate 8 == [8,10,12,14,16,18,20,22] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_101","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --string འདི་ཚིག་ཡིག་སྦེ་ཁ་ཕྱེ་ཞིནམ་ལས་ ཚིག་ཡིག་གི་ཐོ་ཡིག་ཅིག་ལོག་གཏང་འོང་།--ཁྱོད་ཀྱིས་ཚིག་ཡིག་གི་ཐིག་ཁྲམ་ཅིག་ཐོབ་སྟེ་ དེ་ཚུ་དབྱེ་སྟེ་ ཀམ་ཡང་ན་ བར་སྟོང་གིས་བཏོག་འོང་། ཁྱོད་ཀྱི་ལཱ་འདི་ --  >>> wordsString \"Hi, my name is John\"\n--  [\"Hi\",\"my\",\"name\",\"is\",\"John\"]\n--  >>> wordsString \"One, two, three, four, five, six\"\n--  [\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"]\nwordsString :: String -> [String]\nwordsString s =","canonical_solution":"wordsString :: String -> [String]\nwordsString s = words $ map (\\c -> if c == ',' then ' ' else c) s","tests":"\nmain :: IO ()\nmain = do\n  let candidate = wordsString\n  if candidate \"Hi, my name is John\" == [\"Hi\",\"my\",\"name\",\"is\",\"John\"] then pure () else error \"assertion failed\"\n  if candidate \"One, two, three, four, five, six\" == [\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"] then pure () else error \"assertion failed\"\n  if candidate \"Hi, my name\" == [\"Hi\",\"my\",\"name\"] then pure () else error \"assertion failed\"\n  if candidate \"One,, two, three, four, five, six,\" == [\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"] then pure () else error \"assertion failed\"\n  if candidate \"\" == [] then pure () else error \"assertion failed\"\n  if candidate \"ahmed     , gamal\" == [\"ahmed\",\"gamal\"] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_102","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --དེ་བཟུམ་ཨང་གྲངས་མེད་པ་ཅིན་ ལས་འགན་འདི་གིས་ -༡ སླར་ལོག་འབདཝ་ཨིན།--སྦོམ་ཤོས་འདི་ [x, y] ནང་ཚུད་ཡོད་པའི་ཧྲིལ་ཨང་ཆ་མཉམ་ཨིན།--འ་ནི་ལས་འགན་འདི་གིས་ ནུས་ལྡན་ཨང་གྲངས་ x དང་ y གཉིས་ལེན་ཏེ་ སླར་ལོག་འབདཝ་ཨིན།--  >>> chooseNum 12 15\n--  14\n--  >>> chooseNum 13 12\n--  (-1)\nchooseNum :: Int -> Int -> Int\nchooseNum x y =","canonical_solution":"chooseNum :: Int -> Int -> Int\nchooseNum x y\n    | x > y = -1\n    | even upperBound = upperBound\n    | even (upperBound - 1) = upperBound - 1\n    | otherwise = -1\n  where\n    upperBound = max x y","tests":"\nmain :: IO ()\nmain = do\n  let candidate = chooseNum\n  if candidate 12 15 == 14 then pure () else error \"assertion failed\"\n  if candidate 13 12 == (-1) then pure () else error \"assertion failed\"\n  if candidate 33 12354 == 12354 then pure () else error \"assertion failed\"\n  if candidate 5234 5233 == (-1) then pure () else error \"assertion failed\"\n  if candidate 6 29 == 28 then pure () else error \"assertion failed\"\n  if candidate 27 10 == (-1) then pure () else error \"assertion failed\"\n  if candidate 7 7 == (-1) then pure () else error \"assertion failed\"\n  if candidate 546 546 == 546 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_104","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --དྲན་གསོ། ལོག་བཏང་མི་ཐོ་ཡིག་འདི་ ཡར་སེང་རིམ་སྒྲིག་ནང་དབྱེ་བ་ཕྱེ་དགོ།--ཨང་གྲངས་ཆ་མཉམ་མེད་པའི་ཆ་ཤས་ཚུ་ཨིན།--ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་ཧྲིལ་བུམ་ x གི་ཐོ་འདི་བྱིན་པ་ཅིན་ ཚུ་ག་ར་གི་ཐོ་ཅིག་ལོག་གཏང་།--  >>> uniqueDigits [15,33,1422,1]\n--  [1,15,33]\n--  >>> uniqueDigits [152,323,1422,10]\n--  []\nuniqueDigits :: [Int] -> [Int]\nuniqueDigits x =","canonical_solution":"uniqueDigits :: [Int] -> [Int]\nuniqueDigits x = sort $ filter (all odd . map (read . (:[])) . show) x","tests":"\nmain :: IO ()\nmain = do\n  let candidate = uniqueDigits\n  if candidate [15,33,1422,1] == [1,15,33] then pure () else error \"assertion failed\"\n  if candidate [152,323,1422,10] == [] then pure () else error \"assertion failed\"\n  if candidate [12345,2033,111,151] == [111,151] then pure () else error \"assertion failed\"\n  if candidate [135,103,31] == [31,135] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_105","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --གཅིག་ གཉིས་ གསུམ་ བཞི་ ལྔ་ དྲུག་ བདུན་ བརྒྱད་ དགུ་--འཐོན་མིའི་ཐོ་ཡིག་འདི་ ཕྱིར་བསྒྱུར་འབད་ཞིནམ་ལས་ ཨང་ཡིག་རེ་རེ་འདི་ ནང་ལས་ མིང་ཚིག་དང་འཁྲིལ་ཏེ་ཚབ་རྐྱབས་དགོ།--ཌའི་ལོག་གི་ཨང་གྲངས་ཚུ་ ཌའི་ལོག་གི་ཨང་གྲངས་ཚུ་དང་ ཌའི་ལོག་གི་ཨང་གྲངས་ཚུ་ ཌའི་ལོག་གི་ཨང་གྲངས་ཚུ་དང་ ཌའི་ལོག་གི་ཨང་གྲངས་ཚུ་ ཌའི་ལོག་གི་ཨང་གྲངས་ཚུ་ ཌའི་ལོག་གི་ཨང་གྲངས་ཚུ་ ཌའི་ལོག་གི་ཨང་གྲངས་ཚུ་--  >>> byLength [2,1,1,4,5,8,2,3]\n--  [\"Eight\",\"Five\",\"Four\",\"Three\",\"Two\",\"Two\",\"One\",\"One\"]\n--  If the list is empty, return an empty list:\n--  >>> byLength []\n--  []\n--  If the list has any strange number ignore it:\n--  >>> byLength [1,(-1),55]\n--  [\"One\"]\nbyLength :: [Int] -> [String]\nbyLength arr =","canonical_solution":"byLength :: [Int] -> [String]\nbyLength arr = map digitName . reverse . sort . filter isValid $ arr\n  where\n    isValid x = x >= 1 && x <= 9\n    digitName x = case x of\n      1 -> \"One\"\n      2 -> \"Two\"\n      3 -> \"Three\"\n      4 -> \"Four\"\n      5 -> \"Five\"\n      6 -> \"Six\"\n      7 -> \"Seven\"\n      8 -> \"Eight\"\n      9 -> \"Nine\"\n      _ -> error \"Unexpected number\"","tests":"\nmain :: IO ()\nmain = do\n  let candidate = byLength\n  if candidate [2,1,1,4,5,8,2,3] == [\"Eight\",\"Five\",\"Four\",\"Three\",\"Two\",\"Two\",\"One\",\"One\"] then pure () else error \"assertion failed\"\n  if candidate [] == [] then pure () else error \"assertion failed\"\n  if candidate [1,(-1),55] == [\"One\"] then pure () else error \"assertion failed\"\n  if candidate [1,(-1),3,2] == [\"Three\",\"Two\",\"One\"] then pure () else error \"assertion failed\"\n  if candidate [9,4,8] == [\"Nine\",\"Eight\",\"Four\"] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_106","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--i གི་གནས་གོང་འདི་ 1 ལས་ i ཚུན་གྱི་ཨང་གྲངས་ཚུ་གྱངས་ཁ་རྐྱབ་ཨིན། (1 * 2 * ... * i)--iའདི་ ༡ ལས་འགོ་བཙུགསཔ་ཨིན།--ཡང་ན་ ཨང་གྲངས་ ༡ ལས་ ༡ ཚུན་གྱི་བསྡོམས་ཨིན།--དེ་ལས་ ཚད་ཀྱི་ཐོ་ཡིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན། འདི་ཡང་ ཚད་གཞི་ i ལུ་ཡོད་པའི་ཆ་ཤས་ཀྱི་གནས་གོང་འདི་ i གི་གནས་གོང་ཨིནམ་དང་ i འདི་ཆ་མཉམ་ཡོད་པ་ཅིན་ --ཇི་ཇི་ལུ་གཞི་བསྟུན་སྦེ་ལག་ལེན་འཐབ་མི་ ལས་འགན་ f འདི་ལག་ལེན་འཐབ་ཨིན།--  >>> f 5\n--  [1,2,6,24,15]\nf :: Int -> [Int]\nf n =","canonical_solution":"f :: Int -> [Int]\nf n = map g [1..n]\n  where\n    g i\n      | even i    = factorial i\n      | otherwise = sum [1..i]\n    \n    factorial 0 = 1\n    factorial m = product [1..m]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = f\n  if candidate 5 == [1,2,6,24,15] then pure () else error \"assertion failed\"\n  if candidate 7 == [1,2,6,24,15,720,28] then pure () else error \"assertion failed\"\n  if candidate 1 == [1] then pure () else error \"assertion failed\"\n  if candidate 3 == [1,2,6] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_107","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་གཞི་ ༡:--ཚད་གཞི་ནང་ཚུད་མི་ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་པེ་ལིན་ཌོརམ།--ཕྲང་དང་ཕྲང་མེད་པའི་ཨང་གྲངས་ཚུ་ཡོད་མི་འདི་སླར་ལོག་འབདཝ་ཨིན།--  >>> evenOddPalindrome 3\n--  (1, 2)\n--  Explanation:\n--  Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n--  Example 2:\n--  >>> evenOddPalindrome 12\n--  (4, 6)\n--  Explanation:\n--  Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n--  Note:\n--  1. 1 <= n <= 10^3\n--  2. returned tuple has the number of even and odd integer palindromes respectively.\nevenOddPalindrome :: Int -> (Int, Int)\nevenOddPalindrome n =","canonical_solution":"evenOddPalindrome :: Int -> (Int, Int)\nevenOddPalindrome n = (length evens, length odds)\n  where\n    isPalindrome x = show x == reverse (show x)\n    palindromes = filter isPalindrome [1..n]\n    evens = filter even palindromes\n    odds  = filter odd palindromes","tests":"\nmain :: IO ()\nmain = do\n  let candidate = evenOddPalindrome\n  if candidate 123 == (8, 13) then pure () else error \"assertion failed\"\n  if candidate 12 == (4, 6) then pure () else error \"assertion failed\"\n  if candidate 3 == (1, 2) then pure () else error \"assertion failed\"\n  if candidate 63 == (6, 8) then pure () else error \"assertion failed\"\n  if candidate 25 == (5, 6) then pure () else error \"assertion failed\"\n  if candidate 19 == (4, 6) then pure () else error \"assertion failed\"\n  if candidate 9 == (4, 5) then pure () else error \"assertion failed\"\n  if candidate 1 == (0, 1) then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_108","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེར་ན་ -123 གིས་ ཨང་གྲངས་ -1, 2 དང་ 3 ལུ་རྟགས་བཀོད་འབད་ཡོདཔ་ཨིན།--ཨང་གྲངས་འདི་ ནུས་མེད་ཨིན་པ་ཅིན་ ཨང་གྲངས་དང་པ་འདི་ ནུས་མེད་ཨིན།--ཨང་གྲངས་ཚུ་ནང་ ཨང་གྲངས་བསྡོམས་ > ༠ ཡོད་པའི་ཆ་ཤས་ཚུ་ཨིན།--ཕྲ་རིང་གི་གྲངས་ཐོ་ཅིག་ལེན་ཏེ་སླར་ལོག་འབད་མི་ count_nums ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> countNums []\n--  0\n--  >>> countNums [(-1),11,(-11)]\n--  1\n--  >>> countNums [1,1,2]\n--  3\ncountNums :: [Int] -> Int\ncountNums arr =","canonical_solution":"countNums :: [Int] -> Int\ncountNums arr = length $ filter ((> 0) . sumDigits) arr\n  where\n    sumDigits 0 = 0\n    sumDigits n = let digits = if n < 0 then -1 : map (read . (:[])) (tail (show (-n))) else map (read . (:[])) (show n)\n                  in sum digits","tests":"\nmain :: IO ()\nmain = do\n  let candidate = countNums\n  if candidate [] == 0 then pure () else error \"assertion failed\"\n  if candidate [(-1),(-2),0] == 0 then pure () else error \"assertion failed\"\n  if candidate [1,1,2,(-2),3,4,5] == 6 then pure () else error \"assertion failed\"\n  if candidate [1,6,9,(-6),0,1,5] == 5 then pure () else error \"assertion failed\"\n  if candidate [1,100,98,(-7),1,(-1)] == 4 then pure () else error \"assertion failed\"\n  if candidate [12,23,34,(-45),(-56),0] == 5 then pure () else error \"assertion failed\"\n  if candidate [0,1] == 1 then pure () else error \"assertion failed\"\n  if candidate [1] == 1 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_109","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --དྲན་གསོ། འབྲི་ཤོག་ནང་བཀོད་ཡོད་པའི་ཐོ་ཡིག་ནང་ལུ་ ཚན་པ་མ་འདྲཝ་ཡོད་མི་འདི་ ངེས་བརྟན་ཨིན།--གལ་སྲིད་ཐོ་འདི་ སྟོངམ་ཨིན་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན།--དེ་ལས་ true སླར་ལོག་འབད་ ཡང་ན་ false སླར་ལོག་འབད་--གོང་གི་ལཱ་འདི་འབད་ཞིནམ་ལས་ དབྱེ་བ་ཕྱེ་ཡོད་པའི་ཐོ་འདི་ཐོབ་ཚུགས་པ་ཅིན་ --འགོ་བཙུགས་ཀྱི་ས་སྒོ་དེ་ཐོ་ཡིག་ནང་ཡོད་ འདི་ཡང་ ༠་པའི་བརྡ་བཀོད་འདི་ཨིན།--ནང་ལུ་ སྤོ་བཤུད་འབད་འོང་།--གཡས་ཕྱོགས་ལུ་སོར་གཏང་ནིའི་ལཱ་འདི་གིས་ ཐོ་ཡིག་ནང་གི་ཆ་ཕྲན་ཚུ་ གཅིག་གིས་སོར་གཏང་ནི་ཨིན་མས།--ཁྱོད་ཀྱིས་ ཕྲང་ལམ་འདི་ ཚར་ལེ་ཤ་ཅིག་ར་ བསྒྱུར་བཅོས་འབད་ཚུགས།--འོག་གི་ལཱ་འདི་ ཤོག་ལེབ་ནང་བཀོད་དེ་ཡོདཔ་ཨིན།--ཟེར་མི་འདི་འབད་ཞིནམ་ལས་ གྱངས་ཁ་ཡར་མར་འགྱོ་མི་རིམ་པ་ལུ་ཐོ་འདི་དབྱེ་བ་ཕྱེ་ཚུགས།--ཐོ་བཀོད་ནང་ཡོད་མི་ཨང་ཚུ་ སྟབས་བདེ་ཏོག་ཏོ་སྦེ་རིམ་སྒྲིག་འབད་ནི་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ ཇི་ཨའི་ཨང་འདི་ ཇི་ཨའི་ཨང་འདི་ ཇི་ཨའི་ཨང་འདི་ ཇི་ཨའི་ཨང་འདི་ ཇི་ཨའི་ཨང་འདི་ ཇི་ཨའི་ཨང་འདི་ ཨིན་ན་མེན་ན་ཚུ་ངེས་འཛིན་འབད་ནི་ཨིན།--ང་བཅས་ནང་ལུ་ ཨང་གྲངས་ཧྲིལ་ཨང་ N ཡོད་མི་གི་ཐོ་ཡིག་ 'arr' ཅིག་ཡོད་ arr[1], arr[2], ..., arr[N] ཨིན།--  >>> moveOneBall [3,4,5,1,2]\n--  True\n--  Explanation: By performin 2 right shift operations, non-decreasing order can\n--  be achieved for the given list.\n--  >>> moveOneBall [3,5,4,1,2]\n--  False\n--  Explanation:It is not possible to get non-decreasing order for the given\n--  list by performing any number of right shift operations.\nmoveOneBall :: [Int] -> Bool\nmoveOneBall arr =","canonical_solution":"moveOneBall :: [Int] -> Bool\nmoveOneBall [] = True\nmoveOneBall arr = canBeSorted (arr ++ arr)\n  where\n    n = length arr\n    canBeSorted xs = any isSorted (take n <$> tails xs)\n    isSorted ys = and $ zipWith (<=) ys (tail ys)\n    tails [] = []\n    tails l@(_:xs) = l : tails xs","tests":"\nmain :: IO ()\nmain = do\n  let candidate = moveOneBall\n  if candidate [3,4,5,1,2] == True then pure () else error \"assertion failed\"\n  if candidate [3,5,10,1,2] == True then pure () else error \"assertion failed\"\n  if candidate [4,3,1,2] == False then pure () else error \"assertion failed\"\n  if candidate [3,5,4,1,2] == False then pure () else error \"assertion failed\"\n  if candidate [] == True then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_110","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --དེ་མེན་པ་ཅིན་ \"NO\" སྦེ་ལོག་གཏང་།--lst1 གི་ཆ་ཤས་ཚུ་ཆ་མཉམ་རང་ཡོད་པ་ཅིན་ \"YES\" སླར་ལོག་འབདཝ་ཨིན།--གལ་སྲིད་ lst1 དང་ lst2 ཚུ་གི་བར་ན་ དབྱེ་བ་ཕྱེ་ཚུགས་པ་ཅིན་--lst1 དང་ lst2 ཀྱི་བར་ན་ བརྗེ་སོར་འབད་མི་ཆ་ཤས་ཚུ་གི་གྱངས་ཁ་ལུ་ཚད་གཞི་མེདཔ་ཨིན།--ཤོག་གྲངས་ཆ་མཉམ་ལས་ 1 གི་ཐོ་ཡིག་བཟོ་ནི་ལུ་ སྦྲགས་བཞག་ཡོདཔ་ཨིན།--དེ་ལས་ ཌའི་ལོག་འདི་ ཌའི་ལོག་གི་ཆ་ཤས་ཚུ་ བརྗེ་སོར་འབད་ཚུགསཔ་ཨིན་ན་མེན་ན་བརྟག་དཔྱད་འབདཝ་ཨིན།--འ་ནི་དཀའ་ངལ་འདི་ནང་ལུ་ ཁྱོད་ཀྱིས་གྲངས་ཐོ་གཉིས་ཆ་ར་ལུ་ ལག་ལེན་འཐབ་མི་ལས་འགན་ཅིག་ལག་ལེན་འཐབ་འོང་།--  >>> exchange [1,2,3,4] [1,2,3,4]\n--  \"YES\"\n--  >>> exchange [1,2,3,4] [1,5,3,4]\n--  \"NO\"\n--  It is assumed that the input lists will be non-empty.\nexchange :: [Int] -> [Int] -> String\nexchange lst1 lst2 =","canonical_solution":"exchange :: [Int] -> [Int] -> String\nexchange lst1 lst2\n  | all even lst1 = \"YES\"\n  | null oddLst1 || null evenLst2 = \"NO\"\n  | otherwise = let possibility = all even ([x | x <- lst1, even x] ++ evenLst2)\n                in if possibility then \"YES\" else \"NO\"\n  where\n    oddLst1 = filter odd lst1\n    evenLst2 = filter even lst2","tests":"\nmain :: IO ()\nmain = do\n  let candidate = exchange\n  if candidate [1,2,3,4] [1,2,3,4] == \"YES\" then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4] [1,5,3,4] == \"NO\" then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4] [2,1,4,3] == \"YES\" then pure () else error \"assertion failed\"\n  if candidate [5,7,3] [2,6,4] == \"YES\" then pure () else error \"assertion failed\"\n  if candidate [5,7,3] [2,6,3] == \"NO\" then pure () else error \"assertion failed\"\n  if candidate [3,2,6,1,8,9] [3,5,5,1,1,1] == \"NO\" then pure () else error \"assertion failed\"\n  if candidate [100,200] [200,200] == \"YES\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_111","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ཡི་གུ་ལེ་ཤ་ཅིག་རང་ འབྱུང་པ་ཅིན་ དེ་ཚུ་ག་ར་ལོག་གཏང་།--འབྲི་ཤོག་གི་ཨང་གྲངས་འདི་ འབྲི་ཤོག་གི་ཨང་གྲངས་དང་ འབྲི་ཤོག་གི་ཨང་གྲངས་ཚུ་དང་ འབྲི་ཤོག་གི་ཨང་གྲངས་ཚུ་དང་ འབྲི་ཤོག་གི་ཨང་གྲངས་ཚུ་དང་ འབྲི་ཤོག་གི་ཨང་གྲངས་ཚུ་དང་ འབྲི་ཤོག་གི་ཨང་གྲངས་ཚུ་ཨིན།--ཕྲ་རིང་འདི་ས་སྒོ་སོ་སོར་གྱི་ཡིག་འབྲུ་ཆུང་བ་ཅིག་ལུ་ངོ་ཚབ་འབདཝ་ཨིན་པ་ཅིན་ འབྲེལ་མཐུད་ཐོ་ཡིག་ཅིག་ལོག་གཏང་དགོ།--  >>> histogram \"a b c\"\n--  [(\"a\", 1), (\"b\", 1), (\"c\", 1)]\n--  >>> histogram \"a b b a\"\n--  [(\"a\", 2), (\"b\", 2)]\n--  >>> histogram \"a b c a b\"\n--  [(\"a\", 2), (\"b\", 2)]\n--  >>> histogram \"b b b b a\"\n--  [(\"b\", 4)]\n--  >>> histogram \"\"\n--  []\nhistogram :: String -> [(String, Int)]\nhistogram test =","canonical_solution":"import Data.List (group, sort)\nimport Data.Ord (comparing)\n\nhistogram :: String -> [(String, Int)]\nhistogram input =\n  let wordsList = words input\n      grouped = group $ sort wordsList\n      countList = map (\\ws -> (head ws, length ws)) grouped\n      maxCount = if null countList then 0 else maximum $ map snd countList\n  in filter ((== maxCount) . snd) countList","tests":"\nmain :: IO ()\nmain = do\n  let candidate = histogram\n  if candidate \"a b b a\" == [(\"a\", 2), (\"b\", 2)] then pure () else error \"assertion failed\"\n  if candidate \"a b c a b\" == [(\"a\", 2), (\"b\", 2)] then pure () else error \"assertion failed\"\n  if candidate \"a b c d g\" == [(\"a\", 1), (\"b\", 1), (\"c\", 1), (\"d\", 1), (\"g\", 1)] then pure () else error \"assertion failed\"\n  if candidate \"r t g\" == [(\"r\", 1), (\"t\", 1), (\"g\", 1)] then pure () else error \"assertion failed\"\n  if candidate \"b b b b a\" == [(\"b\", 4)] then pure () else error \"assertion failed\"\n  if candidate \"r t g\" == [(\"r\", 1), (\"t\", 1), (\"g\", 1)] then pure () else error \"assertion failed\"\n  if candidate \"\" == [] then pure () else error \"assertion failed\"\n  if candidate \"a\" == [(\"a\", 1)] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_112","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་ --ཁྱོད་ཀྱིས་བརྟག་དཔྱད་ཀྱི་དོན་ལུ་ གྲུབ་འབྲས་ཐིག་ཁྲམ་དང་ བདེན་\/རྫུན་མ་ཡོད་པའི་ ཐུབ་རྟགས་ཅིག་ལོག་གཏང་དགོ།--string འདི་ཧེ་མ་དང་རྒྱབ་ཕྱོགས་གཉིས་ཆ་ར་ལུ་ འདྲ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ འདི་ལུ་ palindrome ཟེར་སླབ་ཨིན།--དེ་ལས་ གྲུབ་འབྲས་ཐིག་ཁྲམ་འདི་ པཱ་ལིན་ཌོརམསི་ཨིནམ་ཨིན་ན་ བལྟ་དགོ།--ང་བཅས་ལུ་ string s དང་ c གཉིས་བྱིན་ཡོདཔ་ད་ ཁྱོད་ཀྱིས་ s ནང་གི་ཡིག་འབྲུ་ཚུ་ཆ་མཉམ་འདི་ c ནང་གི་ཡིག་འབྲུ་ཚུ་དང་འདྲན་འདྲ་སྦེ་ཡོད་མི་ཚུ་ སེལ་འཐུ་འབད་དགོཔ་ཨིན།--ལཱ་འགན་ --  >>> reverseDelete \"abcde\" \"ae\"\n--  (\"bcd\", False)\n--  >>> reverseDelete \"abcdef\" \"b\"\n--  (\"acdef\", False)\n--  >>> reverseDelete \"abcdedcba\" \"ab\"\n--  (\"cdedc\", True)\nreverseDelete :: String -> String -> (String, Bool)\nreverseDelete s c =","canonical_solution":"import Data.List (filter)\n\nreverseDelete :: String -> String -> (String, Bool)\nreverseDelete s c =\n  let result = filter (`notElem` c) s\n  in (result, result == reverse result)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = reverseDelete\n  if candidate \"abcde\" \"ae\" == (\"bcd\", False) then pure () else error \"assertion failed\"\n  if candidate \"abcdef\" \"b\" == (\"acdef\", False) then pure () else error \"assertion failed\"\n  if candidate \"abcdedcba\" \"ab\" == (\"cdedc\", True) then pure () else error \"assertion failed\"\n  if candidate \"dwik\" \"w\" == (\"dik\", False) then pure () else error \"assertion failed\"\n  if candidate \"a\" \"a\" == (\"\", True) then pure () else error \"assertion failed\"\n  if candidate \"abcdedcba\" \"\" == (\"abcdedcba\", True) then pure () else error \"assertion failed\"\n  if candidate \"abcdedcba\" \"v\" == (\"abcdedcba\", True) then pure () else error \"assertion failed\"\n  if candidate \"vabba\" \"v\" == (\"abba\", True) then pure () else error \"assertion failed\"\n  if candidate \"mamma\" \"mia\" == (\"\", True) then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_113","nl":"dzo_Tibt","pl":"hs","prompt":"--ནང་བསྐྱོད་གྱི་ཐིག་ i'th ནང་ ཨང་གྲངས་རྣམ་རྟོག་མེད་ཀྱི་ཐིག་ཁྲམ་ཚུ་ཡོདཔ་ཨིན།--ནང་བསྐྱོད་ཀྱི་ string i. \" འདི་ནང་ལུ་ i ཚུ་ཆ་མཉམ་ཨང་གྲངས་ གིས་ཚབ་གཏང་དགོ།--ཕྱིར་ཐོན་གྱི་ཆ་ཤས་རེ་རེ་ i འདི་ ནང་ལུ་ གྱངས་ཁ་མེད་པའི་ཆ་ཤས་ཚུ་ ཨིནམ་སྦེ་ངེས་འཛིན་འབད་དགོཔ་ཨིན།--སྐར་ཆ་ཐིག་ཁྲམ་ཅིག་ནང་ ཨང་གྲངས་རེ་རེ་རྐྱངམ་ཅིག་ཡོད་པ་ཅིན་ སྐར་ཆ་ཐིག་ཁྲམ་ཅིག་ལོག་གཏང་།--  >>> oddCount [\"1234567\"]\n--  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n--  >>> oddCount [\"3\",\"11111111\"]\n--  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\noddCount :: [String] -> [String]\noddCount lst =","canonical_solution":"oddCount :: [String] -> [String]\noddCount lst = map formatString lst\n  where\n    isOddDigit :: Char -> Bool\n    isOddDigit c = c `elem` \"13579\"\n\n    countOdds :: String -> Int\n    countOdds str = length $ filter isOddDigit str\n\n    formatString :: String -> String\n    formatString str =\n      let oddCount = countOdds str in\n      \"the number of odd elements \" ++ show oddCount ++ \n      \"n the str\" ++ show oddCount ++ \"ng \" ++ show oddCount ++\n      \" of the \" ++ show oddCount ++ \"nput.\"","tests":"\nmain :: IO ()\nmain = do\n  let candidate = oddCount\n  if candidate [\"1234567\"] == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"] then pure () else error \"assertion failed\"\n  if candidate [\"3\",\"11111111\"] == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\"the number of odd elements 8n the str8ng 8 of the 8nput.\"] then pure () else error \"assertion failed\"\n  if candidate [\"271\",\"137\",\"314\"] == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\",\"the number of odd elements 3n the str3ng 3 of the 3nput.\",\"the number of odd elements 2n the str2ng 2 of the 2nput.\"] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_114","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་ --གྱངས་ཁ་ཚུ་--ཌའི་ལོག་གི་ཨང་གྲངས་ཚུ་ཡོད་པའི་ཐོ་ཡིག་ཅིག་བྱིན་པ་ཅིན་ སྟོང་པ་མེན་པའི་ཐོ་ཡིག་ཆུང་ཤོས་ཀྱི་བསྡོམས་དེ་འཚོལ་དགོ།--  >>> minsubarraysum [2,3,4,1,2,4]\n--  1\n--  >>> minsubarraysum [(-1),(-2),(-3)]\n--  (-6)\nminsubarraysum :: [Int] -> Int\nminsubarraysum nums =","canonical_solution":"minsubarraysum :: [Int] -> Int\nminsubarraysum nums = minimum $ scanl1 (\\acc x -> min x (acc + x)) nums","tests":"\nmain :: IO ()\nmain = do\n  let candidate = minsubarraysum\n  if candidate [2,3,4,1,2,4] == 1 then pure () else error \"assertion failed\"\n  if candidate [(-1),(-2),(-3)] == (-6) then pure () else error \"assertion failed\"\n  if candidate [(-1),(-2),(-3),2,(-10)] == (-14) then pure () else error \"assertion failed\"\n  if candidate [(-9999999999999999)] == (-9999999999999999) then pure () else error \"assertion failed\"\n  if candidate [0,10,20,1000000] == 0 then pure () else error \"assertion failed\"\n  if candidate [(-1),(-2),(-3),10,(-5)] == (-6) then pure () else error \"assertion failed\"\n  if candidate [100,(-1),(-2),(-3),10,(-5)] == (-6) then pure () else error \"assertion failed\"\n  if candidate [10,11,13,8,3,4] == 3 then pure () else error \"assertion failed\"\n  if candidate [100,(-33),32,(-1),0,(-2)] == (-33) then pure () else error \"assertion failed\"\n  if candidate [(-10)] == (-10) then pure () else error \"assertion failed\"\n  if candidate [7] == 7 then pure () else error \"assertion failed\"\n  if candidate [1,(-1)] == (-1) then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_115","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་གཞི་ ༡:--ཁྱོད་ཀྱིས་བེག་ཚུ་མར་ཕབ་འབད་དགོ་པའི་གྱངས་ཁ་དེ་འཐོན་འབད།--ཁྱོད་ཀྱི་ལཱ་འདི་ ཆུ་དོང་ཚུ་སྟོངམ་གཏང་ནིའི་དོན་ལུ་ ཆུ་རྫམ་འདི་ལག་ལེན་འཐབ་ནི་དེ་ཨིན།--དེ་ལས་བེག་ཆ་མཉམ་ནང་ ཚད་གཞི་གཅིག་རང་ཡོདཔ་ཨིན།--ཆུ་རྐ་རེ་ལུ་ ཆུ་བླུག་ནིའི་དོན་ལུ་ ཆུ་རྫིང་རེ་ཡོདཔ་ད་--དེ་ལས་གྲལ་ཐིག་ནང་ལུ་ ༡་རེ་གིས་ ཆུ་གི་ཆ་ཕྲན་གཅིག་འདི་མཚོན་འབདཝ་ཨིན།--ཁྱོད་ཀྱིས་ ཟུར་ལམ་གྲུ་བཞི་འབད་མི་ ཟུར་ལམ་རེ་ཐོབ་ཨིན། ཟུར་ལམ་རེ་རེ་གིས་ ཟུར་ལམ་གཅིག་འདི་ངོ་ཚབ་འབདཝ་ཨིན།--  >>> maxFill [[0,0,1,0],[0,1,0,0],[1,1,1,1]] 1\n--  6\n--  Example 2:\n--  >>> maxFill [[0,0,1,1],[0,0,0,0],[1,1,1,1],[0,1,1,1]] 2\n--  5\n--  Example 3:\n--  >>> maxFill [[0,0,0],[0,0,0]] 5\n--  0\n--  Constraints:\n--  * all wells have the same length\n--  * 1 <= grid.length <= 10^2\n--  * 1 <= grid[:,1].length <= 10^2\n--  * grid[i][j] -> 0 | 1\n--  * 1 <= capacity <= 10\nmaxFill :: [[Int]] -> Int -> Int\nmaxFill grid capacity =","canonical_solution":"maxFill :: [[Int]] -> Int -> Int\nmaxFill grid capacity = ceiling (fromIntegral totalWater \/ fromIntegral capacity)\n  where\n    totalWater = sum (map sum grid)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = maxFill\n  if candidate [[0,0,1,0],[0,1,0,0],[1,1,1,1]] 1 == 6 then pure () else error \"assertion failed\"\n  if candidate [[0,0,1,1],[0,0,0,0],[1,1,1,1],[0,1,1,1]] 2 == 5 then pure () else error \"assertion failed\"\n  if candidate [[0,0,0],[0,0,0]] 5 == 0 then pure () else error \"assertion failed\"\n  if candidate [[1,1,1,1],[1,1,1,1]] 2 == 4 then pure () else error \"assertion failed\"\n  if candidate [[1,1,1,1],[1,1,1,1]] 9 == 2 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_116","nl":"dzo_Tibt","pl":"hs","prompt":"--འདི་ཚུ་ལག་ལེན་འཐབ་དགོ་པ་ཅིན་:--ཨང་གྲངས་འདྲ་མཉམ་ཅིག་ཡོད་པ་ཅིན་ ཨང་གྲངས་བཅུ་ཐམ་ལུ་གཞི་བཞག་སྟེ་ དབྱེ་བ་ཕྱེ་དགོ།--གཅིག་གཉིས་སྦེ་བཙུགསཔ་ད་ ཨང་གྲངས་ཚུ་ཡར་འཕར་འགྱོ་ནུག--འ་ནི་ཀཱད་ལུ་ ཁྱོད་ཀྱིས་ ནུས་མེད་ཨང་གྲངས་ཚུ་ ཇི་ཇི་ཨའི་དང་བསྟུན་ཏེ་ དབྱེ་བ་ཕྱེ་དགོ།--  >>> sortArray [1,5,2,3,4]\n--  [1,2,3,4,5]\n--  >>> sortArray [(-2),(-3),(-4),(-5),(-6)]\n--  [(-6),(-5),(-4),(-3),(-2)]\n--  >>> sortArray [1,0,2,3,4]\n--  [0,1,2,3,4]\nsortArray :: [Int] -> [Int]\nsortArray arr =","canonical_solution":"import Data.Bits (popCount)\nimport Data.List (sortBy)\n\nsortArray :: [Int] -> [Int]\nsortArray arr = sortBy compareOnesAndValues arr\n  where\n    compareOnesAndValues x y =\n      let onesX = popCount x\n          onesY = popCount y\n      in if onesX == onesY\n         then compare x y\n         else compare onesX onesY","tests":"\nmain :: IO ()\nmain = do\n  let candidate = sortArray\n  if candidate [1,5,2,3,4] == [1,2,4,3,5] then pure () else error \"assertion failed\"\n  if candidate [(-2),(-3),(-4),(-5),(-6)] == [(-4),(-2),(-6),(-5),(-3)] then pure () else error \"assertion failed\"\n  if candidate [1,0,2,3,4] == [0,1,2,4,3] then pure () else error \"assertion failed\"\n  if candidate [] == [] then pure () else error \"assertion failed\"\n  if candidate [2,5,77,4,5,3,5,7,2,3,4] == [2,2,4,4,3,3,5,5,5,7,77] then pure () else error \"assertion failed\"\n  if candidate [3,6,44,12,32,5] == [32,3,5,6,12,44] then pure () else error \"assertion failed\"\n  if candidate [2,4,8,16,32] == [2,4,8,16,32] then pure () else error \"assertion failed\"\n  if candidate [2,4,8,16,32] == [2,4,8,16,32] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_117","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--དྲན་གསོ། ཁྱོད་ཀྱིས་ཨེབ་གཏང་ཐིག་ནང་ ཡིག་འབྲུ་དང་བར་སྟོང་ཚུ་རྐྱངམ་ཅིག་ཡོད་ཟེར་ཆ་བཞག་བཏུབ།--string s འདི་སྟོངམ་ཨིན་པ་ཅིན་ ལས་འགན་འདི་གིས་ སྟོངམ་ཐོ་ཡིག་ཅིག་ལོག་བྱིན་འོང་།--n གི་ཁ་ཚིག་ཚུ་ ཚིག་ཡིག་གི་རིམ་པ་ནང་འོང་ནིའི་དོན་ལུ་ --string s ནང་ལས་ དོན་དག་ཅིག་རང་ ཡོད་པའི་ཚིག་ཡིག་ཚུ་གི་ཐོ་ཅིག་སླར་ལོག་འབདཝ་ཨིན།--ཁྱོད་ཀྱིས་ string s དང་ natural number n ཚུ་བྱིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཌའི་ལོག་འདི་ལག་ལེན་འཐབ་དགོཔ་ཨིན།--  >>> selectWords \"Mary had a little lamb\" 4\n--  [\"little\"]\n--  >>> selectWords \"Mary had a little lamb\" 3\n--  [\"Mary\",\"lamb\"]\n--  >>> selectWords \"simple white space\" 2\n--  []\n--  >>> selectWords \"Hello world\" 4\n--  [\"world\"]\n--  >>> selectWords \"Uncle sam\" 3\n--  [\"Uncle\"]\nselectWords :: String -> Int -> [String]\nselectWords s n =","canonical_solution":"selectWords :: String -> Int -> [String]\nselectWords s n = filter (\\word -> countConsonants word == n) (words s)\n  where\n    countConsonants = length . filter (`elem` consonants)\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"","tests":"\nmain :: IO ()\nmain = do\n  let candidate = selectWords\n  if candidate \"Mary had a little lamb\" 4 == [\"little\"] then pure () else error \"assertion failed\"\n  if candidate \"Mary had a little lamb\" 3 == [\"Mary\",\"lamb\"] then pure () else error \"assertion failed\"\n  if candidate \"simple white space\" 2 == [] then pure () else error \"assertion failed\"\n  if candidate \"Hello world\" 4 == [\"world\"] then pure () else error \"assertion failed\"\n  if candidate \"Uncle sam\" 3 == [\"Uncle\"] then pure () else error \"assertion failed\"\n  if candidate \"\" 4 == [] then pure () else error \"assertion failed\"\n  if candidate \"a b c d e f\" 1 == [\"b\",\"c\",\"d\",\"f\"] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_118","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ཁྱོད་ཀྱིས་བྱིན་ཡོད་པའི་ string འདི་ནང་ལུ་ ཨིང་སྐད་ཡིག་འབྲུ་རྐྱངམ་གཅིག་ཡོད་ཟེར་ཆ་བཞག་བཏུབ།--གོང་གི་གནས་སྟངས་འདི་ནང་ ཚིག་ཡིག་ཚུ་ཐོབ་ཡོདཔ་ཨིན།--འགོ་བཙུགས་དང་མཇུག་གི་སྐད་སྒྲ་ཚུ་རྩིས་མི་བཏུབ། མེད་པ་ཅིན་ སྟོང་པ་སྦེ་ལོག་གཏང་།--ཚིག་གི་གཡས་ཁ་ཐུག་ལས་ ཟུར་སྒྲོམ་གཉིས་ (ཡིག་འབྲུ་ཆེ་ཆུང་ལུ་དྭངས་གསལ་སྦེ་) ཨིན།--ཁྱོད་ཀྱིས་ཚིག་གཅིག་ཐོབ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ སྦུག་གི་བར་ན་ཡོད་མི་ ཕྲང་ཡིག་འདི་འཚོལ་ནི་དེ་ཨིན།--  >>> getClosestVowel \"yogurt\"\n--  \"u\"\n--  >>> getClosestVowel \"FULL\"\n--  \"U\"\n--  >>> getClosestVowel \"quick\"\n--  \"\"\n--  >>> getClosestVowel \"ab\"\n--  \"\"\ngetClosestVowel :: String -> String\ngetClosestVowel word =","canonical_solution":"getClosestVowel :: String -> String\ngetClosestVowel word = go (reverse word) False\n  where\n    vowels = \"aeiouAEIOU\"\n    go [] _ = \"\"\n    go (x:xs) lastWasConsonant\n      | x `elem` vowels && lastWasConsonant = if null xs || not (head xs `elem` vowels) then [x] else go xs False\n      | x `notElem` vowels = go xs True\n      | otherwise = go xs False","tests":"\nmain :: IO ()\nmain = do\n  let candidate = getClosestVowel\n  if candidate \"yogurt\" == \"u\" then pure () else error \"assertion failed\"\n  if candidate \"full\" == \"u\" then pure () else error \"assertion failed\"\n  if candidate \"easy\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"eAsy\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"ali\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"bad\" == \"a\" then pure () else error \"assertion failed\"\n  if candidate \"most\" == \"o\" then pure () else error \"assertion failed\"\n  if candidate \"ab\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"ba\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"quick\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"anime\" == \"i\" then pure () else error \"assertion failed\"\n  if candidate \"Asia\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"Above\" == \"o\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_119","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ཐབས་ལམ་ལེགས་ཤོམ་ཅིག་ཡོད་པ་ཅིན་ 'Yes' སླར་ལོག་འབད་ དེ་ལས་གཞན་པ་ཅིན་ 'No' སླར་ལོག་འབད་ --\"())\"འདི་མེན།--ཚད་གཞི་ཚུ་ཆ་མཉམ་ཨིན། དཔེར་ན་: string '(((() 'འདི་ལེགས་ཤོམ་ཨིན་ དེ་ལས་ string --string S འདི་ལེགས་ཤོམ་སྦེ་བརྩི་ནི་ཨིན་པ་ཅིན་ S ནང་ལུ་ ནང་ཐིག་ག་ར་ལེགས་ཤོམ་སྦེ་རང་ཡོད་པ་ཅིན་རྐྱངམ་གཅིག་ཨིན།--ཚད་འཛིན་འབད་ཡོད་པའི་ཐིག་ཁྲམ་འདི་ ལེགས་ལྡན་ཅིག་སྦེ་འཐོན་འོང་།--ཁྱོད་ཀྱི་ལཱ་འདི་ string གཉིས་བསྡོམས་འབད་ཚུགས་ག་ བལྟ་ནི་ཨིན།--ནང་ཐིག་ནང་ \"(\" ཡང་ན་ ནང་ཐིག་གི་མཐའ་མ་ནང་ \") \"རྐྱངམ་ཅིག་བཙུགས་དགོ།--ཁྱོད་ཀྱིས་ཐིག་ཁྲམ་གཉིས་ཆ་ར་ལུ་ open ཟེར་ཐིག་ཁྲམ་གཉིས་ཆ་ར་ལུ་ open ཟེར་ཐིག་ཁྲམ་གཉིས་ཆ་ར་ལུ་ open ཟེར་ཐིག་ཁྲམ་གཉིས་ཆ་ར་ལུ་ open ཟེར་ཐིག་ཁྲམ་གཉིས་ཆ་ར་ལུ་ open ཟེར་ཐིག་ཁྲམ་གཉིས་ཆ་ར་ལུ་ open ཟེར་ཐིག་ཁྲམ་གཉིས་ཆ་ར་ལུ་--  >>> matchParens [\"()(\",\")\"]\n--  \"Yes\"\n--  >>> matchParens [\")\",\")\"]\n--  \"No\"\nmatchParens :: [String] -> String\nmatchParens lst =","canonical_solution":"matchParens :: [String] -> String\nmatchParens [a, b] =\n    if isValid (a ++ b) || isValid (b ++ a) then \"Yes\" else \"No\"\n  where\n    isValid :: String -> Bool\n    isValid = go 0\n      where\n        go 0 [] = True\n        go _ [] = False\n        go n (x:xs)\n            | x == '('  = go (n + 1) xs\n            | x == ')'  = n > 0 && go (n - 1) xs\n    isValid _ = False","tests":"\nmain :: IO ()\nmain = do\n  let candidate = matchParens\n  if candidate [\"()(\",\")\"] == \"Yes\" then pure () else error \"assertion failed\"\n  if candidate [\")\",\")\"] == \"No\" then pure () else error \"assertion failed\"\n  if candidate [\"(()(())\",\"())())\"] == \"No\" then pure () else error \"assertion failed\"\n  if candidate [\")())\",\"(()()(\"] == \"Yes\" then pure () else error \"assertion failed\"\n  if candidate [\"(())))\",\"(()())((\"] == \"Yes\" then pure () else error \"assertion failed\"\n  if candidate [\"()\",\"())\"] == \"No\" then pure () else error \"assertion failed\"\n  if candidate [\"(()(\",\"()))()\"] == \"Yes\" then pure () else error \"assertion failed\"\n  if candidate [\"((((\",\"((())\"] == \"No\" then pure () else error \"assertion failed\"\n  if candidate [\")(()\",\"(()(\"] == \"No\" then pure () else error \"assertion failed\"\n  if candidate [\")(\",\")(\"] == \"No\" then pure () else error \"assertion failed\"\n  if candidate [\"(\",\")\"] == \"Yes\" then pure () else error \"assertion failed\"\n  if candidate [\")\",\"(\"] == \"Yes\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_120","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་གཞི་ ༡:--རིང་ཚད་ k དང་ ཨང་གྲངས་ k ལས་ལྷག་པའི་གྲངས་སུ་ཨིན་པའི་ཨེ་རེ་ཚུ་ཨིན།--ཌའི་ལོག་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་ ཨར་དང་ཨང་གྲངས་ཧྲིལ་བུམ་ k སྦེ་བྱིན་ཏེ་ ཨང་གྲངས་རིམ་སྒྲིག་འབད་ཡོད་པའི་ཐོ་ཡིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན།--  >>> maximum [(-3),(-4),5] 3\n--  [(-4),(-3),5]\n--  Example 2:\n--  >>> maximum [4,(-4),4] 2\n--  [4,4]\n--  Example 3:\n--  >>> maximum [(-3),2,1,2,(-1),(-2),1] 1\n--  [2]\n--  Note:\n--  1. The length of the list will be in the range of [1, 1000].\n--  2. The elements in the list will be in the range of [-1000, 1000].\n--  3. 0 <= k <= len(arr)\nmaximum :: [Int] -> Int -> [Int]\nmaximum arr k =","canonical_solution":"maximum :: [Int] -> Int -> [Int]\nmaximum arr k = take k $ reverse $ sort arr","tests":"\nmain :: IO ()\nmain = do\n  let candidate = maximum\n  if candidate [(-3),(-4),5] 3 == [(-4),(-3),5] then pure () else error \"assertion failed\"\n  if candidate [4,(-4),4] 2 == [4,4] then pure () else error \"assertion failed\"\n  if candidate [(-3),2,1,2,(-1),(-2),1] 1 == [2] then pure () else error \"assertion failed\"\n  if candidate [123,(-123),20,0,1,2,(-3)] 3 == [2,20,123] then pure () else error \"assertion failed\"\n  if candidate [(-123),20,0,1,2,(-3)] 4 == [0,1,2,20] then pure () else error \"assertion failed\"\n  if candidate [5,15,0,3,(-13),(-8),0] 7 == [(-13),(-8),0,0,3,5,15] then pure () else error \"assertion failed\"\n  if candidate [(-1),0,2,5,3,(-10)] 2 == [3,5] then pure () else error \"assertion failed\"\n  if candidate [1,0,5,(-7)] 1 == [5] then pure () else error \"assertion failed\"\n  if candidate [4,(-4)] 2 == [(-4),4] then pure () else error \"assertion failed\"\n  if candidate [(-10),10] 2 == [(-10),10] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,(-23),243,(-400),0] 0 == [] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_121","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་སྟོན་ --སྟོངམ་མེན་པའི་ཨང་གྲངས་ཀྱི་ཐོ་འདི་བྱིན་ཏེ་ གནས་རིམ་གཉིས་པ་ནང་ཡོད་པའི་ ཨང་གྲངས་ཆ་མཉམ་གྱི་བསྡོམས་འདི་ལོག་གཏང་།--  >>> solution [5,8,7,1]\n--  12\n--  >>> solution [3,3,3,3,3]\n--  9\n--  >>> solution [30,13,24,321]\n--  0\nsolution :: [Int] -> Int\nsolution lst =","canonical_solution":"solution :: [Int] -> Int\nsolution lst = sum [x | (i, x) <- zip [0..] lst, odd x, even i]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = solution\n  if candidate [5,8,7,1] == 12 then pure () else error \"assertion failed\"\n  if candidate [3,3,3,3,3] == 9 then pure () else error \"assertion failed\"\n  if candidate [30,13,24,321] == 0 then pure () else error \"assertion failed\"\n  if candidate [5,9] == 5 then pure () else error \"assertion failed\"\n  if candidate [2,4,8] == 0 then pure () else error \"assertion failed\"\n  if candidate [30,13,23,32] == 23 then pure () else error \"assertion failed\"\n  if candidate [3,13,2,9] == 3 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_122","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ཨེ་རེ་གི་ཆ་ཤས་དང་པའི་ ཀ་ཆ་ཤས་ཚུ་ནང་ལས་ཨང་གྲངས་གཉིས་ལས་ལྷག་སྟེ་མེད་པའི་ཆ་ཤས་ཚུ་གི་བསྡོམས་ཨིན།--ཨང་གྲངས་ཧྲིལ་ཨང་ arr དང་ ཨང་གྲངས་ཧྲིལ་ཨང་ k གི་ཐོ་ཡིག་སྟོངམ་མེན་པའི་ནང་སླར་ལོག་འབདཝ་ཨིན།--  >>> addElements [111,21,3,4000,5,6,7,8,9] 4\n--  24\n--  Constraints:\n--  1. 1 <= len(arr) <= 100\n--  2. 1 <= k <= len(arr)\naddElements :: [Int] -> Int -> Int\naddElements arr k =","canonical_solution":"addElements :: [Int] -> Int -> Int\naddElements arr k = sum $ filter (\\x -> x >= -99 && x <= 99) $ take k arr","tests":"\nmain :: IO ()\nmain = do\n  let candidate = addElements\n  if candidate [1,(-2),(-3),41,57,76,87,88,99] 3 == (-4) then pure () else error \"assertion failed\"\n  if candidate [111,121,3,4000,5,6] 2 == 0 then pure () else error \"assertion failed\"\n  if candidate [11,21,3,90,5,6,7,8,9] 4 == 125 then pure () else error \"assertion failed\"\n  if candidate [111,21,3,4000,5,6,7,8,9] 4 == 24 then pure () else error \"assertion failed\"\n  if candidate [1] 1 == 1 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_123","nl":"dzo_Tibt","pl":"hs","prompt":"--get_odd_collatz(5) གིས་ [1, 5] སླར་ལོག་འབདཝ་ཨིན། # ཀོ་ལ་ཊ་ཛརིམ་པ་ ༥ གི་དོན་ལུ་འདི་ [༥ ༡༦ ༨ ༤ ༢ ༡]ཨིནམ་ལས་ ཨང་གྲངས་ཆ་མེད་ཚུ་ ༡ དང་ ༥ རྐྱངམ་གཅིག་ཨིན།--དཔེ་འབད་བ་ཅིན་: --2.ལོག་བཏང་མི་ཐོ་དེ་ ཡར་སེང་རིམ་སྒྲིག་ནང་དབྱེ་བ་ཕྱེ་ཡོདཔ་ཨིན།--༡། Collatz (༡) འདི་ [1] ཨིན།--དྲན་གསོ།--ཚིག་ཡིག་དང་གཅིག་བསྡོམས་ཏེ་ ཚོད་དཔག་འདི་ n གི་གནས་གོང་ག་དེ་ཅིག་ཨིན་རུང་ ཚིག་ཡིག་རིམ་པ་འདི་ དུས་རྒྱུན་དུ་ 1 ལུ་ལྷོད་འོང་།--ཧེ་མའི་གནས་རིམ་འདི་ གྱངས་ཁ་མ་གཅིགཔ་ཨིན་པ་ཅིན་ ཤུལ་མའི་གནས་རིམ་འདི་ ཧེ་མའི་གནས་རིམ་ལས་ ༣ ལུ་གྱངས་ཁ་རྐྱབ་ཨིན།--ཤུལ་མའི་གནས་རིམ་འདི་ སྦྲགས་ཏེ་ཡོད་པ་ཅིན་ ཤུལ་མའི་གནས་རིམ་འདི་ གི་ཕྱེད་ཀ་ཨིན།--འ་ནི་བཟུམ་སྦེ་: ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ཧྲིལ་བུམ་ n ལས་འགོ་བཙུགསཔ་ཨིན། དེ་ལས་ ཚིག་རེ་རེ་ ནང་ལས་ཐོབ་ཨིན།--ཀོ་ལ་ཊ་གི་དཔའ་བཅམ་འདི་ རྩིས་ཀྱི་དཔའ་བཅམ་ཅིག་ཨིནམ་ད་ འདི་ནང་ དབྱེ་ཞིབ་འབད་ཡོད་པའི་རིམ་པ་ཅིག་ལུ་ འབྲེལ་བ་ཡོདཔ་ཨིན།--ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་ནང་ ཨང་གྲངས་ཚུ་བཙུག་ཞིནམ་ལས་ ཕྲང་སྒྲིག་འབད་ཚུགས།--  >>> getOddCollatz 5\n--  [1,5]\ngetOddCollatz :: Int -> [Int]\ngetOddCollatz n =","canonical_solution":"getOddCollatz :: Int -> [Int]\ngetOddCollatz n = sort . filter odd $ collatzSequence n\n  where\n    collatzSequence 1 = [1]\n    collatzSequence x\n      | even x    = x : collatzSequence (x `div` 2)\n      | otherwise = x : collatzSequence (3 * x + 1)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = getOddCollatz\n  if candidate 14 == [1,5,7,11,13,17] then pure () else error \"assertion failed\"\n  if candidate 5 == [1,5] then pure () else error \"assertion failed\"\n  if candidate 12 == [1,3,5] then pure () else error \"assertion failed\"\n  if candidate 1 == [1] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_124","nl":"dzo_Tibt","pl":"hs","prompt":"--ཚེས་གྲངས་འདི་ ཨེཆ་ཨེམ་-དི་-ཨའི་ཨའི་གི་རྣམ་པ་ནང་ལུ་དགོཔ་ཨིན།--ཟླཝ་འདི་ ༡ ལས་ཉུང་ ཡང་ན་ ༡༢ ལས་ལྷག་སྟེ་མི་འོང་།--ཟླཝ་ ༡,༣,༥,༧,༨,༡༠,༡༢ ཀྱི་དོན་ལུ་ ཉིན་གྲངས་ ༡ ལས་ཉུང་ ཡང་ན་ ༣༡ ལས་ལྷག་སྟེ་མེདཔ་ད་ ཟླཝ་ ༤,༦,༩,༡༡ གྱི་དོན་ལུ་ ཉིན་གྲངས་ ༡ ལས་ཉུང་ ཡང་ན་ ༣༠ ལས་ལྷག་སྟེ་མེདཔ་དང་ ཟླཝ་ ༢ ཀྱི་དོན་ལུ་ ཉིན་གྲངས་ ༡ ལས་ཉུང་ ཡང་ན་ ༢༩ ལས་ལྷག་སྟེ་མེདཔ་ཨིན།--1. ཚེས་གྲངས་ཐིག་ཁྲམ་འདི་ སྟོངམ་མེན།--ཚེས་གྲངས་འདི་ འོག་གི་བཀོད་རྒྱ་ཚུ་ཆ་མཉམ་ར་ཆ་མཉམ་ར་ཆ་བཞག་པ་ཅིན་ ཆ་གནས་ཨིན།--ཚེས་གྲངས་འདི་ ཆ་གནས་ཡོད་པ་ཅིན་བདེན་པ་སླར་ལོག་འབདཝ་ཨིན། དེ་མེན་པ་ཅིན་རྫུས་མ་ཨིན།--ཁྱོད་ཀྱིས་ ཚེས་གྲངས་ཐིག་ཡིག་ཅིག་ལུ་ ཆ་གནས་འབད་ཡོད་པའི་ ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> validDate \"03-11-2000\"\n--  True\n--  >>> validDate \"15-01-2012\"\n--  False\n--  >>> validDate \"04-0-2040\"\n--  False\n--  >>> validDate \"06-04-2020\"\n--  True\n--  >>> validDate \"06\/04\/2020\"\n--  False\nvalidDate :: String -> Bool\nvalidDate date =","canonical_solution":"import Text.Read (readMaybe)\nimport Data.List.Split (splitOn)\n\nvalidDate :: String -> Bool\nvalidDate date =\n    case splitOn \"-\" date of\n        [m, d, y] -> isValidMonthDayYear m d y\n        _         -> False\n\nisValidMonthDayYear :: String -> String -> String -> Bool\nisValidMonthDayYear m d y =\n    case (readMaybe m :: Maybe Int, readMaybe d :: Maybe Int, readMaybe y :: Maybe Int) of\n        (Just month, Just day, Just year) -> isValidMonth month && isValidDay month day\n        _ -> False\n\nisValidMonth :: Int -> Bool\nisValidMonth month = month >= 1 && month <= 12\n\nisValidDay :: Int -> Int -> Bool\nisValidDay month day\n    | month `elem` [1, 3, 5, 7, 8, 10, 12] = day >= 1 && day <= 31\n    | month `elem` [4, 6, 9, 11]           = day >= 1 && day <= 30\n    | month == 2                           = day >= 1 && day <= 29\n    | otherwise                            = False","tests":"\nmain :: IO ()\nmain = do\n  let candidate = validDate\n  if candidate \"03-11-2000\" == True then pure () else error \"assertion failed\"\n  if candidate \"15-01-2012\" == False then pure () else error \"assertion failed\"\n  if candidate \"04-0-2040\" == False then pure () else error \"assertion failed\"\n  if candidate \"06-04-2020\" == True then pure () else error \"assertion failed\"\n  if candidate \"01-01-2007\" == True then pure () else error \"assertion failed\"\n  if candidate \"03-32-2011\" == False then pure () else error \"assertion failed\"\n  if candidate \"\" == False then pure () else error \"assertion failed\"\n  if candidate \"04-31-3000\" == False then pure () else error \"assertion failed\"\n  if candidate \"06-06-2005\" == True then pure () else error \"assertion failed\"\n  if candidate \"21-31-2000\" == False then pure () else error \"assertion failed\"\n  if candidate \"04-12-2003\" == True then pure () else error \"assertion failed\"\n  if candidate \"04122003\" == False then pure () else error \"assertion failed\"\n  if candidate \"20030412\" == False then pure () else error \"assertion failed\"\n  if candidate \"2003-04\" == False then pure () else error \"assertion failed\"\n  if candidate \"2003-04-12\" == False then pure () else error \"assertion failed\"\n  if candidate \"04-2003\" == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_126","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་སྟོན་ --ཨང་གྲངས་, སླར་ལོག་འབད་ནི་ལུ་རྫུས་མ་ཨིན། ནུས་མེད་ཨང་གྲངས་དང་ ཨང་གྲངས་ཧྲིལ་པོ་རྐྱངམ་ཅིག་ ཆ་བཞག་དགོ།--ཤོག་ལེབ་འདི་ ཤོག་ལེབ་གཅིག་ལས་ལྷག་སྟེ་ཡོད་པ་ཅིན་ --ཨང་གྲངས་ཀྱི་ཐོ་འདི་བྱིན་ཏེ་ ཨང་གྲངས་ཚུ་རིམ་སྒྲིག་འབད་ཡོད་མེད་ལོག་གཏང་།--  >>> isSorted [5]\n--  True\n--  >>> isSorted [1,2,3,4,5]\n--  True\n--  >>> isSorted [1,3,2,4,5]\n--  False\n--  >>> isSorted [1,2,3,4,5,6]\n--  True\n--  >>> isSorted [1,2,3,4,5,6,7]\n--  True\n--  >>> isSorted [1,3,2,4,5,6,7]\n--  False\n--  >>> isSorted [1,2,2,3,3,4]\n--  True\n--  >>> isSorted [1,2,2,2,3,4]\n--  False\nisSorted :: [Int] -> Bool\nisSorted lst =","canonical_solution":"isSorted :: [Int] -> Bool\nisSorted lst = go lst Nothing\n  where\n    go [] _ = True\n    go [x] _ = True\n    go (x:y:xs) prev\n      | x > y = False\n      | x == y && prev == Just x = False\n      | otherwise = go (y:xs) (Just x)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = isSorted\n  if candidate [5] == True then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5] == True then pure () else error \"assertion failed\"\n  if candidate [1,3,2,4,5] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6] == True then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6,7] == True then pure () else error \"assertion failed\"\n  if candidate [1,3,2,4,5,6,7] == False then pure () else error \"assertion failed\"\n  if candidate [] == True then pure () else error \"assertion failed\"\n  if candidate [1] == True then pure () else error \"assertion failed\"\n  if candidate [3,2,1] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,2,2,3,4] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,3,3,3,4] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,2,3,3,4] == True then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4] == True then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_127","nl":"dzo_Tibt","pl":"hs","prompt":"--[འཛུལ་སྒོ་\/ཐོན་ཁུངས་] དཔེ་ཚད་ཚུ་: --བར་མཚམས་གཉིས་ཆ་ར་ ཕྲད་མ་མཐུནམ་ཨིན་པ་ཅིན་ \"NO\" སླར་ལོག་འབདཝ་ཨིན།--དེ་མེན་པ་ཅིན་ \"NO\" ཟེར་ལོག་གཏང་།--གལ་སྲིད་ ཟུར་གྱི་རིང་ཚད་དེ་ ཨང་གྲངས་ངོ་མ་ཅིག་ཨིན་པ་ཅིན་ \"YES\" སླར་ལོག་འབད།--འདི་ཡང་ 1 འདི་ཨང་གྲངས་ངོ་མ་མེན་པའི་ཨང་གྲངས་ཨིན།--དཔེ་འབད་བ་ཅིན་ བར་མཚམས་ (1,3) དང་ (2,4) གི་བར་མཚམས་འདི་ (2,3) ཨིན།--བར་མཚམས་འདི་ཨང་གྲངས་ངོ་མ་ཨིན།--ཁྱོད་ཀྱི་ལཱ་འདི་ འ་ནི་གཉིས་ཆ་རའི་ ཕྲང་ལམ་གྱི་རིང་ཚད་འདི་ ངེས་གཏན་བཟོ་ནི་ཨིན།--བར་མཚམས་ག་རའི་དོན་ལུ་ འདི་གི་འགོ་འདི་ ཆུང་བ་ ཡང་ན་ མཐའ་མའི་མཐའ་མ་འདི་དང་འདྲན་འདྲ་སྦེ་ ཆ་བཞགཔ་ཨིན།--འགོ་བཙུགས་དང་མཇུག་གཉིས་ཆ་ར་ཚུད་དེ་ཡོདཔ་ཨིན།--བྱིན་ཡོད་པའི་བར་སྟོང་འདི་བསྡམས་ཡོདཔ་དང་ འདི་ཡང་ བར་སྟོང་འདི་ (འགོ་བཙུགས་,མཇུག་) ཨིན།--གནས་ཡུན་རེ་རེ་ནི་ ཨང་གྲངས་ཆ་མཉམ་གྱི་ཆ་ཕྲན་ཨིན། དཔེར་ན་ གནས་ཡུན་ = (འགོ་བཙུགས་, མཇུག་) = (1, 2) ཨིན།--ཁྱོད་ཀྱིས་བར་སྟོང་གཉིས་ཐོབ་ཨིན།--  >>> intersection (1, 2) (2, 3)\n--  \"NO\"\n--  >>> intersection ((-1), 1) (0, 4)\n--  \"NO\"\n--  >>> intersection ((-3), (-1)) ((-5), 5)\n--  \"YES\"\nintersection :: (Int, Int) -> (Int, Int) -> String\nintersection interval1 interval2 =","canonical_solution":"intersection :: (Int, Int) -> (Int, Int) -> String\nintersection (start1, end1) (start2, end2) = \n    if intersectionLength > 0 && isPrime intersectionLength\n    then \"YES\"\n    else \"NO\"\n  where\n    intersectionStart = max start1 start2\n    intersectionEnd = min end1 end2\n    intersectionLength = intersectionEnd - intersectionStart + 1\n    \n    isPrime :: Int -> Bool\n    isPrime n\n      | n <= 1 = False\n      | n == 2 = True\n      | otherwise = null [x | x <- [2..(floor . sqrt . fromIntegral) n], n `mod` x == 0]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = intersection\n  if candidate (1, 2) (2, 3) == \"NO\" then pure () else error \"assertion failed\"\n  if candidate ((-1), 1) (0, 4) == \"NO\" then pure () else error \"assertion failed\"\n  if candidate ((-3), (-1)) ((-5), 5) == \"YES\" then pure () else error \"assertion failed\"\n  if candidate ((-2), 2) ((-4), 0) == \"YES\" then pure () else error \"assertion failed\"\n  if candidate ((-11), 2) ((-1), (-1)) == \"NO\" then pure () else error \"assertion failed\"\n  if candidate (1, 2) (3, 5) == \"NO\" then pure () else error \"assertion failed\"\n  if candidate (1, 2) (1, 2) == \"NO\" then pure () else error \"assertion failed\"\n  if candidate ((-2), (-2)) ((-3), (-2)) == \"NO\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_128","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--དྲན་གསོ།: སྟོངམ་ཡོད་པའི་ཨར་ཚུ་ ཕྱིར་ལོག་འབདཝ་ཨིན།--ཨང་གྲངས་ཀྱི་ཐོ་ཡིག་ནང་ལུ་ ཨང་གྲངས་རེ་རེ་ལུ་ ༡ དང་ ༡ དང་ ༠ ཟེར་སྟོན་འབདཝ་ཨིན།--ཨང་གྲངས་ཧྲིལ་བུའི་ཆེ་ཆུང་ཚུ་བསྡོམས་ཏེ་ རྟགས་མཚན་ཆ་མཉམ་གྱི་ཐོན་རིམ་གྱིས་ ཕབ་ལེན་འབདཝ་ཨིན།--ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་ཡིག་ཅིག་ཐོབ་སྟེ་ ལོག་གཏང་དགོཔ་ཨིན།--  >>> prodSigns [1,2,2,(-4)]\n--  Just (9)\n--  >>> prodSigns [0,1]\n--  Just (0)\n--  >>> prodSigns []\n--  Just (Nothing)\nprodSigns :: [Int] -> Maybe Int\nprodSigns arr =","canonical_solution":"prodSigns :: [Int] -> Maybe Int\nprodSigns [] = Nothing\nprodSigns arr = Just $ sum (map abs arr) * product (map signum arr)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = prodSigns\n  if candidate [1,2,2,(-4)] == Just ((-9)) then pure () else error \"assertion failed\"\n  if candidate [0,1] == Just (0) then pure () else error \"assertion failed\"\n  if candidate [1,1,1,2,3,(-1),1] == Just ((-10)) then pure () else error \"assertion failed\"\n  if candidate [] == Just (Nothing) then pure () else error \"assertion failed\"\n  if candidate [2,4,1,2,(-1),(-1),9] == Just (20) then pure () else error \"assertion failed\"\n  if candidate [(-1),1,(-1),1] == Just (4) then pure () else error \"assertion failed\"\n  if candidate [(-1),1,1,1] == Just ((-4)) then pure () else error \"assertion failed\"\n  if candidate [(-1),1,1,0] == Just (0) then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_129","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ཕྲ་རིང་ནང་ལུ་ཉུང་མཐའ་ལམ་འདི་འགྱོ་མི་ ཀེར་ཐིག་གི་གནས་གོང་ཚུ་རིམ་སྒྲིག་འབད་ཡོད་པའི་ཐོ་ཡིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན།--འདི་ལུ་ལན་འདི་ངེས་གཏན་སྦེ་རང་ ཨིན།--lst_A[j] = lst_B[j] ཨིན།--འདི་བཟུམ་འབད་ lst_A[i] < lst_B[i] དང་ j (1 <= j < i) གི་དོན་ལུ་ ང་བཅས་ལུ་ --lst_Bལས་ལྷག་པའི་ ཚིག་གཞན་ཅིག་ནང་འབད་བ་ཅིན་ ཨང་གྲངས་ཧྲིལ་ཨང་གི་ཐོ་ཡིག་ i (1 <= i <= k) ཅིག་ཡོདཔ་ཨིན།--རྒྱུད་རིམ་འདི་ (འདི་ཚུ་ལུ་ lst_A དང་ lst_B ཟེར་སླབ་གེ་) རྒྱུད་རིམ་འདི་ཚིག་མཛོད་རིག་པ་ནང་ལུ་ཉུང་སུ་ཅིག་ཨིན།--ནང་ཐིག་ A དང་ B ཚུ་ནང་ གནས་གོང་ཚུ་རིམ་སྒྲིག་འབད་ཞིནམ་ལས་ --ལམ་ A (རིང་ཚད་ k) འདི་ ལམ་ B (རིང་ཚད་ k) ལས་ཆུང་བ་སྦེ་བརྩི་པ་ཅིན་ --ཁྱོད་ཀྱིས་ ཇི་རིཊི་ནང་ལས་འཐོན་འགྱོ་མི་ཚུགས།--ཚུ་སོ་སོ་སྦེ་ སྟོན་དགོཔ་ཨིན།)--ཐབས་ལམ་ k འབད་མི་ལུ་བལྟ་བ་ཅིན་ ཀེལ་སི་ k སྦེ་འོང་ནི་ཨིནམ་ཤེས་དགོ (མི་ ཨིན།--ཌའི་ལོག་ནང་ལུ་--འདི་ཡང་ ཁྱོད་ཀྱིས་ ཕྲང་ལམ་གྱི་ཟུར་ཁ་ལུ་ཡོད་པའི་ ཀེལ་སི་ཚུ་ནང་འགྱོ་ཚུགས།--ཇི་ལག་འདི་ ཇི་ལག་གི་ས་སྒོ་འདི་ ཇི་ལག་གི་ས་སྒོ་འདི་ ཇི་ལག་གི་ས་སྒོ་འདི་ ཇི་ལག་གི་ས་སྒོ་འདི་ ཇི་ལག་གི་ས་སྒོ་འདི་--ཁྱོད་ཀྱིས་ ཀ་རིང་ཚད་ཀྱི་ཕྲང་ལམ་ཆུང་ཤོས་འདི་ འཚོལ་དགོ་འོང་། ཁྱོད་ཀྱིས་ འགོ་བཙུགས་ཚུགས།--inclusive འདི་ grid གི་སྒོ་སྒྲིག་ནང་ལུ་ ཚར་གཅིག་རང་མཐོང་འོང་།--གིཌི་གི་སྒོ་སྒྲིག་རེ་རེའི་ནང་ གནས་གོང་ཅིག་ཡོདཔ་ཨིན། [༡, ན * ན] གི་ནང་དོན་ནང་གི་ཨང་གྲངས་ཧྲིལ་བུམ་རེ་རེ--ཕྲ་རིང་ནང་ལུ་ གྲལ་ཐིག་དང་ཐིག་ཁྲམ་ (N >=2) དང་ ནུས་ལྡན་ཨང་གྲངས་ k ཡོད་མི་ལུ་བརྟེན་--  >>> minpath [[1,2,3],[4,5,6],[7,8,9]] 3\n--  [1,2,1]\n--  >>> minpath [[5,9,3],[4,1,6],[7,8,2]] 1\n--  [1]\nminpath :: [[Int]] -> Int -> [Int]\nminpath grid k =","canonical_solution":"import Data.List (sort, sortBy)\nimport Data.Ord (comparing)\nimport Control.Monad (guard)\n\nminpath :: [[Int]] -> Int -> [Int]\nminpath grid k = head $ sort paths\n  where\n    n = length grid\n    cells = [(r, c) | r <- [0..n-1], c <- [0..n-1]]\n    neighbors (r, c) = filter inBounds [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]\n      where\n        inBounds (x, y) = x >= 0 && x < n && y >= 0 && y < n\n    value (r, c) = grid !! r !! c\n    paths = do\n      start <- cells\n      findPaths k [start]\n    findPaths 1 path = return $ map value path\n    findPaths l path@(current:_) = do\n      next <- neighbors current\n      findPaths (l-1) (next : path)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = minpath\n  if candidate [[1,2,3],[4,5,6],[7,8,9]] 3 == [1,2,1] then pure () else error \"assertion failed\"\n  if candidate [[5,9,3],[4,1,6],[7,8,2]] 1 == [1] then pure () else error \"assertion failed\"\n  if candidate [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]] 4 == [1,2,1,2] then pure () else error \"assertion failed\"\n  if candidate [[6,4,13,10],[5,7,12,1],[3,16,11,15],[8,14,9,2]] 7 == [1,10,1,10,1,10,1] then pure () else error \"assertion failed\"\n  if candidate [[8,14,9,2],[6,4,13,15],[5,7,1,12],[3,10,11,16]] 5 == [1,7,1,7,1] then pure () else error \"assertion failed\"\n  if candidate [[11,8,7,2],[5,16,14,4],[9,3,15,6],[12,13,10,1]] 9 == [1,6,1,6,1,6,1,6,1] then pure () else error \"assertion failed\"\n  if candidate [[12,13,10,1],[9,3,15,6],[5,16,14,4],[11,8,7,2]] 12 == [1,6,1,6,1,6,1,6,1,6,1,6] then pure () else error \"assertion failed\"\n  if candidate [[2,7,4],[3,1,5],[6,8,9]] 8 == [1,3,1,3,1,3,1,3] then pure () else error \"assertion failed\"\n  if candidate [[6,1,5],[3,8,9],[2,7,4]] 8 == [1,5,1,5,1,5,1,5] then pure () else error \"assertion failed\"\n  if candidate [[1,2],[3,4]] 10 == [1,2,1,2,1,2,1,2,1,2] then pure () else error \"assertion failed\"\n  if candidate [[1,3],[3,2]] 10 == [1,3,1,3,1,3,1,3,1,3] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_130","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--Tribonacci གི་རིམ་པ་གི་ཨང་དང་པ་ n+1 ཨིན།--ཁྱོད་ཀྱིས་ ནུས་མེད་ཨང་གྲངས་ཧྲིལ་བུམ་ n ཅིག་ཐོབ་པ་ཅིན་ ཁྱོད་ཀྱིས་ གི་ཐོ་ཡིག་ཅིག་ལོག་གཏང་དགོ།--= ༢་༣་༣་ = ༨་--tri(3) = tri(2) + tri(1) + tri(4) ཨིན།--tri(4) = ༣ ཨིན་པུཊི་--tri(2) = ༡ + ༢ \/ ༢ = ༢ ཨིན།--དཔེ་འབད་བ་ཅིན་: --tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1) འདི་ nའདི་ གྱངས་ཁ་མ་རྐྱང་པ་ཨིན་པ་ཅིན་ཨིན།--tri (n) = 1 + n \/ 2 འདི་ཡང་ n ཅིག་ཨིན་པ་ཅིན་ཨིན།--tri(1) = ༣ ཨིན་པུཊི་--Tribonacci sequence འདི་ཡང་བསྐྱར་དུ་འབྱུང་བའི་ཐོག་ལས་གསལ་བཀོད་འབདཝ་ཨིན།--ཨིན་རུང་ མི་གིས་མ་ཤེས་མི་འདི་ ཏིརི་བཱོན་ཅིཤི་གི་རིམ་པ་ཨིན།--ཕི་བོ་ན་ཅིའི་རིམ་པ་ ག་ར་གིས་ཤེས་དོ་ཡོདཔ་དང་ འདི་ལུ་ རྩིས་རིག་པ་ཚུ་གིས་ སྤྱི་ལོ་༡༩༥༠ལུ་ ཞིབ་འཇུག་འབད་ཡོདཔ་ཨིན།--  >>> tri 3\n--  [1,3,2,8]\ntri :: Int -> [Int]\ntri n =","canonical_solution":"tri :: Int -> [Int]\ntri n = map tribonacci [0..n]\n  where\n    -- Define the recursive function to calculate the tribonacci value for a given n\n    tribonacci :: Int -> Int\n    tribonacci 0 = 1\n    tribonacci 1 = 3\n    tribonacci x\n      | even x    = 1 + x `div` 2\n      | otherwise = tribonacci (x - 1) + tribonacci (x - 2) + tribonacci (x + 1)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = tri\n  if candidate 3 == [1,3,2,8] then pure () else error \"assertion failed\"\n  if candidate 4 == [1,3,2,8,3] then pure () else error \"assertion failed\"\n  if candidate 5 == [1,3,2,8,3,15] then pure () else error \"assertion failed\"\n  if candidate 6 == [1,3,2,8,3,15,4] then pure () else error \"assertion failed\"\n  if candidate 7 == [1,3,2,8,3,15,4,24] then pure () else error \"assertion failed\"\n  if candidate 8 == [1,3,2,8,3,15,4,24,5] then pure () else error \"assertion failed\"\n  if candidate 9 == [1,3,2,8,3,15,4,24,5,35] then pure () else error \"assertion failed\"\n  if candidate 20 == [1,3,2,8,3,15,4,24,5,35,6,48,7,63,8,80,9,99,10,120,11] then pure () else error \"assertion failed\"\n  if candidate 0 == [1] then pure () else error \"assertion failed\"\n  if candidate 1 == [1,3] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_131","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --ཨང་གྲངས་ཆ་མཉམ་རང་ཆ་མཉམ་ཨིན་པ་ཅིན་ ༠ སླར་ལོག་འབདཝ་ཨིན།--ཕྲང་ཨང་གྲངས་ n ཅིག་ཐོབ་པ་ཅིན་ ཨང་གྲངས་ཉོག་ཕྲང་གི་ཐོན་རིམ་སླར་ལོག་འབད།--  >>> digits 1\n--  1\n--  >>> digits 4\n--  0\n--  >>> digits 235\n--  15\ndigits :: Int -> Int\ndigits n =","canonical_solution":"digits :: Int -> Int\ndigits n\n  | null oddDigits = 0\n  | otherwise      = product oddDigits\n  where\n    oddDigits = [digit | digit <- map (read . (:[])) (show n), odd digit]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = digits\n  if candidate 5 == 5 then pure () else error \"assertion failed\"\n  if candidate 54 == 5 then pure () else error \"assertion failed\"\n  if candidate 120 == 1 then pure () else error \"assertion failed\"\n  if candidate 5014 == 5 then pure () else error \"assertion failed\"\n  if candidate 98765 == 315 then pure () else error \"assertion failed\"\n  if candidate 5576543 == 2625 then pure () else error \"assertion failed\"\n  if candidate 2468 == 0 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_132","nl":"dzo_Tibt","pl":"hs","prompt":"--འདི་ནང་ལུ་ ཤུལ་མམ་གྱི་ནང་ཐིག་གཅིག་ཡང་ སྦྲེལ་མཐུད་འབད་ཡོདཔ་ཨིན།--ལས་འགན་འདི་ True སླར་ལོག་འབད་དགོཔ་ཨིན། གལ་སྲིད་དང་རྐྱངམ་ཅིག་ ཆ་གནས་ཅན་གྱི་ སྦྲེལ་རྟགས་ཀྱི་རིམ་པ་ ཅིག་ཡོད་པ་ཅིན་ཨིན།--ཤོག་ཁྲམ་ནང་ ཀེར་ཐིག་གི་རྒྱབ་ལག་རྐྱངམ་ཅིག་ཡོད་པའི་ ནང་ཐིག་ཅིག་སྦེ་ ལག་ལེན་འཐབ་མི་ལས་འགན་ཅིག་བཟོ་དགོ།--  >>> isNested \"[[]]\"\n--  True\n--  >>> isNested \"[]]]]]]][[[[[]\"\n--  False\n--  >>> isNested \"[][]\"\n--  False\n--  >>> isNested \"[]\"\n--  False\n--  >>> isNested \"[[][]]\"\n--  True\n--  >>> isNested \"[[]][[\"\n--  True\nisNested :: String -> Bool\nisNested string =","canonical_solution":"isNested :: String -> Bool\nisNested string = go string 0 False\n  where\n    go [] _ nested = nested\n    go (x:xs) depth nested\n      | x == '['  = go xs (depth + 1) (nested || depth >= 1)\n      | x == ']' && depth > 0 = go xs (depth - 1) nested\n      | otherwise = go xs depth nested","tests":"\nmain :: IO ()\nmain = do\n  let candidate = isNested\n  if candidate \"[[]]\" == True then pure () else error \"assertion failed\"\n  if candidate \"[]]]]]]][[[[[]\" == False then pure () else error \"assertion failed\"\n  if candidate \"[][]\" == False then pure () else error \"assertion failed\"\n  if candidate \"[]\" == False then pure () else error \"assertion failed\"\n  if candidate \"[[[[]]]]\" == True then pure () else error \"assertion failed\"\n  if candidate \"[]]]]]]]]]]\" == False then pure () else error \"assertion failed\"\n  if candidate \"[][][[]]\" == True then pure () else error \"assertion failed\"\n  if candidate \"[[]\" == False then pure () else error \"assertion failed\"\n  if candidate \"[]]\" == False then pure () else error \"assertion failed\"\n  if candidate \"[[]][[\" == True then pure () else error \"assertion failed\"\n  if candidate \"[[][]]\" == True then pure () else error \"assertion failed\"\n  if candidate \"\" == False then pure () else error \"assertion failed\"\n  if candidate \"[[[[[[[[\" == False then pure () else error \"assertion failed\"\n  if candidate \"]]]]]]]]\" == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_133","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ནང་ཐིག་ནང་གི་ཆ་ཤས་རེ་རེ་ལུ་ གྱངས་ཁ་མཐོ་སའི་ int (_T) སྦེ་ཡར་འཁོར་རྐྱབས།--ཁྱོད་ཀྱིས་ ཤོག་ཁྲམ་ནང་ཡོད་པའི་གྱངས་ཁ་ཚུ་ གྱངས་ཁ་གཉིས་སྦེ་བསྡོམས་ཏེ་ལོག་གཏང་དགོ།--ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཀྱི་ཐོ་ཅིག་ཐོབ་ནུག--  >>> lst [1.0,2.0,3.0]\n--  14\n--  >>> lst [1.0,4.0,9.0]\n--  98\n--  >>> lst [1.0,3.0,5.0,7.0]\n--  84\n--  >>> lst [1.4,4.2,0.0]\n--  29\n--  >>> lst [-2.4,1.0,1.0]\n--  6\nsumSquares :: [Float] -> Int\nsumSquares lst =","canonical_solution":"import Data.List (foldl')\nimport Prelude hiding (sum)\n\nsumSquares :: [Float] -> Int\nsumSquares lst = foldl' (\\acc x -> acc + ceiling x ^ 2) 0 lst","tests":"\nmain :: IO ()\nmain = do\n  let candidate = sumSquares\n  if candidate [1.0,2.0,3.0] == 14 then pure () else error \"assertion failed\"\n  if candidate [1.0,2.0,3.0] == 14 then pure () else error \"assertion failed\"\n  if candidate [1.0,3.0,5.0,7.0] == 84 then pure () else error \"assertion failed\"\n  if candidate [1.4,4.2,0.0] == 29 then pure () else error \"assertion failed\"\n  if candidate [-2.4,1.0,1.0] == 6 then pure () else error \"assertion failed\"\n  if candidate [100.0,1.0,15.0,2.0] == 10230 then pure () else error \"assertion failed\"\n  if candidate [10000.0,10000.0] == 200000000 then pure () else error \"assertion failed\"\n  if candidate [-1.4,4.6,6.3] == 75 then pure () else error \"assertion failed\"\n  if candidate [-1.4,17.9,18.9,19.9] == 1086 then pure () else error \"assertion failed\"\n  if candidate [0.0] == 0 then pure () else error \"assertion failed\"\n  if candidate [-1.0] == 1 then pure () else error \"assertion failed\"\n  if candidate [-1.0,1.0,0.0] == 2 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_134","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--དྲན་གསོ། \"ཚིག་ཡིག་\"འདི་ བར་སྟོང་གིས་སོ་སོ་འཕྱལ་མི་ཡིག་འབྲུ་ཚུ་ཨིན།--དོན་ཚན་གྱི་ཆ་ཤས་ཅིག་དང་ དོན་ཚན་གཞན་འདི་རྫུས་མ་ཨིན།--string གི་ཡིག་འབྲུ་འདི་ ཨེཕ་ཇི་ཡིག་འབྲུ་ཅིག་ཨིནམ་དང་ འདི་མེན་པས།--ཁྱོད་ཀྱིས་མཐའ་མཇུག་གི་ཡིག་འབྲུ་འདི་ འབད་བ་ཅིན་ ལས་འགན་ཅིག་བཟོ་ཞིནམ་ལས་ True སླར་ལོག་འབདཝ་ཨིན།--  >>> checkIfLastCharIsALetter \"apple pie\"\n--  False\n--  >>> checkIfLastCharIsALetter \"apple pi e\"\n--  True\n--  >>> checkIfLastCharIsALetter \"apple pi e \"\n--  False\n--  >>> checkIfLastCharIsALetter \"\"\n--  False\ncheckIfLastCharIsALetter :: String -> Bool\ncheckIfLastCharIsALetter txt =","canonical_solution":"checkIfLastCharIsALetter :: String -> Bool\ncheckIfLastCharIsALetter txt = \n    let trimmed = reverse . dropWhile (== ' ') $ reverse txt\n    in case trimmed of\n        [] -> False\n        (x:xs) -> isAlpha x && (null xs || head xs == ' ')","tests":"\nmain :: IO ()\nmain = do\n  let candidate = checkIfLastCharIsALetter\n  if candidate \"apple\" == False then pure () else error \"assertion failed\"\n  if candidate \"apple pi e\" == True then pure () else error \"assertion failed\"\n  if candidate \"eeeee\" == False then pure () else error \"assertion failed\"\n  if candidate \"A\" == True then pure () else error \"assertion failed\"\n  if candidate \"Pumpkin pie \" == False then pure () else error \"assertion failed\"\n  if candidate \"Pumpkin pie 1\" == False then pure () else error \"assertion failed\"\n  if candidate \"\" == False then pure () else error \"assertion failed\"\n  if candidate \"eeeee e \" == False then pure () else error \"assertion failed\"\n  if candidate \"apple pie\" == False then pure () else error \"assertion failed\"\n  if candidate \"apple pi e \" == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_135","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--གནས་གོང་གཉིས་མཚུངས་ཨིན།--དེ་བཟུམ་གྱི་ཆ་ཤས་མེད་པ་ཅིན་ལོག་གཏང་ -1. ཡོད་པའི་ཐོ་ནང་ མི་ཚུད་འོང་།--དེ་དང་དེ་ཅིག་ཁར་ཡོད་པའི་ཆ་ཤས་འདི་ སྦོམ་ཤོས་དང་འདྲན་འདྲ་མིན་འདུག--ཇི་ཇི་ཨེམ་ཨེལ་གྱི་ ཚད་འཛིན་སྦོམ་ཤོས་སླར་ལོག་འབད་ནིའི་ལས་འགན་ཅིག་བཟོ།--  >>> canArrange [1,2,4,3,5]\n--  3\n--  >>> canArrange [1,2,3]\n--  (-1)\ncanArrange :: [Int] -> Int\ncanArrange arr =","canonical_solution":"canArrange :: [Int] -> Int\ncanArrange arr = go arr (-1) 0\n  where\n    go [] maxIdx _ = maxIdx\n    go [_] maxIdx _ = maxIdx\n    go (x:y:xs) maxIdx idx\n      | x >= y    = go (y:xs) idx (idx + 1)\n      | otherwise = go (y:xs) maxIdx (idx + 1)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = canArrange\n  if candidate [1,2,4,3,5] == 3 then pure () else error \"assertion failed\"\n  if candidate [1,2,4,5] == (-1) then pure () else error \"assertion failed\"\n  if candidate [1,4,2,5,6,7,8,9,10] == 2 then pure () else error \"assertion failed\"\n  if candidate [4,8,5,7,3] == 4 then pure () else error \"assertion failed\"\n  if candidate [] == (-1) then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_136","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ནེ་གཱཊི་དང་པེ་སི་ཊི་ཨང་གྲངས་མེད་པ་ཅིན་ དེ་ཚུ་ ནེ་ཅིཊི་སྦེ་ལོག་གཏང་།--ཤོག་ལེབ་ནང་ལུ་ ནུས་ལྡན་ཨང་གྲངས་ཆ་མཉམ་ཚུ་བཙུགས།--ནུས་མེད་ཨང་གྲངས་ཚུ་གི་གྲས་ལས་སྦོམ་ཤོས་དང་ b འདི་ཆུང་ཤོས་ཨིན།--'a'འདི་ ཨིནམ་ལས་ལས་ tuple (a, b) འདི་སླར་ལོག་འབད་ནིའི་ལས་འགན་ཅིག་བཟོ་དགོ།--  >>> largestSmallestIntegers [2,4,1,3,5,7]\n--  (Nothing, 1)\n--  >>> largestSmallestIntegers []\n--  (Nothing, Nothing)\n--  >>> largestSmallestIntegers [0]\n--  (Nothing, Nothing)\nlargestSmallestIntegers :: [Int] -> (Maybe Int, Maybe Int)\nlargestSmallestIntegers lst =","canonical_solution":"largestSmallestIntegers :: [Int] -> (Maybe Int, Maybe Int)\nlargestSmallestIntegers lst = (largestNegative, smallestPositive)\n  where\n    negatives = filter (< 0) lst\n    positives = filter (> 0) lst\n    largestNegative = if null negatives then Nothing else Just (maximum negatives)\n    smallestPositive = if null positives then Nothing else Just (minimum positives)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = largestSmallestIntegers\n  if candidate [2,4,1,3,5,7] == (Nothing, 1) then pure () else error \"assertion failed\"\n  if candidate [2,4,1,3,5,7,0] == (Nothing, 1) then pure () else error \"assertion failed\"\n  if candidate [1,3,2,4,5,6,(-2)] == ((-2), 1) then pure () else error \"assertion failed\"\n  if candidate [4,5,3,6,2,7,(-7)] == ((-7), 2) then pure () else error \"assertion failed\"\n  if candidate [7,3,8,4,9,2,5,(-9)] == ((-9), 2) then pure () else error \"assertion failed\"\n  if candidate [] == (Nothing, Nothing) then pure () else error \"assertion failed\"\n  if candidate [0] == (Nothing, Nothing) then pure () else error \"assertion failed\"\n  if candidate [(-1),(-3),(-5),(-6)] == ((-1), Nothing) then pure () else error \"assertion failed\"\n  if candidate [(-1),(-3),(-5),(-6),0] == ((-1), Nothing) then pure () else error \"assertion failed\"\n  if candidate [(-6),(-4),(-4),(-3),1] == ((-3), 1) then pure () else error \"assertion failed\"\n  if candidate [(-6),(-4),(-4),(-3),(-100),1] == ((-3), 1) then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_138","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་ --བྱིན་ཡོད་པའི་ཨང་གྲངས་ n འདི་ཨང་གྲངས་ཆ་མཉམ་ 4 གི་བསྡོམས་ཨིནམ་སྦེ་འབྲི་ཚུགས་ག་མེད་ བརྟག་ཞིབ་འབད་ --  >>> isEqualToSumEven 4\n--  False\n--  >>> isEqualToSumEven 6\n--  False\n--  >>> isEqualToSumEven 8\n--  True\nisEqualToSumEven :: Int -> Bool\nisEqualToSumEven n =","canonical_solution":"isEqualToSumEven :: Int -> Bool\nisEqualToSumEven n = n > 0 && n `mod` 2 == 0 && n >= 8","tests":"\nmain :: IO ()\nmain = do\n  let candidate = isEqualToSumEven\n  if candidate 4 == False then pure () else error \"assertion failed\"\n  if candidate 6 == False then pure () else error \"assertion failed\"\n  if candidate 8 == True then pure () else error \"assertion failed\"\n  if candidate 10 == True then pure () else error \"assertion failed\"\n  if candidate 11 == False then pure () else error \"assertion failed\"\n  if candidate 12 == True then pure () else error \"assertion failed\"\n  if candidate 13 == False then pure () else error \"assertion failed\"\n  if candidate 16 == True then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_139","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --འདི་ནང་ལུ་ n > 0 --brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! --བེརཱཇི་ལིའ་གི་གནས་སྡུད་འདི་ འ་ནི་བཟུམ་སྦེ་ངེས་འཛིན་འབདཝ་ཨིན།--  >>> specialFactorial 4\n--  288\n--  The function will receive an integer as input and should return the special\n--  factorial of this integer.\nspecialFactorial :: Int -> Int\nspecialFactorial n =","canonical_solution":"specialFactorial :: Int -> Int\nspecialFactorial n = product [factorial x | x <- [1..n]]\n  where\n    factorial 0 = 1\n    factorial k = k * factorial (k - 1)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = specialFactorial\n  if candidate 4 == 288 then pure () else error \"assertion failed\"\n  if candidate 5 == 34560 then pure () else error \"assertion failed\"\n  if candidate 7 == 125411328000 then pure () else error \"assertion failed\"\n  if candidate 1 == 1 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_140","nl":"dzo_Tibt","pl":"hs","prompt":"--དེ་ལས་ཤུལ་མམ་གྱི་ས་སྟོང་ཚུ་ཆ་མཉམ་ལུ་ -  དང་གཅིག་ཁར་ཚབ་རྐྱབས།--string ལུ་ཤུལ་མམ་གྱི་བར་སྟོང་གཉིས་ལས་ལྷག་ཡོད་པ་ཅིན་ --འབྲི་ཤོག་གི་ཐིག་ཁྲམ་ཅིག་བྱིན་པ་ཅིན་ ནང་ཐིག་ག་ར་ འོག་ལུ་ཡོད་མི་ཡིག་དཔར་གྱིས་ཚབ་བཙུགས་དགོ།--  >>> fixSpaces \" Example\"\n--  \"Example\"\n--  >>> fixSpaces \" Example 1\"\n--  \"Example_1\"\n--  >>> fixSpaces \" Example 2\"\n--  \"_Example_2\"\n--  >>> fixSpaces \" Example 3\"\n--  \"_Example-3\"\nfixSpaces :: String -> String\nfixSpaces text =","canonical_solution":"fixSpaces :: String -> String\nfixSpaces text = concatMap replaceSpaces (groupSpaces text)\n  where\n    groupSpaces :: String -> [String]\n    groupSpaces [] = []\n    groupSpaces xs@(x:_) = let (g, rest) = span (== x) xs in g : groupSpaces rest\n\n    replaceSpaces :: String -> String\n    replaceSpaces spaces@(x:_)\n      | x == ' ' && length spaces > 2 = \"-\"\n      | x == ' ' = replicate (length spaces) '_'\n      | otherwise = spaces","tests":"\nmain :: IO ()\nmain = do\n  let candidate = fixSpaces\n  if candidate \"Example\" == \"Example\" then pure () else error \"assertion failed\"\n  if candidate \"Mudasir Hanif \" == \"Mudasir_Hanif_\" then pure () else error \"assertion failed\"\n  if candidate \"Yellow Yellow  Dirty  Fellow\" == \"Yellow_Yellow__Dirty__Fellow\" then pure () else error \"assertion failed\"\n  if candidate \"Exa   mple\" == \"Exa-mple\" then pure () else error \"assertion failed\"\n  if candidate \"   Exa 1 2 2 mple\" == \"-Exa_1_2_2_mple\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_141","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--- ཌོཊི་གི་ཤུལ་ལས་ཡོད་པའི་སབ་སི་ཊི་རིང་འདི་འདི་ཚུ་གི་གྲལ་ལས་ གཅིག་དགོཔ་ཨིན། ['txt', 'exe', 'dll'] --Latin alphabet ('a'-'z' and 'A'-'Z') ཚུ་ནང་ལུ་བཙུགས་ཡོདཔ་ཨིན།--- ཌོཊི་གི་ཧེ་མ་གི་ཡིག་འབྲུ་འདི་ སྟོངམ་མ་སྡོད་དགོཔ་མ་ཚད་ ནང་ལས་ཡིག་འབྲུ་ཅིག་ལས་ འགོ་བཙུགས་འོང་།--- ཌའི་ལོག་གི་མིང་ནང་ལུ་ གནད་སྡུད་གཅིག་རང་ཡོད་ '.' --- ཡིག་སྣོད་མིང་ནང་ལུ་ ཨང་གྲངས་གསུམ་ལས་ལྷག་སྟེ་ཡོད་ནི་མི་འོང་། ('0'-'9')--འདི་ཚུ་གྲུབ་ནུག--ཡིག་སྣོད་མིང་འདི་ འོག་གི་གནས་སྟངས་ཚུ་ཆ་མཉམ་ནང་ཡོད་པ་ཅིན་རྐྱངམ་གཅིག་ ཆ་གནས་ཅན་སྦེ་བརྩི་འོང་།--ཐོ་བཀོད་མིང་འདི་ ཆ་གནས་ཡོད་པ་ཅིན་ \"Yes\" ཟེར་ཨེབ་གཏང་འབད་ དེ་ལས་མེན་པ་ཅིན་ \"No\" ཟེར་ལོག་གཏང་།--ཌའི་ལོག་གི་མིང་འདི་ ཌའི་ལོག་གི་མིང་གི་ཚབ་ལུ་ ཌའི་ལོག་གི་མིང་འདི་ ཌའི་ལོག་གི་མིང་ལུ་བསྒྱུར་གཏང་འོང་།--  >>> fileNameCheck \"example.txt\"\n--  \"Yes\"\n--  >>> fileNameCheck \"1example.dll\"\n--  \"No\"\nfileNameCheck :: String -> String\nfileNameCheck file_name =","canonical_solution":"import Data.Char (isDigit, isLetter)\n\nfileNameCheck :: String -> String\nfileNameCheck file_name \n  | countDots \/= 1 = \"No\"\n  | length digits > 3 = \"No\"\n  | null beforeDot || not (isLetter (head beforeDot)) = \"No\"\n  | afterDot `notElem` validExtensions = \"No\"\n  | otherwise = \"Yes\"\n  where \n    (beforeDot, afterDot) = span (\/= '.') file_name\n    countDots = length $ filter (== '.') file_name\n    digits = filter isDigit file_name\n    validExtensions = [\"txt\", \"exe\", \"dll\"]\n    afterDot = if null dotAndAfter then \"\" else tail dotAndAfter\n    dotAndAfter = dropWhile (\/= '.') file_name","tests":"\nmain :: IO ()\nmain = do\n  let candidate = fileNameCheck\n  if candidate \"example.txt\" == \"Yes\" then pure () else error \"assertion failed\"\n  if candidate \"1example.dll\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"s1sdf3.asd\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"K.dll\" == \"Yes\" then pure () else error \"assertion failed\"\n  if candidate \"MY16FILE3.exe\" == \"Yes\" then pure () else error \"assertion failed\"\n  if candidate \"His12FILE94.exe\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"_Y.txt\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"?aREYA.exe\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"\/this_is_valid.dll\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"this_is_valid.wow\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"this_is_valid.txt\" == \"Yes\" then pure () else error \"assertion failed\"\n  if candidate \"this_is_valid.txtexe\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"#this2_i4s_5valid.ten\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"@this1_is6_valid.exe\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"this_is_12valid.6exe4.txt\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"all.exe.txt\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"I563_No.exe\" == \"Yes\" then pure () else error \"assertion failed\"\n  if candidate \"Is3youfault.txt\" == \"Yes\" then pure () else error \"assertion failed\"\n  if candidate \"no_one#knows.dll\" == \"Yes\" then pure () else error \"assertion failed\"\n  if candidate \"1I563_Yes3.exe\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"I563_Yes3.txtt\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"final..txt\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"final132\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"_f4indsartal132.\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \".txt\" == \"No\" then pure () else error \"assertion failed\"\n  if candidate \"s.\" == \"No\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_142","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--འོག་ལུ་ཡོད་པའི་ཐོ་ཡིག་ནང་ ནང་ཐིག་ཚུ་ ༣ དང་ ༤ གི་གྱངས་ཁ་སྦེ་མ་འཐོན་མི་ཚུ་ བསྒྱུར་བཅོས་འབད་དགོ་ དེ་ལས་ ལས་འགན་འདི་གིས་ ནང་ཐིག་ཆ་མཉམ་གྱི་བསྡོམས་སླར་ལོག་འབདཝ་ཨིན།--ལས་འགན་འདི་ 3 གི་གྱངས་ཁ་དང་ ཨང་གྲངས་ཧྲིལ་བུམ་འདི་ ནང་ལུ་བཙུགས་ནི་ཨིན་པ་ཅིན་ འདི་གི་ཨང་གྲངས་དེ་ 4 གི་གྱངས་ཁ་དང་ 3 གི་གྱངས་ཁ་མེན་པ་ཅིན་ ལས་འགན་འདི་གིས་ --འ་ནི་འགན་འདི་གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ཅིག་ལེན་འོང་། ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ཆ་མཉམ་གྱི་དོན་ལུ་འགན་འདི་གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་འདི་ སྦེ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུམ་དེ་  ལུ་ཡར་འཕར་འབདཝ་ཨིན།--\" ཨིན།--  >>> lst\n--  [1,2,3]\n--  >>> lst\n--  []\n--  >>> lst\n--  [(-1),(-5),2,(-1),(-5)]\nsumSquares :: [Int] -> Int\nsumSquares lst =","canonical_solution":"sumSquares :: [Int] -> Int\nsumSquares lst = sum $ zipWith transform [0..] lst\n  where\n    transform idx x\n      | idx `mod` 3 == 0 = x * x\n      | idx `mod` 4 == 0 = x * x * x\n      | otherwise        = x","tests":"\nmain :: IO ()\nmain = do\n  let candidate = sumSquares\n  if candidate [1,2,3] == 6 then pure () else error \"assertion failed\"\n  if candidate [1,4,9] == 14 then pure () else error \"assertion failed\"\n  if candidate [] == 0 then pure () else error \"assertion failed\"\n  if candidate [1,1,1,1,1,1,1,1,1] == 9 then pure () else error \"assertion failed\"\n  if candidate [(-1),(-1),(-1),(-1),(-1),(-1),(-1),(-1),(-1)] == (-3) then pure () else error \"assertion failed\"\n  if candidate [0] == 0 then pure () else error \"assertion failed\"\n  if candidate [(-1),(-5),2,(-1),(-5)] == (-126) then pure () else error \"assertion failed\"\n  if candidate [(-56),(-99),1,0,(-2)] == 3030 then pure () else error \"assertion failed\"\n  if candidate [(-1),0,0,0,0,0,0,0,(-1)] == 0 then pure () else error \"assertion failed\"\n  if candidate [(-16),(-9),(-2),36,36,26,(-20),25,(-40),20,(-4),12,(-26),35,37] == (-14196) then pure () else error \"assertion failed\"\n  if candidate [(-1),(-3),17,(-1),(-15),13,(-1),14,(-14),(-12),(-5),14,(-14),6,13,11,16,16,4,10] == (-1448) then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_143","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་གཞི་ ༡:--ཚིག་རིམ་གསརཔ་ནང་ ཚིག་རིམ་དེ་ དང་ཕུའི་ ཚིག་རིམ་དང་འདྲཝ་སྦེ་དགོཔ་ཨིན།--འདི་ནང་ལུ་ ཚེ་རིང་ཚུ་ཨང་གྲངས་ངོ་མ་ཨིན།--ཁྱོད་ཀྱིས་ ཚིག་ཡིག་གཞི་རྟེན་ནང་ལས་ ཚིག་ཡིག་ཚུ་ཡོད་པའི་ string སླར་ལོག་འབད་དགོཔ་ཨིན།--ཚིག་ཡིག་ནང་ལུ་ བར་སྟོང་གིས་སོ་སོར་འབད་མི་ཚིག་ཚུ་ཡོདཔ་ཨིན།--ཁྱོད་ཀྱིས་ཚིག་ཡིག་ཅིག་ལུ་ངོ་ཚབ་འབད་ཡོད་པའི་ ཀེར་ཐིག་ཅིག་ཐོབ་འོང་།--  >>> wordsInSentence \"This is a test\"\n--  \"is\"\n--  Example 2:\n--  >>> wordsInSentence \"lets go for swimming\"\n--  \"go for\"\n--  Constraints:\n--  * 1 <= len(sentence) <= 100\n--  * sentence contains only letters\nwordsInSentence :: String -> String\nwordsInSentence sentence =","canonical_solution":"import Data.List (intercalate)\n\nwordsInSentence :: String -> String\nwordsInSentence sentence = intercalate \" \" $ filter (isPrime . length) (words sentence)\n\nisPrime :: Int -> Bool\nisPrime n | n < 2     = False\n          | otherwise = null [ x | x <- [2..isqrt n], n `mod` x == 0 ]\n\nisqrt :: Int -> Int\nisqrt = floor . sqrt . fromIntegral","tests":"\nmain :: IO ()\nmain = do\n  let candidate = wordsInSentence\n  if candidate \"This is a test\" == \"is\" then pure () else error \"assertion failed\"\n  if candidate \"lets go for swimming\" == \"go for\" then pure () else error \"assertion failed\"\n  if candidate \"there is no place available here\" == \"there is no place\" then pure () else error \"assertion failed\"\n  if candidate \"Hi I am Hussein\" == \"Hi am Hussein\" then pure () else error \"assertion failed\"\n  if candidate \"go for it\" == \"go for it\" then pure () else error \"assertion failed\"\n  if candidate \"here\" == \"\" then pure () else error \"assertion failed\"\n  if candidate \"here is\" == \"is\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_144","nl":"dzo_Tibt","pl":"hs","prompt":"--ཁྱོད་ཀྱིས་ x དང་ n འདི་ ཆ་ཤས་ངོ་མ་ཨིནམ་སྦེ་ཆ་བཞགཔ་ད་ སྦྲེལ་རྟགས་ལུ་ ༠ ཟེར་མེདཔ་ཨིན།--<གྲངས་རྩིས་>\/<གྲངས་རྩིས་> འདི་ནང་ལུ་ གྲངས་རྩིས་དང་གྲངས་རྩིས་གཉིས་ཆ་ར་ ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ཧྲིལ་བུམ་ཨིན།--x དང་ n གཉིས་ཆ་རང་ལུ་ ཨེགསི་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་--x * n འདི་གྲངས་ཆ་ཧྲིལ་བུམ་སྦེ་ངེས་འཛིན་འབད་བ་ཅིན་ ལས་འགན་གྱིས་བདེན་པ་སྦེ་སླར་ལོག་འབདཝ་ཨིན།--ཁྱོད་ཀྱི་ལཱ་འདི་ བརྡ་བཀོད་འདི་འཇམ་ཏོང་ཏོ་འབད་འབད་ནིའི་དོན་ལུ་ ལས་འགན་ཅིག་ལག་ལེན་འཐབ་དགོ།--  >>> simplify \"1\/5\" \"5\/1\"\n--  True\n--  >>> simplify \"1\/6\" \"2\/1\"\n--  False\n--  >>> simplify \"7\/10\" \"10\/2\"\n--  False\nsimplify :: String -> String -> Bool\nsimplify x n =","canonical_solution":"import Data.Ratio (denominator, numerator, (%))\n\nsimplify :: String -> String -> Bool\nsimplify x n =\n  let (xNum, xDen) = toFraction x\n      (nNum, nDen) = toFraction n\n      result = (xNum * nNum) % (xDen * nDen)\n  in denominator result == 1\n\ntoFraction :: String -> (Integer, Integer)\ntoFraction s =\n  let (numStr, _:denStr) = break (=='\/') s\n  in (read numStr, read denStr)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = simplify\n  if candidate \"1\/5\" \"5\/1\" == True then pure () else error \"assertion failed\"\n  if candidate \"1\/6\" \"2\/1\" == False then pure () else error \"assertion failed\"\n  if candidate \"5\/1\" \"3\/1\" == True then pure () else error \"assertion failed\"\n  if candidate \"7\/10\" \"10\/2\" == False then pure () else error \"assertion failed\"\n  if candidate \"2\/10\" \"50\/10\" == True then pure () else error \"assertion failed\"\n  if candidate \"7\/2\" \"4\/2\" == True then pure () else error \"assertion failed\"\n  if candidate \"11\/6\" \"6\/1\" == True then pure () else error \"assertion failed\"\n  if candidate \"2\/3\" \"5\/2\" == False then pure () else error \"assertion failed\"\n  if candidate \"5\/2\" \"3\/5\" == False then pure () else error \"assertion failed\"\n  if candidate \"2\/4\" \"8\/4\" == True then pure () else error \"assertion failed\"\n  if candidate \"2\/4\" \"4\/2\" == True then pure () else error \"assertion failed\"\n  if candidate \"1\/5\" \"5\/1\" == True then pure () else error \"assertion failed\"\n  if candidate \"1\/5\" \"1\/5\" == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_145","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --ཤོག་ལེབ་ཚུ་ ཨང་དང་པའི་ཐོ་ཡིག་ནང་ཡོད་མི་ ཨང་ཡིག་གི་གཞི་བསྟུན་ལུ་གཞི་བཞག་སྟེ་རིམ་སྒྲིག་འབད།--དྲན་གསོ། ཨང་གྲངས་ཚུ་བསྡོམས་ཏེ་ཡོད་པའི་ ཨང་གྲངས་ལེ་ཤ་ཡོད་པ་ཅིན་ --ཨང་གྲངས་ཚུ་ཡར་སེང་འགྱོ་ནིའི་རིམ་པ་ལུ་གཞི་བཞག་སྟེ་ཨིན།--ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་ཚུ་ དབྱེ་བ་ཕྱེ་ནིའི་དོན་ལས་ ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> orderByPoints [1,11,(-1),(-11),(-12)]\n--  [(-1),(-11),1,(-12),11]\n--  >>> orderByPoints []\n--  []\norderByPoints :: [Int] -> [Int]\norderByPoints nums =","canonical_solution":"import Data.List (sortBy)\nimport Data.Function (on)\n\norderByPoints :: [Int] -> [Int]\norderByPoints nums = map snd $ sortBy (compare `on` fst) indexedNums\n  where\n    sumOfDigits :: Int -> Int\n    sumOfDigits n = sum (map (abs . read . return) $ show $ abs n)\n    \n    indexedNums :: [(Int, Int)]\n    indexedNums = zip (map sumOfDigits nums) nums","tests":"\nmain :: IO ()\nmain = do\n  let candidate = orderByPoints\n  if candidate [1,11,(-1),(-11),(-12)] == [(-1),(-11),1,(-12),11] then pure () else error \"assertion failed\"\n  if candidate [1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46] == [0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457] then pure () else error \"assertion failed\"\n  if candidate [] == [] then pure () else error \"assertion failed\"\n  if candidate [1,(-11),(-32),43,54,(-98),2,(-3)] == [(-3),(-32),(-98),(-11),1,2,43,54] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6,7,8,9,10,11] == [1,10,2,11,3,4,5,6,7,8,9] then pure () else error \"assertion failed\"\n  if candidate [0,6,6,(-76),(-21),23,4] == [(-76),(-21),0,4,23,6,6] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_146","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དང་པ་དང་མཇུག་འདི་ གྱངས་ཁ་རྐྱང་པ་ (1, 3, 5, 7, 9) ཨིན།--ཨང་གྲངས་དེ་ ༡༠ ལས་ལྷག་སྟེ་ཡོད་པ་ཅིན་ ཨང་གྲངས་དེ་གཉིས་ཆ་ར་ལུ་ ཨང་གྲངས་དེ་ཅིག་རང་ ཨིན།--ཌའི་ལོག་ནང་ ཨང་གྲངས་ཚུ་བཙུགས་ཏེ་སླར་ལོག་འབད་མི་ ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> specialfilter [15,(-73),14,(-15)]\n--  1\n--  >>> specialfilter [33,(-2),(-3),45,21,109]\n--  2\nspecialfilter :: [Int] -> Int\nspecialfilter nums =","canonical_solution":"specialfilter :: [Int] -> Int\nspecialfilter nums = length $ filter isSpecial nums\n  where\n    isSpecial n = n > 10 && isOddFirstAndLast (abs n)\n\n    isOddFirstAndLast :: Int -> Bool\n    isOddFirstAndLast x = isOddDigit firstDigit && isOddDigit lastDigit\n      where\n        xStr = show x\n        firstDigit = head xStr\n        lastDigit = last xStr\n\n    isOddDigit :: Char -> Bool\n    isOddDigit c = c `elem` \"13579\"","tests":"\nmain :: IO ()\nmain = do\n  let candidate = specialfilter\n  if candidate [5,(-2),1,(-5)] == 0 then pure () else error \"assertion failed\"\n  if candidate [15,(-73),14,(-15)] == 1 then pure () else error \"assertion failed\"\n  if candidate [33,(-2),(-3),45,21,109] == 2 then pure () else error \"assertion failed\"\n  if candidate [43,(-12),93,125,121,109] == 4 then pure () else error \"assertion failed\"\n  if candidate [71,(-2),(-33),75,21,19] == 3 then pure () else error \"assertion failed\"\n  if candidate [1] == 0 then pure () else error \"assertion failed\"\n  if candidate [] == 0 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_147","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--a[i] + a[j] + a[k] འདི་ ༣ གི་གྱངས་ཁ་ཨིན།--གནས་གོང་ i < j < k ཡོད་པའི་གནས་གོང་ a གི་ triples (a[i], a[j], a[k]) གི་གྱངས་ཁ་སླར་ལོག་འབདཝ་ཨིན།--i (༡ ≤ i ≤ n) གི་དོན་ལུ་ a[i] =i * i - i + 1 གི་གནས་གོང་ཨིན།--ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་ n ཐོབ་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་ list a བཟོ་དགོཔ་ཨིན།--  >>> getMaxTriples 5\n--  1\n--  Explanation: \n--  a = [1, 3, 7, 13, 21]\n--  The only valid triple is (1, 7, 13).\ngetMaxTriples :: Int -> Int\ngetMaxTriples n =","canonical_solution":"getMaxTriples :: Int -> Int\ngetMaxTriples n = length [(a[i], a[j], a[k]) | i <- [0..n-1], j <- [i+1..n-1], k <- [j+1..n-1], (a !! i + a !! j + a !! k) `mod` 3 == 0]\n  where\n    a = [i * i - i + 1 | i <- [1..n]]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = getMaxTriples\n  if candidate 5 == 1 then pure () else error \"assertion failed\"\n  if candidate 6 == 4 then pure () else error \"assertion failed\"\n  if candidate 10 == 36 then pure () else error \"assertion failed\"\n  if candidate 100 == 53361 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_149","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --ཁྱོད་ཀྱིས་ཚིག་ཆ་མཉམ་ ཡུན་ཚད་འདྲ་མཉམ་སྦེ་འོང་ནི་མས་ཟེར་ མནོ་བསམ་བཏུབ།--ལས་འགན་འདི་གིས་ གྲལ་ཐིག་ཚུ་རིམ་སྒྲིག་འབད་དེ་ལོག་གཏང་དགོ།--ཚིག་གཉིས་ཆ་ར་ ཡུན་རིང་འདྲན་འདྲ་ཡོད་པ་ཅིན་ ཨེཕ་ཊི་རིམ་སྒྲིག་ཐོག་ལུ་ རིམ་སྒྲིག་འབད།--ཚད་འཛིན་དེ་གི་ཐོག་ལས་ ཐོ་བཀོད་འདི་ལོག་གཏང་དགོ།--ཚིག་ཡིག་གི་རིམ་པ་འདི་ ཚིག་རེ་རེ་གི་རིང་ཚད་དང་བསྟུན་ཏེ་ ཡར་སེང་འགྱོ་དགོཔ་ཨིན།--འདི་ནང་ལུ་ ཐེངས་གཉིས་འབད་མི་ཡང་ འདུག་འོང་།--ཐོ་བཀོད་འདི་ རྟག་བུ་རང་ ཚིག་ཡིག་གི་ཐོ་ཡིག་དང་ ཨང་གྲངས་ཀྱི་ཐོ་ཡིག་མེན།--དེ་ལས་ གྲུབ་འབྲས་ཀྱི་ཐོ་དེ་རིམ་སྒྲིག་འབད་ཡོད་པའི་རིམ་སྒྲིག་སྦེ་ལོག་གཏང་འོང་།--ཚད་ལྡན་ཡིག་འབྲུ་འདི་ ཚད་ལྡན་ཡིག་འབྲུ་འདི་ནང་ལས་ ཆད་ནི་ཨིན།--སྐར་མ་གི་ཐོ་ཡིག་ཅིག་ལུ་ ཆ་བཞག་མི་ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> listSort [\"aa\",\"a\",\"aaa\"]\n--  [\"aa\"]\n--  >>> listSort [\"ab\",\"a\",\"aaa\",\"cd\"]\n--  [\"ab\",\"cd\"]\nsortedListSum :: [String] -> [String]\nsortedListSum lst =","canonical_solution":"sortedListSum :: [String] -> [String]\nsortedListSum lst = sortBy compareStrings (filter evenLength lst)\n  where\n    evenLength s = even (length s)\n    compareStrings s1 s2\n      | length s1 == length s2 = compare s1 s2\n      | otherwise = compare (length s1) (length s2)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = sortedListSum\n  if candidate [\"aa\",\"a\",\"aaa\"] == [\"aa\"] then pure () else error \"assertion failed\"\n  if candidate [\"school\",\"AI\",\"asdf\",\"b\"] == [\"AI\",\"asdf\",\"school\"] then pure () else error \"assertion failed\"\n  if candidate [\"d\",\"b\",\"c\",\"a\"] == [] then pure () else error \"assertion failed\"\n  if candidate [\"d\",\"dcba\",\"abcd\",\"a\"] == [\"abcd\",\"dcba\"] then pure () else error \"assertion failed\"\n  if candidate [\"AI\",\"ai\",\"au\"] == [\"AI\",\"ai\",\"au\"] then pure () else error \"assertion failed\"\n  if candidate [\"a\",\"b\",\"b\",\"c\",\"c\",\"a\"] == [] then pure () else error \"assertion failed\"\n  if candidate [\"aaaa\",\"bbbb\",\"dd\",\"cc\"] == [\"cc\",\"dd\",\"aaaa\",\"bbbb\"] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_150","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ཨང་གྲངས་ངོ་མ་ཅིག་ཨིནམ་ལས་ y གི་གནས་གོང་ལོག་གཏང་དགོ།--ཌའི་ལོག་འདི་ ཌའི་ལོག་གི་ཨང་གྲངས་ n ཨིནམ་སྦེ་སྟོན་པ་ཅིན་ x གི་གནས་གོང་དེ་སླར་ལོག་འབདཝ་ཨིན།--  >>> xOrY 7 34 12\n--  34\n--  >>> xOrY 15 8 5\n--  5\nxOrY :: Int -> Int -> Int -> Int\nxOrY n x y =","canonical_solution":"xOrY :: Int -> Int -> Int -> Int\nxOrY n x y = if isPrime n then x else y\n\nisPrime :: Int -> Bool\nisPrime k\n  | k < 2     = False\n  | otherwise = null [ x | x <- [2..k-1], k `mod` x == 0 ]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = xOrY\n  if candidate 7 34 12 == 34 then pure () else error \"assertion failed\"\n  if candidate 15 8 5 == 5 then pure () else error \"assertion failed\"\n  if candidate 3 33 5212 == 33 then pure () else error \"assertion failed\"\n  if candidate 1259 3 52 == 3 then pure () else error \"assertion failed\"\n  if candidate 7919 (-1) 12 == (-1) then pure () else error \"assertion failed\"\n  if candidate 3609 1245 583 == 583 then pure () else error \"assertion failed\"\n  if candidate 91 56 129 == 129 then pure () else error \"assertion failed\"\n  if candidate 6 34 1234 == 1234 then pure () else error \"assertion failed\"\n  if candidate 1 2 0 == 0 then pure () else error \"assertion failed\"\n  if candidate 2 2 0 == 2 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_151","nl":"dzo_Tibt","pl":"hs","prompt":"--ཨང་གྲངས་ཆ་མཉམ་མེན་པའི་ ནུས་མེད་ ཡང་ན་ ཨང་གྲངས་ཆ་མཉམ་མེན་པའི་ ཨང་གྲངས་ཚུ་ སྣང་མེད་སྦེ་བཞག་དགོ།--གྱངས་ཁ་ཚུ་གི་ཐོ་ཡིག་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཚུ་གི་གྲུ་བཞི་བསྡོམས་དེ་ལོག་གཏང་དགོ།--  >>> doubleTheDifference [1,3,2,0]\n--  10\n--  >>> doubleTheDifference [(-1),(-2),0]\n--  0\n--  >>> doubleTheDifference [9,(-2)]\n--  81\n--  >>> doubleTheDifference [0]\n--  0\n--  If the input list is empty, return 0.\ndoubleTheDifference :: [Float] -> Int\ndoubleTheDifference lst =","canonical_solution":"doubleTheDifference :: [Float] -> Int\ndoubleTheDifference lst = \n    sum [x * x | x <- map round lst, x > 0, odd x]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = doubleTheDifference\n  if candidate [.0] == 0 then pure () else error \"assertion failed\"\n  if candidate [5.0,4.0] == 25 then pure () else error \"assertion failed\"\n  if candidate [0.1,0.2,0.3] == 0 then pure () else error \"assertion failed\"\n  if candidate [-10.0,-20.0,-30.0] == 0 then pure () else error \"assertion failed\"\n  if candidate [-1.0,-2.0,8.0] == 0 then pure () else error \"assertion failed\"\n  if candidate [0.2,3.0,5.0] == 34 then pure () else error \"assertion failed\"\n  if candidate [-9.0,-7.0,-5.0,-3.0,-1.0,1.0,3.0,5.0,7.0,9.0] == 165 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_152","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --གནས་གོང་འདི་ ༠ ཨིན་པ་ཅིན་ གནས་གོང་འདི་དཔའ་བཅམ་མི་དང་ ཨང་གི་བར་ན་ ཁྱད་པར་ངོ་མ་ཨིན།--ཚོད་དཔག་འབད་མི་ཚུ་ ཕྲང་ཐངས་སྦེ་ཡོད་པ་ཅིན་ ཚད་གཞི་འདི་ ཚད་གཞི་འདི་ ཕྲང་ཐངས་སྦེ་ཡོད་པ་ཅིན་ ཚད་གཞི་འདི་ ཕྲང་ཐངས་སྦེ་ཡོད་པ་ཅིན་ ཚད་གཞི་འདི་ ཕྲང་ཐངས་སྦེ་ཡོད་པ་ཅིན་ ཚད་གཞི་འདི་ ཕྲང་ཐངས་སྦེ་ཡོད་པ་ཅིན་ ཚད་གཞི་འདི་ ཕྲང་ཐངས་སྦེ་ཡོད་པ་ཅིན་--ཁྱོད་ཀྱིས་ ཨང་དང་ཚོད་དཔག་འབད་ཡོད་པའི་ཐོ་ཡིག་གཉིས་ཐོབ་ཡོདཔ་དང་ འདི་ནང་ཚད་གཞི་རེ་རེ་བཞིན་དུ་ མཉམ་འབྲེལ་སྦེ་སྟོན་ཡོདཔ་ཨིན།--ཁྱོད་ཀྱི་ལཱ་འདི་ མི་གཅིག་གིས་ རྩེད་འགྲན་གྱི་གྲུབ་འབྲས་ཚུ་ ལེགས་ཤོམ་སྦེ་ར་ ཧ་གོ་ཡོདཔ་ཨིན་ན་ བལྟ་ནི་དེ་ཨིན།--འདི་ལུ་བལྟ་བ་ཅིན་ ཐད་རི་བ་རི་རང་ འབྲི་ནི་དང་བསྡུར་རྐྱབ་ནི་དེ་ ལེགས་ཤོམ་ཨིན།--བྱུང་རྐྱེན་འདི་ མཇུག་བསྡུ་བའི་སྐབས་ལུ་ ཤེས་ཚུགས་འོང་། ཚོར་སྣང་དང་མནོ་བསམ་འདི་ ད་ལྟོ་རང་ ཁྱོད་དང་གཅིག་ཁར་ཡོད་མི་འདི་ཨིན།--ང་འབད་བ་ཅིན་ ང་བཅས་ག་ར་གིས་ འདི་བཟུམ་གྱི་ཚོར་སྣང་འདི་ སེམས་ཁར་དྲན་ཏེ་ཡོད་ཟེར་སླབ་ཨིན་ ག་ཅི་སྨོ་ཟེར་བ་ཅིན་ ང་བཅས་ག་ར་གིས་ ཡུན་རིངམོ་སྦེ་སྒུག་སྡོད་མིའི་ གྲུབ་འབྲས་འདི་--  >>> compare [1,2,3,4,5,1] [1,2,3,4,2,(-2)]\n--  [0,0,0,0,3,3]\n--  >>> compare [0,5,0,0,0,4] [4,1,1,0,0,(-2)]\n--  [4,4,1,0,0,6]\ncompare :: [Int] -> [Int] -> [Int]\ncompare game guess =","canonical_solution":"compare :: [Int] -> [Int] -> [Int]\ncompare game guess = zipWith (\\g s -> abs (g - s)) game guess","tests":"\nmain :: IO ()\nmain = do\n  let candidate = compare\n  if candidate [1,2,3,4,5,1] [1,2,3,4,2,(-2)] == [0,0,0,0,3,3] then pure () else error \"assertion failed\"\n  if candidate [0,0,0,0,0,0] [0,0,0,0,0,0] == [0,0,0,0,0,0] then pure () else error \"assertion failed\"\n  if candidate [1,2,3] [(-1),(-2),(-3)] == [2,4,6] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,5] [(-1),2,3,4] == [2,0,0,1] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_153","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--(ཤུགས་དེ་ -༡ ཨིན།)--return \"Slices.SErviNGSliCes\" འདི་ ཤུགས་ཅན་ལག་ལེན་འཐབ་ཡོད་པའི་ཁྱབ་ཚད་ཨིནམ་ལས་ \"SErviNGSliCes\" ཨིན།--extension: ['SErviNGSliCes', 'Cheese', 'StuFfed'] འདི་ཨིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ --དཔེར་ན་ ཁྱོད་ཀྱིས་ \"Slices\" འདི་ སློབ་ཚན་སྦེ་ཐོབ་པ་ཅིན་དང་ --ཁྱོད་ཀྱིས་ཐོ་ཡིག་ནང་ལུ་ དང་པ་ཐོན་མི་ཅིག་ གདམ་ཁ་རྐྱབས།--ཤུགས་འདི་གཉིས་ ཡང་ན་དེ་ལས་མང་བ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཤུགས་འདི་གཉིས་ཆ་ར་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་--format: ClassName.StrongestExtensionName.   ཤོག་ལེབ་འདི་ནང་ལུ་ ཌའི་ལོག་གི་མིང་འདི་ སྟོན་ཚུགས།--ཁྱོད་ཀྱིས་ ཤུགས་ཅན་ཅིག་ཐོན་མི་འདི་འཚོལ་ཏེ་ འདི་ནང་ལུ་ string སླར་ལོག་འབད་དགོ།--ཤུགས་འདི་ CAP - SM གི་ཆ་ཤས་ནང་ལས་ཐོབ་ཨིན།--ཨེགསི་ཨེན་གྱི་མིང་ནང་ལུ་ཡིག་འབྲུ་ཚུ་དང་ SM འདི་ཡིག་འབྲུ་ཆུང་བའི་གྱངས་ཁ་ཨིན།--རྒྱ་སྐྱེད་ཀྱི་ཤུགས་འདི་ འོག་ལུ་བཟུམ་སྦེ་ཨིན། CAP འདི་ཡིག་འབྲུ་སྦོམ་ཤོས་ཀྱི་ཨང་གྲངས་ཨིན།--རྒྱས་བཤད་འདི་ སྦྱོར་སྡུད་ཀྱི་དོན་ལུ་ ལག་ལེན་འཐབ་ཨིན།--ཁྱོད་ཀྱིས་ ཚད་འཛིན་གྱི་མིང་དང་ ཚད་འཛིན་གྱི་ཐོ་ཡིག་ཐོབ་འོང་།--  >>> strongestExtension \"my_class\" [\"AA\",\"Be\",\"CC\"]\n--  \"my_class.AA\"\nstrongestExtension :: String -> [String] -> String\nstrongestExtension class_name extensions =","canonical_solution":"strongestExtension :: String -> [String] -> String\nstrongestExtension class_name extensions = class_name ++ \".\" ++ strongestExt\n  where\n    calculateStrength :: String -> Int\n    calculateStrength ext = length (filter (`elem` ['A'..'Z']) ext) - length (filter (`elem` ['a'..'z']) ext)\n    \n    strongestExt = fst $ foldl1 maxStrength $ zip extensions (map calculateStrength extensions)\n    \n    maxStrength :: (String, Int) -> (String, Int) -> (String, Int)\n    maxStrength ext1 ext2\n      | snd ext1 > snd ext2 = ext1\n      | otherwise           = ext2","tests":"\nmain :: IO ()\nmain = do\n  let candidate = strongestExtension\n  if candidate \"Watashi\" [\"tEN\",\"niNE\",\"eIGHt8OKe\"] == \"Watashi.eIGHt8OKe\" then pure () else error \"assertion failed\"\n  if candidate \"Boku123\" [\"nani\",\"NazeDa\",\"YEs.WeCaNe\",\"32145tggg\"] == \"Boku123.YEs.WeCaNe\" then pure () else error \"assertion failed\"\n  if candidate \"__YESIMHERE\" [\"t\",\"eMptY\",\"nothing\",\"zeR00\",\"NuLl__\",\"123NoooneB321\"] == \"__YESIMHERE.NuLl__\" then pure () else error \"assertion failed\"\n  if candidate \"K\" [\"Ta\",\"TAR\",\"t234An\",\"cosSo\"] == \"K.TAR\" then pure () else error \"assertion failed\"\n  if candidate \"__HAHA\" [\"Tab\",\"123\",\"781345\",\"-_-\"] == \"__HAHA.123\" then pure () else error \"assertion failed\"\n  if candidate \"YameRore\" [\"HhAas\",\"okIWILL123\",\"WorkOut\",\"Fails\",\"-_-\"] == \"YameRore.okIWILL123\" then pure () else error \"assertion failed\"\n  if candidate \"finNNalLLly\" [\"Die\",\"NowW\",\"Wow\",\"WoW\"] == \"finNNalLLly.WoW\" then pure () else error \"assertion failed\"\n  if candidate \"_\" [\"Bb\",\"91245\"] == \"_.Bb\" then pure () else error \"assertion failed\"\n  if candidate \"Sp\" [\"671235\",\"Bb\"] == \"Sp.671235\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_154","nl":"dzo_Tibt","pl":"hs","prompt":"--ཁྱོད་ཀྱིས་ཚིག་གཉིས་ཐོབ་ཨིན། ཁྱོད་ཀྱིས་ཚིག་གཉིས་པ་ ཡང་ན་ འདི་གི་འཁོར་ལོའི་རིམ་པ་ཚུ་ ཚིག་དང་པ་ནང་ ནང་ཐིག་ཅིག་ཨིན་པ་ཅིན་ ཁྱོད་ཀྱིས་བདེན་པ་སྦེ་ལོག་གཏང་དགོ།--  >>> cycpatternCheck \"abcd\" \"abd\"\n--  False\n--  >>> cycpatternCheck \"hello\" \"ell\"\n--  True\n--  >>> cycpatternCheck \"whassup\" \"psus\"\n--  False\n--  >>> cycpatternCheck \"abab\" \"baa\"\n--  True\n--  >>> cycpatternCheck \"efef\" \"eeff\"\n--  False\n--  >>> cycpatternCheck \"himenss\" \"simen\"\n--  True\ncycpatternCheck :: String -> String -> Bool\ncycpatternCheck a b =","canonical_solution":"cycpatternCheck :: String -> String -> Bool\ncycpatternCheck a b = any (`isInfixOf` a) rotations\n  where\n    rotations = take (length b) $ map (take (length b)) $ tails (b ++ b)","tests":"\nmain :: IO ()\nmain = do\n  let candidate = cycpatternCheck\n  if candidate \"xyzw\" \"xyw\" == False then pure () else error \"assertion failed\"\n  if candidate \"yello\" \"ell\" == True then pure () else error \"assertion failed\"\n  if candidate \"whattup\" \"ptut\" == False then pure () else error \"assertion failed\"\n  if candidate \"efef\" \"fee\" == True then pure () else error \"assertion failed\"\n  if candidate \"abab\" \"aabb\" == False then pure () else error \"assertion failed\"\n  if candidate \"winemtt\" \"tinem\" == True then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_155","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ཌའི་ལོག་ནང་ ཨང་གྲངས་ཆ་མཉམ་དང་ ཨང་གྲངས་ཆ་མེད་ཚུ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་དང་ ཨང་གྲངས་ཆ་མེད་ཚུ་ཡོད་པ་ཅིན་ ཌའི་ལོག་ནང་ ཨང་གྲངས་ཆ་མཉམ་དང་ ཨང་གྲངས་ཆ་མེད་ཚུ་ཡོད་པ་ཅིན་ ཌའི་ལོག་ནང་ ཨང་གྲངས་ཆ་མེད་ཚུ་ཡོད་པ་ཅིན་ ཌའི་ལོག་ནང་ ཨང་གྲངས་ཆ་མཉམ་དང་ ཨང་གྲངས་ཆ་མེད་ཚུ་ཡོད་པ་ཅིན་ ཌའི་ལོག་ནང་ ཨང་གྲངས་ཆ་མེད་ཚུ་ཡོད་པ་ཅིན་--  >>> evenOddCount (-12)\n--  (1, 1)\n--  >>> evenOddCount 123\n--  (1, 2)\nevenOddCount :: Int -> (Int, Int)\nevenOddCount num =","canonical_solution":"evenOddCount :: Int -> (Int, Int)\nevenOddCount num = (length evens, length odds)\n  where\n    digits = map (read . (:[])) . show . abs $ num\n    evens = filter even digits\n    odds  = filter odd digits","tests":"\nmain :: IO ()\nmain = do\n  let candidate = evenOddCount\n  if candidate 7 == (0, 1) then pure () else error \"assertion failed\"\n  if candidate (-78) == (1, 1) then pure () else error \"assertion failed\"\n  if candidate 3452 == (2, 2) then pure () else error \"assertion failed\"\n  if candidate 346211 == (3, 3) then pure () else error \"assertion failed\"\n  if candidate (-345821) == (3, 3) then pure () else error \"assertion failed\"\n  if candidate (-2) == (1, 0) then pure () else error \"assertion failed\"\n  if candidate (-45347) == (2, 3) then pure () else error \"assertion failed\"\n  if candidate 0 == (1, 0) then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_156","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--ཚད་འཛིན་: ༡ <= ཨང་གྲངས་ <= ༡༠༠༠--དེ་ལས་ ཆེ་ཆུང་ཡིག་རྒྱུན་ནང་ལོག་གཏང་།--ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་ཅིག་ཐོབ་པ་ཅིན་ རོམ་ཨང་གྲངས་ནང་ ཕྲ་རིང་ཅིག་སྦེ་ཐོབ་འོང་།--  >>> intToMiniRoman 19\n--  \"xix\"\n--  >>> intToMiniRoman 152\n--  \"clii\"\n--  >>> intToMiniRoman 426\n--  \"cdxxvi\"\nintToMiniRoman :: Int -> String\nintToMiniRoman number =","canonical_solution":"intToMiniRoman :: Int -> String\nintToMiniRoman number = concatMap (replicateSymbol number) romanNumerals\n  where\n    romanNumerals = [(1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"),\n                     (100, \"c\"), (90, \"xc\"), (50, \"l\"), (40, \"xl\"),\n                     (10, \"x\"), (9, \"ix\"), (5, \"v\"), (4, \"iv\"), (1, \"i\")]\n    \n    replicateSymbol :: Int -> (Int, String) -> String\n    replicateSymbol n (value, symbol)\n      | n >= value = symbol ++ replicateSymbol (n - value) (value, symbol)\n      | otherwise = \"\"","tests":"\nmain :: IO ()\nmain = do\n  let candidate = intToMiniRoman\n  if candidate 19 == \"xix\" then pure () else error \"assertion failed\"\n  if candidate 152 == \"clii\" then pure () else error \"assertion failed\"\n  if candidate 251 == \"ccli\" then pure () else error \"assertion failed\"\n  if candidate 426 == \"cdxxvi\" then pure () else error \"assertion failed\"\n  if candidate 500 == \"d\" then pure () else error \"assertion failed\"\n  if candidate 1 == \"i\" then pure () else error \"assertion failed\"\n  if candidate 4 == \"iv\" then pure () else error \"assertion failed\"\n  if candidate 43 == \"xliii\" then pure () else error \"assertion failed\"\n  if candidate 90 == \"xc\" then pure () else error \"assertion failed\"\n  if candidate 94 == \"xciv\" then pure () else error \"assertion failed\"\n  if candidate 532 == \"dxxxii\" then pure () else error \"assertion failed\"\n  if candidate 900 == \"cm\" then pure () else error \"assertion failed\"\n  if candidate 994 == \"cmxciv\" then pure () else error \"assertion failed\"\n  if candidate 1000 == \"m\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_157","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--དབྱེ་བ་ ༩༠ ལུ་ཐིག་ཁྲམ་འདི་--ཟུར་ཐིག་ཕྲང་ཟུར་གསུམ་འདི་ ཟུར་ཐིག་གཅིག་ ཟུར་ཐིག་ཕྲང་ཟུར་ ཡང་ན་ ཨིནམ་སྦེ་དབྱེ་ཚུགས།--གཡོན་འདི་ ཟུར་ཟུར་གསུམ་སྦེ་བཟོ་སྟེ་ཡོདཔ་དང་ གཞན་འདི་རྫུས་མ་ཨིན།--ཚད་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་ཚུ་བྱིན་པ་ཅིན་ True སླར་ལོག་འབདཝ་ཨིན།--  >>> rightAngleTriangle 3 4 5\n--  True\n--  >>> rightAngleTriangle 1 2 3\n--  False\nrightAngleTriangle :: Int -> Int -> Int -> Bool\nrightAngleTriangle a b c =","canonical_solution":"rightAngleTriangle :: Int -> Int -> Int -> Bool\nrightAngleTriangle a b c = \n    let [x, y, z] = sort [a, b, c]\n    in x^2 + y^2 == z^2\n    where sort = Data.List.sort","tests":"\nmain :: IO ()\nmain = do\n  let candidate = rightAngleTriangle\n  if candidate 3 4 5 == True then pure () else error \"assertion failed\"\n  if candidate 1 2 3 == False then pure () else error \"assertion failed\"\n  if candidate 10 6 8 == True then pure () else error \"assertion failed\"\n  if candidate 2 2 2 == False then pure () else error \"assertion failed\"\n  if candidate 7 24 25 == True then pure () else error \"assertion failed\"\n  if candidate 10 5 7 == False then pure () else error \"assertion failed\"\n  if candidate 5 12 13 == True then pure () else error \"assertion failed\"\n  if candidate 15 8 17 == True then pure () else error \"assertion failed\"\n  if candidate 48 55 73 == True then pure () else error \"assertion failed\"\n  if candidate 1 1 1 == False then pure () else error \"assertion failed\"\n  if candidate 2 2 10 == False then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_158","nl":"dzo_Tibt","pl":"hs","prompt":"--ཤོག་བྱང་གི་གྲལ་ཐིག་ནང་ དང་པ་འོང་མི་ཡིག་འབྲུ་འདི་ལོག་གཏང་།--ཚིག་ཡིག་ཁྱད་པར་ཅན་ཚུ་ ཡོད་པ་ཅིན་ string མང་ཤོས་ཅིག་ལུ་ ཁྱད་པར་ཅན་  ཟེར་ཨང་གྲངས་ཉུང་ཤོས་ཅིག་ཡོདཔ་ཨིན།--མིང་ཐོ་ནང་ལུ་ ཚིག་མ་འདྲཝ་ལེ་ཤ་ཡོདཔ་ཨིན་ ཚིག་གི་ཨང་གྲངས་མང་ཤོས་ཅིག་སླར་ལོག་འབད།--ཕྲ་རིང་གི་ཐོ་ཡིག་ཅིག་ལུ་ ངོས་ལེན་འབད་མི་ལས་འགན་ཅིག་འབྲི་དགོ།--  >>> findMax [\"name\",\"of\",\"string\"]\n--  \"string\"\n--  >>> findMax [\"name\",\"enam\",\"game\"]\n--  \"enam\"\n--  >>> findMax [\"aaaaaaa\",\"bb\",\"cc\"]\n--  \"aaaaaaa\"\nfindMax :: [String] -> String\nfindMax words =","canonical_solution":"import Data.List (nub, sort)\n\nfindMax :: [String] -> String\nfindMax words = \n    head . sort . map snd . filter (\\(n, _) -> n == maxUnique) $ wordUniquePairs\n  where\n    wordUniquePairs = [(length . nub $ word, word) | word <- words]\n    maxUnique = maximum $ map fst wordUniquePairs","tests":"\nmain :: IO ()\nmain = do\n  let candidate = findMax\n  if candidate [\"name\",\"of\",\"string\"] == \"string\" then pure () else error \"assertion failed\"\n  if candidate [\"name\",\"enam\",\"game\"] == \"enam\" then pure () else error \"assertion failed\"\n  if candidate [\"aaaaaaa\",\"bb\",\"cc\"] == \"aaaaaaa\" then pure () else error \"assertion failed\"\n  if candidate [\"abc\",\"cba\"] == \"abc\" then pure () else error \"assertion failed\"\n  if candidate [\"play\",\"this\",\"game\",\"of\",\"footbott\"] == \"footbott\" then pure () else error \"assertion failed\"\n  if candidate [\"we\",\"are\",\"gonna\",\"rock\"] == \"gonna\" then pure () else error \"assertion failed\"\n  if candidate [\"we\",\"are\",\"a\",\"mad\",\"nation\"] == \"nation\" then pure () else error \"assertion failed\"\n  if candidate [\"this\",\"is\",\"a\",\"prrk\"] == \"this\" then pure () else error \"assertion failed\"\n  if candidate [\"b\"] == \"b\" then pure () else error \"assertion failed\"\n  if candidate [\"play\",\"play\",\"play\"] == \"play\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_159","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་:--གལ་སྲིད་ ཀ་ར་ཏཱན་ལངམ་མེད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཀ་ར་ཏཱན་ལངམ་ཚུ་ཟ་རུང་ ལྟོཝ་བཀྱེས་སྡོད་འོང་།--ཟ་ཚར་བའི་ཤུལ་ལུ་ ལྷག་ལུས་པའི་ གུ་རུའི་གྱངས་ཁ་འདི་ཨིན།--ཁྱོད་ཀྱིས་ [ཟ་ཚར་བའི་ཧེ་མར་མར་མར་གུག་ཤད་ཀྱི་གྱངས་ཁ་] ཟེར་མི་ཐོ་ཡིག་ཅིག་ལོག་གཏང་དགོ།--ད་ཁྱོད་ཀྱིས་ ཉིན་བསྟར་གྱི་བཞེས་སྒོ་ཚུ་ ཟ་ནིའི་དོན་ལུ་ གུ་རུའི་རིགས་ཚུ་ ལྷག་ནི་དེ་ ཁག་ཆེཝ་ཨིན།--ཁྱོད་ཀྱིས་ལྟོ་མི་ཟ་བའི་བེ་ཆི་འདི་ཨིན་ ཁྱོད་ཀྱིས་མར་གུག་ཅུང་དག་པ་ཅིག་ཟཝ་ཨིན།--  >>> eat 5 6 10\n--  [11,4]\n--  >>> eat 4 8 9\n--  [12,1]\n--  >>> eat 1 10 10\n--  [11,0]\n--  >>> eat 2 11 5\n--  [7,0]\n--  Variables:\n--  @number : integer\n--  the number of carrots that you have eaten.\n--  @need : integer\n--  the number of carrots that you need to eat.\n--  @remaining : integer\n--  the number of remaining carrots thet exist in stock\n--  Constrain:\n--  * 0 <= number <= 1000\n--  * 0 <= need <= 1000\n--  * 0 <= remaining <= 1000\n--  Have fun :)\neat :: Int -> Int -> Int -> [Int]\neat number need remaining =","canonical_solution":"eat :: Int -> Int -> Int -> [Int]\neat number need remaining\n  | remaining >= need = [number + need, remaining - need]\n  | otherwise = [number + remaining, 0]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = eat\n  if candidate 5 6 10 == [11,4] then pure () else error \"assertion failed\"\n  if candidate 4 8 9 == [12,1] then pure () else error \"assertion failed\"\n  if candidate 1 10 10 == [11,0] then pure () else error \"assertion failed\"\n  if candidate 2 11 5 == [7,0] then pure () else error \"assertion failed\"\n  if candidate 4 5 7 == [9,2] then pure () else error \"assertion failed\"\n  if candidate 4 5 1 == [5,0] then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_160","nl":"dzo_Tibt","pl":"hs","prompt":"--ལས་འགན་ཐོ་ཡིག་ནང་ལུ་ ལས་འགན་ཉུང་ཤོས་ཅིག་དང་ ལས་འགན་ཐོ་ཡིག་ནང་ལུ་ ལས་འགན་ཉུང་ཤོས་གཉིས་ཡོདཔ་ཨིན།--ཨོ་པེ་རེན་ཌི་འདི་ ནེ་གེ་ཊི་བཱལ་མེན་པའི་ཨང་གྲངས་ཚུའི་ཐོ་ཡིག་ཨིན།--ལས་འགན་ཐོ་ཡིག་གི་རིང་ཚད་འདི་ ལས་འགན་ཐོ་ཡིག་གི་རིང་ཚད་དང་མཉམ་པ་ཨིན།--དྲན་གསོ།--=> གྲུབ་འབྲས་ = ༩ --གྲུབ་འབྲས་ = ༢ + ༣ * ༤ - ༥--list = [༢,༣,༤,༥] ཨིན།--ལས་གཡོགཔ་གིས་ ['+', '*', '-'] --དཔེ་འབད་བ་ཅིན་:--ཨེགསི་ཨོཕ་ནི་ཊེཊི་ (**) ཨིན།--ས་ཐོག་གི་ཆ་ཤས་ (_) --མང་བ་བཟོ་ནི་ (*) ཨིན།--མར་ཕབ་ ( - ) --ཁ་སྐོང་ (+) ཨིན།--གཞི་རྟེན་ཨེལ་ཇི་བཱར་གི་ལཱ་ཚུ་:--expression དང་ expression གི་མཐའ་དཔྱད་ལོག་གཏང་།--ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་ཡིག་འདི་ ཨང་གྲངས་གཉིས་པ་ཨིན་ ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་ཡིག་འདི་ཨེལ་ཇི་བཱརཀ་བཟོ་ནིའི་དོན་ལུ་ ལག་ལེན་འཐབ་ཨིན།--ཌའི་ལོག་གི་ཐོ་ཡིག་འདི་ནང་ལུ་ གཞི་རྟེན་ཨེལ་ཇི་བཱར་གི་ལཱ་ཚུ་ཡོདཔ་ཨིན།doAlgebra :: [String] -> [Int] -> Int\ndoAlgebra operator operand =","canonical_solution":"doAlgebra :: [String] -> [Int] -> Int\ndoAlgebra operator operand = evaluate operand operator\n  where\n    evaluate [x] [] = x\n    evaluate (x:y:ys) (op:ops) = evaluate (result:ys) ops\n      where\n        result = applyOperation op x y\n\n    applyOperation \"+\" a b = a + b\n    applyOperation \"-\" a b = a - b\n    applyOperation \"*\" a b = a * b\n    applyOperation \"\/\/\" a b = a `div` b\n    applyOperation \"**\" a b = a ^ b\n    applyOperation _ _ _ = error \"Unsupported operation\"","tests":"\nmain :: IO ()\nmain = do\n  let candidate = doAlgebra\n  if candidate [\"**\",\"*\",\"+\"] [2,3,4,5] == 37 then pure () else error \"assertion failed\"\n  if candidate [\"+\",\"*\",\"-\"] [2,3,4,5] == 9 then pure () else error \"assertion failed\"\n  if candidate [\"\/\/\",\"*\"] [7,3,4] == 8 then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_161","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་སྟོན་ --ལས་འགན་འདི་གིས་ གྲུབ་འབྲས་ཀྱི་ཐིག་ཁྲམ་སླར་ལོག་འབདཝ་ཨིན།--stringནང་ལུ་ཡིག་འབྲུ་མེད་པ་ཅིན་ stringའདི་ཁ་བསྒྱུར་འབད།--དེ་མེན་པ་ཅིན་ འདི་བཟུམ་སྦེ་རང་བཞག་དགོ--s[i]འདི་ཡིག་འབྲུ་ཨིན་པ་ཅིན་ འོག་ལས་མཐོ་ ཡང་ན་ ཕྱོགས་གཞན་ཁ་ལུ་ འབྲི་དགོ།--ཁྱོད་ཀྱིས་ string s ཅིག་ཐོབ་ནུག--  >>> solve \"1234\"\n--  \"4321\"\n--  >>> solve \"ab\"\n--  \"AB\"\n--  >>> solve \"#a@C\"\n--  \"#A@c\"\nsolve :: String -> String\nsolve s =","canonical_solution":"solve :: String -> String\nsolve s\n  | any (`elem` ['a'..'z'] ++ ['A'..'Z']) s = map toggleCase s\n  | otherwise = reverse s\n  where\n    toggleCase c\n      | c `elem` ['a'..'z'] = toEnum (fromEnum c - 32) :: Char\n      | c `elem` ['A'..'Z'] = toEnum (fromEnum c + 32) :: Char\n      | otherwise = c","tests":"\nmain :: IO ()\nmain = do\n  let candidate = solve\n  if candidate \"AsDf\" == \"aSdF\" then pure () else error \"assertion failed\"\n  if candidate \"1234\" == \"4321\" then pure () else error \"assertion failed\"\n  if candidate \"ab\" == \"AB\" then pure () else error \"assertion failed\"\n  if candidate \"#a@C\" == \"#A@c\" then pure () else error \"assertion failed\"\n  if candidate \"#AsdfW^45\" == \"#aSDFw^45\" then pure () else error \"assertion failed\"\n  if candidate \"#6@2\" == \"2@6#\" then pure () else error \"assertion failed\"\n  if candidate \"#$a^D\" == \"#$A^d\" then pure () else error \"assertion failed\"\n  if candidate \"#ccc\" == \"#CCC\" then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_162","nl":"dzo_Tibt","pl":"hs","prompt":"--'text'འདི་ སྟོང་པ་སྦེ་ཡོད་པ་ཅིན་ Nothing སླར་ལོག་འབདཝ་ཨིན།--སྐར་ཆ་ 'text' ཅིག་བྱིན་པ་ཅིན་ md5 ཧེཤི་ སྐར་ཆ་འདྲ་མཉམ་ལོག་གཏང་།--  >>> stringToMd5 \"Hello world\"\n--  Just (\"3e25960a79dbc69b674cd4ec67a72c62\")\nstringToMd5 :: String -> Maybe String\nstringToMd5 text =","canonical_solution":"import qualified Data.ByteString.Char8 as C\nimport qualified Data.Digest.Pure.MD5 as MD5\n\nstringToMd5 :: String -> Maybe String\nstringToMd5 text\n  | null text = Nothing\n  | otherwise = Just $ show $ MD5.md5 $ C.pack text","tests":"\nmain :: IO ()\nmain = do\n  let candidate = stringToMd5\n  if candidate \"Hello world\" == Just (\"3e25960a79dbc69b674cd4ec67a72c62\") then pure () else error \"assertion failed\"\n  if candidate \"\" == Just (Nothing) then pure () else error \"assertion failed\"\n  if candidate \"A B C\" == Just (\"0ef78513b0cb8cef12743f5aeb35f888\") then pure () else error \"assertion failed\"\n  if candidate \"password\" == Just (\"5f4dcc3b5aa765d61d8327deb882cf99\") then pure () else error \"assertion failed\"\n  pure ()"},{"task_id":"HumanEval_163","nl":"dzo_Tibt","pl":"hs","prompt":"--དཔེ་འབད་བ་ཅིན་: --b འདི་ཡར་སེང་གི་རིམ་པ་ལུ་ཨིན།--ཌའི་ལོག་ནང་ ཨང་གྲངས་ཆ་མཉམ་ a དང་ b གཉིས་བྱིན་ཏེ་ ཨང་གྲངས་ཆ་མཉམ་ a དང་ b གི་བར་ན་ཡོད་མི་འདི་སླར་ལོག་འབད།--  >>> generateIntegers 2 8\n--  [2,4,6,8]\n--  >>> generateIntegers 8 2\n--  [2,4,6,8]\n--  >>> generateIntegers 10 14\n--  []\ngenerateIntegers :: Int -> Int -> [Int]\ngenerateIntegers a b =","canonical_solution":"generateIntegers :: Int -> Int -> [Int]\ngenerateIntegers a b = filter even [min a b .. max a b]","tests":"\nmain :: IO ()\nmain = do\n  let candidate = generateIntegers\n  if candidate 2 10 == [2,4,6,8] then pure () else error \"assertion failed\"\n  if candidate 10 2 == [2,4,6,8] then pure () else error \"assertion failed\"\n  if candidate 132 2 == [2,4,6,8] then pure () else error \"assertion failed\"\n  if candidate 17 89 == [] then pure () else error \"assertion failed\"\n  pure ()"}]