task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,knc_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Lambawa suro listdəben, lamba indi gade gade kalkallo waljin. Misal: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,knc_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Shi donyi kǝla diwal adǝben, shi donyi suro kǝla awowa gade gade yen kara. Awo do ne dǝn kǝla awowa gade gade yen kara dǝga yaktǝ dǝga kuru kulashi awowa gade gade dǝga. Karapka gade dǝga kalkal (kǝla awowa gade gade dǝga kalkal ro katti) kuru sandi donyi suro kǝlanza yen kara dǝga kalkal ba.""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,knc_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Lamba kәlabe kәlabe mbeji, raktә yaktin suro lambabe (nәm kura kurabe lamba ganawo) kuru decimals (nәm kurabe kәlanzә sambisoro ganawo 1).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,knc_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Nyiye kulashe ajiyabe-a kuru awowa bankbe-a kәlanzәbe-a fuwujin kuru balanza zero lan baditin. Cida nyiye shima asutu kәlanzәbe-a balanza zero lan cidi, kuru na adәn kәndobe True warratәgәna. Adәgәnyi maa, kәlanzәbe False warratәgәna. Misal: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,knc_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Lambawa kәla kәlabe dәn, kәla kәla nәm kәlabe dәga kәla nәm kәlabe dәga kәla kәla kәla kәnәngalan kәla kәnәngalan kәla nәm kәla kәnәngalan kәla nәm kәlabe dәga kәla nәm kәlabe dәga kәla nәm kәlabe dәga kәla nәm kәlabe dәga kәla nәm kәlabe dәga kәla nәm kәlabe dәga kәla nәm kәlabe dәga kәla nәm kәlabe dәga kәla nәm kәlabe dәga kәla nәm kәlabe dәga kәla nәm kәlabe dәga kәla nәm kәlabe dәlan kәla nәm kәlabe dәlabe dәlan kәla nәm kәlabe dәlabe dәla nәm kәlabe dәlabe dәlabe dәla nәlabe dәla nәm kәlabe dәlabe dәlabe dәla nәla nәlabe dәlabe dәla nәlabe dәlabe dәla nәla nәlabe dәlabe dәla nәlabe dәlabe dәla dәla dәla dәla dәla dәla dәn kәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla dәla d""""""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,knc_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""""Kǝla lamba """"delimeter"""" kate awowa indi fuwuye suro list inputbedǝyen `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,knc_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (() (()) has maximum two levels of nesting while ((())) has three. >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,knc_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filter a input list of strings only for ones that contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,knc_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Lamba hayyabe ladən, sum kuru product integersbe sammabe suro listben mbeji. sum kalkalbe dəga 0 kuru product kalkalbe dəga 1 lan tilo. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24)""""""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,knc_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Lamba hayyabe ladən, lamba hangalbe kəndobedəga fulejin. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,knc_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Kalkallo palindrome kuradəga fandowo shidoni suro kərtəben baditin. Algorithmbe raayinzədə kəske: - Kalkallo postfix dəwo suro kərtəben baditin dəwo palindrome wo. - Kalkallo stringbe dəwo kawu palindromic suffix ro waljin dəga datəgə. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('catac') ' >>> make_palindrome ((('catac') ' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Jarab donyi string dǝ palindrome ro waljin """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,knc_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Input sandima string indi a kuru b sandidoni 1s kuru 0s lan tuwandinma. Binary XOR dəga diwal input adəben diwal result dəga waltə string lan gowotə.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,knc_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""List of strings lan, fal kuruwu dǝga waltǝ. Fal buro salakǝ dǝga waltǝ sa stringwa kadaro nǝmngǝwu fal dǝga mbeji maa. Fal ba dǝga waltǝ sa list dǝga ba yaye. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,knc_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Kəndo kambo kambo lamba indibe a kuru bbe >>> kambo kambo kəndobe-a ((3, 5) 1 >>> kambo kambo kəndobe-a ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,knc_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""List do sammaso kulashinzəga waltəyinma suro input stringbe kuruwu lan səta kuruwu ro ro >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,knc_Latn,python,"

def string_sequence(n: int) -> str:
    """"""String do suronzən lamba na-a kalkalzəna 0 lan badijin səkə n'a sammason. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,knc_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""String fal təwandəlan, alamaram gadewa ngəwu (kasuwabe son yayi) suro shiben mbeji ro asutin >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,knc_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Input to this function is a string representing musical notes in a special ASCII format. Your is to parse string list of integers corresponding to many beats does. Here is a legend: 'o' note, lasts four beats 'o' dakara - half note, lasts two beats 'o' dakara - quater note, lasts one beat >>> parse_music. 'o o . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . o da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da . da""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,knc_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Kǝla loktuwa kadaro suro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝla laan kuntenro kǝ laan kuntenro kǝ laan kuntenro kǝ laan kuntenro kǝ laan kuntenro kǝ laan kuntenro kǝ laan kuntenro kǝ laan kuntenro.""""""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,knc_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input dǝ space-delimited string of numerals from 'zero' to 'nine'. suwa valid dǝ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. string dǝga return dǝga lamba dǝga sort tǝna dǝga gana dǝga kura dǝga >>> sort_numbers (('three one five') 'one three five' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,knc_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Lambawa tədəna (nəm kuruwu sandi indi) sandi indi sandima kambo soro gowotə kuru sandiya kəlanzabe lan gowotə (nəmkura gana, nəmkura kura). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,knc_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Lambawa (ladən awo indi), lamba linearbe faltəga faidatə, lamba ganabedə 0 ro waljin kuru kurawudə 1 ro waljin >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,knc_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,knc_Latn,python,"

def strlen(string: str) -> int:
    """"""Kǝndodǝro waltǝyin """"strlen"""" 0 """"strlen"""" 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,knc_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Lamba n təna, lamba kura n tilowata, gana n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,knc_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Lamba prime factorsbe lamba hayyabe dəga waltəyin kuru sandiya gana-ganaro yaktin. Lambawa sammabe sandiya loktuwa nguwuwa kəltən faidatin. Lamba shiga fulujin dəga tilo waljin faidatin >>> factorization (zawal fafallo) [2, 2, 2] >>> factorization (zawal fafallo) [25], [5, 5], >>> factorization (zawal fafallo) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,knc_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Lamba samma suro listbe ladǝn, awowa fal-fal suro listbe ladǝn təwandǝnama samma asutin.""""""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,knc_Latn,python,"

def flip_case(string: str) -> str:
    """"""Kǝla string laa gozǝnadǝn, alama gana-a kura-a gana-aro faltǝ. >>> flip_case ((('Hello') 'hELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,knc_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate list of strings into a single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,knc_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filter list inputbe suro Stringbe dǝye sandiya badijin prefixlan. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,knc_Latn,python,"

def get_positive(l: list):
    """"""Lambawa ngalwotəgəna suro listben. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,knc_Latn,python,"

def is_prime(n):
    """"""False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false) = False (false)""""""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,knc_Latn,python,"import math


def poly(xs: list, x: float):
    """"""find_zero dǝ shima lamba polynomialbewo. find_zero dǝ shima lamba polynomialbewo. find_zero dǝ shima lamba 0bewo, hatta sandiya kadawo. find_zero dǝ shima lamba xbewo kuru lamba evenbewo kuru lamba kura shiro non-zero coefficient gultinma dǝ shima sulhuwo. >>> round ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Polynomial dəga tamanzəga na xs lan. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,knc_Latn,python,"

def sort_third(l: list):
    """"""Kәndo adәbe list l'a gojin kuru list l'a suwudin alama l'a dǝga faljin indices do yakkǝlan yaktin ba lan, kuru darajawanzǝ indices do yakkǝlan yaktin ma dǝga faljin darajawa indices lbe dǝga faljin, amma yaktin. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,knc_Latn,python,"

def unique(l: list):
    """"""Awowa gade-gade suro listbe so dǝga waltǝyin >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,knc_Latn,python,"

def max_element(l: list):
    """"""Kǝla awowa suro listbe dǝn nguwu ro waltǝ. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,knc_Latn,python,"

def fizz_buzz(n: int):
    """"""Lamba 7be loktu lamba 11 au 13 yaktin suro integers gana nben təbandin dəga waltəyin.""""""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,knc_Latn,python,"

def sort_even(l: list):
    """"""Kәndo adәbe list l'a gojin kuru list l'a suwudin alama l'a dǝga faljin suro indices ganama dǝn, kuru nәm tamanzә suro indices evenbe dǝga faljin daraja indices evenbe lbe dǝga, amma sortayin. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,knc_Latn,python,"

def encode_cyclic(s: str):
    """"""Takke alama inputbe suro encodebeladən.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""return encoded string by cycling groups of three characters.  awuwa suro kərtəbe lan yakkata.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,knc_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib də lamba n-th Fibonaccibe suwudin kuru shima lamba primeye. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,knc_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zerobe lamba kalkallo faidatin. Faltə Truebe warratəlan alamaram yakkə suro listben mbezai kuru false. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,knc_Latn,python,"

def car_race_collision(n: int):
    """"""Tǝmangǝyin kǝla dǝwo zauro kalkal, layi ba. mota n dǝ cidi lan kǝntilon ro lejin; samǝnlan, mota gade gade n dǝ cidi lan kǝntilon ro lejin. mota indi dǝ baditin na gade gade lan. mota samma soye sawal fal lan lejin. mota indi dǝ waltǝ kǝljin sa mota donyi cidi lan kǝntilon ro lejin dǝ mota donyi cidi lan kǝntilon ro lejin dǝro waltǝ kǝljin. sonyayi, mota dǝ zauro duno'a kuru duno'a; adǝye sǝkǝ, sandiye kǝnza lan kǝlzain alama sandiye waltǝ kǝlzǝnyi yeyi. cida adǝye lamba nǝmngǝla adǝye suwudin.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,knc_Latn,python,"

def incr_list(l: list):
    """"""Kǝla awowabe suro kǝla 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124])""""""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,knc_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zerobe lamba kalkallo faidatin. Faltə Truebe warratəlan, sandi indi gade suro listben kasatsə sumdəga kuri ro waljiya, kuru False gadegade. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,knc_Latn,python,"

def change_base(x: int, base: int):
    """"""Lamba lambabe lamba xbe fafaltəga fafaltəga. bayan kəndobe ngawo faltəben. lamba lamba lambabe 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,knc_Latn,python,"

def triangle_area(a, h):
    """"""Nəm kuruwu launube-a nəmkura nəmkura kərtəbe-a tədəna. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,knc_Latn,python,"

def fib4(n: int):
    """"""Fib4 lambabe də Fibbonaccibe samənzəna: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Lambawa lambabe fib4be kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndowa kəndo""""""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,knc_Latn,python,"

def median(l: list):
    """"""Median awowa suro list l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,knc_Latn,python,"

def is_palindrome(text: str):
    """"""Check if given string is a palindrome >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,knc_Latn,python,"

def modp(n: int, p: int):
    """"""Kǝrma 2^n modulo p (lambarro notǝ). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,knc_Latn,python,"

def encode_shift(s: str):
    """"""Takes as input string encoded with encode_shift function. Futu kəndobe encodebe dəga waltəyin.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""return encoded string by shifting every character by 5 in the alphabet. """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,knc_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels də shima kəndowo nzunduwo gojinmawo kuru nzunduwo ba son waltəyin. >>> remove_vowels ((') ' ' >>> remove_vowels (('abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,knc_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,knc_Latn,python,"

def add(x: int, y: int):
    """"""Lamba indi x kuru y'a kəltəyin, """""""" 2 kəltəyin, """""""" 3 kəltəyin, """""""" 5 kəltəyin, """""""" 5 kəltəyin, """""""" 7 kəltəyin, """""""" 12 kəltəyin.""""""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,knc_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Check if two words have the same characters. >>> same_chars('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars('abcd', 'dddddddabc') True >>> same_chars('dddddddabc', 'abcd') True >>> same_chars('eabcd', 'dddddddabc') False >>> same_chars('abcd', 'dddddddabce') False >>> same_chars'(abcdzzzz', 'dddzzzzzzdddabc') False """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,knc_Latn,python,"

def fib(n: int):
    """"""Lamba Fibonaccibe n-th dǝga waltǝ. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,knc_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets də string ""<"" a "">"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,knc_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,knc_Latn,python,"

def common(l1: list, l2: list):
    """"""Awowa gade gade sandiya samənzəna sowa waltə yikowo. >>> samənzəna [1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> samənzəna [5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,knc_Latn,python,"

def largest_prime_factor(n: int):
    """"""Factor kura kura n. Takkal n > 1 kuru shima prime gənyi. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,knc_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n shima cida do lamba 1 səta n ro somjinmawo. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,knc_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets də string of ""("" and "")"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() "") True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,knc_Latn,python,"

def derivative(xs: list):
    """"""xs də coefficients polynomialbe wakiljin. xs[0] + xs[1] * x + xs[2] * x^2 + .... return derivative of this polynomial in the same form. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,knc_Latn,python,"

def fibfib(n: int):
    """"""FibFib lambabe də Fibbonaccibe samənzəna shiye fasarjin futu adəlan: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Lambawa kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe kəndobe""""""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,knc_Latn,python,"
FIX = """"""Su dowo kalma wakiljin ma ro faidatin ma, kuru lamba dowo suro kalma dǝn mbeji ma. Su dowo suro kalma dǝn mbeji ma dǝ sandima 'a', 'e', 'i', 'o', 'u. Adǝn, 'y' dǝ shima su dowo suro kalma dǝn mbeji ma, amma loktu dǝwo suro kalma dǝben mbeji ma dǝ. Misal: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Kaji jarawa ngǝwuso gǝrjin.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,knc_Latn,python,"
def circular_shift(x, shift):
    """"""Lambawa integersbe x-a, digitsbe cidi ro cidi kuru jaza nzərabe suro stringben. Shift > lamba lambabe, return digits reverse. >>> circular_shift ((12, 1) ""21"" >>> circular_shift ((12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,knc_Latn,python,"
def digitSum(s):
    """"""Cidabe cidabe shidonyi suro nzundube ro kərtəbe gojin kuru sumdo awowa saminbe saminmabe ASCIIbe cin misallo: digitSum ((("""") => 0 digitSum ((""abAB"") => 131 digitSum ((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum ((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,knc_Latn,python,"
def fruit_distribution(s,n):
    """"""Suro cida adǝben, nyiye lamba do lamba apples-a oranges-a ye wakiljin ma suro kәske kәskabe dәn, kәske adәye suronzan apples-a, oranges-a, kuru mango-a mbeji. lamba do lamba sammasobe kәskabe dәye wakiljin dә kuru lamba wofila do lamba sammaso kәskabe dәye wakiljin dә, lamba kәskabe kәska mangobe dәye waltә. misallo: fruit_distribution""5(apples and 6 oranges"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 apples and 1 oranges"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,knc_Latn,python,"
def pluck(arr):
    """"""""Array do shiye wakiljin shi branch of a tree do shiye integer ba-negative nodes nzǝ dǝ, cida dǝye shima nodes fal dǝga gozǝ kuru waltǝ gozǝ. Noduwu gozǝnadǝ shima node do taman gana evenbe dǝwo. Adai noduwu kada do taman gana evenbe fal dǝga fǝlezǝna dǝ shima node do index gana be dǝwo. Noduwu gozǝnadǝ suro listben waltǝ gozǝ, [smallest_value, its index] , Adai taman gana evenbe ba au array dǝ banna, return []. Misal 1: Input: [4,2,3] Output: [2, 1] Bayanna: 2 dǝ taman gana evenbe dǝwo, kuru 2 dǝ index gana be dǝwo. Misal 2: Input: [1,2,3] Output: [2, 1] Bayanna: 2 dǝ taman gana evenbe dǝwo, kuru 2 dǝ index gana evenbe dǝwo. Misal 3: Input: [] Output: [4:] Input: [5, 3, 4, 2] Output: 1 [0, 0] Bayanna: 1 dǝwo, index gana gana gana be dǝwo, amma taman gana be dǝwo. * Misal: 1st = 0 * * * Misal: 1st = 0 * 2nd, amma taman gana gana gana be dǝ ganawo, kuru index gana be dǝ ganawo, kuru nǝm gana gana gana ganabe mbeji. * * Misal: * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,knc_Latn,python,"
def search(lst):
    '''Nyiye kulashin lamba kalkalbe kəlanzəbe suwudəna. Lamba kambo kura kura kura kurinzədəga waltəyin, kuru nəmngəwu nəmngəwu kəlanzəbe kurinzədəga au tilo. Lamba kalkalbe dəga lamba lamba suro kulashidəben təbandinma. Lamba jili adə ba, waltəyin -1. Misal: search (([4, 1, 2, 2, 3, 1]) == 2 search ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search ([5, 5, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,knc_Latn,python,"
def strange_sort_list(lst):
    '''Lambawa kalkalbe təwandənadən, list dəga diwal ganaro waltəyin. Lambawa kalkallo yaktəbedə, shima sa nyiye taman ganaro baditin, daji lambawa kalkallo gadesodəga, daji gananzəga. Misal: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,knc_Latn,python,"
def triangle_area(a, b, c):
    '''Nəmkəra yakkəbe nəmkəra yakkəbe dəga tədəna. Nəmkəra yakkəbedəga na 2 decimal ro kalakciwo sa sandi yakkədə yakkə yakkəro kəljin. Nəmkəra yakkəbedəga -1 waltəyin sa nəmkəra yakkəbe indidə nəmkəra yakkəbedəga kozəna dən. Misal: triangle_area(3, 4, 5) == 6.00 triangle_area(1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,knc_Latn,python,"
def will_it_fly(q,w):
    '''Cida do True waratəyin ma awo q ye zәkcin maa, False gade ro. Awo q ye zәkcin maa, shi balanced (list palindromic) kuru sum awowa nzәye dә gana au tilo nәm kura kura kura dәn w. Misal: will_it_fly (([1, 2], 5) â -> False # 1+2 gana nәm kura kura dәn, amma shi balanced gәnyi. will_it_fly (([3, 2, 3], 1) â -> False # shi balanced, amma 3+2+3 kura nәm kura dәn. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 gana nәm kura dәn, kuru shi balanced gәnyi. will_it_fly ((([3], â 5) -> True # 3 gana nәm kura dәn, kuru shi balanced gәnyi.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,knc_Latn,python,"
def smallest_change(arr):
    """"""Array arr integersbe tədəna, lamba gananzəga faltəbe məradətəna lamba shiro palindromic gultin dəga faljin. Array palindromicbedə shima array shiro waltə fuwunnaro waltə fuwunnaro waltə kəlanzəga.""""""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,knc_Latn,python,"
def total_match(lst1, lst2):
    '''Lambawa list indi gojin kuru list do lamba lambabe suro listbe samma lan ganawo dəga waltəyin. Lambawa indi dǝ lamba fal mbeji maa, list buro salakbedǝ waltǝyin. Misalnza total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,knc_Latn,python,"
def is_multiply_prime(a):
    """"""Lambawa kura 3 ye kawattəlan lamba jireye cin. Misal: is_multiply_prime ((30) == True 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,knc_Latn,python,"
def is_simple_power(x, n):
    """"""Cida nyiye shima kəndowo waltəm jirega suwudəyin lamba x shima daraja kəske nbe kuru jire gənyi suro halla gadeyen. x shima daraja kəske nbe shi n**int=x Misallo: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,knc_Latn,python,"
def iscube(a):
    '''Futu lamba kalkalbe a kuru waratajin True a. Note: injin dǝ sambisoro kalkal. Misal: iscube (a) ==> True (b) ==> False (c) ==-1) ==> True (d) ==> True (e) ==> True (f) ==> True (d) ==> True (e) ==> False (f) ==> False (d) ==> False (f) ==> False (d) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f) ==> False (f)'''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,knc_Latn,python,"
def hex_key(num):
    """"""Nyiye cida ruwobe shilan lamba hexadecimalbe sha nzəra kuru lamba hexadecimalbe shilan lamba gana kəlanzəbe isənama ( lamba gana kəlanzəbe, au lamba prime, shima lamba alagəna kurawo 1 kuru shi donyi aruwu lamba gana indibe gənyi). Lamba hexadecimalbedə sandima 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Lamba Prime sandima 2, 3, 5, 7, 11, 13, 17,... Nyiye lamba adəbe asutin: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13). Note: Nyiye raktə hangal gənatəga sambisoro kalkal au kolzənyi, kuru alama A,B,C,D,E,F sambisoro kurawo. Misal: ""num"" = AB, outputdə num = 1. ""num"" = 1077E, outputdə num = 2. ""num"" = 331ABEDA, num = 4. ""num"" = ""num"" = 4. ""BCD"" = 6.067128945 ""A"" = 6. ""num"" = ""2020""""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,knc_Latn,python,"
def decimal_to_binary(decimal):
    """"""Nyiye lamba decimalben tədin kuru cida nyiye shima shilan fafaltin binarybe ro. Cida dəbe waltə stringbe suwudin, alama falloso lamba binarybe wakiljin. Lamba suro stringbedə shima '0' au '1'. Lamba gade 'db' badiyaram kuru datə stringbedən mbeji. Lamba gade də na formatben banajin. Misal: decimal_to_binary ((15) # waltə ""db1111db"" decimal_to_binary32) # waltə ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,knc_Latn,python,"
def is_happy(s):
    """"""Nyiye kәla kәla s. Cida nyiye kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kәla kә kәla kәla kәla kәla kәla kә kәla kәla kәla kә kәla kә kәla kә kәla kәla kә kә kәla kәla kә kәla kә kә kәla kә kә kәla kә kәla kә kә kә kә kәla kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә kә k""""""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,knc_Latn,python,"
def numerical_letter_grade(grades):
    """"""Loktu shima dareye semesterbe wo kuru malǝm dǝye fuwurawa ro darajawa cin. Malǝm dǝye algorithm nzǝ kǝlanzǝbe sǝdin. Kawu fal dǝ shima, shiye kaida do sha daraja cin lan faidatin dǝ asuzǝna. Shiye kulashi GPA ye nya nya fuwurawa laa ro suwudǝna kuru nyiye cida do kulashi darajawa liitabe suwudǝna dǝ ruwojin: GPA. Liita daraja 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,knc_Latn,python,"
def prime_length(string):
    """"""Cida do lamba kalkallo gojin kuru True ro waltəyin sa nəmkuranzə lamba kura wo au False ro waltəyin misallo prime_length (a) == True prime_length (b) == True prime_length (a) == True prime_length (b) == True prime_length (a) == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,knc_Latn,python,"
def starts_one_ends(n):
    """"""Lamba hayyabe n təwandənadən, lamba lamba lamba lamba lamba lambabe n-digitbe dəga badijin au samənzə 1.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,knc_Latn,python,"
def solve(N):
    """"""Lamba kәlabe N, sumo aruwuwabe binaryben. Misal N = 1000, sumo aruwuwabedə 1 daji outputdə ""1"" waljin. N = 150 lan, sumo aruwuwabedə 6 daji outputdə ""110"" waljin. N = 147 lan, sumo aruwuwabedə 12 daji outputdə ""1100"" waljin. Awo faltin: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. Output: binary number string """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,knc_Latn,python,"
def add(lst):
    """"""Lamba hayyabe ba-a fulujinna lst. awowa evenbe sandi indices ganama-a kəltə.. Misal: add (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,knc_Latn,python,"
def anti_shuffle(s):
    """"""Futu shila do kalkallo gojin kuru waltə awoa kalkallo gojin ma. Kalma kalkallo gojin, shima kalmadəwo kalmaa samma (na bannabe gadejin) kalmaa bəlindəro faltin na do kalmaa sammabe kalmadəro waltə kəltəna ma. Note: Kalma-a na bannabe-a kalmadəro waltə gojin misallo: anti_shuffle ((('Hi') return 'Hi' anti_shuffle (('hello') return 'ehllo' anti_shuffle (('Hello World!!!') return 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,knc_Latn,python,"
def get_row(lst, x):
    """"""Nyiye bayan 2 dimensionalbe suwudəna, futu listuwa kəllatainben, shi donyi matrixbe samənzəna, sonyayi, futu matrixbe gənyi, layi fallan lamba gade suron mbeji. Lst, kuru integer x, lamba integerbe x suro litayedə, kuru return list of tuples, [(x1, y1), (x2, y2) ...] jili sandi tuple də coordinate - (row, columns), badijin 0. Sort coordinates badiyaramlan rowlan suro fuwutəbeladən. Kuru, sort coordinates of the row by columns in descending order. Misal: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), 0 (2, 5), (2, 0) get_(], 1) [] == [row_[[1, 2, 3, 2], == [2, 2] ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,knc_Latn,python,"
def sort_array(array):
    """"""Futu lamba kalkal gənyibe tədəna, waltə nəmkambobe bayanzəna ngawo yaktəben, daji nyiye lamba tədənabe yaktin suro futə fuwuyen sa sumobedə (nəmkambo indexbe burobedə, nəmkambo indexbe darebe) ganama, au yaktin suro futə fuwuyen sa sumobedə (nəmkambo indexbe burobedə, nəmkambo indexbe darebe) tilo. Note: * don't change the given array. Examples: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,knc_Latn,python,"
def encrypt(s):
    """"""Kǝla nzundu encryptbe duwo nzundu asutin kuru nzundu encryptbe suwudin kuru shiya alphabetbe dǝga falzayin. Alphabet dǝga falzayin futu litayedəga falzayin na indi ro. Misallo: encrypt (('hi') return 'lm' encrypt (('asdfghjkl') return 'ewhjklnop' encrypt (('gf') return 'kj' encrypt (('et') return 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,knc_Latn,python,"
def next_smallest(lst):
    """"""Nyiye kulashin integersbe cin. Cida next_smallestbe ruwojin awowa sənana kən indimi suro kulashidəben. None ruwojin sa awowa sənana adə ba ma'a. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,knc_Latn,python,"
def is_bored(S):
    """"""Nyiye kalmaa kada'a cin, kuru cidan nyedə shima lamba boredomsbe dəga isayin. Boredom shima jimla do kalima ""I"" lan baditinma wo. Jimla sodə '.', '?' au '! ' lan sha kalangain. Misallo: >>> is_bored(""Hello world"") 0 >>> is_bored(""The sky is blue. The sun is shining. I love this weather"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,knc_Latn,python,"
def any_int(x, y, z):
    '''Lambawa 3 gojin. Lamba fal dǝ samma lamba indi gade dǝga yaktin, kuru lamba samma integer. Lambawa gade so dǝga falzayin. Misal any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,knc_Latn,python,"
def encode(message):
    """"""Futu hawar laa gojin, kuru futu hawar dǝga bayantǝyin ma, futu hawar dǝga faljin, kuru futu hawar dǝga awowa kalkallo faidatin ma, hawar dǝga awowa kalkallo fuwuzǝna ma dǝga na 2 lan faltin. Misal: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,knc_Latn,python,"

def skjkasdkd(lst):
    """"""Nyiye kulashin integersbe cin. Nyiye taman kura kura kura dəga fando kuru sumo aruwuwa nzərabe dəga waltə. Misal: For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] output də 10 For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] output də 25 For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] output də 13 For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] output də 11 For lst = [0,81,12,3,21,1] output də 3 For lst = [0,1,8,2,1,7] output də 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,knc_Latn,python,"
def check_dict_case(dict):
    """"""Kalma shiro dictionary gultin ma, return True if all keys are strings in lower case or all keys are strings in upper case, otherwise return False. Cida dǝ return False dǝ dictionary dǝ banna. Misal: check_dict_case{""a"":""apple"", ""b"":""banana""}) should return True. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False. check_dict_case{""NC"":""STATE"", ""Z"":""IP""}) should return True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,knc_Latn,python,"
def count_up_to(n):
    """"""Kəndo doni lamba kəmburam gənyibe gojin kuru lamba burobedəga waltəyin misallo: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17]""""""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,knc_Latn,python,"
def multiply(a, b):
    """"""Lamba indi gojin kuru awowa faidatəbe gojin. Tərfandə sambisoro kalkallo. Misal: kawattəgənadə 16 gojin, kawattəgənadə 19 gojin, kawattəgənadə 72 gojin, kawattəgənadə 2020 gojin, kawattəgənadə 0 gojin, kawattəgənadə 14 gojin, kawattəgənadə 15 gojin, kawattəgənadə 20 gojin.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,knc_Latn,python,"
def count_upper(s):
    """"""String s təwandənadən, lamba kambo kura kura suro indicesbe tilobe surin. Misallo: count_upper (('aBCdEf') return 1 count_upper (('abcdefg') return 0 count_upper (('dBBE') return 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,knc_Latn,python,"
def closest_integer(value):
    '''Lamba la'a wakiljin kuru lamba karəngəye dəga waltəyin. Lamba dəwo lamba indiya tilo lan kara, kuru shiya kuriya sədin. Misal >>> nearest_integer ((""10"") 10 >>> nearest_integer ((""15.3"") 15 Note: Kuriya kuriya sədin ma'ananzədə lamba indiya tilo lan kara, shi doni waltəyin də shima kuriya kuriya sədinma. Misalro nearest_integer "" ((14.5"") dəga waltəyin 15 kuru nearest_integer "" ((-14.5"") dəga waltəyin -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,knc_Latn,python,"
def make_a_pile(n):
    """"""Lamba kәlabe n, nyiye kawulan karewa kadabe n tәdin. Lamba buro salakbedәn karewa n mbeji. Lambawa suro kawudo fuwunbedә shima: - lamba gananzәbe fuwun n gananzәbe wo. - lamba even fuwun n gananzәbe wo. Lambawa suro kawudo wosobe suro kulasheben yedei, na doni element index ibe wakiljin lamba karewa suro kawudobe (i+1). Misal: >>> make_a_pile (n) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,knc_Latn,python,"
def words_string(s):
    """"""Nyiye kalmaa kalmabe cinna, commas-a spaces-a lan yaktin. Cida nyiye kalmaa ro yaktə kuru kalmaa arraybe suwudin. Misallo: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,knc_Latn,python,"
def choose_num(x, y):
    """"""Lambawa adǝye lambawa ngalwobe x-a y-a gojin kuru lamba even integersbe kurakura suro lamba [x, y] suron mbeji. Lamba jili adǝ ba maa, daji shi cida dǝga -1 gojin. Misallo: choose_num(12, 15) = 14 choose_num(13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,knc_Latn,python,"
def rounded_avg(n, m):
    """"""Nyiye lamba n kuru m indi təwandəna, kuru cidan nyiye shima aruwu lamba n-a m-a (n-a m-a suron kunten) samənzəga kəltə. Jaza dəga kuriya ro kalaktə kuru binary ro kalaktə.""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,knc_Latn,python,"
def unique_digits(x):
    """"""Futu lamba kalkallobe x təwandənadə, lamba sammasobe suro jizəwuwa tilobe dəga waltəyin. Note: Futu ruwozanabedəga suro futə kərtəbe lan waltəyin. Misallo: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,knc_Latn,python,"
def by_length(arr):
    """"""""Lamba integersbe təwandənadən, integers 1 kuru 9 sammason kasatə, sandiro waltəyin, kuru lamba falloso su nzərabe lan faltin: fal"", ""indi"", ""three"", ""four"", ""five"", ""six"", ""seven"", ""eight"", ""nine"". Misallo: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sort arr -> [1, 1, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Eight"", ""five"", ""three"", ""two"", ""two"", ""one"", ""one""] Lamba dəwo, waltəyin: arr = [] return [] Lamba dəwo lamba ganama mbeji: arr = [1, -1 , 55] -> sort -> arr-1, [1, 55] -> reverse arr = [55, return - 1] - 'one' """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,knc_Latn,python,"
def f(n):
    """"""Faltə f dəga faidatə n shima ngalwowo, kuru waltə list n nəmkurabe, alamanna taman indexbe i də shima factorial ibewo sa i dəga fallo au sum lambabewo 1 səta i ro waljin. i badijin 1. factorial ibe də shima lambabe kawattəbe 1 səta i ro (1 * 2 * ... * i). Misal: f ((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,knc_Latn,python,"
def even_odd_palindrome(n):
    """"""Lamba kәlabe n, kәla lamar kәlabe suro nalan, kәla lamar kәlabe suro nalan, kәla lamar kәlabe suro nalan. Misal1: Shiwal: 3 Futu: (1, 2) Bayan: Lamba kәlabe suro nalan 1, 2, 3. falnza even, kuru indi sandiro odd. Misal2: Shiwal: 12 Futu: (4, 6) Bayan: Lamba kәlabe suro nalan 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. diyau sandiro even, kuru 6 sandiro odd. Note: 1. 1 <= n <= 10^3 2. lamar kәlabe suro nalan shiwal kәlabe suro nalan.""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,knc_Latn,python,"
def count_nums(arr):
    """"""Futu lamba count_numsbe ruwozəna shidonyi lamba hayyabe gozəna kuru lamba lambabe shidonyi aruwuwa > 0 mbeji. Lamba la'arzənyi, daji aruwuwa buro salakbe ruwotənzədə ruwotənyi: misallo -123 ruwotə aruwuwa -1, 2, kuru 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,knc_Latn,python,"
def move_one_ball(arr):
    """"""Array 'arr' dəye mbeji lamba N integers arr[1], arr[2], ..., arr[N] lan. Lamba suro array dəye kasattin. Cida nyiye shima asutin waneye array dəga kasattin suro kərtə ba-a letəyin kəndo diwoye: Nyiye letəyin kəndo right shiftbe loktu lamba wofilabe. Kərtə right shiftbe falle ma'ananzə awoa array dəbe fallo letəyin suro na kalkalben. Awoa arraybe darebedəga letəyin suro na badiyarambe suro array dəben. Misallo 0th index.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,knc_Latn,python,"
def exchange(lst1, lst2):
    """"""Suro kaziyi adən, nyiye kəndowa faidatəbe lamba indibe gojin kuru shiye bayanjin nəmgade faidatəbe nəmgade faidatəbe lst1 a lst2 sammaso tilo ro. Lammaan faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatəbe nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade faidatə nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmgade nəmtə nəmtə nəmtə nəmtə""""""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,knc_Latn,python,"
def histogram(test):
    """"""Suro layi do wakiltǝ ruwowa gana-gana lan, kalmadǝa waltǝyin kuru suronzan lamba do ngǝwuso waltǝyin ma mbeji. Kalma kada falro waljiya, sandi samma waltǝyin. Misal: histogram (('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram (('a b b a') == {'a': 2, 'b': 2} histogram (('a b c a b') == {'a': 2, 'b': 2} histogram (('b b a') == {'b 4}: histogram (('a b') == {'b 4}) == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,knc_Latn,python,"
def reverse_delete(s,c):
    """"""Cidawa indi tədin s kuru c, sandima kalkal suro s yen sandiya tilo c lan, daji kulashiya salan də palindrome ro waljin. Kalkal də palindrome ro bowotin sa kəlanzədə fuwu ro waljin. Nyiye tuple do suro shi kalkal dəye mbeji kuru jire/kəlanzədəye kulashi ro waljin. Misal s = ""abcde"", c = ""ae"", jaza də shima ('bcd', False) S = ""abcdef"", c = ""b"" jaza də shima ('acdef', False) S = ""abcdedcba"", c = ""ab"", jaza də shima ('cdedc',True)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,knc_Latn,python,"
def odd_count(lst):
    """"""""Kambosoro awowa i suro string i suro inputben tədin"". ""kambosoro awowa i suro string i suro inputben tədin"". >>> odd_count['1234567']) [""the number of odd elements 4n the str4ng 4 of the 4nput.""] >>> odd_count['3',""111111""]) [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,knc_Latn,python,"
def minSubArraySum(nums):
    """"""Futu integerbe lamba nben tədəna, sum la'a gana lambabe la'a suro lambaben tədin. Misal minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,knc_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Nyiye kәla kәlabe kәlabe dәga fәlezәna. Lamba fal kәlabe fal, kuru 1 suro layibe fal kәla njibe fal. Kәla kәlabe fal dә kәla kәlabe fal lan njibe sәdin, kuru kәla kәla kәla kәlabe samma nәm kәnәngәna. Cida nyiye kәla kәla kәlabe dәn njibe sәdin. Lamba dәga faidatәnәm dә kәla kәlabe dәga fәlezәna. Lamba dәga fәlezәnәm dәga fәlezәnәn. Misal: 1: Input: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Output: 62: Input: grid: [[0,0,1,1], [0,0,0,0,0,0], [1,1,1], [0,1,1,1]] bucket_capacity: 2 Output: 53: Input: [[0,0,0]], [0,0,0,0]] bucket_capacity: 5 Output: 0 * * * constraints: 1 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,knc_Latn,python,"
def sort_array(arr):
    """"""Kata adəlan, nyiye lamba lamba kalkal gənyi lamba kalkal gənyibe kasattə lamba fallo suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben kasattə suro binaryben""""""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,knc_Latn,python,"
def select_words(s, n):
    """"""String s kuru lamba jirebe n təwandə, nyiye cida kəndobe suwudə shidonyi sammaso suro kalma string s lan suwandənasodə suronzan nduso n təwandə, sandi kalma adə suro string s lan fəlejinro. String s ba maa daji kəndobe dəye suro litayero waltəyin. Note: injin stringbedə ruwowa-a naptə-a bas mbeji. Misal: select_words ""Mary had a little lamb"", 4) ==> [""little""] select_words ""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words ""simple white space"", 2) ==> [] select_words ""Hello world"", 4) ==> [""world""] select_words ""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,knc_Latn,python,"
def get_closest_vowel(word):
    """"""Nyiye kalmaa cin. Cida nyiye shima kambo karəngəye kambo indin ndikate kalmadəbe cidiyan (kərawuye). Karəngə badiyarambe-a datənzə-a kalkal gənyi. Kalmadə baro waltəyin nyiye kəlanzə kəlanzəbe sambisoro kalmadəro waltəyin ba. Nyiye kasatsə kalmadə təlam Nasarabe bas mbeji. Misal: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,knc_Latn,python,"
def match_parens(lst):
    '''Nyiye kulashin surobe indi, sandi indi samma suro kurtəbe baditin '(' au kurtəbe karəngə ') ' bas. Cida nǝmbe dǝ shima kulashi kǝla waneye nzǝdǝa suro kalkallo kəltǝyin, shi duno sǝwandin dǝ ngǝla ro waljin. Kurtə S dǝ ngǝla ro gotǝyin sa kuru sandi kurtə samma suro S dǝ balanzayin dǝro. Misallo: kurtə '(())) ' ngǝla, kuru kurtə '()) ' ngǝla. 'Yaye' waltǝyin sa futu kurtə ngǝla diwoye mbeji maa, kuru 'Ayi' waltǝyin sa gade lan. Misal: match_parens[('() ', ') ']) == 'Yaye' match_parens[(') ', ') ']) == 'Ayi' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,knc_Latn,python,"
def maximum(arr, k):
    """"""Arr integers a kuru lamba k k k k k k k k k k suro arrben, kulashinzəga waltəyin. Misal1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Misal2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Misal3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Note: 1. Kərawu arraybedə suro nəmkambobe [1, 1000] lan kara. 2. Kərawu arraybedə suro nəmkambobe [-1000, 1000] lan kara. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,knc_Latn,python,"
def solution(lst):
    """"""Futu lamba integersbe kəlanzədə, sum awowabe ganamabe suro na fallin kasharadəga waltə. Misal sulhube (([5, 8, 7, 1]) ==> 12 sulhu (([3, 3, 3, 3]) ==> 9 sulhu (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,knc_Latn,python,"
def add_elements(arr, k):
    """"""Array integers arr kuru integer k təwandəna, sum awowabe lamba indi lan sədin sədəna arro. Misal: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,knc_Latn,python,"
def get_odd_collatz(n):
    """"""Lamba kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe n, kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kәlabe kә""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,knc_Latn,python,"
def valid_date(date):
    """"""Nyiye kәndo ruotәna shidonyi datәbe kalkalzә kuru jireye waratәgәna sa datә kalkallo waljiya kuru False. Kәndә kalkallo waljin sa kaidawa fuwunzә samma kalkallo waljiya: 1. Kәndә kalkallo ba wo. 2. Adadu kәnәngasobe dә ba kozəna 1 au kozəna 31 kәnәngasobe dәro kәntawu 1,3,5,7,8,10,12 lan. Kuru adadu kәnәngasobe dә ba kozəna 1 au kozəna 30 kәnәngasobe dәro kәntawu 4,6,9,11 lan. Kuru, adadu kәnәngasobe dә ba kozəna 1 au kozəna 29 kәntawu dәro 2. 3. Kәnәngaso dә ba kozəna 1 au kozəna 12 lan ba. Kәndә dә suro fasal: mm-dd-yyyyyy lan kara misallo: valid_date (dәngә) => '03-11-2000' => 'true_valid_date (dәngәngәn) '15-01-2012') => 'false_valid_date (dәngәngәngәngәngәngә) => '04-2040' => 'false' => 'false_ valid_ valid_ valid_ valid_date (dәngәngәngәngәngәngәngәngәngәngәn'06-04_06-2020') => 'true' => 'true'_ valid_ valid_dәngәngәngә_06/04/06/04/04/04/04/06/04/2020')""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,knc_Latn,python,"
def split_words(txt):
    '''Kalma la'a fǝlejin, kalma do na'a dǝro yakkata return, ma'a na'a dǝye ba ma'a dǝye na'a dǝro yakkata ',' ma'a dǝye na'a dǝ ba ma'a dǝye na'a dǝro yakkata number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord'(b') = 1, ... ord('z') = 25 Examples split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,knc_Latn,python,"
def is_sorted(lst):
    '''Lambawa suro listben, waltə sandiya tartip suro lambabe au sandiya tartip suro lambabe falben. Lamba falbe fallo kozənaro waljiya, waltə False. Lambawa gadesodə lamba kalkal gənyi kuru integerslan. Misal is_sorted (), """" -> True is_sorted ([1, 2, 3, 4, 5]) """" -> True is_sorted ([1, 3, 2, 4, 5, 6]) """" -> False is_sorted ([1, 2, 3, 4, 5, 6, 7]) """" -> True is_sorted ([1, 2, 3, 4, 5, 6, 7]) -> False is_sorted ([1, 3, 2, 4, 5, 6, 7]) -> False is_sorted ([1, 2, 2, 3, 3, 4]) -> True is_sorted ([1, 2, 2, 3, 4 -> False)'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,knc_Latn,python,"
def intersection(interval1, interval2):
    """"""Nyiye interval indi tədəna, na falle lamba wofila. Misallo, interval = (start, end) = (1, 2). intervalwa tədəna dəga datəlan ma'ananzə shi interval (start, end) dəga badiyaram-a datə-a samma mbeji. interval woso, sha badiyaramzədə gana au tilo datəlan. Cida nyiye shima nəmngəwu ndikate interval indi adəbedə lamba burobedən mbeji au gənyi. Misallo, ndikate interval (1, 3), (2, 4) də shima (2, 3) shidoni nəmngəwunzə 1, shidoni lamba burobedən gənyi. Kawu nəmngəwunzə lamba burobedən dagəna, ""YES"" waltəmin, daji daji, ""NO"" waltəmin. [input/output] samples: intersection (((1, 2), (2, 3) ==> ""intersection ((-1, 1) ""), intersection (===) ""NO"" (0, 4) ==> ""intersection ((-1, 5), === ((-3, 5> ""YES"" -))""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,knc_Latn,python,"
def prod_signs(arr):
    """"""Nyiye arr integersbe cin kuru nyiye kulashin nəmkambo lambabe integersbe kawattəga lamba lambabe sammabe suro arrayben, wakiljin 1, -1 au 0. Note: return None for empty arr. Example: >>> prod_signs([1, 2, 2, -4]) == -9 >>> prod_signs([0, 1]) == 0 >>> prod_signs([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,knc_Latn,python,"
def minPath(grid, k):
    """"""Kǝla gridbe laan layya N-a kuru kolonna N-a (N >= 2) kuru lamba kalkallo k-a, cell-a sammabe suro gridbedǝye taman mbeji. Lamba samma suro range [1, N * N] surodǝn falro waljin cell-a suro gridbedǝlan. Nyiye kalkalnza gananzǝ karǝngǝnzǝ k-bedǝa suro gridbedǝro asutin. Nyiye cell-a laan badin, kuru suro fuwutǝwosoyen nyiye cellwa karǝngǝnzǝbe laan koljin, ma'ana gade lan, nyiye cellwa laan karǝngǝnzǝ falro waljin. Nyiye notǝnyi kalkalnza karǝngǝ k-bedǝye cell-a k-a kalkalzǝyin (kǝlanzǝ gade-gade gǝnyi). Nyiye kalkalnza A (karǝngǝ k) dǝ kalkalnza B (karǝngǝng k) ro gotǝnyi maa, daji daji daji daji daji daji daji kalkalnza karǝngǝngǝngǝ A-a B (a B) lan (Lamba sandiya bowotǝyen sandiya l_stA-a l_st_andǝa l_l_l_l_l_l_l_l_l), kalkalkalkalnza l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,knc_Latn,python,"
def tri(n):
    """"""Ndusoye Fibonacci sequence nozana, konkomiwuye karnuwa indiyen kərazana. Amma, awo amsoye notənyi dən shima Tribonacci sequence. Tribonacci sequence dəga bayanzəna waltə: tri(1) = 3 tri(n) = 1 + n / 2, sa n də even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), sa n də odd. Misallo: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Nyiye lamba lamba n-negative gənyi lamba lamba burobedən, nyiye kulashin lamba buro salakye n + 1 Tribonacci sequence bedən. Misallo: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,knc_Latn,python,"
def digits(n):
    """"""Lamba kalkallo kəlanzəbe n təwandənadən, lamba gananzəbe gotəga waltəgəna. 0 waltəgəna daji lamba samma evenben. Misallo: digit1 == 1 digit4 == 0 digit5 == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,knc_Latn,python,"
def is_nested(string):
    '''Kǝla cidabe donyi suro kǝla lamarǝbe dǝro kǝla lamarǝbe dǝro kǝla lamarǝbe dǝro kǝla awowa gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade gade'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,knc_Latn,python,"

def sum_squares(lst):
    """"""Nyiye kulashin lambabe cin. Nyiye som lambabe suro kulashin dəben squared bedəga waltəgə, awoa suro kulashidəbe sammason kokkatə badiyaramro. Misal: For lst = [1,2,3] output də 14 For lst = [1,4,9] output də 98 For lst = [1,3,5,7] output də 84 For lst = [1.4,4.2,0] output də 29 For lst = [-2.4,1,1] output də 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,knc_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Cida dowo waltǝ True dǝga suwudin ma alama darebe suro kalmadǝ shima alama alfabetbe wo kuru kalma fallo gənyi, kuru False ba. Note: ""word"" dǝ shima alama kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate kate'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,knc_Latn,python,"
def can_arrange(arr):
    """"""Cida do index kura awo la'a do awo la'a kozəna də'a wuzəna. A'a awo la'a də'a gənyi maa, waltə -1. Array dəye awowa fallo gənyi. Misal: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,knc_Latn,python,"
def largest_smallest_integers(lst):
    '''Cida do lamba la'a kurakura lamba kalkallobe suro listben kuru lamba kalkallo ganawo suro listben. Misal: lamba kalkallobe kuradəga kuru lamba kalkallobe kuradəga.'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,knc_Latn,python,"
def compare_one(a, b):
    """"""Fasal lambabe kəlanzəbe fuletəyin kuru lamba hayyabe wakiljin kuru lamba kurabe suro jili shiye tədənaben suwudin. Lambawa sandima tilowowa.""""""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,knc_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Nəm lamba n təwandəna dəga ruwojin nəm lamba 4 kəltənaben misal is_equal_to_sum_even (a) = 4) == False is_equal_to_sum_even (a) = 6) == False is_equal_to_sum_even (a) = 8) == True """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,knc_Latn,python,"
def special_factorial(n):
    """"""Brazilian factorial də shima: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! na'a n > 0 Misallo: >>> special_factorial ((4) 288 Cida də integer gana suwudin kuru shiye waltə factorial gana integer adəbe suwudin.""""""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,knc_Latn,python,"
def fix_spaces(text):
    """"""_Misal-3dǝwo na dǝwo kǝla fuwunna dǝn gǝnatǝ dǝga, na dǝwo kǝla fuwunna dǝn gǝnatǝ dǝga, na dǝwo kǝla fuwunna dǝn gǝnatǝ dǝga, na dǝwo kǝla fuwunna dǝn gǝnatǝ dǝga, na dǝwo kǝla fuwunna dǝn gǝnatǝ dǝga, na dǝwo kǝla fuwunna dǝga, na dǝwo kǝla fuwunna dǝga, na dǝwo kǝla fuwunna dǝga, na dǝwo kǝla fuwunna dǝga, na dǝwo kǝla fuwunna dǝga, na dǝwo kǝla fuwunna dǝga, na dǝwo kǝla fuwunna dǝga, na dǝwo kǝla fuwunna dǝga, na dǝwo kǝla fuwunna dǝga, na dǝwo kǝla fuwunna dǝga, na dǝwo kǝla fuwunna dǝga, na dǝwo kǝla fuwunna dǝga, na dǝwo kǝla fuwunna dǝga, na dǝwo kǝla fuwunna dǝga. "" '""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,knc_Latn,python,"
def file_name_check(file_name):
    """"""Cida do shilan su do fayil ye wakiljin ma, kuru 'Yayi' suwudin ma, sa su do fayil ye kalkalro waljiya, kuru 'Ayi' suwudin ma. Su do fayil ye kalkalro waljin ma, sa kuru sandi awoa do fuwun wa'jinma samma kalkallo waljin: - Ba'a alama yakkǝ kozǝnyi ('0'-'9') suro su do fayil ye dǝn. - Su do fayil ye dǝn alama dot fal mbeji. - Substring do kawu dot ye dǝ kalkallo ba, kuru sha badijinna ruwu Latinbe lan ('a'-'z' kuru 'A'Z'). - Substring do ngawo dot ye dǝ fal suro anyi lan badijin: ['txt', 'exe', 'lld'] Misal: file_name_check""{example.txt.} # => 'Yayi' => 'file_name_check""{example.dll1} # => 'Ayi' (suro su dǝye dǝ ruwu Latinbe lan baditin)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,knc_Latn,python,"


def sum_squares(lst):
    """""""" Shi cida adǝbe lamba wofilabe suwudin. Lamba samma suro listbedǝro, shi cida dǝye lamba wofilabe squarejin sa indexnzǝ dǝ kawattin 3 kuru shi lamba wofilabe cubejin sa indexnzǝ dǝ kawattin 4 kuru kawattin ba 3. Shi cida dǝye lamba suro listbedǝga faltinba shi indexnzǝ dǝ kawattin 3 au 4 gǝnyi. Shi cida dǝ daji sum awowa ruwuwinma samma suwudin. Misallo: Lst = [1,2,3] shi outputdǝ wanee 6 Lst = [] shi outputdǝ wanee 0 Lst = [-1,-5,2,-1,-5] shi outputdǝ wanee -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,knc_Latn,python,"
def words_in_sentence(sentence):
    """"""Nyiye kərtə jimlabe wakiljin, jimladən kalima kada na fallo yaktin, kuru nyiye kərtə jimlabe surodən kalima badiyarambe mbeji, nəmkuranzədə lamba faida'a, diwal kalima suro jimla bəlinbedə shima fallo walzəna. Misal1: Input: jimla = ""This is a test"" Output: ""is"" Misal2: Input: jimla = ""lets go for swimming"" Output: ""go for"" Constraints: * 1 <= len(sentence) <= 100 * jimlaadə suronzan kaudəma """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,knc_Latn,python,"
def simplify(x, n):
    """"""Cida nyiye shima kəndowo sha kəlakəltə x * nben kəskejin. Cida adəye True warratəyin sa x * nbe lamba kalkallo waljiya kuru False waltəyin. X-a n-a, sandima wakil lambabe kasatsəna, kuru fasal adəlan, <numerator>/<denominator> na lamba lambabe kuru denominatorbedə lamba kalkallo. Nyiye raksə kasatsə x-a n-a sandima kasatsəna, kuru sandiye lamba lambabe zero gənyi. simplify ""1/5"", ""5/1"") = True simplify ""1/6"", ""2/1"") = False simplify ""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,knc_Latn,python,"
def order_by_points(nums):
    """"""Lambawa sammabe suro fasalben yaktin, kuru sandima aruwuwa indibe. Misallo: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,knc_Latn,python,"
def specialFilter(nums):
    """"""Lambawa lambabe gojin kuru lamba 10 lan kozənama kuru lamba burobe-a darebe-a lamba ganama (1, 3, 5, 7, 9). Misallo: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,knc_Latn,python,"
def get_max_triples(n):
    """"""Nyiye lamba ngalwobe n. Nyiye lamba kalkallo aruwu nbe suwudin. Katin i (1 ‰¤ i ‰¤ n), taman a[i] = i * i - i + 1. Lamba diyawu (a[i], a[j], a[k]) a lan na i < j < k, kuru a[i] + a[j] + a[k] də kawattə 3. Misal: Shift: n = 5 Shift: 1 Bayandə: a = [1, 3, 7, 13, 21] Shift fal jirebe shima (1, 7, 13).""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,knc_Latn,python,"
def bf(planet1, planet2):
    '''Dunyawa indi mbeji suro kəmburamdeben: shi doni kəngaldəro karəngə shima Mercury, shi doni fuwunzadə shima Venus, daji Dunya, Mars, Jupiter, Saturn, Uranus, Neptune. Cida do su dunyabe indiya gojinma shiro planet1 kuru planet2 gultinmadə ruwojin. Cida dəbe kəmburam awoa dunyabe sammaso suronzan mbeji shi doni orbitnzadə kate orbit dunyabe 1 kuru orbit dunyabe 2 lan kara, kuru sha kəngaldəro karənga. Cida dəbe ruwojinma sha faidaa baro waljin sa shi planet1 au planet2 sunzə kalkal gənyi. Misal bf ""(Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf (((""Earth"", ""Mercury"") ==> (""Venus"") bf (((""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,knc_Latn,python,"
def sorted_list_sum(lst):
    """"""Lambawa listbe dǝ sambisoro listwabe kuru lambawabe gǝnyi, kuru adaduwa gade-gade mbeji. Lamba dǝ sambisoro listwabe kuru lambawabe gǝnyi, kuru waneye suronzan awowa gade-gade mbeji. Lambawa listbedǝ kalkalro waljin kalkal kalmabe-a, kuru nyiye listdǝ kalkallo kalkallo kalkallo kalkallo kalkallo. Kalma indi kalkallo kalkallo waljiya, kalmadǝ kalkallo kalkallo kalkallo kalkallo. Lambawa listbedǝ kalkallo kalkallo waljin. Kǝnda kalmadǝ kalkallo kalkallo waljin. Nyiye waneye kalmaa samma kalkallo waljin. Misallo: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""abd""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,knc_Latn,python,"
def x_or_y(n, x, y):
    """"""Futu shi x dəga fulujin, adaduwa buron n lan, kuru fulujin y dəga. Misal: x_or_y ((7, 34, 12) == 34 x_or_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,knc_Latn,python,"
def double_the_difference(lst):
    '''Lambawa suro listben, sum kare lambabe suro listbedəbe shi donyi ganama. Lambawa kasattənyi au integers gənyi. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Lambawa suro listbedə baro waljiya, 0 ruwuwa. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,knc_Latn,python,"
def compare(game,guess):
    """"""Tǝmangǝna ande sammaso hangal kǝla awo dǝga wuzǝna dǝga sa jaza kǝla awo laa ngǝwuro tǝmazǝna dǝga nowataro. Tǝmangǝ-a hangal kǝla kǝnǝngadǝbe dǝ tawadǝro faida-a kǝndon. Cida dǝye shima kam dǝye jaza matǝbe dǝ kalkalro asuzǝna dǝ asutin. Nyiye array indi na fallin alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama alama""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,knc_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Nyiye su darajabe (kambo) kuru liwuram nzǝrabe cin. Lamar nzǝrabe dǝ faidatǝro kalasawa gade ro kǝltǝro. Nǝm-kambodǝ jili: CAP shima lamba kura-kura suro su darajabe lan, kuru SM shima lamba gana-a suro su darajabe lan, nǝm-kambodǝ sha fraction CAP - SM lan cin. Nyiye nzǝrawa dunowa-a kuru liwuram nzǝrabe dǝ format: ClassName.StrongestExtensionName lan cin. Lamar nzǝrabe indi au kada mbeji nǝm-kambodǝ fal, nyiye fal buro salakǝ lan suro liwuram dǝben gojin. Misallo, nyiye """"Slices"""" alama daraja-a kuru liwuram nzǝrabe: ['SEviRNGSliCes',' Cheese', 'StuFfed'] daji nyiye 'Slices.SEviRNGSliCes' 'SviRNGSliCes' 'mySviRNGSliCes']) dǝ duno-a cin (misallo: 'AA' - """"Beast"""" - StrongestExtensionName, """"Beast"""" - """"Strongest"""") - """""""" (Misallo: 'AA_class' Strongest_Extension' => 'Be'""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,knc_Latn,python,"
def cycpattern_check(a , b):
    """"""Nyiye kalima indi tədin. Nyiye True warrata ma sa kalima indimi au fal suro waltəwunzədə shima substring suro kalima buro salakbe lan cycpattern_check ((""abcd"",""abd"") => False cycpattern_check ((""hello"",""ell"") => True cycpattern_check ((""whassup"",""psus"") => False cycpattern_check ((""abab"",""baa"") => True cycpattern_check ((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,knc_Latn,python,"
def even_odd_count(num):
    """"""Lamba samiyedə təwandənadən, lamba tuplebe shidonyi lamba evenbe kuru oddbe sammason mbeji. Misal: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,knc_Latn,python,"
def int_to_mini_roman(number):
    """"""Lamba kәlabe mbeji, lamba Romanbe tilonzəbe suro kәrye lan gojin, kuru gana-ganasoro waltәmin.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,knc_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Kәndau yakkәye kәla nәm kәla yakkәye dәye. Return True if the three sides form a right-angled triangle, False otherwise. Kәndau yakkәye kәla right-angled dә shima kәndau yakkәye do na fal kәla right angle au 90 degree ye dә. Misal: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,knc_Latn,python,"
def find_max(words):
    """"""Lambawa listbe gojin. Lambawa gade-gade mbeji. Kalma do lamba kambo kada mbeji dəga waltəyin. Lambawa kada sandiya lamba kambo kada mbeji, fal do buron suro lexicographical order lan gənajin. find_max (([""name"""", ""of"""", ""string""]) == ""string"" find_max (([""name"""", ""enam"", ""game""]) == ""enam"" find_max (([""aaaaaaa"""", ""bb"" ,""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,knc_Latn,python,"
def eat(number, need, remaining):
    """"""Nyiye kәriwu kәmbube, kuru nyiye kәnda karewabe laa nya'atәna, amma kәmaa karewa kada kәmbube kәnәmbe kәnәmbe kәnәmbe kәmbulnәmin. nyiye array [kәnda karewabe kәmbulnәmbe kәmbube kәmbulnәmbe ngawo kәmbube kәmbulnәmbe ngawo kәmbube kәmbulnәmbe ngawo kәmbube kәmbulnәmbe] ruwozәna. ca kәnda karewabe kәmbulnәmbe ngәwu ba maa, kәnda karewabe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbe kәmbulnәmbe kәmbulnәmbe kәmbulnәmbe kәmbulmbe kәmbulmbe kәmbulmbe kәmbulmbe kәmbulnәmbulmbe kәmbulmbe kәmbulmbe kәmbulmbe kәmbulmbe kәmbulmbe kәmbulmbe kәmbulmbe kәmbulmbe kәmbulmbe kәmbulmbe kәmbulmbe kәmbulmbe kәmbulmbe kәmbulmbe kәlmbe kәmbulmbe kәmbe kәmbulmbe kәlmbulmbe kәlmbulmbe kmbulmbe kmbulmbe kmbulmbe kmbulmbe kmbulmbe kmbul""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,knc_Latn,python,"
def do_algebra(operator, operand):
    """"""Operand indi tədəna, kuru operand. List buro salakbedə kəndowa algebrabe mbeji, kuru list kənindimibe də integerwabe. Lister indi tədəna faidatə algebrabe bayan kəndobe dəga kuru waltə bayanna adəbe bayanzəga. Kəndowa algebrabe buro salakbedə: kəltə (+) fulutə (-)) kawattə (*) cidiya yaktə (//) kəndo (**) Misal: operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 Note: The length of list of operator is equal to the length of operand list minus one. Operand də list integersbe gənyibe wo. Operator də kam fallo list of non-negative integersbe mbeji, kuru list of operand də kam indi operandbe mbeji.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,knc_Latn,python,"
def solve(s):
    """"""Nyiye string s. s[i] shima harawu, nəmkuranzəa gərzəna cidiya-a samin-a au vice versa, daji daji daji gərzəna.""""""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,knc_Latn,python,"
def string_to_md5(text):
    """"""'Text' kəlanzədə, md5 hash equivalent kəlanzədə gowotə. 'Text' kəlanzədə ba yaye, None gowotə. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,knc_Latn,python,"
def generate_integers(a, b):
    """"""Lamba samungobe a kuru b təna, lamba evenbe a kuru b lan, suro futə fuwuyen. Misallo: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
