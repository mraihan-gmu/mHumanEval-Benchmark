task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,war_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Pag-usisa kun ha ginhatag nga lista hin mga numero, mayda ba duha nga mga numero nga mas hirani ha usa kag usa kay han ginhatag nga threshold. Pananglitan: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,war_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""An input hini nga function in usa nga string nga naglalakip hin damo nga grupo hin mga parentesis nga gin-nest. An imo tumong amo an pagbulag han mga grupo ngadto hin mga hilit nga mga string ngan pagbalik han lista han mga. An mga hilit nga grupo in balanse (an kada abrido nga parentesis in husto nga nasadhan) ngan diri gin-nest ha sulod han kada usa. Pagbalewaray hin bisan ano nga mga espasyo ha input string. Pananglitan: >>> separate_paren_groups' ((( ) (() (()))))) '['() ', '(()) ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,war_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Gintagan hin positibo nga floating point nga numero, ini in puydi ma-decompose ngadto hin integer nga bahin (an pinakadako nga integer nga mas gutiay kay han ginhatag nga numero) ngan mga decimal (an nahibilin nga bahin nga pirme mas gutiay kay han 1). Ibalik an parte han decimal han numero. Pananglitan: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,war_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""An iyo buruhaton amo an pag-usisa kun an balanse han account in nahulog ha ubos han zero, ngan dida hito nga punto an function in kinahanglan magbalik han True. Kun diri, kinahanglan magbalik ini han False. Pananglitan: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,war_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Para hin ginhatag nga lista hin mga input nga numero, i-calcula an Mean Absolute Deviation palibot han mean hini nga dataset. An Mean Absolute Deviation amo an average nga absolute nga pagkaiba ha butnga han tagsa nga elemento ngan usa nga centerpoint (mean hini nga kaso): MAD = average. x - x_mean. Pananglitan: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,war_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Ipasulod an numero nga ""delimiter"" ha butnga han kada duha nga sunod-sunod nga mga elemento han input list `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,war_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""An input hini nga function in usa nga string nga ginrepresentar hin damo nga grupo para hin mga parentesis nga ginbulag hin mga espasyo. Para han kada grupo, ig-output an gihilarum nga lebel han pag-nesting han mga parentesis. Pananglitan an (() (()) mayda maximum nga duha nga lebel han pag-nesting samtang an ((())) mayda tulo. >>> parse_nested_parens (('((()) ((())) () ((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,war_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Pag-filter hin input nga lista hin mga string para la hadton may-ada hin-hatag nga substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,war_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Para hin ginhatag nga lista hin mga integers, iuli an usa nga tuple nga ginkukompwesto hin sum ngan hin produkto han ngatanan nga mga integers ha lista. An waray sulod nga sum sadang kapareho han 0 ngan an waray sulod nga produkto sadang kapareho han 1. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,war_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Tikang hin ginhatag nga lista hin mga integers, paghimo hin lista hin rolling maximum nga elemento nga hinagian tubtob hinin nga takna ha sunod-sunod. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,war_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Pamiling han pinakamakuri nga palindrome nga nagtitikang hin ginhatag nga string. An ideya han algorithm simple: - Pamiling han pinakamadugay nga postfix han ginhatag nga string nga usa nga palindrome. - Ilakip ha kataposan han string an reverse han string prefix nga naabot ha atubangan han palindromic nga suffix. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('catac') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Pag-usisa kun an ginhatag nga string in palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,war_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""An input in duha nga mga string nga a ngan b nga may 1 ngan 0 la. Paghimo hin binary nga XOR hini nga mga input ngan ibalik an resulta sugad nga string. >>> string_xor (('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,war_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Ha lista hin mga string, iuli an gidadakoi. Iuli an syahan kon mayda damo nga mga string nga pareho an kahilaba. Iuli an Waray kon an input list waray. >>> gidadakoi([]) >>> gidadakoi(['a', 'b', 'c']) 'a' >>> gidadakoi(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,war_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Ibalik an pinakadako nga komon nga divisor han duha nga integers a ngan b >>> pinakadako_nga_komun_divisor ((3, 5) 1 >>> pinakadako_nga_komun_divisor ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,war_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Nagbalik han lista han ngatanan nga prefiks tikang han gihihirani ngadto han gihihilaba han input string >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,war_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Ibalik an usa nga strings nga naglalakip hin mga numero nga gin-delimitar hin espasyo nga nagtitikang ha 0 tubtob ha n upod an. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,war_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Gintagan hin string, hibaroi kon pira nga mga lain nga mga karakter (waray labot han case) an may-ada dida hito >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,war_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""An input hini nga function amo an usa ka string nga nagrirepresentar hin mga nota ha musika ha espesyal nga ASCII nga pormat. An imo buruhaton amo an pag-parse han string list han mga integers nga nauyon ha damo nga mga beats. Anhi an usa nga legend: 'o' note, lasts four beats 'o 112' - half note, lasts two beats 112' - quater note, lasts one beat >>> parse_music. 'o o .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,war_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Hibaroi kon pira ka beses an ma-aagian han ginhatag nga substring ha orihinal nga string. Ihap an mga nag-uurosa nga kaso. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,war_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""An input in usa nga space-delimited nga string hin mga numero tikang ha 'zero' ngadto ha 'nine'. An mga balido nga mga pagpili amo an 'zero', 'usa', 'duha', 'tulo', 'upat', 'lima', 'unom', 'pito', 'walo' ngan 'siyam'. Ibalik an string nga may mga numero nga gin-uurhi tikang ha gigutiayi ngadto ha gigutiayi >>> sort_numbers (('tulo usa lima') 'usa tulo lima' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,war_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Tikang ha iginhatag nga lista hin mga numero (nga diri maminos duha an kahilaba) pilia ngan ibalik an duha nga hirani ha kada usa ngan ibalik hira ha pagkasunodsunod (mas gutiay nga numero, mas dako nga numero). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,war_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Gintagan hin lista hin mga numero (han diri maminos duha nga mga elemento), ig-aplikar an linear nga pag-iba han lista, nga an gigugutiayi nga numero magigin 0 ngan an gigutiayi magigin 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,war_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Pag-filter hin ginhatag nga lista hin bisan ano nga mga python nga mga kantidad para la hin mga integers >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,war_Latn,python,"

def strlen(string: str) -> int:
    """"""Pagbalik han kahilaba han ginhatag nga string >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,war_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Para hin ginhatag nga numero n, hibaroi an gidadakoi nga numero nga nagbulag hin n hin pareho, nga mas gutiay kay han n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,war_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""An lista han mga primer nga mga puwersa han igintapod nga integer nga ginsusurat tikang han gigutiayi ngadto han gigutiayi. An kada puwersa kinahanglan iglista nga kadamo han mga beses nga nauyon ha kadamo han mga higayon nga ini in napakita ha pag-factorize. An input nga numero kinahanglan katugbang han produkto han ngatanan nga puwersa >>> factorise ((8) [2, 2, 2] >>> factorise ((25) [5, 5] >>> factorise ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,war_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Tikang ha lista han mga integers, kuhaa an ngatanan nga mga elemento nga nahitatabo hin labaw hin usa ka beses. Pagtipig han mga elemento nga nahibilin nga pareho han mga input. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,war_Latn,python,"

def flip_case(string: str) -> str:
    """"""Para hin ginhatag nga string, i-flip an mga minasus-nga-karakter ngadto ha minasus-nga-karakter ngan mga minasus-nga-karakter ngadto ha minasus-nga-karakter. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,war_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Pag-concatenate han lista han mga string ngadto hin usa la nga string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,war_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Pag-filter hin input nga lista hin mga string para la hadton nagtitikang hin ginhatag nga prefix. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,war_Latn,python,"

def get_positive(l: list):
    """"""Ibalik an mga positibo la nga numero ha lista. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,war_Latn,python,"

def is_prime(n):
    """"""Ibalik an totoo kon an ginhatag nga numero primo, ngan sayop kon diri. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,war_Latn,python,"import math


def poly(xs: list, x: float):
    """"""An xs amo an mga coefficient han polynomial. find_zero find x sugad nga poly ((x) = 0. find_zero an nagbalik hin zero nga punto, bisan kon damo. Dugang pa, an find_zero nagkuha la hin lista nga xs nga may-ada bisan numero hin mga coefficient ngan pinakadako nga non-zero nga coefficient kay ginagarantiyahan ini hin solusyon. >>> round ((find_zero[(1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""An polynomial nga may coefficients xs ha punto x. an pagbalik xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,war_Latn,python,"

def sort_third(l: list):
    """"""Ini nga function in nagkuha hin lista l ngan nagbalik hin lista l' nga sugad nga an l' amo an pareho han l ha mga indices nga diri maibabahin ha tulo, samtang an mga kantidad hini ha mga indices nga maibabahin ha tulo amo an katugbang han mga kantidad han mga kaangay nga mga indices han l, kundi gin-uurusa. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,war_Latn,python,"

def unique(l: list):
    """"""Ibalik an mga gin-uurusa nga mga elemento ha lista >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,war_Latn,python,"

def max_element(l: list):
    """"""Ibalik an pinakadako nga elemento ha lista. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,war_Latn,python,"

def fizz_buzz(n: int):
    """"""Ibalik an kadamo han mga pagpakita han numero 7 ha mga integers nga diri sobra ha n nga mabihag hin 11 o 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,war_Latn,python,"

def sort_even(l: list):
    """"""Ini nga function in nagkuha hin lista l ngan nagbalik hin lista l' nga sugad nga an l' amo an pareho han l ha mga indices nga odd, samtang an mga kantidad hini ha mga indices nga even katugbang han mga kantidad han mga indices nga even han l, kundi gin-uurusa. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,war_Latn,python,"

def encode_cyclic(s: str):
    """"""ginkuha sugad nga input nga string nga gin-encode han encode_cyclic nga function. Nagbalik hin gin-decode nga string. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""nagbalik hin encoded nga strings pinaagi hin mga grupo hin tulo nga mga karakter. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,war_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib nagbalik hin n-th nga numero nga usa nga Fibonacci nga numero ngan ini liwat in primo. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,war_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triple_sum_to_zero in nagdadara hin lista hin mga integers sugad nga input. ini in nagbalik hin Tinuod kon mayda tulo nga mga elemento ha lista nga sums ngadto ha zero, ngan False kon diri. >>> triple_sum_to_zero (([1, 3, 5, 0]) False >>> triple_sum_to_zero (([1, 3, -2, 1]) True >>> triple_sum_to_zero (([1, 2, 3, 7]) False >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triple_sum_to_zero [1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,war_Latn,python,"

def car_race_collision(n: int):
    """"""Hunahunaa in dalan nga usa nga hingpit nga tul-id nga waray katapusan nga hilawig nga linya. n mga awto nagdadara ha wala ngadto ha tuo; ha pariho nga panahon, an lain nga grupo hin n mga awto nagdadara ha tuo ngadto ha wala. An duha nga grupo hin mga awto nagtikang nga hirayo gud tikang ha kada usa. An ngatanan nga mga awto nagmamaneho ha pareho nga katulin. Duha nga mga awto an ginsisiring nga nag-aagto kon an usa nga awto nga nagmamaneho tikang ha wala ngadto ha tuo nag-aagto ha usa nga awto nga nagmamaneho tikang ha tuo ngadto ha wala. Kondi, an mga awto waray katapusan nga marig-on ngan makusog; sugad nga resulta, nagpapadayon hira ha ira pag-agi ha ira trahedya sugad nga waray hira mag-agto. Ini nga function in nag-output han kadamu han sugad nga mga pag-agto.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,war_Latn,python,"

def incr_list(l: list):
    """"""An lista nga ginbalik nga may mga elemento nga ginpadamu hin 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,war_Latn,python,"

def pairs_sum_to_zero(l):
    """"""An pairs_sum_to_zero in nagdadara hin lista hin mga integers sugad nga input. Nagbalik hin Tinuod kon mayda duha nga mga elemento ha lista nga sums ngadto ha zero, ngan False kon diri. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,war_Latn,python,"

def change_base(x: int, base: int):
    """"""Pagbalhin hin numeral nga base han input nga numero nga x ngadto ha base. pagbalik han representasyon han string katapos han pag-convert. base nga mga numero mas gutiay kay han 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,war_Latn,python,"

def triangle_area(a, h):
    """"""Gintagan hin kahilaba hin usa nga ligid ngan hitaas nga lugar han pagbalik para hin usa nga trianggulo. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,war_Latn,python,"

def fib4(n: int):
    """"""An Fib4 nga sunodsunod hin mga numero in usa nga sunodsunod nga susugad han Fibbonacci nga sunodsunod nga ginhulagway sugad han masunod: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Alayon pagsurat hin function para ha epektibo nga pag-ihap han ika-n nga elemento han sunodsunod hin mga numero han fib4. Ayaw paggamit hin recursion. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,war_Latn,python,"

def median(l: list):
    """"""An mediana han mga elemento ha lista nga l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,war_Latn,python,"

def is_palindrome(text: str):
    """"""Ginkikita kun an ginhatag nga strings in palindrome >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,war_Latn,python,"

def modp(n: int, p: int):
    """"""Balikon 2^n modulo p (maaram han mga numero). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,war_Latn,python,"

def encode_shift(s: str):
    """"""ginkuha sugad nga input nga string nga gin-encode han encode_shift nga function. Nagbalik hin gin-decode nga string. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""Nagbalik hin encoded nga string pinaagi han pagbalhin han kada karakter hin 5 ha alpabeto.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,war_Latn,python,"

def remove_vowels(text):
    """"""an remove_vowels in usa nga function nga nagkuha hin strings ngan nag-aabot hin strings nga waray mga vowel. >>> remove_vowels (('') ' ' >>> remove_vowels (('abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,war_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Ibalik an Tinuod kon an ngatanan nga mga numero ha lista l aada ha ubos han threshold t. >>> below_threshold([1, 2, 4, 10], 100) Tinuod >>> below_threshold([1, 20, 4, 10], 5) Diri Tinuod """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,war_Latn,python,"

def add(x: int, y: int):
    """"""Igsumat an duha nga numero nga x ngan y >>> igdugang an ((2, 3) 5 >>> igdugang an ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,war_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Pag-usisa kun mayda ba duha nga mga pulong nga may pareho nga mga karakter. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Tinuod >>> same_chars (('abcd', 'dddddddabc') Tinuod >>> same_chars (('dddddddabc', 'abcd') Tinuod >>> same_chars (('eabcd', 'dddddddddabc') Diri Tinuod >>> same_chars ((('abcd', 'dddddabddce') Diri Tinuod >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Diri Tinuod """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,war_Latn,python,"

def fib(n: int):
    """"""Ibalik an n-th nga numero han Fibonacci. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,war_Latn,python,"

def correct_bracketing(brackets: str):
    """"""mga parentes amo an usa nga string han ""<"" ngan "">"". return True kon an kada pagbubuklad nga parentes mayda katugbang nga pagtrangkaso nga parentes. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,war_Latn,python,"

def monotonic(l: list):
    """"""Ibalik an Tinuod kon an mga elemento han lista nagtitikadamo o nagtitikadamo hin monotono. >>> monotono (([1, 2, 4, 20]) Tinuod >>> monotono (([1, 20, 4, 10]) Diri Tinuod >>> monotono (([4, 1, 0, -10]) Tinuod """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,war_Latn,python,"

def common(l1: list, l2: list):
    """"""Ibalik an mga gin-uurusa nga komon nga mga elemento para hin duha nga lista. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,war_Latn,python,"

def largest_prime_factor(n: int):
    """"""Ibalik an pinakadako nga primer factor han n. Ibutang nga n > 1 ngan diri primer. >>> pinakadako_primer_factor ((13195) 29 >>> pinakadako_primer_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,war_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n usa nga function nga nagsusumar hin mga numero tikang han 1 ngadto ha n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,war_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets is a string of ""("" and "")"". return True kon an tagsa nga pagbubuklad nga bracket mayda katugbang nga pagtrangka. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,war_Latn,python,"

def derivative(xs: list):
    """"""An xs in nagrepresentar hin mga coefficient hin polinomyal. xs[0] + xs[1] * x + xs[2] * x^2 + .... Ibalik an derivatibo hini nga polinomyal ha amo gihapon nga porma. >>> derivatibo (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivatibo ([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,war_Latn,python,"

def fibfib(n: int):
    """"""An sunod-sunod nga FibFib nga numero in usá nga sunod-sunod nga susugad han Fibbonacci nga sunod-sunod nga ginhulagway sugad han masunod: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Alayon pagsurat hin function para ha epektibo nga pag-ihap han ika-n nga elemento han sunod-sunod nga numero han fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,war_Latn,python,"
FIX = """"""Pag-surat hin function nga vowels_count nga nag-aagi hin string nga nagrirepresentar hin pulong sugad nga input ngan nag-aabot han kadamo han mga vowel ha string. An mga vowel hini nga kaso amo an 'a', 'e', 'i', 'o', 'u'. Dinhi, an 'y' usa liwat nga vowel, kundi kon aada ini ha kataposan han ginhatag nga pulong. Pananglitan: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Dugang hin mga kaso nga pagsari. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,war_Latn,python,"
def circular_shift(x, shift):
    """"""An sirkular nga pagbalhin han mga numero han integer nga x, pagbalhin han mga numero ha tuo pinaagi han pagbalhin ngan ibalik an resulta sugad nga usa nga string. Kon an pagbalhin > kadamu han mga numero, ibalik an mga numero nga ginbalik. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,war_Latn,python,"
def digitSum(s):
    """"""An buhat Igsurat an usa nga function nga nag-aangkon hin usa nga string sugad nga input ngan nag-aabot han sumat han mga gihataasi nga mga karakter la' ASCII nga mga kodigo. Mga pananglitan: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,war_Latn,python,"
def fruit_distribution(s,n):
    """"""Ha ini nga buruhaton, mahatag ha imo hin usa nga string nga nagrirepresentar hin ihap hin mga mansanas ngan mga orange nga ginbahin ha usa nga basket hin prutas nga ini nga basket mayda mga mansanas, mga orange, ngan mga prutas nga mango. Gintagan hin string nga nagrirepresentar han kabug-osan nga ihap han mga mansanas ngan mga mansanas ngan hin integer nga nagrirepresentar han kabug-osan nga ihap han mga prutas ha basket ibalik an ihap han mga prutas nga mango ha basket. para han pananglitan: fruit_distribution""5(mga mansanas ngan 6 nga mga orange"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 mga mansanas ngan 1 mga orange"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 mga mansanas ngan 3 nga mga orange"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 nga mga mansanas ngan 1 mga orange"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,war_Latn,python,"
def pluck(arr):
    """"""""Ginhatag an array nga nagrirepresentar hin sanga hin kahoy nga may-ada diri-negatibo nga integer nga mga node an imo buruhaton amo an pag-pick hin usa han mga node ngan ibalik ito. An pinilok nga node kinahanglan an node nga may-ada pinakagutiay nga bisan nga kantidad. Kon damo nga mga node nga may-ada pareho nga pinakagutiay nga bisan nga kantidad an ma-ibalik an node nga may-ada pinakagutiay nga index. An pinilok nga node kinahanglan ibalik ha lista, [smallest_value, an index hini ], Kon waray bisan mga kantidad o an iginhatag nga array waray sulod, ibalik an []. Pananglitan 1: Input: [4,2,3] Output: [2, 1] Pagsaysay: 2 may-ada pinakagutiay nga bisan nga kantidad, ngan 2 may-ada pinakagutiay nga index. Pananglitan 2: Input: [1,2,3] Output: [2, 1] Pagsaysay: 2 may-ada pinakagutiay nga bisan nga kantidad, ngan 2 may-ada pinakagutiay nga bisan nga index. Pananglitan 3: Input: [] [output: [4:] Input: [5, 3, 4] [output: 0,] Pag-output: 1 Pag-output: 0 Pag-out: An pinakagutiay nga node nga node nga may-an nga index, an pinakagutiay nga kantidad, pero an pinakag nga index in zero. An siyahan nga node, an pinakagutiay nga node, nga may-an nga duha nga numero nga may-i, an pinakagutiay nga index.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,war_Latn,python,"
def search(lst):
    '''An pag-abot han usa nga numero amo an kadamo han mga beses nga ini nga numero in napakita ha lista. Kon waray sugad nga kantidad, iuli an -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,war_Latn,python,"
def strange_sort_list(lst):
    '''An strangest nga pag-sorting, amo an pagtikang han pinakagutiay nga kantidad, ngan an pinakadako han nahibilin nga mga integer, ngan an pinakagutiay ngan sugad pa. Mga pananglitan: strangest_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strangest_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strangest_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,war_Latn,python,"
def triangle_area(a, b, c):
    '''Gintagan an mga kahilaba han tulo nga mga kagiliran hin usa nga traydor. Ibalik an kahaluag han traydor nga gin-urundon ngadto hin 2 nga mga punto ha desimal kon an tulo nga mga kagiliran nag-uugtang hin balido nga traydor. Kon diri, ibalik an -1 Tulo nga kagiliran an nag-uugtang hin balido nga traydor kon an katirok han bisan ano nga duha nga kagiliran mas dako kay han ikatulo nga kagiliran. Pananglitan: triangle_area{3,4,5} == 6.00 triangle_area{1,2,10} == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,war_Latn,python,"
def will_it_fly(q,w):
    '''Ig-isurat an function nga nag-abalik hin Tinuod kon an butang q maglupad, ngan Diri Tinuod kon diri. An butang q maglupad kon ini balanse (usa ini nga palindromic nga lista) ngan an suma han mga elemento hini mas gutiay o katugbang han pinakadako nga posible nga kabug-at w. Pananglitan: will_it_fly (([1, 2], 5) â -> Diri Tinuod # 1+2 mas gutiay kay han pinakadako nga posible nga kabug-at, kundi diri ini balanse. will_it_fly (([3, 2, 3], 1) â -> Diri Tinuod # ini balanse, kundi 3+2+3 mas dako kay han pinakadako nga posible nga kabug-at. will_it_fly (([3, 2, 3], 9) â -> Tinuod # 3+23 mas gutiay kay han pinakadako nga posible nga kabug-at, ngan ini balanse. will_it_fly ((([3], 5) â -> Diri Tinuod # 3 mas gutiay kay han pinakadako nga posible nga kabug-at, ngan ini balanse '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,war_Latn,python,"
def smallest_change(arr):
    """"""An array nga may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer, kun diin an array in may-ada mga integer.""""""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,war_Latn,python,"
def total_match(lst1, lst2):
    '''Pagsurat hin function nga nag-aangkon hin duha nga lista hin mga string ngan nag-aabot han lista nga may-ada kabug-osan nga kadamo hin mga karakter ha ngatanan nga mga string han lista nga mas gutiay kay han iba nga lista. kon an duha nga lista may-ada pareho nga kadamo hin mga karakter, ibalik an syahan nga lista. Mga ehemplo total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4']) ]]'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,war_Latn,python,"
def is_multiply_prime(a):
    """"""Isurat an function nga nagbalik hin true kon an ginhatag nga numero amo an pagkadugangan han 3 nga mga numero primo ngan false kon diri.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,war_Latn,python,"
def is_simple_power(x, n):
    """"""An imo buruhaton amo an pagsurat hin function nga nabalik nga true kon an numero nga x usa nga simple nga puwerente han n ngan false ha iba nga mga kaso. x usa nga simple nga puwerente han n kon n**int=x Pananglitan: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,war_Latn,python,"
def iscube(a):
    '''Isurat an function nga nag-aagi hin integer nga a ngan nag-abalik hin Tinuod kon ini nga ingeger usa nga kubo hin pipira nga integer nga numero.'''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,war_Latn,python,"
def hex_key(num):
    """"""An mga numero han hexadecimal amo an 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. An mga numero han hexadecimal amo an 2, 3, 5, 7, 11, 13, 17,... Sanglit kinahanglan magpili ka hin numero han masunod nga mga numero: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,war_Latn,python,"
def decimal_to_binary(decimal):
    """"""An function in kinahanglan magbalik hin string, nga an kada character in nagrirepresentar hin binary number. An kada character ha string in '0' o '1'. Mayda extra nga pares hin mga character 'db' ha tinikangan ngan ha katapusan han string. An extra nga mga character in aada ha pagbulig han format. Mga ehemplo: decimal_to_binary(15) # nagbalik hin ""db1111db"" decimal_to_binary32) # nagbalik hin ""db100000db"" """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,war_Latn,python,"
def is_happy(s):
    """"""An imo buruhaton amo an pag-usisa kon an string malipayon o diri. An string malipayon kon an kahilaba hini diri maminos hin 3 ngan an kada 3 nga sunodsunod nga mga letra magkaiba Pananglitan: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,war_Latn,python,"
def numerical_letter_grade(grades):
    """"""It's the last week of the semester and the teacher has to give the grades to students. An maestra naghimo hin iya kalugaringon nga algorithm para han grading. An problema la nga iya nawara an code nga iya ginamit para han grading. Gintagan ka niya hin lista hin GPA para hin pipira nga mga estudyante ngan kinahanglan mo maghimo hin function nga makakag-output hin lista hin mga letter grade gamit an masunod nga talaan: GPA. Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E Example: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,war_Latn,python,"
def prime_length(string):
    """"""Igsurat an function nga nag-aarabot hin string ngan nag-abalik hin Tinuod kon an string nga kahilaba in prime number o Diri-Tinuod kon diri An mga ehemplo prime_length (('Hello') == Tinuod nga prime_length (('abcdcba') == Tinuod nga prime_length (('kittens') == Tinuod nga prime_length (('orange') == Diri-Tinuod """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,war_Latn,python,"
def starts_one_ends(n):
    """"""Gintagan hin positibo nga integer n, ibalik an ihap han mga numero han n-digit nga positibo nga integer nga nagtitikang o natatapos hin 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,war_Latn,python,"
def solve(N):
    """"""Gintagan hin positibo nga integer nga N, ibalik an kabug-osan nga suma han mga numero hini ha binary. Pananglitan Para han N = 1000, an suma han mga numero magigin 1 an output kinahanglan magin ""1"". Para han N = 150, an suma han mga numero magigin 6 an output kinahanglan magin ""110"". Para han N = 147, an suma han mga numero magigin 12 an output kinahanglan magin ""1100"". Mga variable: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. Output: usa nga string han binary number """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,war_Latn,python,"
def add(lst):
    """"""Gintagan hin diri-hubo nga lista hin mga integers lst. ig-upod an mga even nga elemento nga aada ha mga odd nga mga index.. Mga pananglitan: ig-upod (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,war_Latn,python,"
def anti_shuffle(s):
    """"""An ordered nga bersyon han string, amo an usa nga string diin an ngatanan nga mga pulong (ginbulag hin space) ginliwanan hin bag-o nga pulong diin an ngatanan nga mga karakter gin-urosa ha pagsaka nga pagkasunodsunod nga nakabase ha ascii nga kantidad. Pahinumdomi: Kinahanglan imo tipigan an pagkasunodsunod han mga pulong ngan mga waray sulod nga mga espasyo ha sentensya. Pananglitan: anti_shuffle ((('Hi') nagbalik hin 'Hi' anti_shuffle ((('hello') nagbalik hin 'ehllo' anti_shuffle (('Hello World!!!') nagbalik hin 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,war_Latn,python,"
def get_row(lst, x):
    """"""An mga datos in 2 dimensional, sugad hin mga lista nga gin-nest, nga pariho han matrix, pero diri sugad han mga matrix, an kada hilera in puydi maglalakip hin lain nga kadamo hin mga columns. Gintagan an lst, ngan integer x, pangita hin mga integer x ha lista, ngan ibalik an lista han mga tuples, [(x1, y1), (x2, y2) ...] sugad nga an kada tuple in usa nga koordinado - (baybay, mga columns), nga nagtitikang ha 0.""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,war_Latn,python,"
def sort_array(array):
    """"""Gintagan hin array hin mga non-negatibo nga integers, iuli an kopya han ginhatag nga array katapos han pag-sort, imo susugdon an ginhatag nga array ha pagsaka nga pagkasunodsunod kon an sumat ((an syahan nga index value, an kataposan nga index value) in ganon, o susugdon ito ha pagsaka nga pagkasunodsunod kon an sumat ((an syahan nga index value, an kataposan nga index value) in pares.""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,war_Latn,python,"
def encrypt(s):
    """"""Paghimo hin function encrypt nga nag-aangkon hin string nga argument ngan nag-aabot hin string nga encrypt nga gin-aaghat nga mag-rotate an alpabeto. An alpabeto kinahanglan ig-rotate ha paagi nga an mga letra mag-agi ngadto ha ubos nga gin-iba hin duha nga gin-iba hin duha nga mga lugar. Pananglitan: encrypt (('hi') nag-aabot hin 'lm' encrypt (('asdfghjkl') nag-aabot hin 'ewhjklnop' encrypt (('gf') nag-aabot hin 'kj' encrypt (('et') nag-aabot hin 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,war_Latn,python,"
def next_smallest(lst):
    """"""Gintagan ka hin lista hin mga integers. Isurat an function nga next_smallest (() nga nabalik an ika-2 nga pinaka-gutiay nga elemento han lista. Ibalik an Waray kon waray sugad nga elemento. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == Waray next_smallest (([1, 1]) == Waray """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,war_Latn,python,"
def is_bored(S):
    """"""An pag-uuli amo an usa nga pulong nga nagtitikang han pulong nga ""I"". An mga pulong ginbubutangan hin '.', '?' o '!'. Pananglitan: >>> is_bored ((""Hello world"") 0 >>> is_bored ((""An langit asul. An adlaw nasirang. Nahigugma ako hini nga panahon"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,war_Latn,python,"
def any_int(x, y, z):
    '''Paghimo hin function nga nag-aangkon hin 3 nga numero. Nagbalik hin totoo kon an usa han mga numero katugbang han kadamo han iba nga duha, ngan an ngatanan nga mga numero mga intehero. Nagbalik hin sayop ha bisan ano nga iba nga mga kaso. Mga ehemplo any_int{5, 2, 7) â -> True any_int{3, 2, 2) â -> False any_int{3, -2, 1) â -> True any_int{3.6, -2.2, 2) â -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,war_Latn,python,"
def encode(message):
    """"""Pagsurat hin function nga nag-aangkon hin mensahe, ngan nag-encode hin paagi nga nag-iba-iba ini han case han ngatanan nga letra, nag-ailis han ngatanan nga mga vowel ha mensahe han letra nga ma-apareho hin 2 nga mga lugar ha unahan hiton vowel ha alpabeto nga Ingles. Paghunahuna la hin mga letra. Mga pananglitan: >>> encode('test') 'TGST' >>> encode('Ini in mensahe') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,war_Latn,python,"

def skjkasdkd(lst):
    """"""An mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada mga numero nga may-ada""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,war_Latn,python,"
def check_dict_case(dict):
    """"""An ginhatag nga diksyonaryo, magbalik han Tinuod kon an ngatanan nga mga key mga string ha ubos nga letra o an ngatanan nga mga key mga string ha igbaw nga letra, iba nga pagbalik han Diri Tinuod. An funsyon kinahanglan magbalik han Diri Tinuod kon an iginhatag nga diksyonaryo waray sulod. Mga pananglitan: check_dict_case{""a"":""apple"", ""b"":""banana""}) kinahanglan magbalik han Tinuod. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) kinahanglan magbalik han Diri Tinuod. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) kinahanglan magbalik han Diri Tinuod. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) kinahanglan magbalik han Diri Tinuod. check_dict_case{""NC"":""STATE"", ""Z"":""IP""12345}) kinahanglan magbalik han Diri Tinuod.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,war_Latn,python,"
def count_up_to(n):
    """"""Paghimo hin function nga nag-aangkon hin non-negative nga integer ngan nag-aabot hin array han syahan nga n nga mga integer nga mga primo nga numero ngan mas gutiay kay han n. pananglitan: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,war_Latn,python,"
def multiply(a, b):
    """"""Pag-andam hin function nga nag-aangkon hin duha nga integers ngan nag-aabot hin product han ira unit digit. Iginpapasabot nga an input pirme na valid. Mga pananglitan: multiply ((148, 412) kinahanglan magbalik 16. multiply ((19, 28) kinahanglan magbalik 72. multiply ((2020, 1851) kinahanglan magbalik 0. multiply ((14,-15) kinahanglan magbalik 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,war_Latn,python,"
def count_upper(s):
    """"""Gintagan hin string s, i-ihap an kadamo han mga uppercase nga mga bokal ha mga par nga mga index. Pananglitan: count_upper (('aBCdEf') nagbalik hin 1 count_upper (('abcdefg') nagbalik hin 0 count_upper (('dBBE') nagbalik hin 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,war_Latn,python,"
def closest_integer(value):
    '''Paghimo hin function nga nagkuha hin value (string) nga nagrirepresentar hin numero ngan nag-abalik han pinakahirani nga integer hini. Kon an numero in igkaparehas tikang hin duha nga mga integer, pag-round ito tikang ha zero. Mga pananglitan >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Pahinumdomi: An pag-round tikang ha zero nangangahulogan nga kon an iginhatag nga numero in igkaparehas tikang hin duha nga mga integer, an usa nga kinahanglan mo ibalik amo an usa nga hirayo tikang ha zero. Para han pananglitan an closest_integer "" ((14.5"") kinahanglan magbalik hin 15 ngan an closest_integer "" ((-14.5"") kinahanglan magbalik hin -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,war_Latn,python,"
def make_a_pile(n):
    """"""Gintagan hin positibo nga integer n, kinahanglan mo maghimo hin usa nga tinambak hin n nga lebel hin mga bato. An syahan nga lebel mayda n nga bato. An kadamo han mga bato ha sunod nga lebel amo an: - an sunod nga odd nga numero kon n in odd. - an sunod nga even nga numero kon n in even. Ibalik an kadamo han mga bato ha kada lebel ha usa nga lista, diin an elemento ha index i nagrirepresentar han kadamo han mga bato ha lebel (i+1). Mga pananglitan: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,war_Latn,python,"
def words_string(s):
    """"""An imo buruhaton amo an pagbulag han string ngadto hin mga pulong ngan pagbalik hin array han mga pulong. Pananglitan: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,war_Latn,python,"
def choose_num(x, y):
    """"""Ini nga function in nagdadara hin duha nga positibo nga numero x ngan y ngan nag-aabot han pinakadako nga bisan numero nga integer nga aada ha range [x, y] nga nag-upod. Kon waray sugad nga numero, an function in kinahanglan mag-aabot hin -1. Pananglitan: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,war_Latn,python,"
def rounded_avg(n, m):
    """"""Gintagan ka hin duha nga positibo nga integers nga n ngan m, ngan an imo buruhaton amo an pag-ihap han katunga han mga integers tikang ha n ngadto ha m (upod an n ngan m). I-round an baton ngadto han pinakamaduok nga integer ngan i-convert ito ngadto ha binary. Kon an n mas dako kay ha m, i-return an -1.""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,war_Latn,python,"
def unique_digits(x):
    """"""Given an list of positive integers x. return an sorted list of all elements that has no even digit. Note: An ginbalik nga lista kinahanglan ma-sort in increasing order. Pananglitan: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,war_Latn,python,"
def by_length(arr):
    """"""Ha pag-agi hin array hin mga integers, pag-sort han mga integers nga aada ha butnga han 1 ngan 9 nga nag-upod, pag-reverse han resultant nga array, ngan pag-solo han kada digit han iya katugbang nga ngaran tikang han ""Usa"", ""Duha"", ""Tulo"", ""Upat"", ""Lima"", ""Unom"", ""Pito"", ""Walo"", ""Usa"". Pananglitan: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> pag-sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Walo"", ""Upat"", ""Tulo"", ""Duha"", ""Duha"", ""Usa"", ""Usa""] Kon an array waray sulod, pag-return hin array: arr = [] return [] Kon an array may-ada bisan ano nga strang nga numero igbalewaray ini: arr = [1, 1 , 1-55] -> arr -> [1, 1-55] -> reverse arr = [51] return - ['One' 1,'] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,war_Latn,python,"
def f(n):
    """"""I-implementar an function f nga nag-aangkon hin n nga parameter, ngan nag-aabot hin lista nga an kadako n, sugad nga an kantidad han elemento ha index i amo an factorial han i kon i par o an suma han mga numero tikang ha 1 ngadto ha i kon diri. i nagtitikang ha 1. an factorial han i amo an pag-multiplikar han mga numero tikang ha 1 ngadto ha i (1 * 2 * ... * i).""""""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,war_Latn,python,"
def even_odd_palindrome(n):
    """"""Gintagan hin positibo nga integer n, ibalik an tuple nga mayda kadamo han mga par ngan mga odd integer palindromes nga nahulog ha sakob han range ((1, n), upod an. Pananglitan1: Input: 3 Output: (1, 2) Pagsaysay: Integer palindrome mga 1, 2, 3. usa ha ira an par, ngan duha ha ira an odd. Pananglitan2: Input: 12 Output: (4, 6) Pagsaysay: Integer palindrome mga 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. upat ha ira an par, ngan 6 ha ira an odd. Pahinumdom: 1. 1 <= n <= 10^3 2. ibalik an tuple han kadamo han mga par ngan mga odd integer palindromes. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,war_Latn,python,"
def count_nums(arr):
    """"""Igsurat an function count_nums nga nagkuha hin array hin mga integers ngan nagbalik han kadamo han mga elemento nga mayda sum hin mga digit > 0. Kon an numero negatibo, an syahan nga ginpirmahan nga digit hini magigin negatibo: pananglitan -123 may mga ginpirmahan nga digit -1, 2, ngan 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,war_Latn,python,"
def move_one_ball(arr):
    """"""An aton array 'arr' hin N integers arr[1], arr[2], ..., arr[N]. An mga numero ha array in random nga gin-order. An imo buruhaton amo an pag-ihap kon posible ba nga ma-sort an array ha diri-nagkukulang nga order pinaagi han pagbuhat han masunod nga operasyon ha ginhatag nga array: Puydi ka magbuhat hin kanan-pagbalhin nga operasyon bisan pira ka beses. Usa nga kanan-pagbalhin nga operasyon nangangahulogan hin pagbalhin han ngatanan nga mga elemento han array hin usa nga posisyon ha tama nga direksyon. An kataposan nga elemento han array in mabalhin ngadto ha tinikangan nga posisyon ha array i.e. ika-0 nga index. Kon posible nga makuha an nasort nga array pinaagi han pagbuhat han operasyon ha igbaw, igbalik an True ngan iba iba iba iba iba iba iba iba nga mga resulta in False. Kon an ginhatag nga array waray sulod, igbalik an True.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,war_Latn,python,"
def exchange(lst1, lst2):
    """"""Ha hini nga problema, magbubuhat ka hin function nga nagkuha hin duha nga lista hin mga numero, ngan nagtitikadtu nga puydi ba maghimo hin pagbayloay hin mga elemento ha butnga nira basi an lst1 usa nga lista hin mga pares la nga numero. Waray limitasyon ha kadamu han mga elemento nga ginbayloay ha butnga han lst1 ngan lst2. Kon puydi magbayloay hin mga elemento ha butnga han lst1 ngan lst2 basi an ngatanan nga mga elemento han lst1 magin pares, iuli an ""YES"".""""""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,war_Latn,python,"
def histogram(test):
    """"""Gintagan hin usa nga string nga nagrirepresentar hin mga minasus-an nga letra nga ginbulag hin mga espasyo, ibalik an diksyonaryo han letra nga may-ada pinakadamo nga pag-utro ngan naglalakip han katugbang nga ihap. Kon an pipira nga mga letra may-ada amo gihapon nga pag-abot, ibalik an ngatanan ha ira. Pananglitan: histogram (('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram (('a b b a') == {'a': 2, 'b': 2} histogram (('a b c a b') == {'a': 2, 'b': 2} histogram (('b b a') == {'b 4}': histogram (('a') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,war_Latn,python,"
def reverse_delete(s,c):
    """"""An mga pakli nga may-ada mga string nga may-ada mga ngaran nga ""s"" ngan ""c"" kinahanglan i-delete an ngatanan nga mga character ha ""s"" nga katugbang han bisan ano nga character ha ""c"" ngan i-check kon an resulta nga string palindrome. An string tinatawag nga palindrome kon ini mababasa ha pareho nga paagi ha ""backward"" ngan ""forward"". Kinahanglan mo magbalik hin tuple nga may-ada han resulta nga string ngan ""True/False"" para han check. Pananglitan para han ""s"" = ""abcde"", ""c"" = ""ae"", an resulta kinahanglan magin (""bcd"", ""False"") Para han ""s"" = ""abcdef"", ""c"" = ""b"" an resulta kinahanglan magin (""acdef"", ""False"") Para han ""s"" = ""abcdedcba"", ""c"" = ""ab"", an resulta kinahanglan magin (""cdedc"", ""True"")""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,war_Latn,python,"
def odd_count(lst):
    """"""Gintagan hin lista hin mga string, diin an kada string in ginkukompwesto hin mga numero la, ibalik an lista. An kada elemento i han output in kinahanglan ""an kadamo han mga elemento nga odd ha string i han input"". diin an ngatanan nga i in kinahanglan mapulihan han kadamo han mga odd nga numero ha i'th string han input. >>> odd_count['1234567']) [""an kadamo han mga elemento nga odd 4n an str4ng 4 han 4nput.""] >>> odd_count['3',""111111""]) [""an kadamo han mga elemento nga odd 1n an str1ng 1 han 1nput."", ""an kadamo han mga elemento nga odd 8n an str8ng 8 han 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,war_Latn,python,"
def minSubArraySum(nums):
    """"""Gintagan hin array hin mga integer n, hibaroi an minimum nga suma han bisan ano nga diri-hubo nga sub-array hin mga numero.""""""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,war_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""An kada linakat amo an usa nga burabod, ngan an kada 1 ha linakat amo an usa nga yunit hin tubig. An kada burabod may-ada katugbang nga balde nga puydi gamiton ha pagkuha hin tubig tikang hito, ngan an ngatanan nga balde may-ada pareho nga kapasidad. An imo buruhaton amo an paggamit han mga balde ha pag-ubos han mga burabod. I-out an kadamu han mga higayon nga kinahanglan mo ibuslot an mga balde.""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,war_Latn,python,"
def sort_array(arr):
    """"""Ha Kata, kinahanglan mo sortahon an array han mga non-negatibo nga integers sumala han kadamo han mga usa ha ira binary representasyon ha nagtitikadako nga pagkasunodsunod. Para han sugad nga kadamo han mga usa, sortahon an base han decimal nga kantidad. Kinahanglan ini ipatuman sugad hini: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,war_Latn,python,"
def select_words(s, n):
    """"""Gintagan hin string s ngan natural nga numero n, gin-assign ka hin function nga nag-aabot hin lista han ngatanan nga mga pulong tikang ha string s nga naglalakip hin eksakto nga n nga mga konsonante, basi ini nga mga pulong magpakita ha string s. Kon an string s waray sulod, an function kinahanglan magbalik hin waray sulod nga lista. Pahinumdomi: mahimo mo hunahunaon nga an input string may-ada la mga letra ngan mga espasyo. Mga pananglitan: select_words (((""Mary had a little lamb"", 4) ==> [""little""] select_words (((""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words"" (((simple white space"", 2) ==> [] select_words (((""Hello world"", 4) ==> [""world""] select_words (((""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,war_Latn,python,"
def get_closest_vowel(word):
    """"""An imo buruhaton amo an pagbiling han gihirani nga bokal nga aada ha butnga han duha nga mga konsonante tikang ha tuo nga bahin han pulong (mahinungdanon nga pag-usisa han letra). An mga bokal ha tinikangan ngan katapusan diri gin-ihap. Ibalik an waray sulod nga string kon waray ka makabiling hin bokal nga natuman han kondisyon ha igbaw. Mahimo mo hunahunaon nga an iginhatag nga string may-ada hin Ingles nga letra la. Pananglitan: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,war_Latn,python,"
def match_parens(lst):
    '''An imo trabaho amo an pag-usisa kun posible ba nga ig-irignir an duha nga mga string ha pipira nga order, nga an resulta nga string magigin maupay. An string S ginhuhunahuna nga maupay kun ngan la kon an ngatanan nga mga parenteses ha S mga balanse. Pananglitan: an string '((()) ' maupay, samtang an string '()) ' diri. Ibalik an 'Oo' kon may-ada paagi nga maghimo hin maupay nga string, ngan ibalik an 'Diri' kon diri. Mga ehemplo: match_parens[('() ', ') ']) == 'Oo' match_parens[(') ', ') ']) == 'Diri' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,war_Latn,python,"
def maximum(arr, k):
    """"""Gintagan hin array nga may mga integer ngan positibo nga integer k, iuli an ginsorting nga lista nga may kahilaba k nga may pinakadamo nga k nga numero ha arr. Pananglitan1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Pananglitan2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Pananglitan3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Nota: 1. an kahilaba han array aada ha sakob han [1, 1000]. 2. an mga elemento ha array aada ha sakob han [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,war_Latn,python,"
def solution(lst):
    """"""Gintagan hin diri-hubo nga lista hin mga integers, ibalik an suma han ngatanan nga mga elemento nga diri-pares nga aada ha bisan ano nga mga posisyon. Mga pananglitan nga solusyon (([5, 8, 7, 1]) ==> 12 nga solusyon (([3, 3, 3, 3, 3]) ==> 9 nga solusyon (([30, 13, 24, 321]) ==>0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,war_Latn,python,"
def add_elements(arr, k):
    """"""Gintagan hin diri-hubo nga array hin mga integer arr ngan hin integer k, ibalik an suma han mga elemento nga may-ada duha nga mga digit tikang han syahan nga k nga mga elemento han arr. Pananglitan: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,war_Latn,python,"
def get_odd_collatz(n):
    """"""An Collatz nga paghinuhuna in usa nga paghinuhuna ha matematika nga may kalabotan hin sunod-sunod nga ginhulagway sugad han masunod: pagtikang hin bisan ano nga positibo nga numero nga n. Katapos an kada termino ginkuha tikang han una nga termino sugad han masunod: kon an una nga termino par, an sunod nga termino amo an katunga han una nga termino. Kon an una nga termino par, an sunod nga termino amo an 3 ka beses han una nga termino dugang 1. An paghinuhuna amo nga bisan ano nga kantidad han n, an sunod-sunod nga numero maabot gihapon han 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,war_Latn,python,"
def valid_date(date):
    """"""An petsa in balido kun an petsa balido, kun waray iba nga balido, kun an petsa balido. An petsa balido kun an ngatanan nga masunod nga mga lagda in nasunod: 1. An petsa diri waray sulod. 2. An kadamu han mga adlaw diri mas gutiay kay han 1 o labaw pa kay han 31 ka adlaw para han mga bulan 1,3,5,7,8,10,12. Ngan an kadamu han mga adlaw diri mas gutiay kay han 1 o labaw pa kay han 30 ka adlaw para han mga bulan 4,6,9,11. Ngan, an kadamu han mga adlaw diri mas gutiay kay han 1 o labaw pa kay han 29 para han bulan 2. 3. An mga bulan diri mas gutiay kay han 1 o labaw pa kay han 12. 4. An petsa kinahanglan ha pormat: mm-dd-yyyy para han pananglitan: valid_date (('03-11-2000') => true_date (valid) => false_date (valid) => valid_date (valid) => false_date (valid) => false_date (valid)""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,war_Latn,python,"
def split_words(txt):
    '''Gintagan hin usa nga string hin mga pulong, ibalik an lista hin mga pulong nga ginbahin ha mga putli nga lugar, kon waray mga putli nga lugar ha teksto kinahanglan mo ibalik an mga comma ',' kon waray mga comma kinahanglan mo ibalik an kadamu han mga letra nga may-ada gutiay nga letra nga may-ada gan-iba nga pagkasunodsunod ha alpabeto, ord ((('a') = 0, ord ((('b') = 1, ... ord ((('z') = 25 Mga pananglitan split_words (((""Hello world!"") â -> [""Hello"", ""world!""] split_words (((""Hello,world!"") â -> [""Hello"", ""world!"" split_words (((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,war_Latn,python,"
def is_sorted(lst):
    '''Gintagan hin lista hin mga numero, ibalik an mga numero kun gin-uurusa ba o diri an mga numero ha nagtitikadako nga pagkasunodsunod. Kon an lista may-ada labaw hin 1 duplikado han amo gihapon nga numero, ibalik an False. Paghunahuna nga waray negatibo nga mga numero ngan mga intehero la. Mga ehemplo is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,war_Latn,python,"
def intersection(interval1, interval2):
    """"""An interbensyon han mga interbensyon (1, 3), (2, 4) amo an (2, 3) nga an kahilaba hini amo an 1, nga diri usa nga primo nga numero. Kon an kahilaba han interbensyon usa nga primo nga numero, ibalik an ""YES"", kon diri, ibalik an ""NO"". Kon an duha nga interbensyon diri mag-intersect, ibalik an ""NO"". [input/output] samples: intersection (((1, 2), (2, 3) ==> ""intersection ((-1, 1) ""), intersection (===0) "" (0, 4) ""NO"" - 5 (1), ===== ((-3, 5) ""YES"" ))""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,war_Latn,python,"
def prod_signs(arr):
    """"""Gintagan ka hin array hin mga integer ngan kinahanglan mo magbalik han kadamo han mga magnitudo han mga integer nga gin-multiply han produkto han ngatanan nga mga tigaman han kada numero ha array, nga ginrirepresentar han 1, -1 o 0.""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,war_Latn,python,"
def minPath(grid, k):
    """"""Ha paghatag hin grid nga may N nga mga hilera ngan N nga mga kolum (N >= 2) ngan usa nga positibo nga integer k, an kada selula han grid mayda usa nga kantidad. An kada integer ha sakob [1, N * N] nga nag-upod nagpapakita hin eksakto nga makausa ha mga selula han grid. Kinahanglan mo nga hiagian an minimum nga dalan han kahilaba k ha grid. Mahimo ka magtikang tikang ha bisan ano nga selula, ngan ha kada pitad mahimo ka magbalhin ngadto ha bisan ano nga mga kasingkasing nga selula, ha iba nga mga pulong, mahimo ka nga kumadto ha mga selula nga nag-uurusa hin gilid ha imo yana nga selula. Alayon tigamni nga an usa nga dalan han kahilaba k nangangahulogan nga pagbisita hin eksakto nga k nga mga selula (diri kinahanglan nga magkalainlain). DIRI KA MAG-gawas ha grid. An dalan A (han kahilaba k) in gintatagad nga mas gutiay kay han dalan B (han kahilaba k) kon katapos paghimo han mga ginsusaran nga lista han mga kantidad ha mga selula nga A ngan B (gintawag naton hira nga l_stA ngan l_stA), an l_stB nga i_st), an l_st nga lexically mas guti_A_st_, mas gutiay nga ihap nga ihap nga ihap ha ihap inagian han i_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in_in""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,war_Latn,python,"
def tri(n):
    """"""An ngatanan maaram han sunodsunod nga Fibonacci, ini in gin-aram hin hilarom han mga matematiko ha urhi nga duha ka siglo. Kondi, an mga tawo diri maaram han sunodsunod nga Tribonacci. An sunodsunod nga Tribonacci in ginhulagway han pag-balik: tri(1) = 3 tri(n) = 1 + n / 2, kon an n amo an bisan. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), kon an n in odd. Pananglitan: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Gintagan ka hin non-negative nga numero nga integer n, kinahanglan mo magbalik hin lista han syahan nga n + 1 nga mga numero han sunodsunod nga Tribonacci. Mga pananglitan: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,war_Latn,python,"
def digits(n):
    """"""Gintagan hin positibo nga integer n, ibalik an produkto han mga ganansya nga mga numero. Ibalik an 0 kon an ngatanan nga mga numero mga pares. Pananglitan: mga numero ((1) == 1 mga numero ((4) == 0 mga numero ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,war_Latn,python,"
def is_nested(string):
    '''Paghimo hin function nga nag-aangkon hin string nga input nga may-ada la mga square brackets. An function kinahanglan magbalik hin Tinuod kon ngan kon may-ada balido nga sub-suksensya hin mga bracket nga may-ada hin usa nga bracket nga nasulod. is_nested'[[]]') â -> Tinuod is_nested'[[]]]]]]]]][[[[[]') â -> Palso is_nested'[][]') â -> Palso is_nested'[]') â -> Palso is_nested'[[][]]') â -> Tinuod is_nested'[[]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,war_Latn,python,"

def sum_squares(lst):
    """"""An mga numero in ginhatag ha imo. Kinahanglan mo igbalik an kadamo han mga numero nga ika-kwadrado ha iginhatag nga lista, pag-round an kada elemento ha lista ngadto ha igbaw nga int ((Ceiling) una. Mga pananglitan: Para han lst = [1,2,3] an output kinahanglan magin 14 Para han lst = [1,4,9] an output kinahanglan magin 98 Para han lst = [1,3,5,7] an output kinahanglan magin 84 Para han lst = [1.4,4.2,0] an output sadang magin 29 Para han lst = [-2.4,1,1] an output sadang magin 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,war_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Paghimo hin function nga nag-abalik hin Tinuod kon an kataposan nga karakter han ginhatag nga string usa nga alpabeto nga karakter ngan diri bahin han usa nga pulong, ngan Diri-Tinuod kon diri. Pahinumdumi: ""pulong"" usa nga grupo hin mga karakter nga ginbulag hin espasyo. Mga pananglitan: check_if_last_char_is_a_letter"" ""apple pie"") â -> Diri-Tinuod check_if_last_char_is_a_letter"" ""apple pi e"") â -> Tinuod check_if_last_char_is_a_letter"" ""apple pi e"") â -> Diri-Tinuod check_if_last_char_is_a_letter"" ""'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,war_Latn,python,"
def can_arrange(arr):
    """"""Paghimo hin function nga nag-abalik han pinakadako nga index hin elemento nga diri mas dako o katugbang han elemento nga nag-uuna ha iya. Kon waray sugad nga elemento dida na, balikon an -1. An iginhatag nga array diri mag-aada hin duplicate nga mga kantidad. Mga pananglitan: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,war_Latn,python,"
def largest_smallest_integers(lst):
    '''Paghimo hin function nga nag-aabot hin tuple (a, b), diin an 'a' amo an gidadakoi han negatibo nga mga integers, ngan an 'b' amo an gigutiayi han positibo nga mga integers ha lista. Kon waray negatibo o positibo nga mga integers, ibalik hira nga Waray. Mga pananglitan: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (Waray, 1) largest_smallest_integers([]) == (Waray, Waray) largest_smallest_integers[0]) == (Waray, Waray) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,war_Latn,python,"
def compare_one(a, b):
    """"""Paghimo hin function nga nag-aangkon hin mga integer, floats, o mga string nga nagrirepresentar hin mga tinuod nga numero, ngan nag-aabot han mas dako nga variable ha igintapod nga klase hin variable. Nagbalik hin Waray kon an mga kantidad pareho. Pahinumdumi: Kon an tinuod nga numero ginrepresentar nga usa nga string, an nag-aabante nga punto bangin . o , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> Waray """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,war_Latn,python,"
def is_equal_to_sum_even(n):
    """"""I-evaluate kun an ginhatag nga numero n puydi igsurat nga suma han eksakto nga 4 nga positibo nga mga numero nga pares. Pananglitan is_equal_to_sum_even ({4) == Diri tinuod is_equal_to_sum_even ({6) == Diri tinuod is_equal_to_sum_even ({8) == Tinuod """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,war_Latn,python,"
def special_factorial(n):
    """"""An Brazil nga factorial ginhulagway sugad nga: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! diin n > 0 Pananglitan: >>> special_factorial ((4) 288 An function makarawat hin integer sugad nga input ngan kinahanglan magbalik han special factorial hini nga integer. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,war_Latn,python,"
def fix_spaces(text):
    """"""_Sag-an-3 text string, igliwat an ngatanan nga mga espasyo hini hin mga underscores, ngan kon an usa nga string mayda labaw pa hin 2 nga sunodsunod nga mga espasyo, igliwat an ngatanan nga sunodsunod nga mga espasyo hin - fix_spaces ((""Huhuhimo"") == ""Huhimo"" fix_spaces ((""Huhimo1"") == ""Huhimo1"" fix_spaces (((""Huhimo2"") == ""_Huhimo2"" fix_spaces ((""Huhimo 3"") == ""_Huhimo-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,war_Latn,python,"
def file_name_check(file_name):
    """"""Paghimo hin function nga nag-aangkon hin string nga nagrirepresentar han ngaran hin file, ngan nag-aabot hin 'Yes' kon an ngaran han file balido, ngan nag-aabot hin 'No' kon diri. An ngaran hin file ginhuhunahuna nga balido kon ngan la kon an ngatanan nga masunod nga mga kondisyon natuman: - Diri angay may sobra tulo nga mga numero ('0'-'9') ha ngaran han file. - An ngaran han file may-ada eksakton nga usa nga punto '.' - An substring ha atubangan han punto kinahanglan diri ma-hubo, ngan ini magtikang hin letra tikang han Latin alphapet ('a'-'z' ngan 'A''-Z'). - An substring katapos han punto kinahanglan usa hini: ['txt', 'exe', 'lld'] Mga pananglitan: file_name_check""{example.txt.} # => 'Yes' file_name_check""{example.dll.1} => 'No' (an ngaran kinahanglan magtikang hin letra nga Latin alphapet) #""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,war_Latn,python,"


def sum_squares(lst):
    """""""" Ini nga function magkuha hin lista hin mga integers. Para han ngatanan nga mga entry dida han lista, an function kinahanglan mag-square han integer entry kon an index hini in multiplo han 3 ngan mag-cube han integer entry kon an index hini in multiplo han 4 ngan diri multiplo han 3. An function diri magbabago han mga entry dida han lista nga an mga index diri multiplo han 3 o 4. An function kinahanglan magbalik han sum han ngatanan nga mga entry. Mga ehemplo: Para han lst = [1,2,3] an output kinahanglan 6 Para han lst = [] an output kinahanglan 0 Para han lst = [-1,-5,2,-1,-5] an output kinahanglan -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,war_Latn,python,"
def words_in_sentence(sentence):
    """"""An mga pulong nga gin-ihap ha string in gin-ihap ha string nga may-ada mga pulong nga ginbulag hin mga espasyo, ngan kinahanglan mo ibalik an string nga may-ada mga pulong tikang han orihinal nga sentence, nga an mga kahilaba hini mga prime nga numero, an pagkasunodsunod han mga pulong ha bag-o nga string kinahanglan pareho han orihinal nga usa. Pananglitan1: Input: sentence = ""This is a test"" Output: ""is"" Pananglitan2: Input: sentence = ""let go for swimming"" Output: ""go for"" Mga pagdili: * 1 <= len(sentence) <= 100 * sentence in naglalakip la hin mga letra """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,war_Latn,python,"
def simplify(x, n):
    """"""An iyo buruhaton amo an pag-implementar hin function nga magsasimple han expression nga x * n. An function in nag-aabot hin True kon an x * n in nag-aapresentar hin usa nga entero nga numero ngan False kon diri. An duha nga x ngan n, in mga representasyon hin string han usa nga fraction, ngan may-ada han masunod nga format, <numerator>/<denominator> diin an numerator ngan denominator mga positibo nga entero nga numero. Mahimo ka maghunahuna nga an x, ngan n mga valid nga fraction, ngan waray zero nga denominator. simplify "" 1/5"", ""5/1"") = True simplify "" 1/6"", ""2/1"") = False simplify "" 7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,war_Latn,python,"
def order_by_points(nums):
    """"""Pagsurat hin function nga nagsusuri han ginhatag nga lista hin mga integers ha nagtitikadako nga pagkasunodsunod sumala han kadamo han ira mga digit.""""""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,war_Latn,python,"
def specialFilter(nums):
    """"""Isurat an usa nga function nga nag-aangkon hin array hin mga numero sugad nga input ngan nag-aabot han kadamo han mga elemento dida han array nga mas dako kay han 10 ngan an una ngan kataposan nga mga numero han usa nga numero mga ganon (1, 3, 5, 7, 9). Pananglitan: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,war_Latn,python,"
def get_max_triples(n):
    """"""Gintagan ka hin positibo nga integer n. Kinahanglan mo maghimo hin integer array nga an gitas-on n. Para han kada i (1 ‰¤ i ‰¤ n), an kantidad han a[i] = i * i - i + 1. Ibalik an kadamo han mga triple (a[i], a[j], a[k]) han a diin i < j < k, ngan an a[i] + a[j] + a[k] usa nga multiplikado han 3. Pananglitan: Input: n = 5 Output: 1 Pagsaysay: an a = [1, 3, 7, 13, 21] An amo la nga balido nga triple amo an (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,war_Latn,python,"
def bf(planet1, planet2):
    '''Mayda walo nga mga planeta ha aton solar system: an hirani ha adlaw amo an Mercury, an sunod amo an Venus, ngan an Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Isurat in usa nga function nga nagkuha hin duha nga ngaran han planeta sugad nga mga string nga planet1 ngan planet2. An function kinahanglan magbalik hin tuple nga naglalakip han ngatanan nga mga planeta nga an mga orbit aada ha butnga han orbit han planet1 ngan orbit han planet2, nga ginsusortar pinaagi han pagkahirani ha adlaw. An function kinahanglan magbalik hin waray sulod nga tuple kon an planet1 o planet2 diri husto nga ngaran han planeta. Mga ehemplo bf""{\displaystyle bf""{\displaystyle bf} , ""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf{\displaystyle bf} , ""Earth"", ""Mercury"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,war_Latn,python,"
def sorted_list_sum(lst):
    """"""Pagsurat hin function nga makarawat hin lista hin mga string sugad nga parameter, nag-a-delete han mga string nga may-ada mga odd nga kahilaba tikang hini, ngan nag-abalik han resulta nga lista nga may-ada mga gin-sort order, An lista pirme usa nga lista hin mga string ngan diri gud usa nga array hin mga numero, ngan bangin may-ada ini mga duplikado. An order han lista kinahanglan mag-ascenso ha kahilaba han kada pulong, ngan kinahanglan mo ibalik an lista nga gin-sort pinaagi hiton nga lagda. Kon duha nga pulong may-ada pareho nga kahilaba, i-sort an lista ha alpabetiko nga paagi. An function kinahanglan mag-ibalik hin lista hin mga string ha gin-sort order. Mahimo mo hunahunaon nga an ngatanan nga mga pulong may-ada pareho nga kahilaba. Pananglitan: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,war_Latn,python,"
def x_or_y(n, x, y):
    """"""Usa nga simple nga programa nga kinahanglan magbalik han balor han x kon an n usa nga primo nga numero ngan kinahanglan magbalik han balor han y kon diri. Mga pananglitan: para han x_or_y(7, 34, 12) == 34 para han x_or_y(15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,war_Latn,python,"
def double_the_difference(lst):
    '''Gintagan hin lista hin mga numero, ibalik an kadamo han mga kuadrado han mga numero ha lista nga mga gantugi. Pagbalewaray han mga numero nga negatibo o diri mga integers. doble_an_diferensya (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doble_an_diferensya (([-1, -2, 0]) == 0 doble_an_diferensya (([9, -2]) == 81 doble_an_diferensya (([0]) == 0 Kon an input nga lista waray, ibalik an 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,war_Latn,python,"
def compare(game,guess):
    """"""Naghuhunahuna ako nga kita ngatanan nahinunumduman nga pagbati kon an resulta han pipira nga maiha-ginhuhulat nga hitabo ha kataposan hinbabaroan. An mga pagbati ngan mga hunahuna nga ikaw may dida nga gutom nga panahon sigurado nga takos han pag-obserbar ngan pag-ihap. An imo buruhaton amo an pag-ihap kon an usa ka tawo husto nga naghuhunahuna han mga resulta han pipira nga mga tugma. Gintagan ka hin duha nga array han mga score ngan mga pag-ihap han pareho nga kahilaba, diin an kada index nagpapakita hin usa nga tugma. Ibalik an array han pareho nga kahilaba nga nagpapasabot kon mationan-o kaharayo an kada pag-ihap. Kon husto an ira pag-ihap, an kantidad amo an 0, ngan kon diri, an kantidad amo an hingpit nga kaibhan ha butnga han pag-ihap ngan han score. pananglitan: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,4,0,1,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,war_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""An gahum han extension amo an masunod: An CAP amo an kadamo han mga letra nga uppercase ha ngaran han extension, ngan an SM amo an kadamo han mga letra nga lowercase ha ngaran han extension, an gahum iginhatag han fraction nga CAP - SM. Kinahanglan mo pamiling han pinakamakusog nga extension ngan ibalik an string ha format nga: ClassName.StrongestExtensionName. Kon mayda duha o labaw pa nga mga extension nga mayda pareho nga gahum, kinahanglan mo pilion an una nga naabot ha lista. Pananglitan, kon gintagan ka hin ""Slices"" sugad nga klase ngan lista han mga extension: ['SEviviRNGliSCes', 'Cheese', 'StuFfed'] kinahanglan mo ibalik an 'Slices.SEviRNGliS' tungod kay an extension amo an pinakamakusog nga extension. =='MySviRNGliS' (Extension: StrongestExtensionName) ', ['AA_Beats'], para han Example, 'AA_Beats' in pinakamakusog nga extension.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,war_Latn,python,"
def cycpattern_check(a , b):
    """"""Gintagan ka hin 2 nga mga pulong. Kinahanglan mo magbalik hin Tinuod kon an ikaduha nga pulong o bisan ano han mga pag-ikot hini usa nga substring ha syahan nga pulong cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => Tinuod nga cycpattern_check (((""whassup"",""psus"") => Tinuod nga cycpattern_check (((""abab"",""baa"") => Tinuod nga cycpattern_check (((""efef"",""eeff"") => Tinuod nga cycpattern_check (((hims"",""simen"") => Tinuod """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,war_Latn,python,"
def even_odd_count(num):
    """"""Given an integer. return an tuple that has the number of even and odd digits respectively. Example: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,war_Latn,python,"
def int_to_mini_roman(number):
    """"""Gintagan hin positibo nga integer, kuha an iya Romano nga numero nga katugbang sugad hin usa nga string, ngan ibalik ini ha minos nga letra. Mga pagdumara: 1 <= num <= 1000 Mga pananglitan: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,war_Latn,python,"
def right_angle_triangle(a, b, c):
    '''An mga katulinan han usa nga right-angled triangle in usa nga triangle nga an usa nga anggulo amo an 90 degree. Pananglitan: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,war_Latn,python,"
def find_max(words):
    """"""Pag-andam hin function nga makakarawat hin lista hin mga string. An lista in naglalakip hin iba-iba nga mga pulong. Ibalik an pulong nga may-ada pinakadamo nga kadamo hin mga talagsaon nga mga karakter. Kon an damo nga mga string may-ada pinakadamo nga kadamo hin mga talagsaon nga mga karakter, ibalik an usa nga nauna ha leksikograpiko nga pagkasunodsunod.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,war_Latn,python,"
def eat(number, need, remaining):
    """"""Ikaw in gutom nga koneho, ngan nakaon ka na hin pipira nga karot, kundi yana kinahanglan ka kumaon hin dugang nga karot basi makompleto an pagkaon han adlaw. kinahanglan mo magbalik hin array nga [total nga kadamo han mga karot nga nakaon katapos han imo pagkaon, an kadamo han mga karot nga nahibilin katapos han imo pagkaon] kon waray igo nga mga karot nga nahibilin, kakaonon mo an ngatanan nga nahibilin nga karot, pero gugutomon pa gihapon. Pananglitan: * kaon ((5, 6, 10) -> [11, 4] * kaon ((4, 8, 9) -> [12, 1] * kaon ((1, 10, 10) -> [11, 0] * kaon ((2, 11, 5) -> [7, 0] Mga variable: @number: integer an kadamo han mga karot nga imo nakaon. @need: integer an kadamo han mga karot nga imo kinahanglan kaonon. @remaining: integer an nahibilin nga kadamo han mga karot nga aada ha stock. Constrain: * 0= <= 0 * 1000 <= 0 * 1000: <= 1000: pag-abot han nahibilin nga karot nga nahibilin = 1000 = """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,war_Latn,python,"
def do_algebra(operator, operand):
    """"""An una nga lista mayda mga base nga algebra nga operasyon, ngan an ikaduha nga lista usa nga lista hin mga integers. Gamiton an duha nga iginhatag nga lista para maghimo hin algebra nga ekspresyon ngan ibalik an evaluasyon hini nga ekspresyon. An mga base nga algebra nga operasyon: Pagdarag-on (+) Pag-iban (-)) Pagkadag-an (*) Pagbahin han salog (//) Pag-eksponensyal (**) Pananglitan: operator['+', '*', '-'] array = [2, 3, 4, 5] resulta = 2 + 3 * 4 - 5 => resulta = 9 Pahinumdomi: An kahilaba han lista han mga operator katugbang han kahilaba han lista han mga operand minus usa. An operand usa nga lista hin mga non-negatibo nga integers. An operator mayda hin usa nga list nga operator, ngan an operand list mayda hin duha nga operand. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,war_Latn,python,"
def solve(s):
    """"""An mga function in ginhatag hin string nga may-ada mga letra nga ""s"". kon an ""s"" usa nga letra, balik-a an iya case tikang ha ubos ngadto ha igbaw o vice versa, kon diri, tipigi ini nga sugad han yana. kon an string waray mga letra, balik-a an string. An function in kinahanglan magbalik han resulta nga string. Mga pananglitan solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,war_Latn,python,"
def string_to_md5(text):
    """"""Gintagan hin string 'text', ibalik an md5 nga katugbang nga string han hash. Kon an 'text' usa nga waray sulod nga string, ibalik an Waray. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,war_Latn,python,"
def generate_integers(a, b):
    """"""Gintagan hin duha nga positibo nga mga integers a ngan b, ibalik an bisan mga numero ha butnga han a ngan b, ha nagtitikadako nga pagkasunodsunod. Pananglitan: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
