task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,gla_Latn,pl,"# an t-suim a thugadh. # Thoir sùil a bheil ann an sreath de àireamhan, tha dà àireamhan nas fhaisge air a chèile na # >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
# """"
# >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
# 1
sub has_close_elements {
    my($numbers, $threshold) = @_;
","sub has_close_elements {
    my($numbers, $threshold) = @_;
    
    for my $i (0 .. @$numbers - 2) {
        for my $j ($i + 1 .. @$numbers - 1) {
            if (abs($numbers->[$i] - $numbers->[$j]) < $threshold) {
                return 1;
            }
        }
    }
    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&has_close_elements;
        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_1,gla_Latn,pl,"# Na gabh aire do na seòmraichean sam bith anns an t-sreang inntrigidh.# Tha buidhnean air leth cothromach (tha gach brace fosgailte air a dhùnadh gu ceart) agus chan eil iad air an neadachadh a-staigh a chèile # sgaradh na buidhne sin ann an sreathan fa leth agus tilleadh an sreath dhiubh sin. # Tha an t-ionad a-steach don fheart seo na sreang a tha a 'toirt a-steach grunn bhuidhnean de phràinteasan neadaichte. Is e an t-amas agad # >>> separate_paren_groups(""( ) (( )) (( )( ))"")
# [""()"", ""(())"", ""(()())""]
sub separate_paren_groups {
    my($paren_string) = @_;
","sub separate_paren_groups {
    my ($paren_string) = @_;
    $paren_string =~ s/\s+//g;  # Remove all spaces
    my @groups;
    my $balance = 0;
    my $current_group = """";
    
    foreach my $char (split //, $paren_string) {
        if ($char eq '(') {
            $balance++;
        }
        if ($char eq ')') {
            $balance--;
        }
        $current_group .= $char;
        if ($balance == 0 && $current_group ne """") {
            push @groups, $current_group;
            $current_group = """";
        }
    }
    
    return \@groups;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&separate_paren_groups;
        if(eq_deeply($candidate->(""(()()) ((())) () ((())()())""),[""(()())"", ""((()))"", ""()"", ""((())()())""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""() (()) ((())) (((())))""),[""()"", ""(())"", ""((()))"", ""(((())))""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(()(())((())))""),[""(()(())((())))""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""( ) (( )) (( )( ))""),[""()"", ""(())"", ""(()())""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_2,gla_Latn,pl,"# Cuir air ais pàirt deichealach an àireimh. # (tha an còrr a 'fuireach nas lugha na 1)# agus pàirt de dh 'iomlan (iomlan as motha nas lugha na àireamh a chaidh a thoirt seachad) agus deicheamail # Le àireamh adhartach aig puing-cinn-cinn, faodar a bhriseadh sìos gu # >>> truncate_number(3.5)
# 0.5
sub truncate_number {
    my($number) = @_;
","sub truncate_number {
    my($number) = @_;
    my $integer_part = int($number);
    my $decimal_part = $number - $integer_part;
    return $decimal_part;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&truncate_number;
        if(eq_deeply($candidate->(3.5),0.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1.25),0.25)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(123.0),0.0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_3,gla_Latn,pl,"# aig an àm sin bu chòir gnìomh a thilleadh 1. Mura h-eil, bu chòir dha a thilleadh ''.# Tha an obair agad a bhith a 'lorg ma tha aig àm sam bith an cothromachadh cunntas a' tuiteam fo neoni, agus # Tha thu air a thoirt seachad sreath de tasgadh agus tarraing air ais gnìomhan air cunntas banca a 'tòiseachadh le # >>> below_zero([1, 2, 3])
# """"
# >>> below_zero([1, 2, -4, 5])
# 1
sub below_zero {
    my($operations) = @_;
","sub below_zero {
    my ($operations) = @_;
    my $balance = 0;
    
    for my $operation (@$operations) {
        $balance += $operation;
        if ($balance < 0) {
            return 1;
        }
    }
    
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&below_zero;
        if(eq_deeply($candidate->([]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, -3, 1, 2, -3]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, -4, 5, 6]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -4]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -5]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -2, 2, -2, 5, -5, 4, -4]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_4,gla_Latn,pl,"# MAD = cuibheasach. x - x_mean. # eileamaid agus meadhan-phuing (mean ann an cùis seo): # Tha Mean Absolute Deviation na eadar-dhealachadh cuibheasach eadar gach # timcheall air meadhan an t-suidheachaidh dàta seo. # Airson sreath de dh'àireamhan inntrigidh, a 'cunntadh Mean Absolute Deviation # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
# 1.0
sub mean_absolute_deviation {
    my($numbers) = @_;
","sub mean_absolute_deviation {
    my ($numbers) = @_;
    my $n = scalar @$numbers;
    return 0 if $n == 0;

    # Calculate mean
    my $sum = 0;
    $sum += $_ for @$numbers;
    my $mean = $sum / $n;

    # Calculate mean absolute deviation
    my $total_deviation = 0;
    $total_deviation += abs($_ - $mean) for @$numbers;
    return $total_deviation / $n;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&mean_absolute_deviation;
        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_5,gla_Latn,pl,"# Cuir a-steach àireamh ""delimeter"" eadar gach dà eileamaid às dèidh a chèile de shreath inntrigidh ∀àireamhan"" # >>> intersperse([], 4)
# []
# >>> intersperse([1, 2, 3], 4)
# [1, 4, 2, 4, 3]
sub intersperse {
    my($numbers, $delimeter) = @_;
","my @result;
    for (my $i = 0; $i < @$numbers; $i++) {
        push @result, $numbers->[$i];
        push @result, $delimeter if $i < @$numbers - 1;
    }
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&intersperse;
        if(eq_deeply($candidate->([], 7),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 2, 2], 2),[2, 2, 2, 2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_6,gla_Latn,pl,"# Mar eisimpleir, tha dà ìre de chnàmh aig (() (()) agus trì aig ((()). # Airson gach buidheann, cuir a-mach an ìre as doimhne de chnàmh-chnuic nam parentheses. # Tha an gnìomh seo a' cur a-steach sreang a tha a' riochdachadh iomadh buidheann airson bràithrean snàthaichte air an sgaradh le spàisean.# >>> parse_nested_parens(""(()()) ((())) () ((())()())"")
# [2, 3, 1, 3]
sub parse_nested_parens {
    my($paren_string) = @_;
","sub parse_nested_parens {
    my($paren_string) = @_;
    my @groups = split / /, $paren_string;
    my @depths;

    foreach my $group (@groups) {
        my $max_depth = 0;
        my $current_depth = 0;
        foreach my $char (split //, $group) {
            if ($char eq '(') {
                $current_depth++;
                if ($current_depth > $max_depth) {
                    $max_depth = $current_depth;
                }
            } elsif ($char eq ')') {
                $current_depth--;
            }
        }
        push @depths, $max_depth;
    }
    
    return \@depths;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&parse_nested_parens;
        if(eq_deeply($candidate->(""(()()) ((())) () ((())()())""),[2, 3, 1, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""() (()) ((())) (((())))""),[1, 2, 3, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(()(())((())))""),[4])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_7,gla_Latn,pl,"# Filter a-steach sreath de shreathan a-mhàin airson feadhainn a tha a 'toirt a-steach substring # >>> filter_by_substring([], ""a"")
# []
# >>> filter_by_substring([""abc"", ""bacd"", ""cde"", ""array""], ""a"")
# [""abc"", ""bacd"", ""array""]
sub filter_by_substring {
    my($strings, $substring) = @_;
","sub filter_by_substring {
    my ($strings, $substring) = @_;
    my @filtered = grep { index($_, $substring) != -1 } @$strings;
    return \@filtered;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&filter_by_substring;
        if(eq_deeply($candidate->([], ""john""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xx""),[""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""grunt"", ""trumpet"", ""prune"", ""gruesome""], ""run""),[""grunt"", ""prune""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_8,gla_Latn,pl,"# Bu chòir gum bi suim falamh co-ionann ri 0 agus bu chòir gum bi toradh falamh co-ionann ri 1. # Airson sreath de dh'àireamhan iomlan, tilleadh sreath a tha a' gabhail a-steach suim agus toradh nan àireamhan iomlan ann an sreath. # >>> sum_product([])
# [0, 1]
# >>> sum_product([1, 2, 3, 4])
# [10, 24]
sub sum_product {
    my($numbers) = @_;
","sub sum_product {
    my ($numbers) = @_;
    my $sum = 0;
    my $product = 1;
    
    foreach my $num (@$numbers) {
        $sum += $num;
        $product *= $num;
    }
    
    return [$sum, $product];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sum_product;
        if(eq_deeply($candidate->([]),[0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 1]),[3, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, 0]),[100, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 5, 7]),[15, 105])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([10]),[10, 10])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_9,gla_Latn,pl,"# ann an sreath.# Bho raon de dh'àireamhan iomlan, cruthaich sreath de eileamaid as motha a tha air a lorg gu àm sònraichte # >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
# [1, 2, 3, 3, 3, 4, 4]
sub rolling_max {
    my($numbers) = @_;
","sub rolling_max {
    my ($numbers) = @_;
    my @result;
    my $max = $numbers->[0];
    
    for my $num (@$numbers) {
        $max = $num if $num > $max;
        push @result, $max;
    }
    
    return \@result;
}

# Example usage
my $result = rolling_max([1, 2, 3, 2, 3, 4, 2]);
print ""@$result\n"";  # Outputs: 1 2 3 3 3 4 4","use Test::Deep;


sub testhumaneval {
    my $candidate = \&rolling_max;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 3, 2, 1]),[4, 4, 4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_10,gla_Latn,pl,"# - Cuir ri deireadh an sreath air ais de ro-chruaidh sreath a tha a 'tighinn ron fhilleadh palindromic. # - Lorg an postfix as fhaide de shreang a chaidh a thoirt seachad a tha na palindrome. # Tha beachd algorithm sìmplidh: # Lorg am palindrome as giorra a tha a 'tòiseachadh le sreang a chaidh a thoirt seachad. # >>> make_palindrome("""")
# """"
# >>> make_palindrome(""cat"")
# ""catac""
# >>> make_palindrome(""cata"")
# ""catac""
sub make_palindrome {
    my($string) = @_;
","sub make_palindrome {
    my($string) = @_;

    # Helper function to check if a substring is a palindrome
    sub is_palindrome {
        my ($sub) = @_;
        return $sub eq reverse $sub;
    }

    # If the whole string is a palindrome, return it
    if (is_palindrome($string)) {
        return $string;
    }

    # Check for the longest palindromic suffix
    my $length = length($string);
    for (my $i = $length; $i >= 0; $i--) {
        my $suffix = substr($string, $i);
        if (is_palindrome($suffix)) {
            my $prefix = substr($string, 0, $i);
            return $string . reverse($prefix);
        }
    }

    # If no palindromic suffix is found, append the reverse of entire string minus the first character
    return $string . reverse(substr($string, 1));
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&make_palindrome;
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""x""),""x"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xyz""),""xyzyx"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xyx""),""xyx"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""jerry""),""jerryrrej"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_11,gla_Latn,pl,"# Dèan XOR dà-shluagh air na h-ionadan seo agus tilleadh toradh cuideachd mar shreang. # Tha a-steach dà shreath a agus b a tha a-mhàin de 1s agus 0s. # >>> string_xor(""010"", ""110"")
# ""100""
sub string_xor {
    my($a, $b) = @_;
","my @a_bits = split //, $a;
    my @b_bits = split //, $b;
    my $result = '';

    for my $i (0 .. $#a_bits) {
        $result .= $a_bits[$i] ^ $b_bits[$i];
    }

    return $result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&string_xor;
        if(eq_deeply($candidate->(""111000"", ""101010""),""010010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1"", ""1""),""0"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""0101"", ""0000""),""0101"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_12,gla_Latn,pl,"# Bidh e a' tilleadh undef ma tha an sreath inntrigidh falamh.# A-mach à sreath de shreathan, tilleadh an tè as fhaide. Tilleadh a 'chiad fhear ma tha grunn # >>> longest([])
# undef
# >>> longest([""a"", ""b"", ""c""])
# ""a""
# >>> longest([""a"", ""bb"", ""ccc""])
# ""ccc""
sub longest {
    my($strings) = @_;
","sub longest {
    my ($strings) = @_;
    return undef if !@$strings;

    my $longest = $strings->[0];
    foreach my $string (@$strings) {
        if (length($string) > length($longest)) {
            $longest = $string;
        }
    }
    return $longest;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&longest;
        if(eq_deeply($candidate->([]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""x"", ""y"", ""z""]),""x"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""]),""zzzz"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_13,gla_Latn,pl,"# Thoir air ais an roinntear cumanta as motha de dhà àireamh iomlan a agus b # >>> greatest_common_divisor(3, 5)
# 1
# >>> greatest_common_divisor(25, 15)
# 5
sub greatest_common_divisor {
    my($a, $b) = @_;
","sub greatest_common_divisor {
    my ($a, $b) = @_;
    while ($b != 0) {
        my $t = $b;
        $b = $a % $b;
        $a = $t;
    }
    return $a;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&greatest_common_divisor;
        if(eq_deeply($candidate->(3, 7),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 15),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(49, 14),7)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(144, 60),12)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_14,gla_Latn,pl,"# Bidh e a 'tilleadh sreath de na ro-chòrdadh uile bhon as giorra chun as fhaide den shreang inntrigidh # >>> all_prefixes(""abc"")
# [""a"", ""ab"", ""abc""]
sub all_prefixes {
    my($string) = @_;
","my($string) = @_;
    my @prefixes;
    for my $i (1 .. length($string)) {
        push @prefixes, substr($string, 0, $i);
    }
    return @prefixes;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&all_prefixes;
        if(eq_deeply($candidate->(""""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""asdfgh""),[""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""WWW""),[""W"", ""WW"", ""WWW""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_15,gla_Latn,pl,"# Cuiridh e air ais sreath a tha a' toirt a-steach àireamhan air an cuingealachadh le àite a' tòiseachadh bho 0 gu n a-steach. # >>> string_sequence(0)
# ""0""
# >>> string_sequence(5)
# ""0 1 2 3 4 5""
sub string_sequence {
    my($n) = @_;
","sub string_sequence {
    my($n) = @_;
    return join ' ', 0..$n;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&string_sequence;
        if(eq_deeply($candidate->(0),""0"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),""0 1 2 3"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),""0 1 2 3 4 5 6 7 8 9 10"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_16,gla_Latn,pl,"# Air sreath a thoirt seachad, faigh a-mach cia mheud caractar eadar-dhealaichte (ge bith dè an t-suidheachadh) a tha e air a dhèanamh suas de # >>> count_distinct_characters(""xyzXYZ"")
# 3
# >>> count_distinct_characters(""Jerry"")
# 4
sub count_distinct_characters {
    my($string) = @_;
","sub count_distinct_characters {
    my($string) = @_;
    my %chars;
    $string = lc $string;  # Convert the string to lowercase
    $chars{$_} = 1 for split //, $string;  # Add each character to the hash
    return scalar keys %chars;  # Return the number of distinct keys
}

# Example usage:
print count_distinct_characters(""xyzXYZ""), ""\n"";  # Output: 3
print count_distinct_characters(""Jerry""), ""\n"";   # Output: 4","use Test::Deep;


sub testhumaneval {
    my $candidate = \&count_distinct_characters;
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcde""),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdecadeCADE""),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaaaAAAAaaaa""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Jerry jERRY JeRRRY""),5)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_17,gla_Latn,pl,"# 'High' - nota ceathramh, mairidh aon bhualadh # 'o ""d"" - leth-chlàir, mairidh dà bhualadh # 'O' - nota iomlan, mairidh ceithir buillean # Seo uirsgeul: # chan ann mu dheireadh. # Is e an obair agad an sreath seo a dhealbhadh agus sreath de dh ' àireamhan iomlaideach a th ' ann a th ' ann a th ' air ais a tha a ' co-fhreagairt ri cia mheud buille a tha gach fear a ' dèanamh .# Tha an gnìomh seo a' cur sreang a tha a' riochdachadh notaichean ciùil ann an cruth sònraichte ASCII. # >>> parse_music(""o o| .| o| o| .| .| .| .| o o"")
# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
sub parse_music {
    my($music_string) = @_;
","sub parse_music {
    my ($music_string) = @_;
    my @notes = split ' ', $music_string;
    my @beats;

    foreach my $note (@notes) {
        if ($note eq 'o') {
            push @beats, 4;
        } elsif ($note eq 'o|') {
            push @beats, 2;
        } elsif ($note eq '.|') {
            push @beats, 1;
        }
    }

    return @beats;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&parse_music;
        if(eq_deeply($candidate->(""""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""o o o o""),[4, 4, 4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("".| .| .| .|""),[1, 1, 1, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""o| o| .| .| o o o o""),[2, 2, 1, 1, 4, 4, 4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""o| .| o| .| o o| o o|""),[2, 1, 2, 1, 4, 2, 4, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_18,gla_Latn,pl,"# Faigh a-mach cia mheud uair a lorgar fo-shreang sònraichte anns an t-sreang tùsail. Cunntadh cùisean a tha a 'dol thairis. # >>> how_many_times("""", ""a"")
# 0
# >>> how_many_times(""aaa"", ""a"")
# 3
# >>> how_many_times(""aaaa"", ""aa"")
# 3
sub how_many_times {
    my($string, $substring) = @_;
","sub how_many_times {
    my ($string, $substring) = @_;
    return 0 if $substring eq '';
    my $count = 0;
    while ($string =~ /(?=$substring)/g) {
        $count++;
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&how_many_times;
        if(eq_deeply($candidate->("""", ""x""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xyxyxyx"", ""x""),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""cacacacac"", ""cac""),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""john doe"", ""john""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_19,gla_Latn,pl,"# Thoir air ais an t- sreath le àireamhan air an seòrsachadh bho as lugha gu as motha # Is e na roghainnean dligheach ""zero"", ""one"", ""two"", ""three"", ""four"", ""five"", ""six"", ""seven"", ""eight"" agus ""nine"". # Tha an t-ionad-steach na shreang deimhinn air a chriochnachadh le àite bho 'zero' gu 'nine'.# >>> sort_numbers(""three one five"")
# ""one three five""
sub sort_numbers {
    my($numbers) = @_;
","sub sort_numbers {
    my ($numbers) = @_;
    my %word_to_num = (
        'zero'  => 0,
        'one'   => 1,
        'two'   => 2,
        'three' => 3,
        'four'  => 4,
        'five'  => 5,
        'six'   => 6,
        'seven' => 7,
        'eight' => 8,
        'nine'  => 9,
    );
    my %num_to_word = reverse %word_to_num;
    my @sorted_numbers = 
        map { $num_to_word{$_} } 
        sort { $a <=> $b } 
        map { $word_to_num{$_} } 
        split ' ', $numbers;
    return join ' ', @sorted_numbers;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_numbers;
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""three""),""three"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""three five nine""),""three five nine"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""five zero four seven nine eight""),""zero four five seven eight nine"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""six five four three two one zero""),""zero one two three four five six"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_20,gla_Latn,pl,"# eile agus cuir iad air ais ann an òrdugh (àireamhair nas lugha, àireamhair nas motha).# Bho sreath de àireamhan a chaidh a thoirt seachad (de dh'fhaid co-dhiù dhà) tagh agus tilg dà a tha as fhaisge air gach fear # >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
# [2.0, 2.2]
# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
# [2.0, 2.0]
sub find_closest_elements {
    my($numbers) = @_;
","sub find_closest_elements {
    my ($numbers) = @_;
    my @sorted_numbers = sort { $a <=> $b } @$numbers;
    my $min_diff = undef;
    my @closest_pair;

    for my $i (0 .. $#sorted_numbers - 1) {
        my $diff = $sorted_numbers[$i + 1] - $sorted_numbers[$i];
        if (!defined($min_diff) || $diff < $min_diff) {
            $min_diff = $diff;
            @closest_pair = ($sorted_numbers[$i], $sorted_numbers[$i + 1]);
        }
    }

    return @closest_pair;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&find_closest_elements;
        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_21,gla_Latn,pl,"# mar sin bidh an àireamh as lugha a 'fàs 0 agus bidh an àireamh as motha a 'fàs 1 # Le bhith a' toirt seachad sreath de àireamhan (de dhà eileamaid co-dhiù), cuir cruth-atharrachadh loidhne air an sreath sin, # >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
# [0.0, 0.25, 0.5, 0.75, 1.0]
sub rescale_to_unit {
    my($numbers) = @_;
","sub rescale_to_unit {
    my($numbers) = @_;
    my $min = min(@$numbers);
    my $max = max(@$numbers);
    my @rescaled = map { ($_ - $min) / ($max - $min) } @$numbers;
    return \@rescaled;
}

sub min {
    my(@list) = @_;
    my $min = $list[0];
    foreach my $num (@list) {
        if ($num < $min) {
            $min = $num;
        }
    }
    return $min;
}

sub max {
    my(@list) = @_;
    my $max = $list[0];
    foreach my $num (@list) {
        if ($num > $max) {
            $max = $num;
        }
    }
    return $max;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&rescale_to_unit;
        if(eq_deeply($candidate->([2.0, 49.9]),[0.0, 1.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100.0, 49.9]),[1.0, 0.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_22,gla_Latn,pl,"# Filter array a thoirt seachad de sam bith plthon luachan a-mhàin airson integers # >>> filter_integers([""a"", 3.14, 5])
# [5]
# >>> filter_integers([1, 2, 3, ""abc"", {}, []])
# [1, 2, 3]
sub filter_integers {
    my($values) = @_;
","sub filter_integers {
    my ($values) = @_;
    return [grep { /^-?\d+$/ && !ref($_) } @$values];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&filter_integers;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, {}, [], 23.2, 9, ""adasd""]),[4, 9])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, ""c"", 3, 3, ""a"", ""b""]),[3, 3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_23,gla_Latn,pl,"# Thoir air ais fad sreath a chaidh a thoirt seachad # >>> strlen("""")
# 0
# >>> strlen(""abc"")
# 3
sub strlen {
    my($string) = @_;
","sub strlen {
    my($string) = @_;
    return length($string);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&strlen;
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""x""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""asdasnakj""),9)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_24,gla_Latn,pl,"# Airson àireamh n, lorg an àireamh as motha a tha a' roinn n gu cothromach, nas lugha na n # >>> largest_divisor(15)
# 5
sub largest_divisor {
    my($n) = @_;
","sub largest_divisor {
    my($n) = @_;
    for (my $i = $n - 1; $i > 0; $i--) {
        if ($n % $i == 0) {
            return $i;
        }
    }
    return undef; # In case n is 1, there is no divisor less than n
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&largest_divisor;
        if(eq_deeply($candidate->(3),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100),50)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(49),7)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_25,gla_Latn,pl,"# Bu chòir àireamh inntrigidh a bhith co-ionann ri toradh nan factaran uile # Bu chòir gach aon de na factaran a bhith air an sreathadh àireamh de thursan a tha a 'freagairt ri cia mheud uair a nochdas e ann am factarachadh. # Bidh e a' tilleadh sreath de phrìomh fhactaran de dh'àireamhan iomlan a chaidh a thoirt seachad san òrdugh bhon as lugha chun as motha. # >>> factorize(8)
# [2, 2, 2]
# >>> factorize(25)
# [5, 5]
# >>> factorize(70)
# [2, 5, 7]
sub factorize {
    my($n) = @_;
","sub factorize {
    my ($n) = @_;
    my @factors;
    for my $i (2 .. int(sqrt($n))) {
        while ($n % $i == 0) {
            push @factors, $i;
            $n /= $i;
        }
    }
    push @factors, $n if $n > 1;
    return @factors;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&factorize;
        if(eq_deeply($candidate->(2),[2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),[2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),[2, 2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(57),[3, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3249),[3, 3, 19, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(185193),[3, 3, 3, 19, 19, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(20577),[3, 19, 19, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(18),[2, 3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_26,gla_Latn,pl,"# Cùm òrdugh nan eileamaidean air an taobh chlì mar a tha san inntrigeadh. # Bho shreath de dh'àireamhan iomlana, cuir às do na h-eileamaidean a tha a' tachairt barrachd air aon uair. # >>> remove_duplicates([1, 2, 3, 2, 4])
# [1, 3, 4]
sub remove_duplicates {
    my($numbers) = @_;
","sub remove_duplicates {
    my ($numbers) = @_;
    my %count;
    $count{$_}++ for @$numbers;
    return [grep { $count{$_} == 1 } @$numbers];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&remove_duplicates;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_27,gla_Latn,pl,"# Airson sreath sònraichte, cuir caractaran beaga gu mòr agus mòr gu beaga. # >>> flip_case(""Hello"")
# ""hELLO""
sub flip_case {
    my($string) = @_;
","sub flip_case {
    my($string) = @_;
    $string =~ tr/A-Za-z/a-zA-Z/;
    return $string;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&flip_case;
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello!""),""hELLO!"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""These violent delights have violent ends""),""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_28,gla_Latn,pl,"# Cuir sreath de shreathan ann an aon shreang .# >>> concatenate([])
# """"
# >>> concatenate([""a"", ""b"", ""c""])
# ""abc""
sub concatenate {
    my($strings) = @_;
","sub concatenate {
    my($strings) = @_;
    return join('', @$strings);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&concatenate;
        if(eq_deeply($candidate->([]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""x"", ""y"", ""z""]),""xyz"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""x"", ""y"", ""z"", ""w"", ""k""]),""xyzwk"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_29,gla_Latn,pl,"# Filter a-steach sreath de shreathan a-mhàin airson feadhainn a 'tòiseachadh le ro-cheum a thoirt seachad. # >>> filter_by_prefix([], ""a"")
# []
# >>> filter_by_prefix([""abc"", ""bcd"", ""cde"", ""array""], ""a"")
# [""abc"", ""array""]
sub filter_by_prefix {
    my($strings, $prefix) = @_;
","sub filter_by_prefix {
    my ($strings, $prefix) = @_;
    return [grep { /^\Q$prefix\E/ } @$strings];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&filter_by_prefix;
        if(eq_deeply($candidate->([], ""john""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_30,gla_Latn,pl,"# Bidh e a' tilleadh na h-àireamhan adhartach a-mhàin anns an t-sreath. # >>> get_positive([-1, 2, -4, 5, 6])
# [2, 5, 6]
# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
# [5, 3, 2, 3, 9, 123, 1]
sub get_positive {
    my($l) = @_;
","sub get_positive {
    my($l) = @_;
    my @positive_numbers = grep { $_ > 0 } @$l;
    return \@positive_numbers;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_positive;
        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_31,gla_Latn,pl,"# Thoir air ais fìor ma tha àireamh a chaidh a thoirt seachad prìomhach, agus meallta air dhòigh eile. # >>> is_prime(6)
# """"
# >>> is_prime(101)
# 1
# >>> is_prime(11)
# 1
# >>> is_prime(13441)
# 1
# >>> is_prime(61)
# 1
# >>> is_prime(4)
# """"
# >>> is_prime(1)
# """"
sub is_prime {
    my($n) = @_;
","sub is_prime {
    my($n) = @_;
    return """" if $n <= 1;
    return 1 if $n == 2;
    return """" if $n % 2 == 0;
    for (my $i = 3; $i * $i <= $n; $i += 2) {
        return """" if $n % $i == 0;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_prime;
        if(eq_deeply($candidate->(6),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(101),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(13441),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(61),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(17),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(85),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(77),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(255379),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_33,gla_Latn,pl,"# a' co-ionannachd ri luachan nan clàran co-fhreagarrach de l, ach air an seòrsachadh.# Tha l 'co-ionann ri l anns na clàran-amais nach eil roinnte le trì, fhad' s a tha na luachan aige aig na clàran-amais a tha roinnte le trì co-ionann # Tha an gnìomh seo a 'gabhail array l agus a' tilleadh array l 'a leithid sin gu bheil # >>> sort_third([1, 2, 3])
# [1, 2, 3]
# >>> sort_third([5, 6, 3, 4, 8, 9, 2])
# [2, 6, 3, 4, 8, 9, 5]
sub sort_third {
    my($l) = @_;
","sub sort_third {
    my ($l) = @_;
    my @to_sort = map { $l->[$_] } grep { $_ % 3 == 0 } 0..$#$l;
    @to_sort = sort { $a <=> $b } @to_sort;
    my @result = @$l;
    my $index = 0;

    foreach my $i (0..$#{$l}) {
        if ($i % 3 == 0) {
            $result[$i] = $to_sort[$index++];
        }
    }
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_third;
        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_34,gla_Latn,pl,"# A ' tilleadh eileamaidean sònraichte air an seòrsachadh ann an sreath # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
# [0, 2, 3, 5, 9, 123]
sub unique {
    my($l) = @_;
","sub unique {
    my ($l) = @_;
    my %seen;
    my @unique_sorted = sort { $a <=> $b } grep { !$seen{$_}++ } @$l;
    return \@unique_sorted;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&unique;
        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_35,gla_Latn,pl,"# Bidh e a' tilleadh an eileamaid as motha san sreath.# >>> max_element([1, 2, 3])
# 3
# >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
# 123
sub max_element {
    my($l) = @_;
","sub max_element {
    my($l) = @_;
    my $max = $l->[0];
    foreach my $value (@$l) {
        if ($value > $max) {
            $max = $value;
        }
    }
    return $max;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&max_element;
        if(eq_deeply($candidate->([1, 2, 3]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_36,gla_Latn,pl,"# Thoir air ais an àireamh de thursan a tha an àireamh 7 a 'nochdadh ann an àireamhan nas lugha na n a tha roinnte le 11 no 13. # >>> fizz_buzz(50)
# 0
# >>> fizz_buzz(78)
# 2
# >>> fizz_buzz(79)
# 3
sub fizz_buzz {
    my($n) = @_;
","sub fizz_buzz {
    my($n) = @_;
    my $count = 0;
    for my $i (1 .. $n-1) {
        if ($i % 11 == 0 || $i % 13 == 0) {
            $count++ if $i =~ /7/;
        }
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fizz_buzz;
        if(eq_deeply($candidate->(50),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(78),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(79),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(200),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4000),192)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10000),639)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100000),8026)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_37,gla_Latn,pl,"# gu luachan nan t-einnseanan eadhon de l, ach air an seòrsachadh. # Tha l 'co-ionann ri l anns na h-ìomhaighean neo-iomlan, fhad' s a tha na luachan aige aig na h-ìomhaighean eadhon co-ionann # Tha an gnìomh seo a 'gabhail array l agus a' tilleadh array l 'a leithid sin gu bheil # >>> sort_even([1, 2, 3])
# [1, 2, 3]
# >>> sort_even([5, 6, 3, 4])
# [3, 6, 5, 4]
sub sort_even {
    my($l) = @_;
","sub sort_even {
    my($l) = @_;
    my @even_indices;

    for (my $i = 0; $i < @$l; $i += 2) {
        push @even_indices, $l->[$i];
    }

    @even_indices = sort { $a <=> $b } @even_indices;

    my @result = @$l;
    
    for (my $i = 0; $i < @even_indices; $i++) {
        $result[$i * 2] = $even_indices[$i];
    }
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_even;
        if(eq_deeply($candidate->([1, 2, 3]),[1, 2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_39,gla_Latn,pl,"# Bidh prime_fib a 'tilleadh an n-mhòr àireamh a tha na àireamh Fibonacci agus tha e cuideachd prìomhach. # >>> prime_fib(1)
# 2
# >>> prime_fib(2)
# 3
# >>> prime_fib(3)
# 5
# >>> prime_fib(4)
# 13
# >>> prime_fib(5)
# 89
sub prime_fib {
    my($n) = @_;
","sub is_prime {
    my($num) = @_;
    return 0 if $num < 2;
    for my $i (2 .. sqrt($num)) {
        return 0 if $num % $i == 0;
    }
    return 1;
}

sub prime_fib {
    my($n) = @_;
    my ($a, $b) = (1, 1);
    my $count = 0;

    while (1) {
        my $fib = $a + $b;
        $a = $b;
        $b = $fib;
        if (is_prime($fib)) {
            $count++;
            return $fib if $count == $n;
        }
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&prime_fib;
        if(eq_deeply($candidate->(1),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),13)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),89)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),233)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),1597)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),28657)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9),514229)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),433494437)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_40,gla_Latn,pl,"# ' ' ann an dòigh eile.# Bidh e a 'tilleadh 1 ma tha trì eileamaidean eadar-dhealaichte anns an t-sreath a tha # Tha triples_sum_to_zero a' gabhail sreath de dh'àireamhan iomlan mar inntrigeadh.# >>> triples_sum_to_zero([1, 3, 5, 0])
# """"
# >>> triples_sum_to_zero([1, 3, -2, 1])
# 1
# >>> triples_sum_to_zero([1, 2, 3, 7])
# """"
# >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
# 1
# >>> triples_sum_to_zero([1])
# """"
sub triples_sum_to_zero {
    my($l) = @_;
","sub triples_sum_to_zero {
    my($l) = @_;
    my $n = scalar @$l;
    for my $i (0 .. $n-3) {
        for my $j ($i+1 .. $n-2) {
            for my $k ($j+1 .. $n-1) {
                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {
                    return 1;
                }
            }
        }
    }
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&triples_sum_to_zero;
        if(eq_deeply($candidate->([1, 3, 5, 0]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 5, -1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, -2, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 7]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 5, 7]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 5, -100]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, 3, 5, -100]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_41,gla_Latn,pl,"# Tha an gnìomh seo a 'toirt a-mach an àireamh de cho-bhualadh sin. # anns an trajectory aca mar nach robh iad a 'bualadh. # Ach, tha na càraichean gu tur làidir agus làidir; mar thoradh air an sin, tha iad a 'leantainn air adhart a' gluasad # nuair a bhios càr a tha a' gluasad gu clì a' bualadh air càr a tha a' gluasad gu clì.# gach car a 'gluasad anns an aon astar. Tha dà charbadan air an ràdh a' bualadh.# Tha an dà sheata de chàraichean a 'tòiseachadh a bhith gu math fada bho # Tha n càraichean a 'draibheadh gu clì gu deas; aig an aon àm, seata eadar-dhealaichte de n càraichean # Smaoinich air rathad a tha gu foirfe dìreach gu neo-chrìochnach fad loidhne.sub car_race_collision {
    my($n) = @_;
","sub car_race_collision {
    my($n) = @_;
    return $n;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&car_race_collision;
        if(eq_deeply($candidate->(2),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),16)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),64)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),100)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_42,gla_Latn,pl,"# Cuir air ais sreath le eileamaidean air an àrdachadh le 1. # >>> incr_list([1, 2, 3])
# [2, 3, 4]
# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
# [6, 4, 6, 3, 4, 4, 10, 1, 124]
sub incr_list {
    my($l) = @_;
","sub incr_list {
    my($l) = @_;
    return [map { $_ + 1 } @$l];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&incr_list;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_43,gla_Latn,pl,"# ' ' ann an dòigh eile.# Bidh e a 'tilleadh 1 ma tha dà eileamaid eadar-dhealaichte anns an t-sreath a tha # Tha pairs_sum_to_zero a' gabhail sreath de dh'àireamhan iomlana mar inntrigeadh. # >>> pairs_sum_to_zero([1, 3, 5, 0])
# """"
# >>> pairs_sum_to_zero([1, 3, -2, 1])
# """"
# >>> pairs_sum_to_zero([1, 2, 3, 7])
# """"
# >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
# 1
# >>> pairs_sum_to_zero([1])
# """"
sub pairs_sum_to_zero {
    my($l) = @_;
","sub pairs_sum_to_zero {
    my ($l) = @_;
    my %seen;
    for my $num (@$l) {
        if ($seen{-1 * $num}) {
            return 1;
        }
        $seen{$num} = 1;
    }
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&pairs_sum_to_zero;
        if(eq_deeply($candidate->([1, 3, 5, 0]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, -2, 1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 7]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, -5, 3, 5, 7]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 30]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 30]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_44,gla_Latn,pl,"# tha àireamhan bunaiteach nas lugha na 10.# cuir an riochdachadh sreang air ais às deidh an tionndadh. # Atharraich bun-stèidh àireamhach an àireamh ion-chuir x gu bun-stèidh. # >>> change_base(8, 3)
# ""22""
# >>> change_base(8, 2)
# ""1000""
# >>> change_base(7, 2)
# ""111""
sub change_base {
    my($x, $base) = @_;
","sub change_base {
    my ($x, $base) = @_;
    my $result = '';
    
    if ($base < 2 || $base > 9) {
        die ""Base must be between 2 and 9"";
    }

    while ($x > 0) {
        my $remainder = $x % $base;
        $result = $remainder . $result;
        $x = int($x / $base);
    }

    return $result eq '' ? '0' : $result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&change_base;
        if(eq_deeply($candidate->(8, 3),""22"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9, 3),""100"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(234, 2),""11101010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(16, 2),""10000"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8, 2),""1000"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 2),""111"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 3),""2"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3, 4),""3"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 5),""4"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 6),""5"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6, 7),""6"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 8),""7"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_45,gla_Latn,pl,"# Air a thoirt seachad fad taobh agus àrd-chuairtean tilleadh airson triantanach.# >>> triangle_area(5, 3)
# 7.5
sub triangle_area {
    my($a, $h) = @_;
","sub triangle_area {
    my ($a, $h) = @_; 
    return 0.5 * $a * $h;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&triangle_area;
        if(eq_deeply($candidate->(5, 3),7.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2),2.0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 8),40.0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_46,gla_Latn,pl,"# Feuch an sgrìobh thu gnìomh gus an n-mhìos de na h-eileamaidean àireamh fib4 a cho-dhùnadh gu h-èifeachdach. Na cleachd ath-chuingealachadh. # Tha an t-eadar-theangachadh air a dhèanamh le bhith a 'toirt a-steach na h-eadar-theangachaidhean a tha air an toirt a-steach.# fib4(3) -> 0 # fib4(2) -> 2 # fib4(1) -> 0 # fib4(0) -> 0 # Tha sreath àireamhachaidh Fib4 coltach ri sreath Fibbonacci a tha air a mhìneachadh mar a leanas: # >>> fib4(5)
# 4
# >>> fib4(6)
# 8
# >>> fib4(7)
# 14
sub fib4 {
    my($n) = @_;
","sub fib4 {
    my ($n) = @_;
    return 0 if $n == 0 || $n == 1 || $n == 3;
    return 2 if $n == 2;
    
    my @fib4 = (0, 0, 2, 0);
    
    for my $i (4 .. $n) {
        $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];
    }
    
    return $fib4[$n];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fib4;
        if(eq_deeply($candidate->(5),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),28)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),104)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),386)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_47,gla_Latn,pl,"# Cuir air ais meadhan nan eileamaidean anns an t-sreath l. # >>> median([3, 1, 2, 4, 5])
# 3
# >>> median([-10, 4, 6, 1000, 10, 20])
# 15.0
sub median {
    my($l) = @_;
","sub median {
    my($l) = @_;
    my @sorted = sort { $a <=> $b } @$l;
    my $len = @sorted;
    if ($len % 2 == 1) {
        return $sorted[int($len/2)];
    } else {
        return ($sorted[$len/2 - 1] + $sorted[$len/2]) / 2;
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&median;
        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-10, 4, 6, 1000, 10, 20]),8.0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([6, 5]),5.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8, 1, 3, 9, 9, 2, 7]),7)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_48,gla_Latn,pl,"# Bidh e a 'dèanamh sgrùdadh a bheil sreath a chaidh a thoirt seachad na palindrome # >>> is_palindrome("""")
# 1
# >>> is_palindrome(""aba"")
# 1
# >>> is_palindrome(""aaaaa"")
# 1
# >>> is_palindrome(""zbcd"")
# """"
sub is_palindrome {
    my($text) = @_;
","sub is_palindrome {
    my ($text) = @_;
    return $text eq reverse($text) ? 1 : """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_palindrome;
        if(eq_deeply($candidate->(""""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aba""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaaaa""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""zbcd""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xywyx""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xywyz""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xywzx""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_49,gla_Latn,pl,"# Thoir air ais 2^n modulo p (tha fios agad mu àireamhan).# >>> modp(3, 5)
# 3
# >>> modp(1101, 101)
# 2
# >>> modp(0, 101)
# 1
# >>> modp(3, 11)
# 8
# >>> modp(100, 101)
# 1
sub modp {
    my($n, $p) = @_;
","sub modp {
    my($n, $p) = @_;
    return (2 ** $n) % $p;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&modp;
        if(eq_deeply($candidate->(3, 5),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1101, 101),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0, 101),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3, 11),8)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100, 101),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(30, 5),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(31, 5),3)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_51,gla_Latn,pl,"# remove_vowels 'S e gnìomh a tha a' gabhail sreang agus a 'tilleadh sreang gun fhònaichean. # >>> remove_vowels("""")
# """"
# >>> remove_vowels(""abcdef"")
# ""bcdf""
# >>> remove_vowels(""aaaaa"")
# """"
# >>> remove_vowels(""aaBAA"")
# ""B""
# >>> remove_vowels(""zbcd"")
# ""zbcd""
sub remove_vowels {
    my($text) = @_;
","sub remove_vowels {
    my($text) = @_;
    $text =~ s/[aeiouAEIOU]//g;
    return $text;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&remove_vowels;
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdef
ghijklm""),""bcdf
ghjklm"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""fedcba""),""fdcb"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eeeee""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""acBAA""),""cB"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""EcBOO""),""cB"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ybcd""),""ybcd"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_52,gla_Latn,pl,"# Bidh e a 'tilleadh 1 ma tha na h-àireamhan uile anns an t-sreath l fo thorais t. # >>> below_threshold([1, 2, 4, 10], 100)
# 1
# >>> below_threshold([1, 20, 4, 10], 5)
# """"
sub below_threshold {
    my($l, $t) = @_;
","sub below_threshold {
    my($l, $t) = @_;
    foreach my $num (@$l) {
        return """" if $num >= $t;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&below_threshold;
        if(eq_deeply($candidate->([1, 2, 4, 10], 100),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 20, 4, 10], 5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 20, 4, 10], 21),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 20, 4, 10], 22),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 8, 4, 10], 11),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 8, 4, 10], 10),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_53,gla_Latn,pl,"# Cuir dà àireamh x agus y ris # >>> add(2, 3)
# 5
# >>> add(5, 7)
# 12
sub add {
    my($x, $y) = @_;
","return $x + $y;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&add;
        if(eq_deeply($candidate->(0, 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 0),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 3),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 7),12)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 5),12)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_54,gla_Latn,pl,"# Thoir sùil air an robh dà fhacal aig na caractaran a tha an aon rud. # >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
# 1
# >>> same_chars(""abcd"", ""dddddddabc"")
# 1
# >>> same_chars(""dddddddabc"", ""abcd"")
# 1
# >>> same_chars(""eabcd"", ""dddddddabc"")
# """"
# >>> same_chars(""abcd"", ""dddddddabce"")
# """"
# >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
# """"
sub same_chars {
    my($s0, $s1) = @_;
","sub same_chars {
    my($s0, $s1) = @_;
    
    my %chars_s0 = map { $_ => 1 } split //, $s0;
    my %chars_s1 = map { $_ => 1 } split //, $s1;

    foreach my $char (keys %chars_s0) {
        return """" unless exists $chars_s1{$char};
    }

    foreach my $char (keys %chars_s1) {
        return """" unless exists $chars_s0{$char};
    }

    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&same_chars;
        if(eq_deeply($candidate->(""eabcdzzzz"", ""dddzzzzzzzddeddabc""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcd"", ""dddddddabc""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""dddddddabc"", ""abcd""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eabcd"", ""dddddddabc""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcd"", ""dddddddabcf""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eabcdzzzz"", ""dddzzzzzzzddddabc""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aabb"", ""aaccc""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_55,gla_Latn,pl,"# Thoir air ais an n-mhòr àireamh Fibonacci. # >>> fib(10)
# 55
# >>> fib(1)
# 1
# >>> fib(8)
# 21
sub fib {
    my($n) = @_;
","sub fib {
    my ($n) = @_;
    return $n if $n <= 1;
    my ($a, $b) = (0, 1);
    for (2..$n) {
        ($a, $b) = ($b, $a + $b);
    }
    return $b;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fib;
        if(eq_deeply($candidate->(10),55)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),21)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),89)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),144)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_56,gla_Latn,pl,"# ath-thòisich 1 ma tha bracaid dùinte co-fhreagarrach aig gach bracaid fhosglaidh. # brackets 'S e sreath de ""<"" agus "">"". # >>> correct_bracketing(""<"")
# """"
# >>> correct_bracketing(""<>"")
# 1
# >>> correct_bracketing(""<<><>>"")
# 1
# >>> correct_bracketing(""><<>"")
# """"
sub correct_bracketing {
    my($brackets) = @_;
","sub correct_bracketing {
    my($brackets) = @_;
    my $balance = 0;

    foreach my $char (split //, $brackets) {
        if ($char eq '<') {
            $balance++;
        } elsif ($char eq '>') {
            $balance--;
            if ($balance < 0) {
                return """";
            }
        }
    }
    
    return $balance == 0 ? 1 : """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&correct_bracketing;
        if(eq_deeply($candidate->(""<>""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<<><>>""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<><><<><>><>""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<><><<<><><>><>><<><><<>>>""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<<<><>>>>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""><<>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<<<<""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("">""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<<>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<><><<><>><>><<>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<><><<><>><>>><>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_57,gla_Latn,pl,"# Tha ath-thilleadh 1 na eileamaidean sreath a tha a 'sìor fhàs no a' lughdachadh gu monotonically. # >>> monotonic([1, 2, 4, 20])
# 1
# >>> monotonic([1, 20, 4, 10])
# """"
# >>> monotonic([4, 1, 0, -10])
# 1
sub monotonic {
    my($l) = @_;
","sub monotonic {
    my($l) = @_;
    return 1 if @$l <= 1;
    
    my $increasing = 1;
    my $decreasing = 1;
    
    for my $i (1 .. $#$l) {
        if ($l->[$i] > $l->[$i - 1]) {
            $decreasing = 0;
        } elsif ($l->[$i] < $l->[$i - 1]) {
            $increasing = 0;
        }
    }
    
    return $increasing || $decreasing ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&monotonic;
        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 20, 4, 10]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_58,gla_Latn,pl,"# A 'tilleadh eileamaidean cumanta sònraichte air an seòrsachadh airson dà sreath. # >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
# [1, 5, 653]
# >>> common([5, 3, 2, 8], [3, 2])
# [2, 3]
sub common {
    my($l1, $l2) = @_;
","sub common {
    my($l1, $l2) = @_;
    my %count;
    $count{$_}++ for @$l1;
    $count{$_}++ for grep { exists $count{$_} } @$l2;
    return [ sort { $a <=> $b } grep { $count{$_} > 1 } keys %count ];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&common;
        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 3, 2, 8], []),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_59,gla_Latn,pl,"# Thoir air ais am factar prìomha as motha de n. Gabh ris n > 1 agus chan e prìomhach a th 'ann. # >>> largest_prime_factor(13195)
# 29
# >>> largest_prime_factor(2048)
# 2
sub largest_prime_factor {
    my($n) = @_;
","sub largest_prime_factor {
    my($n) = @_;
    my $largest_factor = 1;
    my $factor = 2;

    while ($n > 1) {
        if ($n % $factor == 0) {
            $largest_factor = $factor;
            $n /= $factor;
        } else {
            $factor++;
        }
    }
    
    return $largest_factor;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&largest_prime_factor;
        if(eq_deeply($candidate->(15),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(27),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(63),7)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(330),11)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(13195),29)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_60,gla_Latn,pl,"# Tha sum_to_n na dhreuchd a tha a ' cur àireamhan bho 1 gu n. # >>> sum_to_n(30)
# 465
# >>> sum_to_n(100)
# 5050
# >>> sum_to_n(5)
# 15
# >>> sum_to_n(10)
# 55
# >>> sum_to_n(1)
# 1
sub sum_to_n {
    my($n) = @_;
","sub sum_to_n {
    my ($n) = @_;
    return $n * ($n + 1) / 2;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sum_to_n;
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),21)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),66)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(30),465)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100),5050)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_61,gla_Latn,pl,"# ath-thòisich 1 ma tha bracaid dùinte co-fhreagarrach aig gach bracaid fhosglaidh. # brackets 'S e sreath de ""("" agus "")"". # >>> correct_bracketing(""("")
# """"
# >>> correct_bracketing(""()"")
# 1
# >>> correct_bracketing(""(()())"")
# 1
# >>> correct_bracketing("")(()"")
# """"
sub correct_bracketing {
    my($brackets) = @_;
","sub correct_bracketing {
    my ($brackets) = @_;
    my $balance = 0;

    foreach my $char (split //, $brackets) {
        if ($char eq '(') {
            $balance++;
        } elsif ($char eq ')') {
            $balance--;
        }
        # If balance is negative, it means there's a closing bracket without a matching opening
        if ($balance < 0) {
            return '';
        }
    }

    # If balance is zero, all brackets are correctly matched
    return $balance == 0 ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&correct_bracketing;
        if(eq_deeply($candidate->(""()""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(()())""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""()()(()())()""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""()()((()()())())(()()(()))""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""((()())))""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("")(()""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""((((""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("")""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(()""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""()()(()())())(()""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""()()(()())()))()""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_62,gla_Latn,pl,"# Thoir air ais an co-dhèanachd den polynomial seo san aon fhoirm. # xs[0] + xs[1] * x + xs[2] * x^2 + .... # Tha xs a' riochdachadh co-mheasan polynomial. # >>> derivative([3, 1, 2, 4, 5])
# [1, 4, 12, 20]
# >>> derivative([1, 2, 3])
# [2, 6]
sub derivative {
    my($xs) = @_;
","sub derivative {
    my($xs) = @_;
    my @derivative;
    
    for my $i (1 .. $#{$xs}) {
        push @derivative, $xs->[$i] * $i;
    }
    
    return \@derivative;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&derivative;
        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),[1, 4, 12, 20])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3]),[2, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 1]),[2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 1, 0, 4]),[2, 2, 0, 16])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_63,gla_Latn,pl,"# Feuch an sgrìobh thu gnìomh gus an n-mhìos de na h-eileamaidean àireamh fibfib a cho-dhùnadh gu h-èifeachdach. # fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3). # fib fib ((2) == 1 # fib fib ((1) == 0 # fib fib ((0) == 0 # Tha an t-sreath àireamhachaidh FibFib na t-sreath coltach ri sreath Fibbonacci a tha air a mhìneachadh mar a leanas: # >>> fibfib(1)
# 0
# >>> fibfib(5)
# 4
# >>> fibfib(8)
# 24
sub fibfib {
    my($n) = @_;
","sub fibfib {
    my($n) = @_;
    return 0 if $n == 0;
    return 0 if $n == 1;
    return 1 if $n == 2;

    my @fibfib = (0, 0, 1);
    for my $i (3..$n) {
        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2] + $fibfib[$i-3];
    }
    return $fibfib[$n];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fibfib;
        if(eq_deeply($candidate->(2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),24)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),81)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),274)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(14),927)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_64,gla_Latn,pl,"# Eisimpleir: # ach a-mhàin nuair a tha e aig deireadh na briathra. # Tha briathran anns a' chùis seo 'a', 'e', 'i', 'o', 'u'. An seo, 'y' tha cuideachd 'a'# facal mar inntrigidh agus a 'tilleadh an àireamh de bhòtaichean anns an sreath. # Sgrìobh gnìomh vowels_count a tha a 'gabhail sreang a tha a' riochdachadh # >>> vowels_count(""abcde"")
# 2
# >>> vowels_count(""ACEDY"")
# 3
sub vowels_count {
    my($s) = @_;
","sub vowels_count {
    my($s) = @_;
    my $count = 0;
    my @chars = split //, lc $s;
    my $length = scalar @chars;

    for my $i (0..$#chars) {
        if ($chars[$i] =~ /[aeiou]/ || ($chars[$i] eq 'y' && $i == $length - 1)) {
            $count++;
        }
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&vowels_count;
        if(eq_deeply($candidate->(""abcde""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Alone""),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""key""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""bye""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""keY""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""bYe""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ACEDY""),3)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_65,gla_Latn,pl,"# Ma tha gluasad > àireamh de dhioghan, cuiridh iad na dhioghan air ais. # agus tilleadh an toradh mar shreang. # Cearcallach gluasad na h-ìomhaighean den integer x, gluasad na h-ìomhaighean ceart le gluasad # >>> circular_shift(12, 1)
# ""21""
# >>> circular_shift(12, 2)
# ""12""
sub circular_shift {
    my($x, $shift) = @_;
","sub circular_shift {
    my($x, $shift) = @_;
    my $digits = length($x);
    
    if ($shift > $digits) {
        return reverse $x;
    }
    
    $shift = $shift % $digits;
    my $shifted = substr($x, -$shift) . substr($x, 0, $digits - $shift);
    
    return $shifted;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&circular_shift;
        if(eq_deeply($candidate->(100, 2),""001"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12, 2),""12"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(97, 8),""79"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12, 1),""21"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11, 101),""11"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_66,gla_Latn,pl,"# Eisimpleirean: # Còdan ASCII. # Sgrìobh gnìomh a tha a 'gabhail sreath mar inntrigidh agus a' tilleadh suim nan caractaran uachdar a-mhàin ' # Tasg # >>> digitSum("""")
# 0
# >>> digitSum(""abAB"")
# 131
# >>> digitSum(""abcCd"")
# 67
# >>> digitSum(""helloE"")
# 69
# >>> digitSum(""woArBld"")
# 131
# >>> digitSum(""aAaaaXa"")
# 153
sub digitSum {
    my($s) = @_;
","sub digitSum {
    my($s) = @_;
    my $sum = 0;
    foreach my $char (split //, $s) {
        if ($char =~ /[A-Z]/) {
            $sum += ord($char);
        }
    }
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&digitSum;
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abAB""),131)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcCd""),67)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""helloE""),69)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""woArBld""),131)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aAaaaXa""),153)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("" How are yOu?""),151)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""You arE Very Smart""),327)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_67,gla_Latn,pl,"# airson examble: # anns a' bhàis cuir a-steach an àireamh de bhlas mango anns a' bhàis. # na h-oransaichean agus na h-uabhas agus àireamh iomlan a tha a ' riochdachadh àireamh iomlan nan toradh # Tha e a' toirt seachad an sreang a tha a' riochdachadh an àireamh iomlan de # a tha air an sgaoileadh ann am basgaid de thortan a tha anns a ' bhasgaid seo # Anns an obair seo, thèid sreath a thoirt dhut a tha a' riochdachadh àireamh de dh'uighean agus de orannan # >>> fruit_distribution(""5 apples and 6 oranges"", 19)
# 8
# >>> fruit_distribution(""0 apples and 1 oranges"", 3)
# 2
# >>> fruit_distribution(""2 apples and 3 oranges"", 100)
# 95
# >>> fruit_distribution(""100 apples and 1 oranges"", 120)
# 19
sub fruit_distribution {
    my($s, $n) = @_;
","sub fruit_distribution {
    my($s, $n) = @_;
    
    # Extract numbers from the input string
    my ($apples, $oranges) = $s =~ /(\d+) apples and (\d+) oranges/;
    
    # Calculate total apples and oranges
    my $total_apples_oranges = $apples + $oranges;
    
    # Calculate number of mangoes
    my $mangoes = $n - $total_apples_oranges;
    
    return $mangoes;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fruit_distribution;
        if(eq_deeply($candidate->(""5 apples and 6 oranges"", 19),8)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""5 apples and 6 oranges"", 21),10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""0 apples and 1 oranges"", 3),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1 apples and 0 oranges"", 3),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2 apples and 3 oranges"", 100),95)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2 apples and 3 oranges"", 5),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1 apples and 100 oranges"", 120),19)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_68,gla_Latn,pl,"# Eisimpleir 1: # Mura h-eil luachan eadhon ann no ma tha an sreath a chaidh a thoirt seachad falamh, tilleadh []. # Bu chòir an t-aodann a chaidh a phutadh a thilleadh ann an sreath, [small_value, an t-einnseag aige], # Ma lorgar iomadach nod le an aon luach eadhon as lugha, tilleadh an nod aig a bheil an t-einnseag as lugha. # Bu chòir don chnàmh a chaidh a phutadh a bhith na chnàmh leis an luach eadhon as lugha. # Is e an obair agad aon de na nodan a ghearradh agus a thoirt air ais.# ""Air a thoirt seachad sreath a 'riochdachadh meur de chrann aig a bheil neo-àbhaisteach integer nodes # >>> pluck([4, 2, 3])
# [2, 1]
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 2:
# >>> pluck([1, 2, 3])
# [2, 1]
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 3:
# >>> pluck([])
# []
# Example 4:
# >>> pluck([5, 0, 3, 0, 4, 2])
# [0, 1]
# Explanation: 0 is the smallest value, but  there are two zeros,
# so we will choose the first zero, which has the smallest index.
# Constraints:
# * 1 <= nodes.length <= 10000
# * 0 <= node.value
sub pluck {
    my($arr) = @_;
","sub pluck {
    my ($arr) = @_;
    my $min_even_value = undef;
    my $min_index = undef;

    for my $i (0 .. @$arr - 1) {
        my $value = $arr->[$i];
        if ($value % 2 == 0) {
            if (!defined($min_even_value) || $value < $min_even_value) {
                $min_even_value = $value;
                $min_index = $i;
            }
        }
    }

    return defined($min_even_value) ? [$min_even_value, $min_index] : [];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&pluck;
        if(eq_deeply($candidate->([4, 2, 3]),[2, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3]),[2, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 0, 3, 0, 4, 2]),[0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 4, 8, 4, 8]),[4, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7, 9, 7, 1]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_69,gla_Latn,pl,"# Eisimpleirean: # Mura h-eil luach mar sin ann, tilleadh -1. # Is e tricead àireamh iomlan an àireamh de thursan a tha e a' nochdadh anns an t-sreath.# zero, agus tha tricead nas motha na no co-ionann ri luach an àireamh iomlan fhèin. # Tha thu air a thoirt seachad a-null-folamh array de positive integers. Thilleadh a 'mhòr integer a tha nas motha na # >>> search([4, 1, 2, 2, 3, 1])
# 2
# >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])
# 3
# >>> search([5, 5, 4, 4, 4])
# -1
sub search {
    my($lst) = @_;
","sub search {
    my($lst) = @_;
    my %frequency;

    foreach my $num (@$lst) {
        $frequency{$num}++;
    }

    my $result = -1;
    foreach my $num (keys %frequency) {
        if ($num > 0 && $frequency{$num} >= $num) {
            if ($num > $result) {
                $result = $num;
            }
        }
    }

    return $result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&search;
        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 1, 4, 1, 4, 4]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 3]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8, 8, 8]),8)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 8, 2]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 9, 10, 1, 3]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([10]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_70,gla_Latn,pl,"# Eisimpleirean: # an uair sin as motha de na h-àireamhan iomlan a tha air fhàgail, an uair sin as lugha agus mar sin air adhart.# Tha seòrsachadh neònach, nuair a thòisicheas tu leis an luach as lugha, # Air an toirt seachad sreath de dh'àireamhan iomlanach, tilleadh sreath ann an òrdugh neònach.# >>> strange_sort_list([1, 2, 3, 4])
# [1, 4, 2, 3]
# >>> strange_sort_list([5, 5, 5, 5])
# [5, 5, 5, 5]
# >>> strange_sort_list([])
# []
sub strange_sort_list {
    my($lst) = @_;
","sub strange_sort_list {
    my($lst) = @_;
    my @result;
    my @sorted = sort {$a <=> $b} @$lst;
    
    while (@sorted) {
        push @result, shift @sorted;
        push @result, pop @sorted if @sorted;
    }
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&strange_sort_list;
        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([111111]),[111111])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_71,gla_Latn,pl,"# Eisimpleir: # na an treas taobh.# Tha trì taobhan a ' dèanamh triantan dligheach nuair a tha suim dà thaobh sam bith nas motha .# Air neo tilg -1 # an triantan air a thionndadh gu 2 puing deicheach ma tha na trì taobhan a' dèanamh triantan dligheach. # Air a thoirt seachad fad nan trì taobhan de thriantan. Thèid an sgìre de  a thilleadh# >>> triangle_area(3, 4, 5)
# 6.0
# >>> triangle_area(1, 2, 10)
# -1
sub triangle_area {
    my($a, $b, $c) = @_;
","sub triangle_area {
    my($a, $b, $c) = @_;
    
    # Check if the sides form a valid triangle
    unless ($a + $b > $c && $a + $c > $b && $b + $c > $a) {
        return -1;
    }
    
    # Calculate the semi-perimeter
    my $s = ($a + $b + $c) / 2;
    
    # Calculate the area using Heron's formula
    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));
    
    # Return the area rounded to 2 decimal points
    return sprintf(""%.2f"", $area);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&triangle_area;
        if(eq_deeply($candidate->(3, 4, 5),6.0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2, 10),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 8, 5),8.18)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 2),1.73)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2, 3),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 5, 7),16.25)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 6, 3),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 1, 1),0.43)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 10),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_72,gla_Latn,pl,"# Eisimpleir: # Bidh an nì q a' itealaich ma tha e cothromach (tha e na sreath palindromic) agus tha suim nan eileamaidean aige nas lugha na no co-ionann ris a' mheud as motha a ghabhas w.# Sgrìobh gnìomh a thilleas 1 ma bhios an nì q a' itealaich, agus '' air an eilean. # >>> will_it_fly([1, 2], 5)
# """"
# # 1+2 is less than the maximum possible weight, but it's unbalanced.
# >>> will_it_fly([3, 2, 3], 1)
# """"
# # it's balanced, but 3+2+3 is more than the maximum possible weight.
# >>> will_it_fly([3, 2, 3], 9)
# 1
# # 3+2+3 is less than the maximum possible weight, and it's balanced.
# >>> will_it_fly([3], 5)
# 1
# # 3 is less than the maximum possible weight, and it's balanced.
sub will_it_fly {
    my($q, $w) = @_;
","sub will_it_fly {
    my($q, $w) = @_;
    # Check if the array is palindromic
    my @reversed = reverse @$q;
    return '' unless ""@$q"" eq ""@reversed"";

    # Check if the sum of elements is within weight limit
    my $sum = 0;
    $sum += $_ for @$q;
    return $sum <= $w ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&will_it_fly;
        if(eq_deeply($candidate->([3, 2, 3], 9),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2], 5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3], 5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 3], 1),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3], 6),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5], 5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_73,gla_Latn,pl,"# Mar eisimpleir: # Tha an aon rud a 'leughadh air ais agus air adhart. Ann an aon atharrachadh, faodaidh tu aon eileamaid atharrachadh gu eileamaid sam bith eile. # Feumaidh atharrachadh a bhith air a dhèanamh gus an sreath palindromic. 'S e sreath palindromic sreath a tha # Air a thoirt seachad sreath arr de dh'àireamhan iomlan, lorg an àireamh as lugha de eileamaidean a tha # >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])
# 4
# >>> smallest_change([1, 2, 3, 4, 3, 2, 2])
# 1
# >>> smallest_change([1, 2, 3, 2, 1])
# 0
sub smallest_change {
    my($arr) = @_;
","sub smallest_change {
    my($arr) = @_;
    my $count = 0;
    my $n = scalar @$arr;
    
    for my $i (0 .. int($n / 2) - 1) {
        if ($arr->[$i] != $arr->[$n - $i - 1]) {
            $count++;
        }
    }
    
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&smallest_change;
        if(eq_deeply($candidate->([1, 2, 3, 5, 4, 7, 9, 6]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 3, 2, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 4, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 4, 4, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 2, 1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 1, 1, 3]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_74,gla_Latn,pl,"# Eisimpleirean # ma tha an aon àireamh de chars aig an dà shreath, tilleadh a 'chiad shreath.# àireamh iomlan de chars anns na h-uile sreathan den array nas lugha na an array eile. # Sgrìobh gnìomh a tha a ' gabhail ri dà sreath de shreathan agus a ' tilleadh an sreath aig a bheil # >>> total_match([], [])
# []
# >>> total_match([""hi"", ""admin""], [""hI"", ""Hi""])
# [""hI"", ""Hi""]
# >>> total_match([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])
# [""hi"", ""admin""]
# >>> total_match([""hi"", ""admin""], [""hI"", ""hi"", ""hi""])
# [""hI"", ""hi"", ""hi""]
# >>> total_match([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])
# [""4""]
sub total_match {
    my($lst1, $lst2) = @_;
","sub total_match {
    my ($lst1, $lst2) = @_;
    
    my $len1 = sum_chars($lst1);
    my $len2 = sum_chars($lst2);

    return $len1 <= $len2 ? $lst1 : $lst2;
}

sub sum_chars {
    my ($array) = @_;
    my $total = 0;
    foreach my $string (@$array) {
        $total += length($string);
    }
    return $total;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&total_match;
        if(eq_deeply($candidate->([], []),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hi"", ""hi""]),[""hi"", ""hi""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""]),[""hi"", ""admin""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""4""], [""1"", ""2"", ""3"", ""4"", ""5""]),[""4""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hI"", ""Hi""]),[""hI"", ""Hi""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hI"", ""hi"", ""hi""]),[""hI"", ""hi"", ""hi""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hI"", ""hi"", ""hii""]),[""hi"", ""admin""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([], [""this""]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""this""], []),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_75,gla_Latn,pl,"# Eisimpleir: # A 'faighinn a-mach gu bheil (a) nas lugha na 100. # agus meallta air an làimh eile. # Sgrìobh gnìomh a thilleas fìor ma tha an àireamh a chaidh a thoirt seachad na iomadachadh de 3 àireamhan prìomhach # >>> is_multiply_prime(30)
# 1
# 30 = 2 * 3 * 5
sub is_multiply_prime {
    my($a) = @_;
","sub is_multiply_prime {
    my($a) = @_;

    return 0 if $a >= 100;

    my @primes = grep { is_prime($_) } 2..int($a/2);

    for my $i (0..$#primes) {
        for my $j ($i..$#primes) {
            for my $k ($j..$#primes) {
                if ($primes[$i] * $primes[$j] * $primes[$k] == $a) {
                    return 1;
                }
            }
        }
    }
    return 0;
}

sub is_prime {
    my($n) = @_;
    return 0 if $n < 2;
    for my $i (2..sqrt($n)) {
        return 0 if $n % $i == 0;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_multiply_prime;
        if(eq_deeply($candidate->(5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(30),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(125),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(105),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(126),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(729),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(891),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1001),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_76,gla_Latn,pl,"# Mar eisimpleir: # Tha x na chumhachd sìmplidh de n ma tha n**int=x # cumhachd de n agus meallta ann an cùisean eile. # Is e an obair agad gnìomh a sgrìobhadh a thilleas fìor ma tha àireamh x na shimplidh # >>> is_simple_power(1, 4)
# 1
# >>> is_simple_power(2, 2)
# 1
# >>> is_simple_power(8, 2)
# 1
# >>> is_simple_power(3, 2)
# """"
# >>> is_simple_power(3, 1)
# """"
# >>> is_simple_power(5, 3)
# """"
sub is_simple_power {
    my($x, $n) = @_;
","sub is_simple_power {
    my($x, $n) = @_;
    
    return 0 if $n <= 0;
    return """" if $x < 1;
    
    if ($x == 1) {
        return 1;
    }

    while ($x > 1) {
        if ($x % $n != 0) {
            return """";
        }
        $x /= $n;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_simple_power;
        if(eq_deeply($candidate->(16, 2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(143214, 16),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9, 3),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(16, 4),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(24, 2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(128, 4),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12, 6),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 12),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_77,gla_Latn,pl,"# Eisimpleirean: # Nota: faodaidh tu gabhail ris gu bheil an t-suidheachadh a-steach dligheach an-còmhnaidh. # ma tha an ingeger seo na chub de àireamh iomlaideach. # Sgrìobh gnìomh a bheir àireamh iomlan a agus a thilleas 1 # >>> iscube(1)
# 1
# >>> iscube(2)
# """"
# >>> iscube(-1)
# 1
# >>> iscube(64)
# 1
# >>> iscube(0)
# 1
# >>> iscube(180)
# """"
sub iscube {
    my($a) = @_;
","sub iscube {
    my($a) = @_;
    my $cube_root = int($a ** (1/3));
    return 1 if $cube_root ** 3 == $a;
    return 1 if ($cube_root + 1) ** 3 == $a; # handle small floating-point errors
    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&iscube;
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(64),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(180),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1000),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1729),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_78,gla_Latn,pl,"# Eisimpleirean: # agus tha na samhlaidhean A,B,C,D,E,F an-còmhnaidh mòr. # Nota: faodaidh tu gabhail ris a 'phrìs a tha an-còmhnaidh ceart no falamh sreang, # B (= deiseamail 11), D (= deiseamail 13). # Mar sin feumaidh tu àireamh de na h-àireamhan a leanas a dhearbhadh: 2, 3, 5, 7, # Tha àireamhan prìomhach 2, 3, 5, 7, 11, 13, 17,... # Tha na h-àireamhan hexadecimal 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. # nas motha na 1 nach eil na toradh de dhà àireamhan nàdarra nas lugha).# 'S e àireamh-prìomh, no prìomh, àireamh nàdarra # àireamh hexadecimal mar shreang agus a 'cunntadh an àireamh de hexadecimal # Tha thu air a bhith ag obair gus gnìomh a sgrìobhadh a tha a ' faighinn # >>> hex_key(""AB"")
# 1
# >>> hex_key(""1077E"")
# 2
# >>> hex_key(""ABED1A33"")
# 4
# >>> hex_key(""123456789ABCDEF0"")
# 6
# >>> hex_key(""2020"")
# 2
sub hex_key {
    my($num) = @_;
","sub hex_key {
    my($num) = @_;
    my %prime_hex_digits = map { $_ => 1 } ('2', '3', '5', '7', 'B', 'D');
    my $prime_count = 0;
    
    foreach my $char (split //, $num) {
        $prime_count++ if exists $prime_hex_digits{$char};
    }
    
    return $prime_count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&hex_key;
        if(eq_deeply($candidate->(""AB""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1077E""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ABED1A33""),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2020""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""123456789ABCDEF0""),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""112233445566778899AABBCCDDEEFF00""),12)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_79,gla_Latn,pl,"# Eisimpleirean: # Tha na caractaran a bharrachd ann airson cuideachadh leis an cruth.# Bidh dà charactar a bharrachd ann 'db' aig toiseach agus aig deireadh an sreath. # Bidh gach caractar san sreath '0' no '1'.# cruth binary. Bu chòir don fheart sreang a thilleadh, le gach caractar a 'riochdachadh binary # Thèid àireamh a thoirt dhut ann an cruth deichealach agus is e an obair agad a thionndadh gu # >>> decimal_to_binary(15)
# ""db1111db""
# >>> decimal_to_binary(32)
# ""db100000db""
sub decimal_to_binary {
    my($decimal) = @_;
","sub decimal_to_binary {
    my($decimal) = @_;
    my $binary = sprintf(""%b"", $decimal);
    return ""db"" . $binary . ""db"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&decimal_to_binary;
        if(eq_deeply($candidate->(0),""db0db"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(32),""db100000db"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(103),""db1100111db"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(15),""db1111db"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_80,gla_Latn,pl,"# Mar eisimpleir: # Tha sreang sona ma tha a dh'fhaid co-dhiù 3 agus gach 3 litrichean le chèile eadar-dhealaichte # Is e an obair agad sgrùdadh a dhèanamh a bheil an sreang happl no nach eil. # Tha sreang s air a thoirt dhut. # >>> is_happy(""a"")
# """"
# >>> is_happy(""aa"")
# """"
# >>> is_happy(""abcd"")
# 1
# >>> is_happy(""aabb"")
# """"
# >>> is_happy(""adb"")
# 1
# >>> is_happy(""xyy"")
# """"
sub is_happy {
    my($s) = @_;
","sub is_happy {
    my($s) = @_;
    return """" if length($s) < 3;
    for my $i (0 .. length($s) - 3) {
        my $substr = substr($s, $i, 3);
        my %chars;
        $chars{$_}++ for split //, $substr;
        return """" if keys(%chars) != 3;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_happy;
        if(eq_deeply($candidate->(""a""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aa""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcd""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aabb""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""adb""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xyy""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""iopaxpoi""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""iopaxioi""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_81,gla_Latn,pl,"# Eisimpleir: # 0.0 E # > 0.0 D- # > 0.7 D # > 1.0 D+ # > 1.3 C- # > 1.7 C # > 2.0 C+ # > 2.3 B- # > 2.7 B # > 3.0 B+ # > 3.3 A- # > 3.7 A # 4.0 A+ # GPA. Litir ìre.# gnìomh a dh 'fhaodas sreath de ghràdan litrichean a thoirt a-mach a ' cleachdadh a ' chlàr a leanas: # Tha i air grunn mheudan a thoirt dhut airson cuid de dh' oileanaich agus feumaidh tu sgrìobhadh.# Is e an aon dhuilgheadas, gu bheil i air a' chòd a chleachd i airson a bhith a' toirt sgàil a chall.# Tha an tidsear air a' chlàr-ama fhèin a dhèanamh airson a' chlasadh.# ' S e seachdain mu dheireadh na seimeastar a th' ann agus feumaidh an tidsear na h-àireamhan a thoirt seachad.# >>> grade_equation([4.0, 3, 1.7, 2, 3.5])
# [""A+"", ""B"", ""C-"", ""C"", ""A-""]
sub numerical_letter_grade {
    my($grades) = @_;
","sub numerical_letter_grade {
    my ($gpas) = @_;
    my @letters;

    foreach my $gpa (@$gpas) {
        if ($gpa == 4.0) {
            push @letters, 'A+';
        } elsif ($gpa > 3.7) {
            push @letters, 'A';
        } elsif ($gpa > 3.3) {
            push @letters, 'A-';
        } elsif ($gpa > 3.0) {
            push @letters, 'B+';
        } elsif ($gpa > 2.7) {
            push @letters, 'B';
        } elsif ($gpa > 2.3) {
            push @letters, 'B-';
        } elsif ($gpa > 2.0) {
            push @letters, 'C+';
        } elsif ($gpa > 1.7) {
            push @letters, 'C';
        } elsif ($gpa > 1.3) {
            push @letters, 'C-';
        } elsif ($gpa > 1.0) {
            push @letters, 'D+';
        } elsif ($gpa > 0.7) {
            push @letters, 'D';
        } elsif ($gpa > 0.0) {
            push @letters, 'D-';
        } else {
            push @letters, 'E';
        }
    }

    return \@letters;
}

my $gpas = [4.0, 3, 1.7, 2, 3.5];
my $letter_grades = numerical_letter_grade($gpas);
print join("", "", @$letter_grades);","use Test::Deep;


sub testhumaneval {
    my $candidate = \&numerical_letter_grade;
        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[""A+"", ""B"", ""C-"", ""C"", ""A-""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.2]),[""D+""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.5]),[""D-""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.0]),[""E""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 0.3, 1.5, 2.8, 3.3]),[""D"", ""D-"", ""C-"", ""B"", ""B+""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.0, 0.7]),[""E"", ""D-""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_82,gla_Latn,pl,"# Eisimpleirean # tha an fad na àireamh phrìomh no ' ' air dhòigh eile # Sgrìobh gnìomh a bheir sreath agus a thilleas 1 ma tha an sreath # >>> prime_length(""Hello"")
# 1
# >>> prime_length(""abcdcba"")
# 1
# >>> prime_length(""kittens"")
# 1
# >>> prime_length(""orange"")
# """"
sub prime_length {
    my($string) = @_;
","sub prime_length {
    my ($string) = @_;
    my $length = length($string);

    return '' if $length < 2;
    for my $i (2 .. sqrt($length)) {
        return '' if $length % $i == 0;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&prime_length;
        if(eq_deeply($candidate->(""Hello""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdcba""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""kittens""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""orange""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""wow""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""world""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""MadaM""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Wow""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""HI""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""go""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""gogo""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaaaaaaaaaaaaaa""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Madam""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""M""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""0""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_83,gla_Latn,pl,"# Àireamhan iomlan adhartach a tha a 'tòiseachadh no a' crìochnachadh le 1. # Air a thoirt seachad àireamh iomlan adhartach n, tilleadh cunntadh nan àireamhan de n-siorlach sub starts_one_ends {
    my($n) = @_;
","sub starts_one_ends {
    my($n) = @_;
    
    # If n is 1, the numbers are 1, 2, 3, ..., 9 (single digit numbers starting
    # or ending with 1), hence return 1 (only the number 1).
    return 1 if $n == 1;

    # Calculate the count of numbers starting with 1
    # Numbers from 1..9 (n-1 zeros) give us 10^(n-1) choices
    my $start_one_count = 10 ** ($n - 1);

    # Calculate the count of numbers ending with 1
    # Numbers from 10..10^(n-1) give us 10^(n-1) choices
    my $end_one_count = 10 ** ($n - 1);

    # However, numbers that both start and end with 1 (like 111...1)
    # are counted twice so we need to add them in only once.
    my $both_count = 1; # There's exactly one such number: 10^(n-1) + 1

    # Total unique count
    my $total_count = $start_one_count + $end_one_count - $both_count;

    return $total_count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&starts_one_ends;
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2),18)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),180)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),1800)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),18000)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_84,gla_Latn,pl,"# Eisimpleir # Air a thoirt seachad àireamh iomlan adhartach N, tilleadh suim iomlan nan siorp ann an dà-shligheach. # >>> solve(1000)
# ""1""
# >>> solve(150)
# ""110""
# >>> solve(147)
# ""1100""
# Variables:
# @N integer
# Constraints: 0 ≤ N ≤ 10000.
# Output:
# a string of binary number
sub solve {
    my($N) = @_;
","sub solve {
    my($N) = @_;
    my $sum = 0;
    $sum += $_ for split //, $N;
    return sprintf(""%b"", $sum);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&solve;
        if(eq_deeply($candidate->(1000),""1"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(150),""110"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(147),""1100"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(333),""1001"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(963),""10010"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_85,gla_Latn,pl,"# Eisimpleirean: # Air a thoirt seachad sreath neo-folamh de dh'àireamhan iomlaideach lst. cuir ris na h-eileamaidean eadhon a tha aig clàran neo-iomlan .. # >>> add([4, 2, 6, 7])
# 2
sub add {
    my($lst) = @_;
","sub add {
    my ($lst) = @_;
    my $sum = 0;

    for (my $i = 1; $i < @$lst; $i += 2) {
        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;
    }

    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&add;
        if(eq_deeply($candidate->([4, 88]),88)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_86,gla_Latn,pl,"# Mar eisimpleir: # Nota: Bu chòir dhut òrdugh nam faclan agus na àiteachan falamh san abairt a chumail. # òrdugh a' dol suas stèidhichte air luach ascii. # tha iad air an cur an àite le facal ùr far a bheil na caractaran uile air an rèiteachadh ann an # Tha dreach òrdaichte de shreang, na shreang far a bheil a h-uile facal (air an sgaradh le àite) # Sgrìobh gnìomh a bheir sreang agus a bheir air ais dreach òrdaichte dheth. # >>> anti_shuffle(""Hi"")
# ""Hi""
# >>> anti_shuffle(""hello"")
# ""ehllo""
# >>> anti_shuffle(""Hello World!!!"")
# ""Hello !!!Wdlor""
sub anti_shuffle {
    my($s) = @_;
","sub anti_shuffle {
    my($s) = @_;
    $s =~ s/(\S+)/join('', sort split //, $1)/ge;
    return $s;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&anti_shuffle;
        if(eq_deeply($candidate->(""Hi""),""Hi"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""hello""),""ehllo"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""number""),""bemnru"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcd""),""abcd"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello World!!!""),""Hello !!!Wdlor"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hi. My name is Mister Robot. How are you?""),"".Hi My aemn is Meirst .Rboot How aer ?ouy"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_87,gla_Latn,pl,"# Eisimpleirean: # Cuideachd, socraich co-òrdanaidhean an sreath a rèir colbhan ann an òrdugh a 'dol sìos. # Sòrdaich co-òrdanaidhean an toiseach a rèir sreathan ann an òrdugh ag èirigh. # tha gach sreath na cho-òrdanachadh - (sreath, colbhan), a 'tòiseachadh le 0. # agus tilleadh sreath de sreathan, [(x1, y1), (x2, y2) ...] mar sin gu bheil # Air a thoirt seachad lst, agus integer x, lorg integers x anns an array, # Faodaidh àireamh eadar-dhealaichte de cholonaichean a bhith ann gach sreath.# a tha coltach ri matrix, ge-tà, eu-coltach ri matrichean, # Tha thu air dàta 2 dimheansail, mar shreathan neadaichte, # >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)
# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]
# >>> get_row([], 1)
# []
# >>> get_row([[], [1], [1, 2, 3]], 3)
# [[2, 2]]
sub get_row {
    my($lst, $x) = @_;
","sub get_row {
    my ($lst, $x) = @_;
    my @result;

    for my $i (0 .. @$lst - 1) {
        my @row_result;
        for my $j (0 .. @{$lst->[$i]} - 1) {
            if ($lst->[$i][$j] == $x) {
                push @row_result, [$i, $j];
            }
        }
        # Sort the coordinates of the row by columns in descending order
        @row_result = sort { $b->[1] <=> $a->[1] } @row_result;
        push @result, @row_result;
    }

    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_row;
        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([], 1),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1]], 2),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[], [1], [1, 2, 3]], 3),[[2, 2]])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_88,gla_Latn,pl,"# Eisimpleirean: # * na atharraich an sreath a chaidh a thoirt seachad. # Nota: # no cuir e ann an òrdugh a 'sìor fhàs ma tha an t-suim ((prìomh luach clàr-amais, luach clàr-amais mu dheireadh) eadhon. # bidh thu a 'sòrdachadh an sreath a chaidh a thoirt seachad ann an òrdugh ag èirigh ma tha an suim ((prìomh luach clàr-amais, luach clàr-amais mu dheireadh) neo-eisimeileach, # Air a thoirt seachad sreath de dh'iomlan neo-mheallta, tilleadh copl den sreath a chaidh a thoirt seachad às deidh seòrsachadh, # >>> sort_array([])
# []
# >>> sort_array([5])
# [5]
# >>> sort_array([2, 4, 3, 0, 1, 5])
# [0, 1, 2, 3, 4, 5]
# >>> sort_array([2, 4, 3, 0, 1, 5, 6])
# [6, 5, 4, 3, 2, 1, 0]
sub sort_array {
    my($array) = @_;
","sub sort_array {
    my ($array) = @_;
    return [] if !@$array;  # Return empty array if input is empty

    my $first = $array->[0];
    my $last = $array->[-1];
    my $sum = $first + $last;

    if ($sum % 2 == 0) {
        # Sort in descending order if the sum is even
        return [sort { $b <=> $a } @$array];
    } else {
        # Sort in ascending order if the sum is odd
        return [sort { $a <=> $b } @$array];
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_array;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5]),[5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 1]),[1, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([21, 14, 23, 11]),[23, 21, 14, 11])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_89,gla_Latn,pl,"# Mar eisimpleir: # gluais sìos le dà mhòran gu dà àite.# Bu chòir an aibideil a bhith air a thionndadh ann an dòigh mar sin gum bi na litrichean # Bidh an toradh a 'tilleadh sreath air a chrioptachadh leis an aibideil a tha air a thionndadh. # Cruthaich crioptachadh gnìomh a tha a ' gabhail sreath mar argamaid agus # >>> encrypt(""hi"")
# ""lm""
# >>> encrypt(""asdfghjkl"")
# ""ewhjklnop""
# >>> encrypt(""gf"")
# ""kj""
# >>> encrypt(""et"")
# ""ix""
sub encrypt {
    my($s) = @_;
","sub encrypt {
    my($s) = @_;
    my $shift = 2 * 2;  # Alphabet shifted by two multiplied by two places (4 places)
    $s =~ tr/a-zA-Z/n-za-mN-ZA-M/;  # Perform a Caesar cipher with a shift of 13 places
    return $s;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&encrypt;
        if(eq_deeply($candidate->(""hi""),""lm"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""asdfghjkl""),""ewhjklnop"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""gf""),""kj"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""et""),""ix"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""faewfawefaewg""),""jeiajeaijeiak"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""hellomyfriend""),""lippsqcjvmirh"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh""),""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a""),""e"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_90,gla_Latn,pl,"# Thèid undef a thilleadh mura h-eil an leithid de eileamaid ann. # Sgrìobh gnìomh next_smallest (): a thilleas an dàrna eileamaid as lugha den t-sreath. # Tha thu air a thoirt seachad sreath de integers.# >>> next_smallest([1, 2, 3, 4, 5])
# 2
# >>> next_smallest([5, 1, 4, 3, 2])
# 2
# >>> next_smallest([])
# undef
# >>> next_smallest([1, 1])
# undef
sub next_smallest {
    my($lst) = @_;
","sub next_smallest {
    my($lst) = @_;
    
    # Return undef if the list has less than two elements
    return undef unless @$lst >= 2;
    
    # Sort the unique elements of the list
    my @sorted_unique = sort { $a <=> $b } keys %{{ map { $_ => 1 } @$lst }};
    
    # If there is only one unique element, return undef, else return the second smallest
    return @sorted_unique >= 2 ? $sorted_unique[1] : undef;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&next_smallest;
        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 1, 4, 3, 2]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 1, 1, 0]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-35, 34, 12, -45]),-35)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_91,gla_Latn,pl,"# Mar eisimpleir: # Tha seantansan air an crìochnachadh le '.', '?' no '!'. # Tha bròn na abairt a tha a' tòiseachadh leis an fhacal ""I"".# Gheibh thu sreath de fhaclan, agus is e an obair agad an àireamh a chunntadh.# >>> is_bored(""Hello world"")
# 0
# >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
# 1
sub is_bored {
    my($S) = @_;
","my($S) = @_;
    my $count = 0;
    my @sentences = split /(?<=[.?!])\s*/, $S;
    foreach my $sentence (@sentences) {
        $sentence =~ s/^\s+|\s+$//g;
        $count++ if $sentence =~ /^I\b/i;
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_bored;
        if(eq_deeply($candidate->(""Hello world""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Is the sky blue?""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I love It !""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""bIt""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I feel good today. I will be productive. will kill It""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""You and I are going for a walk""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_92,gla_Latn,pl,"# Eisimpleirean # Bidh e a' tilleadh false ann an cùisean sam bith eile. # Bidh e a' tilleadh fìor ma tha aon de na h-àireamhan co-ionann ri suim an dà eile, agus ma tha na h-àireamhan uile nan àireamhan iomlanaich. # Cruthaich gnìomh a tha a 'gabhail 3 àireamhan. # >>> any_int(5, 2, 7)
# 1
# >>> any_int(3, 2, 2)
# """"
# >>> any_int(3, -2, 1)
# 1
# >>> any_int(3.6, -2.2, 2)
# """"
sub any_int {
    my($x, $y, $z) = @_;
","sub any_int {
    my($x, $y, $z) = @_;
    
    # Check if all inputs are integers
    return """" unless defined $x && defined $y && defined $z;
    return """" unless $x =~ /^-?\d+$/ && $y =~ /^-?\d+$/ && $z =~ /^-?\d+$/;
    
    # Check if any number is the sum of the other two
    return 1 if $x == $y + $z;
    return 1 if $y == $x + $z;
    return 1 if $z == $x + $y;
    
    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&any_int;
        if(eq_deeply($candidate->(2, 3, 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2.5, 2, 3),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1.5, 5, 3.5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 6, 2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 2, 2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2.2, 2.2, 2.2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-4, 6, 2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 1, 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3, 4, 7),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3.0, 4, 7),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_93,gla_Latn,pl,"# Eisimpleirean: # Na gabh ach litrichean. # Bò-fhacal ann an aibideil na Beurla. # an teachdaireachd leis an litir a tha a ' nochdadh 2 àite air thoiseach air sin # dòigh a tha e a 'dol an àite case de na litrichean, a' cur an àite a h-uile vowels ann an # Sgrìobh gnìomh a tha a 'gabhail teachdaireachd, agus a' còdachadh ann an leithid de # >>> encode(""test"")
# ""TGST""
# >>> encode(""This is a message"")
# ""tHKS KS C MGSSCGG""
sub encode {
    my($message) = @_;
","sub encode {
    my($message) = @_;
    $message =~ tr/A-Za-z/N-ZA-Mn-za-m/;
    $message =~ tr/aeiouAEIOU/cgkqwCGKQW/;
    return $message;
}

# Example usage
print encode(""test""), ""\n"";       # Output: TGST
print encode(""This is a message""), ""\n""; # Output: tHKS KS C MGSSCGG","use Test::Deep;


sub testhumaneval {
    my $candidate = \&encode;
        if(eq_deeply($candidate->(""TEST""),""tgst"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mudasir""),""mWDCSKR"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""YES""),""ygs"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""This is a message""),""tHKS KS C MGSSCGG"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I DoNt KnOw WhAt tO WrItE""),""k dQnT kNqW wHcT Tq wRkTg"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_94,gla_Latn,pl,"# Eisimpleirean: # Feumaidh tu an luach prìomha as motha a lorg agus suim a shiùbhlain a thilleadh.# Tha thu air a thoirt seachad sreath de integers.# >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
# 10
# >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
# 25
# >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
# 13
# >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
# 11
# >>> skjkasdkd([0, 81, 12, 3, 1, 21])
# 3
# >>> skjkasdkd([0, 8, 1, 2, 1, 7])
# 7
sub skjkasdkd {
    my($lst) = @_;
","sub skjkasdkd {
    my ($lst) = @_;

    # Helper function to determine if a number is prime
    sub is_prime {
        my ($num) = @_;
        return 0 if $num < 2;
        for my $i (2 .. sqrt($num)) {
            return 0 if $num % $i == 0;
        }
        return 1;
    }

    # Find the largest prime in the array
    my $largest_prime = -1;
    foreach my $num (@$lst) {
        if (is_prime($num)) {
            $largest_prime = $num if $num > $largest_prime;
        }
    }

    # Return the sum of the digits of the largest prime
    if ($largest_prime > 0) {
        my $sum_of_digits = 0;
        $sum_of_digits += $_ for split //, $largest_prime;
        return $sum_of_digits;
    }

    return 0;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&skjkasdkd;
        if(eq_deeply($candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 81, 12, 3, 1, 21]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 8, 1, 2, 1, 7]),7)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8191]),19)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8191, 123456, 127, 7]),19)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([127, 97, 8192]),10)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_95,gla_Latn,pl,"# Eisimpleirean: # Bu chòir don fheart tilleadh '' ma tha an hash a chaidh a thoirt seachad falamh. # case no tha na h-iuchraichean uile nan sreathan ann an caisteal mòr, air neo tilleadh ''. # Air a thoirt seachad hash, tilleadh 1 ma tha na h-iuchraichean uile nan sreathan ann an ìosal # >>> check_dict_case({""a"" => ""apple"", ""b"" => ""banana""})
# 1
# >>> check_dict_case({""a"" => ""apple"", ""A"" => ""banana"", ""B"" => ""banana""})
# """"
# >>> check_dict_case({""a"" => ""apple"", 8 => ""banana"", ""a"" => ""apple""})
# """"
# >>> check_dict_case({""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""})
# """"
# >>> check_dict_case({""STATE"" => ""NC"", ""ZIP"" => ""12345""})
# 1
sub check_dict_case {
    my($dict) = @_;
","sub check_dict_case {
    my($dict) = @_;
    return '' unless %$dict;

    my $all_lower = 1;
    my $all_upper = 1;

    for my $key (keys %$dict) {
        if ($key !~ /^[a-z]+$/) {
            $all_lower = 0;
        }
        if ($key !~ /^[A-Z]+$/) {
            $all_upper = 0;
        }
    }
    
    return ($all_lower || $all_upper) ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&check_dict_case;
        if(eq_deeply($candidate->({""p"" => ""pineapple"", ""b"" => ""banana""}),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""p"" => ""pineapple"", ""A"" => ""banana"", ""B"" => ""banana""}),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""p"" => ""pineapple"", ""5"" => ""banana"", ""a"" => ""apple""}),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""}),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""STATE"" => ""NC"", ""ZIP"" => ""12345""}),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""fruit"" => ""Orange"", ""taste"" => ""Sweet""}),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({}),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_96,gla_Latn,pl,"# mar eisimpleir: # Tha na h-àireamhan prìomhach nas lugha na n.# Cuir gnìomh a-steach a tha a 'gabhail àireamh-iomlan neo-mheadhain agus a' tilleadh sreath den chiad n # >>> count_up_to(5)
# [2, 3]
# >>> count_up_to(11)
# [2, 3, 5, 7]
# >>> count_up_to(0)
# []
# >>> count_up_to(20)
# [2, 3, 5, 7, 11, 13, 17, 19]
# >>> count_up_to(1)
# []
# >>> count_up_to(18)
# [2, 3, 5, 7, 11, 13, 17]
sub count_up_to {
    my($n) = @_;
","sub count_up_to {
    my($n) = @_;
    my @primes;
    for my $num (2 .. $n - 1) {
        my $is_prime = 1;
        for my $div (2 .. sqrt($num)) {
            if ($num % $div == 0) {
                $is_prime = 0;
                last;
            }
        }
        push @primes, $num if $is_prime;
    }
    return @primes;
}

# Example usage:
# my @result = count_up_to(11);
# print ""@result\n"";  # Output: 2 3 5 7","use Test::Deep;


sub testhumaneval {
    my $candidate = \&count_up_to;
        if(eq_deeply($candidate->(5),[2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),[2, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),[2, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),[2, 3, 5, 7])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(22),[2, 3, 5, 7, 11, 13, 17, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(18),[2, 3, 5, 7, 11, 13, 17])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_97,gla_Latn,pl,"# Eisimpleirean: # Gabh ris gu bheil an t-ionad-steach daonnan dligheach. # an toradh de na h-aonadan aca. # Cuir crìoch air an gnìomh a tha a 'gabhail dà àireamh iomlan agus a' tilleadh # >>> multiply(148, 412)
# 16
# >>> multiply(19, 28)
# 72
# >>> multiply(2020, 1851)
# 0
# >>> multiply(14, -15)
# 20
sub multiply {
    my($a, $b) = @_;
","sub multiply {
    my($a, $b) = @_;
    my $unit_digit_a = abs($a) % 10;
    my $unit_digit_b = abs($b) % 10;
    return $unit_digit_a * $unit_digit_b;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&multiply;
        if(eq_deeply($candidate->(148, 412),16)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(19, 28),72)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2020, 1851),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(14, -15),20)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(76, 67),42)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(17, 27),49)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0, 1),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0, 0),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_98,gla_Latn,pl,"# Mar eisimpleir: # Le bhith a 'toirt seachad sreang s, cunntadh an àireamh de bhòtaichean mòra ann an clàran eadhon. # >>> count_upper(""aBCdEf"")
# 1
# >>> count_upper(""abcdefg"")
# 0
# >>> count_upper(""dBBE"")
# 0
sub count_upper {
    my($s) = @_;
","sub count_upper {
    my($s) = @_;
    my $count = 0;
    my @chars = split //, $s;
    
    for (my $i = 0; $i < @chars; $i += 2) {
        if ($chars[$i] =~ /[AEIOU]/) {
            $count++;
        }
    }
    
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&count_upper;
        if(eq_deeply($candidate->(""aBCdEf""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdefg""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""dBBE""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""B""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""U""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""EEEE""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_99,gla_Latn,pl,"# Eisimpleirean # bho dhà àireamhan iomlaichte, a' cruinnadh air falbh bho neoni.# agus a 'tilleadh an àireamh iomlan as fhaisge air. Ma tha an àireamh co-fharsaing # Cruthaich gnìomh a tha a 'gabhail luach (string) a tha a ' riochdachadh àireamh # >>> closest_integer(""10"")
# 10
# >>> closest_integer(""15.3"")
# 15
# Note:
# Rounding away from zero means that if the given number is equidistant
# from two integers, the one you should return is the one that is the
# farthest from zero. For example closest_integer(""14.5"") should
# return 15 and closest_integer(""-14.5"") should return -15.
sub closest_integer {
    my($value) = @_;
","sub closest_integer {
    my($value) = @_;
    
    # Convert the string value to a number
    my $number = 0 + $value;
    
    # Compute the floor and ceiling of the number
    my $floor = int($number);
    my $ceiling = $number > $floor ? $floor + 1 : $floor;
    
    # Determine the integer to round to
    if ($number < 0) {
        # For negative numbers, closer to zero means returning the lower number
        return ($number - $floor <= $ceiling - $number) ? $floor : $ceiling;
    } else {
        # For positive numbers, closer to zero means returning the lower number
        return ($ceiling - $number <= $number - $floor) ? $ceiling : $floor;
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&closest_integer;
        if(eq_deeply($candidate->(""10""),10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""14.5""),15)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""-15.5""),-16)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""15.3""),15)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""0""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_100,gla_Latn,pl,"# Eisimpleirean: # Tha i a 'riochdachadh an àireamh de chlochan anns an ìre (i + 1). # Cuir air ais an àireamh de chlochan anns gach ìre ann an sreath, far a bheil eileamaid aig clàr-amais # - an ath àireamh chothromach ma tha n chothromach. # - an ath àireamh neo-sheòrsach ma tha n neo-sheòrsach. # Is e an àireamh de chlochan san ath ìre: # Tha n clachan anns a' chiad ìre.# Air a thoirt seachad àireamh iomlan adhartach n, feumaidh tu cnuic de ìrean n de chlochan a dhèanamh. # >>> make_a_pile(3)
# [3, 5, 7]
sub make_a_pile {
    my($n) = @_;
","sub make_a_pile {
    my ($n) = @_;
    my @pile;
    my $current_stones = $n;
    
    for my $level (1..$n) {
        push @pile, $current_stones;
        if ($n % 2 == 0) {
            $current_stones += 2;  # Increment by next even number
        } else {
            $current_stones += 2;  # Increment by next odd number (which is also +2)
        }
    }
    
    return @pile;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&make_a_pile;
        if(eq_deeply($candidate->(3),[3, 5, 7])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),[4, 6, 8, 10])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),[5, 7, 9, 11, 13])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),[6, 8, 10, 12, 14, 16])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),[8, 10, 12, 14, 16, 18, 20, 22])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_101,gla_Latn,pl,"# Mar eisimpleir: # gus an sreath a roinn ann am faclan agus sreath de na faclan a thilleadh. # Thèid sreath de fhaclan a thoirt dhut air an sgaradh le coma no àitean. 'S e do dhleastanas # >>> words_string(""Hi, my name is John"")
# [""Hi"", ""my"", ""name"", ""is"", ""John""]
# >>> words_string(""One, two, three, four, five, six"")
# [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
sub words_string {
    my($s) = @_;
","sub words_string {
    my ($s) = @_;
    my @words = split /[,\s]+/, $s;
    return \@words;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&words_string;
        if(eq_deeply($candidate->(""Hi, my name is John""),[""Hi"", ""my"", ""name"", ""is"", ""John""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""One, two, three, four, five, six""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hi, my name""),[""Hi"", ""my"", ""name""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""One,, two, three, four, five, six,""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ahmed     , gamal""),[""ahmed"", ""gamal""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_102,gla_Latn,pl,"# Mar eisimpleir: # chan eil uimhir mar sin ann, an uair sin bu chòir don fheart -1 a thilleadh.# Tha an àireamh iomlan as motha ann an raon [x, y] a tha a' gabhail a-steach.# Tha an gnìomh seo a 'gabhail dà àireamh adhartach x agus y agus a' tilleadh an # >>> choose_num(12, 15)
# 14
# >>> choose_num(13, 12)
# -1
sub choose_num {
    my($x, $y) = @_;
","sub choose_num {
    my($x, $y) = @_;
    return -1 if $x > $y;
    
    # Swap x and y if x is greater than y
    ($x, $y) = ($y, $x) if $x > $y;
    
    for (my $i = $y; $i >= $x; $i--) {
        return $i if $i % 2 == 0;
    }
    return -1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&choose_num;
        if(eq_deeply($candidate->(12, 15),14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(13, 12),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(33, 12354),12354)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5234, 5233),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6, 29),28)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(27, 10),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 7),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(546, 546),546)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_103,gla_Latn,pl,"# Eisimpleir: # Ma tha n nas motha na m, tilleadh -1. # Cuir an fhreagairt air a' cheud àireamh iomlan as fhaisge agus tionndadh gu dà-mheudanach.# meadhanach nan àireamhan iomlana bho n gu m (a' gabhail a-steach n agus m). # Tha dà àireamh iomlan adhartach n agus m air an toirt dhut, agus is e an obair agad an  a shàbhaladh.# >>> rounded_avg(1, 5)
# ""0b11""
# >>> rounded_avg(7, 5)
# -1
# >>> rounded_avg(10, 20)
# ""0b1111""
# >>> rounded_avg(20, 33)
# ""0b11010""
sub rounded_avg {
    my($n, $m) = @_;
","sub rounded_avg {
    my ($n, $m) = @_;
    
    return -1 if $n > $m;
    
    my $sum = 0;
    my $count = $m - $n + 1;
    
    for my $i ($n .. $m) {
        $sum += $i;
    }
    
    my $average = int(($sum / $count) + 0.5);
    return sprintf(""0b%b"", $average);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&rounded_avg;
        if(eq_deeply($candidate->(1, 5),""0b11"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 13),""0b1010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(964, 977),""0b1111001010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(996, 997),""0b1111100100"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(560, 851),""0b1011000010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(185, 546),""0b101101110"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(362, 496),""0b110101101"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(350, 902),""0b1001110010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(197, 233),""0b11010111"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 5),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 1),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 5),""0b101"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_104,gla_Latn,pl,"# Mar eisimpleir: # Nota: Bu chòir an sreath air a thilleadh a sheòrsachadh ann an òrdugh a 'sìor fhàs. # eileamaidean aig nach eil aon fhigear fiù 's.# Air a thoirt seachad sreath de figearan adhartach x. tilleadh sreath rèiteichte de gach # >>> unique_digits([15, 33, 1422, 1])
# [1, 15, 33]
# >>> unique_digits([152, 323, 1422, 10])
# []
sub unique_digits {
    my($x) = @_;
","sub unique_digits {
    my ($x) = @_;
    my @result;

    foreach my $num (@$x) {
        if ($num !~ /[02468]/) {
            push @result, $num;
        }
    }
    
    return sort { $a <=> $b } @result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&unique_digits;
        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([135, 103, 31]),[31, 135])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_105,gla_Latn,pl,"# Mar eisimpleir: # ""Aon"", ""Dà"", ""Thrì"", ""Ceathrar"", ""Còig"", ""Sia"", ""Seachd"", ""Ochd"", ""Noi"". # a' tionndadh an sreath a thig às, agus an uair sin a' cur an àite gach digit leis an ainm co-fhreagarrach aige bho # Air a thoirt seachad sreath de àireamhan iomlaideach, seòrsachadh na h-àireamhan iomlaideach a tha eadar 1 agus 9 gabhail a-steach, # >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])
# [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
# If the array is empty, return an empty array:
# >>> by_length([])
# []
# If the array has any strange number ignore it:
# >>> by_length([1, -1, 55])
# [""One""]
sub by_length {
    my($arr) = @_;
","sub by_length {
    my ($arr) = @_;
    my @names = qw(Zero One Two Three Four Five Six Seven Eight Nine);
    
    my @filtered_sorted_reversed = reverse sort { $a <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;
    my @result = map { $names[$_] } @filtered_sorted_reversed;
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&by_length;
        if(eq_deeply($candidate->([2, 1, 1, 4, 5, 8, 2, 3]),[""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1, 55]),[""One""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1, 3, 2]),[""Three"", ""Two"", ""One""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 4, 8]),[""Nine"", ""Eight"", ""Four""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_106,gla_Latn,pl,"# Eisimpleir: # Is e factorial i am iomadachadh de na h-àireamhan bho 1 gu i (1 * 2 * ... * i).# Tha mi a' tòiseachadh bho 1.# no suim nan àireamhan bho 1 gu i air dhòigh eile. # agus a 'tilleadh sreath de mheud n, mar sin gu bheil luach an eileamaid aig clàr-amais i na factorial de i ma tha i eadhon # Cuir an gnìomh an gnìomh f a tha a 'gabhail n mar paramadair, # >>> f(5)
# [1, 2, 6, 24, 15]
sub f {
    my($n) = @_;
","sub f {
    my($n) = @_;
    my @result;

    for my $i (1..$n) {
        if ($i % 2 == 0) {
            my $factorial = 1;
            $factorial *= $_ for 1..$i;
            push @result, $factorial;
        } else {
            my $sum = 0;
            $sum += $_ for 1..$i;
            push @result, $sum;
        }
    }
    
    return @result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&f;
        if(eq_deeply($candidate->(5),[1, 2, 6, 24, 15])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),[1, 2, 6, 24, 15, 720, 28])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),[1, 2, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_107,gla_Latn,pl,"# Eisimpleir 1: # palindromes àireamhan iomlan a tha a 'tuiteam taobh a-staigh an raon ((1, n), a' gabhail a-steach. # Air a thoirt seachad àireamh iomlan adhartach n, tilleadh sreath aig a bheil an àireamh de eadhon agus neo-iomlan # >>> even_odd_palindrome(3)
# [1, 2]
# Explanation:
# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
# Example 2:
# >>> even_odd_palindrome(12)
# [4, 6]
# Explanation:
# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
# Note:
# 1. 1 <= n <= 10^3
# 2. returned array has the number of even and odd integer palindromes respectively.
sub even_odd_palindrome {
    my($n) = @_;
","sub even_odd_palindrome {
    my($n) = @_;
    my $even_count = 0;
    my $odd_count = 0;
    for my $i (1..$n) {
        if ($i == reverse $i) {
            if ($i % 2 == 0) {
                $even_count++;
            } else {
                $odd_count++;
            }
        }
    }
    return [$even_count, $odd_count];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&even_odd_palindrome;
        if(eq_deeply($candidate->(123),[8, 13])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),[4, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),[1, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(63),[6, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(25),[5, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(19),[4, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9),[4, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_108,gla_Latn,pl,"# m.e. -123 tha comharraidhean -1, 2, agus 3. # Ma tha àireamh àicheil, an uairsin bidh a 'chiad chiall a tha air a shoidhnigeadh àicheil: # an àireamh de eileamaidean aig a bheil suim de dhiothan > 0. # Sgrìobh gnìomh count_nums a tha a 'gabhail sreath de dh' àireamhan iomlanach agus a ' tilleadh # >>> count_nums([])
# 0
# >>> count_nums([-1, 11, -11])
# 1
# >>> count_nums([1, 1, 2])
# 3
sub count_nums {
    my($arr) = @_;
","sub count_nums {
    my($arr) = @_;
    my $count = 0;

    foreach my $num (@$arr) {
        my $sum_of_digits = 0;
        my @digits = split //, $num;
        $sum_of_digits += shift @digits; # add the signed digit
        $sum_of_digits += $_ for @digits;
        $count++ if $sum_of_digits > 0;
    }

    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&count_nums;
        if(eq_deeply($candidate->([]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2, 0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 2, -2, 3, 4, 5]),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 6, 9, -6, 0, 1, 5]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 100, 98, -7, 1, -1]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([12, 23, 34, -45, -56, 0]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_109,gla_Latn,pl,"# Mar eisimpleir: # Nota: Tha e cinnteach gu bheil eileamaidean sònraichte aig an sreath a chaidh a thoirt seachad. # Ma tha an sreath a chaidh a thoirt seachad falamh an uairsin tilleadh 1. # an uairsin tilleadh 1 eile tilleadh ''. # Ma tha e comasach a 'faighinn an sreath seòrsaichte le bhith a' coileanadh an gnìomh gu h-àrd # an t-suidheachadh tòiseachaidh anns an t-sreath i.e. 0th index. # Bidh an eileamaid mu dheireadh den t-sreath air a ghluasad gu # Tha aon ghnìomh gluasad gu deas a ' ciallachadh a bhith a ' gluasad a h-uile eileamaid den array le aon.# Tha cead agad obair gluasad air an làimh dheis a dhèanamh aon àireamh de thursan.# an gnìomh a leanas air an t-sreath a chaidh a thoirt seachad: # tha e comasach sreath a sheòrsachadh ann an òrdugh neo-lughdachaidh le bhith a 'dèanamh # Bidh àireamhan anns an sreath air an òrdugh gu h-iomchaidh. Is e an obair agad a bhith a 'dearbhadh a bheil # Tha sreath againn 'arr' de N àireamhan iomlaideach arr[1], arr[2], ..., arr[N].# >>> move_one_ball([3, 4, 5, 1, 2])
# 1
# Explanation: By performin 2 right shift operations, non-decreasing order can
# be achieved for the given array.
# >>> move_one_ball([3, 5, 4, 1, 2])
# """"
# Explanation:It is not possible to get non-decreasing order for the given
# array by performing any number of right shift operations.
sub move_one_ball {
    my($arr) = @_;
","sub move_one_ball {
    my ($arr) = @_;
    my $n = scalar @$arr;
    return 1 if $n == 0;

    for my $i (0 .. $n - 1) {
        my @shifted = (@$arr[$i .. $n - 1], @$arr[0 .. $i - 1]);
        if (is_sorted(\@shifted)) {
            return 1;
        }
    }
    return '';
}

sub is_sorted {
    my ($arr) = @_;
    for my $i (0 .. $#$arr - 1) {
        return 0 if $arr->[$i] > $arr->[$i + 1];
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&move_one_ball;
        if(eq_deeply($candidate->([3, 4, 5, 1, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 5, 10, 1, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 3, 1, 2]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 5, 4, 1, 2]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_110,gla_Latn,pl,"# Mar eisimpleir: # Air neo, tilg ""NO"". # a bhith a 'toirt air ais ""YES"" gus a bhith a' toirt air ais na h-eileamaidean uile de lst1 a bhith eadhon. # Ma tha e comasach a bhith a 'dol an àite eileamaidean eadar an lst1 agus an lst2 a dhèanamh # Chan eil crìoch air an àireamh de eileamaidean a thèid a mhaoineachadh eadar lst1 agus lst2. # eadar iad gus lst1 a dhèanamh na sreath de àireamhan eadhon a-mhàin. # agus a 'dearbhadh a bheil e comasach iomlaid eileamaidean a dhèanamh # Anns an duilgheadas seo, bidh thu a 'cur an gnìomh gnìomh a tha a' gabhail dà sreathan de àireamhan, # >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])
# ""YES""
# >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])
# ""NO""
# It is assumed that the input arrays will be non-empty.
sub exchange {
    my($lst1, $lst2) = @_;
","sub exchange {
    my ($lst1, $lst2) = @_;
    
    # Check if lst1 is already all-even
    my $all_even = 1;
    foreach my $num (@$lst1) {
        if ($num % 2 != 0) {
            $all_even = 0;
            last;
        }
    }
    return ""YES"" if $all_even;

    # Check if there is at least one even number in lst2
    my $can_exchange = 0;
    foreach my $num (@$lst2) {
        if ($num % 2 == 0) {
            $can_exchange = 1;
            last;
        }
    }

    # Calculate the count of odd numbers in lst1
    my $odd_count_lst1 = 0;
    foreach my $num (@$lst1) {
        $odd_count_lst1++ if ($num % 2 != 0);
    }

    # If there are even numbers in lst2 and odd numbers in lst1, we can exchange
    if ($can_exchange && $odd_count_lst1 > 0) {
        return ""YES"";
    }

    return ""NO"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&exchange;
        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 5, 3, 4]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 4]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, 200], [200, 200]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_111,gla_Latn,pl,"# Eisimpleir: # Ma tha grunn litrichean aig an aon àite, cuir iad uile air ais. # Tha an litir leis an àireamh as motha de ath-aithris agus a tha a' toirt a-steach an àireamh co-fhreagarrach. # Air a thoirt seachad sreath a 'riochdachadh àite air a sgaradh litrichean beaga, tilleadh hash # >>> histogram(""a b c"")
# {""a"" => 1, ""b"" => 1, ""c"" => 1}
# >>> histogram(""a b b a"")
# {""a"" => 2, ""b"" => 2}
# >>> histogram(""a b c a b"")
# {""a"" => 2, ""b"" => 2}
# >>> histogram(""b b b b a"")
# {""b"" => 4}
# >>> histogram("""")
# {}
sub histogram {
    my($test) = @_;
","sub histogram {
    my ($test) = @_;
    my %count;

    # Split the input string by spaces and count occurrences of each letter
    $count{$_}++ for split ' ', $test;

    # Determine the maximum count
    my $max_count = 0;
    $max_count = $count{$_} > $max_count ? $count{$_} : $max_count for keys %count;

    # Collect all letters with the maximum count
    my %result = map { $_ => $count{$_} } grep { $count{$_} == $max_count } keys %count;

    return \%result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&histogram;
        if(eq_deeply($candidate->(""a b b a""),{""a"" => 2, ""b"" => 2})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a b c a b""),{""a"" => 2, ""b"" => 2})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a b c d g""),{""a"" => 1, ""b"" => 1, ""c"" => 1, ""d"" => 1, ""g"" => 1})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""r t g""),{""r"" => 1, ""t"" => 1, ""g"" => 1})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""b b b b a""),{""b"" => 4})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""r t g""),{""r"" => 1, ""t"" => 1, ""g"" => 1})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),{})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a""),{""a"" => 1})) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_112,gla_Latn,pl,"# Eisimpleir # Bu chòir dhut sreath a thilleadh a tha a 'toirt a-steach an sreang toradh agus 1/' airson an sgrùdadh. # Canar palindrome ri sreath ma leughas e an aon rud air ais is air adhart. # an uairsin thoir sùil a bheil an sreath toradh palindrome. # Tha sinn air dà shreath s agus c, feumaidh tu a sguabadh às a h-uile caractar ann an s a tha co-ionann ri caractar sam bith ann an c # Tasg # >>> reverse_delete(""abcde"", ""ae"")
# [""bcd"", """"]
# >>> reverse_delete(""abcdef"", ""b"")
# [""acdef"", """"]
# >>> reverse_delete(""abcdedcba"", ""ab"")
# [""cdedc"", 1]
sub reverse_delete {
    my($s, $c) = @_;
","sub reverse_delete {
    my($s, $c) = @_;
    
    # Create a hash of characters to be deleted for quick lookup
    my %chars_to_delete = map { $_ => 1 } split //, $c;
    
    # Remove characters that need to be deleted
    $s =~ s/[$c]//g;
    
    # Check if the resulting string is a palindrome
    my $is_palindrome = ($s eq reverse $s) ? 1 : '';

    # Return the resulting string and palindrome check
    return [$s, $is_palindrome];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&reverse_delete;
        if(eq_deeply($candidate->(""abcde"", ""ae""),[""bcd"", """"])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdef"", ""b""),[""acdef"", """"])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdedcba"", ""ab""),[""cdedc"", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""dwik"", ""w""),[""dik"", """"])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a"", ""a""),["""", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdedcba"", """"),[""abcdedcba"", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdedcba"", ""v""),[""abcdedcba"", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""vabba"", ""v""),[""abba"", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""mamma"", ""mia""),["""", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_113,gla_Latn,pl,"# de dhioghan neo-iomlan anns an i'th sreath den inntrigeadh. # sreang i den inntrigeadh. "" far am bu chòir an àireamh  a chur an àite a h-uile i.# Bu chòir gach eileamaid i den toradh a bhith na ""àireamh de eileamaidean neo-eisimeileach anns an # Air a thoirt seachad sreath de shreathan, far nach eil gach sreath ach àireamhan, tilleadh sreath. # >>> odd_count([""1234567""])
# [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
# >>> odd_count([""3"", ""11111111""])
# [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
sub odd_count {
    my($lst) = @_;
","sub odd_count {
    my ($lst) = @_;
    my @output;
    foreach my $str (@$lst) {
        my $odd_count = 0;
        $odd_count++ while $str =~ /[13579]/g;
        push @output, ""the number of odd elements ${odd_count}n the str${odd_count}ng ${odd_count} of the ${odd_count}nput."";
    }
    return \@output;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&odd_count;
        if(eq_deeply($candidate->([""1234567""]),[""the number of odd elements 4n the str4ng 4 of the 4nput.""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""3"", ""11111111""]),[""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""271"", ""137"", ""314""]),[""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_114,gla_Latn,pl,"# Eisimpleir # de na h-àireamhan. # Air a thoirt seachad sreath de àireamhan iomlana n, lorg an suim as lugha de sheòrsa-sreath sam bith nach eil falamh # >>> minSubArraySum([2, 3, 4, 1, 2, 4])
# 1
# >>> minSubArraySum([-1, -2, -3])
# -6
sub minSubArraySum {
    my($nums) = @_;
","sub minSubArraySum {
    my($nums) = @_;
    my $minSum = $nums->[0];
    my $currentSum = 0;
    
    foreach my $num (@$nums) {
        $currentSum += $num;
        if ($currentSum < $minSum) {
            $minSum = $currentSum;
        }
        if ($currentSum > 0) {
            $currentSum = 0;
        }
    }
    
    return $minSum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&minSubArraySum;
        if(eq_deeply($candidate->([2, 3, 4, 1, 2, 4]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2, -3]),-6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2, -3, 2, -10]),-14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-9999999999999999]),-9999999999999999)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 10, 20, 1000000]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2, -3, 10, -5]),-6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, -1, -2, -3, 10, -5]),-6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([10, 11, 13, 8, 3, 4]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, -33, 32, -1, 0, -2]),-33)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-10]),-10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7]),7)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_115,gla_Latn,pl,"# Eisimpleir 1: # Cuir a-mach an àireamh de thursan a dh'fheumas tu gus na bucaid a leigeil sìos. # Is e an obair agad na bucaid a chleachdadh gus na tobar a shaoradh. # agus tha an aon comas aig a h-uile bucaid. # Tha bucaid co-fhreagarrach aig gach tobar a ghabhas cleachdadh gus uisge a thoirt a-mach às, # agus tha gach 1 ann an sreath a 'riochdachadh aon aonad de dh' uisge. # Tha grìd ceart-cheàrnach de thobhan agad. Tha gach sreath a' riochdachadh aon thobhan, # >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)
# 6
# Example 2:
# >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)
# 5
# Example 3:
# >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)
# 0
# Constraints:
# * all wells have the same length
# * 1 <= grid.length <= 10^2
# * 1 <= grid[:,1].length <= 10^2
# * grid[i][j] -> 0 | 1
# * 1 <= capacity <= 10
sub max_fill {
    my($grid, $capacity) = @_;
","sub max_fill {
    my($grid, $capacity) = @_;
    my $total_water_units = 0;
    
    for my $row (@$grid) {
        for my $unit (@$row) {
            $total_water_units += $unit;
        }
    }
    
    my $bucket_uses = int(($total_water_units + $capacity - 1) / $capacity);
    return $bucket_uses;
}

# Examples
print max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) . ""\n""; # 6
print max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) . ""\n""; # 5
print max_fill([[0, 0, 0], [0, 0, 0]], 5) . ""\n""; # 0","use Test::Deep;


sub testhumaneval {
    my $candidate = \&max_fill;
        if(eq_deeply($candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[0, 0, 0], [0, 0, 0]], 5),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_116,gla_Latn,pl,"# Feumaidh e a bhith air a chur an gnìomh mar seo: # Airson àireamh cho coltach de aonadan, seòrdaich stèidhichte air luach deichealach. # Àireamh nan aonadan anns an riochdachadh dà-mheadhanach aca ann an òrdugh ag èirigh. # Anns an Kata seo, feumaidh tu sreath de dh'àireamhan iomlanaich neo-mheadhain a sheòrsachadh a rèir # >>> sort_array([1, 5, 2, 3, 4])
# [1, 2, 3, 4, 5]
# >>> sort_array([-2, -3, -4, -5, -6])
# [-6, -5, -4, -3, -2]
# >>> sort_array([1, 0, 2, 3, 4])
# [0, 1, 2, 3, 4]
sub sort_array {
    my($arr) = @_;
","sub sort_array {
    my($arr) = @_;
    return [sort { sprintf(""%b"", $a) =~ tr/1// <=> sprintf(""%b"", $b) =~ tr/1// || $a <=> $b } @$arr];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_array;
        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_117,gla_Latn,pl,"# Eisimpleirean: # Nota: faodaidh tu a 'gabhail ris gu bheil an sreath inntrigidh a-mhàin litrichean agus àiteachan.# Ma tha an sreath s falamh an uair sin bu chòir don fheart sreath falamh a thilleadh. # n co-chòmhnantan, ann an òrdugh a tha na faclan sin a 'nochdadh anns an t-sreang s. # gnìomh a thilleas sreath de na faclan uile bho shreang s a tha a 'toirt a-steach dìreach # Air a thoirt seachad sreath s agus àireamh nàdarra n, tha thu air a bhith ag obair gus a chur an gnìomh # >>> select_words(""Mary had a little lamb"", 4)
# [""little""]
# >>> select_words(""Mary had a little lamb"", 3)
# [""Mary"", ""lamb""]
# >>> select_words(""simple white space"", 2)
# []
# >>> select_words(""Hello world"", 4)
# [""world""]
# >>> select_words(""Uncle sam"", 3)
# [""Uncle""]
sub select_words {
    my($s, $n) = @_;
","sub select_words {
    my($s, $n) = @_;
    return [] if $s eq '';
    
    my @words = split(/\s+/, $s);
    my @result;
    
    foreach my $word (@words) {
        my $consonant_count = () = $word =~ /[^aeiouAEIOU]/g;
        push @result, $word if $consonant_count == $n;
    }
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&select_words;
        if(eq_deeply($candidate->(""Mary had a little lamb"", 4),[""little""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mary had a little lamb"", 3),[""Mary"", ""lamb""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""simple white space"", 2),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello world"", 4),[""world""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Uncle sam"", 3),[""Uncle""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("""", 4),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a b c d e f"", 1),[""b"", ""c"", ""d"", ""f""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_118,gla_Latn,pl,"# Eisimpleir: # Faodaidh tu a 'gabhail ris gu bheil an sreath a chaidh a thoirt a-steach a-mhàin Béarla litir. # lorg aon fhuaim a choinnich ris a 'cho-dhùnadh gu h-àrd. # Chan eil briathran ann an toiseach agus deireadh a' cunntadh. Cuir air ais sreath falamh mura robh thu.# dà chòmhnard bhon taobh deas na facal (glèidhidhleach). # Tha facal air a thoirt dhut. 'S e an obair agad an t-uachdaran as fhaisge a lorg a tha eadar # >>> get_closest_vowel(""yogurt"")
# ""u""
# >>> get_closest_vowel(""FULL"")
# ""U""
# >>> get_closest_vowel(""quick"")
# """"
# >>> get_closest_vowel(""ab"")
# """"
sub get_closest_vowel {
    my($word) = @_;
","sub get_closest_vowel {
    my($word) = @_;
    my @chars = split //, $word;
    my $vowel = '';
    my @vowels = qw(a e i o u A E I O U);
    my %vowel_hash = map { $_ => 1 } @vowels;

    for (my $i = $#chars - 1; $i > 0; $i--) {
        if ($vowel_hash{$chars[$i]} && !$vowel_hash{$chars[$i - 1]} && !$vowel_hash{$chars[$i + 1]}) {
            $vowel = $chars[$i];
            last;
        }
    }

    return $vowel;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_closest_vowel;
        if(eq_deeply($candidate->(""yogurt""),""u"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""full""),""u"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""easy""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eAsy""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ali""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""bad""),""a"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""most""),""o"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ab""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ba""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""quick""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""anime""),""i"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Asia""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Above""),""o"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_119,gla_Latn,pl,"# Eisimpleirean: # Thoir air ais 'Yes' ma tha dòigh ann sreang math a dhèanamh, agus thoir air ais 'No' air an làimh eile. # Chan eil "" (()) "" ann. # Tha iad cothromach. Mar eisimpleir: tha an sreath '(((() ' math, fhad 's a tha an sreath # Tha sreath S air a mheas a bhith math ma tha agus a-mhàin ma tha a h-uile parentheses ann an S # Tha e coltach gu bheil an t-sreang a thig às math.# Is e an obair agad sgrùdadh a dhèanamh a bheil e comasach an dà shreang a cheangal a-steach # na parentheses "" (("") no na parentheses dlùth "") "" a-mhàin. # Tha thu air a thoirt seachad sreath de dhà shreathan, an dà shreath a 'gabhail a-steach fosgailte # >>> match_parens([""()("", "")""])
# ""Yes""
# >>> match_parens(["")"", "")""])
# ""No""
sub match_parens {
    my($lst) = @_;
","sub match_parens {
    my($lst) = @_;
    my ($a, $b) = @$lst;
    
    # Helper to check if a string is good (i.e., parentheses balanced)
    sub is_good {
        my ($str) = @_;
        my $balance = 0;
        for my $ch (split //, $str) {
            $balance++ if $ch eq '(';
            $balance-- if $ch eq ')';
            return 0 if $balance < 0; # Too many closing parens
        }
        return $balance == 0; # Balanced if zero
    }
    
    # Check both combinations
    return ""Yes"" if is_good($a . $b) || is_good($b . $a);
    return ""No"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&match_parens;
        if(eq_deeply($candidate->([""()("", "")""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")"", "")""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""(()(())"", ""())())""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")())"", ""(()()(""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""(())))"", ""(()())((""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""()"", ""())""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""(()("", ""()))()""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""(((("", ""((())""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")(()"", ""(()(""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")("", "")(""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""("", "")""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")"", ""(""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_120,gla_Latn,pl,"# Eisimpleir 1: # de dh'fhaid k leis an uiread k as motha ann an arr. # Air a thoirt seachad sreath de dh'àireamhan slàn agus àireamh slàn adhartach k, tilleadh sreath rèiteichte # >>> maximum([-3, -4, 5], 3)
# [-4, -3, 5]
# Example 2:
# >>> maximum([4, -4, 4], 2)
# [4, 4]
# Example 3:
# >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)
# [2]
# Note:
# 1. The length of the array will be in the range of [1, 1000].
# 2. The elements in the array will be in the range of [-1000, 1000].
# 3. 0 <= k <= len(arr)
sub maximum {
    my($arr, $k) = @_;
","sub maximum {
    my($arr, $k) = @_;
    my @sorted = sort { $b <=> $a } @$arr;  # Sort in descending order
    my @result = sort { $a <=> $b } @sorted[0..$k-1];  # Take first k elements and sort them
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&maximum;
        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_121,gla_Latn,pl,"# Eisimpleirean # Air a thoirt seachad sreath de dh'àireamhan iomlana nach eil falamh, tilleadh suim nan eileamaidean neo-iomlan a tha ann an suidheachaidhean eadhon. # >>> solution([5, 8, 7, 1])
# 12
# >>> solution([3, 3, 3, 3, 3])
# 9
# >>> solution([30, 13, 24, 321])
# 0
sub solution {
    my($lst) = @_;
","sub solution {
    my($lst) = @_;
    my $sum = 0;
    for (my $i = 0; $i < @$lst; $i += 2) {
        $sum += $lst->[$i] if $lst->[$i] % 2 != 0;
    }
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&solution;
        if(eq_deeply($candidate->([5, 8, 7, 1]),12)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 3, 3, 3, 3]),9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([30, 13, 24, 321]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 9]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 8]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([30, 13, 23, 32]),23)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 13, 2, 9]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_122,gla_Latn,pl,"# Eisimpleir: # an suim de na h-eileamaidean aig a bheil dà shiostam as àirde bho na k ciad eileamaidean de arr. # Air a thoirt seachad sreath neo-folamh de dh'àireamhan iomlan arr agus àireamh iomlan k, tilleadh # >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
# 24
# Constraints:
# 1. 1 <= len(arr) <= 100
# 2. 1 <= k <= len(arr)
sub add_elements {
    my($arr, $k) = @_;
","sub add_elements {
    my ($arr, $k) = @_;
    my $sum = 0;
    for my $i (0..$k-1) {
        $sum += $arr->[$i] if $arr->[$i] >= -99 && $arr->[$i] <= 99;
    }
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&add_elements;
        if(eq_deeply($candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([111, 121, 3, 4000, 5, 6], 2),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1], 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_123,gla_Latn,pl,"# get_odd_collatz(5) a 'tilleadh [1, 5] # Tha an t-sreath collatz airson 5 [5, 16, 8, 4, 2, 1], mar sin chan eil na h-àireamhan neo-iomlan ach 1, agus 5. # Mar eisimpleir: # 2. array air a thilleadh air a sheòrsachadh ann an òrdugh a 'sìor fhàs. # 1. Collatz(1) tha [1]. # Nota: # Is e an tuairmse gun dè cho luach de n a th 'ann, bidh an sreath an-còmhnaidh a' ruighinn 1. # ma tha an teirm roimhe seo neo-sheòrsach, tha an ath teirm 3 uairean an tè roimhe seo.# an teirm roimhe mar a leanas: ma tha an teirm roimhe cothromach, tha an ath teirm leth de # mar a leanas: tòisich le àireamh iomlan adhartach sam bith n. An uairsin gheibh gach teirm bhon # 'S e beachd-bheachd ann am matamataigs a th' ann an co-thuigse Collatz a tha a' buntainn ri sreath air a mhìneachadh # Air a thoirt seachad àireamh iomlan adhartach n, tilleadh sreath rèiteichte aig a bheil na h-àireamhan neo-sheòrsach ann an sreath collatz. # >>> get_odd_collatz(5)
# [1, 5]
sub get_odd_collatz {
    my($n) = @_;
","sub get_odd_collatz {
    my ($n) = @_;
    my %odd_numbers;
    
    while ($n != 1) {
        $odd_numbers{$n} = 1 if $n % 2 != 0;
        if ($n % 2 == 0) {
            $n = $n / 2;
        } else {
            $n = 3 * $n + 1;
        }
    }
    $odd_numbers{1} = 1;
    
    return sort { $a <=> $b } keys %odd_numbers;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_odd_collatz;
        if(eq_deeply($candidate->(14),[1, 5, 7, 11, 13, 17])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),[1, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),[1, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_124,gla_Latn,pl,"# 4. Bu chòir an ceann-latha a bhith ann an cruth: mm-dd-yyyy # Cha bu chòir na mìosan a bhith nas lugha na 1 no nas àirde na 12.# Tha an àireamh de làithean chan eil nas lugha na 1 no nas àirde na 31 latha airson mìosan 1,3,5,7,8,10,12. Agus an àireamh de làithean chan eil nas lugha na 1 no nas àirde na 30 latha airson mìosan 4,6,9,11. Agus, an àireamh de làithean chan eil nas lugha na 1 no nas àirde na 29 airson mìos 2. # 1. Chan eil an sreath dhen cheann-latha falamh.# Tha an ceann-latha dligheach ma tha na riaghailtean a leanas uile air an coinneachadh: # Bidh an t-ionad a 'toirt air ais 1 ma tha an ceann-latha dligheach air dhòigh eile' '. # Feumaidh tu gnìomh a sgrìobhadh a bhios a ' dearbhadh sreath ceann-latha sònraichte agus # >>> valid_date(""03-11-2000"")
# 1
# >>> valid_date(""15-01-2012"")
# """"
# >>> valid_date(""04-0-2040"")
# """"
# >>> valid_date(""06-04-2020"")
# 1
# >>> valid_date(""06/04/2020"")
# """"
sub valid_date {
    my($date) = @_;
","sub valid_date {
    my ($date) = @_;
    
    # Check if date is empty
    return '' if !$date;
    
    # Date pattern for mm-dd-yyyy
    if ($date =~ /^(\d{2})-(\d{2})-(\d{4})$/) {
        my ($month, $day, $year) = ($1, $2, $3);
        
        # Check month validity
        return '' if $month < 1 || $month > 12;
        
        # Check day validity based on the month
        my %days_in_month = (
            1 => 31, 2 => 29, 3 => 31, 4 => 30,
            5 => 31, 6 => 30, 7 => 31, 8 => 31,
            9 => 30, 10 => 31, 11 => 30, 12 => 31
        );
        
        return '' if $day < 1 || $day > $days_in_month{$month};
        
        # If all conditions are satisfied, return 1
        return 1;
    }
    
    # If date does not match the pattern, return ''
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&valid_date;
        if(eq_deeply($candidate->(""03-11-2000""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""15-01-2012""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04-0-2040""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""06-04-2020""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""01-01-2007""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""03-32-2011""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04-31-3000""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""06-06-2005""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""21-31-2000""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04-12-2003""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04122003""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""20030412""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2003-04""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2003-04-12""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04-2003""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_125,gla_Latn,pl,"# Eisimpleirean # clàr-litreachaidh, ord (a') = 0, ord (b') = 1, ... ord (z') = 25 # bu chòir a roinn air coma ',' ma tha chan eil coma ann bu chòir dhut a thilleadh an àireamh de litrichean beaga le òrdugh neo-iomlan ann an # Air a thoirt seachad sreath de fhaclan, tilleadh sreath de fhaclan air an roinn air àite geal, mura h-eil àite geal sam bith ann san teacsa a tha thu ag iarraidh # >>> split_words(""Hello world!"")
# [""Hello"", ""world!""]
# >>> split_words(""Hello,world!"")
# [""Hello"", ""world!""]
# >>> split_words(""abcdef"")
# 3
sub split_words {
    my($txt) = @_;
","sub split_words {
    my($txt) = @_;
    
    # Check if whitespace exists in the string
    if ($txt =~ /\s/) {
        my @words = split(/\s+/, $txt);
        return \@words;
    }
    # If no whitespace, check for commas
    elsif ($txt =~ /,/) {
        my @words = split(/,/, $txt);
        return \@words;
    }
    # If neither whitespace nor commas exist, calculate odd ordered lowercase letters
    else {
        my @chars = split(//, $txt);
        my $count = 0;
        foreach my $char (@chars) {
            if ($char ge 'a' && $char le 'z' && (ord($char) - ord('a')) % 2 == 0) {
                $count++;
            }
        }
        return $count;
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&split_words;
        if(eq_deeply($candidate->(""Hello world!""),[""Hello"", ""world!""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello,world!""),[""Hello"", ""world!""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello world,!""),[""Hello"", ""world,!""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello,Hello,world !""),[""Hello,Hello,world"", ""!""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdef""),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaabb""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaaBb""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_126,gla_Latn,pl,"# Eisimpleirean # àireamh, tilleadh '.' Na gabh ri àireamhan àicheil agus dìreach àireamhan iomlan. # ann an òrdugh ag èirigh. Ma tha barrachd air 1 dà-chruth den aon array # Air a thoirt seachad sreath de àireamhan, tilleadh an tèid an seòrsachadh no nach eil.# >>> is_sorted([5])
# 1
# >>> is_sorted([1, 2, 3, 4, 5])
# 1
# >>> is_sorted([1, 3, 2, 4, 5])
# """"
# >>> is_sorted([1, 2, 3, 4, 5, 6])
# 1
# >>> is_sorted([1, 2, 3, 4, 5, 6, 7])
# 1
# >>> is_sorted([1, 3, 2, 4, 5, 6, 7])
# """"
# >>> is_sorted([1, 2, 2, 3, 3, 4])
# 1
# >>> is_sorted([1, 2, 2, 2, 3, 4])
# """"
sub is_sorted {
    my($lst) = @_;
","sub is_sorted {
    my($lst) = @_;
    my %count;
    
    for (my $i = 0; $i < @$lst; $i++) {
        $count{$lst->[$i]}++;
        
        # Check for more than one duplicate
        if ($count{$lst->[$i]} > 2) {
            return '';
        }
        
        # Check if the array is not sorted
        if ($i > 0 && $lst->[$i] < $lst->[$i - 1]) {
            return '';
        }
    }
    
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_sorted;
        if(eq_deeply($candidate->([5]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 2, 4, 5]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 3, 3, 4]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_127,gla_Latn,pl,"# [tomhais] samples: # Mura h-eil an dà eadar-ama a 'crochadh, tilg ""NO"". # air neo, tilg ""NO"". # Ma tha fad an t-eadar-ghnàth na àireamh phrìomh, tilleadh ""YES"", # a tha a dh'fhaid 1, nach eil prìomhach àireamh. # Mar eisimpleir, is e (2, 3) crochadh nan eadar-ama (1, 3), (2, 4) # Tha e na àireamh phrìomh.# Is e an obair agad a bhith a 'dearbhadh an e fad croitearachd an dà chuid seo # Airson gach earrainn a chaidh a thoirt seachad, thathar a 'gabhail ris gu bheil an toiseach aige nas lugha no co-ionann ris an deireadh aige. # Tha an dà chuid toiseach agus deireadh ann. # Tha na h-eadar-ùine a chaidh a thoirt seachad dùinte, a tha a 'ciallachadh gu bheil an eadar-ùine (tòiseachadh, deireadh) # far a bheil gach eadar-amail na chàraid de dh'àireamhan iomlanach. Mar eisimpleir, eadar-amail = (tòiseachadh, deireadh) = (1, 2).# Tha dà eadar-ama air a thoirt dhut, # >>> intersection([1, 2], [2, 3])
# ""NO""
# >>> intersection([-1, 1], [0, 4])
# ""NO""
# >>> intersection([-3, -1], [-5, 5])
# ""YES""
sub intersection {
    my($interval1, $interval2) = @_;
","sub is_prime {
    my $num = shift;
    return 0 if $num <= 1;
    for my $i (2 .. sqrt($num)) {
        return 0 if $num % $i == 0;
    }
    return 1;
}

sub intersection {
    my ($interval1, $interval2) = @_;

    my $start1 = $interval1->[0];
    my $end1 = $interval1->[1];
    my $start2 = $interval2->[0];
    my $end2 = $interval2->[1];

    my $intersection_start = ($start1 > $start2) ? $start1 : $start2;
    my $intersection_end = ($end1 < $end2) ? $end1 : $end2;

    if ($intersection_start <= $intersection_end) {
        my $intersection_length = $intersection_end - $intersection_start;
        return is_prime($intersection_length) ? ""YES"" : ""NO"";
    }

    return ""NO"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&intersection;
        if(eq_deeply($candidate->([1, 2], [2, 3]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 1], [0, 4]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, -1], [-5, 5]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-2, 2], [-4, 0]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-11, 2], [-1, -1]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2], [3, 5]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2], [1, 2]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-2, -2], [-3, -2]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_128,gla_Latn,pl,"# Eisimpleir: # Nota: tilleadh undef airson arr falamh. # de gach àireamh anns an sreath, air a riochdachadh le 1, -1 no 0. # Sum de mhòiridhean de dh'àireamhan iomlaichte le toradh nan soidhnichean uile # Tha thu air a thoirt seachad arr de inteirean agus feumaidh tu a thilleadh # >>> prod_signs([1, 2, 2, -4])
# 9
# >>> prod_signs([0, 1])
# 0
# >>> prod_signs([])
# undef
sub prod_signs {
    my($arr) = @_;
","sub prod_signs {
    my($arr) = @_;
    return undef if scalar(@$arr) == 0;

    my $sum_magnitudes = 0;
    my $product_signs = 1;

    for my $num (@$arr) {
        $sum_magnitudes += abs($num);
        
        if ($num > 0) {
            $product_signs *= 1;
        } elsif ($num < 0) {
            $product_signs *= -1;
        } else {
            $product_signs *= 0;
        }
    }

    return $sum_magnitudes * $product_signs;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&prod_signs;
        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 1, 2, -1, -1, 9]),20)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 1, 1, 1]),-4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_129,gla_Latn,pl,"# Eisimpleirean: # Bidh e a' tilleadh sreath òrdaichte de na luachan air na ceallan a tha an t-slighe as lugha a' dol troimhe. # Tha e cinnteach gu bheil am freagairt sònraichte. # lst_A[j] = lst_B[j]. # mar sin lst_A[i] < lst_B[i] agus airson j sam bith (1 <= j < i) tha # na lst_B, ann am faclan eile, tha clàr-amais iomlaideach ann i (1 <= i <= k) # tro (gairmidh sinn iad lst_A agus lst_B), tha lst_A nas lugha leacsaigografach # an dèidh a 'dèanamh an òrdugh arrays de na luachan air na ceallan a tha A agus B a' dol # Tha slighe A (de dh'fhaid k) air a mheas nas lugha na slighe B (de dh'fhaid k) ma tha # Chan urrainn dhut a dhol a-mach às a' ghriod. # a bhith air leth).# Thoir fa-near gu bheil slighe de dh'fhaid k a' ciallachadh a bhith a' tadhal dìreach air k ceallan (chan e # cealla. # ann an faclan eile, faodaidh tu a dhol gu ceallan a tha a 'roinn a' chladach le thu a-nis # bho aon chealla, agus anns gach ceum faodaidh tu gluasad gu gin de na ceallan nàbaidh, # Feumaidh tu an t-slighe as lugha de dh'fhaid k a lorg anns a' ghrèidh.# Tha inclusive a' nochdadh dìreach aon uair air ceallan a' ghrèide. # Tha luach anns gach cealla den ghrìd.# Air a thoirt seachad air lìonra le sreathan N agus colbhan N (N >= 2) agus àireamh iomlan adhartach k, # >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
# [1, 2, 1]
# >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)
# [1]
sub minPath {
    my($grid, $k) = @_;
","sub minPath {
    my ($grid, $k) = @_;
    my $n = scalar @$grid;

    # Create direction vectors for up, down, left, right moves
    my @directions = ([0, 1], [1, 0], [0, -1], [-1, 0]);

    # Priority queue to store paths using a lexicographically ordered array
    my @queue;
    for my $i (0..$n-1) {
        for my $j (0..$n-1) {
            push @queue, [[$grid->[$i][$j]], $i, $j];
        }
    }

    # Sort the initial cells based on their values to start with minimum paths
    @queue = sort { $a->[0][0] <=> $b->[0][0] } @queue;

    # Implement a breadth-first search that continues until we have a path of length k
    while (@queue) {
        my $current = shift @queue;
        my ($path, $x, $y) = @$current;

        # Return the first path of length k since paths are checked in lexicographical order
        return @$path if scalar @$path == $k;

        # Explore neighboring cells
        for my $direction (@directions) {
            my ($dx, $dy) = @$direction;
            my ($nx, ny) = ($x + $dx, $y + $dy);
            
            # Check for valid cell
            if ($nx >= 0 && $nx < $n && $ny >= 0 && $ny < $n) {
                my @new_path = (@$path, $grid->[$nx][$ny]);
                push @queue, [\@new_path, $nx, $ny];
            }
        }
        # Keep the queue ordered by lexicographical order of paths
        @queue = sort { 
            my ($a_path, $b_path) = ($a->[0], $b->[0]);
            for my $i (0..$#$a_path) {
                return $a_path->[$i] <=> $b_path->[$i] if $a_path->[$i] != $b_path->[$i];
            }
        } @queue;
    }
}

# Example usage:
#print join("", "", minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)), ""\n"";  # [1, 2, 1]
#print join("", "", minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)), ""\n"";  # [1]","use Test::Deep;


sub testhumaneval {
    my $candidate = \&minPath;
        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_130,gla_Latn,pl,"# Eisimpleirean: # a' chiad n + 1 àireamhan de shreath Tribonacci. # Tha thu air a thoirt seachad a non-àicheil integer àireamh n, feumaidh tu a thilleadh array de na # = 2 + 3 + 3 = 8 # tri(3) = tri(2) + tri(1) + tri(4) # tri(4) = 3 # tri(2) = 1 + (2 / 2) = 2 # Mar eisimpleir: # tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ma tha n neo-iomlan. # tri (n) = 1 + n / 2, ma tha n eadhon. # tri(1) = 3 # Tha sreath Tribonacci air a mhìneachadh leis an ath-thòiseachadh: # Ach, chan eil fios aig daoine mu sheòrsa Tribonacci.# Tha fios aig a h-uile duine air sreath Fibonacci, chaidh a sgrùdadh gu domhainn le matamataigs ann an # >>> tri(3)
# [1, 3, 2, 8]
sub tri {
    my($n) = @_;
","sub tri {
    my ($n) = @_;
    my @sequence = (3);  # starting with tri(1) = 3

    for my $i (1 .. $n) {
        if ($i % 2 == 0) {
            push @sequence, 1 + $i / 2;
        } else {
            my $val = $sequence[$i - 1] + $sequence[$i - 2] + ($i + 1 <= $n ? (1 + ($i + 1) / 2) : 0);
            push @sequence, $val;
        }
    }

    return @sequence;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&tri;
        if(eq_deeply($candidate->(3),[1, 3, 2, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),[1, 3, 2, 8, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),[1, 3, 2, 8, 3, 15])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),[1, 3, 2, 8, 3, 15, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),[1, 3, 2, 8, 3, 15, 4, 24])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),[1, 3, 2, 8, 3, 15, 4, 24, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0),[1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[1, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_131,gla_Latn,pl,"# Mar eisimpleir: # Cuir 0 air ais ma tha na h-àireamhan uile eadhon. # Air a thoirt seachad àireamh iomlan adhartach n, tilleadh toradh nan diogan neo-sheòrsach. # >>> digits(1)
# 1
# >>> digits(4)
# 0
# >>> digits(235)
# 15
sub digits {
    my($n) = @_;
","my @digits = split //, $n;
    my $product = 1;
    my $has_odd = 0;

    foreach my $digit (@digits) {
        if ($digit % 2 != 0) {
            $product *= $digit;
            $has_odd = 1;
        }
    }

    return $has_odd ? $product : 0;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&digits;
        if(eq_deeply($candidate->(5),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(54),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(120),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5014),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(98765),315)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5576543),2625)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2468),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_132,gla_Latn,pl,"# far a bheil co-dhiù aon bracaid anns an ath-shealladh air a neadachadh. # Bu chòir don fheart 1 a thilleadh ma tha fo-shealladh dligheach de chlàran ann agus a-mhàin ma tha.# Cruthaich gnìomh a tha a 'gabhail sreath mar inntrigeadh a tha a-mhàin ceàrnagach brackets. # >>> is_nested(""[[]]"")
# 1
# >>> is_nested(""[]]]]]]][[[[[]"")
# """"
# >>> is_nested(""[][]"")
# """"
# >>> is_nested(""[]"")
# """"
# >>> is_nested(""[[][]]"")
# 1
# >>> is_nested(""[[]][["")
# 1
sub is_nested {
    my($string) = @_;
","sub is_nested {
    my ($string) = @_;
    my @stack;

    for my $char (split //, $string) {
        if ($char eq '[') {
            push @stack, $char;
        } elsif ($char eq ']') {
            if (@stack && $stack[-1] eq '[') {
                pop @stack;
                return 1 if @stack; # Check for nesting
            } else {
                return """"; # Unbalanced brackets
            }
        }
    }

    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_nested;
        if(eq_deeply($candidate->(""[[]]""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[]]]]]]][[[[[]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[][]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[[[]]]]""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[]]]]]]]]]]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[][][[]]""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[]]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[]][[""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[][]]""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[[[[[[[""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""]]]]]]]]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_133,gla_Latn,pl,"# Eisimpleirean: # Cuir a-steach an t-sreath gu na h-ìrean as àirde.# Feumaidh tu a thilleadh an t-suim de na h-àireamhan ceud ann an sreath a chaidh a thoirt seachad, # Tha sreath de àireamhan air a thoirt dhut.# >>> lst([1.0, 2.0, 3.0])
# 14
# >>> lst([1.0, 4.0, 9.0])
# 98
# >>> lst([1.0, 3.0, 5.0, 7.0])
# 84
# >>> lst([1.4, 4.2, 0.0])
# 29
# >>> lst([-2.4, 1.0, 1.0])
# 6
sub sum_squares {
    my($lst) = @_;
","sub sum_squares {
    my($lst) = @_;
    my $sum = 0;
    foreach my $num (@$lst) {
        my $ceil_num = int($num) + ($num > int($num) ? 1 : 0);
        $sum += $ceil_num ** 2;
    }
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sum_squares;
        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 3.0, 5.0, 7.0]),84)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.4, 4.2, 0.0]),29)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-2.4, 1.0, 1.0]),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100.0, 1.0, 15.0, 2.0]),10230)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([10000.0, 10000.0]),200000000)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.4, 4.6, 6.3]),75)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.4, 17.9, 18.9, 19.9]),1086)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.0]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.0, 1.0, 0.0]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_134,gla_Latn,pl,"# Eisimpleirean: # Nota: 'S e buidheann de charactaran a tha air an sgaradh le spàsaid a th' ann am ""word"". # pàirt de fhacal, agus '' air dhòigh eile. # de shreang a chaidh a thoirt seachad tha caractar aibideil agus chan eil e # Cruthaich gnìomh a thilleas 1 ma tha an caractar mu dheireadh # >>> check_if_last_char_is_a_letter(""apple pie"")
# """"
# >>> check_if_last_char_is_a_letter(""apple pi e"")
# 1
# >>> check_if_last_char_is_a_letter(""apple pi e "")
# """"
# >>> check_if_last_char_is_a_letter("""")
# """"
sub check_if_last_char_is_a_letter {
    my($txt) = @_;
","sub check_if_last_char_is_a_letter {
    my ($txt) = @_;
    $txt =~ s/\s+$//; # Trim trailing spaces
    return '' if $txt eq ''; 

    if ($txt =~ /([^a-zA-Z])([a-zA-Z])$/ && $1 eq ' ') {
        return 1;
    }
    
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&check_if_last_char_is_a_letter;
        if(eq_deeply($candidate->(""apple""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""apple pi e""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eeeee""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""A""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Pumpkin pie ""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Pumpkin pie 1""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eeeee e ""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""apple pie""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""apple pi e ""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_135,gla_Latn,pl,"# Eisimpleirean: # luachan dùblaichte. # chan eil eileamaid mar sin ann an sin tilleadh -1. Cha bhi  anns an sreath a chaidh a thoirt seachad.# chan eil e nas motha na no co-ionann ris an eileamaid a tha dìreach roimhe.# Cruthaich gnìomh a thilleas an clàr-amais as motha de eileamaid a tha # >>> can_arrange([1, 2, 4, 3, 5])
# 3
# >>> can_arrange([1, 2, 3])
# -1
sub can_arrange {
    my($arr) = @_;
","sub can_arrange {
    my ($arr) = @_;
    for my $i (1 .. $#$arr) {
        if ($arr->[$i] < $arr->[$i - 1]) {
            return $i;
        }
    }
    return -1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&can_arrange;
        if(eq_deeply($candidate->([1, 2, 4, 3, 5]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 4, 5]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 8, 5, 7, 3]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_136,gla_Latn,pl,"# Eisimpleirean: # Mura h-eil àireamhan iomlanach àicheil no adhartach ann, tilg iad mar undef. # de dh'àireamhan iomlan adhartach ann an sreath. # Is e an àireamh as motha de na h-àireamhan àicheil, agus is e 'b' an àireamh as lugha # Cruthaich gnìomh a thilleas sreath (a, b), far a bheil 'a' # >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])
# [undef, 1]
# >>> largest_smallest_integers([])
# [undef, undef]
# >>> largest_smallest_integers([0])
# [undef, undef]
sub largest_smallest_integers {
    my($lst) = @_;
","sub largest_smallest_integers {
    my ($lst) = @_;
    my ($largest_neg, $smallest_pos);

    foreach my $num (@$lst) {
        if ($num < 0) {
            $largest_neg = $num if !defined($largest_neg) || $num > $largest_neg;
        } elsif ($num > 0) {
            $smallest_pos = $num if !defined($smallest_pos) || $num < $smallest_pos;
        }
    }
    
    return ($largest_neg, $smallest_pos);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&largest_smallest_integers;
        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7, 0]),[undef, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 5, 3, 6, 2, 7, -7]),[-7, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[undef, undef])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0]),[undef, undef])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1, undef])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-6, -4, -4, -3, 1]),[-3, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_137,gla_Latn,pl,"# Nota: Ma tha àireamh fìor air a riochdachadh mar shreang, dh'fhaodadh an puing-gleidhidh a bhith . no , # Bidh undef a 'tilleadh ma tha na luachan co-ionann. # àireamhan fìor, agus a 'tilleadh an caochlaideach nas motha ann an seòrsa caochlaideach a chaidh a thoirt seachad. # Cruthaich gnìomh a tha a 'gabhail integers, floats, no sreathan a' riochdachadh # >>> compare_one(1, 2.5)
# 2.5
# >>> compare_one(1, ""2,3"")
# ""2,3""
# >>> compare_one(""5,1"", ""6"")
# ""6""
# >>> compare_one(""1"", 1)
# undef
sub compare_one {
    my($a, $b) = @_;
","sub compare_one {
    my ($a, $b) = @_;

    # Convert potential string numbers with ',' into float representation
    $a =~ s/,/./g if $a =~ /,/;
    $b =~ s/,/./g if $b =~ /,/;

    # Auto-detect type by checking if string has non-numeric parts
    my $a_is_num = $a =~ /^\d+(\.\d+)?$/;
    my $b_is_num = $b =~ /^\d+(\.\d+)?$/;

    if ($a_is_num && $b_is_num) {
        # Compare as numbers
        if ($a < $b) {
            return $b;
        } elsif ($a > $b) {
            return $a;
        } else {
            return undef;
        }
    } else {
        # Compare as strings
        if ($a lt $b) {
            return $b;
        } elsif ($a gt $b) {
            return $a;
        } else {
            return undef;
        }
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&compare_one;
        if(eq_deeply($candidate->(1, 2),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2.5),2.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 3),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 6),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, ""2,3""),""2,3"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""5,1"", ""6""),""6"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1"", ""2""),""2"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1"", 1),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_138,gla_Latn,pl,"# Eisimpleir # Measadh an urrainnear an àireamh a chaidh a thoirt seachad n a sgrìobhadh mar suim de dìreach 4 àireamhan fiù 's adhartach.# >>> is_equal_to_sum_even(4)
# """"
# >>> is_equal_to_sum_even(6)
# """"
# >>> is_equal_to_sum_even(8)
# 1
sub is_equal_to_sum_even {
    my($n) = @_;
","sub is_equal_to_sum_even {
    my($n) = @_;

    # A number can be expressed as the sum of four positive even numbers
    # if and only if it is greater than or equal to 8 and is even
    if ($n >= 8 && $n % 2 == 0) {
        return 1;
    } else {
        return """";
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_equal_to_sum_even;
        if(eq_deeply($candidate->(4),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(13),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(16),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_139,gla_Latn,pl,"# Mar eisimpleir: # far a bheil n > 0 # brazilian_factorial (n) = n! * (n-1)! * (n-2)! * ... * 1! # Tha factorial na Braisil air a mhìneachadh mar: # >>> special_factorial(4)
# 288
# The function will receive an integer as input and should return the special
# factorial of this integer.
sub special_factorial {
    my($n) = @_;
","sub special_factorial {
    my($n) = @_;
    my $result = 1;
    
    for my $i (1 .. $n) {
        $result *= factorial($i);
    }
    
    return $result;
}

sub factorial {
    my($num) = @_;
    my $fact = 1;

    for my $i (1 .. $num) {
        $fact *= $i;
    }

    return $fact;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&special_factorial;
        if(eq_deeply($candidate->(4),288)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),34560)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),125411328000)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_140,gla_Latn,pl,"# an uairsin cuir -  an àite gach àite le chèile# agus ma tha barrachd air 2 àitean le chèile aig sreath, # Air a thoirt seachad sreath teacsa, cuir fo-sgrìobhtean an àite a h-uile àite ann, # >>> fix_spaces("" Example"")
# ""Example""
# >>> fix_spaces("" Example 1"")
# ""Example_1""
# >>> fix_spaces("" Example 2"")
# ""_Example_2""
# >>> fix_spaces("" Example 3"")
# ""_Example-3""
sub fix_spaces {
    my($text) = @_;
","sub fix_spaces {
    my($text) = @_;
    $text =~ s/ {3,}/-/g;   # Replace 3 or more spaces with a hyphen
    $text =~ s/ /_/g;       # Replace remaining spaces with underscores
    return $text;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fix_spaces;
        if(eq_deeply($candidate->(""Example""),""Example"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mudasir Hanif ""),""Mudasir_Hanif_"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Yellow Yellow  Dirty  Fellow""),""Yellow_Yellow__Dirty__Fellow"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Exa   mple""),""Exa-mple"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""   Exa 1 2 2 mple""),""-Exa_1_2_2_mple"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_141,gla_Latn,pl,"# Eisimpleirean: # - Bu chòir don fho-shreang às dèidh a' phuing a bhith mar aon de na leanas: ['txt', 'exe', 'dll'] # an clàr-litreacha Laidinn ('a'-'z' agus 'A'-'Z'). # - Cha bu chòir an fo-shreang ron phuing a bhith falamh, agus tha e a 'tòiseachadh le litir bho # - Tha ainm an fhaidhle a tha dìreach aon dot '.' # - Cha bu chòir barrachd air trì shiùil ('0'-'9') a bhith ann an ainm na faidhle. # a ' coinneachadh: # Tha ainm faidhle air a mheas a bhith dligheach ma tha agus a-mhàin ma tha na cumhaichean a leanas uile ann # 'Tha' ma tha ainm an fhaidhle dligheach, agus a 'tilleadh' Chan eil 'air dhòigh eile. # Cruthaich gnìomh a tha a 'gabhail sreang a' riochdachadh ainm faidhle, agus a 'tilleadh # >>> file_name_check(""example.txt"")
# ""Yes""
# >>> file_name_check(""1example.dll"")
# ""No""
sub file_name_check {
    my($file_name) = @_;
","sub file_name_check {
    my($file_name) = @_;
    
    # Check if there's exactly one dot and split the string
    my @parts = split(/\./, $file_name);
    return 'No' unless scalar(@parts) == 2;

    # Extract the name and the extension
    my ($name, $extension) = @parts;

    # Check if the extension is valid
    return 'No' unless $extension =~ /^(txt|exe|dll)$/;

    # Check if the name starts with a letter
    return 'No' unless $name =~ /^[a-zA-Z]/;

    # Check the number of digits in the name
    my $digit_count = () = $name =~ /[0-9]/g;
    return 'No' if $digit_count > 3;

    # If all conditions are met, return 'Yes'
    return 'Yes';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&file_name_check;
        if(eq_deeply($candidate->(""example.txt""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1example.dll""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""s1sdf3.asd""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""K.dll""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""MY16FILE3.exe""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""His12FILE94.exe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""_Y.txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""?aREYA.exe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""/this_is_valid.dll""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""this_is_valid.wow""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""this_is_valid.txt""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""this_is_valid.txtexe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#this2_i4s_5valid.ten""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""@this1_is6_valid.exe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""this_is_12valid.6exe4.txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""all.exe.txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I563_No.exe""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Is3youfault.txt""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""no_one#knows.dll""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1I563_Yes3.exe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I563_Yes3.txtt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""final..txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""final132""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""_f4indsartal132.""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("".txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""s.""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_142,gla_Latn,pl,"# Eisimpleirean: # atharraich na clàran anns an sreath aig nach eil na clàran iomadaichte ri 3 no 4. An uairsin tillidh an gnìomh suim nan clàran uile. # Tha e air a bhith a' cur an àireamh-lìonaidh gu cuibheasach ma tha an t-einnsean aige na iomadachadh de 4 agus chan e iomadachadh de 3. Cha bhi an gnìomh a' dèanamh # Bidh an gnìomh seo a' gabhail sreath de dh'àireamhan iomlan. Airson a h-uile inntrigeadh san sreath, bidh an gnìomh a' ceàrnagachadh an inntrigeadh iomlaideach ma tha an clàr-amais aige a # "" # >>> lst
# [1, 2, 3]
# >>> lst
# []
# >>> lst
# [-1, -5, 2, -1, -5]
sub sum_squares {
    my($lst) = @_;
","sub sum_squares {
    my ($lst) = @_;
    my $sum = 0;

    for my $i (0 .. @$lst - 1) {
        if ($i % 3 == 0) {
            $sum += $lst->[$i] ** 2;
        } elsif ($i % 4 == 0) {
            $sum += $lst->[$i] ** 3;
        } else {
            $sum += $lst->[$i];
        }
    }

    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sum_squares;
        if(eq_deeply($candidate->([1, 2, 3]),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 4, 9]),14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1]),9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -5, 2, -1, -5]),-126)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-56, -99, 1, 0, -2]),3030)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_143,gla_Latn,pl,"# Eisimpleir 1: # bu chòir òrdugh nam faclan san t-sreang ùr a bhith mar an tè tùsail. # a tha na h-àireamhan prìomhach, # agus feumaidh tu a thilleadh sreang a tha na faclan bhon abairt tùsail, # tha cuid de fhaclan air an roinn le spàsaid anns an abairt, # Tha sreang air a thoirt dhut a tha a' riochdachadh abairt, # >>> words_in_sentence(""This is a test"")
# ""is""
# Example 2:
# >>> words_in_sentence(""lets go for swimming"")
# ""go for""
# Constraints:
# * 1 <= len(sentence) <= 100
# * sentence contains only letters
sub words_in_sentence {
    my($sentence) = @_;
","sub words_in_sentence {
    my($sentence) = @_;
    
    # Function to check if a number is prime
    sub is_prime {
        my $num = shift;
        return 0 if $num < 2;
        for (my $i = 2; $i * $i <= $num; ++$i) {
            return 0 if $num % $i == 0;
        }
        return 1;
    }
    
    my @words = split(' ', $sentence);
    my @prime_length_words;
    
    foreach my $word (@words) {
        my $length = length($word);
        if (is_prime($length)) {
            push(@prime_length_words, $word);
        }
    }
    
    return join(' ', @prime_length_words);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&words_in_sentence;
        if(eq_deeply($candidate->(""This is a test""),""is"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""lets go for swimming""),""go for"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""there is no place available here""),""there is no place"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hi I am Hussein""),""Hi am Hussein"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""go for it""),""go for it"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""here""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""here is""),""is"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_144,gla_Latn,pl,"# Faodaidh tu gabhail ris gu bheil x, agus n nan cuibhreannan dligheach, agus nach eil zero aca mar ainm-seòrsair.# <numerator>/<denominator> far a bheil an dà chuid an àireamh agus an ainmneadair nan àireamhan iomlaideach adhartach. # an dàrna dòigh. Tha an dà chuid x agus n, na riochdachadh sreang de bhriseadh, agus tha an cruth a leanas aca, # x * n. Bidh an gnìomh a 'tilleadh 1 ma tha x * n a' meudachadh gu àireamh iomlan agus ' ' # Is e an obair agad gnìomh a chuir an gnìomh a shìmpleas an abairt # >>> simplify(""1/5"", ""5/1"")
# 1
# >>> simplify(""1/6"", ""2/1"")
# """"
# >>> simplify(""7/10"", ""10/2"")
# """"
sub simplify {
    my($x, $n) = @_;
","sub simplify {
    my ($x, $n) = @_;
    
    # Parse the fractions
    my ($x_num, $x_den) = split('/', $x);
    my ($n_num, $n_den) = split('/', $n);
    
    # Cross-multiply to find the product of the fractions
    # x * n = (x_num * n_num) / (x_den * n_den)
    my $prod_num = $x_num * $n_num;
    my $prod_den = $x_den * $n_den;
    
    # Check if the product is a whole number
    return ($prod_num % $prod_den == 0) ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&simplify;
        if(eq_deeply($candidate->(""1/5"", ""5/1""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1/6"", ""2/1""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""5/1"", ""3/1""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""7/10"", ""10/2""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2/10"", ""50/10""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""7/2"", ""4/2""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""11/6"", ""6/1""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2/3"", ""5/2""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""5/2"", ""3/5""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2/4"", ""8/4""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2/4"", ""4/2""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1/5"", ""5/1""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1/5"", ""1/5""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_145,gla_Latn,pl,"# Mar eisimpleir: # òrdugh iad stèidhichte air an clàr-amais aca ann an sreath tùsail.# Nota: ma tha grunn sheòrsaichean ann le suim cho coltach ri na h-àireamhan aca, # ann an òrdugh ag èirigh a rèir suim nan siorp aca. # Sgrìobh gnìomh a tha a ' seòrsachadh an sreath de dh' àireamhan iomlan a chaidh a thoirt seachad # >>> order_by_points([1, 11, -1, -11, -12])
# [-1, -11, 1, -12, 11]
# >>> order_by_points([])
# []
sub order_by_points {
    my($nums) = @_;
","sub order_by_points {
    my ($nums) = @_;
    
    # Function to calculate the sum of the digits of a number
    sub digit_sum {
        my $num = shift;
        my $sum = 0;
        $sum += $_ for split //, abs($num);
        return $sum;
    }

    # Sort the array first by sum of digits, then by index for ties
    my @sorted = sort {
        digit_sum($a) <=> digit_sum($b) ||
        $a <=> $b
    } @$nums;

    return \@sorted;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&order_by_points;
        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_146,gla_Latn,pl,"# Mar eisimpleir: # tha ciorban a 'chiad agus an ceann-uiridh de àireamh neo-iomlan (1, 3, 5, 7, 9). # Tha an àireamh de eileamaidean anns an t-sreath nas motha na 10 agus an dà chuid # Sgrìobh gnìomh a tha a ' gabhail sreath de àireamhan mar inntrigidh agus a ' tilleadh # >>> specialFilter([15, -73, 14, -15])
# 1
# >>> specialFilter([33, -2, -3, 45, 21, 109])
# 2
sub specialFilter {
    my($nums) = @_;
","sub specialFilter {
    my($nums) = @_;
    my $count = 0;
    foreach my $num (@$nums) {
        if ($num > 10) {
            my $str_num = abs($num) . """";
            my $first_digit = substr($str_num, 0, 1);
            my $last_digit = substr($str_num, -1, 1);
            if ($first_digit % 2 != 0 && $last_digit % 2 != 0) {
                $count++;
            }
        }
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&specialFilter;
        if(eq_deeply($candidate->([5, -2, 1, -5]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([15, -73, 14, -15]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([33, -2, -3, 45, 21, 109]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([43, -12, 93, 125, 121, 109]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([71, -2, -33, 75, 21, 19]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_147,gla_Latn,pl,"# Eisimpleir: # agus tha a[i] + a[j] + a[k] na ioma-chuid de 3. # Thoir air ais an àireamh de thriùir (a[i], a[j], a[k]) de a far i < j < k, # Airson gach i (1 ≤ i ≤ n), luach a[i] = i * i - i + 1. # Tha thu air àireamh iomlan adhartach n a thoirt dhut. Feumaidh tu sreath àireamhan iomlan a chruthachadh de dh'fhaid n. # >>> get_max_triples(5)
# 1
# Explanation: 
# a = [1, 3, 7, 13, 21]
# The only valid triple is (1, 7, 13).
sub get_max_triples {
    my($n) = @_;
","sub get_max_triples {
    my($n) = @_;
    my @a;
    
    # Generate the array a
    for my $i (1..$n) {
        $a[$i - 1] = $i * $i - $i + 1;
    }
    
    my $count = 0;
    
    # Check all triples (a[i], a[j], a[k]) where i < j < k
    for my $i (0..$n-3) {
        for my $j ($i+1..$n-2) {
            for my $k ($j+1..$n-1) {
                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {
                    $count++;
                }
            }
        }
    }
    
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_max_triples;
        if(eq_deeply($candidate->(5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),36)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100),53361)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_148,gla_Latn,pl,"# Eisimpleirean # chan eil ainmean planaidean ceart.# Bu chòir don fheart sreath falamh a thilleadh ma tha planet1 no planet2 # an dlùth-chruinneachd ris a' ghrian. # suidhichte eadar orbit planaid1 agus orbit planaid2, air an seòrsachadh le # Bu chòir don fheart sreath a thilleadh a tha a 'toirt a-steach a h-uile planaid aig a bheil na cuairtean # Sgrìobh gnìomh a tha a 'gabhail dà ainm planaid mar shreathan planaid1 agus planaid2. # Uranus, Neptune. # 'S e Mearcair, an ath fhear a tha Venus, an uair sin Earth, Mars, Jupiter, Saturn, # Tha ochd planaidean ann an siostam na grèine againn: na planadan as fhaisge air a ' Ghrian.# >>> bf(""Jupiter"", ""Neptune"")
# [""Saturn"", ""Uranus""]
# >>> bf(""Earth"", ""Mercury"")
# ""Venus""
# >>> bf(""Mercury"", ""Uranus"")
# [""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""]
sub bf {
    my($planet1, $planet2) = @_;
","sub bf {
    my ($planet1, $planet2) = @_;
    my @planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');

    my %planet_indices = map { $planets[$_] => $_ } (0..$#planets);

    return [] unless exists $planet_indices{$planet1} && exists $planet_indices{$planet2};

    my ($start, $end) = ($planet_indices{$planet1}, $planet_indices{$planet2});

    ($start, $end) = ($end, $start) if $start > $end;

    return [@planets[$start+1 .. $end-1]];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&bf;
        if(eq_deeply($candidate->(""Jupiter"", ""Neptune""),[""Saturn"", ""Uranus""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Earth"", ""Mercury""),[""Venus""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mercury"", ""Uranus""),[""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Neptune"", ""Venus""),[""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Earth"", ""Earth""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mars"", ""Earth""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Jupiter"", ""Makemake""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_149,gla_Latn,pl,"# Mar eisimpleir: # Faodaidh tu a bhith a 'gabhail ris gum bi an aon fhad aig a h-uile facal. # Bu chòir don fheart sreath de shreathan a thilleadh ann an òrdugh air an seòrsachadh. # Ma tha dà fhacal an aon fhad, seòrdaich an sreath gu h-abhaideil. # bu chòir a bhith a 'tilleadh an sreath air a sheòrsachadh leis an riaghailt sin. # Bu chòir òrdugh an sreatha a bhith ag èirigh le fad gach facal, agus thu # agus is dòcha gum bi dà-bhreac ann. # Tha an sreath an-còmhnaidh sreath de shreathan agus chan eil sreath de àireamhan, # agus a 'tilleadh an t-sreath a thàinig le òrdugh rèiteichte, # a 'cur às do na sreathan aig a bheil fadachan neo-iomlan dheth, # Sgrìobh gnìomh a tha a' gabhail ri sreath de shreathan mar pharamadair, # >>> list_sort([""aa"", ""a"", ""aaa""])
# [""aa""]
# >>> list_sort([""ab"", ""a"", ""aaa"", ""cd""])
# [""ab"", ""cd""]
sub sorted_list_sum {
    my($lst) = @_;
","sub list_sort {
    my ($lst) = @_;

    # Filter out strings with odd length
    my @filtered = grep { length($_) % 2 == 0 } @$lst;

    # Sort strings first by length, then alphabetically
    my @sorted = sort { length($a) <=> length($b) || $a cmp $b } @filtered;

    return \@sorted;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sorted_list_sum;
        if(eq_deeply($candidate->([""aa"", ""a"", ""aaa""]),[""aa""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""school"", ""AI"", ""asdf"", ""b""]),[""AI"", ""asdf"", ""school""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""d"", ""b"", ""c"", ""a""]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""d"", ""dcba"", ""abcd"", ""a""]),[""abcd"", ""dcba""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""AI"", ""ai"", ""au""]),[""AI"", ""ai"", ""au""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""aaaa"", ""bbbb"", ""dd"", ""cc""]),[""cc"", ""dd"", ""aaaa"", ""bbbb""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_150,gla_Latn,pl,"# Eisimpleirean: # Prìomh àireamh agus bu chòir a thilleadh luach y air dhòigh eile. # Prògram sìmplidh a bu chòir luach x a thilleadh ma tha n # >>> x_or_y(7, 34, 12)
# 34
# >>> x_or_y(15, 8, 5)
# 5
sub x_or_y {
    my($n, $x, $y) = @_;
","sub is_prime {
    my $num = shift;
    return 0 if $num < 2;
    for (my $i = 2; $i * $i <= $num; $i++) {
        return 0 if $num % $i == 0;
    }
    return 1;
}

sub x_or_y {
    my ($n, $x, $y) = @_;
    return is_prime($n) ? $x : $y;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&x_or_y;
        if(eq_deeply($candidate->(7, 34, 12),34)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(15, 8, 5),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3, 33, 5212),33)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1259, 3, 52),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7919, -1, 12),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3609, 1245, 583),583)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(91, 56, 129),129)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6, 34, 1234),1234)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2, 0),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 0),2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_151,gla_Latn,pl,"# Tha na h-àireamhan a tha neo-iomlan ann an sreath a tha neo-iomlan.# Air a thoirt seachad sreath de àireamhan, tilleadh an t-sròin de cheàrnagach nan àireamhan # >>> double_the_difference([1, 3, 2, 0])
# 10
# >>> double_the_difference([-1, -2, 0])
# 0
# >>> double_the_difference([9, -2])
# 81
# >>> double_the_difference([0])
# 0
# If the input array is empty, return 0.
sub double_the_difference {
    my($lst) = @_;
","sub double_the_difference {
    my ($lst) = @_;
    my $sum = 0;

    foreach my $num (@$lst) {
        if ($num =~ /^\d+$/ && $num % 2 != 0) {
            $sum += $num ** 2;
        }
    }
    
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&double_the_difference;
        if(eq_deeply($candidate->([]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5.0, 4.0]),25)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_152,gla_Latn,pl,"# eisimpleir: # Tha an luach 0 agus mura h-eil, is e an luach an eadar-dhealachadh iomlan eadar an tuairmse agus an sgòr. # Thoir air ais sreath den aon fhad a 'comharrachadh cho fada air falbh bho gach beachd. Ma tha iad air a bhith a' smaoineachadh gu ceart, # Tha dà shreath de sgòran agus ceistean a' toirt seachad dhut de dh'fhaid co-ionann, far a bheil gach clàr-amais a' sealltainn co-chòrdadh.# Is e an obair agad a bhith a 'dearbhadh an do bhrath duine gu ceart toraidhean grunn gheamannan. # gu cinnteach airidh air a bhith a' toirt fa-near agus a' coimeas. # Tha na faireachdainnean agus na beachdan a tha agad aig an àm sin# Tha mi a ' smaoineachadh gu bheil cuimhne againn uile air an fhaireachdainn sin nuair a thig toradh air cuid de dh' fhaireachdainn fada .# >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
# [0, 0, 0, 0, 3, 3]
# >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])
# [4, 4, 1, 0, 0, 6]
sub compare {
    my($game, $guess) = @_;
","sub compare {
    my($game, $guess) = @_;
    my @result;
    
    for my $i (0..$#$game) {
        my $difference = abs($game->[$i] - $guess->[$i]);
        push @result, $difference;
    }
    
    return @result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&compare;
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3], [-1, -2, -3]),[2, 4, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_153,gla_Latn,pl,"# Eisimpleir: # (tha a neart -1). # cuir air ais 'Slices.SErviNGSliCes' oir 'SErviNGSliCes' 's e an leudachadh as làidire # leudachain: ['SErviNGSliCes', 'Cheese', 'StuFfed'] an uair sin bu chòir dhut # Mar eisimpleir, ma tha thu air a thoirt seachad ""Slices"" mar an clas agus sreath de na # tagh am fear a thig an toiseach anns an array.# Ma tha dà leudachadh no barrachd ann leis an aon neart, bu chòir dhut# cruth: Ainm-chlas. Ainm-leudachaidh as làidire. # Bu chòir dhut an leudachadh as làidire a lorg agus sreang a thilleadh ann an seo # ann an ainm an leudachaidh, tha an neart air a thoirt seachad leis a' bhroinn CAP - SM. # litrichean ann an ainm an leudachaidh, agus leig SM a bhith na àireamh de litrichean beaga # Tha neart an leudachaidh mar a leanas: Biodh CAP na àireamh den phrìomh chlàir # Tha na leudachaidhean a bhith air an cleachdadh gus a luchdachadh a bharrachd clasaichean gu class.# Thèid ainm clas (string) agus sreath de leudachaidhean a thoirt dhut.# >>> Strongest_Extension(""my_class"", [""AA"", ""Be"", ""CC""])
# ""my_class.AA""
sub Strongest_Extension {
    my($class_name, $extensions) = @_;
","sub Strongest_Extension {
    my ($class_name, $extensions) = @_;
    my $strongest = '';
    my $max_strength = -1e9;

    foreach my $extension (@$extensions) {
        my $cap = 0;
        my $sm = 0;

        foreach my $char (split //, $extension) {
            if ($char =~ /[A-Z]/) {
                $cap++;
            } elsif ($char =~ /[a-z]/) {
                $sm++;
            }
        }

        my $strength = $cap - $sm;
        
        if ($strength > $max_strength) {
            $max_strength = $strength;
            $strongest = $extension;
        }
    }

    return ""$class_name.$strongest"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&Strongest_Extension;
        if(eq_deeply($candidate->(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""]),""Watashi.eIGHt8OKe"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""]),""Boku123.YEs.WeCaNe"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""]),""__YESIMHERE.NuLl__"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""]),""K.TAR"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""]),""__HAHA.123"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""]),""YameRore.okIWILL123"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""]),""finNNalLLly.WoW"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""_"", [""Bb"", ""91245""]),""_.Bb"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Sp"", [""671235"", ""Bb""]),""Sp.671235"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_154,gla_Latn,pl,"# Tha thu air 2 fhacal a thoirt dhut. Feumaidh tu 1 a thilleadh ma tha an dàrna facal no aon de na h-atharrachaidhean aige na fho-shreang anns a' chiad fhacal # >>> cycpattern_check(""abcd"", ""abd"")
# """"
# >>> cycpattern_check(""hello"", ""ell"")
# 1
# >>> cycpattern_check(""whassup"", ""psus"")
# """"
# >>> cycpattern_check(""abab"", ""baa"")
# 1
# >>> cycpattern_check(""efef"", ""eeff"")
# """"
# >>> cycpattern_check(""himenss"", ""simen"")
# 1
sub cycpattern_check {
    my($a, $b) = @_;
","sub cycpattern_check {
    my($a, $b) = @_;
    my $len = length($b);

    for my $i (0 .. $len - 1) {
        my $rotation = substr($b, $i) . substr($b, 0, $i);
        return 1 if index($a, $rotation) != -1;
    }

    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&cycpattern_check;
        if(eq_deeply($candidate->(""xyzw"", ""xyw""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""yello"", ""ell""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""whattup"", ""ptut""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""efef"", ""fee""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abab"", ""aabb""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""winemtt"", ""tinem""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_155,gla_Latn,pl,"# Eisimpleir: # Air a thoirt seachad àireamh iomlan. a 'tilleadh sreath aig a bheil an àireamh de dh'fhionn agus diùid dhigit an cois. # >>> even_odd_count(-12)
# [1, 1]
# >>> even_odd_count(123)
# [1, 2]
sub even_odd_count {
    my($num) = @_;
","my $evens = 0;
    my $odds = 0;
    $num = abs($num); # Handle negative numbers
    foreach my $digit (split //, $num) {
        if ($digit % 2 == 0) {
            $evens++;
        } else {
            $odds++;
        }
    }
    return [$evens, $odds];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&even_odd_count;
        if(eq_deeply($candidate->(7),[0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-78),[1, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3452),[2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(346211),[3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-345821),[3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-2),[1, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-45347),[2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0),[1, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_156,gla_Latn,pl,"# Eisimpleirean: # Cuingealachaidhean: 1 <= num <= 1000 # agus cuir e air ais ann an litrichean beaga. # Air a thoirt seachad àireamh iomlan adhartach, faigh a co-ionann ri àireamh Ròmanach mar shreang, # >>> int_to_mini_roman(19)
# ""xix""
# >>> int_to_mini_roman(152)
# ""clii""
# >>> int_to_mini_roman(426)
# ""cdxxvi""
sub int_to_mini_roman {
    my($number) = @_;
","my @roman_numerals = (
        [1000, 'm'],
        [900, 'cm'],
        [500, 'd'],
        [400, 'cd'],
        [100, 'c'],
        [90, 'xc'],
        [50, 'l'],
        [40, 'xl'],
        [10, 'x'],
        [9, 'ix'],
        [5, 'v'],
        [4, 'iv'],
        [1, 'i'],
    );

    my $result = '';

    for my $pair (@roman_numerals) {
        my ($value, $roman) = @$pair;
        while ($number >= $value) {
            $result .= $roman;
            $number -= $value;
        }
    }

    return $result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&int_to_mini_roman;
        if(eq_deeply($candidate->(19),""xix"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(152),""clii"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(251),""ccli"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(426),""cdxxvi"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(500),""d"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),""i"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),""iv"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(43),""xliii"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(90),""xc"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(94),""xciv"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(532),""dxxxii"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(900),""cm"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(994),""cmxciv"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1000),""m"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_157,gla_Latn,pl,"# Eisimpleir: # 90 ceum. # Tha triantan ceart-cheàrnach na triantan anns a bheil aon ceàrn ceart-cheàrn no # tha na taobhan a' cruthachadh triantan ceart-cheàrnach, ' ' eile.# Air a thoirt seachad fad nan trì taobhan de thriantan. Thèid 1 a thilleadh ma tha na trì # >>> right_angle_triangle(3, 4, 5)
# 1
# >>> right_angle_triangle(1, 2, 3)
# """"
sub right_angle_triangle {
    my($a, $b, $c) = @_;
","sub right_angle_triangle {
    my($a, $b, $c) = @_;
    # Sort the sides to identify the potential hypotenuse
    my @sides = sort { $a <=> $b } ($a, $b, $c);
    # Check if the triangle satisfies Pythagorean theorem
    return ($sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2) ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&right_angle_triangle;
        if(eq_deeply($candidate->(3, 4, 5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2, 3),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 6, 8),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 24, 25),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 5, 7),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 12, 13),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(15, 8, 17),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(48, 55, 73),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 1, 1),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 10),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_158,gla_Latn,pl,"# charactaran, cuir air ais am fear a tha a 'tighinn an toiseach ann an òrdugh lexicographical. # Tha an àireamh as motha de charactaran sònraichte aig sreathan ioma-fhillte.# Tha diofar fhaclan anns an sreath. Cuir air ais am facal le àireamh as motha # Sgrìobh gnìomh a tha a' gabhail ri sreath de shreathan. # >>> find_max([""name"", ""of"", ""string""])
# ""string""
# >>> find_max([""name"", ""enam"", ""game""])
# ""enam""
# >>> find_max([""aaaaaaa"", ""bb"", ""cc""])
# ""aaaaaaa""
sub find_max {
    my($words) = @_;
","sub find_max {
    my ($words) = @_;
    my $max_word = '';
    my $max_unique_chars = 0;
    
    foreach my $word (@$words) {
        my %unique_chars = map { $_ => 1 } split //, $word;
        my $unique_count = keys %unique_chars;
        
        if ($unique_count > $max_unique_chars || ($unique_count == $max_unique_chars && $word lt $max_word)) {
            $max_word = $word;
            $max_unique_chars = $unique_count;
        }
    }
    
    return $max_word;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&find_max;
        if(eq_deeply($candidate->([""name"", ""of"", ""string""]),""string"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""name"", ""enam"", ""game""]),""enam"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""aaaaaaa"", ""bb"", ""cc""]),""aaaaaaa"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""abc"", ""cba""]),""abc"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""play"", ""this"", ""game"", ""of"", ""footbott""]),""footbott"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""we"", ""are"", ""gonna"", ""rock""]),""gonna"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""we"", ""are"", ""a"", ""mad"", ""nation""]),""nation"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""this"", ""is"", ""a"", ""prrk""]),""this"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""b""]),""b"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""play"", ""play"", ""play""]),""play"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_159,gla_Latn,pl,"# Eisimpleir: # mura h-eil gu leòr carrot air fhàgail, itheas tu a h-uile carrot a tha air fhàgail, ach bidh thu fhathast acrach. # an àireamh de charragan a dh ' fhàgail às deidh na biadh agad ] # bu chòir dhut sreath de [àireamhach de charragan a dh' itheadh às deidh na biadh agad, # ach a-nis feumaidh tu barrachd caròta a ithe gus biadh an latha a chrìochnachadh. # Tha thu na choin a tha a's ocras, agus tha thu air àireamh de charragan a ithe mu thràth,# >>> eat(5, 6, 10)
# [11, 4]
# >>> eat(4, 8, 9)
# [12, 1]
# >>> eat(1, 10, 10)
# [11, 0]
# >>> eat(2, 11, 5)
# [7, 0]
# Variables:
# @number : integer
# the number of carrots that you have eaten.
# @need : integer
# the number of carrots that you need to eat.
# @remaining : integer
# the number of remaining carrots thet exist in stock
# Constrain:
# * 0 <= number <= 1000
# * 0 <= need <= 1000
# * 0 <= remaining <= 1000
# Have fun :)
sub eat {
    my($number, $need, $remaining) = @_;
","sub eat {
    my($number, $need, $remaining) = @_;
    my $total_eaten = $number + $need;
    if ($remaining >= $need) {
        $remaining -= $need;
    } else {
        $total_eaten = $number + $remaining;
        $remaining = 0;
    }
    return [$total_eaten, $remaining];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&eat;
        if(eq_deeply($candidate->(5, 6, 10),[11, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 8, 9),[12, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 10, 10),[11, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 11, 5),[7, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 5, 7),[9, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 5, 1),[5, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_160,gla_Latn,pl,"# Tha co-dhiù aon oibriche aig sreath an oibrichean, agus co-dhiù dà oibrian aig sreath nan operands.# Tha Operand na raon de dh'àireamhan iomlana neo-mheadhain.# Tha fad an t-sreath oibrichean co-ionann ri fad an t-sreath operand às aonais aon. # Nota: # => toradh = 9 # toradh = 2 + 3 * 4 - 5 # array = [2, 3, 4, 5] # neach-obrachaidh['+', '*', '-'] # Eisimpleir: # Exponentiation (**) # Roinn làr ( // ) # Iolrachadh (*) # A ' toirt air falbh ( - ) # Cuir ris ( +) # Na h-obraichean bunaiteach algebra: # agus cuiridh e air ais measadh an abairt seo.# Tha an dàrna sreath na sreath de dh'àireamhan iomlan. Cleachd an dà sreath a chaidh a thoirt seachad gus an algebra a thogail # Air a thoirt seachad dà uachdaran sreathan, agus operand. Tha na bunaiteach algebra obrachaidhean aig a 'chiad sreath, agus sub do_algebra {
    my($operator, $operand) = @_;
","sub do_algebra {
    my ($operator, $operand) = @_;
    my $expression = $operand->[0];
    
    for my $i (0 .. $#$operator) {
        my $op = $operator->[$i];
        my $num = $operand->[$i + 1];
        
        if ($op eq '//') {
            $expression = ""int($expression / $num)"";
        } else {
            $expression .= "" $op $num"";
        }
    }
    
    return eval $expression;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&do_algebra;
        if(eq_deeply($candidate->([""**"", ""*"", ""+""], [2, 3, 4, 5]),37)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""+"", ""*"", ""-""], [2, 3, 4, 5]),9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""//"", ""*""], [7, 3, 4]),8)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_161,gla_Latn,pl,"# Eisimpleirean # Bu chòir don fheart an sreang a th 'ann a thilleadh. # Mura h-eil litrichean sam bith anns an sreath, cuir an sreath air ais. # air neo cùm e mar a tha e. # ma tha s[i] na litir, cuir a chùis air ais bho ìosal gu àrd no vice versa, # Tha sreang s air a thoirt dhut. # >>> solve(""1234"")
# ""4321""
# >>> solve(""ab"")
# ""AB""
# >>> solve(""#a@C"")
# ""#A@c""
sub solve {
    my($s) = @_;
","sub solve {
    my($s) = @_;
    if ($s =~ /[a-zA-Z]/) {
        $s =~ s/([a-z])|([A-Z])/defined $1 ? uc($1) : lc($2)/ge;
    } else {
        $s = reverse($s);
    }
    return $s;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&solve;
        if(eq_deeply($candidate->(""AsDf""),""aSdF"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1234""),""4321"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ab""),""AB"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#a@C""),""#A@c"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#AsdfW^45""),""#aSDFw^45"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#6@2""),""2@6#"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#$a^D""),""#$A^d"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#ccc""),""#CCC"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_162,gla_Latn,pl,"# Ma tha 'teacsa' na shreang falamh, tilleadh undef. # Air a thoirt seachad sreang 'teacsa', tilleadh an sreang co-ionann md5 hash aige. # >>> string_to_md5(""Hello world"")
# ""3e25960a79dbc69b674cd4ec67a72c62""
sub string_to_md5 {
    my($text) = @_;
","use Digest::MD5 qw(md5_hex);

    if ($text eq '') {
        return undef;
    }

    return md5_hex($text);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&string_to_md5;
        if(eq_deeply($candidate->(""Hello world""),""3e25960a79dbc69b674cd4ec67a72c62"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""A B C""),""0ef78513b0cb8cef12743f5aeb35f888"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""password""),""5f4dcc3b5aa765d61d8327deb882cf99"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_163,gla_Latn,pl,"# Mar eisimpleir: # agus b, ann an òrdugh ag èirigh. # Air a thoirt seachad dà àireamhan iomlan adhartach a agus b, tilleadh na h-eadar-àireamhan eadhon eadar a # >>> generate_integers(2, 8)
# [2, 4, 6, 8]
# >>> generate_integers(8, 2)
# [2, 4, 6, 8]
# >>> generate_integers(10, 14)
# []
sub generate_integers {
    my($a, $b) = @_;
","sub generate_integers {
    my($a, $b) = @_;
    my @result;
    my ($start, $end) = $a < $b ? ($a, $b) : ($b, $a);
    
    for my $i ($start..$end) {
        push @result, $i if $i % 2 == 0;
    }
    
    return @result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&generate_integers;
        if(eq_deeply($candidate->(2, 10),[2, 4, 6, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 2),[2, 4, 6, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(132, 2),[2, 4, 6, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(17, 89),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
