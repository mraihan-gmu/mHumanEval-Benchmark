[
    {
        "task_id": "HumanEval/0",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"अगर अस वुछो की नंबर लिस्ट मंज़ ,की अस तेम ज़े नंबर यम वरीय नज़दीक छी एक जय पेठ बे छी एम् वरीय नज़दीक थ्रेशोल्ड निष्\"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"ये फंक्शन छू इनपुट कारन स्ट्रिंग मंज़ यमन मंज़ नेस्टेड कपरेंटिस हिन्द मल्टीप्ल ग्रुप्स छू आसान.अस का मकसद छू तेमन ग्रुपन अलग अलग स्ट्रिंग्स मंज़ अलग करन ते तेमन हिंज लिस्ट लबनी.अलग ग्रुप्स छू बाल्लेंस्ड (हर ओपनिंग ब्रेस छू सही तैर पइठ बंद गाछने) ते छू नेस्टड न अकिस अकिस मंज़ इनपुट स्ट्रिंग मंज़ कह ते स्पेस इग्नोर करा.मिसाल: >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ' ['() ', '(()) ', '(() ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"पॉजिटिव फ्लोटिंग पॉइंट नंबर दिन ,इ छी एवं इन्टिजर पार्ट (लार्जेस्ट इंटिजर छी लकिट दिवा नंबर पेठ) बे डेसीमल (लेफ्ट ओवर पार्ट छी हमेशा लकिट 1).\"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"तेरे इस given a लिस्ट ऑफ़ डिपॉजिट एंड विथड्रॉउद ऑपरेशंस ओन a बैंक अकाउंट ठाट स्टार्ट्स विथ जीरो बैलेंस. योर टास्क इस तो डिटेक्ट अगर ओन अप्पोइंट थे बैलेंस ऑफ़ अकाउंट फॉलस लोअर फ्रॉम जीरो, एंड ओन अप्पोइंट फंक्शन शुड रिटर्न ट्रू. ओन्सर योर शुड रिटर्न फॉलस. एक्साम्प्लिः >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"इनपुट नंबर्स हिंज अख दितेन लिस्ट खातिर,एमएएएस डेविअशन हिंज मनी हिंज तैर पेठ कल्कुलेट करा.एमएएएस डेविअशन छू प्रेथ एलिमेंट ते सेन्टरपॉइंट्स दरमियान मन्ज़िम मन्ज़िम फरक (मध्यम अथ मामलस मंज़): MAD = average । x - x_mean । मिसाल: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"इनपुट लिस्ट हिन्द हर दूँ एलिमेंट्स दरमियान नंबर 'डिलिमिटर' लगावों `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"इनपुट फ़ंक्शन छू अख स्ट्रिंग युस नेस्टेड कपरेंटिसन खातिर मल्टीप्ल ग्रुप्स छू रेप्रेसेंटेट करा,युस स्पेस सेपरेट छू करा.हर ग्रुप खातिर,आउटपुट छू डेप्थ लेवल नेस्टिंग ऑफ़ कपरेंटिस.मिसाल की तैर पइठ (() (()) छू मैक्सिमम ज़े लेवल नेस्टिंग हुन्द येलकी ((())) छू त्र. >>> parse_nested_parens('((()) ((())) () ((()) (((()) [2, 3, 1, 3]\"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"इनपुट लिस्ट ऑफ़ स्ट्रिंग्स फिल्टर करें सिर्फ तेमन खातर यम मंज़ सबस्ट्रिंग छी आसान >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"इंतेजरस हिंज लिस्ट खातिर,तेम अस टपल तेम सुन्द अस जमा ते प्रोडक्ट सेत बनान.खाली असुम अस बराबर गसण 0 ते खाली प्रोडक्ट अस बराबर गसण 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24)\"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"इंटेजरस हिंज लिस्ट पेठ,क्रॉसिंग मैक्सिमम एलिमेंट हिंज लिस्ट बनाव. >>> रोलिंग_मैक्स (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"अल्गोरिथम आयडिया छू सिम्पल:- सप्लाई स्ट्रिंग हुन्द लांग पोस्टफिक्स युस पालिंड्रोम छू. - स्ट्रिंग रिवर्स हुन्द स्ट्रिंग प्रीफिक्स युस पालिंड्रोमिक सफिक्स बरोह छू स्ट्रिंग रिवर्स किस एंड्स मंज़ ऐड करा. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('catac') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"अगर देवन अकिस स्ट्रिंगस छू पालिंड्रोम तॆ टेस्ट करनॆ.\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"इनपुट छे ज़े स्ट्रिंग a त b यिम सिरिफ़ 1 त 0 छे। यिमन इनपुट्न पेठ बाइनरी XOR परफॉरम करान त रिटर्न छु अख स्ट्रिंग पॉठि ति। >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"list ऑफ़ स्ट्रिंग्स मंज़, देअर लोंगस्ट ओने. देअर फर्स्ट ओने केस ऑफ़ मल्टीप्ल स्ट्रिंग्स ऑफ़ थे शामे लेंथ. देअर नो केस इन केस ऑफ़ इनपुट लिस्ट इस खाली. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"अगर अस वुछो की अस छी एवं इस्तेमाल करने ,तथ हक़ अस वुछिथ की अस क्या हको अस इस्तेमाल करिथ\"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"रिटर्न लिस्ट ऑफ़ आल प्रीफिक्स फ्रॉम शॉर्टेस्ट तो लॉन्गस्ट ऑफ़ थे इनपुट स्ट्रिंग >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"युस अस स्ट्रिंग छी सु छी देलिमेंटेड जायन पेठ शुरू गासन 0 पेठ n ताम\"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"अगर अस स्ट्रिंग देवन ,तह वुछ कीते अलग करैक्टर (इ छी इन्दिरासपोरते केस) अथ मंज़ छी एवं >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"इनपुट टू थिस फंक्शन इस a स्ट्रिंग रिप्रेजेंटिग म्यूजिकल नोट्स इन a स्पेशल ASCII फॉर्मेट. योर टास्क इस तो पार्स स्ट्रिंग लिस्ट ऑफ़ इंटेगर कॉरस्पॉन्डिंग तो मल्टि बिट्स डस नोट्स. तेरे इस a लेजेंड: 'o' नोट, लास्ट्स बीट्स फोर 'o, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k,\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"वुछो कीते गुन छी देवन सबस्ट्रिंग युस ओरिजिनल स्ट्रिंग मंज़ छी एवं मिलान. कोउंट ओवरलैपिंग केस. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"इनपुट छू स्पेस-डिलीमिटेड स्ट्रिंग नुमारिकालस सेत 'ज़ीरो' पेठ 'नौ'. वैलिड चॉइस छू 'ज़ीरो', 'वन', 'टू', 'थ्री', 'फोर', 'फइव', 'शिक्स', 'सेवेन', 'आठ' ते 'नौ'. स्ट्रिंग छू नंबर सेत सॉर्ट येवा करने लकुट पेठ बुड ताम >>> sort_numbers ((('थ्री वन फाइव') 'वन थ्री फाइव' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"युस सप्लाई छी कारन नंबर लिस्ट (लम्बाई पेठ कम से कम ज़े) सेलेक्ट बे रिटर्न ज़े युस नज़दीक छी बे छी एवं रिटर्न करने एकिस बाइकीस सेथ (कम नंबर ,कठिन नंबर)\"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"अगर अस नंबर दिवा (कम से कम ज़े एलिमेंट),तेम सूचस मंज़ करो लीनियर ट्रांसफॉर्म ,यथ पेठ सरियो खोत लकुट नंबर गाछ बनव 0 बे सरियो खोत बुड गाछ बनव 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"फिल्टर दीद लिस्ट ऑफ़ कुएं ते पायथन वैल्यूज सिर्फ इंटेजरस खातर >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"रिटर्न लेंथ ऑफ़ गिवन स्ट्रिंग >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"अगर अस दाइ अस नंबर n ,तह छी अस वरीय लकुट नंबर युस एवं छी डिवाइड कारन n सेथ ,लकिन लकुट छी n >>> largest_divisor(15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"युस ये लिस्ट छी सु छी प्राइम फैक्टर्स ऑफ़ इंटेजर युस लकुट पेठ बुड ताम छी आसान\"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"इंटेजरस हिंज लिस्ट मंज़,सु छी सु एलिमेंट हटान युस ज़याद दुबार छू एवा करने.एलिमेंट हिंज ऑर्डर छू एवा करने युस इनपुट छू. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"अगर अस वुछो स्ट्रिंग ,यिम छी लकुट पाठ छी एम् छी एवं बिकास पाठ इस्तेमाल करने\"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"कॉनकेटेनेट लिस्ट ऑफ़ स्ट्रिंग्स इन सिंगल स्ट्रिंग >>> कॉनकेटेनेट (([]) '' >>> कॉनकेटेनेट ((['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"इनपुट लिस्ट ऑफ़ स्ट्रिंग्स फिल्टर करें सिर्फ तेमन खातर यम डेटम प्रीफिक्स सेत शुरू गसण. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"युस ये रिटर्न छी सु छी सिर्फ पॉजिटिव नंबर लिस्ट मंज़. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"अगर अख देवन नंबर प्राइम अस,ते असूल वापस करो. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs छी कोफ्फीसिएंट पोलीनोमिअलक. find_zero छी फाउंड एक्स येथ पेठ पॉली (x) = 0. find_zero छी देवन सिर्फ सिर्फ जीरो पॉइंट ,अगर तेम वारिया अस.इसलिए ,find_zero छी सिर्फ एक्स लिस्ट कारन युस अस पास नंबर छी कोफ्फीसिएंट्स बे छी लार्ज नॉन जीरो कोफ्फीसिएंट यिल सु जवाब छी देवन. >>> round (x) [1, 2]), 2) # f (x) = 1 + 2x -0.5 >>> round (x) [-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"इवैल्यूएटस पोलीनोमिअल विथ कोएफ़िशिएंट्स एक्सएस पॉइंट एक्स. रिटर्न एक्सएस [0] + एक्सएस [1] * एक्स + एक्सएस [1] * एक्स ^ 2 + .... एक्सएस [एन] * एक्स ^ एन \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"ये फंक्शन छू लिस्ट l लेवा ते छू लिस्ट ल' लबरान येथ पेठ l' छू हिवेन इंडेक्सस मंज़ हिवेन सेत हिवेन बराबर असा युस न ज़न त्रीं सेत हक़ डिलिजिबल गछत,लकिन एमएच वैल्यूज छू हिवेन इंडेक्सन मंज़ हिवेन सेत हक़ डिलिजिबल गछत,लकिन सार्टेड छू. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"रिटर्न सॉर्टेड यूनिक एलिमेंट्स इन a लिस्ट >>> यूनिक (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"रिटर्न मैक्सिमम एलिमेंट इन द लिस्ट. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"अगर अस वुछो की अस कीथ पाठ छी एवं ,तथ पाठ छी एवं जवाब दिन\"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"ये फंक्शन छू लिस्ट l लेवा ते छू लिस्ट ल' लबरान येथ पइठ l' छू आइडेंटिटल असा l इंटेरड इंडीसेस मंज़,येल कि एमएच वैल्यूज इनपेरड इंडीसेस मंज़ छू बराबर वैल्यूज इनपेरड इंडीसेस ऑफ़ l सेत,लकिन सार्टेड. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"takes as input string encoded with encode_cyclic फंक्शन. डिकोडेड स्ट्रिंग रिटर्न.\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"                      \"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib रिटर्न अस n-थ नंबर युस फिबोनैकी नंबर छी बे छी ये प्राइम. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"ट्रिपलस_सुम_टू_ज़ेरो छी इन्पुट कारन इंटेजरस. ये छी देवन ट्रू अगर अथ मंज़ अस त्र अलग अलग एलिमेंट यम अस अस नून पेठ ,बे फॉलस अगर अस ने अस. >>> ट्रिपलस_सुम_टू_ज़ेरो (([1, 3, 5, 0]) फॉलस >>> ट्रिपलस_सुम_टू_ज़ेरो (([1, 3, -2, 1]) ट्रू >>> ट्रिपलस_सुम_टू_ज़ेरो (([1, 2, 3, 7]) फॉलस >>> ट्रिपलस_सुम_टू_ज़ेरो (([2, 4, -5, 3, 9, 7]) ट्रू >>> ट्रिपलस_सुम_टू_ज़ेरो [1]) फॉलस\"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"अकिस सड़किच तस्सवुर करों युस अख मुकमल सीत सीत लन्गी लाइन छे। n कार छे बाम पेठ दावीक़ तरफः चलावन; अकिस वखतस पेठ, n कारन हुन्द अख मुख्तलिफ सेट छे दावीक़ पेठ बाम तरफः चलावन। कारन हुन्द दोन सेट छि अख अकिस निशि वरिये दूरे आसान आसान। तमाम कार छि अकीस स्पीडस पेठ हरान। ज़ कार छि टकरावान येलि अख कार युस बाम पेठ दावीक़ छू चलान अख कार युस दावीक़ पेठ बाम तरफः चलान छु। ताहम, कार छि बेशुमार मज़बूत तः मज़बूत आसान; नतीजस मंज़, तिम छि पन्नि ट्रयाक्टरी मंज़ जारी थावान मानो तिम छि न टकरावन। यि फंक्शन छु यिथ टक्करन हुन्द तेदाद पॉद करान।\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"रिटर्न लिस्ट विथ एलिमेंट्स इन्क्रिमेंटेड बी 1. >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] \"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero छी इन्पुट कारन इंटेजर लिस्ट मंज़.ये छी देवन ट्रू अगर लिस्ट मंज़ असे ज़े अलग अलग एलिमेंट यम अस असुम छी जीरो ,बे फॉलस अगर असुम छी जीरो >>> pairs_sum_to_zero([1, 3, 5, 0]) फॉलस >>> pairs_sum_to_zero[(1, 3, -2, 1]) फॉलस >>> pairs_sum_to_zero([1, 2, 3, 7]) फॉलस >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) ट्रू >>> pairs_sum_to_zero[1]) फॉलस \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"इनपुट नंबर x हिच नुमारिकाल बेस बेस मंज़ तब्दील करा. कन्वर्शन पत वापस करों स्ट्रिंग रिप्रेजेंटेशन. बेस नंबर छू कम 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"त्रिकोणक खातिर छू अख साइड हिंज लेंथ ते हाई रिटर्न एरिया देवन. >>> triangle_area\"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 नुमारिक सीक्वेंस छु फिबोनैकी सीक्वेंस हिव सॉति यिवान वुछ्न यिवान: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). कृपया अख फंक्शन लिखु fib4 नुमारिक सीक्वेंसुक एन-थ एलिमेंट इफिसीएन्स्ली कम्प्यूट करन्ह खात्रि। रिकर्शन न इस्तेमाल कर। >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"रिटर्न मेडियन ऑफ़ एलिमेंट्स इन द लिस्ट l. >>> मेडियन (([3, 1, 2, 4, 5]) 3 >>> मेडियन (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"Checks if given string is a palindrome >>> is_palindrome('') True >>> is_palindrome('aba') True >>> is_palindrome('aaaaa') True >>> is_palindrome('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"रिटर्न 2^n मॉडुलो p (नोटः नुमारिकस) >>> मॉडप (३, ५) 3 >>> मॉडप (१०१, १०१) 2 >>> मॉडप (०, १०१) १ >>> मॉडप (३, ११) 8 >>> मॉडप (१००, १०१) १\"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"takes as इनपुट स्ट्रिंग encoded with encode_shift फंक्शन. रिटर्न डिकोडेड स्ट्रिंग. \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"ेकस ाखरेस मंज़ 5 हंड्रेड सेथ ेकस ाखरेस मंज़ 5 हंड्रेड सेथ ेकस ाखरेस मंज़ 5 हंड्रेड सेथ\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels छु अख फंक्शन युस स्ट्रिंग लिछ त सु छु पानवयन त्रावान। >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd'\"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"अगर सलीम नंबर छी लिस्ट मंज़ त छी सही लोटो अगर सलीम नंबर छी थ्रेसहोल्ड t खोत नीच >>> below_threshold([1, 2, 4, 10], 100) सही >>> below_threshold([1, 20, 4, 10], 5) गलत \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"युस असुमोट छी कारन x ते y छी कारन add2,3) 5 add5,7) 12\"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"अगर कहँ ते लफ़ज़ छी तेमन निष् छी आसान एक्सीलेन्ट करैक्टर. >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') सही >>> same_chars('abcd', 'dddddddabc') सही >>> same_chars('dddddddabc', 'abcd') सही >>> same_chars('eabcd', 'dddddddddabc') गलत >>> same_chars('abcd', 'dddddddabddce') गलत >>> same_chars'(abcdzzzz', 'dddzzzzzzzddabc') गलत \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"फिबोनाची नुम्बरं छी वापस कारन. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets छू स्ट्रिंग \"<\" ते \">\". अगर हर ओपनिंग ब्रैकेट छू अख मुतवाजी क्लोजिंग ब्रैकेट असा,तेम छू ट्रू. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"दो लिस्ट्स खातर छी येवा वापस करने. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"अगर n > 1 अस एवं माना ,तमुक प्राइम फैक्टर छान आसान\"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n छी आँख फंक्शन युस अस सुम्म छी कारन नंबर 1 पेठ n ताम. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1\"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\". return True if each opening bracket has a corresponding closing bracket. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\") True >>> correct_bracketing(\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs छी हवन कोफ्फीसिएंट पोलीनोमिअल. xs[0] + xs[1] * x + xs[2] * x^2 + .... छी देवन डेरिवेटिव पोलीनोमिअल हुन्द यथ फॉर्मस मंज़. >>> डेरिवेटिव (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> डेरिवेटिव [(1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"फिबफिब नुम्बरं सीक्वेंस छू फिबोनैकी सीक्वेंस सेत मिलान येमच तारीफ छू एएम मुताबिक: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). कृपया अख फंक्शन लिखें ताकि फिबफिब नुम्बरं सीक्वेंस हिन्द एन-थ एलिमेंट इफिसीएन्स्ली कम्प्यूट करथ. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"युस अस वुछो छी एम् छी अस वाना की \"a\" छी वाना \"e\" छी वाना \"i\" छी वाना \"o\" छी वाना \"u\" छी वाना \"a\" छी वाना \"e\" छी वाना \"o\" छी वाना \"u\" छी वाना \"a\" छी वाना \"e\" छी वाना \"o\" छी वाना \"u\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\" छी वाना \"a\"\"\"\"\n\ndef vowels_count(s):\n    \"\"\"वरीय टेस्ट केस ते जोडे\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"अगर सरफ > नंबर ऑफ़ डिजिट्स, तो रिवर्स डिजिट्स. >>> circular_shift{12}, 1) \"21\" >>> circular_shift{12}, 2) \"12\"\"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"टास्क अख फंक्शन लिखुन युस अख स्ट्रिंग इनपुट कि तैर पइठ लेथ ते सिरिफ़ उप्पेर करैक्टरन हुन्द सुम असिथ ASCII कोड्स. मिसालः digitSum(\"\") => 0 digitSum(\"abAB\") => 131 digitSum(\"abcCd\") => 67 digitSum(\"helloE\") => 69 digitSum(\"woArBld\") => 131 digitSum(\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"याथ टास्क मंज़ ,अस छी देवन स्ट्रिंग युस हवन छी नंबर ऑफ़ एप्पल बे ओरेंज युस छी डिस्ट्रीब्यूट कारन फर्ट्स बास्केट मंज़ अथ बास्केट मंज़ छी आसान एप्पल ,ऑरेंज ,बे आम फलों .युस स्ट्रिंग छी हवन टोटल नंबर ऑफ़ ऑरेंज बे एप्पल बे आख इन्टिजर युस हवन छी टोटल नंबर ऑफ़ फलों बास्केट मंज़ छी सु छी देवन नंबर ऑफ़ मैंगो फलों बास्केट मंज़ .मिसाल की तोर: fruit_distribution\"5(एप्पल बे 6 ऑरेंज\", 19) ->19 - 5 - 6 = 8 fruit_distribution\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 apples and 1 oranges\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"अख अदार दिवान युस अकिस कुलिस ब्रांचस नुमायंद छि युस नोन-नेगेटिव इंटेगर नोड्स छि अमिच काम छे अकिस नोडस त वापस करनुक। युस नोड छू तमिच गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछ\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''अगर अस ने अस एवं ,तथ छी अस वन - 1 .मिसाल की तोर:सर्च ([4, 1, 2, 2, 3, 1]) == 2सर्च ([1, 2, 2, 3, 3, 4, 4]) == 3सर्च ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''इंटेगरन हिंज लिस्ट देवन,तथ छू लिस्ट ऑर्डरिंग स्ट्रेन्ज ऑर्डर मंज़.स्ट्रेन्ज सॉर्टिंग,ये छू येल अस मिनिमम वैल्यू सेत शुरू छू करा,पात छू मैक्सिमम रेस्टिंग इंटेगरन हुन्द,पात छू मिनिमम ते एएम पात.मिसालःstrange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''त्रिकोण की तीन तरफ़ की लम्बाई दी गई। त्रिकोण का क्षेत्रफल 2 दशमलव बिंदुओं तक गोल करें अगर तीन तरफ़ वैध त्रिकोण बनाते हैं। अन्यथा -1 लौटाएं तीन तरफ़ वैध त्रिकोण बनाते हैं जब किसी दो तरफ़ का योग तीसरी तरफ़ से बड़ा हो। उदाहरण: triangle_area (३,४,५) == 6.00 triangle_area (१,२,१०) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''लिखो फंक्शन युस True रिटर्न छू अगर ऑब्जेक्ट q फ्लाई,ते False अगर न. ऑब्जेक्ट q फ्लाई छू बैलेंस्ड (ये छू पालिंड्रोमिक लिस्ट) ते एमएच एलिमेंट्स हुन्द जुर छू कम या बराबर मैक्सिमम मुमकिन वज़न w. मिसाल:will_it_fly([1, 2], 5) â -> False # 1+2 छू कम मैक्सिमम मुमकिन वज़न,लकिन ये छू इनबैलेंस्ड.will_it_fly([3, 2, 3], 1) â -> False # ये छू बैलेंस्ड,लकिन 3+2+3 छू ज़याद मैक्सिमम मुमकिन वज़न.will_it_fly[3, 2, 3], 9) â -> True # 3+23 छू कम मैक्सिमम मुमकिन वज़न,ते ये छू बैलेंस्ड.will_it_fly([3], â 5) -> True # 3 छू कम मैक्सिमम मुमकिन वज़न,ते ये छू बैलेंस्ड.'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"अगर अस वुछो एर्रे ऑफ़ इंटेजर ,तह छी ज़रूरत बदलाने एलिमेंट्स हुन्द ताकि एर्रे हको पालिंड्रोमिक बनायिथ.अख पालिंड्रोमिक एरे छी एरे युस अस बराबर अस बैकवर्ड बे फॉरवर्ड.अख बदलाव मंज़ ,अस हको बदलित आख एलिमेंट कहँ ते एलिमेंट.मिसाल की तोर: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''अगर ज़न दोनन सूरतन मंज़ अकिच तादाद छु, गोडनिकि सूरत वापस करान। मिसाल total_match{\\displaystyle {\\mathcal {{{hi},{admin},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\displaystyle {'admin'},{\\mathcal {cal {cal},{cal},{cal},{cal},{cal},{cal},{cal}},{cal},{cal},{cal}},{cal},{cal}},{cal},{cal},},{cal},},{cal},{cal},},{cal},},{cal},},{cal},{cal},},{cal},{cal},},{cal},},{cal},{cal},{cal},},{cal},{cal},},{cal},{cal},{cal},{cal},},{cal},{cal},},{cal},{cal},},{cal},{cal},{cal},},{cal},{cal},{cal},{cal},},{cal},{cal},{cal},},{cal},{4},},{1},{1},{4},},{1},},{4},}{4}{4'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"अगर अस देवन नंबर छी मल्टिप्लिकेशन 3 प्राइम नंबरों हुन्द ,तथ छी अस गलत कारन.\"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"तोरेच काम छू सु फंक्शन लिखना युस ट्रू छू रिटर्न करा अगर नंबर x आसान पावर ऑफ़ n ते गलत छू बाकि मामलन मंज़. x छू आसान पावर ऑफ़ n अगर n**int=x मिसाल की तोर: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) => false is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''आँख फंक्शन लिखो युस इन्टिजर a छी कारन ते तेम छी वापस कारन ट्रू अगर ये इन्टिजर आँख इनटिजर नंबरुक क्यूब अस .नॉट:तुह हको अस मानो इनपुट छू हमेशा वैलिड.मिसाल: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> True iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"अगर अस वुछो की अस छी एवं हेक्साडेसिमल नंबर ते अस एवं कारन हेक्साडेसिमल डिजिट ते अस एवं कारन नंबरिंग हेक्साडेसिमल डिजिट अस प्राइम अस हेक्साडेसिमल डिजिट छी 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. प्राइम नंबर छी 2, 3, 5, 7, 11, 13, 17,... तो अस पनुन नंबर बनवा: 2, 3, 5, 7, 7, B (=डेसिमल 11), D (=डेसिमल 13) नोट: तुहको अस संजन सलीम सही या खाली स्ट्रिंग ,बे निशान A ,B ,C ,D ,E ,F छी हमेशा अपरकेस .मिसाल: \"num\" खातर अस कारन आउटपुट नुम = 1. \"num\" खातर अस कारन आउटपुट नुम = 1. \"num\" खातर अस कारन आउटपुट नुम = 10.77E \"आउटपुट \"num\" खातर अस कारन 2. \"num\" खातर अस कारन AB1 = 333 \"num\" खातर अस कारन 4. \"BC\" खातर अस कारन 6.012345 \"A\" खातर अस कारन 6.0126 \"A\" खातर आउटपुट \"2020 \" \"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"अगर अस वुछो की अस छी एवं डेसीमल नंबर दिन ,तेम छी एवं बीनरी नंबर दिन ,अतः छी अस कारन स्ट्रिंग ,अतः मंज़ छी एवं हर वर्ण बीनरी नंबर दिन ,हर वर्ण छी आसान \"0\" या \"1\" ,अतः मंज़ छी एवं बे कहीं वर्ण बी \"db\" ,बे छी अथ कारन शुरू बे ख़तम ,अतः मंज़ छी एवं मदद कारन फॉर्मेट दिन ,मिसाल की तोर डेसीमल_टू_बाइनरी15\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"तुंह पजह अख स्ट्रिंग एस. तुंहंदिस कामिच छु यि चेकी करान ज़ि स्ट्रिंग छु खूश या न। अख स्ट्रिंग छु खूश अगर अमिच ताम कम से कम 3 छे त हर 3 लगातार लफ्ज़ छि मुख्तलिफ मिसालेः is_happy (a) => False is_happy (a) => False is_happy (abcd) => True is_happy (aabb) => False is_happy (adb) => True is_happy (xyy) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"ये छू सेमेस्टरक आखरी हफ्तस ते टीचर छू स्टूडेंट्स ग्रेड देवन.टीचर छू ग्रेडिंग खातिर पनुन अल्गोरिथम बनावन.एक्वा मसले छू कि,इम क्र कोड गमे युस इम ग्रेडिंग खातिर इस्तिमाल छू करा.इम क्र केह स्टूडेंट्स खातिर GPAs हिंज लिस्ट देवन ते तुह पनुन अख फंक्शन लिखून युस लेटर ग्रेड हिंज लिस्ट आउटपुट करथ येमच मदद सेत तालिका छः GPA. लेटर ग्रेड 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation ([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"अख फंक्शन लिखो युस अख स्ट्रिंग छू ते छू ट्रू लवान अगर स्ट्रिंग लेंथ अस प्राइम नंबर या फॉलस अगर अस नॉन प्राइम लेंथn",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"अगर अस पॉजिटिव इंटेजर दिन ,तथ छी अस एवं नंबर दिन\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"अगर अस वुछो पॉजिटिव इंटेजर N ,तिल करो टोटल सुम्ड ऑफ़ सिगित्स इन बाइनरी .मिसाल की तोर पेठ N = 1000 ,सुम अस 1 आउटपुट अस \"1\" .N = 150 ,सुम अस 6 आउटपुट अस \"110\" .N = 147 ,सुम अस 12 आउटपुट अस \"1100\" .वैरिएबल्स: @N integer Constraints: 0 â‰¤ N â‰¤ 10000.आउटपुट:बाइनरी नंबर स्ट्रिंग \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"अगर अस ने अस एवं इन्टिजरस हदीस लिस्ट मंज़ ,तह छी अस एवं इन्टिजरस हदीस लिस्ट मंज़ ते जोड़ने\"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"लिखो फंक्शन युस स्ट्रिंग छी लेवा बे छी देवन ुर्देड वर्शन ुरदे.अर्डर वर्शन स्ट्रिंग , छी स्ट्रिंग याथ मंज़ सलीम लफ़ज़ (स्पेस सेपरेटेड) छी एवं बदलनी नव लफ़ज़ सेथ याथ मंज़ सलीम कैरेक्टर छी एवं ास्केडिंग ुर्दे मंज़ बेस्ड ASCII वैल्यू पेठ. नोट: तुम छी वाचना की तुमन छी कारन ऑर्डर लफ़ज़ बे रिक्त जाइ मंज़ .मिसाल की तोर:anti_shuffle('Hi') रिटर्न 'Hi' anti_shuffle('hello') रिटर्न 'ehllo' anti_shuffle('Hello World!!!') रिटर्न 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"तेरे अरे गिवेद a 2 dimensional डेटा, अस a नेस्टेड लिस्ट्स, व्हिच इस सिमिलर तो मैट्रिक्स, however, unlike मैट्रिक्स, प्रत्येक रौ मेक कंटेन a डिफरेंट नंबर ऑफ़ कॉलम. गिवन lst, एंड इंटीजर x, फाइंड integer x इन थे लिस्ट, एंड रिटर्न लिस्ट ऑफ़ tuples, [(x1, y1), (x2, y2) ...] such that प्रत्येक टपल इस a कोऑर्डिनेट - (row, columns), स्टार्टिंग विथ 0. सॉर्ट कोऑर्डिनेट initially बाय रौस इन असीडिंग ऑर्डर. Also, sort कोऑर्डिनेट ऑफ़ थे रौ बाय कॉलम इन descending ऑर्डर. Examples: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0,0, 0, 1, 4], 0 (1, 0), (2, 5), (2, 0), get_(1, 1) [] == [[row, 1, 2, 3, 2]], == 2, 2]] ]]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"अगर अस नेगेटिव इंटेजरस नॉन -मैरिज ,तेम छी कारन वापस कॉपी ,अतः पठ छी अस कारन सॉर्ट अगर असुम (गोड्नुइक इंडेक्स वैल्यू ,लस्ट इंडेक्स वैल्यू) छी ेपॉर ,या छी अस कारन सॉर्ट अगर असुम (गोड्नुइक इंडेक्स वैल्यू ,लस्ट इंडेक्स वैल्यू) छी जोड़े नोट: * मत चेंज करो मारीच मिसाल: * sort_array [ ] => [] * sort_array [ ] => [5] * sort_array [2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array [2, 4, 3, 0, 1, 5, 6]) [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"अख फंक्शन एनक्रिप्ट क्रिएट करान युस अख स्ट्रिंग अस आर्गुमेंट की तैर पइठ तब्दील करा त बै अख स्ट्रिंग एनक्रिप्टेड करथ अल्फाबेट छू रोटेट येवा करने.अल्फाबेट छू रोटेट येवा करने ताकि लफ़्ज़े हकन ज़े ज़े प्लेस पेठ ज़े मल्टीप्लयड सेत.मिसाल की तैर पइठ: एनक्रिप्ट (hi) रिटर्नस lm एनक्रिप्ट (asdfghjkl) रिटर्नस ewhjklnop एनक्रिप्ट (gf) रिटर्नस kj एनक्रिप्ट (et) रिटर्नस ix\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"अगर अस ने अस एवं तो अस ने कहँ ते ते वरीय कम कारन.next_smallest{\\displaystyle {next_smallest} } छी एवं इन्टिजरस पेठ .अथ पाठ छी अस फंक्शन लिखन युस अस दोयम सरियो खोत लकिट एलिमेंट छी कारन.अगर अस ने अस एलिमेंट ते छान ते छी ये वरीय कम कारन.next_smallest{\\displaystyle {next_smallest} [1,2,3,4,5]) == 2 next_smallest{\\displaystyle {next_smallest} [5,1,4,3,2]) == 2 next_smallest{\\displaystyle {next_smallest} [[5,1,4,3,2]) == 2 next_smallest{\\displaystyle {next_smallest} [[[1,1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"तुह्य़ छि अकि लफ्ज़चि स्ट्रिंग दियिथ, त तुह्य् छु अमिच बोरियत ह्न्ज़ गॉर गिवान। बोरियत छु अख लफ्ज़ युस \"I\" शब्दस सॉति शरू सपदान छु। लफ्ज़ छि '.', '? या '! ' सॉति ब्योन यिवान। मिसाले: >>> is_bored (((\"हलो वर्ल्ड\") 0 >>> is_bored ((\"स्काई इस ब्लू। सन इस शाइनिंग। आइ लव दिस वेदर\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''युस फंक्शन छी सु छी अस ने कारन 3 नुम्बरं. ये छी देवन ट्रू अगर आँख नुम्बरं छी बराबर बाकि ज़न हुन्द ,बे सलीम नुम्बरं छी इन्टिजर.ये छी देवन फॉल्ट बकियाँ ेकस केस मंज़.मिसाल की तोर _ any_int{5,2,7} -> True any_int{3,2,2} -> False any_int{3, -2,1} -> True any_int{3,6, -2,2} -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"लिख्ख अख फंक्शन युस मेसेज लेछ,ते तैर पइठ एन्कोड छू करा कि येम सेत तेम तमाम लफ़्ज़न हुन्द केस तब्दील करा,ते मेसेज मंज़ तमाम वॉक्लस तेम लफ़्ज़न सेत बदलवा,येम इंग्लिश अल्फाबेट मंज़ तेम वॉक्लस सेत 2 प्लेस बरोह छपे.सिर्फ लफ़्ज़ छू एम्म मानन.मिसालः >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"अगर अस वुछो की अस छी इन्टिजर ,अतः छी अस वूचन की अस छी वरीय असल प्राइम वैल्यू ,बे छी अस कारन ुमन हिन्द डिजिट बे छी सुद असूल\"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"अगर अख डिक्शनरी दीवान, अगर सलीम कुलि ल्गू केस मंज़ स्ट्रिंग्स या सलीम कुलि अपर केस मंज़ स्ट्रिंग्स आसि, अगर न फ़लस वापस करान। फ़ंक्शन पज़ि फ़लस वापस करान अगर दीवान डिक्शनरी छू खली आसान। मिसालः check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) पज़ि फ़लस वापस करान। check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) पज़ि फ़लस वापस करान। check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) पज़ि फ़लस वापस करान। check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) फ़लस पज़ि फ़लस वापस करान। check_dict_case{\"NC\"STATE:\"\", \"ZIP\":\"45\" } पज़ि फ़लस वापस करान।\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"युस फंक्शन छी ये छी ने नेगेटिव इंटेजर कारन बे छी देवन सरिख सरिख गोदनयक n इंटेजर युस प्राइम नंबर छी बे छी लकुट एन निष् मिसाल की तोर: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17]\"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"ये छू आँख फंक्शन युस ज़े इन्टिजर छू तेम हिन्द यूनिट डिजिट हुन्द प्रोडक्ट छू देवन.\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"अगर अस देवन स्ट्रिंग s ,कैसे करो नंबर अपरकेस वोकेल्स मंज़ युस अस छी एवं इस्तेमाल करने\"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''अगर अस ने अस नज़दीक ते अस नज़दीक ,तथ छी अस एवं नून पेठ नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर'''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"अगर अस पॉजिटिव इंटेजर n देवन ,तोल गसण पाथेरन हुन्द लेवल बनावन.गोड्नुइक लेवल छी एन स्टोन्स.पात पात पात पात छी नंबर: - नेक्स्ट अपॉइंटमेंट अगर n छी अनडेर - नेक्स्ट अपॉइंटमेंट अगर n छी जोड़े.तेम पात पात छी नंबर स्टोन्स युस पात पात छी सु छी एवं वापस कारन ,यित एलिमेंट इंडेक्स i छी कारन नंबर स्टोन्स पेठ लेवल (i+1)\"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"तुह्य़ छि अकि लफ्ज़चि डानचि दानि यिवान यिम कॉमा या स्पेस सॉति ब्योन कडिथ छि। तुह्य् छु अमि डानचि लफ्ज़्न म्न्ज़ बॉगरावन त लफ्ज़्न हुन्द एरे रटन करान। मिसाले: words_string ((\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] words_string ((\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"ये फंक्शन छू ज़े पॉजिटिव नंबर x ते y ते छू सरियो खोत बुड इन्टिजर लबनी येम रेंज [x, y] मंज़ छू.अगर ये नंबर ने अस,तेल फंक्शन छू -1 लबनी.मिसाल की तोर:\"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"अगर n छू ज़याद,तेल छू इनरलिंकस मंज़ ते बदलान.मिसाल: rounded_avg{1,} (5) => \"0b11\" rounded_avg{7,5) => -1 rounded_avg{10,20} => \"0b1111\" rounded_avg{20,33) => \"0b11010\"\"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"अगर अस वुछो पॉजिटिव इंटेजर x ,तिल छी अस कारन सूर्ट सलीम एलिमेंट्स हैज़ युस ने अस कहीं ज़े डिजिट .नोट:युस लोटर्न अस अस कारन सूर्ट छी कारन ऑर्डरिंग मंज़.मिसाल की तोर पेठ: >>> unique_digits (([१५ , ३३ , १४२२ , १]) [१ , १५ , ३३ ] >>> unique_digits (([१५२ , ३२३ , १४२२ , १०]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"अगर अस इंतेजरस पेठ छी ,अथ छी अस रटन इंतेजरस 1 ते 9 मंज़ ,अथ छी अस कारन रिवर्स ,तथ छी अस कारन रिवर्स ,बे छी अस कारन रिप्लेस ,हर डिजिट छी अस कारन रिप्लेस ,एख ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,हर डिजिट छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,हर डिजिट छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,तत् छी ,ततः छी अस कारन रिप्लेस ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"f फंक्शन युस n अस कारन पैरामीटर पेठ ,बे छी देवन लिसट साइज n ,यिथ पाठ वरीय एलिमेंट इंडेक्स पेठ छी फैक्टोरियल i अगर i छी जोर या छी सूद नंबर 1 पेठ i ताम अगर न की अस कारन. i छी शुरू कारन 1 पेठ.\"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"पॉजिटिव इंटेगर n देथ,तेम छी टपल कारन युस नंबर छी जोर ते अनडेर इंटेगर पालिंड्रोम्स युस रेंज मंज़ छी एवं. मिसाल1: इनपुट: 3 आउटपुट: (1, 2) एक्सप्लनेशन: इंटेगर पालिंड्रोम छी 1, 2, 3. आँख छी जोर ,त बै ज़े छी ओड. मिसाल2: इनपुट: 12 आउटपुट: (4, 6) एक्सप्लनेशन: इंटेगर पालिंड्रोम छी 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. चूर छी जोर ,त बै 6 छी ओड. नोट: 1. 1 <= n <= 10^3 2. टपल दुईत नंबर जोर ते अनडेर इंटेगर पालिंड्रोम्स\"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"अगर आँख नंबर छू नेगेटिव,तेल अस सुन्द गोड्नुइक सिग्नेटेड डिजिट नेगेटिव:मिसाल की तोर पेठ -123 छू सिग्नेटेड डिजिट -1,2,बे 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"असि नॆ इंटेगर 'अर्र' आस्नॆ. आरे मन्ज़ नॆ नंबर यॆ रैंडमली ऑर्डर्डर्ड करनॆ. अमिच़ काम छे ईछ़ान करना कि क्या अख अम्ल नॆ कम गछ़ान ऑर्डर मंज़ सॉर्ट करनॆ मुमकिन छे. अमिच़ काम छे मय्यत सरिथः अम्ल हॆकिव कुनि ति वखतस ताम दाहिने तरफ़ हिलावनॆ आमुत. अकि दाहिने तरफ़ हिलावनॆ आमुत मतलब छु कि सरिथ कॆस ति एलिमेंट्स सॊथ अकि पोज़ीशन दॆ राइटस मंज़ हिलावनॆ. अमिच़ ऑड दॆ राइटस हॆकिव सरिथ कॆस ति अकि पोज़ीशन सॊथ आरंभ गछ़ान यॆर मतलब 0th इंडेक्स. अगर असि नॆ कम गछ़ान ऑर्डर हासिल करनॆ मुमकिन आसि, तिम पॆठि रिटर्न ट्रू, बाक़य रिटर्न फ़ॉल्स. अगर दीवॆ एरे खाली आसि तिम रिटर्न फ़ॉल्स. नोटः दीवॆल सूरतस मंज़ छि गार्यत अनन्य एलिमेंट्स. मस गारथ गारनॆ गारन. मिसालः मूवरे_ऑन_{((बाल_बाल_बाल=4,===5, 1, 2>स=सत्युम=स सही=स=सथ)\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"अगर अस मुमकिन छी एक्सचेंज एलिमेंट्स lst1 ते lst2 दरमियान ताकि एल एलिमेंट्स अस हकन असिथ ,तो वापस करो \"YES\".या नॉन ,तो वापस करो \"NO\".मिसाल की तोर:exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"ये छी एवं माना की इनपुट लिस्ट छी ने खाली\"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"अगर अख स्ट्रिंग छू स्पेस सेपरेड लोकरकेस लेटर रिप्रेजेंट करा,तेल छू ज़याद रिपीट करने वाले लेटरक डिक्शनरी ते तेम सेत मिलान.अगर कह लेटर छू एएम सेत मिलान,तेल छू तेम तमाम लातर रिटर्न करा.मिसाल:हिस्टोग्राम (a) == {'a': 1, 'b': 1, 'c': 1} हिस्टोग्राम (a) == {'a': 2, 'b': 2} हिस्टोग्राम (a) == {'a': 2, 'b': 2} हिस्टोग्राम (b) == {'b' 4} हिस्टोग्राम (a) == {'b'}\"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"काम अस तुमु देवन ज़े स्ट्रिंग s ते c , तुह पज़े सब किरदार डिलीट करों s मंज़ युस बराबर छू कह ते करैक्टर सी मंज़ ते वुछ अगर रिज़ल्ट स्ट्रिंग पालिंड्रोम छू. स्ट्रिंग छू पालिंड्रोम वानान अगर ये बैकवर्ड ते फॉरवर्ड बराबर छू. तुह पज़े रिटर्न करों टपल यथ मंज़ रिज़ल्ट स्ट्रिंग ते ट्रू/फॉल्स छू. मिसाल की तोर अगर s = \"abcde\", c = \"ae\", रिजल्ट असा असा असा ('bcd',False) अगर s = \"abcdef\", c = \"b\" रिजल्ट असा असा ('acdef',False) अगर s = \"abcdedcba\", c = \"ab\", रिजल्ट असा ('cdedc',True)\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"अगर अस वुछो स्ट्रिंग्स हुन्द लिस्ट ,यथ मंज़ हर स्ट्रिंग छी आसान सिर्फ डिजिट ,तोल अस लिस्ट कारन वापस .हर एलिमेंट i आउटपुटस मंज़ हको अस \"नॉम्बर ऑफ़ पियर एलिमेंट्स इन स्ट्रिंग i इनपुटस मंज़ \"यथ मंज़ सलीम आईएस हको अस बदलित नंबर्स ऑफ़ पियर डिजिट इन i'th स्ट्रिंग इनपुटस मंज़. >>> odd_count['1234567']) [\"नॉम्बर ऑफ़ पियर एलिमेंट्स 4n स्ट्रिंग 4 ऑफ़ 4n इनपुट.\"] >>> odd_count['3',\"111111\"]) [\"नॉम्बर ऑफ़ पियर एलिमेंट्स 1n स्ट्रिंग 1 ऑफ़ 1n इनपुट. \",\"नॉम्बर ऑफ़ पियर एलिमेंट्स 8n स्ट्रिंग 8 ऑफ़ 8n इनपुट. \"]\"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"अगर अस इंतेजरस nमर्स हुन्द एरे दें,तेल अस नॉन-एमिक सुब-एरे हुन्द मिनिमम सुम वुछुन.मिसाल minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"तुह्य् छि कुलन हुन्द अख रेक्टेंगुलर ग्रिड दिय्मुत। प्रेथ रॅह छे अख कुलि, त प्रेथ रॅह 1 छे आबुक अख इकाइ। प्रेथ कुलि छे अख बकेट युस आब पेठ ज़ाहिर करन बापथ इसतेमाल सपदान छु, त तमाम बकेट्न हुन्द कॅपेसिटी छे। तुह्य् ह्न्ज़ कारकरदगी छे कुलन खाली करन बापथ इस्तेमाल करनुक। बकेट्न कम करन बापथ वारियाह वखतह पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉ\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"अथ काटास मंज़,अस नोन-नेगेटिव इंटेजरस अख सरणी हुन्द तशरीह करान येमन हिन्द बाइनरी नुमायंदगी मंज़ नंबर वनस मुताबिक असेंडर क्रमेच.एमन हिंज ताम एएम सिमिलर नंबर वनस पेठ,दशमलव वैल्यू पेठ मब्नी तशरीह करान.ये गैसीय एएम पइठ अमली तब्दील करने: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"अगर string s छू छूत,तेल छू फंक्शन छूत लिस्ट लबनी येवा. नोटः तुहको छूत इनपुट स्ट्रिंग मंज़ सिर्फ लेटर ते स्पेस छूत. मिसाल: select_words \"मेरी आस अख लकुट लम्ब\", 4) ==> [\"लकुट\"] select_words \"मेरी आस अख लकुट लम्ब\", 3) ==> [\"मेरी\", \"लकुट\"] select_words \"सिंपल व्हाइट स्पेस\", 2) ==> [] select_words \"हैलो वर्ल्ड\", 4) ==> [\"वर्ल्ड\"] select_words \"अंकल सैम\", 3) ==> [\"अंकल\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"तुह्य़ छि अख लफ्ज़ दिवान। तुह्य़ काम छु लफ्ज़स मंज़ दॆन ह्न्ज़्न दॆवान्न ह्न्ज़्न दोन कंसोनान्ट्न दरमियान आसिमुत नज़दीक वोकल हावुन (केस सेन्सिटिव) । शरू त ख़तम करन वालेन ह्न्देन वोकलन हुन्द गॉर हिसाब करान। अगर तुह्य़ ने कुनि वोकल वुछान ब्रोन्ह कुन मोज़ू छुस नॆ गछान, खाली स्ट्रिंग वापस कडान। तुह्य़ हेकिव मानन ज़ि दितन स्ट्रिंगस म्न्ज़ छु सिरिफ़ बर्तानियॉयी लफ्ज़। मिसाले: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''अगर तुहीम ज़न स्ट्रिंग्स हिन्ज़ लिस्ट देंव, दुनवई स्ट्रिंग्स छि सिर्फ ओपनिंग ब्रेन्टेसेस '(' या क्लोज ब्रेन्टेसेस ') '। तुहीच काम छे ये चेकी करना कि क्या ज़न स्ट्रिंग्स कांह तरतीबस मंज़ रलावुन मुमकिन छे, कि नतीजस मंज़ स्ट्रिंग असल आसि। अख स्ट्रिंग एस छु असल मानन यिवान अगर त सिर्फ अगर एस मंज़ सरेन ब्रेन्टेसेस बाल्कन आसि। मिसाले: स्ट्रिंग '((()) ' छु असल, येलि ज़न स्ट्रिंग '()) ' छु न। अगर अख असल स्ट्रिंग बनावनिच तरीक आसि, त्राव 'हाँ' वापस, तः अगर न आसि, त्राव 'नो' वापस। मिसालः match_parens[('() ', ') ']) == 'हाँ' match_parens[(') ', ') ']) == 'नो' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"अगर अस वुछो एरे arr इंटेजरस ते पॉजिटिव इंटेजर k ,अथ मंज़ अस वरीय ज़याद नंबर.मिसाल1: इनपुट: arr = [ -3, -4, 5], k = 3 आउटपुट: [ -4, -3, 5] मिसाल2: इनपुट: arr = [4, -4, 4], k = 2 आउटपुट: [4, 4] मिसाल3: इनपुट: arr = [ -3, 2, 1, 2, -1, -2, 1], k = 1 आउटपुट: [2] नोट: 1. एरे हिंज लेंथ अस [1, 1000] मंज़. 2. एलिमेंट्स अस एरे मंज़ अस [-1000, 1000] मंज़.\"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"अगर अस इंतेजरस नॉन -एमिक लिस्ट अस देवन ,तोल अस तेम अनडेर एलिमेंट्स हिन्दुस् सुम अस तेम अस बी पोर पोजीशन मंज़.\"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"अगर अस ने अस खली नॉन -एयर सरणी छी इन्टिजरस arr बी इन्टिजर k ,सु छी अस वापिस कारन एलिमेंट्स सुमथ युस अस ज़े डिजिट अस arr पेठ\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"कोलाट्ज़ कजेक्टुरे छू अख कजेक्टुरे मैथमेटिक्स मंज़ युस एथ पेठ डेफिनेड छू. कुंते पॉजिटिव इंटेगर n सेत शुरू गाछ. पात छू हर टर्म पोरें टर्म निष् येवा लबनी:अगर प्रेग्नेंट टर्म छू जोड़े, तेम पात छू येवा तेम पातक टर्मस सेत नेसथ.अगर प्रेग्नेंट टर्म छू अपर, तेम पात छू येवा तेम पातक टर्मस सेत नेसथ ज़राब तेम पातक टर्मस सेत ज़राब.कजेक्टुरे छू येवा वन कि एन किस वैल्यूस सेत फरक न परन,तेम सेत छू हमेशा नंबर 1 एवा गाछत.नोटः 1. कोलाट्ज़ (((1) छू [1]. 2. रिटर्नल लिस्ट क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"तो हवे तो लिखे a फंक्शन ठाट validates a गिवेद डेट स्ट्रिंग एंड returns ट्रू अगर डेट इस वैलिड अन्यथा फॉल्ट. थे डेट इस वैलिड अगर आल ऑफ़ थे फोल्लोविंग रूल्स अरे संतुष्ट: 1. थे डेट स्ट्रिंग इस नोट खाली. 2. थे नंबर ऑफ़ डेज़ इस नोट कम फ्रॉम 1 या हाईतर फ्रॉम 31 डेज़ फॉर मंथ्स 1,3,5,7,8,10,12. एंड थे नंबर ऑफ़ डेज़ इस नोट कम फ्रॉम 1 या हाईतर फ्रॉम 30 डेज़ फॉर मंथ्स 4,6,9,11. एंड, थे नंबर ऑफ़ डेज़ इस नोट कम फ्रॉम 1 या हाईतर फ्रॉम 29 फॉर मंथ 2. 3. थे मंथस शुड नोट बे लेस्स फ्रॉम 1 या हाईटर फ्रॉम 12. 4. थे डेट शुड बे इन थे फॉर्मेट: mm-dd-yyyy for example: valid_date('03-11-2000') => true_date => false_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''लफ्ज़न हुन्द अख स्ट्रिंग दितुन, लफ्ज़न हिन्ज़ अख लिस्ट वापस करन्ह येलि ज़न व्हाइटस्पेस पेठ तकसीम करन्ह, अगर टेक्स्टस मंज़ कांह वाइटस्पेस मौजूद आसि न, ति गस़न तुह कोमा पेठ तकसीम करन्ह, अगर कोमा मौजूद आसि न तुह गस़न तुह अल्फाबेट्स मंज़ लोट-लेटर लेटरन हिन्ज़ तादाद वापस करन्ह, ऑर्ड (a) = 0, ऑर्ड (b) = 1, ... ऑर्ड (z) = 25 मिसाले split_words (Hello world) â -> [\"Hello\", \"world!\"] split_words (Hello,world!\") â -> [\"Hello\", \"world!\" split_words (abcdef\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''अगर नंबर दीथ ,तेम अस या आस ने अस संज़् ज़रिये असेंडर मंज़ ,अगर नंबर ओस दुप्लिकेट ,तेम अस फॉलस .नगेटिव नुम्बरं अस ने एवं ,सिर्फ इंतेजरस .मिसाल अस _सोर्टेडn",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"अगर अस वुछो की इंटरवेल्स छी ज़े इंटरवेल्स ,यित अस हर इंटरवेल्स छी इंटेजर .मिसाल की तोर ,इंटरवेल = (शुरू ,आखरी) = (1,2);अथ इंटरवेल्स छी बंद ,याथ मतलब छू की इंटरवेल (शुरू ,आखरी) अथ मंज़ छी एवं दुनवई शुरू बे ख़तम .हर इंटरवेल्स खातर ,ये छी एवं माना की अथ मंज़ छी शुरू कहीं कम या बराबर अथ ख़तम करने खातर;अस सु काम की अस वुछो की अथ दुन इंटरवेल्स हुन्द लेंथ छी प्राइम नंबर;मिसाल की तोर ,इंटरवेल्स (1,3); (2,4); (2,3);ये छी एमएच लेंथ छी 1 ,ये छान प्राइम नंबर;अगर इंटरवेल्स लेंथ छी प्राइम नंबर ,अस;अगर दुनवई इंटरवेल्स छान इंटरसे ,अस;अगर दुनवई इंटरवेल्स छान इंटरसे ,अस;\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"अगर अस इन्टिजरस पेठ छी वूचन ,तोल छी अस कारन इन्टिजरस ज़रिये प्रोडक्ट ऑफ़ सलीम निशानन हुन्द ,अतः छी एवं वन 1 , - 1 या 0\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"अगर अस देवन ग्रिड N रडें ते N कॉलम (N >= 2) ते अख पॉजिटिव इंटिजर k ,हर सेल ग्रिडच छू अख वैल्यू आसान.हर इंटिजर रेंज मंज़ [1, N * N] इन्क्लुसिव छू अख वैल्यू आसान.तुह पनुन मिनिमम पाथ लेंथ k इन ग्रिडस मंज़.तुह हेकीक कुंते सेल पेठ शरू करिथ,ते हर स्टेप मंज़ तुह हेकीक कुन ते नेबर सेल्स मंज़ चलन,बाक़ी लबें सेल्स मंज़,बाक़ी लबें सेल्स मंज़ यिम तुहकीस एज सेल्स सेत शेअर छू करा.तुह करो नोट कि लेंथ k पथ हुन्द मतलब छू विज़िट कारन बिलकुल k सेल्स (नही छू ज़रूरी कि ये छू डिस्टिंक्ट).तुह ने ग्रिड पेठ नेबर नेबर नेबर नेबर नेबर.अख पाथ A (लेंथ k) छू पाथ B (लेंथ k) निष् कम समजन येवा येल ए ते B पेठ सेल हिंज ऑर्डर्डर्डर्ड लिस्ट बनावन पत (लम छू अस वनान l_stA ते l_stB),लस लेक्सिकली छू लेक्सिकली कम l_स्ट_A ते l_stB),लस छू लेक्सिकली कम l_स्ट_स्ट_स्ट_A,लस सेल्स मंज़,बाख इंटिजर पथ छू इन्टिजर,बाख इंटिजर इंटिजर,युन सेल्स मंज़,युन छू तुह हक़ा शेअर करा,ये अस तुह हक़ ग्रिड सेल्स सेथ.तुह हक़ अथ पेठ हक़ अस ग्रिड पेठ,ये अस ग्रिड पेठ: [1, [4, [1, l_1, l_1, l_1, l_1, l_1, l_1, l_2, l_[4, l_1, l_2, l_2, l_2, l_2, l_2, l_8, j_[, l_[] आउटपुट = l_[] [4, l_[] l_[] l_[] l_[] l_[]\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"फिबोनाची सीक्वेंस छी एवं वुचने ,लकिन युस लुख छान तेम जनन छी ट्राइबोनाची सीक्वेंस ,ये छी एवं वुचने रिसीवरेंस सेथ:tri(1) = 3tri(n) = 1 + n / 2 ,अगर n छी जोड़े ,tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1),अगर n छी अलग.मिसाल की तोर:tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 ेमो दुईत नेगेटिव इंटेगर नंबर ,अस करो रिटर्न लिस्ट गोड्नुइक n + 1 ट्राइबोनाची सीक्वेंसिक .मिसाल की तोर:tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"अगर अस पॉजिटिव इंटेजर n ,अस करो प्रोडक्ट ऑफ़ ुन्ड डिजिट्स ,अगर सलीम डिजिट अस बराबर तेम छी देवन 0\"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''अख फंक्शन बनाव यथ मंज़ स्क्वायर ब्रैकेटस शामिल आसि. फंक्शन कर अस ट्रू वापिस अगर तॆ सिफॆ अगर ब्रैकेटसुक अख वैलिड सब्सकवेंस आसि यथ मंज़ कम अकिस ब्रैकेटस मंज़ नेस्टेड आसि. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nest. is_nest. is_nest. is_nest. is_nest. is_nest. is_nest. is_nest.'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"तेरे इस नो नो एवेन्यू तो बे a लिसटी ऑफ़ नंबर्स. तेरे इस नो थिंग तो बे a स्क्वायर ऑफ़ नंबर्स इन थे गिवेद लिस्ट, राउंड अवे एलिमेंट्स इन थे लिस्ट तो थे अप्पर int (सॉलिमिंग) फर्स्ट. एक्सेम्प्शन्स: फॉर lst = [1,2,3] थे आउटपुट वे हवे तो बे 14 फॉर lst = [1,4,9] थे आउटपुट वे हवे तो बे 98 फॉर lst = [1,3,5,7] थे आउटपुट वे हवे तो बे 84 फॉर lst = [1.4,4.2,0] थे आउटपुट वे हवे तो बे 29 फॉर lst = [-2.4,1,1] थे आउटपुट वे हवे तो बे 6 \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''अख फंक्शन बनाव यथ मंज़ ट्रू वापस छू येवा करने अगर अकिस देवन स्ट्रिंग्स मंज़ आखरी करैक्टर अल्फाबेटिकल करैक्टर असा,ते छुं सेत अख लफ़ज़ हिसस,ते फॉलस अगर असे न. नोट: \"लफ़ज़\" छू ग्रुप करैक्टरन हुन्द युस स्पेस सेत अलग छू असा. मिसाल: check_if_last_char_is_a_letter\" \"एप्पल पाई\") â -> False check_if_last_char_is_a_letter\" \"एप्पल पाई ई\") â -> ट्रू check_if_last_char_is_a_letter\" \"एप्पल पाई ई\") â -> फॉलस check_if_last_char_is_a_letter\" \"एप्पल पाई ई\") â -> फॉलस check_if_last_char_is_a_letter\" \"'''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"युस फंक्शन छी सु छी देवन वरीय बढ़ इंडेक्स एलिमेंट्स हैज़ युस ज़याद आसान या बराबर आसान एलिमेंट्स सेथ यिल तेम अस ने एक्सिस्ट कारन\"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''अख फंक्शन बनाव यथ मंज़ टपल (a, b) वापस छू येवा करने,येत 'a' लार्ज छू नेगेटिव इंटेगरन मंज़,ते 'b' लार्ज छू पॉजिटिव इंटेगरन मंज़.अगर नेगेटिव या पॉजिटिव इंटेगर ने कहँ ते,तेम छू अस एवं वापस नेन.मिसाल:largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None)'''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"अख फंक्शन बनावुन युस इन्टिजर,फ्लोट्स,या स्ट्रिंग्स छू कारन युस रियल नंबर्स रिप्रेजेंट छू करा,ते लार्ज वेरिएबल छू रिटर्न करा येम हिंज वेरिएबल टाइप छू देवन.अगर वैल्यूज छू बराबर,तेम छू नेन रिटर्न करा.नोट:अगर रियल नंबर छू स्ट्रिंग पेठ रिप्रेजेंट करा,फ्लोटिंग पॉइंट छू असान.या,कम्प्रेस_वन,1.2.5) â -> 2.5 compare_वन,1. \"2,3\") â -> \"2,3\" compare_वन,5.1\",6\") â -> \"6\" compare_वन,1. \"1) â -> नेन \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"अगर अस वुछो की युस नंबर छी n हको अस ते लिखो बे सुमथ 4 पॉजिटिव नंबरों हुन्द\"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"ब्राज़ीलियन फैक्टोरियल छी एवं वन: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! यित n > 0 मिसाल की तोर: >>> special_factorial(4) 288 फंक्शन छी इन्पुट कारन इन्टिजर बे छी ये कारन स्पेशल फैक्टोरियल इनटिजर\"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_मिसाल-3ंग टेक्स्ट ,तोल छी सु सब्सक्राइब कारन अंडरस्कोर सेथ ,बे अगर आँख स्ट्रिंग छी ज़याद 2 लगातार स्पेसेस ,तोल छी सु सब्सक्राइब कारन -fix_spaces{\"example\"} == \"example\"{\"example1\") == \"example1\"{\"example2\") == \"example2\"{\"example3\") == \"example-3\"\"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"अख फंक्शन बनावथ युस अख फ़ाइल नाव हावान छु, तमि बापथ 'हाँ' लवान छु, अगर फ़ाइल नाव सही आसि, त 'नो' लवान छु। अख फ़ाइल नाव छु तमि बापथ सही मानन यिवान अगर तिम सॉति यिमन शर्तन पूरः आसि:- फ़ाइल नावस म्न्ज़ तिम छि न त्रेन ह्नदि खोत ज़्यादह ('0'-'9') आसान। - फ़ाइल नावस म्न्ज़ छु अख डॉट '। - डॉट ब्रोन्ह सब्सट्रेन्ग छु न खॉली, त यि छु न लातीनी अल्फा पेठ ('a'-'z' त 'A'-Z') सेत शरू गछान। - डॉट पत सब्सट्रेन्ग छु यिम्न म्न्ज़ अख गछानः ['txt', 'exe', 'lld'] मिसाले: file_name_check\"{example.txt.t\") # => 'हाँ' file_name_check\"{example.txt.tll1\") => 'नह' (#' (फाइल नाव छु लातीनी अल्फा पेठ सेत शरू गछान)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"ये फंक्शन छू इंटेजरस हिंज लिस्ट बनावन.लस्ट मंज़ सरे एंट्रीज खातिर,फंक्शन छू इंटेजर एंट्री स्क्वायर कारन अगर इमूक इंडेक्स मल्टीप्ल ऑफ़ 3 ते छू इंटेजर एंट्री क्यूब कारन अगर इमूक इंडेक्स मल्टीप्ल ऑफ़ 4 ते न कि मल्टीप्ल ऑफ़ 3 छू.फंक्शन छू तेम एंट्रीज हिंज लिस्ट चेंज न करा एमूक इंडेक्स न मल्टीप्ल ऑफ़ 3 या 4.फंक्शन छू पत सरे एंट्रीज हिंज सुम ते लबनी.मिसाल:lst=[1,2,3] खातिर आउटपुट असा 6lst=[] खातिर आउटपुट असा 0lst=[-1,-5,2,-1,-5] खातिर आउटपुट असा -126 \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"तुह्य़ छि अकि वाक्यचि नुमायंद करान अख स्ट्रिंग दियिथ, वाक्यस मंज़ छे केन्ह लफ्ज़ स्पेस सॉति ब्योन, त तुह्य़ छे अख स्ट्रिंग लान यथ मंज़ ओरिजिनल वाक्यचि लफ्ज़ छि, यिमचि लन्गयि छि प्राइम नुमारिक, नवि स्ट्रिंग म्न्ज़ लफ्ज़न ह्न्ज़ तरतीब गछि ओरिजिनल सॉति आसान। मिसाल1: इनपुट: वाक्य = \"This is a test\" आउटपुट: \"is\" मिसाल2: इनपुट: वाक्य = \"lets go for swimming\" आउटपुट: \"go for\" कन्ट्रास्ट्स: * 1 <= len(sentence) <= 100 * वाक्यस म्न्ज़ छि सिरिफ़ लफ़ज़ \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"अगर अस वुछो की अस छी एवं इस्तेमाल करने ,तथ छी अस एवं इस्तेमाल कारन एक्सप्रेशन एक्स * एन.फंक्शन छी देवन ट्रू अगर एक्स * एन छी इन्टिजर ,फॉल्स अगर अस ने अस कारन.दुनवई एक्स बे एन छी स्ट्रिंग रिप्रेजेंटेशन फ्रैक्शनक ,बे छी अथ फॉर्मेट ,<नुमरेटर>/<नोमिनटर> येथ नुमरेटर बे नुमिनेटर छी पॉजिटिव इन्टिजर .अस हको अस मानो एक्स ,बे एन छी वैलिड फ्रैक्शन ,बे छान अस नोल्डे denominator.\"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"अगर अस तेम चीज़ अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम तेम अस तेम तेम अस तेम तेम अस तेम ते अस तेम ते अस तेम ते अस तेम ते अस तेम ते अस तेम\"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"लिखो फंक्शन युस अस लेवन एरे ऑफ़ नंबर इनपुट ते देवन तेम एलिमेंट तेम नंबर यम ज़याद छी 10 बे दुनवई गोडणुक ते आखरी डिजिट छी नंबर (1 ,3,5,7,9)\"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"अगर अस वुछो की अस छी एवं इन्टिजर बनावने ,तथ छी अस एवं इन्टिजर बनावने ,एम् छी एवं इन्टिजर बनावने ,बी छी एवं इन्टिजर बनावने\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''अमीच सोलर सिस्टम मंज़ छि आठ प्लेनेट: आफताबस नज़दीक छु मर्करी, बेयि छु वीनस, फिर ज़मीन, मंगल, बृहस्पति, शनि, यूरेनस, नेपच्यून। अख फंक्शन लिख्थ युस दोन प्लेनेट नाव्स सट्रेन्ड्स प्लेनेट1 त प्लेनेट2 कि तैर पइठ ले। फंक्शन छु अख टपल वापस करान यथ मंज़ सारिवय प्लेनेट आसान यिमयिकि कुलि छि प्लेनेट1 कि कुलि त प्लेनेट2 कि कुलि दरमियान आसान, तमिच तरतीब छु आफताबस नज़दीकी हिसाब सॉर्ट करनः यिवान। अगर प्लेनेट1 या प्लेनेट2 सही प्लेनेट नाव आसि न, फंक्शन छु अख खाली टपल वापस करान। मिसाल bf \"(जुपिटर\", \"नेपच्यून\") ==> (\"शुमरु\", \"यूरनस\") bf \"(ज़मीर\", \"मर्करी\") ==> (\"शुमरु\", \"ज़मीर\", \"मर्स\", \"शुमरु\", \"श\")'''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"अख फंक्शन लिखो युस स्ट्रिंग्स हिंज लिस्ट अख पैरामीटर कि तैर पइठ एक्सेप्ट करथ,येथ मंज़ तेम स्ट्रिंग्स डिलीट करथ यमन अनड लन्ग छे,ते सु युस नतीज दरयाफ्त करा अस सु छू ऑर्डर करा,लिस्ट छू हमेशा स्ट्रिंग्स हिंज लिस्ट असा,ते छू कदे नंबरन हिंज एरे,ते अथ मंज़ हेक डुप्लिकेट ते असत.लिस्ट हिंज ऑर्डर हर लफ्ज़ हिंज लेंथ हिसाब असा असा असा असा,ते तुह पनस लिस्ट अथ रूल सेत ऑर्डर करथ लौचनी.अगर ज़े लफ्ज़ हिंज लेंथ हिव,लिस्ट अल्फाबेटिकली ऑर्डर करा.फंक्शन छू स्ट्रिंग्स हिंज लिस्ट ऑर्डर करने खातिर लौचनी.तुह हेक मानथ कि तमाम लफ्ज़ हिव एकस लेंथ.मिसालः assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => \"ab\", \"cd ])\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"अख सिम्पल प्रोग्राम युस वैल्यू ऑफ़ x देन यित n प्राइम नंबर अस त बै वैल्यू ऑफ़ y देन यित ने प्राइम नंबर अस\"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''अगर अस नंबर दीवान ,सु छी अस देवन स्क्वायर ऑफ़ नंबर युस अस छी परड.अगर अस नेगेटिव या नॉन इंटेजर अस ,अस ने कारन इन्जोर.'''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"अगर तुही छी तहीं छी ये वरीय ज़याद आसान की अस तुही वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन तु वूचने\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"अगर तुह सीएपी हियुन्द नाव बडिस अक्षरस मंज़ तब्दील करान, त तुह पान्ठि सबसे सटोर एक्सटेंशन हावुन त तुह पान्ठि एएम फॉर्मेटस मंज़ अख स्ट्रिंग रटनः ClassName.StrongestExtensionName. अगर दोन या ज़याद एक्सटेंशन हिन्ज़ ताकत अख अकिस सीथ आसि, तुह पान्ठि अख सु युस सरिवन पेठ आव। मिसाल किथ कनि, अगर तुह पान्ठि \"स्लाइसिस\" क्लास त एक्सटेंशन हिन्ज़ नावः ['SEviRNGliSCes', 'Cheese', 'StuFfed' दें, तो तुह पान्ठि 'Slices.SEviRNGlin",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"तुह्य़ छि 2 लफ्ज़. तुह्य़ गछुन ट्रू वापस यलि दोयिम लफ्ज़ या अमिच कुनि रोटेशन छे गोडनिकिस लफ्ज़स मंज़ अख सब्ट्रिंग साइक्पेटर्न_चेक ({\"abcd\",\"abd\") => फ़ॉल्स साइक्पेटर्न_चेक ({\"hello\",\"ell\") => ट्रू साइक्पेटर्न_चेक ({\"whassup\",\"psus\") => फ़ॉल्स साइक्पेटर्न_चेक ({\"abab\",\"baa\") => फ़ॉल्स साइक्पेटर्न_चेक ({\"efef\",\"eeff\") => फ़ॉल्स साइक्पेटर्न_चेक ({\"hims\",\"simen\") => ट्रू \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"अगर अस इन्टिजर अस देवन ,तथ छी अस टपल कारन वापस युस अस ने ज़ा ते अनड डिजिट अस\"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"पॉजिटिव इंटेजर, रोमन नुमारिकाल एक्विवैलेन्ट अस स्ट्रिंग, तेम अस लकिटस मंज़ वापस कारन.\"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''त्रिकोण की तीन तरफ़ां हिन्ज़ लम्बाई दें. अगर त्रे तरफ़ां छू रेग्ट एंगल त्रिकोण बनान, तेम छू ट्रू लफ़्ज़ वापस कारन, अगर न, तेम छू गलत. अख रेग्ट एंगल त्रिकोण छू अख त्रिकोण येथ मंज़ अख एंगल छू रेग्ट एंगल या 90 डिग्री. मिसाल: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"अख फंक्शन लिख युस स्ट्रिंग्स हिन्ज़ लिस्ट कुब्लिथ छे। अथ मंज़ छे मुख्तलिफ लफ्ज़ आसान। अकि लफ्ज़स मंज़ छि ज्याद तर यूनिक करैक्टर आसान। अगर वार्याहन स्ट्रिंग्स मंज़ ज्याद तर यूनिक करैक्टर आसान छे, तमि सॉति यिम लफ्ज़ गोड्निक तरतीबस मंज़ यिम कुब्लिथ वापस करान छि। find_max (([\"name\", \"of\", \"string\"]) == \"string\" find_max (([\"name\", \"enam\", \"game\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"तुही छी भूखल खरगोश , तुही छी आकिस नंबरस खातर कार्ट्स ,लकिन तुह छी ज़रूरत की तुह करो वारिया कार्ट्स खातर दिन खातर .तुह छी ज़रूरत की तुह करो एरे वापस [ कुल नंबर खातर कार्ट्स यिल तुह छी खातर ,युस नंबर छी कार्ट्स युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस नंबर छी कार्ट्स युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी तुह छी\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"ओपरेटर ते ओपरेंड छू दूँ लिस्ट मंज़.गोड्नुक लिस्ट छू बेसिक अलजेब्रा ऑपरेशन,ते दुय्यम लिस्ट छू इंटीजरस हिंज लिस्ट.अलजेब्रा एक्सप्रेशन बनवनी खातिर दूँ लिस्ट इस्तेमाल करिथ ते छू एएम एक्सप्रेशन हिंज इवैल्यूएशन रिटर्न करा.बेसिक अलजेब्रा ऑपरेशन:अद्दिसिओं (+) सब्ट्रैक्शन (-)) मल्टीप्लिकेशन (*) फ्लोर डिवीज़न (//) एक्सपोनेंशियल (**) मिसाल:ऑपरेटर['+', '*', '-'] अरे = [2, 3, 4, 5] रिजल्ट = 2 + 3 * 4 - 5 => रिजल्ट = 9 नोट:ऑपरेटर लिस्ट हिंज लेंथ छू बराबर ओपरेंड लिस्ट मिनर वन लेंथ सेत.ओपरेंड छू नॉन-नेगेटिव इंटीजर लिस्ट.ऑपरेटर लिस्ट छू कम से कम आँख ऑपरेटर,ते ओपरेंड लिस्ट छू कम से कम ज़े ऑपरेंड्स.\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"अगर तुह सीत अख स्ट्रिंग देंव. अगर s[i] अख लफ़ज़ छे, तुह छे अमिच केस कम पेठ बोडस ताम या वरियाह ताम बदलावान, अगर न यि यथावथ रटन। अगर सीत कांह लफ्ज़ छिन, त तुह सीत उलटि करान। फंक्शन गस़ि नतजमच सीत लबनि। मिसाल हल करना (((\"1234\") = \"4321\" हल करना (((\"ab\") = \"AB\" हल करना (((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"अगर अस स्ट्रिंग 'टेक्स्ट' दें,तेम अस एमडी5 हैश एक्विवैलेन्ट स्ट्रिंग ते देवन.अगर 'टेक्स्ट' छू खली स्ट्रिंग,तेम अस नेन ते देवन. >>> string_to_md5('हैलो वर्ल्ड') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "kas_Deva",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"अगर a ते b छू पॉजिटिव इंटेगर, तेम ते b दरमियान छू प्वॉड डिजिट ते,येम असेंडिन्ग ऑर्डर मंज़ छू.मिसाल की तोर:generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]