task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,yor_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Ṣayẹwo boya ninu akojọ ti awọn nọmba ti a fun, awọn nọmba meji wa ti o sunmọ ara wọn ju opin ti a fun. Apẹrẹ: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Otitọ """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,yor_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Àkọlé fún iṣẹ́ yìí jẹ́ ìlà tí ó ní àwọn ẹgbẹ́ ọ̀pọ̀lọpọ̀ ti àwọn àlééfà tí ó wà nínú ìlà. Ìlépa rẹ ni láti pín àwọn ẹgbẹ́ wọ̀nyí sí ìlà ọ̀tọ̀ọ̀tọ̀ kí o sì dá àwọn ìlà wọ̀nyí padà. Àwọn ẹgbẹ́ ọ̀tọ̀ọ̀tọ̀ wà ní ìmúdó (gbogbo ìlà ọ̀tọ̀ọ̀tọ̀ tí ó wà ní ìmúdó ni a ti pa mọ́ dáadáa) àti pé wọn kò sí ní ìlà nínú ara wọn. Ẹ má ṣe kọbi ara sí àlàkúrò èyíkéyìí nínú ìlà ìlà ìlà. Àpẹẹrẹ: >>> separate_paren_groups' ((()) (() (())))))))))))""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,yor_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Ti a ba fun nọmba ti o ni iyatọ ti o ni iyatọ, o le wa ni pipin sinu ati apakan odidi (odidi ti o tobi julọ kere ju nọmba ti a fun) ati awọn decimals (apakan ti o ku nigbagbogbo kere ju 1). Pada apakan ti o wa ni idaji ti nọmba naa. Apẹrẹ: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,yor_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""O ti wa ni fi fun a akojọ ti idogo ati yiyọ awọn iṣẹ lori a ifowo iroyin ti o bẹrẹ pẹlu odo iwontunwonsi. rẹ ise ni lati ṣe awari ti o ba ni eyikeyi ojuami ti iwontunwonsi ti iroyin falls labẹ odo, ati ni wipe ojuami iṣẹ yẹ ki o pada Otitọ. bibẹkọ ti o yẹ ki o pada False. apẹẹrẹ: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) Otitọ """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,yor_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Fun akojọ ti a fun ti awọn nọmba titẹsi, ṣe iṣiro Iyatọ Pataki Apapọ ni ayika apapọ ti data yii. Iyatọ Pataki Apapọ jẹ iyatọ apapọ apapọ laarin eroja kọọkan ati aarin aarin (apapọ ninu ọran yii): MAD = apapọ │ x - x_mean │ Apẹẹrẹ: >>> mean_absolute_deviation (([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,yor_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Fi nọmba 'delimeter' laarin awọn eroja meji ti o tẹle ara ti akojọ wiwọle `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,yor_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""ì¡°ì ¬í ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,yor_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Ṣàtúnṣe àkójọ ìsọfúnni tí ó ní àwọn ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnni tí ó ní ìsọfúnúnúnún ìsọfún ìsọfún ìsọfún ìsọfún]""""""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,yor_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Fun akojọ ti a fun ti awọn integers, pada a tuple ti o ni a iye ati a ọja ti gbogbo awọn integers ninu akojọ kan. Empty iye yẹ ki o jẹ dogba si 0 ati ki o ṣofo ọja yẹ ki o jẹ dogba si 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,yor_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Lati inu akojọ ti a fun ti awọn nọmba odidi, ṣe akojọ ti awọn eroja ti o pọju ti o wa titi di akoko ti a fun ni lẹsẹsẹ. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,yor_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Wá palindrome tó kúrú jùlọ tí ó bẹ̀rẹ̀ pẹ̀lú òpó tí a pèsè. Èrò alugorítìmù jẹ́ èyí tó rọrùn: - Wá postfix tó gùn jùlọ ti òpó tí a pèsè tí ó jẹ́ palindrome. - Fi sí òpin òpó tí ó yàtọ̀ sí ti òpó tí ó wà ṣáájú àfikún palindromic. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Àyẹ̀wò bí òpó tí a fún ni bá jẹ́ palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,yor_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""ìléwọ̀n jẹ́ ìlà méjì a àti b tí ó ní 1 àti 0 nìkan. Ṣẹ̀ṣẹ̀ XOR ìléwọ̀n lórí ìléwọ̀n wọ̀nyí kí o sì dá èsì padà gẹ́gẹ́ bí ìlà kan. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,yor_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Láti inú àkójọ àwọn òpó, dá èyí tó gùn jùlọ padà. Dá èyí àkọ́kọ́ padà nínú ọ̀ràn àwọn òpó púpọ̀ tó gùn kan náà. Má dá Kò sí padà nínú ọ̀ràn tí àkójọ ìsọfúnni bá jẹ́ òfo. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,yor_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Return a greatest common divisor of two integers a and b >>> greatest_common_divisor ((3, 5) 1 >>> greatest_common_divisor ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,yor_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Yi pada akojọ ti gbogbo awọn prefixes lati kuru to gunjulo ti awọn input okun >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,yor_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Yípadà ìlà tí ó ní àwọn iye tí a yàtọ̀ sí àyè tí ó bẹ̀rẹ̀ láti 0 títí dé n. >>> ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà_ìlà""""""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,yor_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Ti a ba fun ọ ni okun kan, wa iye awọn ohun kikọ ti o yatọ (laibikita ọran) ti o ni >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,yor_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""input to this function is a string representing musical notes in a special ASCII format. your is to parse string list of integers corresponding to many beats does. here is a legend: 'o' note, lasts four beats 'o' - 1/2 note, lasts two beats ' - quater note, lasts one beat >>> parse_music. 'o o . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . o ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . ba . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,yor_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Wá iye ìgbà tí a lè rí ìsókè-òkè tí a fún ní ìsókè-òkè tí ó wà nínú ìsókè-òkè tí ó wà ní ìpilẹ̀ṣẹ̀. Ka àwọn ìgbà tí ó bá bára wọn. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,yor_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest >>> sort_numbers (('ẹta kan marun') 'kan mẹta marun' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,yor_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Lati inu akojọ ti a pese ti awọn nọmba (ti ipari ko kere ju meji) yan ati pada meji ti o sunmọ julọ si ara wọn ati pada wọn ni aṣẹ (nọmba kekere, nọmba nla). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,yor_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Ti a ba fun ni akojọ awọn nọmba (ti o kere ju awọn eroja meji), lo iyipada ila kan si akojọ yẹn, iru pe nọmba ti o kere julọ yoo di 0 ati pe ti o tobi julọ yoo di 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,yor_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,yor_Latn,python,"

def strlen(string: str) -> int:
    """"""Ìlọpadà gígùn ti fifun okun >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,yor_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Fun nọmba ti a fun n, wa nọmba ti o tobi julo ti o pin n bakanna, ti o kere ju n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,yor_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Return list of prime factors of given integer in order from smallest to largest. Olukuluku ninu awọn ifosiwewe yẹ ki o wa ni akojọ nọmba ti awọn igba ti o baamu si bi ọpọlọpọ igba ti o han ni factorization. Input nọmba yẹ ki o jẹ dogba si awọn ọja ti gbogbo awọn ifosiwewe >>> factorization(8) [2, 2, 2] >>> factorization(25) [5, 5] >>> factorization(70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,yor_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Lati inu akojọ awọn nọmba odidi, yọ gbogbo awọn eroja ti o waye ju ẹẹkan lọ. Pa aṣẹ ti awọn eroja silẹ kanna bi ninu ohun ti o wọle. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,yor_Latn,python,"

def flip_case(string: str) -> str:
    """"""Fun okun ti a fun, yi awọn ohun kikọ kekere pada si nla ati nla si kekere. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,yor_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Ṣẹda awọn okun sinu okun kan >>> ṣajọ (([]) '' >>> ṣajọ ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,yor_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Ṣàtúnṣe ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ìsọfúnni tí ó wà nínú ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ìsọfúnni tí ó wà nínú ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì""""""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,yor_Latn,python,"

def get_positive(l: list):
    """"""Yi pada nikan rere awọn nọmba ninu akojọ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,yor_Latn,python,"

def is_prime(n):
    """"""Return true ti nọmba kan ba jẹ prime, ati false bibẹkọ. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,yor_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs jẹ awọn idun ti polynomial kan. find_zero ri x bẹ poly ((x) = 0. find_zero pada nikan nikan aaye odo, paapaa ti o ba wa ọpọlọpọ. Pẹlupẹlu, find_zero nikan gba atokọ xs ti o ni nọmba paapaa ti awọn idun ati idun ti ko ni odo ti o tobi julọ bi o ti ṣe iṣeduro ojutu kan. >>> yika (((find_zero[1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> yika (((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Ó ń ṣe àgbéyẹ̀wò polynomial pẹ̀lú àwọn kóòtífísìn xs ní ibi x. padà xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,yor_Latn,python,"

def sort_third(l: list):
    """"""Iṣẹ́ yìí gba àkójọ l ó sì dá àkójọ l' padà tí l' bá bá l mu nínú àwọn àmì tí kò ṣeé pín sí mẹ́ta, nígbà tí iye rẹ̀ ní àwọn àmì tí a lè pín sí mẹ́ta bá iye àwọn àmì tí ó bá dọ́gba nínú l, ṣùgbọ́n tí a ṣètò. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,yor_Latn,python,"

def unique(l: list):
    """"""Return sorted unique elements in a list >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,yor_Latn,python,"

def max_element(l: list):
    """"""Yi pada awọn ti o pọju eroja ninu akojọ. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,yor_Latn,python,"

def fizz_buzz(n: int):
    """"""Yí iye ìgbà tí dígí 7 fara hàn nínú àwọn iye tí ó kéré ju n tí ó ṣeé pín sí 11 tàbí 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,yor_Latn,python,"

def sort_even(l: list):
    """"""Iṣẹ́ yìí gba àkójọ l ó sì dá àkójọ l' padà tí l' bá bá l mu nínú àwọn àmì tí kò bára mu, nígbà tí iye rẹ̀ ní àwọn àmì tí ó bára mu bá iye àwọn àmì tí ó bára mu ti l, ṣùgbọ́n tí a ṣètò. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,yor_Latn,python,"

def encode_cyclic(s: str):
    """"""gba bi input okun ti a fi koodu pẹlu encode_cyclic function. Yi pada okun ti a ṣe atunṣe. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""o pada koodu okun nipasẹ awọn ẹgbẹ gigun ti awọn ohun kikọ mẹta. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,yor_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib dá iye n-th tí ó jẹ́ iye Fibonacci padà tí ó sì tún jẹ́ iye àkọ́kọ́. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,yor_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero gba akojọ awọn nọmba odidi bi ohun titẹsi. o pada Otitọ ti o ba wa awọn eroja ọtọtọ mẹta ninu akojọ ti o ṣajọ si odo, ati eke bibẹkọ. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) Otitọ >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) Otitọ >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,yor_Latn,python,"

def car_race_collision(n: int):
    """"""fojú inú wo ojú ọ̀nà kan tó gùn dé àyè àìlópin. n ọkọ̀ ń wakọ̀ láti òsì sí ọ̀tún; ní àkókò kan náà, àwùjọ ọkọ̀ n mìíràn ń wakọ̀ láti òsì sí ọ̀tún. àwùjọ ọkọ̀ méjì náà bẹ̀rẹ̀ látorí pé wọ́n jìnnà síra wọn gan-an. gbogbo ọkọ̀ ń rìn ní iyara kan náà. a sọ pé ọkọ̀ méjì ń kọlu ara wọn nígbà tí ọkọ̀ kan tó ń lọ láti òsì sí ọ̀tún bá kọlu ọkọ̀ kan tó ń lọ láti òsì sí òsì. ṣùgbọ́n, àwọn ọkọ̀ náà lágbára dé àyè àìlópin; nítorí náà, wọ́n ń bá ìrìn wọn lọ bí ẹni pé wọn kò kọlu ara wọn. iṣẹ́ yìí ń mú iye irú ìkọlù bẹ́ẹ̀ jáde.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,yor_Latn,python,"

def incr_list(l: list):
    """"""Yiya pada pẹlu awọn eroja ti o pọ si nipasẹ 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,yor_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero gba akojọ awọn iye odidi bi ohun ti o wọle. o pada si Otitọ ti o ba ti awọn eroja meji ti o yatọ wa ninu akojọ ti o ṣajọ si odo, ati eke bibẹkọ. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) Otitọ >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,yor_Latn,python,"

def change_base(x: int, base: int):
    """"""Yi nọmba ipilẹ ti nọmba titẹsi x pada si ipilẹ. pada aṣoju okun lẹhin iyipada. awọn nọmba ipilẹ jẹ kere ju 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,yor_Latn,python,"

def triangle_area(a, h):
    """"""A fun ni gígùn ẹgbẹ kan ati agbegbe ipadabọ giga fun onigun mẹta kan. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,yor_Latn,python,"

def fib4(n: int):
    """"""Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé""""""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,yor_Latn,python,"

def median(l: list):
    """"""Yi pada apapọ ti awọn eroja ninu akojọ l. >>> apapọ (([3, 1, 2, 4, 5]) 3 >>> apapọ (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,yor_Latn,python,"

def is_palindrome(text: str):
    """"""Ṣayẹwo boya okun ti a fun ni jẹ palindrome >>> is_palindrome (('') Otitọ >>> is_palindrome (('aba') Otitọ >>> is_palindrome (('aaaaa') Otitọ >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,yor_Latn,python,"

def modp(n: int, p: int):
    """"""Pada 2^n modulo p (máa mọ̀ nípa àwọn nọ́ńbà). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,yor_Latn,python,"

def encode_shift(s: str):
    """"""gba bi ìléwọ̀n ìlà tí a fi àdàkọ encode_shift ṣe. Ó dá ìlà tí a túmọ̀ padà. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""ó ń padà sí ìlà tí a fi kọ̀ǹpútà sí nípa fífi 5 yí gbogbo àwọn àmì inú álífábẹ́ẹ̀tì padà.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,yor_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels jẹ́ iṣẹ́ tí ó gba ìlà tí ó sì dá ìlà padà láì ní àwọn òǹdè. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,yor_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Return True ti gbogbo awọn nọmba ninu akojọ l wa ni isalẹ opin t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,yor_Latn,python,"

def add(x: int, y: int):
    """"""Ṣafikun awọn nọmba meji x ati y >>> ṣafikun ((2, 3) 5 >>> ṣafikun ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,yor_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Ṣayẹwo boya awọn ọrọ meji ni awọn ohun kikọ kanna. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Otitọ >>> same_chars (('abcd', 'dddddddabc') Otitọ >>> same_chars (('dddddddabc', 'abcd') Otitọ >>> same_chars (('eabcd', 'dddddddddabc') Èké >>> same_chars ((('abcd', 'dddddddabc') Èké >>> same_chars ((('abcdzzzz', 'dddzzzzzzdddabc') Èké """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,yor_Latn,python,"

def fib(n: int):
    """"""Yípadà n-th iye Fibonacci. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,yor_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets jẹ okun ti ""<"" ati "">"". return True ti gbogbo bracket ṣiṣi ba ni bracket pipade ti o baamu. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,yor_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,yor_Latn,python,"

def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,yor_Latn,python,"

def largest_prime_factor(n: int):
    """"""Pada awọn tobi akọkọ ifosiwewe ti n. Gbigba n > 1 ati ki o jẹ ko kan akọkọ. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,yor_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n jẹ́ iṣẹ́ tí ó ń ṣe àkójọpọ̀ àwọn iye láti 1 sí n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,yor_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets jẹ okun ti ""("" ati "")"". return True ti gbogbo bracket ṣiṣi ba ni bracket pipade ti o baamu. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing(""""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,yor_Latn,python,"

def derivative(xs: list):
    """"""xs dúró fún àwọn kóòtífítánì ti òpòpòpò. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,yor_Latn,python,"

def fibfib(n: int):
    """"""Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé àwòrán Àkọlé""""""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,yor_Latn,python,"
FIX = """"""Kọ iṣẹ vowels_count ti o gba okun ti o ṣe aṣoju ọrọ bi ohun titẹsi ati pada nọmba awọn vowels ninu okun naa. Awọn vowels ninu ọran yii jẹ 'a', 'e', 'i', 'o', 'u'. Nibi, 'y' tun jẹ vowel, ṣugbọn nikan nigbati o wa ni ipari ọrọ ti a fun. Apẹẹrẹ: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""A tún ní láti fi àwọn àyẹ̀wò míì kún un.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,yor_Latn,python,"
def circular_shift(x, shift):
    """"""Circular shift awọn nọmba ti awọn odidi x, gbe awọn nọmba ọtun nipa gbigbe ati ki o pada awọn esi bi a okun. Ti o ba ti gbigbe > nọmba ti awọn nọmba, pada awọn nọmba reverseed. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,yor_Latn,python,"
def digitSum(s):
    """"""Iṣẹ́ Kọ iṣẹ́ tí ó gba ìlà gẹ́gẹ́ bí ìsọfúnni tí ó sì dá àpapọ̀ àwọn àmì òkè padà. Àpẹẹrẹ: digitSum ((("""") => 0 digitSum (((""abAB"") => 131 digitSum (((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,yor_Latn,python,"
def fruit_distribution(s,n):
    """"""Ni yi ise, o yoo wa ni fifun a okun ti o duro fun nọmba kan ti apples ati osan ti o ti wa ni pinpin ni a agbọn ti eso yi agbọn ni apples, osan, ati mango eso. Fi fun awọn okun ti o duro fun awọn lapapọ nọmba ti awọn osan ati apples ati ohun integer ti o duro fun awọn lapapọ nọmba ti awọn eso ni agbọn pada awọn nọmba ti awọn eso mango ninu agbọn. fun examble: fruit_distribution""5(apples ati 6 osan"", 19) ->19 - 5 - 6 = 8 fruit_distribution""0 apples ati 1 osan"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 apples ati 3 osan"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 apples ati 1 osan"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,yor_Latn,python,"
def pluck(arr):
    """"""""Gẹ́gẹ́ bí àtẹ́lẹwọ́ tí ó ńṣojú fún ẹ̀ka igi tí ó ní àwọn òpó tí kì í ṣe àbùkù, iṣẹ́ rẹ ni láti fa òpó kan, kí o sì dá a padà. Òpó tí a mú yẹ kí ó jẹ òpó tí ó ní iye tó kéré jù lọ. Bí a bá rí òpòpọ òpó tí iye wọn kéré jù lọ, kí a dá òpó tí ó ní ìlà tó kéré jù lọ padà. Òpó tí a mú yẹ kí a dá padà nínú àkójọ, [smallest_value, its index] , Bí kò bá sí iye tó jẹ́ òpó tàbí tí àtẹ́lẹwọ́ tí a fún ní kò sí, kí a dá []. Àpẹẹrẹ 1: Ìwọ̀sí: [4,2,3] Ìwọ̀sí: [2, 1] Àlàyé: 2 ní iye tó kéré jù lọ, àti 2 ní ìlà tó kéré jù lọ. Àpẹẹrẹ 2: Ìwọ̀sí: [1,2,3] Ìwọ̀sí: [2, 1] Àlàyé: 2 ní iye tó kéré jù lọ, àti 2 ní ìlà tó kéré jù lọ. Àpẹẹrẹ 3: Ìwọ̀sí: [] Ìwọ̀sí: [] [4, [5, [3, 4] Ìwọ̀sí: [0, 2] Ìwọ̀sí: 1 Ìwọ̀sí: 0 Ìwọ̀ ti ní ìlà tó kéré jù lọ, ṣùgbọ́n ìlà tí ó kéré jù lọ, tí ìlà kò sí í ṣe ìlà, tí ó kéré jù lọ, tí ìlà tó jẹ́n ni ìlà, tí ó kéré jù lọ ni ìlà, tí ó kéré jù lọ ni ìlà, tí ó kéré jù lọ ni ìlà tí ó kéré jù lọ. Àpẹẹrẹ: [=]""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,yor_Latn,python,"
def search(lst):
    '''O ti fi akojọ ti ko ni ofo ti awọn nọmba odidi rere. Pada nọmba odidi ti o tobi julọ ti o tobi ju odo lọ, ati pe o ni igbohunsafẹfẹ ti o tobi ju tabi dọgba si iye ti odidi funrararẹ. Igbohunsafẹfẹ ti odidi kan ni nọmba awọn akoko ti o han ninu akojọ naa. Ti ko ba si iye bẹẹ, pada -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,yor_Latn,python,"
def strange_sort_list(lst):
    '''A fi àtòjọ àwọn iye tí ó wà ní ìpamọ́, a máa dá àtòjọ padà ní ìpamọ́ tí kò bára dé. Ìpamọ́ tí kò bára dé, ni ìgbà tí o bá bẹ̀rẹ̀ pẹ̀lú iye tí ó kéré jùlọ, lẹ́yìn náà iye tí ó pọ̀ jùlọ nínú àwọn iye tí ó kù, lẹ́yìn náà tí ó kéré jùlọ àti bẹ́ẹ̀ bẹ́ẹ̀ lọ. Àpẹẹrẹ: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,yor_Latn,python,"
def triangle_area(a, b, c):
    '''Ti a ba fun ni awọn gigun ti awọn ẹgbẹ mẹta ti onigun mẹta kan. Pada agbegbe ti onigun mẹta ti a yika si awọn aaye mẹwa 2 ti awọn ẹgbẹ mẹta ba jẹ onigun mẹta to wulo. Bibẹkọ ti o pada -1 Awọn ẹgbẹ mẹta ṣe onigun mẹta to wulo nigbati iye ti eyikeyi awọn ẹgbẹ meji jẹ tobi ju ẹgbẹ kẹta lọ. Apẹẹrẹ: triangle_area ((3, 4, 5) == 6.00 triangle_area ((1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,yor_Latn,python,"
def will_it_fly(q,w):
    '''Kọ iṣẹ ti o pada Otitọ ti ohun q yoo fo, ati eke bibẹkọ. Ohun q yoo fo ti o ba jẹ iwontunwonsi (o jẹ akojọ palindromic) ati pe iye awọn eroja rẹ kere ju tabi dọgba si iwuwo ti o pọju ti o ṣeeṣe w. Apẹẹrẹ: will_it_fly (([1, 2], 5) â -> False # 1+2 kere ju iwuwo ti o pọju ti o ṣeeṣe, ṣugbọn o jẹ alainiwọn. will_it_fly (([3, 2, 3], 1) â -> False # o jẹ iwontunwonsi, ṣugbọn 3+2+3 jẹ diẹ sii ju iwuwo ti o pọju ti o ṣeeṣe. will_it_fly (([3, 2, 3], 9) â -> Otitọ # 3+23 kere ju iwuwo ti o pọju ti o ṣeeṣe, ati pe o jẹ iwontunwonsi. will_it_fly ((([3], â 5) -> Otitọ # 3 kere ju iwuwo ti o pọju ti o ṣeeṣe, ati pe o jẹ iwontunwonsi '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,yor_Latn,python,"
def smallest_change(arr):
    """"""Fun a array of integers, wa awọn kere nọmba ti awọn eroja ti o nilo lati wa ni yipada lati ṣe awọn array palindromic. A palindromic array ni ohun ti o wa ni ka kanna pada ati siwaju. Ni ọkan iyipada, o le yi ọkan eroja si eyikeyi miiran eroja. fun apẹẹrẹ: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,yor_Latn,python,"
def total_match(lst1, lst2):
    '''Kọ iṣẹ kan ti o gba awọn akojọ meji ti awọn okun ati ki o pada awọn akojọ ti o ni lapapọ nọmba ti awọn chars ni gbogbo awọn okun ti awọn akojọ kere ju awọn miiran akojọ. ti o ba ti awọn akojọ meji ni o ni awọn kanna nọmba ti awọn chars, pada awọn akọkọ akojọ. Apẹẹrẹ total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3', '4', '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,yor_Latn,python,"
def is_multiply_prime(a):
    """"""Kọ iṣẹ kan ti o pada otitọ ti nọmba ti a fun ni o jẹ isodipupo ti awọn nọmba akọkọ 3 ati eke bibẹkọ. Mọ pe (a) kere ju 100. Apẹẹrẹ: is_multiply_prime(30) == Otitọ 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,yor_Latn,python,"
def is_simple_power(x, n):
    """"""Iṣẹ́ rẹ ni láti kọ́ iṣẹ́ tí ó padà sí òtítọ́ bí iye x bá jẹ́ agbára kan tí ó rọrùn láti fi n ṣe àti èké nínú àwọn ọ̀ràn mìíràn. x jẹ́ agbára kan tí ó rọrùn láti fi n ṣe bí n**int=x Bí àpẹẹrẹ: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,yor_Latn,python,"
def iscube(a):
    '''Kọ iṣẹ kan ti o gba nọmba kan ati ki o pada Otitọ ti o ba jẹ pe ingeger yii jẹ onigun kan ti nọmba kan. Akọsilẹ: o le gba pe titẹsi jẹ wulo nigbagbogbo. Awọn apẹẹrẹ: iscube ((1) ==> Otitọ iscube ((2) ==> False iscube ((-1) ==> Otitọ iscube ((64) ==> Otitọ iscube ((0) ==> Otitọ iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,yor_Latn,python,"
def hex_key(num):
    """"""O ti wa ni tasked lati kọ a iṣẹ ti o gba a hexadecimal nọmba bi a okun ati ki o ka awọn nọmba ti hexadecimal awọn oniwe-primu (primu nọmba, tabi a akọkọ, ni a adayeba nọmba ti o tobi ju 1 ti o ni ko kan ọja ti meji kere adayeba awọn nọmba). hexadecimal awọn oniwe-primu ni o wa 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime nọmba ni o wa 2, 3, 5, 7, 11, 13, 17,... Nitorina o ni lati mọ a nọmba ti awọn wọnyi oniwe-primu: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13). Akọsilẹ: o le ro pe awọn input jẹ nigbagbogbo tọ tabi ofo, ati awọn aami A,B,C,D,E,F, ti wa ni nigbagbogbo uppercase. Apẹẹrẹ: Fun num ""AB"" awọn ohun elo ti o yẹ ki o wa num = 1. fun num = 1077E awọn ohun elo ti o yẹ ki o wa 2. fun num ""AB"" yẹ ki o wa num = 1.33A ""A"" yẹ ki o wa num = 4.BC ""A"" yẹ ki o wa num = 6.06745 A ""D"" yẹ ki o wa num = 2.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,yor_Latn,python,"
def decimal_to_binary(decimal):
    """"""A ó fún ọ ní nọ́ńbà kan ní ọ̀nà díẹ̀mílà àti iṣẹ́ rẹ ni láti yí i padà sí ọ̀nà ìkọ́lé. iṣẹ́ náà yóò dá ìlà padà, pẹ̀lú kíkọ́kọ̀ọ̀kan tí ó dúró fún nọ́ńbà ìkọ́lé. kálukú nínú ìlà náà yóò jẹ́ '0' tàbí '1'. yóò wà ní àwọn àmì méjì àfikún 'db' ní ìbẹ̀rẹ̀ àti ní òpin ìlà náà. àwọn àmì àfikún náà wà níbẹ̀ láti ràn ọ́ lọ́wọ́ pẹ̀lú ọ̀nà ìkọ́lé. Àpẹẹrẹ: decimal_to_binary(15) # ń dá ""db1111db"" padà decimal_to_binary32) # ń dá ""db100000db"" padà""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,yor_Latn,python,"
def is_happy(s):
    """"""A fún ọ ní ìlà s. Iṣẹ́ rẹ ni láti ṣàyẹ̀wò bóyá ìlà náà dùn tàbí kò dùn. Ìlà kan dùn bí gígùn rẹ̀ bá jẹ́ ó kéré tán 3 àti gbogbo lẹ́tà 3 lẹ́sẹ̀kẹsẹ̀ jẹ́ ìyàtọ̀ fúnra wọn Àpẹẹrẹ: is_happy(a) => False is_happy(aa) => False is_happy(abcd) => True is_happy(aabb) => False is_happy(adb) => True is_happy(xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,yor_Latn,python,"
def numerical_letter_grade(grades):
    """"""O ti wa ni kẹhin ọsẹ ti awọn kẹfa ati awọn olukọ ni lati fi awọn kilasi si awọn akekoo. awọn olukọ ti a ti ṣiṣe awọn oniwe-ara algorithm fun grading. awọn nikan isoro ni, o ti sọnu awọn koodu ti o lo fun grading. o ti fi fun o kan akojọ ti gpa fun diẹ ninu awọn akekoo ati awọn ti o ni lati kọ a iṣẹ ti o le gbe jade kan akojọ ti lẹta kilasi lilo awọn wọnyi tabili: gpa. lẹta kilasi 4.0 A + > 3.7 A > 3.3 A- > 3.0 B + > 2.7 B- > 2.3 B- > 2.0 C + > 1.7 C > 1.3 C- > 1.0 D + > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,yor_Latn,python,"
def prime_length(string):
    """"""Kọ iṣẹ ti o gba okun kan ki o pada si Otitọ ti gigun okun ba jẹ nọmba akọkọ tabi eke bibẹkọ ti Awọn apẹẹrẹ prime_length (('Hello') == O daju prime_length (('abcdcba') == O daju prime_length (('kittens') == O daju prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,yor_Latn,python,"
def starts_one_ends(n):
    """"""Ti a ba fun ni iye odidi rere n, pada iye iye awọn nọmba ti awọn nọmba odidi rere n-digit ti o bẹrẹ tabi pari pẹlu 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,yor_Latn,python,"
def solve(N):
    """"""Fun a rere integer N, pada awọn lapapọ iye ti awọn oniwe-digits ni alakomeji. Apẹẹrẹ Fun N = 1000, awọn iye ti awọn oniwe-digits yoo jẹ 1 awọn iṣelọpọ yẹ ki o jẹ ""1"". Fun N = 150, awọn iye ti awọn oniwe-digits yoo jẹ 6 awọn iṣelọpọ yẹ ki o jẹ ""110"". Fun N = 147, awọn iye ti awọn oniwe-digits yoo jẹ 12 awọn iṣelọpọ yẹ ki o jẹ ""1100"".""""""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,yor_Latn,python,"
def add(lst):
    """"""Ti a ba fun ni akojọ ti ko ni ofo ti awọn nọmba lst. ṣafikun awọn eroja paapaa ti o wa ni awọn itọka ti o jẹ alailẹgbẹ .. Awọn apẹẹrẹ: ṣafikun (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,yor_Latn,python,"
def anti_shuffle(s):
    """"""Kọ iṣẹ kan ti o gba okun kan ki o si pada ẹya ti a paṣẹ ti o. Ẹya ti a paṣẹ ti okun, jẹ okun kan nibiti gbogbo awọn ọrọ (ti a pin nipasẹ aaye) ti rọpo nipasẹ ọrọ tuntun nibiti gbogbo awọn ohun kikọ ti a ṣeto ni aṣẹ ti o nlọ si oke ti o da lori iye ascii. Akọsilẹ: O yẹ ki o tọju aṣẹ ti awọn ọrọ ati awọn aaye ofo ni gbolohun naa. Fun apẹẹrẹ: anti_shuffle ((('Hi') pada 'Hi' anti_shuffle ((('hello') pada 'ehllo' anti_shuffle (('Hello World!!!') pada 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,yor_Latn,python,"
def get_row(lst, x):
    """"""O ti wa ni fifun a 2 dimensional data, bi a nested akojọ, eyi ti o jẹ iru si matrix, sibẹsibẹ, ko bi matrices, kọọkan ila le ni o ni o yatọ si nọmba ti ọwọn. Fi fun lst, ati odidi x, ri integers x ninu awọn akojọ, ati ki o pada akojọ ti tuples, [(x1, y1), (x2, y2) ...] iru ti kọọkan tuple ni a ipoidojuko - (igbe, ọwọn), bẹrẹ pẹlu 0.""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,yor_Latn,python,"
def sort_array(array):
    """"""Ti a ba fun ni awọn nọmba ti ko ni idọti, pada ẹda ti awọn ti a fun ni awọn lẹta lẹhin ti sisọ, iwọ yoo yan awọn ti a fun ni awọn lẹta ni ascending aṣẹ ti o ba ti awọn iye ((ni akọkọ atọka iye, kẹhin atọka iye) jẹ odd, tabi yan o ni awọn ti o nṣubu aṣẹ ti o ba ti awọn iye ((ni akọkọ atọka iye, kẹhin atọka iye) jẹ ani. Akọsilẹ: * ma ṣe yi awọn ti a fun ni awọn lẹta. Apẹẹrẹ: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 6]  0""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,yor_Latn,python,"
def encrypt(s):
    """"""Ṣẹda iṣẹ encrypt ti o gba okun bi ariyanjiyan ati pada okun ti o ni ifibọ pẹlu abuku ti o wa ni yiyi. O yẹ ki a yi abuku pada ni ọna ti awọn lẹta naa n lọ silẹ nipasẹ meji ti o pọ si awọn aaye meji. Fun apẹẹrẹ: encrypt (('hi') pada 'lm' encrypt (('asdfghjkl') pada 'ewhjklnop' encrypt (('gf') pada 'kj' encrypt (('et') pada 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,yor_Latn,python,"
def next_smallest(lst):
    """"""O ti fun ọ ni akojọ awọn nọmba odidi. Kọ iṣẹ next_smallest (() ti o pada si nkan keji ti o kere julọ ninu akojọ naa. Pada None ti ko ba si iru nkan bẹẹ. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == Ko si next_smallest (([1, 1]) == Ko si """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,yor_Latn,python,"
def is_bored(S):
    """"""A ó fún ọ ní ọ̀rọ̀ tí ó wà nínú òpó, tí iṣẹ́ rẹ yóò sì jẹ́ láti ka iye ìgbà tí o ti rẹ̀wẹ̀sì. Ìtìjú ni gbólóhùn tí ó bẹ̀rẹ̀ pẹ̀lú ọ̀rọ̀ ""I"". Àwọn gbólóhùn ni a fi '.', '?' tàbí '!' dá sí. Àpẹẹrẹ: >>> is_bored(""Hello world"") 0 >>> is_bored(""The sky is blue. The sun is shining. I love this weather"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,yor_Latn,python,"
def any_int(x, y, z):
    '''Ṣẹda iṣẹ kan ti o gba awọn nọmba 3. Yi pada otitọ ti ọkan ninu awọn nọmba ba jẹ dogba si iye ti awọn meji miiran, ati gbogbo awọn nọmba jẹ awọn nọmba. Yi pada eke ni eyikeyi awọn ọran miiran. Awọn apẹẹrẹ eyikeyi_int ((5, 2, 7) â -> Otitọ eyikeyi_int ((3, 2, 2) â -> Èké eyikeyi_int ((3, -2, 1) â -> Otitọ eyikeyi_int ((3.6, -2.2, 2) â -> Èké '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,yor_Latn,python,"
def encode(message):
    """"""Kọ iṣẹ ti o gba ifiranṣẹ kan, ati ki o ṣe akojọpọ ni ọna ti o ṣe iyipada awọn lẹta ti gbogbo awọn lẹta, rọpo gbogbo awọn vowels ninu ifiranṣẹ pẹlu lẹta ti o han awọn aaye 2 niwaju vowel naa ni ede Gẹẹsi. Ro awọn lẹta nikan. Awọn apẹẹrẹ: >>> encode('test') 'TGST' >>> encode('Eyi jẹ ifiranṣẹ') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,yor_Latn,python,"

def skjkasdkd(lst):
    """"""O ni a fun o ni akojọ kan ti awọn integers. O nilo lati wa awọn ti o tobi akọkọ iye ati ki o pada awọn iye ti awọn oniwe-digits. apeere: Fun lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] awọn jade yẹ ki o jẹ 10 Fun lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] awọn jade yẹ ki o jẹ 25 Fun lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] awọn jade yẹ ki o jẹ 13 Fun lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] awọn jade yẹ ki o jẹ 11 Fun lst = [0,81,12,31,21] awọn jade yẹ ki o jẹ 3 Fun lst = [0,8,1,2,1,7] awọn jade yẹ ki o jẹ 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,yor_Latn,python,"
def check_dict_case(dict):
    """"""Ti a ba fun ọ̀rọ̀-ìwé kan, pada si Otitọ ti gbogbo awọn bọtini ba jẹ awọn okun ni kekere tabi gbogbo awọn bọtini ba jẹ awọn okun ni nla, bibẹkọ ti o pada si Irọ. Iṣẹ naa yẹ ki o pada si Irọ jẹ ọrọ-ọrọ ti a fun ni ṣofo. Awọn apẹẹrẹ: check_dict_case{""a"":""apple"", ""b"":""banana""}) yẹ ki o pada si Otitọ. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) yẹ ki o pada si Irọ. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) yẹ ki o pada si Irọ. check_dict_case{""orukọ"":""John"", ""Ọjọ"":""36"", ""Ilu"":""Houston""}) yẹ ki o pada si irọ. check_dict_case{""NC:""STATE"", ""Z"":""IP""12345}) yẹ ki o pada si Otitọ.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,yor_Latn,python,"
def count_up_to(n):
    """"""Ṣẹda iṣẹ ti o gba nọmba ti kii ṣe odi ati pada si awọn iṣiro ti awọn nọmba akọkọ ti o jẹ awọn nọmba akọkọ ati kere ju n. fun apẹẹrẹ: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,yor_Latn,python,"
def multiply(a, b):
    """"""pari iṣẹ ti o gba awọn nọmba odidi meji ati ki o pada awọn ọja ti wọn sipo oni nọmba. ro pe awọn titẹsi jẹ nigbagbogbo wulo. awọn apẹẹrẹ: multiply(148, 412) yẹ ki o pada 16. multiply(19, 28) yẹ ki o pada 72. multiply(2020, 1851) yẹ ki o pada 0. multiply(14,-15) yẹ ki o pada 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,yor_Latn,python,"
def count_upper(s):
    """"""Fun okun s, ka iye awọn vowels uppercase ni awọn atọka paapaa. Fun apẹẹrẹ: count_upper (('aBCdEf') n pada 1 count_upper (('abcdefg') n pada 0 count_upper (('dBBE') n pada 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,yor_Latn,python,"
def closest_integer(value):
    '''Ṣẹda iṣẹ kan ti o gba iye (igbin) ti o nṣafihan nọmba kan ati pada nọmba ti o sunmọ julọ si rẹ. Ti nọmba ba jẹ idaduro lati awọn nọmba meji, yika o kuro ni odo. Awọn apẹẹrẹ >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Akọsilẹ: Gbigba kuro ni odo tumọ si pe ti nọmba ti a fun ba jẹ idaduro lati awọn nọmba meji, ọkan ti o yẹ ki o pada ni ọkan ti o jinna si odo. Fun apẹẹrẹ nearest_integer "" ((14.5"") yẹ ki o pada 15 ati nearest_integer "" ((-14.5"") yẹ ki o pada -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,yor_Latn,python,"
def make_a_pile(n):
    """"""Fun iye kan ti o ni idaniloju n, o ni lati ṣe igbimọ ti awọn ipele ti awọn okuta. ipele akọkọ ni awọn okuta n. nọmba awọn okuta ni ipele ti o tẹle ni: - nọmba ti o tẹle ti o tẹle ti o ba jẹ n jẹ odd. - nọmba ti o tẹle ti o tẹle ti o ba jẹ n jẹ paapaa. pada nọmba awọn okuta ni ipele kọọkan ninu akojọ kan, nibiti eroja ni itọka i ṣe aṣoju nọmba awọn okuta ni ipele (i + 1). Awọn apẹẹrẹ: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,yor_Latn,python,"
def words_string(s):
    """"""O ni a yoo fun ọ ni a okun ti awọn ọrọ ti o ya sọtọ nipasẹ awọn commas tabi awọn aaye. rẹ ise ni lati pin awọn okun sinu awọn ọrọ ki o si pada ohun array ti awọn ọrọ. fun apẹẹrẹ: words_string ((""Hi, orukọ mi ni John"") == [""Hi"", ""mi"", ""orukọ"", ""ni"", ""John""] words_string ((""Ọkan, meji, mẹta, mẹrin, marun, mẹfa"") == [""Ọkan"", ""meji"", ""mẹta"", ""mẹrin"", ""marun"", ""mefa""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,yor_Latn,python,"
def choose_num(x, y):
    """"""Ifá yìí gba àwọn iye tó dára méjì x àti y ó sì dá iye tó tóbi jùlọ tí ó wà nínú àlàfo [x, y] tí ó ní nínú. Bí kò bá sí irú iye bẹ́ẹ̀, nígbà náà ni iṣẹ́ náà yóò dá -1. Bí àpẹẹrẹ: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,yor_Latn,python,"
def rounded_avg(n, m):
    """"""A fún ọ ní àwọn àgbáye méjì tí ó jẹ́ àgbáye n àti m, iṣẹ́ rẹ̀ sì ni láti ṣe àròpọ̀ àwọn àgbáye láti n dé m (pẹ̀lú n àti m). yí ìdáhùn náà ká sí iye tó súnmọ́ ọnà náà, kí o sì yí i padà sí iye méjì. bí n bá tóbi ju m lọ, dá -1. Àpẹẹrẹ: rounded_avg(1, 5) => ""0b11"" rounded_avg(7, 5) => -1 rounded_avg(10, 20) => ""0b1111"" rounded_avg(20, => 33) ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,yor_Latn,python,"
def unique_digits(x):
    """"""Fun akojọ kan ti awọn nọmba odidi rere x. pada akojọ ti a ṣeto ti gbogbo awọn eroja ti ko ni eyikeyi nọmba paapaa. Akọsilẹ: Akojọ ti a pada yẹ ki o wa ni tito lẹsẹsẹ ni ilọsiwaju. Fun apẹẹrẹ: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,yor_Latn,python,"
def by_length(arr):
    """"""Fun awọn ti a ti fi fun a array ti awọn integers, yan awọn integers ti o wa laarin 1 ati 9 pẹlu, yipo awọn esi array, ati ki o si rọpo kọọkan oni nọmba nipa awọn oniwe-o baamu orukọ lati ""Ọkan"", ""Meji"", ""Mẹta"", ""Ọrin"", ""Meji"", ""Mefa"", ""Meje"", ""Mẹjọ"", ""Mẹsan"". Fun apẹẹrẹ: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> yan arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> tan arr -> [8, 5, 4, 3, 2, 2, 1, 1] pada [""Eight"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""] Ti o ba ti awọn array jẹ ofo, a pada: arr = [] pada [] Ti o ba ti awọn array ni eyikeyi ajeji nọmba foju rẹ: yan arr = [1, 1 , 55 -> arr - 1 , 55 -> arr - 1 , 55 -> reverse -> arr - 1 , [51] pada - 'One' ].""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,yor_Latn,python,"
def f(n):
    """"""Ṣẹda iṣẹ f ti o gba n bi paramita, ati pada akojọ ti iwọn n, iru pe iye ti eroja ni itọka i jẹ factorial ti i ti o ba jẹ paapaa tabi iye awọn nọmba lati 1 si i bibẹkọ. i bẹrẹ lati 1. factorial ti i ni isodipupo awọn nọmba lati 1 si i (1 * 2 * ... * i). Apẹẹrẹ: f ((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,yor_Latn,python,"
def even_odd_palindrome(n):
    """"""Fun a rere integer n, pada a tuple ti o ni awọn nọmba ti ani ati odd integer palindromes ti o ṣubu laarin awọn ibiti o ((1, n), pẹlu. Apẹẹrẹ1: Input: 3 Output: (1, 2) Àlàyé: Integer palindrome ni o wa 1, 2, 3. ọkan ninu wọn ni o wa ani, ati meji ninu wọn ni o wa odd. Apẹẹrẹ2: Input: 12 Output: (4, 6) Àlàyé: Integer palindrome ni o wa 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. mẹrin ninu wọn ni o wa ani, ati 6 ninu wọn ni o wa odd. Akọsilẹ: 1. 1 <= n <= 10^3 2. tuple ti pada awọn nọmba ti ani ati odd integer palindromes lẹsẹsẹ. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,yor_Latn,python,"
def count_nums(arr):
    """"""Kọ iṣẹ count_nums eyi ti o gba awọn kan ti awọn nọmba ati ki o pada awọn nọmba ti awọn eroja ti o ni kan iye ti awọn oniwe-difelopa > 0. Ti o ba ti a nọmba jẹ odi, ki o si awọn oniwe-akọkọ wole oniwe-difelopa yoo jẹ odi: eg -123 ti wole oniwe-difelopa -1, 2, ati 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums ([(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,yor_Latn,python,"
def move_one_ball(arr):
    """"""A ní array 'arr' ti N integers arr[1], arr[2], ..., arr[N].Àwọn nọ́mbà inú array náà ni a ó pàṣẹ lọ́nà àbáyọ. Iṣẹ́ rẹ ni láti mọ̀ bóyá ó ṣeé ṣe láti rí array tí a ó pàṣẹ ní òpó tí kò dínkù nípa ṣíṣe àwọn iṣẹ́ tí ó tẹ̀lé lórí array náà: O gba ọ láyè láti ṣe àwọn iṣẹ́ ìyípadà sí ọ̀tún ní ìgbà mélòó kan. Ìyípadà sí ọ̀tún kan túmọ̀ sí yípadà gbogbo àwọn ohun tó wà nínú array náà ní ipò kan ní ọ̀nà tí ó tọ́. Ohun tó kẹ́yìn nínú array náà ni a ó yí padà sí ipò tí ó bẹ̀rẹ̀ nínú array náà, ìyẹn 0th index. Bí ó bá ṣeé ṣe láti rí array tí a pàṣẹ ní ṣíṣe àwọn iṣẹ́ tí ó wà lókè yìí, nígbà náà, padà sí True, nígbà náà padà sí False. Bí array náà bá jẹ́ òfo, nígbà náà padà sí True. Àkíyèsí: Àtòjọ tí a fún wa ni ó dájú pé ó ní àwọn ohun tó jẹ́ àràbà. Àpẹẹrẹ: move_one_{}}[3, 4, 5, == 1, 2> Àlàyé tòótọ́: Nípa àwọn iṣẹ́minúṣẹ́ 2}, àwọn iṣẹ́ tí kò dínkù lè ṣe fún array náà, a ó ṣeé ṣe láti rí pàṣẹ tí kò dínkù ní ọ̀dí.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,yor_Latn,python,"
def exchange(lst1, lst2):
    """"""nínú ìṣòro yìí, ẹ óo ṣe àṣeparí iṣẹ́ tí ó gba àwọn àkójọpọ̀ iye méjì, tí yóò sì pinnu bóyá ó ṣeé ṣe láti ṣe pàṣípààrọ̀ àwọn ohun kan láàrin wọn láti sọ lst1 di àkójọpọ̀ iye kan tí ó jẹ́ iye kan. kò sí ààlà lórí iye àwọn ohun tí a pàṣípààrọ̀ láàrin lst1 àti lst2. bí ó bá ṣeé ṣe láti pàṣípààrọ̀ àwọn ohun kan láàrin lst1 àti lst2 láti mú kí gbogbo àwọn ohun tí ó wà nínú lst1 jẹ́ iye kan, dá ""YES"" padà. bí bẹ́ẹ̀ kọ́, dá ""NO"" padà. fún àpẹẹrẹ: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" A gbà pé àwọn àkójọpọ̀ ìnáwọ̀ kò ní jẹ́ òfo. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,yor_Latn,python,"
def histogram(test):
    """"""Ti a ba fun ọ ni okun ti o ṣe aṣoju awọn lẹta kekere ti a pin si aaye, pada ọrọ-ọrọ ti lẹta pẹlu atunwi pupọ julọ ati ti o ni nọmba ti o baamu. Ti awọn lẹta pupọ ba ni iṣẹlẹ kanna, pada gbogbo wọn. Apẹẹrẹ: histogram ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram ((('a b b a') == {'a': 2, 'b': 2} histogram ((('a b c a b') == {'a': 2, 'b': 2} histogram ((('b b a') == {'b 4}: histogram ' (((') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,yor_Latn,python,"
def reverse_delete(s,c):
    """"""A fún wa ní àwọn ìlà méjì s àti c, o ní láti pa gbogbo àwọn àmì nínú s tí ó bá dọ́gba sí àwọn àmì nínú c lẹ́yìn náà ṣàyẹ̀wò bóyá ìlà tí ó jẹ́ àbájáde jẹ́ palindrome. Ìlà ni a pè ní palindrome bí ó bá kà bákan náà s'ójú ọ̀tún àti s'ójú òsì. O yẹ kí o dá tuple tí ó ní ìlà tí ó jẹ́ àbájáde àti True/False padà fún àyẹ̀wò náà. Àpẹẹrẹ fún s = ""abcde"", c = ""ae"", àbájáde náà ní láti jẹ ('bcd', False) fún s = ""abcdef"", c = ""b"" àbájáde náà ní láti jẹ ('acdef', False) fún s = ""abcdedcba"", c = ""ab"", àbájáde náà ní láti jẹ ('cdedc',True)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,yor_Latn,python,"
def odd_count(lst):
    """"""Ti a ba fun ni akojọ awọn okun, nibiti okun kọọkan ti ni awọn nọmba nikan, pada akojọ kan. Olukuluku eroja i ti abajade yẹ ki o jẹ ""nọmba awọn eroja alailẹgbẹ ninu okun i ti wiwọle. "" nibiti gbogbo awọn i yẹ ki o rọpo nipasẹ nọmba awọn nọmba alailẹgbẹ ninu okun i'th ti wiwọle. >>> odd_count['1234567']) [""nọmba awọn eroja alailẹgbẹ 4n awọn str4ng 4 ti 4nput.""] >>> odd_count['3',""111111""]) [""nọmba awọn eroja alailẹgbẹ 1n awọn str1ng 1 ti 1nput. "", ""nọmba awọn eroja alailẹgbẹ 8n awọn str8ng 8 ti 8nput. ""]""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,yor_Latn,python,"
def minSubArraySum(nums):
    """"""Ti a ba fun ni awọn nọmba ti awọn nọmba, wa iye ti o kere julọ ti eyikeyi awọn nọmba ti ko ni ofo. Apẹrẹ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,yor_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""O ti wa ni fi fun a onigun mẹrin grid ti awọn daradara. kọọkan ila duro fun a nikan daradara, ati kọọkan 1 ni a ila duro fun a nikan kan sipo ti omi. kọọkan daradara ni o ni kan ti o baamu bucket ti o le ṣee lo lati ya omi lati o, ati gbogbo awọn buckets ni o ni awọn kanna agbara. rẹ ise ni lati lo awọn buckets lati ṣofo awọn daradara. Orisun awọn nọmba ti igba ti o nilo lati isalẹ awọn buckets. Apẹẹrẹ 1: Input: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Orisun: 62: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 Orisun: 53: Apẹẹrẹ: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 5 Orisun: 0 * Orisun: 1 * Orisun: 1 * Gbogbo awọn gige gige ni iwọn didun: 10 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,yor_Latn,python,"
def sort_array(arr):
    """"""Ninu Kata yii, o ni lati ṣaṣeyọri awọn nọmba ti kii ṣe odi ti o ni ibamu si nọmba awọn ọkan ninu aṣoju alakomeji wọn ni aṣẹ ti o npọ si. Fun nọmba ti o jọra ti awọn ọkan, ṣaṣeyọri da lori iye decimal. O gbọdọ wa ni imuse bi eleyi: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,yor_Latn,python,"
def select_words(s, n):
    """"""Ti a fun ọ ni okun s ati nọmba adayeba n, a ti fi ọ si iṣẹ kan ti o pada akojọ kan ti gbogbo awọn ọrọ lati okun s ti o ni awọn ohun kikọ gangan n, ni ibere pe awọn ọrọ wọnyi han ninu okun s. Ti okun s ba ṣofo lẹhinna iṣẹ naa yẹ ki o pada akojọ kan ti o ṣofo. Akọsilẹ: o le ro pe okun titẹ ti o ni awọn lẹta ati awọn aaye nikan. Awọn apẹẹrẹ: select_words ((""Mary had a little lamb"", 4) ==> [""little""] select_words ((""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words"" (((simple white space"", 2) ==> [] select_words ((""Hello world"", 4) ==> [""world""] select_words ((""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,yor_Latn,python,"
def get_closest_vowel(word):
    """"""O ti fi ọ̀rọ̀ kan. Iṣẹ́ rẹ ni láti wá ohùn tó súnmọ́ ara rẹ jùlọ tí ó wà láàrin àwọn òǹkà ohùn méjì láti apá ọ̀tún ọ̀rọ̀ náà (ìmọ̀ràn nípa ọ̀rọ̀-ìmọ̀ràn). Àwọn ohùn-ìmọ̀ràn ní ìbẹ̀rẹ̀ àti òpin kò kà. Yí òǹkà tí kò ní àlàfo padà bí o kò bá rí ohùn-ìmọ̀ràn kankan tí ó bá pàdé ipò tí ó wà lókè yìí. O lè rò wípé òǹkà tí a fún ní lédè Gẹ̀ẹ́sì nìkan. Àpẹẹrẹ: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,yor_Latn,python,"
def match_parens(lst):
    '''A fún ọ ní àkójọ àwọn ìlà méjì, ìlà méjèèjì ní àwọn àlàfo ṣíṣí '(' tàbí àwọn àlàfo dídákẹ́ ') ' nìkan. Iṣẹ́ rẹ ni láti ṣàyẹ̀wò bóyá ó ṣeé ṣe láti so ìlà méjèèjì pọ̀ ní àlàfo kan, tí ìlà tí ó jẹ́ àbájáde yóò dára. Ìlà S ni a kà sí rere bí àti kìkì bí gbogbo àwọn àlàfo nínú S bá wà ní ìmúmu. Àpẹẹrẹ: ìlà '((()) ' dára, nígbà tí ìlà '()) ' kò dára. Padà 'Bẹ́ẹ̀ ni' bí ó bá jẹ́ pé ọ̀nà kan wà láti ṣe ìlà tó dára, àti padà 'Bẹ́ẹ̀ kọ́' bí kò bá ṣe bẹ́ẹ̀. Àpẹẹrẹ: match_parens[('() ', ') ']) == 'Bẹ́ẹ̀ ni' match_parens[(') ', ') ']) == 'Bẹ́ẹ̀ kọ́' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,yor_Latn,python,"
def maximum(arr, k):
    """"""Fun a array ti awọn nọmba odidi ati kan rere odidi k, pada a ti yan akojọ ti ipari k pẹlu awọn ti o pọju k awọn nọmba ni arr. Apẹẹrẹ1: Wiwọle: arr = [-3, -4, 5], k = 3 Orisun: [-4, -3, 5] Apẹẹrẹ2: Wiwọle: arr = [4, -4, 4], k = 2 Orisun: [4, 4] Apẹẹrẹ3: Wiwọle: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Orisun: [2] Akọsilẹ: 1. Awọn ipari ti awọn array yoo wa ni awọn ibiti o ti [1, 1000]. 2. awọn eroja ninu awọn array yoo wa ni awọn ibiti o ti [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,yor_Latn,python,"
def solution(lst):
    """"""Ti a ba fun ni akojọ ti ko ni ofo ti awọn nọmba odidi, pada ni iye ti gbogbo awọn eroja ti o ni awọn ipo paapaa. Awọn apẹẹrẹ ojutu (([5, 8, 7, 1]) ==> 12 ojutu (([3, 3, 3, 3, 3]) ==> 9 ojutu (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,yor_Latn,python,"
def add_elements(arr, k):
    """"""Fun a ti kii-fowo ti awọn integer arr ati kan integer k, pada awọn iye ti awọn eroja pẹlu ni o kere meji awọn oni nọmba lati awọn akọkọ k eroja ti arr. Apẹẹrẹ: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,yor_Latn,python,"
def get_odd_collatz(n):
    """"""fún iye kan n, fi àtòjọ tí ó ní àwọn iye tí kò bára mu sínú ìtòlẹ́sẹẹsẹ collatz. ìtòlẹ́sẹẹsẹ collatz jẹ́ àtòjọ nínú ìṣirò tí ó ní í ṣe pẹ̀lú ìtòlẹ́sẹẹsẹ tí a ṣe àlàyé rẹ̀ báyìí: bẹ̀rẹ̀ pẹ̀lú iye tó bára mu n. lẹ́yìn náà a gba àtòjọ kọ̀ọ̀kan láti inú àtòjọ tó ṣáájú bí èyí: bí àtòjọ tó ṣáájú bá jẹ́ párà, àtòjọ tó tẹ̀lé ni ìdajì àtòjọ tó ṣáájú. bí àtòjọ tó ṣáájú bá jẹ́ aláìlóǹkà, àtòjọ tó tẹ̀lé ni ìlóǹkà 3 ti àtòjọ tó ṣáájú pẹ̀lú 1. ìtòlẹ́sẹẹsẹ náà ni pé láìka iye n tó jẹ́, ìtòlẹ́sẹẹsẹ náà yóò dé 1. àkíyèsí: 1. collatz(1) jẹ́ [1]. 2. àtòjọ tí a fi àtòjọ ṣe padà ní ìtòlẹ́sẹẹsẹ̀ tó ń pọ̀ sí i. fún àpẹẹrẹ: get_odd_collatz ((5) fi àtòjọ [1, 5] # ìtòlẹ́sẹẹsẹ̀ collatz fún 5 jẹ́ [5, 8, 16, 4, 4, 2, 2, 1], nítorí náà àwọn àtòlẹ́sẹẹsẹ̀ nìkan ni 1, àti 5 """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,yor_Latn,python,"
def valid_date(date):
    """"""O ní láti kọ iṣẹ́ tí ó ṣètẹ́wọ́gbà ìlà ọjọ́ kan tí ó sì padà sí Òótọ́ bí ọjọ́ náà bá ṣe tọ́ tàbí Èké. Ọ̀nà tí ọjọ́ náà gbà tọ́ ni pé gbogbo òfin tó wà nísàlẹ̀ yìí ni ó tẹ̀lé: 1. Ìlà ọjọ́ náà kò ní jẹ́ òfo. 2. Iye ọjọ́ kò dín ní 1 tàbí ju 31 ọjọ́ lọ fún oṣù 1,3,5,7,8,10,12. Àti pé iye ọjọ́ kò dín ní 1 tàbí ju 30 ọjọ́ lọ fún oṣù 4,6,9,11. Àti pé, iye ọjọ́ kò dín ní 1 tàbí ju 29 lọ fún oṣù 2. 3. Àwọn oṣù kò gbọdọ̀ dín ní 1 tàbí ju 12. 4. Ọ̀nà tí ọjọ́ náà gbà yẹ kí ó wà ni: mm-dd-yyyy bí àpẹẹrẹ: valid_date (('03-11-2000') => True_valid_date (('15-01-2012') => False valid_date (('04-040') => False_valid_date (('06-04-2020') => True_valid_date (('06/04/2020') => False""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,yor_Latn,python,"
def split_words(txt):
    '''Ti a fun ni okun ti awọn ọrọ, pada akojọ kan ti awọn ọrọ ti a pin lori aaye funfun, ti ko ba si aaye funfun ninu ọrọ ti o yẹ ki o pin lori awọn kọma ',' ti ko ba si awọn kọma ti o yẹ ki o pada nọmba awọn lẹta kekere pẹlu aṣẹ alailẹgbẹ ninu alifabeti, ord (('a') = 0, ord ((('b') = 1, ... ord ((('z') = 25 Awọn apẹẹrẹ pin_words ((""Kabiyesi aye!"") â -> [""Kabiyesi aye"", ""aye!""] split_words ((""Kabiyesi aye!"") â -> [""Kabiyesi aye"", ""aye!"" split_words))'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,yor_Latn,python,"
def is_sorted(lst):
    '''Ti a ba fun ni akojọ awọn nọmba, pada boya wọn ti wa ni tito lẹsẹsẹ tabi rara. Ti akojọ ba ni ju ẹda 1 ti nọmba kanna, pada False. Gbigba pe ko si awọn nọmba odi ati awọn nọmba odidi nikan. Awọn apẹẹrẹ is_sorted ((([5]) â -> Otitọ ni_sorted (([1, 2, 3, 4, 5]) â -> Otitọ ni_sorted (([1, 3, 2, 4, 5, 6]) â -> False ni_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> Otitọ ni_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> Otitọ ni_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False ni_sorted (([1, 2, 2, 2, 3, 3, 4]) â -> Otitọ ni_sorted (([1, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,yor_Latn,python,"
def intersection(interval1, interval2):
    """"""A fún ọ ní àlàfo méjì, níbi tí àlàfo kọ̀ọ̀kan jẹ́ ìjápọ̀ àwọn iye àpapọ̀. Àpẹẹrẹ, àlàfo = (ìbẹ̀rẹ̀, òpin) = (1, 2). Àlàfo tí a fún wa ni a ti pa, èyí túmọ̀ sí pé àlàfo (ìbẹ̀rẹ̀, òpin) ní ìbẹ̀rẹ̀ àti òpin. fún àlàfo kọ̀ọ̀kan, a gbà pé ìbẹ̀rẹ̀ rẹ̀ kéré sí tàbí dọ́gba sí òpin rẹ̀. Iṣẹ́ rẹ̀ ni láti mọ̀ bóyá gígùn àlàfo méjèèjì yìí jẹ́ iye àkọ́kọ́. Àpẹẹrẹ, àlàfo (1, 3), (2, 4) jẹ́ (2, 3) tí gígùn rẹ̀ jẹ́ 1, tí kì í ṣe iye àkọ́kọ́. Bí gígùn àlàfo náà bá jẹ́ iye àkọ́kọ́, dá ""BẸ̀"", bí bẹ́ẹ̀ kọ́, dá ""KÒ"". Bí àlàfo méjèèjì kò bá ṣe pàdé, dá ""KÒ"". [input/output] samples: intersection (ìyípadà), (ìyípadà), (ìyípadà)""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,yor_Latn,python,"
def prod_signs(arr):
    """"""O ti fi fun ọ ni awọn iṣiro ti awọn nọmba ati pe o nilo lati pada ni apapọ awọn titobi ti awọn nọmba ti o pọ si nipasẹ ọja ti gbogbo awọn ami ti nọmba kọọkan ninu awọn iṣiro, ti o ṣe aṣoju nipasẹ 1, -1 tabi 0. Akọsilẹ: pada Ko si fun awọn iṣiro ti o ṣofo. Apẹẹrẹ: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == Ko si """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,yor_Latn,python,"
def minPath(grid, k):
    """"""O le bẹrẹ lati eyikeyi sẹẹli, ati ni kọọkan igbese ti o le gbe si eyikeyi ti awọn aladugbo sẹẹli, ni awọn ọrọ miiran, o le lọ si eyikeyi awọn sẹẹli ti o pin eti pẹlu rẹ lọwọlọwọ sẹẹli. Jọwọ ṣe akiyesi pe ọna ti ipari k tumọ si lilọ si gangan k awọn sẹẹli (ko ṣe dandan yatọ). O KO LE lọ kuro ni grid. A ọna A (ti ipari k) ni a kà kere ju ọna B (ti ipari k) ti o ba lẹhin ṣiṣe awọn akojọ ti a paṣẹ ti awọn iye lori awọn sẹẹli ti A ati B (jẹ ki a pe wọn lA_st ati lA_stB), lA_stB jẹ lexically kere ju lA_stB, ni awọn ọrọ miiran, a le lọ si eyikeyi awọn sẹẹli aladugbo, ni awọn ọrọ miiran, a le lọ si eyikeyi awọn sẹẹli ti o ni eti pẹlu rẹ lọwọlọwọ sẹẹli. [A, A, B, C, D] = lA, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j, j""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,yor_Latn,python,"
def tri(n):
    """"""Gbogbo ènìyàn mọ̀ nípa ìtòlẹ́sẹẹsẹ fibonacci, àwọn onímọ̀ ìṣirò ti kẹ́kọ̀ọ́ rẹ̀ jinlẹ̀ ní àwọn ọgọ́rùn-ún ọdún méjì tó kọjá. ṣùgbọ́n, ohun tí àwọn ènìyàn kò mọ̀ ni ìtòlẹ́sẹẹsẹ tribonacci. ìtòlẹ́sẹẹsẹ tribonacci ni a ṣe àlàyé nípa àtúnṣe: tri(1) = 3 tri(n) = 1 + n / 2, bí n bá jẹ́ párà. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), bí n bá jẹ́ aláìlóǹkà. fún àpẹẹrẹ: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 a fún ọ ní iye tí kò jẹ́ èléèwọ́, o ní láti dá àtòjọ àwọn iye àkọ́kọ́n n + 1 ti ìtòlẹ́sẹẹsẹ tribonacci padà. àpẹẹrẹ: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,yor_Latn,python,"
def digits(n):
    """"""Fun nọmba kan ti o ni idunnu n, pada si ọja ti awọn nọmba ti o ni iyatọ. Pada 0 ti gbogbo awọn nọmba ba jẹ paapaa. Fun apẹẹrẹ: awọn nọmba ((1) == 1 awọn nọmba ((4) == 0 awọn nọmba ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,yor_Latn,python,"
def is_nested(string):
    '''Ṣẹda iṣẹ kan ti o gba okun bi titẹ ti o ni awọn ibọwọ onigun mẹrin nikan. Iṣẹ naa yẹ ki o pada Otitọ ti o ba ati nikan ti o ba jẹ pe o wa ni igbimọ ti o wulo ti awọn ibọwọ nibiti o kere ju ọkan ibọwọ kan ninu igbimọ naa ti wa ni sisọ. is_nested '[[]]') â -> Otitọ jẹ_nested '[[]]]]]]]]][[[[[[]') â -> False jẹ_nested '[][]') â -> False jẹ_nested '[[]') â -> False jẹ_nested '[[]]]]') â -> Otitọ jẹ_nested '[[]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,yor_Latn,python,"

def sum_squares(lst):
    """"""O ti wa ni fi fun o kan akojọ ti awọn nọmba. O nilo lati pada awọn akojọpọ ti square awọn nọmba ninu awọn fun akojọ, yika kọọkan eroja ninu awọn akojọ to oke int ((Ceiling) akọkọ. Apẹẹrẹ: Fun lst = [1,2,3] awọn ti o jade yẹ ki o jẹ 14 Fun lst = [1,4,9] awọn ti o jade yẹ ki o jẹ 98 Fun lst = [1,3,5,7] awọn ti o jade yẹ ki o jẹ 84 Fun lst = [1.4,4.2,0] awọn ti o jade yẹ ki o jẹ 29 Fun lst = [-2.4,1,1] awọn ti o jade yẹ ki o jẹ 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,yor_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Ṣẹda iṣẹ kan ti o pada Otitọ ti o ba jẹ pe ohun kikọ ikẹhin ti okun ti a fun ni jẹ ohun kikọ alfabeti ati pe kii ṣe apakan ti ọrọ kan, ati eke bibẹkọ. Akọsilẹ: ""ọrọ"" jẹ ẹgbẹ awọn ohun kikọ ti o ya sọtọ nipasẹ aaye. Awọn apẹẹrẹ: check_if_last_char_is_a_letter"" "" ""apple pie"") â -> False check_if_last_char_is_a_letter"" ""apple pi e"") â -> Otitọ check_if_last_char_is_a_letter"" ""apple pi e"") â -> False check_if_last_char_is_a_letter"" ""'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,yor_Latn,python,"
def can_arrange(arr):
    """"""Ṣẹda iṣẹ kan ti o pada awọn tobi itọka ti ohun kan ti o jẹ ko tobi ju tabi dogba si awọn ohun kan lẹsẹkẹsẹ ṣaaju ki o to. Ti ko ba si iru nkan bẹ lẹhinna pada -1. awọn ti a fi fun array yoo ko ni awọn iye duplicate. Awọn apẹẹrẹ: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,yor_Latn,python,"
def largest_smallest_integers(lst):
    '''Ṣẹda iṣẹ kan ti o pada tuple (a, b), nibi ti 'a' jẹ ti o tobi julọ ti awọn nọmba ti ko ni idaduro, ati 'b' jẹ ti o kere ju ti awọn nọmba ti o ni idaduro ninu akojọ kan. Ti ko ba si awọn nọmba ti ko ni idaduro tabi awọn nọmba ti o ni idaduro, pada wọn bi None. Awọn apẹẹrẹ: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,yor_Latn,python,"
def compare_one(a, b):
    """"""Ṣẹda iṣẹ kan ti o gba awọn nọmba odidi, awọn floats, tabi awọn okun ti o ṣe aṣoju awọn nọmba gidi, ati pada si awọn oniwe-nla ti o tobi ni iru iyipada ti a fun. Pada None ti awọn iye ba jẹ dogba. Akọsilẹ: Ti a ba ṣe aṣoju nọmba gidi bi okun, aaye ti o wa ni iyasọtọ le jẹ . tabi , compare_one(1, 2.5) â -> 2.5 compare_one(1, ""2,3"") â -> ""2,3"" compare_one(""5,1"", ""6"") â -> ""6"" compare_one(""1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,yor_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Ṣe ayẹwo boya nọmba ti a fun n le kọ bi idapọ ti gangan awọn nọmba paati rere 4 Apẹẹrẹ jẹ_idọgba_si_idọgba_paati (a) == eke jẹ_idọgba_si_idọgba_paati (a) == eke jẹ_idọgba_si_idọgba_paati (a) == otitọ """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,yor_Latn,python,"
def special_factorial(n):
    """"""A ṣe àlàyé ìsọ̀rí Brazil bi: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! níbi tí n > 0 Àpẹẹrẹ: >>> special_factorial ((4) 288 Àṣiṣẹ́ náà yóò gba iye-pupọ̀ gẹ́gẹ́ bí ìsọ̀rí àti yóò padà sí ìsọ̀rí àkànṣe ti iye-pupọ̀ yìí. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,yor_Latn,python,"
def fix_spaces(text):
    """"""_Àpẹẹrẹ-3ọrọ okun, rọpo gbogbo awọn aaye ninu rẹ pẹlu awọn aami kekere, ati pe ti okun ba ni awọn aaye ti o ju 2 lọ, lẹhinna rọpo gbogbo awọn aaye ti o tẹle pẹlu - fix_spaces ((""Aya"") == ""Aya"" fix_spaces (((""Aya1"") == ""Aya1"") fix_spaces (((""Aya2"") == ""Aya2"") fix_spaces (((""Aya 3"") == ""Aya-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,yor_Latn,python,"
def file_name_check(file_name):
    """"""Ṣẹda iṣẹ ti o gba okun ti o ṣe aṣoju orukọ faili kan, o si pada 'Bẹẹni' ti orukọ faili ba wulo, o si pada 'Bẹbẹ' bibẹkọ. A kà orukọ faili kan si wulo ti o ba jẹ pe ati nikan ti gbogbo awọn ipo wọnyi ba pade: - Ko yẹ ki o wa ju awọn nọmba mẹta lọ ('0'-'9') ni orukọ faili naa. - Orukọ faili naa ni o ni gangan kan dot '.' - Awọn substring ṣaaju ki o to dot yẹ ki o ko ni ṣofo, ati pe o bẹrẹ pẹlu lẹta lati inu alfabeti Latin ('a'-'z' ati 'A'Z'). - Awọn substring lẹhin ti dot yẹ ki o jẹ ọkan ninu awọn wọnyi: ['txt', 'exe', 'll'd'] Apẹẹrẹ: file_name_check""(example.txt"") # => 'Bẹẹni' file_name_check""(example.dll1"") # => 'Bẹbẹ' => 'Bẹbẹ' (orukọ naa yẹ ki o bẹrẹ pẹlu lẹta lati inu alfabeti Latin) #""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,yor_Latn,python,"


def sum_squares(lst):
    """"""""ìṣirò yìí yóò gba àkójọ àwọn iye tí ó wà nínú àkójọ náà. fún gbogbo àwọn àkọsílẹ̀ inú àkójọ náà, iṣẹ́ náà yóò fi àlébàbà àlébà tí ó bá jẹ́ ìdìpò̀ 3 sí àlébà tí ó bá jẹ́ ìdìpò̀ 4 tí kì í sì í ṣe ìdìpò̀ 3. iṣẹ́ náà kò ní yí àwọn àkọsílẹ̀ inú àkójọ tí àwọn ìdìpò̀ wọn kì í ṣe ìdìpò̀ 3 tàbí 4. iṣẹ́ náà yóò wá dá àpò gbogbo àkọsílẹ̀ padà. àpẹẹrẹ: fún lst = [1,2,3] ìjáde náà yóò jẹ́ 6 fún lst = [] ìjáde náà yóò jẹ́ 0 fún lst = [-1,-5,2,-1,-5] ìjáde náà yóò jẹ́ -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,yor_Latn,python,"
def words_in_sentence(sentence):
    """"""O ti wa ni fifun a okun ti o duro fun a gbolohun, awọn gbolohun ni o ni diẹ ninu awọn ọrọ ya sọtọ nipasẹ a aaye, ati awọn ti o ni lati pada a okun ti o ni awọn ọrọ lati awọn atilẹba gbolohun, ti awọn ipari ti wa ni akọkọ awọn nọmba, awọn aṣẹ ti awọn ọrọ ninu awọn titun okun yẹ ki o jẹ kanna bi awọn atilẹba ọkan. Example1: Input: gbolohun = ""Eyi ni a igbeyewo"" Output: ""ni"" Example2: Input: gbolohun = ""jẹ ki lọ fun swimming"" Output: ""lọ fun"" Iwọn: * 1 <= len(sentence) <= 100 * gbolohun ni o ni awọn lẹta nikan """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,yor_Latn,python,"
def simplify(x, n):
    """"""Iṣẹ́ rẹ ni láti ṣe iṣẹ́ kan tí yóò mú kí ìtumọ̀ x * n rọrùn. Iṣẹ́ náà yóò dá True padà bí x * n bá ṣe àgbéyẹ̀wò sí iye kan tí ó jẹ́ odidi àti False bí kò bá ṣe bẹ́ẹ̀. Àwọn méjèèjì, x àti n, jẹ́ ìlà ìfihàn ti ìpín kan, tí wọ́n sì ní àdàkọ tí ó tẹ̀lé, <numerator>/<denominator> níbi tí àwọn méjèèjì, olùka àti olùkórúkọ jẹ́ àwọn iye odidi tí ó jẹ́ èrè. O lè gbà pé x, àti n jẹ́ àwọn ìpín tó bá a mu, tí wọn kò sì ní zérò gẹ́gẹ́ bí olùkórúkọ. simplify "" 1/5"", ""5/1"") = True simplify "" 1/6"", ""2/1"") = False simplify "" 7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,yor_Latn,python,"
def order_by_points(nums):
    """"""Kọ iṣẹ kan ti o ṣaṣeyọri awọn akojọ ti a fun ti awọn nọmba ni aṣẹ ti o pọ si gẹgẹbi iye ti awọn oniwe-nọmba wọn. Akiyesi: ti o ba wa ni awọn ohun kan pẹlu iye kanna ti awọn oniwe-nọmba wọn, ṣeto wọn da lori itọka wọn ninu akojọ atilẹba. Fun apẹẹrẹ: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points []) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,yor_Latn,python,"
def specialFilter(nums):
    """"""Kọ iṣẹ kan ti o gba awọn nọmba bi ohun elo ati ki o pada awọn nọmba ti awọn eroja ninu awọn eto ti o tobi ju 10 ati awọn mejeeji akọkọ ati ikẹhin awọn nọmba ti a nọmba ni o wa odd (1, 3, 5, 7, 9). Fun apẹẹrẹ: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,yor_Latn,python,"
def get_max_triples(n):
    """"""O ti fi fun ọ ni nọmba odidi kan n. O ni lati ṣẹda ohun gbogbo nọmba array ti ipari n. Fun kọọkan i (1 ‰¤ i ‰¤ n), iye ti a[i] = i * i - i + 1. Pada nọmba ti awọn triples (a[i], a[j], a[k]) ti a nibiti i < j < k, ati a[i] + a[j] + a[k] jẹ ọpọlọpọ ti 3. Apẹẹrẹ: Input: n = 5 Opinjade: 1 Alaye: a = [1, 3, 7, 13, 21] Awọn mẹta nikan ni o wulo ni (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,yor_Latn,python,"
def bf(planet1, planet2):
    '''àwọn pílánẹ́ẹ̀tì mẹ́jọ ló wà nínú ètò oòrùn wa: èyí tó sún mọ́ oòrùn jùlọ ni mercury, tí ó tẹ̀lé e ni venus, lẹ́yìn náà ni earth, mars, jupiter, saturn, uranus, neptune. kọ iṣẹ́ tí ó gba orúkọ pílánẹ́ẹ̀tì méjì gẹ́gẹ́ bí ìlà planet1 àti planet2. iṣẹ́ náà ní láti dá tuple tí ó ní gbogbo àwọn pílánẹ́ẹ̀tì tí àwọn orbit wọn wà ní àárín orbit ti planet1 àti orbit ti planet2, tí a tò gẹ́gẹ́ bí ìtòsí oòrùn. iṣẹ́ náà ní láti dá tuple tí kò ní nǹkan padà bí planet1 tàbí planet2 kò bá jẹ́ orúkọ pílánẹ́ẹ̀tì tó tọ́. àpẹẹrẹ bf""(júpiter"", ""neptune"") ==> (""saturn"", ""uranus"") bf(""earth"", ""mercury"") ==> ("" venus"") bf (((mercury"", ""uranus"") ==> ("" venus"", ""earth"", ""marse"", ""júpiter"", ""sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,yor_Latn,python,"
def sorted_list_sum(lst):
    """"""Kọ iṣẹ kan ti o gba akojọ awọn okun bi paramita kan, yọ awọn okun ti o ni awọn gigun ti o ni iyatọ lati inu rẹ, ki o si pada akojọ ti o ni abajade pẹlu aṣẹ ti a ṣeto, Akojọ naa jẹ nigbagbogbo akojọ awọn okun ati kii ṣe iṣiro ti awọn nọmba, ati pe o le ni awọn ẹda meji. Ilana ti akojọ yẹ ki o jẹ ti o pọ si nipasẹ gigun ti ọrọ kọọkan, ati pe o yẹ ki o pada akojọ ti a ṣeto nipasẹ ofin yẹn. Ti awọn ọrọ meji ba ni gigun kanna, ṣaṣeyọri akojọ naa ni abẹle. Iṣẹ naa yẹ ki o pada akojọ awọn okun ni aṣẹ ti a ṣeto. O le gba pe gbogbo awọn ọrọ yoo ni gigun kanna. Fun apẹẹrẹ: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,yor_Latn,python,"
def x_or_y(n, x, y):
    """"""Àpẹẹrẹ: fún x_or_y ((7, 34, 12) == 34 fún x_or_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,yor_Latn,python,"
def double_the_difference(lst):
    '''Ti a ba fun ni akojọ awọn nọmba, pada ni iye awọn square ti awọn nọmba ninu akojọ ti o jẹ alailẹgbẹ. Yiyọ awọn nọmba ti o jẹ odi tabi kii ṣe awọn odidi. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Ti akojọ titẹsi ba ṣofo, pada 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,yor_Latn,python,"
def compare(game,guess):
    """"""Mo ro pe gbogbo wa ranti pe rilara nigbati awọn esi ti diẹ ninu awọn gun-awaited iṣẹlẹ ti wa ni nipari mọ. Awọn ikunsinu ati ero ti o ni ni akoko ti o wa ni pato tọ si noting si isalẹ ati ki o afiwe. rẹ ise ni lati mọ ti o ba ti a eniyan ti o tọ ti mọ awọn esi ti awọn nọmba kan ti awọn ere. o ti wa ni fi fun meji arrays ti awọn ikun ati guesses ti dogba ipari, ibi ti kọọkan atọka fihan a ere. pada kan array ti awọn kanna ipari denoting bi jina kuro kọọkan wo ni. ti o ba ti won ti mọ daradara, awọn iye ni 0, ati ti o ba ti ko, awọn iye ni awọn pipe iyato laarin awọn guess ati awọn score. apẹẹrẹ: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3] compare (([0,5,0,4],[0,4,1,0,-2]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,yor_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""O ni lati wa awọn ti o lagbara ju itẹsiwaju ki o si pada kan okun ni yi kika: ClassName.StrongestExtensionName. Ti o ba ti wa ni meji tabi diẹ ẹ sii itẹsiwaju pẹlu kanna agbara, o yẹ ki o yan ọkan ti o wa ni akọkọ ninu awọn akojọ. Fun apẹẹrẹ, ti o ba ti o ba ti wa ni fi ""Slices"" bi awọn kilasi ati akojọ kan ti awọn itẹsiwaju: ['SEviviSliNGCes', 'Cheese', 'StuFfed'] ki o si o yẹ ki o pada 'Slices.SEviSliNGCes' niwon 'SviviSliNGCes' ni strongest itẹsiwaju: 'AA_Beats' (For Example: 'AA_Beats'), 'AA_Class' jẹ strongest', (For Example: 'AA_Beats'), 'AA_Beats' jẹ strongest extension: 'AA_Beats' (For Example: 'AA_Beats'), 'AA_Class' jẹ strongest'.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,yor_Latn,python,"
def cycpattern_check(a , b):
    """"""O ti fi 2 ọrọ. O nilo lati pada Otitọ ti o ba ti awọn keji ọrọ tabi eyikeyi ti awọn oniwe-rotations ni a substring ni akọkọ ọrọ cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => Otitọ cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => Otitọ cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => Otitọ """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,yor_Latn,python,"
def even_odd_count(num):
    """"""Ti a ba fun ni iye kan. pada tuple ti o ni nọmba ti awọn nọmba paapaa ati alailẹgbẹ lẹsẹsẹ. Apẹẹrẹ: paapaa_odd_count(-12) ==> (1, 1) paapaa_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,yor_Latn,python,"
def int_to_mini_roman(number):
    """"""Ti a ba fun ni iye odidi rere, gba iye rẹ ti o jẹ deede ni nọmba Roman bi okun, ki o si fi i pada ni kekere. Awọn ihamọ: 1 <= num <= 1000 Awọn apẹẹrẹ: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,yor_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Ti a ba fun ni awọn ipari ti awọn ẹgbẹ mẹta ti onigun mẹta kan. Return True ti awọn ẹgbẹ mẹta ba ṣe onigun mẹta ti o ni igun ọtun, False bibẹkọ. Onigun mẹta ti o ni igun ọtun jẹ onigun mẹta ninu eyiti igun kan jẹ igun ọtun tabi iwọn 90. Apẹẹrẹ: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,yor_Latn,python,"
def find_max(words):
    """"""Kọ iṣẹ kan ti o gba akojọ awọn okun. Akojọ naa ni awọn ọrọ oriṣiriṣi. Pada ọrọ pẹlu nọmba ti o pọju ti awọn ohun kikọ alailẹgbẹ. Ti o ba jẹ pe awọn okun pupọ ni nọmba ti o pọju ti awọn ohun kikọ alailẹgbẹ, pada ọkan ti o wa ni akọkọ ni aṣẹ lexicographical.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,yor_Latn,python,"
def eat(number, need, remaining):
    """"""O jẹ ehoro ti ebi npa, o si ti jẹ iye kan ti awọn Karooti, ṣugbọn nisisiyi o nilo lati jẹ diẹ ẹ sii awọn Karooti lati pari awọn ounjẹ ọjọ. o yẹ ki o pada ni ohun elo ti [apapọ nọmba ti awọn Karooti ti o jẹ lẹhin ounjẹ rẹ, nọmba awọn Karooti ti o ku lẹhin ounjẹ rẹ ] ti ko ba si awọn Karooti ti o ku to, iwọ yoo jẹ gbogbo awọn Karooti ti o ku, ṣugbọn yoo tun jẹ ebi. Apẹẹrẹ: * jẹ ((5, 6, 10) -> [11, 4] * jẹ ((4, 8, 9) -> [12, 1] * jẹ ((1, 10, 10) -> [11, 0] * jẹ ((2, 11, 5) -> [7, 0] Awọn iyipada: @number: iye iye gbogbo awọn Karooti ti o ti jẹ. @need:: iye gbogbo awọn Karooti ti o nilo lati jẹ. @remaining: iye gbogbo awọn Karooti ti o ku ninu iṣura: * Constrain = 0 * <= 1000 * <= 1000 * nilo <= 1000 <= 1000 <= 1000 <= 1000 = fun = fun = fun""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,yor_Latn,python,"
def do_algebra(operator, operand):
    """"""Fun awọn akojọ meji oniṣẹ, ati operand. Akojọ akọkọ ni awọn iṣẹ algebra ipilẹ, ati akojọ keji jẹ akojọ awọn nọmba odidi. Lo awọn akojọ meji ti a fun lati kọ ifarahan algebra ati pada iṣiro ti ifarahan yii. Awọn iṣẹ algebra ipilẹ: Afikun ( +) Iyatọ ( - ) Idarapọ ( *) Ipele pinpin ( // ) Exponentiation ( ** Apẹẹrẹ ): oniṣẹ['+', '*', '-'] array = [2, 3, 4, 5] abajade = 2 + 3 * 4 - 5 => abajade = 9 Akọsilẹ: gigun akojọ oniṣẹ jẹ dogba si gigun ti akojọ operand din ọkan. Operand jẹ akojọ ti awọn nọmba odidi ti ko ni odi. Oluṣiṣẹ ni o kere ju ọkan oniṣẹ kan, ati akojọ oniṣẹ ni o kere ju awọn oniṣẹ meji. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,yor_Latn,python,"
def solve(s):
    """"""A fún ọ ní ìlà s. bí s[i] bá jẹ́ lẹ́tà, yí àdàkọ rẹ̀ padà láti ìsàlẹ̀ sí òkè tàbí vice versa, bí bẹ́ẹ̀ kọ́, jẹ́ kó wà bó ṣe wà. bí ìlà náà kò bá ní lẹ́tà kankan, yí ìlà náà padà. iṣẹ́ náà gbọ́dọ̀ dá ìlà tí ó jẹ́ àbájáde padà. Àpẹẹrẹ yanjú (((""1234"") = ""4321"" yanjú (((""ab"") = ""AB"" yanjú (((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,yor_Latn,python,"
def string_to_md5(text):
    """"""Ti a ba fun ọ ni okun 'awọn ọrọ', pada ni md5 hash deede okun. Ti 'awọn ọrọ' ba jẹ okun ti o ṣofo, pada None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,yor_Latn,python,"
def generate_integers(a, b):
    """"""Fun awọn nọmba odidi meji a ati b, pada awọn nọmba paapaa laarin a ati b, ni aṣẹ ti o nlọ. Fun apẹẹrẹ: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
