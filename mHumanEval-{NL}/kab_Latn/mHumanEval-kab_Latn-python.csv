task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,kab_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Sseḥbiber ma deg umuɣ n yiṭṭunen i d-yefka, llan sin n yiṭṭunen i d-yusan ɣer wa ɣer wa wala azref i d-yefka. Amedya: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,kab_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Asekles n taggayt-a d tazelɣa yesɛan aṭas n yiɣbula n yiɣbula i d-yettwaḥerken. Iswi-inek d ad tessefrayeḍ tiɣbula-yagi ɣer yiɣbula yemgaraden u ad d-teqqel tsuda n wid-nni. Tiɣbula yemgaraden d wid yettwaḥerken (mkul tazelɣa tamerẓit tettwaḥerrek akken ilaq) u ur ttwaḥerzen ara deg waygar-asen. Ur ttwaḥerzen ara kra n yimukan deg tazelɣa n usekles. Amedya: >>> separate_paren_groups' ((( ) (() (( ) ) ) ) ) ) ) [' (()) ', '(()) ', '((()) ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,kab_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Ma yella-d yiwen uṭṭun n uḍar amesbaṭli, yezmer ad yettwaḥric d amur ameqqran (amur ameqqran ameqqran meẓẓi ɣef uṭṭun i d-yefka) d imuren (amur i d-yeqqimen yezga meẓẓi ɣef 1). Err-d amur ameẓẓyan n uṭṭun. Amedya: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,kab_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Tettawi-d fell-ak umuɣ n tseddarin n usentel d usekkil deg uselkim n lbanka i yebdan s uselkim aziran. Ahil-ik d ad d-tessineḍ ma yella deg kra n teswiɛt aselkim n uselkim yeɣli ddaw n uzir, dɣa deg teswiɛt-nni, taggayt ilaq ad d-teqqel d Tideţ. Ma ulac ilaq ad d-teqqel d Lbaṭel. Amedya: >>> below_zero([1, 2, 3]) Lbaṭel >>> below_zero([1, 2, -4, 5]) D tidet """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,kab_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""I talɣa n yiṭṭunen n usekles, ḥseb-d amgired n usekles n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut d amgired n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut n tnezzut""""""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,kab_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Sers-d amḍan ""delimiter"" gar sin n yiferrawen imḍanen n umuɣ n usekles `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,kab_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Tazrawt n usebter-agi d tazelɣa i d-yettakken aṭas n tdukliwin i yemyagen i d-yettwafernen s yimyagen. I yal taqqult, asuffeɣ n uswir agejdan n yemyagen. Amedya (() (()) yesɛa sin n yiswiren n wemyagen ma d ((())) yesɛa tlata. >>> parse_nested_parens (('((()) ((())) () ((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,kab_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Sfeḍremt kan umuɣ n tsekla n usebter i wid yesεan asebter n tsekla >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,kab_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""I umuɣ n imḍanen imdanen, rnu-d yiwen n uḥric (tuple) i d-yezgan seg ujemmal d usefru n imḍanen imdanen akk deg umuɣ. Ujemmal d azegzaw ilaq ad yili 0 u usefru d azegzaw ilaq ad yili 1. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,kab_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Seg umuɣ n imḍanen imdanen, ssemɣaren umuɣ n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru n usefru""""""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,kab_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Af-d asnas n usegmi i d-yettwasebden s usegmi i d-yettunefken. Asentel n usegmi d asnas: - Af-d asnas n usegmi i d-yettwasebden i d-yettwasebden s usegmi i d-yettwasebden s usegmi i d-yettwasebden s usegmi. - Seqdec ɣer taggara n usegmi amesbaṭli n usegmi i d-yettwasebden s usegmi i d-yettwasebden s usegmi. >>> make_palindrome ((('') ' ' ' >>> make_palindrome ((('catac') ' ' ' '""""""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Sken ma tazelɣa-yagi d taḥerfit """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,kab_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Init d sin n yiferrawen a d b i d-yezgan kan n 1 d 0 . XOR abinar ɣef yiferrawen-a d tiririt n ugmuḍ daɣen d tazelɣa. >>> string_xor (('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,kab_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Seg umuɣ n tseddarin, rnu-d tin ɣezzifen. Rnu-d tamezwarut ma yella aṭas n tseddarin n yiwet n teɣzi. Ur d-yettak ara ma yella umuɣ n usekkil d ilem. >>> ɣezzifen (([]) >>> ɣezzifen ((['a', 'b', 'c']) 'a' >>> ɣezzifen ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,kab_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Err-d amḍan amatu ameqqran n sin n yijdanen a d b >>> amḍan amatu ameqqran ((3, 5) 1 >>> amḍan amatu ameqqran ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,kab_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Ad d-yerr umuɣ n yal aswir seg win yezzin ar win ɣezzifen deg tezdit n usekcem >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,kab_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Ad d-yerr tazelɣa yesεan imḍanen i d-yettwaḥebsen s umkan seg 0 ar n. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,kab_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Ma tefka-d yiwet n tsekla, af acḥal n yisekkilen yemgaraden (ur yecliε ara d amyag) i yesεa >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,kab_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Tazrawt-a d tazelɣa i d-yettakken tiɣriwin n uẓawan deg uḍris n ASCII. Ahil-ik d ad tessefrayem umuɣ n tiɣriwin n imdanen i d-yettakken i waṭas n yiɣallen. Atan da yiwen n usefru: 'o' note, lasts four beats 'o, dakken - azgen n tiɣri, lasts two beats 'o, dakken - quater note, lasts one beat >>> parse_music. 'o o .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,kab_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Af-d acḥal n tikkal i yezmer ad d-yaf yiwen n uḥric deg uḥric amezwaru. Ḥesbet tikwal i d-yeqqimen. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,kab_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Asekles d tazelɣa n uṭṭunen i d-yettwaḥebsen s umkan seg 'aṭu' ar 'tesεa'. Tiferniwin i d-yellan d 'aṭu', 'waḥed', 'sin', 'kraḍ', 'rebɛa', 'sḍis', 'sebɛa', 'tmenya' d 'tesεa'. Err-d tazelɣa s uṭṭunen i yettwaḍfaren seg umecṭuḥ ɣer umeqqran >>> sort_numbers (('taṛebɛa yiwen xemsa') 'waḥed tlata xemsa' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,kab_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Seg umuɣ n yiṭṭunen (deg teɣzi n snat n tikkal) ferr-d sin i d-yusan d iqerben gar-asen, terna-ten-id s talɣa (aṭṭun amecṭuḥ, aṭṭun meqqren). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,kab_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Ma yella-d umuɣ n yiṭṭunen (deg sin n yiẓuran meqqar), sseqdec-d ameslay n usegmi i umuɣ-nni, akken ameslay amecṭuḥ ad yuɣal d 0 ma d win meqqren ad yuɣal d 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,kab_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,kab_Latn,python,"

def strlen(string: str) -> int:
    """"""Tiɣzi n tuɣalin n tsekla-yagi >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,kab_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""I uṭṭun n, af-d uṭṭun meqqren i yeṭṭfen n s tdukli, meẓẓiyen ɣef n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,kab_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Aɣbalu n yimegraden imezwura n umḍan amatu yettwafken s talɣa seg win meẓẓiyen ɣer win meqqren. Yal yiwen seg yimegraden ilaq ad yettwasekles acḥal n tikkal i d-yettban deg usekkil. Uṭṭun n usekkil ilaq ad yili am ugraw n yimegraden akk >>> asebter n yimegraden ((8) [2, 2, 2] >>> asebter n yimegraden ((25) [5, 5] >>> asebter n yimegraden ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,kab_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Seg umuɣ n imḍanen imeggura, kkes akk isekkilen i d-yettbanen ugar n tikelt. Ḥerzeḍ talɣa n isekkilen i d-yeǧǧan am tin yellan deg usekles. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,kab_Latn,python,"

def flip_case(string: str) -> str:
    """"""I usnas yettwafken, rnu imeslayen imecṭaḥ ɣer yimeslayen imeqqranen d yimeslayen imeqqranen ɣer yimeslayen imecṭaḥ. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,kab_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate list of strings into a single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,kab_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Sfeḍremt kan umuɣ n tsekla n tsekla i yebdan s usekkil yettwafkan. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,kab_Latn,python,"

def get_positive(l: list):
    """"""Err kan i waṭṭanen imeggura deg umuɣ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,kab_Latn,python,"

def is_prime(n):
    """"""Err-d true ma yella yiwen n uṭṭun d amenzu, d false ma ulac. >>> d_amezwaru (a) (6) D lemɛawna (a) >>> d_amezwaru (a) (101) D tidet >>> d_amezwaru (a) (11) D tidet >>> d_amezwaru (a) (13441) D tidet >>> d_amezwaru (a) (61) D tidet >>> d_amezwaru (a) (4) D lemɛawna (a) >>> d_amezwaru (a) (1) D lemɛawna (a) """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,kab_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs d imseɣwan n yiwen n usekkil. find_zero af x am akken poly ((x) = 0. find_zero yettarra-d kan anagar anagar anagar aneggar n usekkil, ɣas ma llan aṭas. Ugar n waya, find_zero yettarra kan xs n umuɣ s waṭas n yimseɣwan d usekkil ur nelli ara d azger acku d ayen i d-yettakken tifrat. >>> round ((find_zero[(1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Yettwali amur ameqqran s imseɣwan xs deg umkan x. yerra xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,kab_Latn,python,"

def sort_third(l: list):
    """"""Tazrawt-a tettarra umuɣ l, tettarra-d umuɣ l' akken l' ad yili d win n l deg yimeslayen ur nezmir ad neḥḍer s tlata, ma d igmawen-is deg yimeslayen i nezmer ad neḥḍer s tlata, ad ilin am igmawen n yimeslayen i d-yettakken i l, maca ad ilin s amḍiq. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,kab_Latn,python,"

def unique(l: list):
    """"""Iqqel-d s kra n yiferdisen yemgaraden deg umuɣ >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,kab_Latn,python,"

def max_element(l: list):
    """"""Err-d agbur ameqqran deg umuɣ. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,kab_Latn,python,"

def fizz_buzz(n: int):
    """"""Err-d amḍan n tikwal i d-yettban uglam 7 deg imḍanen imdanen i yugaren n i yettwaḥricen s 11 neɣ 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,kab_Latn,python,"

def sort_even(l: list):
    """"""Tazrawt-a tettarra umuɣ l, tessawa-d umuɣ l' akken l' ad yili d win n l deg imesliyen imgaraden, ma d igmawen-is deg imesliyen imgaraden ad ilin am igmawen n imesliyen imgaraden n l, maca s uswir. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,kab_Latn,python,"

def encode_cyclic(s: str):
    """"""yettaɣ am usnas n usekcem yettwasekden s taggayt encode_cyclic. Yettarid asnas n usekcem yettwasekden. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""ad d-yerr tazelɣa yettwasekles s terbaɛt n tlata n yisekkilen.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,kab_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib ad d-yerr amḍan n-yedduklen d amḍan n Fibonacci yerna d amḍan amezwaru. >>> prime_fib ((1) 2) >>> prime_fib ((2) 3) >>> prime_fib ((3) 5) >>> prime_fib ((4) 13) >>> prime_fib ((5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,kab_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triple_sum_to_zero yettaɣ-d umuɣ n imḍanen imeggura d asnulfu. Yettak-d True ma llan tlata n yiferdisen yemgaraden deg umuɣ-a i yesduklen ɣer ssif, d False ma ulac. >>> triple_sum_to_zero (([1, 3, 5, 0]) False >>> triple_sum_to_zero (([1, 3, -2, 1]) True >>> triple_sum_to_zero (([1, 2, 3, 7]) False >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triple_sum_to_zero [1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,kab_Latn,python,"

def car_race_collision(n: int):
    """"""Walit-d yiwen ubrid d win yeṭṭfen tazelɣa d taɛinant. n tkeṛṛusin i yettruḥun seg ufus ɣer uyeffus; di tikelt-nni kan, yiwet n terbaɛt n tkeṛṛusin i yettruḥun seg ufus ɣer uzelmaḍ. Sin n terbaɛt n tkeṛṛusin bdan-d beεden wa ɣef wa. Tkeṛṛusin merra ttinigent s yiwet n tɣawla. Sin n tkeṛṛusin ttwaqqent mi ara d-teɣli tkeṛṛust i yettruḥun seg ufus ɣer uyeffus ɣer tkeṛṛust i yettruḥun seg ufus ɣer uzelmaḍ. Maca, tkeṛṛusin-nni d tizemmar ur nettwaḥsab; s wakka, tkemmel tikli-nsent deg ubrid-nsent am akken ur d-ttettettettettettettettettettettettett.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,kab_Latn,python,"

def incr_list(l: list):
    """"""Ttarra-d umuɣ s yiferdisen i d-yettwassen s 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,kab_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero yettaɣ-d umuɣ n imḍanen am usekles. Yettak-d True ma llan sin n yiferrawen yemgaraden deg umuɣ-a i yesɛan amjum ɣer ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n ssebba n""""""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,kab_Latn,python,"

def change_base(x: int, base: int):
    """"""Beddel aswir n uṭṭun x ɣer uswir. Ssekni n tsenselkimt n tsenselkimt deffir n ubeddel. Uṭṭunen n usekni meẓẓiyet ɣef 10. >>> abeddel_asekni (8, 3) '22' >>> abeddel_asekni (8, 2) '1000' >>> abeddel_asekni (7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,kab_Latn,python,"

def triangle_area(a, h):
    """"""Ma yella-d teɣzi n yiɣil d uzrug n tuɣalin tameqqrant i ttriṭ. >>> triangle_area ((5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,kab_Latn,python,"

def fib4(n: int):
    """"""Tazrawt n uṭṭunen n Fib4 d tizrawt i d-yettemcabin i tezrawt n Fibbonacci yettwasbedden akken i d-iteddun: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Ttxil-k, aru-d taggayt i wakken ad tesseḥseb s ttawil n-asent n n n n n tezrawt n uṭṭunen n fib4. Ur ssexdam ara asekkil. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,kab_Latn,python,"

def median(l: list):
    """"""Aɣezzfan n tuɣalin n yiferdisen deg umuɣ l. >>> aɣezzfan (([3, 1, 2, 4, 5]) 3 >>> aɣezzfan (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,kab_Latn,python,"

def is_palindrome(text: str):
    """"""Yettwali ma yella tazelɣa-yagi d taḥerfit >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,kab_Latn,python,"

def modp(n: int, p: int):
    """"""Rret 2^n modulo p (ḥader i uṭṭunen). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,kab_Latn,python,"

def encode_shift(s: str):
    """"""yettaɣ am usnas n usnas yettwasekden s taggayt encode_shift. Yettarid asnas yettwasekden. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""Yettak-d tazelɣa yettwasekles s ussuɣel n yal amyag s 5 deg usekkil.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,kab_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels d taggayt i yettawin tazelɣa yerna ad d-yerr tazelɣa mebla tilelliyin. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,kab_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Err-d tidet ma yella kra n yiṭṭunen deg umuɣ l llan ddaw n tewwurt t. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,kab_Latn,python,"

def add(x: int, y: int):
    """"""Rnu sin n yiṭṭunen x d y >>> rnu ((2, 3) 5 >>> rnu ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,kab_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Sseḥbes ma sin wawalen sɛan kra n yimyura yemgaraden. >>> same_chars (('eabcdzzzz', 'dddzzzzzzzddeddabc') True >>> same_chars (('abcd', 'dddddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddddabc') False >>> same_chars (('abcdd', 'dddddddabddce') False >>> same_chars (('eabcdzzzz', 'dddzzzzzzzddabddc') False """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,kab_Latn,python,"

def fib(n: int):
    """"""Err-d amḍan n-is n Fibonacci. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,kab_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets d tazelɣa n ""<"" d "">"". return True ma yella yal bracket n ldif yesɛa bracket n taggara. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,kab_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,kab_Latn,python,"

def common(l1: list, l2: list):
    """"""Ad d-yerr isekkilen imdanen yemgaraden i sin n yisteqsiyen. >>> amgarad (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> amgarad (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,kab_Latn,python,"

def largest_prime_factor(n: int):
    """"""Err-d amḍan amezwaru meqqren n n. Ad d-nini n > 1 yerna mačči d amḍan amezwaru. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,kab_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n d taggayt i d-yettakken amger n yiṭṭunen seg 1 ar n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,kab_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets d tazelɣa n ""("" d "")"". return True ma yella yal bracket n ldif yesɛa bracket n taggara. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() "") True >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,kab_Latn,python,"

def derivative(xs: list):
    """"""xs d imseɣwan n usekkil. xs[0] + xs[1] * x + xs[2] * x^2 + .... Err-d tasekkilt n usekkil-a s talɣa-nniḍen. >>> tasekkilt (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> tasekkilt ([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,kab_Latn,python,"

def fibfib(n: int):
    """"""Tazrawt n uṭṭunen n FibFib d tizrawt i d-yettemcabin i tezrawt n Fibbonacci yettwasbedden akken i d-iteddun: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Ttxil-k, aru-d tazelɣa akken ad tesseḥseb s lfayda agejdan n-asentel n n n n n tazrawt n uṭṭunen n fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,kab_Latn,python,"
FIX = """"""Aru-d tazmilt vowels_count i yettaṭṭafen tazelɣa i d-yeskanen awal d asnulfu, yerna ad d-yerr amḍan n yiwalen yellan deg tazelɣa-ya. Iwalen deg tegnit-a d 'a', 'e', 'i', 'o', 'u'. Da, 'y' d awwal daɣen, maca ala ma yella deg taggara n wawal-nni i d-yefka. Amedya: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Rnu-d ugar n yimenɣiyen n ukayad.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,kab_Latn,python,"
def circular_shift(x, shift):
    """"""Aɣawas n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n y""""""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,kab_Latn,python,"
def digitSum(s):
    """"""Taɣult Tira n taggayt i yettakken ameslay d asekkil, yerna ad d-yerr aneggaru n yisekkilen n ufella kan n yisem n usekkil ASCII. Imedyaten: digitSum ((("""") => 0 digitSum (((""abAB"") => 131 digitSum (((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,kab_Latn,python,"
def fruit_distribution(s,n):
    """"""Deg uxeddim-a, ad ak-d-tefk yiwet n tsekla i d-yeskanen acḥal n tteffaḥ d tferkacin i d-yettwaḍfen deg yiwen n uḍebsi n lfakya i d-yezgan deg uḍebsi-yagi n tteffaḥ, tiferkacin d lfakya n lmanaɣ. Ma d-tefka-d tsekla i d-yeskanen agraw n tferkacin d tferkacin d yiwen n ugraw i d-yeskanen agraw n lfakya deg uḍebsi, err-d agraw n lmanaɣ deg uḍebsi-yagi. amedya: fruit_distribution""5(teffaḥ d 6 n tferkacin"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 tteffaḥ d 1 n tferkacin"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 tteffaḥ d 3 n tferkacin"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 tteffaḥ d 1 n tferkacin"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,kab_Latn,python,"
def pluck(arr):
    """"""""Ma yella yella-d yiwen n useklu i d-yettakken taferka n ttejra yesεan imḍanen ur nelli ara d imegger, aɣilif-ik ad d-teṭṭef yiwen seg yimḍanen-nni, ad t-id-teqqel. Ma yella afen-d aṭas n yimḍanen yesεan azref amecṭuḥ amecṭuḥ, ad d-teqqel tzelɣa yesεan agemmay amecṭuḥ. Ma ulac azref amecṭuḥ neɣ ma yella useklu-nni d ilem, ad d-teqqel []. Amedya 1: Asekcem: [4,2,3] Asekcem: [2, 1] Asekcem: 2 yesεa azref amecṭuḥ, 2 yesεa agemmay amecṭuḥ. Amedya 2: Asekcem: [1,2,3] Asekcem: [2, 1] Asekcem: 2 yesεa agemmay amecṭuḥ, 2 yesεa agemmay amecṭuḥ. Amedya 3: Asekcem: [] Asekcem: [4: [5, 3, 4, 2] Asekcem: [0, 0] Asekcem: 1 yesεa agemmay amecṭuḥ amecṭuḥ amec amec amecṭuḥ, maca azal amec amec amecṭuḥ amec amec amec amec amec amec amec amec amecṭuḥ: 0 = 0 * Asekcem: * Asekcem amec amec amecṭuḥ amec amec amec amec amec amec amec amec amec amec amec amecṭuḥ amec: 1 * Asekcem amec amec amec amec amec amecṭuḥ amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec amec ame""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,kab_Latn,python,"
def search(lst):
    '''Yewwi-d yiwen n umuɣ n imḍanen imeggura ur nelli d ilem. Err-d amḍan ameqqran i d-yugaren azref, yerna yesεa tazzla meqqren neɣ amedya n wazal-is. Tazzla n umḍan d acḥal n tikkal i d-yettban deg umuɣ. Ma ulac wazal am wa, rnu -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,kab_Latn,python,"
def strange_sort_list(lst):
    '''Ma d-tefkaḍ-d umuɣ n imḍanen imdanen, ad d-teqqel umuɣ s talɣa ur nḥeqqir ara. Aḥeqqir ur nḥeqqir ara, d mi ara tebduḍ s wazal amecṭuḥ, syin d wazal ameqqran n imḍanen i d-yeqqimen, syin d wazal amecṭuḥ, akka i d-yettkemmil. Imedyaten: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,kab_Latn,python,"
def triangle_area(a, b, c):
    '''Ma yella d tiɣawsiwin n tlata n yiɣallen n ttriṭ, ad d-yerr amḍiq n yiɣallen n ttriṭ s 2 n yiɣallen n tuɣalin ma yella tlata n yiɣallen-nni d tiɣawsiwin n ttriṭ. Ma ulac, ad d-yerr -1 Tlata n yiɣallen i d-yettakken tiɣawsiwin n ttriṭ ma yella tajumma n sin n yiɣallen i d tameqqrant ɣef yiɣil wis tlata. Amedya: triangle_area (aṭriṭ 3, 4, 5) == 6.00 triangle_area (aṭriṭ 1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,kab_Latn,python,"
def will_it_fly(q,w):
    '''Aru-d tazelɣa i d-yettaken tidet ma yella abeddel q ad yefru, d lekdeb ma ulac. Abeddel q ad yefru ma yella yesɛan azref (d umuɣ n palindrom) d akken amger n yiferdisen-is meẓẓi neɣ am wazal n wazal n wazal n wazal w. Amedya: will_it_fly (([1, 2], 5) â -> Lekdeb # 1+2 meẓẓi ɣef wazal n wazal n wazal, maca ur yesɛi azref. will_it_fly (([3, 2, 3], 1) â -> Lekdeb # yesεa azref, maca 3+2+3 yugar azref amatu. will_it_fly (([3, 2, 3], 9) â -> Tikka 3+23 meẓẓi ɣef wazal amatu, dɣa d azref. will_it_fly ((([3], â 5) -> Tikka 3 meẓẓi ɣef wazal amatu, dɣa d azref. '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,kab_Latn,python,"
def smallest_change(arr):
    """"""Aɣawas n yiɣallen imeggura, af-d ameẓyan n yiɣallen i ilaqen ad beddlen akken ad yili uḍris-a d win n yiɣallen imeggura. Aɣawas n yiɣallen imeggura d yiwen n uḍris i yettwaɣran akken i yella uqbel d deffir. Deg yiwen n ubeddel, tzemreḍ ad tbeddleḍ yiwen n yiɣil ɣer wayeḍ. Amedya: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,kab_Latn,python,"
def total_match(lst1, lst2):
    '''Aru-d yiwet n taggayt ara iqeblen sin n yisteqsiyen n tseddarin, ara d-yerren asmel ideg ara yili uṭṭun n yimyagen deg yal asnas n usmel-nni, ad yili drus ɣef wayeḍ. ma yella snat n yisteqsiyen s waṭas n yimyagen, err-d asmel amezwaru. Imedyaten total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4']) ].'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,kab_Latn,python,"
def is_multiply_prime(a):
    """"""Aru-d taggayt ara d-yerren tidet ma yella uṭṭun-nni yettwafken d amyiger n 3 n yiṭṭunen imezwura d lekdeb ma ulac. Mi nessen belli (a) meẓẓiy ugar n 100. Amedya: is_multiply_prime ((30) == Tidet 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,kab_Latn,python,"
def is_simple_power(x, n):
    """"""Tazrawt-ik d tira n tseddart ara d-yerren tidet ma yella uṭṭun x d tazmert tamezwarut n n d lekdeb deg tegnatin nniḍen. x d tazmert tamezwarut n n ma yella n**int=x Amedya: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,kab_Latn,python,"
def iscube(a):
    '''Aru-d taggayt i yettawin amḍan amatu a yerna ad d-yerr tidet ma yella amḍan-a d amḍan n kra n umḍan amatu. Tabrat: tzemreḍ ad d-tiniḍ d akken aselkim yezga d aḥeqqani. Imedyaten: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,kab_Latn,python,"
def hex_key(num):
    """"""Tella-d tmeɣna i wakken ad taruḍ taggayt ara d-yeṭṭfen amḍan s tzeṭṭa n yisekla d-yettḥesben acḥal n yiẓuran s tzeṭṭa n yisekla yellan d imenzayen (aṭṭas d ameqqran, d amḍan anṣib meqqren ɣef 1 ur d-yeqqim ara d amur n sin n yiẓuran imenzayen). Iẓuran s tzeṭṭa n yisekla d 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Iẓuran imenzayen d 2, 3, 5, 7, 11, 13, 17,... Ihi ilaq ad d-tefkeḍ acḥal n yiẓuran i d-iteddun: 2, 3, 5, 7, B (=adegmal 11), D (=adegmal 13). Aseɣzi: yezmer ad d-tiniḍ d akken amḍan d win n tidet neɣ d win d ilem, yerna isekkilen A,B,C,D,E,F, d imḍanen s tzeṭṭa d imenzayen. Amedyaten: I num = AB, ad d-yeffeɣ num = 1.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,kab_Latn,python,"
def decimal_to_binary(decimal):
    """"""Ad ak-d-yefk uṭṭun deg talɣa n tenzeɣt, d ccɣel-ik ad t-id-tbeddleḍ ɣer talɣa n tbinarit. Tazrawt ilaq ad d-teqqel d tazelɣa, yal agemmay ad d-yerr agemmay n tbinarit. Yal agemmay deg tazelɣa ad yili d '0' neɣ '1'. Ad ilin kra n yegzem n yegzem 'db' deg tazwara d taggara n tazelɣa. Agemmay-nni n wegzem ad yili akken ad d-yefk afus deg talɣa. Imedyaten: decimal_to_binary ((15) # ad d-yerr ""db1111db"" decimal_to_binary32) # ad d-yerr ""db100000db"" """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,kab_Latn,python,"
def is_happy(s):
    """"""Tettunefk-ak-d tazelɣa s. Ahil-ik d ad tesmektiḍ ma yella tazelɣa-nni d tamegraḥt neɣ ala. Tazelɣa d tamegraḥt ma teɣzi-s d 3 neɣ ugar, ma yal 3 n yisekkilen i d-iteddun mgaraden. Amedya: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,kab_Latn,python,"
def numerical_letter_grade(grades):
    """"""D imalas aneggaru n usemres, aselmad ilaq ad yefk tiqṛaɛin i yinelmaden. Aselmad yella ixeddem aswir-is i usemres. Aɣbel kan, tufi-d aswir i tessexdam i usemres. Tefka-ak-d umuɣ n tmagit n kra n yinelmaden, ilaq ad taruḍ tazelɣa i yezmer ad d-yefk umuɣ n tiqṛaɛin n tebratin s useqdec n uḍebsi-a: Tmagit.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,kab_Latn,python,"
def prime_length(string):
    """"""Aru-d taggayt i yettawin tazelɣa n tsenselkimt, ad d-teqqel d tidet ma yella teɣzi n tsenselkimt d amḍan amezwaru neɣ d lekdeb ma ulac. Imedyaten prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,kab_Latn,python,"
def starts_one_ends(n):
    """"""Ma yella-d yiwen n uṭṭun imdanen amesbaṭli n, rnu-d amḍan n uṭṭunen imesbaṭliyen n-aḍrisen i yebdan neɣ i ifukknen s 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,kab_Latn,python,"
def solve(N):
    """"""Ma yella N d amḍan amesbaṭli, rnu-d agraw n yiɣallen-is s tbinarit. Amedya: Ma yella N = 1000, agraw n yiɣallen ad yili d 1, asalu ad yili d ""1"". Ma yella N = 150, agraw n yiɣallen ad yili d 6, asalu ad yili d ""110"". Ma yella N = 147, agraw n yiɣallen ad yili d 12, asalu ad yili d ""1100"". Imgirra: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. Asalu: tazelɣa n uṭṭun abinar """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,kab_Latn,python,"
def add(lst):
    """"""Ma yella-d umuɣ n imḍanen imeggura ur nelli d ilem, rnu-d imḍanen imeggura yellan deg imḍanen imeggura. Amedyaten: rnu-d ([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,kab_Latn,python,"
def anti_shuffle(s):
    """"""Aru-d taggayt ara yeddun s uswir n uswir d win ara d-yerren amyag n uswir. Amyag n uswir d aswir anda akk awalen (yettwafernen s umḍiq) ttwasbeddlen s wawal amaynut anda akk isekkilen ttwasbeddlen s uswir ara d-yekkren ɣef leḥsab n wazal ascii. Tabrat: Ilaq ad teṭṭfeḍ anagraw n wawalen d yimukan d ilelliyen deg tefyirt. Amedya: anti_shuffle ((('Hi') ad d-yerr ""Hi' anti_shuffle ((('hello') ad d-yerr ""ehllo' anti_shuffle (('Hello World!!!') ad d-yerr ""Hello !!!Wdlor"" """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,kab_Latn,python,"
def get_row(lst, x):
    """"""Tettunefk-akent-d yiwet n teẓrigt n 2 n tneqqiḍin, am tsekla iqqenen, i d-yettakken am matrix, maca, ur am matrix, yal tazelɣa tezmer ad tesεu agdud yemgaraden n yiɣallen. Ma yella lst, d uṭṭun n umdan x, af-d iqqen x deg tsekla, d as-d-yerr umuɣ n yiɣallen, [(x1, y1), (x2, y2) ...] akken yal tuple d aswir - (tazelɣa, tiɣawsiwin), yebda s 0. Ssegret-d tiɣawsiwin s imiren s imiren s usnerni. Ula d tiɣawsiwin n tazelɣa s tiɣawsiwin s usnerni s usnerni. Amedyaten: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 0, 1, 4], 0 (2, 5), (2, 0, 0] get_(1), 1) [] ==_[_[[tazelɣa [1], 2], 3]], 2]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,kab_Latn,python,"
def sort_array(array):
    """"""Ma yella-d yiwen n usebter n imḍanen ur nelli ara d imegger, rnu-d tikci n usebter-nni i d-yettunefken deffir n useggem, ad tesseggem asebter-nni i d-yettunefken s talɣa tazzlant ma yella tajumma n uḥric amezwaru n useggem, d tameggarut n useggem) d tin ur nelli ara, neɣ ad t-tesseggem s talɣa tazzlant ma yella tajumma n uḥric amezwaru n useggem, d tameggarut n useggem) d tin ur nelli ara. Tagnit: * ur ttbeddil ara asebter i d-yettunefken. Amedya: * sort_array[(]) => [] * sort_array[([2, 4, 3, 0, 1, 2, 3, 4, 5]) => [6, 5, 4, 3, 2, 1, 5, 6])  0""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,kab_Latn,python,"
def encrypt(s):
    """"""Snulfu-d taggayt encrypt ara yawin tazelɣa d amyag, ara d-yerren tazelɣa yettwasekles s usekles n ulettab. Alettab ilaq ad d-yettwasekles akken ad d-rren isekkilen s sin i sin n yimukan. Amedya: encrypt (('hi') ad d-yerr 'lm' encrypt (('asdfghjkl') ad d-yerr 'ewhjklnop' encrypt (('gf') ad d-yerr 'kj' encrypt (('et') ad d-yerr 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,kab_Latn,python,"
def next_smallest(lst):
    """"""Ttwaf-ak-d umuɣ n imḍanen. Aru-d taggayt next_smallest (() ara d-yerren amur wis sin n umḍan amecṭuḥ deg umuɣ. Ur d-yettak ara None ma ulac amur am wa. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,kab_Latn,python,"
def is_bored(S):
    """"""Ad ak-d-tefk yiwet n tsekla, d ccɣel-ik ad d-tesseḥseb acḥal n wawalen i yesεan tamegra. Tamegra d tafyirt i yebdan s wawal ""I"". Tifyirin ttwaḥebsent s '.', '?' neɣ '!'. Amedya: >>> is_bored ((""A azul amaḍal"") 0 >>> is_bored ((""Agen d azegzaw. Iṭij yettfeǧǧiǧ. Ḥemmleɣ lḥal-a"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,kab_Latn,python,"
def any_int(x, y, z):
    '''Snulfu-d taggayt i yettawin 3 n yiṭṭunen. Ad d-yerr tidet ma yella yiwen seg yiṭṭunen yemcabi ɣer uqqur n sin nniḍen, yerna iṭṭunen akk d imdanen. Ad d-yerr lekdeb deg kra n tegnatin nniḍen. Imedyaten any_int ((5, 2, 7) â -> True any_int ((3, 2, 2) â -> False any_int ((3, -2, 1) â -> True any_int ((3.6, -2.2, 2) â -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,kab_Latn,python,"
def encode(message):
    """"""Aru-d taggayt ara yawin izen, ara t-yessekren akken ad ibeddel amkan n yal tabrat, ad ibeddel akk imeslayen n usekkil s tebrat ara d-yeffɣen 2 n yimukan zdat n usekkil-nni deg usekkil n teglizit. Sekkil kan i yemyura. Imedyaten: >>> encode('test') 'TGST' >>> encode('D wa i d izen') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,kab_Latn,python,"

def skjkasdkd(lst):
    """"""Ad ak-d-yefk umuɣ n yijjen uṭṭun. Ilaq ad d-tafeḍ azal ameqran n uṭṭun amezwaru u ad d-teqqleḍ amger n yijjen-is. Amedya: I lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3], ad yili 10 I lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1], ad yili 25 I lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3], ad yili 13 I lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6], ad yili 11 I lst = [0,81,12,31,21], ad yili 3 I lst = [0,1,8,2,1,7], ad yili 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,kab_Latn,python,"
def check_dict_case(dict):
    """"""Ma yella yella-d amawal, ad d-yerr Tidet ma yella akk isura-nni d tiɣriwin s imesli amecṭuḥ neɣ ma yella akk isura-nni d tiɣriwin s imesli ameqqran, ma ulac ad d-yerr Tidet. Tazrawt ilaq ad d-terr Tidet ma yella amawal-nni yefka d ilem. Imedyaten: check_dict_case{""a"":""apple"", ""b"":""banana""}) ilaq ad d-yerr Tidet. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) ilaq ad d-yerr Tidet. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) ilaq ad d-yerr Tidet. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) ilaq ad d-yerr Tidet. check_dict_case{""NC:""STATE"", ""Z"":""IP"":""45"") ilaq ad d-yerr Tidet.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,kab_Latn,python,"
def count_up_to(n):
    """"""Sseḍfar-d taggayt i yettaṭṭafen amḍan ur nelli d amgerḍan, yerna ad d-yerr amḍan n imḍanen imezwura n imezwura i yellan d imḍanen imezwura yerna meẓẓiyen ɣef n. amedya: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,kab_Latn,python,"
def multiply(a, b):
    """"""Sekkes-d tansa i d-yettawin sin n yiferdisen imdanen, yerna ad d-yerr amur n yiferdisen n tnefrint-nsen. Ad d-nini d akken ayen i d-yettwasekcem yezga d aḥeqqani. Imedyaten: uεeddi ((148, 412) ilaq ad d-yerr 16. uεeddi ((19, 28) ilaq ad d-yerr 72. uεeddi ((2020, 1851) ilaq ad d-yerr 0. uεeddi ((14,-15) ilaq ad d-yerr 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,kab_Latn,python,"
def count_upper(s):
    """"""S umyag s, ḥesbeḍ-d acḥal n tzelɣa timqranin i yellan deg isekkilen imenzayen. Amedya: count_upper (('aBCdEf') ad d-yerr 1 count_upper (('abcdefg') ad d-yerr 0 count_upper (('dBBE') ad d-yerr 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,kab_Latn,python,"
def closest_integer(value):
    '''Snulfu-d taggayt i yettaṭṭafen azal (aḥric) i d-yettakken agerdas, yerna ad d-yerr agerdas i d-yezzin ɣer-s. Ma yella agerdas-nni yebɛed ɣef sin n igmaḍ, ssemɣur-it ɣef 0 . Amedyaten >>> nearest_integer (((""10"") 10 >>> nearest_integer ((""15.3"") 15 Tabdart: Assemɣur ɣef 0 yeqqar-d belli ma yella agerdas-nni yettunefk yebɛed ɣef sin n igmaḍ, win i ilaq ad d-yerr d win i d-yebɛen akk ɣef 0 . I lemtel: nearest_integer "" ((14.5"") ilaq ad d-yerr 15 ma d nearest_integer "" ((-14.5"") ilaq ad d-yerr -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,kab_Latn,python,"
def make_a_pile(n):
    """"""Ma yella d amḍan n, ilaq ad d-tgeḍ yiwen n uḥric n yiẓuran. Aḥric amezwaru yesɛa n yiẓuran. Amḍan n yiẓuran deg uḥric i d-iteddun d: - amḍan ur n-yettwassen ma yella n d win ur n-yettwassen. - amḍan i d-iteddun ma yella n d win ur n-yettwassen. Err-d amḍan n yiẓuran deg yal uḥric deg yiwet n tsekla, anda agemmay deg usebter i d amḍan n yiẓuran deg uḥric (i+1). Imedyaten: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,kab_Latn,python,"
def words_string(s):
    """"""Ad ak-d-yefk yiwen n uḥric n wawalen i d-yettwaferren s yimyagen neɣ s yimukan. Ahil-ik ad yefreq uḥric-nni ɣer wawalen u ad d-yerr yiwen n usebter n wawalen. Amedya: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,kab_Latn,python,"
def choose_num(x, y):
    """"""Tazrawt-a tettarra sin n yiṭṭunen imeggura x d y, tettak-d amḍan ameqqran ameqqran yellan deg uzal [x, y] s umata. Ma ulac amḍan am wa, ihi tazmart ilaq ad d-teqqel -1. Amedya: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,kab_Latn,python,"
def rounded_avg(n, m):
    """"""Ttwafent-akent snat n tzelɣiwin n umgerrad n u m, d ccɣel-nkent ad tesseḥseb tajumma n umgerrad n umgerrad n u m (am n d m). Sqemlet tiririt ar uṭṭun ameqqran i d-yusan u beddlet-tt ɣer tin n tbinar. Ma n meqqer ɣef m, rnut -1. Amedya: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,kab_Latn,python,"
def unique_digits(x):
    """"""Iwakken ad d-yefk umuɣ n yisem n yijjen umḍan x, ad d-yerr umuɣ n yisem n yijjen umḍan ur nesɛi ara amḍiq. Tabdart: Umuɣ-a i d-yerran ilaq ad yettwaseggem s uswir ara d-yettnernin. Amedya: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,kab_Latn,python,"
def by_length(arr):
    """"""Ma d-yefka-d yiwen n usebter n yijjen uṭṭun, sserseḍ-d imḍanen yellan gar 1 d 9 s umata, sserseḍ-d aselkem-nni i d-yeffɣen, syin rnu-d yal aṭṭun s yisem-is yemsefhamen seg "" Yiwen"", "" Sin"", ""Tlata"", ""Rebɛa"", ""Six"", ""Six"", ""Tamsirt"", ""Tamsirt"". Amedya: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sserseḍ arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> sserseḍ arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Tamsirt"", ""Rebɛa"", ""Tri"", ""Ssin"", ""Tri"", ""Ssin"", ""Yeddid"", ""Yeddid""] Ma yella usebter d ilem, sserseḍ-d aselkem: arr = [] return [] Ma yella aselkem yesɛa kra n uṭṭun ur neẓri, ur t-ttḥessis ara: arr = [1, -1, -1, -1] arr -> [1, -1] arr -> [1, -1, -5]""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,kab_Latn,python,"
def f(n):
    """"""Sseḍfar-d tansa f i yettawin n d amatar, yerna ad d-yerr umuɣ n teɣzi n, akken azal n uḥric deg usebter i ad yili d amur n i ma yella i d amur neɣ d agraw n yiṭṭunen seg 1 ar i ma ulac. i yebda seg 1. amur n i d amur n yiṭṭunen seg 1 ar i (1 * 2 * ... * i). Amedya: f ((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,kab_Latn,python,"
def even_odd_palindrome(n):
    """"""Ma yella d amḍan n uṣeggem, rnu-d yiwen n uḥric n uḥric n uṣeggem yesεan amḍan n imḍanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen imdanen im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im im""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,kab_Latn,python,"
def count_nums(arr):
    """"""Aru-d tanzeɣt count_nums i yettaṭṭafen amyag n imdanen imdanen, yerna ad d-yerr amḍan n yiɣawasen i yesεan amger n yiɣawasen > 0. Ma yella amḍan d amger, ihi amger-is amezwaru ad yili d amger: amedya -123 yesεa iɣawasen -1, 2, d 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,kab_Latn,python,"
def move_one_ball(arr):
    """"""Deg uswir-a, ad d-yili uswir n uswir n uswir n uswir n uswir n uswir n uswir n uswir n uswir. Ma yella d aswir n uswir n uswir n uswir, ad d-yili uswir n uswir n uswir. Ma yella d aswir n uswir n uswir, ad d-yili uswir n uswir.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,kab_Latn,python,"
def exchange(lst1, lst2):
    """"""Deg wugur-a, ad tesseḍfarem yiwet n taggayt i d-yettawin sin n yisteqsiyen n yiṭṭunen, yerna ad d-yessukkes ma yella yezmer ad d-yeddu umsawal n yiɣawasen gar-asen akken ad d-yeffeɣ lst1 d widen n yiṭṭunen imgaraden kan. Ulac azref ɣef waṭṭun n yiɣawasen yettwaṣṣanen gar lst1 d lst2. Ma yella yezmer ad d-yessiweḍ umsawal gar lst1 d lst2 akken ad d-yeffeɣ akk yiɣawasen n lst1 d imgaraden, rren ""YES"". Ma ulac, rren ""NO"". Amedya: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Yettwaḥsab belli isefka n usekkil ur d-ilan d ilem. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,kab_Latn,python,"
def histogram(test):
    """"""Ma yella yella-d yiwen n uḥric yesεan amyag gar yisekkilen imecṭaḥ, rnu-d amawal n ugaruf s waṭas n tikkal, s waṭas n yimeslayen i d-yettakken. Amedya: asekkil n uḍris (histogram) (('a b c') == {'a': 1, 'b': 1, 'c': 1} asekkil n uḍris (histogram) (('a b b a') == {'a': 2, 'b': 2} asekkil n uḍris (histogram) (('a b c a b') == {'a': 2, 'b': 2} asekkil n uḍris (histogram) (('b b a') == {'b 4}': asekkil n uḍris (histogram')) == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,kab_Latn,python,"
def reverse_delete(s,c):
    """"""Tazrawt n usebter s d c, ilaq ad tesseɣzeḍ akk isekkilen deg s i d-yettemcabin ɣer kra n usekkil deg c, syin ad tmuqleḍ ma yella asekkil n usekkil d asekkil n usekkil. Asekkil yettusemman asekkil n usekkil ma yella yettwaɣ-d am win n usekkil ɣer deffir am win n usekkil ɣer zdat. Ilaq ad d-terreḍ asekkil yesɛan asekkil n usekkil d Tidewt/Tidett i usekkil. Amedya: s = ""abcde"", c = ""ae"", asekkil ilaq ad yili ('bcd',Tidett) S = ""abcdef"", c = ""b"", asekkil ilaq ad yili ('acdef',Tidett) S = ""abcdedcba"", c = ""ab"", asekkil ilaq ad yili ('cdedc',Tidett)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,kab_Latn,python,"
def odd_count(lst):
    """"""Ma yella-d umuɣ n tsekla, anda yal tsekla tesɛa kan imḍanen, rnu-d umuɣ. Yal aḥric i n usefru ilaq ad yili d ""aṭṭas n yiḥricen ur nelli deg tsekla i n usefru"". anda i ilaq ad rren akk i s waṭṭas n yimḍanen ur nelli deg tsekla i' n usefru. >>> odd_count['1234567']) [""aṭṭas n yiḥricen ur nelli 4n i str4ng 4 n 4nput.""] >>> odd_count['3',""111111""]) [""aṭṭas n yiḥricen ur nelli 1n i str1ng 1 n 1nput."", ""aṭṭas n yiḥricen ur nelli 8n i str8ng 8 n 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,kab_Latn,python,"
def minSubArraySum(nums):
    """"""Ma yella-d yiwen n usekles n imḍanen imeggura n, af-d agraw amecṭuḥ n kra n usekles n imḍanen ur nelli d ilem. Amedya minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,kab_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Yal tazelɣa tesɛa amger n waman, yal amger yesɛa amger n waman, yal amger yesɛa amger n waman, yal amger yesɛa amger n waman, yal amger yesɛa amger n waman. Tazrawt-ik d asekkil n waman i usekkil n waman. Sekkil n waman i usekkil n waman. Sekkil n waman i usekkil n waman. Sekkil n waman i usekkil n waman. Sekkil n waman i usekkil n waman. Sekkil n waman i usekkil n waman. Sekkil n waman i usekkil n waman i usekkil n waman. Sekkil n waman i usekkil n waman i usekkil n waman. Sekkil n waman i usekkil n waman i usekkil n waman. Sekkil n waman i usekkil n waman i usekkil n waman. Sekkil n waman i usekkil n waman i usekkil n waman. Sekkil n waman i usekkil n waman i usekkil n waman i usekkil n waman.""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,kab_Latn,python,"
def sort_array(arr):
    """"""Deg Kata-yagi, ilaq ad tessegrayem yiwen n usebter n yiɣallen imdanen ur nelli ara d imegger ɣef leḥsab n waṭṭas n win yellan deg usebter-nsen abinar s talɣa tamerḍant. I waṭṭas am wa n win, sserseɣ ɣef leḥsab n waṭṭas n tenzeɣt. Ilaq ad yettwaseggem akka: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,kab_Latn,python,"
def select_words(s, n):
    """"""Ma yella s d amyag, ad d-tefk-d talɣa i wawalen s amyag s, ma yella s d ilem, ad d-tefk-d talɣa i wawalen s. Amedya: ""Mary had a little lamb"", 4) ==> [""little""] select_words ""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words ""simple white space"", 2) ==> [] select_words ""Hello world"", 4) ==> [""world""] select_words ""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,kab_Latn,python,"
def get_closest_vowel(word):
    """"""Tettunefk-ak awal. Ahil-ik d ad d-tafeḍ taḥerrit i d-yezgan gar snat n tmeslayin seg tama tayeffust n wawal (tettḥezzeb s usekkil). Iḥerran deg tazwara d taggara ur ttwaḥsabent ara. Err-d taḥerrit d tilemt ma ur d-tafeḍ ara ula d yiwet n taḥerrit i yessawḍen talɣa-nni i d-yusan. Yezmer ad d-tiniḍ belli taḥerrit-nni i d-yettunefken deg-s ala tabrat n teglizit. Amedya: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""UULL"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,kab_Latn,python,"
def match_parens(lst):
    '''Tettawi-d yiwet n tsekla n sin n yiferrawen, sin-nni n yiferrawen s wazal n '(' neɣ ') ' kan. Ahil-ik d ad tesmektiḍ ma yella yezmer ad t-tessekcem snat n yiferrawen s kra n talɣa, akken tazelɣa ara d-yeffɣen ad tili telha. Tazelɣa S tettwaḥseb d telha ma yella d ala ma yella akk tizelgiwin deg S llant. Amedya: tazelɣa '((()) ' telha, ma d tazelɣa '()) ' xaṭi. Err 'Ih' ma yella wamek ara d-tgeḍ tazelɣa yelhan, u rrek 'Ala' ma ulac. Amedyaten: match_parens[('() ', ') ']) == 'Ih' match_parens[(') ', ') ']) == 'Ala' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,kab_Latn,python,"
def maximum(arr, k):
    """"""Ma yella-d yiwen n urti n yiɣallen imeggura d yiwen n uṭṭun imeggura am win n k, rnu-d yiwet n tsekla n teɣzi n k s wazal n k n yiɣallen deg urti. Amedya1: Asekles: arr = [-3, -4, 5], k = 3 Asekles: [-4, -3, 5] Amedya2: Asekles: arr = [4, -4, 4], k = 2 Asekles: [4, 4] Amedya3: Asekles: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Asekles: [2] Tabdart: 1. Taɣzi n urti ad tili deg waṭas n [1, 1000]. 2. Iɣallen deg urti ad ilin deg waṭas n [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,kab_Latn,python,"
def solution(lst):
    """"""Ma yella yella-d umuɣ n imḍanen ur nelli d ilem, rnu-d agraw n yal yiwen seg yimḍanen ur nelli d imḍanen i yellan deg imukan imdanen.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,kab_Latn,python,"
def add_elements(arr, k):
    """"""Ma yella yiwen n urag n imdanen imeqqranen arr d yiwen n umdan ameqqran k, rnu-d agraw n yiferdisen s sin n yiferdisen seg k n yiferdisen imezwura n arr. Amedya: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,kab_Latn,python,"
def get_odd_collatz(n):
    """"""Ma yella d amatar n uṣeggeḍ, rnu-d umuɣ n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem n yisem""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,kab_Latn,python,"
def valid_date(date):
    """"""Ilaq ad taruḍ taggayt ara yesbeggnen azref n ussan yettwafken, ad d-yerr tidet ma yella azref-nni d azref neɣ d lekdeb. Azref-nni d azref ma yella akk ilugan-agi i d-iteddun: 1. Azref n ussan ur yelli d ilem. 2. Uṭṭun n wussan ur yugar ara 1 neɣ 31 n wussan i wagguren 1,3,5,7,8,10,12. Uṭṭun n wussan ur yugar ara 1 neɣ 30 n wussan i wagguren 4,6,9,11. Uṭṭun n wussan ur yugar ara 1 neɣ 29 i waggur 2. 3. Uṭṭun n wagguren ur ilaq ara ad yugar 1 neɣ 12. 4. Azref-nni ilaq ad yili deg umezgun: mm-dd-yyyyyy amedya: valid_date (('03-11-2000') => true_date (('15-01-2012') => false_date (('04-040') => false_date (('06-04-2020') => true_date (('06-04/2020')  => false""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,kab_Latn,python,"
def split_words(txt):
    '''Ma yella kra n wawalen, rnu-d umuɣ n wawalen i yebḍa ɣef umkan, ma ulac imukan deg uḍris ilaq ad t-bḍuḍ ɣef imrujen ',' ma ulac imrujen ilaq ad d-terreḍ agdud n yisebtar imecṭaḥ s talɣa ur nḥeqqi deg uḍris, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 Imedyaten split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,kab_Latn,python,"
def is_sorted(lst):
    '''Ma yella yella-d umuɣ n yiṭṭunen, ad d-yerr ma yella ttwaseggem s useggem i d-yettalin. Ma yella umuɣ-nni yesεa ugar n 1 n yimḍebbren n yiwen uṭṭun, ad d-yerr ""Tagut"". Ur ilaq ara ad d-yili uṭṭun ur nḥeqqi, d imḍebbren imeggura kan. Imedyaten d is_sorted (a) â -> True is_sorted (a) [1, 2, 3, 4, 5, 5]) â -> True is_sorted (a) [1, 2, 3, 4, 5, 6]) â -> True is_sorted (a) [1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (a) [1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (a) [1, 2, 2, 3, 3, 4] â -> True is_sorted (a) [1, 2, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,kab_Latn,python,"
def intersection(interval1, interval2):
    """"""Ttwafent-akent snat n tneqla, anda yal tneqla d yiwen n uḥric n imḍanen. Amedya, tneqla = (bdu, taggara) = (1, 2). Tneqla-yagi d tiɣremt, ayagi yeɛni d aswir (bdu, taggara) i d-yeṭṭfen tazwara d taggara. I yal tneqla, yettwaɣil aswir-is d win meẓẓiyen neɣ d win yemgaraden d taggara-is. Ahil-ik d ad tesneḍ ma yella teɣzi n tneqla n snat n tneqla-yagi d amḍan amezwaru. Amedya, amḍan n tneqla (1, 3), (2, 4) d (2, 3) yesɛan teɣzi n 1, ur d amḍan amezwaru. Ma yella teɣzi n tneqla d amḍan amezwaru, rret ""IH"", ma ulac, rret ""UHU"". Ma yella snat n tneqla-yagi ur ttemsefḍent ara, rret ""UHU"". [input/output] samples: intersection ((1, 2), (2, 3) ==> ""intersection ("", === ""intersection"", === ""intersection"", === ""intersection"", === ""intersection"", ==="", === ""intersection"", ==="", ==="", === ""intersection"", ==="", ==="", ==="", ==="", === ""intersection="", ==="", ==="", ==="", ==="", ==="", ==="", === """"""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,kab_Latn,python,"
def prod_signs(arr):
    """"""Tettawi-d yiwen n usebter n yiɣallen imeggura, ilaq ad d-terrem agraw n yiɣallen imeggura i d-yettwakksen s umyag n yal agraw deg usebter, yettwaskan s 1, -1 neɣ 0.""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,kab_Latn,python,"
def minPath(grid, k):
    """"""Ma yella-d yiwen n uḍebsi s N n yiferdan d N n yiɣallen (N >= 2) d yal tazeṭṭa n uḍebsi s wazal k, yal tazeṭṭa n uḍebsi tesɛa azal. Yal aḍebsi s wazal [1, N * N] s umata yettban yiwet n tikelt kan deg yiferdan n uḍebsi. Ilaq ad d-tafeḍ abrid amecṭuḥ n teɣzi n uḍebsi s wazal k deg uḍebsi. Tzemreḍ ad tebduḍ seg yal tazeṭṭa, yerna deg yal aḍebsi tzemreḍ ad tṛuḥeḍ ɣer yal tazeṭṭa taḥerfit, s wawal-nniḍen, tzemreḍ ad truḥeḍ ɣer yiferdan i d-yeqqnen i tzeṭṭa-k tazelgiwt. Ttxil ttwaliḍ belli abrid n teɣzi n uḍebsi s wazal k yeɛni ad d-tezziḍ swaswaḍ k n yiferdan (ur ilaq ad ilin yemgaren). Ur TEZMREƔ ara ad teffɣzeṭṭa.""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,kab_Latn,python,"
def tri(n):
    """"""Yal wa yessen taseklant n Fibonacci, llan wid i tt-yeɣran s waṭas deg tmatimatikt deg sin n yiseggasen ineggura. Maca ayen ur nessin ara d taseklant n Tribonacci. Taseklant n Tribonacci tettwaskan s usuli: tri(1) = 3 tri(n) = 1 + n / 2, ma yella n d amedya. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ma yella n d amedya. Amedya: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Tewwi-d-ak-d yiwen uṭṭun n umata ur nelli ara d amedya, ilaq ad d-terreḍ umuɣ n yiṭṭunen imezwura n n n + 1 n taseklant n Tribonacci. Amedya: tri(3) = [1, 3, 2, 8] """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,kab_Latn,python,"
def digits(n):
    """"""Ma yella yiwen n uṭṭun amatu n lεali, rnu-d amur n yiɣallen imeggaren. Rnu-d 0 ma llan akk yiɣallen imeggaren. Amedya: yiɣallen ((1) == 1 yiɣallen ((4) == 0 yiɣallen ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,kab_Latn,python,"
def is_nested(string):
    '''Snulfu-d taggayt ara d-yeṭṭfen am usekcem n tseddart i deg llan kan isekkilen imseqranen. Taggayt ilaq ad d-teqqel d Tideţ ma yella d asekkil n isekkilen i yellan deg-s ma drus yiwen n usekkil deg usekkil-nni. is_isekkilen '[[]]') â -> True is_isekkilen '[[]]]]]]]]][[[[[[]]') â -> False is_isekkilen '[][]') â -> False is_isekkilen '[]') â -> False is_isekkilen '[[]]') â -> True is_isekkilen '[[]]]]]]]] â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,kab_Latn,python,"

def sum_squares(lst):
    """"""Tettunefk-ak-d yiwet n tsekla n yiṭṭunen. Ilaq ad d-terreḍ agraw n yiṭṭunen i yedduklen deg tsekla-nni, ad tesneqleḍ yal aḥric deg tsekla-nni ɣer int {\\displaystyle \\mathbb {int} } ar ufella. Imedyaten: I lst = [1,2,3] ad yili d 14 I lst = [1,4,9] ad yili d 98 I lst = [1,3,5,7] ad yili d 84 I lst = [1.4,4.2,0] ad yili d 29 I lst = [-2.4,1,1] ad yili d 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,kab_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Snulfu-d taggayt ara d-yerren tidet ma yella azwel aneggaru n tewsit d azwel n ulettab ur yelli d aḥric n wawal, ma ulac ad d-yerr lekdeb. Tabrat: "" awal "" d agraw n yizerfan i d-yesseḍfaren s umḍiq. Imedyaten: check_if_last_char_is_a_letter (("" apple pie "") â -> False check_if_last_char_is_a_letter (("" apple pi e "") â -> True check_if_last_char_is_a_letter (("" apple pi e "") â -> False check_if_last_char_is_a_letter "" (("") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,kab_Latn,python,"
def can_arrange(arr):
    """"""Snulfu-d taggayt ara d-yerren amḍan meqqren n yiwen n uḥric ur yugar ara neɣ ur yennuɣ ara d uḥric i t-id-yellan srid. Ma ulac aḥric am wa, rnu -1. Amḍan-a ur d-yettawi ara imukan i d-yettwaɣalen. Imedyaten: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,kab_Latn,python,"
def largest_smallest_integers(lst):
    '''Snulfu-d taggayt ara d-yerren tuple (a, b), anda 'a' d ameqqran seg yiɣallen imeggura ixuṣlen, d 'b' d amecṭuḥ seg yiɣallen imeggura ixuṣlen deg umuɣ. Ma ulac yiɣallen imeggura neɣ imeggura, rnu-ten s None. Imedyaten: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,kab_Latn,python,"
def compare_one(a, b):
    """"""Snulfu-d taggayt i yettawin imḍanen imdanen, imḍanen i d-yettwaɣalen neɣ tiɣawsiwin i d-yettakken imḍanen n tidet, yerna ad d-yerr amḍan meqqren deg unamek-is amḍan. Ur d-yettak ara ulac ma yella imḍanen-nni mgaraden. Tabdart: Ma yella amḍan n tidet yettwaɣalen am tiɣawsiwin, tadimt i d-yettakken d tamegrawt, tezmer ad tili d . neɣ , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> Ulac """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,kab_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Sseḥbiber ma yella uṭṭun n yettunefken yezmer ad yettwaru d agraw n 4 n yiṭṭunen imegdayen imegdayen swaswa Amedya is_tusawal_s_tusawal_tusawal_tusawal_tusawal_tusawal_tusawal) == D tidet """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,kab_Latn,python,"
def special_factorial(n):
    """"""Tafaska n brazil tettwassen s: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! anda n > 0 Amedya: >>> special_factorial ((4) 288 Tafaska ad d-teṭṭef amatar amatu am usekcem, yerna ilaq ad d-teqqel d tafaska tamagdayt n umatar-a. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,kab_Latn,python,"
def fix_spaces(text):
    """"""_ Amedya-3 yiwen n uḍris n tsekla, rnu-d akk imukan deg-s s yimyagen n ddaw, ma yella-d yiwen n uḍris yesɛa ugar n 2 n yimyagen i d-yeddun, rnu-d akk imyagen i d-yeddun s - fix_spaces ((""Example"") == ""Example"" fix_spaces ((""Example1"") == ""Example_1"" fix_spaces ((""Example2"") == ""_Example_2"" fix_spaces ((""Example 3"") == ""_Example-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,kab_Latn,python,"
def file_name_check(file_name):
    """"""Snulfu-d taggayt ara yeddun s usebter i d-yettakken isem n ufaylu, ad d-yerr "" Ih "" ma yella isem n ufaylu d aḥeqqi, ma ulac ad d-yerr "" Ala "" ma yella kra n tegnatin i d-iteddun: - Isem n ufaylu ur ilaq ara ad yili ugar n tlata n yisekkilen ('0'-'9') deg yisem n ufaylu. - Isem n ufaylu yesɛa kan yiwet n tneqlet '.' - Asebter i d-yettakken azaglu uqbel tneqlet ur ilaq ara ad yili d ilem, yerna ad yebdu s yiwet n tebrat seg alfaṭinit ('a'-'z' d 'A'-Z'). - Asebter i d-yettakken azaglu deffir tneqlet ilaq ad yili d yiwet seg tayeḍ: ['txt', 'exe', 'lld'] Amedyaten: file_name_check""{example.txt.t"") # => 'Ihi'_name_file_check""{example.txt.tll1} # => 'Ala' (isem-isebter ad yebdu s tneqlet s tneqlet n tneqlet)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,kab_Latn,python,"


def sum_squares(lst):
    """""""" Tazrawt-a ad d-teṭṭef umuɣ n yiɣallen imeggura. I yal taḍḍeft deg umuɣ, ad tesseɣzef taḍeft n yiɣallen imeggura ma yella aswir-is d amyiger n 3 yerna ad tesseɣzef taḍeft n yiɣallen imeggura ma yella aswir-is d amyiger n 4 mačči d amyiger n 3. Taḍeft-a ur tettbeddil ara tiɣawsiwin deg umuɣ ma yella aswir-nsent mačči d amyiger n 3 neɣ 4. Taḍeft-a ad d-teqqel tadukli n yal taḍeft. Imedyaten: I lst = [1,2,3], ad yili uḍfar d 6 I lst = [] ad yili uḍfar d 0 I lst = [-1,-5,2,-1,-5] ad yili uḍfar d -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,kab_Latn,python,"
def words_in_sentence(sentence):
    """"""Tettawi-d fell-ak tasnaselt i d-yettakken tafyirt, tafyirt-nni tesɛa kra n wawalen i d-yemgaraden s umḍiq, yerna ilaq ad d-terreḍ tasnaselt yesɛan awalen n tafyirt tamenzut, i yesɛan tiɣawsiwin timezwura, tanzeɣt n wawalen deg tasnaselt tamaynut ilaq ad tili am tin n tafyirt tamenzut. Amedya1: Inkec: tafyirt = ""D aswir"" Asekcem: ""is"" Amedya2: Inkec: tafyirt = ""let go for swimming"" Asekcem: ""go for"" Tiḥebsiwin: * 1 <= len(tafyirt) <= 100 * tafyirt tesɛa kan tibratin """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,kab_Latn,python,"
def simplify(x, n):
    """"""Taɣult-ik d asnulfu n yiwet n taggayt ara yessefken tanzeɣt x * n. Taggayt-a ad d-tefk tilawt ma yella x * n d amḍan ma d amḍan ur nelli ara. X d n, d asnulfu n tsirt n ufrak, yerna s talɣa-a i d-iteddun, <afrak>/<afrak> anda am amḍan d amḍan d imḍanen imdanen imeggura. Tzemreḍ ad d-tiniḍ belli x d n d imḍanen i d-yettwaḥerren, yerna ur sɛin ara azref amḍan. simplify "" 1/5 "", ""5/1"") = True simplify "" 1/6 "", ""2/1"") = False simplify "" 7/10 "", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,kab_Latn,python,"
def order_by_points(nums):
    """"""Aru-d taggayt ara yesseḍfaren umuɣ n yijjen umḍan s uswir ara d-yekkren s uswir n yijjen umḍan. Ttxil-k, ma llan waṭas n yijjen s uswir am wa n yijjen umḍan, ssemres-iten s uswir n usemres-nsen deg umuɣ amezwaru. Amedya: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,kab_Latn,python,"
def specialFilter(nums):
    """"""Aru-d taggayt i yettaṭṭafen amḍan n yiṭṭanen d asekkil, d tin ara d-yerren amḍan n yiɣawasen deg umḍan i meqqren ɣef 10 yerna amḍan amezwaru d aneggaru n uṭṭun d win ur nḥeqqi (1, 3, 5, 7, 9). Amedya: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,kab_Latn,python,"
def get_max_triples(n):
    """"""A-k-d-yefk yiwen n uṭṭun amatu n lεali. Ilaq ad d-tessnulfuḍ yiwen n uṭṭun amatu n teɣzi n. I yal i (1 ‰¤ i ‰¤ n), azal n a[i] = i * i - i + 1. Err-d amḍan n yiɣallen (a[i], a[j], a[k]) n a anda i < j < k, d a[i] + a[j] + a[k] d amḍan n 3. Amedya: Input: n = 5 Output: 1 Asefhem: a = [1, 3, 7, 13, 21] Anagar amḍan amatu n (1, 7, 13) i ila azal. """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,kab_Latn,python,"
def bf(planet1, planet2):
    '''Llan tmanya n yimtiwgen deg unagraw-nneɣ anṣaf: win i d-yusan ɣer yiṭij d Merkur, win i d-yusan d Wenẓar, syin Dda Lqaεa, Mars, Yebter, Saturn, Uranus, Neptun. Aru-d yiwet n tlelli i yettaṭṭafen sin yismawen n yimtiwgen am yiferrawen planet1 d planet2. Tlelli-yagi ilaq ad d-tefk-d yiwen n uḥric (tuple) yesɛan akk timtiwgen i d-yezgan gar tnafa n umtiwgen1 d tnafa n umtiwgen2, s uswir n temnaḍt ɣer yiṭij. Tlelli-yagi ilaq ad d-tefk-d yiwen n uḥric (tuple) d ilmawen ma yella amtiwgen1 neɣ umtiwgen2 mačči d ismawen n yimtiwgen i yellan. Amedya: bf ""(Jupiter"", ""Neptun"") ==> (""Saturn"", ""Uranus"") bf (((""Tamurt"", ""Merkur"") ==> (""Venus"", ""Tamurt"", ""Mars"", ""Jupiter"", ""Sn"") }}'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,kab_Latn,python,"
def sorted_list_sum(lst):
    """"""Aru-d yiwet n taggayt ara iqeblen umuɣ n yiferrawen am umyag, ara yessusfen isefra n yiferrawen yesɛan teɣzi ur nelli ara, ara d-yerren umuɣ-nni i d-yeffɣen s talɣa i d-yettwaḍfaren. Umuɣ n umuɣ ilaq ad yili d win ara yernun s teɣzi n yal awal, yerna ilaq ad d-yerren umuɣ i d-yettwaḍfaren s talɣa-ya. Ma llan sin wawalen yesɛan yiwet n teɣzi, sseḍfar umuɣ s uswir alfabetik. Taggayt ilaq ad d-yerr umuɣ n yiferrawen s talɣa i d-yettwaḍfaren. Yezmer ad d-tiniḍ belli akk wawalen ad sɛun yiwet n teɣzi. Amedya: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""aaaa"", ""cd"" => ""ab"", ""cd ])""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,kab_Latn,python,"
def x_or_y(n, x, y):
    """"""Ahil s sshala i ilaq ad d-yerr azal n x ma yella n d amḍan amezwaru, ma ulac ilaq ad d-yerr azal n y. Imedyaten: i x_or_y(7, 34, 12) == 34 i x_or_y(15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,kab_Latn,python,"
def double_the_difference(lst):
    '''Ma yella yella-d umuɣ n yiṭṭunen, rnu-d amger n yiẓuran n yiṭṭunen yellan deg umuɣ-nni ur nḥeqqi. Ur ttḥeqqi ara i yiṭṭunen ur nelli d imdanen. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Ma yella umuɣ n usentel d ilem, rnu-d 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,kab_Latn,python,"
def compare(game,guess):
    """"""Cukkeɣ akk nemmekti-d ayen i d-yettḥulfun mi ara d-tban taggara n kra n tegnit i nettraǧu aṭas. Iḥulfan d tiktiwin i tesεiḍ deg teswiεt-nni, yessefk ad tent-teẓreḍ yerna ad tent-temqableḍ. Ahil-ik d ad tesneḍ ma yella yiwen n umdan yeɣla s tidet agmuḍ n waṭas n tdukliwin. Teţunefk-akent snat n tferkiwin n tmuɣliwin d tmuɣliwin n teɣzi yemgaraden, anda yal asnas yettbin-d tdukli. Err-d yiwet n tferkiwt n teɣzi yemgaraden i d-yeskanen acḥal i yexla yal tmuɣli. Ma yella yeɣla s tidet, azal-is d 0, ma ulac, azal-is d amgired agejdan gar tmuɣli d uḥric. amedya: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3],[0,0,4,0,1,0,1]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,kab_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Ad ak-d-yettunefk yisem n tneɣrit (aḥric) d umuɣ n isebtaren. Isebtaren ad ttwasqedcen i usewwi n yisem n tneɣrit. Tazmert n usebtar d tin i d-iteddun: ad yili CAP d uṭṭun n yisebtaren imeqqranen deg yisem n usebtar, ad yili SM d uṭṭun n yisebtaren imecṭaḥ deg yisem n usebtar, tazmert tettunefk s uẓeṭṭa CAP - SM. Ilaq ad d-tafeḍ asebtar iǧehden akk d usebtar s umata-a: ClassName.StrongestExtensionName. Ma llan sin neɣ ugar n isebtaren s yiwen n usebtar, ilaq ad tferneḍ win i d-yettasen d amezwaru deg umuɣ. Amedya, ma tefka-ak ""Slices"" d tneɣrit d umuɣ n isebtaren: ['SEviviSliNGCes', 'Cheese', 'StufedFF'] ihi ilaq ad d-terrur 'Slices.SEviSliNG.SEviSliCes' d 'SliSliCliSliSliNG' imi asebtar-iw (s n usebtaren) d asebtaren iǧehden, tazmert tettunefk s uẓeṭṭa n usebtaren: 'ClassName.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,kab_Latn,python,"
def cycpattern_check(a , b):
    """"""Ttwafent-ak 2 n wawalen. Ilaq ad d-terreḍ True ma yella awal wis sin neɣ kra n tuɣalin-is d azamul deg wawal amezwaru cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => True cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => True cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,kab_Latn,python,"
def even_odd_count(num):
    """"""Ma yella-d yiwen n uṭṭun imdanen, ad d-yerr yiwen n uṭṭun n tuple yesεan amur n yiɣallen imegganen d wid ur nemmagganen. Amedya: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,kab_Latn,python,"
def int_to_mini_roman(number):
    """"""Ma yella-d yiwen n uṭṭun amatu, ad d-naf amur-is n uṭṭunen irumaniyen s usekkil, ad t-id-nerr s usekkil amecṭuḥ.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,kab_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Ifka-d teɣzi n tlata n yiɣsanen n ttriangulit. Err-d tidet ma yella tlata n yiɣsanen-nni d tin yesɛan taṛektilt taɣect, ma ulac, d lekdeb. Taṛektilt taɣect d tin yesɛan yiwen n uẓeṭṭa n ttriangulit neɣ 90 n tkurt. Amedya: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,kab_Latn,python,"
def find_max(words):
    """"""Aru-d taggayt i yettqeblen umuɣ n yiferrawen. Umuɣ-nni yeččur d awalen yemgaraden. Err-d awal s waṭas n yemyaren yemgaraden. Ma llan waṭas n yiferrawen yesεan waṭas n yemyaren yemgaraden, err-d win i d-yusan d amezwaru s talɣa tasnagrawt.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,kab_Latn,python,"
def eat(number, need, remaining):
    """"""D aɣyul i laẓ, teččiḍ yakan acḥal n tbeqqayin, maca tura ilaq ad teččeḍ ugar n tbeqqayin akken ad tjemɛeḍ imensi n wass. ilaq ad d-terreḍ amyag n [acḥal n tbeqqayin i d-teččiḍ deffir imensi-k, acḥal n tbeqqayin i d-yeqqimen deffir imensi-k] ma ulac ddeqs n tbeqqayin i d-yeqqimen, ad teččeḍ akk tibeqqayin i d-yeqqimen, maca mazal ad teẓreḍ. Amedya: * čči ((5, 6, 10) -> [11, 4] * čči ((4, 8, 9) -> [12, 1] * čči ((1, 10, 10) -> [11, 0] * čči ((2, 11, 5) -> [7, 0] Imgiren: @number: ameɣtu n waṭas n tbeqqayin i teččiḍ. @need: ameɣtu n waṭas n tbeqqayin i k-ilaqen ad teččeḍ. @remaining: ameɣtu n waṭas n tbeqqayin i d-yeqqimen deg usentelkimt
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,kab_Latn,python,"
def do_algebra(operator, operand):
    """"""Asekles n tsekla: Asekles n usekles (+) Asekles (-) Asekkles (-) Asekkles (-) Asekkles (-) Asekkles (-) Asekkles (-) Asekkles (-) Asekkles (-) Asekkles (-) Asekkles (-) Asekkles (-) Asekkles (-) Asekkles (-) Asekkles (-): Asekles['+', '*', '-'] asekkles = [2, 3, 4, 5] asekkles = 2 + 3 * 4 - 5 => asekkles = 9 Aseɣle: Taɣezzart n usekles d taɣezzart n usekles n usekles sɣur yiwen. Asekles d asekkel n imdanen ur nelli ara d imegraden. Asekles yesɛa meqqar yiwen usekles, asekkles yesɛa meqqar sin isekkilen.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,kab_Latn,python,"
def solve(s):
    """"""Ma yella s[i] d tabrat, rnu-tt seg uswir n wadda ɣer uswir n wadda neɣ s umata, ma ulac, eǧǧ-itt akken tella. Ma ulac tabrat, rnu-tt seg uswir. Tazrawt ilaq ad d-tefk tabrat i d-yeffɣen. Amedyat solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,kab_Latn,python,"
def string_to_md5(text):
    """"""Ma yella yella-d usnas 'text', rnu-d tasnasit-is n md5 n usegmi. Ma yella 'text' d asnas d ilem, rnu-d None. >>> string_to_md5('Asellam amaḍal') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,kab_Latn,python,"
def generate_integers(a, b):
    """"""Ma yella sin n yijjen umḍan a d b, rnu-d imḍanen imgerraden gar a d b, s talɣa tamerḍant. Amedya: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
