[{"task_id":"HumanEval_0","nl":"tam_Taml","pl":"pl","prompt":"# கொடுக்கப்பட்ட உச்சவரம்பு.# கொடுக்கப்பட்ட வரிசையில், க்கு அருகில் உள்ள எண்கள் ஏதேனும் இரண்டு எண்கள் உள்ளதா என சரிபார்க்கவும்.# >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n# \"\"\n# >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# 1\nsub has_close_elements {\n    my($numbers, $threshold) = @_;\n","canonical_solution":"sub has_close_elements {\n    my($numbers, $threshold) = @_;\n    \n    for my $i (0 .. @$numbers - 2) {\n        for my $j ($i + 1 .. @$numbers - 1) {\n            if (abs($numbers->[$i] - $numbers->[$j]) < $threshold) {\n                return 1;\n            }\n        }\n    }\n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&has_close_elements;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_1","nl":"tam_Taml","pl":"pl","prompt":"# உள்ளீட்டு சரத்தில் உள்ள இடைவெளிகளை புறக்கணிக்கவும்.# தனித்தனி குழுக்கள் சமநிலையில் உள்ளன (ஒவ்வொரு திறந்த துணுக்கு முறையாக மூடப்பட்டுள்ளது) மற்றும் ஒருவருக்கொருவர் கூடு போடப்படவில்லை.# அந்த குழுவை தனித்தனி சரங்களாக பிரித்து அவற்றின் வரிசையைத் திருப்பி விடுங்கள்.# இந்த செயல்பாட்டிற்கான உள்ளீடு என்பது பல குழுக்களாக உள்ளமைக்கப்பட்ட அடைப்புக்குறிகளைக் கொண்ட ஒரு சரம் ஆகும். உங்கள் குறிக்கோள் # >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n# [\"()\", \"(())\", \"(()())\"]\nsub separate_paren_groups {\n    my($paren_string) = @_;\n","canonical_solution":"sub separate_paren_groups {\n    my ($paren_string) = @_;\n    $paren_string =~ s\/\\s+\/\/g;  # Remove all spaces\n    my @groups;\n    my $balance = 0;\n    my $current_group = \"\";\n    \n    foreach my $char (split \/\/, $paren_string) {\n        if ($char eq '(') {\n            $balance++;\n        }\n        if ($char eq ')') {\n            $balance--;\n        }\n        $current_group .= $char;\n        if ($balance == 0 && $current_group ne \"\") {\n            push @groups, $current_group;\n            $current_group = \"\";\n        }\n    }\n    \n    return \\@groups;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&separate_paren_groups;\n        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[\"(()(())((())))\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_2","nl":"tam_Taml","pl":"pl","prompt":"# எண்ணின் தசம பகுதியைத் திருப்பித் தரவும்.# (இறந்த பகுதி எப்போதும் 1 ஐ விட குறைவாக இருக்கும்).# மற்றும் முழு எண் பகுதி (கொடுக்கப்பட்ட எண்ணை விட பெரிய முழு எண் சிறியது) மற்றும் தசம # ஒரு நேர்மறை மிதக்கும் புள்ளி எண் கொடுக்கப்பட்டால், அது  ஆக உடைக்கப்படலாம்.# >>> truncate_number(3.5)\n# 0.5\nsub truncate_number {\n    my($number) = @_;\n","canonical_solution":"sub truncate_number {\n    my($number) = @_;\n    my $integer_part = int($number);\n    my $decimal_part = $number - $integer_part;\n    return $decimal_part;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_3","nl":"tam_Taml","pl":"pl","prompt":"# அந்த புள்ளியில் செயல்பாடு 1 திரும்ப வேண்டும். இல்லையெனில் அது திரும்ப வேண்டும் ''.# உங்கள் பணி கணக்கு இருப்பு எந்த புள்ளியில் பூஜ்யம் கீழே விழுகிறது என்றால் கண்டறிய உள்ளது, மற்றும் # நீங்கள் ஒரு வங்கி கணக்கில் வைப்பு மற்றும் திரும்ப நடவடிக்கைகள் ஒரு வரிசை கொடுக்கப்பட்ட என்று தொடங்குகிறது # >>> below_zero([1, 2, 3])\n# \"\"\n# >>> below_zero([1, 2, -4, 5])\n# 1\nsub below_zero {\n    my($operations) = @_;\n","canonical_solution":"sub below_zero {\n    my ($operations) = @_;\n    my $balance = 0;\n    \n    for my $operation (@$operations) {\n        $balance += $operation;\n        if ($balance < 0) {\n            return 1;\n        }\n    }\n    \n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_zero;\n        if(eq_deeply($candidate->([]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -3, 1, 2, -3]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -4, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -2, 2, -2, 5, -5, 4, -4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_4","nl":"tam_Taml","pl":"pl","prompt":"# MAD = சராசரி. x - x_mean.# உறுப்பு மற்றும் ஒரு மைய புள்ளி (இந்த வழக்கில் சராசரி):# சராசரி முழுமையான விலகல் என்பது ஒவ்வொரு க்கும் இடையிலான சராசரி முழுமையான வேறுபாடு ஆகும்.# இந்த தரவு தொகுப்பின் சராசரி.# உள்ளீட்டு எண்களின் கொடுக்கப்பட்ட வரிசைக்கு, சராசரி முழுமையான விலகலைக் கணக்கிடுங்கள்.# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# 1.0\nsub mean_absolute_deviation {\n    my($numbers) = @_;\n","canonical_solution":"sub mean_absolute_deviation {\n    my ($numbers) = @_;\n    my $n = scalar @$numbers;\n    return 0 if $n == 0;\n\n    # Calculate mean\n    my $sum = 0;\n    $sum += $_ for @$numbers;\n    my $mean = $sum \/ $n;\n\n    # Calculate mean absolute deviation\n    my $total_deviation = 0;\n    $total_deviation += abs($_ - $mean) for @$numbers;\n    return $total_deviation \/ $n;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_5","nl":"tam_Taml","pl":"pl","prompt":"# உள்ளீட்டு வரிசையின் ஒவ்வொரு இரண்டு தொடர்ச்சியான கூறுகளுக்கும் இடையில் ஒரு எண் 'தொலைவு' சேர்க்கவும் `numbers' # >>> intersperse([], 4)\n# []\n# >>> intersperse([1, 2, 3], 4)\n# [1, 4, 2, 4, 3]\nsub intersperse {\n    my($numbers, $delimeter) = @_;\n","canonical_solution":"my @result;\n    for (my $i = 0; $i < @$numbers; $i++) {\n        push @result, $numbers->[$i];\n        push @result, $delimeter if $i < @$numbers - 1;\n    }\n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersperse;\n        if(eq_deeply($candidate->([], 7),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 2, 2], 2),[2, 2, 2, 2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_6","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக (() (()) அதிகபட்சம் இரண்டு நிலைகளை கொண்டிருக்கும் போது ((())) மூன்று உள்ளது.# ஒவ்வொரு குழுவிற்கும், அடைப்புக்குறிகளின் ஆழமான நிலைகளை வெளியிடுக.# இந்த செயல்பாட்டிற்கான உள்ளீடு இடைவெளிகளால் பிரிக்கப்பட்ட அடைப்புக்குறிகளுக்கான பல குழுக்களைக் குறிக்கும் ஒரு சரம் ஆகும்.# >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n# [2, 3, 1, 3]\nsub parse_nested_parens {\n    my($paren_string) = @_;\n","canonical_solution":"sub parse_nested_parens {\n    my($paren_string) = @_;\n    my @groups = split \/ \/, $paren_string;\n    my @depths;\n\n    foreach my $group (@groups) {\n        my $max_depth = 0;\n        my $current_depth = 0;\n        foreach my $char (split \/\/, $group) {\n            if ($char eq '(') {\n                $current_depth++;\n                if ($current_depth > $max_depth) {\n                    $max_depth = $current_depth;\n                }\n            } elsif ($char eq ')') {\n                $current_depth--;\n            }\n        }\n        push @depths, $max_depth;\n    }\n    \n    return \\@depths;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_nested_parens;\n        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_7","nl":"tam_Taml","pl":"pl","prompt":"# உள்ளீட்டு வரிசை வரிசைகளை கொடுக்கப்பட்ட துணை வரிசைகளை கொண்ட வரிசைகளை மட்டுமே வடிகட்டவும்# >>> filter_by_substring([], \"a\")\n# []\n# >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"]\nsub filter_by_substring {\n    my($strings, $substring) = @_;\n","canonical_solution":"sub filter_by_substring {\n    my ($strings, $substring) = @_;\n    my @filtered = grep { index($_, $substring) != -1 } @$strings;\n    return \\@filtered;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_substring;\n        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_8","nl":"tam_Taml","pl":"pl","prompt":"# வெற்றுத் தொகை 0 ஆகவும், வெற்றுத் தயாரிப்பு 1 ஆகவும் இருக்க வேண்டும்.# கொடுக்கப்பட்ட முழு எண்களின் வரிசைக்கு, ஒரு வரிசையில் உள்ள அனைத்து முழு எண்களின் கூட்டுத்தொகை மற்றும் ஒரு தயாரிப்பு ஆகியவற்றைக் கொண்ட ஒரு வரிசையைத் திருப்பித் தரவும்.# >>> sum_product([])\n# [0, 1]\n# >>> sum_product([1, 2, 3, 4])\n# [10, 24]\nsub sum_product {\n    my($numbers) = @_;\n","canonical_solution":"sub sum_product {\n    my ($numbers) = @_;\n    my $sum = 0;\n    my $product = 1;\n    \n    foreach my $num (@$numbers) {\n        $sum += $num;\n        $product *= $num;\n    }\n    \n    return [$sum, $product];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_product;\n        if(eq_deeply($candidate->([]),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1]),[3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 0]),[100, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 7]),[15, 105])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),[10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_9","nl":"tam_Taml","pl":"pl","prompt":"# வரிசையில்.# கொடுக்கப்பட்ட முழு எண்களின் வரிசையில் இருந்து, கொடுக்கப்பட்ட தருணம் வரை காணப்படும் அதிகபட்ச உறுப்புகளின் வரிசையை உருவாக்குங்கள்.# >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\nsub rolling_max {\n    my($numbers) = @_;\n","canonical_solution":"sub rolling_max {\n    my ($numbers) = @_;\n    my @result;\n    my $max = $numbers->[0];\n    \n    for my $num (@$numbers) {\n        $max = $num if $num > $max;\n        push @result, $max;\n    }\n    \n    return \\@result;\n}\n\n# Example usage\nmy $result = rolling_max([1, 2, 3, 2, 3, 4, 2]);\nprint \"@$result\\n\";  # Outputs: 1 2 3 3 3 4 4","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rolling_max;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 1]),[4, 4, 4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_10","nl":"tam_Taml","pl":"pl","prompt":"# - ஒரு சரம் முன்னொட்டு, palindromic பின்னொட்டு முன் வரும் சரம் பின்னொட்டு ஒரு சரம் பின்னோக்கி இறுதியில் சேர்க்க.# - வழங்கப்பட்ட சரத்தின் மிக நீளமான postfix ஐக் கண்டறியவும், அது ஒரு பாலிண்ட்ரோம் ஆகும்.# அல்காரிதம் யோசனை எளிது: # கொடுக்கப்பட்ட சரத்துடன் தொடங்கும் குறுகிய பாலிண்ட்ரோம் கண்டுபிடிக்கவும்.# >>> make_palindrome(\"\")\n# \"\"\n# >>> make_palindrome(\"cat\")\n# \"catac\"\n# >>> make_palindrome(\"cata\")\n# \"catac\"\nsub make_palindrome {\n    my($string) = @_;\n","canonical_solution":"sub make_palindrome {\n    my($string) = @_;\n\n    # Helper function to check if a substring is a palindrome\n    sub is_palindrome {\n        my ($sub) = @_;\n        return $sub eq reverse $sub;\n    }\n\n    # If the whole string is a palindrome, return it\n    if (is_palindrome($string)) {\n        return $string;\n    }\n\n    # Check for the longest palindromic suffix\n    my $length = length($string);\n    for (my $i = $length; $i >= 0; $i--) {\n        my $suffix = substr($string, $i);\n        if (is_palindrome($suffix)) {\n            my $prefix = substr($string, 0, $i);\n            return $string . reverse($prefix);\n        }\n    }\n\n    # If no palindromic suffix is found, append the reverse of entire string minus the first character\n    return $string . reverse(substr($string, 1));\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_palindrome;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),\"x\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyz\"),\"xyzyx\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyx\"),\"xyx\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"jerry\"),\"jerryrrej\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_11","nl":"tam_Taml","pl":"pl","prompt":"# இந்த உள்ளீடுகளில் பைனரி XOR ஐச் செய்து, முடிவை ஒரு சரமாகவும் திருப்பி விடுங்கள்.# உள்ளீடு என்பது 1 மற்றும் 0 களை மட்டுமே கொண்டிருக்கும் a மற்றும் b என்ற இரண்டு சரங்கள் ஆகும்.# >>> string_xor(\"010\", \"110\")\n# \"100\"\nsub string_xor {\n    my($a, $b) = @_;\n","canonical_solution":"my @a_bits = split \/\/, $a;\n    my @b_bits = split \/\/, $b;\n    my $result = '';\n\n    for my $i (0 .. $#a_bits) {\n        $result .= $a_bits[$i] ^ $b_bits[$i];\n    }\n\n    return $result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_xor;\n        if(eq_deeply($candidate->(\"111000\", \"101010\"),\"010010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"1\"),\"0\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0101\", \"0000\"),\"0101\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_12","nl":"tam_Taml","pl":"pl","prompt":"# அதே நீளத்தின் சரங்கள். உள்ளீட்டு வரிசை காலியாக இருந்தால் undef ஐத் திரும்புக.# வரிசை வரிசைகளில், மிக நீளமான வரிசையைத் திருப்பி விடுக. பல கள் இருந்தால், முதல் வரிசையைத் திருப்பி விடுக.# >>> longest([])\n# undef\n# >>> longest([\"a\", \"b\", \"c\"])\n# \"a\"\n# >>> longest([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\nsub longest {\n    my($strings) = @_;\n","canonical_solution":"sub longest {\n    my ($strings) = @_;\n    return undef if !@$strings;\n\n    my $longest = $strings->[0];\n    foreach my $string (@$strings) {\n        if (length($string) > length($longest)) {\n            $longest = $string;\n        }\n    }\n    return $longest;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&longest;\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\"]),\"x\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_13","nl":"tam_Taml","pl":"pl","prompt":"# இரண்டு முழு எண்கள் a மற்றும் b க்கு ஒரு பெரிய பொது வகுப்பான் திரும்பு# >>> greatest_common_divisor(3, 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\nsub greatest_common_divisor {\n    my($a, $b) = @_;\n","canonical_solution":"sub greatest_common_divisor {\n    my ($a, $b) = @_;\n    while ($b != 0) {\n        my $t = $b;\n        $b = $a % $b;\n        $a = $t;\n    }\n    return $a;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&greatest_common_divisor;\n        if(eq_deeply($candidate->(3, 7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 15),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49, 14),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(144, 60),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_14","nl":"tam_Taml","pl":"pl","prompt":"# உள்ளீட்டு சரத்தின் குறுகிய முதல் நீண்ட வரை உள்ள அனைத்து முன்னொட்டுகளின் வரிசையைத் திரும்புகிறது.# >>> all_prefixes(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\nsub all_prefixes {\n    my($string) = @_;\n","canonical_solution":"my($string) = @_;\n    my @prefixes;\n    for my $i (1 .. length($string)) {\n        push @prefixes, substr($string, 0, $i);\n    }\n    return @prefixes;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&all_prefixes;\n        if(eq_deeply($candidate->(\"\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"WWW\"),[\"W\", \"WW\", \"WWW\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_15","nl":"tam_Taml","pl":"pl","prompt":"# 0 முதல் n வரை உள்ளடக்கிய இடைவெளியில் வரையறுக்கப்பட்ட எண்களைக் கொண்ட ஒரு சரத்தைத் திருப்பித் தருகிறது.# >>> string_sequence(0)\n# \"0\"\n# >>> string_sequence(5)\n# \"0 1 2 3 4 5\"\nsub string_sequence {\n    my($n) = @_;\n","canonical_solution":"sub string_sequence {\n    my($n) = @_;\n    return join ' ', 0..$n;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_sequence;\n        if(eq_deeply($candidate->(0),\"0\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),\"0 1 2 3\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"0 1 2 3 4 5 6 7 8 9 10\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_16","nl":"tam_Taml","pl":"pl","prompt":"# ஒரு சரம் கொடுக்கப்பட்டால், எத்தனை தனித்தனி எழுத்துக்கள் (பெரு எழுத்துக்கள் எதுவாக இருந்தாலும்) அதில் உள்ளன என்பதைக் கண்டறியவும்.# >>> count_distinct_characters(\"xyzXYZ\")\n# 3\n# >>> count_distinct_characters(\"Jerry\")\n# 4\nsub count_distinct_characters {\n    my($string) = @_;\n","canonical_solution":"sub count_distinct_characters {\n    my($string) = @_;\n    my %chars;\n    $string = lc $string;  # Convert the string to lowercase\n    $chars{$_} = 1 for split \/\/, $string;  # Add each character to the hash\n    return scalar keys %chars;  # Return the number of distinct keys\n}\n\n# Example usage:\nprint count_distinct_characters(\"xyzXYZ\"), \"\\n\";  # Output: 3\nprint count_distinct_characters(\"Jerry\"), \"\\n\";   # Output: 4","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_distinct_characters;\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcde\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdecadeCADE\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaAAAAaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jerry jERRY JeRRRY\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_17","nl":"tam_Taml","pl":"pl","prompt":"# 'இருக்கலாம்' - குவார்ட்டர் குறிப்பு, ஒரு துடிப்பு நீடிக்கும் # 'ஓடடே' - அரை குறிப்பு, இரண்டு துடிப்புகளை எடுக்கும்.# 'o' - முழு குறிப்பு, நான்கு துடிப்பு நீடிக்கும் # இங்கே ஒரு புராணக்கதை உள்ளது: # கடைசியாக அல்ல.# உங்கள் பணி இந்த சரம் பகுப்பாய்வு மற்றும் ஒவ்வொரு எத்தனை துடிப்புகளை செய்கிறது பொருந்தும் முழு எண்கள் வரிசை திரும்ப உள்ளது .# இந்த செயல்பாட்டிற்கு உள்ளீடு ஒரு சிறப்பு ASCII வடிவத்தில் இசைக் குறிப்புகளை பிரதிநிதித்துவப்படுத்தும் ஒரு சரம் ஆகும்.# >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nsub parse_music {\n    my($music_string) = @_;\n","canonical_solution":"sub parse_music {\n    my ($music_string) = @_;\n    my @notes = split ' ', $music_string;\n    my @beats;\n\n    foreach my $note (@notes) {\n        if ($note eq 'o') {\n            push @beats, 4;\n        } elsif ($note eq 'o|') {\n            push @beats, 2;\n        } elsif ($note eq '.|') {\n            push @beats, 1;\n        }\n    }\n\n    return @beats;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_music;\n        if(eq_deeply($candidate->(\"\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o o o o\"),[4, 4, 4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\".| .| .| .|\"),[1, 1, 1, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4, 4, 4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o| .| o| .| o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_18","nl":"tam_Taml","pl":"pl","prompt":"# கொடுக்கப்பட்ட துணை சரத்தை எத்தனை முறை அசல் சரத்தில் காணலாம் என்பதைக் கண்டறியவும். ஒன்றுடன் ஒன்று ஒட்டிக்கொள்ளும் நிகழ்வுகளை எண்ணவும்.# >>> how_many_times(\"\", \"a\")\n# 0\n# >>> how_many_times(\"aaa\", \"a\")\n# 3\n# >>> how_many_times(\"aaaa\", \"aa\")\n# 3\nsub how_many_times {\n    my($string, $substring) = @_;\n","canonical_solution":"sub how_many_times {\n    my ($string, $substring) = @_;\n    return 0 if $substring eq '';\n    my $count = 0;\n    while ($string =~ \/(?=$substring)\/g) {\n        $count++;\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&how_many_times;\n        if(eq_deeply($candidate->(\"\", \"x\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyxyxyx\", \"x\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"cacacacac\", \"cac\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"john doe\", \"john\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_19","nl":"tam_Taml","pl":"pl","prompt":"# மிகச் சிறியதிலிருந்து மிகப் பெரியது வரை வரிசைப்படுத்தப்பட்ட எண்களைக் கொண்ட சரத்தை திருப்பித் தருகிறது.# செல்லுபடியாகும் தேர்வுகள் 'பூஜ்யம்', 'ஒன்று', 'இரண்டு', 'மூன்று', 'நான்கு', 'ஐந்து', 'ஆறு', 'ஏழு', 'எட்டு' மற்றும் 'ஒன்பது'.# உள்ளீடு என்பது '0' முதல் '9' வரையிலான எண்களின் இடைவெளி வரையறுக்கப்பட்ட சரம் ஆகும்.# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers {\n    my($numbers) = @_;\n","canonical_solution":"sub sort_numbers {\n    my ($numbers) = @_;\n    my %word_to_num = (\n        'zero'  => 0,\n        'one'   => 1,\n        'two'   => 2,\n        'three' => 3,\n        'four'  => 4,\n        'five'  => 5,\n        'six'   => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'  => 9,\n    );\n    my %num_to_word = reverse %word_to_num;\n    my @sorted_numbers = \n        map { $num_to_word{$_} } \n        sort { $a <=> $b } \n        map { $word_to_num{$_} } \n        split ' ', $numbers;\n    return join ' ', @sorted_numbers;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_20","nl":"tam_Taml","pl":"pl","prompt":"# மற்றவைகளை வரிசையில் திருப்பி அனுப்புங்கள் (குறைந்த எண்ணிக்கை, அதிக எண்ணிக்கை).# வழங்கப்பட்ட வரிசை எண்களில் இருந்து (குறைந்தது இரண்டு நீளமுள்ளவை) ஒவ்வொன்றிற்கும் மிக நெருக்கமான இரண்டைத் தேர்ந்தெடுத்து திருப்பித் தரவும்.# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n# [2.0, 2.2]\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# [2.0, 2.0]\nsub find_closest_elements {\n    my($numbers) = @_;\n","canonical_solution":"sub find_closest_elements {\n    my ($numbers) = @_;\n    my @sorted_numbers = sort { $a <=> $b } @$numbers;\n    my $min_diff = undef;\n    my @closest_pair;\n\n    for my $i (0 .. $#sorted_numbers - 1) {\n        my $diff = $sorted_numbers[$i + 1] - $sorted_numbers[$i];\n        if (!defined($min_diff) || $diff < $min_diff) {\n            $min_diff = $diff;\n            @closest_pair = ($sorted_numbers[$i], $sorted_numbers[$i + 1]);\n        }\n    }\n\n    return @closest_pair;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_closest_elements;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_21","nl":"tam_Taml","pl":"pl","prompt":"# மிகச்சிறிய எண் 0 ஆகவும், மிகப்பெரிய எண் 1 ஆகவும் மாறும்.# எண்களின் வரிசை (குறைந்தது இரண்டு கூறுகள்), அந்த வரிசைக்கு ஒரு நேரியல் மாற்றத்தை பயன்படுத்துகிறது,# >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5, 0.75, 1.0]\nsub rescale_to_unit {\n    my($numbers) = @_;\n","canonical_solution":"sub rescale_to_unit {\n    my($numbers) = @_;\n    my $min = min(@$numbers);\n    my $max = max(@$numbers);\n    my @rescaled = map { ($_ - $min) \/ ($max - $min) } @$numbers;\n    return \\@rescaled;\n}\n\nsub min {\n    my(@list) = @_;\n    my $min = $list[0];\n    foreach my $num (@list) {\n        if ($num < $min) {\n            $min = $num;\n        }\n    }\n    return $min;\n}\n\nsub max {\n    my(@list) = @_;\n    my $max = $list[0];\n    foreach my $num (@list) {\n        if ($num > $max) {\n            $max = $num;\n        }\n    }\n    return $max;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rescale_to_unit;\n        if(eq_deeply($candidate->([2.0, 49.9]),[0.0, 1.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 49.9]),[1.0, 0.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_22","nl":"tam_Taml","pl":"pl","prompt":"# முழு எண்களுக்கு மட்டும் கொடுக்கப்பட்ட வரிசையை எந்த பிள்டான் மதிப்புகளிலும் வடிகட்டவும்# >>> filter_integers([\"a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1, 2, 3]\nsub filter_integers {\n    my($values) = @_;\n","canonical_solution":"sub filter_integers {\n    my ($values) = @_;\n    return [grep { \/^-?\\d+$\/ && !ref($_) } @$values];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_23","nl":"tam_Taml","pl":"pl","prompt":"# கொடுக்கப்பட்ட சரத்தின் நீளம் திரும்புக# >>> strlen(\"\")\n# 0\n# >>> strlen(\"abc\")\n# 3\nsub strlen {\n    my($string) = @_;\n","canonical_solution":"sub strlen {\n    my($string) = @_;\n    return length($string);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strlen;\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdasnakj\"),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_24","nl":"tam_Taml","pl":"pl","prompt":"# கொடுக்கப்பட்ட n எண்ணுக்கு, n ஐ சமமாக பிரிக்கும் மிகப்பெரிய எண்ணைக் கண்டறியவும், n ஐ விட சிறியதாக இருக்கும்.# >>> largest_divisor(15)\n# 5\nsub largest_divisor {\n    my($n) = @_;\n","canonical_solution":"sub largest_divisor {\n    my($n) = @_;\n    for (my $i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n    }\n    return undef; # In case n is 1, there is no divisor less than n\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_divisor;\n        if(eq_deeply($candidate->(3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),50)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_25","nl":"tam_Taml","pl":"pl","prompt":"# உள்ளீடு எண் அனைத்து காரணிகளின் கூட்டுக்கு சமமாக இருக்க வேண்டும்.# ஒவ்வொரு காரணிகளும் எத்தனை முறை காரணி வரிசையில் தோன்றினாலும் அதற்கு ஏற்ப வரிசைப்படுத்தப்பட வேண்டும்.# கொடுக்கப்பட்ட முழு எண் முதன்மை காரணிகளின் வரிசையை மிகச் சிறியதிலிருந்து மிகப் பெரியது வரை வரிசையில் திருப்பித் தருகிறது.# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\nsub factorize {\n    my($n) = @_;\n","canonical_solution":"sub factorize {\n    my ($n) = @_;\n    my @factors;\n    for my $i (2 .. int(sqrt($n))) {\n        while ($n % $i == 0) {\n            push @factors, $i;\n            $n \/= $i;\n        }\n    }\n    push @factors, $n if $n > 1;\n    return @factors;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&factorize;\n        if(eq_deeply($candidate->(2),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[2, 2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(57),[3, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3249),[3, 3, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(185193),[3, 3, 3, 19, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20577),[3, 19, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_26","nl":"tam_Taml","pl":"pl","prompt":"# உள்ளீடு போலவே எலெக்ட்மென்ட்களின் வரிசையை அப்படியே விட்டுவிடுங்கள்.# முழு எண்களின் வரிசையில் இருந்து, ஒரு முறைக்கு மேல் வரும் அனைத்து உறுப்புகளையும் நீக்கவும்.# >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n","canonical_solution":"sub remove_duplicates {\n    my ($numbers) = @_;\n    my %count;\n    $count{$_}++ for @$numbers;\n    return [grep { $count{$_} == 1 } @$numbers];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_27","nl":"tam_Taml","pl":"pl","prompt":"# கொடுக்கப்பட்ட சரத்திற்கு, சிறிய எழுத்துக்களை பெரிய எழுத்துக்களாகவும், பெரிய எழுத்துக்களை சிறிய எழுத்துக்களாகவும் மாற்றவும்.# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n    my($string) = @_;\n","canonical_solution":"sub flip_case {\n    my($string) = @_;\n    $string =~ tr\/A-Za-z\/a-zA-Z\/;\n    return $string;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_28","nl":"tam_Taml","pl":"pl","prompt":"# வரிசை வரிசைகளை ஒற்றை வரிசையாக இணைத்தல்# >>> concatenate([])\n# \"\"\n# >>> concatenate([\"a\", \"b\", \"c\"])\n# \"abc\"\nsub concatenate {\n    my($strings) = @_;\n","canonical_solution":"sub concatenate {\n    my($strings) = @_;\n    return join('', @$strings);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&concatenate;\n        if(eq_deeply($candidate->([]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\"]),\"xyz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_29","nl":"tam_Taml","pl":"pl","prompt":"# கொடுக்கப்பட்ட முன்னொட்டுடன் தொடங்கும் சரங்களுக்கு மட்டுமே உள்ளீட்டு வரிசையை வடிகட்டவும்.# >>> filter_by_prefix([], \"a\")\n# []\n# >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\nsub filter_by_prefix {\n    my($strings, $prefix) = @_;\n","canonical_solution":"sub filter_by_prefix {\n    my ($strings, $prefix) = @_;\n    return [grep { \/^\\Q$prefix\\E\/ } @$strings];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_30","nl":"tam_Taml","pl":"pl","prompt":"# வரிசையில் உள்ள நேர்ம எண்களை மட்டுமே தருகிறது.# >>> get_positive([-1, 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\nsub get_positive {\n    my($l) = @_;\n","canonical_solution":"sub get_positive {\n    my($l) = @_;\n    my @positive_numbers = grep { $_ > 0 } @$l;\n    return \\@positive_numbers;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_positive;\n        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_31","nl":"tam_Taml","pl":"pl","prompt":"# கொடுக்கப்பட்ட எண் முதன்மையானது என்றால் உண்மை, மற்றபடி தவறானது என திருப்பித் தரவும்.# >>> is_prime(6)\n# \"\"\n# >>> is_prime(101)\n# 1\n# >>> is_prime(11)\n# 1\n# >>> is_prime(13441)\n# 1\n# >>> is_prime(61)\n# 1\n# >>> is_prime(4)\n# \"\"\n# >>> is_prime(1)\n# \"\"\nsub is_prime {\n    my($n) = @_;\n","canonical_solution":"sub is_prime {\n    my($n) = @_;\n    return \"\" if $n <= 1;\n    return 1 if $n == 2;\n    return \"\" if $n % 2 == 0;\n    for (my $i = 3; $i * $i <= $n; $i += 2) {\n        return \"\" if $n % $i == 0;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_prime;\n        if(eq_deeply($candidate->(6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13441),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(61),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(85),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(77),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(255379),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_33","nl":"tam_Taml","pl":"pl","prompt":"# ன் மதிப்புகளுக்கு ஒத்த குறியீடுகள், ஆனால் வரிசைப்படுத்தப்பட்ட.# l' என்பது மூன்று மூலம் வகுக்க முடியாத குறியீடுகளில் l உடன் ஒத்ததாகும், அதே நேரத்தில் மூன்று மூலம் வகுக்கக்கூடிய குறியீடுகளில் அதன் மதிப்புகள் சமமாக இருக்கும்.# இந்த செயல்பாடு ஒரு வரிசை l ஐ எடுத்து ஒரு வரிசை l' ஐ திருப்பித் தருகிறது, இது போன்றது# >>> sort_third([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4, 8, 9, 5]\nsub sort_third {\n    my($l) = @_;\n","canonical_solution":"sub sort_third {\n    my ($l) = @_;\n    my @to_sort = map { $l->[$_] } grep { $_ % 3 == 0 } 0..$#$l;\n    @to_sort = sort { $a <=> $b } @to_sort;\n    my @result = @$l;\n    my $index = 0;\n\n    foreach my $i (0..$#{$l}) {\n        if ($i % 3 == 0) {\n            $result[$i] = $to_sort[$index++];\n        }\n    }\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_third;\n        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_34","nl":"tam_Taml","pl":"pl","prompt":"# வரிசையில் வரிசைப்படுத்தப்பட்ட தனித்துவமான கூறுகளைத் திருப்பித் தருகிறது# >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n","canonical_solution":"sub unique {\n    my ($l) = @_;\n    my %seen;\n    my @unique_sorted = sort { $a <=> $b } grep { !$seen{$_}++ } @$l;\n    return \\@unique_sorted;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_35","nl":"tam_Taml","pl":"pl","prompt":"# வரிசையில் அதிகபட்ச உறுப்பைத் தருகிறது.# >>> max_element([1, 2, 3])\n# 3\n# >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\nsub max_element {\n    my($l) = @_;\n","canonical_solution":"sub max_element {\n    my($l) = @_;\n    my $max = $l->[0];\n    foreach my $value (@$l) {\n        if ($value > $max) {\n            $max = $value;\n        }\n    }\n    return $max;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_element;\n        if(eq_deeply($candidate->([1, 2, 3]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_36","nl":"tam_Taml","pl":"pl","prompt":"# 11 அல்லது 13 ஆல் வகுபடும் n ஐ விட சிறிய முழு எண்களில் 7 என்ற இலக்கத்தின் எண்ணிக்கையைத் திருப்பித் தரவும்.# >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n# 2\n# >>> fizz_buzz(79)\n# 3\nsub fizz_buzz {\n    my($n) = @_;\n","canonical_solution":"sub fizz_buzz {\n    my($n) = @_;\n    my $count = 0;\n    for my $i (1 .. $n-1) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $count++ if $i =~ \/7\/;\n        }\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fizz_buzz;\n        if(eq_deeply($candidate->(50),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(78),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(79),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(200),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4000),192)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10000),639)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100000),8026)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_37","nl":"tam_Taml","pl":"pl","prompt":"# l இன் சம குறியீடுகளின் மதிப்புகளுக்கு, ஆனால் வரிசைப்படுத்தப்பட்ட.# l' என்பது l உடன் ஒத்ததாகும், அதேசமயம் அதன் மதிப்புகள் சமமான குறியீடுகளில் சமமாக இருக்கும்.# இந்த செயல்பாடு ஒரு வரிசை l ஐ எடுத்து ஒரு வரிசை l' ஐ திருப்பித் தருகிறது, இது போன்றது# >>> sort_even([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_even([5, 6, 3, 4])\n# [3, 6, 5, 4]\nsub sort_even {\n    my($l) = @_;\n","canonical_solution":"sub sort_even {\n    my($l) = @_;\n    my @even_indices;\n\n    for (my $i = 0; $i < @$l; $i += 2) {\n        push @even_indices, $l->[$i];\n    }\n\n    @even_indices = sort { $a <=> $b } @even_indices;\n\n    my @result = @$l;\n    \n    for (my $i = 0; $i < @even_indices; $i++) {\n        $result[$i * 2] = $even_indices[$i];\n    }\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_even;\n        if(eq_deeply($candidate->([1, 2, 3]),[1, 2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_39","nl":"tam_Taml","pl":"pl","prompt":"# prime_fib ஒரு n-வது எண்ணை தருகிறது அது ஒரு ஃபீபனச்சி எண் மற்றும் அது பிரதானமானது.# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n# 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\nsub prime_fib {\n    my($n) = @_;\n","canonical_solution":"sub is_prime {\n    my($num) = @_;\n    return 0 if $num < 2;\n    for my $i (2 .. sqrt($num)) {\n        return 0 if $num % $i == 0;\n    }\n    return 1;\n}\n\nsub prime_fib {\n    my($n) = @_;\n    my ($a, $b) = (1, 1);\n    my $count = 0;\n\n    while (1) {\n        my $fib = $a + $b;\n        $a = $b;\n        $b = $fib;\n        if (is_prime($fib)) {\n            $count++;\n            return $fib if $count == $n;\n        }\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_fib;\n        if(eq_deeply($candidate->(1),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),13)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),89)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),233)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1597)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28657)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),514229)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),433494437)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_40","nl":"tam_Taml","pl":"pl","prompt":"# 0 க்கு சமமாக, மற்றும் '' மற்றபடி.# அது வரிசையில் மூன்று தனித்தனி கூறுகள் இருந்தால் 1 ஐத் தருகிறது# triple_sum_to_zero ஒரு முழு எண்களின் வரிசையை உள்ளீடாக எடுக்கிறது.# >>> triples_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> triples_sum_to_zero([1, 3, -2, 1])\n# 1\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n# 1\n# >>> triples_sum_to_zero([1])\n# \"\"\nsub triples_sum_to_zero {\n    my($l) = @_;\n","canonical_solution":"sub triples_sum_to_zero {\n    my($l) = @_;\n    my $n = scalar @$l;\n    for my $i (0 .. $n-3) {\n        for my $j ($i+1 .. $n-2) {\n            for my $k ($j+1 .. $n-1) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triples_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 5, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -100]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 3, 5, -100]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_41","nl":"tam_Taml","pl":"pl","prompt":"# இந்த செயல்பாடு, இதுபோன்ற மோதல்களின் எண்ணிக்கையை வெளியிடுகிறது.# அவை மோதியது போல் இல்லை.# ஆனால், இந்த கார்கள் மிகவும் வலுவானவை; அதனால், அவை தொடர்ந்து நகர்கின்றன.# இடமிருந்து வலமாக நகரும் கார் வலமிருந்து இடமாக நகரும் காரின் மீது மோதும் போது.# இரண்டு கார்கள் மோதுவது என்று கூறப்படுகிறது.# வலதுபுறம் இடதுபுறம் ஓட்டுகிறார்கள். இரண்டு வாகனங்கள் தொடங்குகின்றன.# n கார்கள் இடமிருந்து வலமாக ஓடுகின்றன; அதே நேரத்தில், n கார்களின் வேறுபட்ட தொகுப்பு # ஒரு சாலை என்று கற்பனை செய்யுங்கள் அது ஒரு சரியான நேராக முடிவில்லாமல் நீண்ட வரி.sub car_race_collision {\n    my($n) = @_;\n","canonical_solution":"sub car_race_collision {\n    my($n) = @_;\n    return $n;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&car_race_collision;\n        if(eq_deeply($candidate->(2),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),64)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),100)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_42","nl":"tam_Taml","pl":"pl","prompt":"# 1 ஆல் அதிகரிக்கப்பட்ட உறுப்புகளுடன் வரிசை திரும்பவும்.# >>> incr_list([1, 2, 3])\n# [2, 3, 4]\n# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4, 10, 1, 124]\nsub incr_list {\n    my($l) = @_;\n","canonical_solution":"sub incr_list {\n    my($l) = @_;\n    return [map { $_ + 1 } @$l];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&incr_list;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_43","nl":"tam_Taml","pl":"pl","prompt":"# 0 க்கு சமமாக, மற்றும் '' மற்றபடி.# அது வரிசையில் இரண்டு தனித்தனி கூறுகள் இருந்தால் 1 ஐத் தருகிறது# pairs_sum_to_zero ஒரு முழு எண்களின் வரிசையை உள்ளீடாக எடுக்கிறது.# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> pairs_sum_to_zero([1, 3, -2, 1])\n# \"\"\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n# 1\n# >>> pairs_sum_to_zero([1])\n# \"\"\nsub pairs_sum_to_zero {\n    my($l) = @_;\n","canonical_solution":"sub pairs_sum_to_zero {\n    my ($l) = @_;\n    my %seen;\n    for my $num (@$l) {\n        if ($seen{-1 * $num}) {\n            return 1;\n        }\n        $seen{$num} = 1;\n    }\n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pairs_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 5, 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 30]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 30]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_44","nl":"tam_Taml","pl":"pl","prompt":"# அடிப்படை எண்கள் 10 க்கும் குறைவாக இருக்கும்.# மாற்றத்திற்குப் பிறகு ஸ்ட்ரிங் பிரதிநிதித்துவத்தை திரும்பப் பெறுக.# உள்ளீட்டு எண் x இன் எண் அடிப்படையை அடிப்படைக்கு மாற்றவும்.# >>> change_base(8, 3)\n# \"22\"\n# >>> change_base(8, 2)\n# \"1000\"\n# >>> change_base(7, 2)\n# \"111\"\nsub change_base {\n    my($x, $base) = @_;\n","canonical_solution":"sub change_base {\n    my ($x, $base) = @_;\n    my $result = '';\n    \n    if ($base < 2 || $base > 9) {\n        die \"Base must be between 2 and 9\";\n    }\n\n    while ($x > 0) {\n        my $remainder = $x % $base;\n        $result = $remainder . $result;\n        $x = int($x \/ $base);\n    }\n\n    return $result eq '' ? '0' : $result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&change_base;\n        if(eq_deeply($candidate->(8, 3),\"22\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),\"100\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(234, 2),\"11101010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 2),\"10000\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8, 2),\"1000\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 2),\"111\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),\"2\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4),\"3\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5),\"4\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 6),\"5\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 7),\"6\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 8),\"7\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_45","nl":"tam_Taml","pl":"pl","prompt":"# ஒரு முக்கோணத்தின் பக்க நீளம் மற்றும் உயர் திரும்பும் பகுதி கொடுக்கப்பட்டால்.# >>> triangle_area(5, 3)\n# 7.5\nsub triangle_area {\n    my($a, $h) = @_;\n","canonical_solution":"sub triangle_area {\n    my ($a, $h) = @_; \n    return 0.5 * $a * $h;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(5, 3),7.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2),2.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 8),40.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_46","nl":"tam_Taml","pl":"pl","prompt":"# fib4 எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள். மறுபடியும் பயன்படுத்த வேண்டாம்.# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).# fib4(3) -> 0 # fib4(2) -> 2 # fib4(1) -> 0 # fib4(0) -> 0 # Fib4 எண் வரிசை என்பது பின்வருமாறு வரையறுக்கப்பட்ட ஃபீபொனாச்சி வரிசைக்கு ஒத்த ஒரு வரிசை ஆகும்:# >>> fib4(5)\n# 4\n# >>> fib4(6)\n# 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n","canonical_solution":"sub fib4 {\n    my ($n) = @_;\n    return 0 if $n == 0 || $n == 1 || $n == 3;\n    return 2 if $n == 2;\n    \n    my @fib4 = (0, 0, 2, 0);\n    \n    for my $i (4 .. $n) {\n        $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n    }\n    \n    return $fib4[$n];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_47","nl":"tam_Taml","pl":"pl","prompt":"# வரிசையில் உள்ள உறுப்புகளின் மீடியனைத் திரும்பு l.# >>> median([3, 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nsub median {\n    my($l) = @_;\n","canonical_solution":"sub median {\n    my($l) = @_;\n    my @sorted = sort { $a <=> $b } @$l;\n    my $len = @sorted;\n    if ($len % 2 == 1) {\n        return $sorted[int($len\/2)];\n    } else {\n        return ($sorted[$len\/2 - 1] + $sorted[$len\/2]) \/ 2;\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4, 6, 1000, 10, 20]),8.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 1, 3, 9, 9, 2, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_48","nl":"tam_Taml","pl":"pl","prompt":"# கொடுக்கப்பட்ட சரம் ஒரு பாலிண்ட்ரோம் என்பதை சரிபார்க்கிறது.# >>> is_palindrome(\"\")\n# 1\n# >>> is_palindrome(\"aba\")\n# 1\n# >>> is_palindrome(\"aaaaa\")\n# 1\n# >>> is_palindrome(\"zbcd\")\n# \"\"\nsub is_palindrome {\n    my($text) = @_;\n","canonical_solution":"sub is_palindrome {\n    my ($text) = @_;\n    return $text eq reverse($text) ? 1 : \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n        if(eq_deeply($candidate->(\"\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"zbcd\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyz\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywzx\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_49","nl":"tam_Taml","pl":"pl","prompt":"# 2^n மாடுலோ p ஐ திரும்பப் பெறுக (எண்மங்களை நினைவில் கொள்ளுங்கள்).# >>> modp(3, 5)\n# 3\n# >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n# >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n","canonical_solution":"sub modp {\n    my($n, $p) = @_;\n    return (2 ** $n) % $p;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_51","nl":"tam_Taml","pl":"pl","prompt":"# remove_vowels என்பது ஒரு செயல்பாடு ஆகும். இது சரம் எடுத்து சரம் இல்லாமல் திருப்பி விடுகிறது.# >>> remove_vowels(\"\")\n# \"\"\n# >>> remove_vowels(\"abcdef\")\n# \"bcdf\"\n# >>> remove_vowels(\"aaaaa\")\n# \"\"\n# >>> remove_vowels(\"aaBAA\")\n# \"B\"\n# >>> remove_vowels(\"zbcd\")\n# \"zbcd\"\nsub remove_vowels {\n    my($text) = @_;\n","canonical_solution":"sub remove_vowels {\n    my($text) = @_;\n    $text =~ s\/[aeiouAEIOU]\/\/g;\n    return $text;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_vowels;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\nghijklm\"),\"bcdf\nghjklm\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"fedcba\"),\"fdcb\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"acBAA\"),\"cB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EcBOO\"),\"cB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ybcd\"),\"ybcd\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_52","nl":"tam_Taml","pl":"pl","prompt":"# வரிசையில் உள்ள அனைத்து எண்களும் உச்சநிலை t க்குக் கீழே இருந்தால் 1 ஐத் திரும்புக.# >>> below_threshold([1, 2, 4, 10], 100)\n# 1\n# >>> below_threshold([1, 20, 4, 10], 5)\n# \"\"\nsub below_threshold {\n    my($l, $t) = @_;\n","canonical_solution":"sub below_threshold {\n    my($l, $t) = @_;\n    foreach my $num (@$l) {\n        return \"\" if $num >= $t;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_threshold;\n        if(eq_deeply($candidate->([1, 2, 4, 10], 100),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 21),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 22),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 11),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_53","nl":"tam_Taml","pl":"pl","prompt":"# x மற்றும் y ஆகிய இரண்டு எண்களைச் சேர்க்கவும்.# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\nsub add {\n    my($x, $y) = @_;\n","canonical_solution":"return $x + $y;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->(0, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 0),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 7),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 5),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_54","nl":"tam_Taml","pl":"pl","prompt":"# இரண்டு சொற்களில் ஒரே எழுத்துக்கள் இருக்கிறதா என்று சரிபார்க்கவும்.# >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n# 1\n# >>> same_chars(\"abcd\", \"dddddddabc\")\n# 1\n# >>> same_chars(\"dddddddabc\", \"abcd\")\n# 1\n# >>> same_chars(\"eabcd\", \"dddddddabc\")\n# \"\"\n# >>> same_chars(\"abcd\", \"dddddddabce\")\n# \"\"\n# >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n# \"\"\nsub same_chars {\n    my($s0, $s1) = @_;\n","canonical_solution":"sub same_chars {\n    my($s0, $s1) = @_;\n    \n    my %chars_s0 = map { $_ => 1 } split \/\/, $s0;\n    my %chars_s1 = map { $_ => 1 } split \/\/, $s1;\n\n    foreach my $char (keys %chars_s0) {\n        return \"\" unless exists $chars_s1{$char};\n    }\n\n    foreach my $char (keys %chars_s1) {\n        return \"\" unless exists $chars_s0{$char};\n    }\n\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&same_chars;\n        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabc\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dddddddabc\", \"abcd\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eabcd\", \"dddddddabc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabcf\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\", \"aaccc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_55","nl":"tam_Taml","pl":"pl","prompt":"# n-வது ஃபீபனச்சி எண்ணைத் திருப்பிக் கொடு.# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n","canonical_solution":"sub fib {\n    my ($n) = @_;\n    return $n if $n <= 1;\n    my ($a, $b) = (0, 1);\n    for (2..$n) {\n        ($a, $b) = ($b, $a + $b);\n    }\n    return $b;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_56","nl":"tam_Taml","pl":"pl","prompt":"# ஒவ்வொரு திறப்பு அடைப்புக்குறிக்கும் அதனுடன் தொடர்புடைய மூடுதல் அடைப்புக்குறி இருந்தால் 1 ஐத் திரும்புக.# அடைப்புக்குறிகளில் \"<\" மற்றும் \">\" ன் சரம் உள்ளது.# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n","canonical_solution":"sub correct_bracketing {\n    my($brackets) = @_;\n    my $balance = 0;\n\n    foreach my $char (split \/\/, $brackets) {\n        if ($char eq '<') {\n            $balance++;\n        } elsif ($char eq '>') {\n            $balance--;\n            if ($balance < 0) {\n                return \"\";\n            }\n        }\n    }\n    \n    return $balance == 0 ? 1 : \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_57","nl":"tam_Taml","pl":"pl","prompt":"# 1 என்பது வரிசை உறுப்புகள் ஒரே மாதிரியாக அதிகரிக்கும் அல்லது குறைந்து கொண்டே இருக்கும்.# >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n# >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n","canonical_solution":"sub monotonic {\n    my($l) = @_;\n    return 1 if @$l <= 1;\n    \n    my $increasing = 1;\n    my $decreasing = 1;\n    \n    for my $i (1 .. $#$l) {\n        if ($l->[$i] > $l->[$i - 1]) {\n            $decreasing = 0;\n        } elsif ($l->[$i] < $l->[$i - 1]) {\n            $increasing = 0;\n        }\n    }\n    \n    return $increasing || $decreasing ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_58","nl":"tam_Taml","pl":"pl","prompt":"# இரண்டு வரிசைகளுக்கு ஒழுங்கமைக்கப்பட்ட தனித்துவமான பொதுவான கூறுகளைத் தருகிறது.# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\nsub common {\n    my($l1, $l2) = @_;\n","canonical_solution":"sub common {\n    my($l1, $l2) = @_;\n    my %count;\n    $count{$_}++ for @$l1;\n    $count{$_}++ for grep { exists $count{$_} } @$l2;\n    return [ sort { $a <=> $b } grep { $count{$_} > 1 } keys %count ];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common;\n        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], []),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_59","nl":"tam_Taml","pl":"pl","prompt":"# n இன் மிகப்பெரிய பிரதான காரணி திரும்பவும். n > 1 மற்றும் பிரதானமானது அல்ல என்று கருதுங்கள்.# >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\nsub largest_prime_factor {\n    my($n) = @_;\n","canonical_solution":"sub largest_prime_factor {\n    my($n) = @_;\n    my $largest_factor = 1;\n    my $factor = 2;\n\n    while ($n > 1) {\n        if ($n % $factor == 0) {\n            $largest_factor = $factor;\n            $n \/= $factor;\n        } else {\n            $factor++;\n        }\n    }\n    \n    return $largest_factor;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_60","nl":"tam_Taml","pl":"pl","prompt":"# sum_to_n என்பது 1 முதல் n வரை உள்ள எண்களைக் கூட்டுகின்ற ஒரு செயல்பாடு ஆகும்.# >>> sum_to_n(30)\n# 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n# 55\n# >>> sum_to_n(1)\n# 1\nsub sum_to_n {\n    my($n) = @_;\n","canonical_solution":"sub sum_to_n {\n    my ($n) = @_;\n    return $n * ($n + 1) \/ 2;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_to_n;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),66)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),465)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),5050)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_61","nl":"tam_Taml","pl":"pl","prompt":"# ஒவ்வொரு திறப்பு அடைப்புக்குறிக்கும் அதனுடன் தொடர்புடைய மூடுதல் அடைப்புக்குறி இருந்தால் 1 ஐத் திரும்புக.# அடைப்புக்குறிகளில் \"(\" மற்றும் \"\") ன் ஒரு சரம் உள்ளது.# >>> correct_bracketing(\"(\")\n# \"\"\n# >>> correct_bracketing(\"()\")\n# 1\n# >>> correct_bracketing(\"(()())\")\n# 1\n# >>> correct_bracketing(\")(()\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n","canonical_solution":"sub correct_bracketing {\n    my ($brackets) = @_;\n    my $balance = 0;\n\n    foreach my $char (split \/\/, $brackets) {\n        if ($char eq '(') {\n            $balance++;\n        } elsif ($char eq ')') {\n            $balance--;\n        }\n        # If balance is negative, it means there's a closing bracket without a matching opening\n        if ($balance < 0) {\n            return '';\n        }\n    }\n\n    # If balance is zero, all brackets are correctly matched\n    return $balance == 0 ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"()\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()())\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()((()()())())(()()(()))\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((()())))\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")(()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((((\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())())(()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()))()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_62","nl":"tam_Taml","pl":"pl","prompt":"# இந்த பன்மையின் வழித்தோன்றலை அதே வடிவத்தில் திருப்பிக் கொடுங்கள்.# xs[0] + xs[1] * x + xs[2] * x^2 + .... # xs என்பது ஒரு பன்மடங்கின் குணகங்களைக் குறிக்கிறது.# >>> derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative([1, 2, 3])\n# [2, 6]\nsub derivative {\n    my($xs) = @_;\n","canonical_solution":"sub derivative {\n    my($xs) = @_;\n    my @derivative;\n    \n    for my $i (1 .. $#{$xs}) {\n        push @derivative, $xs->[$i] * $i;\n    }\n    \n    return \\@derivative;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&derivative;\n        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),[1, 4, 12, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1, 0, 4]),[2, 2, 0, 16])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_63","nl":"tam_Taml","pl":"pl","prompt":"# தயவுசெய்து fibfib எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள்.# fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3). # fib fib ((2) == 1 # 0 # fib fib ((0) == 0 # FibFib எண் வரிசை என்பது பின்வருமாறு வரையறுக்கப்பட்ட ஃபீபொனாச்சி வரிசைக்கு ஒத்த ஒரு வரிசை ஆகும்:# >>> fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nsub fibfib {\n    my($n) = @_;\n","canonical_solution":"sub fibfib {\n    my($n) = @_;\n    return 0 if $n == 0;\n    return 0 if $n == 1;\n    return 1 if $n == 2;\n\n    my @fibfib = (0, 0, 1);\n    for my $i (3..$n) {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2] + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fibfib;\n        if(eq_deeply($candidate->(2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),24)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),81)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),274)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14),927)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_64","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# ஆனால் அது கொடுக்கப்பட்ட வார்த்தையின் முடிவில் இருக்கும்போது மட்டுமே.# இந்த வழக்கில் உள்ள எழுத்துக்கள் 'a', 'e', 'i', 'o', 'u' ஆகும். இங்கே, 'y' என்பது ஒரு # ஒரு வார்த்தையை உள்ளீடாக வைத்து, அந்த சரத்தில் உள்ள எழுத்துக்களின் எண்ணிக்கையைத் தருகிறது.# ஒரு செயல்பாடு vowels_count எழுதவும் இது ஒரு சரம் எடுக்கும் # >>> vowels_count(\"abcde\")\n# 2\n# >>> vowels_count(\"ACEDY\")\n# 3\nsub vowels_count {\n    my($s) = @_;\n","canonical_solution":"sub vowels_count {\n    my($s) = @_;\n    my $count = 0;\n    my @chars = split \/\/, lc $s;\n    my $length = scalar @chars;\n\n    for my $i (0..$#chars) {\n        if ($chars[$i] =~ \/[aeiou]\/ || ($chars[$i] eq 'y' && $i == $length - 1)) {\n            $count++;\n        }\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&vowels_count;\n        if(eq_deeply($candidate->(\"abcde\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Alone\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"key\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bye\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"keY\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bYe\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ACEDY\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_65","nl":"tam_Taml","pl":"pl","prompt":"# Shift > இலக்கங்களின் எண்ணிக்கை என்றால், இலக்கங்கள் தலைகீழாக திரும்பும்.# மற்றும் ஒரு சரம் என முடிவு திரும்ப.# முழு எண் x இன் இலக்கங்களை வட்டமாக நகர்த்தவும், இலக்கங்களை வலதுபுறமாக நகர்த்தவும்.# >>> circular_shift(12, 1)\n# \"21\"\n# >>> circular_shift(12, 2)\n# \"12\"\nsub circular_shift {\n    my($x, $shift) = @_;\n","canonical_solution":"sub circular_shift {\n    my($x, $shift) = @_;\n    my $digits = length($x);\n    \n    if ($shift > $digits) {\n        return reverse $x;\n    }\n    \n    $shift = $shift % $digits;\n    my $shifted = substr($x, -$shift) . substr($x, 0, $digits - $shift);\n    \n    return $shifted;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&circular_shift;\n        if(eq_deeply($candidate->(100, 2),\"001\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 2),\"12\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(97, 8),\"79\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 1),\"21\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11, 101),\"11\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_66","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# ASCII குறியீடுகள்.# ஒரு சரத்தை உள்ளீடாக எடுத்து மேல் எழுத்துக்களின் தொகையை மட்டுமே திருப்பித் தரும் ஒரு செயல்பாட்டை எழுதுக' # பணி # >>> digitSum(\"\")\n# 0\n# >>> digitSum(\"abAB\")\n# 131\n# >>> digitSum(\"abcCd\")\n# 67\n# >>> digitSum(\"helloE\")\n# 69\n# >>> digitSum(\"woArBld\")\n# 131\n# >>> digitSum(\"aAaaaXa\")\n# 153\nsub digitSum {\n    my($s) = @_;\n","canonical_solution":"sub digitSum {\n    my($s) = @_;\n    my $sum = 0;\n    foreach my $char (split \/\/, $s) {\n        if ($char =~ \/[A-Z]\/) {\n            $sum += ord($char);\n        }\n    }\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digitSum;\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abAB\"),131)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcCd\"),67)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"helloE\"),69)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"woArBld\"),131)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aAaaaXa\"),153)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\" How are yOu?\"),151)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You arE Very Smart\"),327)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_67","nl":"tam_Taml","pl":"pl","prompt":"# எக்ஸாம்பல் க்கான:# கூடைக்குள் உள்ள மாங்கோ பழங்களின் எண்ணிக்கையைத் திருப்பிக் கொடுங்கள்.# ஆரஞ்சு மற்றும் ஆப்பிள் மற்றும் பழங்களின் மொத்த எண்ணிக்கையை குறிக்கும் ஒரு முழு எண் # ஆப்பிள்கள், ஆரஞ்சுகள், மற்றும் மாங்கோ பழங்கள்.# இந்த பழங்கள் ஒரு கூடைக்குள் விநியோகிக்கப்படுகின்றன.# இந்த பணியில், உங்களுக்கு ஒரு எண் வழங்கப்படும். அது பல ஆப்பிள்கள் மற்றும் ஆரஞ்சுகளை குறிக்கும்.# >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n# 8\n# >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n# 19\nsub fruit_distribution {\n    my($s, $n) = @_;\n","canonical_solution":"sub fruit_distribution {\n    my($s, $n) = @_;\n    \n    # Extract numbers from the input string\n    my ($apples, $oranges) = $s =~ \/(\\d+) apples and (\\d+) oranges\/;\n    \n    # Calculate total apples and oranges\n    my $total_apples_oranges = $apples + $oranges;\n    \n    # Calculate number of mangoes\n    my $mangoes = $n - $total_apples_oranges;\n    \n    return $mangoes;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fruit_distribution;\n        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 19),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 21),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0 apples and 1 oranges\", 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1 apples and 0 oranges\", 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 100),95)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 5),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1 apples and 100 oranges\", 120),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_68","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம் 1:# சம மதிப்புகள் இல்லை அல்லது கொடுக்கப்பட்ட வரிசை காலியாக இருந்தால், திரும்பவும் [].# பிடுங்கப்பட்ட node ஒரு வரிசையில் திரும்ப வேண்டும், [ smalest_value, அதன் index ], # ஒரே சிறிய எண் மதிப்பு கொண்ட பல முனைகள் காணப்பட்டால், மிகச்சிறிய குறியீட்டைக் கொண்ட முனையைத் திருப்பித் தரவும்.# பிடுங்கப்பட்ட முனை மிகச்சிறிய சம மதிப்புள்ள முனையாக இருக்க வேண்டும்.# உங்கள் பணி ஒரு முனைகளை பிடுங்கி அதை திருப்பித் தருவது.# \"ஒரு மரத்தின் கிளைகளை குறிக்கும் ஒரு வரிசை கொடுக்கப்பட்டால், அது எதிர்மறை அல்லாத முழு எண் முனைகளைக் கொண்டிருக்கும் # >>> pluck([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> pluck([])\n# []\n# Example 4:\n# >>> pluck([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\nsub pluck {\n    my($arr) = @_;\n","canonical_solution":"sub pluck {\n    my ($arr) = @_;\n    my $min_even_value = undef;\n    my $min_index = undef;\n\n    for my $i (0 .. @$arr - 1) {\n        my $value = $arr->[$i];\n        if ($value % 2 == 0) {\n            if (!defined($min_even_value) || $value < $min_even_value) {\n                $min_even_value = $value;\n                $min_index = $i;\n            }\n        }\n    }\n\n    return defined($min_even_value) ? [$min_even_value, $min_index] : [];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pluck;\n        if(eq_deeply($candidate->([4, 2, 3]),[2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 0, 3, 0, 4, 2]),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 8, 4, 8]),[4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 7, 1]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_69","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# இதுபோன்ற மதிப்பு இல்லை என்றால், திரும்பவும் -1.# ஒரு முழு எண்ணின் அதிர்வெண் என்பது அது வரிசையில் தோன்றும் முறைகளின் எண்ணிக்கை ஆகும்.# பூஜ்ஜியமானது, மற்றும் முழு எண்ணின் மதிப்பை விட அதிகமாகவோ அல்லது சமமாகவோ ஒரு அதிர்வெண் உள்ளது.# க்கு மேல் உள்ள மிகப்பெரிய முழு எண்ணைத் திருப்பிக் கொடுங்கள்.# >>> search([4, 1, 2, 2, 3, 1])\n# 2\n# >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n# 3\n# >>> search([5, 5, 4, 4, 4])\n# -1\nsub search {\n    my($lst) = @_;\n","canonical_solution":"sub search {\n    my($lst) = @_;\n    my %frequency;\n\n    foreach my $num (@$lst) {\n        $frequency{$num}++;\n    }\n\n    my $result = -1;\n    foreach my $num (keys %frequency) {\n        if ($num > 0 && $frequency{$num} >= $num) {\n            if ($num > $result) {\n                $result = $num;\n            }\n        }\n    }\n\n    return $result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 4, 1, 4, 4]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8, 8, 8]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 8, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 9, 10, 1, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_70","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# பின்பு மீதமுள்ள முழு எண்களின் அதிகபட்ச, பின்பு குறைந்தபட்ச மற்றும் பல.# நீங்கள் குறைந்தபட்ச மதிப்புடன் தொடங்கும் போது, # முழு எண்களின் வரிசை கொடுக்கப்பட்டால், வரிசையை விசித்திரமான வரிசையில் திருப்பி விடுங்கள்.# >>> strange_sort_list([1, 2, 3, 4])\n# [1, 4, 2, 3]\n# >>> strange_sort_list([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> strange_sort_list([])\n# []\nsub strange_sort_list {\n    my($lst) = @_;\n","canonical_solution":"sub strange_sort_list {\n    my($lst) = @_;\n    my @result;\n    my @sorted = sort {$a <=> $b} @$lst;\n    \n    while (@sorted) {\n        push @result, shift @sorted;\n        push @result, pop @sorted if @sorted;\n    }\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strange_sort_list;\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111111]),[111111])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_71","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# மூன்றாவது பக்கத்தை விட.# மூன்று பக்கங்கள் ஒரு சரியான முக்கோணத்தை உருவாக்குகின்றன, எந்த இரண்டு பக்கங்களின் கூட்டுத்தொகை அதிகமாக இருந்தால்.# இல்லையெனில் -1 க்கு திரும்பு# மூன்று பக்கங்களும் ஒரு சரியான முக்கோணத்தை உருவாக்குகின்றன என்றால், முக்கோணம் 2 தசம புள்ளிகளுக்கு வட்டமானது.# ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளங்களைக் கொடுத்தால். ன் பரப்பளவைத் திருப்பிக் கொடுங்கள்.# >>> triangle_area(3, 4, 5)\n# 6.0\n# >>> triangle_area(1, 2, 10)\n# -1\nsub triangle_area {\n    my($a, $b, $c) = @_;\n","canonical_solution":"sub triangle_area {\n    my($a, $b, $c) = @_;\n    \n    # Check if the sides form a valid triangle\n    unless ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        return -1;\n    }\n    \n    # Calculate the semi-perimeter\n    my $s = ($a + $b + $c) \/ 2;\n    \n    # Calculate the area using Heron's formula\n    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    \n    # Return the area rounded to 2 decimal points\n    return sprintf(\"%.2f\", $area);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(3, 4, 5),6.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 5),8.18)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),1.73)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),16.25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 6, 3),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),0.43)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_72","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# q என்பது சமநிலையில் இருந்தால் அது பறக்கும் (இது ஒரு பாலிண்ட்ரோம் வரிசை) மற்றும் அதன் உறுப்புகளின் தொகை அதிகபட்ச எடை w க்கு குறைவாகவோ அல்லது சமமாகவோ இருந்தால்.# ஒரு செயல்பாட்டை எழுதுங்கள், அது 1 ஐ திரும்பப் பெறுகிறது, q பொருள் பறக்கும் என்றால், '' இல்லையெனில்.# >>> will_it_fly([1, 2], 5)\n# \"\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> will_it_fly([3, 2, 3], 1)\n# \"\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly([3, 2, 3], 9)\n# 1\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> will_it_fly([3], 5)\n# 1\n# # 3 is less than the maximum possible weight, and it's balanced.\nsub will_it_fly {\n    my($q, $w) = @_;\n","canonical_solution":"sub will_it_fly {\n    my($q, $w) = @_;\n    # Check if the array is palindromic\n    my @reversed = reverse @$q;\n    return '' unless \"@$q\" eq \"@reversed\";\n\n    # Check if the sum of elements is within weight limit\n    my $sum = 0;\n    $sum += $_ for @$q;\n    return $sum <= $w ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&will_it_fly;\n        if(eq_deeply($candidate->([3, 2, 3], 9),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], 5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 3], 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], 6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_73","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # ஒரு மாற்றத்தில், நீங்கள் ஒரு உறுப்பை வேறு எந்த உறுப்பிற்கும் மாற்றலாம்.# வரிசை palindromic செய்ய மாற்றப்பட வேண்டும். ஒரு palindromic வரிசை என்று ஒரு வரிசை உள்ளது # முழு எண்களின் வரிசை arr கொடுக்கப்பட்டால், க்கு குறைந்தபட்ச உறுப்புகளின் எண்ணிக்கையைக் கண்டறியவும்# >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n# 4\n# >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n# 1\n# >>> smallest_change([1, 2, 3, 2, 1])\n# 0\nsub smallest_change {\n    my($arr) = @_;\n","canonical_solution":"sub smallest_change {\n    my($arr) = @_;\n    my $count = 0;\n    my $n = scalar @$arr;\n    \n    for my $i (0 .. int($n \/ 2) - 1) {\n        if ($arr->[$i] != $arr->[$n - $i - 1]) {\n            $count++;\n        }\n    }\n    \n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&smallest_change;\n        if(eq_deeply($candidate->([1, 2, 3, 5, 4, 7, 9, 6]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 3, 2, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 4, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 1, 1, 3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_74","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள் # இரண்டு வரிசைகளும் ஒரே எண்ணிக்கையிலான எழுத்துக்களைக் கொண்டிருந்தால், முதல் வரிசையைத் திருப்பித் தரவும்.# வரிசையின் அனைத்து சரங்களிலும் உள்ள மொத்த எண்ணிக்கை மற்ற வரிசைகளை விட குறைவாக உள்ளது.# இரண்டு வரிசைகளை ஏற்றுக்கொண்டு, க்குள்ளான வரிசையைத் திருப்பிக் கொடுக்கும் ஒரு செயல்பாட்டை எழுதுக.# >>> total_match([], [])\n# []\n# >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n# [\"hI\", \"Hi\"]\n# >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n# [\"hi\", \"admin\"]\n# >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n# [\"hI\", \"hi\", \"hi\"]\n# >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n# [\"4\"]\nsub total_match {\n    my($lst1, $lst2) = @_;\n","canonical_solution":"sub total_match {\n    my ($lst1, $lst2) = @_;\n    \n    my $len1 = sum_chars($lst1);\n    my $len2 = sum_chars($lst2);\n\n    return $len1 <= $len2 ? $lst1 : $lst2;\n}\n\nsub sum_chars {\n    my ($array) = @_;\n    my $total = 0;\n    foreach my $string (@$array) {\n        $total += length($string);\n    }\n    return $total;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&total_match;\n        if(eq_deeply($candidate->([], []),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([], [\"this\"]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\"], []),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_75","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# (a) 100 க்குக் குறைவாக உள்ளது என்பதை அறிவது.# மற்றும் தவறான மற்றபடி.# கொடுக்கப்பட்ட எண் 3 பிரதான எண்களின் பெருக்கத்தால் true எனும் வினைச்சொல்லை எழுதுக .# >>> is_multiply_prime(30)\n# 1\n# 30 = 2 * 3 * 5\nsub is_multiply_prime {\n    my($a) = @_;\n","canonical_solution":"sub is_multiply_prime {\n    my($a) = @_;\n\n    return 0 if $a >= 100;\n\n    my @primes = grep { is_prime($_) } 2..int($a\/2);\n\n    for my $i (0..$#primes) {\n        for my $j ($i..$#primes) {\n            for my $k ($j..$#primes) {\n                if ($primes[$i] * $primes[$j] * $primes[$k] == $a) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nsub is_prime {\n    my($n) = @_;\n    return 0 if $n < 2;\n    for my $i (2..sqrt($n)) {\n        return 0 if $n % $i == 0;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_multiply_prime;\n        if(eq_deeply($candidate->(5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(125),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(105),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(126),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(729),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(891),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1001),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_76","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # x என்பது n இன் ஒரு எளிய பவர் ஆகும்.# n இன் சக்தி மற்றும் மற்ற சந்தர்ப்பங்களில் தவறானது.# உங்கள் பணி ஒரு எண் x ஒரு எளிய என்றால் உண்மை என்று ஒரு செயல்பாடு எழுத உள்ளது # >>> is_simple_power(1, 4)\n# 1\n# >>> is_simple_power(2, 2)\n# 1\n# >>> is_simple_power(8, 2)\n# 1\n# >>> is_simple_power(3, 2)\n# \"\"\n# >>> is_simple_power(3, 1)\n# \"\"\n# >>> is_simple_power(5, 3)\n# \"\"\nsub is_simple_power {\n    my($x, $n) = @_;\n","canonical_solution":"sub is_simple_power {\n    my($x, $n) = @_;\n    \n    return 0 if $n <= 0;\n    return \"\" if $x < 1;\n    \n    if ($x == 1) {\n        return 1;\n    }\n\n    while ($x > 1) {\n        if ($x % $n != 0) {\n            return \"\";\n        }\n        $x \/= $n;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_simple_power;\n        if(eq_deeply($candidate->(16, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(143214, 16),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 4),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(24, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(128, 4),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 12),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_77","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# குறிப்பு: உள்ளீடு எப்போதும் செல்லுபடியாகும் என்று நீங்கள் கருதலாம்.# இந்த இன்ஜெர் ஒரு முழு எண்ணின் கனமாக இருந்தால்.# ஒரு முழு எண் a ஐ எடுத்து 1 ஐ திரும்பப் பெறும் ஒரு செயல்பாட்டை எழுதுக .# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n# \"\"\nsub iscube {\n    my($a) = @_;\n","canonical_solution":"sub iscube {\n    my($a) = @_;\n    my $cube_root = int($a ** (1\/3));\n    return 1 if $cube_root ** 3 == $a;\n    return 1 if ($cube_root + 1) ** 3 == $a; # handle small floating-point errors\n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_78","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# A,B,C,D,E,F ஆகிய குறியீடுகள் எப்போதும் பெரிய எழுத்துக்களில் எழுதப்பட்டிருக்கும்.# குறிப்பு: உள்ளீடு எப்போதும் சரியானது அல்லது காலியாக உள்ளது என்று நீங்கள் கருதலாம் சரம்,# B (= தசம 11), D (= தசம 13).# பின்வரும் இலக்கங்களில் ஏதேனும் ஒன்றை நீங்கள் கண்டுபிடிக்க வேண்டும்: 2, 3, 5, 7, # பிரதான எண்கள் 2, 3, 5, 7, 11, 13, 17,...# அறுபது இலக்க இலக்கங்கள் 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.# 1 ஐ விட பெரியது இது இரண்டு சிறிய இயற்கை எண்களின் கூட்டுத்தொகை அல்ல).# பிரதான எண்களான இலக்கங்கள் (பிரதான எண், அல்லது ஒரு பிரதான எண், ஒரு இயற்கை எண் # ஒரு ஹெக்ஸாடெசிமல் எண்ணை ஒரு சரம் போல எண்ணி, ஹெக்ஸாடெசிமல் எண்ணை எண்ணும் # நீங்கள் ஒரு பெறுநர் செயல்பாடு எழுத பணி செய்யப்பட்டுள்ளது.# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\")\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n# 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n","canonical_solution":"sub hex_key {\n    my($num) = @_;\n    my %prime_hex_digits = map { $_ => 1 } ('2', '3', '5', '7', 'B', 'D');\n    my $prime_count = 0;\n    \n    foreach my $char (split \/\/, $num) {\n        $prime_count++ if exists $prime_hex_digits{$char};\n    }\n    \n    return $prime_count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_79","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# வடிவமைப்பிற்கு உதவ கூடுதல் எழுத்துக்கள் உள்ளன.# தொடக்கத்திலும் இறுதியிலும் ஒரு கூடுதல் 'db' எழுத்துக்கள் இருக்கும்.# எண். சரத்தில் உள்ள ஒவ்வொரு எழுத்து '0' அல்லது '1' ஆக இருக்கும்.# பைனரி வடிவம். செயல்பாடு ஒரு சரத்தை திரும்பப் பெற வேண்டும், ஒவ்வொரு எழுத்து ஒரு பைனரி # நீங்கள் தசம வடிவத்தில் ஒரு எண் கொடுக்கப்படும் மற்றும் உங்கள் பணி அதை மாற்ற உள்ளது # >>> decimal_to_binary(15)\n# \"db1111db\"\n# >>> decimal_to_binary(32)\n# \"db100000db\"\nsub decimal_to_binary {\n    my($decimal) = @_;\n","canonical_solution":"sub decimal_to_binary {\n    my($decimal) = @_;\n    my $binary = sprintf(\"%b\", $decimal);\n    return \"db\" . $binary . \"db\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&decimal_to_binary;\n        if(eq_deeply($candidate->(0),\"db0db\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(32),\"db100000db\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(103),\"db1100111db\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15),\"db1111db\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_80","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # ஒரு சரம் குறைந்தது 3 நீளமும், ஒவ்வொரு 3 தொடர்ச்சியான எழுத்துக்களும் வேறுபட்டதாக இருந்தால் அது மகிழ்ச்சியாக இருக்கும்.# உங்கள் பணி சரம் happl அல்லது இல்லை என்பதை சரிபார்க்க உள்ளது.# உங்களுக்கு ஒரு சரம் கொடுக்கப்பட்டுள்ளது.# >>> is_happy(\"a\")\n# \"\"\n# >>> is_happy(\"aa\")\n# \"\"\n# >>> is_happy(\"abcd\")\n# 1\n# >>> is_happy(\"aabb\")\n# \"\"\n# >>> is_happy(\"adb\")\n# 1\n# >>> is_happy(\"xyy\")\n# \"\"\nsub is_happy {\n    my($s) = @_;\n","canonical_solution":"sub is_happy {\n    my($s) = @_;\n    return \"\" if length($s) < 3;\n    for my $i (0 .. length($s) - 3) {\n        my $substr = substr($s, $i, 3);\n        my %chars;\n        $chars{$_}++ for split \/\/, $substr;\n        return \"\" if keys(%chars) != 3;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"adb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxioi\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_81","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# 0.0 E # > 0.0 D- # > 0.7 D # > 1.0 D+ # > 1.3 C- # > 1.7 C # > 2.0 C+ # > 2.3 B- # > 2.7 B # > 3.0 B+ # > 3.3 A- # > 3.7 A # 4.0 A+ # GPA. ல் லைட்டர் கிரேட்.# பின்வரும் அட்டவணையைப் பயன்படுத்தி எழுத்து தரங்களின் வரிசையை வெளியிடக்கூடிய ஒரு செயல்பாடு:# அவள் உங்களுக்கு சில மாணவர்கள் GPA கள் ஒரு வரிசை கொடுத்தார் மற்றும் நீங்கள் எழுத வேண்டும் .# ஒரே பிரச்சனை என்னவென்றால், மதிப்பீடு செய்வதற்கு பயன்படுத்திய குறியீட்டை அவள் இழந்துவிட்டாள்.# மாணவர்களுக்கு. ஆசிரியர் தனது சொந்த மதிப்பீட்டு வழிமுறையை உருவாக்கி வருகிறார்.# இது செமஸ்டரின் கடைசி வாரம் மற்றும் ஆசிரியர் மதிப்பெண்களை கொடுக்க வேண்டும்.# >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nsub numerical_letter_grade {\n    my($grades) = @_;\n","canonical_solution":"sub numerical_letter_grade {\n    my ($gpas) = @_;\n    my @letters;\n\n    foreach my $gpa (@$gpas) {\n        if ($gpa == 4.0) {\n            push @letters, 'A+';\n        } elsif ($gpa > 3.7) {\n            push @letters, 'A';\n        } elsif ($gpa > 3.3) {\n            push @letters, 'A-';\n        } elsif ($gpa > 3.0) {\n            push @letters, 'B+';\n        } elsif ($gpa > 2.7) {\n            push @letters, 'B';\n        } elsif ($gpa > 2.3) {\n            push @letters, 'B-';\n        } elsif ($gpa > 2.0) {\n            push @letters, 'C+';\n        } elsif ($gpa > 1.7) {\n            push @letters, 'C';\n        } elsif ($gpa > 1.3) {\n            push @letters, 'C-';\n        } elsif ($gpa > 1.0) {\n            push @letters, 'D+';\n        } elsif ($gpa > 0.7) {\n            push @letters, 'D';\n        } elsif ($gpa > 0.0) {\n            push @letters, 'D-';\n        } else {\n            push @letters, 'E';\n        }\n    }\n\n    return \\@letters;\n}\n\nmy $gpas = [4.0, 3, 1.7, 2, 3.5];\nmy $letter_grades = numerical_letter_grade($gpas);\nprint join(\", \", @$letter_grades);","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0, 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_82","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள் # நீளம் ஒரு பிரதான எண் அல்லது ' ' இல்லையெனில் # ஒரு சரம் எடுத்து 1 ஐ திருப்பித் தரும் ஒரு செயல்பாட்டை எழுதுங்கள்# >>> prime_length(\"Hello\")\n# 1\n# >>> prime_length(\"abcdcba\")\n# 1\n# >>> prime_length(\"kittens\")\n# 1\n# >>> prime_length(\"orange\")\n# \"\"\nsub prime_length {\n    my($string) = @_;\n","canonical_solution":"sub prime_length {\n    my ($string) = @_;\n    my $length = length($string);\n\n    return '' if $length < 2;\n    for my $i (2 .. sqrt($length)) {\n        return '' if $length % $i == 0;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_length;\n        if(eq_deeply($candidate->(\"Hello\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdcba\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"kittens\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"orange\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"wow\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"world\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"MadaM\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Wow\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"HI\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"go\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gogo\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaaaaaaaaaaaa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Madam\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"M\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_83","nl":"tam_Taml","pl":"pl","prompt":"# நேர்மறை முழு எண்கள் 1 உடன் தொடங்குகின்றன அல்லது முடிவடைகின்றன.# ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், n- இலக்கங்களின் எண்ணிக்கையைத் திருப்பிக் கொடுங்கள்.sub starts_one_ends {\n    my($n) = @_;\n","canonical_solution":"sub starts_one_ends {\n    my($n) = @_;\n    \n    # If n is 1, the numbers are 1, 2, 3, ..., 9 (single digit numbers starting\n    # or ending with 1), hence return 1 (only the number 1).\n    return 1 if $n == 1;\n\n    # Calculate the count of numbers starting with 1\n    # Numbers from 1..9 (n-1 zeros) give us 10^(n-1) choices\n    my $start_one_count = 10 ** ($n - 1);\n\n    # Calculate the count of numbers ending with 1\n    # Numbers from 10..10^(n-1) give us 10^(n-1) choices\n    my $end_one_count = 10 ** ($n - 1);\n\n    # However, numbers that both start and end with 1 (like 111...1)\n    # are counted twice so we need to add them in only once.\n    my $both_count = 1; # There's exactly one such number: 10^(n-1) + 1\n\n    # Total unique count\n    my $total_count = $start_one_count + $end_one_count - $both_count;\n\n    return $total_count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&starts_one_ends;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),18)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),180)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),1800)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),18000)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_84","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம் # ஒரு நேர்மறை முழு எண் N கொடுக்கப்பட்டால், அதன் இலக்கங்களின் மொத்த தொகையை பைனரியில் கொடுங்கள்.# >>> solve(1000)\n# \"1\"\n# >>> solve(150)\n# \"110\"\n# >>> solve(147)\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 ≤ N ≤ 10000.\n# Output:\n# a string of binary number\nsub solve {\n    my($N) = @_;\n","canonical_solution":"sub solve {\n    my($N) = @_;\n    my $sum = 0;\n    $sum += $_ for split \/\/, $N;\n    return sprintf(\"%b\", $sum);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(1000),\"1\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(150),\"110\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(147),\"1100\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(333),\"1001\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(963),\"10010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_85","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# முழு எண்களின் ஒரு காலியற்றாத வரிசை கொடுக்கப்பட்டால் lst. எண்களின் எண்ணிக்கைகளை சம எண்களாக சேர்க்கவும்.# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n    my($lst) = @_;\n","canonical_solution":"sub add {\n    my ($lst) = @_;\n    my $sum = 0;\n\n    for (my $i = 1; $i < @$lst; $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_86","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # குறிப்பு: சொற்களின் வரிசையையும், வாக்கியத்தில் உள்ள இடைவெளிகளையும் நீங்கள் கவனத்தில் கொள்ள வேண்டும்.# ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்# ல் உள்ள அனைத்து எழுத்துக்களும் ஒரு புதிய வார்த்தையால் மாற்றப்படுகின்றன.# வரிசைப்படுத்தப்பட்ட வரிசை, அனைத்து வார்த்தைகளும் (வெளியால் பிரிக்கப்பட்டவை) # ஒரு சரத்தை எடுத்து அதன் ஒழுங்குபடுத்தப்பட்ட பதிப்பைத் தரும் ஒரு செயல்பாட்டை எழுதுக.# >>> anti_shuffle(\"Hi\")\n# \"Hi\"\n# >>> anti_shuffle(\"hello\")\n# \"ehllo\"\n# >>> anti_shuffle(\"Hello World!!!\")\n# \"Hello !!!Wdlor\"\nsub anti_shuffle {\n    my($s) = @_;\n","canonical_solution":"sub anti_shuffle {\n    my($s) = @_;\n    $s =~ s\/(\\S+)\/join('', sort split \/\/, $1)\/ge;\n    return $s;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&anti_shuffle;\n        if(eq_deeply($candidate->(\"Hi\"),\"Hi\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"hello\"),\"ehllo\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"number\"),\"bemnru\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),\"abcd\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello World!!!\"),\"Hello !!!Wdlor\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi. My name is Mister Robot. How are you?\"),\".Hi My aemn is Meirst .Rboot How aer ?ouy\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_87","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# மேலும், வரிசையின் ஒருங்கிணைப்புகளை வரிசைப்படி வரிசைப்படுத்தவும்.# ஒருங்கிணைப்புகளை முதலில் வரிசைப்படி ஏறும் வரிசையில் வரிசைப்படுத்துங்கள்.# ஒவ்வொரு வரிசையும் ஒரு ஒருங்கிணைப்பு - (வரிசை, நெடுவரிசைகள்), 0 உடன் தொடங்குகிறது.# மற்றும் arrays இன் array ஐ திரும்பவும், [(x1, y1), (x2, y2) ...] போன்ற # lst, மற்றும் முழு எண் x கொடுக்கப்பட்டால், வரிசையில் முழு எண்கள் x ஐ கண்டறியவும், # ஒவ்வொரு வரிசையிலும் வெவ்வேறு எண்ணிக்கையிலான நெடுவரிசைகள் இருக்கலாம்.# இது மேட்ரிக்ஸுக்கு ஒத்ததாகும், ஆனால் மேட்ரிக்ஸ்களைப் போலல்லாமல்,# உங்களுக்கு 2 பரிமாண தரவு கொடுக்கப்பட்டுள்ளது, ஒரு கூண்டு வரிசை, # >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row([], 1)\n# []\n# >>> get_row([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\nsub get_row {\n    my($lst, $x) = @_;\n","canonical_solution":"sub get_row {\n    my ($lst, $x) = @_;\n    my @result;\n\n    for my $i (0 .. @$lst - 1) {\n        my @row_result;\n        for my $j (0 .. @{$lst->[$i]} - 1) {\n            if ($lst->[$i][$j] == $x) {\n                push @row_result, [$i, $j];\n            }\n        }\n        # Sort the coordinates of the row by columns in descending order\n        @row_result = sort { $b->[1] <=> $a->[1] } @row_result;\n        push @result, @row_result;\n    }\n\n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_row;\n        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([], 1),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1]], 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[], [1], [1, 2, 3]], 3),[[2, 2]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_88","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# * கொடுக்கப்பட்ட வரிசையை மாற்ற வேண்டாம்.# குறிப்பு:# அல்லது, இதன் தொகை ((முதல் குறியீட்டு மதிப்பு, கடைசி குறியீட்டு மதிப்பு) சமமாக இருந்தால், அதை இறங்கும் வரிசையில் வரிசைப்படுத்தவும்.# கொடுக்கப்பட்ட வரிசையை ஏறுவரிசையில் வரிசைப்படுத்துவீர்கள், இதன் தொகை ((முதல் குறியீட்டு மதிப்பு, கடைசி குறியீட்டு மதிப்பு) ஒற்றைப்படை என்றால்,# எதிர்மறை அல்லாத முழு எண்களின் வரிசை கொடுக்கப்பட்டால், வரிசைப்படுத்திய பின் கொடுக்கப்பட்ட வரிசையின் ஒரு கோப்பைத் திருப்பித் தரவும்,# >>> sort_array([])\n# []\n# >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\nsub sort_array {\n    my($array) = @_;\n","canonical_solution":"sub sort_array {\n    my ($array) = @_;\n    return [] if !@$array;  # Return empty array if input is empty\n\n    my $first = $array->[0];\n    my $last = $array->[-1];\n    my $sum = $first + $last;\n\n    if ($sum % 2 == 0) {\n        # Sort in descending order if the sum is even\n        return [sort { $b <=> $a } @$array];\n    } else {\n        # Sort in ascending order if the sum is odd\n        return [sort { $a <=> $b } @$array];\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23, 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_89","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # இரண்டு இடங்களில் இரண்டு மடங்கு மடங்கு.# எழுத்துக்கள் # எழுத்துக்களை சுழற்றி ஒரு குறியாக்கப்பட்ட சரத்தை தருகிறது.# ஒரு வரிசையை ஒரு வாதமாக எடுத்துக்கொள்ளும் ஒரு செயல்பாட்டை உருவாக்குங்கள் மற்றும் # >>> encrypt(\"hi\")\n# \"lm\"\n# >>> encrypt(\"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt(\"gf\")\n# \"kj\"\n# >>> encrypt(\"et\")\n# \"ix\"\nsub encrypt {\n    my($s) = @_;\n","canonical_solution":"sub encrypt {\n    my($s) = @_;\n    my $shift = 2 * 2;  # Alphabet shifted by two multiplied by two places (4 places)\n    $s =~ tr\/a-zA-Z\/n-za-mN-ZA-M\/;  # Perform a Caesar cipher with a shift of 13 places\n    return $s;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encrypt;\n        if(eq_deeply($candidate->(\"hi\"),\"lm\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfghjkl\"),\"ewhjklnop\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gf\"),\"kj\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"et\"),\"ix\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"faewfawefaewg\"),\"jeiajeaijeiak\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"hellomyfriend\"),\"lippsqcjvmirh\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\"),\"e\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_90","nl":"tam_Taml","pl":"pl","prompt":"# இதுபோன்ற உறுப்பு இல்லாவிட்டால் undef ஐத் திருப்பி விடுக.# ஒரு செயல்பாட்டை எழுதுக next_smallest() இது வரிசையின் 2 வது சிறிய உறுப்பைத் தருகிறது.# உங்களுக்கு முழு எண்களின் வரிசை கொடுக்கப்பட்டுள்ளது.# >>> next_smallest([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest([5, 1, 4, 3, 2])\n# 2\n# >>> next_smallest([])\n# undef\n# >>> next_smallest([1, 1])\n# undef\nsub next_smallest {\n    my($lst) = @_;\n","canonical_solution":"sub next_smallest {\n    my($lst) = @_;\n    \n    # Return undef if the list has less than two elements\n    return undef unless @$lst >= 2;\n    \n    # Sort the unique elements of the list\n    my @sorted_unique = sort { $a <=> $b } keys %{{ map { $_ => 1 } @$lst }};\n    \n    # If there is only one unique element, return undef, else return the second smallest\n    return @sorted_unique >= 2 ? $sorted_unique[1] : undef;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_smallest;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 1, 4, 3, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-35, 34, 12, -45]),-35)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_91","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # வாக்கியங்கள் ',' '?' அல்லது '! ' மூலம் பிரிக்கப்படுகின்றன.# \"I\" என்ற வார்த்தையுடன் தொடங்கும் ஒரு வாக்கியம்.# நீங்கள் வார்த்தைகள் ஒரு சரம் கொடுக்கப்படும், உங்கள் பணி எண் எண்ண வேண்டும்.# >>> is_bored(\"Hello world\")\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n# 1\nsub is_bored {\n    my($S) = @_;\n","canonical_solution":"my($S) = @_;\n    my $count = 0;\n    my @sentences = split \/(?<=[.?!])\\s*\/, $S;\n    foreach my $sentence (@sentences) {\n        $sentence =~ s\/^\\s+|\\s+$\/\/g;\n        $count++ if $sentence =~ \/^I\\b\/i;\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_bored;\n        if(eq_deeply($candidate->(\"Hello world\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is the sky blue?\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I love It !\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bIt\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I feel good today. I will be productive. will kill It\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You and I are going for a walk\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_92","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள் # மற்ற எல்லா நிகழ்வுகளிலும் false எனத் திருப்பித் தரப்படும்.# எண்களில் ஒன்று மற்ற இரண்டின் கூட்டுத்தொகைக்கு சமமாக இருந்தால், மற்றும் அனைத்து எண்களும் முழு எண்கள் என்றால் உண்மை எனத் திருப்பித் தரப்படும்.# 3 எண்களை எடுக்கும் ஒரு செயல்பாட்டை உருவாக்கவும்.# >>> any_int(5, 2, 7)\n# 1\n# >>> any_int(3, 2, 2)\n# \"\"\n# >>> any_int(3, -2, 1)\n# 1\n# >>> any_int(3.6, -2.2, 2)\n# \"\"\nsub any_int {\n    my($x, $y, $z) = @_;\n","canonical_solution":"sub any_int {\n    my($x, $y, $z) = @_;\n    \n    # Check if all inputs are integers\n    return \"\" unless defined $x && defined $y && defined $z;\n    return \"\" unless $x =~ \/^-?\\d+$\/ && $y =~ \/^-?\\d+$\/ && $z =~ \/^-?\\d+$\/;\n    \n    # Check if any number is the sum of the other two\n    return 1 if $x == $y + $z;\n    return 1 if $y == $x + $z;\n    return 1 if $z == $x + $y;\n    \n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&any_int;\n        if(eq_deeply($candidate->(2, 3, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2.5, 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.5, 5, 3.5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 6, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2.2, 2.2, 2.2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-4, 6, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 1, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4, 7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3.0, 4, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_93","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# எழுத்துக்கள் மட்டுமே ஏற்றுக்கொள்ளப்படும்.# ஆங்கில எழுத்துக்களில் உள்ள எழுத்துக்கள்.# க்கு முன்னால் 2 இடங்களில் தோன்றும் கடிதத்துடன் கூடிய செய்தி# ல் உள்ள அனைத்து எழுத்துக்களின் பெட்டிகளை மாற்றி, அனைத்து ஒலிகளையும் மாற்றுகிறது.# ஒரு செய்தியை எடுத்து, அந்த செய்தியில் குறியீட்டு ஒரு செயல்பாடு எழுத# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n","canonical_solution":"sub encode {\n    my($message) = @_;\n    $message =~ tr\/A-Za-z\/N-ZA-Mn-za-m\/;\n    $message =~ tr\/aeiouAEIOU\/cgkqwCGKQW\/;\n    return $message;\n}\n\n# Example usage\nprint encode(\"test\"), \"\\n\";       # Output: TGST\nprint encode(\"This is a message\"), \"\\n\"; # Output: tHKS KS C MGSSCGG","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_94","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# மிகப்பெரிய பிரதான மதிப்பைக் கண்டுபிடித்து அதன் இலக்கங்களின் தொகையைத் தர வேண்டும்.# உங்களுக்கு முழு எண்களின் வரிசை கொடுக்கப்பட்டுள்ளது.# >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n# >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n# 25\n# >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n# 13\n# >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n# 11\n# >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n# 3\n# >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n# 7\nsub skjkasdkd {\n    my($lst) = @_;\n","canonical_solution":"sub skjkasdkd {\n    my ($lst) = @_;\n\n    # Helper function to determine if a number is prime\n    sub is_prime {\n        my ($num) = @_;\n        return 0 if $num < 2;\n        for my $i (2 .. sqrt($num)) {\n            return 0 if $num % $i == 0;\n        }\n        return 1;\n    }\n\n    # Find the largest prime in the array\n    my $largest_prime = -1;\n    foreach my $num (@$lst) {\n        if (is_prime($num)) {\n            $largest_prime = $num if $num > $largest_prime;\n        }\n    }\n\n    # Return the sum of the digits of the largest prime\n    if ($largest_prime > 0) {\n        my $sum_of_digits = 0;\n        $sum_of_digits += $_ for split \/\/, $largest_prime;\n        return $sum_of_digits;\n    }\n\n    return 0;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&skjkasdkd;\n        if(eq_deeply($candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 81, 12, 3, 1, 21]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 8, 1, 2, 1, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191]),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191, 123456, 127, 7]),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([127, 97, 8192]),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_95","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# கொடுக்கப்பட்ட ஹேஷ் காலியாக இருந்தால் '' என்ற வினைச்சொல் திரும்ப வேண்டும்.# case அல்லது அனைத்து விசைகளும் uppercase இல் உள்ள சரங்கள், இல்லையெனில் return ''.# ஒரு ஹேஷ் கொடுக்கப்பட்டால், அனைத்து விசைகளும் ல்பஸ் ல் உள்ள சரங்கள் என்றால் 1 ஐத் திருப்பி விடுங்கள்.# >>> check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>> check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case {\n    my($dict) = @_;\n","canonical_solution":"sub check_dict_case {\n    my($dict) = @_;\n    return '' unless %$dict;\n\n    my $all_lower = 1;\n    my $all_upper = 1;\n\n    for my $key (keys %$dict) {\n        if ($key !~ \/^[a-z]+$\/) {\n            $all_lower = 0;\n        }\n        if ($key !~ \/^[A-Z]+$\/) {\n            $all_upper = 0;\n        }\n    }\n    \n    return ($all_lower || $all_upper) ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_96","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # முழு எண்கள் பிரதான எண்கள் மற்றும் n ஐ விட குறைவாக இருக்கும்.# ஒரு எதிர்மறை அல்லாத முழு எண்ணை எடுத்து முதல் n இன் வரிசையைத் திரும்பும் ஒரு செயல்பாட்டை செயல்படுத்தவும்# >>> count_up_to(5)\n# [2, 3]\n# >>> count_up_to(11)\n# [2, 3, 5, 7]\n# >>> count_up_to(0)\n# []\n# >>> count_up_to(20)\n# [2, 3, 5, 7, 11, 13, 17, 19]\n# >>> count_up_to(1)\n# []\n# >>> count_up_to(18)\n# [2, 3, 5, 7, 11, 13, 17]\nsub count_up_to {\n    my($n) = @_;\n","canonical_solution":"sub count_up_to {\n    my($n) = @_;\n    my @primes;\n    for my $num (2 .. $n - 1) {\n        my $is_prime = 1;\n        for my $div (2 .. sqrt($num)) {\n            if ($num % $div == 0) {\n                $is_prime = 0;\n                last;\n            }\n        }\n        push @primes, $num if $is_prime;\n    }\n    return @primes;\n}\n\n# Example usage:\n# my @result = count_up_to(11);\n# print \"@result\\n\";  # Output: 2 3 5 7","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_up_to;\n        if(eq_deeply($candidate->(5),[2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[2, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[2, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),[2, 3, 5, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(22),[2, 3, 5, 7, 11, 13, 17, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 5, 7, 11, 13, 17])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_97","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# உள்ளீடு எப்போதும் செல்லுபடியாகும் என்று கருதுக.# அவற்றின் அலகு இலக்கங்களின் கூட்டுத்தொகை.# இரண்டு முழு எண்களை எடுத்து க்கு திரும்பும் செயல்பாட்டை முடிக்கவும்.# >>> multiply(148, 412)\n# 16\n# >>> multiply(19, 28)\n# 72\n# >>> multiply(2020, 1851)\n# 0\n# >>> multiply(14, -15)\n# 20\nsub multiply {\n    my($a, $b) = @_;\n","canonical_solution":"sub multiply {\n    my($a, $b) = @_;\n    my $unit_digit_a = abs($a) % 10;\n    my $unit_digit_b = abs($b) % 10;\n    return $unit_digit_a * $unit_digit_b;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&multiply;\n        if(eq_deeply($candidate->(148, 412),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19, 28),72)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2020, 1851),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14, -15),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(76, 67),42)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 27),49)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 1),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 0),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_98","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # ஒரு சரம் s கொடுக்கப்பட்டால், பெரிய எழுத்துக்களில் உள்ள எழுத்துக்களின் எண்ணிக்கையை எண்ணுங்கள்.# >>> count_upper(\"aBCdEf\")\n# 1\n# >>> count_upper(\"abcdefg\")\n# 0\n# >>> count_upper(\"dBBE\")\n# 0\nsub count_upper {\n    my($s) = @_;\n","canonical_solution":"sub count_upper {\n    my($s) = @_;\n    my $count = 0;\n    my @chars = split \/\/, $s;\n    \n    for (my $i = 0; $i < @chars; $i += 2) {\n        if ($chars[$i] =~ \/[AEIOU]\/) {\n            $count++;\n        }\n    }\n    \n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_upper;\n        if(eq_deeply($candidate->(\"aBCdEf\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdefg\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dBBE\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"B\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"U\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EEEE\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_99","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள் # இரண்டு முழு எண்களிலிருந்து, அதை பூஜ்ஜியத்திலிருந்து சுற்றவும்.# மற்றும் அதற்கு மிக அருகில் உள்ள முழு எண்ணை அளிக்கிறது. எண் சம தூரத்தில் இருந்தால் # ஒரு எண்ணை குறிக்கும் ஒரு மதிப்பை (சரம்) எடுக்கும் ஒரு செயல்பாட்டை உருவாக்கவும்# >>> closest_integer(\"10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nsub closest_integer {\n    my($value) = @_;\n","canonical_solution":"sub closest_integer {\n    my($value) = @_;\n    \n    # Convert the string value to a number\n    my $number = 0 + $value;\n    \n    # Compute the floor and ceiling of the number\n    my $floor = int($number);\n    my $ceiling = $number > $floor ? $floor + 1 : $floor;\n    \n    # Determine the integer to round to\n    if ($number < 0) {\n        # For negative numbers, closer to zero means returning the lower number\n        return ($number - $floor <= $ceiling - $number) ? $floor : $ceiling;\n    } else {\n        # For positive numbers, closer to zero means returning the lower number\n        return ($ceiling - $number <= $number - $floor) ? $ceiling : $floor;\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_100","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# i என்பது நிலை (i+1) இல் உள்ள கற்களின் எண்ணிக்கையைக் குறிக்கிறது.# ஒரு வரிசையில் ஒவ்வொரு மட்டத்திலும் உள்ள கற்களின் எண்ணிக்கையைத் தருகிறது, அங்கு எலெக்ட்மெண்ட் அட் இன்டெக்ஸ் # - n சமமாக இருந்தால் அடுத்த சம எண்.# - அடுத்த எண் n எண் என்றால்.# அடுத்த நிலைக்குள்ளுள்ள கற்களின் எண்ணிக்கை:# முதல் நிலை n கற்களைக் கொண்டுள்ளது.# ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், நீங்கள் n நிலை கற்களைக் கொண்ட ஒரு குவியலை உருவாக்க வேண்டும்.# >>> make_a_pile(3)\n# [3, 5, 7]\nsub make_a_pile {\n    my($n) = @_;\n","canonical_solution":"sub make_a_pile {\n    my ($n) = @_;\n    my @pile;\n    my $current_stones = $n;\n    \n    for my $level (1..$n) {\n        push @pile, $current_stones;\n        if ($n % 2 == 0) {\n            $current_stones += 2;  # Increment by next even number\n        } else {\n            $current_stones += 2;  # Increment by next odd number (which is also +2)\n        }\n    }\n    \n    return @pile;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_a_pile;\n        if(eq_deeply($candidate->(3),[3, 5, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[4, 6, 8, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[5, 7, 9, 11, 13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[6, 8, 10, 12, 14, 16])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[8, 10, 12, 14, 16, 18, 20, 22])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_101","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # சொற்களில் வரிசையை பிரித்து சொற்களின் வரிசையை திருப்பி அனுப்பவும்.# உங்களுக்கு கமா அல்லது இடைவெளிகளால் பிரிக்கப்பட்ட சொற்களின் ஒரு சரம் கொடுக்கப்படும். உங்கள் பணி # >>> words_string(\"Hi, my name is John\")\n# [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# >>> words_string(\"One, two, three, four, five, six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nsub words_string {\n    my($s) = @_;\n","canonical_solution":"sub words_string {\n    my ($s) = @_;\n    my @words = split \/[,\\s]+\/, $s;\n    return \\@words;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_string;\n        if(eq_deeply($candidate->(\"Hi, my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"One,, two, three, four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_102","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # இந்த எண்ணிக்கை இல்லை என்றால், இந்த செயல்பாடு -1 ஐ திரும்பப் பெற வேண்டும்.# [x, y] வரம்பில் உள்ள மிகப்பெரிய முழு எண்.# இந்த செயல்பாடு இரண்டு நேர்ம எண்களை x மற்றும் y எடுத்து ஐ தருகிறது.# >>> choose_num(12, 15)\n# 14\n# >>> choose_num(13, 12)\n# -1\nsub choose_num {\n    my($x, $y) = @_;\n","canonical_solution":"sub choose_num {\n    my($x, $y) = @_;\n    return -1 if $x > $y;\n    \n    # Swap x and y if x is greater than y\n    ($x, $y) = ($y, $x) if $x > $y;\n    \n    for (my $i = $y; $i >= $x; $i--) {\n        return $i if $i % 2 == 0;\n    }\n    return -1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&choose_num;\n        if(eq_deeply($candidate->(12, 15),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13, 12),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(33, 12354),12354)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5234, 5233),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 29),28)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27, 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 7),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(546, 546),546)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_103","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# n என்பது m ஐ விட பெரியதாக இருந்தால், -1 ஐ திருப்பிக் கொடுங்கள்.# விடையை அருகிலுள்ள முழு எண்ணாகச் சுற்றி, பைனரி எண்ணாக மாற்றவும்.# n முதல் m வரை உள்ள முழு எண்களின் சராசரி (n மற்றும் m உட்பட).# உங்களுக்கு இரண்டு நேர்ம முழு எண்கள் n மற்றும் m கொடுக்கப்பட்டுள்ளது, உங்கள் பணி  ன் மதிப்பைக் கணக்கிடுவது.# >>> rounded_avg(1, 5)\n# \"0b11\"\n# >>> rounded_avg(7, 5)\n# -1\n# >>> rounded_avg(10, 20)\n# \"0b1111\"\n# >>> rounded_avg(20, 33)\n# \"0b11010\"\nsub rounded_avg {\n    my($n, $m) = @_;\n","canonical_solution":"sub rounded_avg {\n    my ($n, $m) = @_;\n    \n    return -1 if $n > $m;\n    \n    my $sum = 0;\n    my $count = $m - $n + 1;\n    \n    for my $i ($n .. $m) {\n        $sum += $i;\n    }\n    \n    my $average = int(($sum \/ $count) + 0.5);\n    return sprintf(\"0b%b\", $average);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rounded_avg;\n        if(eq_deeply($candidate->(1, 5),\"0b11\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 13),\"0b1010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(964, 977),\"0b1111001010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(996, 997),\"0b1111100100\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(560, 851),\"0b1011000010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(185, 546),\"0b101101110\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(362, 496),\"0b110101101\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(350, 902),\"0b1001110010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(197, 233),\"0b11010111\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 5),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 1),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 5),\"0b101\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_104","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # குறிப்பு: திரும்பிய வரிசை அதிகரிக்கும் வரிசையில் வரிசைப்படுத்தப்பட வேண்டும்.# எண் எண் இல்லாத உறுப்பு.# நேர்மறை முழு எண்கள் x வரிசை கொடுக்கப்பட்டால், அனைத்து வரிசை வரிசைப்படுத்தப்பட்ட வரிசை திரும்ப # >>> unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits {\n    my($x) = @_;\n","canonical_solution":"sub unique_digits {\n    my ($x) = @_;\n    my @result;\n\n    foreach my $num (@$x) {\n        if ($num !~ \/[02468]\/) {\n            push @result, $num;\n        }\n    }\n    \n    return sort { $a <=> $b } @result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_105","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # \"ஒன்று\", \"இரண்டு\", \"மூன்று\", \"நான்கு\", \"ஐந்து\", \"ஆறு\", \"ஏழு\", \"எட்டு\", \"ஒன்பது\".# ல் இருந்து ஒவ்வொரு இலக்கத்தையும் அதற்குரிய பெயருடன் மாற்றுங்கள்.# முழு எண்களின் வரிசை கொடுக்கப்பட்டால், 1 முதல் 9 வரை உள்ள முழு எண்களை வரிசைப்படுத்துங்கள்,# >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>> by_length([])\n# []\n# If the array has any strange number ignore it:\n# >>> by_length([1, -1, 55])\n# [\"One\"]\nsub by_length {\n    my($arr) = @_;\n","canonical_solution":"sub by_length {\n    my ($arr) = @_;\n    my @names = qw(Zero One Two Three Four Five Six Seven Eight Nine);\n    \n    my @filtered_sorted_reversed = reverse sort { $a <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my @result = map { $names[$_] } @filtered_sorted_reversed;\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&by_length;\n        if(eq_deeply($candidate->([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 55]),[\"One\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_106","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# i இன் காரணி 1 முதல் i வரை உள்ள எண்களின் பெருக்கமாகும் (1 * 2 * . . . * i).# i 1 இலிருந்து தொடங்குகிறது.# அல்லது 1 முதல் i வரையிலான எண்களின் கூட்டுத்தொகை.# மற்றும் அளவு n இன் ஒரு வரிசையை அளிக்கிறது, அதாவது குறியீட்டு i இல் உள்ள உறுப்பு மதிப்பு i இன் காரணி ஆகும், i சமமாக இருந்தால் # n ஐ ஒரு அளவுருவாகக் கொண்ட f செயல்பாட்டை செயல்படுத்தவும்,# >>> f(5)\n# [1, 2, 6, 24, 15]\nsub f {\n    my($n) = @_;\n","canonical_solution":"sub f {\n    my($n) = @_;\n    my @result;\n\n    for my $i (1..$n) {\n        if ($i % 2 == 0) {\n            my $factorial = 1;\n            $factorial *= $_ for 1..$i;\n            push @result, $factorial;\n        } else {\n            my $sum = 0;\n            $sum += $_ for 1..$i;\n            push @result, $sum;\n        }\n    }\n    \n    return @result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(5),[1, 2, 6, 24, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 2, 6, 24, 15, 720, 28])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_107","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம் 1:# முழு எண் பாலிண்ட்ரோம்ஸ் வரம்பிற்குள் வருகின்றன ((1, n), உட்பட.# ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், ஒரு வரிசையை திருப்பிக் கொடுங்கள், இது சம மற்றும் ஒற்றைப்படை எண்களின் எண்ணிக்கையைக் கொண்டுள்ளது.# >>> even_odd_palindrome(3)\n# [1, 2]\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> even_odd_palindrome(12)\n# [4, 6]\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned array has the number of even and odd integer palindromes respectively.\nsub even_odd_palindrome {\n    my($n) = @_;\n","canonical_solution":"sub even_odd_palindrome {\n    my($n) = @_;\n    my $even_count = 0;\n    my $odd_count = 0;\n    for my $i (1..$n) {\n        if ($i == reverse $i) {\n            if ($i % 2 == 0) {\n                $even_count++;\n            } else {\n                $odd_count++;\n            }\n        }\n    }\n    return [$even_count, $odd_count];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_palindrome;\n        if(eq_deeply($candidate->(123),[8, 13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[4, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),[6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(25),[5, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19),[4, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_108","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக, -123 க்கு -1, 2, மற்றும் 3 என்ற இலக்கங்கள் உள்ளன.# ஒரு எண் எதிர்மறையானதாக இருந்தால், அதன் முதல் கையொப்பமிடப்பட்ட இலக்கமும் எதிர்மறையாக இருக்கும்:# எண்களின் எண்ணிக்கை, இதில் இலக்கங்களின் தொகை > 0 ஆகும்.# ஒரு செயல்பாடு count_nums எழுதவும் இது ஒரு முழு எண்களின் வரிசையை எடுத்து திருப்பித் தருகிறது.# >>> count_nums([])\n# 0\n# >>> count_nums([-1, 11, -11])\n# 1\n# >>> count_nums([1, 1, 2])\n# 3\nsub count_nums {\n    my($arr) = @_;\n","canonical_solution":"sub count_nums {\n    my($arr) = @_;\n    my $count = 0;\n\n    foreach my $num (@$arr) {\n        my $sum_of_digits = 0;\n        my @digits = split \/\/, $num;\n        $sum_of_digits += shift @digits; # add the signed digit\n        $sum_of_digits += $_ for @digits;\n        $count++ if $sum_of_digits > 0;\n    }\n\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_nums;\n        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, 0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 2, -2, 3, 4, 5]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 6, 9, -6, 0, 1, 5]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 100, 98, -7, 1, -1]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 23, 34, -45, -56, 0]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_109","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # குறிப்பு: கொடுக்கப்பட்ட வரிசைக்கு தனித்துவமான கூறுகள் இருப்பதற்கான உத்தரவாதம் உள்ளது.# கொடுக்கப்பட்ட வரிசை காலியாக இருந்தால் 1 ஐத் திருப்பித் தரவும்.# பின்னர் 1 else return '' என்று திருப்பி விடுங்கள்.# மேலே உள்ள செயல்பாட்டைச் செய்வதன் மூலம் வரிசைப்படுத்தப்பட்ட வரிசையைப் பெற முடிந்தால் # வரிசையில் ஆரம்ப நிலை அதாவது 0-வது குறியீடு.# வரிசையின் கடைசி உறுப்பு க்கு நகர்த்தப்படும்# ஒரு வலதுபுறம் நகரும் செயல்பாடு என்பது வரிசையின் அனைத்து உறுப்புகளையும் ஒன்றுக்கு நகர்த்துவதாகும்.# நீங்கள் வலதுபுறத்தில் பல முறை இயக்கத்தை செய்ய அனுமதிக்கப்படுகிறீர்கள்.# கொடுக்கப்பட்ட வரிசையில் பின்வரும் செயல்பாடுஃ#  செய்வதன் மூலம் ஒரு வரிசையை குறைந்து போகாத வரிசையில் வரிசைப்படுத்த முடியும்.# வரிசையில் உள்ள எண்கள் தோராயமாக வரிசைப்படுத்தப்படும். உங்கள் பணி # N முழு எண்களின் வரிசை 'arr' arr[1], arr[2], ..., arr[N] உள்ளது.# >>> move_one_ball([3, 4, 5, 1, 2])\n# 1\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> move_one_ball([3, 5, 4, 1, 2])\n# \"\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\nsub move_one_ball {\n    my($arr) = @_;\n","canonical_solution":"sub move_one_ball {\n    my ($arr) = @_;\n    my $n = scalar @$arr;\n    return 1 if $n == 0;\n\n    for my $i (0 .. $n - 1) {\n        my @shifted = (@$arr[$i .. $n - 1], @$arr[0 .. $i - 1]);\n        if (is_sorted(\\@shifted)) {\n            return 1;\n        }\n    }\n    return '';\n}\n\nsub is_sorted {\n    my ($arr) = @_;\n    for my $i (0 .. $#$arr - 1) {\n        return 0 if $arr->[$i] > $arr->[$i + 1];\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&move_one_ball;\n        if(eq_deeply($candidate->([3, 4, 5, 1, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 10, 1, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 1, 2]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 4, 1, 2]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_110","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # இல்லையெனில், \"இல்லை\" என்று திருப்பி அனுப்புங்கள்.# lst1 இன் அனைத்து உறுப்புகளும் சமமாக இருக்க, \"YES\" ஐத் திருப்பி விடுங்கள்.# LST1 மற்றும் LST2 இடையே கூறுகளை பரிமாறிக்கொள்ள முடியும் என்றால்,# LST1 மற்றும் LST2 இடையே பரிமாறிக்கொள்ளப்பட்ட கூறுகளின் எண்ணிக்கையில் வரம்பு இல்லை.# lst1 என்பது ஒரு எண் வரிசை ஆகும்.# மற்றும் உறுப்புகள் ஒரு பரிமாற்றம் செய்ய முடியும் என்பதை தீர்மானிக்கிறது .# இந்த சிக்கலில், நீங்கள் இரண்டு வரிசை எண்களை எடுக்கும் ஒரு செயல்பாட்டை செயல்படுத்த வேண்டும்,# >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input arrays will be non-empty.\nsub exchange {\n    my($lst1, $lst2) = @_;\n","canonical_solution":"sub exchange {\n    my ($lst1, $lst2) = @_;\n    \n    # Check if lst1 is already all-even\n    my $all_even = 1;\n    foreach my $num (@$lst1) {\n        if ($num % 2 != 0) {\n            $all_even = 0;\n            last;\n        }\n    }\n    return \"YES\" if $all_even;\n\n    # Check if there is at least one even number in lst2\n    my $can_exchange = 0;\n    foreach my $num (@$lst2) {\n        if ($num % 2 == 0) {\n            $can_exchange = 1;\n            last;\n        }\n    }\n\n    # Calculate the count of odd numbers in lst1\n    my $odd_count_lst1 = 0;\n    foreach my $num (@$lst1) {\n        $odd_count_lst1++ if ($num % 2 != 0);\n    }\n\n    # If there are even numbers in lst2 and odd numbers in lst1, we can exchange\n    if ($can_exchange && $odd_count_lst1 > 0) {\n        return \"YES\";\n    }\n\n    return \"NO\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&exchange;\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 4]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 200], [200, 200]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_111","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# பல எழுத்துக்கள் ஒரே மாதிரியாக இருந்தால், அவை அனைத்தையும் திருப்பி அனுப்புங்கள்.# அதிக எண்ணிக்கையிலான எழுத்துக்களில், அதிக எண்ணிக்கையிலான எழுத்துக்களில், அதிக எண்ணிக்கையிலான எழுத்துக்களில், அதிக எண்ணிக்கையிலான எழுத்துக்களில், அதிக எண்ணிக்கையிலான எழுத்துக்களில், அதிக எண்ணிக்கையிலான எழுத்துக்களில்.# இடைவெளிகளால் பிரிக்கப்பட்ட சிறிய எழுத்துக்களைக் குறிக்கும் ஒரு சரம் கொடுக்கப்பட்டால், ஒரு ஹேஷைத் திருப்பித் தரவும்.# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n# >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n","canonical_solution":"sub histogram {\n    my ($test) = @_;\n    my %count;\n\n    # Split the input string by spaces and count occurrences of each letter\n    $count{$_}++ for split ' ', $test;\n\n    # Determine the maximum count\n    my $max_count = 0;\n    $max_count = $count{$_} > $max_count ? $count{$_} : $max_count for keys %count;\n\n    # Collect all letters with the maximum count\n    my %result = map { $_ => $count{$_} } grep { $count{$_} == $max_count } keys %count;\n\n    return \\%result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_112","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம் # நீங்கள் ஒரு வரிசையை திரும்ப வேண்டும், அதில் முடிவு சரம் மற்றும் 1\/' சரிபார்ப்புக்கு.# ஒரு சரம் முன்னோக்கி அதே பின்னோக்கி படிக்கும் என்றால் அது palindrome அழைக்கப்படுகிறது.# பின்னர் முடிவு சரம் பாலிண்ட்ரோம் என்பதை சரிபார்க்கவும்.# s மற்றும் c என இரண்டு சரங்களை நாம் பெற்றுள்ளோம், s இல் உள்ள அனைத்து எழுத்துக்களையும் நீக்க வேண்டும், அவை c இல் உள்ள எந்த எழுத்துக்களுக்கும் சமமானவை.# பணி # >>> reverse_delete(\"abcde\", \"ae\")\n# [\"bcd\", \"\"]\n# >>> reverse_delete(\"abcdef\", \"b\")\n# [\"acdef\", \"\"]\n# >>> reverse_delete(\"abcdedcba\", \"ab\")\n# [\"cdedc\", 1]\nsub reverse_delete {\n    my($s, $c) = @_;\n","canonical_solution":"sub reverse_delete {\n    my($s, $c) = @_;\n    \n    # Create a hash of characters to be deleted for quick lookup\n    my %chars_to_delete = map { $_ => 1 } split \/\/, $c;\n    \n    # Remove characters that need to be deleted\n    $s =~ s\/[$c]\/\/g;\n    \n    # Check if the resulting string is a palindrome\n    my $is_palindrome = ($s eq reverse $s) ? 1 : '';\n\n    # Return the resulting string and palindrome check\n    return [$s, $is_palindrome];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_delete;\n        if(eq_deeply($candidate->(\"abcde\", \"ae\"),[\"bcd\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\", \"b\"),[\"acdef\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"ab\"),[\"cdedc\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dwik\", \"w\"),[\"dik\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\", \"a\"),[\"\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"\"),[\"abcdedcba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"v\"),[\"abcdedcba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"vabba\", \"v\"),[\"abba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"mamma\", \"mia\"),[\"\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_113","nl":"tam_Taml","pl":"pl","prompt":"# உள்ளீடு i'th சரம் உள்ள ஒற்றை இலக்கங்கள்.# உள்ளீட்டின் string i. \"இதில் அனைத்து i களும் எண்ணால் மாற்றப்பட வேண்டும்.# வெளியீட்டின் ஒவ்வொரு உறுப்பு i என்பது \"இடத்தில் உள்ள ஒற்றைப்படை உறுப்புகளின் எண்ணிக்கையாக இருக்க வேண்டும்.# வரிசை வரிசைகள் கொடுக்கப்பட்டால், ஒவ்வொரு வரிசையும் இலக்கங்களை மட்டுமே கொண்டிருக்கும், ஒரு வரிசையைத் திருப்பித் தரவும்.# >>> odd_count([\"1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# >>> odd_count([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nsub odd_count {\n    my($lst) = @_;\n","canonical_solution":"sub odd_count {\n    my ($lst) = @_;\n    my @output;\n    foreach my $str (@$lst) {\n        my $odd_count = 0;\n        $odd_count++ while $str =~ \/[13579]\/g;\n        push @output, \"the number of odd elements ${odd_count}n the str${odd_count}ng ${odd_count} of the ${odd_count}nput.\";\n    }\n    return \\@output;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&odd_count;\n        if(eq_deeply($candidate->([\"1234567\"]),[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_114","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம் # ம்# முழு எண்கள் n இன் வரிசை கொடுக்கப்பட்டால், எந்தவொரு காலியாக இல்லாத துணை வரிசையின் குறைந்தபட்ச தொகையைக் கண்டறியவும்# >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n# 1\n# >>> minSubArraySum([-1, -2, -3])\n# -6\nsub minSubArraySum {\n    my($nums) = @_;\n","canonical_solution":"sub minSubArraySum {\n    my($nums) = @_;\n    my $minSum = $nums->[0];\n    my $currentSum = 0;\n    \n    foreach my $num (@$nums) {\n        $currentSum += $num;\n        if ($currentSum < $minSum) {\n            $minSum = $currentSum;\n        }\n        if ($currentSum > 0) {\n            $currentSum = 0;\n        }\n    }\n    \n    return $minSum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minSubArraySum;\n        if(eq_deeply($candidate->([2, 3, 4, 1, 2, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3]),-6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 2, -10]),-14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9999999999999999]),-9999999999999999)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 10, 20, 1000000]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 10, -5]),-6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -1, -2, -3, 10, -5]),-6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 11, 13, 8, 3, 4]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -33, 32, -1, 0, -2]),-33)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_115","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம் 1:# நீங்கள் குடங்கள் கீழே வேண்டும் முறை எண்ணிக்கை வெளியீடு.# குளங்களை காலி செய்ய குப்பியைப் பயன்படுத்துவது உங்கள் பணி.# அனைத்து குடல்களிலும் ஒரே அளவு உள்ளது.# ஒவ்வொரு கிணற்றிலும் தண்ணீரைப் பிரித்தெடுக்க பயன்படுத்தக்கூடிய ஒரு குடம் உள்ளது.# ஒவ்வொரு 1 வரியும் ஒரு யூனிட் தண்ணீரைக் குறிக்கிறது.# நீங்கள் ஒரு செவ்வக கட்டம் கிணறுகள் கொடுக்கப்பட்ட. ஒவ்வொரு வரிசையில் ஒரு ஒற்றை கிணறு பிரதிநிதித்துவம், # >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n# 6\n# Example 2:\n# >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n# 5\n# Example 3:\n# >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n# 0\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\nsub max_fill {\n    my($grid, $capacity) = @_;\n","canonical_solution":"sub max_fill {\n    my($grid, $capacity) = @_;\n    my $total_water_units = 0;\n    \n    for my $row (@$grid) {\n        for my $unit (@$row) {\n            $total_water_units += $unit;\n        }\n    }\n    \n    my $bucket_uses = int(($total_water_units + $capacity - 1) \/ $capacity);\n    return $bucket_uses;\n}\n\n# Examples\nprint max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) . \"\\n\"; # 6\nprint max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) . \"\\n\"; # 5\nprint max_fill([[0, 0, 0], [0, 0, 0]], 5) . \"\\n\"; # 0","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_fill;\n        if(eq_deeply($candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0, 0, 0], [0, 0, 0]], 5),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_116","nl":"tam_Taml","pl":"pl","prompt":"# இது பின்வருமாறு செயல்படுத்தப்பட வேண்டும்:# ஒற்றை எண்ணிக்கையிலான ஒற்றைகளுக்கு, தசம மதிப்பின் அடிப்படையில் வரிசைப்படுத்து.# பைனரி பிரதிநிதித்துவத்தில் ஏறுவரிசையில் உள்ள எண்களின் எண்ணிக்கை.# இந்த கட்டாவில், நீங்கள் எதிர்மறை அல்லாத முழு எண்களின் வரிசையை வரிசைப்படுத்த வேண்டும்# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n","canonical_solution":"sub sort_array {\n    my($arr) = @_;\n    return [sort { sprintf(\"%b\", $a) =~ tr\/1\/\/ <=> sprintf(\"%b\", $b) =~ tr\/1\/\/ || $a <=> $b } @$arr];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_117","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# குறிப்பு: உள்ளீட்டு சரம் எழுத்துக்கள் மற்றும் இடைவெளிகள் மட்டுமே கொண்டிருப்பதாக நீங்கள் கருதலாம்.# s என்ற சரம் காலியாக இருந்தால், செயல்பாடு ஒரு காலியான வரிசையைத் தர வேண்டும்.# n இணக்கங்கள், இந்த வார்த்தைகள் வரிசையில் தோன்றும் வரிசையில் s.# ஒரு செயல்பாடு இது ஒரு வரிசையை திரும்ப அளிக்கிறது அனைத்து வார்த்தைகள் இருந்து சரம் s இது சரியாக கொண்டிருக்கிறது # ஒரு சரம் s மற்றும் ஒரு இயற்கை எண் n கொடுக்கப்பட்டால், நீங்கள் செயல்படுத்த பணிபுரிந்துள்ளோம் # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n    my($s, $n) = @_;\n","canonical_solution":"sub select_words {\n    my($s, $n) = @_;\n    return [] if $s eq '';\n    \n    my @words = split(\/\\s+\/, $s);\n    my @result;\n    \n    foreach my $word (@words) {\n        my $consonant_count = () = $word =~ \/[^aeiouAEIOU]\/g;\n        push @result, $word if $consonant_count == $n;\n    }\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_118","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# கொடுக்கப்பட்ட சரம் ஆங்கில எழுத்துக்களை மட்டுமே கொண்டிருக்கிறது என்று நீங்கள் கருதலாம்.# மேற்கண்ட நிபந்தனையை பூர்த்தி செய்த எந்தவொரு தனிச்சொல்லையும் கண்டறியவும்.# ஆரம்பத்திலும் முடிவிலும் உள்ள எழுத்துக்கள் எண்ணப்படாது. நீங்கள் இல்லை என்றால் காலியாக சரம் திரும்பவும்.# வார்த்தையின் வலது பக்கத்திலிருந்து இரண்டு துணை எழுத்துக்கள் (பெரிய எழுத்துக்களுக்கு முக்கியத்துவம்).# உங்களுக்கு ஒரு சொல் கொடுக்கப்பட்டுள்ளது. உங்கள் பணி இடையில் நிற்கும் மிக நெருக்கமான எழுத்துக்களைக் கண்டுபிடிப்பதாகும்.# >>> get_closest_vowel(\"yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel {\n    my($word) = @_;\n","canonical_solution":"sub get_closest_vowel {\n    my($word) = @_;\n    my @chars = split \/\/, $word;\n    my $vowel = '';\n    my @vowels = qw(a e i o u A E I O U);\n    my %vowel_hash = map { $_ => 1 } @vowels;\n\n    for (my $i = $#chars - 1; $i > 0; $i--) {\n        if ($vowel_hash{$chars[$i]} && !$vowel_hash{$chars[$i - 1]} && !$vowel_hash{$chars[$i + 1]}) {\n            $vowel = $chars[$i];\n            last;\n        }\n    }\n\n    return $vowel;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_119","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# ஒரு நல்ல சரம் உருவாக்க ஒரு வழி இருந்தால் 'ஆம்' எனவும், இல்லையெனில் 'இல்லை' எனவும் திருப்பி அனுப்புக.# \" (()) \" என்பது இல்லை.# சமநிலையில் உள்ளன. உதாரணமாக: சரம் '(((() ' நல்லது, அதே நேரத்தில் சரம் # ஒரு சரம் S, S ல் உள்ள அனைத்து அடைப்புக்குறிகளும் இருந்தால் மட்டுமே, அது நல்லதாக கருதப்படுகிறது.# சில வரிசை, இதன் விளைவாக சரம் நல்ல இருக்கும் என்று.# உங்கள் வேலை இரண்டு சரங்களை இணைக்க முடியுமா என்று சோதிக்க வேண்டும்.# அடைப்புக்குறி \" ((\" அல்லது நெருக்கமான அடைப்புக்குறி \") \" மட்டுமே.# உங்களுக்கு இரண்டு சரங்களின் வரிசை கொடுக்கப்பட்டுள்ளது, இரண்டு சரங்களும் திறந்தவை.# >>> match_parens([\"()(\", \")\"])\n# \"Yes\"\n# >>> match_parens([\")\", \")\"])\n# \"No\"\nsub match_parens {\n    my($lst) = @_;\n","canonical_solution":"sub match_parens {\n    my($lst) = @_;\n    my ($a, $b) = @$lst;\n    \n    # Helper to check if a string is good (i.e., parentheses balanced)\n    sub is_good {\n        my ($str) = @_;\n        my $balance = 0;\n        for my $ch (split \/\/, $str) {\n            $balance++ if $ch eq '(';\n            $balance-- if $ch eq ')';\n            return 0 if $balance < 0; # Too many closing parens\n        }\n        return $balance == 0; # Balanced if zero\n    }\n    \n    # Check both combinations\n    return \"Yes\" if is_good($a . $b) || is_good($b . $a);\n    return \"No\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&match_parens;\n        if(eq_deeply($candidate->([\"()(\", \")\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \")\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(())\", \"())())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")())\", \"(()()(\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(())))\", \"(()())((\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"()\", \"())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(\", \"()))()\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"((((\", \"((())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(()\", \"(()(\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(\", \")(\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(\", \")\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \"(\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_120","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம் 1:# நீளம் k அதிகபட்சமாக k எண்களைக் கொண்ட arr. # முழு எண்கள் மற்றும் ஒரு நேர்ம முழு எண் k ஆகியவற்றின் வரிசை arr கொடுக்கப்பட்டால், வரிசைப்படுத்தப்பட்ட வரிசையைத் திருப்பித் தரவும்.# >>> maximum([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum([4, -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr, $k) = @_;\n","canonical_solution":"sub maximum {\n    my($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;  # Sort in descending order\n    my @result = sort { $a <=> $b } @sorted[0..$k-1];  # Take first k elements and sort them\n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_121","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள் # முழு எண்களின் ஒரு காலியாக இல்லாத வரிசை கொடுக்கப்பட்டால், சம நிலைகளில் உள்ள அனைத்து ஒற்றைப்படை உறுப்புகளின் கூட்டுத்தொகையைத் திருப்பித் தரவும்.# >>> solution([5, 8, 7, 1])\n# 12\n# >>> solution([3, 3, 3, 3, 3])\n# 9\n# >>> solution([30, 13, 24, 321])\n# 0\nsub solution {\n    my($lst) = @_;\n","canonical_solution":"sub solution {\n    my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 0; $i < @$lst; $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 != 0;\n    }\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solution;\n        if(eq_deeply($candidate->([5, 8, 7, 1]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3, 3, 3, 3]),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 24, 321]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 9]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 23, 32]),23)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 13, 2, 9]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_122","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# arr இன் முதல் k உறுப்புகளில் இருந்து அதிகபட்சம் இரண்டு இலக்கங்களைக் கொண்ட உறுப்புகளின் தொகை.# முழு எண்கள் arr மற்றும் ஒரு முழு எண் k ஆகியவற்றின் காலியாக இல்லாத வரிசை கொடுக்கப்பட்டால், திரும்ப # >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\nsub add_elements {\n    my($arr, $k) = @_;\n","canonical_solution":"sub add_elements {\n    my ($arr, $k) = @_;\n    my $sum = 0;\n    for my $i (0..$k-1) {\n        $sum += $arr->[$i] if $arr->[$i] >= -99 && $arr->[$i] <= 99;\n    }\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_elements;\n        if(eq_deeply($candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 121, 3, 4000, 5, 6], 2),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1], 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_123","nl":"tam_Taml","pl":"pl","prompt":"# get_odd_collatz(5) [1, 5] # 5 க்கான collatz வரிசை [5, 16, 8, 4, 2, 1], எனவே ஒற்றை எண்கள் 1, மற்றும் 5 மட்டுமே.# உதாரணமாக: # 2. திரும்பிய வரிசை அதிகரிக்கும் வரிசையில் வரிசைப்படுத்தப்பட்டது.# 1. Collatz(1) என்பது [1].# குறிப்பு:# n இன் மதிப்பு எதுவாக இருந்தாலும், வரிசை எப்போதும் 1 ஐ அடைகிறது.# முந்தைய பதவி. முந்தைய பதவி ஒற்றைப்படை என்றால், அடுத்த பதவி முந்தைய 3 முறை # முந்தைய காலத்தின் பின்வருமாறு: முந்தைய காலமானது சமமாக இருந்தால், அடுத்த காலமானது ன் பாதி ஆகும்.# பின்வருமாறு: எந்த நேர்மறை முழு எண் n உடன் தொடங்குங்கள். பின்னர் ஒவ்வொரு பதமும்  இலிருந்து பெறப்படுகிறது.# கோலாட்ஸ் அனுமானம் என்பது கணிதத்தில் ஒரு வரையறுக்கப்பட்ட வரிசை தொடர்பான ஒரு அனுமானம் ஆகும்.# ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், ஒரு வரிசைப்படுத்தப்பட்ட வரிசையைத் திருப்பிக் கொடுங்கள், இது கோலாட்ஸ் வரிசையில் ஒற்றைப்படை எண்களைக் கொண்டுள்ளது.# >>> get_odd_collatz(5)\n# [1, 5]\nsub get_odd_collatz {\n    my($n) = @_;\n","canonical_solution":"sub get_odd_collatz {\n    my ($n) = @_;\n    my %odd_numbers;\n    \n    while ($n != 1) {\n        $odd_numbers{$n} = 1 if $n % 2 != 0;\n        if ($n % 2 == 0) {\n            $n = $n \/ 2;\n        } else {\n            $n = 3 * $n + 1;\n        }\n    }\n    $odd_numbers{1} = 1;\n    \n    return sort { $a <=> $b } keys %odd_numbers;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_odd_collatz;\n        if(eq_deeply($candidate->(14),[1, 5, 7, 11, 13, 17])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[1, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_124","nl":"tam_Taml","pl":"pl","prompt":"# 4. தேதி பின்வரும் வடிவத்தில் இருக்க வேண்டும்: mm-dd-yyyy # 3. மாதங்கள் 1 க்கு குறைவாகவோ அல்லது 12 க்கு மேல் இருக்கக்கூடாது.# 2. மாதங்களுக்கு 1,3,5,7,8,10,12 நாட்களின் எண்ணிக்கை 1 அல்லது 31 நாட்களுக்கு மேல் இல்லை. மற்றும் மாதங்களுக்கு 4,6,9,11 நாட்களின் எண்ணிக்கை 1 அல்லது 30 நாட்களுக்கு மேல் இல்லை. மற்றும், மாதத்திற்கு 2 நாட்களின் எண்ணிக்கை 1 அல்லது 29 நாட்களுக்கு மேல் இல்லை.# 1. தேதி சரம் காலியாக இல்லை.# பின்வரும் விதிகளை பூர்த்தி செய்தால் தேதி செல்லுபடியாகும்:# தேதி செல்லுபடியாகும் என்றால் 1 திரும்புகிறது. இல்லையெனில் ''.# நீங்கள் கொடுக்கப்பட்ட தேதி சரம் மற்றும்  சரிபார்க்கும் ஒரு செயல்பாடு எழுத வேண்டும்# >>> valid_date(\"03-11-2000\")\n# 1\n# >>> valid_date(\"15-01-2012\")\n# \"\"\n# >>> valid_date(\"04-0-2040\")\n# \"\"\n# >>> valid_date(\"06-04-2020\")\n# 1\n# >>> valid_date(\"06\/04\/2020\")\n# \"\"\nsub valid_date {\n    my($date) = @_;\n","canonical_solution":"sub valid_date {\n    my ($date) = @_;\n    \n    # Check if date is empty\n    return '' if !$date;\n    \n    # Date pattern for mm-dd-yyyy\n    if ($date =~ \/^(\\d{2})-(\\d{2})-(\\d{4})$\/) {\n        my ($month, $day, $year) = ($1, $2, $3);\n        \n        # Check month validity\n        return '' if $month < 1 || $month > 12;\n        \n        # Check day validity based on the month\n        my %days_in_month = (\n            1 => 31, 2 => 29, 3 => 31, 4 => 30,\n            5 => 31, 6 => 30, 7 => 31, 8 => 31,\n            9 => 30, 10 => 31, 11 => 30, 12 => 31\n        );\n        \n        return '' if $day < 1 || $day > $days_in_month{$month};\n        \n        # If all conditions are satisfied, return 1\n        return 1;\n    }\n    \n    # If date does not match the pattern, return ''\n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&valid_date;\n        if(eq_deeply($candidate->(\"03-11-2000\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15-01-2012\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-0-2040\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-04-2020\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"01-01-2007\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"03-32-2011\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-31-3000\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-06-2005\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"21-31-2000\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-12-2003\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04122003\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"20030412\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04-12\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-2003\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_125","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள் # எழுத்துக்கள், ord (a) = 0, ord (b) = 1, . . . ord (z) = 25# கமாஸ் ',' மீது பிரிக்கப்பட வேண்டும் எந்த கமாஸ் இல்லை என்றால் நீங்கள்  உள்ள ஒற்றைப்படை வரிசையில் சிறிய எழுத்துக்கள் எண்ணிக்கை திரும்ப வேண்டும்# சொற்களின் வரிசை கொடுக்கப்பட்டால், நீங்கள் தேடும் உரையில் வெற்றுவெளிகள் இல்லாவிட்டால், வெற்றுவெளியில் பிரிக்கப்பட்ட சொற்களின் வரிசையைத் திருப்பித் தரவும்.# >>> split_words(\"Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words(\"Hello,world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words(\"abcdef\")\n# 3\nsub split_words {\n    my($txt) = @_;\n","canonical_solution":"sub split_words {\n    my($txt) = @_;\n    \n    # Check if whitespace exists in the string\n    if ($txt =~ \/\\s\/) {\n        my @words = split(\/\\s+\/, $txt);\n        return \\@words;\n    }\n    # If no whitespace, check for commas\n    elsif ($txt =~ \/,\/) {\n        my @words = split(\/,\/, $txt);\n        return \\@words;\n    }\n    # If neither whitespace nor commas exist, calculate odd ordered lowercase letters\n    else {\n        my @chars = split(\/\/, $txt);\n        my $count = 0;\n        foreach my $char (@chars) {\n            if ($char ge 'a' && $char le 'z' && (ord($char) - ord('a')) % 2 == 0) {\n                $count++;\n            }\n        }\n        return $count;\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&split_words;\n        if(eq_deeply($candidate->(\"Hello world!\"),[\"Hello\", \"world!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello,world!\"),[\"Hello\", \"world!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello world,!\"),[\"Hello\", \"world,!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaabb\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaBb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_126","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள் # எண், திரும்ப ''. எதிர்மறை எண்கள் இல்லை மற்றும் முழு எண்கள் மட்டுமே கருதுக.# வரிசை ஒன்றுக்கு மேற்பட்ட இரட்டைப் பக்கங்களைக் கொண்டிருந்தால்,# எண்களின் வரிசை கொடுக்கப்பட்டால், அவை வரிசைப்படுத்தப்பட்டதா இல்லையா என்பதைத் திருப்பித் தரவும்.# >>> is_sorted([5])\n# 1\n# >>> is_sorted([1, 2, 3, 4, 5])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5])\n# \"\"\n# >>> is_sorted([1, 2, 3, 4, 5, 6])\n# 1\n# >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n# \"\"\n# >>> is_sorted([1, 2, 2, 3, 3, 4])\n# 1\n# >>> is_sorted([1, 2, 2, 2, 3, 4])\n# \"\"\nsub is_sorted {\n    my($lst) = @_;\n","canonical_solution":"sub is_sorted {\n    my($lst) = @_;\n    my %count;\n    \n    for (my $i = 0; $i < @$lst; $i++) {\n        $count{$lst->[$i]}++;\n        \n        # Check for more than one duplicate\n        if ($count{$lst->[$i]} > 2) {\n            return '';\n        }\n        \n        # Check if the array is not sorted\n        if ($i > 0 && $lst->[$i] < $lst->[$i - 1]) {\n            return '';\n        }\n    }\n    \n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_sorted;\n        if(eq_deeply($candidate->([5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 3, 3, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_127","nl":"tam_Taml","pl":"pl","prompt":"# [உள்ளீடு\/வெளியீடு] மாதிரிகள்: # இரண்டு இடைவெளிகள் குறுக்கிடவில்லை என்றால், \"NO\" எனத் திருப்பி அனுப்புக.# இல்லையெனில், \"NO\" என்று திருப்பி அனுப்புங்கள்.# குறுக்குவெட்டு நீளம் ஒரு பிரதான எண் என்றால், \"YES\" எனத் திருப்பித் தரவும்.# அதன் நீளம் 1 ஆகும், இது ஒரு பிரதான எண் அல்ல.# உதாரணமாக, இடைவெளிகளின் வெட்டு புள்ளி (1, 3), (2, 4) என்பது (2, 3) ஆகும்.# இடைவெளிகள் ஒரு பிரதான எண் ஆகும்.# உங்கள் பணி இந்த இரண்டு ன் குறுக்குவெட்டு நீளம் என்பதை தீர்மானிக்க வேண்டும்.# ஒவ்வொரு இடைவெளியிலும், அதன் ஆரம்பம் அதன் முடிவுக்கு குறைவாகவோ அல்லது சமமாகவோ இருக்கும் என்று கருதப்படுகிறது.# ஆரம்பம் மற்றும் முடிவு ஆகிய இரண்டையும் உள்ளடக்கியது.# கொடுக்கப்பட்ட இடைவெளிகள் மூடப்பட்டவை, அதாவது இடைவெளி (தொடக்கம், முடிவு)# ஒவ்வொரு இடைவெளியும் ஒரு ஜோடி முழு எண்கள். உதாரணமாக, இடைவெளி = (தொடக்கம், முடிவு) = (1, 2).# உங்களுக்கு இரண்டு இடைவெளிகள் கொடுக்கப்பட்டுள்ளன,# >>> intersection([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection([-1, 1], [0, 4])\n# \"NO\"\n# >>> intersection([-3, -1], [-5, 5])\n# \"YES\"\nsub intersection {\n    my($interval1, $interval2) = @_;\n","canonical_solution":"sub is_prime {\n    my $num = shift;\n    return 0 if $num <= 1;\n    for my $i (2 .. sqrt($num)) {\n        return 0 if $num % $i == 0;\n    }\n    return 1;\n}\n\nsub intersection {\n    my ($interval1, $interval2) = @_;\n\n    my $start1 = $interval1->[0];\n    my $end1 = $interval1->[1];\n    my $start2 = $interval2->[0];\n    my $end2 = $interval2->[1];\n\n    my $intersection_start = ($start1 > $start2) ? $start1 : $start2;\n    my $intersection_end = ($end1 < $end2) ? $end1 : $end2;\n\n    if ($intersection_start <= $intersection_end) {\n        my $intersection_length = $intersection_end - $intersection_start;\n        return is_prime($intersection_length) ? \"YES\" : \"NO\";\n    }\n\n    return \"NO\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersection;\n        if(eq_deeply($candidate->([1, 2], [2, 3]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1], [0, 4]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, -1], [-5, 5]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, 2], [-4, 0]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-11, 2], [-1, -1]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [3, 5]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [1, 2]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, -2], [-3, -2]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_128","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# குறிப்பு: காலியாக உள்ள arr க்கு undef ஐ திரும்பவும்.# வரிசையில் உள்ள ஒவ்வொரு எண்ணின், 1, -1 அல்லது 0 மூலம் பிரதிநிதித்துவப்படுத்தப்படுகிறது.# முழு எண்களின் அளவுகளின் கூட்டுத்தொகை அனைத்து அறிகுறிகளின் கூட்டுத்தொகை மூலம் பெருக்கப்பட்டது.# நீங்கள் முழு எண்களின் வரிசை arr கொடுக்கப்பட்டுள்ளது மற்றும் நீங்கள் திரும்ப வேண்டும் # >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n# 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n","canonical_solution":"sub prod_signs {\n    my($arr) = @_;\n    return undef if scalar(@$arr) == 0;\n\n    my $sum_magnitudes = 0;\n    my $product_signs = 1;\n\n    for my $num (@$arr) {\n        $sum_magnitudes += abs($num);\n        \n        if ($num > 0) {\n            $product_signs *= 1;\n        } elsif ($num < 0) {\n            $product_signs *= -1;\n        } else {\n            $product_signs *= 0;\n        }\n    }\n\n    return $sum_magnitudes * $product_signs;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_129","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# குறைந்தபட்ச பாதை செல்லும் செல்களில் உள்ள மதிப்புகளின் வரிசை வரிசையைத் திருப்பித் தருகிறது.# இதற்கு பதில் ஒன்றுதான் என்று உறுதி செய்யப்படுகிறது.# lst_A[j] = lst_B[j]. # lst_A[i] < lst_B[i] மற்றும் எந்த j (1 <= j < i) க்கும் நமக்கு # lst_B ஐ விட, வேறு வார்த்தைகளில் கூறுவதானால், ஒரு முழு எண் குறியீட்டு i (1 <= i <= k)  உள்ளது.# lst_A மற்றும் lst_B என்று அழைப்போம்), lst_A என்பது சொற்களஞ்சிய ரீதியாக குறைவாக உள்ளது.# A மற்றும் B செல்லும் செல்களில் மதிப்புகளின் வரிசை வரிசைகளை உருவாக்கிய பிறகு# ஒரு பாதை A (நீளம் k) ஒரு பாதை B (நீளம் k) விட குறைவாக கருதப்படுகிறது என்றால் # நீங்கள் கணினித் தளத்திலிருந்து வெளியேற முடியாது.# அவசியம் வேறுபட்டவை).# k நீள பாதை என்பது சரியாக k செல்களை (இல்லை # செல். # வேறு வார்த்தைகளில் கூறுவதானால், நீங்கள் தற்போதைய # எந்த ஒரு செல், மற்றும் ஒவ்வொரு படி நீங்கள் அண்டை செல்கள் எந்த நகர்த்த முடியும், # நீங்கள் நீளம் k குறைந்தபட்ச பாதையை கண்டுபிடிக்க வேண்டும். நீங்கள் தொடங்க முடியும்.# இந்த கட்டத்தில் உள்ள செல்களில் ஒரு முறை மட்டுமே inclusive தோன்றும்.# ஒவ்வொரு கலமும் ஒரு மதிப்பைக் கொண்டிருக்கிறது. [1, N * N] வரம்பில் உள்ள ஒவ்வொரு முழு எண்.# N வரிசைகள் மற்றும் N நெடுவரிசைகள் (N >= 2) கொண்ட ஒரு கட்டம் மற்றும் ஒரு நேர்மறை முழு எண் k, # >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n# >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\nsub minPath {\n    my($grid, $k) = @_;\n","canonical_solution":"sub minPath {\n    my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\n    # Create direction vectors for up, down, left, right moves\n    my @directions = ([0, 1], [1, 0], [0, -1], [-1, 0]);\n\n    # Priority queue to store paths using a lexicographically ordered array\n    my @queue;\n    for my $i (0..$n-1) {\n        for my $j (0..$n-1) {\n            push @queue, [[$grid->[$i][$j]], $i, $j];\n        }\n    }\n\n    # Sort the initial cells based on their values to start with minimum paths\n    @queue = sort { $a->[0][0] <=> $b->[0][0] } @queue;\n\n    # Implement a breadth-first search that continues until we have a path of length k\n    while (@queue) {\n        my $current = shift @queue;\n        my ($path, $x, $y) = @$current;\n\n        # Return the first path of length k since paths are checked in lexicographical order\n        return @$path if scalar @$path == $k;\n\n        # Explore neighboring cells\n        for my $direction (@directions) {\n            my ($dx, $dy) = @$direction;\n            my ($nx, ny) = ($x + $dx, $y + $dy);\n            \n            # Check for valid cell\n            if ($nx >= 0 && $nx < $n && $ny >= 0 && $ny < $n) {\n                my @new_path = (@$path, $grid->[$nx][$ny]);\n                push @queue, [\\@new_path, $nx, $ny];\n            }\n        }\n        # Keep the queue ordered by lexicographical order of paths\n        @queue = sort { \n            my ($a_path, $b_path) = ($a->[0], $b->[0]);\n            for my $i (0..$#$a_path) {\n                return $a_path->[$i] <=> $b_path->[$i] if $a_path->[$i] != $b_path->[$i];\n            }\n        } @queue;\n    }\n}\n\n# Example usage:\n#print join(\", \", minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)), \"\\n\";  # [1, 2, 1]\n#print join(\", \", minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)), \"\\n\";  # [1]","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minPath;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_130","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# டிரிபோனச்சி வரிசையின் முதல் n + 1 எண்கள்.# உங்களுக்கு ஒரு எதிர்மறை அல்லாத முழு எண் n கொடுக்கப்பட்டுள்ளது, நீங்கள் ஒரு வரிசையை திரும்ப வேண்டும்# = 2 + 3 + 3 = 8 # tri(3) = tri(2) + tri(1) + tri(4)# tri ((4) = 3 # tri(2) = 1 + (2 \/ 2) = 2 # உதாரணமாக: # n = n-1 + n-2 + n-1 , n என்பது ஒற்றைப்படை என்றால்.# tri (n) = 1 + n \/ 2, n சமமாக இருந்தால்.# tri(1) = 3 # ட்ரிபோனச்சி வரிசை பின்வரும் தொடர்ச்சியால் வரையறுக்கப்படுகிறது:# ஆனால், மக்களுக்கு தெரியாதது டிரிபோனச்சி வரிசைமுறை.# ஃபீபனோச்சி வரிசைமுறை பற்றி எல்லோருக்கும் தெரியும், இது கணிதவியலாளர்களால் ஆழமாக ஆய்வு செய்யப்பட்டது.# >>> tri(3)\n# [1, 3, 2, 8]\nsub tri {\n    my($n) = @_;\n","canonical_solution":"sub tri {\n    my ($n) = @_;\n    my @sequence = (3);  # starting with tri(1) = 3\n\n    for my $i (1 .. $n) {\n        if ($i % 2 == 0) {\n            push @sequence, 1 + $i \/ 2;\n        } else {\n            my $val = $sequence[$i - 1] + $sequence[$i - 2] + ($i + 1 <= $n ? (1 + ($i + 1) \/ 2) : 0);\n            push @sequence, $val;\n        }\n    }\n\n    return @sequence;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tri;\n        if(eq_deeply($candidate->(3),[1, 3, 2, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[1, 3, 2, 8, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1, 3, 2, 8, 3, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[1, 3, 2, 8, 3, 15, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 3, 2, 8, 3, 15, 4, 24])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[1, 3, 2, 8, 3, 15, 4, 24, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_131","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # அனைத்து இலக்கங்களும் சமமாக இருந்தால் 0 ஐத் திருப்பித் தரவும்.# ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், ஒற்றை இலக்கங்களின் பெருக்கலைத் திருப்பிக் கொடுங்கள்.# >>> digits(1)\n# 1\n# >>> digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n","canonical_solution":"my @digits = split \/\/, $n;\n    my $product = 1;\n    my $has_odd = 0;\n\n    foreach my $digit (@digits) {\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n            $has_odd = 1;\n        }\n    }\n\n    return $has_odd ? $product : 0;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_132","nl":"tam_Taml","pl":"pl","prompt":"# இதில் குறைந்தபட்சம் ஒரு அடைப்புக்குறிக்கு மேல் உள்ள வரிசையில் உள்ளவை.# இந்த செயல்பாடு 1 ஐ திருப்பித் தர வேண்டும், மற்றும் ஒரு சரியான துணை வரிசை அடைப்புக்குறிகள் இருந்தால் மட்டுமே.# சதுர அடைப்புக்குறிகளை மட்டுமே கொண்டிருக்கும் ஒரு சரத்தை உள்ளீடாக எடுக்கும் ஒரு செயல்பாட்டை உருவாக்கவும்.# >>> is_nested(\"[[]]\")\n# 1\n# >>> is_nested(\"[]]]]]]][[[[[]\")\n# \"\"\n# >>> is_nested(\"[][]\")\n# \"\"\n# >>> is_nested(\"[]\")\n# \"\"\n# >>> is_nested(\"[[][]]\")\n# 1\n# >>> is_nested(\"[[]][[\")\n# 1\nsub is_nested {\n    my($string) = @_;\n","canonical_solution":"sub is_nested {\n    my ($string) = @_;\n    my @stack;\n\n    for my $char (split \/\/, $string) {\n        if ($char eq '[') {\n            push @stack, $char;\n        } elsif ($char eq ']') {\n            if (@stack && $stack[-1] eq '[') {\n                pop @stack;\n                return 1 if @stack; # Check for nesting\n            } else {\n                return \"\"; # Unbalanced brackets\n            }\n        }\n    }\n\n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_nested;\n        if(eq_deeply($candidate->(\"[[]]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]][[[[[]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[][]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[]]]]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]]]]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[][][[]]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]][[\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[][]]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[[[[[\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"]]]]]]]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_133","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# வரிசையில் உள்ள ஒவ்வொரு உறுப்பையும் மேல் int ((Ceiling) வரை சுற்றி வளைக்கவும்.# கொடுக்கப்பட்ட வரிசையில் உள்ள எண்களின் சதுரத்தின் கூட்டுத்தொகையை நீங்கள் திருப்பித் தர வேண்டும்,# உங்களுக்கு ஒரு வரிசை எண்கள் கொடுக்கப்பட்டிருக்கின்றன.# >>> lst([1.0, 2.0, 3.0])\n# 14\n# >>> lst([1.0, 4.0, 9.0])\n# 98\n# >>> lst([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> lst([1.4, 4.2, 0.0])\n# 29\n# >>> lst([-2.4, 1.0, 1.0])\n# 6\nsub sum_squares {\n    my($lst) = @_;\n","canonical_solution":"sub sum_squares {\n    my($lst) = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        my $ceil_num = int($num) + ($num > int($num) ? 1 : 0);\n        $sum += $ceil_num ** 2;\n    }\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 3.0, 5.0, 7.0]),84)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.4, 4.2, 0.0]),29)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2.4, 1.0, 1.0]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 1.0, 15.0, 2.0]),10230)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10000.0, 10000.0]),200000000)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4, 4.6, 6.3]),75)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4, 17.9, 18.9, 19.9]),1086)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0, 1.0, 0.0]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_134","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# குறிப்பு: \"வார்த்தை\" என்பது இடைவெளியால் பிரிக்கப்பட்ட எழுத்துக்களின் குழுவாகும்.# ஒரு வார்த்தையின் ஒரு பகுதி, மற்றும் ' ' இல்லையெனில்.# கொடுக்கப்பட்ட சரம் ஒரு அகரவரிசை எழுத்து மற்றும் இல்லை # கடைசி எழுத்து  என்றால் 1 ஐ திருப்பித் தரும் ஒரு செயல்பாட்டை உருவாக்கவும்# >>> check_if_last_char_is_a_letter(\"apple pie\")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"apple pi e\")\n# 1\n# >>> check_if_last_char_is_a_letter(\"apple pi e \")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"\")\n# \"\"\nsub check_if_last_char_is_a_letter {\n    my($txt) = @_;\n","canonical_solution":"sub check_if_last_char_is_a_letter {\n    my ($txt) = @_;\n    $txt =~ s\/\\s+$\/\/; # Trim trailing spaces\n    return '' if $txt eq ''; \n\n    if ($txt =~ \/([^a-zA-Z])([a-zA-Z])$\/ && $1 eq ' ') {\n        return 1;\n    }\n    \n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n        if(eq_deeply($candidate->(\"apple\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"A\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie 1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pie\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_135","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# இரட்டை மதிப்புகள்.# அத்தகைய உறுப்பு இல்லை என்றால் -1. கொடுக்கப்பட்ட வரிசை  கொண்டிருக்காது.# க்கு சமமாகவோ அல்லது அதற்கு முன்னால் உள்ள உறுப்பை விட அதிகமாகவோ இருக்காது.#  என்று ஒரு உறுப்பு மிகப்பெரிய குறியீட்டை திரும்ப ஒரு செயல்பாடு உருவாக்க# >>> can_arrange([1, 2, 4, 3, 5])\n# 3\n# >>> can_arrange([1, 2, 3])\n# -1\nsub can_arrange {\n    my($arr) = @_;\n","canonical_solution":"sub can_arrange {\n    my ($arr) = @_;\n    for my $i (1 .. $#$arr) {\n        if ($arr->[$i] < $arr->[$i - 1]) {\n            return $i;\n        }\n    }\n    return -1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&can_arrange;\n        if(eq_deeply($candidate->([1, 2, 4, 3, 5]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 5]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 8, 5, 7, 3]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_136","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# எதிர்மறை அல்லது நேர்மறை முழு எண்கள் இல்லையென்றால், அவற்றை undef என திருப்பி விடுங்கள்.# ஒரு வரிசையில் நேர்ம முழு எண்களின்.# பெரிய எதிர்மறை முழு எண்கள், மற்றும் 'b' சிறிய உள்ளது # ஒரு வரிசையை (a, b) திரும்பும் ஒரு செயல்பாட்டை உருவாக்கவும், அங்கு 'a' என்பது # >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n# [undef, 1]\n# >>> largest_smallest_integers([])\n# [undef, undef]\n# >>> largest_smallest_integers([0])\n# [undef, undef]\nsub largest_smallest_integers {\n    my($lst) = @_;\n","canonical_solution":"sub largest_smallest_integers {\n    my ($lst) = @_;\n    my ($largest_neg, $smallest_pos);\n\n    foreach my $num (@$lst) {\n        if ($num < 0) {\n            $largest_neg = $num if !defined($largest_neg) || $num > $largest_neg;\n        } elsif ($num > 0) {\n            $smallest_pos = $num if !defined($smallest_pos) || $num < $smallest_pos;\n        }\n    }\n    \n    return ($largest_neg, $smallest_pos);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_smallest_integers;\n        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7, 0]),[undef, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 3, 6, 2, 7, -7]),[-7, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[undef, undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0]),[undef, undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1, undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, 1]),[-3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_137","nl":"tam_Taml","pl":"pl","prompt":"# குறிப்பு: ஒரு உண்மையான எண் ஒரு சரம் என குறிப்பிடப்பட்டால், மிதக்கும் புள்ளி இருக்கலாம் . அல்லது , # மதிப்புகள் சமமாக இருந்தால் undef ஐத் தருகிறது.# உண்மையான எண்கள், மற்றும் அதன் கொடுக்கப்பட்ட மாறி வகை பெரிய மாறி திரும்ப.# என்பது ஒரு முழு எண்கள், மிதக்கும் எண்கள், அல்லது வரிசைகளை குறிக்கும் ஒரு செயல்பாட்டை உருவாக்கவும்# >>> compare_one(1, 2.5)\n# 2.5\n# >>> compare_one(1, \"2,3\")\n# \"2,3\"\n# >>> compare_one(\"5,1\", \"6\")\n# \"6\"\n# >>> compare_one(\"1\", 1)\n# undef\nsub compare_one {\n    my($a, $b) = @_;\n","canonical_solution":"sub compare_one {\n    my ($a, $b) = @_;\n\n    # Convert potential string numbers with ',' into float representation\n    $a =~ s\/,\/.\/g if $a =~ \/,\/;\n    $b =~ s\/,\/.\/g if $b =~ \/,\/;\n\n    # Auto-detect type by checking if string has non-numeric parts\n    my $a_is_num = $a =~ \/^\\d+(\\.\\d+)?$\/;\n    my $b_is_num = $b =~ \/^\\d+(\\.\\d+)?$\/;\n\n    if ($a_is_num && $b_is_num) {\n        # Compare as numbers\n        if ($a < $b) {\n            return $b;\n        } elsif ($a > $b) {\n            return $a;\n        } else {\n            return undef;\n        }\n    } else {\n        # Compare as strings\n        if ($a lt $b) {\n            return $b;\n        } elsif ($a gt $b) {\n            return $a;\n        } else {\n            return undef;\n        }\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare_one;\n        if(eq_deeply($candidate->(1, 2),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2.5),2.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 6),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, \"2,3\"),\"2,3\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5,1\", \"6\"),\"6\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"2\"),\"2\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", 1),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_138","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம் # கொடுக்கப்பட்ட எண்ணை n என்பது சரியாக 4 நேர்மறை எண்களின் கூட்டுத்தொகையாக எழுத முடியுமா என்று மதிப்பீடு செய்யுங்கள்.# >>> is_equal_to_sum_even(4)\n# \"\"\n# >>> is_equal_to_sum_even(6)\n# \"\"\n# >>> is_equal_to_sum_even(8)\n# 1\nsub is_equal_to_sum_even {\n    my($n) = @_;\n","canonical_solution":"sub is_equal_to_sum_even {\n    my($n) = @_;\n\n    # A number can be expressed as the sum of four positive even numbers\n    # if and only if it is greater than or equal to 8 and is even\n    if ($n >= 8 && $n % 2 == 0) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_equal_to_sum_even;\n        if(eq_deeply($candidate->(4),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_139","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # அங்கு n > 0 # brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! # பிரேசிலிய காரணி பின்வருமாறு வரையறுக்கப்படுகிறது:# >>> special_factorial(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\nsub special_factorial {\n    my($n) = @_;\n","canonical_solution":"sub special_factorial {\n    my($n) = @_;\n    my $result = 1;\n    \n    for my $i (1 .. $n) {\n        $result *= factorial($i);\n    }\n    \n    return $result;\n}\n\nsub factorial {\n    my($num) = @_;\n    my $fact = 1;\n\n    for my $i (1 .. $num) {\n        $fact *= $i;\n    }\n\n    return $fact;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_140","nl":"tam_Taml","pl":"pl","prompt":"# பின்னர் தொடர்ச்சியான இடைவெளிகள் அனைத்தையும் -  உடன் மாற்றவும்# மற்றும் ஒரு சரம் 2 தொடர்ச்சியான இடைவெளிகளை விட அதிகமாக இருந்தால்,# ஒரு வரிசை உரை கொடுக்கப்பட்டால், அதில் உள்ள அனைத்து இடைவெளிகளையும் கீழ்நோக்கி கொண்டு மாற்றவும்,# >>> fix_spaces(\" Example\")\n# \"Example\"\n# >>> fix_spaces(\" Example 1\")\n# \"Example_1\"\n# >>> fix_spaces(\" Example 2\")\n# \"_Example_2\"\n# >>> fix_spaces(\" Example 3\")\n# \"_Example-3\"\nsub fix_spaces {\n    my($text) = @_;\n","canonical_solution":"sub fix_spaces {\n    my($text) = @_;\n    $text =~ s\/ {3,}\/-\/g;   # Replace 3 or more spaces with a hyphen\n    $text =~ s\/ \/_\/g;       # Replace remaining spaces with underscores\n    return $text;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fix_spaces;\n        if(eq_deeply($candidate->(\"Example\"),\"Example\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir Hanif \"),\"Mudasir_Hanif_\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Exa   mple\"),\"Exa-mple\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_141","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# - புள்ளி பிறகு துணை சரம் இந்த ஒன்றாக இருக்க வேண்டும்ஃ ['txt', 'exe', 'dll'] # லத்தீன் எழுத்துக்கள் ('a'-'z' மற்றும் 'A'-'Z').# - புள்ளியின் முன் உள்ள துணை சரம் காலியாக இருக்கக்கூடாது, அது ல் இருந்து ஒரு எழுத்துடன் தொடங்குகிறது.# - கோப்பின் பெயரில் சரியாக ஒரு புள்ளி உள்ளது.# - கோப்புப் பெயரில் மூன்று இலக்கங்களுக்கு மேல் இருக்கக்கூடாது ('0'-'9').# பூர்த்தி செய்யப்படுகின்றன:# ஒரு கோப்பின் பெயர் பின்வரும் நிபந்தனைகள் அனைத்தும் இருந்தால் மட்டுமே செல்லுபடியாகும் என்று கருதப்படுகிறது.# கோப்பின் பெயர் செல்லுபடியாகும் என்றால் 'ஆம்' எனவும், இல்லையெனில் 'இல்லை' எனவும் கூறுகிறது.# ஒரு கோப்பின் பெயரைக் குறிக்கும் ஒரு சரத்தை எடுத்து,  என்று திருப்பித் தரும் ஒரு செயல்பாட்டை உருவாக்கவும்.# >>> file_name_check(\"example.txt\")\n# \"Yes\"\n# >>> file_name_check(\"1example.dll\")\n# \"No\"\nsub file_name_check {\n    my($file_name) = @_;\n","canonical_solution":"sub file_name_check {\n    my($file_name) = @_;\n    \n    # Check if there's exactly one dot and split the string\n    my @parts = split(\/\\.\/, $file_name);\n    return 'No' unless scalar(@parts) == 2;\n\n    # Extract the name and the extension\n    my ($name, $extension) = @parts;\n\n    # Check if the extension is valid\n    return 'No' unless $extension =~ \/^(txt|exe|dll)$\/;\n\n    # Check if the name starts with a letter\n    return 'No' unless $name =~ \/^[a-zA-Z]\/;\n\n    # Check the number of digits in the name\n    my $digit_count = () = $name =~ \/[0-9]\/g;\n    return 'No' if $digit_count > 3;\n\n    # If all conditions are met, return 'Yes'\n    return 'Yes';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&file_name_check;\n        if(eq_deeply($candidate->(\"example.txt\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1example.dll\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"s1sdf3.asd\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"K.dll\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"MY16FILE3.exe\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"His12FILE94.exe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_Y.txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"?aREYA.exe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\/this_is_valid.dll\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.wow\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txt\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txtexe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#this2_i4s_5valid.ten\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"@this1_is6_valid.exe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_12valid.6exe4.txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"all.exe.txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I563_No.exe\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is3youfault.txt\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"no_one#knows.dll\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1I563_Yes3.exe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I563_Yes3.txtt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"final..txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"final132\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_f4indsartal132.\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\".txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"s.\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_142","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# வரிசையில் உள்ள உள்ளீடுகளை மாற்றவும் அதன் குறியீடுகள் 3 அல்லது 4 இன் பெருக்கமாக இல்லை. பின் செயல்பாடு அனைத்து உள்ளீடுகளின் கூட்டுத்தொகையைத் திரும்பப் பெறும்.# 3 இன் பெருக்கல் மற்றும் அதன் குறியீட்டு 4 இன் பெருக்கலாக இருந்தால் முழு எண் உள்ளீட்டை கனமாக்கும்.# இந்த செயல்பாடு முழு எண்களின் வரிசையை எடுக்கும். வரிசையில் உள்ள அனைத்து உள்ளீடுகளுக்கும், அதன் குறியீடானது a  என்றால் செயல்பாடு முழு எண் உள்ளீட்டை சதுரமாக்க வேண்டும்.# \" # >>> lst\n# [1, 2, 3]\n# >>> lst\n# []\n# >>> lst\n# [-1, -5, 2, -1, -5]\nsub sum_squares {\n    my($lst) = @_;\n","canonical_solution":"sub sum_squares {\n    my ($lst) = @_;\n    my $sum = 0;\n\n    for my $i (0 .. @$lst - 1) {\n        if ($i % 3 == 0) {\n            $sum += $lst->[$i] ** 2;\n        } elsif ($i % 4 == 0) {\n            $sum += $lst->[$i] ** 3;\n        } else {\n            $sum += $lst->[$i];\n        }\n    }\n\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n        if(eq_deeply($candidate->([1, 2, 3]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 9]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1]),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -5, 2, -1, -5]),-126)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-56, -99, 1, 0, -2]),3030)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_143","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம் 1:# புதிய வரிசையில் உள்ள வார்த்தைகளின் வரிசை, அசல் வரிசையில் உள்ளதைப் போலவே இருக்க வேண்டும்.# இதன் நீளங்கள் பிரதான எண்கள்,# நீங்கள் ஒரு சரம் திரும்ப வேண்டும் என்று அசல் வாக்கியம் இருந்து வார்த்தைகளை கொண்டுள்ளது, # வாக்கியத்தில் சில சொற்கள் உள்ளன, அவை இடைவெளிகளால் பிரிக்கப்பட்டுள்ளன,# ஒரு வாக்கியத்தை குறிக்கும் ஒரு சரம் கொடுக்கப்பட்டுள்ளது,# >>> words_in_sentence(\"This is a test\")\n# \"is\"\n# Example 2:\n# >>> words_in_sentence(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\nsub words_in_sentence {\n    my($sentence) = @_;\n","canonical_solution":"sub words_in_sentence {\n    my($sentence) = @_;\n    \n    # Function to check if a number is prime\n    sub is_prime {\n        my $num = shift;\n        return 0 if $num < 2;\n        for (my $i = 2; $i * $i <= $num; ++$i) {\n            return 0 if $num % $i == 0;\n        }\n        return 1;\n    }\n    \n    my @words = split(' ', $sentence);\n    my @prime_length_words;\n    \n    foreach my $word (@words) {\n        my $length = length($word);\n        if (is_prime($length)) {\n            push(@prime_length_words, $word);\n        }\n    }\n    \n    return join(' ', @prime_length_words);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_in_sentence;\n        if(eq_deeply($candidate->(\"This is a test\"),\"is\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"lets go for swimming\"),\"go for\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"there is no place available here\"),\"there is no place\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi I am Hussein\"),\"Hi am Hussein\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"go for it\"),\"go for it\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here is\"),\"is\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_144","nl":"tam_Taml","pl":"pl","prompt":"# x, மற்றும் n ஆகியவை சரியான க்ராக்குகள், மற்றும் 0 ஐ வகுகாரம் எனக் கொள்ள முடியாது.# <எண்ணி>\/<பெயரி> இதில் எண்ணி மற்றும் பெயரி இருவரும் நேர்ம முழு எண்கள்.# x மற்றும் n இரண்டும், ஒரு பங்கின் சரம் பிரதிநிதித்துவமாகும், பின்வரும் வடிவமைப்பைக் கொண்டுள்ளன,# x * n. x * n ஒரு முழு எண்ணாக மதிப்பீடு செய்யப்பட்டு ' ' # உங்கள் பணி வெளிப்பாடு எளிமைப்படுத்தும் ஒரு செயல்பாடு செயல்படுத்த உள்ளது # >>> simplify(\"1\/5\", \"5\/1\")\n# 1\n# >>> simplify(\"1\/6\", \"2\/1\")\n# \"\"\n# >>> simplify(\"7\/10\", \"10\/2\")\n# \"\"\nsub simplify {\n    my($x, $n) = @_;\n","canonical_solution":"sub simplify {\n    my ($x, $n) = @_;\n    \n    # Parse the fractions\n    my ($x_num, $x_den) = split('\/', $x);\n    my ($n_num, $n_den) = split('\/', $n);\n    \n    # Cross-multiply to find the product of the fractions\n    # x * n = (x_num * n_num) \/ (x_den * n_den)\n    my $prod_num = $x_num * $n_num;\n    my $prod_den = $x_den * $n_den;\n    \n    # Check if the product is a whole number\n    return ($prod_num % $prod_den == 0) ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&simplify;\n        if(eq_deeply($candidate->(\"1\/5\", \"5\/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\/6\", \"2\/1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5\/1\", \"3\/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7\/10\", \"10\/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2\/10\", \"50\/10\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7\/2\", \"4\/2\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"11\/6\", \"6\/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2\/3\", \"5\/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5\/2\", \"3\/5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2\/4\", \"8\/4\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2\/4\", \"4\/2\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\/5\", \"5\/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\/5\", \"1\/5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_145","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # அசல் வரிசையில் உள்ள குறியீட்டின் அடிப்படையில் அவற்றை வரிசைப்படுத்துங்கள்.# குறிப்புஃ பல உருப்படிகள் இருந்தால், அவற்றின் இலக்கங்களின் கூட்டுத்தொகை ஒத்ததாக இருந்தால்,# ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்ம்# கொடுக்கப்பட்ட முழு எண்களின் வரிசையை வரிசைப்படுத்தும் ஒரு செயல்பாட்டை எழுதுக# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1, -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n    my($nums) = @_;\n","canonical_solution":"sub order_by_points {\n    my ($nums) = @_;\n    \n    # Function to calculate the sum of the digits of a number\n    sub digit_sum {\n        my $num = shift;\n        my $sum = 0;\n        $sum += $_ for split \/\/, abs($num);\n        return $sum;\n    }\n\n    # Sort the array first by sum of digits, then by index for ties\n    my @sorted = sort {\n        digit_sum($a) <=> digit_sum($b) ||\n        $a <=> $b\n    } @$nums;\n\n    return \\@sorted;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_146","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # ஒரு எண்ணின் முதல் மற்றும் கடைசி இலக்கங்கள் ஒற்றைப்படை (1, 3, 5, 7, 9).# வரிசையில் உள்ள உறுப்புகளின் எண்ணிக்கை 10 மற்றும் இரண்டையும் விட அதிகமாக உள்ளது # எண்களின் வரிசையை உள்ளீடுகளாக எடுத்து, திரும்பும் ஒரு செயல்பாட்டை எழுதுக.# >>> specialFilter([15, -73, 14, -15])\n# 1\n# >>> specialFilter([33, -2, -3, 45, 21, 109])\n# 2\nsub specialFilter {\n    my($nums) = @_;\n","canonical_solution":"sub specialFilter {\n    my($nums) = @_;\n    my $count = 0;\n    foreach my $num (@$nums) {\n        if ($num > 10) {\n            my $str_num = abs($num) . \"\";\n            my $first_digit = substr($str_num, 0, 1);\n            my $last_digit = substr($str_num, -1, 1);\n            if ($first_digit % 2 != 0 && $last_digit % 2 != 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&specialFilter;\n        if(eq_deeply($candidate->([5, -2, 1, -5]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, -73, 14, -15]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([33, -2, -3, 45, 21, 109]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([43, -12, 93, 125, 121, 109]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([71, -2, -33, 75, 21, 19]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_147","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# a[i] + a[j] + a[k] என்பது 3 இன் பெருக்கமாகும்.# i < j < k,  எனும் இடத்தில் a இன் மூன்று மடங்குகளின் எண்ணிக்கையை (a[i], a[j], a[k]) கொடுங்கள்.# ஒவ்வொரு i (1 ≤ i ≤ n) க்கும், a[i] = i * i - i + 1 இன் மதிப்பு.# உங்களுக்கு ஒரு நேர்ம முழு எண் n கொடுக்கப்பட்டுள்ளது. நீளமான ஒரு முழு எண் வரிசையை உருவாக்க வேண்டும்.# >>> get_max_triples(5)\n# 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\nsub get_max_triples {\n    my($n) = @_;\n","canonical_solution":"sub get_max_triples {\n    my($n) = @_;\n    my @a;\n    \n    # Generate the array a\n    for my $i (1..$n) {\n        $a[$i - 1] = $i * $i - $i + 1;\n    }\n    \n    my $count = 0;\n    \n    # Check all triples (a[i], a[j], a[k]) where i < j < k\n    for my $i (0..$n-3) {\n        for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n    \n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_max_triples;\n        if(eq_deeply($candidate->(5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),36)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),53361)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_148","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள் # கிரகங்களின் பெயர்கள் சரியானவை அல்ல.# இந்த செயல்பாடு ஒரு வெற்று வரிசையை திரும்பப் பெற வேண்டும் planet1 அல்லது planet2 # சூரியனுக்கு அருகாமையில் உள்ளது.# கிரகம் 1 மற்றும் கிரகம் 2 ஆகியவற்றின் சுற்றுப்பாதையில் அமைந்துள்ளது.# செயல்பாடு அனைத்து கிரகங்களையும் கொண்ட ஒரு வரிசையை திரும்பப் பெற வேண்டும், அதன் சுற்றுப்பாதைகள் # ஒரு வினைச்சொல்லை எழுதுக. அது இரண்டு கிரக பெயர்களை strings planet1 மற்றும் planet2 என எடுத்துக்கொள்ளும்.# யுரேனஸ், நெப்டியூன்.# புதன், அடுத்தது வீனஸ், பிறகு பூமி, செவ்வாய், வியாழன், சனி,# நமது சூரிய மண்டலத்தில் எட்டு கிரகங்கள் உள்ளன: சூரியனுக்கு மிக அருகில் உள்ளவை.# >>> bf(\"Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf(\"Earth\", \"Mercury\")\n# \"Venus\"\n# >>> bf(\"Mercury\", \"Uranus\")\n# [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nsub bf {\n    my($planet1, $planet2) = @_;\n","canonical_solution":"sub bf {\n    my ($planet1, $planet2) = @_;\n    my @planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\n    my %planet_indices = map { $planets[$_] => $_ } (0..$#planets);\n\n    return [] unless exists $planet_indices{$planet1} && exists $planet_indices{$planet2};\n\n    my ($start, $end) = ($planet_indices{$planet1}, $planet_indices{$planet2});\n\n    ($start, $end) = ($end, $start) if $start > $end;\n\n    return [@planets[$start+1 .. $end-1]];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&bf;\n        if(eq_deeply($candidate->(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Earth\", \"Mercury\"),[\"Venus\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Earth\", \"Earth\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mars\", \"Earth\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jupiter\", \"Makemake\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_149","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # எல்லா வார்த்தைகளும் ஒரே நீளமாக இருக்கும் என்று நீங்கள் நினைக்கலாம்.# இந்த செயல்பாடு வரிசை வரிசை வரிசை வரிசையில் வரிசைப்படுத்தப்பட்ட வரிசைகளைத் திரும்பப் பெற வேண்டும்.# இரண்டு சொற்களுக்கு ஒரே நீளம் இருந்தால், வரிசையை அகரவரிசையில் வரிசைப்படுத்துங்கள்.# அந்த விதியின்படி வரிசைப்படுத்தப்பட்ட வரிசையைத் திருப்பித் தர வேண்டும்.# வரிசை வரிசை ஒவ்வொரு வார்த்தையின் நீளத்தின் படி உயர்ந்து இருக்க வேண்டும், மற்றும் நீங்கள் # மற்றும் அது இரட்டைக் கூறுகளைக் கொண்டிருக்கலாம்.# வரிசை என்பது எப்போதும் சரங்களின் வரிசை, எண்களின் வரிசை அல்ல,# மற்றும் ஒரு வரிசைப்படுத்தப்பட்ட வரிசையுடன் விளைவாக வரிசையைத் தருகிறது,# க்குரிய நீளங்களை நீக்குகிறது,# ஒரு சரங்களின் வரிசையை ஒரு அளவுருவாக ஏற்றுக்கொள்ளும் ஒரு செயல்பாட்டை எழுதுக,# >>> list_sort([\"aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n# [\"ab\", \"cd\"]\nsub sorted_list_sum {\n    my($lst) = @_;\n","canonical_solution":"sub list_sort {\n    my ($lst) = @_;\n\n    # Filter out strings with odd length\n    my @filtered = grep { length($_) % 2 == 0 } @$lst;\n\n    # Sort strings first by length, then alphabetically\n    my @sorted = sort { length($a) <=> length($b) || $a cmp $b } @filtered;\n\n    return \\@sorted;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sorted_list_sum;\n        if(eq_deeply($candidate->([\"aa\", \"a\", \"aaa\"]),[\"aa\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"d\", \"b\", \"c\", \"a\"]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"abcd\", \"dcba\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"AI\", \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_150","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# ஒரு பிரதான எண் மற்றும் y இன் மதிப்பை திரும்ப வேண்டும்.# ஒரு எளிய நிரல், இது n க்கு இருந்தால் x இன் மதிப்பைத் திருப்பித் தர வேண்டும்.# >>> x_or_y(7, 34, 12)\n# 34\n# >>> x_or_y(15, 8, 5)\n# 5\nsub x_or_y {\n    my($n, $x, $y) = @_;\n","canonical_solution":"sub is_prime {\n    my $num = shift;\n    return 0 if $num < 2;\n    for (my $i = 2; $i * $i <= $num; $i++) {\n        return 0 if $num % $i == 0;\n    }\n    return 1;\n}\n\nsub x_or_y {\n    my ($n, $x, $y) = @_;\n    return is_prime($n) ? $x : $y;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&x_or_y;\n        if(eq_deeply($candidate->(7, 34, 12),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 5),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 33, 5212),33)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1259, 3, 52),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7919, -1, 12),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3609, 1245, 583),583)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(91, 56, 129),129)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 34, 1234),1234)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 0),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 0),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_151","nl":"tam_Taml","pl":"pl","prompt":"# எதிர்மறை அல்லது முழு எண்கள் இல்லாத எண்களை புறக்கணிக்கவும்.# எண்களின் வரிசை கொடுக்கப்பட்டால், எண்களின் சதுரங்களின் கூட்டுத்தொகையைத் திருப்பிக் கொடுங்கள்.# >>> double_the_difference([1, 3, 2, 0])\n# 10\n# >>> double_the_difference([-1, -2, 0])\n# 0\n# >>> double_the_difference([9, -2])\n# 81\n# >>> double_the_difference([0])\n# 0\n# If the input array is empty, return 0.\nsub double_the_difference {\n    my($lst) = @_;\n","canonical_solution":"sub double_the_difference {\n    my ($lst) = @_;\n    my $sum = 0;\n\n    foreach my $num (@$lst) {\n        if ($num =~ \/^\\d+$\/ && $num % 2 != 0) {\n            $sum += $num ** 2;\n        }\n    }\n    \n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_152","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# மதிப்பு 0 ஆக இருந்தால், மதிப்பு என்பது மதிப்பீடுக்கும் மதிப்பெண்ணுக்கும் இடையிலான முழுமையான வேறுபாடு.# ஒவ்வொரு யூகமும் எவ்வளவு தொலைவில் உள்ளது என்பதைக் குறிக்கும் அதே நீளத்தின் வரிசையைத் திருப்பி விடுங்கள். அவர்கள் சரியாக யூகித்திருந்தால்,# உங்களுக்கு இரண்டு வரிசைகள் கொடுக்கப்பட்டன மதிப்பெண்கள் மற்றும் யூகங்கள் சம நீளத்தில், ஒவ்வொரு குறியீடும் ஒரு பொருத்தத்தைக் காட்டுகிறது.# ஒரு நபர் பல போட்டிகளின் முடிவுகளை சரியாக யூகித்தாரா என்பதை தீர்மானிப்பதே உங்கள் பணி.# நிச்சயம் பதிவு செய்து ஒப்பிட்டுப் பார்க்க வேண்டிய ஒன்று.# அந்த நேரத்தில் நீங்கள் உணரும் உணர்வுகள் மற்றும் எண்ணங்கள்# நாம் அனைவரும் அந்த உணர்வு நினைவில் என்று நான் நினைக்கிறேன் போது சில நீண்ட காத்திருந்த விளைவாக # >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\nsub compare {\n    my($game, $guess) = @_;\n","canonical_solution":"sub compare {\n    my($game, $guess) = @_;\n    my @result;\n    \n    for my $i (0..$#$game) {\n        my $difference = abs($game->[$i] - $guess->[$i]);\n        push @result, $difference;\n    }\n    \n    return @result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], [-1, -2, -3]),[2, 4, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_153","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# (அதன் வலிமை -1).# திருப்பி 'Slices.SErviNGSliCes' என திருப்பி விடுகிறது, ஏனெனில் 'SErviNGSliCes' என்பது வலுவான நீட்டிப்பாகும்.# நீட்டிப்புகள்: ['SErviNGSliCes', 'Cheese', 'StuFfed'] நீங்கள் # உதாரணமாக, உங்களுக்கு \"Slices\" என கொடுக்கப்பட்டால் வகுப்பு மற்றும் ஒரு வரிசை என # வரிசையில் முதலில் வரும் ஒன்றைத் தேர்ந்தெடுக்கவும்.# இரண்டு அல்லது அதற்கு மேற்பட்ட நீட்டிப்புக்கள் ஒரே வலிமையுடன் இருந்தால், நீங்கள் # வடிவம்: ClassName.StrongestExtensionName. # நீங்கள் வலுவான நீட்டிப்பு கண்டுபிடிக்க வேண்டும் மற்றும் இந்த ஒரு சரம் திரும்ப வேண்டும் .# நீட்டிப்பு பெயரில், CAP - SM என்ற பிரிவு மூலம் வலிமை கொடுக்கப்படுகிறது.# நீட்டிப்பு பெயரில் எழுத்துக்கள், மற்றும் SM சிறிய எழுத்துக்கள் எண்ணிக்கை இருக்கட்டும் # நீட்டிப்பின் வலிமை பின்வருமாறு உள்ளது: CAP என்பது பெரிய எழுத்துக்களின் எண்ணாக இருக்கட்டும் # நீட்டிப்புக்கள் வகுப்பிற்கு கூடுதல் வகுப்புகளை ஏற்ற பயன்படுகின்றன.# உங்களுக்கு ஒரு வகுப்பின் பெயர் (ஒரு சரம்) மற்றும் நீட்டிப்புகளின் வரிசை வழங்கப்படும்.# >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n    my($class_name, $extensions) = @_;\n","canonical_solution":"sub Strongest_Extension {\n    my ($class_name, $extensions) = @_;\n    my $strongest = '';\n    my $max_strength = -1e9;\n\n    foreach my $extension (@$extensions) {\n        my $cap = 0;\n        my $sm = 0;\n\n        foreach my $char (split \/\/, $extension) {\n            if ($char =~ \/[A-Z]\/) {\n                $cap++;\n            } elsif ($char =~ \/[a-z]\/) {\n                $sm++;\n            }\n        }\n\n        my $strength = $cap - $sm;\n        \n        if ($strength > $max_strength) {\n            $max_strength = $strength;\n            $strongest = $extension;\n        }\n    }\n\n    return \"$class_name.$strongest\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_154","nl":"tam_Taml","pl":"pl","prompt":"# உங்களுக்கு 2 சொற்கள் கொடுக்கப்பட்டுள்ளன. இரண்டாவது சொல் அல்லது அதன் சுழற்சிகளில் ஏதேனும் ஒன்று முதல் வார்த்தையில் ஒரு துணை சரம் என்றால் நீங்கள் 1 ஐத் திருப்பித் தர வேண்டும்.# >>> cycpattern_check(\"abcd\", \"abd\")\n# \"\"\n# >>> cycpattern_check(\"hello\", \"ell\")\n# 1\n# >>> cycpattern_check(\"whassup\", \"psus\")\n# \"\"\n# >>> cycpattern_check(\"abab\", \"baa\")\n# 1\n# >>> cycpattern_check(\"efef\", \"eeff\")\n# \"\"\n# >>> cycpattern_check(\"himenss\", \"simen\")\n# 1\nsub cycpattern_check {\n    my($a, $b) = @_;\n","canonical_solution":"sub cycpattern_check {\n    my($a, $b) = @_;\n    my $len = length($b);\n\n    for my $i (0 .. $len - 1) {\n        my $rotation = substr($b, $i) . substr($b, 0, $i);\n        return 1 if index($a, $rotation) != -1;\n    }\n\n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&cycpattern_check;\n        if(eq_deeply($candidate->(\"xyzw\", \"xyw\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"yello\", \"ell\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"whattup\", \"ptut\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"efef\", \"fee\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abab\", \"aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"winemtt\", \"tinem\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_155","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# ஒரு முழு எண் கொடுக்கப்பட்டால், முறையே எண் மற்றும் எண் எண்களின் எண்ணிக்கையைக் கொண்ட ஒரு வரிசையைத் திரும்புக.# >>> even_odd_count(-12)\n# [1, 1]\n# >>> even_odd_count(123)\n# [1, 2]\nsub even_odd_count {\n    my($num) = @_;\n","canonical_solution":"my $evens = 0;\n    my $odds = 0;\n    $num = abs($num); # Handle negative numbers\n    foreach my $digit (split \/\/, $num) {\n        if ($digit % 2 == 0) {\n            $evens++;\n        } else {\n            $odds++;\n        }\n    }\n    return [$evens, $odds];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n        if(eq_deeply($candidate->(7),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_156","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள்:# கட்டுப்பாடுகள்: 1 <= எண் <= 1000 # அதை சிறிய எழுத்துக்களில் திருப்பி அனுப்புங்கள்.# ஒரு நேர்ம முழு எண் கொடுக்கப்பட்டால், அதன் ரோமானிய எண் சமமான சரம், # >>> int_to_mini_roman(19)\n# \"xix\"\n# >>> int_to_mini_roman(152)\n# \"clii\"\n# >>> int_to_mini_roman(426)\n# \"cdxxvi\"\nsub int_to_mini_roman {\n    my($number) = @_;\n","canonical_solution":"my @roman_numerals = (\n        [1000, 'm'],\n        [900, 'cm'],\n        [500, 'd'],\n        [400, 'cd'],\n        [100, 'c'],\n        [90, 'xc'],\n        [50, 'l'],\n        [40, 'xl'],\n        [10, 'x'],\n        [9, 'ix'],\n        [5, 'v'],\n        [4, 'iv'],\n        [1, 'i'],\n    );\n\n    my $result = '';\n\n    for my $pair (@roman_numerals) {\n        my ($value, $roman) = @$pair;\n        while ($number >= $value) {\n            $result .= $roman;\n            $number -= $value;\n        }\n    }\n\n    return $result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&int_to_mini_roman;\n        if(eq_deeply($candidate->(19),\"xix\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(152),\"clii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(251),\"ccli\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(426),\"cdxxvi\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(500),\"d\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"i\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"iv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(43),\"xliii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(90),\"xc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(94),\"xciv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(532),\"dxxxii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(900),\"cm\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(994),\"cmxciv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),\"m\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_157","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# 90 டிகிரி.# ஒரு செவ்வக முக்கோணம் ஒரு முக்கோணம் இதில் ஒரு கோணம் செவ்வக கோணம் அல்லது # பக்கங்கள் ஒரு செவ்வக முக்கோணத்தை உருவாக்குகின்றன, '' இல்லையெனில்.# ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளங்களைக் கொடுத்தால். மூன்று # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n","canonical_solution":"sub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    # Sort the sides to identify the potential hypotenuse\n    my @sides = sort { $a <=> $b } ($a, $b, $c);\n    # Check if the triangle satisfies Pythagorean theorem\n    return ($sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2) ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_158","nl":"tam_Taml","pl":"pl","prompt":"# எழுத்துக்கள், சொற்களஞ்சிய வரிசையில் முதலில் வரும் எழுத்தை திருப்பி விடுங்கள்.# பல சரங்கள் அதிகபட்சமாக தனித்துவமான எழுத்துக்களைக் கொண்டிருந்தால்# வரிசை வெவ்வேறு சொற்களைக் கொண்டுள்ளது. அதிகபட்ச எண்ணிக்கையுடன் வார்த்தையைத் திருப்பித் தருகிறது.# ஒரு வரிசை சரங்களை ஏற்றுக்கொள்ளும் ஒரு செயல்பாட்டை எழுதுக.# >>> find_max([\"name\", \"of\", \"string\"])\n# \"string\"\n# >>> find_max([\"name\", \"enam\", \"game\"])\n# \"enam\"\n# >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\nsub find_max {\n    my($words) = @_;\n","canonical_solution":"sub find_max {\n    my ($words) = @_;\n    my $max_word = '';\n    my $max_unique_chars = 0;\n    \n    foreach my $word (@$words) {\n        my %unique_chars = map { $_ => 1 } split \/\/, $word;\n        my $unique_count = keys %unique_chars;\n        \n        if ($unique_count > $max_unique_chars || ($unique_count == $max_unique_chars && $word lt $max_word)) {\n            $max_word = $word;\n            $max_unique_chars = $unique_count;\n        }\n    }\n    \n    return $max_word;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_159","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணம்:# போதுமான அளவு கேரட் மீதமிருந்தால், மீதமுள்ள கேரட்டை எல்லாம் சாப்பிடுவீர்கள், ஆனால் இன்னும் பசியுடன் இருப்பீர்கள்.# உங்கள் உணவுக்குப் பிறகு எஞ்சியிருக்கும் கேரட் எண்ணிக்கை ] # [உணவுக்குப் பிறகு சாப்பிட்ட மொத்த கேரட் எண்ணிக்கை, # ஆனால், இப்போது நீங்கள் அதிகமான கேரட் சாப்பிட வேண்டும்.# நீங்கள் ஒரு பசி முயல், நீங்கள் ஏற்கனவே கேரட் ஒரு குறிப்பிட்ட எண்ணிக்கையில் சாப்பிட்டேன், # >>> eat(5, 6, 10)\n# [11, 4]\n# >>> eat(4, 8, 9)\n# [12, 1]\n# >>> eat(1, 10, 10)\n# [11, 0]\n# >>> eat(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\nsub eat {\n    my($number, $need, $remaining) = @_;\n","canonical_solution":"sub eat {\n    my($number, $need, $remaining) = @_;\n    my $total_eaten = $number + $need;\n    if ($remaining >= $need) {\n        $remaining -= $need;\n    } else {\n        $total_eaten = $number + $remaining;\n        $remaining = 0;\n    }\n    return [$total_eaten, $remaining];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&eat;\n        if(eq_deeply($candidate->(5, 6, 10),[11, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 9),[12, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 10, 10),[11, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 11, 5),[7, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 7),[9, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 1),[5, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_160","nl":"tam_Taml","pl":"pl","prompt":"# ஆபரேட்டர் வரிசையில் குறைந்தது ஒரு ஆபரேட்டரும், ஆப்பரேண்ட் வரிசையில் குறைந்தது இரண்டு ஆப்பரேண்ட்களும் உள்ளன.# ஓபராண்ட் என்பது எதிர்மறை அல்லாத முழு எண்களின் வரிசை ஆகும்.# ஆபரேட்டர் வரிசையின் நீளம், ஆபரேண்ட்டு வரிசையின் நீளத்திற்குக் குறைவாக ஒன்றுக்கு சமம்.# குறிப்பு:# => முடிவு = 9 # இதன் விளைவாக = 2 + 3 * 4 - 5 # வரிசை = [2, 3, 4, 5] # ஆபரேட்டர்['+', '*', '-'] # உதாரணம்:# எக்ஸ்போனன்ஷியன் (**)# மாடிப் பிரிவு (\/\/)# பெருக்கல் (*) # கழித்தல் ( - ) # சேர்த்தல் (+) # அடிப்படை அல்ஜீப்ரா செயல்பாடுகள்:# வெளிப்பாடு மற்றும் இந்த வெளிப்பாடு மதிப்பீடு திரும்ப.# இரண்டாவது வரிசை முழு எண்களின் வரிசை ஆகும். கொடுக்கப்பட்ட இரண்டு வரிசைகளை பயன்படுத்தி அல்ஜீப்ரிக் கட்டமைக்கவும்.# இரண்டு வரிசைகள் ஆபரேட்டர், மற்றும் operand கொடுக்கப்பட்ட. முதல் வரிசை அடிப்படை அல்ஜீப்ரா நடவடிக்கைகள் உள்ளது, மற்றும் sub do_algebra {\n    my($operator, $operand) = @_;\n","canonical_solution":"sub do_algebra {\n    my ($operator, $operand) = @_;\n    my $expression = $operand->[0];\n    \n    for my $i (0 .. $#$operator) {\n        my $op = $operator->[$i];\n        my $num = $operand->[$i + 1];\n        \n        if ($op eq '\/\/') {\n            $expression = \"int($expression \/ $num)\";\n        } else {\n            $expression .= \" $op $num\";\n        }\n    }\n    \n    return eval $expression;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&do_algebra;\n        if(eq_deeply($candidate->([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\/\/\", \"*\"], [7, 3, 4]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_161","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணங்கள் # செயல்பாடு விளைவாக சரம் திரும்ப வேண்டும்.# சரம் எந்த எழுத்துக்களையும் கொண்டிருக்கவில்லை என்றால், சரத்தை தலைகீழாக மாற்றவும்.# இல்லையெனில் அப்படியே வைத்திருங்கள்.# s[i] ஒரு எழுத்து என்றால், அதன் வழக்கு கீழ் முதல் மேல் அல்லது அதற்கு நேர்மாறாக,# உங்களுக்கு ஒரு சரம் கொடுக்கப்பட்டுள்ளது.# >>> solve(\"1234\")\n# \"4321\"\n# >>> solve(\"ab\")\n# \"AB\"\n# >>> solve(\"#a@C\")\n# \"#A@c\"\nsub solve {\n    my($s) = @_;\n","canonical_solution":"sub solve {\n    my($s) = @_;\n    if ($s =~ \/[a-zA-Z]\/) {\n        $s =~ s\/([a-z])|([A-Z])\/defined $1 ? uc($1) : lc($2)\/ge;\n    } else {\n        $s = reverse($s);\n    }\n    return $s;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"),\"4321\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"AB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#AsdfW^45\"),\"#aSDFw^45\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#$a^D\"),\"#$A^d\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_162","nl":"tam_Taml","pl":"pl","prompt":"# 'text' என்பது ஒரு வெற்று சரம் என்றால், undef ஐத் திருப்பி விடுக.# ஒரு சரம் 'text' கொடுக்கப்பட்டால், அதன் md5 ஹேஷ் சமமான சரத்தை திருப்பி விடுங்கள்.# >>> string_to_md5(\"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\nsub string_to_md5 {\n    my($text) = @_;\n","canonical_solution":"use Digest::MD5 qw(md5_hex);\n\n    if ($text eq '') {\n        return undef;\n    }\n\n    return md5_hex($text);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_to_md5;\n        if(eq_deeply($candidate->(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_163","nl":"tam_Taml","pl":"pl","prompt":"# உதாரணமாக: # மற்றும் b, அதிகரிக்கும் வரிசையில்.# இரண்டு நேர்மறை முழு எண்கள் a மற்றும் b கொடுக்கப்பட்டால், a க்கு இடையில் உள்ள சம எண்களைத் திருப்பிக் கொடுங்கள்.# >>> generate_integers(2, 8)\n# [2, 4, 6, 8]\n# >>> generate_integers(8, 2)\n# [2, 4, 6, 8]\n# >>> generate_integers(10, 14)\n# []\nsub generate_integers {\n    my($a, $b) = @_;\n","canonical_solution":"sub generate_integers {\n    my($a, $b) = @_;\n    my @result;\n    my ($start, $end) = $a < $b ? ($a, $b) : ($b, $a);\n    \n    for my $i ($start..$end) {\n        push @result, $i if $i % 2 == 0;\n    }\n    \n    return @result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&generate_integers;\n        if(eq_deeply($candidate->(2, 10),[2, 4, 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 2),[2, 4, 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(132, 2),[2, 4, 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 89),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"}]