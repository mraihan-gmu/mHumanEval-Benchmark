[
    {
        "task_id": "HumanEval/0",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"கொடுக்கப்பட்ட எண்களின் பட்டியலில், கொடுக்கப்பட்ட வரம்பை விட ஒருவருக்கொருவர் நெருக்கமான இரண்டு எண்கள் உள்ளதா என்பதை சரிபார்க்கவும். எடுத்துக்காட்டுஃ >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) தவறானது >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) உண்மை \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"இந்த செயல்பாட்டிற்கான உள்ளீடு என்பது பல குழுக்களாக உள்ளமைக்கப்பட்ட அடைப்புக்குறிகளைக் கொண்ட ஒரு சரம் ஆகும். உங்கள் குறிக்கோள் அந்த குழுவை தனி சரங்களாகப் பிரித்து அவற்றை பட்டியலிடுவதாகும். தனித்தனி குழுக்கள் சமநிலையில் உள்ளன (ஒவ்வொரு திறந்த அடைப்புக்குறி சரியாக மூடப்பட்டுள்ளது) மற்றும் ஒருவருக்கொருவர் உள்ளமைக்கப்படவில்லை உள்ளீட்டு சரத்தில் ஏதேனும் இடைவெளிகளை புறக்கணிக்கவும். எடுத்துக்காட்டுஃ >>> separate_paren_groups' ((( ) (() (( ) ) ) ) ) ' ('), ' (), ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()))))))) ' ()))))))) ' ())))))))))))))))))))))\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"ஒரு நேர்மறை மிதக்கும் புள்ளி எண் கொடுக்கப்பட்டால், அது ஒரு முழு எண் பகுதியாகவும் (கொடுக்கப்பட்ட எண்ணை விட பெரிய முழு எண்) மற்றும் தசமங்களாகவும் (இடதுபுறம் எப்போதும் 1 ஐ விட சிறியது) உடைக்கப்படலாம். எண்ணின் தசம பகுதியைத் திருப்பித் தரவும். எடுத்துக்காட்டுஃ >>> truncate_number(3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"நீங்கள் ஒரு வங்கி கணக்கில் வைப்பு மற்றும் திரும்பப் பெறுதல் நடவடிக்கைகளின் பட்டியலை வழங்கியுள்ளீர்கள், இது பூஜ்ஜிய இருப்புடன் தொடங்குகிறது. எந்த நேரத்திலும் கணக்கு இருப்பு பூஜ்ஜியத்திற்குக் கீழே விழுகிறதா என்பதைக் கண்டறிவதே உங்கள் பணி, அந்த நேரத்தில் செயல்பாடு உண்மை என்று திரும்ப வேண்டும். இல்லையெனில் அது தவறானது என்று திரும்ப வேண்டும். எடுத்துக்காட்டுஃ >>> below_zero([1, 2, 3]) தவறானது >>> below_zero([1, 2, -4, 5]) உண்மை \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"உள்ளீட்டு எண்களின் கொடுக்கப்பட்ட பட்டியலுக்கு, இந்த தரவுத்தொகுப்பின் சராசரியைச் சுற்றி சராசரி முழுமையான விலகலைக் கணக்கிடுங்கள். சராசரி முழுமையான விலகல் என்பது ஒவ்வொரு உறுப்புக்கும் ஒரு மைய புள்ளியுக்கும் இடையிலான சராசரி முழுமையான வேறுபாடு ஆகும் (இந்த வழக்கில் சராசரி): MAD = சராசரி  x - x_mean  எடுத்துக்காட்டுஃ >>> mean_absolute_deviation ({1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"உள்ளீட்டு பட்டியலின் ஒவ்வொரு இரண்டு தொடர்ச்சியான கூறுகளுக்கும் இடையில் ஒரு எண் 'தீமை' சேர்க்கவும் `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"இந்த செயல்பாட்டிற்கான உள்ளீடு என்பது இடைவெளிகளால் பிரிக்கப்பட்ட அடைப்புக்குறிகளுக்கான பல குழுக்களைக் குறிக்கும் ஒரு சரம் ஆகும். ஒவ்வொரு குழுவிற்கும், அடைப்புக்குறிகளின் ஆழமான அளவை வெளியிடுங்கள். எ. கா. (() (()) அதிகபட்சம் இரண்டு நிலைகள் கொண்டிருக்கும் போது ((())) மூன்று உள்ளது. >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"கொடுக்கப்பட்ட துணைச்சொல் வரிசைகளை மட்டுமே உள்ளீட்டு வரிசைகளின் பட்டியலை வடிகட்டவும் >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"முழு எண்களின் கொடுக்கப்பட்ட பட்டியலுக்கு, ஒரு பட்டியலில் உள்ள அனைத்து முழு எண்களின் கூட்டுத்தொகை மற்றும் ஒரு தயாரிப்பு ஆகியவற்றைக் கொண்ட ஒரு டப்பிள் திரும்பவும். காலியான தொகை 0 க்கு சமமாக இருக்க வேண்டும் மற்றும் காலியான தயாரிப்பு 1 க்கு சமமாக இருக்க வேண்டும். >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) \"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"கொடுக்கப்பட்ட முழு எண்களின் பட்டியலிலிருந்து, வரிசையில் கொடுக்கப்பட்ட தருணம் வரை காணப்படும் அதிகபட்ச உருட்டல் உறுப்புகளின் பட்டியலை உருவாக்கவும். >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"வழங்கப்பட்ட சரத்துடன் தொடங்கும் குறுகிய பாலிண்ட்ரோம் கண்டுபிடிக்கவும். அல்காரிதம் யோசனை எளிதுஃ - வழங்கப்பட்ட சரத்தின் மிக நீண்ட பின்னொட்டியைக் கண்டுபிடி. இது ஒரு பாலிண்ட்ரோம் ஆகும். - பாலிண்ட்ரோம் பின்னொட்டுக்கு முன் வரும் ஒரு சரம் முன்னொட்டியின் சரம் முடிவில் பின்னொட்டு சேர்க்கவும். >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('catac') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"கொடுக்கப்பட்ட சரம் ஒரு பாலிண்ட்ரோம் என்றால் சோதனை செய்யவும்.\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"உள்ளீடு என்பது இரண்டு சரங்கள் a மற்றும் b ஆகும். இவை 1 மற்றும் 0 களை மட்டுமே கொண்டிருக்கும். இந்த உள்ளீடுகளில் பைனரி XOR ஐச் செய்யுங்கள் மற்றும் முடிவை ஒரு சரமாகவும் திருப்பி விடுங்கள். >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"வரிசைகளின் பட்டியலில் இருந்து, மிக நீளமான ஒன்றைத் திருப்பி விடுங்கள். ஒரே நீளத்தின் பல வரிசைகள் இருந்தால் முதல் ஒன்றைத் திருப்பி விடுங்கள். உள்ளீட்டு பட்டியல் காலியாக இருந்தால் எதுவும் இல்லை. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"இரண்டு முழு எண்கள் a மற்றும் b இன் மிகப்பெரிய பொது வகுப்பான் >>> மிகப்பெரிய_பொது_படைப்பான் ((3, 5) 1 >>> மிகப்பெரிய_பொது_படைப்பான் ((25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"உள்ளீட்டு சரத்தின் குறுகிய முதல் நீண்ட வரை அனைத்து முன்னொட்டுகளின் பட்டியலைத் திரும்பு >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"0 முதல் n வரை உள்ளடக்கிய இடைவெளி வரையறுக்கப்பட்ட எண்களைக் கொண்ட ஒரு சரத்தைத் திருப்பித் தருகிறது. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"ஒரு சரம் கொடுக்கப்பட்டால், எத்தனை தனித்துவமான எழுத்துக்கள் (பெரு எழுத்துக்கள் எதுவாக இருந்தாலும்) அதில் உள்ளன என்பதைக் கண்டறியவும் >>> count_distinct_characters ((('xyzXYZ') 3 >>> count_distinct_characters ((('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"இந்த செயல்பாடு உள்ளீடு ஒரு சிறப்பு ASCII வடிவத்தில் இசை குறிப்புகள் பிரதிநிதித்துவம் ஒரு சரம் உள்ளது. உங்கள் பணி பல துடிப்புகளுக்கு ஒத்த முழு சரம் பட்டியலை அலச வேண்டும் ஒரு புனைகதை உள்ளதுஃ 'o' குறிப்பு, கடைசி நான்கு துடிப்புகளை 'o' - பாதி குறிப்பு, கடைசி இரண்டு துடிப்புகளை ' - குவாட்டர் குறிப்பு, கடைசி ஒரு துடிப்பு >>> parse_music '. 'o' . o' . o' . o' . on",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"ஒரு குறிப்பிட்ட துணை சரம் எத்தனை முறை அசல் சரத்தில் காணப்படுகிறது என்பதைக் கண்டறியவும். ஒன்றுடன் ஒன்று ஒட்டிக்கொள்ளும் நிகழ்வுகளை எண்ணுங்கள். >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"உள்ளீடு என்பது 'பூஜ்யம்' முதல் 'ஒன்பது' வரையிலான எண்களின் இடைவெளி-வரையறுக்கப்பட்ட சரம். செல்லுபடியாகும் தேர்வுகள் 'பூஜ்யம்', 'ஒன்று', 'இரண்டு', 'மூன்று', 'நான்கு', 'ஐந்து', 'ஆறு', 'ஏழு', 'எட்டு' மற்றும் 'ஒன்பது'. சிறியதிலிருந்து பெரியது வரை வரிசைப்படுத்தப்பட்ட எண்களுடன் சரத்தை திருப்பி விடுங்கள் >>> sort_numbers (('மூன்று ஒன்று ஐந்து') 'ஒன்று மூன்று ஐந்து' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"வழங்கப்பட்ட எண்களின் பட்டியலிலிருந்து (குறைந்தது இரண்டு நீளமுள்ளவை) ஒருவருக்கொருவர் மிக நெருக்கமான இரண்டைத் தேர்ந்தெடுத்து அவற்றை வரிசையில் (சிறிய எண், பெரிய எண்) திருப்பித் தரவும். >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"எண்களின் பட்டியலைக் கொடுத்தால் (குறைந்தபட்சம் இரண்டு கூறுகளை கொண்டது), அந்த பட்டியலில் ஒரு நேரியல் மாற்றத்தை பயன்படுத்துங்கள், மிகச்சிறிய எண் 0 ஆகவும், மிகப்பெரியது 1 ஆகவும் மாறும் >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"முழு எண்களுக்கு மட்டுமே கொடுக்கப்பட்ட பைதான் மதிப்புகளின் பட்டியலை வடிகட்டவும் >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"கொடுக்கப்பட்ட சரம் >>> strlen('') 0 >>> strlen('abc') 3 ன் மீள் நீளம்\"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"கொடுக்கப்பட்ட n எண்ணுக்கு, n ஐ சமமாகப் பிரிக்கும் மிகப்பெரிய எண்ணைக் கண்டறியவும், n ஐ விட சிறியதாக >>> largest_divisor ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"கொடுக்கப்பட்ட முழு எண் முதன்மை காரணிகளின் பட்டியலை சிறியதிலிருந்து பெரியது வரை வரிசையில் திருப்பி விடுகிறது. ஒவ்வொரு காரணிகளும் காரணிகளில் எத்தனை முறை தோன்றும் என்பதற்கு ஒத்த எண்ணிக்கையில் பட்டியலிடப்பட வேண்டும். உள்ளீட்டு எண் அனைத்து காரணிகளின் கூட்டுத்தொகைக்கு சமமாக இருக்க வேண்டும் >>> காரணிப்படுத்தல் ((8) [2, 2, 2] >>> காரணிப்படுத்தல் ((25) [5, 5] >>> காரணிப்படுத்தல் ((70) [2, 5, 7] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"முழு எண்களின் பட்டியலிலிருந்து, ஒரு முறைக்கு மேல் நிகழும் அனைத்து உறுப்புகளையும் அகற்றவும். உள்ளீட்டில் உள்ள அதே வரிசையில் உறுப்புகளை விட்டு விடுங்கள். >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"கொடுக்கப்பட்ட சரத்திற்கு, சிறிய எழுத்துக்களை பெரிய எழுத்துக்களாகவும், பெரிய எழுத்துக்களை சிறிய எழுத்துக்களாகவும் திருப்புக. >>> flip_case ((('Hello') 'HELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"ஒரே சரத்தில் இணைக்கப்பட்ட சரங்களின் பட்டியல் >>> இணைக்கப்பட்ட (([]) '' >>> இணைக்கப்பட்ட ((['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"ஒரு முன்னொட்டுடன் தொடங்கும் சரங்களின் உள்ளீட்டு பட்டியலை மட்டுமே வடிகட்டவும். >>> முன்னொட்டு மூலம் வடிகட்டவும்.\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"பட்டியலில் உள்ள நேர்மறை எண்களை மட்டுமே திரும்பப் பெறுக. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"கொடுக்கப்பட்ட எண் முதன்மையானது என்றால் உண்மை, மற்றும் தவறானது. >>> is_prime(6) தவறானது >>> is_prime(101) உண்மை >>> is_prime(11) உண்மை >>> is_prime(13441) உண்மை >>> is_prime(61) உண்மை >>> is_prime(4) தவறானது >>> is_prime(1) தவறானது \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs என்பது ஒரு பன்மையின் குணகங்கள் ஆகும். find_zero find x such that poly(x) = 0. find_zero பல இருந்தால் கூட, பூஜ்ஜிய புள்ளியை மட்டுமே தருகிறது. மேலும், find_zero ஒரு பட்டியலை மட்டுமே எடுக்கிறது xs இது ஒரு தீர்வுக்கு உத்தரவாதம் அளிப்பதால், குணகங்களின் எண்ணிக்கையையும் மிகப்பெரிய பூஜ்ஜியமற்ற குணகத்தையும் கொண்டுள்ளது. >>> சுற்று ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> சுற்று ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6^2 + x^3 1.0 \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"x புள்ளியில் xs குணகங்களுடன் பன்முனை மதிப்பீடு செய்கிறது. xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"இந்த செயல்பாடு ஒரு பட்டியலை l எடுத்து, ஒரு பட்டியலை l' ஐ திருப்பித் தருகிறது, இது மூன்று மூலம் வகுக்க முடியாத குறியீடுகளில் l உடன் ஒத்ததாக இருக்கும், அதே நேரத்தில் மூன்று மூலம் வகுக்கக்கூடிய குறியீடுகளில் அதன் மதிப்புகள் l இன் தொடர்புடைய குறியீடுகளின் மதிப்புகளுக்கு சமமாக இருக்கும், ஆனால் வரிசைப்படுத்தப்படும். >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"ஒரு பட்டியலில் வரிசைப்படுத்தப்பட்ட தனித்துவமான கூறுகளைத் திரும்பப் பெறுகிறது >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"பட்டியலில் உள்ள அதிகபட்ச உறுப்பைத் திருப்பி விடுகிறது. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"11 அல்லது 13 ஆல் வகுபடும் n ஐ விட சிறிய முழு எண்களில் 7 என்ற இலக்கத்தின் எண்ணிக்கையைத் திருப்பித் தரவும். >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"இந்த செயல்பாடு ஒரு பட்டியலை l எடுத்து, ஒரு பட்டியலை l' ஐ திருப்பித் தருகிறது, இது l' என்பது ஒற்றைப்படை குறியீடுகளில் l உடன் ஒத்ததாக இருக்கும், அதே நேரத்தில் அதன் மதிப்புகள் கூட குறியீடுகளில் l இன் கூட குறியீடுகளின் மதிப்புகளுக்கு சமமாக இருக்கும், ஆனால் வரிசைப்படுத்தப்படும். >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"க்கு உள்ளீட்டு சரம் என எடுத்துக்கொள்கிறது encode_cyclic செயல்பாடு. டிகோட் செய்யப்பட்ட சரத்தை அளிக்கிறது.\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"மூன்று எழுத்துக்களின் சுழற்சி குழுக்களால் குறியிடப்பட்ட சரத்தை அளிக்கிறது.\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib ஒரு ஃபீபனச்சி எண் மற்றும் அது ஒரு பிரதான எண் என்று n-வது எண்ணைத் தருகிறது. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero என்பது முழு எண்களின் பட்டியலை உள்ளீடாக எடுத்துக்கொள்கிறது. பட்டியலில் மூன்று தனித்துவமான கூறுகள் இருந்தால், அவை பூஜ்ஜியத்திற்குச் சேர்க்கப்பட்டால், அது உண்மை என்று திருப்பித் தருகிறது, இல்லையெனில் தவறானது. >>> triples_sum_to_zero([1, 3, -2, 1]) தவறானது >>> triples_sum_to_zero[(1, 3, -2, 1]) உண்மை >>> triples_sum_to_zero([1, 2, 3, 7]) தவறானது >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) உண்மை >>> triples_sum_to_zero[1]) தவறானது \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"ஒரு முழுமையான நேர்மையான முடிவில்லா நீண்ட வரிசையாக இருக்கும் ஒரு சாலையை கற்பனை செய்து பாருங்கள். n கார்கள் இடமிருந்து வலமாக ஓடுகின்றன; ஒரே நேரத்தில், n கார்களின் வேறு தொகுப்பு வலமிருந்து இடமாக ஓடுகிறது. இரண்டு கார் தொகுப்புகள் ஒருவருக்கொருவர் வெகு தொலைவில் இருக்கும். அனைத்து கார்களும் ஒரே வேகத்தில் நகர்கின்றன. இடமிருந்து வலமாக நகரும் கார் வலமிருந்து இடமாக நகரும் ஒரு காரைத் தாக்கும்போது இரண்டு கார்கள் மோதுவதாகக் கூறப்படுகிறது. இருப்பினும், கார்கள் முடிவில்லா வலுவானவை மற்றும் வலுவானவை; இதன் விளைவாக, அவை மோதாதது போல் அவற்றின் பாதையில் தொடர்ந்து நகர்கின்றன. இந்த செயல்பாடு அத்தகைய மோதல்களின் எண்ணிக்கையை வெளியிடுகிறது.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] க்கு அதிகரித்த உறுப்புகளுடன் பட்டியலைத் திரும்புக.\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero என்பது ஒரு முழு எண்களின் பட்டியலை உள்ளீடாக எடுத்துக்கொள்கிறது. பட்டியலில் இரண்டு தனித்துவமான கூறுகள் இருந்தால், அது பூஜ்ஜியமாகவும், இல்லையெனில் தவறாகவும் இருக்கும். >>> pairs_sum_to_zero (([1, 3, 5, 0]) தவறானது >>> pairs_sum_to_zero (([1, 3, -2, 1]) தவறானது >>> pairs_sum_to_zero (([1, 2, 3, 7]) தவறானது >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) உண்மை >>> pairs_sum_to_zero (([1]) தவறானது \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"உள்ளீட்டு எண் x இன் எண் அடிப்படையை அடிப்படையாக மாற்றவும். மாற்றத்திற்குப் பிறகு சரம் பிரதிநிதித்துவத்தை திரும்பப் பெறுக. அடிப்படை எண்கள் 10 க்கும் குறைவாக உள்ளன. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"ஒரு முக்கோணத்திற்கான ஒரு பக்கத்தின் நீளம் மற்றும் உயர் திரும்பும் பகுதி கொடுக்கப்பட்டுள்ளது. >>> triangle_area(5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 எண் வரிசை என்பது பின்வருமாறு வரையறுக்கப்பட்ட ஃபீபொனாச்சி வரிசைக்கு ஒத்த ஒரு வரிசை ஆகும்ஃ fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4 எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள். மீளாய்வைப் பயன்படுத்த வேண்டாம். >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"பட்டியலில் உள்ள உறுப்புகளின் மீடியன் திரும்புதல் l. >>> மீடியன் (([3, 1, 2, 4, 5]) 3 >>> மீடியன் (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"கொடுக்கப்பட்ட சரம் ஒரு பாலிண்ட்ரோம் >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False  என்பதை சரிபார்க்கிறது\"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"2^n modulo p (எண்மங்களை அறிந்திருங்கள்) திரும்பவும். >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"க்கு உள்ளீட்டு சரம் என எடுத்துக்கொள்கிறது.\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"எழுத்துக்களில் உள்ள ஒவ்வொரு எழுத்தையும் 5 ஆல் மாற்றுவதன் மூலம் குறியிடப்பட்ட சரத்தை அளிக்கிறது.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels என்பது ஒரு செயல்பாடு, இது சரம் எடுத்து, சரம் இல்லாமல் எழுத்துக்களைத் தருகிறது. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"பட்டியலில் உள்ள அனைத்து எண்களும் உச்சநிலை t க்குக் கீழே இருந்தால் True ஐத் திரும்புக. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"இரண்டு எண்களை x மற்றும் y சேர்க்கவும் >>> சேர்க்கவும் ((2, 3) 5 >>> சேர்க்கவும் ((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"இரண்டு சொற்களில் ஒரே எழுத்துக்கள் உள்ளதா என்று சரிபார்க்கவும். >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') உண்மை >>> same_chars (('abcd', 'dddddddabc') உண்மை >>> same_chars (('dddddddabc', 'abcd') உண்மை >>> same_chars (('eabcd', 'dddddddddabc') தவறு >>> same_chars ((('abcd', 'dddddddabddce') தவறு >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') தவறு \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"n-வது ஃபீபனோச்சி எண்ணைத் திருப்பித் தருக. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets என்பது \"<\" மற்றும் \">\". return True ஒவ்வொரு திறப்பு அடைப்புக்குறிக்கும் அதனுடன் தொடர்புடைய மூடுதலின் அடைப்புக்குறி இருந்தால். >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"True என்பது பட்டியல் கூறுகள் ஒரே மாதிரியாக அதிகரித்து அல்லது குறைந்து வருகின்றன. >>> ஒரே மாதிரியாக (([1, 2, 4, 20]) True >>> ஒரே மாதிரியாக (([1, 20, 4, 10]) False >>> ஒரே மாதிரியாக (([4, 1, 0, -10]) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"இரண்டு பட்டியல்களுக்கான ஒழுங்கமைக்கப்பட்ட தனித்துவமான பொதுவான கூறுகளைத் திரும்பப் பெறுக. >>> பொதுவான (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> பொதுவான (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n இன் மிகப்பெரிய பிரதான காரணி திரும்பவும். n > 1 என்று கருதி, பிரதான காரணி அல்ல. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n என்பது 1 முதல் n வரையிலான எண்களைக் கூட்டுகின்ற ஒரு செயல்பாடு ஆகும். >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets என்பது \"(\" மற்றும் \"\") என்ற சரம். ஒவ்வொரு திறப்பு அடைப்புக்குறிக்கும் அதனுடன் தொடர்புடைய மூடுதல் அடைப்புக்குறி இருந்தால் உண்மை. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs என்பது ஒரு பன்மையின் குணகங்களைக் குறிக்கிறது. xs[0] + xs[1] * x + xs[2] * x^2 + .... இந்த பன்மையின் வழித்தோன்றலை அதே வடிவத்தில் திருப்பி விடுங்கள். >>> வழித்தோன்றல் (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> வழித்தோன்றல் [(1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"FibFib எண் வரிசை என்பது பின்வருமாறு வரையறுக்கப்பட்ட ஃபீபொனாச்சி வரிசைக்கு ஒத்த ஒரு வரிசை ஆகும்ஃ fibfib ((0) == 0 fibfib ((1) == 0 fibfib ((2) == 1 fibfib ((n) == fib ((n-1) + fibfib ((n-2) + fibfib ((n-3). தயவுசெய்து fibfib எண் வரிசையின் n-வது உறுப்பை திறம்பட கணக்கிட ஒரு செயல்பாட்டை எழுதுங்கள். >>> fibfib ((1) 0 >>> fib ((5) 4 >>> fib fib ((8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"ஒரு சொற்களின் எண்ணிக்கையை உள்ளீடாகக் கொண்டு, ஒரு வார்த்தையைக் குறிக்கும் சரத்தை எடுத்து, சரத்தில் உள்ள எழுத்துக்களின் எண்ணிக்கையைத் தரும் ஒரு செயல்பாட்டை எழுத்துக்கள்_எண்ணை எழுதுங்கள். இந்த வழக்கில் எழுத்துக்கள் 'a', 'e', 'i', 'o', 'u'. இங்கே, 'y' என்பது ஒரு எழுத்து, ஆனால் அது கொடுக்கப்பட்ட வார்த்தையின் முடிவில் இருக்கும்போது மட்டுமே. எடுத்துக்காட்டுஃ >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"மேலும் சோதனை வழக்குகளைச் சேர்க்கவும்.\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"முழு எண் x இன் இலக்கங்களை வட்டமாக நகர்த்தவும், இடமாற்றத்தால் இலக்கங்களை வலதுபுறமாக நகர்த்தவும், முடிவை ஒரு சரமாக திருப்பி அனுப்பவும். மாற்றம் > இலக்கங்களின் எண்ணிக்கை என்றால், இலக்கங்களை தலைகீழாக திருப்பி விடுங்கள். >>> circular_shift ((12, 1) \"21\" >>> circular_shift ((12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"பணி ஒரு சரத்தை உள்ளீடாக எடுத்து, மேல் எழுத்துக்களின் தொகையை மட்டுமே ASCII குறியீடுகளாகத் திருப்பித் தரும் ஒரு செயல்பாட்டை எழுதுக. எடுத்துக்காட்டுகள்ஃ digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"இந்த பணியில், நீங்கள் பழங்கள் ஒரு கூடை உள்ள விநியோகிக்கப்படும் என்று ஆப்பிள்கள் மற்றும் ஆரஞ்சுகள் ஒரு எண் குறிக்கும் ஒரு சரம் கொடுக்கப்படும் இந்த கூடை ஆப்பிள்கள், ஆரஞ்சுகள், மற்றும் மாங்கோ பழங்கள் கொண்டுள்ளது. ஆரஞ்சுகள் மற்றும் ஆப்பிள்கள் மொத்த எண்ணிக்கை குறிக்கும் சரம் மற்றும் கூடை பழங்கள் மொத்த எண்ணிக்கை குறிக்கும் ஒரு முழு எண் கொடுக்கப்பட்ட கூடை உள்ள மாங்கோ பழங்கள் எண்ணிக்கை திரும்ப. உதாரணமாகஃ fruit_distribution\"5(ஆப்பிள்கள் மற்றும் 6 ஆரஞ்சுகள்\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 ஆப்பிள்கள் மற்றும் 1 ஆரஞ்சுகள்\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 ஆப்பிள்கள் மற்றும் 3 ஆரஞ்சுகள்\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 ஆப்பிள்கள் மற்றும் 1 ஆரஞ்சுகள்\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"ஒரு வரிசைக்கு ஒரு கிளைக்கு பிரதிநிதித்துவம் அளிக்கிறது, இது எதிர்மறை அல்லாத முழு எண் முனைகள் உங்கள் பணி முனைகளில் ஒன்றைத் தேர்ந்தெடுத்து அதைத் திருப்பித் தர வேண்டும். தேர்ந்தெடுக்கப்பட்ட முனை மிகச்சிறிய சம மதிப்பு கொண்ட முனை இருக்க வேண்டும். ஒரே சிறிய சம மதிப்பு கொண்ட பல முனைகள் கிடைத்தால் மிகச்சிறிய குறியீட்டைக் கொண்ட முனை திரும்பப் பெற வேண்டும். தேர்ந்தெடுக்கப்பட்ட முனை ஒரு பட்டியலில் திரும்ப வேண்டும், [small_value, அதன் குறியீட்டு ], எந்த சம மதிப்புகளும் இல்லை அல்லது கொடுக்கப்பட்ட வரிசை காலியாக இருந்தால், திரும்பவும் []. எடுத்துக்காட்டு 1: உள்ளீடுஃ [4,2,3] வெளியீடுஃ [2, 1] விளக்கம்ஃ 2 மிகச்சிறிய சம மதிப்பு, மற்றும் 2 மிகச்சிறிய குறியீட்டு உள்ளது. எடுத்துக்காட்டு 2: உள்ளீடுஃ [1,2,3] வெளியீடுஃ [2, 1] விளக்கம்ஃ 2 மிகச்சிறிய மதிப்பு, மற்றும் 2 மிகச்சிறிய குறியீட்டு உள்ளது. எடுத்துக்காட்டு 3: உள்ளீடுஃ [] வெளியீடுஃ [] உள்ளீடுஃ [4: 0,5, 3, 4, 2] வெளியீடுஃ 0, 1 வெளியீடுஃ மிகச்சிறிய குறியீட்டு மதிப்பு கொண்ட முனை, ஆனால் மிகச்சிறிய குறியீட்டு மதிப்பு உள்ளது. எடுத்துக்காட்டுஃ 1 * இரண்டு பூஜ்ஜியங்கள் உள்ளன, ஆனால் மிகச்சிறிய மதிப்பு உள்ளது. எனவே முதல் முனைக்கு பூஜ்ஜியமாக உள்ளது.\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''உங்களுக்கு நேர்மறை முழு எண்களின் காலியாக இல்லாத பட்டியல் கொடுக்கப்பட்டுள்ளது. பூஜ்ஜியத்தை விட பெரிய மற்றும் முழு எண் மதிப்புக்கு அதிகமாகவோ அல்லது சமமாகவோ இருக்கும் மிகப்பெரிய முழு எண்ணைத் திருப்பி விடுங்கள். ஒரு முழு எண்ணின் அதிர்வெண் பட்டியலில் தோன்றும் முறைகளின் எண்ணிக்கை. அத்தகைய மதிப்பு இல்லையென்றால், திரும்பவும் -1. எடுத்துக்காட்டுகள்ஃ தேடல் (([4, 1, 2, 2, 3, 1]) == 2 தேடல் ([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 தேடல் ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''முழு எண்களின் பட்டியலைக் கொடுத்தால், விசித்திரமான வரிசையில் பட்டியலைத் திருப்பி விடுங்கள். விசித்திரமான வரிசைப்படுத்தல், நீங்கள் குறைந்தபட்ச மதிப்புடன் தொடங்கும்போது, மீதமுள்ள முழு எண்களின் அதிகபட்ச, பின்னர் குறைந்தபட்ச மற்றும் பல. எடுத்துக்காட்டுகள்ஃ strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளங்களைக் கொடுத்தால். மூன்று பக்கங்களும் செல்லுபடியாகும் முக்கோணத்தை உருவாக்குகிறதா என்றால், முக்கோணத்தின் பரப்பளவை 2 தசம புள்ளிகளுக்கு வட்டமாக்குங்கள். இல்லையெனில் -1 திரும்பு மூன்று பக்கங்கள் எந்த இரண்டு பக்கங்களின் கூட்டுத்தொகை மூன்றாவது பக்கத்தை விட அதிகமாக இருக்கும்போது செல்லுபடியாகும் முக்கோணத்தை உருவாக்குகின்றன. எடுத்துக்காட்டுஃ முக்கோணம்_பகுதி ((3, 4, 5) == 6.00 முக்கோணம்_பகுதி ((1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''ஒரு செயல்பாட்டை எழுதுங்கள், அது உண்மை என்றால், q பொருள் பறக்கும், மற்றும் தவறானது. q பொருள் சமநிலையில் இருந்தால் (இது ஒரு பாலிண்ட்ரோம் பட்டியல்) மற்றும் அதன் கூறுகளின் தொகை அதிகபட்ச எடை w ஐ விட குறைவாகவோ அல்லது சமமாகவோ இருந்தால் பறக்கும். எடுத்துக்காட்டு: will_it_fly (([1, 2], 5) â -> தவறான # 1+2 அதிகபட்ச எடைக்குக் குறைவாக உள்ளது, ஆனால் அது சமநிலையற்றது. will_it_fly (([3, 2, 3], 1) â -> தவறான # அது சமநிலையில் உள்ளது, ஆனால் 3+2+3 அதிகபட்ச எடைக்கு அதிகமாக உள்ளது. will_it_fly (([3, 2, 3], 9) â -> உண்மை # 3+23 அதிகபட்ச எடைக்குக் குறைவாக உள்ளது, அது சமநிலையில் உள்ளது. will_it_fly ((([3], â 5) -> உண்மை # 3 அதிகபட்ச எடைக்குக் குறைவாக உள்ளது, அது சமநிலையில் உள்ளது.'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"ஒரு வரிசை வரிசை முழு எண்களைக் கொண்டிருக்கும்போது, வரிசையை பாலிண்ட்ரோமிக் செய்ய மாற்ற வேண்டிய குறைந்தபட்ச உறுப்புகளின் எண்ணிக்கையைக் கண்டறியவும். ஒரு பாலிண்ட்ரோமிக் வரிசை என்பது பின்னோக்கி மற்றும் முன்னோக்கி ஒரே மாதிரியாகப் படிக்கப்படும் ஒரு வரிசை. ஒரு மாற்றத்தில், நீங்கள் ஒரு உறுப்பை வேறு எந்த உறுப்புக்கும் மாற்றலாம். எடுத்துக்காட்டாகஃ smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''இரண்டு பட்டியல்களை ஏற்றுக் கொள்ளும் ஒரு செயல்பாட்டை எழுதுங்கள் மற்றும் பட்டியலில் உள்ள அனைத்து சரங்களிலும் உள்ள மொத்த எண்ணிக்கையை மற்ற பட்டியலை விட குறைவாகக் கொண்ட பட்டியலைத் தருகிறது. இரண்டு பட்டியல்களில் ஒரே எண்ணிக்கையிலான எழுத்துக்கள் இருந்தால், முதல் பட்டியலைத் திருப்பி விடுங்கள். எடுத்துக்காட்டுகள் total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] total_match ((['4', ['1', '2', '3', '4', '5', '4') -> ['4'])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"கொடுக்கப்பட்ட எண் 3 பிரதான எண்களின் பெருக்கமாக இருந்தால் உண்மை மற்றும் பொய்யானது என ஒரு செயல்பாட்டை எழுதுங்கள். (a) 100 க்கும் குறைவாக இருப்பதை அறிவது. எடுத்துக்காட்டு: is_multiply_prime(30) == உண்மை 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"உங்கள் பணி ஒரு எண் x என்பது n இன் எளிய சக்தி மற்றும் மற்ற சந்தர்ப்பங்களில் தவறானதாக இருந்தால், உண்மை என்று ஒரு செயல்பாட்டை எழுதுவது. x என்பது n இன் எளிய சக்தி என்றால் n ** int = x உதாரணமாகஃ is_simple_power ((1, 4) => true is_simple_power ((2, 2) => true is_simple_power ((8, 2) => true is_simple_power ((3, 2) => false is_simple_power ((3, 1) => false is_simple_power ((5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''ஒரு முழு எண் a ஐ எடுத்து, இந்த ingeger ஒரு முழு எண் க்யூப் என்றால் True ஐத் திரும்பப் பெறும் ஒரு செயல்பாட்டை எழுதுங்கள். குறிப்புஃ உள்ளீடு எப்போதும் செல்லுபடியாகும் என்று நீங்கள் கருதலாம். எடுத்துக்காட்டுகள்ஃ iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"நீங்கள் ஒரு செயல்பாட்டை எழுத பணிபுரிந்தீர்கள், இது ஒரு அறுபதின் எண் ஒரு சரம் மற்றும் அறுபதின் எண்களின் எண்ணிக்கையை எண்ணுகிறது (முதன்மை எண், அல்லது ஒரு முதன்மை, இரண்டு சிறிய இயற்கை எண்களின் தயாரிப்பு அல்ல 1 ஐ விட பெரிய இயற்கை எண்). அறுபதின் எண்கள் 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. முதன்மை எண்கள் 2, 3, 5, 7, 11, 13, 17 . . . எனவே நீங்கள் பின்வரும் இலக்கங்களின் எண்ணிக்கையை தீர்மானிக்க வேண்டும்ஃ 2, 3, 5, 7, 7, B (= பத்தொன்பது), D (= பத்தொன்பது 13). குறிப்புஃ உள்ளீடு எப்போதும் சரியானது அல்லது காலியாக இருக்கும் என்று நீங்கள் கருதலாம் சரம், மற்றும் சின்னங்கள் A, B, C, D, E, F எப்போதும் பெரிய எழுத்துக்களாக இருக்கும். எடுத்துக்காட்டுகள்ஃ \"num = AB\" வெளியீடு num = 1. \"1077E\" வெளியீடு 2. \"num = AB33\" எண் = AED1 \"num = 4. \"BC\" எண் = 6.01289 \"A\" எண் = 6.045 \"2020\" வெளியீடு 2. \"2020\"\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"நீங்கள் பத்தாம் வடிவத்தில் ஒரு எண் கொடுக்கப்படும் மற்றும் உங்கள் பணி பைனரி வடிவத்தில் மாற்ற வேண்டும். செயல்பாடு ஒரு சரம் திரும்ப வேண்டும், ஒவ்வொரு எழுத்து ஒரு பைனரி எண் பிரதிநிதித்துவம். சரம் ஒவ்வொரு எழுத்து '0' அல்லது '1' இருக்கும். தொடக்கத்தில் மற்றும் சரம் முடிவில் 'db' எழுத்துக்கள் ஒரு கூடுதல் ஜோடி இருக்கும். கூடுதல் எழுத்துக்கள் வடிவம் உதவ உள்ளன. எடுத்துக்காட்டுகள்ஃ decimal_to_binary ((15) # \"db1111db\" decimal_to_binary32) # \"db100000db\" \"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"உங்களுக்கு ஒரு சரம் s கொடுக்கப்பட்டுள்ளது. சரம் மகிழ்ச்சியாக இருக்கிறதா இல்லையா என்பதை சரிபார்க்க வேண்டும். ஒரு சரம் அதன் நீளம் குறைந்தது 3 மற்றும் ஒவ்வொரு 3 தொடர்ச்சியான எழுத்துக்கள் தனித்தனியாக இருந்தால் மகிழ்ச்சியாக இருக்கும் உதாரணமாகஃ is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy)) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"இது செமஸ்டர் கடைசி வாரம் மற்றும் ஆசிரியர் மாணவர்களுக்கு மதிப்பெண்கள் கொடுக்க வேண்டும். ஆசிரியர் மதிப்பீடு தனது சொந்த வழிமுறை செய்து வருகிறது. ஒரே பிரச்சனை, அவர் மதிப்பீடு பயன்படுத்தப்படும் குறியீடு இழந்து விட்டது. அவள் நீங்கள் சில மாணவர்கள் GPAs ஒரு பட்டியலை கொடுத்துள்ளது மற்றும் நீங்கள் பின்வரும் அட்டவணையை பயன்படுத்தி கடிதம் மதிப்பெண்கள் ஒரு பட்டியலை வெளியிட முடியும் என்று ஒரு செயல்பாடு எழுத வேண்டும்ஃ GPA ல் கடிதம் தர 4.0 A + > 3.7 A > 3.3 A- > 3.0 B + > 2.7 B > 2.3 B- > 2.0 B + > 1.7 C > 1.3 C- > 1.0 D + > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"ஒரு சரம் எடுத்து, சரம் நீளம் ஒரு பிரதான எண் அல்லது தவறானால் உண்மை என திருப்பித் தரும் ஒரு செயல்பாட்டை எழுதுக உதாரணங்கள் prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"ஒரு நேர்ம முழு எண் n கொடுக்கப்பட்டால், 1 உடன் தொடங்கும் அல்லது முடிவடையும் n- இலக்க நேர்ம முழு எண்களின் எண்ணிக்கையைத் திருப்பித் தரவும்.\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"ஒரு நேர்மறை முழு எண் N கொடுக்கப்பட்டால், பைனரியில் அதன் இலக்கங்களின் மொத்த தொகையைத் திருப்பித் தரவும். எடுத்துக்காட்டு N = 1000 க்கு, இலக்கங்களின் தொகை 1 ஆக இருக்கும், வெளியீடு \"1\" ஆக இருக்க வேண்டும். N = 150 க்கு, இலக்கங்களின் தொகை 6 ஆக இருக்கும், வெளியீடு \"110\" ஆக இருக்க வேண்டும். N = 147 க்கு, இலக்கங்களின் தொகை 12 ஆக இருக்கும், வெளியீடு \"1100\" ஆக இருக்க வேண்டும். மாறிகள்ஃ @N முழு எண் கட்டுப்பாடுகள்ஃ 0 â‰¤ N â‰¤ 10000. வெளியீடுஃ பைனரி எண்ணின் சரம் \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"முழு எண்களின் காலியாக இல்லாத பட்டியலைக் கொடுத்தால், முதலில், ஒற்றைப்படை குறியீடுகளில் உள்ள சம உறுப்புகளைச் சேர்க்கவும். எடுத்துக்காட்டுகள்ஃ add (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"ஒரு சரத்தை எடுத்து அதன் ஒழுங்கமைக்கப்பட்ட பதிப்பைத் தரும் ஒரு செயல்பாட்டை எழுதுக. சரத்தின் ஒழுங்கமைக்கப்பட்ட பதிப்பு, அனைத்து சொற்களும் (வெளியால் பிரிக்கப்பட்டவை) ஒரு புதிய வார்த்தையால் மாற்றப்படும் ஒரு சரம் ஆகும், அங்கு அனைத்து எழுத்துக்களும் அஸ்கி மதிப்பின் அடிப்படையில் ஏறுவரிசையில் ஒழுங்கமைக்கப்பட்டுள்ளன. குறிப்புஃ சொற்களின் வரிசையையும் வாக்கியத்தில் உள்ள வெற்று இடைவெளிகளையும் நீங்கள் வைத்திருக்க வேண்டும். எடுத்துக்காட்டாகஃ anti_shuffle ((('Hi') 'Hi' anti_shuffle ((('hello') 'ehllo' anti_shuffle (('Hello World!!!') 'Hello !!!Wdlor' க்குத் திரும்புகிறது\"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"மேட்ரிக்ஸைப் போலவே, ஒரு 2 பரிமாண தரவு, ஒரு உள்ளமைக்கப்பட்ட பட்டியலாக உங்களுக்கு வழங்கப்படுகிறது, இருப்பினும், மேட்ரிக்ஸைப் போலல்லாமல், ஒவ்வொரு வரிசையிலும் வெவ்வேறு எண்ணிக்கையிலான நெடுவரிசைகள் இருக்கலாம். lst, மற்றும் முழு எண் x கொடுக்கப்பட்டால், பட்டியலில் முழு எண்கள் x ஐக் கண்டுபிடித்து, டப்பல்களின் பட்டியலைத் திரும்புக, [(x1, y1), (x2, y2) ...] ஒவ்வொரு டப்பலும் ஒரு ஒருங்கிணைப்பு - (வரிசை, நெடுவரிசைகள்), 0 உடன் தொடங்குகிறது. முதலில் வரிசைகளின் ஒருங்கிணைப்புகளை ஏறும் வரிசையில் வரிசைப்படுத்துங்கள். மேலும், வரிசையின் ஒருங்கிணைப்புகளை வரிசைகளின் வரிசையில் வரிசைப்படுத்துங்கள். எடுத்துக்காட்டுகள்ஃ get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 1, 4], 0 (1, 0), (2, 5), (2, 0) get_(], 1) [] == வரிசை [1, 2, 3, 2], [2, 3]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"எதிர்மறை அல்லாத முழு எண்களின் வரிசை கொடுக்கப்பட்டால், வரிசைப்படுத்திய பின் கொடுக்கப்பட்ட வரிசையின் நகலைத் திருப்பித் தரவும், கொடுக்கப்பட்ட வரிசையை ஏறுவரிசையில் வரிசைப்படுத்துவீர்கள், இதன் தொகை ((முதல் குறியீட்டு மதிப்பு, கடைசி குறியீட்டு மதிப்பு) ஒற்றைப்படை என்றால், அல்லது அதன் தொகை ((முதல் குறியீட்டு மதிப்பு, கடைசி குறியீட்டு மதிப்பு) சமமாக இருந்தால், அதை இறங்குவரிசையில் வரிசைப்படுத்துங்கள். குறிப்புஃ * கொடுக்கப்பட்ட வரிசையை மாற்ற வேண்டாம். எடுத்துக்காட்டுகள்ஃ * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"ஒரு சரத்தை ஒரு வாதமாக எடுத்து, எழுத்துக்களை சுழற்றுவதன் மூலம் ஒரு சரத்தை குறியாக்கம் செய்து திருப்பித் தரும் ஒரு செயல்பாட்டை உருவாக்குங்கள். எழுத்துக்களை இரண்டு இடங்களுக்கு இரண்டு மடங்குகள் கீழே நகர்த்துவதன் மூலம் எழுத்துக்களை சுழற்ற வேண்டும். எடுத்துக்காட்டாகஃ encrypt (('hi') 'lm' encrypt (('asdfghjkl') 'ewhjklnop' encrypt (('gf') 'kj' encrypt (('et') 'ix' க்குத் திரும்புகிறது\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"உங்களுக்கு முழு எண்களின் பட்டியல் கொடுக்கப்பட்டுள்ளது. பட்டியலில் உள்ள 2 வது சிறிய உறுப்பைத் திரும்பப் பெறும் ஒரு next_smallest () செயல்பாட்டை எழுதுங்கள். அத்தகைய உறுப்பு இல்லையென்றால் None ஐத் திரும்பப் பெறுங்கள். next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"உங்களுக்கு ஒரு சொற்கள் வரிசை கொடுக்கப்படும், உங்கள் பணி சலிப்புகளின் எண்ணிக்கையை எண்ணுவது. ஒரு சலிப்பு என்பது \"நான்\" என்ற வார்த்தையுடன் தொடங்கும் ஒரு வாக்கியம். வாக்கியங்கள் '.', '?' அல்லது '! 'என்றவற்றுடன் வரையறுக்கப்படுகின்றன. எடுத்துக்காட்டாகஃ >>> is_bored ((\"ஹலோ வேர்ல்ட்\") 0 >>> is_bored ((\"வானம் நீலமானது. சூரியன் பிரகாசிக்கிறது. நான் இந்த வானிலை நேசிக்கிறேன்\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''3 எண்களை எடுக்கும் ஒரு செயல்பாட்டை உருவாக்கவும். எண்களில் ஒன்று மற்ற இரண்டின் கூட்டுத்தொகைக்கு சமமாக இருந்தால் உண்மை என்று திருப்பித் தருகிறது, மேலும் அனைத்து எண்களும் முழு எண்கள். வேறு எந்த சந்தர்ப்பத்திலும் தவறானது என்று திருப்பித் தருகிறது. எடுத்துக்காட்டுகள் any_int ((5, 2, 7) â -> True any_int ((3, 2, 2) â -> False any_int ((3, -2, 1) â -> True any_int ((3.6, -2.2, 2) â -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"ஒரு செய்தியை எடுத்து, அது அனைத்து கடிதங்களின் வழக்குகளை மாற்றுகிறது, ஆங்கில எழுத்துக்களில் அந்த எழுத்துக்கு 2 இடங்களுக்கு முன்னால் தோன்றும் கடிதத்துடன் செய்தியில் உள்ள அனைத்து ஒலிகளையும் மாற்றுகிறது. எடுத்துக்காட்டுகள்ஃ >>> encode('test') 'TGST' >>> encode (('This is a message') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"உங்களுக்கு முழு எண்களின் பட்டியல் கொடுக்கப்பட்டுள்ளது. நீங்கள் மிகப்பெரிய பிரதான மதிப்பைக் கண்டுபிடித்து அதன் இலக்கங்களின் கூட்டுத்தொகையைத் திருப்பித் தர வேண்டும். எடுத்துக்காட்டுகள்: For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,4,3] வெளியீடு 10 For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,1,2,4,2,5,1] வெளியீடு 25 For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] வெளியீடு 13 For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] வெளியீடு 11 For lst = [0,81,12,3,21,1] வெளியீடு 3 For lst = [0,1,8,2,1,7] வெளியீடு 7 For lst = [1,1,8,2,1,7] வெளியீடு 7 For lst = [1,8,2,1,7] வெளியீடு 7 For lst = [1,1,2,2,7,8,1,1,1,2,7,7,7,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,\"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"ஒரு அகராதி கொடுக்கப்பட்டால், அனைத்து விசைகளும் சிறிய எழுத்துக்களில் சரங்கள் அல்லது அனைத்து விசைகளும் பெரிய எழுத்துக்களில் சரங்கள் என்றால் True ஐத் திரும்பப் பெறுங்கள், இல்லையெனில் False ஐத் திரும்பப் பெறுங்கள். கொடுக்கப்பட்ட அகராதி காலியாக இருந்தால் செயல்பாடு False ஐத் திரும்பப் பெற வேண்டும். எடுத்துக்காட்டுகள்ஃ check_dict_case {\"a\":\"apple\", \"b\":\"banana\"}) True ஐத் திரும்பப் பெற வேண்டும். check_dict_case {\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) False ஐத் திரும்பப் பெற வேண்டும். check_dict_case {\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) False ஐத் திரும்பப் பெற வேண்டும். check_dict_case {\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) False ஐத் திரும்பப் பெற வேண்டும். check_dict_case {\"NC\":\"STATE\", \"Z\":\"IP\"12345}) True ஐத் திரும்பப் பெற வேண்டும்.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"ஒரு எதிர்மறை அல்லாத முழு எண்ணை எடுத்து, முதல் n முழு எண்களின் வரிசையை n ஐ விடக் குறைவாகக் கொடுக்கும் ஒரு செயல்பாட்டை செயல்படுத்துங்கள். எடுத்துக்காட்டாகஃ count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"இரண்டு முழு எண்களை எடுத்து அவற்றின் அலகு இலக்கங்களின் தயாரிப்பைத் தரும் செயல்பாட்டை முடிக்கவும். உள்ளீடு எப்போதும் செல்லுபடியாகும் என்று கருதுங்கள். எடுத்துக்காட்டுகள்ஃ பெருக்கல் ((148, 412) 16 ஐத் திரும்பப் பெற வேண்டும் பெருக்கல் ((19, 28) 72 ஐத் திரும்பப் பெற வேண்டும் பெருக்கல் ((2020, 1851) 0 ஐத் திரும்பப் பெற வேண்டும் பெருக்கல் ((14,-15) 20 ஐத் திரும்பப் பெற வேண்டும்.\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"ஒரு சரம் s கொடுக்கப்பட்டால், பெரிய எழுத்துக்களின் எண்ணிக்கையை சம குறியீடுகளில் எண்ணுங்கள். எடுத்துக்காட்டாகஃ count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 க்குத் திரும்புகிறது\"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''ஒரு எண்ணை குறிக்கும் ஒரு மதிப்பை (சரம்) எடுத்து அதற்கு மிக நெருக்கமான முழு எண்ணைத் திருப்பித் தரும் ஒரு செயல்பாட்டை உருவாக்கவும். எண் இரண்டு முழு எண்களிலிருந்து சம தூரத்தில் இருந்தால், அதை பூஜ்ஜியத்திலிருந்து சுற்றவும். எடுத்துக்காட்டுகள் >>> closest_integer ((\"10\") 10 >>> closest_integer ((\"15.3\") 15 குறிப்பு: பூஜ்ஜியத்திலிருந்து சுற்றினால், கொடுக்கப்பட்ட எண் இரண்டு முழு எண்களிலிருந்து சம தூரத்தில் இருந்தால், நீங்கள் திருப்பித் தர வேண்டியது பூஜ்ஜியத்திலிருந்து வெகு தொலைவில் உள்ள ஒன்றாகும். எடுத்துக்காட்டுக்கு closest_integer \" ((14.5\") 15 ஐத் திருப்பித் தர வேண்டும் மற்றும் closest_integer \" ((-14.5\") -15. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், நீங்கள் n நிலை கற்களைக் கொண்ட ஒரு குவியலை உருவாக்க வேண்டும். முதல் நிலை n கற்களைக் கொண்டுள்ளது. அடுத்த நிலைக்கு கற்களின் எண்ணிக்கைஃ - அடுத்த ஒற்றைப்படை எண் n ஒற்றைப்படை என்றால். - அடுத்த ஜோடி எண் n என்றால். ஒவ்வொரு மட்டத்திலும் உள்ள கற்களின் எண்ணிக்கையை ஒரு பட்டியலில் திருப்பி விடுங்கள், அங்கு குறியீட்டு i இல் உள்ள உறுப்பு நிலை (i + 1) இல் உள்ள கற்களின் எண்ணிக்கையை குறிக்கிறது. எடுத்துக்காட்டுகள்ஃ >>> make_a_pile (i + 1) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"நீங்கள் சொற்கள் ஒரு சரம் கொடுக்கப்படும் காற்புள்ளிகள் அல்லது இடைவெளிகள் மூலம் பிரிக்கப்பட்ட. உங்கள் பணி வார்த்தைகள் ஒரு வரிசை வரிசை பிரித்து வார்த்தைகள் திரும்ப உள்ளது. உதாரணமாகஃ words_string ((\"Hi, என் பெயர் ஜான்\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] words_string ((\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"இந்த செயல்பாடு இரண்டு நேர்மறை எண்கள் x மற்றும் y ஐ எடுத்து, [x, y] உள்ளடக்கிய வரம்பில் உள்ள மிகப்பெரிய சம முழு எண்ணைத் தருகிறது. அத்தகைய எண் இல்லையென்றால், செயல்பாடு -1 ஐத் திரும்பப் பெற வேண்டும். எடுத்துக்காட்டாகஃ choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"உங்களுக்கு இரண்டு நேர்மறை முழு எண்கள் n மற்றும் m கொடுக்கப்பட்டுள்ளன, மேலும் உங்கள் பணி n முதல் m வரை (n மற்றும் m உட்பட) முழு எண்களின் சராசரியைக் கணக்கிடுவதாகும். பதிலை அருகிலுள்ள முழு எண்ணாகச் சுற்றிவளைத்து அதை பைனரிக்கு மாற்றவும். n m ஐ விட பெரியதாக இருந்தால், திரும்பவும் -1. எடுத்துக்காட்டுஃ rounded_avg ((1, 5) => \"0b11\" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => \"0b1111\" rounded_avg ((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"நேர்மறை முழு எண்களின் பட்டியலைக் கொடுத்தால் x. எந்த ஒரு எண் கூட இல்லாத அனைத்து கூறுகளின் வரிசைப்படுத்தப்பட்ட பட்டியலைத் திரும்பப் பெறுகிறது. குறிப்புஃ திரும்பிய பட்டியல் அதிகரிக்கும் வரிசையில் வரிசைப்படுத்தப்பட வேண்டும். எடுத்துக்காட்டாகஃ >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"முழு எண்களின் வரிசை கொடுக்கப்பட்டால், 1 முதல் 9 வரை உள்ள முழு எண்களை வரிசைப்படுத்துங்கள், இதன் விளைவாக வரிசையை மாற்றி, பின்னர் ஒவ்வொரு இலக்கத்தையும் அதனுடன் தொடர்புடைய பெயரால் \"ஒன்று\", \"இரண்டு\", \"மூன்று\", \"நான்கு\", \"ஐந்து\", \"ஆறு\", \"ஏழு\", \"எட்டு\", \"ஒன்பது\" ஆகியவற்றிலிருந்து மாற்றவும். எடுத்துக்காட்டாகஃ arr = [2, 1, 1, 4, 5, 8, 2, 3] -> வரிசை arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> தலைகீழ் arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [\"எட்டு\", \"நான்கு\", \"மூன்று\", \"இரண்டு\", \"இரண்டு\", \"ஒன்று\", \"ஒன்று\"] வரிசை காலியாக இருந்தால், ஒரு வரிசை திரும்பும்ஃ arr = [] return [] வரிசைக்கு ஏதேனும் விசித்திரமான எண் இருந்தால் அதை புறக்கணிக்கவும்ஃ arr = [1, -1 , 55 -> arr -> [1, 55 -> reverse arr = [51] return - 'One' 1] \"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"n ஐ ஒரு அளவுருவாக எடுத்து, n அளவு பட்டியலைத் தருகிறது, அதாவது குறியீட்டு i இல் உள்ள உறுப்பின் மதிப்பு i இன் காரணி ஆகும், i சமமாக இருந்தால் அல்லது 1 முதல் i வரை எண்களின் தொகை. i 1 இலிருந்து தொடங்குகிறது. i இன் காரணி 1 முதல் i வரை எண்களின் பெருக்கமாகும் (1 * 2 * . . . * i). எடுத்துக்காட்டுஃ f ((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், வரம்பில் உள்ள சம மற்றும் ஒற்றைப்படை முழு palindromes எண்ணிக்கை கொண்ட ஒரு டப்பிள் திரும்ப. எடுத்துக்காட்டு 1: உள்ளீடுஃ 3 வெளியீடுஃ (1, 2) விளக்கம்ஃ முழு palindrome 1, 2, 3. அவர்களில் ஒருவர் சம, மற்றும் அவர்களில் இரண்டு ஒற்றைப்படை. எடுத்துக்காட்டு 2: உள்ளீடுஃ 12 வெளியீடுஃ (4, 6) விளக்கம்ஃ முழு palindrome 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. அவர்களில் நான்கு பேர் சம, மற்றும் அவர்களில் 6 பேர் ஒற்றைப்படை. குறிப்புஃ 1. 1 <= n <= 10 ^ 3 2. டப்பிள் முறையே சம மற்றும் ஒற்றைப்படை முழு palindromes எண்ணிக்கை திரும்பியுள்ளது. \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"ஒரு எண்ணை எதிர்மறையாக இருந்தால், அதன் முதல் கையொப்பமிடப்பட்ட இலக்கமானது எதிர்மறையாக இருக்கும்ஃ எ. கா. -123 கையொப்பமிடப்பட்ட இலக்கங்கள் -1, 2, மற்றும் 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"arr[1], arr[2], ..., arr[N] என்ற N முழு எண்களைக் கொண்ட ஒரு வரிசை 'arr' உள்ளது. வரிசையில் உள்ள எண்கள் தோராயமாக வரிசைப்படுத்தப்படும். கொடுக்கப்பட்ட வரிசையில் பின்வரும் செயல்பாட்டைச் செய்வதன் மூலம் வரிசையை குறைந்துபோகாத வரிசையில் வரிசைப்படுத்த முடியுமா என்பதை தீர்மானிப்பதே உங்கள் பணி: கொடுக்கப்பட்ட வரிசையில் எந்த எண்ணிக்கையிலான முறைகளைச் செய்ய உங்களுக்கு அனுமதி உண்டு. ஒரு வலதுபுற நகர்வு செயல்பாடு என்பது வரிசையின் அனைத்து கூறுகளையும் சரியான திசையில் ஒரு நிலைக்கு நகர்த்துவதாகும். வரிசையின் கடைசி உறுப்பு வரிசையில் ஆரம்ப நிலைக்கு நகர்த்தப்படும் அதாவது 0th குறியீடு. மேலே உள்ள செயல்பாட்டைச் செய்வதன் மூலம் வரிசைப்படுத்தப்பட்ட வரிசையைப் பெற முடிந்தால், உண்மை திரும்பவும், வேறு தவறானதாகவும் திரும்பவும். கொடுக்கப்பட்ட வரிசை காலியாக இருந்தால், தவறானதாகவும் திரும்பவும். குறிப்புஃ கொடுக்கப்பட்ட பட்டியலில் தனித்துவமான கூறுகள் இருப்பதற்கு உத்தரவாதம் அளிக்கப்படுகிறது. எடுத்துக்காட்டாகஃ move_one_(ball[3, 4, 5, 2] True விளக்கம்ஃ கொடுக்கப்பட்ட வரிசையில் வலதுபுற நகர்வுக்கு 2 வலதுபுற நகர்வு செயல்பாடுகளைச் செய்வதன் மூலம், வரிசையில் குறைந்துபோகாத வரிசையை அடைய முடியும். கொடுக்கப்பட்ட வரிசையில் எந்த எண்ணிக்கையையும் நகர்த்தவும்.\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"இந்த சிக்கலில், நீங்கள் இரண்டு எண்களின் பட்டியல்களை எடுக்கும் ஒரு செயல்பாட்டை செயல்படுத்துவீர்கள், மேலும் அவை இடையே ஒரு பரிமாற்றத்தைச் செய்ய முடியுமா என்பதை தீர்மானிக்கிறது. lst1 மற்றும் lst2 க்கு இடையில் பரிமாற்றப்பட்ட உறுப்புகளின் எண்ணிக்கையில் வரம்பு இல்லை. lst1 மற்றும் lst2 க்கு இடையில் உள்ள அனைத்து உறுப்புகளையும் சமமாக மாற்ற lst1 க்கு இடையில் உறுப்புகளை பரிமாறிக்கொள்ள முடிந்தால், \"YES\" ஐத் திருப்பி விடுங்கள். இல்லையெனில், \"NO\" ஐத் திருப்பி விடுங்கள். எடுத்துக்காட்டாகஃ exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" உள்ளீட்டு பட்டியல்கள் காலியாக இருக்காது என்று கருதப்படுகிறது.\"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"இடைவெளிகளால் பிரிக்கப்பட்ட சிறு எழுத்துக்களைக் குறிக்கும் ஒரு சரம் கொடுக்கப்பட்டால், அதிக எண்ணிக்கையிலான எழுத்துக்களைக் கொண்ட ஒரு அகராதியைத் திருப்பி விடுங்கள். பல எழுத்துக்கள் ஒரே மாதிரியாக இருந்தால், அவை அனைத்தையும் திருப்பி விடுங்கள். எடுத்துக்காட்டுஃ ஹிஸ்டோகிராம் ((('a b c') == {'a': 1, 'b': 1, 'c': 1} ஹிஸ்டோகிராம் ((('a b b a') == {'a': 2, 'b': 2} ஹிஸ்டோகிராம் ((('a b c a b') == {'a': 2, 'b': 2} ஹிஸ்டோகிராம் ((('b b a') == {'b 4}': ஹிஸ்டோகிராம் '(') == {} \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"பணி எங்களுக்கு இரண்டு சரங்கள் s மற்றும் c கொடுக்கப்பட்டுள்ளன, நீங்கள் s இல் உள்ள அனைத்து எழுத்துக்களையும் நீக்க வேண்டும், அவை c இல் உள்ள எந்த எழுத்துக்களுக்கும் சமமானவை, பின்னர் முடிவு சரம் பாலிண்ட்ரோம் என்பதை சரிபார்க்கவும். ஒரு சரம் முன்னோக்கி அதே பின்னோக்கி படித்தால் அது பாலிண்ட்ரோம் என்று அழைக்கப்படுகிறது. நீங்கள் முடிவு சரம் மற்றும் உண்மை / பொய்யை உள்ளடக்கிய ஒரு டப்பிளை திருப்பி அனுப்ப வேண்டும். சோதனைக்கு எடுத்துக்காட்டு s = \"abcde\", c = \"ae\", முடிவு ('bcd', False) s = \"abcdef\", c = \"b\" முடிவு ('acdef', False) s = \"abcdedcba\", c = \"ab\", முடிவு ('cdedc', True) \"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"ஒரு சரம் பட்டியலைக் கொடுத்தால், ஒவ்வொரு சரம் இலக்கங்களை மட்டுமே கொண்டிருக்கும், ஒரு பட்டியலைத் திருப்பித் தரவும். வெளியீட்டின் ஒவ்வொரு உறுப்பு i என்பது \"உள்ளீட்டின் சரம் i இல் உள்ள ஒற்றைப்படை உறுப்புகளின் எண்ணிக்கை\" ஆக இருக்க வேண்டும். அங்கு அனைத்து i களும் உள்ளீட்டின் i' வது சரத்தில் உள்ள ஒற்றைப்படை இலக்கங்களின் எண்ணிக்கையால் மாற்றப்பட வேண்டும். >>> odd_count['1234567']) [\"4n இன் str4ng 4 இன் ஒற்றைப்படை உறுப்புகளின் எண்ணிக்கை 4n.\"] >>> odd_count['3',\"111111\"]) [\"1n இன் str1ng 1 இன் 1n. \", \"8n இன் str8ng 8 இன் ஒற்றைப்படை உறுப்புகளின் எண்ணிக்கை 8n. \"]\"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"முழு எண்கள் n இன் வரிசை கொடுக்கப்பட்டால், n இன் எந்தவொரு காலியாக இல்லாத துணை வரிசையின் குறைந்தபட்ச தொகையைக் கண்டறியவும். எடுத்துக்காட்டு minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"உங்களுக்கு கிணறுகளின் செவ்வக கட்டம் கொடுக்கப்பட்டுள்ளது. ஒவ்வொரு வரிசையும் ஒரு கிணற்றை குறிக்கிறது, ஒவ்வொரு வரிசையிலும் 1 ஒரு நீர் அலகு குறிக்கிறது. ஒவ்வொரு கிணற்றிலும் அதிலிருந்து தண்ணீரைப் பிரித்தெடுக்கப் பயன்படுத்தக்கூடிய ஒரு பையைக் கொண்டுள்ளது, மேலும் அனைத்து பக்குகளும் ஒரே திறன் கொண்டவை. உங்கள் பணி கிணறுகளை காலி செய்ய பையைகளைப் பயன்படுத்துவதாகும். நீங்கள் பக்குகளை இறக்க வேண்டிய முறைகளின் எண்ணிக்கையை வெளியிடுங்கள். எடுத்துக்காட்டு 1: உள்ளீடுஃ கட்டம்: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 வெளியீடுஃ 62: உள்ளீடுஃ கட்டம்: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 வெளியீடுஃ 53: உள்ளீடுஃ [[:0,0,0], [0,0,0]] bucket_capacity: 5 வெளியீடுஃ 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 2 * 1 * 2 * 2 * 2 * 3 * 2 * 4 * 2 * 2 * 2 * 3 * 4 * 5 * 6 * 6 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"இந்த கட்டாவில், எதிர்மறை அல்லாத முழு எண்களின் வரிசையை அவற்றின் பைனரி பிரதிநிதித்துவத்தில் உள்ள எண்களின் எண்ணிக்கையின் படி ஏறுவரிசையில் வரிசைப்படுத்த வேண்டும். ஒத்த எண்ணிக்கையிலான எண்களுக்கு, தசம மதிப்பை அடிப்படையாகக் கொண்டு வரிசைப்படுத்தவும். இதுபோல் செயல்படுத்தப்பட வேண்டும்ஃ >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"ஒரு சரம் s மற்றும் ஒரு இயற்கை எண் n கொடுக்கப்பட்டால், இந்த சொற்கள் சரம் s இல் தோன்றும் பொருட்டு, சரம் s இலிருந்து சரியாக n துணைக்குறிகளைக் கொண்டிருக்கும் அனைத்து சொற்களின் பட்டியலைத் திரும்பப் பெறும் ஒரு செயல்பாட்டை செயல்படுத்த உங்களுக்கு பணி வழங்கப்பட்டுள்ளது. சரம் s காலியாக இருந்தால், செயல்பாடு ஒரு காலியான பட்டியலைத் திரும்பப் பெற வேண்டும். குறிப்புஃ உள்ளீட்டு சரம் கடிதங்கள் மற்றும் இடைவெளிகள் மட்டுமே கொண்டிருப்பதாக நீங்கள் கருதலாம். எடுத்துக்காட்டுகள்ஃ select_words (((\"மேரி ஒரு சிறிய ஆட்டுக்குட்டி இருந்தது\", 4) ==> [\"little\"] select_words (((\"மேரி ஒரு சிறிய ஆட்டுக்குட்டி இருந்தது\", 3) ==> [\"மேரி\", \"lamb\"] select_words\"எளிய வெள்ளை இடைவெளி\", 2) ==> [] select_words (((\"ஹலோ வேர்ல்ட்\", 4) ==> [\"world\"] select_words (((\"Uncle sam\", 3) ==> [\"Uncle\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"உங்களுக்கு ஒரு சொல் கொடுக்கப்பட்டுள்ளது. உங்கள் பணி வலது பக்கத்தில் இருந்து இரண்டு துணைக்குறிகளுக்கு இடையில் இருக்கும் மிக நெருக்கமான எழுத்துக்களைக் கண்டுபிடிப்பதாகும். தொடக்கத்திலும் முடிவிலும் உள்ள எழுத்துக்கள் கணக்கிடப்படுவதில்லை. மேலே உள்ள நிபந்தனையை பூர்த்தி செய்யாத எந்த எழுத்துக்களையும் நீங்கள் காணவில்லை என்றால் வெற்று சரத்தை திருப்பி விடுங்கள். கொடுக்கப்பட்ட சரம் ஆங்கில எழுத்துக்களை மட்டுமே கொண்டிருப்பதாக நீங்கள் கருதலாம். எடுத்துக்காட்டுஃ get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" (((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''உங்களுக்கு இரண்டு சரங்களின் பட்டியல் கொடுக்கப்பட்டுள்ளது, இரண்டு சரங்களும் திறந்த அடைப்புக்குறிகள் '(' அல்லது மூடிய அடைப்புக்குறிகள் ') ' மட்டுமே. உங்கள் வேலை இரண்டு சரங்களை சில வரிசையில் இணைக்க முடியுமா என்பதை சரிபார்க்க வேண்டும், இதன் விளைவாக சரம் நன்றாக இருக்கும். ஒரு சரம் S இல் உள்ள அனைத்து அடைப்புக்குறிகளும் சமநிலையில் இருந்தால் மட்டுமே ஒரு சரம் S நல்லதாக கருதப்படுகிறது. எடுத்துக்காட்டாகஃ சரம் '((()) 'நல்லது, அதே நேரத்தில் சரம் '()) 'அல்ல. ஒரு நல்ல சரத்தை உருவாக்க ஒரு வழி இருந்தால் 'ஆம்' என்று திருப்பி, இல்லையெனில் 'இல்லை' என்று திருப்பி விடுங்கள். எடுத்துக்காட்டுகள்ஃ match_parens[('() ', ') ']) == 'ஆம்' match_parens[(') ', ') ']) == 'இல்லை' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"முழு எண்கள் மற்றும் நேர்மறை முழு எண் k ஆகியவற்றின் வரிசை வரிசை கொடுக்கப்பட்டால், arr இல் அதிகபட்ச k எண்களுடன் k நீளத்தின் வரிசைப்படுத்தப்பட்ட பட்டியலைத் திருப்பி விடுங்கள். எடுத்துக்காட்டு 1: உள்ளீடுஃ arr = [-3, -4, 5], k = 3 வெளியீடுஃ [-4, -3, 5] எடுத்துக்காட்டு 2: உள்ளீடுஃ arr = [4, -4, 4], k = 2 வெளியீடுஃ [4, 4] எடுத்துக்காட்டு 3: உள்ளீடுஃ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 வெளியீடுஃ [2] குறிப்புஃ 1. வரிசையின் நீளம் [1, 1000] வரம்பில் இருக்கும். 2. வரிசையில் உள்ள கூறுகள் [-1000, 1000] வரம்பில் இருக்கும். 3. 0 <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"முழு எண்களின் காலியாக இல்லாத பட்டியலைக் கொடுத்தால், சம நிலைகளில் உள்ள அனைத்து ஒற்றைப்படை கூறுகளின் கூட்டுத்தொகையைத் திருப்பித் தரவும். எடுத்துக்காட்டுகள் தீர்வு (([5, 8, 7, 1]) ==> 12 தீர்வு (([3, 3, 3, 3, 3]) ==> 9 தீர்வு (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"முழு எண்கள் arr மற்றும் ஒரு முழு எண் k ஆகியவற்றின் காலியாக இல்லாத வரிசை கொடுக்கப்பட்டால், arr இன் முதல் k உறுப்புகளில் இருந்து அதிகபட்சம் இரண்டு இலக்கங்களைக் கொண்ட உறுப்புகளின் தொகையைத் திருப்பி விடுங்கள். எடுத்துக்காட்டுஃ உள்ளீடுஃ arr = [111,21,3,4000,5,6,7,8,9], k = 4 வெளியீடுஃ 24 # 21 + 3 கட்டுப்பாடுகள்ஃ 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், கோலாட்ஸ் வரிசையில் ஒற்றைப்படை எண்களைக் கொண்ட ஒரு வரிசைப்படுத்தப்பட்ட பட்டியலைத் திருப்பி விடுங்கள். கோலாட்ஸ் யூகம் என்பது கணிதத்தில் ஒரு யூகமாகும், இது பின்வருமாறு வரையறுக்கப்பட்டுள்ளதுஃ எந்த நேர்மறை முழு எண்களுடனும் தொடங்குங்கள். பின்னர் ஒவ்வொரு காலமும் முந்தைய காலத்திலிருந்து பின்வருமாறு பெறப்படுகிறதுஃ முந்தைய காலமும் சமமாக இருந்தால், அடுத்த காலமானது முந்தைய காலத்தின் பாதி ஆகும். முந்தைய காலமானது ஒற்றைப்படை என்றால், அடுத்த காலமானது முந்தைய காலத்தின் 3 மடங்கு கூடுதலாக 1. n இன் மதிப்பு எதுவாக இருந்தாலும், வரிசை எப்போதும் 1 ஐ அடைகிறது. குறிப்புஃ 1. கோலாட்ஸ் (((1) என்பது [1] ஆகும். 2. அதிகரிக்கும் வரிசையில் வரிசைப்படுத்தப்பட்ட பட்டியல் திரும்பும். எடுத்துக்காட்டாகஃ get_odd_collatz ((5) திரும்பும் [1, 5] 5 க்கான கோலாட்ஸ் வரிசை [5, 8, 16, 4, 2, 1], எனவே ஒற்றைப்படை எண்கள் 1, 5  மட்டுமே.\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"ஒரு குறிப்பிட்ட தேதி சரம் செல்லுபடியாகும் என்றால், அது True எனத் திருப்பித் தரும் ஒரு செயல்பாட்டை நீங்கள் எழுத வேண்டும். இல்லையெனில் False. பின்வரும் விதிகள் அனைத்தும் பூர்த்தி செய்யப்பட்டால் தேதி செல்லுபடியாகும்: 1. தேதி சரம் காலியாக இல்லை. 2. மாதங்களுக்கு 1,3,5,7,8,10,12 நாட்களுக்கு 1 அல்லது அதற்கு மேற்பட்ட நாட்களுக்கு குறைவாகவோ அல்லது 30 நாட்களுக்கு மேல் நாட்களின் எண்ணிக்கை குறைவாகவோ அல்லது குறைவாகவோ இல்லை. மற்றும், மாதங்களுக்கு 1,6,9,11 நாட்களுக்கு குறைவாகவோ அல்லது 29 நாட்களுக்கு மேல் இல்லை. 2. மாதங்கள் 1 அல்லது அதற்கு மேற்பட்ட நாட்களுக்கு குறைவாகவோ அல்லது குறைவாகவோ இருக்கக்கூடாது. 4. தேதி வடிவில் இருக்க வேண்டும்ஃ mm-dd-yyyy எடுத்துக்காட்டாகஃ valid_date (('03-11-2000') => valid_date (('15-01-2012') => valid_date (('04-01-2040') => valid_date (((((06-04-2020') => valid_date ((((06/04/2020') => false\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''சொற்களின் ஒரு சரம் கொடுக்கப்பட்டால், வெள்ளை இடைவெளியில் பிரிக்கப்பட்ட சொற்களின் பட்டியலைத் திருப்பித் தரவும், உரைக்கு வெள்ளை இடைவெளிகள் இல்லையென்றால் நீங்கள் காற்புள்ளிகளில் பிரிக்க வேண்டும் ',' காற்புள்ளிகள் இல்லையென்றால், நீங்கள் எழுத்துக்களில் ஒற்றைப்படை வரிசையில் சிறிய எழுத்துக்களின் எண்ணிக்கையைத் திருப்பித் தர வேண்டும், ord (('a') = 0, ord (('b') = 1, . . . ord (('z') = 25 எடுத்துக்காட்டுகள் split_words ((\"Hello world!\") â -> [\"Hello\", \"world!\"] split_words ((\"Hello,world!\") â -> [\"Hello\", \"world!\" split_words\" ((abcdef\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''எண்களின் பட்டியலைக் கொடுத்தால், அவை ஏறுவரிசையில் வரிசைப்படுத்தப்பட்டிருந்தாலும் இல்லாவிட்டாலும், திரும்பவும். பட்டியலில் ஒரே எண்ணின் 1 க்கும் மேற்பட்ட நகல்கள் இருந்தால், தவறானது திரும்பவும். எதிர்மறை எண்கள் இல்லை மற்றும் முழு எண்கள் மட்டுமே என்று கருதுங்கள். எடுத்துக்காட்டுகள் is_sorted ((([5]) â -> உண்மை is_sorted (([1, 2, 3, 4, 5]) â -> உண்மை is_sorted (([1, 2, 3, 4, 5, 6]) â -> தவறானது is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> உண்மை is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> உண்மை is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> தவறானது is_sorted (([1, 2, 2, 3, 3, 4]) â -> உண்மை is_sorted (([1, 2, 2, 2, 3, 4 -> தவறானது ])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"உங்களுக்கு இரண்டு இடைவெளிகள் கொடுக்கப்பட்டுள்ளன, அங்கு ஒவ்வொரு இடைவெளியும் ஒரு முழு எண்களின் ஜோடி. உதாரணமாக, இடைவெளி = (தொடக்கம், முடிவு) = (1, 2). கொடுக்கப்பட்ட இடைவெளிகள் மூடப்பட்டவை, அதாவது இடைவெளி (தொடக்கம், முடிவு) தொடக்க மற்றும் முடிவை உள்ளடக்கியது. ஒவ்வொரு கொடுக்கப்பட்ட இடைவெளியிலும், அதன் தொடக்கமானது அதன் முடிவுக்கு குறைவாகவோ அல்லது சமமாகவோ இருப்பதாகக் கருதப்படுகிறது. இந்த இரண்டு இடைவெளிகளின் வெட்டு நீளம் ஒரு பிரதான எண் என்பதை தீர்மானிப்பதே உங்கள் பணி. எடுத்துக்காட்டு, இடைவெளிகளின் வெட்டு (1, 3), (2, 4) என்பது (2, 3) ஆகும், அதன் நீளம் 1 ஆகும், இது ஒரு பிரதான எண் அல்ல. வெட்டு நீளம் ஒரு பிரதான எண் என்றால், \"ஆம்\" என்று திருப்பி விடுங்கள், இல்லையெனில் \"இல்லை\" என்று திருப்பி விடுங்கள். இரண்டு இடைவெளிகள் வெட்டப்படாவிட்டால், \"இல்லை\" என்று திருப்பி விடுங்கள். [input/output] மாதிரிகள்ஃ வெட்டுமுனை (((1, 2), (2, 3) ==> \"வெட்டுமுனை-1, ((1), 4) ==> \"வெட்டுமுனை (0, NO\", - 5), == (((1, 5), \"இல்லை\" (-), \"இல்லை\" (YES)\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"உங்களுக்கு முழு எண்களின் வரிசை கொடுக்கப்பட்டுள்ளது, மேலும் வரிசையில் உள்ள ஒவ்வொரு எண்ணின் அனைத்து அடையாளங்களின் தயாரிப்பால் பெருக்கப்படும் முழு எண்களின் அளவுகளின் தொகையை நீங்கள் திருப்பித் தர வேண்டும், இது 1, -1 அல்லது 0 ஆல் குறிப்பிடப்படுகிறது. குறிப்புஃ காலியாக arr க்கு None ஐத் திருப்பித் தரவும். எடுத்துக்காட்டுஃ >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None \"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"N வரிசைகள் மற்றும் N நெடுவரிசைகள் (N >= 2) மற்றும் ஒரு நேர்மறை முழு எண் k கொண்ட ஒரு கட்டம் கொடுக்கப்பட்டால், கட்டத்தின் ஒவ்வொரு கலமும் ஒரு மதிப்பைக் கொண்டுள்ளது. [1, N * N] வரம்பில் உள்ள ஒவ்வொரு முழு எண் கட்டத்தின் செல்களில் சரியாக ஒரு முறை தோன்றும். நீங்கள் கட்டத்தில் k நீளத்தின் குறைந்தபட்ச பாதையைக் கண்டுபிடிக்க வேண்டும். நீங்கள் எந்த கலத்திலிருந்தும் தொடங்கலாம், ஒவ்வொரு அடியிலும் நீங்கள் அண்டை செல்களில் எந்தவையும் நகர்த்தலாம், வேறுவிதமாகக் கூறினால், நீங்கள் தற்போதைய கலத்துடன் ஒரு விளிம்பைப் பகிர்ந்து கொள்ளும் செல்களுக்கு செல்லலாம். k நீளத்தின் பாதை சரியாக k செல்களை (அல்லது வேறுபட்டதாக இருக்காது) பார்வையிடுவதைக் குறிக்கிறது என்பதை நினைவில் கொள்க. நீங்கள் கட்டத்திலிருந்து வெளியேற முடியாது. A (நீளம் k) பாதை A மற்றும் B (நீளம் k) க்கு இடையில் செல்லும் செல்களில் உள்ள மதிப்புகளின் வரிசைப்படுத்தப்பட்ட பட்டியல்களை உருவாக்கிய பிறகு (அவற்றை lA_st மற்றும் lA_st என்று அழைப்போம்), lA_st என்பது அகராதி ரீதியாக lA_st ஐ விட குறைவாக இருக்கும், வேறு வார்த்தைகளில் கூறுவதானால், நீங்கள் எந்தவொரு அண்டை செல் செல்களிலும் செல்லலாம், அதாவது, நீங்கள் தற்போதைய செல் செல்வையுடன் ஒரு விளிப்பைப் பகிர்ந்து கொள்ளும் செல்கள். k நீளையுடன் சரியாக k செல்கள் (விக்க வேண்டும்). நீங்கள் கட்டத்தில் உள்ள எந்தவையும் பார்க்கலாம். k நீளம் k) நீளம் k (N) மற்றும் k (N) (N) நீளம் N = k (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N) (N (N) (N) (N (N) (N) (N) (N) (N) (N (N (N (N) (N (N) (N (N) (N) (N (N) (N\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"பிபோனச்சி வரிசை என்பது அனைவருக்கும் தெரியும், இது கடந்த இரண்டு நூற்றாண்டுகளில் கணிதவியலாளர்களால் ஆழமாக ஆய்வு செய்யப்பட்டது. இருப்பினும், மக்களுக்கு தெரியாதது டிரிபோனச்சி வரிசை ஆகும். டிரிபோனச்சி வரிசை மீண்டும் வரையறுக்கப்படுகிறதுஃ tri(1) = 3 tri(n) = 1 + n / 2, n சமமாக இருந்தால். tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), n ஒற்றைப்படை என்றால். எடுத்துக்காட்டாகஃ tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 உங்களுக்கு ஒரு எதிர்மற்ற முழு எண் n கொடுக்கப்பட்டுள்ளது, நீங்கள் டிரிபோனச்சி வரிசையின் முதல் n + 1 எண்களின் பட்டியலைத் திருப்பித் தர வேண்டும். எடுத்துக்காட்டுகள்ஃ tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டால், ஒற்றை இலக்கங்களின் தயாரிப்பைத் திருப்பித் தரவும். அனைத்து இலக்கங்களும் சமமாக இருந்தால் 0 ஐத் திருப்பித் தரவும். எடுத்துக்காட்டாகஃ இலக்கங்கள் ((1) == 1 இலக்கங்கள் ((4) == 0 இலக்கங்கள் ((235) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''சதுர அடைப்புக்குறிகளை மட்டுமே உள்ளடக்கிய ஒரு சரத்தை உள்ளீடாக எடுக்கும் ஒரு செயல்பாட்டை உருவாக்கவும். துணை வரிசையில் குறைந்தது ஒரு அடைப்புக்குறி உள்ளமைக்கப்பட்டிருக்கும் போது சரியான அடைப்புக்குறிகளின் தொடர் இருந்தால் மட்டுமே செயல்பாடு உண்மை எனத் திரும்ப வேண்டும். is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]][[') â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"உங்களுக்கு எண்களின் பட்டியல் கொடுக்கப்பட்டுள்ளது. கொடுக்கப்பட்ட பட்டியலில் உள்ள சதுர எண்களின் தொகையை நீங்கள் திருப்பித் தர வேண்டும், பட்டியலில் உள்ள ஒவ்வொரு உறுப்பையும் மேல் int ((Ceiling) முதல் சுற்றவும். எடுத்துக்காட்டுகள்: For lst = [1,2,3] வெளியீடு 14 For lst = [1,4,9] வெளியீடு 98 For lst = [1,3,5,7] வெளியீடு 84 For lst = [1.4,4.2,0] வெளியீடு 29 For lst = [-2.4,1,1] வெளியீடு 6 \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''கொடுக்கப்பட்ட சரத்தின் கடைசி எழுத்து ஒரு அகரவரிசை எழுத்து மற்றும் ஒரு வார்த்தையின் ஒரு பகுதியாக இல்லாவிட்டால், மற்றும் தவறானால் தவறானால், ஒரு செயல்பாட்டை உருவாக்குங்கள். குறிப்புஃ \"வார்த்தை\" என்பது இடைவெளியால் பிரிக்கப்பட்ட எழுத்துக்களின் குழு ஆகும். எடுத்துக்காட்டுகள்: check_if_last_char_is_a_letter (((\"ஆப்பிள் பை\") â -> False check_if_last_char_is_a_letter (((\"ஆப்பிள் பை e\") â -> True check_if_last_char_is_a_letter (((\"ஆப்பிள் பை e \") â -> False check_if_last_char_is_a_letter\" (((\") â -> False '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"ஒரு உறுப்பின் மிகப்பெரிய குறியீட்டைத் திருப்பித் தரும் ஒரு செயல்பாட்டை உருவாக்குங்கள். இது அதற்கு முந்தைய உறுப்புக்கு அதிகமாகவோ அல்லது சமமாகவோ இல்லை. அத்தகைய உறுப்பு எதுவும் இல்லை என்றால் -1. கொடுக்கப்பட்ட வரிசையில் இரட்டை மதிப்புகள் இருக்காது. எடுத்துக்காட்டுகள்ஃ can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''ஒரு பட்டியலில் உள்ள எதிர்மறை முழு எண்களில் 'a' மிகப்பெரியது, 'b' நேர்மறை முழு எண்களில் மிகச்சிறியது என ஒரு டப்பலை (a, b) திருப்பித் தரும் ஒரு செயல்பாட்டை உருவாக்கவும். எதிர்மறை அல்லது நேர்மறை முழு எண்கள் இல்லையென்றால், அவற்றை None என திருப்பித் தரவும். எடுத்துக்காட்டுகள்: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"ஒரு முழு எண்கள், மிதக்கும் எண்கள், அல்லது உண்மையான எண்களைக் குறிக்கும் சரங்களை எடுக்கும் ஒரு செயல்பாட்டை உருவாக்குங்கள், மேலும் கொடுக்கப்பட்ட மாறி வகைகளில் பெரிய மாறி திரும்பும். மதிப்புகள் சமமாக இருந்தால் None ஐத் திரும்புக. குறிப்புஃ ஒரு உண்மையான எண் ஒரு சரமாக குறிப்பிடப்பட்டால், மிதக்கும் புள்ளி இருக்கலாம் . அல்லது , compare_one ((1, 2.5) â -> 2.5 compare_one ((1, \"2,3\") â -> \"2,3\" compare_one ((5,1\", \"6\") â -> \"6\" compare_one ((1\", 1) â -> None \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"கொடுக்கப்பட்ட எண்ணை n என்பது சரியாக 4 நேர்மறை சம எண்களின் கூட்டுத்தொகையாக எழுத முடியுமா என்பதை மதிப்பீடு செய்யவும் எடுத்துக்காட்டு is_equal_to_sum_even ((4) == தவறானது is_equal_to_sum_even ((6) == தவறானது is_equal_to_sum_even ((8) == உண்மை \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"பிரேசிலிய காரணி பின்வருமாறு வரையறுக்கப்படுகிறது: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! அங்கு n > 0 உதாரணமாகஃ >>> special_factorial ((4) 288 செயல்பாடு ஒரு முழு எண்ணை உள்ளீடாகப் பெறும் மற்றும் இந்த முழு எண்ணின் சிறப்பு காரணி திரும்ப வேண்டும்.\"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_எடுத்துக்காட்டு-3ுக்கப்பட்டால், அதில் உள்ள அனைத்து இடைவெளிகளையும் வலது புறமாக மாற்றவும், ஒரு சரம் 2 க்கும் மேற்பட்ட தொடர்ச்சியான இடைவெளிகளைக் கொண்டிருந்தால், பின்னர் தொடர்ச்சியான அனைத்து இடைவெளிகளையும் - fix_spaces ((\"உதாரணம்\") == \"உதாரணம்\" fix_spaces ((\"உதாரணம்1\") == \"உதாரணம்_1\" fix_spaces ((\"உதாரணம்2\") == \"_Example_2\" fix_spaces ((\"உதாரணம் 3\") == \"_Example-3\" க்கு மாற்றவும்\"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"ஒரு கோப்பின் பெயரைக் குறிக்கும் ஒரு சரத்தை எடுத்து, கோப்பின் பெயர் செல்லுபடியாகும் என்றால் 'ஆம்' என்று திருப்பி, 'இல்லை' என்று திருப்பிக் கொடுக்கும் ஒரு செயல்பாட்டை உருவாக்கவும். கோப்பின் பெயரில் மூன்று இலக்கங்களுக்கு மேல் ('0'-'9') இருக்கக்கூடாது மற்றும் பின்வரும் நிபந்தனைகள் அனைத்தும் பூர்த்தி செய்யப்பட்டால் மட்டுமே கோப்பின் பெயர் செல்லுபடியாகும் என்று கருதப்படுகிறது. கோப்பின் பெயரில் சரியாக ஒரு புள்ளி '.' - புள்ளிக்கு முன் உள்ள துணை சரம் காலியாக இருக்கக்கூடாது, மேலும் இது லத்தீன் எழுத்துக்களில் இருந்து ஒரு எழுத்துடன் தொடங்க வேண்டும் ('a'-'z' மற்றும் 'A'Z'). - புள்ளியின் பின் துணை சரம் பின்வருவனவற்றில் ஒன்றாக இருக்க வேண்டும்: ['txt', 'exe', 'lld'] எடுத்துக்காட்டுகள்ஃ file_name_check\"(example.txt\") # => 'ஆம்' file_name_check\"(example.dll1\") => 'இல்லை' # (பெயர் லத்தீன் எழுத்துக்களில் இருந்து தொடங்க வேண்டும்)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" இந்த செயல்பாடு முழு எண்களின் பட்டியலை எடுக்கும். பட்டியலில் உள்ள அனைத்து உள்ளீடுகளுக்கும், செயல்பாடு முழு எண் உள்ளீட்டை அதன் குறியீட்டு 3 இன் பெருக்கமாக இருந்தால் சதுரமாகவும், அதன் குறியீட்டு 4 இன் பெருக்கமாக இருந்தால் முழு எண் உள்ளீட்டை கனமாகவும் மாற்றும். 3 அல்லது 4 இன் பெருக்கமாக இல்லாத குறியீட்டு பட்டியலில் உள்ள உள்ளீடுகளை செயல்பாடு மாற்றாது. பின் செயல்பாடு அனைத்து உள்ளீடுகளின் கூட்டுத்தொகையைத் திருப்பித் தரும். எடுத்துக்காட்டுகள்: lst = [1,2,3] க்கு வெளியீடு 6 lst = [] க்கு வெளியீடு 0 lst = [-1,-5,2,-1,-5] க்கு வெளியீடு -126 \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"உங்களுக்கு ஒரு வாக்கியத்தை குறிக்கும் ஒரு சரம் கொடுக்கப்பட்டுள்ளது, வாக்கியத்தில் சில சொற்கள் இடைவெளியால் பிரிக்கப்பட்டுள்ளன, மேலும் நீங்கள் அசல் வாக்கியத்திலிருந்து சொற்களைக் கொண்ட ஒரு சரத்தை திருப்பித் தர வேண்டும், அதன் நீளங்கள் முதன்மை எண்கள், புதிய சரத்தில் உள்ள சொற்களின் வரிசை அசல் ஒன்றைப் போலவே இருக்க வேண்டும். எடுத்துக்காட்டு 1: உள்ளீடுஃ வாக்கியம் = \"இது ஒரு சோதனை\" வெளியீடுஃ \"is\" எடுத்துக்காட்டு 2: உள்ளீடுஃ வாக்கியம் = \"நீந்த செல்லலாம்\" வெளியீடுஃ \"go for\" கட்டுப்பாடுகள்ஃ * 1 <= len(sentence) <= 100 * வாக்கியத்தில் எழுத்துக்கள் மட்டுமே உள்ளன \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"x * n என்ற எண்ணை எளிமைப்படுத்தும் ஒரு செயல்பாட்டை செயல்படுத்துவதே உங்கள் பணி. x * n ஒரு முழு எண்ணாக மதிப்பிடப்பட்டால் செயல்பாடு உண்மை மற்றும் தவறானது. x மற்றும் n இரண்டும், ஒரு பகுதியின் சரம் பிரதிநிதித்துவம், மற்றும் பின்வரும் வடிவமைப்பைக் கொண்டுள்ளன, <எண்ணிக்கை>/<பெயரிடல்> எங்கு எண்ணிக்கை மற்றும் பெயரிடல் இரண்டும் நேர்மறை முழு எண்கள். x, மற்றும் n ஆகியவை செல்லுபடியாகும் பகுதிகள் என்று நீங்கள் கருதலாம், மேலும் பெயரிடலாக பூஜ்ஜியத்தை கொண்டிருக்கவில்லை. எளிமைப்படுத்தவும்.\"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"கொடுக்கப்பட்ட முழு எண்களின் பட்டியலை அவற்றின் இலக்கங்களின் கூட்டுத்தொகைக்கு ஏற்ப ஏறுவரிசையில் வரிசைப்படுத்தும் ஒரு செயல்பாட்டை எழுதுங்கள். குறிப்புஃ அவற்றின் இலக்கங்களின் ஒத்த தொகை கொண்ட பல உருப்படிகள் இருந்தால், அவற்றை அசல் பட்டியலில் உள்ள குறியீட்டின் அடிப்படையில் வரிசைப்படுத்தவும். எடுத்துக்காட்டாகஃ >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"ஒரு வரிசையை உள்ளீடுகளாக எடுத்து, 10 ஐ விட பெரிய வரிசையில் உள்ள உறுப்புகளின் எண்ணிக்கையைத் திருப்பித் தரும் ஒரு செயல்பாட்டை எழுதுங்கள், மேலும் ஒரு எண்ணின் முதல் மற்றும் கடைசி இலக்கங்கள் இரண்டும் ஒற்றைப்படை (1, 3, 5, 7, 9). எடுத்துக்காட்டாகஃ specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"உங்களுக்கு ஒரு நேர்மறை முழு எண் n கொடுக்கப்பட்டுள்ளது. நீளம் n கொண்ட ஒரு முழு எண் வரிசையை நீங்கள் உருவாக்க வேண்டும். ஒவ்வொரு i (1 ‰¤ i ‰¤ n) க்கும், a[i] = i * i - i + 1 இன் மதிப்பு. i < j < k, மற்றும் a[i] + a[j] + a[k] ஒரு மூன்று மடங்குகளின் எண்ணிக்கையை (a[i], a[j], a[k]) திரும்பவும். எடுத்துக்காட்டுஃ உள்ளீடு: n = 5 வெளியீடுஃ 1 விளக்கம்ஃ a = [1, 3, 7, 13, 21] ஒரே செல்லுபடியாகும் மூன்று மடங்கு (1, 7, 13).\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''நமது சூரிய மண்டலத்தில் எட்டு கிரகங்கள் உள்ளன: சூரியனுக்கு மிக அருகில் உள்ள புதன், அடுத்தது வீனஸ், பின்னர் பூமி, செவ்வாய், வியாழன், சனி, யுரேனஸ், நெப்டியூன். ஒரு செயல்பாட்டை எழுதுங்கள், இது இரண்டு கிரக பெயர்களை சரங்களாக எடுத்துக்கொள்கிறது கிரகம் 1 மற்றும் கிரகம் 2. செயல்பாடு சூரியனுக்கு அருகில் உள்ள சுற்றுப்பாதையில் அமைந்துள்ள அனைத்து கிரகங்களையும் உள்ளடக்கிய ஒரு டப்பலைத் திரும்பப் பெற வேண்டும். கிரகம் 1 அல்லது கிரகம் 2 சரியான கிரக பெயர்கள் இல்லையென்றால் செயல்பாடு ஒரு வெற்று டப்பலைத் திரும்பப் பெற வேண்டும். எடுத்துக்காட்டுகள் bf \"(சூரியன்\", \"நெப்டியூன்\") ==> (\"சூரியன்\", \"யுரேனஸ்\") bf ((\"பூமி\", \"புதன்\") ==> (\"வெள்ளி\") bf ((\"புதன்\", \"யுரேனஸ்\") ==> (\"வெள்ளி\", \"பூமி\", \"செவ்வாய்\", \"சூரியன்\", \"சூரியன்\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"ஒரு பட்டியலை ஒரு அளவுருவாக ஏற்றுக்கொள்ளும் ஒரு செயல்பாட்டை எழுதுங்கள், அதிலிருந்து ஒற்றைப்படை நீளங்களைக் கொண்டிருக்கும் சரங்களை நீக்கிவிட்டு, வரிசைப்படுத்தப்பட்ட வரிசையுடன் விளைவாக பட்டியலைத் தருகிறது. பட்டியல் எப்போதும் சரங்களின் பட்டியலாகும், எண்களின் வரிசையாகவும் இருக்காது, மேலும் இது இரட்டிப்புகளைக் கொண்டிருக்கலாம். பட்டியலின் வரிசை ஒவ்வொரு வார்த்தையின் நீளத்தால் உயர்ந்து இருக்க வேண்டும், அந்த விதியின்படி வரிசைப்படுத்தப்பட்ட பட்டியலை நீங்கள் திருப்பித் தர வேண்டும். இரண்டு சொற்களுக்கு ஒரே நீளம் இருந்தால், பட்டியலை அகரவரிசைப்படி வரிசைப்படுத்தவும். செயல்பாடு வரிசைப்படுத்தப்பட்ட வரிசையில் சரங்களின் பட்டியலைத் திருப்பித் தர வேண்டும். எல்லா சொற்களுக்கும் ஒரே நீளம் இருக்கும் என்று நீங்கள் கருதலாம். எடுத்துக்காட்டாகஃ assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => [\"ab\", \"cd\"]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"எளிய நிரல், இது n ஒரு பிரதான எண் என்றால் x இன் மதிப்பைத் திருப்பித் தர வேண்டும், இல்லையெனில் y இன் மதிப்பைத் திருப்பித் தர வேண்டும். எடுத்துக்காட்டுகள்: x_or_y(7, 34, 12) == 34 x_or_y(15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''எண்களின் பட்டியலைக் கொடுத்தால், பட்டியலில் உள்ள எண்களின் சதுரங்களின் கூட்டுத்தொகையைத் திருப்பித் தரவும். எதிர்மறை அல்லது முழு எண்கள் அல்லாத எண்களை புறக்கணிக்கவும். double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 உள்ளீட்டு பட்டியல் காலியாக இருந்தால், 0 ஐத் திருப்பி விடுங்கள். '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"சில நீண்டகாலமாக எதிர்பார்க்கப்பட்ட நிகழ்வின் முடிவு இறுதியாக அறியப்படும் போது அந்த உணர்வை நாம் அனைவரும் நினைவில் வைத்திருக்கிறோம் என்று நினைக்கிறேன். அந்த நேரத்தில் நீங்கள் கொண்டிருக்கும் உணர்வுகள் மற்றும் எண்ணங்கள் நிச்சயமாக கவனிக்கவும் ஒப்பிட்டுப் பார்க்கவும் மதிப்புள்ளவை. ஒரு நபர் பல போட்டிகளின் முடிவுகளை சரியாக யூகித்தாரா என்பதை தீர்மானிப்பதே உங்கள் பணி. உங்களுக்கு இரண்டு வரிசைகள் வழங்கப்படுகின்றன மதிப்பெண்கள் மற்றும் ஒவ்வொரு குறியீடும் ஒரு பொருத்தத்தைக் காட்டும் சம நீளமான யூகங்கள். ஒவ்வொரு யூகமும் எவ்வளவு தூரம் என்பதைக் குறிக்கும் அதே நீளத்தின் வரிசையைத் திருப்பி விடுங்கள். அவர்கள் சரியாக யூகித்திருந்தால், மதிப்பு 0 ஆகும், இல்லையெனில், மதிப்பு யூகத்திற்கும் மதிப்பிற்கும் இடையிலான முழுமையான வேறுபாடு ஆகும். எடுத்துக்காட்டுஃ ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3] compare ((([0,5,0,0,4],[4,1,0,-2]) -> [4,0,1,0,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"உங்களுக்கு ஒரு வகுப்பின் பெயர் (ஒரு சரம்) மற்றும் நீட்டிப்புகளின் பட்டியல் கொடுக்கப்படும். நீட்டிப்புகளை வகுப்பிற்கு கூடுதல் வகுப்புகளை ஏற்ற பயன்படுத்த வேண்டும். நீட்டிப்பின் வலிமை பின்வருமாறு உள்ளது: CAP நீட்டிப்பு பெயரில் உள்ள பெரிய எழுத்துக்களின் எண்ணிக்கையாக இருக்கட்டும், மற்றும் SM நீட்டிப்பு பெயரில் உள்ள சிறிய எழுத்துக்களின் எண்ணிக்கையாக இருக்கட்டும், இந்த வலிமை CAP - SM என்ற உடையின் மூலம் கொடுக்கப்படுகிறது. நீங்கள் வலுவான நீட்டிப்பை கண்டுபிடித்து இந்த வடிவத்தில் ஒரு சரத்தை திருப்பிவிட வேண்டும்: ClassName.StrongestExtensionName. ஒரே வலிமையுடன் இரண்டு அல்லது அதற்கு மேற்பட்ட நீட்டிப்புகள் இருந்தால், பட்டியலில் முதலில் வரும் ஒன்றை நீங்கள் தேர்வு செய்ய வேண்டும். எடுத்துக்காட்டாக, உங்களுக்கு \"Slices\" என வகுப்பு மற்றும் நீட்டிப்புகளின் பட்டியல் கொடுக்கப்பட்டால்ஃ ['SEviviSliNGCes', 'Cheese', 'StuFfed'] நீங்கள் 'Slices.SEviSliNGCes' என திருப்பிவிட வேண்டும், ஏனெனில் 'SviSliNGCes' என்பது நீட்டிப்பு வலிமையானது (எடுத்துஃ 'AA_Beats'), எடுத்துக்காட்டாக 'AA_Class' என்பது வலிமையானது.\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"உங்களுக்கு 2 சொற்கள் கொடுக்கப்பட்டுள்ளன. இரண்டாவது சொல் அல்லது அதன் சுழற்சிகளில் ஏதேனும் ஒன்று முதல் வார்த்தையில் ஒரு துணை சரம் என்றால் நீங்கள் True ஐத் திருப்பித் தர வேண்டும் cycpattern_check (((\"abcd\",\"abd\") => False cycpattern_check (((\"hello\",\"ell\") => True cycpattern_check (((\"whassup\",\"psus\") => False cycpattern_check (((\"abab\",\"baa\") => True cycpattern_check (((\"efef\",\"eeff\") => False cycpattern_check (((hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"ஒரு முழு எண் கொடுக்கப்பட்டால், முறையே சம மற்றும் ஒற்றை இலக்கங்களின் எண்ணிக்கையைக் கொண்ட ஒரு டப்பலைத் திரும்புக. எடுத்துக்காட்டு: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"ஒரு நேர்மறை முழு எண் கொடுக்கப்பட்டால், அதன் ரோமானிய எண் சமமான சரம் எனப் பெறுங்கள், அதை சிறிய எழுத்துக்களில் திருப்பி விடுங்கள். கட்டுப்பாடுகள்: 1 <= num <= 1000 எடுத்துக்காட்டுகள்ஃ >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''ஒரு முக்கோணத்தின் மூன்று பக்கங்களின் நீளங்களைக் கொடுத்தால். மூன்று பக்கங்களும் ஒரு செவ்வக முக்கோணத்தை உருவாக்குகிறதா என்றால் உண்மை என்று திருப்பி விடுங்கள், இல்லையெனில் தவறானது. ஒரு செவ்வக முக்கோணம் ஒரு முக்கோணம் ஆகும், இதில் ஒரு கோணம் செவ்வக கோணம் அல்லது 90 டிகிரி ஆகும். எடுத்துக்காட்டுஃ right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"ஒரு சரம் பட்டியலை ஏற்றுக்கொள்ளும் ஒரு செயல்பாட்டை எழுதுக. பட்டியலில் வெவ்வேறு சொற்கள் உள்ளன. அதிகபட்ச தனித்துவமான எழுத்துக்களுடன் வார்த்தையைத் திருப்பி விடுங்கள். பல சரங்களுக்கு அதிகபட்ச தனித்துவமான எழுத்துக்கள் இருந்தால், அகராதி வரிசையில் முதலில் வரும் ஒன்றைத் திருப்பி விடுங்கள். find_max (([\"name\", \"of\", \"string\"]) == \"string\" find_max (([\"name\", \"enam\", \"game\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"நீங்கள் ஒரு பசியுள்ள முயல், நீங்கள் ஏற்கனவே ஒரு குறிப்பிட்ட எண்ணிக்கையிலான கேரட்ஸை சாப்பிட்டிருக்கிறீர்கள், ஆனால் இப்போது நீங்கள் அன்றைய உணவை முடிக்க அதிக கேரட்ஸை சாப்பிட வேண்டும். நீங்கள் ஒரு வரிசையைத் திரும்பப் பெற வேண்டும் [உங்கள் உணவுக்குப் பிறகு சாப்பிட்ட கேரட்ஸின் மொத்த எண்ணிக்கை, உங்கள் உணவுக்குப் பிறகு எஞ்சிய கேரட்ஸின் எண்ணிக்கை ] போதுமான மீதமுள்ள கேரட்ஸ் இல்லையென்றால், மீதமுள்ள கேரட்ஸை நீங்கள் சாப்பிடுவீர்கள், ஆனால் இன்னும் பசியுடன் இருப்பீர்கள். எடுத்துக்காட்டுஃ * சாப்பிடுங்கள் ((5, 6, 10) -> [11, 4] * சாப்பிடுங்கள் ((4, 8, 9) -> [12, 1] * சாப்பிடுங்கள் ((1, 10, 10) -> [11, 0] * சாப்பிடுங்கள் ((2, 11, 5) -> [7, 0] மாறிகள்ஃ @எண்ஃ நீங்கள் சாப்பிட்ட கேரட்ஸின் முழு எண்ணிக்கை. @தேவைஃ நீங்கள் சாப்பிட வேண்டிய கேரட்ஸின் முழு எண்ணிக்கை. @ மீதமுள்ளவைஃ மீதமுள்ள கேரட்ஸின் முழு எண்ணிக்கை\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"இரண்டு பட்டியல்கள் ஆபரேட்டர் மற்றும் ஆபரேண்ட். முதல் பட்டியலில் அடிப்படை அல்ஜீப்ரா செயல்பாடுகள் உள்ளன, இரண்டாவது பட்டியல் முழு எண்களின் பட்டியல் ஆகும். இந்த வெளிப்பாட்டை மதிப்பீடு செய்ய அல்ஜீப்ரிக் வெளிப்பாட்டை உருவாக்க இரண்டு பட்டியல்களைப் பயன்படுத்தவும். அடிப்படை அல்ஜீப்ரா செயல்பாடுகள்ஃ கூட்டல் (+) கழித்தல் (-)) பெருக்கல் (*) தரை பிரிவு (//) உயர்வு (** எடுத்துக்காட்டு) ஆபரேட்டர்['+', '*', '-'] வரிசை = [2, 3, 4, 5] முடிவு = 2 + 3 * 4 - 5 => முடிவு = 9 குறிப்பு: ஆபரேட்டர் பட்டியலின் நீளம் ஆபரேட்டர் பட்டியலின் நீளத்திற்கு சமம். ஆபரேட்டர் பட்டியல் எதிர்மறை அல்லாத முழு எண்களின் பட்டியலாகும். ஆபரேட்டர் பட்டியலில் குறைந்தது ஒரு ஆபரேட்டர் உள்ளது, மற்றும் ஆபரேட்டர் பட்டியலில் குறைந்தது இரண்டு ஆபரேட்டர்கள் உள்ளன.\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"உங்களுக்கு ஒரு சரம் s கொடுக்கப்பட்டுள்ளது. s[i] ஒரு எழுத்து என்றால், அதன் வழக்கை கீழ் முதல் மேல் அல்லது அதற்கு நேர்மாறாக மாற்றவும், இல்லையெனில் அதை அப்படியே வைத்திருங்கள். சரத்தில் எழுத்துக்கள் இல்லை என்றால், சரத்தை மாற்றவும். செயல்பாடு விளைவாக சரத்தை திரும்பப் பெற வேண்டும். எடுத்துக்காட்டுகள் solve ((\"1234\") = \"4321\" solve ((\"ab\") = \"AB\" solve ((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"ஒரு சரம் 'text' கொடுக்கப்பட்டால், அதன் md5 ஹேஷ் சமமான சரத்தை திருப்பி விடுங்கள். 'text' ஒரு வெற்று சரம் என்றால், None ஐ திருப்பி விடுங்கள். >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "tam_Taml",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"இரண்டு நேர்மறை முழு எண்கள் a மற்றும் b கொடுக்கப்பட்டால், a மற்றும் b க்கு இடையில் உள்ள சம இலக்கங்களை ஏறுவரிசையில் திருப்பி விடுங்கள். உதாரணமாக: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]