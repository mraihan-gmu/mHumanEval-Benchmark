[
    {
        "task_id": "HumanEval/0",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നൽകിയിരിക്കുന്ന സംഖ്യകളുടെ വെക്റ്ററിൽ, നൽകിയിരിക്കുന്ന പരിധിയേക്കാൾ പരസ്പരം അടുത്തുള്ള രണ്ട് സംഖ്യകൾ ഉണ്ടോ എന്ന് പരിശോധിക്കുക. >>> has_close_elements (അടുത്തുള്ള ഘടകങ്ങൾ) ഉണ്ട്.\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n",
        "canonical_solutions": "bool has_close_elements(std::vector<float> numbers, float threshold) {\n    std::sort(numbers.begin(), numbers.end());  // Sort the numbers in ascending order\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (std::abs(numbers[i] - numbers[i - 1]) < threshold) {\n            return true;\n        }\n    }\n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = has_close_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/1",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഈ ഫംഗ്ഷനിലെ ഇൻപുട്ട് ഒന്നിലധികം കൂട്ടം കൂട്ടിച്ചേർത്ത പരാൻതീസിസ് അടങ്ങിയ ഒരു സ്ട്രിംഗ് ആണ്. ആ ഗ്രൂപ്പുകളെ പ്രത്യേക സ്ട്രിംഗുകളായി വേർതിരിച്ച് അവയുടെ വെക്റ്റർ മടക്കിനൽകുക എന്നതാണ് നിങ്ങളുടെ ലക്ഷ്യം. പ്രത്യേക ഗ്രൂപ്പുകൾ സന്തുലിതമാണ് (ഓരോ തുറന്ന ബ്രാക്കറ്റും ശരിയായി അടച്ചിരിക്കുന്നു) പരസ്പരം കൂട്ടിച്ചേർക്കപ്പെടുന്നില്ല. ഇൻപുട്ട് സ്ട്രിംഗിലെ ഏതെങ്കിലും സ്പെയ്സുകൾ അവഗണിക്കുക. >>> separate_paren_groups(\"( ) (() (( ) ) ))) (std::vector<std::string>({(std::string) \")\", ((((())\", (std::string) \"(((())))\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n",
        "canonical_solutions": "std::vector<std::string> separate_paren_groups(std::string paren_string) {\n    std::vector<std::string> groups;\n    std::string current_group;\n    int balance = 0;\n\n    for (char ch : paren_string) {\n        if (ch == ' ') continue;  // Ignore spaces\n\n        current_group += ch;\n        if (ch == '(') {\n            balance++;\n        } else if (ch == ')') {\n            balance--;\n            if (balance == 0) {  // Found a balanced group\n                groups.push_back(current_group);\n                current_group.clear();\n            }\n        }\n    }\n\n    return groups;\n}",
        "test": "}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"(()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/2",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു പോസിറ്റീവ് ഫ്ലോട്ടിംഗ് പോയിന്റ് നമ്പർ നൽകിയിട്ടുണ്ടെങ്കിൽ, അത് ഒരു പൂർണ്ണസംഖ്യാ ഭാഗമായും (നൽകിയ സംഖ്യയേക്കാൾ വലുത്) ദശാംശ ഭാഗമായും (ഇടത് ഭാഗം എല്ലായ്പ്പോഴും 1 നേക്കാൾ ചെറുതാണ്) വിഭജിക്കാം. >>> truncate_number((3.5f)) (0.5f)\nfloat truncate_number(float number) {\n",
        "canonical_solutions": "float truncate_number(float number) {\n    return number - std::floor(number);\n}",
        "test": "}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5f)) == (0.5f));\n    assert(candidate((1.25f)) == (0.25f));\n    assert(candidate((123.0f)) == (0.0f));\n}\n"
    },
    {
        "task_id": "HumanEval/3",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് ഒരു ബാങ്ക് അക്കൌണ്ടിൽ നിക്ഷേപം നടത്തുന്നതും പിൻവലിക്കുന്നതും ഒരു സ്രോതസ്സിൽ ആരംഭിക്കുന്ന ഒരു സ്രോതസ്സാണ്. നിങ്ങളുടെ ജോലി അക്കൌണ്ട് സ്രോതസ്സ് പൂജ്യത്തിൽ താഴെയാണെങ്കിൽ, ആ സമയത്ത് ഫംഗ്ഷൻ ശരിയായി മടങ്ങിവരിക എന്നതാണ്. അല്ലെങ്കിൽ അത് തെറ്റായി മടങ്ങിവരികയാണ്. >>> below_zero((std::vector<long>({long) 1, (long) 2, (long) 3}))) (false) >>> below_zero(std::vector<long>({long) 1, (long) 2, (long) -4, (long) 5}))) (true)\nbool below_zero(std::vector<long> operations) {\n",
        "canonical_solutions": "bool below_zero(std::vector<long> operations) {\n    long balance = 0;\n    for (long op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/4",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു നിശ്ചിത ഇൻപുട്ട് നമ്പറുകളുടെ വെക്റ്ററിനായി, ഈ ഡാറ്റാ സെറ്റിന്റെ ശരാശരിയെ ചുറ്റിപ്പറ്റിയുള്ള ശരാശരി സമ്പൂർണ്ണ വ്യതിയാനം കണക്കാക്കുക. ഓരോ ഘടകവും ഒരു സെന്റർ പോയിന്റും തമ്മിലുള്ള ശരാശരി സമ്പൂർണ്ണ വ്യത്യാസമാണ് ശരാശരി സമ്പൂർണ്ണ വ്യതിയാനം (ഈ കേസിൽ ശരാശരി): MAD = ∙ ശരാശരി x - x_mean ∙ >>> mean_absolute_deviation (((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) {\n",
        "canonical_solutions": "float mean_absolute_deviation(std::vector<float> numbers) {\n    float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f) / numbers.size();\n    float mad = std::accumulate(numbers.begin(), numbers.end(), 0.0f, \n                                [mean](float sum, float x) { return sum + std::abs(x - mean); }) \n                / numbers.size();\n    return mad;\n}",
        "test": "}\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f}))) == (0.5f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n}\n"
    },
    {
        "task_id": "HumanEval/5",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഇൻപുട്ട് വെക്റ്ററിന്റെ ഓരോ രണ്ട് തുടർച്ചയായ `numbers' യും തമ്മിൽ ഒരു സംഖ്യ 'ഡിലിമിറ്റർ' ചേർക്കുക >>> intersperse((std::vector<long>()), (4)) (std::vector<long>()) >>> intersperse((std::vector<long>({(long) 1, (long) 2, (long) 3})), (4)) (std::vector<long>({(long) 1, (long) 4, (long) 2, (long) 4, (long) 3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n",
        "canonical_solutions": "std::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n    if (numbers.empty()) return numbers;\n\n    std::vector<long> result;\n    for (size_t i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = intersperse;\n    assert(candidate((std::vector<long>()), (7)) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6, (long)8, (long)3, (long)8, (long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2, (long)2})));\n}\n"
    },
    {
        "task_id": "HumanEval/6",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഈ ഫംഗ്ഷന്റെ ഇൻപുട്ട് ഒരു സ്ട്രിംഗ് ആണ്, ഇത് സ്പെയ്സുകളാൽ വേർതിരിച്ചിരിക്കുന്ന നെസ്റ്റഡ് പരാൻതീസിനു വേണ്ടി ഒന്നിലധികം ഗ്രൂപ്പുകളെ പ്രതിനിധീകരിക്കുന്നു. ഓരോ ഗ്രൂപ്പിനും പരാൻതീസിൻറെ ഏറ്റവും ആഴത്തിലുള്ള നെസ്റ്റിംഗ് ലെവൽ output ട്ട്പുട്ട് ചെയ്യുക. ഉദാഹരണത്തിന് (() (()) ന് പരമാവധി രണ്ട് ലെവൽ നെസ്റ്റിംഗ് ഉണ്ട്, അതേസമയം ((())) ന് മൂന്ന് ഉണ്ട്. >>> parse_nested_parens (((\"((()) ((())) () ((()))))))) (std::vector<long>({(long) 2, (long) 3, (long) 1, (long) 3}))\nstd::vector<long> parse_nested_parens(std::string paren_string) {\n",
        "canonical_solutions": "std::vector<long> parse_nested_parens(std::string paren_string) {\n    std::vector<long> depths;\n    long current_depth = 0, max_depth = 0;\n\n    for (char ch : paren_string) {\n        if (ch == ' ') {\n            if (max_depth > 0) {\n                depths.push_back(max_depth);\n                max_depth = 0;\n            }\n            current_depth = 0;\n        } else if (ch == '(') {\n            current_depth++;\n            max_depth = std::max(max_depth, current_depth);\n        } else if (ch == ')') {\n            current_depth--;\n        }\n    }\n\n    if (max_depth > 0) {\n        depths.push_back(max_depth);\n    }\n\n    return depths;\n}",
        "test": "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
    },
    {
        "task_id": "HumanEval/7",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// സ്ട്രിംഗുകളുടെ ഒരു ഇൻപുട്ട് വെക്റ്റർ ഫിൽട്ടർ ചെയ്യുക, അതിൽ സബ് സ്ട്രിംഗ് അടങ്ങിയിരിക്കുന്നവ മാത്രം >>> filter_by_substring(((std::vector<std::string>()), (\"a\")) (std::vector<std::string>()) >>> filter_by_substring((((std::vector<std::string>({(std::string) \"abc\", (std::string) \"bacd\", (std::string) \"cde\", (std::string) \"array\"})), (\"a\") (std::vector<std::string>(({(std::string) \"abc\", (std::string) \"bacd\", (std::string) \"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n",
        "canonical_solutions": "std::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n    std::vector<std::string> result;\n    for (const auto& str : strings) {\n        if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\", (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"})), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"prune\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/8",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു നിശ്ചിത വെക്റ്റർ പൂർണ്ണസംഖ്യകൾക്കായി, ഒരു വെക്റ്ററിലെ എല്ലാ പൂർണ്ണസംഖ്യകളുടെയും തുകയും ഗുണിതവും അടങ്ങിയ ഒരു ടപ്പിൾ നൽകുക. ശൂന്യമായ തുക 0 ന് തുല്യവും ശൂന്യമായ ഉൽപ്പന്നം 1 ന് തുല്യവുമാണ്. >>> sum_product((std::vector<long>())) (std::make_tuple(0, 1)) >>> sum_product(std::vector<long>({long) 1, (long) 2, (long) 3, (long) 4}))) (std::make_tuple(10, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\n",
        "canonical_solutions": "std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum = std::accumulate(numbers.begin(), numbers.end(), 0L);\n    long product = std::accumulate(numbers.begin(), numbers.end(), 1L, std::multiplies<long>());\n    return std::make_tuple(sum, product);\n}",
        "test": "}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10}))) == (std::make_tuple(10, 10)));\n}\n"
    },
    {
        "task_id": "HumanEval/9",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു നിശ്ചിത വെക്റ്റർ മുതൽ, പരമ്പരയിലെ ഒരു നിശ്ചിത നിമിഷം വരെ കണ്ടെത്തിയ പരമാവധി മൂലകത്തിന്റെ ഒരു വെക്റ്റർ സൃഷ്ടിക്കുക. >>> rolling_max((std::vector<long>({(long) 1, (long) 2, (long) 3, (long) 2, (long) 3, (long) 4, (long) 2}))) (std::vector<long>({(long) 1, (long) 2, (long) 3, (long) 3, (long) 3, (long) 3, (long) 4, (long) 4}))\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n",
        "canonical_solutions": "std::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long> result;\n    long max_so_far = LONG_MIN;\n\n    for (long num : numbers) {\n        max_so_far = std::max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n}\n"
    },
    {
        "task_id": "HumanEval/10",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സപ്ലൈഡ് സ്ട്രിംഗിൽ ആരംഭിക്കുന്ന ഏറ്റവും ചെറിയ പാലിൻഡ്രോം കണ്ടെത്തുക. അൽഗോരിതം ആശയം ലളിതമാണ്: - ഒരു പാലിൻഡ്രോം ആയ സപ്ലൈഡ് സ്ട്രിംഗിന്റെ ഏറ്റവും ദൈർഘ്യമേറിയ പോസ്റ്റ്ഫിക്സ് കണ്ടെത്തുക. - പാലിൻഡ്രോമിക് സഫിക്സിന് മുമ്പുള്ള ഒരു സ്ട്രിംഗ് പ്രിഫിക്സിന്റെ സ്ട്രിംഗ് റിവേഴ്സ് സ്ട്രിംഗിന്റെ അവസാനത്തിൽ ചേർക്കുക. >>> make_palindrome (((\"\")) (\"\") >>> make_palindrome (((\"cat\")) (\"catac\") >>> make_palindrome (((\"cata\")) (\"catac\")\nstd::string make_palindrome(std::string string) {\n",
        "canonical_solutions": "std::string make_palindrome(std::string string) {\n    auto is_palindrome = [](const std::string &s) {\n        return std::equal(s.begin(), s.begin() + s.size() / 2, s.rbegin());\n    };\n\n    for (size_t i = 0; i < string.size(); ++i) {\n        if (is_palindrome(string.substr(i))) {\n            std::string prefix = string.substr(0, i);\n            std::reverse(prefix.begin(), prefix.end());\n            return string + prefix;\n        }\n    }\n\n    return string;\n}",
        "test": "}\nint main() {\n    auto candidate = make_palindrome;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"x\")) == (\"x\"));\n    assert(candidate((\"xyz\")) == (\"xyzyx\"));\n    assert(candidate((\"xyx\")) == (\"xyx\"));\n    assert(candidate((\"jerry\")) == (\"jerryrrej\"));\n}\n"
    },
    {
        "task_id": "HumanEval/11",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഇൻപുട്ട് എന്നത് 1s, 0s എന്നിവ മാത്രം അടങ്ങിയ രണ്ട് സ്ട്രിങ്ങുകളാണ്. ഈ ഇൻപുട്ടുകളിൽ ബൈനറി XOR നടത്തുകയും ഫലത്തെ ഒരു സ്ട്രിംഗായി മടക്കിനൽകുകയും ചെയ്യുക. >>> string_xor((\"010\"), (\"110\")) (\"100\")\nstd::string string_xor(std::string a, std::string b) {\n",
        "canonical_solutions": "std::string string_xor(std::string a, std::string b) {\n    std::string result;\n    for (size_t i = 0; i < a.size(); ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
    },
    {
        "task_id": "HumanEval/12",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// സ്ട്രിങ്ങുകളുടെ വെക്റ്ററിൽ നിന്ന്, ഏറ്റവും ദൈർഘ്യമേറിയത് തിരികെ നൽകുക. ഒരേ നീളമുള്ള ഒന്നിലധികം സ്ട്രിങ്ങുകൾ ഉണ്ടെങ്കിൽ ആദ്യത്തേത് തിരികെ നൽകുക. ഇൻപുട്ട് വെക്റ്റർ ശൂന്യമാണെങ്കിൽ ഒന്നും നൽകരുത്. >>> longest((std::vector<std::string>())) std::nullopt >>> longest((std::vector<std::string>{(std::string) \"a\", (std::string) \"b\", (std::string) \"c\"}))) \"a\" >>> longest(((std::vector<std::string>({(std::string) \"a\", (std::string) \"bb\", (stdstring) \"ccc\"}))) \"ccc\"\nstd::optional<std::string> longest(std::vector<std::string> strings) {\n",
        "canonical_solutions": "std::optional<std::string> longest(std::vector<std::string> strings) {\n    if (strings.empty()) return std::nullopt;\n\n    return *std::max_element(strings.begin(), strings.end(), \n                             [](const std::string& a, const std::string& b) {\n                                 return a.size() < b.size();\n                             });\n}",
        "test": "}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
    },
    {
        "task_id": "HumanEval/13",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// രണ്ട് പൂർണ്ണസംഖ്യകളായ a, b എന്നിവയുടെ ഏറ്റവും വലിയ പൊതുവിഭജനം തിരിച്ചുനൽകുന്നു >>> ഏറ്റവും വലിയ_സാധാരണ_വിഭജകൻ (), () (1) >>> ഏറ്റവും വലിയ_സാധാരണ_വിഭജകൻ (), () (5)\nlong greatest_common_divisor(long a, long b) {\n",
        "canonical_solutions": "long greatest_common_divisor(long a, long b) {\n    return std::gcd(a, b);\n}",
        "test": "}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
    },
    {
        "task_id": "HumanEval/14",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// എല്ലാ പ്രിഫിക്സുകളുടെയും റിട്ടേൺ വെക്റ്റർ ഇൻപുട്ട് സ്ട്രിംഗിൽ ഏറ്റവും ചെറുത് മുതൽ ഏറ്റവും നീളം കൂടിയത് വരെ >>> all_prefixes (((\"abc\")) (std::vector<std::string>({(std::string) \"a\", (std::string) \"ab\", (std::string) \"abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n",
        "canonical_solutions": "std::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string> prefixes;\n    for (size_t i = 1; i <= string.size(); ++i) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return prefixes;\n}",
        "test": "}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/15",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 0 മുതൽ n വരെ സ്പേസ് ഡെലിമിറ്റഡ് നമ്പറുകൾ അടങ്ങിയ ഒരു സ്ട്രിംഗ് നൽകുക. >>> string_sequence((0)) (\"0\") >>> string_sequence((5)) (\"0 1 2 3 4 5\")\nstd::string string_sequence(long n) {\n",
        "canonical_solutions": "std::string string_sequence(long n) {\n    std::ostringstream oss;\n    for (long i = 0; i <= n; ++i) {\n        if (i > 0) oss << \" \";\n        oss << i;\n    }\n    return oss.str();\n}",
        "test": "}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
    },
    {
        "task_id": "HumanEval/16",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സ്ട്രിംഗ് തന്നാൽ, അതിൽ എത്ര വ്യത്യസ്ത പ്രതീകങ്ങൾ ഉണ്ടെന്ന് കണ്ടെത്തുക (കേസ് പരിഗണിക്കാതെ തന്നെ) >>> count_distinct_characters (((\"xyzXYZ\")) (3) >>> count_distinct_characters (((\"ജെറി\")) (4)\nlong count_distinct_characters(std::string string) {\n",
        "canonical_solutions": "long count_distinct_characters(std::string string) {\n    std::unordered_set<char> distinct_chars;\n    for (char ch : string) {\n        distinct_chars.insert(std::tolower(ch));\n    }\n    return distinct_chars.size();\n}",
        "test": "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
    },
    {
        "task_id": "HumanEval/17",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഈ ഫംഗ്ഷനിലേക്ക് ഇൻപുട്ട് ചെയ്യുന്നത് ASCII ഫോർമാറ്റിലുള്ള സംഗീത കുറിപ്പുകൾ പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് ആണ്. നിങ്ങളുടെ ലക്ഷ്യം നിരവധി ബീറ്റുകളുമായി പൊരുത്തപ്പെടുന്ന ഇന്ററുകളുടെ സ്ട്രിംഗ് വെക്റ്റർ പാഴ്സ് ചെയ്യുക എന്നതാണ്. ഇവിടെ ഒരു ലെജന്റ് ഉണ്ട്: 'o' കുറിപ്പ്, അവസാന നാല് ബീറ്റുകൾ 'o.\nstd::vector<long> parse_music(std::string music_string) {\n",
        "canonical_solutions": "std::vector<long> parse_music(std::string music_string) {\n    std::vector<long> beats;\n    std::istringstream iss(music_string);\n    std::string note;\n    \n    while (iss >> note) {\n        if (note == \"o\") beats.push_back(4);\n        else if (note == \"o|\") beats.push_back(2);\n        else if (note == \".|\") beats.push_back(1);\n    }\n\n    return beats;\n}",
        "test": "}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));\n}\n"
    },
    {
        "task_id": "HumanEval/18",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സബ് സ്ട്രിംഗ് എത്ര തവണ ഒറിജിനൽ സ്ട്രിംഗിൽ കണ്ടെത്താം എന്ന് കണ്ടെത്തുക. ഒന്നിച്ചു ചേരുന്ന കേസുകൾ എണ്ണുക. >>> how_many_times((\"\"), (\"a\")) (0) >>> how_many_times(\"aaa\"), (\"a\")) (3) >>> how_many_times(\"aaaa\"), (\"aa\") (3)\nlong how_many_times(std::string string, std::string substring) {\n",
        "canonical_solutions": "long how_many_times(std::string string, std::string substring) {\n    if (substring.empty()) return 0;\n    \n    long count = 0;\n    size_t pos = 0;\n    \n    while ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n        pos++;  // Move one position forward to count overlapping occurrences\n    }\n    \n    return count;\n}",
        "test": "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/19",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 'പൂജ്യം' മുതൽ 'ഒൻപത്' വരെയുള്ള സംഖ്യകളുടെ സ്പേസ്-ഡിലിമിറ്റഡ് സ്ട്രിംഗ് ആണ് ഇൻപുട്ട്. സാധുവായ ചോയ്സുകൾ 'പൂജ്യം', 'ഒന്ന്', 'രണ്ട്', 'മൂന്ന്', 'നാല്', 'അഞ്ച്', 'ആറ്', 'ഏഴ്', 'എട്ട്' , 'ഒൻപത്' എന്നിവയാണ്. ഏറ്റവും ചെറിയതിൽ നിന്ന് ഏറ്റവും വലിയതിലേക്ക് അടുക്കിയ സംഖ്യകളുള്ള സ്ട്രിംഗ് നൽകുക >>> sort_numbers((\"three one five\")) (\"ഒരു മൂന്ന് അഞ്ച്\")\nstd::string sort_numbers(std::string numbers) {\n",
        "canonical_solutions": "std::string sort_numbers(std::string numbers) {\n    std::unordered_map<std::string, int> num_map = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    std::unordered_map<int, std::string> rev_map = {\n        {0, \"zero\"}, {1, \"one\"}, {2, \"two\"}, {3, \"three\"}, {4, \"four\"},\n        {5, \"five\"}, {6, \"six\"}, {7, \"seven\"}, {8, \"eight\"}, {9, \"nine\"}\n    };\n\n    std::istringstream iss(numbers);\n    std::vector<int> num_list;\n    std::string word;\n\n    while (iss >> word) {\n        num_list.push_back(num_map[word]);\n    }\n\n    std::sort(num_list.begin(), num_list.end());\n\n    std::ostringstream oss;\n    for (size_t i = 0; i < num_list.size(); ++i) {\n        if (i > 0) oss << \" \";\n        oss << rev_map[num_list[i]];\n    }\n\n    return oss.str();\n}",
        "test": "}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
    },
    {
        "task_id": "HumanEval/20",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നൽകിയിരിക്കുന്ന സംഖ്യകളുടെ വെക്റ്ററിൽ നിന്ന് (കുറഞ്ഞത് രണ്ട് നീളമുള്ളവ) പരസ്പരം ഏറ്റവും അടുത്തുള്ള രണ്ടെണ്ണം തിരഞ്ഞെടുത്ത് അവയെ ക്രമത്തിൽ (ചെറിയ സംഖ്യ, വലിയ സംഖ്യ) നൽകുക. >>> find_closest_elements (സെർവർഃ വെക്റ്റർ <float> (സെർവർ) 1.0f, (സെർവർ) 2.0f, (സെർവർ) 3.0f, (സെർവർ) 4.0f, (സെർവർ) 5.0f, (സെർവർ) 2.2f)) (സെർവർഃ മേക്ക്_ട്യൂപ്പൽ 2.0f, 2.2f)) >>> find_closest_elements (സെർവർഃ വെക്റ്റർ <float> (സെർവർ) 1.0f, (സെർവർ) 2.0f, (സെർവർ) 3.0f, (സെർവർ) 4.0f, (സെർവർ) 5.0f, (സെർവർ) 2.0f)) (സെർവർഃ മേക്ക്_ട്യൂപ്പൽ 2.0f, 2.0f))\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n",
        "canonical_solutions": "std::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float num1 = 0, num2 = 0;\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            num1 = numbers[i - 1];\n            num2 = numbers[i];\n        }\n    }\n\n    return std::make_tuple(num1, num2);\n}",
        "test": "}\nint main() {\n    auto candidate = find_closest_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(3.9f, 4.0f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))) == (std::make_tuple(5.0f, 5.9f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(2.0f, 2.2f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))) == (std::make_tuple(2.0f, 2.0f)));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))) == (std::make_tuple(2.2f, 3.1f)));\n}\n"
    },
    {
        "task_id": "HumanEval/21",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സംഖ്യകളുടെ വെക്റ്റർ (കുറഞ്ഞത് രണ്ട് മൂലകങ്ങളുടെ), ആ വെക്റ്ററിലേക്ക് ഒരു ലീനിയർ ട്രാൻസ്ഫോർമേഷൻ പ്രയോഗിക്കുക, അങ്ങനെ ഏറ്റവും ചെറിയ സംഖ്യ 0 ആയിത്തീരും, ഏറ്റവും വലിയത് 1 ആയിത്തീരും >>> യൂണിറ്റിലേക്ക് പുനർമൂല്യനിർണ്ണയം ചെയ്യുക.\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n",
        "canonical_solutions": "std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n\n    if (min_val == max_val) {\n        std::fill(numbers.begin(), numbers.end(), 0.0f);\n        return numbers;\n    }\n\n    for (float &num : numbers) {\n        num = (num - min_val) / (max_val - min_val);\n    }\n\n    return numbers;\n}",
        "test": "}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0f, (float)49.9f}))) == (std::vector<float>({(float)0.0f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)49.9f}))) == (std::vector<float>({(float)1.0f, (float)0.0f})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n    assert(candidate((std::vector<float>({(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n}\n"
    },
    {
        "task_id": "HumanEval/22",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഏതെങ്കിലും cppthon മൂല്യങ്ങളുടെ നൽകിയ വെക്റ്റർ ഫിൽട്ടർ ചെയ്യുക പൂർണ്ണസംഖ്യകൾക്കായി മാത്രം >>> filter_integers((std::vector<std::any>({(std::string) \"a\", (std::string) 3.14f, (std::string) 5}))) (std::vector<long>({(long) 5})) >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::<long,map>), std::vector<long>(()))) (std::vector<long>({(long) 1, (long) 2, (long) 3}))\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n",
        "canonical_solutions": "std::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (const auto& val : values) {\n        if (val.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(val));\n        } else if (val.type() == typeid(int)) {\n            result.push_back(std::any_cast<int>(val));\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2f, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n"
    },
    {
        "task_id": "HumanEval/23",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നൽകിയ സ്ട്രിങ്ങിന്റെ ദൈർഘ്യം തിരിച്ചുവിടുക >>> string_length((\"\")) (0) >>> string_length((\"abc\")) (3)\nlong string_length(std::string string) {\n",
        "canonical_solutions": "long string_length(std::string string) {\n    return string.length();\n}",
        "test": "}\nint main() {\n    auto candidate = string_length;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"x\")) == (1));\n    assert(candidate((\"asdasnakj\")) == (9));\n}\n"
    },
    {
        "task_id": "HumanEval/24",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n എന്ന ഒരു സംഖ്യയെ n നേക്കാൾ ചെറുതായി ഭിന്നിക്കുന്ന ഏറ്റവും വലിയ സംഖ്യ കണ്ടെത്തുക >>> largest_divisor () () (5)\nlong largest_divisor(long n) {\n",
        "canonical_solutions": "long largest_divisor(long n) {\n    for (long i = n / 2; i > 0; --i) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;\n}",
        "test": "}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
    },
    {
        "task_id": "HumanEval/25",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നൽകിയ പൂർണ്ണസംഖ്യയുടെ പ്രൈം ഫാക്ടറുകളുടെ വെക്റ്റർ ഏറ്റവും ചെറിയതിൽ നിന്ന് ഏറ്റവും വലിയതിലേക്ക് ക്രമത്തിൽ നൽകുക. ഓരോ ഘടകങ്ങളും ഘടകവൽക്കരണത്തിൽ എത്ര തവണ പ്രത്യക്ഷപ്പെടുന്നു എന്നതിന് തുല്യമായ തവണ വെക്റ്റർ ചെയ്യണം. ഇൻപുട്ട് നമ്പർ എല്ലാ ഘടകങ്ങളുടെയും ഗുണനത്തിന് തുല്യമായിരിക്കണം >>> ഫാക്ടറൈസ് ചെയ്യുക (((8)) (std::vector<long>({(long) 2, (long) 2, (long) 2})) >>> ഫാക്ടറൈസ് ചെയ്യുക (((25)) (std::vector<long>({(long) 5, (long) 5})) >>> ഫാക്ടറൈസ് ചെയ്യുക (70)) (std::vector<long>({(long) 2, (long) 5, (long) 7}))\nstd::vector<long> factorize(long n) {\n",
        "canonical_solutions": "std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for (long i = 2; i * i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}",
        "test": "}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
    },
    {
        "task_id": "HumanEval/26",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു പൂർണ്ണസംഖ്യകളുടെ വെക്റ്ററിൽ നിന്ന്, ഒന്നിൽ കൂടുതൽ തവണ സംഭവിക്കുന്ന എല്ലാ ഘടകങ്ങളും നീക്കംചെയ്യുക. ഇൻപുട്ടിൽ പറഞ്ഞിരിക്കുന്നതുപോലെ തന്നെ ഘടകങ്ങളുടെ ക്രമം നിലനിർത്തുക. >>> remove_duplicates((std::vector<long>({(long) 1, (long) 2, (long) 3, (long) 2, (long) 4}))) (std::vector<long>({(long) 1, (long) 3, (long) 4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n",
        "canonical_solutions": "std::vector<long> remove_duplicates(std::vector<long> numbers) {\n    std::unordered_map<long, int> freq;\n    for (long num : numbers) {\n        freq[num]++;\n    }\n\n    std::vector<long> result;\n    for (long num : numbers) {\n        if (freq[num] == 1) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n}\n"
    },
    {
        "task_id": "HumanEval/27",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സ്ട്രിങിന്, ചെറിയ അക്ഷരങ്ങളെ വലിയ അക്ഷരങ്ങളാക്കി മാറ്റുക. >>> flip_case (((\"Hello\")) (\"HELLO\")\nstd::string flip_case(std::string string) {\n",
        "canonical_solutions": "std::string flip_case(std::string string) {\n    for (char &ch : string) {\n        if (std::islower(ch)) {\n            ch = std::toupper(ch);\n        } else if (std::isupper(ch)) {\n            ch = std::tolower(ch);\n        }\n    }\n    return string;\n}",
        "test": "}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
    },
    {
        "task_id": "HumanEval/28",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// സ്ട്രിങ്ങുകളുടെ ഒരു സ്ട്രിങ്ങിലേക്ക് കൂട്ടിച്ചേർക്കുക >>> കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേർക്കുക, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, കൂട്ടിച്ചേ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ, ആ,\nstd::string concatenate(std::vector<std::string> strings) {\n",
        "canonical_solutions": "std::string concatenate(std::vector<std::string> strings) {\n    std::string result;\n    for (const auto& str : strings) {\n        result += str;\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"k\"}))) == (\"xyzwk\"));\n}\n"
    },
    {
        "task_id": "HumanEval/29",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു നിശ്ചിത പ്രിഫിക്സ് ഉപയോഗിച്ച് ആരംഭിക്കുന്ന സ്ട്രിംഗുകളുടെ ഒരു ഇൻപുട്ട് വെക്റ്റർ ഫിൽട്ടർ ചെയ്യുക. >>> filter_by_prefix((std::vector<std::string>()), (\"a\")) (std::vector<std::string>()) >>> filter_by_prefix(((std::vector<std::string>({(std::string) \"abc\", (std::string) \"bcd\", (std::string) \"cde\", (stdstring) \"array\"})), (\"a\") (std::vector<std::string>(({(std::string) \"abc\", (std::string) \"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n",
        "canonical_solutions": "std::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n    std::vector<std::string> result;\n    for (const auto& str : strings) {\n        if (str.rfind(prefix, 0) == 0) {  // Check if 'str' starts with 'prefix'\n            result.push_back(str);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/30",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// വെക്റ്ററിലെ പോസിറ്റീവ് സംഖ്യകൾ മാത്രം നൽകുക. >>> get_positive((std::vector<long>({long) -1, (long) -2, (long) -4, (long) -5, (long) -6}))) (std::vector<long>({long) -2, (long) -5, (long) -6})) >>> get_positive((std::vector<long>({long) -5, (long) -3, (long) -5, (long) -2, (long) -3, (long) -3, (long) -9, (long) -0, (long) -123, (long) -1, (long) -10}))) (std::vector<long>{(long) -5, (long) -3, (long) -2, (long) -3, (long) -9, (long) -123, (long) -1}))\nstd::vector<long> get_positive(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for (long num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/31",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സംഖ്യ പ്രൈം ആണെങ്കിൽ ശരിയായി നൽകുക, അല്ലെങ്കിൽ തെറ്റായി നൽകുക. >>> is_prime((6)) (false) >>> is_prime((101)) (true) >>> is_prime((11) (true) >>> is_prime((13441)) (true) >>> is_prime(61)) (true) >>> is_prime(4)) (false) >>> is_prime(1) (false)\nbool is_prime(long n) {\n",
        "canonical_solutions": "bool is_prime(long n) {\n    if (n < 2) return false;\n    if (n < 4) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}",
        "test": "}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/33",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഈ ഫംഗ്ഷൻ ഒരു വെക്റ്റർ l എടുക്കുകയും l' എന്ന ഒരു വെക്റ്റർ l' എന്ന് നൽകുകയും ചെയ്യുന്നു, അതിനാൽ l' എന്നത് മൂന്ന് കൊണ്ട് ഹരിക്കാത്ത സൂചികകളിൽ l ന് സമാനമാണ്, അതേസമയം മൂന്ന് കൊണ്ട് ഹരിക്കാവുന്ന സൂചികകളിലെ അതിന്റെ മൂല്യങ്ങൾ l ന്റെ അനുബന്ധ സൂചികകളുടെ മൂല്യങ്ങൾക്ക് തുല്യമാണ്, പക്ഷേ അടുക്കിയിരിക്കുന്നു. >>> sort_third((std::vector<long>{(long) 1, (long) 2, (long) 3}))) (std::vector<long>{(long) 1, (long) 2, (long) 3})) >>> sort_third((std::vector<long>{(long>{(long) 5, (long) 6, (long) 3, (long) 4, (long) 8, (long) 9, (long) 2}))) (std::vector<(long>{(long>{(long>2, (long) 6, (long) 3, (long) 4, (long) 8, (long) 9, (long) 5}))\nstd::vector<long> sort_third(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> sort_third(std::vector<long> l) {\n    std::vector<long> third_indices;\n    for (size_t i = 0; i < l.size(); i += 3) {\n        third_indices.push_back(l[i]);\n    }\n    std::sort(third_indices.begin(), third_indices.end());\n    \n    size_t idx = 0;\n    for (size_t i = 0; i < l.size(); i += 3) {\n        l[i] = third_indices[idx++];\n    }\n    \n    return l;\n}",
        "test": "}\nint main() {\n    auto candidate = sort_third;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)3, (long)4, (long)6, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)8, (long)3, (long)4, (long)6, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)9, (long)4, (long)8, (long)3, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)9, (long)4, (long)8, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5, (long)1})));\n}\n"
    },
    {
        "task_id": "HumanEval/34",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു വെക്റ്ററിലെ തരം തിരിക്കപ്പെട്ട അദ്വിതീയ ഘടകങ്ങൾ നൽകുക >>> unique((std::vector<long>({(long) 5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>{(long) 0, (long) 2, (long) 3, (long) 5, (long) 9, (long) 123}))\nstd::vector<long> unique(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}",
        "test": "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
    },
    {
        "task_id": "HumanEval/35",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// വെക്റ്ററിലെ പരമാവധി മൂലകം തിരികെ നൽകുക. >>> max_element((std::vector<long>({long) 1, (long) 2, (long) 3}))) (3) >>> max_element((std::vector<long>({long) 5, (long) 3, (long) -5, (long) 2, (long) -3, (long) 3, (long) 9, (long) 0, (long) 123, (long) 1, (long) -10}))) (123)\nlong max_element(std::vector<long> l) {\n",
        "canonical_solutions": "long max_element(std::vector<long> l) {\n    return *std::max_element(l.begin(), l.end());\n}",
        "test": "}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n}\n"
    },
    {
        "task_id": "HumanEval/36",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 11 അല്ലെങ്കിൽ 13 കൊണ്ട് ഹരിക്കാവുന്ന n ൽ കുറവുള്ള സംഖ്യകളിൽ 7 എന്ന അക്കം എത്ര പ്രാവശ്യം ദൃശ്യമാകുന്നു എന്നതിന്റെ സംഖ്യ നൽകുക. >>> fizz_buzz((50)) (0) >>> fizz_buzz((78)) (2) >>> fizz_buzz((79) (3)\nlong fizz_buzz(long n) {\n",
        "canonical_solutions": "long fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) count++;\n                temp /= 10;\n            }\n        }\n    }\n    return count;\n}",
        "test": "}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
    },
    {
        "task_id": "HumanEval/37",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഈ ഫംഗ്ഷൻ ഒരു വെക്റ്റർ l എടുക്കുകയും l' ഒരു വെക്റ്റർ l' ആയി നൽകുകയും ചെയ്യുന്നു, l' എന്നത് odd ഇൻഡെസിസുകളിൽ l ന് സമാനമാണ്, അതേസമയം l ന്റെ even ഇൻഡെസിസിലെ മൂല്യങ്ങൾ l ന്റെ even ഇൻഡെസിസുകളുടെ മൂല്യങ്ങൾക്ക് തുല്യമാണ്, പക്ഷേ അടുക്കിയിരിക്കുന്നു. >>> sort_even: vector<long>{(long) 1, (long) 2, (long) 3}))) (std: vector<long>{(long) 1, (long) 2, (long) 3})) >>> sort_even: vector<(std:: vector<long>{(long) 5, (long) 6, (long) 3, (long) 4}))) (std:: vector<(long>{(long) 3, (long) 6, (long) 5, (long) 4}))\nstd::vector<long> sort_even(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> sort_even(std::vector<long> l) {\n    std::vector<long> even_indices;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_indices.push_back(l[i]);\n    }\n    std::sort(even_indices.begin(), even_indices.end());\n    \n    size_t idx = 0;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        l[i] = even_indices[idx++];\n    }\n    \n    return l;\n}",
        "test": "}\nint main() {\n    auto candidate = sort_even;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)-10, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)5, (long)0, (long)9, (long)1, (long)123})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)-12, (long)4, (long)23, (long)2, (long)3, (long)11, (long)12, (long)-10}))) == (std::vector<long>({(long)-12, (long)8, (long)3, (long)4, (long)5, (long)2, (long)12, (long)11, (long)23, (long)-10})));\n}\n"
    },
    {
        "task_id": "HumanEval/39",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib ഫിബോനാച്ചി സംഖ്യയായ n-ആം സംഖ്യയെ നൽകുന്നു. അത് ഒരു പ്രൈം നമ്പർ കൂടിയാണ്. >>> prime_fib((1)) (2) >>> prime_fib((2) (3) >>> prime_fib(3)) (5) >>> prime_fib((4)) (13) >>> prime_fib(5) (89)\nlong prime_fib(long n) {\n",
        "canonical_solutions": "bool is_prime(long num) {\n    if (num < 2) return false;\n    if (num < 4) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (long i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nlong prime_fib(long n) {\n    std::vector<long> prime_fibs;\n    long a = 1, b = 1;\n    while (prime_fibs.size() < n) {\n        long next = a + b;\n        a = b;\n        b = next;\n        if (is_prime(next)) {\n            prime_fibs.push_back(next);\n        }\n    }\n    return prime_fibs[n - 1];\n}",
        "test": "}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n"
    },
    {
        "task_id": "HumanEval/40",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero ഒരു പൂർണ്ണസംഖ്യകളുടെ വെക്റ്റർ ഇൻപുട്ടായി എടുക്കുന്നു. വെക്റ്ററിൽ മൂന്ന് വ്യത്യസ്ത ഘടകങ്ങൾ ഉണ്ടെങ്കിൽ അത് ശരി ആയി മടങ്ങുന്നു, അല്ലാത്തപക്ഷം തെറ്റാണ്. >>> triples_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long) 5, (long) 0}))) (false) >>> triples_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long)-2, (long) 1} >>> (true) triples_sum_to_zero(std::vector<long>(({long) 1, (long) 2, (long) 3, (long) 7}))) (se) >>> triples_to_zero_((std::vector<long> (long) 2, (long) 4, (long) 5, (long) 3, (long) 9, (long) 7))) (true) >>> triples_sum_to_zero_long))) (long) >>> (long_vector)\nbool triples_sum_to_zero(std::vector<long> l) {\n",
        "canonical_solutions": "bool triples_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    size_t n = l.size();\n    \n    for (size_t i = 0; i < n - 2; i++) {\n        size_t left = i + 1, right = n - 1;\n        while (left < right) {\n            long sum = l[i] + l[left] + l[right];\n            if (sum == 0) return true;\n            else if (sum < 0) left++;\n            else right--;\n        }\n    }\n    \n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100, (long)3, (long)5, (long)-100}))) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/41",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു തികച്ചും നേരായ അനന്തമായ നീളമുള്ള വരയാണ് ഒരു റോഡ് സങ്കൽപ്പിക്കുക. n കാറുകൾ ഇടത്തുനിന്ന് വലത്തോട്ട് ഓടുന്നു; ഒരേ സമയം, n കാറുകളുടെ മറ്റൊരു കൂട്ടം വലത്തുനിന്ന് ഇടത്തോട്ട് ഓടുന്നു. രണ്ട് കൂട്ടം കാറുകൾ പരസ്പരം വളരെ അകലെയാണ് ആരംഭിക്കുന്നത്. എല്ലാ കാറുകളും ഒരേ വേഗതയിൽ നീങ്ങുന്നു. ഇടത്തുനിന്ന് വലത്തോട്ട് നീങ്ങുന്ന ഒരു കാർ വലത്തുനിന്ന് ഇടത്തോട്ട് നീങ്ങുന്ന ഒരു കാറിനെ തട്ടുമ്പോൾ രണ്ട് കാറുകൾ കൂട്ടിയിടിക്കുന്നുവെന്ന് പറയപ്പെടുന്നു. എന്നിരുന്നാലും, കാറുകൾ അനന്തമായി കരുത്തുറ്റതും ശക്തവുമാണ്; തൽഫലമായി, അവ കൂട്ടിയിടിക്കാത്തതുപോലെ അവയുടെ പാതയിൽ നീങ്ങുന്നു. ഈ ഫംഗ്ഷൻ അത്തരം കൂട്ടിയിടികളുടെ എണ്ണം നൽകുന്നു.\nlong car_race_collision(long n) {\n",
        "canonical_solutions": "long car_race_collision(long n) {\n    return n * n;\n}",
        "test": "}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
    },
    {
        "task_id": "HumanEval/42",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 1 കൊണ്ട് വർദ്ധിപ്പിച്ച മൂലകങ്ങളുള്ള ഒരു വെക്റ്റർ മടങ്ങുക. >>> incr_list((std::vector<long>({long) 1, (long) 2, (long) 3}))) (std::vector<long>({long) 2, (long) 3, (long) 4})) >>> incr_list((std::vector<long>({long) 5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>({long) 6, (long) 4, (long) 6, (long) 3, (long) 4, (long) 4, (long) 10, (long) 1, (long) 124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> incr_list(std::vector<long> l) {\n    for (long &num : l) {\n        num++;\n    }\n    return l;\n}",
        "test": "}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n}\n"
    },
    {
        "task_id": "HumanEval/43",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero ഒരു പൂർണ്ണസംഖ്യകളുടെ വെക്റ്റർ ഇൻപുട്ടായി എടുക്കുന്നു. വെക്റ്ററിൽ രണ്ട് വ്യത്യസ്ത ഘടകങ്ങൾ ഉണ്ടെങ്കിൽ അത് ശൂന്യമായി സംഖ്യയായി മാറുന്നു, അല്ലെങ്കിൽ തെറ്റാണ്. >>> pairs_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long) 5, (long) 0}))) (false) >>> pairs_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long)-2, (long) 1} >>> (false) pairs_sum_to_zero(std::vector<long>(({long) 1, (long) 2, (long) 3, (long) 7}))) (se) pairs >>>_sum_to_zero(std::vector<long>{long>(((2, (long) (long) (long) (long) (long) (long) (long) (long)) >>> (false) pairs >>>_sum_to_zero(std::vector<long> (long)) (long) >>> (long_long)\nbool pairs_sum_to_zero(std::vector<long> l) {\n",
        "canonical_solutions": "bool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long> seen;\n    for (long num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/44",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഇൻപുട്ട് നമ്പർ x ന്റെ സംഖ്യാ അടിത്തറ അടിത്തറയിലേക്ക് മാറ്റുക. പരിവർത്തനത്തിനുശേഷം സ്ട്രിംഗ് പ്രാതിനിധ്യം മടക്കിനൽകുക. അടിസ്ഥാന സംഖ്യകൾ 10 ൽ കുറവാണ്. >>> മാറ്റം_അടിസ്ഥാനം (എൻ) (എൻ), (എൻ) (എൻ), (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ) (എൻ)\nstd::string change_base(long x, long base) {\n",
        "canonical_solutions": "std::string change_base(long x, long base) {\n    if (x == 0) return \"0\";\n    \n    std::string result;\n    while (x > 0) {\n        result += std::to_string(x % base);\n        x /= base;\n    }\n    \n    std::reverse(result.begin(), result.end());\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
    },
    {
        "task_id": "HumanEval/45",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു ത്രികോണത്തിന്റെ ഒരു വശത്തിന്റെ നീളവും ഉയർന്ന റിട്ടേൺ ഏരിയയും നൽകിയിട്ടുണ്ട്. >>> ത്രികോണം_ഏരിയ (((5), (3)) (7.5f)\nfloat triangle_area(long a, long h) {\n",
        "canonical_solutions": "float triangle_area(long a, long h) {\n    return 0.5f * a * h;\n}",
        "test": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((5), (3)) == (7.5f));\n    assert(candidate((2), (2)) == (2.0f));\n    assert(candidate((10), (8)) == (40.0f));\n}\n"
    },
    {
        "task_id": "HumanEval/46",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഫിബൊനാച്ചി അനുക്രമത്തിന് സമാനമായ ഒരു അനുക്രമമാണ് ഫിബൊനാച്ചി സംഖ്യാ ശ്രേണി. ഇത് താഴെ പറയുന്ന രീതിയിൽ നിർവചിച്ചിരിക്കുന്നു: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4 സംഖ്യാ ശ്രേണിയുടെ n-ആം ഘടകം കാര്യക്ഷമമായി കണക്കാക്കാൻ ഒരു ഫംഗ്ഷൻ എഴുതുക. ആവർത്തനം ഉപയോഗിക്കരുത്. >>> fib4((5)) (4) >>> fib4((6)) (8) >>> fib4((7)) (14)\nlong fib4(long n) {\n",
        "canonical_solutions": "long fib4(long n) {\n    if (n == 0 || n == 1 || n == 3) return 0;\n    if (n == 2) return 2;\n\n    std::vector<long> dp(n + 1, 0);\n    dp[2] = 2;\n\n    for (long i = 4; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];\n    }\n\n    return dp[n];\n}",
        "test": "}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
    },
    {
        "task_id": "HumanEval/47",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// വെക്റ്ററിലെ മൂലകങ്ങളുടെ തിരികെ നൽകൽ മീഡിയൻ l. >>> മീഡിയൻ (((std::vector<long>({(long) 3, (long) 1, (long) 2, (long) 4, (long) 5}))) (float ((3)) >>> മീഡിയൻ (((std::vector<long>({(long) -10, (long) 4, (long) 6, (long) 1000, (long) 10, (long) 20}))) (15.0f)\nfloat median(std::vector<long> l) {\n",
        "canonical_solutions": "float median(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    size_t n = l.size();\n    \n    if (n % 2 == 1) {\n        return static_cast<float>(l[n / 2]);\n    } else {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n    }\n}",
        "test": "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0f));\n    assert(candidate((std::vector<long>({(long)5}))) == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5}))) == (5.5f));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3, (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
    },
    {
        "task_id": "HumanEval/48",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നൽകിയിരിക്കുന്ന സ്ട്രിംഗ് ഒരു പാലിൻഡ്രോം ആണോ എന്ന് പരിശോധിക്കുന്നു >>> is_palindrome (((\"\")) (true) >>> is_palindrome (((\"aba\")) (true) >>> is_palindrome (((\"aaaaa\")) (true) >>> is_palindrome (((\"zbcd\")) (false)\nbool is_palindrome(std::string text) {\n",
        "canonical_solutions": "bool is_palindrome(std::string text) {\n    return std::equal(text.begin(), text.begin() + text.size() / 2, text.rbegin());\n}",
        "test": "}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/49",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2^n മോഡുലോ പി (നമ്പറുകളെക്കുറിച്ച് ബോധവാനായിരിക്കുക) തിരിച്ചുവിടുക. >>> മോഡ്പ് (), () (3) >>> മോഡ്പ് (), () (2) >>> മോഡ്പ് (), () (1) >>> മോഡ്പ് (), () (8) >>> മോഡ്പ് (), () (1)\nlong modp(long n, long p) {\n",
        "canonical_solutions": "long modp(long n, long p) {\n    return std::pow(2, n) % p;\n}",
        "test": "}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
    },
    {
        "task_id": "HumanEval/51",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels എന്നത് സ്ട്രിംഗ് എടുക്കുകയും സ്വരാക്ഷരങ്ങളില്ലാത്ത സ്ട്രിംഗ് നൽകുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷനാണ്. >>> remove_vowels(\"\")) (\"\") >>> remove_vowels((\"abcdef\")) (\"bcdf\") >>> remove_vowels((\"aaaaa\")) (\"\") >>> remove_vowels(\"aaBAA\")) (\"B\") >>> remove_vowels((\"zbcd\")) (\"zbcd\")\nstd::string remove_vowels(std::string text) {\n",
        "canonical_solutions": "std::string remove_vowels(std::string text) {\n    std::string result;\n    std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    for (char ch : text) {\n        if (vowels.find(ch) == vowels.end()) {\n            result += ch;\n        }\n    }\n    \n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = remove_vowels;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"abcdef\\nghijklm\")) == (\"bcdf\\nghjklm\"));\n    assert(candidate((\"fedcba\")) == (\"fdcb\"));\n    assert(candidate((\"eeeee\")) == (\"\"));\n    assert(candidate((\"acBAA\")) == (\"cB\"));\n    assert(candidate((\"EcBOO\")) == (\"cB\"));\n    assert(candidate((\"ybcd\")) == (\"ybcd\"));\n}\n"
    },
    {
        "task_id": "HumanEval/52",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// വെക്റ്റർ l ലെ എല്ലാ സംഖ്യകളും threshold t ന് താഴെയാണെങ്കിൽ true തിരികെ നൽകുക. >>> below_threshold((std::vector<long>({(long) 1, (long) 2, (long) 4, (long) 10})), (100)) (true) >>> below_threshold((std::vector<long>({(long) 1, (long) 20, (long) 4, (long) 10})), (5)) (false)\nbool below_threshold(std::vector<long> l, long t) {\n",
        "canonical_solutions": "bool below_threshold(std::vector<long> l, long t) {\n    return std::all_of(l.begin(), l.end(), [t](long num) { return num < t; });\n}",
        "test": "}\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/53",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// x, y എന്നീ രണ്ട് സംഖ്യകൾ കൂട്ടിച്ചേര് ക്കുക. കൂട്ടിച്ചേര് ക്കുക.\nlong add(long x, long y) {\n",
        "canonical_solutions": "long add(long x, long y) {\n    return x + y;\n}",
        "test": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((0), (1)) == (1));\n    assert(candidate((1), (0)) == (1));\n    assert(candidate((2), (3)) == (5));\n    assert(candidate((5), (7)) == (12));\n    assert(candidate((7), (5)) == (12));\n}\n"
    },
    {
        "task_id": "HumanEval/54",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// രണ്ട് വാക്കുകളിൽ ഒരേ പ്രതീകങ്ങൾ ഉണ്ടോ എന്ന് പരിശോധിക്കുക. >>> same_chars(\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) (ശരി) >>> same_chars((\"abcd\"), (\"dddddddabc\")) (ശരി) >>> same_chars(\"dddddddabc\"), (\"abcd\") (ശരി) >>> same_chars(\"eabcd\"), (\"dddddddabc\")) (തെറ്റ്) >>> same_chars >>>\"((abcd\"), (\"dddddddabc\") (തെറ്റ്) >>> same_chars >>>\"(abcd\"), (\"dddddddddddabce\") (തെറ്റ്) >>> same_chars(\"eabcd\"), (\"ddddzzzzzddddddabc\") (തെറ്റ്)\nbool same_chars(std::string s0, std::string s1) {\n",
        "canonical_solutions": "bool same_chars(std::string s0, std::string s1) {\n    std::unordered_set<char> set0(s0.begin(), s0.end());\n    std::unordered_set<char> set1(s1.begin(), s1.end());\n    return set0 == set1;\n}",
        "test": "}\nint main() {\n    auto candidate = same_chars;\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(candidate((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(candidate((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(candidate((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(candidate((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(candidate((\"aabb\"), (\"aaccc\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/55",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n-ആം ഫിബോനാച്ചി സംഖ്യ തിരികെ നൽകുക. >>> ഫിബോനച്ചി 10)) (55) >>> ഫിബോനച്ചി 1) 1) 1) >>> ഫിബോനച്ചി 8) 21)\nlong fib(long n) {\n",
        "canonical_solutions": "long fib(long n) {\n    if (n <= 1) return n;\n    \n    long a = 0, b = 1, c;\n    for (long i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    \n    return b;\n}",
        "test": "}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
    },
    {
        "task_id": "HumanEval/56",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets എന്നത് \"<\" ഉം \">\" ഉം അടങ്ങുന്ന ഒരു സ്ട്രിംഗ് ആണ്. ഓരോ തുറക്കുന്ന ബ്രാക്കറ്റിനും അനുയോജ്യമായ ഒരു അടയ്ക്കുന്ന ബ്രാക്കറ്റ് ഉണ്ടെങ്കിൽ true തിരികെ നൽകുക. >>> correct_bracketing((\"<\")) (false) >>> correct_bracketing(\"<>\")) (true) >>> correct_bracketing(\"<><>\")) (true) >>> correct_bracketing(\">(<>\") (false)\nbool correct_bracketing(std::string brackets) {\n",
        "canonical_solutions": "bool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '<') balance++;\n        else if (ch == '>') balance--;\n        if (balance < 0) return false;\n    }\n    return balance == 0;\n}",
        "test": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/57",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// വെക്റ്റർ ഘടകങ്ങൾ ഏകതാനമായി വർദ്ധിക്കുകയോ കുറയുകയോ ചെയ്യുന്നുവെങ്കിൽ true തിരികെ നൽകുക. >>> ഏകതാനമായ (,,,,,) (true) >>> ഏകതാനമായ (,,,,,) (false) >>> ഏകതാനമായ (,,,,) (true)\nbool monotonic(std::vector<long> l) {\n",
        "canonical_solutions": "bool monotonic(std::vector<long> l) {\n    bool increasing = true, decreasing = true;\n    \n    for (size_t i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1]) decreasing = false;\n        if (l[i] < l[i - 1]) increasing = false;\n    }\n    \n    return increasing || decreasing;\n}",
        "test": "}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9, (long)9, (long)9, (long)9}))) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/58",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// രണ്ട് വെക്റ്ററുകൾക്കായുള്ള തരംതിരിക്കപ്പെട്ട അദ്വിതീയ പൊതു ഘടകങ്ങൾ നൽകുക. >>> common((std::vector<long>({long) 1, (long) 4, (long) 3, (long) 34, (long) 653, (long) 2, (long) 5), (std::vector<long>({long) 5, (long) 7, (long) 1, (long) 5, (long) 9, (long) 653, (long) 121}))) (std::vector<long>({long) 1, (long) 5, (long) 653})) >>> common(std::vector<long>{(long) 5, (long) 3, (long) 2, (long) 8}), (std::vector<long>{(long) 3, (long) 2))) (std::vector<long>{(long>{long} 2, (long) 3))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n",
        "canonical_solutions": "std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::unordered_set<long> set1(l1.begin(), l1.end());\n    std::unordered_set<long> result_set;\n    \n    for (long num : l2) {\n        if (set1.count(num)) {\n            result_set.insert(num);\n        }\n    }\n    \n    std::vector<long> result(result_set.begin(), result_set.end());\n    std::sort(result.begin(), result.end());\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/59",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n ന്റെ ഏറ്റവും വലിയ പ്രൈം ഫാക്ടർ തിരികെ നൽകുക. n > 1 ആണെന്ന് കരുതുക, അത് പ്രൈം അല്ല. >>> largest_prime_factor (((13195)) (29) >>> largest_prime_factor (((2048)) (2)\nlong largest_prime_factor(long n) {\n",
        "canonical_solutions": "long largest_prime_factor(long n) {\n    long largest = -1;\n    \n    while (n % 2 == 0) {\n        largest = 2;\n        n /= 2;\n    }\n    \n    for (long i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\n    }\n    \n    if (n > 1) largest = n;\n    \n    return largest;\n}",
        "test": "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n"
    },
    {
        "task_id": "HumanEval/60",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n എന്നത് 1 മുതൽ n വരെയുള്ള സംഖ്യകളുടെ സംഖ്യയായി കണക്കാക്കുന്ന ഒരു ഫംഗ്ഷനാണ്. >>> sum_to_n((30)) (465) >>> sum_to_n(100)) (5050) >>> sum_to_n((5)) (15) >>> sum_to_n(10)) (55) >>> sum_to_n(1) (1)\nlong sum_to_n(long n) {\n",
        "canonical_solutions": "long sum_to_n(long n) {\n    return n * (n + 1) / 2;\n}",
        "test": "}\nint main() {\n    auto candidate = sum_to_n;\n    assert(candidate((1)) == (1));\n    assert(candidate((6)) == (21));\n    assert(candidate((11)) == (66));\n    assert(candidate((30)) == (465));\n    assert(candidate((100)) == (5050));\n}\n"
    },
    {
        "task_id": "HumanEval/61",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets എന്നത് \"(\"ഉം \"\") എന്നീ അക്ഷരങ്ങളുടെ ഒരു സ്ട്രിംഗ് ആണ്. ഓരോ തുറക്കുന്ന ബ്രാക്കറ്റിനും അനുയോജ്യമായ ഒരു അടയ്ക്കുന്ന ബ്രാക്കറ്റ് ഉണ്ടെങ്കിൽ true നൽകുക. >>> correct_bracketing((\"(\")) (false) >>> correct_bracketing(\"()\nbool correct_bracketing(std::string brackets) {\n",
        "canonical_solutions": "bool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '(') balance++;\n        else if (ch == ')') balance--;\n        if (balance < 0) return false;\n    }\n    return balance == 0;\n}",
        "test": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/62",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// xs ഒരു പോളിനോമിയുടെ ഗുണിതങ്ങളെ പ്രതിനിധീകരിക്കുന്നു. xs[0] + xs[1] * x + xs[2] * x^2 + .... ഈ പോളിനോമിയുടെ ഡെറിവേറ്റീവ് അതേ രൂപത്തിൽ നൽകുക. >>> ഡെറിവേറ്റീവ് (((std::vector<long>({long) 3, (long) 1, (long) 2, (long) 4, (long) 5}))) (std::vector<long>{(long) 1, (long) 4, (long) 12, (long) 20})) >>> ഡെറിവേറ്റീവ് (((std::vector<long>({long) 1, (long) 2, (long) 3}))) (std::vector<(long>{(long) 2, (long) 6}))\nstd::vector<long> derivative(std::vector<long> xs) {\n",
        "canonical_solutions": "std::vector<long> derivative(std::vector<long> xs) {\n    std::vector<long> result;\n    for (size_t i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1}))) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/63",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഫിബ്ബോനാച്ചി അനുക്രമത്തിന് സമാനമായ ഒരു അനുക്രമമാണ് ഫിബ്ബോനാച്ചി സംഖ്യാ ശ്രേണി. ഇത് താഴെ പറയുന്ന രീതിയിൽ നിർവചിച്ചിരിക്കുന്നു: ഫിബ്ബോനാച്ചി അനുക്രമം == 0 == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == 0 ഫിബ്ബോനാച്ചി == ഫിബ്ബിയോണിന്റെ അനുക്രമത്തിന്റെ n-ആം ാം ഘടകത്തെ കാര്യക്ഷമമായി കണക്കാക്കാൻ ഒരു ഫംഗ്ഷൻ എഴുതുക.\nlong fibfib(long n) {\n",
        "canonical_solutions": "long fibfib(long n) {\n    if (n == 0 || n == 1) return 0;\n    if (n == 2) return 1;\n\n    std::vector<long> dp(n + 1, 0);\n    dp[2] = 1;\n\n    for (long i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n    }\n\n    return dp[n];\n}",
        "test": "}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n}\n"
    },
    {
        "task_id": "HumanEval/64",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു വാക്ക് പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് ഇൻപുട്ടായി എടുത്ത് സ്ട്രിംഗിലെ സ്വരാക്ഷരങ്ങളുടെ എണ്ണം നൽകുന്ന ഒരു ഫംഗ്ഷൻ vowels_count എഴുതുക. ഈ കേസിലെ സ്വരാക്ഷരങ്ങൾ 'a', 'e', 'i', 'o', 'u' എന്നിവയാണ്. ഇവിടെ, 'y' ഒരു സ്വരാക്ഷരമാണ്, പക്ഷേ അത് നൽകിയ വാക്കിന്റെ അവസാനം ആയിരിക്കുമ്പോൾ മാത്രം. ഉദാഹരണംഃ >>> vowels_count (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ) (എ)\nlong vowels_count(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong vowels_count(std::string s) {\n  long count = 0;\n  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  for (char c : s) {\n    if (vowels.count(c)) {\n      count++;\n    }\n  }\n  if (!s.empty() && (s.back() == 'y' || s.back() == 'Y')) {\n    count++;\n  }\n  return count;\n}",
        "test": "}\nint main() {\n    auto candidate = vowels_count;\n    assert(candidate((\"abcde\")) == (2));\n    assert(candidate((\"Alone\")) == (3));\n    assert(candidate((\"key\")) == (2));\n    assert(candidate((\"bye\")) == (1));\n    assert(candidate((\"keY\")) == (2));\n    assert(candidate((\"bYe\")) == (1));\n    assert(candidate((\"ACEDY\")) == (3));\n}\n"
    },
    {
        "task_id": "HumanEval/65",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// സർക്കുലർ x എന്ന സംഖ്യയുടെ അക്കങ്ങൾ നീക്കുക, അക്കങ്ങൾ വലത്തേക്ക് നീക്കി ഫലം ഒരു സ്ട്രിംഗായി നൽകുക. Shift > അക്കങ്ങളുടെ എണ്ണം ആണെങ്കിൽ, അക്കങ്ങൾ വിപരീതമായി നൽകുക. >>> circular_shift (((12), (1)) (\"21\") >>> circular_shift (((12), (2)) (\"12\")\nstd::string circular_shift(long x, long shift) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n  long n = s.length();\n  if (n == 0) {\n    return \"\";\n  }\n  shift %= n;\n  if (shift < 0) {\n    shift += n;\n  }\n  if (shift == 0) {\n    return s;\n  }\n  if (shift > n) {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::string shifted_s = s.substr(n - shift) + s.substr(0, n - shift);\n  return shifted_s;\n}",
        "test": "}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
    },
    {
        "task_id": "HumanEval/66",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ടാസ്ക് ഒരു സ്ട്രിംഗ് ഇൻപുട്ടായി എടുക്കുകയും മുകളിലെ പ്രതീകങ്ങളുടെ ആകെത്തുക മാത്രം ASCII കോഡുകൾ നൽകുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക. ഉദാഹരണങ്ങൾ: >>> digitSum((\"\")) (0) >>> digitSum((\"abAB\")) (131) >>> digitSum(\"abcCd\")) (67) >>> digitSum((\"helloE\")) (69) >>> digitSum((\"woArBld\")) (131) >>> digitSum((\"aAXaaaa\") (153)\nlong digitSum(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong digitSum(std::string s) {\n  long sum = 0;\n  for (char c : s) {\n    if (isupper(c)) {\n      sum += static_cast<long>(c);\n    }\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
    },
    {
        "task_id": "HumanEval/67",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഈ ടാസ്ക്, നിങ്ങൾ ആപ്പിൾ, ഓറഞ്ച്, മാംഗോ പഴങ്ങൾ അടങ്ങുന്ന ഒരു ഫലം കൊട്ടയിൽ വിതരണം ആപ്പിൾ, ഓറഞ്ച്, മാംഗോ പഴങ്ങൾ ഒരു എണ്ണം പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് ലഭിക്കും. ആപ്പിൾ, ആപ്പിൾ, മാംഗോ പഴങ്ങൾ മൊത്തം എണ്ണം പ്രതിനിധീകരിക്കുന്ന സ്ട്രിംഗ് കൊടുത്തിരിക്കുന്നു കൊട്ടയിൽ പഴങ്ങൾ മൊത്തം എണ്ണം പ്രതിനിധീകരിക്കുന്ന ഒരു പൂർണ്ണസംഖ്യ കൊട്ടയിൽ മാംഗോ പഴങ്ങൾ എണ്ണം മടങ്ങുക. ഉദാഹരണത്തിന്ഃ >>> ഫലം_വിതരണം (ആപ്പിൾ, 6 ഓറഞ്ച്), (19)) (8) >>> ഫലം_വിതരണം (ആപ്പിൾ, 10 ഓറഞ്ച്), (3) (2) >>> ഫലം_വിതരണം (ആപ്പിൾ, 3 ഓറഞ്ച്), (100)) (95) >>> ഫലം_വിതരണം (ആപ്പിൾ, 100 ഓറഞ്ച്), (120)) (19)\nlong fruit_distribution(std::string s, long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong fruit_distribution(std::string s, long n) {\n  long apples = 0;\n  long oranges = 0;\n  size_t apples_pos = s.find(\"apples\");\n  if (apples_pos != std::string::npos) {\n    size_t start = 0;\n    while (!isdigit(s[start])) {\n      start++;\n    }\n    apples = std::stoll(s.substr(start, apples_pos - start));\n  }\n  size_t oranges_pos = s.find(\"oranges\");\n  if (oranges_pos != std::string::npos) {\n    size_t and_pos = s.find(\"and\");\n    size_t start = and_pos + 3;\n    while (!isdigit(s[start])) {\n      start++;\n    }\n    oranges = std::stoll(s.substr(start, oranges_pos - start));\n  }\n  return n - apples - oranges;\n}",
        "test": "}\nint main() {\n    auto candidate = fruit_distribution;\n    assert(candidate((\"5 apples and 6 oranges\"), (19)) == (8));\n    assert(candidate((\"5 apples and 6 oranges\"), (21)) == (10));\n    assert(candidate((\"0 apples and 1 oranges\"), (3)) == (2));\n    assert(candidate((\"1 apples and 0 oranges\"), (3)) == (2));\n    assert(candidate((\"2 apples and 3 oranges\"), (100)) == (95));\n    assert(candidate((\"2 apples and 3 oranges\"), (5)) == (0));\n    assert(candidate((\"1 apples and 100 oranges\"), (120)) == (19));\n}\n"
    },
    {
        "task_id": "HumanEval/68",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \"നല്ല നെഗറ്റീവ് ഇന്ററൽ നോഡുകളുള്ള ഒരു വൃക്ഷത്തിന്റെ ഒരു ശാഖയെ പ്രതിനിധീകരിക്കുന്ന ഒരു വെക്റ്റർ നൽകിയിട്ടുണ്ടെങ്കിൽ, നിങ്ങളുടെ ചുമതല നോഡുകളിൽ ഒന്ന് പിഴുതെടുക്കുകയും അത് തിരികെ നൽകുകയും ചെയ്യുക എന്നതാണ്. പിഴുതെടുത്ത നോഡ് ഏറ്റവും ചെറിയ ഇരട്ട മൂല്യമുള്ള നോഡായിരിക്കണം. ഒരേ ചെറിയ ഇരട്ട മൂല്യമുള്ള ഒന്നിലധികം നോഡുകൾ കണ്ടെത്തിയാൽ ഏറ്റവും ചെറിയ സൂചികയുള്ള നോഡ് മടക്കി നൽകുക. പിഴുതെടുത്ത നോഡ് ഒരു വെക്റ്ററിൽ മടക്കിനൽകണം, [smallest_value, its index ], ഇരട്ട മൂല്യങ്ങളില്ലെങ്കിലോ നൽകിയ വെക്റ്റർ ശൂന്യമാണെങ്കിലോ, മടങ്ങുക []. ഉദാഹരണം 1: >>> pluck((stdvector<<(long>{(long) {4, (long) {2, (long) {3}))) (stdvector::::::dvector::dvector::dvector::dvector::dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector:dvector::dvector::dvector::dvector::dvector::dvector::dvector::dvector::d\nstd::vector<long> pluck(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> pluck(std::vector<long> arr) {\n  if (arr.empty()) {\n    return {};\n  }\n  long min_even = -1;\n  long min_index = -1;\n  for (long i = 0; i < arr.size(); ++i) {\n    if (arr[i] % 2 == 0) {\n      if (min_even == -1 || arr[i] < min_even) {\n        min_even = arr[i];\n        min_index = i;\n      }\n    }\n  }\n  if (min_even == -1) {\n    return {};\n  }\n  return {min_even, min_index};\n}",
        "test": "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1}))) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/69",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് പോസിറ്റീവ് പൂർണ്ണസംഖ്യകളുടെ ഒരു നോൺ-ശൂന്യ വെക്റ്റർ നൽകിയിരിക്കുന്നു. പൂജ്യത്തേക്കാൾ വലുതും പൂർണ്ണസംഖ്യയുടെ മൂല്യത്തേക്കാൾ വലുതും തുല്യവുമായ ഏറ്റവും വലിയ പൂർണ്ണസംഖ്യ തിരികെ നൽകുക. ഒരു പൂർണ്ണസംഖ്യയുടെ ആവൃത്തി വെക്റ്ററിൽ ദൃശ്യമാകുന്ന തവണയുടെ എണ്ണമാണ്. അത്തരം മൂല്യം ഇല്ലെങ്കിൽ, -1. ഉദാഹരണങ്ങൾഃ >>> search(((std::vector<long>({(long) 4, (long) 1, (long) 2, (long) 3, (long) 1}))) (2) >>> search((std::vector<(long>{(long) 1, (long) 2, (long) 2, (long) 3, (long) 3, (long) 3, (long) 4, (long) 4, (long) 4} (3)))) >>> >>> search(std::vector<(long>{(long>5, (long) 5, (long) 4, (long) 4, (long) 4}-1 (long)))\nlong search(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong search(std::vector<long> lst) {\n  std::map<long, long> counts;\n  for (long x : lst) {\n    counts[x]++;\n  }\n  long result = -1;\n  for (auto const& [value, count] : counts) {\n    if (value > 0 && count >= value) {\n      result = std::max(result, value);\n    }\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3, (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6, (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4, (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3, (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8, (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10, (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5, (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5, (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10, (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8, (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1, (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9, (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4, (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6, (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2, (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9, (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8, (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7, (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10, (long)10, (long)9, (long)2}))) == (-1));\n}\n"
    },
    {
        "task_id": "HumanEval/70",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സംഖ്യകളുടെ വെക്റ്റർ നൽകിയാൽ, വിചിത്രമായ ക്രമത്തിൽ വെക്റ്റർ മടങ്ങുക. വിചിത്രമായ ക്രമീകരണം, നിങ്ങൾ ഏറ്റവും കുറഞ്ഞ മൂല്യത്തിൽ ആരംഭിക്കുമ്പോൾ, ശേഷിക്കുന്ന സംഖ്യകളുടെ പരമാവധി, പിന്നെ മിനിമം തുടങ്ങിയവയാണ്. ഉദാഹരണങ്ങൾഃ >>> strange_sort_list{}, (long) 1, (long) 2, (long) 3, (long) 4}))) (std::vector<long>{(long) 1, (long) 4, (long) 2, (long) 3})) >>> strange_sort_list<(((std::vector<(long>{(long) 5, (long) 5, (long) 5}))) (std::vector<(long>{(long) 5, (long) 5, (long) 5, (long) 5}))) >>> strange_sort_list<(long> (long)) (std::vector<(long))\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.empty()) {\n    return {};\n  }\n  std::sort(lst.begin(), lst.end());\n  std::vector<long> result;\n  long left = 0;\n  long right = lst.size() - 1;\n  bool take_min = true;\n  while (left <= right) {\n    if (take_min) {\n      result.push_back(lst[left++]);\n    } else {\n      result.push_back(lst[right--]);\n    }\n    take_min = !take_min;\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0, (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5, (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111}))) == (std::vector<long>({(long)111111})));\n}\n"
    },
    {
        "task_id": "HumanEval/71",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു ത്രികോണത്തിന്റെ മൂന്നു വശങ്ങളുടെ നീളം നൽകുക. ത്രികോണത്തിന്റെ മൂലധനം 2 ദശാംശ പോയിന്റിലേക്ക് തിരിക്കുക. മൂന്നും ഒരു സാധുവായ ത്രികോണം രൂപപ്പെടുത്തുന്നുവെങ്കിൽ. അല്ലെങ്കിൽ -1 തിരിക്കുക. ഏതെങ്കിലും രണ്ട് വശങ്ങളുടെ ആകെത്തുക മൂന്നാമത്തെ വശത്തേക്കാൾ വലുതാണെങ്കിൽ മൂന്ന് വശങ്ങൾ സാധുവായ ഒരു ത്രികോണം ഉണ്ടാക്കുന്നു. ഉദാഹരണംഃ >>> ത്രികോണം_പ്രദേശം (((3), (4), (5)) (6.0f) >>> ത്രികോണം_പ്രദേശം (((1), (2), (10)) (ഫ്ലോട്ട് -1))\nfloat triangle_area(long a, long b, long c) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat triangle_area(long a, long b, long c) {\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1.0f;\n  }\n  double s = static_cast<double>(a + b + c) / 2.0;\n  double area = std::sqrt(s * (s - a) * (s - b) * (s - c));\n  std::stringstream ss;\n  ss << std::fixed << std::setprecision(2) << area;\n  return std::stof(ss.str());\n}",
        "test": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0f));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18f));\n    assert(candidate((2), (2), (2)) == (1.73f));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25f));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43f));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n"
    },
    {
        "task_id": "HumanEval/72",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// വസ്തു q പറക്കുകയാണെങ്കിൽ true എന്ന് തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക, അല്ലാത്തപക്ഷം false. വസ്തു q സന്തുലിതമാണെങ്കിൽ (ഇത് ഒരു പാലിൻഡ്രോമിക് വെക്റ്ററാണ്) അതിന്റെ ഘടകങ്ങളുടെ ആകെത്തുക പരമാവധി സാധ്യമായ ഭാരത്തേക്കാൾ കുറവോ തുല്യമോ ആണെങ്കിൽ പറക്കും. ഉദാഹരണംഃ >>> will_it_fly((std::vector<long>({long) 1, (long) 2}), (5)) (false) # 1+2 പരമാവധി സാധ്യമായ ഭാരത്തേക്കാൾ കുറവാണ്, പക്ഷേ അത് അസന്തുലിതമാണ്. >>> will_it_fly((std::vector<long>((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\nbool will_it_fly(std::vector<long> q, long w) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool will_it_fly(std::vector<long> q, long w) {\n  std::vector<long> reversed_q = q;\n  std::reverse(reversed_q.begin(), reversed_q.end());\n  if (q != reversed_q) {\n    return false;\n  }\n  long sum = 0;\n  for (long val : q) {\n    sum += val;\n  }\n  return sum <= w;\n}",
        "test": "}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5)) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/73",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു വെക്റ്റർ arr എന്ന സംഖ്യകൾ നൽകിയിട്ടുണ്ടെങ്കിൽ, വെക്റ്റർ പാലിൻഡ്രോമിക് ആക്കുന്നതിന് മാറ്റേണ്ട ഘടകങ്ങളുടെ ഏറ്റവും കുറഞ്ഞ എണ്ണം കണ്ടെത്തുക. ഒരു പാലിൻഡ്രോമിക് വെക്റ്റർ എന്നത് ഒരേപോലെ മുന്നോട്ടും പിന്നോട്ടും വായിക്കുന്ന ഒരു വെക്റ്ററാണ്. ഒരു മാറ്റത്തിൽ, നിങ്ങൾക്ക് ഒരു ഘടകം മറ്റേതെങ്കിലും ഘടകത്തിലേക്ക് മാറ്റാം. ഉദാഹരണത്തിന്ഃ >>> smallest_change(std::vector<long>((long) 1, (long) 2, (long) 3, (long) 5, (long) 4, (long) 7, (long) 9, (long) 6}))) (4) >>> smallest_change(std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 4, (long) 3, (long) 2, (long) 2} (1)))) >>> smallest_change(std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 2, (long) 1} (0)\nlong smallest_change(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong smallest_change(std::vector<long> arr) {\n  long n = arr.size();\n  long changes = 0;\n  for (long i = 0; i < n / 2; ++i) {\n    if (arr[i] != arr[n - 1 - i]) {\n      changes++;\n    }\n  }\n  return changes;\n}",
        "test": "}\nint main() {\n    auto candidate = smallest_change;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)1, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/74",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// സ്ട്രിങ്ങുകളുടെ രണ്ട് വെക്ടറുകൾ സ്വീകരിക്കുകയും, വെക്ടറിന്റെ എല്ലാ സ്ട്രിങ്ങുകളിലും മറ്റ് വെക്ടറുകളേക്കാൾ കുറവ് ചാർസുള്ള വെക്ടർ തിരികെ നൽകുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക. രണ്ട് വെക്ടറുകളിൽ ഒരേ എണ്ണം ചാർസുകളുണ്ടെങ്കിൽ, ആദ്യ വെക്ടർ തിരികെ നൽകുക. ഉദാഹരണങ്ങൾ >>> total_match (), (std::vector (), (std::string (), (std::string (), (std::string (), (std::string (), (std::string (), (std::string ()) (d) (d) (d) (d) (d) (d) (d)) (d) (d) (d) (d) (d) (d) (d)) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d)) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d)\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n  long count1 = 0;\n  for (const std::string& s : lst1) {\n    count1 += s.length();\n  }\n  long count2 = 0;\n  for (const std::string& s : lst2) {\n    count2 += s.length();\n  }\n  if (count1 <= count2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>())) == (std::vector<std::string>()));\n}\n"
    },
    {
        "task_id": "HumanEval/75",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നൽകിയിരിക്കുന്ന സംഖ്യ 3 പ്രൈം സംഖ്യകളുടെ ഗുണനമാണെങ്കിൽ ശരി എന്ന് തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക. അല്ലാത്തപക്ഷം തെറ്റാണ്. (a) 100 ൽ കുറവാണെന്ന് അറിയുന്നത്. ഉദാഹരണംഃ >>> is_multiply_prime((30)) (ശരി) 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_multiply_prime(long a) {\n  if (a <= 0) {\n    return false;\n  }\n  std::vector<int> primes;\n  std::vector<bool> is_prime(100, true);\n  is_prime[0] = is_prime[1] = false;\n  for (int p = 2; p * p < 100; p++) {\n    if (is_prime[p]) {\n      for (int i = p * p; i < 100; i += p)\n        is_prime[i] = false;\n    }\n  }\n  for (int p = 2; p < 100; p++) {\n    if (is_prime[p]) {\n      primes.push_back(p);\n    }\n  }\n  int count = 0;\n  for (int p1 : primes) {\n    if (a % p1 == 0) {\n      count++;\n      int rem = a / p1;\n      for (int p2 : primes) {\n        if (rem % p2 == 0) {\n          count++;\n          int rem2 = rem / p2;\n          for (int p3 : primes) {\n            if (rem2 == p3) {\n              count++;\n              if (count == 3) {\n                return true;\n              }\n              count--;\n            }\n          }\n          count--;\n        }\n      }\n      count--;\n    }\n  }\n  return false;\n}",
        "test": "}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/76",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സംഖ്യ x n ന്റെ ഒരു ലളിതമായ പവറാണെങ്കിൽ false എന്ന് തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക എന്നതാണ് നിങ്ങളുടെ ജോലി. n**int=x എങ്കിൽ x n ന്റെ ഒരു ലളിതമായ പവറാണ്. ഉദാഹരണത്തിന്: >>> is_simple_power((1), (4)) (true) >>> is_simple_power(2), (2)) (true) >>> is_simple_power(8), (2)) (true) >>> is_simple_power(3), (2)) (false) >>> is_simple_power(3), (1)) (false) >>> is_simple_power(5), (3)) (false)\nbool is_simple_power(long x, long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_simple_power(long x, long n) {\n  if (x == n) return true;\n  if (n == 1) return x == 1;\n  if (n == 0) return x == 0;\n  if (x == 0) return false;\n  if (x == 1) return true;\n  long power = n;\n  while (power < x) {\n    if (x % n != 0) return false;\n    if (power > x / n) return false;\n    power *= n;\n  }\n  return power == x;\n}",
        "test": "}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/77",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു പൂർണ്ണസംഖ്യ a എടുക്കുകയും ഈ ingeger ചില പൂർണ്ണസംഖ്യകളുടെ ക്യൂബ് ആണെങ്കിൽ true തിരികെ നൽകുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക. കുറിപ്പ്ഃ ഇൻപുട്ട് എല്ലായ്പ്പോഴും സാധുവാണെന്ന് നിങ്ങൾ അനുമാനിക്കാം. ഉദാഹരണങ്ങൾ: >>> iscube (((1)) (true) >>> iscube (((2)) (false) >>> iscube (((-1)) (true) >>> iscube (((64)) (true) >>> iscube (((0)) (true) >>> iscube (((180)) (false)\nbool iscube(long a) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool iscube(long a) {\n  if (a == 0) return true;\n  long abs_a = std::abs(a);\n  long root = round(std::cbrt(abs_a));\n  return root * root * root == abs_a;\n}",
        "test": "}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/78",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഹെക്സാഡെസിമൽ സംഖ്യകളെ ഒരു സ്ട്രിംഗായി സ്വീകരിക്കുകയും പ്രൈം സംഖ്യകളായ ഹെക്സാഡെസിമൽ അക്കങ്ങളുടെ എണ്ണം കണക്കാക്കുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ എഴുതാൻ നിങ്ങളോട് ആവശ്യപ്പെട്ടു (പ്രൈം നമ്പർ, അല്ലെങ്കിൽ ഒരു പ്രൈം, 1 നേക്കാൾ വലിയ ഒരു സ്വാഭാവിക സംഖ്യയാണ്, അത് രണ്ട് ചെറിയ സ്വാഭാവിക സംഖ്യകളുടെ ഗുണിതമല്ല). ഹെക്സാഡെസിമൽ അക്കങ്ങൾ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. പ്രൈം നമ്പറുകൾ 2, 3, 5, 7, 11, 13, 17,... അതിനാൽ നിങ്ങൾ ഇനിപ്പറയുന്ന അക്കങ്ങളുടെ എണ്ണം നിർണ്ണയിക്കേണ്ടതുണ്ട്ഃ 2, 3, 5, 7, B (= ദശാംശ 11), D (= ദശാംശ 13). കുറിപ്പ്ഃ ഇൻപുട്ട് എല്ലായ്പ്പോഴും ശരിയോ ശൂന്യമോ ആണെന്ന് നിങ്ങൾ അനുമാനിക്കാം, കൂടാതെ ചിഹ്നങ്ങളായ A, B, C, D, E, F എല്ലായ്പോഴും വലിയ അക്ഷരങ്ങളാണ്. ഉദാഹരണങ്ങൾഃ >>> hex_(AB\"key\") >>> hex_(AB\"key\") >>> hex_((10\") >>> hex_(10\") >>> hex_77\") >>> hex_{2> hex_{7\") >>> hex_{7} hex_{7} hex_{7} hex_{7} hex_{7x_{7} hex_{7} hex_{7}\nlong hex_key(std::string num) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong hex_key(std::string num) {\n  long count = 0;\n  std::unordered_set<char> prime_hex = {'2', '3', '5', '7', 'B', 'D'};\n  for (char c : num) {\n    if (prime_hex.count(c)) {\n      count++;\n    }\n  }\n  return count;\n}",
        "test": "}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
    },
    {
        "task_id": "HumanEval/79",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് ദശാംശ രൂപത്തിലുള്ള ഒരു സംഖ്യ ലഭിക്കും. അത് ബൈനറി ഫോർമാറ്റിലേക്ക് പരിവർത്തനം ചെയ്യുക എന്നതാണ് നിങ്ങളുടെ ചുമതല. ഓരോ പ്രതീകവും ഒരു ബൈനറി സംഖ്യയെ പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് ഫംഗ്ഷൻ നൽകണം. സ്ട്രിംഗിലെ ഓരോ പ്രതീകവും '0' അല്ലെങ്കിൽ '1' ആയിരിക്കും. സ്ട്രിംഗിന്റെ തുടക്കത്തിലും അവസാനത്തിലും ഒരു അധിക ജോഡി പ്രതീകങ്ങൾ 'db' ഉണ്ടാകും. ഫോർമാറ്റിനെ സഹായിക്കുന്നതിന് അധിക പ്രതീകങ്ങൾ അവിടെയുണ്ട്. ഉദാഹരണങ്ങൾഃ >>> decimal_to_binary((15)) (\"db1111db\") >>> decimal_to_binary(32) (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string decimal_to_binary(long decimal) {\n  if (decimal == 0) {\n    return \"db0db\";\n  }\n  std::string binaryString = \"\";\n  long temp = std::abs(decimal);\n  while (temp > 0) {\n    binaryString = (temp % 2 == 0 ? \"0\" : \"1\") + binaryString;\n    temp /= 2;\n  }\n  return \"db\" + binaryString + \"db\";\n}",
        "test": "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
    },
    {
        "task_id": "HumanEval/80",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് ഒരു സ്ട്രിംഗ് s നൽകിയിരിക്കുന്നു. സ്ട്രിംഗ് ഹാപ്പ്സിപിയാണോ അല്ലയോ എന്ന് പരിശോധിക്കുക എന്നതാണ് നിങ്ങളുടെ ചുമതല. അതിന്റെ നീളം കുറഞ്ഞത് 3 ആണെങ്കിൽ ഒരു സ്ട്രിംഗ് ഹാപ്പ്സിപിയാണ്, തുടർച്ചയായ 3 അക്ഷരങ്ങളും വ്യത്യസ്തമാണ് ഉദാഹരണത്തിന്ഃ >>> is_happy(\"a\")) (false) >>> is_happy((\"aa\")) (false) >>> is_happy((\"abcd\")) (true) >>> is_happy((\"aabb\")) (false) >>> is_happy(\"adb\")) (true) >>> is_happy((\"xyy\") (false)\nbool is_happy(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_happy(std::string s) {\n  if (s.length() < 3) {\n    return false;\n  }\n  for (size_t i = 0; i <= s.length() - 3; ++i) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "test": "}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/81",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// സെമസ്റ്ററിന്റെ അവസാന ആഴ്ചയാണ്, അധ്യാപിക വിദ്യാർത്ഥികൾക്ക് ഗ്രേഡുകൾ നൽകണം. അധ്യാപിക സ്വന്തം ഗ്രേഡിംഗ് അൽഗോരിതം ഉണ്ടാക്കുകയാണ്. ഗ്രേഡിംഗിനായി ഉപയോഗിച്ച കോഡ് നഷ്ടപ്പെട്ടിരിക്കുന്നു എന്നതാണ് പ്രശ്നം. ചില വിദ്യാർത്ഥികൾക്കുള്ള ജിപിഎയുടെ ഒരു വെക്റ്റർ അവൾ നിങ്ങൾക്ക് നൽകിയിട്ടുണ്ട്, ഇനിപ്പറയുന്ന പട്ടിക ഉപയോഗിച്ച് അക്ഷര ഗ്രേഡുകളുടെ ഒരു വെക്റ്റർ output ട്ട്പുട്ട് ചെയ്യാൻ കഴിയുന്ന ഒരു ഫംഗ്ഷൻ നിങ്ങൾ എഴുതണംഃ ജിപിഎ. അക്ഷര ഗ്രേഡ് 4.0 എ + > 3.7 എ > 3.3 എ- > 3.0 ബി + > 2.7 ബി > 2.3 ബി- > 2.3 ബി > 2.0 സി + > 1.7 സി > 1.3 സി- > 1.0 ഡി + > 0.7 ഡി > 0.0 ഡി- 0.0 ഇ ഉദാഹരണംഃ >>>_grade_equation(std:: vector<float>{(float) 4.0f, (float) 3, (float) 1.7f, (float) 2, (float) 3.5f))) (std: vector<std:: std:: std::string:: std::string:: std:: std::string: A+ (string) \" (C\"string (C)) (C\"string) (C) \"\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string> letter_grades;\n  for (float gpa : grades) {\n    if (gpa == 4.0f) {\n      letter_grades.push_back(\"A+\");\n    } else if (gpa > 3.7f) {\n      letter_grades.push_back(\"A\");\n    } else if (gpa > 3.3f) {\n      letter_grades.push_back(\"A-\");\n    } else if (gpa > 3.0f) {\n      letter_grades.push_back(\"B+\");\n    } else if (gpa > 2.7f) {\n      letter_grades.push_back(\"B\");\n    } else if (gpa > 2.3f) {\n      letter_grades.push_back(\"B-\");\n    } else if (gpa > 2.0f) {\n      letter_grades.push_back(\"C+\");\n    } else if (gpa > 1.7f) {\n      letter_grades.push_back(\"C\");\n    } else if (gpa > 1.3f) {\n      letter_grades.push_back(\"C-\");\n    } else if (gpa > 1.0f) {\n      letter_grades.push_back(\"D+\");\n    } else if (gpa > 0.7f) {\n      letter_grades.push_back(\"D\");\n    } else if (gpa > 0.0f) {\n      letter_grades.push_back(\"D-\");\n    } else {\n      letter_grades.push_back(\"E\");\n    }\n  }\n  return letter_grades;\n}",
        "test": "}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2f}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5f}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0f, (float)0.7f}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/82",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സ്ട്രിംഗ് എടുക്കുകയും സ്ട്രിംഗ് ദൈർഘ്യം ഒരു പ്രൈം നമ്പർ ആണെങ്കിൽ ശരിയായി അല്ലെങ്കിൽ തെറ്റായി മടങ്ങുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക ഉദാഹരണങ്ങൾ >>> prime_length((\"ഹലോ\")) (സത്യമാണ്) >>> prime_length((\"abcdcba\")) (സത്യമാണ്) >>> prime_length((\"കിറ്റൻസ്\")) (സത്യമാണ്) >>> prime_length((\"ഓറഞ്ച്\")) (തെറ്റാണ്)\nbool prime_length(std::string string) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_prime(int n) {\n  if (n <= 1) return false;\n  for (int i = 2; i * i <= n; ++i) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nbool prime_length(std::string string) {\n  return is_prime(string.length());\n}",
        "test": "}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/83",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു പോസിറ്റീവ് ഇന്റഗ്രൽ n കൊടുത്താൽ, 1 കൊണ്ട് തുടങ്ങുന്നതോ അവസാനിക്കുന്നതോ ആയ n- അക്ക പോസിറ്റീവ് ഇന്റഗ്രൽ സംഖ്യകളുടെ എണ്ണം തിരികെ നൽകുക.\nlong starts_one_ends(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong starts_one_ends(long n) {\n  if (n <= 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  long starts_with_one = std::pow(10, n - 1);\n  long ends_with_one = std::pow(10, n - 1);\n  long starts_and_ends_with_one = std::pow(10, n - 2);\n  return starts_with_one + ends_with_one - starts_and_ends_with_one;\n}",
        "test": "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n}\n"
    },
    {
        "task_id": "HumanEval/84",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു പോസിറ്റീവ് പൂർണ്ണസംഖ്യ N നൽകിയിട്ടുണ്ടെങ്കിൽ, അതിന്റെ അക്കങ്ങളുടെ ആകെ തുക ബൈനറിയിൽ നൽകുക. ഉദാഹരണം >>> solve((1000)) (\"1\") >>> solve((150)) (\"110\") >>> solve((147)) (\"1100\") വേരിയബിളുകൾ: @N പൂർണ്ണസംഖ്യ നിയന്ത്രണങ്ങൾഃ 0 ≤ N ≤ 10000. ഔട്ട്പുട്ട്ഃ ബൈനറി സംഖ്യകളുടെ ഒരു സ്ട്രിംഗ്\nstd::string solve(long N) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string solve(long N) {\n  if (N < 0 || N > 10000) {\n    return \"\"; // Or handle invalid input as needed\n  }\n  long sum = 0;\n  std::string s = std::to_string(N);\n  for (char c : s) {\n    sum += c - '0';\n  }\n  if (sum == 0) {\n    return \"0\";\n  }\n  std::string binary_sum = \"\";\n  while (sum > 0) {\n    binary_sum = (sum % 2 == 0 ? \"0\" : \"1\") + binary_sum;\n    sum /= 2;\n  }\n  return binary_sum;\n}",
        "test": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
    },
    {
        "task_id": "HumanEval/85",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// lst എന്ന ഒരു നോൺ-ശൂന്യമായ വെക്റ്റർ നൽകിയിട്ടുണ്ടെങ്കിൽ, ഇരട്ട സൂചികകളിലുള്ള ഇരട്ട മൂലകങ്ങൾ കൂട്ടുക. ഉദാഹരണങ്ങൾ: >>> add((std::vector<long>({(long) 4, (long) 2, (long) 6, (long) 7}))) (2)\nlong add(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong add(std::vector<long> lst) {\n  long sum = 0;\n  for (long i = 1; i < lst.size(); i += 2) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4, (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4, (long)4, (long)6, (long)8}))) == (12));\n}\n"
    },
    {
        "task_id": "HumanEval/86",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സ്ട്രിംഗ് എടുത്ത് അതിന്റെ ക്രമീകരിച്ച പതിപ്പ് തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക. എല്ലാ വാക്കുകളും (സ്പെയ്സ് ഉപയോഗിച്ച് വേർതിരിച്ച്) ഒരു പുതിയ വാക്ക് ഉപയോഗിച്ച് മാറ്റിസ്ഥാപിക്കുന്ന ഒരു സ്ട്രിംഗാണ് സ്ട്രിംഗിന്റെ ക്രമീകരിച്ച പതിപ്പ്. എല്ലാ പ്രതീകങ്ങളും ASCII മൂല്യത്തെ അടിസ്ഥാനമാക്കി വർദ്ധിച്ചുവരുന്ന ക്രമത്തിൽ ക്രമീകരിച്ചിരിക്കുന്നു. കുറിപ്പ്ഃ വാക്യത്തിലെ വാക്കുകളുടെയും ശൂന്യമായ ഇടങ്ങളുടെയും ക്രമം നിങ്ങൾ സൂക്ഷിക്കണം. ഉദാഹരണത്തിന്ഃ >>> anti_shuffle (((\"Hi\")) (\"Hi\") >>> anti_shuffle (((\"hello\")) (\"ehllo\") >>> anti_shuffle (((\"Hello World!!!\")) (\"ഹലോ !!!Wdlor\")\nstd::string anti_shuffle(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string anti_shuffle(std::string s) {\n  std::string result = \"\";\n  std::string current_word = \"\";\n  for (char c : s) {\n    if (c == ' ') {\n      std::sort(current_word.begin(), current_word.end());\n      result += current_word;\n      result += c;\n      current_word = \"\";\n    } else {\n      current_word += c;\n    }\n  }\n  std::sort(current_word.begin(), current_word.end());\n  result += current_word;\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = anti_shuffle;\n    assert(candidate((\"Hi\")) == (\"Hi\"));\n    assert(candidate((\"hello\")) == (\"ehllo\"));\n    assert(candidate((\"number\")) == (\"bemnru\"));\n    assert(candidate((\"abcd\")) == (\"abcd\"));\n    assert(candidate((\"Hello World!!!\")) == (\"Hello !!!Wdlor\"));\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hi. My name is Mister Robot. How are you?\")) == (\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n"
    },
    {
        "task_id": "HumanEval/87",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് ഒരു 2 ഡയമൻഷണൽ ഡാറ്റ നൽകിയിരിക്കുന്നു, ഒരു നെസ്റ്റഡ് വെക്റ്ററുകളായി, ഇത് മാട്രിക്സിന് സമാനമാണ്, എന്നിരുന്നാലും, മാട്രിക്സുകളിൽ നിന്ന് വ്യത്യസ്തമായി, ഓരോ വരിയിലും വ്യത്യസ്ത എണ്ണം നിരകൾ അടങ്ങിയിരിക്കാം. lst, പൂർണ്ണസംഖ്യ x എന്നിവ നൽകിയിട്ടുണ്ടെങ്കിൽ, വെക്റ്ററിൽ പൂർണ്ണസംഖ്യകൾ x കണ്ടെത്തുക, കൂടാതെ ട്യൂപ്പുകളുടെ റിട്ടേൺ വെക്റ്റർ, [(x1, y1), (x2, y2) ...] ഓരോ ട്യൂപ്പും ഒരു കോർഡിനേറ്റ് - (row, columns), 0 മുതൽ ആരംഭിക്കുന്നു. തുടക്കത്തിൽ നിരകൾ ക്രമത്തിൽ ക്രമീകരിക്കുക. കൂടാതെ, നിരയുടെ കോർഡിനേറ്റുകൾ ക്രമത്തിൽ ക്രമീകരിക്കുക. ഉദാഹരണങ്ങൾഃ >>> get_row(std::vector<std::vector<d>, എന്നാൽ, മാട്രിക്സുകളിൽ നിന്ന് വ്യത്യസ്തമായി, ഓരോ വരിയിലും വ്യത്യസ്ത എണ്ണം നിരകൾ അടങ്ങിയിരിക്കാം. lst, integer x എന്നിവ നൽകിയിട്ടുണ്ടെങ്കിൽ, വെക്റ്ററിൽ integer x കണ്ടെത്തുക, കൂടാതെ ട്യൂപ്പുകളുടെ റിട്ടേൺ വെക്റ്റർ, [{(x1, y1), (x1, y1), (x2, y2) ], . . . . . . . . ഓരോ ട്യൂപ്പിലും ഒരു കോർഡിനേറ്റ് - (row, തുടക്കത്തിൽ ക്രമത്തിൽ വരികൾ ക്രമത്തിൽ ക്രമത്തിൽ ക്രമീകരിക്കുക. തുടക്കത്തിൽ വരിയിൽ ക്രമത്തിൽ ക്രമത്തിൽ ക്രമീകരിക്കുക. ഉദാഹരണങ്ങൾഃ\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n  std::vector<std::tuple<long, long>> coordinates;\n  for (long i = 0; i < lst.size(); ++i) {\n    std::vector<std::pair<long, long>> row_coords;\n    for (long j = 0; j < lst[i].size(); ++j) {\n      if (lst[i][j] == x) {\n        row_coords.push_back({j, i});\n      }\n    }\n    std::sort(row_coords.rbegin(), row_coords.rend());\n    for (const auto& coord_pair : row_coords) {\n      coordinates.emplace_back(coord_pair.second, coord_pair.first);\n    }\n  }\n  return coordinates;\n}",
        "test": "}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5, 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2, 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3, 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4, 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5, 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})), (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)})));\n}\n"
    },
    {
        "task_id": "HumanEval/88",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു നെഗറ്റീവ് അല്ലാത്ത സംഖ്യകളുടെ വെക്റ്റർ നൽകിയിട്ടുണ്ടെങ്കിൽ, ക്രമീകരണത്തിനുശേഷം നൽകിയിരിക്കുന്ന വെക്റ്ററിന്റെ ഒരു കോക്പി തിരികെ നൽകുക, തുക ((ആദ്യ സൂചിക മൂല്യം, അവസാന സൂചിക മൂല്യം) ഒറ്റയടിക്ക് ആണെങ്കിൽ, അല്ലെങ്കിൽ തുക ((ആദ്യ സൂചിക മൂല്യം, അവസാന സൂചിക മൂല്യം) ഇരട്ട ആണെങ്കിൽ, അത് താഴേയ്ക്കുള്ള ക്രമത്തിൽ ക്രമീകരിക്കുക. കുറിപ്പ്ഃ * നൽകിയിരിക്കുന്ന വെക്റ്റർ മാറ്റരുത്. ഉദാഹരണങ്ങൾഃ >>> sort_array(std::vector<long>(())) (std::vector<long>((5}))) (std::vector<long>((((5})) >>> sort_arrayd::vector<long>(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\nstd::vector<long> sort_array(std::vector<long> array) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> sort_array(std::vector<long> array) {\n  std::vector<long> sorted_array = array;\n  if (sorted_array.empty()) {\n    return sorted_array;\n  }\n  long first = 0;\n  long last = sorted_array.size() - 1;\n  if ((first + last) % 2 != 0) {\n    std::sort(sorted_array.begin(), sorted_array.end());\n  } else {\n    std::sort(sorted_array.rbegin(), sorted_array.rend());\n  }\n  return sorted_array;\n}",
        "test": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2, (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15, (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0, (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21, (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14, (long)11})));\n}\n"
    },
    {
        "task_id": "HumanEval/89",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സ്ട്രിംഗ് ഒരു ആർഗ്യുമെന്റായി എടുക്കുകയും അക്ഷരമാല തിരിക്കുകയും ചെയ്ത ഒരു സ്ട്രിംഗ് എൻക്രിപ്റ്റ് ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ എൻക്രിപ്റ്റ് സൃഷ്ടിക്കുക. അക്ഷരമാലകൾ രണ്ട് സ്ഥാനങ്ങളിലേക്ക് രണ്ട് ഗുണിതങ്ങൾ താഴേക്ക് നീങ്ങുന്ന തരത്തിൽ അക്ഷരമാല തിരിക്കണം. ഉദാഹരണത്തിന്ഃ >>> encrypt((\"hi\")) (\"lm\") >>> encrypt((\"asdfghjkl\")) (\"ewhjklnop\") >>> encrypt((\"gf\")) (\"kj\") >>> encrypt((\"et\")) (\"ix\")\nstd::string encrypt(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string encrypt(std::string s) {\n  std::string encrypted_s = \"\";\n  int shift = 2 * 2;\n  for (char c : s) {\n    if (isalpha(c)) {\n      char base = islower(c) ? 'a' : 'A';\n      encrypted_s += static_cast<char>((c - base + shift) % 26 + base);\n    } else {\n      encrypted_s += c;\n    }\n  }\n  return encrypted_s;\n}",
        "test": "}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n"
    },
    {
        "task_id": "HumanEval/90",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് ഒരു പൂർണ്ണസംഖ്യകളുടെ വെക്റ്റർ നൽകിയിരിക്കുന്നു. വെക്റ്ററിന്റെ രണ്ടാമത്തെ ചെറിയ ഘടകം തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ next_smallest () എഴുതുക. അത്തരം ഘടകം ഇല്ലെങ്കിൽ None നൽകുക. >>> next_smallest () std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 4, (long) 5}))) 2 >>> next_smallest () std::vector<long>{(long) 5, (long) 1, (long) 4, (long) 3, (long) 2))) >>> 2 next_smallest () std::vector<long>(long))) std::nullopt >>> next_smallest () std::vector<long>{(long) 1, (long) 1))) std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n\nstd::optional<long> next_smallest(std::vector<long> lst) {\n  if (lst.size() < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n  if (lst[0] == lst[1]) {\n    return std::nullopt;\n  }\n  return lst[1];\n}",
        "test": "}\nint main() {\n    auto candidate = next_smallest;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == 2);\n    assert(candidate((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2}))) == 2);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)0}))) == 1);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)-35, (long)34, (long)12, (long)-45}))) == -35);\n}\n"
    },
    {
        "task_id": "HumanEval/91",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് ഒരു വാക്ക് സ്ട്രിംഗ് നൽകും, നിങ്ങളുടെ ചുമതല വിരസതകളുടെ എണ്ണം കണക്കാക്കുക എന്നതാണ്. \"I\" എന്ന വാക്കിൽ ആരംഭിക്കുന്ന ഒരു വാക്യമാണ് വിരസത. വാക്യങ്ങൾ '.', '? അല്ലെങ്കിൽ '! ' ഉപയോഗിച്ച് വേർതിരിക്കുന്നു. ഉദാഹരണത്തിന്ഃ >>> is_bored((\"ഹലോ വേൾഡ്\")) (0) >>> is_bored((\"ആകാശം നീലയാണ്. സൂര്യൻ പ്രകാശിക്കുന്നു. ഞാൻ ഈ കാലാവസ്ഥയെ സ്നേഹിക്കുന്നു\")) (1)\nlong is_bored(std::string S) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong is_bored(std::string S) {\n  long boredom_count = 0;\n  std::string current_sentence = \"\";\n  for (char c : S) {\n    current_sentence += c;\n    if (c == '.' || c == '?' || c == '!') {\n      std::stringstream ss(current_sentence);\n      std::string first_word;\n      ss >> first_word;\n      if (first_word == \"I\") {\n        boredom_count++;\n      }\n      current_sentence = \"\";\n    }\n  }\n  return boredom_count;\n}",
        "test": "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/92",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 3 സംഖ്യകൾ എടുക്കുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക. സംഖ്യകളിൽ ഒന്ന് മറ്റ് രണ്ടിന്റെയും ആകെത്തുകയ്ക്ക് തുല്യമാണെങ്കിൽ ശരിയായി നൽകുന്നു, എല്ലാ സംഖ്യകളും പൂർണ്ണസംഖ്യകളാണ്. മറ്റെല്ലാ സാഹചര്യങ്ങളിലും തെറ്റായി നൽകുന്നു. ഉദാഹരണങ്ങൾ >>> any_int((float(5)), (float(2)), (float(7))) (true) >>> any_int(((float(3)), (float(2)), (float(2))) (false) >>> any_int((float(3)), (float(-2)), (float(1))) (true) >>> any_int(((3.6f), (-2.2f), (float(2))) (false)\nbool any_int(float x, float y, float z) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool any_int(float x, float y, float z) {\n  if (std::floor(x) != x || std::floor(y) != y || std::floor(z) != z) {\n    return false;\n  }\n  long ix = static_cast<long>(x);\n  long iy = static_cast<long>(y);\n  long iz = static_cast<long>(z);\n  return (ix == iy + iz) || (iy == ix + iz) || (iz == ix + iy);\n}",
        "test": "}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5f), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5f), (float(5)), (3.5f)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2f), (2.2f), (2.2f)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0f), (float(4)), (float(7))) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/93",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സന്ദേശം എടുക്കുകയും, എല്ലാ അക്ഷരങ്ങളുടെയും കേസ് സ്വാപ്പ് ചെയ്യുന്ന വിധത്തിൽ എൻകോഡ് ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക, സന്ദേശത്തിലെ എല്ലാ സ്വരാക്ഷരങ്ങളും ഇംഗ്ലീഷ് അക്ഷരമാലയിലെ ആ സ്വരാക്ഷരത്തിന് 2 സ്ഥാനങ്ങൾ മുന്നിൽ വരുന്ന അക്ഷരത്തിൽ മാറ്റിസ്ഥാപിക്കുക. അക്ഷരങ്ങൾ മാത്രം കരുതുക. ഉദാഹരണങ്ങൾഃ >>> encode((\"test\")) (\"TGST\") >>> encode((\"This is a message\")) (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string encode(std::string message) {\n  std::string encoded_message = \"\";\n  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  std::map<char, char> vowel_map = {\n      {'a', 'c'}, {'e', 'g'}, {'i', 'k'}, {'o', 'q'}, {'u', 'w'},\n      {'A', 'C'}, {'E', 'G'}, {'I', 'K'}, {'O', 'Q'}, {'U', 'W'}};\n  for (char c : message) {\n    if (isalpha(c)) {\n      char swapped_case = islower(c) ? toupper(c) : tolower(c);\n      if (vowels.count(c)) {\n        encoded_message += vowel_map[c];\n      } else {\n        encoded_message += swapped_case;\n      }\n    } else {\n      encoded_message += c;\n    }\n  }\n  return encoded_message;\n}",
        "test": "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
    },
    {
        "task_id": "HumanEval/94",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് ഒരു സംഖ്യകളുടെ വെക്റ്റർ നൽകിയിരിക്കുന്നു. നിങ്ങൾ ഏറ്റവും വലിയ പ്രൈം മൂല്യം കണ്ടെത്തുകയും അതിന്റെ അക്കങ്ങളുടെ സംഖ്യ തിരികെ നൽകുകയും വേണം. ഉദാഹരണങ്ങൾഃ >>> skjkasdkd((std::vector<long>((long) 0, (long) 3, (long) 2, (long) 1, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) (long) 3, (long) 3, (long) (long) 3, (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)\nlong skjkasdkd(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  for (long i = 2; i * i <= n; ++i) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nlong sum_digits(long n) {\n  long sum = 0;\n  std::string s = std::to_string(n);\n  for (char c : s) {\n    sum += c - '0';\n  }\n  return sum;\n}\n\nlong skjkasdkd(std::vector<long> lst) {\n  long largest_prime = -1;\n  for (long num : lst) {\n    if (num > largest_prime && is_prime(num)) {\n      largest_prime = num;\n    }\n  }\n  if (largest_prime == -1) {\n    return 0;\n  }\n  return sum_digits(largest_prime);\n}",
        "test": "}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191}))) == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456, (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127, (long)97, (long)8192}))) == (10));\n}\n"
    },
    {
        "task_id": "HumanEval/95",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു മാപ്പ് നൽകിയിട്ടുണ്ടെങ്കിൽ, എല്ലാ കീകളും ചെറിയ അക്ഷരങ്ങളിലോ വലിയ അക്ഷരങ്ങളിലോ ഉള്ള സ്ട്രിങ്ങുകളാണെങ്കിൽ true തിരികെ നൽകുക, അല്ലെങ്കിൽ false തിരികെ നൽകുക. നൽകിയിരിക്കുന്ന മാപ്പ് ശൂന്യമാണെങ്കിൽ ഫംഗ്ഷൻ false തിരികെ നൽകണം. ഉദാഹരണങ്ങൾഃ >>> check_dict_case, \"\" \"\" std::map<std::string, std::string>, \"\" apple\", \"\" apple\", \"\" banana, \"\"))) (true) >>> check_dict_case, \"\" std::map, \"\" string, \"\" \"\" \"\" apple, \"\" \"\" \"\" a, \"\" \"\" banana, \"\" b, \"\" banana, \"\" (false) >>> check_dict_case, \"\" map, \"\" std::string, \"\" a, \"\" \"\" apple, \"\" \"\" b, \"\" banana, \"\" (false) >>> check_dict_case, \"\" std::string, \"\" std::string, \"\" std::string, \"\" std::string, \"\" std:apple, \"\" std:string, \"\" std:string, \"\" std:string, \"\" std:string, \"\" std:string, \"\" std:string, \"\" std:string, \"\" std:string, \"\" std:string, \"\" std:string, \"\" std:string, \"\" std:string, std:string, std: \" (st:string) \"st:string)) \"st:string\" std:string\" std:string, std:string\") \" (st:string) \"st:string\") \" (st:string) \"st:string\") \"st:string\"st:string\"string\", std:string, std:string, std:string, std:string, std:string, std:string, std:string, std:string, std:string, std:string, std:string, std:string, std:string, st:string, st:d:d:d:d:d:d:d:d:d:d:d:d:\nbool check_dict_case(std::map<std::string,std::string> dict) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_dict_case(std::map<std::string,std::string> dict) {\n  if (dict.empty()) {\n    return false;\n  }\n  bool first_key_lower = false;\n  bool first_key_upper = false;\n  auto it = dict.begin();\n  if (!it->first.empty() && islower(it->first[0])) {\n    first_key_lower = true;\n  } else if (!it->first.empty() && isupper(it->first[0])) {\n    first_key_upper = true;\n  } else {\n    return false;\n  }\n  for (const auto& pair : dict) {\n    if (pair.first.empty()) {\n      return false;\n    }\n    bool current_lower = true;\n    bool current_upper = true;\n    for (char c : pair.first) {\n      if (!islower(c)) {\n        current_lower = false;\n      }\n      if (!isupper(c)) {\n        current_upper = false;\n      }\n    }\n    if (first_key_lower && !current_lower) {\n      return false;\n    }\n    if (first_key_upper && !current_upper) {\n      return false;\n    }\n    if (!first_key_lower && !first_key_upper) {\n        if (current_lower) first_key_lower = true;\n        else if (current_upper) first_key_upper = true;\n        else return false;\n    }\n  }\n  return first_key_lower || first_key_upper;\n}",
        "test": "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/96",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു നോൺ-നെഗറ്റീവ് ഇന്റീജർ എടുക്കുകയും n ൽ കുറവുള്ള ആദ്യത്തെ n ഇന്റീജറുകളുടെ ഒരു വെക്റ്റർ നൽകുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ നടപ്പിലാക്കുക. ഉദാഹരണത്തിന്: >>> count_up_to((5)) (std::vector<long>({long) 2, (long) 3})) >>> count_up_to((11)) (std::vector<long>({long) 2, (long) 3, (long) 5, (long) 7}) >>> count_up_to(0)) (std::vector<long>)) >>> count_up_to(20)) (std::vector<long>{(2, (long) 3, (long) 5, (long) 7, (long) 11, (long) 13, (long) 17, (long) 19} >>> count_up_1) (std::vector<long> >>> count_up_to(18) (std::vector<long>11, (long) 3, (long) 5, (long)) (std:vector<long>17) (long) 3, (long)) (long) 17 (long)\nstd::vector<long> count_up_to(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_prime(long num) {\n  if (num <= 1) return false;\n  for (long i = 2; i * i <= num; ++i) {\n    if (num % i == 0) return false;\n  }\n  return true;\n}\n\nstd::vector<long> count_up_to(long n) {\n  std::vector<long> primes;\n  if (n <= 2) {\n    return primes;\n  }\n  for (long i = 2; i < n; ++i) {\n    if (is_prime(i)) {\n      primes.push_back(i);\n    }\n  }\n  return primes;\n}",
        "test": "}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
    },
    {
        "task_id": "HumanEval/97",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// രണ്ട് പൂർണ്ണസംഖ്യകളെ എടുത്ത് അവയുടെ യൂണിറ്റ് അക്കങ്ങളുടെ ഗുണിതം നൽകുന്ന ഫംഗ്ഷൻ പൂർത്തിയാക്കുക. ഇൻപുട്ട് എല്ലായ്പ്പോഴും സാധുവാണെന്ന് കരുതുക. ഉദാഹരണങ്ങൾ: >>> ഗുണിക്കുക (((148), (412)) (16) >>> ഗുണിക്കുക (((19), (28)) (72) >>> ഗുണിക്കുക (((2020), (1851)) (0) >>> ഗുണിക്കുക (((14), (-15)) (20)\nlong multiply(long a, long b) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong multiply(long a, long b) {\n  long unit_a = std::abs(a) % 10;\n  long unit_b = std::abs(b) % 10;\n  return unit_a * unit_b;\n}",
        "test": "}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/98",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സ്ട്രിംഗ് s നൽകിയിട്ടുണ്ടെങ്കിൽ, ഇരട്ട സൂചികകളിലെ വലിയ അക്ഷര സ്വരാക്ഷരങ്ങളുടെ എണ്ണം കണക്കാക്കുക. ഉദാഹരണത്തിന്ഃ >>> count_upper (((\"aBCdEf\")) (1) >>> count_upper (((\"abcdefg\")) (0) >>> count_upper (((\"dBBE\")) (0)\nlong count_upper(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_upper(std::string s) {\n  long count = 0;\n  std::unordered_set<char> upper_vowels = {'A', 'E', 'I', 'O', 'U'};\n  for (long i = 0; i < s.length(); ++i) {\n    if (i % 2 == 0 && upper_vowels.count(s[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "test": "}\nint main() {\n    auto candidate = count_upper;\n    assert(candidate((\"aBCdEf\")) == (1));\n    assert(candidate((\"abcdefg\")) == (0));\n    assert(candidate((\"dBBE\")) == (0));\n    assert(candidate((\"B\")) == (0));\n    assert(candidate((\"U\")) == (1));\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"EEEE\")) == (2));\n}\n"
    },
    {
        "task_id": "HumanEval/99",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സംഖ്യയെ പ്രതിനിധീകരിക്കുന്ന ഒരു മൂല്യം (സ്ട്രിംഗ്) എടുക്കുകയും അതിന് ഏറ്റവും അടുത്തുള്ള പൂർണ്ണസംഖ്യ തിരികെ നൽകുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക. രണ്ട് പൂർണ്ണസംഖ്യകളിൽ നിന്ന് സംഖ്യ തുല്യമാണെങ്കിൽ, അത് പൂജ്യത്തിൽ നിന്ന് ചുറ്റിക്കറങ്ങുക. ഉദാഹരണങ്ങൾ >>> closest_integer (((\"10\")) (10) >>> closest_integer (((\"15.3\")) കുറിപ്പ് (15): പൂജ്യത്തിൽ നിന്ന് ചുറ്റിക്കറങ്ങുന്നത് അർത്ഥമാക്കുന്നത് രണ്ട് പൂർണ്ണസംഖ്യകളിൽ നിന്ന് തന്നിരിക്കുന്ന സംഖ്യ തുല്യമാണെങ്കിൽ, നിങ്ങൾ മടക്കിനൽകേണ്ടത് പൂജ്യത്തിൽ നിന്ന് ഏറ്റവും അകലെയുള്ള ഒന്നാണ്. ഉദാഹരണത്തിന് closest_integer (((\"14.5\") 15 ഉം closest_integer (((-14.5\") ഉം -15.\nlong closest_integer(std::string value) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong closest_integer(std::string value) {\n  double num = std::stod(value);\n  if (num >= 0) {\n    if (num - std::floor(num) <= 0.5) {\n      return static_cast<long>(std::floor(num));\n    } else {\n      return static_cast<long>(std::ceil(num));\n    }\n  } else {\n    if (std::ceil(num) - num <= 0.5) {\n      return static_cast<long>(std::ceil(num));\n    } else {\n      return static_cast<long>(std::floor(num));\n    }\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/100",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു പോസിറ്റീവ് പൂർണ്ണസംഖ്യ n നൽകിയിട്ടുണ്ടെങ്കിൽ, നിങ്ങൾ n ലെവൽ കല്ലുകൾ ഒരു കൂമ്പാരം ഉണ്ടാക്കണം. ആദ്യ ലെവലിൽ n കല്ലുകൾ ഉണ്ട്. അടുത്ത ലെവലിലെ കല്ലുകളുടെ എണ്ണം ഇതാണ്: - n വിചിത്രമാണെങ്കിൽ അടുത്ത ഇരട്ട സംഖ്യ. - n ഇരട്ട ആണെങ്കിൽ അടുത്ത ഇരട്ട സംഖ്യ. ഒരു വെക്റ്ററിൽ ഓരോ ലെവലിലെയും കല്ലുകളുടെ എണ്ണം മടക്കുക, അവിടെ സൂചികയിലെ മൂലകം i ലെവലിലെ കല്ലുകളുടെ എണ്ണം പ്രതിനിധീകരിക്കുന്നു (i + 1). ഉദാഹരണങ്ങൾഃ >>> make_a_pile(3) (std::vector<long>{long) 3, (long) 5, (long) 7}))\nstd::vector<long> make_a_pile(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> pile;\n  long current_stones = n;\n  for (int i = 0; i < n; ++i) {\n    pile.push_back(current_stones);\n    if (current_stones % 2 != 0) {\n      current_stones += 2;\n    } else {\n      current_stones += 2;\n    }\n  }\n  return pile;\n}",
        "test": "}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n}\n"
    },
    {
        "task_id": "HumanEval/101",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് കോമകളോ സ്പെയ്സുകളോ ഉപയോഗിച്ച് വേർതിരിക്കുന്ന ഒരു സ്ട്രിംഗ് വാക്കുകൾ നൽകും. നിങ്ങളുടെ ചുമതല സ്ട്രിംഗ് വാക്കുകളായി വിഭജിച്ച് വാക്കുകളുടെ ഒരു വെക്റ്റർ തിരികെ നൽകുക എന്നതാണ്. ഉദാഹരണത്തിന്ഃ >>> words_string (((\"ഹായ്, എന്റെ പേര് ജോൺ\")) (std::vector<std::string>({(std::string) \"ഹായ്\", (std::string) \"എന്റെ\", (std::string) \"പേര്\", (std::string) \"is\", (std::string) \"ജോൺ\"}) >>> words_string (((\"ഒന്ന്, രണ്ട്, മൂന്ന്, നാല്, അഞ്ച്, ആറ്\")) (std::vector<std::string>{(stdstring) \"ഒന്ന്\", (std::string) \"രണ്ട്\", (std::string) \"മൂന്ന്\", (std::string) \"നാലാമത്\", (std::string) \"അഞ്ചാമത്\", (std::string) \"ആറ്\"})\nstd::vector<std::string> words_string(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> words_string(std::string s) {\n  std::vector<std::string> words;\n  std::string current_word;\n  for (char c : s) {\n    if (c == ',' || c == ' ') {\n      if (!current_word.empty()) {\n        words.push_back(current_word);\n        current_word = \"\";\n      }\n    } else {\n      current_word += c;\n    }\n  }\n  if (!current_word.empty()) {\n    words.push_back(current_word);\n  }\n  return words;\n}",
        "test": "}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"gamal\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/102",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഈ ഫംഗ്ഷൻ രണ്ട് പോസിറ്റീവ് നമ്പറുകളായ x, y എന്നിവ എടുക്കുകയും [x, y] പരിധിയിലുള്ള ഏറ്റവും വലിയ ഇരട്ട സംഖ്യ തിരികെ നൽകുകയും ചെയ്യുന്നു. അത്തരം ഒരു സംഖ്യ ഇല്ലെങ്കിൽ, ഫംഗ്ഷൻ -1 നൽകണം. ഉദാഹരണത്തിന്ഃ >>> choose_num (((12), (15)) (14) >>> choose_num (((13), (12)) (-1)\nlong choose_num(long x, long y) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong choose_num(long x, long y) {\n  if (x > y) {\n    return -1;\n  }\n  long end = y;\n  if (end % 2 != 0) {\n    end--;\n  }\n  if (end < x) {\n    return -1;\n  }\n  return end;\n}",
        "test": "}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
    },
    {
        "task_id": "HumanEval/103",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// നിങ്ങൾക്ക് രണ്ട് പോസിറ്റീവ് പൂർണ്ണസംഖ്യകളായ n, m എന്നിവ നൽകിയിട്ടുണ്ട്, നിങ്ങളുടെ ചുമതല n മുതൽ m വരെയുള്ള (n, m ഉൾപ്പെടെ) പൂർണ്ണസംഖ്യകളുടെ ശരാശരി കണക്കാക്കുക എന്നതാണ്. ഉത്തരം ഏറ്റവും അടുത്തുള്ള പൂർണ്ണസംഖ്യയിലേക്ക് ചുറ്റുക, അത് ബൈനറി ആയി പരിവർത്തനം ചെയ്യുക. n m നേക്കാൾ വലുതാണെങ്കിൽ, -1 മടക്കുക. ഉദാഹരണംഃ >>> rounded_avg((1), (5)) \"0b11\" >>> rounded_avg(7), (5)) -1 >>> rounded_avg(10), (20)) \"0b1111\" >>> rounded_avg(20), (33) \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;\n    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }\n    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nUnion_std_string_long rounded_avg(long n, long m) {\n  if (n > m) {\n    return Union_std_string_long(-1);\n  }\n  double sum = 0;\n  for (long i = n; i <= m; ++i) {\n    sum += i;\n  }\n  double avg = sum / (m - n + 1);\n  long rounded_avg_long = std::round(avg);\n  if (rounded_avg_long == 0) {\n    return Union_std_string_long(\"0b0\");\n  }\n  std::string binary_string = \"\";\n  long temp = std::abs(rounded_avg_long);\n  while (temp > 0) {\n    binary_string = (temp % 2 == 0 ? \"0\" : \"1\") + binary_string;\n    temp /= 2;\n  }\n  return Union_std_string_long(\"0b\" + binary_string);\n}",
        "test": "}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
    },
    {
        "task_id": "HumanEval/104",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// പോസിറ്റീവ് പൂർണ്ണസംഖ്യകളുടെ ഒരു വെക്റ്റർ നൽകിയിട്ടുണ്ടെങ്കിൽ x. എല്ലാ ഘടകങ്ങളുടെയും ഒരു അടുക്കിയ വെക്റ്റർ മടക്കി നൽകുക. ഒരു സംഖ്യയും ഇല്ലാത്ത ഒരു വെക്റ്റർ. കുറിപ്പ്: മടക്കിയ വെക്റ്റർ വർദ്ധിച്ചുവരുന്ന ക്രമത്തിൽ അടുക്കണം. ഉദാഹരണത്തിന്ഃ >>> unique_digits(std::vector<long>({(long) 15, (long) 33, (long) 1422, (long) 1}))) (std::vector<long>{(long) 1, (long) 15, (long) 33})) >>> unique_digits(std::vector<long>{(long) 152, (long) 323, (long) 1422, (long) 10}))) (std::vector<long>(long))\nstd::vector<long> unique_digits(std::vector<long> x) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool has_even_digit(long n) {\n  std::string s = std::to_string(n);\n  for (char c : s) {\n    if ((c - '0') % 2 == 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nstd::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  for (long val : x) {\n    if (!has_even_digit(val)) {\n      result.push_back(val);\n    }\n  }\n  std::sort(result.begin(), result.end());\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n"
    },
    {
        "task_id": "HumanEval/105",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു വെക്റ്റർ പൂർണ്ണസംഖ്യകൾ നൽകിയാൽ, 1 മുതൽ 9 വരെയുള്ള പൂർണ്ണസംഖ്യകളെ അടുക്കുക, ഫലമായി വരുന്ന വെക്റ്റർ വിപരീതമാക്കുക, തുടർന്ന് ഓരോ അക്കവും അതിന്റെ അനുബന്ധ നാമത്തിൽ \"ഒന്ന്\", \"രണ്ട്\", \"മൂന്ന്\", \"നാല്\", \"അഞ്ച്\", \"ആറ്\", \"ഏഴ്\", \"എട്ട്\", \"ഒൻപത്\" എന്നിങ്ങനെ മാറ്റിസ്ഥാപിക്കുക. ഉദാഹരണത്തിന്: >>> by_length(std::vector<long>{long) 2, (long) 1, (long) 1, (long) 4, (long) 5, (long) 8, (long) 2, (long) 3}))) (std::vector<std::string>{(std::string) \"എട്ട്\", (std::string) \"അഞ്ച്\", (std::string) \"നാല്\", (std::string) \"മൂന്ന്\", (std::string) \"രണ്ട്\", \"മൂന്ന്\", \"നാല്\", \"നാല്\", \"അഞ്ച്\", \"അഞ്ച്\", \"ആറ്\", \"ഒന്നാം\", \"ആദ്യ\", \"ആദ്യ\"::string::::string::::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string::string\nstd::vector<std::string> by_length(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> by_length(std::vector<long> arr) {\n  std::vector<long> valid_numbers;\n  std::vector<std::string> result;\n  std::map<long, std::string> number_names = {\n      {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"},\n      {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n  for (long num : arr) {\n    if (num >= 1 && num <= 9) {\n      valid_numbers.push_back(num);\n    }\n  }\n  std::sort(valid_numbers.begin(), valid_numbers.end());\n  std::reverse(valid_numbers.begin(), valid_numbers.end());\n  for (long num : valid_numbers) {\n    result.push_back(number_names[num]);\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3, (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9, (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"Eight\", (std::string)\"Four\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/106",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n നെ ഒരു പാരാമീറ്ററായി എടുക്കുകയും, n വലുപ്പമുള്ള ഒരു വെക്റ്റർ നൽകുകയും ചെയ്യുന്ന f ഫംഗ്ഷൻ നടപ്പിലാക്കുക, i സൂചികയിലെ മൂല്യം i യുടെ ഫാക്ടോറിയൽ ആണെങ്കിൽ i ഇരട്ടയോ അല്ലെങ്കിൽ 1 മുതൽ i വരെയുള്ള സംഖ്യകളുടെ ആകെത്തുകയാണോ. i 1 മുതൽ ആരംഭിക്കുന്നു. i യുടെ ഫാക്ടോറിയൽ 1 മുതൽ i വരെയുള്ള സംഖ്യകളുടെ ഗുണനമാണ് (1 * 2 * . . . * i. ഉദാഹരണംഃ >>> f (((5)) (std::vector<long>{(long) 1, (long) 2, (long) 6, (long) 24, (long) 15}))\nstd::vector<long> f(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(long n) {\n  std::vector<long> result;\n  for (long i = 1; i <= n; ++i) {\n    if (i % 2 == 0) {\n      long factorial = 1;\n      for (long j = 1; j <= i; ++j) {\n        factorial *= j;\n      }\n      result.push_back(factorial);\n    } else {\n      long sum = 0;\n      for (long j = 1; j <= i; ++j) {\n        sum += j;\n      }\n      result.push_back(sum);\n    }\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = f;\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15, (long)720, (long)28})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)2, (long)6})));\n}\n"
    },
    {
        "task_id": "HumanEval/107",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു പോസിറ്റീവ് പൂർണ്ണസംഖ്യ n നൽകിയിട്ടുണ്ടെങ്കിൽ, പരിധിയിൽ വരുന്ന പാര, പാര ഇല്ലാത്ത പൂർണ്ണസംഖ്യകളുടെ എണ്ണം ഉള്ള ഒരു ടപ്പിൾ നൽകുക. ഉദാഹരണം 1: >>> even_odd_palindrome (((3)) (std::make_tuple (((1, 2)) വിശദീകരണം: പൂർണ്ണസംഖ്യകളുടെ പാലിൻഡ്രോം 1, 2, 3. അവയിൽ ഒന്ന് പാരും അവയിൽ രണ്ടെണ്ണം പാരും ആണ്. ഉദാഹരണം 2: >>> even_odd_palindrome (((12)) (std::make_tuple (((4, 6)) വിശദീകരണം: പൂർണ്ണസംഖ്യകളുടെ പാലിൻഡ്രോം 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. അവയിൽ നാലെണ്ണം പാരും അവയിൽ 6 എണ്ണം പാരും ആണ്. കുറിപ്പ്ഃ 1. < 1 = n = 10 ^ 3 2. മടക്കിയ ടപ്പിൾ യഥാക്രമം പാര, പാര ഇല്ലാത്ത പൂർണ്ണസംഖ്യകളുടെ പാലിൻഡ്രോമുകളുടെ എണ്ണം ഉണ്ട്.\nstd::tuple<long, long> even_odd_palindrome(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_palindrome(long num) {\n  std::string s = std::to_string(num);\n  std::string reversed_s = s;\n  std::reverse(reversed_s.begin(), reversed_s.end());\n  return s == reversed_s;\n}\n\nstd::tuple<long, long> even_odd_palindrome(long n) {\n  long even_count = 0;\n  long odd_count = 0;\n  for (long i = 1; i <= n; ++i) {\n    if (is_palindrome(i)) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n  }\n  return std::make_tuple(even_count, odd_count);\n}",
        "test": "}\nint main() {\n    auto candidate = even_odd_palindrome;\n    assert(candidate((123)) == (std::make_tuple(8, 13)));\n    assert(candidate((12)) == (std::make_tuple(4, 6)));\n    assert(candidate((3)) == (std::make_tuple(1, 2)));\n    assert(candidate((63)) == (std::make_tuple(6, 8)));\n    assert(candidate((25)) == (std::make_tuple(5, 6)));\n    assert(candidate((19)) == (std::make_tuple(4, 6)));\n    assert(candidate((9)) == (std::make_tuple(4, 5)));\n    assert(candidate((1)) == (std::make_tuple(0, 1)));\n}\n"
    },
    {
        "task_id": "HumanEval/108",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു ഫംഗ്ഷൻ count_nums എഴുതുക, അത് ഒരു പൂർണ്ണസംഖ്യകളുടെ വെക്റ്റർ എടുത്ത് അക്കങ്ങളുടെ സംഖ്യയുള്ള ഘടകങ്ങളുടെ എണ്ണം തിരികെ നൽകുന്നു. ഒരു സംഖ്യ നെഗറ്റീവ് ആണെങ്കിൽ, അതിന്റെ ആദ്യ ഒപ്പിട്ട അക്കവും നെഗറ്റീവ് ആയിരിക്കും: ഉദാഹരണത്തിന് -123 ന് -1, 2, 3. >>> count_nums (((std::vector<long>())) (0) >>> count_nums (((std::vector<long>{(long) -1, (long) -11, (long) -11}))) (1) >>> count_nums (((std::vector<long>{(long) -1, (long) -1, (long) -2} (3))))\nlong count_nums(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_digits_signed(long n) {\n  std::string s = std::to_string(n);\n  long sum = 0;\n  for (long i = 0; i < s.length(); ++i) {\n    if (i == 0 && s[i] == '-') {\n      if (s.length() > 1) {\n        sum -= (s[i + 1] - '0');\n        i++;\n      }\n    } else {\n      sum += (s[i] - '0');\n    }\n  }\n  return sum;\n}\n\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n  for (long num : arr) {\n    if (sum_digits_signed(num) > 0) {\n      count++;\n    }\n  }\n  return count;\n}",
        "test": "}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12, (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/109",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// N പൂർണ്ണസംഖ്യകളുടെ ഒരു വെക്റ്റർ 'arr' നമുക്കുണ്ട് arr[1], arr[2], ..., arr[N].വെക്റ്ററിലെ സംഖ്യകൾ ക്രമരഹിതമായി ക്രമീകരിക്കും. നൽകിയിരിക്കുന്ന വെക്റ്ററിൽ ഇനിപ്പറയുന്ന പ്രവർത്തനം നടത്തുന്നതിലൂടെ ഒരു വെക്റ്റർ കുറയാത്ത ക്രമത്തിൽ അടുക്കാൻ കഴിയുമോ എന്ന് നിർണ്ണയിക്കുക എന്നതാണ് നിങ്ങളുടെ ചുമതല: നിങ്ങൾക്ക് എത്ര തവണ വേണമെങ്കിലും വലത്തേക്ക് നീങ്ങാൻ കഴിയും. ഒരു വലത്തേക്ക് നീങ്ങുന്ന പ്രവർത്തനം അർത്ഥമാക്കുന്നത് വെക്റ്ററിന്റെ എല്ലാ ഘടകങ്ങളും ശരിയായ ദിശയിൽ ഒരു സ്ഥാനം മാറ്റുക എന്നാണ്. വെക്റ്ററിന്റെ അവസാന ഘടകം വെക്റ്ററിലെ ആരംഭ സ്ഥാനത്തേക്ക് നീങ്ങും, അതായത് 0th സൂചിക. മുകളിലുള്ള പ്രവർത്തനം നടത്തുന്നതിലൂടെ അടുക്കിയ വെക്റ്റർ നേടാൻ കഴിയുമെങ്കിൽ true return false. നൽകിയിരിക്കുന്ന വെക്റ്റർ ശൂന്യമാണെങ്കിൽ true return false. കുറിപ്പ്ഃ നൽകിയിരിക്കുന്ന വെക്റ്ററിന് അദ്വിതീയ ഘടകങ്ങൾ ഉണ്ടെന്ന് ഉറപ്പുനൽകുന്നു. ഉദാഹരണത്തിന്ഃ >>> move_one_ball_{((st_vector_{((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\nbool move_one_ball(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool move_one_ball(std::vector<long> arr) {\n  if (arr.empty()) {\n    return true;\n  }\n  int n = arr.size();\n  std::vector<long> sorted_arr = arr;\n  std::sort(sorted_arr.begin(), sorted_arr.end());\n  for (int shift = 0; shift < n; ++shift) {\n    std::vector<long> shifted_arr(n);\n    for (int i = 0; i < n; ++i) {\n      shifted_arr[i] = arr[(i - shift + n) % n];\n    }\n    if (shifted_arr == sorted_arr) {\n      return true;\n    }\n  }\n  return false;\n}",
        "test": "}\nint main() {\n    auto candidate = move_one_ball;\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)10, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/110",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഈ പ്രശ്നത്തിൽ, നിങ്ങൾ രണ്ട് സംഖ്യകളുടെ വെക്റ്ററുകൾ എടുക്കുന്ന ഒരു ഫംഗ്ഷൻ നടപ്പിലാക്കും, അവയ്ക്കിടയിൽ ഒരു എക്സ്ചേഞ്ച് നടത്താൻ സാധിക്കുമോ എന്ന് നിർണ്ണയിക്കുന്നു lst1 ഒരു സംഖ്യകളുടെ വെക്റ്ററായി മാറ്റാൻ. lst1 നും lst2 നും ഇടയിൽ എക്സ്ചേഞ്ച് ചെയ്ത ഘടകങ്ങളുടെ എണ്ണത്തിന് പരിധിയില്ല. lst1 ന്റെ എല്ലാ ഘടകങ്ങളും ഇരട്ടയാക്കാൻ lst1 നും lst2 നും ഇടയിൽ ഘടകങ്ങൾ കൈമാറാൻ കഴിയുമെങ്കിൽ, \"YES\" എന്ന് മടങ്ങുക. അല്ലെങ്കിൽ, \"NO\" എന്ന് മടങ്ങുക. ഉദാഹരണത്തിന്ഃ >>> exchange((std::vector<>(long) {1, (long) 2, (long) 3, (long) 4})), (std::vector<>(long) {1, (long) 2, (long) 3, (long) 4}) (\"YES\") >>>((std::exchange<> vector<>{1, (long) 2, (long) 3, (long) 4} (std::vector<>(long) {1, (long) 5} (long) എന്നീ എൻട്രി ശൂന്യമല്ലെന്ന് കരുതപ്പെടുന്നു.\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n  long odd_count_lst1 = 0;\n  for (long num : lst1) {\n    if (num % 2 != 0) {\n      odd_count_lst1++;\n    }\n  }\n  long even_count_lst2 = 0;\n  for (long num : lst2) {\n    if (num % 2 == 0) {\n      even_count_lst2++;\n    }\n  }\n  if (even_count_lst2 >= odd_count_lst1) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = exchange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)2, (long)1, (long)4, (long)3}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)3}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)6, (long)1, (long)8, (long)9})), (std::vector<long>({(long)3, (long)5, (long)5, (long)1, (long)1, (long)1}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)100, (long)200})), (std::vector<long>({(long)200, (long)200}))) == (\"YES\"));\n}\n"
    },
    {
        "task_id": "HumanEval/111",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സ്പെയ്സ് വേർതിരിച്ച ചെറിയ അക്ഷരങ്ങളെ പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് നൽകിയിട്ടുണ്ടെങ്കിൽ, ഏറ്റവും കൂടുതൽ ആവർത്തനമുള്ള അക്ഷരത്തിന്റെ ഒരു മാപ്പ് തിരികെ നൽകുക. നിരവധി അക്ഷരങ്ങൾ ഒരേ സംഭവമുണ്ടെങ്കിൽ, അവയെല്ലാം തിരികെ നൽകുക. ഉദാഹരണംഃ >>> ഹിസ്റ്റോഗ്രാം (a, 1), {\"b\", 1}, {\"c\", 1}}) >>> ഹിസ്റ്റോഗ്രാം (a, b) (long) >>> ഹിസ്റ്റോഗ്രാം (a, b, 2)) (a, b, c, b) (long) >>> ഹിസ്റ്റോഗ്രാം (a, b, c, b) (map) >>> ഹിസ്റ്റോഗ്രാം (b, b, b) (map) >>> ഹിസ്റ്റോഗ്രാം (a, b, b, c, b) (long) >>> ഹിസ്റ്റോഗ്രാം (a, b, b, b) (long)\nstd::map<std::string,long> histogram(std::string test) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> histogram(std::string test) {\n  std::map<std::string, long> counts;\n  std::string current_word;\n  std::stringstream ss(test);\n  while (ss >> current_word) {\n    counts[current_word]++;\n  }\n  if (counts.empty()) {\n    return {};\n  }\n  long max_count = 0;\n  for (const auto& pair : counts) {\n    if (pair.second > max_count) {\n      max_count = pair.second;\n    }\n  }\n  std::map<std::string, long> result;\n  for (const auto& pair : counts) {\n    if (pair.second == max_count) {\n      result[pair.first] = pair.second;\n    }\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n"
    },
    {
        "task_id": "HumanEval/112",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ടാസ്ക് നമുക്ക് രണ്ട് സ്ട്രിങ്ങുകൾ s, c എന്നിവ നൽകിയിരിക്കുന്നു, s ലെ ഏതെങ്കിലും പ്രതീകത്തിന് തുല്യമായ എല്ലാ പ്രതീകങ്ങളും നിങ്ങൾ ഇല്ലാതാക്കണം, തുടർന്ന് ഫല സ്ട്രിംഗ് പാലിൻഡ്രോം ആണോ എന്ന് പരിശോധിക്കുക. ഒരു സ്ട്രിംഗ് മുന്നോട്ട് പോലെ പിന്നോട്ട് വായിക്കുകയാണെങ്കിൽ അതിനെ പാലിൻഡ്രോം എന്ന് വിളിക്കുന്നു. ഫല സ്ട്രിംഗ് അടങ്ങിയ ഒരു ടപ്പിൾ നിങ്ങൾ പരിശോധനയ്ക്കായി true/false നൽകണം. ഉദാഹരണം >>> reverse_delete((\"abcde\"), (\"ae\")) (std::make_tuple(\"bcd\", false)) >>> reverse_delete(\"abcdef\"), (\"b\") (std::make_tuple(\"acdef\",)) >>> reverse_delete((abcded\", false)) >>> reverse_delete(abcded\", false (\"abcba\") (std::make_tuple\", true))\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n  std::string result = \"\";\n  std::unordered_set<char> chars_to_delete(c.begin(), c.end());\n  for (char ch : s) {\n    if (chars_to_delete.find(ch) == chars_to_delete.end()) {\n      result += ch;\n    }\n  }\n  std::string reversed_result = result;\n  std::reverse(reversed_result.begin(), reversed_result.end());\n  return std::make_tuple(result, result == reversed_result);\n}",
        "test": "}\nint main() {\n    auto candidate = reverse_delete;\n    assert(candidate((\"abcde\"), (\"ae\")) == (std::make_tuple(\"bcd\", false)));\n    assert(candidate((\"abcdef\"), (\"b\")) == (std::make_tuple(\"acdef\", false)));\n    assert(candidate((\"abcdedcba\"), (\"ab\")) == (std::make_tuple(\"cdedc\", true)));\n    assert(candidate((\"dwik\"), (\"w\")) == (std::make_tuple(\"dik\", false)));\n    assert(candidate((\"a\"), (\"a\")) == (std::make_tuple(\"\", true)));\n    assert(candidate((\"abcdedcba\"), (\"\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"abcdedcba\"), (\"v\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"vabba\"), (\"v\")) == (std::make_tuple(\"abba\", true)));\n    assert(candidate((\"mamma\"), (\"mia\")) == (std::make_tuple(\"\", true)));\n}\n"
    },
    {
        "task_id": "HumanEval/113",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഓരോ സ്ട്രിങ്ങും അക്കങ്ങൾ മാത്രമുള്ള ഒരു സ്ട്രിംഗ് വെക്റ്റർ നൽകിയിട്ടുണ്ടെങ്കിൽ, ഒരു വെക്റ്റർ മടക്കിനൽകുക. ഔട്ട്പുട്ടിന്റെ ഓരോ ഘടകവും i \"ഇൻപുട്ടിന്റെ സ്ട്രിംഗ് i ലെ ഒറ്റപ്പെട്ട ഘടകങ്ങളുടെ എണ്ണം ആയിരിക്കണം. \" എല്ലാ i- കളും ഇൻപുട്ടിന്റെ i- ആം സ്ട്രിംഗിലെ ഒറ്റപ്പെട്ട അക്കങ്ങളുടെ എണ്ണം ഉപയോഗിച്ച് മാറ്റിസ്ഥാപിക്കണം. >>> odd_count((std::vector<std::string>(({std::string) \"1234567\"}))) (std::vector<std::string>({stdstring) \" 4n ന്റെ str4 ന്റെ 4n ന്റെ ഒറ്റപ്പെട്ട ഘടകങ്ങളുടെ എണ്ണം. \"})) >>> odd_count(stdvector<stdstring>::{stdstring>:{(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n  std::vector<std::string> result;\n  for (const std::string& s : lst) {\n    int count = 0;\n    for (char c : s) {\n      if ((c - '0') % 2 != 0) {\n        count++;\n      }\n    }\n    std::string count_str = std::to_string(count);\n    std::string modified_s = s;\n    for (char& c : modified_s) {\n      if (isdigit(c) && (c - '0') % 2 != 0) {\n        c = count_str[0];\n      }\n    }\n    result.push_back(\"the number of odd elements \" + count_str + \"n the str\" + modified_s + \"ng \" + modified_s + \" of the \" + modified_s + \"nput.\");\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = odd_count;\n    assert(candidate((std::vector<std::string>({(std::string)\"1234567\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"271\", (std::string)\"137\", (std::string)\"314\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (std::string)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/114",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു വെക്റ്റർ നൽകിയിരിക്കുന്ന സംഖ്യകളുടെ സംഖ്യകളുടെ സംഖ്യകളുടെ സംഖ്യയുടെ ഏറ്റവും കുറഞ്ഞ തുക കണ്ടെത്തുക. ഉദാഹരണം >>> minSubArraySum(((std::vector<long>({long) 2, (long) 3, (long) 4, (long) 1, (long) 2, (long) 4}))) (1) >>> minSubArraySum(std::vector<long>{(long) -1, (long) -2, (long) -3)))) (-6)\nlong minSubArraySum(std::vector<long> nums) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.empty()) {\n    throw std::invalid_argument(\"Input vector cannot be empty.\");\n  }\n  long min_so_far = nums[0];\n  long current_min = nums[0];\n  for (size_t i = 1; i < nums.size(); ++i) {\n    current_min = std::min(nums[i], current_min + nums[i]);\n    min_so_far = std::min(min_so_far, current_min);\n  }\n  return min_so_far;\n}",
        "test": "}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999}))) == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0, (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100, (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100, (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10}))) == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
    },
    {
        "task_id": "HumanEval/115",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് കിണറുകളുടെ ഒരു ചതുരാകൃതിയിലുള്ള ഗ്രിഡ് നൽകിയിരിക്കുന്നു. ഓരോ വരിയും ഒരു കിണറിനെ പ്രതിനിധീകരിക്കുന്നു, ഓരോ വരിയിലും 1 ഒരു ജലത്തിന്റെ ഒരു യൂണിറ്റിനെ പ്രതിനിധീകരിക്കുന്നു. ഓരോ കിണറിനും അതിൽ നിന്ന് വെള്ളം വേർതിരിച്ചെടുക്കാൻ ഉപയോഗിക്കാവുന്ന ഒരു ബക്കറ്റ് ഉണ്ട്, എല്ലാ ബക്കറ്റുകളും ഒരേ ശേഷിയുള്ളവയാണ്. നിങ്ങളുടെ ചുമതല കിണറുകൾ ശൂന്യമാക്കാൻ ബക്കറ്റുകൾ ഉപയോഗിക്കുക എന്നതാണ്. ബക്കറ്റുകൾ കുറയ്ക്കാൻ ആവശ്യമായ തവണ എണ്ണം ഔട്ട്പുട്ട് ചെയ്യുക. ഉദാഹരണം 1: >>> max_fill((long:st:vector10,st:vector10,st:vector11,st:vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long) vector1 (long vector1 (long) vector1 (long vector1 (long) vector1 (long vector1 (long) vector1 (long vector1 long) vector (long vector1 (long vector) vector (long vector)\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n  long bucket_lowering_count = 0;\n  for (const auto& row : grid) {\n    long water_in_well = 0;\n    for (long unit : row) {\n      water_in_well += unit;\n    }\n    bucket_lowering_count += (water_in_well + capacity - 1) / capacity;\n  }\n  return bucket_lowering_count;\n}",
        "test": "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
    },
    {
        "task_id": "HumanEval/116",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഈ കറ്റയിൽ, നിങ്ങൾ ഒരു നെഗറ്റീവ് അല്ലാത്ത സംഖ്യകളുടെ വെക്റ്റർ അവരുടെ ബൈനറി പ്രാതിനിധ്യത്തിലെ ഒന്നുകളുടെ എണ്ണം അനുസരിച്ച് വർദ്ധിച്ചുവരുന്ന ക്രമത്തിൽ അടുക്കണം. സമാനമായ ഒന്നുകളുടെ എണ്ണത്തിന് ദശാംശ മൂല്യത്തെ അടിസ്ഥാനമാക്കി അടുക്കുക. ഇത് ഇതുപോലെ നടപ്പിലാക്കണംഃ >>> sort_array((std::vector<long>{(long) 1, (long) 5, (long) 2, (long) 3, (long) 4}))) (std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 4, (long) 5}) >>> sort_array(std::vector<long>{(long-2, (long) 3, (long) 4, (long) 5, (long) 6}))) (std::vector<long>{(long>{-6, (long) 5, (long) 4, (long) 3, (long) 2} >>> sort_array: vector<long>{(long>0, (long) 1, (long) 3, (long)) (long) 4, (long) 1, (long) (long) (long) (long) (long)) (long vector) (long) (long) (long)\nstd::vector<long> sort_array(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nint count_set_bits(long n) {\n  int count = 0;\n  if (n < 0) {\n    n = std::abs(n);\n  }\n  while (n > 0) {\n    n &= (n - 1);\n    count++;\n  }\n  return count;\n}\n\nbool compare(long a, long b) {\n  int bits_a = count_set_bits(a);\n  int bits_b = count_set_bits(b);\n  if (bits_a != bits_b) {\n    return bits_a < bits_b;\n  }\n  return a < b;\n}\n\nstd::vector<long> sort_array(std::vector<long> arr) {\n  std::sort(arr.begin(), arr.end(), compare);\n  return arr;\n}",
        "test": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n}\n"
    },
    {
        "task_id": "HumanEval/117",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സ്ട്രിംഗ് s ഉം ഒരു സ്വാഭാവിക സംഖ്യ n ഉം നൽകിയിട്ടുണ്ടെങ്കിൽ, ഈ വാക്കുകൾ സ്ട്രിംഗ് s ൽ ദൃശ്യമാകുന്നതിന് കൃത്യമായി n സ്വരങ്ങൾ അടങ്ങിയിരിക്കുന്ന സ്ട്രിംഗ് s യിൽ നിന്നുള്ള എല്ലാ വാക്കുകളുടെയും ഒരു വെക്റ്റർ മടക്കിനൽകുന്ന ഒരു ഫംഗ്ഷൻ നടപ്പിലാക്കാൻ നിങ്ങൾ ചുമതലപ്പെടുത്തിയിട്ടുണ്ട്. സ്ട്രിംഗ് s ശൂന്യമാണെങ്കിൽ ഫംഗ്ഷൻ ഒരു ശൂന്യമായ വെക്റ്റർ മടക്കിനൽകണം. കുറിപ്പ്ഃ ഇൻപുട്ട് സ്ട്രിംഗിൽ അക്ഷരങ്ങളും സ്പെയ്സുകളും മാത്രമേ അടങ്ങിയിട്ടുള്ളൂ എന്ന് നിങ്ങൾ അനുമാനിക്കാം. ഉദാഹരണങ്ങൾഃ >>> select_words (((\"മറിയത്തിന് ഒരു ചെറിയ ആട്ടിൻ ഉണ്ടായിരുന്നു\"), (4)) (std::vector<std::vector>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string>string<string>string>string>string>string>string>string>string>string>string>string>str\nstd::vector<std::string> select_words(std::string s, long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_consonant(char c) {\n  c = tolower(c);\n  return (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');\n}\n\nstd::vector<std::string> select_words(std::string s, long n) {\n  std::vector<std::string> result;\n  std::string current_word;\n  for (char c : s) {\n    if (c == ' ') {\n      long consonant_count = 0;\n      for (char word_char : current_word) {\n        if (is_consonant(word_char)) {\n          consonant_count++;\n        }\n      }\n      if (consonant_count == n) {\n        result.push_back(current_word);\n      }\n      current_word = \"\";\n    } else {\n      current_word += c;\n    }\n  }\n  long consonant_count = 0;\n  for (char word_char : current_word) {\n    if (is_consonant(word_char)) {\n      consonant_count++;\n    }\n  }\n  if (consonant_count == n) {\n    result.push_back(current_word);\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/118",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് ഒരു വാക്ക് നൽകിയിരിക്കുന്നു. നിങ്ങളുടെ ചുമതല വാക്കിന്റെ വലതുഭാഗത്ത് നിന്ന് രണ്ട് സ്വരാക്ഷരങ്ങൾക്കിടയിൽ നിൽക്കുന്ന ഏറ്റവും അടുത്ത സ്വരാക്ഷരം കണ്ടെത്തുക എന്നതാണ് (കേസ് സെൻസിറ്റീവ്). തുടക്കത്തിലും അവസാനത്തിലും ഉള്ള സ്വരാക്ഷരങ്ങൾ കണക്കാക്കില്ല. മുകളിലുള്ള വ്യവസ്ഥ പാലിച്ച ഒരു സ്വരാക്ഷരവും കണ്ടെത്തിയില്ലെങ്കിൽ ശൂന്യമായ സ്ട്രിംഗ് മടക്കുക. തന്നിരിക്കുന്ന സ്ട്രിംഗിൽ ഇംഗ്ലീഷ് അക്ഷരം മാത്രമേ ഉള്ളൂവെന്ന് നിങ്ങൾ അനുമാനിക്കാം. ഉദാഹരണംഃ >>> get_closest_vowel((\"yogurt\")) (\"u\") >>> get_closest_vowel((\"FULL\")) (\"U\") >>> get_closest_vowel(\"quick\") (\"\") >>> get_closest_vowel((\"ab\") (\"\")\nstd::string get_closest_vowel(std::string word) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_vowel(char c) {\n  c = tolower(c);\n  return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n}\n\nbool is_consonant(char c) {\n  return isalpha(c) && !is_vowel(c);\n}\n\nstd::string get_closest_vowel(std::string word) {\n  if (word.length() < 3) {\n    return \"\";\n  }\n  for (int i = word.length() - 2; i >= 1; --i) {\n    if (is_vowel(word[i]) && is_consonant(word[i - 1]) && is_consonant(word[i + 1])) {\n      return std::string(1, word[i]);\n    }\n  }\n  return \"\";\n}",
        "test": "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
    },
    {
        "task_id": "HumanEval/119",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് രണ്ട് സ്ട്രിങ്ങുകളുടെ ഒരു വെക്റ്റർ നൽകിയിട്ടുണ്ട്, രണ്ട് സ്ട്രിങ്ങുകളും തുറന്ന പരാൻതീസിസ് '(' അല്ലെങ്കിൽ അടച്ച പരാൻതീസിസ് ') ' മാത്രമാണ്. രണ്ട് സ്ട്രിങ്ങുകളും ഒരു ക്രമത്തിൽ ബന്ധിപ്പിക്കാൻ കഴിയുമോ എന്ന് പരിശോധിക്കുക എന്നതാണ് നിങ്ങളുടെ ജോലി, തത്ഫലമായുണ്ടാകുന്ന സ്ട്രിംഗ് നല്ലതായിരിക്കും. എസ് ലെ എല്ലാ പരാൻതീസിസുകളും സന്തുലിതമാണെങ്കിൽ മാത്രമേ ഒരു സ്ട്രിംഗ് എസ് നല്ലതായി കണക്കാക്കൂ. ഉദാഹരണത്തിന്ഃ സ്ട്രിംഗ് '(()) 'നല്ലതാണെങ്കിലും സ്ട്രിംഗ് '())' അല്ല. ഒരു നല്ല സ്ട്രിംഗ് നിർമ്മിക്കാൻ ഒരു മാർഗമുണ്ടെങ്കിൽ 'അതെ' എന്ന് മടങ്ങുക, അല്ലാത്തപക്ഷം 'ഇല്ല' എന്ന് മടങ്ങുക. ഉദാഹരണങ്ങൾഃ >>> match_parens((std:: vector<std:: string>{(((stdstring) \") \", (((std::string) \")) (\"അതെ\") >>> match_parens<std:: vector<std>{(stdstring>\" (((stdstring)) (\"ഇല്ല\")\nstd::string match_parens(std::vector<std::string> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_good(const std::string& s) {\n  int balance = 0;\n  for (char c : s) {\n    if (c == '(') {\n      balance++;\n    } else if (c == ')') {\n      balance--;\n    }\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return balance == 0;\n}\n\nstd::string match_parens(std::vector<std::string> lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  if (is_good(s1 + s2) || is_good(s2 + s1)) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
    },
    {
        "task_id": "HumanEval/120",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു വെക്റ്റർ arr എന്ന സംഖ്യയും ഒരു പോസിറ്റീവ് ഇന്റീജർ k ഉം നൽകിയിട്ടുണ്ടെങ്കിൽ, arr ലെ പരമാവധി k സംഖ്യകളുള്ള k നീളമുള്ള ഒരു അടുക്കിയ വെക്റ്റർ മടക്കി നൽകുക. ഉദാഹരണം 1: >>> പരമാവധി((std::vector<long>({long) -3, (long) -4, (long) -4, (long) -5}), (3)) (std::vector<long>({long) -4, (long) -4, (long) -5}) ഉദാഹരണം 2: >>> പരമാവധി((std::vector<long>({long) -4, (long) -4})), (2)) (std::vector<long>{(long) -4, (long) -4}) ഉദാഹരണം 3: >>> പരമാവധി((std::vector<<long>{(long) -3, (long) -2, (long) -1, (long) -2, (long) -1, (long) -2, (long) -1, (long) (1)) (std::vector<long>) -2: 1. വെക്റ്ററിന്റെ നീളം 1000 ന്റെ പരിധിക്കാരത്തിൽ ആയിരിക്കും. (കുറിപ്പ്ഃ 1000 ന്റെ പരിധിയിൽ ആയിരിക്കും) ∙ len-1 ന്റെ മൂലകങ്ങളുടെ ശ്രേണിയിൽ ഘടകങ്ങൾ 1000 ആയിരിക്കും.\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n  std::sort(arr.rbegin(), arr.rend());\n  std::vector<long> result;\n  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {\n    result.push_back(arr[i]);\n  }\n  std::sort(result.begin(), result.end());\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5, (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13, (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5, (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10, (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/121",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു നോൺ-ശൂന്യമായ വെക്റ്റർ നൽകിയിട്ടുണ്ടെങ്കിൽ, സമ സ്ഥാനങ്ങളിലുള്ള എല്ലാ ഒറ്റപ്പെട്ട ഘടകങ്ങളുടെയും തുക തിരികെ നൽകുക. ഉദാഹരണങ്ങൾ >>> പരിഹാരം (((std::vector<long>({(long) 5, (long) 8, (long) 7, (long) 1}))) (12) >>> പരിഹാരം (((std::vector<long>({(long) 3, (long) 3, (long) 3, (long) 3}))) (9) >>> പരിഹാരം (((std::vector<>(({(long) 30, (long) 13, (long) 24, (long) 321}))) (0)\nlong solution(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong solution(std::vector<long> lst) {\n  long sum = 0;\n  for (long i = 0; i < lst.size(); i += 2) {\n    if (lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5, (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3, (long)13, (long)2, (long)9}))) == (3));\n}\n"
    },
    {
        "task_id": "HumanEval/122",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു പൂർണ്ണസംഖ്യ arr ന്റെയും k ന്റെയും ശൂന്യമല്ലാത്ത വെക്റ്റർ നൽകിയിട്ടുണ്ടെങ്കിൽ, arr ന്റെ ആദ്യ k ഘടകങ്ങളിൽ നിന്ന് പരമാവധി രണ്ട് അക്കങ്ങളുള്ള മൂലകങ്ങളുടെ തുക നൽകുക. ഉദാഹരണംഃ >>> add_elements((std::vector<long>({long) 111, (long) 21, (long) 3, (long) 4000, (long) 5, (long) 6, (long) 7, (long) 8, (long) 9})), (4)) (24) നിയന്ത്രണങ്ങൾ: 1. 1 <= len(arr) <= 100 2. 1 <= k <= lenarr)\nlong add_elements(std::vector<long> arr, long k) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {\n    if (arr[i] >= -99 && arr[i] <= 99) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11, (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/123",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു പോസിറ്റീവ് പൂർണ്ണസംഖ്യ n നൽകിയിട്ടുണ്ടെങ്കിൽ, ക്ലോട്ട്സ് ശ്രേണിയിൽ അസമമായ സംഖ്യകൾ ഉള്ള ഒരു അടുക്കിയ വെക്റ്റർ മടക്കിനൽകുക. ഏതെങ്കിലും പോസിറ്റീവ് പൂർണ്ണസംഖ്യ n ഉപയോഗിച്ച് ആരംഭിക്കുക. തുടർന്ന് ഓരോ പദവും മുമ്പത്തെ പദത്തിൽ നിന്ന് ഇനിപ്പറയുന്ന രീതിയിൽ ലഭിക്കുന്നുഃ മുമ്പത്തെ പദം ഇരട്ടയാണെങ്കിൽ, അടുത്ത പദം മുമ്പത്തെ പദത്തിന്റെ പകുതിയാണ്. മുമ്പത്തെ പദം വിചിത്രമാണെങ്കിൽ, അടുത്ത പദം മുമ്പത്തെ പദത്തിന്റെ 3 മടങ്ങ് + 1. n ന്റെ മൂല്യം എന്തുതന്നെയായാലും, ശ്രേണി എല്ലായ്പ്പോഴും 1. നോട്ട്ഃ 1. Collatz(1) [1] ആണ്. 2. വർദ്ധിച്ചുവരുന്ന ക്രമത്തിൽ അടുക്കിയ വെക്റ്റർ മടക്കി. ഉദാഹരണത്തിന്ഃ get_odd_collatz5) റിട്ടേൺ ചെയ്യുന്നു [1, 5] 5 നുള്ള കോൾട്ട്സ് ശ്രേണി [5, 8, 16, 4, 2, 1], അതിനാൽ അസമമായ സംഖ്യകൾ 1, 5 മാത്രമാണ്. >>> get_odd_collatz (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\nstd::vector<long> get_odd_collatz(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> get_odd_collatz(long n) {\n  std::vector<long> odd_numbers;\n  std::unordered_set<long> seen;\n  long current = n;\n  while (seen.find(current) == seen.end()) {\n    seen.insert(current);\n    if (current % 2 != 0) {\n      odd_numbers.push_back(current);\n    }\n    if (current == 1) {\n      break;\n    }\n    if (current % 2 == 0) {\n      current /= 2;\n    } else {\n      current = 3 * current + 1;\n    }\n  }\n  std::sort(odd_numbers.begin(), odd_numbers.end());\n  return odd_numbers;\n}",
        "test": "}\nint main() {\n    auto candidate = get_odd_collatz;\n    assert(candidate((14)) == (std::vector<long>({(long)1, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)5})));\n    assert(candidate((12)) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n}\n"
    },
    {
        "task_id": "HumanEval/124",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു നിശ്ചിത തീയതി സ്ട്രിംഗ് സാധൂകരിക്കുന്ന ഒരു ഫംഗ്ഷൻ നിങ്ങൾ എഴുതണം, കൂടാതെ തീയതി സാധുവാണെങ്കിൽ ശരി എന്ന് നൽകും. ഇനിപ്പറയുന്ന എല്ലാ നിയമങ്ങളും പാലിച്ചാൽ തീയതി സാധുവായിരിക്കും: 1. തീയതി സ്ട്രിംഗ് ശൂന്യമല്ല. 2. മാസങ്ങളിൽ 1,3,5,7,8,10,12 ദിവസങ്ങളുടെ എണ്ണം 1 ൽ കുറവോ 31 ദിവസത്തിൽ കൂടുതലോ ആയിരിക്കരുത്. മാസങ്ങളിൽ 4,6,9,11 ദിവസങ്ങളുടെ എണ്ണം 1 ൽ കുറവോ 30 ദിവസത്തിൽ കൂടുതലോ ആയിരിക്കരുത്. മാസത്തിൽ 29 ദിവസങ്ങളിൽ 1 ൽ കുറവോ 1 ൽ കൂടുതലോ ആയിരിക്കരുത്. 2. മാസങ്ങൾ 1 ൽ കുറവോ 12 ൽ കൂടുതലോ ആയിരിക്കരുത്. 4. തീയതി ഫോർമാറ്റിൽ ആയിരിക്കണംഃ mm-dd-yyyy >>> സാധുവായ_(തീയതി(103-11-2000\")) (സത്യമാണ് >>> സാധുവായ_തീയതി (((15-01-2012\")) (വ്യാജമാണ് >>> സാധുവായ_date ((04-040\") (വ്യാജമാണ് >>> സാധുവായ_(തീയതി 2020-06-04\") (സത്യമാണ് >>> സാധുവായ_തീയത_\"06/04/2020) (വ്യാജമാണ് >>> സാധുവായ_ത_2020)\nbool valid_date(std::string date) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool valid_date(std::string date) {\n  if (date.empty()) {\n    return false;\n  }\n  if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n    return false;\n  }\n  int month, day, year;\n  try {\n    month = std::stoi(date.substr(0, 2));\n    day = std::stoi(date.substr(3, 2));\n    year = std::stoi(date.substr(6, 4));\n  } catch (const std::invalid_argument& e) {\n    return false;\n  } catch (const std::out_of_range& e) {\n    return false;\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1) {\n    return false;\n  }\n  if (month == 2) {\n    if (day > 29) {\n      return false;\n    }\n  } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day > 30) {\n      return false;\n    }\n  } else {\n    if (day > 31) {\n      return false;\n    }\n  }\n  return true;\n}",
        "test": "}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/125",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// ഒരു വാക്ക് സ്ട്രിംഗ് നൽകിയിട്ടുണ്ടെങ്കിൽ, വെയിറ്റ്സ്പേസിൽ വിഭജിച്ച വാക്കുകളുടെ ഒരു വെക്റ്റർ മടക്കിനൽകുക, വാചകത്തിൽ വെയിറ്റ്സ്പേസുകൾ ഇല്ലെങ്കിൽ നിങ്ങൾ കോമകളിൽ വിഭജിക്കണം ',' കോമകൾ ഇല്ലെങ്കിൽ നിങ്ങൾ അക്ഷരമാലയിലെ വിചിത്രമായ ക്രമത്തിൽ ചെറിയ അക്ഷരങ്ങളുടെ എണ്ണം മടക്കിനൽകണം, ഓർഡർ (a) = 0, ഓർഡർ (b) = 1, . . . ഓർഡർ (z) = 25 ഉദാഹരണങ്ങൾ >>> split_words (c) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d)\nUnion_std_vector_std_string__long split_words(std::string txt) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;\n    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }\n    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nUnion_std_vector_std_string__long split_words(std::string txt) {\n  if (txt.find(' ') != std::string::npos) {\n    std::vector<std::string> words;\n    std::stringstream ss(txt);\n    std::string word;\n    while (ss >> word) {\n      words.push_back(word);\n    }\n    return Union_std_vector_std_string__long(words);\n  } else if (txt.find(',') != std::string::npos) {\n    std::vector<std::string> words;\n    std::string current_word;\n    for (char c : txt) {\n      if (c == ',') {\n        words.push_back(current_word);\n        current_word = \"\";\n      } else {\n        current_word += c;\n      }\n    }\n    words.push_back(current_word);\n    return Union_std_vector_std_string__long(words);\n  } else {\n    long odd_order_count = 0;\n    for (char c : txt) {\n      if (islower(c)) {\n        if ((c - 'a') % 2 != 0) {\n          odd_order_count++;\n        }\n      }\n    }\n    return Union_std_vector_std_string__long(odd_order_count);\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"}));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\")) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
    },
    {
        "task_id": "HumanEval/126",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു വെക്റ്റർ നമ്പറുകൾ നൽകിയിട്ടുണ്ടെങ്കിൽ, അവ ക്രമീകരിക്കപ്പെട്ടിട്ടുണ്ടോ ഇല്ലയോ എന്ന് തിരികെ നൽകുക. വെക്റ്ററിന് ഒരേ നമ്പറിന്റെ ഒന്നിൽ കൂടുതൽ തനിപ്പകർപ്പുകൾ ഉണ്ടെങ്കിൽ, തെറ്റായത് തിരികെ നൽകുക. നെഗറ്റീവ് നമ്പറുകളില്ലെന്നും പൂർണ്ണസംഖ്യകൾ മാത്രമേ ഉള്ളൂവെന്നും കരുതുക. ഉദാഹരണങ്ങൾ >>> is_sorted (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long_long) (long_long_long_long) (long_long_long_long_long) (long_long_long_long_long_long) (long_long_long_long_long_long_long_long_long) (long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long\nbool is_sorted(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() <= 1) {\n    return true;\n  }\n  std::map<long, int> counts;\n  for (long x : lst) {\n    counts[x]++;\n  }\n  for (auto const& [key, val] : counts) {\n    if (val > 2) {\n      return false;\n    }\n  }\n  for (size_t i = 0; i < lst.size() - 1; ++i) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "test": "}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/127",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് രണ്ട് ഇടവേളകൾ നൽകിയിരിക്കുന്നു, ഓരോ ഇടവേളയും ഒരു ജോടി പൂർണ്ണസംഖ്യകളാണ്. ഉദാഹരണത്തിന്, ഇടവേള = (തുടക്കം, അവസാനം) = (1, 2). നൽകിയിരിക്കുന്ന ഇടവേളകൾ അടച്ചതാണ്, അതായത് ഇടവേള (തുടക്കം, അവസാനം) ആരംഭവും അവസാനവും ഉൾക്കൊള്ളുന്നു. ഓരോ നിശ്ചിത ഇടവേളയ്ക്കും, അതിന്റെ ആരംഭം അതിന്റെ അവസാനത്തേക്കാൾ ചെറുതാണെന്ന് കരുതപ്പെടുന്നു. ഈ രണ്ട് ഇടവേളകളുടെ കവലയുടെ ദൈർഘ്യം ഒരു പ്രൈം നമ്പറാണോ എന്ന് നിർണ്ണയിക്കുക എന്നതാണ് നിങ്ങളുടെ ചുമതല. ഉദാഹരണത്തിന്, ഇടവേളകളുടെ കവല (1, 3), (2, 4) എന്നിവയുടെ കവല (2, 3) ആണ്, അതിന്റെ ദൈർഘ്യം 1 ആണ്, അത് ഒരു പ്രൈം നമ്പറല്ല. കവലയുടെ ദൈർഘ്യം ഒരു പ്രൈം നമ്പറാണെങ്കിൽ, \"YES\" മടങ്ങുക, അല്ലെങ്കിൽ \"NO\" മടങ്ങുക. രണ്ട് ഇടവേളകൾ കവലിക്കുന്നില്ലെങ്കിൽ, \"NO\" മടങ്ങുക. [input/output] സാമ്പിളുകൾഃ >>> intersection::((dmake_tuple1, 2), (dmake_tuple2, 3) (dmake_tuple, 4) (dmake_make, (make_make, 1, (make -0, -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -make -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  for (long i = 2; i * i <= n; ++i) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n  long start1 = std::get(interval1);\n  long end1 = std::get(interval1);\n  long start2 = std::get(interval2);\n  long end2 = std::get(interval2);\n  long intersection_start = std::max(start1, start2);\n  long intersection_end = std::min(end1, end2);\n  long intersection_length = intersection_end - intersection_start + 1;\n  if (intersection_length <= 0) {\n    return \"NO\";\n  }\n  if (is_prime(intersection_length)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = intersection;\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(2, 3))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-1, 1)), (std::make_tuple(0, 4))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-2, 2)), (std::make_tuple(-4, 0))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-11, 2)), (std::make_tuple(-1, -1))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(3, 5))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(1, 2))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-2, -2)), (std::make_tuple(-3, -2))) == (\"NO\"));\n}\n"
    },
    {
        "task_id": "HumanEval/128",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് ഒരു വെക്റ്റർ arr നൽകിയിട്ടുണ്ട്, അതിൽ നിങ്ങൾ സംഖ്യകളുടെ ആകെത്തുക നൽകണം, അത് വെക്റ്ററിലെ ഓരോ സംഖ്യയുടെയും എല്ലാ ചിഹ്നങ്ങളുടെയും ഗുണിതത്താൽ ഗുണിച്ചിരിക്കണം, ഇത് 1, -1 അല്ലെങ്കിൽ 0 ആയി പ്രതിനിധീകരിക്കുന്നു. ശ്രദ്ധിക്കുക: ശൂന്യമായ arr ന് ഒന്നും നൽകരുത്. ഉദാഹരണംഃ >>> prod_signs((std::vector<long>{(long) 1, (long) 2, (long) 2, (long) -4}))) 9 >>> prod_signs(std::vector<long>({(long) 0, (long) 1}))) 0 >>> prod_signs(std::vector<long>(())) std::nopt\nstd::optional<long> prod_signs(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n\nstd::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum_magnitudes = 0;\n  long product_of_signs = 1;\n  for (long num : arr) {\n    sum_magnitudes += std::abs(num);\n    if (num > 0) {\n      product_of_signs *= 1;\n    } else if (num < 0) {\n      product_of_signs *= -1;\n    } else {\n      product_of_signs *= 0;\n    }\n  }\n  return sum_magnitudes * product_of_signs;\n}",
        "test": "}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n"
    },
    {
        "task_id": "HumanEval/129",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// N വരികളും N നിരകളും (N >= 2) ഉള്ള ഒരു ഗ്രിഡും k എന്ന പോസിറ്റീവ് ഇന്റീജറും ഉള്ള ഗ്രിഡിന്റെ ഓരോ സെല്ലിലും ഒരു മൂല്യം അടങ്ങിയിരിക്കുന്നു. [1, N * N] പരിധിയിലെ ഓരോ ഇന്റീജറും ഗ്രിഡിലെ സെല്ലുകളിൽ കൃത്യമായി ഒരിക്കൽ ദൃശ്യമാകുന്നു. ഗ്രിഡിലെ k എന്ന ദൈർഘ്യത്തിന്റെ ഏറ്റവും കുറഞ്ഞ പാത നിങ്ങൾ കണ്ടെത്തണം. നിങ്ങൾക്ക് ഏത് സെല്ലിൽ നിന്നും ആരംഭിക്കാം, ഓരോ ഘട്ടത്തിലും നിങ്ങൾക്ക് അയൽ സെല്ലുകളിലേക്ക് നീങ്ങാം, മറ്റൊരു വിധത്തിൽ പറഞ്ഞാൽ, നിങ്ങൾക്ക് നിലവിലെ സെല്ലുമായി ഒരു അരികു പങ്കിടുന്ന സെല്ലുകളിലേക്ക് പോകാം. k എന്ന ദൈർഘ്യമുള്ള ഒരു പാത അർത്ഥമാക്കുന്നത് k സെല്ലുകൾ സന്ദർശിക്കുക (നിർബന്ധമായും വ്യത്യസ്തമല്ല). നിങ്ങൾക്ക് ഗ്രിഡിൽ നിന്ന് പുറത്തുപോകാൻ കഴിയില്ല. A, B എന്നിവയിലൂടെ കടന്നുപോകുന്ന സെല്ലുകളിലെ മൂല്യങ്ങളുടെ ക്രമപ്പെടുത്തിയ വെക്റ്ററുകൾ നിർമ്മിച്ചതിന് ശേഷം (നമുക്ക് അവയെ l_stA, l_stB എന്ന് വിളിക്കാം) ഒരു പാത A (നീളം k) ഒരു പാത B (നീളം k) നേക്കാൾ ചെറുതായി കണക്കാക്കപ്പെടുന്നു. l_stA, l_stB എന്നിവയെ l_stA_j എന്നതിൽ നിന്ന് കുറവുള്ളവയാണ്.\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n",
        "canonical_solutions": "#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n  int n = grid.size();\n  std::vector<long> min_path;\n\n  std::function<void(int, int, std::vector<long>)> dfs = \n    [&](int row, int col, std::vector<long> current_path) {\n    if (current_path.size() == k) {\n      if (min_path.empty() || current_path < min_path) {\n        min_path = current_path;\n      }\n      return;\n    }\n\n    current_path.push_back(grid[row][col]);\n\n    int dr= {-1, 1, 0, 0};\n    int dc= {0, 0, -1, 1};\n\n    for (int i = 0; i < 4; ++i) {\n      int next_row = row + dr[i];\n      int next_col = col + dc[i];\n      if (next_row >= 0 && next_row < n && next_col >= 0 && next_col < n) {\n        dfs(next_row, next_col, current_path);\n      }\n    }\n  };\n\n  for (int start_row = 0; start_row < n; ++start_row) {\n    for (int start_col = 0; start_col < n; ++start_col) {\n      dfs(start_row, start_col, {});\n    }\n  }\n\n  return min_path;\n}",
        "test": "}\nint main() {\n    auto candidate = minPath;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) == (std::vector<long>({(long)1, (long)2, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) == (std::vector<long>({(long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15, (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16, (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1, (long)10, (long)1, (long)10, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10, (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1, (long)7, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) == (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n}\n"
    },
    {
        "task_id": "HumanEval/130",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഫിബോനാച്ചി ശ്രേണി എല്ലാവർക്കും അറിയാം, കഴിഞ്ഞ രണ്ട് നൂറ്റാണ്ടുകളായി ഗണിതശാസ്ത്രജ്ഞർ ഇത് ആഴത്തിൽ പഠിച്ചു. എന്നിരുന്നാലും, ആളുകൾക്ക് അറിയാത്തത് ട്രിബോനാച്ചി ശ്രേണിയാണ്. ട്രിബോനാച്ചി ശ്രേണി ആവർത്തനത്താൽ നിർവചിക്കപ്പെടുന്നുഃ tri(1) = 3 tri(n) = 1 + n / 2, n ആണെങ്കിൽ പോലും. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), n ആണെങ്കിൽ അപൂർവമാണ്. ഉദാഹരണത്തിന്: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 നിങ്ങൾക്ക് ഒരു നെഗറ്റീവ് അല്ലാത്ത പൂർണ്ണസംഖ്യ n നൽകിയിട്ടുണ്ട്, ട്രിബോനാച്ചി ശ്രേണിയിലെ ആദ്യത്തെ n + 1 ന്റെ ഒരു വെക്റ്റർ നിങ്ങൾ മടക്കേണ്ടതാണ്. ഉദാഹരണങ്ങൾഃ >>> tri(3) (dst long vector><{(long} (1,3,2,8 long)\nstd::vector<long> tri(long n) {\n",
        "canonical_solutions": "#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::vector<long> tri(long n) {\n  std::vector<long> result;\n  if (n >= 0) {\n    result.push_back(1);\n  }\n  if (n >= 1) {\n    result.push_back(3);\n  }\n  for (long i = 2; i <= n; ++i) {\n    if (i % 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      if (i - 1 >= 0 && i - 2 >= 0 && i + 1 <= n)\n      {\n          result.push_back(result[i-1] + result[i-2] + result[i]);\n      }\n      else if (i - 1 >= 0 && i - 2 >= 0)\n      {\n          result.push_back(result[i-1] + result[i-2]);\n      }\n      else if (i - 1 >= 0)\n      {\n          result.push_back(result[i-1]);\n      }\n      else\n      {\n          result.push_back(0);\n      }\n    }\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
    },
    {
        "task_id": "HumanEval/131",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു പോസിറ്റീവ് പൂർണ്ണസംഖ്യ n നൽകിയിട്ടുണ്ടെങ്കിൽ, അസമമായ അക്കങ്ങളുടെ ഗുണിതം നൽകുക. എല്ലാ അക്കങ്ങളും ഇരട്ട ആണെങ്കിൽ 0 നൽകുക. ഉദാഹരണത്തിന്: >>> അക്കങ്ങൾ (((1)) (1) >>> അക്കങ്ങൾ (((4)) (0) >>> അക്കങ്ങൾ (((235)) (15)\nlong digits(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong digits(long n) {\n  long product = 1;\n  std::string s = std::to_string(n);\n  bool has_odd = false;\n  for (char c : s) {\n    long digit = c - '0';\n    if (digit % 2 != 0) {\n      product *= digit;\n      has_odd = true;\n    }\n  }\n  if (!has_odd) {\n    return 0;\n  }\n  return product;\n}",
        "test": "}\nint main() {\n    auto candidate = digits;\n    assert(candidate((5)) == (5));\n    assert(candidate((54)) == (5));\n    assert(candidate((120)) == (1));\n    assert(candidate((5014)) == (5));\n    assert(candidate((98765)) == (315));\n    assert(candidate((5576543)) == (2625));\n    assert(candidate((2468)) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/132",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സ്ട്രിംഗ് ഇൻപുട്ടായി എടുക്കുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക, അതിൽ സ്ക്വയർ ബ്രാക്കറ്റുകൾ മാത്രമേ അടങ്ങിയിട്ടുള്ളൂ. ബ്രാക്കറ്റുകളുടെ സാധുവായ ഒരു അനുക്രമം ഉണ്ടെങ്കിൽ മാത്രമേ ഫംഗ്ഷൻ true ആയി മടങ്ങുകയുള്ളൂ. >>> is_nested(\"[[]]\")) (true) >>> is_nested(\"[]]]]]]]][[[[[[[]\")) (false) >>> is_nested(\"[][]\")) (false) >>> is_nested(\"[]\")) (false) >>> is_nested(\"[]\") (false) >>> is_nested\"[[]]\") (true) >>> is_nested(\"[[]]\") (true)\nbool is_nested(std::string string) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_nested(std::string string) {\n  int balance = 0;\n  bool nested = false;\n  for (char c : string) {\n    if (c == '[') {\n      balance++;\n    } else if (c == ']') {\n      if (balance > 1) {\n        nested = true;\n      }\n      balance--;\n      if (balance < 0) {\n        return false;\n      }\n    }\n  }\n  return balance == 0 && nested;\n}",
        "test": "}\nint main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/133",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് ഒരു വെക്റ്റർ നമ്പറുകൾ നൽകിയിട്ടുണ്ട്. നിങ്ങൾ നൽകിയ വെക്റ്ററിലെ സ്ക്വയർ നമ്പറുകളുടെ തുക തിരികെ നൽകണം, വെക്റ്ററിലെ ഓരോ ഘടകവും മുകളിലെ int വരെ വൃത്താകൃതിയിലാക്കുക. ഉദാഹരണങ്ങൾ: >>> lst: vector<float>{(float) 1.0f, (float) 2.0f, (float) 3.0f)) (14) >>> lst: vector<float>{(float) 1.0f, (float) 4.0f, (float) 9.0f)) >>> (98) lst: vector<float>{(float) 1.0f, (float) 3.0f, (float) 5.0f, (float) 7.0f)) (84) >>> lst: vector<float>{(float>{{1.4f, (float) 2.4.0f, (float) 2.0.0f)) (6) >>> (float) 2.4.0f, (float) (6) >>> (float) 2.4.0f)\nlong sum_squares(std::vector<float> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float num : lst) {\n    long rounded_up = std::ceil(num);\n    sum += rounded_up * rounded_up;\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0f, (float)10000.0f}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f}))) == (1));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2));\n}\n"
    },
    {
        "task_id": "HumanEval/134",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സ്ട്രിംഗിന്റെ അവസാന പ്രതീകം അക്ഷരമാലയിലെ പ്രതീകമാണെങ്കിൽ, അത് ഒരു വാക്കിന്റെ ഭാഗമല്ലെങ്കിൽ, അല്ലെങ്കിൽ തെറ്റാണെങ്കിൽ, ശരിയായി മടങ്ങുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക. കുറിപ്പ്ഃ \"വചനം\" എന്നത് സ്പെയ്സ് ഉപയോഗിച്ച് വേർതിരിക്കുന്ന പ്രതീകങ്ങളുടെ ഒരു കൂട്ടമാണ്. ഉദാഹരണങ്ങൾ: >>> check_if_last_char_is_a_letter((\"apple pie\")) (false) >>> check_if_last_char_is_a_letter(\"apple pi e\")) (true) >>> check_if_last_char_is_a_letter \")) (false) >>> check_if_last_char_is_a_letter \" (false)\nbool check_if_last_char_is_a_letter(std::string txt) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_if_last_char_is_a_letter(std::string txt) {\n  if (txt.empty()) {\n    return false;\n  }\n  if (!isalpha(txt.back())) {\n    return false;\n  }\n  if (txt.length() > 1 && txt[txt.length() - 2] != ' ') {\n    return false;\n  }\n  return true;\n}",
        "test": "}\nint main() {\n    auto candidate = check_if_last_char_is_a_letter;\n    assert(candidate((\"apple\")) == (false));\n    assert(candidate((\"apple pi e\")) == (true));\n    assert(candidate((\"eeeee\")) == (false));\n    assert(candidate((\"A\")) == (true));\n    assert(candidate((\"Pumpkin pie \")) == (false));\n    assert(candidate((\"Pumpkin pie 1\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"eeeee e \")) == (false));\n    assert(candidate((\"apple pie\")) == (false));\n    assert(candidate((\"apple pi e \")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/135",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു മൂലകത്തിന്റെ ഏറ്റവും വലിയ സൂചിക മടക്കിനൽകുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക, അത് അതിന് തൊട്ടുമുമ്പുള്ള മൂലകത്തേക്കാൾ വലുതോ തുല്യമോ അല്ല. അത്തരം ഒരു മൂലകം നിലവിലില്ലെങ്കിൽ -1. നൽകിയിരിക്കുന്ന വെക്റ്ററിൽ തനിപ്പകർപ്പ് മൂല്യങ്ങൾ അടങ്ങിയിരിക്കില്ല. ഉദാഹരണങ്ങൾഃ >>> can_arrange((std::vector<long>({long) 1, (long) 2, (long) 4, (long) 3, (long) 5}))) (3) >>> can_arrange((std::vector<long>{(long) 1, (long) 2, (long) 3}))) (-1)\nlong can_arrange(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong can_arrange(std::vector<long> arr) {\n  for (long i = 1; i < arr.size(); ++i) {\n    if (arr[i] < arr[i - 1]) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "test": "}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) == (-1));\n}\n"
    },
    {
        "task_id": "HumanEval/136",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു റ്റൂപ്പൽ (a, b) സൃഷ്ടിക്കുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക, അവിടെ 'a' ഒരു വെക്റ്ററിലെ നെഗറ്റീവ് പൂർണ്ണസംഖ്യകളിൽ ഏറ്റവും വലുതും 'b' പോസിറ്റീവ് പൂർണ്ണസംഖ്യകളിൽ ഏറ്റവും ചെറുതുമാണ്. നെഗറ്റീവ് അല്ലെങ്കിൽ പോസിറ്റീവ് പൂർണ്ണസംഖ്യകളില്ലെങ്കിൽ അവയെ None ആയി നൽകുക. ഉദാഹരണങ്ങൾ: >>> വലിയ_ചെറിയ_പൂർണ്ണസംഖ്യകൾ (largest_small_integers) std::long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n#include<tuple>\n#include<vector>\n\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n    std::optional<long> largest_negative = std::nullopt;\n    std::optional<long> smallest_positive = std::nullopt;\n    for (long num : lst) {\n        if (num < 0) {\n            if (!largest_negative.has_value() || num > largest_negative.value()) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            if (!smallest_positive.has_value() || num < smallest_positive.value()) {\n                smallest_positive = num;\n            }\n        }\n    }\n    return std::make_tuple(largest_negative, smallest_positive);\n}",
        "test": "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2, (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7, (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9, 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6, (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n}\n"
    },
    {
        "task_id": "HumanEval/137",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n// ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക, അത് റിയൽ നമ്പറുകൾ, ഫ്ലോട്ടുകൾ, അല്ലെങ്കിൽ റിയൽ നമ്പറുകൾ പ്രതിനിധീകരിക്കുന്ന സ്ട്രിങ്ങുകൾ എന്നിവ എടുക്കുകയും അതിന്റെ നൽകിയ വേരിയബിൾ തരത്തിൽ വലിയ വേരിയബിൾ നൽകുകയും ചെയ്യുന്നു. മൂല്യങ്ങൾ തുല്യമാണെങ്കിൽ None നൽകുക. കുറിപ്പ്ഃ ഒരു റിയൽ നമ്പർ ഒരു സ്ട്രിംഗായി പ്രതിനിധീകരിക്കുകയാണെങ്കിൽ, ഫ്ലോട്ടിംഗ് പോയിന്റ് . അല്ലെങ്കിൽ , >>> compare_one(1, 2.5f) 2.5f >>> compare_one(1, \"2,3\") \"2,3\" >>> compare_one(\"5,1\", \"6\") \"6\" >>> compare_one(\"1\", 1) std::nullopt\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n#include<string>\n\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;\n    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }\n    bool operator==(float f) {\n        return f1 == f ;\n    }\n    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;\n    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }\n    bool operator==(float f) {\n        return f1 == f ;\n    }\n    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n\ndouble parse_real(const std::string& s) {\n    std::string temp = s;\n    std::replace(temp.begin(), temp.end(), ',', '.');\n    try {\n        return std::stod(temp);\n    } catch (const std::invalid_argument& e) {\n        return std::numeric_limits<double>::quiet_NaN();\n    } catch (const std::out_of_range& e) {\n        return std::numeric_limits<double>::quiet_NaN();\n    }\n}\n\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\n    if (a.f2.empty() && b.f2.empty()) {\n        if (typeid(a.f0) == typeid(long) && typeid(b.f0) == typeid(long)) {\n            if (a.f0 > b.f0) return Union_long_float_std_string_std_nullopt(a.f0);\n            if (b.f0 > a.f0) return Union_long_float_std_string_std_nullopt(b.f0);\n        } else if (typeid(a.f1) == typeid(float) && typeid(b.f1) == typeid(float)) {\n            if (a.f1 > b.f1) return Union_long_float_std_string_std_nullopt(a.f1);\n            if (b.f1 > a.f1) return Union_long_float_std_string_std_nullopt(b.f1);\n        } else if (typeid(a.f0) == typeid(long) && typeid(b.f1) == typeid(float)) {\n            if (static_cast<float>(a.f0) > b.f1) return Union_long_float_std_string_std_nullopt(a.f0);\n            if (b.f1 > static_cast<float>(a.f0)) return Union_long_float_std_string_std_nullopt(b.f1);\n        } else if (typeid(a.f1) == typeid(float) && typeid(b.f0) == typeid(long)) {\n            if (a.f1 > static_cast<float>(b.f0)) return Union_long_float_std_string_std_nullopt(a.f1);\n            if (static_cast<float>(b.f0) > a.f1) return Union_long_float_std_string_std_nullopt(b.f0);\n        }\n    } else {\n        double val_a, val_b;\n        if (!a.f2.empty()) val_a = parse_real(a.f2);\n        else if (typeid(a.f0) == typeid(long)) val_a = static_cast<double>(a.f0);\n        else val_a = static_cast<double>(a.f1);\n\n        if (!b.f2.empty()) val_b = parse_real(b.f2);\n        else if (typeid(b.f0) == typeid(long)) val_b = static_cast<double>(b.f0);\n        else val_b = static_cast<double>(b.f1);\n\n        if (!std::isnan(val_a) && !std::isnan(val_b)) {\n            if (val_a > val_b) return Union_long_float_std_string_std_nullopt(a);\n            if (val_b > val_a) return Union_long_float_std_string_std_nullopt(b);\n        }\n    }\n    return Union_long_float_std_string_std_nullopt(std::nullopt{});\n}",
        "test": "}\nint main() {\n    auto candidate = compare_one;\n    assert(candidate(1, 2) == 2);\n    assert(candidate(1, 2.5f) == 2.5f);\n    assert(candidate(2, 3) == 3);\n    assert(candidate(5, 6) == 6);\n    assert(candidate(1, \"2,3\") == \"2,3\");\n    assert(candidate(\"5,1\", \"6\") == \"6\");\n    assert(candidate(\"1\", \"2\") == \"2\");\n    assert(candidate(\"1\", 1) == std::nullopt);\n}\n"
    },
    {
        "task_id": "HumanEval/138",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// തന്നിരിക്കുന്ന സംഖ്യ n കൃത്യമായി 4 പോസിറ്റീവ് ഇരട്ട സംഖ്യകളുടെ ആകെത്തുകയായി എഴുതാൻ കഴിയുമോ എന്ന് വിലയിരുത്തുക ഉദാഹരണം >>> is_equal_to_sum_even () (സത്യമല്ല) >>> is_equal_to_sum_even () (സത്യമല്ല) >>> is_equal_to_sum_even () (സത്യമാണ്)\nbool is_equal_to_sum_even(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_equal_to_sum_even(long n) {\n    if (n <= 6 || n % 2 != 0) {\n        return false;\n    }\n    return true;\n}",
        "test": "}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/139",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ബ്രസീലിയൻ ഫാക്ടോറിയൽ നിർവചിച്ചിരിക്കുന്നത് ഇങ്ങനെയാണ്: ബ്രസീലിയൻ_ഫാക്ടോറിയൽ ((n) = n! * (n-1)! * (n-2)! * . . . * 1! n > 0 ഉദാഹരണത്തിന്: >>> സ്പെഷ്യൽ_ഫാക്ടോറിയൽ (((4)) (288) ഫംഗ്ഷന് ഒരു പൂർണ്ണസംഖ്യ ഇൻപുട്ടായി ലഭിക്കും, ഈ പൂർണ്ണസംഖ്യയുടെ പ്രത്യേക ഫാക്ടോറിയൽ തിരികെ നൽകണം.\nlong special_factorial(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong factorial(long k) {\n    long res = 1;\n    for (long i = 2; i <= k; ++i) {\n        res *= i;\n    }\n    return res;\n}\n\nlong special_factorial(long n) {\n    if (n <= 0) {\n        return 1;\n    }\n    long result = 1;\n    for (long i = 1; i <= n; ++i) {\n        result *= factorial(i);\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/140",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സ്ട്രിംഗ് ടെക്സ്റ്റ് നൽകിയിട്ടുണ്ടെങ്കിൽ, അതിലെ എല്ലാ സ്പെയ്സുകളും അടിവരയിടുക, ഒരു സ്ട്രിംഗിൽ തുടർച്ചയായി 2 ലധികം സ്പെയ്സുകൾ ഉണ്ടെങ്കിൽ, തുടർച്ചയായി എല്ലാ സ്പെയ്സുകളും - >>> fix_spaces (((\" ഉദാഹരണം \")) (\"ഉദാഹരണം\") >>> fix_spaces (((\" ഉദാഹരണം 1\")) (\"ഉദാഹരണം_1\") >>> fix_spaces (((\" ഉദാഹരണം 2\")) (\"_Example_2\") >>> fix_spaces (((\" ഉദാഹരണം 3\")) (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    int space_count = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            space_count++;\n        } else {\n            if (space_count == 1) {\n                result += '_';\n            } else if (space_count > 1) {\n                result += '-';\n            }\n            result += c;\n            space_count = 0;\n        }\n    }\n    if (space_count == 1 && !result.empty() && result.back() != '_') {\n        result += '_';\n    } else if (space_count > 1 && !result.empty() && result.back() != '-') {\n        result += '-';\n    } else if (space_count > 0 && result.empty()) {\n        if (space_count > 2) result += '-';\n        else if (space_count == 1) result += '_';\n    } else if (space_count == 1 && result.empty()) {\n        result += '_';\n    }\n\n    std::string trimmed_result = \"\";\n    bool non_space_found = false;\n    for (char c : result) {\n        if (c != ' ') {\n            non_space_found = true;\n            trimmed_result += c;\n        } else if (non_space_found) {\n            trimmed_result += c;\n        }\n    }\n\n    while (!trimmed_result.empty() && trimmed_result.front() == '_') {\n        trimmed_result.erase(trimmed_result.begin());\n    }\n    while (!trimmed_result.empty() && trimmed_result.back() == '_') {\n        trimmed_result.pop_back();\n    }\n     while (!trimmed_result.empty() && trimmed_result.front() == '-') {\n        trimmed_result.erase(trimmed_result.begin());\n    }\n    while (!trimmed_result.empty() && trimmed_result.back() == '-') {\n        trimmed_result.pop_back();\n    }\n\n    std::string final_result = \"\";\n    space_count = 0;\n    for (char c : trimmed_result) {\n        if (c == '_') {\n            space_count++;\n        } else {\n            if (space_count == 1) {\n                final_result += '_';\n            } else if (space_count > 1) {\n                final_result += '-';\n            }\n            final_result += c;\n            space_count = 0;\n        }\n    }\n    if (space_count == 1) {\n        final_result += '_';\n    } else if (space_count > 1) {\n        final_result += '-';\n    }\n\n    return final_result;\n}",
        "test": "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
    },
    {
        "task_id": "HumanEval/141",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു ഫയലിന്റെ പേര് പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് എടുക്കുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക, ഫയലിന്റെ പേര് സാധുവാണെങ്കിൽ 'അതെ' എന്ന് നൽകുകയും, അല്ലാത്തപക്ഷം 'ഇല്ല' എന്ന് നൽകുകയും ചെയ്യുക. ഇനിപ്പറയുന്ന എല്ലാ വ്യവസ്ഥകളും പാലിച്ചാൽ മാത്രമേ ഒരു ഫയലിന്റെ പേര് സാധുവായി കണക്കാക്കുകയുള്ളൂ: - ഫയലിന്റെ പേരിൽ മൂന്ന് അക്കങ്ങളിൽ കൂടുതൽ ('0'-'9') ഉണ്ടാകരുത്. - ഫയലിന്റെ പേരിൽ കൃത്യമായി ഒരു ഡോട്ട് '.' അടങ്ങിയിരിക്കുന്നു. - ഡോട്ടിന് മുമ്പുള്ള സബ്സ്ട്രിംഗ് ശൂന്യമായിരിക്കരുത്, കൂടാതെ ഇത് ലാറ്റിൻ അക്ഷരമാലയിലെ ഒരു അക്ഷരത്തിൽ നിന്ന് ആരംഭിക്കണം ('a'-'z' ഉം 'A'-Z'). - ഡോട്ടിന് ശേഷമുള്ള സബ്സ്ട്രിംഗ് ഇവയിൽ ഒന്നായിരിക്കണം: ['txt', 'exe', 'lld'] ഉദാഹരണങ്ങൾ: >>> file_name_check\"((ഉദാഹരണം.txt\") (\"അതെ\") >>> file_name_check\"((ഉദാഹരണം.dll\" (\"ഇല്ല\")\nstd::string file_name_check(std::string file_name) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string file_name_check(std::string file_name) {\n    int digit_count = 0;\n    int dot_count = 0;\n    size_t dot_pos = std::string::npos;\n\n    for (size_t i = 0; i < file_name.length(); ++i) {\n        if (isdigit(file_name[i])) {\n            digit_count++;\n        } else if (file_name[i] == '.') {\n            dot_count++;\n            dot_pos = i;\n        }\n    }\n\n    if (digit_count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n\n    if (dot_pos == 0 || dot_pos == file_name.length() - 1) {\n        return \"No\";\n    }\n\n    std::string name_part = file_name.substr(0, dot_pos);\n    std::string ext_part = file_name.substr(dot_pos + 1);\n\n    if (name_part.empty() || !isalpha(name_part[0])) {\n        return \"No\";\n    }\n\n    if (ext_part == \"txt\" || ext_part == \"exe\" || ext_part == \"dll\") {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}",
        "test": "}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) == (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n    assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"_f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
    },
    {
        "task_id": "HumanEval/142",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \" ഈ ഫംഗ്ഷൻ ഒരു പൂർണ്ണസംഖ്യകളുടെ വെക്റ്റർ എടുക്കും. വെക്റ്ററിലെ എല്ലാ എൻട്രികൾക്കും, ഫംഗ്ഷൻ അതിന്റെ ഇൻഡെക്സ് 3 ന്റെ ഗുണിതമാണെങ്കിൽ പൂർണ്ണസംഖ്യ എൻട്രി സ്ക്വയർ ചെയ്യണം, കൂടാതെ അതിന്റെ ഇൻഡെക്സ് 4 ന്റെ ഗുണിതമാണെങ്കിൽ പൂർണ്ണസംഖ്യ എൻട്രി ക്യൂബ് ചെയ്യും. 3 അല്ലെങ്കിൽ 4 ന്റെ ഗുണിതമല്ലെങ്കിൽ ഫംഗ്ഷൻ വെക്റ്ററിലെ എൻട്രികൾ മാറ്റില്ല. ഫംഗ്ഷൻ എല്ലാ എൻട്രികളുടെയും തുക നൽകും. ഉദാഹരണങ്ങൾ: >>> lst (long({(long) 1, (long) 2, (long) 3})) >>> lst ((long)) >>> lst ({(long) -1, (long) -5, (long) -2, (long) -1, (long) -5}))\nlong sum_squares(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong sum_squares(std::vector<long> lst) {\n    long sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)9}))) == (14));\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1}))) == (9));\n    assert(candidate((std::vector<long>({(long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1}))) == (-3));\n    assert(candidate((std::vector<long>({(long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))) == (-126));\n    assert(candidate((std::vector<long>({(long)-56, (long)-99, (long)1, (long)0, (long)-2}))) == (3030));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)-1}))) == (0));\n    assert(candidate((std::vector<long>({(long)-16, (long)-9, (long)-2, (long)36, (long)36, (long)26, (long)-20, (long)25, (long)-40, (long)20, (long)-4, (long)12, (long)-26, (long)35, (long)37}))) == (-14196));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)17, (long)-1, (long)-15, (long)13, (long)-1, (long)14, (long)-14, (long)-12, (long)-5, (long)14, (long)-14, (long)6, (long)13, (long)11, (long)16, (long)16, (long)4, (long)10}))) == (-1448));\n}\n"
    },
    {
        "task_id": "HumanEval/143",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു വാക്യത്തെ പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് നിങ്ങൾക്ക് നൽകിയിട്ടുണ്ട്, വാക്യത്തിൽ ഒരു സ്പെയ്സ് ഉപയോഗിച്ച് വേർതിരിച്ച ചില വാക്കുകൾ അടങ്ങിയിരിക്കുന്നു, കൂടാതെ യഥാർത്ഥ വാക്യത്തിൽ നിന്നുള്ള വാക്കുകൾ അടങ്ങിയിരിക്കുന്ന ഒരു സ്ട്രിംഗ് നിങ്ങൾ മടക്കിനൽകണം, അവയുടെ ദൈർഘ്യം പ്രൈം നമ്പറുകളാണ്, പുതിയ സ്ട്രിംഗിലെ വാക്കുകളുടെ ക്രമം യഥാർത്ഥത്തിൽ സമാനമായിരിക്കണം. ഉദാഹരണം 1: >>> words_in_sentence (((\"ഇത് ഒരു ടെസ്റ്റ് ആണ്\")) (\"is\") ഉദാഹരണം 2: >>> words_in_sentence (((\"നമുക്ക് നീന്താൻ പോകാം\")) (\"go for\") നിയന്ത്രണങ്ങൾഃ * 1 <= len ((sentence) <= 100 * വാക്യത്തിൽ അക്ഷരങ്ങൾ മാത്രമേ അടങ്ങിയിട്ടുള്ളൂ\nstd::string words_in_sentence(std::string sentence) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstd::string words_in_sentence(std::string sentence) {\n    std::string result = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
    },
    {
        "task_id": "HumanEval/144",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// x * n എന്ന എക്സ്പ്രഷനെ ലളിതമാക്കുന്ന ഒരു ഫംഗ്ഷൻ നടപ്പിലാക്കുക എന്നതാണ് നിങ്ങളുടെ ചുമതല. x * n ഒരു പൂർണ്ണസംഖ്യയായി വിലയിരുത്തുകയും അല്ലാത്തപക്ഷം തെറ്റായി വിലയിരുത്തുകയും ചെയ്താൽ ഫംഗ്ഷൻ true ആയി നൽകുന്നു. x, n എന്നിവ ഒരു ഭിന്നസംഖ്യയുടെ സ്ട്രിംഗ് പ്രാതിനിധ്യമാണ്, കൂടാതെ ഇനിപ്പറയുന്ന ഫോർമാറ്റ് ഉണ്ട്, <numerator>/<denominator>, അവിടെ സംഖ്യയും നാമകരണവും പോസിറ്റീവ് പൂർണ്ണസംഖ്യകളാണ്. x, n എന്നിവ സാധുവായ ഭിന്നസംഖ്യകളാണെന്നും അവയ്ക്ക് നാമകരണമായി പൂജ്യം ഇല്ലെന്നും നിങ്ങൾക്ക് അനുമാനിക്കാം. >>> ലളിതമാക്കുക () \" 1/5 \", (\" 5/1 \")) (സത്യമാണ്) >>> ലളിതമാക്കുക () \" 1/6 \", (\" 2/1 \") (തെറ്റാണ്) >>> ലളിതമാക്കുക () \"7/10 \", (\" 10/2 \") (തെറ്റാണ്)\nbool simplify(std::string x, std::string n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong gcd(long a, long b) {\n    while (b) {\n        a %= b;\n        std::swap(a, b);\n    }\n    return a;\n}\n\nbool simplify(std::string x, std::string n) {\n    long x_num, x_den, n_num, n_den;\n    size_t slash_pos = x.find('/');\n    x_num = std::stol(x.substr(0, slash_pos));\n    x_den = std::stol(x.substr(slash_pos + 1));\n\n    slash_pos = n.find('/');\n    n_num = std::stol(n.substr(0, slash_pos));\n    n_den = std::stol(n.substr(slash_pos + 1));\n\n    long num = x_num * n_num;\n    long den = x_den * n_den;\n\n    long common_divisor = gcd(num, den);\n    den /= common_divisor;\n\n    return den == 1;\n}",
        "test": "}\nint main() {\n    auto candidate = simplify;\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/6\"), (\"2/1\")) == (false));\n    assert(candidate((\"5/1\"), (\"3/1\")) == (true));\n    assert(candidate((\"7/10\"), (\"10/2\")) == (false));\n    assert(candidate((\"2/10\"), (\"50/10\")) == (true));\n    assert(candidate((\"7/2\"), (\"4/2\")) == (true));\n    assert(candidate((\"11/6\"), (\"6/1\")) == (true));\n    assert(candidate((\"2/3\"), (\"5/2\")) == (false));\n    assert(candidate((\"5/2\"), (\"3/5\")) == (false));\n    assert(candidate((\"2/4\"), (\"8/4\")) == (true));\n    assert(candidate((\"2/4\"), (\"4/2\")) == (true));\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/5\"), (\"1/5\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/145",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു ഫംഗ്ഷൻ എഴുതുക, അത് നൽകിയിരിക്കുന്ന പൂർണ്ണസംഖ്യകളുടെ വെക്റ്റർ അവരുടെ അക്കങ്ങളുടെ ആകെത്തുക അനുസരിച്ച് വർധന ക്രമത്തിൽ അടുക്കുന്നു. കുറിപ്പ്ഃ സമാനമായ അക്കങ്ങളുടെ ആകെത്തുകയുള്ള നിരവധി ഇനങ്ങൾ ഉണ്ടെങ്കിൽ, അവയുടെ സൂചിക അടിസ്ഥാനമാക്കി യഥാർത്ഥ വെക്റ്ററിൽ ക്രമീകരിക്കുക. ഉദാഹരണത്തിന്ഃ >>> order_by_points((std::vector<long>({long) 1, (long) 11, (long) -1, (long) -1, (long) -12}))) (std::vector<long>({long) -1, (long) -11, (long) -1, (long) -12, (long) 11})) >>> order_by_points(std::vector<long>())) (std::vector<long>(long))\nstd::vector<long> order_by_points(std::vector<long> nums) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong sum_digits(long n) {\n    long sum = 0;\n    std::string s = std::to_string(std::abs(n));\n    for (char c : s) {\n        sum += c - '0';\n    }\n    return sum;\n}\n\nstd::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<std::pair<long, size_t>> indexed_nums;\n    for (size_t i = 0; i < nums.size(); ++i) {\n        indexed_nums.push_back({nums[i], i});\n    }\n\n    std::sort(indexed_nums.begin(), indexed_nums.end(), [](const std::pair<long, size_t>& a, const std::pair<long, size_t>& b) {\n        long sum_a = sum_digits(a.first);\n        long sum_b = sum_digits(b.first);\n        if (sum_a != sum_b) {\n            return sum_a < sum_b;\n        }\n        return a.second < b.second;\n    });\n\n    std::vector<long> result;\n    for (const auto& pair : indexed_nums) {\n        result.push_back(pair.first);\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234, (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) == (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2, (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11}))) == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0, (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76, (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
    },
    {
        "task_id": "HumanEval/146",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സംഖ്യയുടെ ആദ്യ, അവസാന അക്കം പത്താണ് (1, 3, 5, 7, 9) എന്നതിനേക്കാൾ വലുതാണ് ആ സംഖ്യയുടെ എണ്ണം എന്ന് ഒരു ഫംഗ്ഷൻ എഴുതുക. ഉദാഹരണത്തിന്: >>> specialFilter((std::vector<long>({(long) 15, (long) -73, (long) -14, (long) -15}))) (1) >>> specialFilter((std::vector<long>({(long) -2, (long) -3, (long) -4, (long) -2, (long) -109} (2)\nlong specialFilter(std::vector<long> nums) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_odd_digit(char c) {\n    return (c == '1' || c == '3' || c == '5' || c == '7' || c == '9');\n}\n\nlong specialFilter(std::vector<long> nums) {\n    long count = 0;\n    for (long num : nums) {\n        if (std::abs(num) > 10) {\n            std::string s = std::to_string(std::abs(num));\n            if (!s.empty() && is_odd_digit(s.front()) && is_odd_digit(s.back())) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
        "test": "}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43, (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71, (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/147",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് ഒരു പോസിറ്റീവ് പൂർണ്ണസംഖ്യ n നൽകിയിരിക്കുന്നു. നീളം n ന്റെ ഒരു പൂർണ്ണസംഖ്യാ വെക്റ്റർ a സൃഷ്ടിക്കണം. ഓരോ i (1 ≤ i ≤ n) നും, a[i] = i * i - i + 1 ന്റെ മൂല്യം. a ന്റെ ട്രിപ്പിൾ എണ്ണം (a[i], a[j], a[k]) നൽകുക, അവിടെ i < j < k, a[i] + a[j] + a[k] എന്നത് 3 ന്റെ ഗുണിതമാണ്. ഉദാഹരണംഃ >>> get_max_triples((5)) (1) വിശദീകരണം: a = [1, 3, 7, 13, 21] സാധുവായ ട്രിപ്പിൾ (1, 7, 13) മാത്രമാണ്.\nlong get_max_triples(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong get_max_triples(long n) {\n    if (n < 3) {\n        return 0;\n    }\n    std::vector<long> a(n);\n    for (long i = 0; i < n; ++i) {\n        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n    }\n\n    long count = 0;\n    for (long i = 0; i < n; ++i) {\n        for (long j = i + 1; j < n; ++j) {\n            for (long k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "test": "}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100)) == (53361));\n}\n"
    },
    {
        "task_id": "HumanEval/148",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നമ്മുടെ സൌരയൂഥത്തിൽ എട്ട് ഗ്രഹങ്ങളുണ്ട്: സൂര്യനോട് ഏറ്റവും അടുത്തുള്ളത് ബുധൻ, അടുത്തത് ശുക്രൻ, പിന്നെ ഭൂമി, ചൊവ്വ, വ്യാഴം, ശനിയും, യുറാനസും, നെപ്റ്റ്യൂണും. ഗ്രഹം 1 ഉം ഗ്രഹം 2 ഉം എന്നീ സ്ട്രിങ്ങുകളായി രണ്ട് ഗ്രഹനാമങ്ങൾ എടുക്കുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക. ഗ്രഹത്തിന്റെ ഭ്രമണപഥത്തിനും ഗ്രഹത്തിന്റെ ഭ്രമണപഥത്തിനും ഇടയിലുള്ള എല്ലാ ഗ്രഹങ്ങളും അടങ്ങിയ ഒരു ടപ്പിൾ ഫംഗ്ഷൻ സൂര്യനോടുള്ള അടുപ്പം അനുസരിച്ച് അടുക്കുന്നു. ഗ്രഹം 1 അല്ലെങ്കിൽ ഗ്രഹം 2 ശരിയായ ഗ്രഹനാമങ്ങളല്ലെങ്കിൽ ഫംഗ്ഷൻ ഒരു ശൂന്യമായ ടപ്പിൾ നൽകണം. ഉദാഹരണങ്ങൾ >>> bf((\"ജൂപ്പൈറ്റർ\"), (\"നെപ്റ്റ്യൂൺ\")) (std::vector<std::string>{((std::string)) \"ശുക്രൻ\", (std::vector) (std::std::string) (Uranus)\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    auto it1 = std::find(planets.begin(), planets.end(), planet1);\n    auto it2 = std::find(planets.begin(), planets.end(), planet2);\n\n    if (it1 == planets.end() || it2 == planets.end()) {\n        return {};\n    }\n\n    int index1 = std::distance(planets.begin(), it1);\n    int index2 = std::distance(planets.begin(), it2);\n\n    if (index1 == index2) {\n        return {};\n    }\n\n    int start = std::min(index1, index2) + 1;\n    int end = std::max(index1, index2);\n\n    std::vector<std::string> result;\n    for (int i = start; i < end; ++i) {\n        result.push_back(planets[i]);\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n}\n"
    },
    {
        "task_id": "HumanEval/149",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സ്ട്രിംഗ് വെക്റ്റർ ഒരു പാരാമീറ്ററായി സ്വീകരിക്കുകയും അതിൽ നിന്ന് odd ദൈർഘ്യമുള്ള സ്ട്രിംഗുകൾ ഇല്ലാതാക്കുകയും ഫലമായി ലഭിക്കുന്ന വെക്റ്റർ ഒരു അടുക്കിയ ക്രമത്തിൽ നൽകുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക. വെക്റ്റർ എല്ലായ്പ്പോഴും സ്ട്രിംഗുകളുടെ ഒരു വെക്റ്ററാണ്, ഒരിക്കലും സംഖ്യകളുടെ ഒരു വെക്റ്ററല്ല, അതിൽ തനിപ്പകർപ്പുകൾ അടങ്ങിയിരിക്കാം. വെക്റ്ററിന്റെ ക്രമം ഓരോ വാക്കിന്റെയും ദൈർഘ്യത്തിൽ വർദ്ധിക്കണം, ആ നിയമപ്രകാരം അടുക്കിയ വെക്റ്റർ നിങ്ങൾ നൽകണം. രണ്ട് വാക്കുകൾക്ക് ഒരേ നീളം ഉണ്ടെങ്കിൽ, വെക്റ്റർ അക്ഷരമാലാക്രമത്തിൽ അടുക്കുക. ഫംഗ്ഷൻ സ്ട്രിംഗുകളുടെ ഒരു വെക്റ്റർ അടുക്കിയ ക്രമത്തിൽ നൽകണം. എല്ലാ വാക്കുകളും ഒരേ നീളം ഉണ്ടായിരിക്കുമെന്ന് നിങ്ങൾ അനുമാനിക്കാം. ഉദാഹരണത്തിന്ഃ >>> list_sort{\"}std::stdvector<stdstring>{\"}std::stdstring\" (a) \" (a) \" (a) \" (a) (aaa\" (c) (d)) (a (a) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d (d) (d) (d) (d (d) (d) (d) (d (d) (d) (d) (d (d) (d) (d (d) (d) (d (d) (d) (d) (d (d) (d) (d) (d (d) (d) (d (d) (d) (d) (d) (d (d) (d) (d) (d (d) (d) (d (d) (d) (d) (d) (d) (d (d) (d) (d) (d) (d (d) (d (d) (d) (d) (d (d) (d) (d) (d) (d (d) (d) (d) (d (d) (d) (d) (d (d) (d) (d) (d\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n    std::vector<std::string> even_length_strings;\n    for (const std::string& s : lst) {\n        if (s.length() % 2 == 0) {\n            even_length_strings.push_back(s);\n        }\n    }\n\n    std::sort(even_length_strings.begin(), even_length_strings.end(), [](const std::string& a, const std::string& b) {\n        if (a.length() != b.length()) {\n            return a.length() < b.length();\n        }\n        return a < b;\n    });\n\n    return even_length_strings;\n}",
        "test": "}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\", (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) == (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"aaaa\", (std::string)\"bbbb\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/150",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n ഒരു പ്രൈം നമ്പർ ആണെങ്കിൽ x ന്റെ മൂല്യം നൽകുകയും y ന്റെ മൂല്യം നൽകുകയും ചെയ്യുന്ന ഒരു ലളിതമായ പ്രോഗ്രാം. ഉദാഹരണങ്ങൾ: >>> x_or_y((7), (34), (12)) (34) >>> x_or_y(15), (8), (5) (5)\nlong x_or_y(long n, long x, long y) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    for (long i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nlong x_or_y(long n, long x, long y) {\n    if (is_prime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}",
        "test": "}\nint main() {\n    auto candidate = x_or_y;\n    assert(candidate((7), (34), (12)) == (34));\n    assert(candidate((15), (8), (5)) == (5));\n    assert(candidate((3), (33), (5212)) == (33));\n    assert(candidate((1259), (3), (52)) == (3));\n    assert(candidate((7919), (-1), (12)) == (-1));\n    assert(candidate((3609), (1245), (583)) == (583));\n    assert(candidate((91), (56), (129)) == (129));\n    assert(candidate((6), (34), (1234)) == (1234));\n    assert(candidate((1), (2), (0)) == (0));\n    assert(candidate((2), (2), (0)) == (2));\n}\n"
    },
    {
        "task_id": "HumanEval/151",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു വെക്റ്റർ നമ്പറുകൾ നൽകിയിട്ടുണ്ടെങ്കിൽ, വെക്റ്ററിലെ odd നമ്പറുകളുടെ സ്ക്വയറുകളുടെ തുക നൽകുക. നെഗറ്റീവ് അല്ലെങ്കിൽ പൂർണ്ണസംഖ്യകളല്ലാത്ത നമ്പറുകൾ അവഗണിക്കുക. >>> double_the_difference(((std::vector<float>({(long) 1, (long) 3, (long) 2, (long) 0}))) (10) >>> double_the_difference((std::vector<float>{(long) -1, (long) -2, (long) 0}))) (0) >>> double_the_difference(((std::vector<float>{(long) -9, (long) -2}))) (81) >>> double_the_difference(((std::vector<float>{(long) -0))) (0) ഇൻപുട്ട് വെക്റ്റർ ശൂന്യമാണെങ്കിൽ, 0 നൽകുക.\nlong double_the_difference(std::vector<float> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong double_the_difference(std::vector<float> lst) {\n    long sum_of_squares = 0;\n    for (float num : lst) {\n        if (num > 0 && static_cast<long>(num) == num && static_cast<long>(num) % 2 != 0) {\n            sum_of_squares += static_cast<long>(num) * static_cast<long>(num);\n        }\n    }\n    return sum_of_squares;\n}",
        "test": "}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0f, (float)4.0f}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1f, (float)0.2f, (float)0.3f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2f, (float)3.0f, (float)5.0f}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165));\n}\n"
    },
    {
        "task_id": "HumanEval/152",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു നീണ്ട കാത്തിരിപ്പിന്റെ ഫലം ഒടുവിൽ അറിയപ്പെടുമ്പോൾ ആ വികാരം നമുക്കെല്ലാവർക്കും ഓർമ്മയുണ്ടെന്ന് ഞാൻ കരുതുന്നു. ആ നിമിഷത്തിൽ നിങ്ങൾക്കുള്ള വികാരങ്ങളും ചിന്തകളും തീർച്ചയായും ശ്രദ്ധിക്കുകയും താരതമ്യം ചെയ്യുകയും ചെയ്യുന്നു. ഒരു വ്യക്തി നിരവധി പൊരുത്തങ്ങളുടെ ഫലങ്ങൾ ശരിയായി ഊഹിച്ചിട്ടുണ്ടോ എന്ന് നിർണ്ണയിക്കുക എന്നതാണ് നിങ്ങളുടെ ചുമതല. നിങ്ങൾക്ക് സ്കോറുകളുടെയും തുല്യ നീളമുള്ള ഊഹങ്ങളുടെയും രണ്ട് വെക്റ്ററുകൾ നൽകിയിട്ടുണ്ട്, ഓരോ സൂചികയും ഒരു പൊരുത്തം കാണിക്കുന്നു. ഓരോ ഊഹവും എത്ര ദൂരെയാണെന്ന് സൂചിപ്പിക്കുന്ന ഒരേ നീളമുള്ള ഒരു വെക്റ്റർ മടക്കിനൽകുക. അവർ ശരിയായി ഊഹിച്ചിട്ടുണ്ടെങ്കിൽ, മൂല്യം 0 ആണ്, ഇല്ലെങ്കിൽ, മൂല്യം ഊഹവും സ്കോറും തമ്മിലുള്ള കേവല വ്യത്യാസമാണ്. ഉദാഹരണംഃ >>> (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n    std::vector<long> diff;\n    for (size_t i = 0; i < game.size(); ++i) {\n        diff.push_back(std::abs(game[i] - guess[i]));\n    }\n    return diff;\n}",
        "test": "}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n}\n"
    },
    {
        "task_id": "HumanEval/153",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് ഒരു ക്ലാസ്സിന്റെ (സ്ട്രിംഗ്) പേരും എക്സ്റ്റൻഷനുകളുടെ ഒരു വെക്റ്ററും ലഭിക്കും. ക്ലാസ്സിലേക്ക് അധിക ക്ലാസുകൾ ലോഡുചെയ്യാൻ എക്സ്റ്റൻഷനുകൾ ഉപയോഗിക്കും. എക്സ്റ്റൻഷന്റെ ശക്തി ഇപ്രകാരമാണ്: CAP എന്നത് എക്സ്റ്റൻഷൻ നാമത്തിലെ വലിയ അക്ഷരങ്ങളുടെ എണ്ണവും SM എന്നത് എക്സ്റ്റൻഷൻ നാമത്തിലെ ചെറിയ അക്ഷരങ്ങളുടെ എണ്ണവും ആകട്ടെ, ശക്തി CAP - SM എന്ന ഭിന്നം ഉപയോഗിച്ച് നൽകുന്നു. നിങ്ങൾ ഏറ്റവും ശക്തമായ എക്സ്റ്റൻഷൻ കണ്ടെത്തി ഈ ഫോർമാറ്റിൽ ഒരു സ്ട്രിംഗ് നൽകണം: ClassName.StrongestExtensionName. ഒരേ ശക്തിയിൽ രണ്ടോ അതിലധികമോ എക്സ്റ്റൻഷനുകൾ ഉണ്ടെങ്കിൽ, വെക്റ്ററിൽ ആദ്യം വരുന്ന ഒന്ന് തിരഞ്ഞെടുക്കണം. ഉദാഹരണത്തിന്, നിങ്ങൾക്ക് \"സ്ലൈസുകൾ\" ക്ലാസും എക്സ്റ്റൻഷനുകളുടെ ഒരു വെക്റ്ററും നൽകിയിട്ടുണ്ടെങ്കിൽഃ ['SEviviSliNGCes','Cheese','Stufed'] അപ്പോൾ നിങ്ങൾ 'Slices.viSliNGCes' എന്ന് നൽകണം. 'SliNGCliviSliNG':::::: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst: myst\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nint calculate_strength(const std::string& extension) {\n    int cap_count = 0;\n    int sm_count = 0;\n    for (char c : extension) {\n        if (isupper(c)) {\n            cap_count++;\n        } else if (islower(c)) {\n            sm_count++;\n        }\n    }\n    return cap_count - sm_count;\n}\n\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n    if (extensions.empty()) {\n        return class_name;\n    }\n\n    std::string strongest_extension = extensions[0];\n    int max_strength = calculate_strength(extensions[0]);\n\n    for (size_t i = 1; i < extensions.size(); ++i) {\n        int current_strength = calculate_strength(extensions[i]);\n        if (current_strength > max_strength) {\n            max_strength = current_strength;\n            strongest_extension = extensions[i];\n        }\n    }\n\n    return class_name + \".\" + strongest_extension;\n}",
        "test": "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"}))) == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"}))) == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"}))) == (\"Sp.671235\"));\n}\n"
    },
    {
        "task_id": "HumanEval/154",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് 2 വാക്കുകൾ നൽകിയിരിക്കുന്നു. രണ്ടാമത്തെ വാക്ക് അല്ലെങ്കിൽ അതിന്റെ ഏതെങ്കിലും ഭ്രമണം ആദ്യ വാക്കിലെ ഒരു സബ്സ്ട്രിംഗ് ആണെങ്കിൽ true എന്ന് തിരികെ നൽകേണ്ടതുണ്ട് >>> cycpattern_check((\"abcd\"), (\"abd\")) (false) >>> cycpattern_check((\"hello\"), (\"ell\")) (true) >>> cycpattern_check((\"whassup\"), (\"psus\")) (false) >>> cycpattern_check((\"abab\"), (\"baa\")) (true) >>> cycpattern_(check\"efef\"), (\"eeff\") cy (false) >>> cycpattern_check((\"himens\"), (\"simen\") (true)\nbool cycpattern_check(std::string a, std::string b) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool cycpattern_check(std::string a, std::string b) {\n    if (b.empty()) {\n        return true;\n    }\n    if (a.length() < b.length()) {\n        return false;\n    }\n    for (int i = 0; i < b.length(); ++i) {\n        std::rotate(b.begin(), b.begin() + 1, b.end());\n        if (a.find(b) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = cycpattern_check;\n    assert(candidate((\"xyzw\"), (\"xyw\")) == (false));\n    assert(candidate((\"yello\"), (\"ell\")) == (true));\n    assert(candidate((\"whattup\"), (\"ptut\")) == (false));\n    assert(candidate((\"efef\"), (\"fee\")) == (true));\n    assert(candidate((\"abab\"), (\"aabb\")) == (false));\n    assert(candidate((\"winemtt\"), (\"tinem\")) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/155",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു പൂർണ്ണസംഖ്യ നൽകിയിട്ടുണ്ടെങ്കിൽ, യഥാക്രമം ഇരട്ടയും ഒറ്റയും അക്കങ്ങളുടെ എണ്ണം ഉള്ള ഒരു ടപ്പിൾ നൽകുക. ഉദാഹരണം: >>> even_odd_count((-12)) (std::make_tuple(1, 1)) >>> even_odd_count((123)) (std::make_tuple(1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<tuple>\n\nstd::tuple<long, long> even_odd_count(long num) {\n    long even_count = 0;\n    long odd_count = 0;\n    std::string s = std::to_string(std::abs(num));\n    for (char c : s) {\n        int digit = c - '0';\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return std::make_tuple(even_count, odd_count);\n}",
        "test": "}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
    },
    {
        "task_id": "HumanEval/156",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു പോസിറ്റീവ് പൂർണ്ണസംഖ്യ നൽകിയിട്ടുണ്ടെങ്കിൽ, അതിന്റെ റോമൻ സംഖ്യാ തുല്യത ഒരു സ്ട്രിംഗായി നേടുക, അത് ചെറിയ അക്ഷരങ്ങളിൽ നൽകുക. നിയന്ത്രണങ്ങൾ: 1 <= num <= 1000 ഉദാഹരണങ്ങൾഃ >>> int_to_mini_roman((19)) (\"xix\") >>> int_to_mini_roman((152)) (\"clii\") >>> int_to_mini_roman(426)) (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string int_to_mini_roman(long number) {\n    std::string roman = \"\";\n    std::vector<std::pair<int, std::string>> roman_map = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n\n    for (const auto& pair : roman_map) {\n        while (number >= pair.first) {\n            roman += pair.second;\n            number -= pair.first;\n        }\n    }\n    return roman;\n}",
        "test": "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19)) == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251)) == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500)) == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4)) == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90)) == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532)) == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994)) == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n"
    },
    {
        "task_id": "HumanEval/157",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു ത്രികോണത്തിന്റെ മൂന്നു വശങ്ങളുടെ നീളം നൽകിയിട്ടുണ്ട്. മൂന്നു വശങ്ങളും ഒരു വലതു കോണുള്ള ത്രികോണം രൂപപ്പെടുത്തിയാൽ ശരിയായി മടങ്ങുക, അല്ലാത്തപക്ഷം തെറ്റാണ്. വലതു കോണുള്ള ത്രികോണം ഒരു കോണിന് വലതു കോണോ 90 ഡിഗ്രിയോ ഉള്ള ഒരു ത്രികോണമാണ്. ഉദാഹരണംഃ >>> right_angle_triangle((3), (4), (5)) (true) >>> right_angle_triangle(1), (2), (3)) (false)\nbool right_angle_triangle(long a, long b, long c) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool right_angle_triangle(long a, long b, long c) {\n    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n}",
        "test": "}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/158",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// സ്ട്രിങ്ങുകളുടെ ഒരു വെക്റ്റർ സ്വീകരിക്കുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക. വെക്റ്ററിൽ വ്യത്യസ്ത വാക്കുകൾ അടങ്ങിയിരിക്കുന്നു. പരമാവധി അദ്വിതീയ പ്രതീകങ്ങളുള്ള വാക്ക് മടക്കിനൽകുക. ഒന്നിലധികം സ്ട്രിങ്ങുകൾക്ക് പരമാവധി അദ്വിതീയ പ്രതീകങ്ങളുണ്ടെങ്കിൽ, പദാവലി ക്രമത്തിൽ ആദ്യം വരുന്നവ മടക്കിനൽകുക. >>> find_max(std::vector<std::string>({(std::string) \"name\", (std::string) \"of\", (std::string) \"string\"}))) (\"string\") >>> find_max{(std::vector<std::string>({(std::string) \"name\", (std::string) \"\", (enam) >>> find_max{(std::vector<std>{((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\nstd::string find_max(std::vector<std::string> words) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nint count_unique_chars(const std::string& s) {\n    std::set<char> unique_chars;\n    for (char c : s) {\n        unique_chars.insert(c);\n    }\n    return unique_chars.size();\n}\n\nstd::string find_max(std::vector<std::string> words) {\n    if (words.empty()) {\n        return \"\";\n    }\n\n    std::string max_unique_word = words[0];\n    int max_unique_count = count_unique_chars(words[0]);\n\n    for (size_t i = 1; i < words.size(); ++i) {\n        int current_unique_count = count_unique_chars(words[i]);\n        if (current_unique_count > max_unique_count) {\n            max_unique_count = current_unique_count;\n            max_unique_word = words[i];\n        } else if (current_unique_count == max_unique_count && words[i] < max_unique_word) {\n            max_unique_word = words[i];\n        }\n    }\n    return max_unique_word;\n}",
        "test": "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
    },
    {
        "task_id": "HumanEval/159",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾ ഒരു വിശന്ന മുയലാണ്, നിങ്ങൾ ഇതിനകം ഒരു നിശ്ചിത എണ്ണം കാരറ്റ് കഴിച്ചു, എന്നാൽ ഇപ്പോൾ നിങ്ങൾ കൂടുതൽ കാരറ്റ് കഴിക്കേണ്ടതുണ്ട്. നിങ്ങൾ ഒരു വെക്റ്റർ മടക്കിനൽകണം [നിങ്ങളുടെ ഭക്ഷണത്തിനുശേഷം കഴിച്ച കാരറ്റ് എണ്ണം, നിങ്ങളുടെ ഭക്ഷണത്തിനുശേഷം ശേഷിക്കുന്ന കാരറ്റ് എണ്ണം ] മതിയായ ശേഷിക്കുന്ന കാരറ്റ് ഇല്ലെങ്കിൽ, നിങ്ങൾ ശേഷിക്കുന്ന എല്ലാ കാരറ്റുകളും കഴിക്കും, പക്ഷേ ഇപ്പോഴും വിശപ്പുണ്ടാകും. ഉദാഹരണംഃ >>> eat((5), (6), (10)) (std::vector<long>{(()11, (long)4})) >>> eat(4), (8), (9) (std::vector<long>{(()12, ( () 1})) >>> eat(1), (10), (10) (std::vector<long>{() 11, ()) >>> ((0)) eat (11), ((2), (5) (std::vector<<long>{() 7, ()) (() V: നിങ്ങൾ കഴിക്കേണ്ട മുഴുവൻ സംഖ്യകളുടെ എണ്ണം 1000: 0: 0 @ @ @ *  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  = \nstd::vector<long> eat(long number, long need, long remaining) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> eat(long number, long need, long remaining) {\n    long eaten = 0;\n    long left = remaining;\n    long to_eat = need;\n\n    if (left >= to_eat) {\n        eaten = to_eat;\n        left -= to_eat;\n    } else {\n        eaten = left;\n        left = 0;\n    }\n\n    return {(long)number + eaten, left};\n}",
        "test": "}\nint main() {\n    auto candidate = eat;\n    assert(candidate((5), (6), (10)) == (std::vector<long>({(long)11, (long)4})));\n    assert(candidate((4), (8), (9)) == (std::vector<long>({(long)12, (long)1})));\n    assert(candidate((1), (10), (10)) == (std::vector<long>({(long)11, (long)0})));\n    assert(candidate((2), (11), (5)) == (std::vector<long>({(long)7, (long)0})));\n    assert(candidate((4), (5), (7)) == (std::vector<long>({(long)9, (long)2})));\n    assert(candidate((4), (5), (1)) == (std::vector<long>({(long)5, (long)0})));\n}\n"
    },
    {
        "task_id": "HumanEval/160",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// രണ്ട് വെക്റ്റർ ഓപ്പറേറ്ററും ഓപ്പറാൻഡും നൽകിയിട്ടുണ്ട്. ആദ്യ വെക്റ്ററിന് അടിസ്ഥാന ആൽജെബ്രിക് പ്രവർത്തനങ്ങൾ ഉണ്ട്, രണ്ടാമത്തെ വെക്റ്റർ പൂർണ്ണസംഖ്യകളുടെ വെക്റ്ററാണ്. ആൽജെബ്രിക് എക്സ്പ്രഷൻ നിർമ്മിക്കാനും ഈ എക്സ്പ്രഷന്റെ മൂല്യനിർണ്ണയം തിരികെ നൽകാനും നൽകിയ രണ്ട് വെക്റ്ററുകൾ ഉപയോഗിക്കുക. അടിസ്ഥാന ആൽജെബ്രിക് പ്രവർത്തനങ്ങൾഃ കൂട്ടിച്ചേർക്കൽ ( + ) കുറയ്ക്കൽ ( ) - ഗുണനം ( * ) ഫ്ലോർ ഡിവിഷൻ ( // ) എക്സ്പോണൻഷ്യേഷൻ ( ** ) ഉദാഹരണംഃ ഓപ്പറേറ്റർ['+', '*', '-'] വെക്റ്റർ = [2, 3, 4, 5] ഫലം = 2 + 3 * 4 - 5 => ഫലം = 9 കുറിപ്പ്: ഓപ്പറേറ്റർ വെക്റ്ററിന്റെ നീളം ഓപ്പറാൻഡ് വെക്റ്ററിന്റെ നീളത്തിന് തുല്യമാണ്. ഓപ്പറാൻഡ് നെഗറ്റീവ് അല്ലാത്ത പൂർണ്ണസംഖ്യകളുടെ വെക്റ്ററാണ്. ഓപ്പറേറ്റർ വെക്റ്ററിന് കുറഞ്ഞത് ഒരു ഓപ്പറേറ്ററും ഓപ്പറന്റ് വെക്റ്ററിന് കുറഞ്ഞത് രണ്ട് ഓപ്പറാൻഡുകളുമുണ്ട്.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n    std::vector<long> current_operand = operand;\n    std::vector<std::string> current_operator = op;\n\n    auto apply_op = [&](long a, long b, const std::string& o) {\n        if (o == \"+\") return a + b;\n        if (o == \"-\") return a - b;\n        if (o == \"*\") return a * b;\n        if (o == \"//\") return a / b;\n        if (o == \"**\") return static_cast<long>(pow(a, b));\n        return 0L; // Should not happen\n    };\n\n    std::vector<std::string> precedence1 = {\"**\"};\n    std::vector<std::string> precedence2 = {\"*\", \"//\"};\n    std::vector<std::string> precedence3 = {\"+\", \"-\"};\n\n    auto evaluate = [&](const std::vector<std::string>& prec) {\n        size_t i = 0;\n        while (i < current_operator.size()) {\n            bool found = false;\n            for (const auto& o : prec) {\n                if (current_operator[i] == o) {\n                    current_operand[i] = apply_op(current_operand[i], current_operand[i + 1], current_operator[i]);\n                    current_operand.erase(current_operand.begin() + i + 1);\n                    current_operator.erase(current_operator.begin() + i);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                i++;\n            }\n        }\n    };\n\n    evaluate(precedence1);\n    evaluate(precedence2);\n    evaluate(precedence3);\n\n    return current_operand[0];\n}",
        "test": "}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"//\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4}))) == (8));\n}\n"
    },
    {
        "task_id": "HumanEval/161",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// നിങ്ങൾക്ക് ഒരു സ്ട്രിംഗ് s നൽകിയിരിക്കുന്നു. s[i] ഒരു അക്ഷരമാണെങ്കിൽ, അതിന്റെ കേസ് താഴേ നിന്ന് മുകളിലേക്ക് അല്ലെങ്കിൽ വിപരീതമായി മാറ്റുക, അല്ലെങ്കിൽ അത് പോലെ തന്നെ സൂക്ഷിക്കുക. സ്ട്രിംഗിൽ അക്ഷരങ്ങളില്ലെങ്കിൽ, സ്ട്രിംഗ് വിപരീതമാക്കുക. ഫംഗ്ഷൻ ഫലമായി സ്ട്രിംഗ് നൽകണം. ഉദാഹരണങ്ങൾ >>> solve((\"1234\")) (\"4321\") >>> solve(\"ab\")) (\"AB\") >>> solve(\"#a@C\")) (\"#A@c\")\nstd::string solve(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string solve(std::string s) {\n    bool has_letter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            has_letter = true;\n            break;\n        }\n    }\n\n    if (has_letter) {\n        for (char& c : s) {\n            if (islower(c)) {\n                c = toupper(c);\n            } else if (isupper(c)) {\n                c = tolower(c);\n            }\n        }\n    } else {\n        std::reverse(s.begin(), s.end());\n    }\n    return s;\n}",
        "test": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
    },
    {
        "task_id": "HumanEval/162",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ഒരു സ്ട്രിംഗ് 'text' നൽകിയിട്ടുണ്ടെങ്കിൽ, അതിന്റെ md5 ഹാഷ് തുല്യമായ സ്ട്രിംഗ് മടക്കിനൽകുക. 'text' ഒരു ശൂന്യമായ സ്ട്രിംഗ് ആണെങ്കിൽ, None മടങ്ങുക. >>> string_to_md5((\"ഹലോ വേൾഡ്\")) \"3e25960a79dbc69b674cd4ec67a72c62\"\nstd::optional<std::string> string_to_md5(std::string text) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include <optional>\n\n#include <openssl/md5.h>\n#include <iomanip>\n#include <sstream>\n\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n\n    std::stringstream ss;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];\n    }\n    return ss.str();\n}",
        "test": "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n"
    },
    {
        "task_id": "HumanEval/163",
        "nl": "mal_Mlym",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// രണ്ട് പോസിറ്റീവ് പൂർണ്ണസംഖ്യകളായ a, b എന്നിവ നൽകിയിട്ടുണ്ടെങ്കിൽ, a, b എന്നിവയ്ക്കിടയിലുള്ള സംഖ്യകളുടെ എണ്ണം വർദ്ധിക്കുന്ന ക്രമത്തിൽ നൽകുക. ഉദാഹരണത്തിന്: >>> generate_integers((2), (8)) (std::vector<long>({(long)2, (long)4, (long)6, (long)8})) >>> generate_integers((8), (2)) (std::vector<long>({(long)2, (long)4, (long)6, (long)8})) >>> generate_integers (((10), (14)) (std::vector<long>())\nstd::vector<long> generate_integers(long a, long b) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> generate_integers(long a, long b) {\n    std::vector<long> result;\n    long start = std::min(a, b);\n    long end = std::max(a, b);\n    for (long i = start; i <= end; ++i) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = generate_integers;\n    assert(candidate((2), (10)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((10), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((132), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((17), (89)) == (std::vector<long>()));\n}\n"
    }
]