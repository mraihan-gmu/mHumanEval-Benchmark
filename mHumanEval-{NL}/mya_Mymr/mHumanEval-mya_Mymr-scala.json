[{"task_id":"HumanEval_0","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/း း း း း း း း း    \/\/ပေးထားတဲ့ ကိန်းတွေရဲ့ စာရင်းထဲမှာ ထက် ပိုနီးစပ်တဲ့ ကိန်းနှစ်လုံးရှိလား စစ်ကြည့်ပါ။    \/\/ >>> hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    \/\/ (false)\n    \/\/ >>> hasCloseElements((List[Float](1.0f.toFloat, 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n    \/\/ (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float) : Boolean = {\n","canonical_solution":"def hasCloseElements(numbers: List[Float], threshold: Float): Boolean = {\n      val sortedNumbers = numbers.sorted\n      for (i <- 1 until sortedNumbers.length) {\n        if (abs(sortedNumbers(i) - sortedNumbers(i - 1)) < threshold) {\n          return true\n        }\n      }\n      false\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_1","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/input string ထဲမှာရှိတဲ့ နေရာလွတ်တွေကို လျစ်လျူရှုလိုက်ပါ။    \/\/သီးခြားအုပ်စုတွေက ဟန်ချက်ညီ (ဖွင့်ထားတဲ့ brace တစ်ခုစီကို မှန်ကန်စွာ ပိတ်ထားတယ်) ပြီးတော့ တစ်ခုနဲ့တစ်ခု မချိတ်ထားဘူး    \/\/အဲဒီအုပ်စုတွေကို သီးခြား String တွေအဖြစ် ခွဲခြားပြီး အဲဒီ String တွေရဲ့ စာရင်းကို ပြန်ပို့ပေးတယ်။    \/\/ဒီ function ရဲ့ input က nested parentheses တွေရဲ့ အုပ်စုပေါင်းစုံပါတဲ့ string ပါ။ သင့်ရဲ့ ရည်ရွယ်ချက်က     \/\/ >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    \/\/ (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n","canonical_solution":"def separateParenGroups(paren_string: String): List[String] = {\n    val result = ListBuffer[String]()\n    val sanitizedInput = paren_string.replaceAll(\"\\\\s\", \"\")\n    var balance = 0\n    var currentGroup = new StringBuilder()\n\n    for (char <- sanitizedInput) {\n        currentGroup.append(char)\n        if (char == '(') balance += 1\n        else if (char == ')') balance -= 1\n\n        if (balance == 0 && currentGroup.nonEmpty) {\n            result += currentGroup.toString()\n            currentGroup = new StringBuilder()\n        }\n    }\n\n    result.toList\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_2","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ကိန်းဂဏန်းရဲ့ ဆယ်လီကိန်း အပိုင်းကို ပြန်ပေးပါ    \/\/(ကျန်တဲ့ အစိတ်အပိုင်းက ၁ ထက် အမြဲသေးပါတယ်။)    \/\/ပြီးပြည့်စုံသော အပိုင်း (ပေးထားသော နံပါတ်ထက် ပိုငယ်သော အကြီးဆုံးပြည့်စုံသော ကိန်း) နှင့် ဒသမကိန်းများ     \/\/အပေါင်းကိန်းတစ်ခုရဲ့ အပြောင်းအလဲဖြစ်တဲ့အခါ ဒါကို  လို့ခွဲခြားနိုင်ပါတယ်။    \/\/ >>> truncateNumber((3.5f))\n    \/\/ (0.5f)\n    def truncateNumber(number : Float) : Float = {\n","canonical_solution":"val integerPart = number.floor\n        val decimalPart = number - integerPart\n        decimalPart.toFloat\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_3","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/အဲဒီအချိန်မှာ function က true ပြန်ပေးရမယ်။ မဟုတ်ရင် false ပြန်ပေးရမယ်။    \/\/သင့်အလုပ်က ငွေကြေးကဒ်တွေ အားလုံး သုညအောက် ကျသွားရင် ရှာဖွေဖို့ပါ။    \/\/သင့်မှာ ဘဏ်စာရင်းတစ်ခုရှိပြီး အဲဒီအကောင့်မှာ ငွေထည့်လိုက်၊ ထုတ်လိုက် လုပ်သမျှတွေရဲ့ စာရင်းတစ်ခုရှိပါတယ် အဲဒီစာရင်းရဲ့ အစမှာ  လို့ရေးထားပါတယ်    \/\/ >>> belowZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (false)\n    \/\/ >>> belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong)))\n    \/\/ (true)\n    def belowZero(operations : List[Long]) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def belowZero(operations: List[Long]): Boolean = {\n    var balance: Long = 0\n    for (operation <- operations) {\n      balance += operation\n      if (balance < 0) {\n        return true\n      }\n    }\n    false\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(belowZero(List(1L, 2L, 3L)))         \/\/ false\n    println(belowZero(List(1L, 2L, -4L, 5L)))    \/\/ true\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_4","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/MAD = ပျမ်းမျှ။ x - x_mean။    \/\/element နဲ့ ဗဟိုအမှတ် (ဒီကိစ္စမှာ mean)    \/\/Mean Absolute Deviation ကေတာ့ ႏွစ္ခုၾကားက အလယ္အလတ္ ပကတိ ကွာဟခ်က္ပါ။    \/\/ဒီဒေတာစုရဲ့ ပျမ်းမျှအနီးမှာ။    \/\/input ကိန်းဂဏန်းများ၏ ပေးထားသော စာရင်းတစ်ခုအတွက် ပျမ်းမျှ အလုံးစုံ ကွာဟချက်ကို တွက်ချက်ပါ။    \/\/ >>> meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    \/\/ (1.0f)\n    def meanAbsoluteDeviation(numbers : List[Float]) : Float = {\n","canonical_solution":"val mean = numbers.sum \/ numbers.size\n    val deviations = numbers.map(num => math.abs(num - mean))\n    val mad = deviations.sum \/ deviations.size\n    mad\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\n}\n"},{"task_id":"HumanEval_5","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/input list `numbers'  ၏ဆက်တိုက် element နှစ်ခုကြားတွင် \"delimiter\" နံပါတ်ကိုထည့်ပါ။    \/\/ >>> intersperse((List[Long]()), (4l))\n    \/\/ (List[Long]())\n    \/\/ >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l))\n    \/\/ (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n","canonical_solution":"if (numbers.isEmpty) {\n        List()\n      } else {\n        numbers.init.flatMap(n => List(n, delimeter)) :+ numbers.last\n      }\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_6","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ (() (()) မှာ အမြင့်ဆုံး နှစ်ဆင့်ရှိပြီး ((())) မှာ သုံးဆင့်ရှိတယ်    \/\/အုပ်စုတစ်ခုစီအတွက်၊ ကပ် parentheses များ၏ နက်ရှိုင်းဆုံး nesting level ကို output လုပ်ပါ။    \/\/ဒီ function ရဲ့ input က အလွတ်နေရာနဲ့ ခြားထားတဲ့ parentheses တွေအတွက် အုပ်စုပေါင်းစုံကို ကိုယ်စားပြုတဲ့ string ပါ။    \/\/ >>> parseNestedParens((\"(()()) ((())) () ((())()())\"))\n    \/\/ (List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def parseNestedParens(paren_string: String): List[Long] = {\n    paren_string.split(\" \").toList.map { group =>\n      var maxDepth = 0\n      var currentDepth = 0\n      group.foreach {\n        case '(' => \n          currentDepth += 1\n          maxDepth = max(maxDepth, currentDepth)\n        case ')' => \n          currentDepth -= 1\n      }\n      maxDepth.toLong\n    }\n  }\n\n  \/\/ Example usage\n  def main(args: Array[String]): Unit = {\n    val result = parseNestedParens(\"(()()) ((())) () ((())()())\")\n    println(s\"Result: ${result.mkString(\", \")}\")\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_7","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ပေးထားသော substring ပါ၀င်သော string များအတွက် input list ကို filter လုပ်ပါ    \/\/ >>> filterBySubstring((List[String]()), (\"a\"))\n    \/\/ (List[String]())\n    \/\/ >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\")), (\"a\"))\n    \/\/ (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings : List[String], substring : String) : List[String] = {\n","canonical_solution":"strings.filter(_.contains(substring))\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"grunt\", \"prune\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_8","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/အလွတ် product က 1 နဲ့ ညီမျှပြီး အလွတ် sum က 0 နဲ့ ညီမျှသင့်ပါတယ်။    \/\/ပေးထားသော integer စာရင်းတစ်ခုအတွက်, စာရင်းတစ်ခုရှိ integer အားလုံး၏ ပေါင်းလဒ်နှင့် ပမာဏတစ်ခုပါဝင်သော tuple တစ်ခုကို ပြန်ပေးပါ။    \/\/ >>> sumProduct((List[Long]()))\n    \/\/ ((0l, 1l))\n    \/\/ >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n","canonical_solution":"def sumProduct(numbers: List[Long]): (Long, Long) = {\n        val sum = numbers.sum\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n    }\n\n    def main(args: Array[String]): Unit = {\n        \/\/ Test examples\n        println(sumProduct(List[Long]())) \/\/ (0L, 1L)\n        println(sumProduct(List[Long](1L, 2L, 3L, 4L))) \/\/ (10L, 24L)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n"},{"task_id":"HumanEval_9","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/အဆက်မပြတ်ပေါ့။    \/\/ပေးထားတဲ့ ကိန်းပြည့်စာရင်းကနေ ပေးထားတဲ့ အချိန်ထိ တွေ့ထားတဲ့ အလှည့်ကျ အများဆုံး ဒြပ်စင်စာရင်းကို ဖန်တီးပါ။    \/\/ >>> rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong)))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))\n    def rollingMax(numbers : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rollingMax(numbers: List[Long]): List[Long] = {\n        var maxSoFar = Long.MinValue\n        numbers.map { num =>\n            maxSoFar = max(maxSoFar, num)\n            maxSoFar\n        }\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_10","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/- string ရဲ့ reverse end ကို palindromic suffix ရှေ့မှာရှိတဲ့ string prefix နဲ့ ပေါင်းထည့်ပါ။    \/\/- ပေးထားသော string ၏ palindrome ဖြစ်သော postfix အရှည်ဆုံးကို ရှာပါ။    \/\/အယ်လ်ဂိုရစ်သမ် စိတ်ကူးက ရိုးရှင်းပါတယ်။    \/\/ပေးထားတဲ့ string နဲ့စတဲ့ အတိုဆုံး palindrome ကိုရှာပါ။    \/\/ >>> makePalindrome((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> makePalindrome((\"cat\"))\n    \/\/ (\"catac\")\n    \/\/ >>> makePalindrome((\"cata\"))\n    \/\/ (\"catac\")\n    def makePalindrome(string : String) : String = {\n","canonical_solution":"def makePalindrome(string: String): String = {\n    \/\/ Helper function to check if a string is a palindrome\n    def isPalindrome(s: String): Boolean = s == s.reverse\n\n    \/\/ Find the longest palindromic suffix\n    var endIndex = string.length\n    while (endIndex > 0 && !isPalindrome(string.substring(endIndex - 1))) {\n      endIndex -= 1\n    }\n\n    \/\/ Extract the non-palindromic prefix\n    val prefix = string.substring(0, endIndex - 1)\n\n    \/\/ Append the reverse of the prefix to form the shortest palindrome\n    string + prefix.reverse\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"},{"task_id":"HumanEval_11","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဒီထည့်သွင်းချက်တွေမှာ ဘိုင်နရီ XOR ကို လုပ်ဆောင်ပြီး ရလဒ်ကို string အဖြစ်လည်း ပြန်ပို့တယ်။    \/\/input ကတော့ 1s နဲ့ 0s ပဲပါဝင်တဲ့ a နဲ့ b ဆိုတဲ့ string နှစ်ခုပါ။    \/\/ >>> stringXor((\"010\"), (\"110\"))\n    \/\/ (\"100\")\n    def stringXor(a : String, b : String) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def stringXor(a: String, b: String): String = {\n    (a zip b).map { case (charA, charB) => \n      if (charA == charB) '0' else '1'\n    }.mkString\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"},{"task_id":"HumanEval_12","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/input list တွင် မရှိလျှင် None ကို ပြန်ပေးသည်။    \/\/string စာရင်းထဲက အရှည်ဆုံး string ကို ပြန်ပေးမယ်။    \/\/ >>> longest((List[String]()))\n    \/\/ None\n    \/\/ >>> longest((List[String](\"a\", \"b\", \"c\")))\n    \/\/ Some(\"a\")\n    \/\/ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    \/\/ Some(\"ccc\")\n    def longest(strings : List[String]) : Option[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ Out of list of strings, return the longest one. Return the first one in case of multiple\n    \/\/ strings of the same length. Return None in case the input list is empty.\n    def longest(strings: List[String]): Option[String] = {\n        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(Some(\"x\")));\n    assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(Some(\"zzzz\")));\n    }\n\n}\n"},{"task_id":"HumanEval_13","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/a နဲ့ b ဆိုတဲ့ ကိန်းပြည့်နှစ်လုံးရဲ့ အများဆုံး တူညီသော စားကိန်းကို ပြန်ပေးပါ    \/\/ >>> greatestCommonDivisor((3l), (5l))\n    \/\/ (1l)\n    \/\/ >>> greatestCommonDivisor((25l), (15l))\n    \/\/ (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ Return a greatest common divisor of two integers a and b\n    \/\/ >>> greatestCommonDivisor((3l), (5l))\n    \/\/ (1l)\n    \/\/ >>> greatestCommonDivisor((25l), (15l))\n    \/\/ (5l)\n    def greatestCommonDivisor(a: Long, b: Long): Long = {\n        if (b == 0) a else greatestCommonDivisor(b, a % b)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_14","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/input string ၏ အတိုဆုံးမှ အရှည်ဆုံးသို့ ရှေ့ဆက်စာလုံးအားလုံး၏ စာရင်းကို ပြန်ပို့သည်။    \/\/ >>> allPrefixes((\"abc\"))\n    \/\/ (List[String](\"a\", \"ab\", \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Return list of all prefixes from shortest to longest of the input string\n  \/\/ >>> allPrefixes((\"abc\"))\n  \/\/ (List[String](\"a\", \"ab\", \"abc\"))\n  def allPrefixes(string: String): List[String] = {\n    (1 to string.length).map(i => string.substring(0, i)).toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_15","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/0 မှ n အထိ အပါအဝင် နေရာသတ်မှတ်ထားသော နံပါတ်များပါဝင်သော string ကိုပြန်ပေးသည်။     \/\/ >>> stringSequence((0l))\n    \/\/ (\"0\")\n    \/\/ >>> stringSequence((5l))\n    \/\/ (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def stringSequence(n: Long): String = {\n    (0L to n).mkString(\" \")\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"},{"task_id":"HumanEval_16","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/String တစ်ခုကို ပေးထားရင် ကွဲပြားတဲ့ စာလုံးတွေ ဘယ်နှစ်လုံးပါလဲဆိုတာ ရှာလိုက်ပါ (အကြီး၊အငယ်၊အမကြီး ကိန်းဂဏန်းတွေကို ဂရုမစိုက်)    \/\/ >>> countDistinctCharacters((\"xyzXYZ\"))\n    \/\/ (3l)\n    \/\/ >>> countDistinctCharacters((\"Jerry\"))\n    \/\/ (4l)\n    def countDistinctCharacters(string : String) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Given a string, find out how many distinct characters (regardless of case) does it consist of\n  \/\/ >>> countDistinctCharacters((\"xyzXYZ\"))\n  \/\/ (3l)\n  \/\/ >>> countDistinctCharacters((\"Jerry\"))\n  \/\/ (4l)\n  def countDistinctCharacters(string: String): Long = {\n    string.toLowerCase.toSet.size.toLong\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\n}\n"},{"task_id":"HumanEval_17","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/\"ဟေး\" က လေးချက်သံ၊ တစ်ချက်သံ ကြာတယ်။    \/\/\"o\" က \"d\" ပါ။    \/\/O က အသံတစ်လုံးပါ၊ စည်းချက် လေးခုပါတယ်။    \/\/ဒီမှာ ဒဏ္ဍာရီတစ်ခုပါ။    \/\/နောက်ဆုံးမဟုတ်ဘူး။    \/\/မင်းအလုပ်က ဒီ string ကိုခွဲခြမ်းစိတ်ဖြာပြီး တစ်ခုစီက ဘယ်နှကြိမ် ရိုက်တာလဲနဲ့ ကိုက်ညီတဲ့ ကိန်းပြည့်စာရင်းကို ပြန်ပို့ဖို့ပါ။    \/\/ဒီ function ကို ASCII ပုံစံမှာ ဂီတသင်္ကေတတွေကို ကိုယ်စားပြုတဲ့ ကြိုးတစ်ချောင်းနဲ့ ထည့်လိုက်တာပါ။    \/\/ >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    \/\/ (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def parseMusic(music_string: String): List[Long] = {\n    val noteMap = Map(\"o\" -> 4L, \"o|\" -> 2L, \".|\" -> 1L)\n    val notes = music_string.split(\" \")\n    notes.toList.map(note => noteMap(note))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_18","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/မူလ string ထဲမှာ ပေးထားတဲ့ substring ကို ဘယ်နှစ်ကြိမ် တွေ့ရမလဲ ရှာကြည့်ပါ။ ထပ်ကျော့နေတဲ့ ကိစ္စတွေကို ရေတွက်ပါ။    \/\/ >>> howManyTimes((\"\"), (\"a\"))\n    \/\/ (0l)\n    \/\/ >>> howManyTimes((\"aaa\"), (\"a\"))\n    \/\/ (3l)\n    \/\/ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    \/\/ (3l)\n    def howManyTimes(string : String, substring : String) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def howManyTimes(string: String, substring: String): Long = {\n        if (substring.isEmpty || string.isEmpty) return 0L\n        var count: Long = 0L\n        for (i <- 0 to (string.length - substring.length)) {\n            if (string.substring(i, i + substring.length) == substring) {\n                count += 1\n            }\n        }\n        count\n    }\n\n    \/\/ Test cases\n    def main(args: Array[String]): Unit = {\n        println(howManyTimes(\"\", \"a\"))    \/\/ Output: 0\n        println(howManyTimes(\"aaa\", \"a\")) \/\/ Output: 3\n        println(howManyTimes(\"aaaa\", \"aa\")) \/\/ Output: 3\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_19","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/အကြီးဆုံးကနေ အငယ်ဆုံးအထိ အဆင့်သတ်မှတ်ထားတဲ့ ကိန်းတန်းကို ပြန်ပို့ပါ    \/\/မှန်ကန်သောရွေးချယ်စရာများမှာ 'သုည', 'တစ်', 'နှစ်', 'သုံး', 'လေး', 'ငါး', 'ခြောက်', 'ခုနစ်', 'ရှစ်' နှင့် 'ကိုး' ဖြစ်သည်။    \/\/input က \"သုည\" ကနေ \"ကိုး\" အထိ နံပါတ်တွေရဲ့ နေရာသတ်မှတ်ထားတဲ့ string ပါ။    \/\/ >>> sortNumbers((\"three one five\"))\n    \/\/ (\"one three five\")\n    def sortNumbers(numbers : String) : String = {\n","canonical_solution":"def sortNumbers(numbers: String): String = {\n    val numberWords = Map(\n      \"zero\" -> 0,\n      \"one\" -> 1,\n      \"two\" -> 2,\n      \"three\" -> 3,\n      \"four\" -> 4,\n      \"five\" -> 5,\n      \"six\" -> 6,\n      \"seven\" -> 7,\n      \"eight\" -> 8,\n      \"nine\" -> 9\n    )\n    \n    numbers.split(\" \")\n      .sortBy(word => numberWords(word))\n      .mkString(\" \")\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n"},{"task_id":"HumanEval_20","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/အခြားဟာတွေအလိုက် ပြန်ပို့လိုက်ပါ (အရေအတွက်နည်း၊ အရေအတွက်များ)    \/\/ပေးထားသော နံပါတ်စာရင်း (အနည်းဆုံး နှစ်ခု) မှ တစ်ခုစီနှင့် အနီးစပ်ဆုံး နံပါတ်နှစ်ခုကို ရွေး၍ ပြန်ပို့ပါ။    \/\/ >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n    \/\/ ((2.0f, 2.2f))\n    \/\/ >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n    \/\/ ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def findClosestElements(numbers: List[Float]): (Float, Float) = {\n    require(numbers.length >= 2, \"List must contain at least two elements\")\n    val sortedNumbers = numbers.sorted\n\n    var minDiff = Float.MaxValue\n    var closestPair = (0.0f, 0.0f)\n\n    for(i <- 0 until sortedNumbers.length - 1) {\n      val currentDiff = abs(sortedNumbers(i) - sortedNumbers(i + 1))\n      if(currentDiff < minDiff) {\n        minDiff = currentDiff\n        closestPair = (sortedNumbers(i), sortedNumbers(i + 1))\n      }\n    }\n    \n    closestPair\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"},{"task_id":"HumanEval_21","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/သေးငယ်ဆုံးကိန်းက ၀ ဖြစ်လာပြီး အကြီးဆုံးက ၁ ဖြစ်လာမယ်။    \/\/ကိန်းဂဏန်းစာရင်း (အနည်းဆုံး ဒြပ်စင်နှစ်ခု) ကို ပေးပြီးတဲ့အခါ ဒီစာရင်းကို အလျားလိုက် ပြောင်းလဲမှုတစ်ခုနဲ့ ပူးတွဲလိုက်ပါ    \/\/ >>> rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat)))\n    \/\/ (List[Float](0.0f.toFloat, 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))\n    def rescaleToUnit(numbers : List[Float]) : List[Float] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Given list of numbers (of at least two elements), apply a linear transform to that list,\n  \/\/ such that the smallest number will become 0 and the largest will become 1\n  def rescaleToUnit(numbers: List[Float]): List[Float] = {\n    val minVal = numbers.min\n    val maxVal = numbers.max\n    numbers.map(num => (num - minVal) \/ (maxVal - minVal))\n  }\n}\n\n\/\/ Usage example\nobject Main extends App {\n  val numbers = List[Float](1.0f, 2.0f, 3.0f, 4.0f, 5.0f)\n  val rescaledNumbers = Problem.rescaleToUnit(numbers)\n  println(rescaledNumbers) \/\/ Output: List(0.0, 0.25, 0.5, 0.75, 1.0)\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(rescaleToUnit((List[Float](2.0f.toFloat, 49.9f.toFloat))).equals((List[Float](0.0f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](100.0f.toFloat, 49.9f.toFloat))).equals((List[Float](1.0f.toFloat, 0.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals((List[Float](0.0f.toFloat, 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](2.0f.toFloat, 1.0f.toFloat, 5.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))).equals((List[Float](0.25f.toFloat, 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    assert(rescaleToUnit((List[Float](12.0f.toFloat, 11.0f.toFloat, 15.0f.toFloat, 13.0f.toFloat, 14.0f.toFloat))).equals((List[Float](0.25f.toFloat, 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    }\n\n}\n"},{"task_id":"HumanEval_22","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ပေးထားသော scalathon တန်ဖိုးများစာရင်းကို ဖြောင့်ကိန်းများအတွက်သာ စစ်ပေးပါ။    \/\/ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    \/\/ (List[Long](5l.toLong))\n    \/\/ >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values : List[Any]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def filterIntegers(values: List[Any]): List[Long] = {\n    values.collect {\n      case l: Long => l\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(filterIntegers(List[Any](\"a\", 3.14f, 5l))) \/\/ List(5)\n    println(filterIntegers(List[Any](1l, 2l, 3l, \"abc\", Map[Long, Long](), List[Long]()))) \/\/ List(1, 2, 3)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_23","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/string ကိုပြန်ပို့ပါ    \/\/ >>> stringLength((\"\"))\n    \/\/ (0l)\n    \/\/ >>> stringLength((\"abc\"))\n    \/\/ (3l)\n    def strlen(string : String) : Long = {\n","canonical_solution":"def strlen(string: String): Long = {\n        string.length.toLong\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"},{"task_id":"HumanEval_24","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ပေးထားတဲ့ ကိန်း n အတွက် n ထက် ပိုသေးတဲ့ n ကို ညီမျှစွာ ပိုင်းခြားနိုင်တဲ့ အကြီးဆုံးကိန်းကို ရှာပါ။    \/\/ >>> largestDivisor((15l))\n    \/\/ (5l)\n    def largestDivisor(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ For a given number n, find the largest number that divides n evenly, smaller than n\n    \/\/ >>> largestDivisor(15l)\n    \/\/ (5l)\n    def largestDivisor(n: Long): Long = {\n        for (i <- (n \/ 2) to 1 by -1) {\n            if (n % i == 0) return i\n        }\n        1L  \/\/ if no divisor found, return 1 (since 1 divides any number)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"},{"task_id":"HumanEval_25","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/input number ကတော့ ကိန်းရှင်အားလုံးရဲ့ product နဲ့ညီမျှရမယ်။    \/\/ကိန်းရှင်တစ်ခုစီကို ကိန်းရှင်ခွဲခြင်းမှာ ဘယ်နှစ်ကြိမ်ပေါ်လာသလဲနဲ့ ကိုက်ညီတဲ့ အကြိမ်ရေနဲ့ စာရင်းပြုလုပ်ရပါမယ်။    \/\/အငယ်ဆုံးမှ အကြီးဆုံးအထိ အစီအစဉ်လိုက်ပြီး ပေးထားသော ကိန်းပြည့်၏ အခြေခံကိန်းရှင်စာရင်းကို ပြန်ပေးသည်။    \/\/ >>> factorize((8l))\n    \/\/ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    \/\/ >>> factorize((25l))\n    \/\/ (List[Long](5l.toLong, 5l.toLong))\n    \/\/ >>> factorize((70l))\n    \/\/ (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def factorize(n: Long): List[Long] = {\n    var num = n\n    val factors = ListBuffer[Long]()\n    \n    var i = 2L\n    while (i <= sqrt(num).toLong) {\n      while (num % i == 0) {\n        factors += i\n        num \/= i\n      }\n      i += 1\n    }\n    \n    if (num > 1) {\n      factors += num\n    }\n    \n    factors.toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_26","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/left element တွေရဲ့ အတန်းအစားကို input ထဲက အတန်းအစားအတိုင်း ထားပါ။    \/\/ဖြောင့်ကိန်းစာရင်းထဲက တစ်ကြိမ်ထက်ပိုပြီးပေါ်လာတဲ့ ဒြပ်စင်အားလုံးကို ဖယ်ရှားလိုက်ပါ    \/\/ >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))\n    \/\/ (List[Long](1l.toLong, 3l.toLong, 4l.toLong))\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def removeDuplicates(numbers: List[Long]): List[Long] = {\n    val elementCount = numbers.groupBy(identity).mapValues(_.size)\n    numbers.filter(num => elementCount(num) == 1)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = List[Long](1L, 2L, 3L, 2L, 4L)\n    println(removeDuplicates(numbers)) \/\/ Output: List(1, 3, 4)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(removeDuplicates((List[Long]())).equals((List[Long]())));\n    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_27","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/string တစ်ခုအတွက် lowercase characters တွေကို uppercase နဲ့ uppercase တွေကို lowercase ပြောင်းပါ။    \/\/ >>> flipCase((\"Hello\"))\n    \/\/ (\"hELLO\")\n    def flipCase(string : String) : String = {\n","canonical_solution":"def flipCase(string: String): String = {\n    string.map {\n      case c if c.isLower => c.toUpper\n      case c if c.isUpper => c.toLower\n      case c => c\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"},{"task_id":"HumanEval_28","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/string တွေကို string တစ်ခုတည်းအဖြစ် ပေါင်းစပ်လိုက်ပါ    \/\/ >>> concatenate((List[String]()))\n    \/\/ (\"\")\n    \/\/ >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n    \/\/ (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ Concatenate list of strings into a single string\n    \/\/ >>> concatenate((List[String]()))\n    \/\/ (\"\")\n    \/\/ >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n    \/\/ (\"abc\")\n    def concatenate(strings: List[String]): String = {\n        strings.mkString(\"\")\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"},{"task_id":"HumanEval_29","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ပေးထားတဲ့ ရှေ့ဆက်ပုဒ်နဲ့ စတဲ့ string တွေအတွက်ပဲ input list ကို စစ်ပါ။    \/\/ >>> filterByPrefix((List[String]()), (\"a\"))\n    \/\/ (List[String]())\n    \/\/ >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\")), (\"a\"))\n    \/\/ (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings : List[String], prefix : String) : List[String] = {\n","canonical_solution":"strings.filter(_.startsWith(prefix))\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_30","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/List ထဲက အပေါင်းကိန်းတွေပဲ ပြန်ပေးပါ။    \/\/ >>> getPositive((List[Long](-1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\n    \/\/ (List[Long](2l.toLong, 5l.toLong, 6l.toLong))\n    \/\/ >>> getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong)))\n    \/\/ (List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))\n    def getPositive(l : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getPositive(l: List[Long]): List[Long] = {\n        l.filter(_ > 0)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong, 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n    }\n\n}\n"},{"task_id":"HumanEval_31","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ပေးထားတဲ့ ကိန်းတစ်ခုဟာ အကြိမ်ကြိမ်ကိန်းဖြစ်ရင် မှန်တဲ့ကိန်းကို ပြန်ပေးပြီး အခြားကိစ္စတွေမှာတော့ မှားတဲ့ကိန်းကို ပြန်ပေးတယ်။    \/\/ >>> isPrime((6l))\n    \/\/ (false)\n    \/\/ >>> isPrime((101l))\n    \/\/ (true)\n    \/\/ >>> isPrime((11l))\n    \/\/ (true)\n    \/\/ >>> isPrime((13441l))\n    \/\/ (true)\n    \/\/ >>> isPrime((61l))\n    \/\/ (true)\n    \/\/ >>> isPrime((4l))\n    \/\/ (false)\n    \/\/ >>> isPrime((1l))\n    \/\/ (false)\n    def isPrime(n : Long) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Return true if a given number is prime, and false otherwise.\n  def isPrime(n: Long): Boolean = {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n      if (n % i == 0 || n % (i + 2) == 0) return false\n      i += 6\n    }\n    true\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_33","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/l ၏တန်ဖိုးများနှင့်ညီသောညွှတ်ကိန်းများသို့မညီဘဲခွဲခြားထားသည်။    \/\/l' သည် l နှင့်တူညီသည်၊ သုံးခုဖြင့်မခွဲနိုင်သောညွှန်းကိန်းများတွင်၊ သုံးခုဖြင့်ခွဲနိုင်သောညွှန်းကိန်းများတွင်၎င်း၏တန်ဖိုးများကတူညီသည်။    \/\/ဤလုပ်ဆောင်ချက်သည် l စာရင်းကိုယူပြီး l' စာရင်းကိုပြန်ပေးသည်    \/\/ >>> sortThird((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    \/\/ >>> sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong)))\n    \/\/ (List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong))\n    def sortThird(l : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \n  def sortThird(l: List[Long]): List[Long] = {\n    \/\/ Get the elements at indices divisible by 3\n    val elementsAtThirdIndices = l.zipWithIndex.collect {\n      case (value, index) if index % 3 == 0 => value\n    }\n    \n    \/\/ Sort the collected elements\n    val sortedElements = elementsAtThirdIndices.sorted\n    \n    \/\/ Replace elements at indices divisible by 3 with the sorted ones\n    l.zipWithIndex.map {\n      case (_, index) if index % 3 == 0 => sortedElements(index \/ 3)\n      case (value, _) => value\n    }\n  }\n\n  \/\/ Example usage:\n  def main(args: Array[String]): Unit = {\n    println(sortThird(List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    println(sortThird(List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong)))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong))));\n    assert(sortThird((List[Long](5l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 5l.toLong))));\n    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 9l.toLong, 4l.toLong, 8l.toLong, 3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 9l.toLong, 4l.toLong, 8l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong, 1l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_34","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/စာရင်းတစ်ခုထဲက ရွေးထားတဲ့ ထူးခြားတဲ့ အက္ခရာတွေကို ပြန်ပေးမယ်    \/\/ >>> unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    \/\/ (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n","canonical_solution":"def unique(l: List[Long]): List[Long] = {\n    l.toSet.toList.sorted\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_35","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/List ထဲက အမ်ားဆံုး element ကို ျပန္ေပးပါ    \/\/ >>> maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (3l)\n    \/\/ >>> maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong)))\n    \/\/ (123l)\n    def maxElement(l : List[Long]) : Long = {\n","canonical_solution":"def maxElement(l: List[Long]): Long = {\n    l.max\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"},{"task_id":"HumanEval_36","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/11 သို့မဟုတ် 13 ဖြင့်စားနိုင်သော n ထက်နည်းသော integer များတွင် 7 သည်ပေါ်လာသော အကြိမ်ရေကိုပြန်ပေးသည်။    \/\/ >>> fizzBuzz((50l))\n    \/\/ (0l)\n    \/\/ >>> fizzBuzz((78l))\n    \/\/ (2l)\n    \/\/ >>> fizzBuzz((79l))\n    \/\/ (3l)\n    def fizzBuzz(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def fizzBuzz(n: Long): Long = {\n    var count = 0L\n    for (i <- 1L until n) {\n      if (i % 11 == 0 || i % 13 == 0) {\n        count += i.toString.count(_ == '7')\n      }\n    }\n    count\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"},{"task_id":"HumanEval_37","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/l ရဲ့ အညွှန်းကိန်းတွေကို တန်းစီထားတယ်။    \/\/l' သည် l နှင့်တူညီသည်၊    \/\/ဤလုပ်ဆောင်ချက်သည် l စာရင်းကိုယူပြီး l' စာရင်းကိုပြန်ပေးသည်    \/\/ >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    \/\/ >>> sortEven((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (List[Long](3l.toLong, 6l.toLong, 5l.toLong, 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ This function takes a list l and returns a list l' such that\n  \/\/ l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  \/\/ to the values of the even indicies of l, but sorted.\n  def sortEven(l: List[Long]): List[Long] = {\n    val evenIndices = l.indices.filter(_ % 2 == 0)\n    val sortedEvens = evenIndices.map(l(_)).sorted\n\n    l.indices.map { index =>\n      if (index % 2 == 0) sortedEvens(evenIndices.indexOf(index))\n      else l(index)\n    }.toList\n  }\n\n  \/\/ Examples\n  def main(args: Array[String]): Unit = {\n    println(sortEven(List[Long](1L, 2L, 3L)))\n    println(sortEven(List[Long](5L, 6L, 3L, 4L)))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_39","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/prime_fib က ဖီဘိုနာချီကိန်းတစ်ခုဖြစ်တဲ့ n-th ကိန်းတစ်ခုကို ပြန်ပေးတယ် ဒါကလည်း ပရိုင်းမစ် ကိန်းတစ်ခုဖြစ်ပါတယ်    \/\/ >>> primeFib((1l))\n    \/\/ (2l)\n    \/\/ >>> primeFib((2l))\n    \/\/ (3l)\n    \/\/ >>> primeFib((3l))\n    \/\/ (5l)\n    \/\/ >>> primeFib((4l))\n    \/\/ (13l)\n    \/\/ >>> primeFib((5l))\n    \/\/ (89l)\n    def primeFib(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def primeFib(n: Long): Long = {\n    \/\/ Function to check if a number is prime\n    def isPrime(num: Long): Boolean = {\n      if (num <= 1) return false\n      if (num == 2) return true\n      if (num % 2 == 0) return false\n      for (i <- Range(3, math.sqrt(num).toInt + 1, 2)) {\n        if (num % i == 0) return false\n      }\n      true\n    }\n\n    \/\/ Function to generate Fibonacci numbers\n    def fibonacciStream(): Stream[Long] = {\n      def fibs(a: Long, b: Long): Stream[Long] = a #:: fibs(b, a + b)\n      fibs(0, 1)\n    }\n\n    \/\/ Find the n-th Fibonacci number that is also prime\n    val primeFibs = fibonacciStream().filter(isPrime)\n    primeFibs.take(n.toInt).last\n  }\n\n  \/\/ Test the function\n  def main(args: Array[String]): Unit = {\n    println(primeFib(1L)) \/\/ 2\n    println(primeFib(2L)) \/\/ 3\n    println(primeFib(3L)) \/\/ 5\n    println(primeFib(4L)) \/\/ 13\n    println(primeFib(5L)) \/\/ 89\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(primeFib((1l)) == (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n    assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n    assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n"},{"task_id":"HumanEval_40","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/သုညအထိ စုပေါင်းပြီး မဟုတ်ရင် မှားတယ်။    \/\/true ကိုပြန်ပို့တယ်ဆိုရင် list ထဲမှာ မတူတဲ့ element သုံးခုရှိရင်    \/\/triple_sum_to_zero က ကိန္းျဖဴေတြရဲ႕ စာရင္းကို အတြင္းမွာထားတယ္။    \/\/ >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\n    \/\/ (false)\n    \/\/ >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong)))\n    \/\/ (true)\n    \/\/ >>> triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong)))\n    \/\/ (false)\n    \/\/ >>> triplesSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n    \/\/ (true)\n    \/\/ >>> triplesSumToZero((List[Long](1l.toLong)))\n    \/\/ (false)\n    def triplesSumToZero(l : List[Long]) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ triples_sum_to_zero takes a list of integers as an input.\n    \/\/ it returns true if there are three distinct elements in the list that\n    \/\/ sum to zero, and false otherwise.\n    def triplesSumToZero(l: List[Long]): Boolean = {\n        val n = l.length\n        if (n < 3) return false\n\n        \/\/ Sort the list to use the two-pointer technique\n        val sortedList = l.sorted\n\n        \/\/ Iterate over the list\n        for (i <- 0 until n - 2) {\n            var left = i + 1\n            var right = n - 1\n\n            \/\/ Use two pointers to find the remaining two numbers\n            while (left < right) {\n                val currentSum = sortedList(i) + sortedList(left) + sortedList(right)\n                if (currentSum == 0) {\n                    return true\n                } else if (currentSum < 0) {\n                    left += 1\n                } else {\n                    right -= 1\n                }\n            }\n        }\n\n        false\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong, 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_41","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဒီ function က ဒီလိုတိုက်မိမှုတွေရဲ့ အရေအတွက်ကို output လုပ်ပေးတယ်။    \/\/သူတို့တွေဟာ မတိုက်မိခဲ့သလိုပဲ သူတို့တွေရဲ့ လမ်းကြောင်းထဲမှာ ဆက်လက် ပြေးနေတယ်။    \/\/ဒါပေမဲ့ ကားတွေက အင်မတန် ခိုင်မာပြီး ခိုင်မာတာကြောင့် ဆက်မောင်းနေတယ်။    \/\/ဘယ်မှ ညာသို့ သွားနေတဲ့ ကားက ညာမှ ဘယ်သို့ သွားနေတဲ့ ကားကို ဝင်တိုက်မိတဲ့အခါ    \/\/ကားအားလုံးဟာ တူညီတဲ့ အလျင်နဲ့ ရွေ့ရှားနေကြတယ်၊ ကားနှစ်စီး တိုက်မိတယ်လို့ ဆိုကြတယ်။    \/\/ညာဘက်ကနေ ဘယ်ဘက်ကို မောင်းနေကြတာပါ ကားနှစ်စီးဟာ ညာဘက်ကနေ ဘယ်ဘက်ကို အမြန်ဆုံး မောင်းနေကြတာပါ    \/\/ကား n စီးနင်းနေတာ ဘယ်မှ ညာသို့ ဖြစ်ပြီး တစ်ပြိုင်နက်မှာ ကား n စီးရဲ့ မတူတဲ့ အစုတွေရှိတယ်။    \/\/အပြီးပြည့်စုံတဲ့ မျဉ်းဖြောင့်တစ်ကြောင်းလို့ စိတ်ကူးကြည့်ပါ။    def carRaceCollision(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Imagine a road that's a perfectly straight infinitely long line.\n  \/\/ n cars are driving left to right; simultaneously, a different set of n cars\n  \/\/ are driving right to left. The two sets of cars start out being very far from\n  \/\/ each other. All cars move at the same speed. Two cars are said to collide\n  \/\/ when a car that's moving left to right hits a car that's moving right to left.\n  \/\/ However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  \/\/ in their trajectory as if they did not collide.\n  \/\/ This function outputs the number of such collisions.\n  def carRaceCollision(n: Long): Long = {\n    n\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"},{"task_id":"HumanEval_42","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/return list ကို element တွေနဲ့အတူ ၁ ထပ်တိုးလိုက်ပါတယ်။    \/\/ >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    \/\/ >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    \/\/ (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList(l : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ Return list with elements incremented by 1.\n    def incrList(l: List[Long]): List[Long] = {\n        l.map(_ + 1)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong, 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_43","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/သုညအထိ စုပေါင်းပြီး မဟုတ်ရင် မှားတယ်။    \/\/true ကိုပြန်ပို့တယ်ဆိုရင် list ထဲမှာ မတူတဲ့ element နှစ်ခုရှိရင်    \/\/pairs_sum_to_zero သည် ကိန်းပြည့်စာရင်းကို အဝင်အဖြစ် ယူသည်။    \/\/ >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong)))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong)))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    \/\/ (true)\n    \/\/ >>> pairsSumToZero((List[Long](1l.toLong)))\n    \/\/ (false)\n    def pairsSumToZero(l : List[Long]) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def pairsSumToZero(l: List[Long]): Boolean = {\n        val seen = HashSet[Long]()\n        for (num <- l) {\n            if (seen.contains(-num)) {\n                return true\n            }\n            seen.add(num)\n        }\n        false\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_44","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/base numbers က ၁၀ ထက် နည်းပါတယ်။    \/\/ပြန်ပို့လိုက်တဲ့ string ကို ပြန်ရေးလိုက်တာပါ    \/\/input number x ရဲ့ base ကို base အျဖစ္ ေျပာင္းလိုက္ပါ။    \/\/ >>> changeBase((8l), (3l))\n    \/\/ (\"22\")\n    \/\/ >>> changeBase((8l), (2l))\n    \/\/ (\"1000\")\n    \/\/ >>> changeBase((7l), (2l))\n    \/\/ (\"111\")\n    def changeBase(x : Long, base : Long) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def changeBase(x: Long, base: Long): String = {\n        require(base > 1 && base < 10, \"Base must be between 2 and 9\")\n        \n        if (x == 0) return \"0\"\n\n        val result = new StringBuilder()\n        var number = x\n\n        while (number > 0) {\n            val remainder = number % base\n            result.append(remainder.toString)\n            number \/= base\n        }\n\n        result.reverse.toString()\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"},{"task_id":"HumanEval_45","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တြိဂံရဲ့ အနားက အလျားနဲ့ အမြင့်ဆုံး အပြန်အလှန် ဧရိယာကို ပေးထားတယ်။    \/\/ >>> triangleArea((5l), (3l))\n    \/\/ (7.5f)\n    def triangleArea(a : Long, h : Long) : Float = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ Given length of a side and height, return area for a triangle.\n    \/\/ >>> triangleArea(5l, 3l)\n    \/\/ (7.5f)\n    def triangleArea(a: Long, h: Long): Float = {\n        (a * h \/ 2.0).toFloat\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((5l), (3l)) == (7.5f));\n    assert(triangleArea((2l), (2l)) == (2.0f));\n    assert(triangleArea((10l), (8l)) == (40.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_46","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/fib4 ကိန်းစဉ်၏ n-th အစိတ်အပိုင်းကို ထိရောက်စွာ တွက်ချက်ရန် လုပ်ဆောင်ချက်ကို ရေးပါ။ ပြန်လည်ကောက်ယူမှုကို မသုံးပါနှင့်။    \/\/fib4 ((n) -> fib4 ((n-1) + fib4 ((n-2) + fib4 ((n-3) + fib4 ((n-4) ။    \/\/fib4(3) -> 0     \/\/fib4(2) -> 2     \/\/fib4(1) -> 0     \/\/fib4(0) -> 0     \/\/Fib4 ကိန်းစဉ်က Fibbonacci ကိန်းစဉ်နဲ့ ဆင်တူတဲ့ ကိန်းစဉ်ဖြစ်ပြီး အောက်ပါအတိုင်း အဓိပ္ပါယ်ဖွင့်ဆိုထားပါတယ်    \/\/ >>> fib4((5l))\n    \/\/ (4l)\n    \/\/ >>> fib4((6l))\n    \/\/ (8l)\n    \/\/ >>> fib4((7l))\n    \/\/ (14l)\n    def fib4(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def fib4(n: Long): Long = {\n    if (n == 0 || n == 1) return 0\n    if (n == 2) return 2\n    if (n == 3) return 0\n\n    var a: Long = 0\n    var b: Long = 0\n    var c: Long = 2\n    var d: Long = 0\n    \n    var result: Long = 0\n    \n    for (i <- 4L to n) {\n      result = a + b + c + d\n      a = b\n      b = c\n      c = d\n      d = result\n    }\n    \n    result\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"},{"task_id":"HumanEval_47","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/List ထဲက element ေတြရဲ႕ median ကို ျပန္ေပးပါ l.    \/\/ >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    \/\/ 3l\n    \/\/ >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    \/\/ (15.0f)\n    def median(l : List[Long]) : Float = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Return median of elements in the list l.\n  def median(l: List[Long]): Float = {\n    val sortedList = l.sorted\n    val n = sortedList.length\n    if (n % 2 == 1) {\n      sortedList(n \/ 2).toFloat\n    } else {\n      (sortedList(n \/ 2 - 1) + sortedList(n \/ 2)).toFloat \/ 2\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(median(List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) \/\/ 3.0\n    println(median(List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) \/\/ 15.0\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"},{"task_id":"HumanEval_48","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ပေးထားတဲ့ string က palindrome ဟုတ်မဟုတ် စစ်ဆေးတယ်။    \/\/ >>> isPalindrome((\"\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"aba\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"aaaaa\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"zbcd\"))\n    \/\/ (false)\n    def isPalindrome(text : String) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Checks if given string is a palindrome\n  def isPalindrome(text: String): Boolean = {\n    val length = text.length\n    for (i <- 0 until length \/ 2) {\n      if (text(i) != text(length - i - 1)) return false\n    }\n    true\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_49","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/2^n modulo p ကိုပြန်ပေးပါ (ကိန်းဂဏန်းတွေကို သတိပြုပါ) ။    \/\/ >>> modp((3l), (5l))\n    \/\/ (3l)\n    \/\/ >>> modp((1101l), (101l))\n    \/\/ (2l)\n    \/\/ >>> modp((0l), (101l))\n    \/\/ (1l)\n    \/\/ >>> modp((3l), (11l))\n    \/\/ (8l)\n    \/\/ >>> modp((100l), (101l))\n    \/\/ (1l)\n    def modp(n : Long, p : Long) : Long = {\n","canonical_solution":"def modp(n: Long, p: Long): Long = {\n    \/\/ Calculate 2^n modulo p using iterative exponentiation by squaring.\n    def powMod(base: Long, exp: Long, mod: Long): Long = {\n      var result = 1L\n      var b = base % mod\n      var e = exp\n      \n      while (e > 0) {\n        if ((e & 1) == 1) { \/\/ Check if e is odd\n          result = (result * b) % mod\n        }\n        e >>= 1\n        b = (b * b) % mod\n      }\n\n      result\n    }\n\n    powMod(2, n, p)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_51","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/remove_vowels သည် အသံထွက်မရှိသော string ကိုယူ၍ ပြန်ပေးသော function ဖြစ်သည်။    \/\/ >>> removeVowels((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> removeVowels((\"abcdef\"))\n    \/\/ (\"bcdf\")\n    \/\/ >>> removeVowels((\"aaaaa\"))\n    \/\/ (\"\")\n    \/\/ >>> removeVowels((\"aaBAA\"))\n    \/\/ (\"B\")\n    \/\/ >>> removeVowels((\"zbcd\"))\n    \/\/ (\"zbcd\")\n    def removeVowels(text : String) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeVowels(text: String): String = {\n        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        text.filterNot(vowels.contains)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(removeVowels((\"\")).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\")));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n"},{"task_id":"HumanEval_52","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/List l ထဲက နံပါတ္ေတြဟာ threshold t ေအာက္မွာရွိေနရင္ true ကိုျပန္ေပးပါ    \/\/ >>> belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l))\n    \/\/ (true)\n    \/\/ >>> belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l))\n    \/\/ (false)\n    def belowThreshold(l : List[Long], t : Long) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Return true if all numbers in the list l are below threshold t.\n  \/\/ >>> belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l))\n  \/\/ (true)\n  \/\/ >>> belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l))\n  \/\/ (false)\n  def belowThreshold(l: List[Long], t: Long): Boolean = {\n    l.forall(_ < t)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_53","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ကိန်းနှစ်လုံးပေါင်းပါ x နဲ့ y ပါ။    \/\/ >>> add((2l), (3l))\n    \/\/ (5l)\n    \/\/ >>> add((5l), (7l))\n    \/\/ (12l)\n    def add(x : Long, y : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ Add two numbers x and y\n    \/\/ >>> add((2l), (3l))\n    \/\/ (5l)\n    \/\/ >>> add((5l), (7l))\n    \/\/ (12l)\n    def add(x: Long, y: Long): Long = {\n        x + y\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_54","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/စကားလုံးနှစ်လုံးမှာ တူညီတဲ့စာလုံးတွေရှိလားစစ်ဆေးပါ။    \/\/ >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    \/\/ (false)\n    \/\/ >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    \/\/ (false)\n    \/\/ >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    \/\/ (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n","canonical_solution":"import scala.collection.mutable._\n\nobject Problem {\n  def sameChars(s0: String, s1: String): Boolean = {\n    def charSet(s: String): Set[Char] = s.toSet\n    charSet(s0) == charSet(s1) && charSet(s0).forall(c => s0.count(_ == c) <= s1.count(_ == c) && s1.count(_ == c) <= s0.count(_ == c))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_55","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/n-th ဖီဘိုနာချီကိန်းကို ပြန်ပေးပါ    \/\/ >>> fib((10l))\n    \/\/ (55l)\n    \/\/ >>> fib((1l))\n    \/\/ (1l)\n    \/\/ >>> fib((8l))\n    \/\/ (21l)\n    def fib(n : Long) : Long = {\n","canonical_solution":"def fib(n: Long): Long = {\n        if (n <= 1) n\n        else {\n            var a: Long = 0\n            var b: Long = 1\n            for (_ <- 2L to n) {\n                val temp = a + b\n                a = b\n                b = temp\n            }\n            b\n        }\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"},{"task_id":"HumanEval_56","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဖွင့်တဲ့ bracket တစ်ခုစီမှာ သက်ဆိုင်ရာ ပိတ်တဲ့ bracket တစ်ခုရှိရင် true ကိုပြန်ပို့ပါ။    \/\/brackets ကတော့ \"<\" နဲ့ \">\" တွေပါတဲ့ string ပါ။    \/\/ >>> correctBracketing((\"<\"))\n    \/\/ (false)\n    \/\/ >>> correctBracketing((\"<>\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"<<><>>\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"><<>\"))\n    \/\/ (false)\n    def correctBracketing(brackets : String) : Boolean = {\n","canonical_solution":"import scala.collection.mutable.Stack\n\nobject Problem {\n  def correctBracketing(brackets: String): Boolean = {\n    val stack = new Stack[Char]()\n    for (char <- brackets) {\n      if (char == '<') {\n        stack.push(char)\n      } else if (char == '>') {\n        if (stack.isEmpty || stack.pop() != '<') {\n          return false\n        }\n      }\n    }\n    stack.isEmpty\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_57","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/return true is list elements are monotonically increasing or decreasing ဟုဆိုပါက list ၏ element မ်ားသည္ တန္ဖိုးတူတိုးတက္ျခင္း သို႔မဟုတ္ က်ဆင္းျခင္းကိုျပန္လည္ျပန္လည္ျပဳျပင္ေပးပါသည္။    \/\/ >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n    \/\/ (true)\n    \/\/ >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)))\n    \/\/ (false)\n    \/\/ >>> monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong)))\n    \/\/ (true)\n    def monotonic(l : List[Long]) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Return true if list elements are monotonically increasing or decreasing.\n  \/\/ >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n  \/\/ (true)\n  \/\/ >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)))\n  \/\/ (false)\n  \/\/ >>> monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong)))\n  \/\/ (true)\n  def monotonic(l: List[Long]): Boolean = {\n    if (l.isEmpty || l.length == 1) return true\n\n    val increasing = l.sliding(2).forall { case List(a, b) => a <= b }\n    val decreasing = l.sliding(2).forall { case List(a, b) => a >= b }\n\n    increasing || decreasing\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong, 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_58","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/စာရင်းနှစ်ခုအတွက်ရွေးချယ်ထားသော ထူးခြားသော တူညီသော အချက်အလက်များကို ပြန်ပေးသည်။    \/\/ >>> common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    \/\/ (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    \/\/ >>> common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    \/\/ (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Return sorted unique common elements for two lists.\n  def common(l1: List[Long], l2: List[Long]): List[Long] = {\n    (l1.toSet intersect l2.toSet).toList.sorted\n  }\n\n  \/\/ Example usage\n  def main(args: Array[String]): Unit = {\n    println(common(List[Long](1L, 4L, 3L, 34L, 653L, 2L, 5L), List[Long](5L, 7L, 1L, 5L, 9L, 653L, 121L)))\n    println(common(List[Long](5L, 3L, 2L, 8L), List[Long](3L, 2L)))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n"},{"task_id":"HumanEval_59","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/n ၏ အကြီးဆုံးကိန်းမှ prime factor ကိုပြန်ပေးပါ။ n > 1 ကိုယူပြီး prime မဟုတ်ပါ။     \/\/ >>> largestPrimeFactor((13195l))\n    \/\/ (29l)\n    \/\/ >>> largestPrimeFactor((2048l))\n    \/\/ (2l)\n    def largestPrimeFactor(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def largestPrimeFactor(n: Long): Long = {\n        var number = n\n        var largestFactor = 1L\n\n        \/\/ Check for number of 2s that divide n\n        while (number % 2 == 0) {\n            largestFactor = 2L\n            number \/= 2\n        }\n\n        \/\/ n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n        var i = 3\n        while (i <= sqrt(number)) {\n            while (number % i == 0) {\n                largestFactor = i\n                number \/= i\n            }\n            i += 2\n        }\n\n        \/\/ This condition is to check if number is a prime number greater than 2\n        if (number > 2) {\n            largestFactor = number\n        }\n\n        largestFactor\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"},{"task_id":"HumanEval_60","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/sum_to_n သည် ၁ မှ n အထိ ကိန်းဂဏန်းများကို ပေါင်းထည့်ပေးသော လုပ်ဆောင်ချက်ဖြစ်သည်။    \/\/ >>> sumToN((30l))\n    \/\/ (465l)\n    \/\/ >>> sumToN((100l))\n    \/\/ (5050l)\n    \/\/ >>> sumToN((5l))\n    \/\/ (15l)\n    \/\/ >>> sumToN((10l))\n    \/\/ (55l)\n    \/\/ >>> sumToN((1l))\n    \/\/ (1l)\n    def sumToN(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumToN(n: Long): Long = {\n        (1L to n).sum\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sumToN((1l)) == (1l));\n    assert(sumToN((6l)) == (21l));\n    assert(sumToN((11l)) == (66l));\n    assert(sumToN((30l)) == (465l));\n    assert(sumToN((100l)) == (5050l));\n    }\n\n}\n"},{"task_id":"HumanEval_61","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဖွင့်တဲ့ bracket တစ်ခုစီမှာ သက်ဆိုင်ရာ ပိတ်တဲ့ bracket တစ်ခုရှိရင် true ကိုပြန်ပို့ပါ။    \/\/brackets ကတော့ \"(\" နဲ့ \"\")  ဆိုတဲ့ string တွေပါ။    \/\/ >>> correctBracketing((\"(\"))\n    \/\/ (false)\n    \/\/ >>> correctBracketing((\"()\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"(()())\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\")(()\"))\n    \/\/ (false)\n    def correctBracketing(brackets : String) : Boolean = {\n","canonical_solution":"var balance = 0\n        for (ch <- brackets) {\n            if (ch == '(') balance += 1\n            else if (ch == ')') balance -= 1\n            \n            if (balance < 0) return false\n        }\n        balance == 0\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_62","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဒီ polynomial ရဲ့ တူညီတဲ့ပုံစံထဲက အပေါင်းလက္ခဏာကို ပြန်ပေးပါ။    \/\/xs[0] + xs[1] * x + xs[2] * x^2 + ....     \/\/xs ကတော့ polynomial ရဲ့ မြှောက်ဖော်ကိန်းတွေပဲပေါ့။    \/\/ >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    \/\/ (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n    \/\/ >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.collection.mutable._\n\nobject Problem {\n  def derivative(xs: List[Long]): List[Long] = {\n    xs.zipWithIndex.tail.map { case (coeff, index) => coeff * index }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n"},{"task_id":"HumanEval_63","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/fibfib ကိန်းစဉ်ရဲ့ n-th အစိတ်အပိုင်းကို ထိရောက်စွာ တွက်ချက်ဖို့ လုပ်ဆောင်ချက်ကို ရေးပါ။    \/\/fibfib (n) == fibfib (n-1) + fibfib (n-2) + fibfib (n-3) ။    \/\/အပိုဒ် ၂    \/\/အထက်ပါအတိုင်း ဖြစ်ပါသည်။    \/\/0 0 0    \/\/FibFib ကိန်းစဉ်ဟာ Fibbonacci ကိန်းစဉ်နဲ့ ဆင်တူပါတယ်။ အောက်ပါအတိုင်း အဓိပ္ပါယ်ဖွင့်ဆိုထားတာပါ။    \/\/ >>> fibfib((1l))\n    \/\/ (0l)\n    \/\/ >>> fibfib((5l))\n    \/\/ (4l)\n    \/\/ >>> fibfib((8l))\n    \/\/ (24l)\n    def fibfib(n : Long) : Long = {\n","canonical_solution":"def fibfib(n: Long): Long = {\n    if (n == 0) return 0\n    if (n == 1) return 0\n    if (n == 2) return 1\n\n    var a: Long = 0\n    var b: Long = 0\n    var c: Long = 1\n    var d: Long = 0\n\n    for (_ <- 3L to n) {\n      d = a + b + c\n      a = b\n      b = c\n      c = d\n    }\n    d\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"},{"task_id":"HumanEval_64","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/အသံထွက်ဆိုတာက စကားလုံးတစ်လုံးရဲ့ အဆုံးမှာ ရှိတဲ့အခါမှပါ။    \/\/ဒီကိစ္စမှာ သရအက္ခရာတွေက a, e, i, o, u တို့ပါ။ ဒီမှာ y က a လည်းဖြစ်တယ်။    \/\/string ထဲက vowels ေတြရဲ႕ အေရအတြက္ကို ျပန္ေပးပါတယ္    \/\/ကို ကိုယ်စားပြုတဲ့ string ကိုယူတဲ့ function ကိုရေးပါ။    \/\/ >>> vowelsCount((\"abcde\"))\n    \/\/ (2l)\n    \/\/ >>> vowelsCount((\"ACEDY\"))\n    \/\/ (3l)\n    def vowelsCount(s : String) : Long = {\n","canonical_solution":"def vowelsCount(s: String): Long = {\n    val vowels = Set('a', 'e', 'i', 'o', 'u')\n    val lowerCaseWord = s.toLowerCase\n    var count = 0L\n\n    for (i <- lowerCaseWord.indices) {\n      if (vowels.contains(lowerCaseWord(i)) || (lowerCaseWord(i) == 'y' && i == lowerCaseWord.length - 1)) {\n        count += 1\n      }\n    }\n\n    count\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\")) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"ACEDY\")) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_65","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/shift > ဂဏန်းအရေအတွက်ဆိုရင် ဂဏန်းတွေကို ပြောင်းပြန်ပြန်ပြန်ရိုက်ပါ။    \/\/ၿပီးရင္ result ကို string အျဖစ္ ျပန္ေပးလိုက္ပါ.    \/\/ကိန္းတစ္ခုရဲ႕ အေရအတြက္ကို ျဖတ္လိုက္ပါ    \/\/ >>> circularShift((12l), (1l))\n    \/\/ (\"21\")\n    \/\/ >>> circularShift((12l), (2l))\n    \/\/ (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n","canonical_solution":"def circularShift(x: Long, shift: Long): String = {\n  val digits = x.toString\n  val length = digits.length\n  \n  if (shift >= length) {\n    digits.reverse\n  } else {\n    val effectiveShift = (length - shift % length).toInt\n    (digits.drop(effectiveShift) + digits.take(effectiveShift))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"},{"task_id":"HumanEval_66","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/ASCII ကုဒ်များ။    \/\/\"အထုပ်တစ်လုံးရဲ့ input ကိုယူပြီး အပေါ်က စာလုံးတွေရဲ့ ပေါင်းလဒ်ကိုပဲ ပြန်ပေးတဲ့ function တစ်ခုရေးပါ\" လို့ပြောပါ    \/\/အလုပ်။    \/\/ >>> digitSum((\"\"))\n    \/\/ (0l)\n    \/\/ >>> digitSum((\"abAB\"))\n    \/\/ (131l)\n    \/\/ >>> digitSum((\"abcCd\"))\n    \/\/ (67l)\n    \/\/ >>> digitSum((\"helloE\"))\n    \/\/ (69l)\n    \/\/ >>> digitSum((\"woArBld\"))\n    \/\/ (131l)\n    \/\/ >>> digitSum((\"aAaaaXa\"))\n    \/\/ (153l)\n    def digitSum(s : String) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def digitSum(s: String): Long = {\n    s.filter(_.isUpper).map(_.toLong).sum\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"},{"task_id":"HumanEval_67","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/examble အတွက်:     \/\/in the basket ကိုပြန်ပို့ပါ    \/\/လိမ္မော်သီး၊ ပန်းသီး၊ ပြီးတော့ သစ်သီးအရေအတွက်ကို ကိုယ်စားပြုတဲ့ ကိန်းပြည့်တစ်ခု။    \/\/Apple, Orange, Mango fruit ေတြကို ရွာေဖြၾကည့္ပါစို႔    \/\/ဒီအသီးအနှံတွေထဲက အသီးတွေကို    \/\/ဒီလုပ်ဆောင်မှုမှာ ခင်ဗျားကို ပန်းသီးနဲ့ လိမ္မော်သီး အရေအတွက်တစ်ခုနဲ့ ကိုယ်စားပြုတဲ့ ကြိုးတစ်ချောင်းပေးမယ်။    \/\/ >>> fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    \/\/ (8l)\n    \/\/ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    \/\/ (2l)\n    \/\/ >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    \/\/ (95l)\n    \/\/ >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    \/\/ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def fruitDistribution(s: String, n: Long): Long = {\n    val fruits = s.split(\" and \").map(_.split(\" \")(0).toLong)\n    val totalApplesAndOranges = fruits.sum\n    n - totalApplesAndOranges\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"},{"task_id":"HumanEval_68","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ ၁။    \/\/တန်ဖိုးများမှာ အချိုးအစားမရှိလျှင် သို့မဟုတ် ပေးထားသော စာရင်းမှာ ဗလာဖြစ်လျှင် [] ကို ပြန်ပေးပါ။    \/\/ဖယ်ရှားလိုက်သော node ကို list တွင်ပြန်ပို့ရပါမည်။    \/\/တူညီသောအသေးဆုံး အချိုးကျတန်ဖိုးပါ node များကိုတွေ့လျှင်အသေးဆုံး index ရှိသော node ကိုပြန်ပေးပါ။     \/\/ထိုးထားတဲ့ node က အနိမ့်ဆုံး အချိုးကျ တန်ဖိုးရှိတဲ့ node ဖြစ်ရပါမယ်။    \/\/မင်းအလုပ်က Node တစ်ခုကို ဆွဲထုတ်ပြီး ပြန်ပို့ဖို့ပါ။    \/\/\" tree ရဲ့ branches တွေကို ကိုယ်စားပြုတဲ့ non-negative integer node တွေပါတဲ့ list ကိုပေးရင်    \/\/ >>> pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[Long](2l.toLong, 1l.toLong))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 2:\n    \/\/ >>> pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[Long](2l.toLong, 1l.toLong))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 3:\n    \/\/ >>> pluck((List[Long]()))\n    \/\/ (List[Long]())\n    \/\/ Example 4:\n    \/\/ >>> pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong, 2l.toLong)))\n    \/\/ (List[Long](0l.toLong, 1l.toLong))\n    \/\/ Explanation: 0 is the smallest value, but  there are two zeros,\n    \/\/ so we will choose the first zero, which has the smallest index.\n    \/\/ Constraints:\n    \/\/ * 1 <= nodes.length <= 10000\n    \/\/ * 0 <= node.value\n    def pluck(arr : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def pluck(arr: List[Long]): List[Long] = {\n    val evenNodes = arr.zipWithIndex.filter { case (value, _) => value % 2 == 0 }\n    if (evenNodes.isEmpty) {\n      List.empty[Long]\n    } else {\n      val (smallestValue, index) = evenNodes.minBy { case (value, index) => (value, index) }\n      List(smallestValue, index.toLong)\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong, 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong, 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong, 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong, 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n    }\n\n}\n"},{"task_id":"HumanEval_69","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/ာ့မရှိလျှင် - 1 ကိုပြန်ပေးပါ။    \/\/ကိန်းပြည့်တစ်ခုရဲ့ ကြိမ်နှုန်းက စာရင်းမှာ ပေါ်တဲ့ အကြိမ် အရေအတွက်ပါ။    \/\/သုညဖြစ်ပြီး ၎င်းရဲ့ကြိမ်နှုန်းက ကိန်းပြည့်ရဲ့ တန်ဖိုးထက် ကြီးတာ (သို့) တူပါတယ်။    \/\/အပေါင်းကိန်းပြည့်တွေရဲ့စာရင်းတစ်ခုပေးထားပါတယ်  ထက်ကြီးတဲ့ အကြီးဆုံးကိန်းပြည့်ကိုပြန်ပေးပါ    \/\/ >>> search((List[Long](4l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\n    \/\/ (2l)\n    \/\/ >>> search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))\n    \/\/ (3l)\n    \/\/ >>> search((List[Long](5l.toLong, 5l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))\n    \/\/ (-1l)\n    def search(lst : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def search(lst: List[Long]): Long = {\n    val frequencyMap = lst.groupBy(identity).mapValues(_.size)\n    lst.filter(num => frequencyMap(num) >= num).sorted(Ordering[Long].reverse) match {\n      case x :: _ => x\n      case Nil => -1L\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](4l.toLong, 1l.toLong, 4l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](3l.toLong, 3l.toLong))) == (-1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](2l.toLong, 3l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](2l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 4l.toLong, 8l.toLong, 7l.toLong, 3l.toLong, 9l.toLong, 6l.toLong, 5l.toLong, 10l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 7l.toLong, 4l.toLong, 10l.toLong, 8l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong, 2l.toLong, 8l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](6l.toLong, 7l.toLong, 1l.toLong, 8l.toLong, 8l.toLong, 10l.toLong, 5l.toLong, 8l.toLong, 5l.toLong, 3l.toLong, 10l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 3l.toLong, 6l.toLong, 5l.toLong, 6l.toLong, 4l.toLong))) == (-1l));\n    assert(search((List[Long](6l.toLong, 9l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 4l.toLong, 7l.toLong, 1l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 8l.toLong, 10l.toLong, 10l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))) == (1l));\n    assert(search((List[Long](1l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](6l.toLong, 9l.toLong, 7l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 7l.toLong, 5l.toLong, 10l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 8l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 9l.toLong, 5l.toLong, 3l.toLong, 10l.toLong))) == (5l));\n    assert(search((List[Long](1l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 10l.toLong, 6l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 6l.toLong, 10l.toLong, 4l.toLong, 2l.toLong, 1l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 5l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 10l.toLong, 4l.toLong, 8l.toLong, 2l.toLong, 10l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 10l.toLong))) == (2l));\n    assert(search((List[Long](1l.toLong, 6l.toLong, 10l.toLong, 1l.toLong, 6l.toLong, 9l.toLong, 10l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 7l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](9l.toLong, 2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 2l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 7l.toLong, 3l.toLong, 10l.toLong, 1l.toLong, 5l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 1l.toLong, 9l.toLong, 10l.toLong, 7l.toLong, 10l.toLong, 2l.toLong, 8l.toLong, 10l.toLong, 9l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 4l.toLong, 10l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 3l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 2l.toLong, 10l.toLong, 7l.toLong))) == (4l));\n    assert(search((List[Long](9l.toLong, 8l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 7l.toLong, 8l.toLong, 10l.toLong, 3l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 5l.toLong, 3l.toLong, 9l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 10l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 7l.toLong, 7l.toLong, 10l.toLong, 8l.toLong))) == (-1l));\n    assert(search((List[Long](10l.toLong))) == (-1l));\n    assert(search((List[Long](9l.toLong, 7l.toLong, 7l.toLong, 2l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 10l.toLong, 9l.toLong, 7l.toLong, 5l.toLong, 7l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 4l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 1l.toLong, 8l.toLong))) == (1l));\n    assert(search((List[Long](7l.toLong, 9l.toLong, 9l.toLong, 9l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 6l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong, 10l.toLong, 10l.toLong, 9l.toLong, 2l.toLong))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_70","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/ၿပီးရင္ အမ်ားဆုံး ကိန္းျဖစ္တဲ့ ကိန္းကုိ ႏႈန္းအနည္းဆံုး ကိန္းျဖစ္ေအာင္ ႏႈန္းၾကည့္မယ္    \/\/Strange sorting ကေတာ့ အေသးဆုံးတန္ဖိုးနဲ႔ စတင္တာပါ။    \/\/ဖြောင့်ကိန်းတွေ ပေးလိုက်ရင် ထူးဆန်းတဲ့ အစီအစဉ်နဲ့ ပြန်ပေးတယ်။    \/\/ >>> strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))\n    \/\/ >>> strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong)))\n    \/\/ (List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))\n    \/\/ >>> strangeSortList((List[Long]()))\n    \/\/ (List[Long]())\n    def strangeSortList(lst : List[Long]) : List[Long] = {\n","canonical_solution":"def strangeSortList(lst: List[Long]): List[Long] = {\n    val buffer = lst.sorted.toBuffer\n    val result = ArrayBuffer[Long]()\n    var takeMin = true\n\n    while (buffer.nonEmpty) {\n      if (takeMin) {\n        result += buffer.remove(0) \/\/ take the minimum\n      } else {\n        result += buffer.remove(buffer.length - 1) \/\/ take the maximum of the remaining\n      }\n      takeMin = !takeMin\n    }\n\n    result.toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong, 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_71","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/တတိယဘက်က ပိုကောင်းတယ်။    \/\/တြိဂံရဲ့ ဘေးနှစ်ဘက်ပေါင်းလဒ် ပိုကြီးရင် သုံးဘက်ဟာ မှန်ကန်တဲ့ တြိဂံကို ပြုလုပ်ပါတယ်။    \/\/မဟုတ်ရင် ပြန်ပို့ - 1     \/\/သုံးချောင်းတွဲဟာ သုံးချောင်းတွဲဖြစ်ရင် ဒသမကိန်းနှစ်လုံးအထိ အဝိုင်းဆွဲတယ်။    \/\/တြိဂံရဲ့ အနားသုံးဘက်ကို ပေးပြီး  ရဲ့ ဧရိယာကို ပြန်ပေးပါ    \/\/ >>> triangleArea((3l), (4l), (5l))\n    \/\/ (6.0f)\n    \/\/ >>> triangleArea((1l), (2l), (10l))\n    \/\/ -1l\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n","canonical_solution":"import scala.math._\n\nobject Problem {\n  def triangleArea(a: Long, b: Long, c: Long): Float = {\n    if (a + b > c && a + c > b && b + c > a) {\n      val s = (a + b + c) \/ 2.0\n      val area = sqrt(s * (s - a) * (s - b) * (s - c))\n      BigDecimal(area).setScale(2, BigDecimal.RoundingMode.HALF_UP).toFloat\n    } else {\n      -1f\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"},{"task_id":"HumanEval_72","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/အရာဝတ္ထု q က ၎င်းရဲ့ အလေးချိန် အပြည့်အဝ (သို့) အနည်းဆုံးနဲ့ ညီမျှရင် ပျံသန်းပါလိမ့်မယ်။    \/\/အကယ်၍ object q ကပျံသန်းမယ်ဆိုရင် true ပြန်ပေးပြီး တခြားကိစ္စမှာ false ပြန်ပေးမယ့် function တစ်ခုရေးပါ။    \/\/ >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    \/\/ (false)\n    \/\/ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    \/\/ >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    \/\/ (false)\n    \/\/ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    \/\/ >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    \/\/ (true)\n    \/\/ # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    \/\/ >>> willItFly((List[Long](3l.toLong)), (5l))\n    \/\/ (true)\n    \/\/ # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def willItFly(q: List[Long], w: Long): Boolean = {\n    val isPalindromic = q == q.reverse\n    val sumOfElements = q.sum\n    isPalindromic && sumOfElements <= w\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(willItFly(List[Long](1L, 2L), 5L)) \/\/ false\n    println(willItFly(List[Long](3L, 2L, 3L), 1L)) \/\/ false\n    println(willItFly(List[Long](3L, 2L, 3L), 9L)) \/\/ true\n    println(willItFly(List[Long](3L), 5L)) \/\/ true\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_73","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/ရှေ့နောက်ညီညီဖတ်တယ်။ ပြောင်းလဲမှုတစ်ခုမှာ ဒြပ်စင်တစ်ခုကနေ အခြားတစ်ခု ပြောင်းနိုင်တယ်။    \/\/စာရင်းကို palindromic ပြုလုပ်ရန် ပြောင်းလဲရန် လိုအပ်သည်။ palindromic စာရင်းသည်     \/\/ကိန်းပြည့်တွေရဲ့ စာရင်းတစ်ခုထဲမှာ အနည်းဆုံး element တွေရဲ့ အရေအတွက်ကို ရှာကြည့်ပါ။    \/\/ >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong)))\n    \/\/ (4l)\n    \/\/ >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong)))\n    \/\/ (1l)\n    \/\/ >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong)))\n    \/\/ (0l)\n    def smallestChange(arr : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Given a list arr of integers, find the minimum number of elements that\n  \/\/ need to be changed to make the list palindromic.\n\n  def smallestChange(arr: List[Long]): Long = {\n    var changes: Long = 0\n\n    for (i <- 0 until arr.length \/ 2) {\n      if (arr(i) != arr(arr.length - 1 - i)) {\n        changes += 1\n      }\n    }\n\n    changes\n  }\n\n  \/\/ Example usage\n  def main(args: Array[String]): Unit = {\n    println(smallestChange(List(1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L)))  \/\/ Output: 4\n    println(smallestChange(List(1L, 2L, 3L, 4L, 3L, 2L, 2L)))  \/\/ Output: 1\n    println(smallestChange(List(1L, 2L, 3L, 2L, 1L)))  \/\/ Output: 0\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong))) == (4l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 4l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](3l.toLong, 1l.toLong, 1l.toLong, 3l.toLong))) == (0l));\n    assert(smallestChange((List[Long](1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_74","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ     \/\/စာရင်းနှစ်ခုလုံးမှာ တူညီတဲ့ စာလုံးအရေအတွက်ရှိရင် ပထမစာရင်းကို ပြန်ပေးပါ။    \/\/list ထဲက string ေတြမွာရွိတဲ့ total number of chars ေတြဟာ တျခား list ေတြထက္ ပိုနည္းပါတယ္    \/\/string နှစ်ခုကို လက်ခံပြီး list ရှိတဲ့ list ကိုပြန်ပေးတဲ့ function ကိုရေးပါ    \/\/ >>> totalMatch((List[String]()), (List[String]()))\n    \/\/ (List[String]())\n    \/\/ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    \/\/ (List[String](\"hI\", \"Hi\"))\n    \/\/ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n    \/\/ (List[String](\"hi\", \"admin\"))\n    \/\/ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n    \/\/ (List[String](\"hI\", \"hi\", \"hi\"))\n    \/\/ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\")))\n    \/\/ (List[String](\"4\"))\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def totalMatch(lst1: List[String], lst2: List[String]): List[String] = {\n    val sum1 = lst1.map(_.length).sum\n    val sum2 = lst2.map(_.length).sum\n    if (sum1 <= sum2) lst1 else lst2\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\", \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"},{"task_id":"HumanEval_75","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/(a) က ၁၀၀ ထက္ငယ္တယ္ဆိုတာသိထားရင္    \/\/မဟုတ်ရင်လည်း မှားတယ်။    \/\/ပေးထားတဲ့ကိန်းက 3 prime ကိန်းတွေရဲ့ မြှောက်လဒ်ဆိုရင် true ပြန်တဲ့ function ကိုရေးပါ    \/\/ >>> isMultiplyPrime((30l))\n    \/\/ (true)\n    \/\/ 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def isMultiplyPrime(a: Long): Boolean = {\n    def isPrime(num: Long): Boolean = {\n      if (num <= 1) return false\n      if (num <= 3) return true\n      if (num % 2 == 0 || num % 3 == 0) return false\n      var i = 5\n      while (i * i <= num) {\n        if (num % i == 0 || num % (i + 2) == 0) return false\n        i += 6\n      }\n      true\n    }\n\n    val primes = (2L to 100L).filter(isPrime)\n    val primeList = primes.toList\n\n    for {\n      i <- primeList.indices\n      j <- i until primeList.size\n      k <- j until primeList.size\n      if primeList(i) * primeList(j) * primeList(k) == a\n    } return true\n\n    false\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_76","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/x ဟာ n ရဲ့ ရိုးရှင်းတဲ့ ထပ်ကိန်းတစ်ခုဖြစ်တယ်။ n**int=x ဆိုရင်    \/\/n ရဲ့အစွမ်း၊ အခြားကိစ္စတွေမှာတော့ false ပါ။    \/\/X က ရိုးရှင်းတဲ့ ကိန်းတစ်ခုဆိုရင် မှန်တဲ့ တန်ဖိုးကို ပြန်ပေးတဲ့ လုပ်ဆောင်ချက်ကို ရေးရပါမယ်။    \/\/ >>> isSimplePower((1l), (4l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((2l), (2l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((8l), (2l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((3l), (2l))\n    \/\/ (false)\n    \/\/ >>> isSimplePower((3l), (1l))\n    \/\/ (false)\n    \/\/ >>> isSimplePower((5l), (3l))\n    \/\/ (false)\n    def isSimplePower(x : Long, n : Long) : Boolean = {\n","canonical_solution":"def isSimplePower(x: Long, n: Long): Boolean = {\n        if (n == 1) {\n            return x == 1\n        }\n        \n        var value: Long = n\n        while (value <= x) {\n            if (value == x) {\n                return true\n            }\n            \n            if (value > Long.MaxValue \/ n) {\n                return false\n            }\n            value *= n\n        }\n        \n        false\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_77","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/မှတ်ချက်: သင်ထည့်သွင်းထားသော အချက်အလက်သည် အမြဲတမ်းမှန်ကန်သည်ဟု ယူဆနိုင်သည်။    \/\/ဒီ integer က ကိန္းတစ္ခုရဲ႕ တန္ဖိုးျဖစ္တယ္ဆိုရင္    \/\/ကိန်းပြည့် a ကိုယူပြီး true ပြန်ပေးတဲ့ function ကိုရေးပါ    \/\/ >>> iscube((1l))\n    \/\/ (true)\n    \/\/ >>> iscube((2l))\n    \/\/ (false)\n    \/\/ >>> iscube((-1l))\n    \/\/ (true)\n    \/\/ >>> iscube((64l))\n    \/\/ (true)\n    \/\/ >>> iscube((0l))\n    \/\/ (true)\n    \/\/ >>> iscube((180l))\n    \/\/ (false)\n    def iscube(a : Long) : Boolean = {\n","canonical_solution":"def iscube(a: Long): Boolean = {\n  val cubeRoot = math.cbrt(a.toDouble).round\n  cubeRoot * cubeRoot * cubeRoot == a\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_78","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/A,B,C,D,E,F ဆိုတဲ့ သင်္ကေတတွေက အမြဲပဲ စာလုံးကြီးတွေနဲ့ပါ။    \/\/မှတ်ချက်: သင် input ကိုမှန်ကန်သောသို့မဟုတ်အလွတ် string ကိုအမြဲတမ်းယူဆနိုင်ပါတယ်,     \/\/B (= ဆယ်လီ 11), D (= ဆယ်လီ 13) ။    \/\/ဒီတော့ အောက်ပါ ဂဏန်းတွေထဲက တစ်ခုကို ရှာရမယ်။ ၂၊ ၃၊ ၅၊ ၇။    \/\/ပရမ်းမကိန်းတွေဆိုတာက ၂၊ ၃၊ ၅၊ ၇၊ ၁၁၊ ၁၃၊ ၁၇၊ ...    \/\/ဆဌမအကန်း ဂဏန်းတွေက ၀၊ ၁၊ ၂၊ ၃၊ ၄၊ ၅၊ ၆၊ ၇၊ ၈၊ ၉၊ A၊ B၊ C၊ D၊ E၊ F ပါ။    \/\/ဒါက ပိုသေးတဲ့ သဘာဝကိန်းနှစ်လုံးရဲ့ မြှောက်လဒ်မဟုတ်တဲ့ ၁ ထက်ကြီးပါတယ်။    \/\/ကိန်းဂဏန်းတွေဟာ ဂဏန်းဦးရေ ဖြစ်ပါတယ် (ဂဏန်းဦးရေ၊ ဒါမှမဟုတ် ဂဏန်းတစ်လုံးဟာ သဘာဝဂဏန်းတစ်ခုပါ)    \/\/hexadecimal နံပါတ်ကို string အဖြစ်သုံးပြီး hexadecimal အရေအတွက်ကို ရေတွက်တယ်    \/\/ခင်ဗျားကို လက်ခံတဲ့ လုပ်ဆောင်ချက်တစ်ခု ရေးဖို့ ပြောထားတယ်။    \/\/ >>> hexKey((\"AB\"))\n    \/\/ (1l)\n    \/\/ >>> hexKey((\"1077E\"))\n    \/\/ (2l)\n    \/\/ >>> hexKey((\"ABED1A33\"))\n    \/\/ (4l)\n    \/\/ >>> hexKey((\"123456789ABCDEF0\"))\n    \/\/ (6l)\n    \/\/ >>> hexKey((\"2020\"))\n    \/\/ (2l)\n    def hexKey(num : String) : Long = {\n","canonical_solution":"def hexKey(num: String): Long = {\n  val primeHexDigits = Set('2', '3', '5', '7', 'B', 'D')\n  num.count(ch => primeHexDigits.contains(ch)).toLong\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_79","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/နောက်ထပ် စာလုံးတွေဆိုရင် ပုံစံကို လွယ်ကူအောင် လုပ်ပေးပါမယ်။    \/\/string အစနဲ့ အဆုံးမှာ နောက်ထပ် 'db' စာလုံးတစ်စုံ ရှိပါလိမ့်မယ်။    \/\/string ထဲက စာလုံးတိုင်းဟာ '0' (သို့) '1' ဖြစ်လိမ့်မယ်။    \/\/binary format ကို အသုံးပြုပြီး string တစ်ခုကို ပြန်ပေးရပါမယ်။    \/\/ခင်ဗျားကို ဒသမကိန်းပုံစံနဲ့ ပေးထားပြီး ဒါကို အဖြစ်ပြောင်းဖို့ ခင်ဗျား တာဝန်ယူရပါတယ်။    \/\/ >>> decimalToBinary((15l))\n    \/\/ (\"db1111db\")\n    \/\/ >>> decimalToBinary((32l))\n    \/\/ (\"db100000db\")\n    def decimalToBinary(decimal : Long) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def decimalToBinary(decimal: Long): String = {\n    \"db\" + decimal.toBinaryString + \"db\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"},{"task_id":"HumanEval_80","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/အကယ်၍ string တစ်ခု၏ အလျားသည် အနည်းဆုံး 3 ဖြစ်ပြီး ဆက်တိုက်ဖြစ်သော စာလုံး 3 လုံးမှာ တစ်ခုနှင့်တစ်ခု ကွဲပြားနေလျှင် string သည် hapscala ဖြစ်ပါသည်။    \/\/မင်းအလုပ်က string ဟာ hapscala ဟုတ်မဟုတ်ကို စစ်ဆေးဖို့ပါ။    \/\/ခင်ဗျားကို string s ပေးထားတယ်။    \/\/ >>> isHappy((\"a\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"aa\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> isHappy((\"aabb\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"adb\"))\n    \/\/ (true)\n    \/\/ >>> isHappy((\"xyy\"))\n    \/\/ (false)\n    def isHappy(s : String) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def isHappy(s: String): Boolean = {\n    if (s.length < 3) return false \n\n    for (i <- 0 until s.length - 2) {\n      if (s(i) == s(i + 1) || s(i) == s(i + 2) || s(i + 1) == s(i + 2)) {\n        return false\n      }\n    }\n    true\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_81","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/၀.၀ E     \/\/> 0.0 D-     \/\/> 0.7 D     \/\/> ၁.၀ D+     \/\/> ၁.၃ C-     \/\/> ၁.၇ C     \/\/> 2.0 C+     \/\/> 2.3 B-     \/\/> 2.7 B     \/\/> ၃.၀ B+     \/\/> ၃.၃ A-     \/\/> ၃.၇ A     \/\/၄.၀ A+     \/\/GPA စာလုံးပေါင်း အဆင့်အတန်း    \/\/အောက်ပါဇယားကိုသုံးပြီးစာလုံးအဆင့်စာရင်းကို output နိုင်တဲ့ function တစ်ခု:     \/\/သူက ကျောင်းသားတချို့ရဲ့ GPA စာရင်းပေးထားပြီး ခင်ဗျားက ရေးပေးရမယ်။    \/\/ပြဿနာက သူမဟာ အမှတ်ပေးစနစ်ကို မေ့သွားတာပါ။    \/\/ဆရာမက အမှတ်ပေးစနစ်ကို သူ့နည်းသူဟန်နဲ့ ဖန်တီးပေးတယ်။    \/\/ဒါဟာ စာသင်နှစ်ရဲ့ နောက်ဆုံးအပတ်ဖြစ်ပြီး ဆရာက အဆင့်တွေ ပေးရမှာပါ။    \/\/ >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    \/\/ (List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def numericalLetterGrade(grades: List[Float]): List[String] = {\n    grades.map { gpa =>\n      gpa match {\n        case g if g == 4.0 => \"A+\"\n        case g if g > 3.7 => \"A\"\n        case g if g > 3.3 => \"A-\"\n        case g if g > 3.0 => \"B+\"\n        case g if g > 2.7 => \"B\"\n        case g if g > 2.3 => \"B-\"\n        case g if g > 2.0 => \"C+\"\n        case g if g > 1.7 => \"C\"\n        case g if g > 1.3 => \"C-\"\n        case g if g > 1.0 => \"D+\"\n        case g if g > 0.7 => \"D\"\n        case g if g > 0.0 => \"D-\"\n        case _ => \"E\"\n      }\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val grades = List[Float](4.0f, 3.0f, 1.7f, 2.0f, 3.5f)\n    println(numericalLetterGrade(grades)) \/\/ Output: List(A+, B, C-, C, A-)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_82","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ     \/\/length သည် ပရမ်းမစ်ကိန်းတစ်ခု ဖြစ်သည် သို့မဟုတ် မဟုတ်လျှင် မှားသည်။    \/\/string ကိုယူပြီး  string က true ဖြစ်ရင် true ပြန်ပေးတဲ့ function ကိုရေးပါ    \/\/ >>> primeLength((\"Hello\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"abcdcba\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"kittens\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"orange\"))\n    \/\/ (false)\n    def primeLength(string : String) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def primeLength(string: String): Boolean = {\n    val length = string.length\n\n    if (length <= 1) return false\n    \n    for (i <- 2 to sqrt(length).toInt) {\n      if (length % i == 0) return false\n    }\n    true\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(primeLength((\"Hello\")) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n    assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\")) == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\")) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_83","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/၁ နဲ့စပြီး ၁ နဲ့ဆုံးတဲ့ အပေါင်းကိန်းပြည့်တွေပေါ့။    \/\/အပေါင်းကိန်းပြည့် n ကိုပေးရင် ဂဏန်း n ရဲ့ ဂဏန်းတွက်ချက်မှုကိုပြန်ပေးမယ်    def startsOneEnds(n : Long) : Long = {\n","canonical_solution":"def startsOneEnds(n: Long): Long = {\n        if (n <= 0) return 0\n        \n        \/\/ Calculate numbers starting with 1: 1XX...X (n-1) digits after 1\n        val startWithOne: Long = math.pow(10, n - 1).toLong\n        \n        \/\/ Calculate numbers ending with 1: XX...X1 (n-1) digits before 1\n        \/\/ but without leading zeroes allowed, i.e., the first digit can't be zero\n        val endWithOne: Long = math.pow(10, n - 1).toLong\n        \n        \/\/ Reverse counting: numbers starting and ending with 1 (11XX...X)\n        val bothStartAndEndWithOne: Long = if (n > 1) math.pow(10, n - 2).toLong else 0\n        \n        \/\/ The total numbers starting or ending, or both, with 1\n        startWithOne + endWithOne - bothStartAndEndWithOne\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"},{"task_id":"HumanEval_84","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ။    \/\/အပေါင်းကိန်းပြည့် N ကိုပေးထားလျှင် ဘိုင်နရီစနစ်ဖြင့် ၎င်း၏ဂဏန်းများစုစုပေါင်းကိုပြန်ပေးပါ။    \/\/ >>> solve((1000l))\n    \/\/ (\"1\")\n    \/\/ >>> solve((150l))\n    \/\/ (\"110\")\n    \/\/ >>> solve((147l))\n    \/\/ (\"1100\")\n    \/\/ Variables:\n    \/\/ @N integer\n    \/\/ Constraints: 0 ≤ N ≤ 10000.\n    \/\/ Output:\n    \/\/ a string of binary number\n    def solve(N : Long) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ Given a positive integer N, return the total sum of its digits in binary.\n    def solve(N: Long): String = {\n        val sumOfDigits = N.toString.map(_.asDigit).sum\n        sumOfDigits.toBinaryString\n    }\n\n    def main(args: Array[String]): Unit = {\n        println(solve(1000L))  \/\/ should print \"1\"\n        println(solve(150L))   \/\/ should print \"110\"\n        println(solve(147L))   \/\/ should print \"1100\"\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"},{"task_id":"HumanEval_85","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/ဖြောင့်ကိန်းတွေရဲ့ အလွတ်မဟုတ်တဲ့ စာရင်းကို ပေးပြီး lst က odd index တွေမှာရှိတဲ့ အက္ခရာတစ်စုံကို ပေါင်းပါ    \/\/ >>> add((List[Long](4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong)))\n    \/\/ (2l)\n    def add(lst : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Given a non-empty list of integers lst. add the even elements that are at odd indices.\n  def add(lst: List[Long]): Long = {\n    lst.zipWithIndex.collect {\n      case (value, index) if index % 2 == 1 && value % 2 == 0 => value\n    }.sum\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_86","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/မှတ်ချက်: စကားလုံးများနှင့် စာလုံးကွက်များ၏ အစီအစဉ်ကို ဂရုစိုက်ပါ။    \/\/ascending order အပေါ် အခြေခံပြီး ascii value ကို အခြေခံတယ်။    \/\/ မှာ စီစဉ်ထားတဲ့ စာလုံးအားလုံးပါတဲ့ စကားလုံးသစ်နဲ့ အစားထိုးတယ်။    \/\/String ရဲ့ အစီအစဉ်ချထားတဲ့ပုံစံက စာလုံးအားလုံး (ကွက်လပ်နဲ့ခွဲထား) ရှိတဲ့ string ပါ။    \/\/String တစ်ခုကိုယူပြီး ၎င်းရဲ့ အစီအစဉ်ချထားတဲ့ပုံစံကို ပြန်ပေးတဲ့ function တစ်ခုရေးပါ။    \/\/ >>> antiShuffle((\"Hi\"))\n    \/\/ (\"Hi\")\n    \/\/ >>> antiShuffle((\"hello\"))\n    \/\/ (\"ehllo\")\n    \/\/ >>> antiShuffle((\"Hello World!!!\"))\n    \/\/ (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n","canonical_solution":"import scala.collection.mutable.ArrayBuffer\n\nobject Problem {\n  def antiShuffle(s: String): String = {\n    val words = s.split(\"(?<=\\\\s)\")\n    val sortedWords = words.map(word => {\n      val trimmedWord = word.trim\n      val sortedChars = trimmedWord.sorted\n      word.replace(trimmedWord, sortedChars)\n    })\n    sortedWords.mkString(\"\")\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(antiShuffle(\"Hi\"))\n    println(antiShuffle(\"hello\"))\n    println(antiShuffle(\"Hello World!!!\"))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"},{"task_id":"HumanEval_87","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/နောက်ပြီး အတန်းရဲ့ ကိုဩဒိနိတ်တွေကိုလည်း အောက်ပြန်ဆင်းတဲ့ အတန်းစဉ်နဲ့ ရွေးရမယ်။    \/\/ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ ာ    \/\/tuple တစ်ခုစီဟာ ၀ နဲ့စတဲ့ အညိညိညိ (တန်း၊ အတိုင်) ပါ။    \/\/ပြီးတော့ [(x1, y1), (x2, y2) ...] ဆိုတဲ့ tuples တွေရဲ့ စာရင်းကို ပြန်ပေးတယ်     \/\/lst နဲ့ integer x ကို ပေးထားရင် စာရင်းထဲက integer x တွေကို ရှာကြည့်ပါ။    \/\/အတန်းတစ်ခုစီမှာ ကော်လံအရေအတွက် မတူညီနိုင်ပါ။    \/\/matrix နဲ့တူတယ် matrix နဲ့မတူဘူး    \/\/ခင်ဗျားကို ၂-ဖက်မြင် ဒေတာတစ်ခု ပေးလိုက်မယ်။ ဒါကတော့ မြှုပ်ထားတဲ့ စာရင်းတစ်ခုပါ။    \/\/ >>> getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    \/\/ (List[Tuple2[Long, Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))\n    \/\/ >>> getRow((List[List[Long]]()), (1l))\n    \/\/ (List[Tuple2[Long, Long]]())\n    \/\/ >>> getRow((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l))\n    \/\/ (List[Tuple2[Long, Long]]((2l, 2l)))\n    def getRow(lst : List[List[Long]], x : Long) : List[Tuple2[Long, Long]] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def getRow(lst: List[List[Long]], x: Long): List[(Long, Long)] = {\n    val coordinates = for {\n      (row, rowIndex) <- lst.zipWithIndex\n      (value, colIndex) <- row.zipWithIndex\n      if value == x\n    } yield (rowIndex.toLong, colIndex.toLong)\n\n    coordinates\n      .groupBy(_._1)\n      .toList\n      .sortBy(_._1)\n      .flatMap { case (rowIndex, coords) =>\n        coords.sortBy(-_._2)\n      }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long, Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))), (2l)).equals((List[Tuple2[Long, Long]]((0l, 1l), (1l, 1l), (2l, 1l), (3l, 1l), (4l, 1l), (5l, 1l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long, Long]]((0l, 0l), (1l, 0l), (2l, 1l), (2l, 0l), (3l, 2l), (3l, 0l), (4l, 3l), (4l, 0l), (5l, 4l), (5l, 0l), (6l, 5l), (6l, 0l)))));\n    assert(getRow((List[List[Long]]()), (1l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong))), (2l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l)).equals((List[Tuple2[Long, Long]]((2l, 2l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_88","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/* ပေးထားသော စာရင်းကို မပြောင်းလဲပါ။    \/\/မှတ်ချက်:    \/\/သို့မဟုတ် စုစုပေါင်းက ((ပထမ ဦး ဆုံးညွှန်းကိန်းတန်ဖိုး၊ နောက်ဆုံးညွှန်းကိန်းတန်ဖိုး) သည်တောင်ဖြစ်ပါကဆင်းသက်သောအစဉ်ဖြင့်ရွေးချယ်ပါ။    \/\/သင်ပေးထားတဲ့ စာရင်းကို မြင့်တက်နေတဲ့ အဆင့်မှာ စီစဉ်ပါလိမ့်မယ် အကယ်၍ စုစုပေါင်း (ပထမ ဦး ဆုံးညွှန်းကိန်းတန်ဖိုး၊ နောက်ဆုံးညွှန်းကိန်းတန်ဖိုး) ဟာ odd ဖြစ်ရင်     \/\/အနုတ်မဟုတ်သော ဖြောင့်ကိန်းများစာရင်းကို ပေးထားလျှင် စီစဉ်ပြီးနောက် ပေးထားသောစာရင်း၏ coscala တစ်ခုကို ပြန်ပေးပါ    \/\/ >>> sortArray((List[Long]()))\n    \/\/ (List[Long]())\n    \/\/ >>> sortArray((List[Long](5l.toLong)))\n    \/\/ (List[Long](5l.toLong))\n    \/\/ >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong)))\n    \/\/ (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    \/\/ >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong)))\n    \/\/ (List[Long](6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))\n    def sortArray(array : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def sortArray(array: List[Long]): List[Long] = {\n    if (array.isEmpty) {\n      array\n    } else {\n      val first = array.head\n      val last = array.last\n      val sum = first + last\n      if (sum % 2 == 0) {\n        array.sorted(Ordering[Long].reverse)\n      } else {\n        array.sorted\n      }\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(sortArray(List[Long]())) \/\/ (List[Long]())\n    println(sortArray(List[Long](5L))) \/\/ (List[Long](5L))\n    println(sortArray(List[Long](2L, 4L, 3L, 0L, 1L, 5L))) \/\/ (List[Long](0L, 1L, 2L, 3L, 4L, 5L))\n    println(sortArray(List[Long](2L, 4L, 3L, 0L, 1L, 5L, 6L))) \/\/ (List[Long](6L, 5L, 4L, 3L, 2L, 1L, 0L))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong, 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong, 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong, 14l.toLong, 11l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_89","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/နေရာနှစ်ခုကို နှစ်နဲ့ မြှောက်လိုက်ရင် နေရာနှစ်ခုကို ပြောင်းသွားမယ်။    \/\/အက္ခရာတွေကို ြပီး ြပီး ြပီး ြပီး ြပီး ြပီး    \/\/ အက္ခရာတွေကို လှည့်ပေးပြီး ကုဒ်သွင်းထားတဲ့ string ကို ပြန်ပေးတယ်။    \/\/ဖို့ argument အဖြစ် string ကိုယူတဲ့ function encrypt ကိုဖန်တီးပြီး     \/\/ >>> encrypt((\"hi\"))\n    \/\/ (\"lm\")\n    \/\/ >>> encrypt((\"asdfghjkl\"))\n    \/\/ (\"ewhjklnop\")\n    \/\/ >>> encrypt((\"gf\"))\n    \/\/ (\"kj\")\n    \/\/ >>> encrypt((\"et\"))\n    \/\/ (\"ix\")\n    def encrypt(s : String) : String = {\n","canonical_solution":"def encrypt(s: String): String = {\n  s.map(c => {\n    val rotatedChar = (c - 'a' + 4) % 26 + 'a'\n    rotatedChar.toChar\n  })\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n"},{"task_id":"HumanEval_90","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/None ကိုပြန်ပို့ပါက ထို element မရှိပါ။    \/\/list ထဲက ဒုတိယအငယ္ဆုံး element ကို ျပန္ေပးတဲ့ next_smallest () ဆိုတဲ့ function ကို ေရးပါ။    \/\/ခင်ဗျားကို ဖြောင့်ကိန်းတွေ စာရင်းပေးတယ်။    \/\/ >>> nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n    \/\/ Some(2l)\n    \/\/ >>> nextSmallest((List[Long](5l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    \/\/ Some(2l)\n    \/\/ >>> nextSmallest((List[Long]()))\n    \/\/ None\n    \/\/ >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n    \/\/ None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def nextSmallest(lst: List[Long]): Option[Long] = {\n    if (lst.size < 2) return None\n\n    val distinctSorted = lst.distinct.sorted\n    if (distinctSorted.size < 2) None\n    else Some(distinctSorted(1))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(Some(2l)));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(Some(2l)));\n    assert(nextSmallest((List[Long]())).equals(None));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(Some(1l)));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(Some(-35l)));\n    }\n\n}\n"},{"task_id":"HumanEval_91","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/စကားစုများကို ' '၊ ' ' သို့မဟုတ် '! ' ဖြင့်ခွဲခြားထားသည်။    \/\/ငြီးငွေ့မှုက \"ငါ\" ဆိုတဲ့ စကားလုံးနဲ့ စတဲ့ ဝါကျတစ်ခုပါ။    \/\/ခင်ဗျားကို စကားလုံးတစ်ကြောင်းစီ ပေးလိုက်မယ်။ ခင်ဗျားအလုပ်က ဂဏန်းတွက်ဖို့လေ။    \/\/ >>> isBored((\"Hello world\"))\n    \/\/ (0l)\n    \/\/ >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    \/\/ (1l)\n    def isBored(S : String) : Long = {\n","canonical_solution":"def isBored(S: String): Long = {\n    \/\/ Split the input string into sentences using '.', '?' or '!' as delimiters\n    val sentences = S.split(\"[.!?]\").map(_.trim)\n\n    \/\/ Filter sentences that start with 'I' and count them\n    sentences.count(sentence => sentence.startsWith(\"I\"))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_92","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ     \/\/အခြားကိစ္စများတွင် false ပြန်ပေးသည်။    \/\/ကိန်းဂဏန်းတစ်လုံးက အခြားနှစ်ခုရဲ့ ပေါင်းလဒ်နဲ့ ညီပြီး ကိန်းအားလုံးက ကိန်းပြည့်တွေဆိုရင် မှန်တယ်လို့ ပြန်ပေးတယ်။    \/\/ဂဏန်းသုံးလုံးပါတဲ့ function တစ်ခုကို ဖန်တီးပါ။    \/\/ >>> anyInt(5l, 2l, 7l)\n    \/\/ (true)\n    \/\/ >>> anyInt(3l, 2l, 2l)\n    \/\/ (false)\n    \/\/ >>> anyInt(3l, -2l, 1l)\n    \/\/ (true)\n    \/\/ >>> anyInt((3.6f), (-2.2f), 2l)\n    \/\/ (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Create a function that takes 3 numbers.\n  \/\/ Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  \/\/ Returns false in any other cases.\n  def anyInt(x: Float, y: Float, z: Float): Boolean = {\n    val xLong = x.toLong\n    val yLong = y.toLong\n    val zLong = z.toLong\n\n    \/\/ Check if all inputs are actually integers\n    if (xLong == x && yLong == y && zLong == z) {\n      return xLong + yLong == zLong || xLong + zLong == yLong || yLong + zLong == xLong\n    }\n    false\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_93","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/စာလုံးတွေကိုပဲ ယူလိုက်ပါ    \/\/အင်္ဂလိပ်အက္ခရာထဲက သရအက္ခရာပါ။    \/\/စာလုံးက အဲဒီစာလုံးရဲ့ ရှေ့မှာ နှစ်ခုပါရင်    \/\/ြပီးေတာ့ စာလုံးေပါင္းေတြရဲ႕ case ေတြကိုလဲေပးတယ္ ြပီးေတာ့ ြပီးေတာ့ ြပီးေတာ့ ြပီးေတာ့ ြပီးေတာ့ ြပီးေတာ့    \/\/message တစ္ခုကို ယူၿပီး ႏွိပ္ေပးတဲ့ function တစ္ခုကို ေရးပါ    \/\/ >>> encode((\"test\"))\n    \/\/ (\"TGST\")\n    \/\/ >>> encode((\"This is a message\"))\n    \/\/ (\"tHKS KS C MGSSCGG\")\n    def encode(message : String) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def encode(message: String): String = {\n    val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    val vowelMap = Map(\n      'a' -> 'c', 'e' -> 'g', 'i' -> 'k', 'o' -> 'q', 'u' -> 'w',\n      'A' -> 'C', 'E' -> 'G', 'I' -> 'K', 'O' -> 'Q', 'U' -> 'W'\n    )\n    \n    message.map { char =>\n      if (vowels.contains(char)) {\n        vowelMap(char)\n      } else if (char.isLetter) {\n        if (char.isLower) char.toUpper else char.toLower\n      } else {\n        char\n      }\n    }.mkString\n  }\n\n  \/\/ Test cases\n  def main(args: Array[String]): Unit = {\n    println(encode(\"test\"))            \/\/ should print \"TGST\"\n    println(encode(\"This is a message\")) \/\/ should print \"tHKS KS C MGSSCGG\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"},{"task_id":"HumanEval_94","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/အကြီးဆုံးကိန်းဂဏန်းတန်ဖိုးကိုရှာပြီး ဂဏန်းတွေရဲ့ပေါင်းလဒ်ကိုပြန်ပေးရပါမယ်    \/\/ခင်ဗျားကို ဖြောင့်ကိန်းတွေ စာရင်းပေးတယ်။    \/\/ >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    \/\/ (10l)\n    \/\/ >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    \/\/ (25l)\n    \/\/ >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    \/\/ (13l)\n    \/\/ >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    \/\/ (11l)\n    \/\/ >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    \/\/ (3l)\n    \/\/ >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    \/\/ (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n","canonical_solution":"def skjkasdkd(lst: List[Long]): Long = {\n  def isPrime(n: Long): Boolean = {\n    if (n <= 1) false\n    else if (n == 2) true\n    else if (n % 2 == 0) false\n    else !(3L to math.sqrt(n).toLong by 2).exists(n % _ == 0)\n  }\n\n  def sumOfDigits(n: Long): Long = n.toString.map(_.asDigit).sum\n\n  val largestPrime = lst.filter(isPrime).sorted.lastOption.getOrElse(0L)\n  sumOfDigits(largestPrime)\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n"},{"task_id":"HumanEval_95","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/function က false ကိုပြန်ပေးရပါမယ် ပေးထားတဲ့ map ဟာ ဗလာဖြစ်နေရင်ပေါ့    \/\/case သို့မဟုတ် ခလုတ်အားလုံးက uppercase နဲ့ string ဖြစ်ရင် false ပြန်ပေးတယ်။    \/\/map ကိုပေးထားရင် ခလုတ်အားလုံးက lower ထဲက string တွေဆိုရင် true ကိုပြန်ပေးတယ်။    \/\/ >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n    \/\/ (true)\n    \/\/ >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    \/\/ (true)\n    def checkDictCase(dict : Map[String,String]) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def checkDictCase(dict: Map[String, String]): Boolean = {\n    if (dict.isEmpty) return false\n\n    val keys = dict.keys.toList\n    val allLowerCase = keys.forall(key => key == key.toLowerCase)\n    val allUpperCase = keys.forall(key => key == key.toUpperCase)\n\n    allLowerCase || allUpperCase\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]())) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_96","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/ဖြောင့်ကိန်းတွေပဲ ရှိပါသေးတယ်။    \/\/အနုတ်မဟုတ်သော ကိန်းပြည့်ကိုယူပြီး ပထမ n ၏စာရင်းကိုပြန်ပေးတဲ့ function ကိုအကောင်အထည်ဖော်ပါ။    \/\/ >>> countUpTo((5l))\n    \/\/ (List[Long](2l.toLong, 3l.toLong))\n    \/\/ >>> countUpTo((11l))\n    \/\/ (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))\n    \/\/ >>> countUpTo((0l))\n    \/\/ (List[Long]())\n    \/\/ >>> countUpTo((20l))\n    \/\/ (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    \/\/ >>> countUpTo((1l))\n    \/\/ (List[Long]())\n    \/\/ >>> countUpTo((18l))\n    \/\/ (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def countUpTo(n : Long) : List[Long] = {\n","canonical_solution":"def countUpTo(n: Long): List[Long] = {\n    def isPrime(num: Long): Boolean = {\n      if (num < 2) return false\n      for (i <- 2L to math.sqrt(num).toLong) {\n        if (num % i == 0) return false\n      }\n      true\n    }\n\n    (2L until n).filter(isPrime).map(_.toLong).toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_97","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/input ကိုအမြဲတမ်းမှန်တယ်လို့ယူဆပါ။    \/\/သူတို့ယူနစ်ဂဏန်းတွေရဲ့ product ကိုယူတယ်။    \/\/Function ကို ပြီးအောင်လုပ်ပြီး     \/\/ >>> multiply((148l), (412l))\n    \/\/ (16l)\n    \/\/ >>> multiply((19l), (28l))\n    \/\/ (72l)\n    \/\/ >>> multiply((2020l), (1851l))\n    \/\/ (0l)\n    \/\/ >>> multiply((14l), (-15l))\n    \/\/ (20l)\n    def multiply(a : Long, b : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def multiply(a: Long, b: Long): Long = {\n        val unitDigitA = abs(a % 10)\n        val unitDigitB = abs(b % 10)\n        unitDigitA * unitDigitB\n    }\n\n    def main(args: Array[String]): Unit = {\n        println(multiply(148l, 412l))  \/\/ 16l\n        println(multiply(19l, 28l))    \/\/ 72l\n        println(multiply(2020l, 1851l)) \/\/ 0l\n        println(multiply(14l, -15l))   \/\/ 20l\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_98","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/string s ကိုပေးထားရင် စာလုံးကြီးတွေရဲ့ စာလုံးကြီးတွေကို ဂဏန်းတွဲကိန်းနဲ့ ရေတွက်ပါ။    \/\/ >>> countUpper((\"aBCdEf\"))\n    \/\/ (1l)\n    \/\/ >>> countUpper((\"abcdefg\"))\n    \/\/ (0l)\n    \/\/ >>> countUpper((\"dBBE\"))\n    \/\/ (0l)\n    def countUpper(s : String) : Long = {\n","canonical_solution":"def countUpper(s: String): Long = {\n  val uppercaseVowels = Set('A', 'E', 'I', 'O', 'U')\n  s.zipWithIndex.collect {\n    case (ch, index) if index % 2 == 0 && uppercaseVowels.contains(ch) => ch\n  }.size.toLong\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_99","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ     \/\/ကိန်းပြည့် နှစ်ခုကနေ သုညကို အနီးကပ်ဆုံးဖြတ်လိုက်။    \/\/၎င်းနဲ့ အနီးစပ်ဆုံးကိန်းပြည့်ကို ပြန်ပေးမယ်။    \/\/ကိန်းတစ်ခုကို ကိုယ်စားပြုတဲ့ တန်ဖိုး (string) ကို ယူတဲ့ လုပ်ဆောင်ချက်ကို ဖန်တီးပါ။    \/\/ >>> closestInteger((\"10\"))\n    \/\/ (10l)\n    \/\/ >>> closestInteger((\"15.3\"))\n    \/\/ (15l)\n    \/\/ Note:\n    \/\/ Rounding away from zero means that if the given number is equidistant\n    \/\/ from two integers, the one you should return is the one that is the\n    \/\/ farthest from zero. For example closest_integer(\"14.5\") should\n    \/\/ return 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value : String) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def closestInteger(value: String): Long = {\n    val num = value.toDouble\n    val lower = floor(num).toLong\n    val upper = ceil(num).toLong\n    \n    if (abs(num - lower) == abs(num - upper)) {\n      if (num > 0) upper else lower\n    } else {\n      round(num)\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(closestInteger(\"10\"))  \/\/ 10\n    println(closestInteger(\"15.3\")) \/\/ 15\n    println(closestInteger(\"14.5\")) \/\/ 15\n    println(closestInteger(\"-14.5\")) \/\/ -15\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_100","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/i ကတော့ အထက်တန်းစား (i+1) မှာရှိတဲ့ ကျောက်တုံး အရေအတွက်ကို ကိုယ်စားပြုပါတယ်။    \/\/index  တွင် element ရှိသည့် list တွင် level တစ်ခုစီရှိ ကျောက်တုံးအရေအတွက်ကိုပြန်ပေးသည်။    \/\/- နောက် n သည် အချိုးကျပါက နောက် အချိုးကျကိန်းပါ။    \/\/- နောက်တစ်ကြိမ် ထပ်ထည့်လိုက်ရင်    \/\/နောက်တစ်ဆင့်မှာရှိတဲ့ ကျောက်တုံး အရေအတွက်က    \/\/ပထမအဆင့်မှာ N ကျောက်တုံးတွေရှိတယ်။    \/\/အပေါင်းကိန်းပြည့် n ကိုပေးရင် ကျောက်တုံးတွေကို အဆင့် n နဲ့ပုံချရမယ်။    \/\/ >>> makeAPile((3l))\n    \/\/ (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n","canonical_solution":"import scala.collection.mutable.ListBuffer\n\nobject Problem {\n    def makeAPile(n: Long): List[Long] = {\n        val pile = ListBuffer[Long]()\n        var currentStones = n\n        for (_ <- 0 until n.toInt) {\n            pile += currentStones\n            currentStones += (if (currentStones % 2 == 0) 2 else 2)\n        }\n        pile.toList\n    }\n\n    def main(args: Array[String]): Unit = {\n        val result = makeAPile(3L)\n        println(result)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_101","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/string ကို စကားလုံးတွေခွဲပြီး စကားလုံးစာရင်းတစ်ခု ပြန်ပို့ဖို့ပါ။    \/\/comma (သို့) spaces တွေနဲ့ခွဲထားတဲ့ စကားလုံးတစ်ကြောင်းပေးပါလိမ့်မယ်။ ခင်ဗျားရဲ့အလုပ်က    \/\/ >>> wordsString((\"Hi, my name is John\"))\n    \/\/ (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    \/\/ >>> wordsString((\"One, two, three, four, five, six\"))\n    \/\/ (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n","canonical_solution":"def wordsString(s: String): List[String] = {\n    s.split(\"[, ]+\").toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_102","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/အဲဒီ ကိန္းဂဏန္းမရွိဘူးဆိုရင္ - 1 ကိုျပန္ေပးရမယ္    \/\/[x, y] အပါအဝင် အကြီးဆုံး ဖြောင့်ကိန်း ဖြစ်တယ်ဆိုရင်    \/\/ဒီ function က အပေါင်းကိန်းနှစ်ခု x နဲ့ y ကိုယူပြီး ကိုပြန်ပေးတယ်။    \/\/ >>> chooseNum((12l), (15l))\n    \/\/ (14l)\n    \/\/ >>> chooseNum((13l), (12l))\n    \/\/ (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n","canonical_solution":"def chooseNum(x: Long, y: Long): Long = {\n    \/\/ Ensure x is the lesser value and y is the greater value\n    val (start, end) = if (x > y) (y, x) else (x, y)\n    \n    \/\/ Start from the end of the range and search backwards for an even number\n    for (i <- end to start by -1 if i % 2 == 0) {\n      return i\n    }\n    \n    \/\/ If no even number is found, return -1\n    -1\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n}\n"},{"task_id":"HumanEval_103","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/n က m ထက်ကြီးရင် - 1 ပြန်ပေး။    \/\/အဖြေကို အနီးဆုံးကိန်းပြည့်အဖြစ် အဝိုင်းချပြီး ဒါကို ဘိုင်နရီအဖြစ် ပြောင်းလိုက်ပါ    \/\/n မှ m အထိ (n နှင့် m အပါအဝင်) ကိန်းပြည့်များ၏ ပျမ်းမျှ။    \/\/N နဲ့ M အပေါင်းကိန်းနှစ်ခုကို ပေးထားပြီး ခင်ဗျားအလုပ်က    \/\/ >>> roundedAvg((1l), (5l))\n    \/\/ \"0b11\"\n    \/\/ >>> roundedAvg((7l), (5l))\n    \/\/ -1l\n    \/\/ >>> roundedAvg((10l), (20l))\n    \/\/ \"0b1111\"\n    \/\/ >>> roundedAvg((20l), (33l))\n    \/\/ \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String, Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n  \/\/ Function to compute the average of the integers from n through m\n  def roundedAvg(n: Long, m: Long): Either[String, Long] = {\n    if (n > m) {\n      Right(-1L)\n    } else {\n      val count = m - n + 1\n      val sum = (n + m) * count \/ 2\n      val average = round(sum.toDouble \/ count)\n      Left(\"0b\" + average.toLong.toBinaryString)\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(roundedAvg(1L, 5L))    \/\/ Left(\"0b11\")\n    println(roundedAvg(7L, 5L))    \/\/ Right(-1L)\n    println(roundedAvg(10L, 20L))  \/\/ Left(\"0b1111\")\n    println(roundedAvg(20L, 33L))  \/\/ Left(\"0b11010\")\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n    }\n\n}\n"},{"task_id":"HumanEval_104","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/မှတ်ချက်: ပြန်ပို့သောစာရင်းကို တိုးတက်လာသောအစဉ်အတိုင်းရွေးချယ်ရပါမည်။    \/\/ကိန်းဂဏန်းတွေမရှိတဲ့ ဒြပ်စင်တွေပေါ့။    \/\/အပေါင်းကိန်းပြည့် x ရဲ့စာရင်းကိုပေးပြီး အားလုံးရဲ့ရွေးချယ်ထားတဲ့စာရင်းကိုပြန်ပေးပါတယ်    \/\/ >>> uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong)))\n    \/\/ (List[Long](1l.toLong, 15l.toLong, 33l.toLong))\n    \/\/ >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong)))\n    \/\/ (List[Long]())\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def uniqueDigits(x: List[Long]): List[Long] = {\n    def hasEvenDigit(n: Long): Boolean = {\n      n.toString.exists(c => (c - '0') % 2 == 0)\n    }\n\n    x.filterNot(hasEvenDigit).sorted\n  }\n\n  \/\/ Example usage\n  def main(args: Array[String]): Unit = {\n    println(uniqueDigits(List[Long](15L, 33L, 1422L, 1L)))\n    println(uniqueDigits(List[Long](152L, 323L, 1422L, 10L)))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_105","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/\"တစ်၊ နှစ်၊ သုံး၊ လေး၊ ငါး၊ ခြောက်၊ ခုနစ်၊ ရှစ်၊ ကိုး\"    \/\/ရလဒ်စာရင်းကို ပြောင်းပြန်လှန်ပြီး ထဲက ဂဏန်းတိုင်းကို ၎င်းရဲ့အမည်နဲ့ အစားထိုးလိုက်ပါတယ်။    \/\/ကိန်းပြည့်တွေရဲ့ စာရင်းတစ်ခုပေးပြီး ၁ နဲ့ ၉ အပါအဝင် ကိန်းပြည့်တွေကို ရွေးပါ။    \/\/ >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    \/\/ If the list is empty, return an empty list:\n    \/\/ >>> byLength((List[Long]()))\n    \/\/ (List[String]())\n    \/\/ If the list has any strange number ignore it:\n    \/\/ >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    \/\/ (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n","canonical_solution":"import scala.collection.mutable._\n\nobject Problem {\n  def byLength(arr: List[Long]): List[String] = {\n    \/\/ Map of digit to its corresponding name\n    val numToName = Map(\n      1L -> \"One\",\n      2L -> \"Two\",\n      3L -> \"Three\",\n      4L -> \"Four\",\n      5L -> \"Five\",\n      6L -> \"Six\",\n      7L -> \"Seven\",\n      8L -> \"Eight\",\n      9L -> \"Nine\"\n    )\n\n    \/\/ Filter numbers between 1 and 9\n    val filteredAndSorted = arr.filter(num => num >= 1 && num <= 9).sorted(Ordering[Long].reverse)\n    \/\/ Map filtered and sorted numbers to their corresponding names\n    filteredAndSorted.map(numToName)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_106","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/i ရဲ့ ကိန်းရှင်ဟာ 1 ကနေ i အထိရှိတဲ့ ကိန်းတွေရဲ့ မြှောက်လဒ်ဖြစ်တယ်။ (1 * 2 * ... * i)    \/\/i က ၁ ကနေစတယ်။    \/\/သို့မဟုတ် ၁ ကနေ i ထိ ကိန်းဂဏန်းတွေရဲ့ ပေါင်းလဒ်ဖြစ်တယ်။    \/\/ပြီးတော့ list of size n ကိုပြန်ပေးတယ် ဒီတော့ index i မှာရှိတဲ့ element ရဲ့တန်ဖိုးက i ရဲ့ factorial ဖြစ်သွားတယ် i က အချိုးအစားတူတယ်ဆိုရင်ပေါ့    \/\/Function f ကို n ကို parameter အဖြစ်ယူပြီး အကောင်အထည်ဖော်ပါ။    \/\/ >>> f((5l))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n    def f(n : Long) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(n: Long): List[Long] = {\n        def factorial(x: Long): Long = if (x == 0) 1 else x * factorial(x - 1)\n        \n        (1L to n).map { i =>\n            if (i % 2 == 0) factorial(i) else (1L to i).sum\n        }.toList\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_107","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ ၁။    \/\/ကိန်းပြည့် palindromes တွေဟာ ((၁၊ n) အပါအဝင်) အတွင်းမှာ ကျရောက်တယ်။    \/\/အပေါင်းကိန်းပြည့် n ကိုပေးရင် ကိန်းပြည့်နဲ့ ကိန်းပြည့်မတူတဲ့ ကိန်းပြည့်ကို ပြန်ပေးပါ။    \/\/ >>> evenOddPalindrome((3l))\n    \/\/ ((1l, 2l))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    \/\/ Example 2:\n    \/\/ >>> evenOddPalindrome((12l))\n    \/\/ ((4l, 6l))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    \/\/ Note:\n    \/\/ 1. 1 <= n <= 10^3\n    \/\/ 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {\n","canonical_solution":"def evenOddPalindrome(n: Long): (Long, Long) = {\n  def isPalindrome(x: Long): Boolean = {\n    val str = x.toString\n    str == str.reverse\n  }\n\n  var evenCount: Long = 0\n  var oddCount: Long = 0\n\n  for (i <- 1L to n) {\n    if (isPalindrome(i)) {\n      if (i % 2 == 0) evenCount += 1\n      else oddCount += 1\n    }\n  }\n\n  (evenCount, oddCount)\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l, 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l, 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l, 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l, 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n"},{"task_id":"HumanEval_108","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -123 မှာ -1, 2 နဲ့ 3 ရဲ့ အက္ခရာတွေရှိတယ်။    \/\/ကိန်းတစ်လုံးက အနှုတ်ဆိုရင် ပထမဆုံး အက္ခရာက အနှုတ်ဖြစ်မယ်။    \/\/0 ထက်ပိုတဲ့ အက္ခရာပေါင်းနဲ့ အက္ခရာပေါင်းတွေပါတဲ့အရာ အရေအတွက်    \/\/ကိန်းပြည့်စာရင်းကိုယူပြီး ပြန်ပေးတဲ့ count_nums ဆိုတဲ့ လုပ်ဆောင်ချက်ကိုရေးပါ။    \/\/ >>> countNums((List[Long]()))\n    \/\/ (0l)\n    \/\/ >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n    \/\/ (1l)\n    \/\/ >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n    \/\/ (3l)\n    def countNums(arr : List[Long]) : Long = {\n","canonical_solution":"def countNums(arr: List[Long]): Long = {\n  arr.count(num => {\n    val sumOfDigits = num.toString.foldLeft(0) { (acc, char) =>\n      if (char == '-') acc else acc + (char - '0')\n    }\n    sumOfDigits > 0\n  }).toLong\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_109","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာအားဖြင့်၊    \/\/မှတ်ချက်: ပေးထားသောစာရင်းတွင် ထူးခြားသော အစိတ်အပိုင်းများရှိရန် အာမခံထားသည်။    \/\/ပေးထားသောစာရင်းသည်အလွတ်ဖြစ်ပါက true ကိုပြန်ပေးပါ။    \/\/ၿပီးရင္ true ကို ျပန္ေပးပါ    \/\/အထက်ပါလုပ်ဆောင်ချက်များကိုလုပ်ဆောင်ခြင်းအားဖြင့်ရွေးချယ်ထားသောစာရင်းကိုရယူရန်ဖြစ်နိုင်လျှင်     \/\/စာရင်းထဲက အစပိုင်းနေရာ၊ စံနမူနာ နံပါတ် ၀ ပါ။    \/\/ညာဘက်ကို ရွှေ့လိုက်ရင် စာရင်းရဲ့ နောက်ဆုံးအက္ခရာဟာ ကို ရွှေ့သွားလိမ့်မယ်။    \/\/ညာဘက်ကိုရွှေ့ခြင်း လုပ်ဆောင်ချက်က စာရင်းထဲက ဒြပ်စင်အားလုံးကို တစ်ကြိမ် ရွှေ့ခြင်းပါ။    \/\/ညာဘက်ကို ဘယ်နှစ်ကြိမ်မဆို ရွှေ့လို့ရပါတယ်။    \/\/အောက်ပါစာရင်းတွင် အောက်ပါလုပ်ဆောင်ချက်ကို ထည့်သွင်းပါ:    \/\/ြပီးေတာ့ ြပီးေတာ့ ြပီးေတာ့ ြပီးေတာ့    \/\/စာရင်းထဲက နံပါတ်တွေကို ကျပန်း အစီအစဉ်ချထားမယ်။ ခင်ဗျားအလုပ်က သတ်မှတ်ဖို့ပါ။    \/\/ကျွန်တော်တို့မှာ array တစ်ခုရှိတယ် array[1], array[2], ..., array[N] ကနေ list တစ်ခုပါ။    \/\/ >>> moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong)))\n    \/\/ (true)\n    \/\/ Explanation: By performin 2 right shift operations, non-decreasing order can\n    \/\/ be achieved for the given list.\n    \/\/ >>> moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong)))\n    \/\/ (false)\n    \/\/ Explanation:It is not possible to get non-decreasing order for the given\n    \/\/ list by performing any number of right shift operations.\n    def moveOneBall(arr : List[Long]) : Boolean = {\n","canonical_solution":"def moveOneBall(arr: List[Long]): Boolean = {\n  if (arr.isEmpty) return true\n\n  \/\/ Find how many times the array needs to be shifted to become sorted\n  val n = arr.length\n  var shiftIndex = -1\n\n  for (i <- 0 until n) {\n    if (arr(i) > arr((i + 1) % n)) {\n      \/\/ More than one place where the order breaks means it can't be sorted with a shift\n      if (shiftIndex != -1) return false\n      shiftIndex = i + 1\n    }\n  }\n\n  \/\/ If no break in order was found, the array is already sorted\n  if (shiftIndex == -1) return true\n\n  \/\/ Check if shifting by the found index sorts the array\n  for (i <- 1 until n) {\n    if (arr((shiftIndex + i) % n) < arr((shiftIndex + i - 1) % n)) return false\n  }\n  \n  true\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](3l.toLong, 5l.toLong, 10l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](4l.toLong, 3l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long]())) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_110","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/မဟုတ်ရင် \"NO\" ပြန်ပေးပါ။    \/\/lst1 ၏ element အားလုံးသည် အချိုးညီဖြစ်ရန် \"YES\" ကိုပြန်ပို့ပါ။    \/\/lst1 နှင့် lst2 အကြား element များကို လဲလှယ်ရန် ဖြစ်နိုင်လျှင်    \/\/lst1 နှင့် lst2 အကြား အလဲအလှယ်ပြုလုပ်သော အစိတ်အပိုင်းအရေအတွက်အတွက် ကန့်သတ်ချက်မရှိပါ။    \/\/lst1 က ကိန္းတစ္ခုခုထဲမွာ ကိန္းတစ္ခုပဲ ပါတယ္    \/\/ပြီးတော့ အစိတ်အပိုင်းတွေကို လဲလှယ်လို့ရလားလို့လည်း ဆုံးဖြတ်ပေးတယ်    \/\/ဒီပုစ္ဆာမှာ ကိန်းတွေရဲ့ စာရင်းနှစ်ခုကို ယူတဲ့ လုပ်ဆောင်ချက်ကို သုံးပါမယ်    \/\/ >>> exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (\"YES\")\n    \/\/ >>> exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (\"NO\")\n    \/\/ It is assumed that the input lists will be non-empty.\n    def exchange(lst1 : List[Long], lst2 : List[Long]) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def exchange(lst1: List[Long], lst2: List[Long]): String = {\n    \/\/ Check if all elements in lst1 are already even\n    if (lst1.forall(_ % 2 == 0)) return \"YES\"\n\n    \/\/ Find if there's any even number in lst2 to exchange with lst1\n    val lst2EvensExist = lst2.exists(_ % 2 == 0)\n\n    \/\/ Check if there's also at least one odd in lst1 to swap it out\n    val lst1OddsExist = lst1.exists(_ % 2 != 0)\n\n    \/\/ Only possible if both an even element in lst2 and an odd element in lst1 exist\n    if (lst2EvensExist && lst1OddsExist) \"YES\" else \"NO\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 3l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](3l.toLong, 2l.toLong, 6l.toLong, 1l.toLong, 8l.toLong, 9l.toLong)), (List[Long](3l.toLong, 5l.toLong, 5l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](100l.toLong, 200l.toLong)), (List[Long](200l.toLong, 200l.toLong))).equals((\"YES\")));\n    }\n\n}\n"},{"task_id":"HumanEval_111","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/စာလုံးပေါင်းများစွာမှာ တူညီတဲ့ဖြစ်ရပ်ရှိရင် အားလုံးပြန်ပေးပါ။    \/\/စာလုံးအရေအတွက်နဲ့ ထပ်ခါထပ်ခါ ထပ်ခါထပ်ခါ ထည့်လိုက်ရင်    \/\/စာလုံးအသေးစားများကို နေရာလပ်ဖြင့် ကွဲထားသော string ကိုပေးထားလျှင် မြေပုံတစ်ခုကို ပြန်ပေးပါ    \/\/ >>> histogram((\"a b c\"))\n    \/\/ (Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    \/\/ >>> histogram((\"a b b a\"))\n    \/\/ (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    \/\/ >>> histogram((\"a b c a b\"))\n    \/\/ (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    \/\/ >>> histogram((\"b b b b a\"))\n    \/\/ (Map[String,Long](\"b\" -> 4l))\n    \/\/ >>> histogram((\"\"))\n    \/\/ (Map[String,Long]())\n    def histogram(test : String) : Map[String,Long] = {\n","canonical_solution":"def histogram(test: String): Map[String, Long] = {\n        val words = test.split(\" \")\n        val frequencyMap = words.groupBy(identity).mapValues(_.length.toLong)\n\n        if (frequencyMap.isEmpty) return Map.empty[String, Long]\n\n        val maxCount = frequencyMap.values.max\n        frequencyMap.filter { case (_, count) => count == maxCount }\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\n}\n"},{"task_id":"HumanEval_112","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ။    \/\/စစ်ဆေးမှုအတွက် ရလဒ် string နှင့် true\/false ပါသော tuple ကိုပြန်ပို့ရပါမည်။    \/\/ရှေ့ပြန်နဲ့နောက်ပြန် တူညီနေရင် string ကို palindrome လို့ခေါ်တယ်။    \/\/ၿပီးရင္ result string က palindrome ျဖစ္ေနသလားဆိုတာ စစ္ေဆးပါ။    \/\/S နဲ့ C ဆိုတဲ့ String နှစ်ခုကို ပေးထားတယ်။ အဲဒီ String ထဲက စာလုံးတိုင်းကို ဖျက်ပစ်ရမယ်။    \/\/အလုပ်။    \/\/ >>> reverseDelete((\"abcde\"), (\"ae\"))\n    \/\/ ((\"bcd\", false))\n    \/\/ >>> reverseDelete((\"abcdef\"), (\"b\"))\n    \/\/ ((\"acdef\", false))\n    \/\/ >>> reverseDelete((\"abcdedcba\"), (\"ab\"))\n    \/\/ ((\"cdedc\", true))\n    def reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n","canonical_solution":"def reverseDelete(s: String, c: String): Tuple2[String, Boolean] = {\n    \/\/ Convert the characters to be deleted into a set for quick lookup\n    val deleteSet = c.toSet\n    \n    \/\/ Filter out characters from s that are present in deleteSet\n    val filteredString = s.filterNot(deleteSet.contains)\n    \n    \/\/ Check if the filtered string is a palindrome\n    val isPalindrome = filteredString == filteredString.reverse\n    \n    \/\/ Return the tuple with the filtered string and the palindrome check result\n    (filteredString, isPalindrome)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"},{"task_id":"HumanEval_113","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/input ရဲ့ i'th string မှာရှိတဲ့ odd digits တွေရဲ့ကိန်းစဉ်ပါ။    \/\/input ရဲ့ string i ကို။\" ဒီမှာ i တွေအားလုံးကို နံပါတ်နဲ့ အစားထိုးသင့်ပါတယ်။    \/\/output i ရဲ့ element တစ်ခုစီဟာ ထဲမှာရှိတဲ့ odd element တွေရဲ့ အရေအတွက် ဖြစ်သင့်ပါတယ်။    \/\/string တစ်ခုစီမှာ ဂဏန်းတွေပဲပါဝင်တဲ့ string တွေရဲ့ list ကိုပေးပြီး list တစ်ခုကိုပြန်ပေးတယ်။    \/\/ >>> oddCount((List[String](\"1234567\")))\n    \/\/ (List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    \/\/ >>> oddCount((List[String](\"3\", \"11111111\")))\n    \/\/ (List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n","canonical_solution":"def oddCount(lst: List[String]): List[String] = {\n    lst.map { str =>\n      val oddCount = str.count(c => c.asDigit % 2 != 0)\n      val replacedString = s\"the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.\"\n      replacedString\n    }\n  }\n\n  \/\/ Example usage\n  def main(args: Array[String]): Unit = {\n    println(oddCount(List(\"1234567\")))  \/\/ List(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")\n    println(oddCount(List(\"3\", \"11111111\")))  \/\/ List(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\")\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_114","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ။    \/\/အပိုဒ်များ၏    \/\/ဖြောင့်ကိန်းတွေပါတဲ့ စာရင်းတစ်ခုပေးပြီး ညာဘက်မှာရှိတဲ့ အလွတ်မဟုတ်တဲ့ စာရင်းငယ်ရဲ့ အနည်းဆုံး အပေါင်းကို ရှာပါ။    \/\/ >>> minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    \/\/ (1l)\n    \/\/ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    \/\/ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def minSubArraySum(nums: List[Long]): Long = {\n    var minEndingHere = nums.head\n    var minSoFar = nums.head\n    \n    for (i <- 1 until nums.length) {\n      minEndingHere = min(nums(i), minEndingHere + nums(i))\n      minSoFar = min(minSoFar, minEndingHere)\n    }\n    \n    minSoFar\n  }\n\n  \/\/ Test Cases\n  def main(args: Array[String]): Unit = {\n    println(minSubArraySum(List(2l, 3l, 4l, 1l, 2l, 4l))) \/\/ Output: 1\n    println(minSubArraySum(List(-1l, -2l, -3l))) \/\/ Output: -6\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong))) == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong, -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong, 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong, -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong))) == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_115","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ ၁။    \/\/အပြင်ထွက်ရေအိုးတွေကို ဘယ်နှစ်ကြိမ် ချဖို့လိုသလဲဆိုတာရိုက်ထည့်ပါ။    \/\/မင်းအလုပ်က ရေအိုးတွေကို ရေအိုင်တွေသုတ်ဖို့ အသုံးပြုဖို့ပါ။    \/\/ပြီးတော့ ဒီပုံးတွေအားလုံးဟာ တူညီတဲ့ ပမာဏကို ဆောင်ထားတယ်။    \/\/ရေတွင်းတိုင်းမှာ ရေကို ခုတ်ယူဖို့ ရေအိုးတစ်လုံးစီ ရှိတယ်။    \/\/အတန်းထဲက ၁ လုံးဟာ ရေရဲ့ယူနစ် တစ်ခုပါပဲ။    \/\/သင်ဟာ လေးထောင့်ကွက်ကွက်ရဲ့ အပုံတစ်ပုံ ရမယ်။ အတန်းတစ်တန်းစီဟာ အပေါက်တစ်ပေါက်ပါ။    \/\/ >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\n    \/\/ (6l)\n    \/\/ Example 2:\n    \/\/ >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l))\n    \/\/ (5l)\n    \/\/ Example 3:\n    \/\/ >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\n    \/\/ (0l)\n    \/\/ Constraints:\n    \/\/ * all wells have the same length\n    \/\/ * 1 <= grid.length <= 10^2\n    \/\/ * 1 <= grid[:,1].length <= 10^2\n    \/\/ * grid[i][j] -> 0 | 1\n    \/\/ * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]], capacity : Long) : Long = {\n","canonical_solution":"def maxFill(grid: List[List[Long]], capacity: Long): Long = {\n  var totalWaterUnits = 0L\n\n  for (row <- grid) {\n    totalWaterUnits += row.sum\n  }\n\n  \/\/ Calculate the number of times you need to lower the buckets\n  val bucketOperations = totalWaterUnits \/ capacity + (if (totalWaterUnits % capacity != 0) 1 else 0)\n\n  bucketOperations\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l)) == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_116","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/အောက်ပါအတိုင်း အကောင်အထည်ဖော်ရပါမယ်-    \/\/အလားတူ 1s များအတွက် ဒဿမကိန်းတန်ဖိုးကို အခြေခံပြီး ရွေးပါ။    \/\/binary representation ထဲက နံပါတ္ေတြကို တက္တက္တက္တက္တက္တက္တက္တက္တက္နဲ႔ ေရးထားတယ္။    \/\/Kata ထဲမွာေတာ့ အႏႈန္းမရွိတဲ့ ကိန္းေတြကို ျဖတ္ရမွာပါ    \/\/ >>> sortArray((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    \/\/ >>> sortArray((List[Long](-2l.toLong, -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong)))\n    \/\/ (List[Long](-6l.toLong, -5l.toLong, -4l.toLong, -3l.toLong, -2l.toLong))\n    \/\/ >>> sortArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n    def sortArray(arr : List[Long]) : List[Long] = {\n","canonical_solution":"def sortArray(arr: List[Long]): List[Long] = {\n        arr.sortBy(n => (n.toBinaryString.count(_ == '1'), n))\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong, -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong, -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong, 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong, 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_117","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/မှတ်ချက်: input string မှာ စာလုံးနဲ့ စာခြားနားချက်တွေပဲရှိတယ်လို့ ယူဆနိုင်ပါတယ်။    \/\/string s ဟာ ဗလာကျရင် function က list ဗလာပြန်ပေးလိမ့်မယ်။    \/\/n ကို s ထဲမှာရှိတဲ့ စကားလုံးတွေရဲ့ အစီအစဉ်နဲ့ ပေါင်းလိုက်ပါတယ်။    \/\/string s ထဲက စာလုံးအားလုံးရဲ့ စာရင်းကို ပြန်ပေးတဲ့ function တစ်ခုပါ။    \/\/string s နဲ့ natural number n ကို ပေးထားရင် ခင်ဗျားကို လုပ်ဆောင်ဖို့ ပြောထားတယ်    \/\/ >>> selectWords((\"Mary had a little lamb\"), (4l))\n    \/\/ (List[String](\"little\"))\n    \/\/ >>> selectWords((\"Mary had a little lamb\"), (3l))\n    \/\/ (List[String](\"Mary\", \"lamb\"))\n    \/\/ >>> selectWords((\"simple white space\"), (2l))\n    \/\/ (List[String]())\n    \/\/ >>> selectWords((\"Hello world\"), (4l))\n    \/\/ (List[String](\"world\"))\n    \/\/ >>> selectWords((\"Uncle sam\"), (3l))\n    \/\/ (List[String](\"Uncle\"))\n    def selectWords(s : String, n : Long) : List[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def selectWords(s: String, n: Long): List[String] = {\n    val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    \n    def consonantCount(word: String): Int = {\n      word.count(c => c.isLetter && !vowels.contains(c))\n    }\n\n    if (s.isEmpty) {\n      List()\n    } else {\n      s.split(\"\\\\s+\").filter(word => consonantCount(word) == n).toList\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_118","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/string ထဲမှာ အင်္ဂလိပ်စာလုံးတွေပဲ ပါတယ်လို့ ယူဆနိုင်ပါတယ်။    \/\/အထက်ပါ အခြေအနေကို ကျင့်တဲ့ အသံအနိမ့်အမြင့်တစ်ခု ရှာပါ။    \/\/အစနဲ့ အဆုံးက သရသံတွေ မရေတွက်ဘူး။ မရေတွက်ရင် ဗလာ string ပြန်ပေး။    \/\/ညာဘက်ခြမ်းမှ ဗျည်းနှစ်လုံး (အကြီးအသေးနားလည်) ။    \/\/ခင်ဗျားကို စကားလုံးတစ်လုံးပေးလိုက်တယ်ဗျာ ခင်ဗျားရဲ့အလုပ်က အဲဒီစကားလုံးတွေ ကြားက အနီးစပ်ဆုံး သရအက္ခရာတစ်လုံးကို ရှာဖို့ပါ    \/\/ >>> getClosestVowel((\"yogurt\"))\n    \/\/ (\"u\")\n    \/\/ >>> getClosestVowel((\"FULL\"))\n    \/\/ (\"U\")\n    \/\/ >>> getClosestVowel((\"quick\"))\n    \/\/ (\"\")\n    \/\/ >>> getClosestVowel((\"ab\"))\n    \/\/ (\"\")\n    def getClosestVowel(word : String) : String = {\n","canonical_solution":"def getClosestVowel(word: String): String = {\n    val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    \n    for (i <- word.length - 2 until 0 by -1) {\n      if (!vowels.contains(word(i)) && vowels.contains(word(i + 1)) && !vowels.contains(word(i + 2))) {\n        return word(i + 1).toString\n      }\n    }\n    \n    \"\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"},{"task_id":"HumanEval_119","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/String ကောင်းကောင်းတစ်ခု ဖန်တီးဖို့ နည်းလမ်းရှိရင် 'Yes' ပြန်ပေးပြီး အခြားနည်းနဲ့ဆိုရင် 'No' ပြန်ပေးပါ။    \/\/\" (()) \" ဆိုတာ မပါပါဘူး။    \/\/ဥပမာ၊ string '(())))' က ကောင်းတယ် string  ကတော့ ကောင်းတယ်    \/\/S ထဲက အကန့်တွေအားလုံး သာလျှင် string S ဟာ ကောင်းတယ်လို့ ယူဆရပါတယ်။    \/\/ရလဒ်က ကောင်းမှာဖြစ်လို့ပါ။    \/\/မင်းအလုပ်က ဒီကြိုးနှစ်ချောင်းကို ချိတ်ဆက်လို့ ရလားဆိုတာ စစ်ဆေးဖို့ပါ။    \/\/ကလစ် ' (() ' သို့မဟုတ် ကလစ် ') ' ကိုသာ သုံးပါ။    \/\/စာကြောင်းနှစ်ကြောင်းပါတဲ့ စာရင်းတစ်ခုပေးထားတယ်။ နှစ်ခုစလုံးက open တွေပါ။    \/\/ >>> matchParens((List[String](\"()(\", \")\")))\n    \/\/ (\"Yes\")\n    \/\/ >>> matchParens((List[String](\")\", \")\")))\n    \/\/ (\"No\")\n    def matchParens(lst : List[String]) : String = {\n","canonical_solution":"def matchParens(lst: List[String]): String = {\n    def isBalanced(s: String): Boolean = {\n      var balance = 0\n      for (char <- s) {\n        if (char == '(') balance += 1\n        else if (char == ')') balance -= 1\n        if (balance < 0) return false\n      }\n      balance == 0\n    }\n    \n    val combinations = List(\n      lst(0) + lst(1),\n      lst(1) + lst(0)\n    )\n    \n    if (combinations.exists(isBalanced)) \"Yes\" else \"No\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\", \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\", \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\", \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\", \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\", \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\", \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\", \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\", \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \")(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\")));\n    }\n\n}\n"},{"task_id":"HumanEval_120","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ ၁။    \/\/အရှည် k မှာ အမြင့်ဆုံး k ကိန်းဂဏန်းတွေပါပြီး arr ပါ။    \/\/ဖြောင့်ကိန်း arr နှင့် အပေါင်းကိန်း k တို့၏ စာရင်းကို ပေးပြီးလျှင် စီစဉ်ထားသော စာရင်းကို ပြန်ပေးသည်။    \/\/ >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l))\n    \/\/ (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    \/\/ Example 2:\n    \/\/ >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n    \/\/ (List[Long](4l.toLong, 4l.toLong))\n    \/\/ Example 3:\n    \/\/ >>> maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n    \/\/ (List[Long](2l.toLong))\n    \/\/ Note:\n    \/\/ 1. The length of the list will be in the range of [1, 1000].\n    \/\/ 2. The elements in the list will be in the range of [-1000, 1000].\n    \/\/ 3. 0 <= k <= len(arr)\n    def maximum(arr : List[Long], k : Long) : List[Long] = {\n","canonical_solution":"def maximum(arr: List[Long], k: Long): List[Long] = {\n    arr.sorted(Ordering[Long].reverse).take(k.toInt).sorted\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong, -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n    assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong, 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n    }\n\n}\n"},{"task_id":"HumanEval_121","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ     \/\/ဖြောင့်ကိန်းတွေရဲ့ အလွတ်မဟုတ်တဲ့ စာရင်းကိုပေးပြီး ကိန်းတစ်ထပ်ကိန်းတွေအားလုံးရဲ့ ပေါင်းလဒ်ကို ပြန်ပေးပါ    \/\/ >>> solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\n    \/\/ (12l)\n    \/\/ >>> solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    \/\/ (9l)\n    \/\/ >>> solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong)))\n    \/\/ (0l)\n    def solution(lst : List[Long]) : Long = {\n","canonical_solution":"def solution(lst: List[Long]): Long = {\n  lst.zipWithIndex.collect {\n    case (num, idx) if idx % 2 == 0 && num % 2 != 0 => num\n  }.sum\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong, 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong, 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong, 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong, 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_122","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/ပထမ k element တွေထဲက အနည်းဆုံး ဂဏန်းနှစ်လုံးပါ element တွေရဲ့ စုစုပေါင်း arr ။    \/\/ဖြောင့်ကိန်း arr ရဲ့စာရင်းတစ်ခုနဲ့ ဖြောင့်ကိန်း k ကို ပေးပြီး ကို ပြန်ပေးတယ်။    \/\/ >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n    \/\/ (24l)\n    \/\/ Constraints:\n    \/\/ 1. 1 <= len(arr) <= 100\n    \/\/ 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def addElements(arr: List[Long], k: Long): Long = {\n    arr.take(k.toInt).filter(x => x >= -99 && x <= 99).sum\n  }\n\n  def main(args: Array[String]): Unit = {\n    val result = addElements(List[Long](111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L), 4L)\n    println(result) \/\/ Output will be 24L\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_123","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/get_odd_collatz(5) က [1, 5] ကို ပြန်ပေးတယ်။ # collatz sequence က [5, 16, 8, 4, 2, 1] ဖြစ်လို့ odd က 1 နဲ့ 5 ပဲရှိတာပါ။    \/\/ဥပမာ -    \/\/(၂) ပြန်ပို့သောစာရင်းကို တိုးတက်လာသော အစီအစဉ်ဖြင့် စီစဉ်ထားသည်။    \/\/Collatz ((1) သည် [1] ဖြစ်ပါသည်။    \/\/မှတ်ချက်:    \/\/ထာမ်မပေါင်း ၁။ n ရဲ့ တန်ဖိုးက ဘာပဲဖြစ်ဖြစ် အစဉ်ဟာ အမြဲ ၁ ထိ ရောက်တယ်လို့ ထင်မြင်ချက်ပါ။    \/\/\"မ\" က odd term ဆိုရင္ ေနာက္ထပ္ term က 3x ပဲျဖစ္လာမယ္။    \/\/နောက်တစ်ကြိမ်မှာ  ရဲ့ တစ်ဝက်ကို  ထပ်ညွှန်းကိန်းအဖြစ် ရေးပါ။    \/\/အောက်ပါအတိုင်း: အပေါင်းကိန်းပြည့် n တစ်ခုစီနဲ့ စလိုက်ပါ၊ မှ သက်တမ်းတစ်ခုစီကို ရမယ်။    \/\/Collatz အဆိုကြမ်းသည် သင်္ချာပညာတွင် ဖော်ပြထားသော အစဉ်တစ်ခုနှင့် သက်ဆိုင်သော အဆိုကြမ်းဖြစ်သည်။    \/\/အပေါင်းကိန်းပြည့် n ကိုပေးထားလျှင် collatz အစဉ်အတိုင်း မကိန်းများပါဝင်သော စီစဉ်ထားသောစာရင်းကိုပြန်ပေးပါ။    \/\/ >>> getOddCollatz((5l))\n    \/\/ (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) : List[Long] = {\n","canonical_solution":"import scala.collection.mutable.ListBuffer\n\nobject Problem {\n  def getOddCollatz(n: Long): List[Long] = {\n    val oddNumbers = ListBuffer[Long]()\n    var number = n\n    while (number != 1) {\n      if (number % 2 == 1) {\n        oddNumbers += number\n      }\n      number = if (number % 2 == 0) number \/ 2 else 3 * number + 1\n    }\n    oddNumbers += 1\n    oddNumbers.sorted.toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong, 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_124","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/၄) ရက်စွဲကို mm-dd-yyyy ပုံစံဖြင့် ရေးရပါမည်။    \/\/(၃) လသည် ၁ လထက်မနည်း၍ ၁၂ လထက်မပိုရ။    \/\/၂ ရက်သည် ၁ ရက်ထက်နည်းသည်မဟုတ်၊ ၃၁ ရက်ထက်ပိုသည်မဟုတ်၊ ၁၊ ၃၊ ၅၊ ၇၊ ၈၊ ၁၀၊ ၁၂ ရက်များအတွက် ၁ ရက်ထက်နည်းသည်မဟုတ်၊ ၃၀ ရက်ထက်ပိုသည်မဟုတ်၊ ၄၊ ၆၊ ၉၊ ၁၁ ရက်များအတွက် ၁ ရက်ထက်နည်းသည်မဟုတ်၊ ၂၉ ရက်ထက်ပိုသည်မဟုတ်၊ ၂.    \/\/၁. နေ့စွဲ string ဟာ အလွတ်မဟုတ်ဘူး။    \/\/အောက်ပါ စည်းမျဉ်းများ အားလုံးကို လိုက်နာပါက နေ့စွဲသည် မှန်ကန်ပါသည်။    \/\/date သည် မှန်လျှင် မှန်သည်၊ မဟုတ်လျှင် မှားသည် ကိုပြန်ပေးသည်။    \/\/Date String ကို ခိုင်လုံအောင်လုပ်တဲ့ Function တစ်ခုကို ရေးရမယ်။    \/\/ >>> validDate((\"03-11-2000\"))\n    \/\/ (true)\n    \/\/ >>> validDate((\"15-01-2012\"))\n    \/\/ (false)\n    \/\/ >>> validDate((\"04-0-2040\"))\n    \/\/ (false)\n    \/\/ >>> validDate((\"06-04-2020\"))\n    \/\/ (true)\n    \/\/ >>> validDate((\"06\/04\/2020\"))\n    \/\/ (false)\n    def validDate(date : String) : Boolean = {\n","canonical_solution":"import scala.util.Try\n\nobject Problem {\n  def validDate(date: String): Boolean = {\n    if (date.isEmpty) return false\n    \n    val datePattern = \"\"\"^(\\d{2})-(\\d{2})-(\\d{4})$\"\"\".r\n\n    date match {\n      case datePattern(monthStr, dayStr, yearStr) => \n        (Try(monthStr.toInt).toOption, Try(dayStr.toInt).toOption) match {\n          case (Some(month), Some(day)) if month >= 1 && month <= 12 =>\n            month match {\n              case 1 | 3 | 5 | 7 | 8 | 10 | 12 => day >= 1 && day <= 31\n              case 4 | 6 | 9 | 11 => day >= 1 && day <= 30\n              case 2 => day >= 1 && day <= 29\n              case _ => false\n            }\n          case _ => false\n        }\n      case _ => false\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_125","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ     \/\/အက္ခရာ, အော်ဒါ (a) = 0, အော်ဒါ (b) = 1, ... အော်ဒါ (z) = 25     \/\/commas ',' ကိုခွဲသင့်တယ် commas မရှိရင် သင်ဟာ စာလုံးသေးသေးလေးတွေရဲ့ အရေအတွက်ကို ထဲမှာ တစ်မျိုးတစ်ဖုံစီစဉ်ပြီး ပြန်ပေးရမယ်။    \/\/စကားလုံးများ၏ string ကိုပေးထားသည်, စာသားမှာအဖြူကွက်များမရှိလျှင်, စာလုံးများကိုဖြူကွက်များဖြင့်ခွဲထားသောစာရင်းကိုပြန်ပို့ပါ     \/\/ >>> splitWords((\"Hello world!\"))\n    \/\/ List[String](\"Hello\", \"world!\")\n    \/\/ >>> splitWords((\"Hello,world!\"))\n    \/\/ List[String](\"Hello\", \"world!\")\n    \/\/ >>> splitWords((\"abcdef\"))\n    \/\/ 3l\n    def splitWords(txt : String) : Either[List[String], Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def splitWords(txt: String): Either[List[String], Long] = {\n    if (txt.contains(\" \")) {\n      Left(txt.split(\"\\\\s+\").toList)\n    } else if (txt.contains(\",\")) {\n      Left(txt.split(\",\").toList)\n    } else {\n      val oddOrderCount = txt.toCharArray\n        .count(c => ('a' to 'z').contains(c) && (c - 'a') % 2 == 0)\n      Right(oddOrderCount.toLong)\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"},{"task_id":"HumanEval_126","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ     \/\/number, return false ။ အနှုတ်ဂဏန်းမရှိဘဲ ကိန်းပြည့်တွေကိုသာ ယူပါ။    \/\/စာရင်းတွင် တူညီသော စာရင်းတစ်ခုထက် ပို၍ ရှိပါက    \/\/နံပါတ်များစာရင်းကို ပေးထားလျှင် ၎င်းတို့မှာ အမျိုးအစားခွဲထားသည်ဖြစ်စေ၊ မခွဲထားသည်ဖြစ်စေ ပြန်ပေးပါ။    \/\/ >>> isSorted((List[Long](5l.toLong)))\n    \/\/ (true)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n    \/\/ (true)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    \/\/ (false)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    \/\/ (true)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    \/\/ (true)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    \/\/ (false)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (true)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (false)\n    def isSorted(lst : List[Long]) : Boolean = {\n","canonical_solution":"def isSorted(lst: List[Long]): Boolean = {\n    if (lst.isEmpty || lst.length == 1) return true\n\n    var hasDuplicate = false\n\n    for (i <- 1 until lst.length) {\n        if (lst(i) < lst(i - 1)) {\n            return false\n        }\n        if (lst(i) == lst(i - 1)) {\n            if (hasDuplicate) return false\n            hasDuplicate = true\n        } else {\n            hasDuplicate = false\n        }\n    }\n\n    true\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) == (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_127","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/[အဝင်\/အထွက်] နမူနာများ:     \/\/အကယ်၍ ကြားကာလနှစ်ခု မဆုံမိရင် NO ကို ပြန်ပို့ပါ။    \/\/မဟုတ်ရင် \"NO\" ပြန်ပေးပါ။    \/\/အကယ်၍ လမ်းဆုံ၏ အလျားသည် ပရိုင်းမန်းကိန်းဖြစ်ပါက \"YES\" ကို ပြန်ပေးပါ။    \/\/၎င်းရဲ့ အရှည်က 1 ဖြစ်ပြီး ပုဂ္ဂိုလ်အရေအတွက် မဟုတ်ပါ။    \/\/ဥပမာ၊ ကြားကာလ (1, 3) (2, 4) ရဲ့ဖြတ်လမ်းက (2, 3) ပါ။    \/\/intervals က ပရမ်းမစ် ကိန်းဂဏန်းပါ။    \/\/ဒီနှစ်ခုရဲ့ ဆုံချက်အလျားက  နှစ်ခုလားဆိုတာ ခင်ဗျားရှာရပါမယ်။    \/\/ပေးထားတဲ့ ကြားကာလတိုင်းအတွက် ၎င်းရဲ့ အစဟာ အဆုံးထက် ပိုငယ်တာ (သို့) တူတယ်လို့ ယူဆရတယ်။    \/\/အစနဲ့ အဆုံး နှစ်ခုစလုံး ပါပါတယ်။    \/\/ပေးထားသော ကြားကာလများက ပိတ်ထားသည်၊ ဆိုလိုသည်မှာ ကြားကာလ (စတင်၊ အဆုံးသတ်) သည်    \/\/ဒီမှာ ကြားကာလတိုင်းက ကိန်းပြည့်စုံစုံပါ။ ဥပမာ ကြားကာလ = (စတင်၊ အဆုံး) = (1, 2)    \/\/ခင်ဗျားကို အချိန် ၂ ကြိမ်လောက် ပေးထားတယ်။    \/\/ >>> intersection(((1l, 2l)), ((2l, 3l)))\n    \/\/ (\"NO\")\n    \/\/ >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    \/\/ (\"NO\")\n    \/\/ >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    \/\/ (\"YES\")\n    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long, Long]) : String = {\n","canonical_solution":"import scala.math._\n\nobject Problem {\n  def isPrime(n: Long): Boolean = {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n      if (n % i == 0 || n % (i + 2) == 0) return false\n      i += 6\n    }\n    true\n  }\n\n  def intersection(interval1: (Long, Long), interval2: (Long, Long)): String = {\n    val start = max(interval1._1, interval2._1)\n    val end = min(interval1._2, interval2._2)\n    if (start > end) return \"NO\"\n\n    val length = end - start\n    if (isPrime(length)) \"YES\" else \"NO\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"},{"task_id":"HumanEval_128","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/မှတ်ချက်: empty arr အတွက် None ကိုပြန်ပို့သည်။    \/\/စာရင်းထဲက ကိန်းဂဏန်းတိုင်းကို ၁၊ -၁ သို့မဟုတ် ၀ နဲ့ ကိုယ်စားပြုတယ်။    \/\/ကိန်းပြည့်တွေရဲ့ မြှောက်လဒ်နဲ့ မြှောက်ထားတဲ့ ကိန်းပြည့်တွေရဲ့ မြှောက်လဒ်နဲ့ မြှောက်ထားတဲ့ ကိန်းပြည့်တွေရဲ့ မြှောက်လဒ်ပါ။    \/\/ခင်ဗျားကို ဖြောင့်ကိန်းတွေပါတဲ့ စာရင်းတစ်ခုပေးပြီး ပြန်ပေးရမယ်။    \/\/ >>> prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong)))\n    \/\/ Some(9l)\n    \/\/ >>> prodSigns((List[Long](0l.toLong, 1l.toLong)))\n    \/\/ Some(0l)\n    \/\/ >>> prodSigns((List[Long]()))\n    \/\/ None\n    def prodSigns(arr : List[Long]) : Option[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def prodSigns(arr: List[Long]): Option[Long] = {\n    if (arr.isEmpty) return None\n\n    val productOfSigns = arr.foldLeft(1l)((acc, num) => acc * sign(num))\n    val sumOfMagnitudes = arr.map(_.abs).sum\n\n    Some(sumOfMagnitudes * productOfSigns)\n  }\n\n  private def sign(num: Long): Long = {\n    if (num > 0) 1\n    else if (num < 0) -1\n    else 0\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong))).equals(Some(-9l)));\n    assert(prodSigns((List[Long](0l.toLong, 1l.toLong))).equals(Some(0l)));\n    assert(prodSigns((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, -1l.toLong, 1l.toLong))).equals(Some(-10l)));\n    assert(prodSigns((List[Long]())).equals(None));\n    assert(prodSigns((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -1l.toLong, 9l.toLong))).equals(Some(20l)));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, -1l.toLong, 1l.toLong))).equals(Some(4l)));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals(Some(-4l)));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(Some(0l)));\n    }\n\n}\n"},{"task_id":"HumanEval_129","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/အနည်းဆုံးလမ်းကြောင်းဖြတ်သွားတဲ့ ကွက်လပ်တွေပေါ်က တန်ဖိုးတွေရဲ့ အစီအစဉ်ချထားတဲ့ စာရင်းကို ပြန်ပေးတယ်။    \/\/အဖြေက ထူးခြားတယ်ဆိုတာ အာမခံတယ်     \/\/lst_A[j] = lst_B[j]။    \/\/lst_A[i] < lst_B[i] ဆိုပြီး j (1 <= j < i) အတွက် ကျွန်တော်တို့မှာ     \/\/lst_B ထက် ပိုများတယ်။ တစ်နည်းပြောရရင် integer index i ရှိတယ်။    \/\/lst_A နဲ့ lst_B လို့ ခေါ်ကြပါစို့၊ lst_A ကတော့ lexicographically less ပါ။    \/\/A နဲ့ B ကွက်တွေထဲမှာ တန်ဖိုးတွေကို စီစဉ်ပြီး စာရင်းလုပ်ထားတယ်။    \/\/လမ်းကြောင်း A (အလျား k) သည် လမ်းကြောင်း B (အလျား k) ထက် ပိုငယ်သည်ဟု ယူဆရလျှင်    \/\/သင်ဟာ ဂရိမှ အပြင်ကို ထွက်လို့မရဘူး။    \/\/အတိအကျကို မခွဲခြားနိုင်ပါဘူး။    \/\/k အရှည်ရှိတဲ့လမ်းကြောင်းက k ကွက်လပ်တွေကို အတိအကျ သွားဖို့ဆိုတာ သတိပြုပါ။    \/\/အခန်းငယ်လေးပါ    \/\/တနည်းပြောရရင် ခင်ဗျားတို့ရဲ့ လက်ရှိဆဲလ်နဲ့ ချိတ်ဆက်နေတဲ့ အနားကို သွားလို့ရတယ်    \/\/ဘယ်ဆဲလ်ကမဆို ချိတ်ဆက်လို့ရတယ်။ အဆင့်တိုင်းမှာ အိမ်နီးချင်းဆဲလ်တိုင်းကို ချိတ်ဆက်လို့ရတယ်။    \/\/K အလျားရဲ့ အနိမ့်ဆုံးလမ်းကြောင်းက ကွန်ရက်ထဲမှာ ရှိဖို့လိုတယ်။ စလို့ရပါပြီ။    \/\/အပါအဝင်ဟာ grid ရဲ့ ကွက်တွေထဲမှာ တစ်ကြိမ်ပဲ ပေါ်တယ်။    \/\/ဂရစ်ထဲက ကွက်လပ်တိုင်းမှာ တန်ဖိုးတစ်ခုပါတယ်။ [1, N * N] ကွက်လပ်ထဲက ကိန်းပြည့်တိုင်းပါ။    \/\/အတန်း N နဲ့ အတိုင် N (N >= 2) နဲ့ အပေါင်းကိန်းပြည့် k ရှိတဲ့ ဂရစ်တစ်ခုပေးရင်    \/\/ >>> minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong))), (3l))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 1l.toLong))\n    \/\/ >>> minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong), List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 2l.toLong))), (1l))\n    \/\/ (List[Long](1l.toLong))\n    def minPath(grid : List[List[Long]], k : Long) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def minPath(grid: List[List[Long]], k: Long): List[Long] = {\n    val n = grid.length\n    val directions = List((0, 1), (1, 0), (0, -1), (-1, 0))\n\n    def isValid(x: Int, y: Int): Boolean = x >= 0 && y >= 0 && x < n && y < n\n\n    def dfs(x: Int, y: Int, path: List[Long]): List[Long] = {\n      if (path.length == k) return path\n      var minPath: List[Long] = List.fill(k)(Long.MaxValue)\n      for ((dx, dy) <- directions) {\n        val nx = x + dx\n        val ny = y + dy\n        if (isValid(nx, ny)) {\n          val newPath = dfs(nx, ny, path :+ grid(nx)(ny))\n          if (lexCompare(newPath, minPath)) {\n            minPath = newPath\n          }\n        }\n      }\n      minPath\n    }\n\n    def lexCompare(a: List[Long], b: List[Long]): Boolean = {\n      a.zip(b).find { case (x, y) => x != y } match {\n        case Some((x, y)) => x < y\n        case None => false\n      }\n    }\n\n    var minPathOverall = List.fill(k)(Long.MaxValue)\n    for {\n      i <- 0 until n\n      j <- 0 until n\n    } {\n      val startingPath = List(grid(i)(j))\n      val currentPath = dfs(i, j, startingPath)\n      if (lexCompare(currentPath, minPathOverall)) {\n        minPathOverall = currentPath\n      }\n    }\n    minPathOverall\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong), List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong, 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong, 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong, 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong, 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong, 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong, 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong, 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong, 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong, 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong, 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong, 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong, 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong, 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong, 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong, 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong, 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_130","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/Tribonacci ရဲ့ ပထမ n + 1 ကိန်းစဉ်တွေပါ    \/\/N ကိုေပးလိုက္ပါတယ္၊ ဒီေတာ့ list ကို ျပန္ေပးရပါမယ္    \/\/= ၂ + ၃ + ၃ = ၈ ။    \/\/tri(3) = tri(2) + tri(1) + tri(4)    \/\/tri ((4) = ၃     \/\/tri ((2) = 1 + (2 \/ 2) = 2     \/\/ဥပမာ -    \/\/tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) ဖြစ်ပြီး n ကတော့ odd ဖြစ်ရင်ပေါ့။    \/\/tri (n) = 1 + n \/ 2၊ n က အချိုးအစားဆိုရင်။    \/\/tri(1) = ၃     \/\/Tribonacci အစဉ်ကို ထပ်ကျော့ခြင်းဖြင့် သတ်မှတ်သည်။    \/\/ဒါပေမယ့် လူတွေက Tribonacci ရဲ့ အစီအစဉ်ကို မသိကြသေးပါဘူး။    \/\/Fibonacci Sequence ကို လူတိုင်းသိပြီး ဒါကို ၁၉၇၀ က သင်္ချာပညာရှင်တွေ အလေးအနက် လေ့လာထားတာပါ။    \/\/ >>> tri((3l))\n    \/\/ (List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n","canonical_solution":"import scala.collection.mutable.ListBuffer\n\nobject Problem {\n  def tri(n: Long): List[Long] = {\n    \/\/ Initialize list with the first element of the Tribonacci sequence\n    val tribonacciSeq = ListBuffer[Long](3)\n\n    \/\/ Generate remaining elements up to the nth element\n    for (i <- 1L to n) {\n      if (i % 2 == 0) {\n        \/\/ If even, the formula is 1 + n \/ 2\n        tribonacciSeq.append(1 + i \/ 2)\n      } else {\n        \/\/ If odd, the formula is tri(n - 1) + tri(n - 2) + tri(n + 1)\n        \/\/ tri(n + 1) is handled as we iterate further\n        val tri_i_minus_1 = if (i - 1 >= 0) tribonacciSeq((i - 1).toInt) else 0\n        val tri_i_minus_2 = if (i - 2 >= 0) tribonacciSeq((i - 2).toInt) else 0\n        val tri_i_plus_1 = if (i + 1 <= n) 1 + (i + 1) \/ 2 else 0 \/\/ calculated as if the next is even\n        tribonacciSeq.append(tri_i_minus_1 + tri_i_minus_2 + tri_i_plus_1)\n      }\n    }\n\n    \/\/ Return as a list\n    tribonacciSeq.toList\n  }\n\n  \/\/ Test examples\n  def main(args: Array[String]): Unit = {\n    println(tri(3)) \/\/ List(3, 2, 8)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_131","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/အကယ်၍ ဂဏန်းအားလုံးသည် အချိုးညီပါက ၀ ကိုပြန်ပေးပါ။    \/\/အပေါင်းကိန်းပြည့် n ကိုပေးရင် ဂဏန်းတစ်လုံးချင်းရဲ့ မြောက်လဒ်ကို ပြန်ပေးပါ။    \/\/ >>> digits((1l))\n    \/\/ (1l)\n    \/\/ >>> digits((4l))\n    \/\/ (0l)\n    \/\/ >>> digits((235l))\n    \/\/ (15l)\n    def digits(n : Long) : Long = {\n","canonical_solution":"def digits(n: Long): Long = {\n    val product = n.toString.map(_.asDigit).filter(_ % 2 != 0).product\n    if (product == 1 && n.toString.forall(_.asDigit % 2 == 0)) 0L else product\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_132","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/အနည်းဆုံးတော့ နောက်ဆက်တွဲမှာ ကပ်ထားတဲ့ ကန့်လန့်ဖြတ်တစ်ခုရှိတယ်။    \/\/တကယ်လို့ bracket တွေရဲ့ နောက်ဆက်တွဲမှန်တယ်ဆိုရင် function က true ပြန်ပေးတယ်။    \/\/ညာဘက်အကန့်အသတ်များသာပါဝင်သော input အဖြစ် string ကိုယူသော function တစ်ခုကိုဖန်တီးပါ။    \/\/ >>> isNested((\"[[]]\"))\n    \/\/ (true)\n    \/\/ >>> isNested((\"[]]]]]]][[[[[]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[][]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[[][]]\"))\n    \/\/ (true)\n    \/\/ >>> isNested((\"[[]][[\"))\n    \/\/ (true)\n    def isNested(string : String) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def isNested(string: String): Boolean = {\n    var stack = new Stack[Char]()\n    var nested = false\n\n    for (char <- string) {\n      char match {\n        case '[' => stack.push(char)\n        case ']' =>\n          if (stack.nonEmpty) {\n            stack.pop()\n            if (stack.nonEmpty) {\n              nested = true\n            }\n          }\n      }\n      if (nested) return true\n    }\n\n    false\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_133","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/list ထဲက element ေတြကို အေပၚဆံုး int ((ceiling) ထိ ေဝမွ်ေပးလိုက္ပါ။    \/\/ပေးထားတဲ့ စာရင်းထဲက ကိန်းတွေရဲ့ နှစ်ထပ်ကိန်းပေါင်းလဒ်ကို ပေးဖို့လိုပါတယ်။    \/\/ခင်ဗျားကို နံပါတ်တွေပေးထားတယ်လေ။    \/\/ >>> lst((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat)))\n    \/\/ (14l)\n    \/\/ >>> lst((List[Float](1.0f.toFloat, 4.0f.toFloat, 9.0f.toFloat)))\n    \/\/ (98l)\n    \/\/ >>> lst((List[Float](1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat)))\n    \/\/ (84l)\n    \/\/ >>> lst((List[Float](1.4f.toFloat, 4.2f.toFloat, 0.0f.toFloat)))\n    \/\/ (29l)\n    \/\/ >>> lst((List[Float](-2.4f.toFloat, 1.0f.toFloat, 1.0f.toFloat)))\n    \/\/ (6l)\n    def sumSquares(lst : List[Float]) : Long = {\n","canonical_solution":"import scala.math._\n\nobject Problem {\n  def sumSquares(lst: List[Float]): Long = {\n    lst.map(x => ceil(x.toDouble).toLong)\n      .map(x => x * x)\n      .sum\n  }\n\n  \/\/ Example usage, you can test the function with the given examples:\n  def main(args: Array[String]): Unit = {\n    println(sumSquares(List(1.0f, 2.0f, 3.0f))) \/\/ Output: 14\n    println(sumSquares(List(1.0f, 4.0f, 9.0f))) \/\/ Output: 98\n    println(sumSquares(List(1.0f, 3.0f, 5.0f, 7.0f))) \/\/ Output: 84\n    println(sumSquares(List(1.4f, 4.2f, 0.0f))) \/\/ Output: 29\n    println(sumSquares(List(-2.4f, 1.0f, 1.0f))) \/\/ Output: 6\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat))) == (84l));\n    assert(sumSquares((List[Float](1.4f.toFloat, 4.2f.toFloat, 0.0f.toFloat))) == (29l));\n    assert(sumSquares((List[Float](-2.4f.toFloat, 1.0f.toFloat, 1.0f.toFloat))) == (6l));\n    assert(sumSquares((List[Float](100.0f.toFloat, 1.0f.toFloat, 15.0f.toFloat, 2.0f.toFloat))) == (10230l));\n    assert(sumSquares((List[Float](10000.0f.toFloat, 10000.0f.toFloat))) == (200000000l));\n    assert(sumSquares((List[Float](-1.4f.toFloat, 4.6f.toFloat, 6.3f.toFloat))) == (75l));\n    assert(sumSquares((List[Float](-1.4f.toFloat, 17.9f.toFloat, 18.9f.toFloat, 19.9f.toFloat))) == (1086l));\n    assert(sumSquares((List[Float](0.0f.toFloat))) == (0l));\n    assert(sumSquares((List[Float](-1.0f.toFloat))) == (1l));\n    assert(sumSquares((List[Float](-1.0f.toFloat, 1.0f.toFloat, 0.0f.toFloat))) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_134","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/မှတ်ချက်: \"word\" သည် စာလုံးစုတစ်စုဖြစ်ပြီး စာလုံးစုများကို နေရာလပ်ဖြင့် ခွဲခြားထားသည်။    \/\/စကားလုံးတစ်လုံးရဲ့ အပိုင်းဖြစ်ပြီး မမှန်ရင် မှားတယ်။    \/\/string ရဲ့ အက္ခရာစဉ် character တစ်ခုဖြစ်ပြီး  မဟုတ်ဘူး။    \/\/နောက်ဆုံး စာလုံးက ဆိုရင် true ပြန်ပေးတဲ့ လုပ်ဆောင်ချက်ကို ဖန်တီးပါ။    \/\/ >>> checkIfLastCharIsALetter((\"apple pie\"))\n    \/\/ (false)\n    \/\/ >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    \/\/ (true)\n    \/\/ >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    \/\/ (false)\n    \/\/ >>> checkIfLastCharIsALetter((\"\"))\n    \/\/ (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def checkIfLastCharIsALetter(txt: String): Boolean = {\n        if (txt.isEmpty) return false\n        val trimmed = txt.trim\n        if (trimmed.isEmpty) return false\n        val parts = trimmed.split(\" \")\n        val lastChars = parts.map(_.last)\n        if (lastChars.isEmpty) return false\n        val lastChar = trimmed.last\n        lastChars.contains(lastChar) && lastChar.isLetter\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_135","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/တန်ဖိုးများ ထပ်တူကျခြင်း။    \/\/ထိုကဲ့သို့သော element မရှိလျှင် -1 ပြန်ပေးပါ။ ပေးထားသောစာရင်းတွင်  မရှိပါလိမ့်မည်။    \/\/၎င်းရဲ့ ရှေ့မှာရှိတဲ့ အစိတ်အပိုင်းထက် မကြီး ဒါမှမဟုတ် တူညီတာမဟုတ်ဘူး။    \/\/ြပည်သူ့ေတွရဲ့ အကြီးဆုံး index ကိုပြန်ပေးမယ့် function ကိုဖန်တီးပါ။    \/\/ >>> canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    \/\/ (3l)\n    \/\/ >>> canArrange((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (-1l)\n    def canArrange(arr : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n  def canArrange(arr: List[Long]): Long = {\n    for (i <- arr.indices.drop(1)) {\n      if (arr(i) < arr(i - 1)) return i.toLong\n    }\n    -1L\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_136","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/အနှုတ် သို့မဟုတ် အပေါင်းကိန်းပြည့်မရှိလျှင် None ဟုပြန်ပို့ပါ။    \/\/အပေါင်းကိန်းပြည့်တွေရဲ့ စာရင်းတစ်ခုထဲမှာပါ။    \/\/\"b\" က အေသးဆံုးျဖစ္ၿပီး    \/\/'a' သည်  ဖြစ်သော tuple (a, b) ကို ပြန်ပေးသော function တစ်ခုကို ဖန်တီးပါ။    \/\/ >>> largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    \/\/ (Some(None), Some(1l))\n    \/\/ >>> largestSmallestIntegers((List[Long]()))\n    \/\/ (Some(None), Some(None))\n    \/\/ >>> largestSmallestIntegers((List[Long](0l.toLong)))\n    \/\/ (Some(None), Some(None))\n    def largestSmallestIntegers(lst : List[Long]) : Tuple2[Option[Long], Option[Long]] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def largestSmallestIntegers(lst: List[Long]): Tuple2[Option[Long], Option[Long]] = {\n    val negativeIntegers = lst.filter(_ < 0)\n    val positiveIntegers = lst.filter(_ > 0)\n\n    val largestNegative = if (negativeIntegers.nonEmpty) Some(negativeIntegers.max) else None\n    val smallestPositive = if (positiveIntegers.nonEmpty) Some(positiveIntegers.min) else None\n\n    (largestNegative, smallestPositive)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong, 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l, 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None), Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong, -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    }\n\n}\n"},{"task_id":"HumanEval_138","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ။    \/\/ပေးထားတဲ့ ကိန်း n ကို အပေါင်းကိန်း ၄ လုံးရဲ့ ပေါင်းလဒ်အဖြစ် ရေးနိုင်လားဆိုတာတွက်ချက်ပါ။    \/\/ >>> isEqualToSumEven((4l))\n    \/\/ (false)\n    \/\/ >>> isEqualToSumEven((6l))\n    \/\/ (false)\n    \/\/ >>> isEqualToSumEven((8l))\n    \/\/ (true)\n    def isEqualToSumEven(n : Long) : Boolean = {\n","canonical_solution":"def isEqualToSumEven(n: Long): Boolean = {\n    \/\/ Explanation: A number is the sum of 4 positive even numbers if it is at least 8 and even.\n    n >= 8 && n % 2 == 0\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_139","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/အဲဒီမှာ n > 0     \/\/brazilian_factorial (n) = n! * (n-1)! * (n-2)! * ... * 1!     \/\/ဘရာဇီး factorial ကို အောက်ပါအတိုင်း သတ်မှတ်ပါတယ်။    \/\/ >>> specialFactorial((4l))\n    \/\/ (288l)\n    \/\/ The function will receive an integer as input and should return the special\n    \/\/ factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n","canonical_solution":"def specialFactorial(n: Long): Long = {\n        def factorial(x: Long): Long = {\n            if (x == 0 || x == 1) 1L\n            else x * factorial(x - 1)\n        }\n\n        (1L to n).map(factorial).product\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_140","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ပြီးရင် အဆက်အသွယ်ရှိတဲ့ စာလုံးတွေကို -  နဲ့ အစားထိုးလိုက်ပါ    \/\/string မှာ space နှစ်ခုထက်ပိုပြီးရှိရင်    \/\/စာသားတန်းတစ်ခုကိုပေးပြီး ၎င်းထဲက နေရာလွတ်အားလုံးကို အောက်ခြေဖြတ် သင်္ကေတတွေနဲ့ အစားထိုးလိုက်ပါ။    \/\/ >>> fixSpaces((\" Example\"))\n    \/\/ (\"Example\")\n    \/\/ >>> fixSpaces((\" Example 1\"))\n    \/\/ (\"Example_1\")\n    \/\/ >>> fixSpaces((\" Example 2\"))\n    \/\/ (\"_Example_2\")\n    \/\/ >>> fixSpaces((\" Example 3\"))\n    \/\/ (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def fixSpaces(text: String): String = {\n    val result = new StringBuilder()\n    var spaceCount = 0\n    var leadingSpace = true\n    \n    for (ch <- text) {\n      if (ch == ' ') {\n        spaceCount += 1\n      } else {\n        if (spaceCount > 0) {\n          if (leadingSpace && result.isEmpty) {\n            result.append('_')\n          } else if (spaceCount == 1) {\n            result.append('_')\n          } else if (spaceCount > 1) {\n            result.append('-')\n          }\n          spaceCount = 0\n        }\n        result.append(ch)\n        leadingSpace = false\n      }\n    }\n    \n    if (spaceCount == 1) {\n      result.append('_')\n    } else if (spaceCount > 1) {\n      result.append('-')\n    }\n    \n    result.toString()\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"},{"task_id":"HumanEval_141","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/- ဒီကွန်ကရစ်နောက်က အောက်ခြေကြိုးက အောက်ပါထဲက တစ်ခုဖြစ်သင့်တယ်။    \/\/လက်တင်အက္ခရာအက္ခရာများ (a-z နှင့် A-Z) ။    \/\/- ဒီစက္ဝိုင္းရဲ႕ေရွ႕မွာရွိတဲ့စက္ဝိုင္းဟာ အပိုင္းမဲ့မေနသင့္ပါဘူး ဒါ့အျပင္ ဆိုတဲ့စာလုံးနဲ႔စတယ္    \/\/- ဖိုင်နာမည်မှာ အမှတ်တစ်ခုတည်းပဲ ရှိပါတယ် '.'    \/\/- ဖိုင်အမည်တွင် ဂဏန်းသုံးလုံးထက်ပို၍ မပါရှိသင့် (\"0\" - \"9\") ။    \/\/ြ ္း ေြပာြပီး    \/\/အောက်ပါ အခြေအနေများအားလုံး ပြည့်စုံပါက ဖိုင်အမည်ကိုသာ ခိုင်လုံသည်ဟု ယူဆရသည်။    \/\/\"Yes\" ကိုဖိုင်နာမည်မှန်လျှင်ပြန်ပေးသည် \"No\" ကိုပြန်ပေးသည်    \/\/ဖိုင်နာမည်ကို ကိုယ်စားပြုတဲ့ string ကိုယူပြီး  ပြန်ပေးတဲ့ function ကိုဖန်တီးပါ။    \/\/ >>> fileNameCheck((\"example.txt\"))\n    \/\/ (\"Yes\")\n    \/\/ >>> fileNameCheck((\"1example.dll\"))\n    \/\/ (\"No\")\n    def fileNameCheck(file_name : String) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def fileNameCheck(file_name: String): String = {\n    val validExtensions = Set(\"txt\", \"exe\", \"dll\")\n    val dotIndex = file_name.lastIndexOf('.')\n\n    if (dotIndex == -1) return \"No\"\n\n    val beforeDot = file_name.substring(0, dotIndex)\n    val afterDot = file_name.substring(dotIndex + 1)\n\n    if (beforeDot.isEmpty || !beforeDot.head.isLetter) return \"No\"\n\n    val digitCount = beforeDot.count(_.isDigit)\n    if (digitCount > 3) return \"No\"\n\n    if (!validExtensions.contains(afterDot)) return \"No\"\n\n    \"Yes\"\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(fileNameCheck(\"example.txt\")) \/\/ \"Yes\"\n    println(fileNameCheck(\"1example.dll\")) \/\/ \"No\"\n    println(fileNameCheck(\"test123.exe\")) \/\/ \"Yes\"\n    println(fileNameCheck(\".hidden.txt\")) \/\/ \"No\"\n    println(fileNameCheck(\"file..txt\")) \/\/ \"No\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\/this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"},{"task_id":"HumanEval_142","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/list ထဲက entries ေတြကို change လုပ္လိုက္ပါ index က 3 နဲ႔ 4 ရဲ႕ multiple မဟုတ္ရင္ function က entries ေတြရဲ႕ sum ကို ျပန္ေပးရပါမယ္။    \/\/3 ရဲ့ မြှောက်ကိန်းဖြစ်ပြီး ၎င်းရဲ့ညွှန်းကိန်းက 4 ရဲ့ မြှောက်ကိန်းမဟုတ်ဘဲ 3 ရဲ့ မြှောက်ကိန်းသာဆိုရင် ကိန်းပြည့်ကို မြှောက်ကိန်းဖြစ်လိမ့်မယ်။    \/\/ဤလုပ်ဆောင်ချက်သည် ကိန်းပြည့်များစာရင်းကို ယူလိမ့်မည်။ စာရင်းရှိ entry အားလုံးအတွက် လုပ်ဆောင်ချက်သည် ၎င်း၏ index သည် a  ဖြစ်ပါက integer entry ကို နှစ်ထပ်တင်ရမည်။    \/\/\" လို့ မေးတယ်။    \/\/ >>> lst\n    \/\/ List[Long](1l.toLong, 2l.toLong, 3l.toLong)\n    \/\/ >>> lst\n    \/\/ List[Long]()\n    \/\/ >>> lst\n    \/\/ List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n    def sumSquares(lst : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def sumSquares(lst: List[Long]): Long = {\n        lst.zipWithIndex.map { case (value, index) =>\n            if (index % 3 == 0) {\n                value * value\n            } else if (index % 4 == 0) {\n                value * value * value\n            } else {\n                value\n            }\n        }.sum\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"},{"task_id":"HumanEval_143","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ ၁။    \/\/string အသစ်ထဲက စကားလုံးတွေရဲ့ အစီအစဉ်ဟာ မူလထဲက စကားလုံးတွေနဲ့ အတူတူပဲ ဖြစ်ရပါမယ်။    \/\/အရှည်က ဂဏန်းစု prime prime တွေပါ    \/\/ၿပီးေတာ့ မူလအပိုင္းက စာလံုးေတြကို ပါဝင္တဲ့ string ကို ျပန္ေပးရပါမယ္။    \/\/စကားလုံးတစ်ချို့ကို စာခြားနားချက်နဲ့ ခြားထားတယ်။    \/\/ခင်ဗျားကို ဝါကျတစ်ခုနဲ့ ကိုယ်စားပြုတဲ့ ကြိုးတစ်ချောင်းပေးတယ်။    \/\/ >>> wordsInSentence((\"This is a test\"))\n    \/\/ (\"is\")\n    \/\/ Example 2:\n    \/\/ >>> wordsInSentence((\"lets go for swimming\"))\n    \/\/ (\"go for\")\n    \/\/ Constraints:\n    \/\/ * 1 <= len(sentence) <= 100\n    \/\/ * sentence contains only letters\n    def wordsInSentence(sentence : String) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else if (n == 2) true\n    else !(2 to sqrt(n).toInt).exists(n % _ == 0)\n  }\n\n  def wordsInSentence(sentence: String): String = {\n    val words = sentence.split(\" \")\n    val primeLengthWords = words.filter(word => isPrime(word.length))\n    primeLengthWords.mkString(\" \")\n  }\n  \n  \/\/ Example usage:\n  \/\/ println(wordsInSentence(\"This is a test\"))\n  \/\/ println(wordsInSentence(\"lets go for swimming\"))\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"},{"task_id":"HumanEval_144","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/X, N ကိုေခၚလို႔ရတယ္ဆိုရင္ေတာ့    \/\/<numerator>\/<denominator> မှာတော့ အပေါင်းကိန်းပြည့်တွေအဖြစ် အပေါင်းကိန်းနဲ့ အပေါင်းကိန်းပြည့်တွေအဖြစ် အပေါင်းကိန်းပြည့်တွေအဖြစ် အပေါင်းကိန်းပြည့်တွေအဖြစ် အပေါင်းကိန်းပြည့်တွေအဖြစ် အပေါင်းကိန်းပြည့်တွေအဖြစ် အပေါင်းကိန်းပြည့်တွေအဖြစ် အပေါင်းကိန်းပြည့်တွေအဖြစ် အပေါင်းကိန်းပြည့်တွေအဖြစ် အပေါင်းကိန်းပြည့်တွေအဖြစ်    \/\/x နဲ့ n နှစ်ခုစလုံးဟာ အပိုင်းအစရဲ့ ကြိုးအမှတ်အသားဖြစ်ပြီး အောက်ပါပုံစံကို ဆောင်တယ်။    \/\/x * n သည် ကိန်းပြည့်ဖြစ်လျှင် function သည် true ကိုပြန်ပေးပြီး false     \/\/သင်လုပ်ရမှာက ဖော်ပြချက်ကို ရိုးရှင်းစေမယ့် လုပ်ဆောင်ချက်ကို ထည့်သွင်းဖို့ပါ။    \/\/ >>> simplify((\"1\/5\"), (\"5\/1\"))\n    \/\/ (true)\n    \/\/ >>> simplify((\"1\/6\"), (\"2\/1\"))\n    \/\/ (false)\n    \/\/ >>> simplify((\"7\/10\"), (\"10\/2\"))\n    \/\/ (false)\n    def simplify(x : String, n : String) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def simplify(x: String, n: String): Boolean = {\n    def parseFraction(fraction: String): (Int, Int) = {\n      val parts = fraction.split(\"\/\")\n      (parts(0).toInt, parts(1).toInt)\n    }\n\n    val (numX, denX) = parseFraction(x)\n    val (numN, denN) = parseFraction(n)\n\n    val multipliedNumerator = numX * numN\n    val multipliedDenominator = denX * denN\n\n    multipliedNumerator % multipliedDenominator == 0\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    assert(simplify((\"1\/6\"), (\"2\/1\")) == (false));\n    assert(simplify((\"5\/1\"), (\"3\/1\")) == (true));\n    assert(simplify((\"7\/10\"), (\"10\/2\")) == (false));\n    assert(simplify((\"2\/10\"), (\"50\/10\")) == (true));\n    assert(simplify((\"7\/2\"), (\"4\/2\")) == (true));\n    assert(simplify((\"11\/6\"), (\"6\/1\")) == (true));\n    assert(simplify((\"2\/3\"), (\"5\/2\")) == (false));\n    assert(simplify((\"5\/2\"), (\"3\/5\")) == (false));\n    assert(simplify((\"2\/4\"), (\"8\/4\")) == (true));\n    assert(simplify((\"2\/4\"), (\"4\/2\")) == (true));\n    assert(simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    assert(simplify((\"1\/5\"), (\"1\/5\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_145","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/မူရင်းစာရင်းထဲက index ကို အခြေခံပြီး စီစဉ်ပေးပါ။    \/\/မှတ်ချက်: အက္ခရာပေါင်းတူသော စာရင်းအင်းများစွာရှိလျှင်     \/\/အထက်ပါ ဂဏန်းများ စုစုပေါင်းလိုက်လျှင် အပေါ်သို့ တက်သွားသော အစီအစဉ်ဖြင့် ရေးသားရပါမည်။    \/\/ပေးထားတဲ့ ကိန်းပြည့်စာရင်းကို စီစဉ်ပေးတဲ့ function တစ်ခုရေးပါ    \/\/ >>> orderByPoints((List[Long](1l.toLong, 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong)))\n    \/\/ (List[Long](-1l.toLong, -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))\n    \/\/ >>> orderByPoints((List[Long]()))\n    \/\/ (List[Long]())\n    def orderByPoints(nums : List[Long]) : List[Long] = {\n","canonical_solution":"def orderByPoints(nums: List[Long]): List[Long] = {\n    def digitSum(n: Long): Int = n.abs.toString.map(_.asDigit).sum\n    \n    nums.zipWithIndex\n      .sortBy { case (num, index) => (digitSum(num), index) }\n      .map(_._1)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong, 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong, -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong, 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong, 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong, 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong, -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong, -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong, 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong, 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong, -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_146","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/ကိန်းဂဏန်းတစ်လုံးရဲ့ ပထမနဲ့ နောက်ဆုံး အက္ခရာတွေဟာ တစ်ထပ်တည်းဖြစ်ပါတယ် (၁၊ ၃၊ ၅၊ ၇၊ ၉)    \/\/list ထဲက element ေတြရဲ့ အရေအတွက်ဟာ ၁၀ ထက္ပိုၿပီး ႏွစ္ခုစလံုး ရွိတယ္    \/\/input နဲ့ return အဖြစ် နံပါတ်စာရင်းကိုယူတဲ့ function ကိုရေးပါ    \/\/ >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n    \/\/ (1l)\n    \/\/ >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    \/\/ (2l)\n    def specialFilter(nums : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def specialFilter(nums: List[Long]): Long = {\n    def isOddDigit(c: Char): Boolean = c == '1' || c == '3' || c == '5' || c == '7' || c == '9'\n    \n    nums.count { num =>\n      val absNumStr = num.abs.toString\n      val firstDigit = absNumStr.head\n      val lastDigit = absNumStr.last\n      \n      num > 10 && isOddDigit(firstDigit) && isOddDigit(lastDigit)\n    }.toLong\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(specialFilter(List(15L, -73L, 14L, -15L))) \/\/ Output: 1\n    println(specialFilter(List(33L, -2L, -3L, 45L, 21L, 109L))) \/\/ Output: 2\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_147","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/a[i] + a[j] + a[k] က ၃ ရဲ႕ အၾကိမ္ျဖစ္တယ္    \/\/i < j < k,  ရှိသည့် a ၏ သုံးထပ်ကိန်း (a[i], a[j], a[k]) အရေအတွက်ကို ပြန်ပေးသည်။    \/\/i တစ်ခုစီအတွက် (1 ≤ i ≤ n) a[i] = i * i - i + 1 ၏တန်ဖိုး။    \/\/ခင်ဗျားကို အပေါင်းကိန်းပြည့် n ပေးထားတယ်။ ခင်ဗျားက အရှည် n ရှိတဲ့ a ဆိုတဲ့ကိန်းပြည့်စာရင်းကို လုပ်ဖို့လိုတယ်။    \/\/ >>> getMaxTriples((5l))\n    \/\/ (1l)\n    \/\/ Explanation: \n    \/\/ a = [1, 3, 7, 13, 21]\n    \/\/ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long = {\n","canonical_solution":"def getMaxTriples(n: Long): Long = {\n    val a = (1L to n).map(i => i * i - i + 1).toList\n    var count = 0L\n\n    for {\n      i <- 0L until n\n      j <- i + 1 until n\n      k <- j + 1 until n\n    } {\n      if ((a(i.toInt) + a(j.toInt) + a(k.toInt)) % 3 == 0) {\n        count += 1\n      }\n    }\n\n    count\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"},{"task_id":"HumanEval_148","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ     \/\/ဂြိုဟ်တွေရဲ့ အမည်တွေ မှားနေလို့ပါ။    \/\/အလုပ်သည် plan1 သို့မဟုတ် plan2 ဖြစ်လျှင် ဗလာကျင်းတစ်စုကို ပြန်ရသင့်သည်။    \/\/နေနဲ့ နီးစပ်မှုပါ။    \/\/ဂြိုဟ် (၁) နဲ့ (၂) ရဲ့ ပတ်လမ်းကြားမှာ တည်ရှိပြီး     \/\/ာစ်တာဟာ ဂြိုဟ်ပတ်လမ်းများ ာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာာ    \/\/ဂြိုဟ်နာမည်နှစ်ခုကို ဂြိုဟ်1 နဲ့ ဂြိုဟ်2 ဆိုတဲ့ string တွေအဖြစ်ယူတဲ့ function တစ်ခုရေးပါ။    \/\/ဥရေနယ်၊ နက်ထွန်း။    \/\/ဗုဒ္ဓဟူးက နောက်တစ်လုံး ဗုဒ္ဓဟူးက နောက်တစ်ခု ကမ္ဘာမြေ၊ အင်္ဂါဂြိုဟ်၊ ကြယ်စင်၊ စနေဂြိုဟ်၊    \/\/နေအဖွဲ့အစည်းမှာ ဂြိုဟ်ရှစ်လုံးရှိတယ်- နေနဲ့ အနီးဆုံးက ဂြိုဟ်တွေပါ။    \/\/ >>> bf((\"Jupiter\"), (\"Neptune\"))\n    \/\/ (List[String](\"Saturn\", \"Uranus\"))\n    \/\/ >>> bf((\"Earth\"), (\"Mercury\"))\n    \/\/ (List[String](\"Venus\"))\n    \/\/ >>> bf((\"Mercury\"), (\"Uranus\"))\n    \/\/ (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def bf(planet1: String, planet2: String): List[String] = {\n    val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    \/\/ Find the indices of the given planets\n    val index1Opt = planets.indexOf(planet1)\n    val index2Opt = planets.indexOf(planet2)\n    \n    \/\/ If either planet is not found, return an empty list\n    if (index1Opt == -1 || index2Opt == -1) {\n      return List.empty\n    }\n    \n    \/\/ Sort indices to ensure proper traversal direction\n    val (startIndex, endIndex) = if (index1Opt < index2Opt) (index1Opt, index2Opt) else (index2Opt, index1Opt)\n    \n    \/\/ Get the planets between the indices\n    planets.slice(startIndex + 1, endIndex)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"},{"task_id":"HumanEval_149","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/စကားလုံးအားလုံးဟာ တူညီတဲ့ အရှည်ရှိတယ်လို့ ယူဆနိုင်ပါတယ်။    \/\/ထို function သည် string များ၏ list ကို sorted order ဖြင့်ပြန်ပေးရပါမည်။    \/\/စကားလုံး နှစ်လုံးဟာ အလျားတူရင် စာရင်းကို အက္ခရာစဉ်အတိုင်း စီစဉ်ပါ။    \/\/ဒီစည်းမျဉ်းနဲ့အညီ စာရင်းကို ပြန်ပို့သင့်တယ်။    \/\/စာရင်းရဲ့ အစီအစဉ်ဟာ စကားလုံးတိုင်းရဲ့ အရှည်အလျားကို လိုက်ပြီး မြင့်တက်သွားသင့်တယ်။    \/\/၎င်းတွင် နှစ်ထပ်ကွမ်းစာများ ပါဝင်နိုင်သည်။    \/\/List က string တွေရဲ့ list တစ်ခုပဲဖြစ်တယ်။ list က နံပါတ်တွေပါတဲ့ list တစ်ခုမဟုတ်ဘူး။    \/\/ၿပီးရင္ result list ကို sorted order နဲ႔ ျပန္ေပးလိုက္ပါတယ္    \/\/၎င်းက မကိန်းကိန်းရှိတဲ့ ကြိုးတွေကို ဖျက်ပစ်တယ်။    \/\/String တွေရဲ့ စာရင်းကို Parameter အဖြစ် လက်ခံတဲ့ Function တစ်ခုရေးပါ    \/\/ >>> listSort((List[String](\"aa\", \"a\", \"aaa\")))\n    \/\/ (List[String](\"aa\"))\n    \/\/ >>> listSort((List[String](\"ab\", \"a\", \"aaa\", \"cd\")))\n    \/\/ (List[String](\"ab\", \"cd\"))\n    def sortedListSum(lst : List[String]) : List[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def listSort(lst: List[String]): List[String] = {\n        lst.filter(_.length % 2 == 0)\n           .sorted\n           .sortBy(_.length)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\", \"bbbb\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_150","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/prime number တစ်ခုဖြစ်ပြီး y ရဲ့တန်ဖိုးကိုပြန်ပေးရပါမယ်။    \/\/N သည်  ဆိုလျှင် x ၏ တန်ဖိုးကို ပြန်ပေးရမည့် ရိုးရှင်းသော ပရိုဂရမ်။    \/\/ >>> xOrY((7l), (34l), (12l))\n    \/\/ (34l)\n    \/\/ >>> xOrY((15l), (8l), (5l))\n    \/\/ (5l)\n    def xOrY(n : Long, x : Long, y : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \n  def isPrime(num: Long): Boolean = {\n    if (num <= 1) return false\n    if (num <= 3) return true\n    if (num % 2 == 0 || num % 3 == 0) return false\n    var i = 5\n    while (i * i <= num) {\n      if (num % i == 0 || num % (i + 2) == 0) return false\n      i += 6\n    }\n    true\n  }\n\n  def xOrY(n: Long, x: Long, y: Long): Long = {\n    if (isPrime(n)) x else y\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(xOrY((7l), (34l), (12l)) == (34l));\n    assert(xOrY((15l), (8l), (5l)) == (5l));\n    assert(xOrY((3l), (33l), (5212l)) == (33l));\n    assert(xOrY((1259l), (3l), (52l)) == (3l));\n    assert(xOrY((7919l), (-1l), (12l)) == (-1l));\n    assert(xOrY((3609l), (1245l), (583l)) == (583l));\n    assert(xOrY((91l), (56l), (129l)) == (129l));\n    assert(xOrY((6l), (34l), (1234l)) == (1234l));\n    assert(xOrY((1l), (2l), (0l)) == (0l));\n    assert(xOrY((2l), (2l), (0l)) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_151","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/မကိန်းတွေ မဟုတ်တဲ့ ကိန်းတွေကို မကြည့်ပါနဲ့။    \/\/ကိန်းဂဏန်းများစာရင်းကို ပေးပြီးလျှင် ကိန်းဂဏန်းများ၏ နှစ်ထပ်ကိန်းပေါင်းကို ပြန်ပေးပါ    \/\/ >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong, 0l.toLong)))\n    \/\/ (10l)\n    \/\/ >>> doubleTheDifference((List[Float](-1l.toLong, -2l.toLong, 0l.toLong)))\n    \/\/ (0l)\n    \/\/ >>> doubleTheDifference((List[Float](9l.toLong, -2l.toLong)))\n    \/\/ (81l)\n    \/\/ >>> doubleTheDifference((List[Float](0l.toLong)))\n    \/\/ (0l)\n    \/\/ If the input list is empty, return 0.\n    def doubleTheDifference(lst : List[Float]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def doubleTheDifference(lst: List[Float]): Long = {\n    lst.filter(x => x > 0 && x.isValidLong && x.toLong % 2 != 0)\n      .map(x => x.toLong * x.toLong)\n      .sum\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat, -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat, -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat, 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat, -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"},{"task_id":"HumanEval_152","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/တန်ဖိုးက ၀ ဖြစ်ပြီး မဟုတ်ရင် ခန့်မှန်းမှုနဲ့ အမှတ်ကြားက ပကတိ ကွာခြားချက်ပါ။    \/\/တူညီတဲ့ အရှည်နဲ့ စာရင်းတစ်ခု ပြန်ပေးတယ်၊ မှန်းဆချက်တစ်ခုစီရဲ့ အဝေးကို ဖော်ပြတာပါ။ သူတို့ မှန်ကန်စွာ မှန်းဆရင်    \/\/အမှတ်တွေနဲ့ ခန့်မှန်းချက်တွေရဲ့ စာရင်းနှစ်ခုကို ပေးထားတယ်။ တူညီတဲ့ အရှည်နဲ့ပါ၊ ညွှန်ပြကိန်းတစ်ခုစီက တူညီတာကို ပြပါတယ်။    \/\/သင့်အလုပ်က လူတစ်ယောက်ဟာ ပြိုင်ပွဲတစ်ခုရဲ့ ရလဒ်တွေကို မှန်ကန်စွာ မှန်းဆခဲ့လားဆိုတာ ဆုံးဖြတ်ဖို့ပါ။    \/\/မှတ်သားဖို့နဲ့ နှိုင်းယှဉ်ဖို့ လုံးဝ ထိုက်တန်ပါတယ်။    \/\/ဒီဖြစ်ရပ်ဟာ နောက်ဆုံးမှာ သင်သိသွားတာပါ။ အဲဒီအခိုက်မှာ သင့်မှာရှိတဲ့ ခံစားချက်တွေ၊ အတွေးတွေဟာ    \/\/ကျွန်တော်တို့အားလုံး အဲဒီခံစားချက်ကို မှတ်မိနေမယ် ထင်ပါတယ်၊ မျှော်လင့်ထားခဲ့ကြတဲ့ အရာတစ်ခုခု ဖြစ်လာမယ့် အချိန်ကာလမျိုး ရောက်လာရင်ပေါ့လေ။    \/\/ >>> compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    \/\/ (List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    \/\/ >>> compare((List[Long](0l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    \/\/ (List[Long](4l.toLong, 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def compare(game: List[Long], guess: List[Long]): List[Long] = {\n    game.zip(guess).map { case (g, gs) => abs(g - gs) }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_153","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/(အစွမ်းက -1) ပါ။    \/\/\"Slices.SERVINGSliCes\" ကိုပြန်ပေးရမယ် ဘာလို့လဲဆိုတော့ \"SERVINGSliCes\" က ခိုင်မာတဲ့ extension ဖြစ်နေလို့ပါ    \/\/extension: ['SERVINGSliCes', 'Cheese', 'StuFfed'] ဆိုရင္ေတာ့ သင္ဟာ     \/\/ဥပမာ၊ ခင်ဗျားကို \"slices\" ဆိုတဲ့ စာတန်းကို ပေးထားရင် စာတန်းထဲမှာ ရှိနေတဲ့ဟာတွေကို စာရင်းပြုစုမယ်။    \/\/စာရင်းထဲမှာ ပထမဦးဆုံး ပေါ်လာတာကို ရွေးပါ။    \/\/တကယ်လို့ အသားကျယ်တဲ့ အသားတင်အသားတင် အချိုးအစား နှစ်ခု (သို့) ဒါထက်ပိုရှိရင်    \/\/format: ClassName.StrongestExtensionName ကို အသုံးပြုသည်။    \/\/ဒီထဲမှာ အားအကောင်းဆုံး extension ကိုရှာပြီး string ကိုပြန်ပို့လိုက်ရင်    \/\/extension ရဲ့အမည်မှာ CAP - SM အပိုင်းနဲ့ ပြင်းအားကို ဖော်ပြထားပါတယ်။    \/\/extension ရဲ့နာမည်မှာ စာလုံးတွေရှိပြီး SM က စာလုံးသေးတွေရဲ့ အရေအတွက်ဖြစ်ပါစေ။    \/\/CAP သည် စာလုံးကြီး၏ နံပါတ်ဖြစ်ပါစေ။    \/\/extension တွေကို class တွေရဲ့အပြင်မှာ class တွေကို load လုပ်ဖို့သုံးရတယ်    \/\/သင်ဟာ အတန်းရဲ့နာမည် (string တစ်ခု) နဲ့ ဖြန့်ချိမှုစာရင်းတစ်ခု ရမယ်။    \/\/ >>> StrongestExtension((\"my_class\"), (List[String](\"AA\", \"Be\", \"CC\")))\n    \/\/ (\"my_class.AA\")\n    def StrongestExtension(class_name : String, extensions : List[String]) : String = {\n","canonical_solution":"def StrongestExtension(class_name: String, extensions: List[String]): String = {\n        extensions.map { extension =>\n            val capCount = extension.count(_.isUpper)\n            val lowerCount = extension.count(_.isLower)\n            val strength = capCount - lowerCount\n            (extension, strength)\n        }.maxBy(_._2)._1\n    } match {\n        case strongest => s\"$class_name.$strongest\"\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"},{"task_id":"HumanEval_154","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/\"true\" ကိုပြန်ပေးရမယ်။ ဒုတိယစကားလုံး ဒါမှမဟုတ် ၎င်းရဲ့ လည်ပတ်မှုတစ်ခုခုက ပထမစကားလုံးရဲ့ အောက်ခြေဖြစ်ရင်ပေါ့    \/\/ >>> cycpatternCheck((\"abcd\"), (\"abd\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"hello\"), (\"ell\"))\n    \/\/ (true)\n    \/\/ >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    \/\/ (true)\n    \/\/ >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"himenss\"), (\"simen\"))\n    \/\/ (true)\n    def cycpatternCheck(a : String, b : String) : Boolean = {\n","canonical_solution":"def cycpatternCheck(a: String, b: String): Boolean = {\n  val bLength = b.length\n  val bDouble = b + b \/\/ Create a string with b concatenated with itself to represent all rotations\n  for (i <- 0 until bLength) {\n    val rotation = bDouble.substring(i, i + bLength) \/\/ Get the current rotation\n    if (a.contains(rotation)) return true\n  }\n  false\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(cycpatternCheck((\"xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\")) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"tinem\")) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_155","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/ကိန်းပြည့်တစ်ခုပေးရင် ကိန်းပြည့်နဲ့ ကိန်းတစ်ခြားစီရှိတဲ့ tuple တစ်ခု ပြန်ပေးတယ်။    \/\/ >>> evenOddCount((-12l))\n    \/\/ ((1l, 1l))\n    \/\/ >>> evenOddCount((123l))\n    \/\/ ((1l, 2l))\n    def evenOddCount(num : Long) : Tuple2[Long, Long] = {\n","canonical_solution":"def evenOddCount(num: Long): Tuple2[Long, Long] = {\n  val digits = num.abs.toString.map(_.asDigit)\n  val evenCount = digits.count(_ % 2 == 0).toLong\n  val oddCount = digits.count(_ % 2 != 0).toLong\n  (evenCount, oddCount)\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"},{"task_id":"HumanEval_156","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ:    \/\/ကန့်သတ်ချက်များ: 1 <= num <= 1000     \/\/ဒါကို စာလုံးသေးသေးနဲ့ ပြန်ရေးလိုက်ပါ    \/\/အပေါင်းကိန်းပြည့်တစ်ခုပေးရင် ရိုမန်ဂဏန်းနဲ့ညီတဲ့ string တစ်ခုအဖြစ်ရယူပါ     \/\/ >>> intToMiniRoman((19l))\n    \/\/ (\"xix\")\n    \/\/ >>> intToMiniRoman((152l))\n    \/\/ (\"clii\")\n    \/\/ >>> intToMiniRoman((426l))\n    \/\/ (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n","canonical_solution":"import scala.collection.mutable._\n\nobject Problem {\n  def intToMiniRoman(number: Long): String = {\n    val romanMap: List[(Int, String)] = List(\n      (1000, \"m\"),\n      (900, \"cm\"),\n      (500, \"d\"),\n      (400, \"cd\"),\n      (100, \"c\"),\n      (90, \"xc\"),\n      (50, \"l\"),\n      (40, \"xl\"),\n      (10, \"x\"),\n      (9, \"ix\"),\n      (5, \"v\"),\n      (4, \"iv\"),\n      (1, \"i\")\n    )\n\n    var num = number.toInt\n    val stringBuilder = new StringBuilder\n\n    for ((value, roman) <- romanMap) {\n      while (num >= value) {\n        stringBuilder.append(roman)\n        num -= value\n      }\n    }\n\n    stringBuilder.toString()\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n}\n"},{"task_id":"HumanEval_157","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/၉၀ ဒီဂရီ။    \/\/ထောင့်မှန်တြိဂံဆိုတာ ထောင့်တစ်ခုက ထောင့်မှန်ဖြစ်နေတဲ့ တြိဂံပါ။    \/\/အဖြားက တြိဂံကို ဖွဲ့တာ မဟုတ်ရင် မှားတယ်။    \/\/တြိဂံရဲ့ အနားသုံးခုရဲ့ အလျားကို ပေးပြီး သုံးခုက မှန်တယ်ဆိုရင် မှန်တဲ့ အခါကို ပြန်ပေးပါ    \/\/ >>> rightAngleTriangle((3l), (4l), (5l))\n    \/\/ (true)\n    \/\/ >>> rightAngleTriangle((1l), (2l), (3l))\n    \/\/ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n","canonical_solution":"def rightAngleTriangle(a: Long, b: Long, c: Long): Boolean = {\n        val sides = List(a, b, c).sorted\n        pow(sides(0), 2) + pow(sides(1), 2) == pow(sides(2), 2)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_158","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏ စာလုံးပေါင်းများ၏    \/\/String မ်ားမွာ Unique မ်ားအမ်ားဆံုးရွိရင္    \/\/စာရင်းတွင် စကားလုံးအမျိုးမျိုး ပါဝင်သည်။ အများဆုံးအရေအတွက်နှင့်အတူ စကားလုံးကိုပြန်ပေးပါ။    \/\/String တွေရဲ့ list ကို လက်ခံတဲ့ function တစ်ခုရေးပါ။    \/\/ >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    \/\/ (\"string\")\n    \/\/ >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    \/\/ (\"enam\")\n    \/\/ >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    \/\/ (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def findMax(words: List[String]): String = {\n    words.maxBy(word => (word.toSet.size, -word.toLowerCase))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n"},{"task_id":"HumanEval_159","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ:     \/\/ကျန်တဲ့ဂေါ်ဖီတွေ မလုံလောက်ဘူးဆိုရင်တော့ ကျန်တဲ့ဂေါ်ဖီတွေ အားလုံးကို စားလိုက်ရဦးမယ် ဒါပေမယ့် မင်းက ဗိုက်ဆာနေတုန်းပဲလေ။    \/\/စားပြီးသွားရင် ကျန်နေသေးတဲ့ ဂေါ်ဖီအရေအတွက်]    \/\/[အစာစားပြီးနောက် စားသုံးခဲ့တဲ့ မုန်လာဥနီအရေအတွက်]    \/\/ဒါပေမဲ့ အခုကျတော့ နေ့စဉ်စားစရာတွေ ပြည့်ဝဖို့ ဂေါ်ဖီထုပ်တွေ ပိုစားဖို့ လိုလာပါပြီ။    \/\/မင်းဟာ ငတ်နေတဲ့ ယုန်တစ်ကောင်၊ မင်းဟာ မုန်လာဥနီ အများကြီးစားပြီးနှင့်ပြီ။    \/\/ >>> eat((5l), (6l), (10l))\n    \/\/ (List[Long](11l.toLong, 4l.toLong))\n    \/\/ >>> eat((4l), (8l), (9l))\n    \/\/ (List[Long](12l.toLong, 1l.toLong))\n    \/\/ >>> eat((1l), (10l), (10l))\n    \/\/ (List[Long](11l.toLong, 0l.toLong))\n    \/\/ >>> eat((2l), (11l), (5l))\n    \/\/ (List[Long](7l.toLong, 0l.toLong))\n    \/\/ Variables:\n    \/\/ @number : integer\n    \/\/ the number of carrots that you have eaten.\n    \/\/ @need : integer\n    \/\/ the number of carrots that you need to eat.\n    \/\/ @remaining : integer\n    \/\/ the number of remaining carrots thet exist in stock\n    \/\/ Constrain:\n    \/\/ * 0 <= number <= 1000\n    \/\/ * 0 <= need <= 1000\n    \/\/ * 0 <= remaining <= 1000\n    \/\/ Have fun :)\n    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def eat(number: Long, need: Long, remaining: Long): List[Long] = {\n    val totalNeeded = number + need\n    if (remaining >= need) {\n      List(totalNeeded, remaining - need)\n    } else {\n      List(number + remaining, 0)\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong, 4l.toLong))));\n    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong, 1l.toLong))));\n    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong, 0l.toLong))));\n    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong, 0l.toLong))));\n    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong, 2l.toLong))));\n    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong, 0l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_160","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/အနည်းဆုံး operator တစ်ခုနဲ့ operand နှစ်ခုရှိပါတယ်။    \/\/အော်ပရန်းဒ်က အနုတ်မဟုတ်တဲ့ ကိန်းပြည့်တွေရဲ့ စာရင်းတစ်ခုပါ။    \/\/operator list ရဲ့အရှည်က operand list ရဲ့အရှည် အနှုတ် ၁ နဲ့ညီတယ်။    \/\/မှတ်ချက်:    \/\/=> ရလဒ် = ၉     \/\/ရလဒ် = 2 + 3 * 4 - 5     \/\/list = [2, 3, 4, 5]  စာရင်း = [2, 3, 4, 5]    \/\/operator['+', '*', '-']  လုပ်ဆောင်သူ    \/\/ဥပမာ:     \/\/မြှောက်ဖော်ကိန်း (**)    \/\/ကြမ်းပြင်ခွဲဝေမှု ( \/\/)     \/\/မြှောက်ခြင်း (*)     \/\/အနှုတ် ( - )     \/\/ပေါင်းထည့်ခြင်း (+)     \/\/အခြေခံ အယ်လ်ဂျီဘရာ လုပ်ဆောင်ချက်များ     \/\/expression ကိုရှာပြီး ဒီ expression ရဲ့ evaluation ကိုပြန်ပေးတယ်။    \/\/ဒုတိယစာရင်းက ကိန်းပြည့်တွေရဲ့စာရင်းပါ။ အက္ခရာသင်္ချာကို တည်ဆောက်ဖို့ ပေးထားတဲ့ စာရင်းနှစ်ခုကို သုံးပါ။    \/\/List ထဲမွာ Operator နဲ႔ Operand ႏွစ္ခု ပါတယ္။ ပထမ List မွာ Basic Algebra Operations ပါတယ္။    def doAlgebra(op : List[String], operand : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def doAlgebra(op: List[String], operand: List[Long]): Long = {\n    var result = operand.head\n    for (i <- 0 until op.length) {\n      op(i) match {\n        case \"+\" => result += operand(i + 1)\n        case \"-\" => result -= operand(i + 1)\n        case \"*\" => result *= operand(i + 1)\n        case \"\/\/\" => result \/= operand(i + 1)\n        case \"**\" => result = pow(result.toDouble, operand(i + 1).toDouble).toLong\n      }\n    }\n    result\n  }\n\n  def main(args: Array[String]): Unit = {\n    val operators = List(\"+\", \"*\", \"-\")\n    val operands = List(2L, 3L, 4L, 5L)\n    println(doAlgebra(operators, operands)) \/\/ Output: 9\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\/\/\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"},{"task_id":"HumanEval_161","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာများ     \/\/ထို function သည် ရလဒ် string ကို ပြန်ပေးရမည်။    \/\/အကယ်၍ string မှာ စာလုံးမရှိဘူးဆိုရင် string ကို ပြောင်းပြန်လှန်လိုက်ပါ    \/\/မဟုတ်ရင် ရှိတဲ့အတိုင်းထားပါ။    \/\/s[i] က စာလုံးဆိုရင် အောက်ကနေ အပေါ် (သို့) ပြောင်းပြန် လှည့်လိုက်ပါ    \/\/ခင်ဗျားကို string s ပေးထားတယ်။    \/\/ >>> solve((\"1234\"))\n    \/\/ (\"4321\")\n    \/\/ >>> solve((\"ab\"))\n    \/\/ (\"AB\")\n    \/\/ >>> solve((\"#a@C\"))\n    \/\/ (\"#A@c\")\n    def solve(s : String) : String = {\n","canonical_solution":"def solve(s: String): String = {\n    if (s.exists(_.isLetter)) {\n      s.map {\n        case c if c.isLetter && c.isLower => c.toUpper\n        case c if c.isLetter && c.isUpper => c.toLower\n        case c => c\n      }.mkString\n    } else {\n      s.reverse\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"},{"task_id":"HumanEval_162","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/'text' သည် အလွတ် string ဖြစ်လျှင် None ကို ပြန်ပို့ပါ။    \/\/string 'text' ကိုပေးထားပြီး md5 hash တူညီတဲ့ string ကိုပြန်ပေးပါ။    \/\/ >>> stringToMd5((\"Hello world\"))\n    \/\/ Some(\"3e25960a79dbc69b674cd4ec67a72c62\")\n    def stringToMd5(text : String) : Option[String] = {\n","canonical_solution":"import java.security.MessageDigest\n\nobject Problem {\n  def stringToMd5(text: String): Option[String] = {\n    if (text.isEmpty) None\n    else {\n      val md = MessageDigest.getInstance(\"MD5\")\n      val digest = md.digest(text.getBytes)\n      Some(digest.map(\"%02x\".format(_)).mkString)\n    }\n  }\n}\n\n\/\/ Example usage:\n\/\/ println(Problem.stringToMd5(\"Hello world\"))  \/\/ Output: Some(\"3e25960a79dbc69b674cd4ec67a72c62\")","tests":"    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(Some(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(Some(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"password\")).equals(Some(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n    }\n\n}\n"},{"task_id":"HumanEval_163","nl":"mya_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဥပမာ -    \/\/b, တိုးတက်လာသော အစီအစဉ်အရ။    \/\/အပေါင်းကိန်းပြည့် a နဲ့ b နှစ်ခုကို ပေးပြီး a နဲ့ b ကြားက ကိန်းတစ်ချပ်ကို ပြန်ပေးပါ    \/\/ >>> generateIntegers((2l), (8l))\n    \/\/ (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n    \/\/ >>> generateIntegers((8l), (2l))\n    \/\/ (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n    \/\/ >>> generateIntegers((10l), (14l))\n    \/\/ (List[Long]())\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def generateIntegers(a: Long, b: Long): List[Long] = {\n    val start = min(a, b)\n    val end = max(a, b)\n    val evenNumbers = for (i <- start to end if i % 2 == 0) yield i\n    evenNumbers.map(_.toLong).toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n    }\n\n}\n"}]