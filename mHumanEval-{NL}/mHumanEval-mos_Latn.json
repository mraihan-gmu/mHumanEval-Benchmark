[
    {
        "prompt":"from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Ges-y s\u00e3 n yaa s\u00f5or a yiib n p\u1ebd taab n y\u0269\u0269d s\u00f5or ning b s\u1ebdn k\u00f5 w\u00e3.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "canonical_solution":"for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" F\u00f5n-k\u00e3ng s\u1ebdn k\u1ebded ne t\u028b\u028bm k\u00e3nga yaa s\u00f5n-v\u00e3oog s\u1ebdn tar sull w\u028bsg s\u1ebdn tar g\u00e3n-v\u00e3oog s\u1ebdn be b toore. Y s\u1ebdn dat\u00e3 yaa t\u0269 welg sull k\u00e3ens n maan s\u00f5n-v\u00e3oog toor-toore la y lebs b s\u00f5or\u00e3. R\u0269k-n-taar sull\u00e3 yaa zems-n-taar (y\u1ebdng f\u00e3a s\u1ebdn pak\u00e3 s\u025bgdame s\u00f5ma) la b pa k\u1ebded taab ye. Pa tall tall tall n ges z\u0129-z\u00e3ms nins s\u1ebdn be s\u00f5n-v\u00e3oog\u00e3 p\u028bg\u1ebd w\u00e3 ye. Makre:\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"
    },
    {
        "prompt":"\n\ndef truncate_number(number: float) -> float:\n    \"\"\" B s\u00e3 n k\u00f5 s\u00f5or s\u1ebdn tar koe-v\u0269\u0269m s\u1ebdn yaa s\u00f5ma, b t\u00f5e n welga a w\u00e3 n lebg s\u00f5or s\u1ebdn yaa s\u00f5ma (s\u1ebdn yaa s\u00f5ma n y\u0269\u0269d s\u00f5or ning b s\u1ebdn k\u00f5 w\u00e3) la a s\u1ebdn yaa s\u00f5ma n y\u0269\u0269d a soab\u00e3 (s\u1ebdn yaa s\u00f5ma n y\u0269\u0269d s\u00f5or ning b s\u1ebdn k\u00f5 w\u00e3).\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "canonical_solution":"    return number % 1.0\n",
        "test":"def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" Y s\u00e3 n wa paam n na n ges y s\u1ebdn t\u00f5e n d\u0269k ligd\u00e3 n ning ligd\u00e3 z\u0129ig ning f\u00e3a, y segd n b\u00e3nga y s\u1ebdn t\u00f5e n d\u0269k ligd\u00e3 z\u0129ig ning f\u00e3a, la y s\u00e3 n wa paam n na n ges y s\u1ebdn t\u00f5e n d\u0269k ligd\u00e3 z\u0129ig ning f\u00e3a, y segd n lebg n togsa s\u0269d-s\u0269da.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "canonical_solution":"    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" S\u1ebdn k\u1ebded ne s\u00f5or s\u1ebdn be s\u00f5or ning p\u028bg\u1ebd, b\u00e3ng t\u0269 s\u1ebdn yaa b\u0169mb ning s\u1ebdn yaa t\u0269l\u025b w\u00e3 yaa s\u1ebdn zems ne s\u1ebdn be-a w\u00e3.\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    mean = sum(numbers) \/ len(numbers)\n    return sum(abs(x - mean) for x in numbers) \/ len(numbers)\n",
        "test":"def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0\/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0\/5.0) < 1e-6\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" B k\u1ebdesa s\u00f5or s\u1ebdn yaa \"delimiter\" n be b s\u1ebdn boond t\u0269 \"input list\" w\u00e3 z\u0129is a yiib f\u00e3a s\u028bka.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "canonical_solution":"    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Yaa sull s\u1ebdn be ne sull f\u00e3a n na n wilg sull f\u00e3a s\u1ebdn be ne sull a ye. Wala makre, (() (()) tara sull a yiib n y\u0269\u0269d la ((())) tara sull a t\u00e3abo.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "canonical_solution":"    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Namsg s\u00f5or s\u1ebdn k\u1ebded ne s\u00f5or-y\u0269\u0269ll\u00e3 s\u1ebdn be b r\u1ebdnna p\u028bg\u1ebd bal n na n paam n ges-a\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if substring in x]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" S\u1ebdn k\u1ebded ne s\u00f5or s\u1ebdn k\u00f5 s\u1ebdn yaa s\u00f5or s\u1ebdn yaa z\u00e3ng s\u00f5or, lebg n wa ne tuple s\u1ebdn naag ne s\u00f5or la b s\u1ebdn lebg n wa ne s\u00f5or s\u1ebdn yaa z\u00e3ng s\u00f5or f\u00e3a s\u00f5or s\u1ebdn be s\u00f5or p\u028bg\u1ebd w\u00e3. Z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129-z\u0129\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "canonical_solution":"    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test":"def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" Ne s\u00f5or s\u1ebdn k\u00f5 s\u1ebdn yaa s\u00f5or s\u1ebdn yaa z\u00e3ng s\u00f5or, b\u0269 f maan s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa k\u00e3senga s\u1ebdn be n ta wakat ning b s\u1ebdn k\u00f5 s\u00f5or\u00e3 p\u028bg\u1ebd w\u00e3.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Makre s\u00e3 n yaa t\u0269 b k\u00f5-a-la s\u00f5or s\u1ebdn yaa wa palindr\u00f4me \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "canonical_solution":"    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" B s\u00e3 n wa n na n wa n ges-a, b na n y\u00e3ame t\u0269 b s\u1ebdn g\u028bls\u00e3 yaa s\u00f5or a ye la a nu.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "canonical_solution":"    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test":"def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n"
    },
    {
        "prompt":"from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Y s\u00e3 n dat n b\u00e3ng s\u00f5or s\u1ebdn yaa z\u00e3r n y\u0269\u0269d s\u00f5or f\u00e3a, y tog n lebg n wa ne pipi s\u00f5or\u00e3. Y s\u00e3 n dat n b\u00e3ng s\u00f5or s\u1ebdn yaa z\u00e3r n y\u0269\u0269d f\u00e3a, y tog n lebg n wa ne pipi s\u00f5or\u00e3. Y s\u00e3 n dat n b\u00e3ng s\u00f5or s\u1ebdn yaa z\u00e3r n y\u0269\u0269d f\u00e3a, y tog n lebg n wa ne a ye.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "canonical_solution":"    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test":"def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n"
    },
    {
        "prompt":"\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" lebg n wa ne a la b s\u1ebdn yaa nin-sabls s\u00f5or a yiib p\u028b\u0269t n yaa k\u00e3seng n y\u0269\u0269d\u00e3\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    while b:\n        a, b = b, a % b\n    return a\n",
        "test":"def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" D lebg n wa ne s\u00f5or s\u1ebdn s\u0269ng ne s\u00f5or s\u1ebdn yaa k\u0269dma n t\u0269 ta s\u00f5or s\u1ebdn yaa woglem s\u1ebdn yaa k\u0269dma\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n"
    },
    {
        "prompt":"\n\ndef string_sequence(n: int) -> str:\n    \"\"\" A lebgda s\u00f5or s\u1ebdn tar z\u0129-k\u1ebdndr s\u1ebdn s\u0269ng ne 0 n ta n.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test":"def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "prompt":"\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" D s\u00e3 n k\u00f5-y s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa toore, bao-y n b\u00e3ng-y s\u00f5or ning s\u1ebdn yaa toore (n pa ges b s\u1ebdn g\u028blsd-a to-to w\u00e3)\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "canonical_solution":"    return len(set(string.lower()))\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Y s\u1ebdn dat n maan b\u0169mb ning yaa y s\u1ebdn na n ges b\u0169mb ning s\u1ebdn be y s\u1ebdn dat\u1ebd w\u00e3 n lebg n wa ne s\u00f5or s\u1ebdn zems ne y\u0269\u0269l-y\u0269\u0269ll\u00e3 s\u00f5or s\u1ebdn pa ta wakat a ye w\u00e3.\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n"
    },
    {
        "prompt":"\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Bao-y n b\u00e3ng-y naoor a w\u00e3n la b t\u00f5e n y\u00e3 s\u00f5or-ko\u025b\u025bg s\u1ebdn yaa wa b s\u1ebdn da g\u028bls-a w\u00e3.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "canonical_solution":"    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test":"def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" B s\u1ebdn t\u00f5e n y\u00e3k n y\u00e3k n lebg n wa ne s\u00f5or s\u1ebdn y\u00e3k n yi a s\u1ebdn yaa a to w\u00e3 n s\u0269ng ne a s\u1ebdn yaa a ya bilf n t\u0269 ta a s\u1ebdn yaa k\u00e3seng n y\u0269\u0269d\u00e3.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "canonical_solution":"    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" B s\u1ebdn k\u00f5 s\u00f5or s\u00f5or s\u00f5or (s\u1ebdn pa ta a yiib) n y\u00e3k la b lebs a yiib s\u1ebdn kolg taab n y\u0269\u0269d\u00e3 la b lebs-b sor-wilgr p\u028bg\u1ebd (s\u1ebdn yaa s\u00f5or s\u1ebdn pa ta woto, s\u1ebdn yaa s\u00f5or s\u1ebdn yaa k\u00e3seng n y\u0269\u0269d\u00e3).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "canonical_solution":"    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" B s\u00e3 n k\u00f5 s\u00f5or s\u00f5or (s\u1ebdn ta a yiib), b r\u0269kda lineer t\u0269bsg n tek s\u00f5or k\u00e3ng zugu, t\u0269 s\u00f5or ning s\u1ebdn yaa bilf n y\u0269\u0269d\u00e3 lebg 0 la s\u1ebdn yaa k\u00e3seng n y\u0269\u0269d\u00e3 lebg 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "canonical_solution":"    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) \/ (max_number - min_number) for x in numbers]\n",
        "test":"def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n"
    },
    {
        "prompt":"from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Y s\u00e3 n dat n b\u00e3ng y s\u1ebdn t\u00f5e n maan to-to n paam n lebg n wa, b\u0269 y ges video w\u00e3 s\u1ebdn be t\u1ebdngr\u00e3.\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in values if isinstance(x, int)]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n"
    },
    {
        "prompt":"\n\ndef strlen(string: str) -> int:\n    \"\"\" D s\u00e3 n k\u00f5 k\u00f5-a, a woglem\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "canonical_solution":"    return len(string)\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n"
    },
    {
        "prompt":"\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" S\u1ebdn na n y\u0269l\u1ebd n paam s\u00f5or s\u1ebdn k\u00f5, bao s\u00f5or ning s\u1ebdn yaa k\u00e3seng n y\u0269\u0269d n n p\u028b\u0269t n w\u00e3, n ya bilf n y\u0269\u0269d n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test":"def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" D s\u00e3 n na n lebg n wa ne s\u00f5or s\u1ebdn yaa pipi koees s\u1ebdn na n y\u0269ll n b\u00e3ng s\u00f5or s\u1ebdn yaa pipi n t\u0269 ta pipi, d segd n s\u00f5dga koees f\u00e3a naoor s\u1ebdn zems ne naoor nins b s\u1ebdn na n wa ne-a.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n \/\/= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test":"def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Y s\u00e3 n na n y\u00e3 s\u00f5or s\u1ebdn yaa z\u00e3ng n be s\u00f5or-k\u00e3ng p\u028bg\u1ebd, y segd n yiisa s\u00f5or nins s\u1ebdn be s\u00f5or-k\u00e3ng p\u028bg\u1ebd w\u00e3 f\u00e3a.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n"
    },
    {
        "prompt":"\n\ndef flip_case(string: str) -> str:\n    \"\"\" S\u1ebdn k\u1ebded ne s\u00f5sg s\u1ebdn k\u00f5, lebg-y l\u025btr\u00e3 s\u1ebdn yaa bilfr n lebg bilfr k\u00e3senga, la bilfr k\u00e3senga n lebg bilfr bilfr bala.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "canonical_solution":"    return string.swapcase()\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Y\u0269ta s\u00f5or s\u1ebdn yaa toore, n lebg s\u00f5or a ye\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "canonical_solution":"    return ''.join(strings)\n",
        "test":"def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Y\u0269ta s\u00f5ma t\u0269 y gilg n ges s\u00f5or nins s\u1ebdn s\u0269ng ne s\u1ebdn be-b z\u0129ig ning\u00e3 bala.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if x.startswith(prefix)]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n"
    },
    {
        "prompt":"\n\ndef get_positive(l: list):\n    \"\"\"Lebg n lebg n wa ne s\u00f5or s\u1ebdn yaa s\u00f5ma bala.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "canonical_solution":"    return [e for e in l if e > 0]\n",
        "test":"def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n"
    },
    {
        "prompt":"\n\ndef is_prime(n):\n    \"\"\"D s\u00e3 n k\u00f5 s\u00f5or s\u1ebdn yaa pipi, d lebg n togsa s\u0269d la s\u00e3 n pa woto, d togsa z\u0129r\u0129.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "canonical_solution":"    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n"
    },
    {
        "prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    A makda polinomi s\u1ebdn tar koeef\u0269\u0269\u0269t\u00e3 xs z\u0129-z\u00e3rg\u1ebd x. lebg n wa xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) \/ 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test":"def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n"
    },
    {
        "prompt":"\n\ndef sort_third(l: list):\n    \"\"\"T\u028b\u028bm k\u00e3nga r\u0269kda s\u00f5or a 1 n lebg n wa ne s\u00f5or a 1 s\u1ebdn yaa woto t\u0269 l' yaa a yembr ne l s\u1ebdn k\u1ebded ne s\u00f5or nins s\u1ebdn pa t\u00f5e n p\u028b\u0269 ne a t\u00e3ab\u00e3, t\u0269 a y\u00f5odo s\u1ebdn k\u1ebded ne s\u00f5or nins s\u1ebdn t\u00f5e n p\u028b\u0269 ne a t\u00e3ab\u00e3 yaa a yembr ne s\u00f5or nins s\u1ebdn k\u1ebded ne a 1 s\u1ebdn zems\u00e3, la b welga.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "canonical_solution":"    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n"
    },
    {
        "prompt":"\n\ndef unique(l: list):\n    \"\"\"Leb n wa ne b\u0169mb s\u1ebdn yaa toor-toor s\u1ebdn be s\u00f5or-k\u00e3ng p\u028bg\u1ebd\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(list(set(l)))\n",
        "test":"def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n"
    },
    {
        "prompt":"\n\ndef max_element(l: list):\n    \"\"\"Lebs-y n ges-y s\u00f5or ning s\u1ebdn yaa k\u00e3seng n y\u0269\u0269d\u00e3.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "canonical_solution":"    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n"
    },
    {
        "prompt":"\n\ndef fizz_buzz(n: int):\n    \"\"\"D lebg n wa ne naoor s\u00f5or ning s\u1ebdn yaa 7 w\u00e3 s\u1ebdn pukd ne nimero r\u00e3mb s\u1ebdn pa ta n t\u0269 b t\u00f5e n p\u028b\u0269 ne 11 b\u0269 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "canonical_solution":"    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test":"def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n"
    },
    {
        "prompt":"\n\ndef sort_even(l: list):\n    \"\"\"T\u028b\u028bm k\u00e3nga r\u0269kda s\u00f5or a l la a leb n k\u00f5 s\u00f5or a l' s\u1ebdn yaa woto t\u0269 l' yaa zeng ne l s\u1ebdn k\u1ebded ne s\u1ebdn pa zemse, t\u0269 a y\u00f5odo s\u1ebdn k\u1ebded ne s\u1ebdn pa zemse yaa wa a l s\u1ebdn k\u1ebded ne s\u1ebdn pa zemse, la b welga.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "canonical_solution":"    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n"
    },
    {
        "prompt":"\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    A lebgda ne b s\u1ebdn g\u028blsd-a ne b s\u1ebdn g\u028blsd-a ne b s\u1ebdn g\u028blsd-a ne b s\u1ebdn g\u028blsd-a ne b s\u1ebdn g\u028blsd-a ne b s\u1ebdn g\u028blsd-a ne b s\u1ebdn g\u028blsd-a ne b s\u1ebdn g\u028blsd-a ne b s\u1ebdn g\u028bls-a.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) \/\/ 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return encode_cyclic(encode_cyclic(s))\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n"
    },
    {
        "prompt":"\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib lebgda n-\u1ebdegr\u00e3 s\u00f5or s\u1ebdn yaa Fibonacci s\u00f5or la a leb n yaa pipi s\u00f5ore.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "canonical_solution":"    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test":"def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n"
    },
    {
        "prompt":"\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    A s\u00e3 n wa be t\u0269 s\u00f5or a t\u00e3abo, a lebgda s\u0269d bala.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n"
    },
    {
        "prompt":"\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Tags-y n ges-y so-toak s\u1ebdn yaa t\u0269rga, n yaa z\u00e3ng\u00e3 s\u1ebdn ka t\u025bk n z\u00e3r ne a to w\u00e3. So-toak n be n k\u1ebdnd n yi goabg n k\u1ebdng r\u0269tgo, t\u0269 so-toak a to n k\u1ebdnd n ta r\u0269tgo n k\u1ebdng goabg. So-toak a yiib\u00e3 s\u0269ngda ne taab z\u00e3rgo. So-toak f\u00e3a k\u1ebdnd ne vitem a yembr bala. B yetame t\u0269 so-toak a yiib na n wa k\u1ebde ne taab so-toak s\u1ebdn k\u1ebdnd goabg n k\u1ebdng r\u0269tgo, n wa k\u1ebded so-toak s\u1ebdn k\u1ebdnd r\u0269tgo n k\u1ebdng goabga. La so-toak a yiib\u00e3 yaa k\u00e3n-k\u00e3e, n tar p\u00e3ng w\u028bsgo, t\u0269 k\u0269t t\u0269 b ket n k\u1ebdnd b so-toak\u1ebd w\u00e3 wa b s\u1ebdn pa k\u1ebded ne taab ye.\n    \"\"\"\n",
        "canonical_solution":"    return n**2\n",
        "test":"def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n"
    },
    {
        "prompt":"\n\ndef incr_list(l: list):\n    \"\"\"R\u0269k-y s\u00f5or ning s\u1ebdn be w\u00e3 n lebg n wa ne a 1 s\u1ebdn paas\u00e3.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "canonical_solution":"    return [(e + 1) for e in l]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n"
    },
    {
        "prompt":"\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero r\u0269kda nimero r\u00e3mb s\u00f5or s\u1ebdn yaa s\u00f5ma wa s\u1ebdn k\u1ebded ne s\u00f5ora. A lebgda True s\u00e3 n yaa t\u0269 nimero r\u00e3mb a yiib s\u1ebdn yaa toor-toor\u00e3 be s\u00f5or s\u1ebdn yaa z\u00e9ro, la False s\u00e3 n pa woto.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n"
    },
    {
        "prompt":"\n\ndef change_base(x: int, base: int):\n    \"\"\"R\u0269k s\u00f5or ning s\u1ebdn be y s\u1ebdn k\u00f5 w\u00e3 n lebg n wa ne s\u00f5or s\u1ebdn yaa 10 w\u00e3.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "canonical_solution":"    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x \/\/= base\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n"
    },
    {
        "prompt":"\n\ndef triangle_area(a, h):\n    \"\"\"B k\u00f5-d-la a to w\u00e3 woglem la a to w\u00e3 s\u1ebdn lebg n wa z\u0129ig ning\u00e3.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "canonical_solution":"    return a * h \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n"
    },
    {
        "prompt":"\n\ndef fib4(n: int):\n    \"\"\"Fib4 s\u00f5or p\u028bga yaa s\u1ebdn w\u00f5nd Fibbonacci s\u00f5or p\u028bga s\u1ebdn yaa woto: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Y\u00e3k-y n g\u028bls t\u028b\u028bm-noor s\u1ebdn na n b\u00e3ng n-r\u0269tg ning s\u1ebdn be fib4 s\u00f5or p\u028bga p\u028bg\u1ebd w\u00e3 s\u00f5ma.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "canonical_solution":"    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test":"def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n"
    },
    {
        "prompt":"\n\ndef median(l: list):\n    \"\"\"D lebg n wa ne elem\u1ebd-r\u00e3mb nins s\u1ebdn be s\u00f5or-k\u1ebdeng\u00e3 p\u028bg\u1ebd w\u00e3\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "canonical_solution":"    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) \/\/ 2]\n    else:\n        return (l[len(l) \/\/ 2 - 1] + l[len(l) \/\/ 2]) \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(text: str):\n    \"\"\"\n    A gesda s\u00e3 n yaa t\u0269 b k\u00f5-a-la s\u00f5or s\u1ebdn yaa wa palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n"
    },
    {
        "prompt":"\n\ndef modp(n: int, p: int):\n    \"\"\"D lebg n wa ne 2^n modulo p (y segd n b\u00e3ngame t\u0269 yaa s\u00f5or n na n lebg n wa).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "canonical_solution":"    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n"
    },
    {
        "prompt":"\n\ndef encode_shift(s: str):\n    \"\"\"\n    A lebgda ne b s\u1ebdn ning b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b ne b s\u1ebdn g\u028blsd-b.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n"
    },
    {
        "prompt":"\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels yaa t\u028b\u028bm-noor s\u1ebdn d\u0269kd s\u00f5n-v\u0269\u0269s n lebgd n lebd ne s\u00f5n-v\u0269\u0269s s\u1ebdn ka be ye.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n"
    },
    {
        "prompt":"\n\ndef below_threshold(l: list, t: int):\n    \"\"\"lebg n wa ne s\u0269d s\u00e3 n yaa t\u0269 s\u00f5or f\u00e3a s\u1ebdn be s\u00f5or-k\u1ebdeng\u00e3 p\u028bg\u1ebd w\u00e3 pa ta t ye.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "canonical_solution":"    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n"
    },
    {
        "prompt":"\n\ndef add(x: int, y: int):\n    \"\"\"R\u0269k s\u00f5or a yiib n paas x la y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "canonical_solution":"    return x + y\n",
        "test":"def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n"
    },
    {
        "prompt":"\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Ges-y gom-biis a yiib s\u00e3 n tara y\u028by s\u1ebdn yaa a yembre.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "canonical_solution":"    return set(s0) == set(s1)\n",
        "test":"def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n"
    },
    {
        "prompt":"\n\ndef fib(n: int):\n    \"\"\"lebg n-y\u1ebdng Fibonacci s\u00f5or n-y\u1ebdng.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test":"def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets yaa \"<\" la \">\" s\u00f5or s\u1ebdn yaa toore. Return True s\u00e3 n yaa t\u0269 bracket f\u00e3a s\u1ebdn s\u0269ngd tara a s\u1ebdn wat ne a s\u1ebdn wat ne a s\u1ebdn wat ne a s\u1ebdn wat ne a.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n"
    },
    {
        "prompt":"\n\ndef monotonic(l: list):\n    \"\"\"Return True yaa s\u00f5or s\u1ebdn paasd b\u0269 s\u1ebdn boogd wakat f\u00e3a.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "canonical_solution":"    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n"
    },
    {
        "prompt":"\n\ndef common(l1: list, l2: list):\n    \"\"\"A lebsa b\u0169mb a yiib s\u1ebdn yaa toor s\u1ebdn yaa a yembr n be s\u00f5or a yiib p\u028bg\u1ebd.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "canonical_solution":"    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test":"def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n"
    },
    {
        "prompt":"\n\ndef largest_prime_factor(n: int):\n    \"\"\"D lebg n wa ne n-y\u1ebdgd ning s\u1ebdn yaa k\u00e3seng n y\u0269\u0269d\u00e3. D r\u0269k n > 1 n pa n-y\u1ebdgd ye.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test":"def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n"
    },
    {
        "prompt":"\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n yaa t\u028b\u028bm-noor s\u1ebdn na n s\u00f5d s\u00f5or s\u1ebdn s\u0269ng ne 1 n ta n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "canonical_solution":"    return sum(range(n + 1))\n",
        "test":"def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets yaa \"(\" la \"\") s\u1ebdn be b s\u1ebdn na n lebg n wa True s\u00e3 n yaa t\u0269 bracket f\u00e3a s\u1ebdn na n s\u0269ng n be ne a s\u1ebdn na n baas n baas\u00e3.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n"
    },
    {
        "prompt":"\n\ndef derivative(xs: list):\n    \"\"\" xs makda polinomial koeef\u0269tensa. xs[0] + xs[1] * x + xs[2] * x^2 +.... lebgda polinomial k\u00e3nga s\u1ebdn yit a soab p\u028bg\u1ebd.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "canonical_solution":"    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n"
    },
    {
        "prompt":"\n\ndef fibfib(n: int):\n    \"\"\"FibFib s\u00f5or p\u028bga yaa s\u1ebdn w\u00f5nd Fibbonacci s\u00f5or p\u028bga s\u1ebdn yaa woto: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test":"def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n"
    },
    {
        "prompt":"\nFIX = \"\"\"\nBao-y n b\u00e3ng-y n paase.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef circular_shift(x, shift):\n    \"\"\"Y\u0269ta wa y s\u1ebdn na n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg n gilg\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "canonical_solution":"    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef digitSum(s):\n    \"\"\"T\u028b\u028bm-s\u00f5ng g\u028blsg s\u1ebdn d\u0269kd s\u00f5n-v\u0269\u0269ga wa s\u1ebdn k\u1ebded ne n lebg n wa ne s\u00f5or s\u1ebdn yaa ne a zug\u1ebd w\u00e3 bal ASCII koodse. Makre: digitSum(\"\") => 0 digitSum(\"abAB\") => 131 digitSum(\"abcCd\") => 67 digitSum(\"helloE\") => 69 digitSum(\"woArBld\") => 131 digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
        "canonical_solution":"    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef fruit_distribution(s,n):\n    \"\"\"\n    Y s\u00e3 n k\u00f5-y s\u00f5or s\u1ebdn makd k\u028b\u0269l-koom la k\u028b\u0269l-koom s\u1ebdn be biis koglg p\u028bg\u1ebd, k\u028b\u0269l-koom\u00e3 p\u028bg\u1ebd, k\u028b\u0269l-koom\u00e3 p\u028bg\u1ebd, la k\u028b\u0269l-koom\u00e3 p\u028bg\u1ebd, b\u0269 y k\u00f5 k\u028b\u0269l-koom\u00e3 s\u1ebdn makd k\u028b\u0269l-koom\u00e3 la k\u028b\u0269l-koom\u00e3 f\u00e3a s\u00f5or s\u1ebdn makd k\u028b\u0269l-koom\u00e3 p\u028bg\u1ebd w\u00e3, b\u0269 y lebs k\u028b\u0269l-koom\u00e3 s\u1ebdn be biis koglg\u1ebd w\u00e3 s\u00f5ore. Wala makre: fruit_distribution\"5( k\u028b\u0269l-koom la k\u028b\u0269l-koom 6\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 k\u028b\u0269l-koom la k\u028b\u0269l-koom 1\", 3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 k\u028b\u0269l-koom la k\u028b\u0269\n    \"\"\"\n",
        "canonical_solution":"    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n"
    },
    {
        "prompt":"\ndef pluck(arr):\n    \"\"\"\n    \"Y\u00e3mb s\u00e3 n paam t\u0269 y tara sull s\u1ebdn yaa wa t\u0269\u0269g s\u1ebdn tar wil-t\u0269rse, t\u0269 b pa be n ya zuloees ye, y segd n d\u0269ka a yembr n lebg n wa. B s\u1ebdn y\u00e3k bil\u00e3 segd n y\u0269\u0269 bil ning s\u1ebdn tar t\u0269\u0269m ning s\u1ebdn yaa zuloees n y\u0269\u0269d\u00e3. B s\u00e3 n y\u00e3e t\u0269 b y\u00e3e t\u0269 b tara bil w\u028bsg s\u1ebdn tar t\u0269\u0269m ning s\u1ebdn yaa zuloees n y\u0269\u0269d\u00e3, b\u0269 b lebs bil\u00e3 s\u1ebdn tar t\u0269\u0269m ning s\u1ebdn yaa zuloees n y\u0269\u0269d\u00e3. B s\u00e3 n pa y\u00e3e t\u0269 bil\u00e3 s\u1ebdn d\u0269k\u00e3 segd n lebg n wa ne bil\u00e3 s\u1ebdn tar t\u0269\u0269m ning s\u1ebdn yaa zuloees n y\u0269\u0269d\u00e3, b\u0269 b lebs []. Makre: 1: V\u028b\u028bg-n-t\u0269rg: [4,2,3] V\u028b\u028bg-n-t\u0269rg: [2, 1] V\u028b\u028bg-n-t\u0269rg\n    \"\"\"\n",
        "canonical_solution":"    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "canonical_solution":"    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test":"def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n"
    },
    {
        "prompt":"\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "canonical_solution":"    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "canonical_solution":"    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)\/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n"
    },
    {
        "prompt":"\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u00e2 -> False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u00e2 -> False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u00e2 -> True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u00e2 -> True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "canonical_solution":"    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n"
    },
    {
        "prompt":"\ndef smallest_change(arr):\n    \"\"\"\n    Y s\u00e3 n k\u00f5-y ar\u0269 n tar nimero, b\u0269 y bao n b\u00e3ng b\u0169mb nins s\u1ebdn yaa t\u0269lae t\u0269 y toeeme n t\u00f5og n lebg ar\u0269 w\u00e3 palindrom. Ar\u0269 s\u1ebdn yaa palindrom yaa ar\u0269 s\u1ebdn t\u00f5e n karem n lebg n leb poor\u1ebd la s\u1ebdn t\u00f5e n k\u1ebdng taoor wa taaba. Y s\u00e3 n toeeme, y t\u00f5e n toeema b\u0169mb a ye n lebg b\u0169mb a to. Wala makre: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
        "canonical_solution":"    ans = 0\n    for i in range(len(arr) \/\/ 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n"
    },
    {
        "prompt":"\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u00e2 -> []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u00e2 -> ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u00e2 -> ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u00e2 -> ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u00e2 -> ['4']\n    '''\n",
        "canonical_solution":"    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n"
    },
    {
        "prompt":"\ndef is_multiply_prime(a):\n    \"\"\"R\u0269k-y t\u028b\u028bmde s\u1ebdn na n lebg n wa ne s\u0269d s\u00e3 n yaa t\u0269 s\u00f5or ning b s\u1ebdn k\u00f5 w\u00e3 yaa s\u00f5or a 3 s\u1ebdn yaa pipi s\u00f5or n paas t\u0269 s\u00e3 n pa woto yaa ziri.\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n"
    },
    {
        "prompt":"\ndef is_simple_power(x, n):\n    \"\"\"Y t\u028b\u028bmda yaa g\u028bls t\u028b\u028bmde s\u1ebdn lebgda s\u0269d s\u00e3 n yaa s\u00f5or n yaa n-y\u1ebdng n yaa z\u0129r\u0129, s\u00e3 n yaa a to p\u028bg\u1ebd. x yaa z\u0129r\u0129 n yaa z\u0129r\u0129 n s\u00e3 n yaa n**int=x Wala makre: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false\n    \"\"\"\n",
        "canonical_solution":"    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "canonical_solution":"    a = abs(a)\n    return int(round(a ** (1. \/ 3))) ** 3 == a\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n"
    },
    {
        "prompt":"\ndef hex_key(num):\n    \"\"\"Y paama t\u028b\u028bmde n na n g\u028bls t\u028b\u028bmde s\u1ebdn deegd s\u00f5or s\u1ebdn yaa hexadecimal wa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa\n    \"\"\"\n",
        "canonical_solution":"    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n"
    },
    {
        "prompt":"\ndef decimal_to_binary(decimal):\n    \"\"\"B na n k\u00f5-y-la s\u00f5or s\u1ebdn yaa t\u0269l\u025b t\u0269 y lebg n wa n lebg a yiib-n-soab s\u00f5or. T\u028b\u028bmd\u00e3 segd n lebg n wa ne s\u00f5or s\u1ebdn yaa t\u0269l\u025b t\u0269 ned f\u00e3a y\u0269 a yiib-n-soab s\u00f5ore. S\u00f5or f\u00e3a s\u1ebdn be s\u00f5or p\u028bg\u1ebd w\u00e3 na n y\u0269\u0269 '0' b\u0269 '1'. B na n paama s\u00f5or a yiib n paas 'db' s\u00f5or s\u0269ngr\u1ebd la a yaoolem\u1ebd w\u00e3. S\u00f5or a taab\u00e3 bee be n na n s\u00f5ng ne s\u00f5or\u00e3 s\u1ebdn na n y\u0269 to-to w\u00e3. Makre: decimal_to_binary(15) # lebg n wa ne \"db1111db\" decimal_to_binary32) # lebg n wa ne \"db100000db\"\n    \"\"\"\n",
        "canonical_solution":"    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef is_happy(s):\n    \"\"\"B k\u00f5-y-la s\u00f5n-v\u00e3oog s\u1ebdn yaa s. Y t\u028b\u028bmda yaa ges s\u00e3 n yaa s\u00f5n-v\u00e3oog s\u1ebdn yaa s\u0169-noog b\u0269 ka s\u0169-noog ye. S\u00f5n-v\u00e3oog yaa s\u0169-noog s\u00e3 n yaa a woglem yaa 3 la a f\u00e3a 3 s\u00f5ss s\u1ebdn p\u028bgl taab yaa toor Wala makre: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd)) => True is_happy ((aabb)) => False is_happy ((adb)) => True is_happy ((xyy)) => False\n    \"\"\"\n",
        "canonical_solution":"    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n"
    },
    {
        "prompt":"\ndef numerical_letter_grade(grades):\n    \"\"\"Yaa sem\u025bstr\u00e3 yaoolem semen la karen-saamb\u00e3 segd n k\u00f5 karen-biisa makr\u00e3. Karen-saamb\u00e3 maana a meng s\u1ebdn na y\u0269l n k\u00f5 karen-biisa makr\u00e3. B\u0169mb ning s\u1ebdn yaa zu-loees a ye bal yaa t'a menemda kood ning a s\u1ebdn da t\u0169nug ne n k\u00f5 karen-biisa makr\u00e3. A k\u00f5o y\u00e3mb karen-biis k\u1ebder GPA s\u00f5or t\u0269 y segd n g\u028bls t\u028b\u028bm-noor s\u1ebdn t\u00f5e n yiis l\u025btr\u00e3 makr\u00e3 s\u00f5or ne tabl ning s\u1ebdn p\u028bgd\u00e3: GPA. L\u025btr\u00e3 makr\u00e3 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation ([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', '\n    \"\"\"\n",
        "canonical_solution":"\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef prime_length(string):\n    \"\"\"G\u028bls-y t\u028b\u028bm-noor s\u1ebdn d\u0269kd s\u00f5n-v\u00e3oog n lebg n wa ne S\u0269da s\u00e3 n yaa s\u00f5n-v\u00e3oog s\u1ebdn yaa s\u00f5or s\u1ebdn yaa pipi, b\u0269 S\u0269da s\u00e3 n pa woto Makr prime_length{\"Hello\") == S\u0269da prime_length{\"abcdcba\") == S\u0269da prime_length{\"kittens\") == S\u0269da prime_length{\"orange\") == S\u0269da\n    \"\"\"\n",
        "canonical_solution":"    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n"
    },
    {
        "prompt":"\ndef starts_one_ends(n):\n    \"\"\"\n    D s\u00e3 n k\u00f5 s\u00f5or s\u1ebdn yaa s\u00f5ma n, lebg n wa ne s\u00f5or ning s\u1ebdn yaa s\u00f5ma n-digit s\u00f5or s\u1ebdn s\u0269ngd b\u0269 s\u1ebdn baasd ne 1 w\u00e3.\n    \"\"\"\n",
        "canonical_solution":"    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(N):\n    \"\"\"S\u00e3 n yaa t\u0269 f tara nimero s\u1ebdn yaa s\u00f5ma n yaa N, b\u0269 f lebg n wa ne a nimero r\u00e3mb f\u00e3a s\u00f5or s\u1ebdn yaa a yiib-n-soab n k\u00f5. Makre N = 1000, a nimero r\u00e3mb s\u00f5or na n y\u0269\u0269 1 t\u0269 b ra yiisd n y\u0269 \"1\". N = 150 y\u0129nga, a nimero r\u00e3mb s\u00f5or na n y\u0269\u0269 6 t\u0269 b ra yiisd n y\u0269 \"110\". N = 147 y\u0129nga, a nimero r\u00e3mb s\u00f5or na n y\u0269\u0269 12 t\u0269 b ra yiisd n y\u0269 \"1100\". Variables: @N integer Constraints: 0 \u00e2\u2030\u00a4 N \u00e2\u2030\u00a4 10000.\n    \"\"\"\n",
        "canonical_solution":"    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n"
    },
    {
        "prompt":"\ndef add(lst):\n    \"\"\"D s\u00e3 n k\u00f5 s\u00f5or s\u1ebdn pa zaalem, d na n s\u00f5d-a-la ne nin-sabls s\u1ebdn yaa zuloees n y\u0269\u0269d nin-sabls\u00e3. \n    \"\"\"\n",
        "canonical_solution":"    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n"
    },
    {
        "prompt":"\ndef anti_shuffle(s):\n    \"\"\"\n    G\u028bls-y t\u0269 y segd n t\u0169uda gom-biis nins s\u1ebdn be s\u00f5ss\u00e3 p\u028bg\u1ebd w\u00e3 n lebg n wa ne b s\u1ebdn g\u028bls\u00e3. G\u028bls-biis nins s\u1ebdn g\u028bls\u00e3 yaa gom-biis nins s\u1ebdn be s\u00f5ss\u00e3 f\u00e3a p\u028bg\u1ebd w\u00e3 s\u1ebdn welg ne z\u0129iga, n lebg n wa ne gom-biis a taab s\u1ebdn be s\u00f5ss\u00e3 p\u028bg\u1ebd w\u00e3.\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef get_row(lst, x):\n    \"\"\"\n    B k\u00f5-y-la 2 dimensional data, wala nested lists, s\u1ebdn w\u00f5nd matric, la s\u1ebdn pa wa matric, r\u0169m-yend f\u00e3a t\u00f5e n tara kol\u00f5ns s\u00f5or s\u1ebdn yaa toor-toore. d s\u00e3 n k\u00f5 lst, la int\u025brse x, d bao int\u025brse x s\u1ebdn be list\u00e3 p\u028bg\u1ebd, la d lebg n wa ne tuple-r\u00e3mb s\u00f5or, [(x1, y1), (x2, y2)...] t\u0269 tuple f\u00e3a yaa koordinat - (r\u0169m-yend, kol\u00f5ns), s\u1ebdn s\u0269ng ne 0.\n    \"\"\"\n",
        "canonical_solution":"    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef sort_array(array):\n    \"\"\"\n    Y s\u00e3 n paam t\u0269 y k\u00f5-y s\u00f5or s\u1ebdn pa zuloes n lebg n wa, y na n welga s\u00f5or\u00e3 n wa ne a s\u1ebdn na n y\u0269 to-to w\u00e3. Y s\u00e3 n wa paam t\u0269 s\u00f5or\u00e3 yaa toor-toore, b\u0269 y welg-a n wa ne a s\u1ebdn na n y\u0269 to-to w\u00e3.\n    \"\"\"\n",
        "canonical_solution":"    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef encrypt(s):\n    \"\"\"Y\u00e3k-y t\u028b\u028bm-noor s\u1ebdn na n d\u0269k s\u00f5n-v\u00e3oog wa gom-biis n lebg n wa ne s\u00f5n-v\u00e3oog s\u1ebdn k\u1ebded ne b s\u1ebdn w\u1ebdnemd b bab-bil\u00e3. B segd n w\u1ebdnemda b bab-bil\u00e3 t\u0269 l\u025btb\u00e3 k\u1ebdeg n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig n sig\n    \"\"\"\n",
        "canonical_solution":"    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef next_smallest(lst):\n    \"\"\"\n    B k\u00f5-y-la s\u00f5or s\u1ebdn yaa z\u00e3ng s\u00f5or s\u00f5or bala. g\u028bls-y t\u028b\u028bm-noor s\u1ebdn boond t\u0269 next_smallest (() s\u1ebdn na n lebg n wa ne s\u00f5or a yiib-n-soab s\u1ebdn yaa bilf s\u00f5or s\u00f5or s\u00f5or\u00e3 p\u028bg\u1ebd. lebg n wa ne a ye ka be s\u00e3 n ka be woto. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == next_smallest (([1, 1]) == None\n    \"\"\"\n",
        "canonical_solution":"    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_bored(S):\n    \"\"\"\n    B na n k\u00f5-y-la gom-biis s\u00f5or s\u1ebdn yaa toore, la y t\u028b\u028bmda yaa y s\u00f5d-b\u00e3ngr\u00e3 s\u00f5or s\u00f5ore. Toore yaa gom-biis s\u1ebdn s\u0269ng ne \"m\". Gom-biis\u00e3 loee ne '.', '?' b\u0269 '!'.\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "canonical_solution":"    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u00e2 -> True\n    \n    any_int(3, 2, 2) \u00e2 -> False\n\n    any_int(3, -2, 1) \u00e2 -> True\n    \n    any_int(3.6, -2.2, 2) \u00e2 -> False\n  \n\n    \n    '''\n",
        "canonical_solution":"    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef encode(message):\n    \"\"\"\n    G\u028bls-y t\u028b\u028bm-noor s\u1ebdn na n d\u0269k ko\u025b\u025bg n ning-a s\u1ebdn na y\u0269l t\u0269 l\u025btb\u00e3 f\u00e3a lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\n\ndef skjkasdkd(lst):\n    \"\"\"B k\u00f5-y-la s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa s\u00f5ma. Y segd n baoo s\u00f5or ning s\u1ebdn yaa k\u00e3seng n y\u0269\u0269d\u00e3 n lebg n wa ne a sifr\u00e3 s\u00f5ore. Makre: S\u00e3 n yaa t\u0269 lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3], r\u1ebdnda s\u00f5or ning s\u1ebdn segd n yi w\u00e3 yaa 10 S\u00e3 n ya t\u0269 lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1], r\u1ebdnda s\u00f5or ning s\u1ebdn segd n yi w\u00e3 yaa 25 S\u00e3 n ya t\u0269 lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3], r\u1ebdnda s\u00f5or ning s\u1ebdn segd n yi w\u00e3 yaa 13 S\u00e3 n ya t\u0269 lst = [0,724,32,71,\n    \"\"\"\n",
        "canonical_solution":"    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n"
    },
    {
        "prompt":"\ndef check_dict_case(dict):\n    \"\"\"\n    D s\u00e3 n k\u00f5-a gom-biis s\u1ebdn yaa wa, a lebgda True s\u00e3 n yaa t\u0269 b f\u00e3a yaa s\u00f5n-v\u0269\u0269d s\u1ebdn be ne g\u028bls-bi-k\u0269ds b\u0269 b f\u00e3a yaa s\u00f5n-v\u0269\u0269d s\u1ebdn be ne g\u028bls-bi-b\u025bd, s\u00e3 n pa r\u1ebd a lebgda False. F\u00f5n-s\u025bb segd n lebgda False yaa t\u0269 gom-biis s\u1ebdn k\u00f5 w\u00e3 yaa zaalem. Makre: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) segd n lebgda True. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) segd n lebgda False. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) segd n lebgda False. check\n    \"\"\"\n",
        "canonical_solution":"    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n"
    },
    {
        "prompt":"\ndef count_up_to(n):\n    \"\"\"D r\u0269k t\u028b\u028bmde s\u1ebdn na n d\u0269k n-negativ nimero n lebg n wa ne pipi nimero n s\u1ebdn yaa pipi n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n lebg n wa ne a n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n-r\u0269k n yaa n\n    \"\"\"\n",
        "canonical_solution":"    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n"
    },
    {
        "prompt":"\ndef multiply(a, b):\n    \"\"\"D r\u0269k makr n mak n k\u00f5: f s\u00e3 n d\u0269kd f s\u1ebdn t\u00f5e n s\u00f5d n lebg n wa n mak n lebg n wa, f na n paama f s\u1ebdn t\u00f5e n s\u00f5d n wa n lebg n wa.\n    \"\"\"\n",
        "canonical_solution":"    return abs(a % 10) * abs(b % 10)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n"
    },
    {
        "prompt":"\ndef count_upper(s):\n    \"\"\"\n    Wala makre: count_upper (('aBCdEf') lebgda 1 count_upper (('abcdefg') lebgda 0 count_upper (('dBBE') lebgda 0\n    \"\"\"\n",
        "canonical_solution":"    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For Exampleclosest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "canonical_solution":"    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n"
    },
    {
        "prompt":"\ndef make_a_pile(n):\n    \"\"\"\n    Y s\u00e3 n paam t\u0269 y s\u00f5dga s\u00f5or s\u1ebdn yaa s\u00f5ma n k\u00f5, y segd n maana kug s\u1ebdn tar n-r\u0269k n k\u00f5. Pipi r\u0269k tara kug n. Kugr\u00e3 s\u00f5or s\u1ebdn p\u028bgd r\u0269k ning s\u1ebdn p\u028bgd\u00e3 yaa: - s\u1ebdn p\u028bgd n yaa pa-s\u025bk s\u00e3 n yaa n-r\u0269k. - s\u1ebdn p\u028bgd n yaa pa-s\u025bk s\u00e3 n yaa n-r\u0269k. V\u1ebdneg n lebg n wa ne kug\u00e3 s\u00f5or r\u0269k f\u00e3a p\u028bg\u1ebd, t\u0269 elem\u1ebdt\u00e3 s\u1ebdn be n-y\u1ebdnd\u00e3 i makda kug\u00e3 s\u00f5or r\u0269k (i+1). Makre:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    return [n + 2*i for i in range(n)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef words_string(s):\n    \"\"\"\n    Y na n paama gom-biis s\u1ebdn welg ne v\u025brse-r\u00e3mb b\u0269 z\u0129-z\u00e3rs n k\u00f5-y. Y t\u028b\u028bmda yaa y welg gom-biis\u00e3 n lebg gom-biis s\u1ebdn yaa s\u00f5or w\u028bsgo. Wala makre: words_string ((\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] words_string ((\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
        "canonical_solution":"    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n"
    },
    {
        "prompt":"\ndef choose_num(x, y):\n    \"\"\"F\u00f5n-k\u00e3ng r\u0269kda s\u00f5or a yiib s\u1ebdn yaa s\u00f5ma x la y n lebg n wa ne s\u00f5or s\u1ebdn yaa s\u00f5ma n y\u0269\u0269d s\u1ebdn be zuloees a yiib p\u028bg\u1ebd [x, y] s\u1ebdn k\u1ebded ne b f\u00e3a. S\u00e3 n pa be s\u00f5or a woto, f\u00f5n-k\u00e3ng segd n lebg n wa ne -1. Wala makre: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1\n    \"\"\"\n",
        "canonical_solution":"    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n"
    },
    {
        "prompt":"\ndef rounded_avg(n, m):\n    \"\"\"B k\u00f5-y-la s\u00f5or a yiib s\u1ebdn yaa s\u00f5ma n paas m, t\u0269 y t\u028b\u028bmd yaa y b\u00e3ng s\u00f5or a yiib\u00e3 s\u1ebdn yaa s\u00f5ma n ta m (n la m s\u1ebdn naag taab) s\u1ebdn zems to-to. Y na n wa ne s\u00f5or s\u1ebdn zems n ta a s\u1ebdn kolg n ta w\u00e3 n lebg n lebg a yiib-n-soab s\u00f5ore. S\u00e3 n yaa n y\u0269\u0269d m, lebg n wa ne -1. Makre: rounded_avg(1, 5) => \"0b11\" rounded_avg(7, 5) => -1 rounded_avg(10, 20) => \"0b1111\" rounded_avg(20, => 33) \"0b11010\"\n    \"\"\"\n",
        "canonical_solution":"    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation\/(m - n + 1)))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n"
    },
    {
        "prompt":"\ndef unique_digits(x):\n    \"\"\"D s\u00e3 n k\u00f5 s\u00f5or s\u1ebdn yaa s\u00f5ma, d na n lebg n wa ne s\u00f5or s\u1ebdn yaa s\u00f5ma n pa tar s\u00f5or s\u1ebdn yaa s\u00f5ma ye.\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "canonical_solution":"    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef by_length(arr):\n    \"\"\"\n    D s\u00e3 n k\u00f5-a s\u00f5or s\u1ebdn yaa s\u00f5or s\u1ebdn yaa z\u00e3ng, d na n welga s\u00f5or nins s\u1ebdn be 1 ne 9 w\u00e3, n lebg n welg s\u00f5or ning s\u1ebdn wa ne w\u00e3, la d lebs n ledg s\u00f5or f\u00e3a ne a y\u028b\u028br s\u1ebdn zems ne a soab\u00e3, wala makre: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sor-y arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> sor-y arr -> [8, 5, 4, 3, 2, 2, 1, 1] lebg n wa [\"W\u0269t\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"] S\u00e3 n yaa t\u0269 s\u00f5or s\u1ebdn yaa faag\u00e3, lebg n wa ne s\u00f5or s\u1ebdn yaa faag\u00e3: arr = [] lebg n wa [] S\u00e3 n yaa t\u0269 s\u00f5or s\u1ebdn yaa faag\u00e3 bee s\u00f5or s\u1ebdn pa zems ne a soab\u00e3: arr =\n    \"\"\"\n",
        "canonical_solution":"    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n"
    },
    {
        "prompt":"\ndef f(n):\n    \"\"\" D r\u0269k f s\u1ebdn d\u0269kd n n y\u0269 wa param\u025bt n lebg n wa ne s\u00f5or s\u1ebdn yaa n, t\u0269 f s\u00e3 n get t\u0269 f s\u1ebdn get i w\u00e3 yaa i s\u1ebdn yaa f\u0269toriy\u025bll\u00e3, f s\u00e3 n get t'a yaa pa-yembr b\u0269 f s\u00e3 n get t\u0269 f yaa s\u00f5or s\u1ebdn naag n ta 1 n ta i. f s\u00e3 n pa-yembr n s\u0269ng ne 1 n na n lebg n wa. f f\u0269toriy\u025bll\u00e3 yaa s\u00f5or s\u1ebdn yikd 1 n ta i (1 * 2 *... * i). Makre: f (x) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "canonical_solution":"    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n"
    },
    {
        "prompt":"\ndef even_odd_palindrome(n):\n    \"\"\"\n    S\u00e3 n k\u00f5-a nimero s\u1ebdn yaa s\u00f5ma n k\u00f5, a lebsa tuple s\u1ebdn tar nimero s\u1ebdn yaa toor-toor la s\u1ebdn yaa toor-toor palindrom s\u1ebdn be z\u0129ig a yembr p\u028bg\u1ebd. Makre1: R\u0269k-y: 3 R\u0269k-y: (1, 2) Wilgr: Palindrom s\u1ebdn yaa s\u00f5ma yaa 1, 2, 3. a yembr yaa toor-toore, la a yiib yaa toor-toore. Makre2: R\u0269k-y: (4, 6) Wilgr: Palindrom s\u1ebdn yaa s\u00f5ma yaa 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. a naas\u00e3 yaa toor-toore, la a 6 yaa toor-toore.\n    \"\"\"\n",
        "canonical_solution":"    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef count_nums(arr):\n    \"\"\"\n    G\u028bls t\u0269 count_nums yaa t\u028b\u028bm-noor s\u1ebdn d\u0269kd nimero r\u00e3mb n lebg n wat ne nimero r\u00e3mb s\u00f5or s\u1ebdn tar nimero r\u00e3mb s\u00f5or s\u1ebdn y\u0269\u0269d 0. S\u00e3 n yaa nimero s\u1ebdn yaa w\u1ebdnga, a pipi nimero s\u1ebdn be ne a b\u00e3nd na n y\u0269\u0269 w\u1ebdnga: wala makre, -123 tara nimero r\u00e3mb s\u1ebdn be ne a b\u00e3nd -1, 2, la 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef move_one_ball(arr):\n    \"\"\"D tara 'arr' s\u1ebdn tar nimero r\u00e3mb N arr[1], arr[2],..., arr[N]. B na n k\u0269tame t\u0269 nimero r\u00e3mb nins s\u1ebdn be a p\u028bg\u1ebd w\u00e3 y\u0269 ne sor s\u1ebdn pa t\u0169 ne sor s\u1ebdn t\u0169 ne sor\u00e3. Y t\u028b\u028bmda yaa n b\u00e3ng y s\u00e3 n t\u00f5e n k\u0269tame t\u0269 sull\u00e3 welg n y\u0269ll n pa boogd n t\u0169 ne t\u028b\u028bm-k\u00e3ng\u00e3 s\u1ebdn p\u028bgd\u00e3: y t\u00f5e n maana s\u1ebdn zems naoor w\u028bsgo. Z\u0129ig s\u1ebdn k\u1ebded ne r\u0269tg n k\u1ebdnd t\u028b\u028bmde rat n yeelame t\u0269 y na n k\u0269tame t\u0269 sull\u00e3 f\u00e3a toeem n lebg n ta z\u0129ig a ye s\u1ebdn zems sor\u00e3 s\u1ebdn zems\u00e3. Z\u0129ig s\u1ebdn p\u028bgl n na n k\u1ebded ne sull\u00e3 na n k\u1ebde z\u0129ig ning b s\u1ebdn s\u0269ng ne sull\u00e3 s\u1ebdn yaa 0 soab\u00e3. S\u00e3 n yaa t\u0269 y t\u00f5e n paam sull\u00e3 s\u1ebdn welg n t\u0169 ne t\u028b\u028bm-k\u00e3ng\u00e3 s\u1ebdn be a zug\u1ebd w\u00e3, lebg n wa True, s\u00e3 n pa woto lebg\n                \n    \"\"\"\n",
        "canonical_solution":"    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n"
    },
    {
        "prompt":"\ndef exchange(lst1, lst2):\n    \"\"\"Y s\u00e3 n t\u00f5e n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n\n    \"\"\"\n",
        "canonical_solution":"    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n"
    },
    {
        "prompt":"\ndef histogram(test):\n    \"\"\"D s\u00e3 n paam t\u0269 b k\u00f5-d-la s\u00f5or s\u1ebdn yaa wa l\u025btr s\u1ebdn be z\u0129-z\u0129ig n welg-a, d na n lebg n k\u00f5-a-la s\u1ebdn y\u0269ll t\u0269 b lebg n g\u028bls-a w\u00e3. D s\u00e3 n paam t\u0269 l\u025btr a w\u00e3n n y\u0269ll n g\u028bls-a, d na n lebg n k\u00f5-a-la f\u00e3a.\n\n    \"\"\"\n",
        "canonical_solution":"    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef reverse_delete(s,c):\n    \"\"\"D s\u00e3 n k\u00f5-y s\u00f5or-b\u00e3mb a yiib s\u1ebdn yaa s la c, y tog n yiisa s\u00f5or-b\u00e3mb nins s\u1ebdn be s w\u00e3 s\u1ebdn zem ne s\u00f5or-b\u00e3mb nins s\u1ebdn be c w\u00e3 f\u00e3a, la y ges s\u00e3 n mikame t\u0269 s\u00f5or-b\u00e3mb nins s\u1ebdn be s w\u00e3 yaa s\u1ebdn zems ne s\u00f5or-b\u00e3mb nins s\u1ebdn be c w\u00e3. B boondame t\u0269 s\u00f5or-b\u00e3mb s\u1ebdn yaa s\u1ebdn zems ne s\u00f5or-b\u00e3mb nins s\u1ebdn be c w\u00e3 s\u00e3 n yaa s\u1ebdn zems ne s\u1ebdn be c w\u00e3. Y tog n lebg n waa ne s\u00f5or-b\u00e3mb nins s\u1ebdn be s w\u00e3 s\u1ebdn yaa s\u1ebdn zems ne s\u00f5or-b\u00e3mb nins s\u1ebdn be n leb poor\u1ebd w\u00e3. Y tog n lebg n waa ne s\u00f5or-b\u00e3mb s\u1ebdn tar s\u00f5or-b\u00e3mb nins s\u1ebdn yaa s\u1ebdn zems ne s\u1ebdn be n leb poor\u1ebd w\u00e3 la s\u1ebdn yaa s\u1ebdn zems ne s\u1ebdn be n leb poor\u1ebd w\u00e3.\n    \"\"\"\n",
        "canonical_solution":"    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test":"def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n"
    },
    {
        "prompt":"\ndef odd_count(lst):\n    \"\"\"B s\u00e3 n k\u00f5-y s\u00f5or s\u1ebdn yaa s\u00f5or bala, t\u0269 s\u00f5or f\u00e3a yaa s\u00f5or bala, lebg n wa ne s\u00f5or-k\u00e3ng. S\u00f5or f\u00e3a i s\u1ebdn yaa r\u1ebdnd segd n y\u0269\u0269 \" s\u00f5or s\u1ebdn yaa toor-toor\u00e3 s\u1ebdn be s\u00f5or i s\u1ebdn yaa r\u1ebdnd\u00e3 p\u028bg\u1ebd. \"\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "canonical_solution":"    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minSubArraySum(nums):\n    \"\"\"\n    D s\u00e3 n k\u00f5-a a nimero r\u00e3mb s\u00f5or s\u1ebdn yaa z\u00e3ng\u00e3, d na n baoo a nimero r\u00e3mb s\u00f5or s\u1ebdn pa y\u0269lem f\u00e3a s\u00f5or s\u1ebdn yaa z\u00e3ng\u00e3.\n    \"\"\"\n",
        "canonical_solution":"    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n"
    },
    {
        "prompt":"\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    B k\u00f5-y-la b\u0129is a yiib s\u1ebdn yaa wa r\u028b\u028bd s\u1ebdn yaa wa r\u028b\u028bd s\u1ebdn yaa wa r\u028b\u028bd a ye. R\u0269k a yembr makda b\u0129is a ye, la r\u028b\u028bd a yembr makda koom a ye. B\u0129is f\u00e3a tara b\u0129is s\u1ebdn zems s\u1ebdn t\u00f5e n d\u0269k koom n yiis be, la b\u0129is f\u00e3a tara p\u00e3ng s\u1ebdn yaa a yembre. Y t\u028b\u028bmd yaa y t\u0169nug ne b\u0129is\u00e3 n k\u028b\u0269l b\u0129is\u00e3. R\u0269k naoor nins y s\u1ebdn segd n sik b\u0129is\u00e3. Makre: 1: R\u0269k-y: r\u028b\u028bd: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 R\u0269k-y: 6 R\u0269k-y: r\u028b\u028bd: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,\n    \"\"\"\n",
        "canonical_solution":"    return sum([math.ceil(sum(arr)\/capacity) for arr in grid])\n",
        "test":"def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef sort_array(arr):\n    \"\"\"\n    B s\u1ebdn boond t\u0269 Kata w\u00e3, yaa t\u0269l\u025b t\u0269 y welg s\u00f5or s\u1ebdn pa zuloes n zems ne a yembr s\u00f5or s\u1ebdn zems ne a yiib s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yiib s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a yembr s\u00f5or s\u1ebdn zems ne a\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef select_words(s, n):\n    \"\"\"S\u00e3n n yaa t\u0269 b k\u00f5-y-la s\u00f5or s\u1ebdn yaa s la n yaa nimero, b k\u00f5-y-la t\u028b\u028bmde n na n lebg n wa ne gom-biis nins f\u00e3a s\u1ebdn be s-r\u0269k\u1ebd w\u00e3 s\u1ebdn tar t\u0269-biis n-yende, s\u1ebdn na y\u0269l t\u0269 gom-biisa f\u00e3a z\u0129nd s-r\u0269k\u1ebd w\u00e3. S-r\u0269k\u1ebd w\u00e3 s\u00e3 n yaa zaalem, t\u028b\u028bmda segd n lebg n wa ne s\u00f5or s\u1ebdn pa zaalem.\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n"
    },
    {
        "prompt":"\ndef get_closest_vowel(word):\n    \"\"\"B k\u00f5-y-la gomde. Y t\u028b\u028bmda yaa y\u00e3ag vokaal s\u1ebdn p\u1ebd-a n y\u0269\u0269d s\u1ebdn be vokaal a yiib s\u028bka s\u1ebdn yit gomd\u00e3 r\u0269tgo (s\u1ebdn yaa s\u1ebdn zems ne vokaal-r\u00e3mb s\u1ebdn yaa to-to w\u00e3). Vokaal-r\u00e3mb s\u1ebdn be s\u0269ngr\u1ebd la s\u1ebdn wat n baasd\u1ebd w\u00e3 pa get ye. Lebg-y vokaal-r\u00e3mb s\u1ebdn pa be be s\u00e3 n yaa t\u0269 zemsa ne s\u1ebdn be y\u0129ngr\u00e3. Y t\u00f5e n tagsame t\u0269 vokaal-r\u00e3mb nins b s\u1ebdn k\u00f5 w\u00e3 tara \u00e3ngilind l\u025bt\u025b\u025br bala. Makre: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"UULL\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\n    \"\"\"\n",
        "canonical_solution":"    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "canonical_solution":"    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n"
    },
    {
        "prompt":"\ndef maximum(arr, k):\n    \"\"\"\n    D s\u00e3 n k\u00f5-a ar\u0269l s\u1ebdn tar nimero r\u00e3mb la nimero r\u00e3mb s\u1ebdn yaa s\u00f5ma, d na n lebg n wa ne s\u00f5or s\u1ebdn yaa s\u00f5ma n tar woglem k s\u1ebdn tar n y\u0269\u0269d k nimero r\u00e3mb s\u1ebdn be ar\u0269l p\u028bg\u1ebd. Makre: 1. R\u0269k-y: arr = [-3, -4, 5], k = 3 R\u0269k-y: [-4, -3, 5] Makre: 2. R\u0269k-y: arr = [4, -4, 4], k = 2 R\u0269k-y: [4, 4] Makre: 3. R\u0269k-y: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 R\u0269k-y: [2] B\u00e3ngre: 1. Ar\u0269l-g\u00e3nga woglem na n y\u0269\u0269 [1, 1000]. 2. Ar\u0269l-g\u00e3nga elem-r\u00e3mb na n y\u0269\u0269 [-1000, 1000]. 3. 0 <= k <\n    \"\"\"\n",
        "canonical_solution":"    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n"
    },
    {
        "prompt":"\ndef solution(lst):\n    \"\"\"D s\u00e3 n k\u00f5 s\u00f5or s\u1ebdn pa zaalem, d na n leoka b\u0169mb ning s\u1ebdn be a p\u028bg\u1ebd w\u00e3 s\u00f5or s\u1ebdn yaa zuloees n be a p\u028bg\u1ebd.\n    \"\"\"\n",
        "canonical_solution":"    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n"
    },
    {
        "prompt":"\ndef add_elements(arr, k):\n    \"\"\"\n    D s\u00e3 n k\u00f5 t\u0269 yaa s\u00f5or s\u1ebdn pa zaalem s\u1ebdn yaa s\u00f5or s\u1ebdn yaa z\u00e3ng n yaa arr la s\u00f5or s\u1ebdn yaa z\u00e3ng n yaa k, lebg n wa ne s\u00f5or ning s\u1ebdn yaa \u00e3rm\u00e3 r\u00e3mb s\u1ebdn tar s\u00f5or s\u1ebdn yaa pipi k w\u00e3 s\u1ebdn yaa \u00e3rm\u00e3 r\u00e3mb n y\u0269\u0269d a yiib\u00e3. Makre: S\u00f5ngr: arr = [111,21,3,4000,5,6,7,8,9], k = 4 S\u00f5ngr: 24 # s\u00f5or s\u1ebdn yaa 21 + 3 S\u00e3n-s\u00e3ams: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\n    \"\"\"\n",
        "canonical_solution":"    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef get_odd_collatz(n):\n    \"\"\"\n    S\u00e3 n k\u00f5-y s\u00f5or s\u1ebdn yaa s\u00f5ma n k\u00f5, lebg n wa ne s\u00f5or s\u1ebdn be ne s\u00f5or s\u1ebdn pa zems n p\u028bgl Collatz. Collatz tags-taab yaa b\u00e3ngr\u00e3 s\u1ebdn k\u1ebded ne s\u00f5or s\u1ebdn p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028bgl n p\u028b\n    \"\"\"\n",
        "canonical_solution":"    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n\/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef valid_date(date):\n    \"\"\"Y segd n g\u028blsa t\u028b\u028bm-noor s\u1ebdn na n wilg t\u0269 daar\u00e3 yaa s\u0269d t'a s\u00e3 n yaa s\u0269da, s\u00e3 n pa woto, a lebgda z\u0129r\u0129. Daar\u00e3 yaa s\u0269da, s\u00e3 n yaa t\u0269 noy nins s\u1ebdn p\u028bgd\u00e3 f\u00e3a la b t\u0169uda: 1. Daar\u00e3 pa zaalem ye. 2. Daar\u00e3 s\u00f5or pa y\u0269\u0269d rasem 31 kiis a 1, 3, 5, 7, 8, 10, 12 p\u028bg\u1ebd, la kiis a 4, 6, 9, 11 p\u028bg\u1ebd, a pa y\u0269\u0269d rasem 30 kiis a 1 p\u028bg\u1ebd, la kiis a 29 p\u028bg\u1ebd.\n    \"\"\"\n",
        "canonical_solution":"    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n"
    },
    {
        "prompt":"\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "canonical_solution":"    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test":"def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n"
    },
    {
        "prompt":"\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5]) \u00e2 -> False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u00e2 -> False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u00e2 -> True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u00e2 -> False\n    '''\n",
        "canonical_solution":"    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef intersection(interval1, interval2):\n    \"\"\"B k\u00f5-y-la seg-taab a yiib t\u0269 seg-taab f\u00e3a yaa s\u00f5or a yiib s\u1ebdn yaa toor-toore. Wala makre, seg-taab = (d s\u0269ngre, d baasg) = (1, 2). Seg-taab nins s\u1ebdn k\u00f5 w\u00e3 yaa k\u028b\u0269tba, s\u1ebdn dat n yeel t\u0269 seg-taab (d s\u0269ngre, d baasg) w\u00e3 naaga s\u0269ngr la saab f\u00e3a. Seg-taab f\u00e3a p\u028bg\u1ebd, b tagsdame t\u0269 a s\u0269ngr yaa bilf n y\u0269\u0269d a baasg b\u0269 a zem a baasg. Y t\u028b\u028bmd yaa n b\u00e3ng t\u0269 seg-taab a yiib\u00e3 s\u1ebdn k\u1ebded ne taab woglem yaa s\u00f5or a yembr s\u1ebdn yaa pipi. Wala makre, seg-taab a yiib\u00e3 (1, 3), (2, 4) s\u1ebdn k\u1ebded ne taab woglem yaa (2, 3) t\u0269 b woglem yaa 1, s\u1ebdn pa pipi s\u00f5or ye. S\u00e3 n yaa t\u0269 seg-taab\u00e3 woglem yaa pipi\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n"
    },
    {
        "prompt":"\ndef prod_signs(arr):\n    \"\"\"\n    B k\u00f5-y-la s\u00f5or s\u1ebdn yaa zuloees n k\u00f5-y t\u0269 y lebg n wa ne s\u00f5or s\u1ebdn yaa zuloees n paas n paas n paas n lebg n wa ne s\u00f5or s\u1ebdn yaa zuloees n k\u00f5-y t\u0269 y lebg n wa ne a s\u1ebdn yaa zuloees n k\u00f5-y t\u0269 y lebg n wa ne a soaba.\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "canonical_solution":"    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minPath(grid, k):\n    \"\"\"\n    Y s\u00e3 n paam nids s\u1ebdn tar n-y\u1ebdg la n-b\u00f5n-y\u1ebdg (N >= 2) la s\u1ebdn tar n-y\u1ebdg s\u1ebdn yaa s\u00f5ma, a soab f\u00e3a tara a y\u00f5odo. Y s\u00e3 n y\u00e3 n-y\u1ebdg f\u00e3a s\u1ebdn be [1, N * N] p\u028bg\u1ebd, a soab f\u00e3a bee a soab p\u028bg\u1ebd vugr bala. Y segd n y\u00e3 n-y\u1ebdg s\u1ebdn yaa s\u00f5ma n y\u0269\u0269d a soab f\u00e3a s\u1ebdn yaa s\u00f5ma n ta a soab f\u00e3a. Y t\u00f5e n yii sel buud f\u00e3a, la y t\u00f5e n k\u1ebdnga sel nins s\u1ebdn p\u1ebd-a w\u00e3 f\u00e3a p\u028bg\u1ebd, s\u1ebdn dat n yeel t\u0269 y t\u00f5e n k\u1ebde sel nins s\u1ebdn be a soab p\u028bg\u1ebd w\u00e3. Y s\u00e3 n y\u00e3 n-y\u1ebdg s\u1ebdn yaa s\u00f5ma n ta a soab f\u00e3a, yaa t\u0269l\u025b t\u0269 y k\u1ebd sel k (s\u1ebdn pa segd n y\u0269 toor-toore). Y Y YET n pa t\u00f5e n yi n-y\u1ebdg\n    \"\"\"\n",
        "canonical_solution":"    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n"
    },
    {
        "prompt":"\ndef tri(n):\n    \"\"\"Neb\u00e3 f\u00e3a mii Fibonacci s\u00f5or\u00e3, b z\u00e3msa a yell w\u028bsg y\u028b\u028bm kob-g\u0129nd a yiib s\u1ebdn loog\u00e3 p\u028bg\u1ebd. La b\u0169mb ning neb\u00e3 s\u1ebdn pa mi yaa Tribonacci s\u00f5or\u00e3. B bilgda Tribonacci s\u00f5or\u00e3 ne s\u1ebdn wat n lebg n lebg n wa: tri(1) = 3 tri(n) = 1 + n \/ 2, s\u00e3 n yaa t\u0269 n yaa pa-yende. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), s\u00e3 n yaa t\u0269 n yaa pa-yende. Wala makre: tri(2) = 1 + (2 \/ 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 B k\u00f5-y-la s\u00f5or s\u1ebdn pa-b s\u1ebdn pa-b s\u1ebdn pa-b s\u1ebdn pa-b s\u1ebdn pa-b s\u1ebdn pa-b s\u1ebdn pa-\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i \/ 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) \/ 2)\n    return my_tri\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n"
    },
    {
        "prompt":"\ndef digits(n):\n    \"\"\"D s\u00e3 n k\u00f5 s\u00f5or s\u1ebdn yaa s\u00f5ma n lebg n wa ne a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab f\u00e3a s\u1ebdn yaa a soab\n    \"\"\"\n",
        "canonical_solution":"    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n"
    },
    {
        "prompt":"\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u00e2 -> True\n    is_nested('[]]]]]]][[[[[]') \u00e2 -> False\n    is_nested('[][]') \u00e2 -> False\n    is_nested('[]') \u00e2 -> False\n    is_nested('[[][]]') \u00e2 -> True\n    is_nested('[[]][[') \u00e2 -> True\n    '''\n",
        "canonical_solution":"    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n"
    },
    {
        "prompt":"\n\ndef sum_squares(lst):\n    \"\"\"B k\u00f5-y-la s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5or s\u00f5\n    \n\n    \"\"\"\n",
        "canonical_solution":"    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u00e2 -> True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"\") \u00e2 -> False \n    '''\n",
        "canonical_solution":" \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef can_arrange(arr):\n    \"\"\"Na n wa ne t\u028b\u028bm-noor s\u1ebdn na n lebg n wa ne b\u0169mb ning s\u1ebdn yaa k\u00e3seng n y\u0269\u0269d s\u1ebdn nan pa ta a soab s\u1ebdn nan pa ta-a w\u00e3. S\u00e3 n pa be b\u0169mb a woto, lebg n wa ne -1.\n    \"\"\"\n",
        "canonical_solution":"    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n"
    },
    {
        "prompt":"\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "canonical_solution":"    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n"
    },
    {
        "prompt":"\ndef compare_one(a, b):\n    \"\"\"\n    B na n maana t\u028b\u028bm-noor s\u1ebdn na n d\u0269k nimero r\u00e3mb s\u1ebdn yaa zuloees b\u0269 n lebg n wa ne nimero r\u00e3mb s\u1ebdn yaa zuloees n lebg n wa ne s\u1ebdn yaa zuloees n y\u0269\u0269d a s\u1ebdn k\u00f5-a w\u00e3. B s\u00e3 n lebg n wa ne a ye, yaa t\u0269l\u025b t\u0269 b lebg n wa ne a ye.\n    \"\"\"\n",
        "canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_equal_to_sum_even(n):\n    \"\"\"Ges-y n ges y s\u00e3 n t\u00f5e n g\u028blsa s\u00f5or n k\u00f5 w\u00e3 t\u0269 y\u0269 s\u00f5or s\u1ebdn yaa toor-toore, n yaa s\u00f5or s\u1ebdn yaa toor-toore. Makr yaa: is_equal_to_sum_even (a) (4) == Ziri yaa: is_equal_to_sum_even (b) (6) == Ziri yaa: is_equal_to_sum_even (b) (8) == Yaa s\u0269da\n    \"\"\"\n",
        "canonical_solution":"    return n%2 == 0 and n >= 8\n",
        "test":"def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n"
    },
    {
        "prompt":"\ndef special_factorial(n):\n    \"\"\"B s\u1ebdn boond t\u0269 Braziil r\u00e3mb s\u1ebdn yaa yel-b\u0169nd\u00e3 yaa: braziil_factoire (n) = n! * (n-1)! * (n-2)! *... * 1! z\u0129ig ning n > 0 Wala makre:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "canonical_solution":"    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n"
    },
    {
        "prompt":"\ndef fix_spaces(text):\n    \"\"\"\n    Y s\u00e3 n paam n y\u00e3e v\u025brse s\u1ebdn yaa s\u00f5or-ko\u025b\u025bga, y na n ledga z\u0129-z\u00e3rs\u00e3 f\u00e3a ne v\u025brse-r\u00e3mb s\u1ebdn be t\u1ebdngre, la s\u00e3 n mikame t\u0269 v\u025brse-r\u00e3mb s\u1ebdn yaa s\u00f5or-ko\u025b\u025bga tara z\u0129-z\u00e3rs s\u1ebdn y\u0269\u0269d a yiibu, b\u0269 y ledg z\u0129-z\u00e3rs\u00e3 f\u00e3a ne - fix_spaces (((\"K\u00f5or-goam\") == \"K\u00f5or-goam\" fix_spaces (((\"K\u00f5or-goam1\") == \"K\u00f5or-goam1\" fix_spaces (((\"K\u00f5or-goam2\") == \"_K\u00f5or-goam_2\" fix_spaces (((\"K\u00f5or-goam 3\") == \"_K\u00f5or-goam-3\"\n    \"\"\"\n",
        "canonical_solution":"    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef file_name_check(file_name):\n    \"\"\"Na n wa ne t\u028b\u028bm-noor s\u1ebdn na n d\u0269k n k\u00f5 k\u00f5 file y\u028b\u028br s\u1ebdn yaa 'yes' s\u00e3 n yaa t\u0269l\u025b, la a k\u00f5 'no' s\u00e3 n pa t\u0269l\u025b. A getame t\u0269 file y\u028b\u028br yaa t\u0269l\u025b s\u00e3 n yaa t\u0269l\u025b t\u0269 la s\u00e3 n yaa t\u0269 b\u0169mb nins s\u1ebdn p\u028bgd\u00e3 f\u00e3a pidsame: - A pa segd n tall s\u00f5or s\u1ebdn y\u0269\u0269d s\u00f5or a t\u00e3ab ('0'-'9') file y\u028b\u028br p\u028bg\u1ebd ye. - A pa segd n tall dot a yembr bal '.' - Substring ning s\u1ebdn nan y\u0269ll t\u0269 dot\u00e3 z\u0129nd pa segd n y\u0269 zaalem ye, la a segd n s\u0269ng ne l\u025btr s\u1ebdn yit latin alphapet ('a'-'z' la 'A'Z'). - Substring ning s\u1ebdn p\u028bgl dot\u00e3 segd n y\u0269\u0269 a yembr s\u1ebdn be ka: ['txt', 'exe', 'lld'] Makre: file_name_check\"{example.txt\n    \"\"\"\n",
        "canonical_solution":"    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('\/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n"
    },
    {
        "prompt":"\n\n\ndef sum_squares(lst):\n    \"\"\"\" T\u028b\u028bm k\u00e3nga na n d\u0269ka s\u00f5or s\u1ebdn yaa k\u0269bay s\u1ebdn yaa k\u0269bay f\u00e3a. S\u1ebdn k\u1ebded ne k\u0269bay\u00e3 f\u00e3a, t\u028b\u028bm k\u00e3nga na n k\u0269tame t\u0269 k\u0269bay\u00e3 s\u1ebdn yaa k\u0269bay\u00e3 y\u0269 a yiib soaba s\u00e3 n yaa a s\u1ebdn yaa 3 naoor w\u028bsgo, la a na n k\u0269tame t\u0269 k\u0269bay\u00e3 s\u1ebdn yaa k\u0269bay\u00e3 y\u0269 a yiib soaba s\u00e3 n yaa a s\u1ebdn yaa 4 naoor w\u028bsgo la pa 3 naoor w\u028bsgo. T\u028b\u028bmd\u00e3 pa na n toeem k\u0269bay\u00e3 s\u1ebdn be k\u0269bay\u00e3 p\u028bg\u1ebd t\u0269 k\u0269bay\u00e3 s\u1ebdn pa 3 b\u0269 4 naoor w\u028bsgo. T\u028b\u028bmd\u00e3 na n lebg n waa ne k\u0269bay\u00e3 f\u00e3a s\u00f5or s\u1ebdn yaa k\u0269bay\u00e3. Makre: S\u00e3 n yaa t\u0269 lst = [1,2,3], t\u028b\u028bm k\u00e3nga segd n y\u0269\u0269 6 S\u00e3 n yaa t\u0269 lst = [] t\u028b\u028bm k\u00e3nga segd n y\u0269\u0269 0 S\u00e3 n yaa t\u0269 lst = [-1,-5,2,-1,-5] t\u028b\u028bm k\u00e3nga segd n y\u0269\u0269 -126\n    \"\"\"\n",
        "canonical_solution":"    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef words_in_sentence(sentence):\n    \"\"\"\n    B k\u00f5-y-la s\u00f5sg s\u1ebdn makd gom-biis a ye, la gom-biis a w\u00e3n s\u1ebdn welg ne z\u0129-zulung la y segd n lebg n wa ne s\u00f5sg s\u1ebdn naag ne gom-biis nins s\u1ebdn be pipi gom-biis\u1ebd w\u00e3, t\u0269 b woglem yaa s\u00f5or s\u1ebdn yaa pipi s\u00f5or bala, la gom-biis nins s\u1ebdn be gom-biis a to w\u00e3 sor-wilgr segd n y\u0269\u0269 wa pipi soab\u00e3. Makre1: V\u028b\u028bsem: gom-biis = \"Yaa makre\" V\u028b\u028bsem: \"yaa\" Makre2: V\u028b\u028bsem: gom-biis = \"d na n k\u1ebdnga koom\u00e3 p\u028bg\u1ebd\" V\u028b\u028bsem: \"go for\" B\u028bk-n-taar: * 1 <= len(b\u028bk) <= 100 * gom-biis\u00e3 tara l\u025bt-n-yemb bala\n    \"\"\"\n",
        "canonical_solution":"    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n"
    },
    {
        "prompt":"\ndef simplify(x, n):\n    \"\"\"Y t\u028b\u028bmda yaa f s\u1ebdn na n maan t\u028b\u028bma s\u1ebdn na n y\u0269ll n k\u0269t t\u0269 f b\u00e3ng t\u0269 f s\u1ebdn na n maan to-to n lebg n wa n lebg n wa, la f s\u00e3 n wa paam t\u0269 f s\u1ebdn na n maan to-to w\u00e3 lebg n wa, b\u0269 f lebg n wa ne f s\u1ebdn na n maan to-to n lebg n wa. f s\u00e3 n wa paam t\u0269 f s\u1ebdn na n maan to-to w\u00e3 lebg n wa ne f s\u1ebdn na n maan to-to n lebg n wa, la f s\u00e3 n pa paam t\u0269 f s\u1ebdn na n maan to-to w\u00e3 lebg n wa. f s\u00e3 n wa paam t\u0269 f s\u1ebdn na n maan to-to n lebg n wa n wa n lebg n wa, b\u0269 f lebg n wa ne f s\u1ebdn na n maan to-to n lebg n wa n wa. f s\u00e3 n paam t\u0269 f s\u1ebdn na n maan to-to n lebg n wa n wa n lebg n wa\n    \"\"\"\n",
        "canonical_solution":"    a, b = x.split(\"\/\")\n    c, d = n.split(\"\/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator\/denom == int(numerator\/denom)):\n        return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test1'\n    assert candidate(\"1\/6\", \"2\/1\") == False, 'test2'\n    assert candidate(\"5\/1\", \"3\/1\") == True, 'test3'\n    assert candidate(\"7\/10\", \"10\/2\") == False, 'test4'\n    assert candidate(\"2\/10\", \"50\/10\") == True, 'test5'\n    assert candidate(\"7\/2\", \"4\/2\") == True, 'test6'\n    assert candidate(\"11\/6\", \"6\/1\") == True, 'test7'\n    assert candidate(\"2\/3\", \"5\/2\") == False, 'test8'\n    assert candidate(\"5\/2\", \"3\/5\") == False, 'test9'\n    assert candidate(\"2\/4\", \"8\/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2\/4\", \"4\/2\") == True, 'test11'\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test12'\n    assert candidate(\"1\/5\", \"1\/5\") == False, 'test13'\n\n"
    },
    {
        "prompt":"\ndef order_by_points(nums):\n    \"\"\"\n    Seb-y t\u028b\u028bm-noor s\u1ebdn na n welg s\u00f5or s\u1ebdn p\u028b\u0269 t\u0269 b s\u00f5d-a ne s\u00f5or s\u1ebdn yikd t\u0269 b s\u00f5or s\u00f5or yaa woto.\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef specialFilter(nums):\n    \"\"\"R\u0269k t\u028b\u028bm-noor s\u1ebdn na n d\u0269k s\u00f5or s\u1ebdn yaa wa r\u1ebdnna n lebg n wa ne s\u00f5or s\u1ebdn y\u0269\u0269d 10 la s\u00f5or s\u1ebdn yaa toor-toore (1, 3, 5, 7, 9). Wala makre: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
        "canonical_solution":"    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n"
    },
    {
        "prompt":"\ndef get_max_triples(n):\n    \"\"\"\n    B k\u00f5-y-la s\u00f5or s\u1ebdn yaa s\u00f5ma n. Y segd n maana s\u00f5or s\u1ebdn yaa s\u00f5ma n. S\u1ebdn na y\u0269l n k\u00f5 i f\u00e3a (1 \u2030\u00a4 i \u2030\u00a4 n), a[i] = i * i - i + 1. Retournez le nombre de triples (a[i], a[j], a[k]) de a o\u00f9 i < j < k, et a[i] + a[j] + a[k] est un multiple de 3.\n    \"\"\"\n",
        "canonical_solution":"    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n"
    },
    {
        "prompt":"\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "canonical_solution":"    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n"
    },
    {
        "prompt":"\ndef sorted_list_sum(lst):\n    \"\"\"G\u028bls-y t\u028b\u028bm-noor s\u1ebdn deegd s\u00f5n-v\u0269\u0269s s\u00f5or wa a s\u1ebdn dat\u00e3, n yiisd s\u00f5n-v\u0269\u0269s nins s\u1ebdn pa zems woglem, la a lebgd s\u00f5or ning s\u1ebdn wa ne w\u00e3 ne sor s\u1ebdn y\u00e3k t\u0269 b s\u00f5d-a. S\u00f5or-k\u00e3ng yaa s\u00f5n-v\u0269\u0269s s\u00f5or wakat f\u00e3a, la a pa tol n yaa s\u00f5or s\u00f5or s\u00f5or ye, la a t\u00f5e n tara s\u1ebdn pa yembr ye. S\u00f5or-v\u0269\u0269s s\u00f5or\u00e3 segd n y\u0269\u0269 s\u00f5or s\u1ebdn yikd ne gom-biig f\u00e3a woglem, la y segd n lebg n talla s\u00f5or\u00e3 s\u1ebdn welg ne sor-k\u00e3ng. Gom-biis a yiib s\u00e3 n tar woglem s\u1ebdn zem taaba, b\u0269 y s\u00f5dg s\u00f5or\u00e3 ne l\u025btb\u00e3. T\u028b\u028bm-noor\u00e3 segd n lebg n talla s\u00f5n-v\u0269\u0269s s\u00f5or s\u1ebdn y\u00e3k t\u0269 b s\u00f5d-\n    \"\"\"\n",
        "canonical_solution":"    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n"
    },
    {
        "prompt":"\ndef x_or_y(n, x, y):\n    \"\"\"Yaa porgrame s\u1ebdn yaa nana, s\u1ebdn segd n lebg n k\u00f5 x s\u00e3 n yaa pipi s\u00f5or la a segd n lebg n k\u00f5 y s\u00e3 n pa woto. Makre: x_or_y{\\displaystyle x_or_y{\\displaystyle x_or_y}, 7, 34, 12) == 34 x_or_y{\\displaystyle x_or_y}, 15, 8, 5) == 5\n    \n    \"\"\"\n",
        "canonical_solution":"    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n"
    },
    {
        "prompt":"\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "canonical_solution":"    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef compare(game,guess):\n    \"\"\"D s\u00e3 n wa b\u00e3ng t\u0269 ned n wa n b\u00e3ng b\u0169mb ning s\u1ebdn wa n z\u0129nd a zug\u1ebd w\u00e3, d t\u1ebdegda r\u1ebd yelle. D s\u1ebdn mi la d s\u1ebdn tagsd b\u0169mb ning wakat k\u00e3nga, d segd n gesame n mak-a. D segd n b\u00e3nga ned s\u00e3 n togsa b\u0169mb ning s\u1ebdn wa n z\u0129nd a zug\u1ebd w\u00e3 s\u00f5ma. D na n k\u00f5-a-la koees a yiib s\u1ebdn tar nenga, t\u0269 b f\u00e3a makd taaba. D na n k\u00f5-a-la koees s\u1ebdn tar nenga, t\u0269 b f\u00e3a makd taaba. B s\u00e3 n togse, a makr\u00e3 yaa 0, t\u0269 s\u00e3 n pa woto, a makr\u00e3 yaa s\u1ebdn pa zems ne s\u1ebdn togse la s\u1ebdn togse.\n    \"\"\"\n",
        "canonical_solution":"    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"Y na n paama z\u00e3agre (sull) la s\u00f5or s\u1ebdn paasde. B na n d\u0269ka s\u00f5or s\u1ebdn paasd n ning z\u00e3agre. S\u00f5or s\u1ebdn paasd yaa woto: B basame t\u0269 CAP yaa s\u00f5or s\u1ebdn zems ne g\u00e3d-biis nins s\u1ebdn be z\u00e3agr\u00e3 y\u028b\u028br p\u028bg\u1ebd w\u00e3, la b bas t\u0269 SM yaa s\u00f5or s\u1ebdn zems ne g\u00e3d-biis nins s\u1ebdn be g\u00e3d-biis nins s\u1ebdn be z\u00e3agr\u00e3 y\u028b\u028br p\u028bg\u1ebd w\u00e3, p\u00e3ng ning b s\u1ebdn k\u00f5 ne z\u00e3agr\u00e3 yaa CAP - SM. Y segd n y\u00e3ka z\u00e3agr\u00e3 s\u1ebdn yaa k\u00e3n-k\u00e3e n lebg n wa ne s\u00f5or s\u1ebdn yaa woto: ClassName.StrongestExtensionName. S\u00e3 n yaa t\u0269 z\u00e3agr\u00e3 s\u1ebdn tar p\u00e3ng a yembr yaa yiib b\u0269 s\u1ebdn y\u0269\u0269d a taaba, y segd n y\u00e3ka soab ning s\u1ebdn y\u0269 pipi n z\u0129nd s\u00f5or\u00e3 p\u028bg\u1ebd w\u00e3. Wala makre, y s\u00e3 n k\u00f5 \"\n    \"\"\"\n",
        "canonical_solution":"    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n"
    },
    {
        "prompt":"\ndef cycpattern_check(a , b):\n    \"\"\"B k\u00f5-y-la gom-biis a yiibu. Y segd n lebg n wa ne True s\u00e3 n yaa gom-biis a yiib soab\u00e3 b\u0269 a s\u1ebdn lebg n wa w\u00e3 yaa s\u00f5or s\u1ebdn pa yembr ne pipi gom-bi-k\u00e3ng cycpattern_check(\"abcd\",\"abd\") => False cycpattern_check(\"hello\",\"ell\") => True cycpattern_check(\"whassup\",\"psus\") => False cycpattern_check\"abab\",\"baa\") => True cycpattern_check(\"efef\",\"eeff\") => False cycpattern_check\"(hims\",\"simen\") => True\n\n    \"\"\"\n",
        "canonical_solution":"    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n"
    },
    {
        "prompt":"\ndef even_odd_count(num):\n    \"\"\"D s\u00e3 n k\u00f5 s\u00f5or s\u1ebdn yaa z\u00e3ng, d na n lebg n wa ne s\u00f5or s\u1ebdn yaa zuloees la zuloees n k\u00f5.\n    \"\"\"\n",
        "canonical_solution":"    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef int_to_mini_roman(number):\n    \"\"\"\n    B s\u00e3 n k\u00f5-y s\u00f5or s\u1ebdn yaa s\u00f5ma, b\u0269 y bao a s\u1ebdn zem ne Rom s\u00f5or s\u1ebdn yaa wa s\u00f5or s\u1ebdn yaa s\u00f5ma n lebg n wa ne-a ne s\u00f5or s\u1ebdn yaa bilfr bala.\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "canonical_solution":"    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number \/\/ num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "canonical_solution":"    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n"
    },
    {
        "prompt":"\ndef find_max(words):\n    \"\"\"G\u028bls-y t\u028b\u028bm-noor s\u1ebdn deegd s\u00f5n-v\u0269\u0269s s\u00f5or s\u1ebdn yaa toor-toore. S\u00f5ngr\u00e3 tara gom-biis toor-toore. S\u00e3 n yaa s\u00f5n-v\u0269\u0269s n tar s\u00f5n-v\u0269\u0269s s\u00f5or s\u1ebdn yaa toor-toore, lebg n wa ne s\u1ebdn y\u0269 pipi w\u00e3 s\u1ebdn t\u0169 ne gom-biis s\u00f5or s\u1ebdn yaa toor-toore. find_max (([\"name\", \"of\", \"string\"]) == \"string\" find_max (([\"name\", \"enam\", \"game\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\", \"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
        "canonical_solution":"    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n"
    },
    {
        "prompt":"\ndef eat(number, need, remaining):\n    \"\"\"\n    Y\u00e3mb yaa b\u00f5ang kom s\u1ebdn tar n zoe n d\u0269t k\u028b\u0269l-koom s\u00f5or s\u1ebdn zems, la mas\u00e3, y segd n d\u0269ka k\u028b\u0269l-koom n paase, n na n pids daar\u00e3 r\u0269\u0269b s\u00f5ore. Y segd n lebg n wa ne s\u00f5or s\u1ebdn yaa [ k\u028b\u0269l-koom s\u00f5or s\u1ebdn d\u0269t r\u0269\u0269b\u00e3 poore, k\u028b\u0269l-koom s\u00f5or s\u1ebdn ket r\u0269\u0269b\u00e3 poore ] s\u00e3 n pa tar k\u028b\u0269l-koom s\u1ebdn kell\u00e3, y na n d\u0269ka k\u028b\u0269l-koom nins s\u1ebdn kell\u00e3 f\u00e3a, la y na n ket n tara kom. Makre: * r\u0269ka ((5, 6, 10) -> [11, 4] * r\u0269ka ((4, 8, 9) -> [12, 1] * r\u0269ka ((1, 10, 10) -> [11, 0] * r\u0269ka ((2, 11, 5) -> [7, 0] Variables: @number: int\u00e9rieur:\n    \"\"\"\n",
        "canonical_solution":"    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef do_algebra(operator, operand):\n    \"\"\"\n    B k\u00f5-d-la s\u00f5or a yiib s\u1ebdn wilgd t\u0269 b t\u00f5e n maana t\u028b\u028bm-noy n k\u00f5-d t\u0269 b t\u00f5og n maan t\u0269 b b\u00e3ng t\u0269 b s\u1ebdn maand b\u0169mb ning\u00e3 yaa b\u0169mb s\u1ebdn pa t\u0169 ne nimero. B k\u00f5-d-la s\u00f5or a yiib s\u1ebdn wilgd t\u0269 b t\u00f5e n maana b\u0169mb ning n k\u00f5-d t\u0269 d b\u00e3ng t\u0269 d s\u1ebdn maand b\u0169mb ning\u00e3 yaa b\u0169mb s\u1ebdn pa t\u0169 ne nimero. B k\u00f5-d-la s\u00f5or a yiib s\u1ebdn wilgd t\u0269 b t\u00f5e n maan b\u0169mb ning n k\u00f5-d t\u0269 d b\u00e3ng t\u0269 d s\u1ebdn maand b\u0169mb ning\u00e3 yaa b\u0169mb s\u1ebdn pa t\u0169 ne nimero. B k\u00f5-d-la s\u00f5or a yiib s\u1ebdn wilgd t\u0269 d t\u00f5e n maan b\u0169mb ning n k\u00f5-d t\u0269 d b\u00e3ng t\u0269 d s\u1ebdn maand b\u0169mb ning\u00e3 yaa b\u0169mb s\u1ebdn pa t\u0169 ne nimero. B k\u00f5-d-la s\u00f5or a yiib s\u1ebdn wilgd t\u0269 d t\u00f5e n maan b\u0169mb ning n k\u00f5-d t\u0269 d b\u00e3ng t\u0269 d\n\n    \"\"\"\n",
        "canonical_solution":"    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['\/\/', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(s):\n    \"\"\"B k\u00f5-y-la s\u00f5n-v\u00e3oogo s. s\u00e3 n yaa l\u025btbr b\u0269 y tek a s\u1ebdn be z\u0129ig ning n lebg n wa a s\u1ebdn be\u1ebd w\u00e3, s\u00e3 n pa r\u1ebd b\u0269 y bas-a a s\u1ebdn be\u1ebd w\u00e3. S\u00e3 n pa be l\u025btbr ye, b\u0269 y tek s\u00f5n-v\u00e3oogo. F\u00f5n-s\u025bk\u00e3 segd n lebg n waa ne s\u00f5n-v\u00e3oog ning s\u1ebdn wa ne w\u00e3. Makr sol{\\displaystyle \\{\\displaystyle \\{\\displaystyle \\{\\displaystyle \\{\\displaystyle \\{\\mathrm {A} } } = \"4321\" sol{\\displaystyle \\{\\displaystyle \\{\\mathrm {A} } \"ab\") = \"AB\" sol{\\displaystyle \\{\\mathrm {A} } \"} \"\n    \"\"\"\n",
        "canonical_solution":"    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef string_to_md5(text):\n    \"\"\"\n    S\u00e3 n k\u00f5-y 'text' s\u1ebdn yaa s\u00f5or-ko\u025b\u025bga, lebg-y a md5 s\u1ebdn yaa s\u00f5or-ko\u025b\u025bga. S\u00e3 n yaa t\u0269 'text' yaa s\u00f5or-ko\u025b\u025bga s\u1ebdn pa be, lebg-y None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "canonical_solution":"    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef generate_integers(a, b):\n    \"\"\"\n    D s\u00e3 n k\u00f5 s\u00f5or s\u1ebdn yaa s\u00f5ma a la b, d na n lebg n wa ne s\u00f5or s\u1ebdn yaa s\u00f5ma a la b s\u028bka, n wa ne sor s\u1ebdn z\u1ebdkd\u1ebd. Wala makre: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => []\n    \"\"\"\n",
        "canonical_solution":"    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    }
]