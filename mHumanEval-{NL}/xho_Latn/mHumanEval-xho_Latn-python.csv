task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,xho_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Khangela ukuba kuluhlu olunikiweyo lwamanani, ngaba kukho amanani amabini asondelelene kunomda onikiweyo. Umzekelo: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,xho_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Input kulo msebenzi ngumtya oqukethe amaqela amaninzi amakhonkco ahleliweyo. Injongo yakho kukwahlula loo maqela abe yimigca eyahlukeneyo kwaye ubuyisele uluhlu lwazo. Amaqela ahlukeneyo alinganiselwe (umgca ngamnye ovulekileyo uvaliwe ngokufanelekileyo) kwaye awadibaniswanga ngaphakathi komnye. Ungazihoyi naziphi na izithuba kumtya wokufaka. Umzekelo: >>> separate_paren_groups' ((( ) (() (()))))) '['() ', '(()) ', '((())']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,xho_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Inikwe inani elintlantsi elintlantsi, linokwahlulahlulwa libe yinxalenye ye-integer (elona nani likhulu lincinci kunenani elinikiweyo) kunye ne-decimals (inxalenye eseleyo ihlala incinci kune-1). Buyisela inxalenye yedesimal yenani. Umzekelo: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,xho_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Unikwe uluhlu lweentengiselwano zokufaka kunye nokurhoxisa kwiakhawunti yebhanki eqala ngesaldo zero. Umsebenzi wakho kukufumanisa ukuba nangaliphi na ixesha ibhalansi yeakhawunti iwela ngaphantsi kwe zero, kwaye kuloo ndawo umsebenzi kufuneka ubuyisele i-True. Ngaphandle koko kufuneka ibuyisele False. Umzekelo: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,xho_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Kwiluhlu olunikiweyo lwamanani okufaka, bala i-Mean Absolute Deviation ejikeleze umndilili wale dataset. I-Mean Absolute Deviation ngumndilili umahluko phakathi kwento nganye kunye nendawo embindini (umndilili kule meko): MAD = umndilili ∙ x - x_mean ∙ Umzekelo: >>> mean_absolute_deviation [1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,xho_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Faka inombolo 'yemida' phakathi kwezinto ezimbini ezilandelelanayo zoluhlu lwempahla `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,xho_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Input kulo msebenzi ngumtya omele amaqela amaninzi kwiikhonkco ezifakwe kwiikhonkco ezifakwe kwiikhonkco ezifakwe kwiikhonkco ezifakwe kwiikhonkco ezifakwe kwiikhonkco ezifakwe kwiikhonkco. Kwiqela ngalinye, phuma inqanaba elinzulu lokudalwa kweekhonkco. Umzekelo (() (()) unamazinga amabini okufakelwa kweekhonkco ngelixa ((())) inezi-3. >>> parse_nested_parens (('((()) ((())) ((((()) ((((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,xho_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Hluza uluhlu lwentambo kuphela kwezo ziqulathe umxokelelwane onikiweyo >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,xho_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Kwiluhlu olunikiweyo lwee-integer, buyisela i-tuple equkethe isamba kunye nemveliso yazo zonke iinombolo kuluhlu. Isamba esingenanto kufuneka silingane no-0 kwaye imveliso engenanto kufuneka ilingane no-1. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,xho_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Ukusuka kuluhlu olunikiweyo lwamanani apheleleyo, yenza uluhlu lwezinto eziphezulu ezifumanekayo kude kube ngumzuzu onikiweyo ngokulandelelana. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,xho_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Fumana eyona palindrome imfutshane eqala ngomtya onikiweyo. Ingcamango yealgorithm ilula: - Fumana eyona postfix yomtya onikiweyo oyipalindrome. - Yongeza ekupheleni komtya umva womtya owandulela umtya oza phambi kwesimamva sepalindromic. >>> make_palindrome ((('') '' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Hlola ukuba umtya onikiweyo uyipalindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,xho_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Input ziintambo ezimbini a no b ezenziwe zii1 kunye nee0. Yenza i-binary XOR kwezi zinto zifakwe kwaye ubuyisele isiphumo njengentambo. >>> string_xor (('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,xho_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Kuluhlu lwentambo, buyisela eyona inde. Buyisela eyokuqala kwimeko yentambo ezininzi zobude obufanayo. Buyisela Akukho kwimeko yoluhlu lokungena lungenanto. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,xho_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Buyisela eyona nto iphambili ekudibaniseni amanani amabini apheleleyo a no b >>> eyona nto iphambili ekudibaniseni ((3, 5) 1 >>> eyona nto iphambili ekudibaniseni ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,xho_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Ibuyisela uluhlu lwazo zonke iziqalo ukusuka kwezona mfutshane ukuya kwezona zide zomtya wokufaka >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,xho_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Buyisela umtya oqukethe amanani anendawo-eqingqiweyo aqala ukusuka ku-0 ukuya ku-n kuquka. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,xho_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Xa kunikwe umtya, fumana ukuba zingaphi iimpawu ezahlukileyo (ngaphandle kwecala) ezenziwe >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,xho_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Input to this function is a string representing musical notes in a special ASCII format. Your is to parse string list of integers corresponding to many beats does. Nantsi ingcaciso: 'o' note, lasts four beats 'o 112' - half note, lasts two beats ' 112' - quater note, lasts one beat >>> parse_music. 'o o .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,xho_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Fumana ukuba zingaphi izihlandlo ezinokufunyanwa kumtya onikwe umnxeba kumtya wokuqala. Bala iimeko ezigqagqeneyo. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,xho_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input is a space-delimited string of numerals from 'zero' to 'nine'. Iinketho ezifanelekileyo 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Buyisela umtya onamanani ahlelwe ukusuka kweyona incinci ukuya kweyona inkulu >>> sort_numbers (('three one five') 'one three five' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,xho_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Ukusuka kuluhlu olunikeziweyo lwamanani (obude ubuncinane ezimbini) khetha uze ubuyisele ezimbini ezikufutshane komnye nomnye uze ubuyisele ngokulandelelana kwazo (inani elincinci, inani elikhulu). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,xho_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Kwisicwangciso sokunikezela ngamanani (amanani amabini ubuncinane), sebenzisa uguquko lomgca kweso sicwangciso, ukuze elona nani lincinci libe ngu-0 kwaye elona likhulu libe ngu-1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,xho_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Isihluzi esinikwe uluhlu lwawo nawaphi na amaxabiso e-python kuphela kumanani apheleleyo >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,xho_Latn,python,"

def strlen(string: str) -> int:
    """"""Ubude bokubuya komtya onikiweyo >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,xho_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Kwinani elinikiweyo n, fumana elona nani likhulu elihlula n ngokulinganayo, lincinci kune n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,xho_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Inombolo ye-input kufuneka ilingane nemveliso yazo zonke izinto >>> factorise(8) [2, 2, 2] >>> factorise(25) [5, 5] >>> factorise(70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,xho_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Ukusuka kuluhlu lwamanani apheleleyo, susa zonke izinto ezenzeka ngaphezu kwesinye. Gcina ulungelelwaniso lwezinto ezishiyekileyo ngokufanayo njengokungeniswa. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,xho_Latn,python,"

def flip_case(string: str) -> str:
    """"""Kwintambo enikiweyo, phinda oonobumba abancinci babe ngoonobumba abakhulu kunye noonobumba abakhulu babe ngoonobumba abancinci. >>> flip_case ((('Molo') 'MOLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,xho_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Yenza uludwe lwentambo ibe yintambo enye >>> yenza uludwe lwentambo (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concaten) (concaten) (concaten) (concaten) (concaten) (concaten) (concaten) (conc) (conc) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (con) (r (con) (con) (con) (con) (con) (con) (con) (r (con) (con) (con) (con""""""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,xho_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Hluza uluhlu lwentambo kuphela kwezo ziqala ngesimaphambili esinikiweyo. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,xho_Latn,python,"

def get_positive(l: list):
    """"""Buyisela amanani achanekileyo kuphela kuluhlu. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,xho_Latn,python,"

def is_prime(n):
    """"""Buyisela inyaniso ukuba inani elinikiweyo liyiprayimi, kwaye liphosakele ngenye indlela. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,xho_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs zizabalazi zepolynomial. find_zero fumana x onjalo poly(x) = 0. find_zero ibuyisa kuphela inqaku le-zero, nokuba zininzi. Ngaphezu koko, find_zero ithatha kuphela uluhlu lwe-xs enenani elilinganayo le-coefficients kunye ne-coefficient enkulu engeyiyo zero njengoko iqinisekisa isisombululo. >>> round (((find_zero[1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Ivavanya ipolinomi ene coefficients xs kwindawo x. ibuyisela xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,xho_Latn,python,"

def sort_third(l: list):
    """"""Lo msebenzi uthatha uluhlu l kwaye ubuyisela uluhlu l' olunjalo ukuba l' lufana no-l kwii-indices ezingahlukanisekiyo ezintathu, ngelixa amaxabiso alo kwii-indices ezahlulwayo ezintathu alingana namaxabiso e-indices ezihambelanayo ze-l, kodwa zihlelwe. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,xho_Latn,python,"

def unique(l: list):
    """"""Buyisela izinto ezizodwa ezilungelelanisiweyo kuluhlu >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,xho_Latn,python,"

def max_element(l: list):
    """"""Buyisela eyona nto iphambili kuluhlu. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,xho_Latn,python,"

def fizz_buzz(n: int):
    """"""Buyisela inani lamaxesha amanani 7 avela kumanani apheleleyo angaphantsi kwe n nahlulwa ngo 11 okanye 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,xho_Latn,python,"

def sort_even(l: list):
    """"""Lo msebenzi uthatha uluhlu l kwaye ubuyisela uluhlu l' olunjalo ukuba l' lufana l kwii-indices ezingafaniyo, ngelixa amaxabiso alo kwii-indices ezifanayo alingana namaxabiso e-indices ezifanayo ze-l, kodwa zihlelwe. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,xho_Latn,python,"

def encode_cyclic(s: str):
    """"""ithatha njengentambo yokungenisa ebhaliweyo ngomsebenzi we-encode_cyclic. Ibuyisa intambo ebhaliweyo. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""ibuyisela umtya obhalwe ngokwamaqela ajikelezayo oonobumba abathathu.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,xho_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib ibuyisa inani le-n eliyinombolo yeFibonacci kwaye ikwangumbhalo wokuqala. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,xho_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""i-triple_sum_to_zero ithatha uluhlu lwee-integer njengokungeniswa. ibuyisela i-True ukuba kukho izinto ezintathu ezicacileyo kuluhlu oluthi sum to zero, kwaye False ngenye indlela. >>> i-triple_sum_to_zero (([1, 3, 5, 0]) False >>> i-triple_sum_to_zero (([1, 3, -2, 1]) True >>> i-triple_sum_to_zero (([1, 2, 3, 7]) False >>> i-triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> i-triple_sum_to_zero [1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,xho_Latn,python,"

def car_race_collision(n: int):
    """"""Khawucinge ngomgwaqo othe tye ngokugqibeleleyo umgca omde ongenasiphelo. iimoto n ziqhuba zisiya ngasekhohlo; ngaxeshanye, iseti eyahlukileyo yeemoto n ziqhuba zisuka ngasekunene ziye ngasekhohlo. Iiseti ezimbini zeemoto ziqala zikude kakhulu omnye komnye. Zonke iimoto zihamba ngesantya esifanayo. Iimoto ezimbini kuthiwa ziyadibana xa imoto ehamba ngasekhohlo ukuya ngasekunene ihlasela imoto ehamba ngasekunene ukuya ngasekhohlo. Nangona kunjalo, iimoto zomelele kwaye zomelele ngokungenasiphelo; ngenxa yoko, ziyaqhubeka zihamba kwindlela yazo ngokungathi azidibani. Lo msebenzi ukhupha inani leentshukumo ezinjalo. """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,xho_Latn,python,"

def incr_list(l: list):
    """"""I-Return list kunye nezinto ezongeziweyo ngo-1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,xho_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero ithatha uluhlu lwamanani apheleleyo njengokungeniswa. ibuyisela i-True ukuba kukho izinto ezimbini ezicacileyo kuluhlu oludibanisa zero, kwaye False ngenye indlela. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,xho_Latn,python,"

def change_base(x: int, base: int):
    """"""Guqula isiseko senani lenani lokungena x kwisiseko. buyisela umfuziselo womtya emva kokuguqulwa. amanani esiseko angaphantsi kwe-10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,xho_Latn,python,"

def triangle_area(a, h):
    """"""Ukunikwa ubude becala kunye nommandla ophezulu wokubuya kwinqununu. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,xho_Latn,python,"

def fib4(n: int):
    """"""Umlandelelwano wamanani we-Fib4 ngumlandelelwano ofana nomlandelelwano we-Fibbonacci ochazwa ngolu hlobo lulandelayo: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Nceda ubhale umsebenzi wokubala ngokufanelekileyo i-n-th element yomlandelelwano wamanani we-fib4. Ungasebenzisi ukuphindaphinda. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,xho_Latn,python,"

def median(l: list):
    """"""Ukubuya kwe-median yezinto ezikuluhlu l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,xho_Latn,python,"

def is_palindrome(text: str):
    """"""Ijonga ukuba umtya onikiweyo uyipalindrome >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,xho_Latn,python,"

def modp(n: int, p: int):
    """"""Buyisela 2^n modulo p (khumbula amanani). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,xho_Latn,python,"

def encode_shift(s: str):
    """"""ithatha njengentambo yokungenisa ebhaliweyo ngomsebenzi we-encode_shift. Ibuyisela intambo ebhaliweyo. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""ibuyisela umtya obhalwe ngekhowudi ngokutshintsha umlinganiswa ngamnye ngo-5 kwialfabhethi.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,xho_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels ngumsebenzi othatha umtya kwaye ubuyisela umtya ngaphandle kwee-vowels. >>> remove_vowels (('') '' >>> remove_vowels ((""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,xho_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Buyisela i-True ukuba onke amanani kuluhlu l angaphantsi komda t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,xho_Latn,python,"

def add(x: int, y: int):
    """"""Yongeza amanani amabini x no y >>> yongeza ((2, 3) 5 >>> yongeza ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,xho_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Khangela ukuba amagama amabini anamagama afanayo. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Yinyaniso >>> same_chars (('abcd', 'dddddddabc') Yinyaniso >>> same_chars (('dddddddabc', 'abcd') Yinyaniso >>> same_chars (('eabcd', 'dddddddabc') Yinyaniso >>> same_chars (('eabcd', 'dddddddabc') Yinyaniso >>> same_chars ((('abcd', 'dddddddabddce') Yinyaniso >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Yinyaniso  Yinyaniso """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,xho_Latn,python,"

def fib(n: int):
    """"""Buyisela inani le-nth yeFibonacci. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,xho_Latn,python,"

def correct_bracketing(brackets: str):
    """"""ibracketing ngumtya we ""<"" kunye "">"". return True ukuba ibracket nganye yokuvula inebracket yokuvala ehambelana nayo. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,xho_Latn,python,"

def monotonic(l: list):
    """"""Buyisela i-True ukuba izinto zoluhlu ziyanda okanye ziyancipha. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,xho_Latn,python,"

def common(l1: list, l2: list):
    """"""Buyisela izinto eziqhelekileyo ezihlelweyo ezizodwa zoluhlu ezimbini. >>> eziqhelekileyo (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> eziqhelekileyo (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,xho_Latn,python,"

def largest_prime_factor(n: int):
    """"""Buyisela eyona nto inkulu kwi n. Cinga ukuba n > 1 kwaye ayingomntu wokuqala. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,xho_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n ngumsebenzi ohlanganisa amanani ukusuka ku-1 ukuya ku-n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,xho_Latn,python,"

def correct_bracketing(brackets: str):
    """"""ibracketing ngumtya we ""("" kunye "")"". buyisela Inyaniso ukuba ibracket nganye yokuvula inebracket yokuvala ehambelana nayo. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing(""(()) True >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,xho_Latn,python,"

def derivative(xs: list):
    """"""xs imele ii-coefficients zepolynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Buyisela imvelaphi yale polynomial kwifom efanayo. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,xho_Latn,python,"

def fibfib(n: int):
    """"""Umlandelelwano wenani leFibFib ngumlandelelwano ofana nomlandelelwano weFibbonacci ochazwa ngolu hlobo lulandelayo: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Nceda ubhale umsebenzi wokubala ngokufanelekileyo i-nth element yomlandelelwano wenani le-fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,xho_Latn,python,"
FIX = """"""Bhala umsebenzi vowels_count othatha umtya omele igama njengokungeniswa kwaye ubuyisele inani lamazwi kumtya. Iivakalisi kule meko 'a', 'e', 'i', 'o', 'u'. Apha, 'y' ikwangumbongo, kodwa kuphela xa isekupheleni kwelizwi elinikiweyo. Umzekelo: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Yongeza iimeko zovavanyo. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,xho_Latn,python,"
def circular_shift(x, shift):
    """"""Ukujikeleza ukuhambisa amanani entle x, ukuhambisa amanani ngasekunene ngokutshintsha kwaye ubuyisele isiphumo njengomtya. Ukuba shift > inani lamanani, ukubuyisela amanani ajikeleze. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,xho_Latn,python,"
def digitSum(s):
    """"""Umsebenzi Bhala umsebenzi othatha umtya njengokungeniswa kwaye ubuyisela isixa seempawu eziphezulu kuphela' iikhowudi ze-ASCII. Imizekelo: digitSum ((("""") => 0 digitSum (((""abAB"") => 131 digitSum (((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,xho_Latn,python,"
def fruit_distribution(s,n):
    """"""Kulo msebenzi, uya kunikwa umtya omele inani lama-apile kunye neeorenji ezisasazwa kwibhasikithi yeziqhamo le bhasikithi iqulethe iapile, iiorenji, kunye neziqhamo zemango. Xa unikezwe umtya omele inani elipheleleyo lama-apile kunye neeorenji kunye nenani elipheleleyo elimele inani elipheleleyo leziqhamo ebhasikithini buyisela inani leziqhamo zemango ebhasikithini. umzekelo: fruit_distribution""5(ama-apile kunye neeorenji ezi-6"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 ama-apile kunye neeorenji ezi-1"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 ama-apile kunye neeorenji ezi-3"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 ama-apile kunye neeorenji ezi-120) "",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,xho_Latn,python,"
def pluck(arr):
    """"""""Ukunikwa umqolo omele isebe lomthi elinamaqela amanani apheleleyo angekho phantsi umsebenzi wakho kukuthabatha elinye lamaqela uze ulibuyisele. Iqela elithawuliweyo kufuneka libe lelona lincinci linani elilinganayo. Ukuba kukho amaqela amaninzi anenani elilinganayo elincinci libuyisa inombolo enesalathiso esincinci. Iqela elithawuliweyo kufuneka libuyiselwe kuluhlu, [smallest_value, its index ], Ukuba akukho maxabiso alingeneyo okanye umqolo onikiweyo awunanto, buyisela []. Umzekelo 1: Input: [4,2,3] Output: [2, 1] Inkcazo: 2 inelona xabiso lincinci, kwaye 2 inelona xabiso lincinci. Umzekelo 2: Input: [1,2,3] Output: [2, 1] Inkcazo: 2 inelona xabiso lincinci, kwaye 2 inelona xabiso lincinci. Umzekelo 3: Input: [] Output: [4:] Input: [5, 3, 4, 2] [0, 0] Output: 1 Inkcazo: Inombolo encinci inenani elilinganayo lincinci, kodwa kukho ii-zero ezimbini. Umzekelo: * Umzekelo: * uya kukhetha inombolo yokuqala enenani elincinci, kodwa i-zero.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,xho_Latn,python,"
def search(lst):
    '''Unikwe uluhlu olungagqitywanga lweenani elipheleleyo. Buyisela elona nani likhulu elipheleleyo elingaphezulu kwe zero, kwaye linamaxesha amaninzi angaphezulu okanye alingana nexabiso lenani elipheleleyo ngokwalo. Ubuninzi benani elipheleleyo linani lamaxesha elivela kulo uluhlu. Ukuba akukho xabiso linjalo, buyisela -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,xho_Latn,python,"
def strange_sort_list(lst):
    '''Xa unikezwe uluhlu lwamanani apheleleyo, buyisela uluhlu ngokolandelelwano olungaqhelekanga. Ukulandelelana okungaqhelekanga, kuxa uqala ngexabiso elincinci, emva koko ubuninzi beenani elipheleleyo, emva koko ubuncinci njalo njalo. Imizekelo: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,xho_Latn,python,"
def triangle_area(a, b, c):
    '''Xa kunikwe ubude bamacala amathathu onxantathu. Buyisela ummandla wonxantathu ojikelezwe ukuya kuma-2 amanqaku esishumi ukuba amacala amathathu enza unxantathu osebenzayo. Ngaphandle koko buyisela -1 Amacala amathathu enza unxantathu osebenzayo xa isixa samacala amabini anoma yiyiphi inkulu kunomgca wesithathu. Umzekelo: unxantathu_ummandla ((3, 4, 5) == 6.00 unxantathu_ummandla ((1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,xho_Latn,python,"
def will_it_fly(q,w):
    '''Bhala umsebenzi obuyisela i-True ukuba into q iya kubhabha, kwaye False ngenye indlela. Into q iya kubhabha ukuba ilungelelene (luhlu lwepalindromic) kwaye isixa sezinto zayo singaphantsi okanye silingana nobunzima obukhulu obunokwenzeka w. Umzekelo: will_it_fly (([1, 2], 5) â -> False # 1+2 ingaphantsi kobunzima obukhulu obunokwenzeka, kodwa ayilingani. will_it_fly (([3, 2, 3], 1) â -> False # ilungelelene, kodwa 3+2+3 ingaphezulu kobunzima obukhulu obunokwenzeka. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 ingaphantsi kobunzima obukhulu obunokwenzeka, kwaye ilungelelene. will_it_fly ((([3], â 5) -> True # 3 ingaphantsi kobunzima obukhulu obunokwenzeka, kwaye ilungelelene '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,xho_Latn,python,"
def smallest_change(arr):
    """"""Xa unikezwe uluhlu lwezinto ezipheleleyo, fumana inani elincinci lezinto ekufuneka zitshintshiwe ukuze uludwe lube palindromic. Uluhlu lwepalindromic luludwe olufundwa ngokufanayo emva nangaphambili. Ngotshintsho olunye, unokutshintsha into enye kuyo nayiphi na enye into. Umzekelo: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,xho_Latn,python,"
def total_match(lst1, lst2):
    '''Bhala umsebenzi owamkela uluhlu lweentambo ezimbini uze ubuyisele uluhlu olunenani elipheleleyo leempawu kuzo zonke iintambo zoluhlu ngaphantsi kunolunye uluhlu. ukuba uluhlu ezimbini zinenani elifanayo leempawu, buyisela uluhlu lokuqala. Imizekelo total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4', ['1', '2', '3', '4', '5', '4]) -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,xho_Latn,python,"
def is_multiply_prime(a):
    """"""Bhala umsebenzi obuyisela inyaniso ukuba inani elinikiweyo liphindaphindwe ngamanani amathathu okuqala kwaye ubuxoki ngenye indlela. Ukwazi ukuba (a) incinci kune-100. Umzekelo: is_multiply_prime(30) == Yinyaniso 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,xho_Latn,python,"
def is_simple_power(x, n):
    """"""Umsebenzi wakho kukubhala umsebenzi obuyisela inyaniso ukuba inani x ligunya elilula le-n kwaye liphosakele kwezinye iimeko. x ligunya elilula le-n ukuba n**int=x Umzekelo: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,xho_Latn,python,"
def iscube(a):
    '''Bhala umsebenzi othatha inani elipheleleyo a kwaye ubuyisele i-True ukuba le ingeger yikwikhubhu yenani elipheleleyo. Qaphela: unokuthatha ukuba igalelo lihlala lisebenza. Imizekelo: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,xho_Latn,python,"
def hex_key(num):
    """"""Uxelelwe ukuba ubhale umsebenzi owamkela inani le-hexadecimal njengomtya kwaye ubala inani lamagama e-hexadecimal angamanani aphambili (inani eliphambili, okanye inani eliphambili, linani lendalo elingaphezulu kwe-1 elingengomveliso wamanani amabini amancinci endalo). Amanani e-hexadecimal ngu-0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Amanani aphambili ngu-2, 3, 5, 7, 11, 13, 17,... Ngoko kufuneka uchonge inani lamanani alandelayo: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13). Phawula: unokuthatha ukuba igalelo lisoloko lichanekile okanye lingenanto, kwaye iisimboli A,B,C,D,E,F zihlala zikwisimboli esikhulu. Imizekelo: Kuba ""num"" = AB, imveliso kufuneka ibe ngu-num = 1. Kuba ""num"" = 1077E, imveliso kufuneka ibe ngu- 2. Kuba ""num"" = 331A, ""num"" kufuneka ibe ngu- 4. ""num"" = 123ABC, ""num"" kufuneka ibe ngu- 6.06745DEF. Kuba ""um"" kufuneka ibe ngu- 2.2020 ""num""""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,xho_Latn,python,"
def decimal_to_binary(decimal):
    """"""Uya kunikwa inombolo kwifomathi yedesimali kwaye umsebenzi wakho kukuyiguqula ibe yifomathi yokubini. Umsebenzi kufuneka ubuyisele umtya, unobumba ngamnye omele inombolo yokubini. Umlinganiswa ngamnye kumtya uya kuba ngu-'0' okanye '1'. Kuya kubakho isibini esingaphezulu seempawu 'db' ekuqaleni nasekupheleni komtya. Iimpawu ezingaphezulu zilapho ukunceda ngefomathi. Imizekelo: decimal_to_binary ((15) # ibuyisela ""db1111db"" decimal_to_binary32) # ibuyisela ""db100000db"" """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,xho_Latn,python,"
def is_happy(s):
    """"""Unikwe umtya s. Umsebenzi wakho kukujonga ukuba umtya wonwabile okanye awunjalo. Umtya wonwabile ukuba ubude bawo ubuncinci buyi-3 kwaye zonke iileta ezi-3 ezilandelelanayo zahlukile Umzekelo: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,xho_Latn,python,"
def numerical_letter_grade(grades):
    """"""Yiveki yokugqibela yesemester kwaye utitshala kufuneka anike abafundi amanqaku. Utitshala ebesenza ialgorithm yakhe yokubeka amanqaku. Ingxaki kuphela kukuba, ulahlekelwe yikhowudi ebesebenzisa yona yokubeka amanqaku. Unike uluhlu lweGPA kwabanye abafundi kwaye kufuneka ubhale umsebenzi onokukhupha uluhlu lwamanqaku eencwadi usebenzisa le tafile ilandelayo: GPA.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,xho_Latn,python,"
def prime_length(string):
    """"""Bhala umsebenzi othatha umtya uze ubuyisele kuyinyaniso ukuba ubude bomtya linani eliyintloko okanye bubuxoki ngenye indlela Imizekelo prime_length (('Molo') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,xho_Latn,python,"
def starts_one_ends(n):
    """"""Inikwe inani elipheleleyo elinenani elifanelekileyo n, buyisela inani lamanani amanani apheleleyo aneenombolo ezifanelekileyo eziqala okanye eziphela ngo 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,xho_Latn,python,"
def solve(N):
    """"""Ukunikwa inani elipheleleyo elinenani elifanelekileyo N, buyisela inani elipheleleyo lamagama alo kwisinye. Umzekelo Ku N = 1000, inani lamagama liya kuba ngu 1 isiphumo kufuneka sibe ngu ""1"". Ku N = 150, inani lamagama liya kuba ngu 6 isiphumo kufuneka sibe ngu ""110"". Ku N = 147, inani lamagama liya kuba ngu 12 isiphumo kufuneka sibe ngu ""1100"". Iimpawu: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. Isiphumo: umtya wenani le binary """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,xho_Latn,python,"
def add(lst):
    """"""Xa kunikwe uluhlu olungagqitywanga lweenani elipheleleyo lst. yongeza izinto ezibini ezikwisikhombisi esingezizo.. Imizekelo: yongeza (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,xho_Latn,python,"
def anti_shuffle(s):
    """"""Bhala umsebenzi othatha umtya uze ubuyisele inguqulelo yawo ehleliweyo. Inguqulelo ehleliweyo yomtya, ngumtya apho onke amagama (ahlukaniswe sisithuba) athatyathelw' indawo ligama elitsha apho onke amagama ahlelwe ngokunyuka ngokwamaxabiso ascii. Qaphela: Kufuneka ugcine umyalelo wamagama kunye nezithuba ezingenanto kwisivakalisi. Umzekelo: anti_shuffle ((('Hi') ubuyisela 'Hi' anti_shuffle ((('hello') ubuyisela 'ehllo' anti_shuffle (('Hello World!!!') ubuyisela 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,xho_Latn,python,"
def get_row(lst, x):
    """"""Unikwe idatha ene-2 dimensional, njengoluhlu oludityanisiweyo, olufana nematriki, nangona kunjalo, ngokungafani nematriki, umgca ngamnye unokuba nenani elahlukileyo leekholamu. Xa kunikwe lst, kunye ne-integer x, fumana ii-integer x kuluhlu, kwaye ubuyisele uluhlu lwe-tuples, [(x1, y1), (x2, y2) ...] ukuze i-tuple nganye ibe yi-coordinate - (umgca, iikholamu), eqala ngo-0. Hlela iikoordinate ekuqaleni ngemigca ngokulandelelana. Kwakhona, hlengisa iikoordinate zomgca ngeekholamu ngokulandelelana. Imizekelo: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 1, 4], 0 (1, 4), (2, 5), (2, 0) get_(], 1) [] == [[umgca 1, 2, 3]], 2 == [2, 3]] ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,xho_Latn,python,"
def sort_array(array):
    """"""Xa unikezwe uluhlu lwee-integer ezingezizo ezingezizo ezomngcipheko, buyisela ikopi yoluhlu olunikiweyo emva kokuluhluza, uya kuluhluza uluhlu olunikiweyo ngokunyuka ukuba isixa ((ixabiso le-index yokuqala, ixabiso le-index yokugqibela) ayilunganga, okanye uluhluze ngokwehla ukuba isixa ((ixabiso le-index yokuqala, ixabiso le-index yokugqibela) ilungile. Qaphela: * musa ukutshintsha uluhlu olunikiweyo. Imizekelo: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 6] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,xho_Latn,python,"
def encrypt(s):
    """"""Yenza umsebenzi encrypt othatha umtya njengengxoxo kwaye ubuyisele umtya obhalwe ngokufihliweyo kunye nealfabhethi ejikeleziweyo. Ialfabhethi kufuneka ijikelezwe ngendlela yokuba oonobumba bajikeleze ezantsi kabini kabini kwiindawo ezimbini. Umzekelo: encrypt (('hi') ibuyisela 'lm' encrypt (('asdfghjkl') ibuyisela 'ewhjklnop' encrypt (('gf') ibuyisela 'kj' encrypt (('et') ibuyisela 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,xho_Latn,python,"
def next_smallest(lst):
    """"""Unikwe uluhlu lwamanani apheleleyo. Bhala umsebenzi olandelayo_omncinci kakhulu (_) obuyisela owesibini umncinci kuluhlu. Buyisela u-None ukuba akukho nto enjalo. olandelayo_omncinci kakhulu (_) [1, 2, 3, 4, 5]) == 2 olandelayo_omncinci kakhulu (_) [5, 1, 4, 3, 2]) == 2 olandelayo_omncinci kakhulu (_) == Akukho olandelayo_omncinci kakhulu (_) [1, 1]) == Akukho """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,xho_Latn,python,"
def is_bored(S):
    """"""Uya kunikwa uthotho lwamagama, kwaye umsebenzi wakho kukubala inani lezinto ezidinayo. Into edinisayo sisivakalisi esiqala ngegama elithi ""I"". Izivakalisi zikhutshelwa '.', '?' okanye '!'. Umzekelo: >>> is_bored(""Hello world"") 0 >>> is_bored(""Isibhakabhaka siluhlaza. Ilanga liyavutha. Ndiyayithanda le mozulu"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,xho_Latn,python,"
def any_int(x, y, z):
    '''Yenza umsebenzi othatha amanani amathathu. Ibuyisa inyani ukuba elinye la manani lilingana nesixa sezinye ezimbini, kwaye onke amanani ayinani elipheleleyo. Ibuyisa ubuxoki nakwezinye iimeko. Imizekelo nayiphi na_int ((5, 2, 7) â -> True nayiphi na_int ((3, 2, 2) â -> False nayiphi na_int ((3, -2, 1) â -> True nayiphi na_int ((3.6, -2.2, 2) â -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,xho_Latn,python,"
def encode(message):
    """"""Bhala umsebenzi othatha umyalezo, uze uwenze ngendlela yokuba utshintshe i-case kuzo zonke iileta, utshintshe zonke iivokhali kumyalezo ngoonobumba abavela kwiindawo ezi-2 phambi kweso sivokhali kwi-alfabhethi yesiNgesi. Cinga oonobumba kuphela. Imizekelo: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,xho_Latn,python,"

def skjkasdkd(lst):
    """"""Unikwe uluhlu lwamanani apheleleyo. Kufuneka ufumane elona xabiso likhulu lokuqala uze ubuyisele isimbuku samanyathelo alo. Imizekelo: Kuba lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] imveliso kufuneka ibe yi-10 Kuba lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] imveliso kufuneka ibe yi-25 Kuba lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] imveliso kufuneka ibe yi-13 Kuba lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] imveliso kufuneka ibe yi-11 Kuba lst = [0,81,12,31,21] imveliso kufuneka ibe yi-3 Kuba lst = [0,1,8,2,1,7] imveliso kufuneka ibe yi-7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,xho_Latn,python,"
def check_dict_case(dict):
    """"""Xa kunikwe isichazi magama, buyisela ku-True ukuba zonke izitshixo zingumcu kwi-case encinci okanye zonke izitshixo zingumcu kwi-case enkulu, kungenjalo buyisela ku-False. Umsebenzi kufuneka ubuyisele ku-False ukuba isichazi magama sinikwe singenanto. Imizekelo: check_dict_case{""a"":""iapile"", ""b"":""ibhanana""}) kufuneka ibuyisele ku-True. check_dict_case{""a"":""iapile"", ""A"":""ibhanana"", ""B"":""ibhanana""}) kufuneka ibuyisele ku-False. check_dict_case{""a"":""iapile"", 8:""ibhanana"", ""a"":""iapile""}) kufuneka ibuyisele ku-False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) kufuneka ibuyisele ku-False. check_dict_case{""NC""STATE:"""", ""Z"":""IP"":""45"") kufuneka ibuyisele ku-True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,xho_Latn,python,"
def count_up_to(n):
    """"""Phumeza umsebenzi othatha inani elipheleleyo elingelogwenxa kwaye ubuyisela umqolo wamanani apheleleyo okuqala angama-n angamanani aphambili kwaye angaphantsi kwe-n. umzekelo: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,xho_Latn,python,"
def multiply(a, b):
    """"""Gqibezela umsebenzi othatha amanani amabini apheleleyo kwaye ubuyisele imveliso yamanani abo. Cinga ukuba igalelo lisoloko lisebenza. Imizekelo: ukuphindaphinda ((148, 412) kufuneka kubuyisele 16. ukuphindaphinda ((19, 28) kufuneka kubuyisele 72. ukuphindaphinda ((2020, 1851) kufuneka kubuyisele 0. ukuphindaphinda ((14,-15) kufuneka kubuyisele 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,xho_Latn,python,"
def count_upper(s):
    """"""Xa kunikwe umtya s, bala inani lamazwi aqhelekileyo kwizikhokelo ezifanayo. Umzekelo: count_upper (('aBCdEf') ibuyisa i-1 count_upper (('abcdefg') ibuyisa i-0 count_upper (('dBBE') ibuyisa i-0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,xho_Latn,python,"
def closest_integer(value):
    '''Yenza umsebenzi othatha ixabiso (umtya) omele inani uze ubuyisele inani elikufutshane kulo. Ukuba inani lilingana ncam kwamanani amabini, ligqibezele kude kunqanda. Imizekelo >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Phawula: Ukujikeleza kude kunqanda kuthetha ukuba ukuba inani elinikiweyo lilingana ncam kwamanani amabini, elifanele libuyiselwe lelona likude kunqanda. Umzekelo closest_integer "" ((14.5"") kufuneka libuyisele i-15 kwaye closest_integer "" ((-14.5"") kufuneka libuyisele -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,xho_Latn,python,"
def make_a_pile(n):
    """"""Xa unikezwe inani elipheleleyo elinenani elinenani elipheleleyo n, kufuneka wenze inqwaba enamanqanaba amatye angama-n. Inqanaba lokuqala linamatye angama-n. Inani lamatye kwinqanaba elilandelayo: - inani elilandelayo elingaqhelekanga ukuba n aliqhelekanga. - inani elilandelayo elilinganayo ukuba n lilungile. Buyisela inani lamatye kwinqanaba ngalinye kuluhlu, apho into kwi-index i imele inani lamatye kwinqanaba (i+1). Imizekelo: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,xho_Latn,python,"
def words_string(s):
    """"""Uya kunikwa umtya wamagama ohlulwe ngamaqhekeza okanye izithuba. Umsebenzi wakho kukwahlula umtya ube ngamagama uze ubuyisele uluhlu lwamagama. Umzekelo: words_string ((""Molo, igama lam nguJohn"") == [""Molo"", ""wam"", ""igama"", ""ngu"", ""John""] words_string ((""Enye, zimbini, zintathu, zine, zintlanu, zintandathu"") == [""Enye"", ""zimbini"", ""zintathu"", ""zine"", ""ntlanu"", ""ntandathu""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,xho_Latn,python,"
def choose_num(x, y):
    """"""Lo msebenzi uthatha amanani amabini alungileyo x no y kwaye ubuyisela elona nani likhulu eliphakathi kwe [x, y] kubandakanya. Ukuba akukho nani linjalo, ke umsebenzi kufuneka ubuyisele -1. Umzekelo: khetha_inani (x, y) = 14 khetha_inani (x, y) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,xho_Latn,python,"
def rounded_avg(n, m):
    """"""Unikwe amanani amabini apheleleyo aqinisekileyo n no-m, kwaye umsebenzi wakho kukubala umndilili wamanani apheleleyo ukusuka ku-n ukuya ku-m (kuquka n no-m). Yenza isiphelo sesiphelo kwisinani elikufutshane kwaye uguqulele kwibinary. Ukuba n mkhulu kune-m, buyisela -1. Umzekelo: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,xho_Latn,python,"
def unique_digits(x):
    """"""Inikwe uluhlu lwee-integer ezincumisayo x. ibuyisela uluhlu oluhleliweyo lwazo zonke izinto ezingenayo nalinye idijithi. Qaphela: Uluhlu olubuyiselweyo kufuneka luhlelwe ngokunyuka. Umzekelo: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,xho_Latn,python,"
def by_length(arr):
    """"""Xa unikezwe uluhlu lwamanani apheleleyo, hlunga amanani apheleleyo aphakathi kwe-1 ne-9 kuquka, uguqule uluhlu olwenzekayo, uze emva koko ubeke endaweni yesalathiso ngasinye ngegama laso elihambelanayo ukusuka ""Enye"", ""Zimbini"", ""Zintathu"", ""Zine"", ""Zintlanu"", ""Zintandathu"", ""Zisixhenxe"", ""Zisibhozo"", ""Zithoba"". Umzekelo: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> hlunga arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Eight"", ""Five"", ""Three"", ""Two"", ""Two"", ""One"", ""One""] Ukuba uluhlu alunanto, buyisela uluhlu: arr = [] return [] Ukuba uluhlu lunalo naliphi na inani elingaqhelekanga, ligatye: arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [51] - return ['One' 1,'] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,xho_Latn,python,"
def f(n):
    """"""Phumeza umsebenzi f othatha u-n njenge parameter, kwaye ubuyisela uluhlu lobungakanani u-n, ukuze ixabiso le-element kwi-index i ibe yi-factorial ye-i ukuba i ilungile okanye isamba senani ukusuka ku-1 ukuya ku-i ngenye indlela. i iqala ukusuka ku-1. i-factorial ye-i kukuphindaphinda kwamanani ukusuka ku-1 ukuya ku-i (1 * 2 * ... * i). Umzekelo: f ((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,xho_Latn,python,"
def even_odd_palindrome(n):
    """"""Xa kunikwe inani elipheleleyo elinenani, buyisela i-tuple enenani le-palindromes ezipheleleyo kunye ne-odd eziwela ngaphakathi kuluhlu ((1, n), kubandakanya. Umzekelo1: Igalelo: 3 Isiphumo: (1, 2) Inkcazo: I-palindrome epheleleyo zi-1, 2, 3. enye yazo ikwalinye, kwaye ezimbini zazo zikwelinye. Umzekelo2: Igalelo: 12 Isiphumo: (4, 6) Inkcazo: I-palindrome epheleleyo zi-1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ezine zazo zikwalinye, kwaye ezi-6 zazo zikwelinye. Qaphela: 1. 1 <= n <= 10^3 2. i-tuple ibuyisele inani le-palindromes ezipheleleyo kunye ne-odd ngokulandelanayo. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,xho_Latn,python,"
def count_nums(arr):
    """"""Bhala umsebenzi count_nums othatha uluhlu lwee-integer kwaye ubuyisele inani lezinto ezinesamba seedijithi > 0. Ukuba inani alilunganga, ngoko idijithi yalo yokuqala iya kuba lilingananga: umzekelo -123 ineedijithi ezisayiniweyo -1, 2, no-3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,xho_Latn,python,"
def move_one_ball(arr):
    """"""Sinomqolo 'arr' weenombolo ezipheleleyo zeN arr[1], arr[2], ..., arr[N].Amanani kumqolo aya kulandelwa ngokungenamkhethe. Umsebenzi wakho kukufumanisa ukuba kunokwenzeka ukufumana umqolo olungelelaniswe ngendlela engapheliyo ngokwenza lo msebenzi ulandelayo kumqolo onikiweyo: Uvumelekile ukwenza umsebenzi wokutshintsha kwesokudla naliphi na inani lamaxesha. Umsebenzi omnye wokutshintsha kwesokudla uthetha ukutshintsha zonke izinto zomqolo ngendawo enye kwicala lasekunene. Into yokugqibela yomqolo iya kususwa kwindawo yokuqala kumqolo okt 0th. Ukuba kunokwenzeka ukufumana umqolo olungelelanisiweyo ngokwenza lo msebenzi ungentla emva koko ubuyele kuyinyaniso enye ibuye kububuxoki. Ukuba umqolo onikiweyo awukho nto ubuyela kuyinyaniso. Qaphela: Uluhlu olunikiweyo luqinisekisiwe ukuba lunezinto ezizodwa. Umzekelo: move_one_(ball[3, 4, 5, 2]=================================================================================================================================================================================================================================================================================================================""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,xho_Latn,python,"
def exchange(lst1, lst2):
    """"""Kule ngxaki, uza kuphumeza umsebenzi othatha uluhlu ezimbini zamanani, kwaye uthathe isigqibo sokuba ngaba kunokwenzeka ukwenza utshintshiselwano lwezinto phakathi kwazo ukwenza lst1 uluhlu lwamanani alinganayo kuphela. Akukho mda kwinani lezinto ezitshintshiswayo phakathi kwe-lst1 kunye ne-lst2. Ukuba kunokwenzeka ukutshintshiselana ngezinto phakathi kwe-lst1 kunye ne-lst2 ukwenza zonke izinto ze-lst1 zibe zi-even, buyisela ""EWE"". Ngaphandle koko, buyisela ""Hayi"". Umzekelo: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""EWE"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""Hayi"" Kucingelwa ukuba uluhlu lwamaxabiso luya kuba alukho-luphuthi. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,xho_Latn,python,"
def histogram(test):
    """"""Xa unikezwa umtya omele oonobumba abancinci abahlukaniswe ngendawo, buyisela isichazi-magama sencwadi enokuphindaphindwa kakhulu kwaye equlathe inani elihambelanayo. Ukuba oonobumba abaliqela banokuvela okufanayo, babuyisele bonke. Umzekelo: ihistogram (('a b c') == {'a': 1, 'b': 1, 'c': 1} ihistogram (('a b b a') == {'a': 2, 'b': 2} ihistogram (('a b c a b') == {'a': 2, 'b': 2} ihistogram (('b b a') == {'b 4}: ihistogram (('a') == {'b'} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,xho_Latn,python,"
def reverse_delete(s,c):
    """"""Umsebenzi Sinikwe imitya emibini s no c, kufuneka ucime zonke iimpawu kwi s ezilinganayo naluphi na uphawu kwi c ze ujonge ukuba umtya wempumelelo yi palindrome. Umtya ubizwa ngokuba yi palindrome ukuba ufunda ngokufanayo umva ukuya phambili. Kufuneka ubuyise i-tuple equlathe umtya wempumelelo kunye neNyaniso / Ubuxoki bokujonga. Umzekelo Kuba s = ""abcde"", c = ""ae"", isiphumo kufuneka sibe ('bcd', Ubuxoki) Kuba s = ""abcdef"", c = ""b"" isiphumo kufuneka sibe ('acdef', Ubuxoki) Kuba s = ""abcdedcba"", c = ""ab"", isiphumo kufuneka sibe ('cdedc',Nyaniso)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,xho_Latn,python,"
def odd_count(lst):
    """"""Inikwe uluhlu lwentambo, apho intambo nganye iqulathe amanani kuphela, buyisela uluhlu. I-element nganye i yemveliso kufuneka ibe ""yinani lezinto ezingafaniyo kumtya i wokungenisa. "" apho zonke i kufuneka zithatyathelwe indawo linani leempawu ezingafaniyo kumtya we-i wokungenisa. >>> odd_count['1234567']) [""inani lezinto ezingafaniyo 4n i-str4ng 4 ye-4nput.""] >>> odd_count['3',""111111""]) [""inani lezinto ezingafaniyo 1n i-str1ng 1 ye-1nput. "", ""inani lezinto ezingafaniyo 8n i-str8ng 8 ye-8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,xho_Latn,python,"
def minSubArraySum(nums):
    """"""Inikwe uluhlu lwee-integer nums, fumana elona nani lincinci lalo naluphi na uluhlu olungaphandle kwe-nums. Umzekelo minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,xho_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Unikwe igridi engunxande yemithombo. Umqolo ngamnye umele umthombo omnye, kwaye 1 kumqolo ngamnye umele iyunithi enye yamanzi. Umthombo ngamnye unebhakethi elihambelanayo elingasetyenziselwa ukukhupha amanzi kuwo, kwaye onke amabhakethi anomthamo ofanayo. Umsebenzi wakho kukusebenzisa amabhakethi ukukhupha amabhakethi. Phumela inani lamaxesha ekufuneka uwathobe amabhakethi. Umzekelo 1: Input: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Output: 6 Umzekelo 2: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 Output: 5 Umzekelo 3: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 5 Output
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,xho_Latn,python,"
def sort_array(arr):
    """"""Kule Kata, kufuneka ulungelelanise uluhlu lwee-integer ezingezizo ezingezizo ezingezizo ezingezizo ngokwenani lezinto ezikumfanekiso wazo wesibini ngokulandelelana. Inani elifanayo lezinto, hlengisa ngokusekwe kwixabiso ledesimali. Kufuneka iphunyezwe ngolu hlobo: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,xho_Latn,python,"
def select_words(s, n):
    """"""Xa unikwe umtya s kunye nenani eliqhelekileyo n, unikwe umsebenzi wokuqalisa umsebenzi obuyisela uluhlu lwawo onke amagama avela kumtya s aqukethe oonobumba abalingana n, ukuze la magama avele kumtya s. Ukuba umtya s awunanto ke umsebenzi kufuneka ubuyisele uluhlu olungenanto. Qaphela: unokucinga ukuba umtya ongenayo uqulethe oonobumba nezithuba kuphela. Imizekelo: khetha_amagama ""uMariya wayenegusha elincinci"", 4) ==> [""incinci""] khetha_amagama ""uMariya wayenegusha elincinci"", 3) ==> [""uMariya"", ""igusha""] khetha_amagama ""indawo emhlophe elula"", 2) ==> [] khetha_amagama ""Molo ihlabathi"", 4) ==> [""ihlabathi""] khetha_amagama ""uMalume sam"", 3) ==> [""Malume""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,xho_Latn,python,"
def get_closest_vowel(word):
    """"""Unikwe igama. Umsebenzi wakho kukufumana eyona mvumi ikufutshane emi phakathi kwee-consonants ezimbini ukusuka kwicala lasekunene lelizwi (i-case sensitive). Iivakalisi ekuqaleni nasekupheleni azibali. Buyisela umtya ongenanto ukuba awufumananga mvumi yanelisa le meko ingentla. Unokucinga ukuba umtya onikiweyo uqulethe oonobumba besiNgesi kuphela. Umzekelo: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,xho_Latn,python,"
def match_parens(lst):
    '''Unikwe uluhlu lwentambo ezimbini, zombini iintambo ziqulathe izibiyeli ezivulekileyo '(' okanye izibiyeli ezivaliweyo ') ' kuphela. Umsebenzi wakho kukujonga ukuba kunokwenzeka ukudibanisa iintambo ezimbini ngolungelelwaniso oluthile, ukuba intambo ephumela kuyo iya kuba ntle. Umtya S uthathwa njengolungileyo ukuba kwaye kuphela ukuba zonke izibiyeli kwi-S zilungelelene. Umzekelo: umtya '((())' ulungile, ngelixa umtya '()) 'ungekho. Buyisela 'Ewe' ukuba kukho indlela yokwenza umtya olungileyo, kwaye ubuyisele 'Hayi' ngenye indlela. Imizekelo: match_parens[('() ', ') ']) == 'Ewe' match_parens[(') ', ') ']) == 'Hayi' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,xho_Latn,python,"
def maximum(arr, k):
    """"""Xa kunikwe uluhlu lwe-arr lwamanani apheleleyo kunye nenani elipheleleyo elinenani elinenani elipheleleyo k, buyisela uluhlu oluhleliweyo lobude k kunye namanani aphezulu k kwi-arr. Umzekelo1: Igalelo: arr = [-3, -4, 5], k = 3 Isiphumo: [-4, -3, 5] Umzekelo2: Igalelo: arr = [4, -4, 4], k = 2 Isiphumo: [4, 4] Umzekelo3: Igalelo: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Isiphumo: [2] Qaphela: 1. Ubude bomqolo buya kuba kuluhlu lwe [1, 1000]. 2. Izinto ezikwoluhlu ziya kuba kuluhlu lwe [-1000, 1000]. 3. 0 <= k <= len (((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,xho_Latn,python,"
def solution(lst):
    """"""Xa unikezwe uluhlu olungelulo olungenanto lwamanani apheleleyo, buyisela isamba sazo zonke izinto ezingafaniyo ezikwizikhundla ezifanayo.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,xho_Latn,python,"
def add_elements(arr, k):
    """"""Inikwe i-arr engapheliyo yamanani apheleleyo kunye nenani elipheleleyo k, buyisela isamba sezinto ezinamanani amabini ukusuka kwimiba yokuqala ye-arr. Umzekelo: Igalelo: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Isiphumo: 24 # isamba se-21 + 3 Imiqathango: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,xho_Latn,python,"
def get_odd_collatz(n):
    """"""Xa kunikwe inani elipheleleyo elinenani elinenani, buyisela uluhlu oluhleliweyo olunamanani angalinganiyo ngokulandelelana kwe-collats. Ingqikelelo ye-Collats yingqikelelo kwimathematika emalunga nolandelelwano oluchazwe ngolu hlobo lulandelayo: qala ngalo naluphi na inani elipheleleyo elinenani. Emva koko, igama ngalinye lifunyanwa kwikota yangaphambili ngolu hlobo lulandelayo: ukuba ikamva langaphambili lilingana, ikamva elilandelayo lilingana nesiqingatha sekamva langaphambili. Ukuba ikamva langaphambili alilingani, ikamva elilandelayo lilingana namaxesha amathathu elilandelayo kunye ne-1. Ingqikelelo kukuba nokuba yeyiphi na ixabiso le-n, ukulandelelana kuya kuhlala kufikelela kwi-1. Qaphela: 1. i-Collats (((1) ngu [1]. 2. uluhlu olubuyiselweyo luhlelwe ngokunyukayo. Umzekelo: get_odd_collatz ((5) ubuyisa [1, 5] # Ukulandelelana kwe-collats kwe-5 ngu [5, 8, 16, 4, 2, 1], ngoko ke amanani angalingani kuphela ngu-1 kunye no-5. """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,xho_Latn,python,"
def valid_date(date):
    """"""Kufuneka ubhale umsebenzi oqinisekisa umda womhla othile uze ubuyisele u-True ukuba umhla uqinisekisiwe okanye u-False. Umhla uqinisekisiwe ukuba yonke imithetho elandelayo iyanelisekile: 1. Umda womhla awuphelelanga. 2. Inani leentsuku alikho ngaphantsi kwe-1 okanye ngaphezulu kwe-31 kwiinyanga 1,3,5,7,8,10,12. Kwaye inani leentsuku alikho ngaphantsi kwe-1 okanye ngaphezulu kwe-30 kwiinyanga 4,6,9,11. Kwaye, inani leentsuku alikho ngaphantsi kwe-1 okanye ngaphezulu kwe-29 kwinyanga 2. 3. Iinyanga akufuneki zibe ngaphantsi kwe-1 okanye ngaphezulu kwe-12. 4. Umhla kufuneka ube kwifomathi: mm-dd-yyyy umzekelo: valid_date (('03-11-2000') => valid_date (('15-01-2012') => False valid_date (('04-02040') => False_date (('06-04-2020') => True_date (('06/04/2020') => False""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,xho_Latn,python,"
def split_words(txt):
    '''Xa unikezwe umtya wamagama, buyisela uluhlu lwamagama ahlukaniswe kwindawo emhlophe, ukuba akukho ndawo emhlophe ebhaliweyo kufuneka uwahlule kwiikoma ',' ukuba akukho khoma ikhoyo kufuneka ubuyisele inani leeleta ezincinci ezinomyalelo ongafaniyo kwialfabhethi, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 Imizekelo split_words ((""Molo kwihlabathi!"") â -> [""Molo"", ""ihlabathi!""] split_words ((""Molo,hlabathi!"") â -> [""Molo"", ""ihlabathi!"" split_words ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,xho_Latn,python,"
def is_sorted(lst):
    '''Xa unikezwe uluhlu lwamanani, buyisela nokuba ahlelwe okanye ahlelwe ngendlela enyukayo. Ukuba uluhlu lunokuphindaphindeka okungaphezulu kwe-1 kwenani elifanayo, buyisela Ubuxoki. Cinga ukuba akukho manani amabi kwaye kuphela amanani apheleleyo. Imizekelo is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,xho_Latn,python,"
def intersection(interval1, interval2):
    """"""Unikwe amaxesha amabini, apho ixesha ngalinye liyi-pair of integers. Umzekelo, ixesha = (ukuqala, ukuphela) = (1, 2). Amaxesha anikiweyo avaliwe nto leyo ethetha ukuba ixesha (ukuqala, ukuphela) kubandakanya kokubili ukuqala nokuphela. Ngexesha ngalinye elinikiweyo, kucingelwa ukuba ukuqala kwalo kuncinci okanye kulingana nokuphela kwalo. Umsebenzi wakho kukufumanisa ukuba ubude bokunqamlezwa kwala maxesha mabini linani eliphambili. Umzekelo, ukunqamleka kwamaxesha (1, 3), (2, 4) ngu (2, 3) obude bayo ngu 1, obungelulo inani eliphambili. Ukuba ubude bokunqamlezwa linani eliphambili, buyisela ""EWE"", kungenjalo, buyisela ""HHAYI"". Ukuba amaxesha amabini akahlangani, buyisela ""HAYI"". [input/output] iisampulu: ukunqamleza ((((1, 2), (2, 3) ==> ""ukunqamla-1, (((1), 4) ==> ""ukunqamla"", (0, ""NO"", 5), ==> (((5, - ""YES"", - ""Y""))""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,xho_Latn,python,"
def prod_signs(arr):
    """"""Unikwe uluhlu lweenombolo ezipheleleyo kwaye kufuneka ubuyisele inani lezinto ezipheleleyo eziphindaphindiweyo ngomveliso wazo zonke iimpawu zenombolo nganye kuluhlu, ezimelwe ngu-1, -1 okanye 0. Qaphela: ukubuyisela Akukho nto kwi-arr engenanto. Umzekelo: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == Akukho""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,xho_Latn,python,"
def minPath(grid, k):
    """"""Xa unikezwe igridi enemigca N kunye neekholamu N (N >= 2) kunye nenani elipheleleyo k, iseli nganye yegridi iqulethe ixabiso. Inani elipheleleyo elisebude [1, N * N] kubandakanya livela kanye kwiiseli zegridi. Kufuneka ufumane eyona ndlela incinci yobude k kwigridi. Ungaqala kuyo nayiphi na iseli, kwaye kwinyathelo ngalinye ungaya nakweyiphi na iiseli ezikufutshane, ngamanye amazwi, ungaya kwiiseli ezabelana ngodonga kunye nawe iseli yangoku. Nceda uqaphele ukuba indlela yobude be-k ithetha ukutyelela iiseli ezi-k (ezingafaniyo). AKUNGAKHO ukuphuma kwigridi. Indlela A (obude be-k) ithathwa njengencinci kuneendlela B (obude be-k) ukuba emva kokwenza uluhlu olucwangcisiweyo lwamaxabiso kwiiseli ezihamba nge-A kunye ne-B (masithi i-l_stA kunye ne-l_stB), i-l_stA ngokwemagama incinci kune-l_stB, ngamanye amagama, inzala ye-intele, ungaya nakweyiphi na iiseli esecaleni. Nceda uqaphele ukuba uqaphele ukuba indlela yobude be-k ithetha ukutyelela iiseli ezi-k (hayi).""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,xho_Latn,python,"
def tri(n):
    """"""Wonke umntu uyayazi inkqubo yeFibonacci, yafundwa nzulu ziingcali zezibalo kwiinkulungwane ezimbini ezidlulileyo. Nangona kunjalo, into abantu abangaziyo yinkqubo yeTribonacci. Inkqubo yeTribonacci ichazwa ngokwenzeka kwakhona: tri(1) = 3 tri(n) = 1 + n / 2, ukuba n yimpinda. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ukuba n yimpinda. Umzekelo: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Unikwe inani elipheleleyo elingelogatya n, kufuneka ubuyise uluhlu lweenombolo zokuqala n + 1 zenkqubo yeTribonacci. Umzekelo: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,xho_Latn,python,"
def digits(n):
    """"""Inikwe inani elipheleleyo elinenani elinenani elipheleleyo n, buyisela imveliso yamanani angalinganiyo. Buyisela u-0 ukuba onke amanani ayalingana. Umzekelo: amanani ((1) == 1 amanani ((4) == 0 amanani ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,xho_Latn,python,"
def is_nested(string):
    '''Yenza umsebenzi othatha umtya njengokungenisa oqukethe kuphela amakhonkco esikwere. Umsebenzi kufuneka ubuyisele i-True ukuba kwaye kuphela ukuba kukho ukulandelelana okusemthethweni kweekhonkco apho ubuncinci ikhonkco elinye kwi-subsequence lifakelwe. is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]]') â -> True is_nested '[[]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,xho_Latn,python,"

def sum_squares(lst):
    """"""Unikwe uluhlu lwamanani. Kufuneka ubuyise isamba samanani aphindwe kabini kuluhlu olunikiweyo, ujikeleze into nganye kuluhlu ukuya kwi-int ephezulu ((I-Ceiling) kuqala. Imizekelo: Kwi-lst = [1,2,3] imveliso kufuneka ibe yi-14 Kwi-lst = [1,4,9] imveliso kufuneka ibe yi-98 Kwi-lst = [1,3,5,7] imveliso kufuneka ibe yi-84 Kwi-lst = [1.4,4.2,0] imveliso kufuneka ibe yi-29 Kwi-lst = [-2.4,1,1] imveliso kufuneka ibe yi-6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,xho_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Yenza umsebenzi obuyisela i-True ukuba uphawu lokugqibela lomtya onikiweyo luphawu lwealfabhethi kwaye aluyona inxalenye yegama, kwaye ubuxoki ngenye indlela. Qaphela: ""igama"" liqela leempawu ezahlulwe ngesithuba. Imizekelo: check_if_last_char_is_a_letter ((""apple pie"") â -> False check_if_last_char_is_a_letter ((""apple pi e"") â -> True check_if_last_char_is_a_letter ((""apple pi e "") â -> False check_if_last_char_is_a_letter"" (("") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,xho_Latn,python,"
def can_arrange(arr):
    """"""Yenza umsebenzi obuyisela elona nani likhulu le-element elingekho ngaphezulu okanye elilingana nelona nqanaba liphambi kwalo. Ukuba akukho nto enjalo ikhoyo ke ibuyisela -1. Umqolo onikiweyo awuyi kuba namaxabiso aphindwe kabini. Imizekelo: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,xho_Latn,python,"
def largest_smallest_integers(lst):
    '''Yenza umsebenzi obuyisela i-tuple (a, b), apho 'a' yeyona inkulu yamanani apheleleyo angalunganga, kwaye 'b' yeyona incinci yamanani apheleleyo alungileyo kuluhlu. Ukuba akukho manani apheleleyo angalunganga okanye alungileyo, babuyisele njengeNone. Imizekelo: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,xho_Latn,python,"
def compare_one(a, b):
    """"""Yenza umsebenzi othatha amanani apheleleyo, i-floats, okanye umtya omele amanani okwenyani, kwaye ubuyisela umahluko omkhulu kuhlobo lwawo olunikiweyo. Buyisela Akukho ukuba amaxabiso alinganayo. Qaphela: Ukuba inani lokwenyani libonakaliswe njengomtya, indawo eguqukayo inokuba . okanye , qhathanisa_enye, 2.5) â -> 2.5 qhathanisa_enye, ""2,3"") â -> ""2,3"" qhathanisa_enye"", ""5,1"", ""6"") â -> ""6"" qhathanisa_enye"", 1) â -> Akukho """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,xho_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Hlola ukuba inani elinikiweyo n lingabhalwa njengengqokelela yeenombolo ezi-4 ezichanekileyo ezichanekileyo Umzekelo is_equal_to_sum_even ((4) == False is_equal_to_sum_even ((6) == False is_equal_to_sum_even ((8) == True """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,xho_Latn,python,"
def special_factorial(n):
    """"""I-factorial yaseBrazil ichazwa njenge: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! apho n > 0 Umzekelo: >>> special_factorial ((4) 288 Umsebenzi uza kufumana inani elipheleleyo njengokungeniswa kwaye kufuneka ubuyise i-factorial ekhethekileyo yeli nani elipheleleyo. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,xho_Latn,python,"
def fix_spaces(text):
    """"""_Umzekelo-3a wombhalo, buyisela zonke izithuba kuwo ngezikhombisi ezisezantsi, kwaye ukuba umtya unendawo engaphezulu kwe-2 elandelelanayo, buyisela zonke izithuba ezilandelelanayo nge - fix_spaces ((""Umzekelo"") == ""Umzekelo"" fix_spaces ((""Umzekelo1"") == ""Umzekelo_1"" fix_spaces (((""Umzekelo2"") == ""_Umzekelo_2"" fix_spaces ((""Umzekelo 3"") == ""_Umzekelo-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,xho_Latn,python,"
def file_name_check(file_name):
    """"""Yenza umsebenzi othatha umtya omele igama lefayile, kwaye ubuyisele 'Ewe' ukuba igama lefayile lisemthethweni, kwaye ubuyisele 'Hayi' ngenye indlela. Igama lefayile lithathwa njengelisemthethweni ukuba kwaye kuphela ukuba zonke iimeko ezilandelayo ziyafezekiswa: - Akufanele kubekho ngaphezulu kwamanani amathathu ('0'-'9') kwigama lefayile. - Igama lefayile liqulathe ichaphaza elinye. - Umtya ongaphantsi phambi kwedoti akufuneki ube mhlophe, kwaye uqala ngoonobumba ukusuka kwi-alphabet yesiLatini ('a'-'z' kunye 'A'Z'). - Umtya ongaphantsi emva kwedoti kufuneka ube yenye yezi: ['txt', 'exe', 'lld'] Imizekelo: file_name_check""{example.txt. #"") => 'Ewe'_name_file_check""{example.dll1"") => 'Hayi' # (igama kufuneka liqale ngoonobumba besiLatini)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,xho_Latn,python,"


def sum_squares(lst):
    """""""" Lo msebenzi uza kuthatha uluhlu lwamanani apheleleyo. Kuzo zonke izinto ezikuluhlu, umsebenzi uza kuphinda-phinda indawo yokungena yenani elipheleleyo ukuba isalathiso sawo sisixa esiphindwe ngo-3 kwaye uza kuyenza ibe yikwikwisixa sokungena kwenani elipheleleyo ukuba isalathiso sawo sisixa esiphindwe ngo-4 kwaye asizi sixa esiphindwe ngo-3. Umsebenzi awuyi kutshintsha izinto ezikuluhlu ezinamaxabiso aziphindwanga ngo-3 okanye ngo-4. Umsebenzi emva koko uza kubuyisa isimbuku sazo zonke izinto ezifakiweyo. Imizekelo: Kuba lst = [1,2,3] isiphumo kufuneka sibe 6 Kuba lst = [] isiphumo kufuneka sibe ngu-0 Kuba lst = [-1,-5,2,-1,-5] isiphumo kufuneka sibe ngu -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,xho_Latn,python,"
def words_in_sentence(sentence):
    """"""Unikwe umtya omele isivakalisi, isivakalisi sinamagama athile ahlukaniswe sisithuba, kwaye kufuneka ubuyise umtya oqukethe amagama asuka kwisivakalisi sokuqala, ubude bawo bunamanani aphambili, ukulandelelana kwamagama kumtya omtsha kufuneka kufane naleyo yoqobo Umzekelo1: Igalelo: isivakalisi = ""Lulo uvavanyo"" Isiphumo: ""ngu"" Umzekelo2: Igalelo: isivakalisi = ""masikhe sihambe ukuqubha"" Isiphumo: ""hamba"" Imida: * 1 <= len(isivakalisi) <= 100 * isivakalisi siqulathe oonobumba kuphela """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,xho_Latn,python,"
def simplify(x, n):
    """"""Umsebenzi wakho kukuphumeza umsebenzi oza kwenza lula ibinzana x * n. Umsebenzi ubuyisela i-True ukuba x * n ilinganisa inani elipheleleyo kwaye i-False ngenye indlela. Zombini i-x kunye ne-n, ziyimpawu zomtya weqhezu, kwaye zinendlela elandelayo, <numerator>/<denominator> apho zombini umbali kunye nesabelo zinamanani apheleleyo. Unokucinga ukuba i-x, kunye ne-n ziziqhezu ezifanelekileyo, kwaye azinayo zero njengedina. lula ""1/ 5"", ""5/1"") = True lula ""1/ 6"", ""2/1"") = False lula ""7/ 10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,xho_Latn,python,"
def order_by_points(nums):
    """"""Bhala umsebenzi olungelelanisa uluhlu olunikiweyo lwee-integer ngokulandelelana ngokunyuka ngokwenani leedijithi zazo. Qaphela: ukuba kukho izinto ezininzi ezinesamba esifanayo seedijithi zazo, zihlele ngokusekwe kwisalathiso sazo kuluhlu lwantlandlolo. Umzekelo: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,xho_Latn,python,"
def specialFilter(nums):
    """"""Bhala umsebenzi othatha uluhlu lwamanani njengokungeniswa kwaye ubuyisele inani lezinto kuluhlu ezingaphezulu kwe-10 kwaye zombini idijithi yokuqala neyokugqibela yenani ziyi-odd (1, 3, 5, 7, 9). Umzekelo: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,xho_Latn,python,"
def get_max_triples(n):
    """"""Unikwe inani elipheleleyo elinenani elifanelekileyo n. Kufuneka wenze uluhlu lwamanani apheleleyo a ngobude n. Kuyo yonke i (1 â‰¤ i â‰¤ n), ixabiso le-a[i] = i * i - i + 1. Buyisela inani lezinto eziphindwe kathathu (a[i], a[j], a[k]) ze-a apho i < j < k, kwaye a[i] + a[j] + a[k] ziziphindaphindwe ezi-3. Umzekelo: Igalelo: n = 5 Imveliso: 1 Inkcazo: a = [1, 3, 7, 13, 21] Kuphela into esebenzayo ephindwe kathathu ngu (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,xho_Latn,python,"
def bf(planet1, planet2):
    '''Kukho iiplanethi ezisibhozo kwinkqubo yethu yelanga: eyona ikufutshane kwiLanga yiMercury, elandelayo yiVenus, emva koko uMhlaba, uMars, uJupiter, uSaturn, u-Uranus, uNeptuune. Bhala umsebenzi othatha amagama amabini eeplanethi njengemisonto iplanethi1 kunye neplanethi2. Umsebenzi kufuneka ubuyise i-tuple equlathe zonke iiplanethi ezijikeleza phakathi komjikelo weplanethi1 kunye nomjikelo weplanethi2, zihlelwe ngokusondela elangeni. Umsebenzi kufuneka ubuyise i-tuple engenanto ukuba iplanethi1 okanye iplanethi2 ayingamagama eeplanethi echanekileyo. Imizekelo bf""(Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf(""Umhlaba"", ""Mercury"") ==> (""Venus"") bf ((""Mercury"", ""Uranus"") ==> (""Venus"", ""Umhlaba"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,xho_Latn,python,"
def sorted_list_sum(lst):
    """"""Bhala umsebenzi owamkela uluhlu lwentambo njengeparameter, ucime intambo ezinobude obungafaniyo kuyo, kwaye ubuyisele uluhlu olwenziwe ngolungelelwaniso oluhleliweyo, Uluhlu luhlala luluhlu lwentambo kwaye alusoze lube ngumqolo wamanani, kwaye lunokuqulatha ukuphindaphinda. Ulungelelwaniso loluhlu kufuneka lube luyanda ngobude begama ngalinye, kwaye kufuneka ubuyisele uluhlu oluhleliweyo ngalo mthetho. Ukuba amagama amabini anobude obufanayo, hlengisa uluhlu ngokwealfabhethi. Umsebenzi kufuneka ubuyisele uluhlu lwentambo ngolungelelwaniso oluhleliweyo. Unokucinga ukuba onke amagama aya kuba nobude obufanayo. Umzekelo: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,xho_Latn,python,"
def x_or_y(n, x, y):
    """"""Inkqubo elula ekufuneka ibuyise ixabiso le-x ukuba n linani eliphambili kwaye kufuneka ibuyise ixabiso le-y ngenye indlela. Imizekelo: ye-x_or_y ((7, 34, 12) == 34 ye-x_or_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,xho_Latn,python,"
def double_the_difference(lst):
    '''Xa unikezwe uluhlu lwamanani, buyisela isamba sezikwere zamanani kuluhlu angahambelaniyo. Ziyibale iinombolo ezingalunganga okanye ezingengabo oonobumba abapheleleyo. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Ukuba uluhlu lokufaka alunanto, buyisela u-0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,xho_Latn,python,"
def compare(game,guess):
    """"""Ndicinga ukuba sonke siyayikhumbula loo mvakalelo xa isiphumo sesiganeko esithile esilindelweyo ekugqibeleni siyaziwa. Iimvakalelo neengcinga onazo ngelo xesha ngokuqinisekileyo zifanelekile ukuba zibhalwe phantsi kwaye zithelekiswe. Umsebenzi wakho kukufumanisa ukuba umntu uyiqikelele ngokuchanekileyo iziphumo zenani lemidlalo. Unikwe amanani amabini amanqaku kunye nokuqikelela ngobude obulinganayo, apho isalathiso ngasinye sibonisa ukufana. Buyisela umqolo wobude obufanayo obonisa ukuba kude kangakanani ukuqikelela nganye. Ukuba baqikelele ngokuchanekileyo, ixabiso ngu-0, kwaye ukuba akunjalo, ixabiso ngumahluko opheleleyo phakathi kokuqikelela kunye nenqaku. umzekelo: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare ((([0,5,0,4],[0,4,1,0,-2]) -> [4,4,0,1,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,xho_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Uya kunikwa igama leklasi (umtya) noluhlu lwezongezo. Izandiso ziya kusetyenziselwa ukulayisha iiklasi ezongezelelweyo kwiklasi. Amandla ezandiso anje: Makhe i-CAP ibe linani loonobumba abakhulu kwigama lesandiso, kwaye makhe i-SM ibe linani loonobumba abancinci kwigama lesandiso, amandla anikwe sisiqwenga se-CAP - SM. Kufuneka ufumane esona sandiso someleleyo kwaye ubuyisele umtya kule fomathi: ClassName.StrongestExtensionName. Ukuba kukho izandiso ezimbini okanye ngaphezulu ezinamandla afanayo, kufuneka ukhethe leyo ivela kuqala kuluhlu. Umzekelo, ukuba unikezwa ""iiSlices"" njengeklasi noluhlu lwezongezo: ['SEviviSliNGCes', 'Cheese', 'StuFfed'] ngoko kufuneka ubuyise 'Slices.SEviSliNGCes' 'SviviSliNGCes' (mySviSliNGCes'), kuba lolona sandiso lomeleleyo (umzekelo: 'AA_Beast'), 'AA_class' lolona sandiso someleleyo.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,xho_Latn,python,"
def cycpattern_check(a , b):
    """"""Unikwe amagama amabini. Kufuneka ubuyisele i-True ukuba igama lesibini okanye naluphi na ujikelezo lwalo luyinxalenye yegama lokuqala cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => True cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => True cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,xho_Latn,python,"
def even_odd_count(num):
    """"""Inikwe inani elipheleleyo. ibuyisela i-tuple enenani lamagama aphindwe kabini kunye namagama angaphindwanga kabini ngokwahlukeneyo. Umzekelo: nokuba_ngokungafaniyo_kwi-count ((-12) ==> (1, 1) nokuba_ngokungafaniyo_kwi-count ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,xho_Latn,python,"
def int_to_mini_roman(number):
    """"""Inikwe inani elipheleleyo elinenani, fumana inani elilinganayo le-Roman numerals njengomtya, kwaye uyibuyisele ngoonobumba abancinci. Imida: 1 <= num <= 1000 Imizekelo: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,xho_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Xa kunikwe ubude bamacala amathathu onxantathu. Buyisela i-True ukuba amacala amathathu enza unxantathu ongakwesokudla, Phosakeleyo ngenye indlela. Unxantathu ongakwesokudla unxantathu apho enye i-engile ingunxantathu okanye i-90 degree. Umzekelo: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,xho_Latn,python,"
def find_max(words):
    """"""Bhala umsebenzi owamkela uluhlu lwentambo. Uluhlu luqukethe amagama ahlukeneyo. Buyisela igama elinenani eliphezulu leempawu ezizodwa. Ukuba iintambo ezininzi zinenani eliphezulu leempawu ezizodwa, buyisela leyo ivela kuqala ngokulandelelana kwe-lexicographical.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,xho_Latn,python,"
def eat(number, need, remaining):
    """"""Wena unogwaja olambileyo, kwaye sele utye inani elithile leemfene, kodwa ngoku kufuneka utye iimfene ezingakumbi ukugqibezela izidlo zosuku. kufuneka ubuyise uluhlu lwe [inani elipheleleyo leemfene ezityiweyo emva kwesidlo sakho, inani leemfene ezishiyekileyo emva kwesidlo sakho ] ukuba akukho zimfene zaneleyo ezishiyekileyo, uya kuzitya zonke iimfene ezishiyekileyo, kodwa uya kuhlala ulambile. Umzekelo: * yitya ((5, 6, 10) -> [11, 4] * yitya ((4, 8, 9) -> [12, 1] * yitya ((1, 10, 10) -> [11, 0] * yitya ((2, 11, 5) -> [7, 0] Variables: @number: integer the number of carrots that you have eaten. @need: integer the number of carrots that you need to eat. @remaining: integer the number of remaining carrots that exist in stock Constrain: *= 0 <= 0 *= 1000 <= 0 * = 1000 <= 0 need remaining stock <= 1000 Have fun = 1000:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,xho_Latn,python,"
def do_algebra(operator, operand):
    """"""Inikwe i-operator ezimbini, kunye ne-operand. Uluhlu lokuqala luneenkqubo ze-algebra ezisisiseko, kwaye uluhlu lwesibini luluhlu lwee-integer. Sebenzisa uluhlu ezimbini ezinikiweyo ukwakha ibinzana le-algebra kwaye ubuyisele ukuvavanywa kwale ntetho. Imisebenzi ye-algebra esisiseko: Ukongeza ( + ) Ukuthabatha ( - ) Ukuphindaphinda ( * ) Ukwahlulwa komgangatho ( // ) Ukubeka ( ** Umzekelo ): umqhubi['+', '*', '-'] array = [2, 3, 4, 5] isiphumo = 2 + 3 * 4 - 5 => isiphumo = 9 Qaphela: Ubude boluhlu lwe-operator bulingana nobude boluhlu lwe-operand minus enye. I-operand luluhlu lwee-integer ezingezizo-negative. Umqhubi unoluhlu olunye lwe-operator, kwaye uluhlu lwe-operand lunomsebenzi ubuncinane.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,xho_Latn,python,"
def solve(s):
    """"""Unikwe umtya s. ukuba s[i] ngoonobumba, tshintsha ityala layo ukusuka ezantsi ukuya phezulu okanye vice versa, kungenjalo yigcine njengoko injalo. Ukuba umtya awunazo iileta, tshintsha umtya. Umsebenzi kufuneka ubuyise umtya obangelweyo. Imizekelo yokusombulula ((""1234"") = ""4321"" (((""ab"") = ""AB"" (((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,xho_Latn,python,"
def string_to_md5(text):
    """"""Ukuba kukho umtya 'umbhalo', buyisela umtya ofanayo we-md5 hash. Ukuba 'umbhalo' ngumtya ongenanto, buyisela u-None. >>> string_to_md5 (('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,xho_Latn,python,"
def generate_integers(a, b):
    """"""Ukunikwa amanani amabini apheleleyo a no b, buyisela amanani apheleleyo phakathi ko a no b, ngokunyuka. Umzekelo: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
