[
    {
        "prompt":"from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Thuthuria kana har\u0129 namba ig\u0129r\u0129 th\u0129in\u0129 wa r\u0169renda r\u0169u, n\u0129 iriku hakuh\u0129 g\u0169k\u0129ra \u0169r\u0129a ciand\u0129k\u0129two.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "canonical_solution":"for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" K\u0129geranio k\u0129a m\u0169bango \u0169y\u0169 n\u0129 m\u0169bango \u0169koragwo na ikundi nying\u0129 cia ndemwa cia k\u0169gwatia. K\u0129r\u0129a \u0169racaria n\u0129 k\u0169gayania ikundi icio na ndemwa ing\u0129 na g\u0169cokia ndemwa iria ir\u0129 kuo. Ndemwa iria ir\u0129 ho n\u0129 ciigan\u0129te (o m\u0169bango \u0169hing\u0169r\u0129\u0129te \u0169hing\u0129two wega) na ti ndemwa cia k\u0169gwatia th\u0129in\u0129 wa ndemwa ing\u0129.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"
    },
    {
        "prompt":"\n\ndef truncate_number(number: float) -> float:\n    \"\"\" K\u0169r\u0129 namba ya positive ya floating point, no \u0129gayanio \u0129tu\u0129ke namba \u0129tar\u0129 ya m\u0169igana (k\u0129ririkano k\u0129a namba nene \u0129r\u0129a nini g\u0169k\u0129ra namba \u0129r\u0129a \u0129hean\u0129two) na namba ya ik\u0169mi (k\u0129ririkano k\u0129r\u0129a g\u0129tigar\u0129te no k\u0129nyihanyihe g\u0169k\u0129ra namba 1).\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "canonical_solution":"    return number % 1.0\n",
        "test":"def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" \u0168k\u0169heo m\u0169taratara wa g\u0169ik\u0129ria na g\u0169cokia mbeca na bengi \u0169mb\u0129r\u0129irie na m\u0169igana wa zero. W\u0129ra waku n\u0129 k\u0169menya kana har\u0129 h\u0129nd\u0129 \u0129mwe m\u0169igana wa mbeca \u0169g\u0169ikara th\u0129 na h\u0129nd\u0129 \u0129yo no \u0169cokie True. Ang\u0129korwo ti \u0169guo n\u0129 \u0169cokagia False. Ngerekano:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "canonical_solution":"    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" N\u0129 \u0169nd\u0169 wa namba iria irehetwo, h\u0169ra Mean Absolute Deviation \u0129r\u0169man\u0129r\u0129ire na mean ya data \u0129yo. Mean Absolute Deviation n\u0129 \u0169gar\u0169r\u0169ku wa gatagat\u0129 ka k\u0129nd\u0169 k\u0129na na g\u0129cunj\u0129 k\u0129a gatagat\u0129 (mean): MAD = average. x - x_mean. Ngerekano:\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    mean = sum(numbers) \/ len(numbers)\n    return sum(abs(x - mean) for x in numbers) \/ len(numbers)\n",
        "test":"def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0\/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0\/5.0) < 1e-6\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Reke namba \u0129korwo \u0129 \"delimeter\" gatagat\u0129 ka icigo ig\u0129r\u0129 iria ir\u0169mag\u0129r\u0129ra cia r\u0169renda rwa \u0169horo wa w\u0129k\u0169ria \u2200numbers\"\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "canonical_solution":"    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" K\u0129rore n\u0129 k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore n\u0129 k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore n\u0129 k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore k\u0129r\u0169g\u0129te na k\u0129rore\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "canonical_solution":"    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" K\u0169hihinya r\u0169renda rwa ndemwa cia k\u0169ing\u0129ra na ndemwa iria ir\u0129 na ndemwa-in\u0129 iria ci\u0129 ho\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if substring in x]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" N\u0129guo m\u0169taratara wa namba \u0129tar\u0129 ya m\u0169hiano \u0169cokerio, no \u0169cokerio m\u0169taratara wa namba \u0129tar\u0129 ya m\u0169hiano.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "canonical_solution":"    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test":"def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" Kuuma har\u0129 namba iria ci\u0129 ho, h\u0169ra namba ya k\u0129ruka k\u0129r\u0129a k\u0129onekaga nginya ihinda r\u0129r\u0129a r\u0129hean\u0129te.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" K\u0169geria ang\u0129kor\u0169o r\u0169thanju r\u0169r\u0129a r\u0169hean\u0129two n\u0129 palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "canonical_solution":"    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" K\u0169ing\u0129ra n\u0129 m\u0129ena \u0129\u0129r\u0129 a na b \u0129koragwo na 1 na 0. \u0128ka XOR ya \u0169b\u0169b\u0169rani har\u0129 m\u0129ena \u0129yo \u0129ing\u0129ra na \u0169cokie k\u0129o o ta m\u0169taratara.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "canonical_solution":"    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test":"def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n"
    },
    {
        "prompt":"from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" G\u0169thi\u0129 na mbere na k\u0169ruta r\u0169renda r\u0169r\u0169 rwa ndemwa, g\u0169cokia r\u0169renda r\u0169r\u0129a r\u0169raihu m\u0169no. K\u0169cokia r\u0169r\u0129a rwa mbere r\u0169ng\u0129g\u0129a na ndemwa nying\u0129 cia \u0169raihu \u0169mwe. G\u0169cokia g\u0169tir\u0129 ang\u0129korwo r\u0169renda r\u0169u r\u0169tir\u0129 k\u0129nd\u0169.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "canonical_solution":"    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test":"def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n"
    },
    {
        "prompt":"\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Hihinya m\u0169gayania m\u0169nene wa namba ig\u0129r\u0129 cia m\u0169igana a na b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    while b:\n        a, b = b, a % b\n    return a\n",
        "test":"def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" R\u0169thiomi rwa r\u0169thiomi rwa k\u0129amb\u0129r\u0129ria rwa r\u0169thiomi rwa k\u0129amb\u0129r\u0129ria\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n"
    },
    {
        "prompt":"\n\ndef string_sequence(n: int) -> str:\n    \"\"\" N\u0129 \u0129cokagia r\u0169rigi r\u0169r\u0129 na namba iria ciaragan\u0129tio na hand\u0169 kuuma 0 nginya n.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test":"def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "prompt":"\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" \u0168ng\u0129heo ndemwa, geria k\u0169menya n\u0129 ndemwa cigana ci\u0129 ho (o na ir\u0129 nini at\u0129a)\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "canonical_solution":"    return len(set(string.lower()))\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" \u0168horo \u0169r\u0129a \u0169ing\u0129h\u0129te th\u0129in\u0129 wa gaturwa gaka n\u0129 r\u0169rigi r\u0169r\u0169gam\u0129r\u0129ire t\u0169rw\u0129mbo t\u0169r\u0129a t\u0169h\u0169thag\u0129rwo na nj\u0129ra ya mwanya ya ASCII. W\u0129ra waku n\u0129 g\u0169thuthuria r\u0169rigi r\u0169u na g\u0169cokia r\u0169\u0169rigi rwa namba iria ir\u0169gam\u0129r\u0129ire t\u0169rw\u0129mbo t\u0169r\u0129a t\u0169tar\u0129 t\u0169thir\u0169ke.\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n"
    },
    {
        "prompt":"\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Thoma maita maigana r\u0169rigi r\u0169mwe r\u0169r\u0129 r\u0169rendain\u0129 rwa mbere.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "canonical_solution":"    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test":"def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" K\u0169ing\u0129ra n\u0129 namba \u0129koragwo na hand\u0169 \u0129tar\u0129 na hand\u0169 kuuma 'zero' nginya 'nine'. M\u0129thuur\u0129re \u0129r\u0129a \u0129r\u0129 na k\u0129hooto n\u0129 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' na 'nine'. K\u0169gar\u0169ra n\u0129 namba ikoragwo na namba iria ciar\u0169r\u0129two kuuma iria nini m\u0169no nginya iria nene m\u0169no\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "canonical_solution":"    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Kuuma har\u0129 namba iria ciarehetwo (na iria ir\u0129 na \u0169raihu wa ta ig\u0129r\u0129) thuura na \u0169cokie iria ig\u0129r\u0129 ir\u0129 hakuh\u0129 m\u0169no na iria ing\u0129 na \u0169cicokie na m\u0169taratara \u0169r\u0129a \u0169raigwo (namba nini, namba nene).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "canonical_solution":"    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" \u0168ng\u0129heo m\u0169taratara wa namba (wa k\u0129nd\u0169 ig\u0129r\u0129), h\u0169ra m\u0169taratara \u0169cio na nj\u0129ra ya k\u0169gar\u0169ra m\u0169taratara \u0169r\u0129a m\u0169nini \u0169tu\u0129ke 0 na \u0169r\u0129a m\u0169nene \u0169tu\u0129ke 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "canonical_solution":"    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) \/ (max_number - min_number) for x in numbers]\n",
        "test":"def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n"
    },
    {
        "prompt":"from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" K\u0169hing\u0169ra t\u0169th\u0169ng\u0169ri t\u0169r\u0129a t\u0169h\u0169thag\u0129rwo n\u0129 Python tu har\u0129 namba nj\u0129th\u0129\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in values if isinstance(x, int)]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n"
    },
    {
        "prompt":"\n\ndef strlen(string: str) -> int:\n    \"\"\" \u0168raihu wa r\u0169rigi r\u0169r\u0129a r\u0169hean\u0129two\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "canonical_solution":"    return len(string)\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n"
    },
    {
        "prompt":"\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" N\u0129 \u0169nd\u0169 wa namba n, geria g\u0169caria namba \u0129r\u0129a nene m\u0169no \u0129gay\u0169kan\u0129te n na nj\u0129ra ya \u0169iguano, na \u0129r\u0129 nini g\u0169k\u0129ra n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test":"def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Rekei t\u0169cokie m\u0169taratara wa namba iria ciand\u0129k\u0129two kuuma namba \u0129r\u0129a nini m\u0169no nginya \u0129r\u0129a nene m\u0169no.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n \/\/= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test":"def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Kuuma har\u0129 namba ciothe, h\u0169ra indo ciothe iria cionekaga mak\u0129ria ma rita r\u0129mwe. R\u0169mia m\u0169taratara wa indo iria ciatigarire ta \u0169r\u0129a ciatari\u0129 r\u0129r\u0129a ciatonyire.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n"
    },
    {
        "prompt":"\n\ndef flip_case(string: str) -> str:\n    \"\"\" N\u0129guo wone m\u0169taratara \u0169r\u0129a \u0169h\u0169th\u0129r\u0129two, h\u0169ra ndemwa nini \u0169coke ndemwa nene na ndemwa nene \u0169coke ndemwa nini.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "canonical_solution":"    return string.swapcase()\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" K\u0169h\u0169\u0169ra ndemwa ta r\u0169rigi\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "canonical_solution":"    return ''.join(strings)\n",
        "test":"def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" G\u0169thondeka r\u0169renda rwa ciugo iria ciamb\u0129r\u0129irie na kiugo k\u0129na n\u0129 k\u0169h\u0169thag\u0129ra nj\u0129ra ya g\u0169thondeka r\u0169renda.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if x.startswith(prefix)]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n"
    },
    {
        "prompt":"\n\ndef get_positive(l: list):\n    \"\"\"K\u0169heana namba iria ir\u0129 na mah\u0129tia tu th\u0129in\u0129 wa r\u0169renda.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "canonical_solution":"    return [e for e in l if e > 0]\n",
        "test":"def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n"
    },
    {
        "prompt":"\n\ndef is_prime(n):\n    \"\"\"\u0168cokagia \u0169horo wa ma ang\u0129kor\u0169o namba \u0129hean\u0129te n\u0129 namba ya mbere, na wa maheeni ang\u0129kor\u0169o ti \u0169guo.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "canonical_solution":"    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n"
    },
    {
        "prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    K\u0169gerekania polynomial na coefficients xs na k\u0129rore x. g\u0169cokia xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) \/ 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test":"def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n"
    },
    {
        "prompt":"\n\ndef sort_third(l: list):\n    \"\"\"G\u0129k\u0129 n\u0129 k\u0129o g\u0129cunj\u0129 k\u0129a m\u0169ico wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "canonical_solution":"    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n"
    },
    {
        "prompt":"\n\ndef unique(l: list):\n    \"\"\"K\u0169heana indo iria ciam\u0169ranio th\u0129in\u0129 wa r\u0169renda\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(list(set(l)))\n",
        "test":"def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n"
    },
    {
        "prompt":"\n\ndef max_element(l: list):\n    \"\"\"K\u0169heana g\u0129cunj\u0129 k\u0129a m\u0169igana \u0169r\u0129a m\u0169nene th\u0129in\u0129 wa r\u0169renda.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "canonical_solution":"    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n"
    },
    {
        "prompt":"\n\ndef fizz_buzz(n: int):\n    \"\"\"K\u0169heana namba ya maita mar\u0129a namba 7 yonekaga nambain\u0129 cia t\u0169h\u0169 itar\u0129 na n iria cigay\u0169kanagio na 11 kana 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "canonical_solution":"    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test":"def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n"
    },
    {
        "prompt":"\n\ndef sort_even(l: list):\n    \"\"\"G\u0129k\u0129 n\u0129 k\u0129o g\u0129tagwo \"list\" na k\u0129o g\u0129cokaga na \"list\" ta \"l\" na k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o, na k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o, na k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o, na k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o, na k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "canonical_solution":"    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n"
    },
    {
        "prompt":"\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    \u0129cokagia ndemwa cia ndemwa iria ciand\u0129k\u0129two na t\u0169kundi twa ndemwa ithat\u0169.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) \/\/ 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return encode_cyclic(encode_cyclic(s))\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n"
    },
    {
        "prompt":"\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib \u0129cokagia namba ya nth \u0129r\u0129a \u0129koragwo \u0129r\u0129 namba ya Fibonacci na ning\u0129 \u0129koragwo \u0129r\u0129 namba ya mbere.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "canonical_solution":"    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test":"def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n"
    },
    {
        "prompt":"\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero \u0129koragwo na namba ya namba. \u0128cokagia k\u0129humo k\u0129ayo n\u0129 ma n\u0129 \u0129koragwo na namba ithat\u0169 iria cionanagia namba ya zero, na r\u0129ng\u0129 n\u0129 ya ma.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n"
    },
    {
        "prompt":"\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Ta h\u0169ra mbica ya barabara \u0129r\u0169gam\u0129te wega \u0129tar\u0129 m\u0169thia. ngari n irathi\u0129 na mwena wa \u0169motho na wa \u0169r\u0129o; na ihinda o r\u0129u, ngari n ing\u0129 irathi\u0129 na mwena wa \u0169r\u0129o na wa \u0169motho. Ngari icio ig\u0129r\u0129 ciamb\u0129r\u0129irie ir\u0129 k\u0169raihu m\u0169no. Ngari ciothe ciathiaga na ihenya o r\u0129mwe. Ngari ig\u0129r\u0129 ci\u0169raganaga r\u0129r\u0129a ngari \u0129rathi\u0129 na mwena wa \u0169motho na wa \u0169r\u0129o \u0129g\u0169tha ngari \u0129rathi\u0129 na mwena wa \u0169r\u0129o na wa \u0169motho. O na k\u0169r\u0129 \u0169guo, ngari icio n\u0129 njiganu na n\u0129 cia hinya m\u0169no; na n\u0129 \u0169nd\u0169 \u0169cio, no irathi\u0129 na mbere na nj\u0129ra yacio ta itar\u0129 cia k\u0169g\u0169tha.\n    \"\"\"\n",
        "canonical_solution":"    return n**2\n",
        "test":"def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n"
    },
    {
        "prompt":"\n\ndef incr_list(l: list):\n    \"\"\"R\u0169thiomi rwa g\u0169cokia indo na ciongererekete na 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "canonical_solution":"    return [(e + 1) for e in l]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n"
    },
    {
        "prompt":"\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero \u0129koragwo na namba cia m\u0169igana m\u0169kinyan\u0129ru. \u0128cokagia k\u0129humo k\u0129ayo True ang\u0129kor\u0169o har\u0129 na ci\u0129ga ig\u0129r\u0129 th\u0129in\u0129 wa k\u0129humo k\u0129u iria cionanagia namba ya zero, na False ang\u0129kor\u0169o ti \u0169guo.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n"
    },
    {
        "prompt":"\n\ndef change_base(x: int, base: int):\n    \"\"\"K\u0169gar\u0169ra namba ya k\u0129humo ya namba x \u0129tu\u0129ke ya k\u0129humo. g\u0169cokia r\u0169thimi thutha wa k\u0169gar\u0169ra. namba cia k\u0129humo n\u0129 nini g\u0169k\u0129ra 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "canonical_solution":"    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x \/\/= base\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n"
    },
    {
        "prompt":"\n\ndef triangle_area(a, h):\n    \"\"\"\u0168raihu wa mwena na g\u0129thimi k\u0129nene g\u0129a k\u0169gar\u0169r\u0169ka har\u0129 g\u0129thimi g\u0129a ithat\u0169.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "canonical_solution":"    return a * h \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n"
    },
    {
        "prompt":"\n\ndef fib4(n: int):\n    \"\"\"Mwerekero wa namba cia Fib4 n\u0129 wa k\u0169igana ta wa Fibbonacci \u0169r\u0129a \u0169menyithan\u0129tio na nj\u0129ra \u0129no: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Twand\u0129k\u0129re k\u0129geranio g\u0129a g\u0169thondeka k\u0129geranio k\u0129a namba cia fib4. Nd\u0169kanareke k\u0169gar\u0169r\u0169ka.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "canonical_solution":"    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test":"def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n"
    },
    {
        "prompt":"\n\ndef median(l: list):\n    \"\"\"\u0168horo \u0169r\u0129a \u0169cokag\u0129rio n\u0129 indo iria ir\u0129 r\u0169renda-in\u0129 rwa l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "canonical_solution":"    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) \/\/ 2]\n    else:\n        return (l[len(l) \/\/ 2 - 1] + l[len(l) \/\/ 2]) \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(text: str):\n    \"\"\"\n    K\u0169rora kana r\u0169rigi r\u0169r\u0129a r\u0169hean\u0129two n\u0129 rwa palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n"
    },
    {
        "prompt":"\n\ndef modp(n: int, p: int):\n    \"\"\"H\u0169nd\u0169ra 2^n modulo p (m\u0169k\u0129menyaga namba).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "canonical_solution":"    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n"
    },
    {
        "prompt":"\n\ndef encode_shift(s: str):\n    \"\"\"\n    \u0129cokagia ndemwa iria ciand\u0129k\u0129two na nj\u0129ra ya g\u0169cenjia ndemwa ciothe na 5 th\u0129in\u0129 wa alfabeti.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n"
    },
    {
        "prompt":"\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels n\u0129 w\u0129ra \u0169rehaga r\u0169rigi r\u0169tar\u0129 na vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n"
    },
    {
        "prompt":"\n\ndef below_threshold(l: list, t: int):\n    \"\"\"\u0168cokagia \u0169horo wa ma ang\u0129kor\u0169o namba ciothe th\u0129in\u0129 wa r\u0169renda l ir\u0129 rungu rwa m\u0169ico t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "canonical_solution":"    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n"
    },
    {
        "prompt":"\n\ndef add(x: int, y: int):\n    \"\"\"Ongerera namba ig\u0129r\u0129 x na y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "canonical_solution":"    return x + y\n",
        "test":"def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n"
    },
    {
        "prompt":"\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Rora kana ciugo ig\u0129r\u0129 n\u0129 ikoragwo na ndemwa o imwe.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "canonical_solution":"    return set(s0) == set(s1)\n",
        "test":"def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n"
    },
    {
        "prompt":"\n\ndef fib(n: int):\n    \"\"\"H\u0169g\u0169k\u0129ra namba ya Fibonacci ya namba ya nth.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test":"def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets n\u0129 r\u0169rigi rwa \"<\" na \">\". return True ang\u0129kor\u0169o bracket ya k\u0169hing\u0169ra \u0129koragwo na bracket ya k\u0169hinga.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n"
    },
    {
        "prompt":"\n\ndef monotonic(l: list):\n    \"\"\"K\u0169gar\u0169ra n\u0129 k\u0169r\u0169gam\u0129r\u0129ire at\u0129 indo iria ir\u0129 r\u0169renda-in\u0129 n\u0129 ciongererekaga kana ikanyihanyih\u0129a na nj\u0129ra ya m\u0169taratara.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "canonical_solution":"    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n"
    },
    {
        "prompt":"\n\ndef common(l1: list, l2: list):\n    \"\"\"N\u0129 g\u0169cokia indo iria ci\u0169ran\u0129tio iria ir\u0129 na k\u0129nd\u0169 k\u0129mwe tu har\u0129 indo iria ig\u0129r\u0129.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "canonical_solution":"    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test":"def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n"
    },
    {
        "prompt":"\n\ndef largest_prime_factor(n: int):\n    \"\"\"T\u0169coke tw\u0129cirie at\u0129 n > 1 na ti namba ya mbere.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test":"def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n"
    },
    {
        "prompt":"\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n n\u0129 m\u0169taratara \u0169cokagia namba kuuma 1 nginya n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "canonical_solution":"    return sum(range(n + 1))\n",
        "test":"def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets n\u0129 r\u0169rigi rwa \"(\" na \"\". return True ang\u0129kor\u0169o bracket ya k\u0169hing\u0169ra \u0129koragwo na bracket ya k\u0169hinga.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n"
    },
    {
        "prompt":"\n\ndef derivative(xs: list):\n    \"\"\" xs n\u0129 k\u0169r\u0169gam\u0129r\u0129ra coefficients cia polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... K\u0169cokia derivative ya polynomial \u0129no na nj\u0129ra o ta \u0129yo.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "canonical_solution":"    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n"
    },
    {
        "prompt":"\n\ndef fibfib(n: int):\n    \"\"\"Mwerekero wa namba cia FibFib n\u0129 wa k\u0169igana ta wa Fibbonacci \u0169r\u0129a \u0169menyithan\u0129tio na nj\u0129ra \u0129no: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). And\u0129ka m\u0169taratara wa g\u0169thondeka k\u0129ruru k\u0129a namba cia fibfib.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test":"def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n"
    },
    {
        "prompt":"\nFIX = \"\"\"\nOngerera ma\u0169nd\u0169 mang\u0129 ma k\u0169gerera.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef circular_shift(x, shift):\n    \"\"\"G\u0169thondekithia m\u0169hiano wa ci\u0129ga cia m\u0169igana wa x, g\u0169thondekithia ci\u0129ga mwena wa \u0169r\u0129o na g\u0169cokia k\u0129o ta m\u0169hiano.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "canonical_solution":"    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef digitSum(s):\n    \"\"\"W\u0129ra And\u0129ka m\u0169taratara \u0169h\u0169th\u0129kaga ta m\u0169taratara wa g\u0169cokia m\u0169igana wa ndemwa cia ig\u0169r\u0169 tu cia ASCII. Ngerekano: digitSum(\"\") => 0 digitSum(\"abAB\") => 131 digitSum(\"abcCd\") => 67 digitSum(\"helloE\") => 69 digitSum(\"woArBld\") => 131 digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
        "canonical_solution":"    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef fruit_distribution(s,n):\n    \"\"\"\n    Th\u0129in\u0129 wa w\u0129ra \u0169y\u0169, n\u0129 \u0169heagwo r\u0169rigi r\u0169r\u0169gam\u0129r\u0129ire namba ya mathang\u0169 na mathang\u0169 mar\u0129a matheremetio th\u0129in\u0129 wa g\u0129kab\u0169 k\u0129a matunda g\u0129kab\u0169 g\u0129k\u0129 k\u0129r\u0129 na mathang\u0169, mathang\u0169, na matunda ma mango. K\u0169heo r\u0169rigi r\u0169r\u0169gam\u0129r\u0129ire namba ya mathang\u0169 na mathang\u0169 na namba \u0129r\u0169gam\u0129r\u0129ire namba ya matunda th\u0129in\u0129 wa g\u0129kab\u0169 g\u0169cokia namba ya matunda ma mango th\u0129in\u0129 wa g\u0129kab\u0169. Kwa ngerekano: fruit_distribution\"5(mathang\u0169 na mathang\u0169 6\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 mathang\u0169 na 1 mathang\u0169\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 mathang\u0169 na 3 mathang\u0169\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 mathang\u0169 na 120) \",1 -> 120 - 100 - 1\n    \"\"\"\n",
        "canonical_solution":"    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n"
    },
    {
        "prompt":"\ndef pluck(arr):\n    \"\"\"\n    \"G\u0129cokio k\u0129onanagia r\u0169honge rwa m\u0169t\u0129 r\u0169r\u0129a r\u0169koragwo na namba itar\u0129 nj\u0169ru w\u0129ra waku n\u0129 g\u0169cokania \u0129mwe ya t\u0169cungwa na k\u0169r\u0169cokia. \u0168cokania \u0169r\u0129a \u0169g\u0169cokania wag\u0129r\u0129ir\u0169o g\u0169kor\u0169o \u0169r\u0129 wa t\u0169cungwa t\u0169r\u0129a t\u0169koragwo na k\u0129o k\u0129nini m\u0169no. Ang\u0129kor\u0169o t\u0169cungwa t\u0169ing\u0129 t\u0169koragwo na k\u0129o k\u0129nini m\u0169no no t\u0169cokie k\u0129o k\u0129o k\u0129o k\u0129nini m\u0169no. \u0168cokania \u0169r\u0129a \u0169g\u0169cokania wag\u0129r\u0129ir\u0169o g\u0169cokia k\u0129o k\u0129o k\u0129o k\u0129nini m\u0169no k\u0129na index. \u0168cokania \u0169r\u0129a \u0169g\u0169cokania wag\u0129r\u0129ir\u0169o g\u0169cokia k\u0129o k\u0129o k\u0129o k\u0129o k\u0129nini m\u0169no k\u0129o k\u0129o k\u0129o k\u0129o k\u0129o, [smallest_value, its index] Ang\u0129kor\u0169o g\u0169tir\u0129 t\u0169cungwa t\u0169r\u0129a t\u0169koragwo na k\u0129o k\u0129o k\u0129o kana k\u0129o k\u0129o k\u0129\n    \"\"\"\n",
        "canonical_solution":"    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "canonical_solution":"    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test":"def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n"
    },
    {
        "prompt":"\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "canonical_solution":"    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "canonical_solution":"    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)\/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n"
    },
    {
        "prompt":"\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u00e2 -> False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u00e2 -> False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u00e2 -> True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u00e2 -> True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "canonical_solution":"    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n"
    },
    {
        "prompt":"\ndef smallest_change(arr):\n    \"\"\"\n    K\u0169r\u0129 m\u0169taratara wa namba cia m\u0169igana, geria \u0169menye m\u0169igana \u0169r\u0129a m\u0169nini wa indo iria irabatara k\u0169gar\u0169r\u0169ka n\u0129guo m\u0169taratara \u0169tu\u0129ke wa palindromic. M\u0169taratara wa palindromic n\u0129 m\u0169taratara \u0169r\u0129a \u0169rathoma na nj\u0129ra o ta \u0129yo na thutha na mbere. \u0168gar\u0169r\u0169ku \u0169mwe, no \u0169gar\u0169re k\u0129nd\u0169 k\u0129mwe g\u0129tu\u0129ke k\u0129nd\u0169 k\u0129ng\u0129 o g\u0129othe. Kwa ngerekano: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
        "canonical_solution":"    ans = 0\n    for i in range(len(arr) \/\/ 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n"
    },
    {
        "prompt":"\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u00e2 -> []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u00e2 -> ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u00e2 -> ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u00e2 -> ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u00e2 -> ['4']\n    '''\n",
        "canonical_solution":"    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n"
    },
    {
        "prompt":"\ndef is_multiply_prime(a):\n    \"\"\"And\u0129ka k\u0129geranio k\u0129r\u0129a k\u0129ng\u0129t\u0169ma k\u0129g\u0129e na \u0169horo wa ma ang\u0129korwo namba \u0129r\u0129a \u0129hean\u0129two n\u0129 ya k\u0169h\u0169ranwo na namba 3 cia k\u0129amb\u0129 na k\u0129ng\u0129t\u0169ma k\u0129g\u0129e na \u0169horo wa ma ang\u0129korwo namba icio ing\u0129 ti cia k\u0129amb\u0129.\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n"
    },
    {
        "prompt":"\ndef is_simple_power(x, n):\n    \"\"\"W\u0129ra waku n\u0129 kwand\u0129ka m\u0169taratara \u0169cokagia k\u0129humo k\u0129a ma ang\u0129kor\u0169o namba x n\u0129 namba ya n na ya maheni h\u0129nd\u0129 \u0129ng\u0129. x n\u0129 namba ya maheni ya n ang\u0129kor\u0169o n**int=x Kwa ngerekano: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false\n    \"\"\"\n",
        "canonical_solution":"    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "canonical_solution":"    a = abs(a)\n    return int(round(a ** (1. \/ 3))) ** 3 == a\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n"
    },
    {
        "prompt":"\ndef hex_key(num):\n    \"\"\"\u0168r\u0129 na w\u0129ra wa kwand\u0129ka m\u0169taratara \u0169h\u0169thag\u0129ra namba ya ik\u0169mi na ithathat\u0169 ta r\u0169rigi na \u0169rathurana na namba ya ik\u0169mi na ithathat\u0169 ya namba iria ir\u0129 prime (namba ya mbere, kana prime, n\u0129 namba ya k\u0129\u0169mbe nene g\u0169k\u0129ra 1 \u0129r\u0129a \u0129tar\u0129 m\u0169bango wa namba nini ig\u0129r\u0129 cia k\u0129\u0169mbe). Nambari cia ik\u0169mi na ithathat\u0169 n\u0129 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Namba cia prime n\u0129 2, 3, 5, 7, 11, 13, 17,... Kwoguo \u0169bataire g\u0169tua namba ya ci\u0129ga ici: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). \u0168taaro: no \u0169h\u0169\u0169re at\u0129 namba \u0129r\u0129a \u0129ing\u0129r\u0129two n\u0129 ya ma kana ti ya ma, na m\u0129gambo ya A,B,C,D,E,F, \u0129koragwo \u0129r\u0129 m\u0129nene.\n    \"\"\"\n",
        "canonical_solution":"    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n"
    },
    {
        "prompt":"\ndef decimal_to_binary(decimal):\n    \"\"\"\u0168k\u0169heo namba ya g\u0129cunj\u0129 na w\u0129ra waku n\u0129 k\u0169gar\u0169ra \u0129tu\u0129ke namba ya g\u0129cunj\u0129. Function \u0129yo n\u0129 \u0129g\u0169cokia ndemwa, na o ndemwa \u0129r\u0169gam\u0129r\u0129ire namba ya g\u0129cunj\u0129. O ndemwa th\u0129in\u0129 wa ndemwa \u0129g\u0169tu\u0129ka '0' kana '1'. N\u0129 g\u0169gakorwo na ndemwa ing\u0129 cigana \u0169na 'db' k\u0129amb\u0129r\u0129riain\u0129 na m\u0169thia-in\u0129 wa ndemwa. Ndemwa icio ing\u0129 ir\u0129 ho n\u0129guo iteithie na m\u0169bango. Ngerekano: decimal_to_binary ((15) # \u0129cokagia \"db1111db\" decimal_to_binary32) # \u0129cokagia \"db100000db\"\n    \"\"\"\n",
        "canonical_solution":"    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef is_happy(s):\n    \"\"\"\u0168heagwo m\u0169ciar\u0129re wa ndemwa s. W\u0129ra waku n\u0129 k\u0169rora kana m\u0169ciar\u0129re \u0169cio n\u0129 wa g\u0129keno kana ti wa g\u0129keno. M\u0169ciar\u0129re n\u0129 wa g\u0129keno ang\u0129korwo \u0169raihu waguo n\u0129 ta 3 na ndemwa ciothe 3 iria ir\u0169m\u0129r\u0129ire n\u0129 ng\u0169rani Kwa ngerekano: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False\n    \"\"\"\n",
        "canonical_solution":"    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n"
    },
    {
        "prompt":"\ndef numerical_letter_grade(grades):\n    \"\"\"N\u0129 kiumia k\u0129a m\u0169ico k\u0129a g\u0129thomo na mwarim\u0169 no m\u0169haka ahe arutwo mar\u0169a. mwarim\u0169 n\u0129 akoretwo ak\u0129ruta m\u0169taratara wake wa k\u0169iga mar\u0169a. Th\u0129na no at\u0129 n\u0129 atig\u0129te k\u0129humo k\u0129r\u0129a aah\u0169thag\u0129ra k\u0169iga mar\u0169a. N\u0129 ak\u0169heete m\u0169taratara wa GPA cia arutwo amwe na no m\u0169haka \u0169and\u0129ke m\u0169taratara \u0169ng\u0129g\u0169teithia k\u0169ruta mar\u0169a ma mar\u0169a ma mar\u0169a \u0169h\u0169th\u0129r\u0129te m\u0169taratara \u0169y\u0169: GPA.\n    \"\"\"\n",
        "canonical_solution":"\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef prime_length(string):\n    \"\"\"And\u0129ka itemi r\u0129r\u0129a r\u0129oyaga r\u0169rigi na r\u0129gacokia ma ang\u0129korwo r\u0169rigi r\u0169u n\u0129 namba ya mbere kana maheni ang\u0129korwo ti \u0169guo Ngerekano prime_length{'Hello') == True prime_length{'abcdcba') == True prime_length{'kittens') == True prime_length{'orange') == False\n    \"\"\"\n",
        "canonical_solution":"    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n"
    },
    {
        "prompt":"\ndef starts_one_ends(n):\n    \"\"\"\n    \u0168ng\u0129heo namba \u0129tar\u0129 ya k\u0169h\u0129t\u0169ka n, h\u0169ra namba ya namba cia m\u0129rongo \u0129tar\u0129 ya k\u0169h\u0129t\u0169ka n iria ciamb\u0129r\u0129irie na namba 1 kana ik\u0129r\u0129kia na namba 1.\n    \"\"\"\n",
        "canonical_solution":"    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(N):\n    \"\"\"G\u0129k\u0129 k\u0129geranio k\u0129ronania m\u0169igana wa namba N, k\u0129rore m\u0169igana wa namba icio. Ngerekano ya N = 1000, m\u0169igana wa namba n\u0129 1 na k\u0129rore \"1\". Ngerekano ya N = 150, m\u0169igana wa namba n\u0129 6 na k\u0129rore \"110\". Ngerekano ya N = 147, m\u0169igana wa namba n\u0129 12 na k\u0129rore \"1100\".\n    \"\"\"\n",
        "canonical_solution":"    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n"
    },
    {
        "prompt":"\ndef add(lst):\n    \"\"\"K\u0169r\u0129 na m\u0169taratara wa namba itar\u0129 cia t\u0169h\u0169, namba ya mbere \u0129ongerer\u0169o na namba ya mwanya. Ngerekano: ongerera (([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
        "canonical_solution":"    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n"
    },
    {
        "prompt":"\ndef anti_shuffle(s):\n    \"\"\"\n    And\u0129ka gaturwa kar\u0129a kah\u0169thag\u0129ra r\u0169rigi na kar\u0169cokia na nj\u0129ra ya k\u0169r\u0169nga. R\u0169rigi r\u0169r\u0169nga, n\u0129 r\u0169rigi rw\u0129 na ciugo ciothe (ciam\u0169ran\u0129tio na kam\u0169huko) igatu\u0129rwo na kiugo k\u0129er\u0169, na ndemwa ciothe igatwarwo na nj\u0129ra ya k\u0169r\u0169nga k\u0169ringana na \u0169rit\u0169 wa ascii. K\u0129ririkano: N\u0129wag\u0129r\u0129irwo k\u0169iga m\u0169taratara wa ciugo na t\u0169th\u0169ng\u0169ri m\u0169gima. Kwa ngerekano: anti_shuffle ((('Hi') n\u0129 g\u0169cokia 'Hi' anti_shuffle ((('hi') n\u0129 g\u0169cokia 'ehllo' anti_shuffle (('Hello World!!!') n\u0129 g\u0169cokia 'Hello!!!Wdlor'\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef get_row(lst, x):\n    \"\"\"\n    \u0168heagwo data ya m\u0129mera \u0129\u0129r\u0129, ta lists iria ci\u0129gerekanagia, iria iringaine na matrix, no, ng\u0169rani na matrix, r\u0169tara r\u0169mwe no rw\u0129 na namba ng\u0169rani ya column. \u0168heete lst, na integer x, \u0169carie integers x th\u0129in\u0129 wa list, na \u0169cokie list ya tuples, [(x1, y1), (x2, y2)...] ta at\u0129 tuple o yothe n\u0129 coordinate - (row, columns), kwamb\u0129r\u0129ria na 0.\n    \"\"\"\n",
        "canonical_solution":"    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef sort_array(array):\n    \"\"\"\n    \u0168ng\u0129heo m\u0169taratara wa namba itar\u0129 cia negative, \u0169coke \u0169cokie m\u0169taratara \u0169cio thutha wa g\u0169cokan\u0129r\u0129ria, \u0169cokan\u0129r\u0129rie m\u0169taratara \u0169cio na nj\u0129ra ya kwambata ang\u0129kor\u0169o m\u0169igana wa namba ((m\u0169taratara wa mbere, wa m\u0169thia) n\u0129 wa mwanya, kana \u0169cokan\u0129r\u0129rie na nj\u0129ra ya k\u0169ik\u0169r\u0169ka ang\u0129kor\u0169o m\u0169taratara wa namba ((m\u0169taratara wa mbere, wa m\u0169thia) n\u0129 wa mwanya.\n    \"\"\"\n",
        "canonical_solution":"    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef encrypt(s):\n    \"\"\"G\u0169thondeka m\u0169taratara wa k\u0169hitha \u0169r\u0129a \u0169kuoya r\u0169rigi ta k\u0129geranio na \u0169gacokia r\u0169rigi r\u0169tand\u0129k\u0129two na ndemwa cia alfabeti ig\u0129c\u0169hio. Ndemwa cia alfabeti ciag\u0129r\u0129irwo g\u0169c\u0169hio na nj\u0129ra ya at\u0129 ndemwa cia ndemwa icio ciikare k\u0169nd\u0169 k\u0169\u0129r\u0129. Kwa ngerekano: k\u0169hitha (('hi') g\u0169cokia 'lm' k\u0169hitha (('asdfghjkl') g\u0169cokia 'ewhjklnop' k\u0169hitha (('gf') g\u0169cokia 'kj' k\u0169hitha (('et') g\u0169cokia 'ix'\n    \"\"\"\n",
        "canonical_solution":"    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef next_smallest(lst):\n    \"\"\"\n    \u0168heagwo m\u0169taratara wa namba. And\u0129ka gaturwa next_smallest (() kar\u0129a gacokagia namba ya ker\u0129 ya k\u0129ruka k\u0129a namba. Gatua None ang\u0129korwo g\u0169tir\u0129 k\u0129ruka ta k\u0129u. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None\n    \"\"\"\n",
        "canonical_solution":"    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_bored(S):\n    \"\"\"\n    \u0168ng\u0129heo ciugo, w\u0129ra waku n\u0129 g\u0169tara m\u0169igana wa ciugo iria ciamb\u0129r\u0129ria na kiugo \"I\". M\u0129hari \u0129koragwo na m\u0129haka ya '.', '?' kana '!'. Kwa ngerekano:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "canonical_solution":"    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u00e2 -> True\n    \n    any_int(3, 2, 2) \u00e2 -> False\n\n    any_int(3, -2, 1) \u00e2 -> True\n    \n    any_int(3.6, -2.2, 2) \u00e2 -> False\n  \n\n    \n    '''\n",
        "canonical_solution":"    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef encode(message):\n    \"\"\"\n    And\u0129ka gaturwa kar\u0129a ga kuoya nd\u0169m\u0129r\u0129ri, na kar\u0129 na nj\u0129ra ya g\u0169cenjia ndemwa ciothe, na kar\u0129 na ndemwa iria cionekaga mbere ya ndemwa \u0129yo ya r\u0169thiomi rwa G\u0129th\u0169ng\u0169.\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\n\ndef skjkasdkd(lst):\n    \"\"\"\u0168k\u0169heo r\u0169renda rwa namba. \u0168k\u0169batara g\u0169caria namba \u0129r\u0129a nene na \u0169cokie m\u0169igana wa ci\u0129ga ciayo. Ngerekano: Kwa lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] m\u0169igana wa namba \u0169g\u0169tu\u0129ka 10 Kwa lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] m\u0169igana wa namba \u0169g\u0169tu\u0129ka 25 Kwa lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] m\u0169igana wa namba \u0169g\u0169tu\u0129ka 13 Kwa lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] m\u0169igana wa namba \u0169g\u0169tu\u0129ka 11 Kwa lst = [0,81,12,31,21] m\u0169igana wa namba \u0169\n    \"\"\"\n",
        "canonical_solution":"    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n"
    },
    {
        "prompt":"\ndef check_dict_case(dict):\n    \"\"\"\n    G\u0129k\u0129he kam\u0169tarar\u0129, k\u0129gar\u0169re True ang\u0129korwo tuongia tuothe n\u0129 t\u0169th\u0169ng\u0169ri twa ndemwa nini kana tuongia tuothe n\u0129 t\u0169th\u0169ng\u0169ri twa ndemwa nene, kana k\u0129gar\u0169re False. Function n\u0129 yag\u0129r\u0129irwo n\u0129 g\u0169cokia False ang\u0129korwo kam\u0169tarar\u0129 n\u0129 ka t\u0169h\u0169. Ngerekano: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) yag\u0129r\u0129irwo n\u0129 g\u0169cokia True. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) yag\u0129r\u0129irwo n\u0129 g\u0169cokia False. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) yag\u0129r\u0129irwo n\u0129 g\u0169cokia False. check_dict_case{\"NC\n    \"\"\"\n",
        "canonical_solution":"    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n"
    },
    {
        "prompt":"\ndef count_up_to(n):\n    \"\"\"K\u0169h\u0169th\u0129ra gaturwa kar\u0129a kahota k\u0169heana namba itar\u0129 cia k\u0129negetivu na g\u0169cokia m\u0169taratara wa namba n cia mbere iria ir\u0129 namba cia mbere na itar\u0129 nene g\u0169k\u0129ra n. Kwa ngerekano: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
        "canonical_solution":"    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n"
    },
    {
        "prompt":"\ndef multiply(a, b):\n    \"\"\"G\u0169thondeka m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra m\u0169taratara wa k\u0169gar\u0169ra\n    \"\"\"\n",
        "canonical_solution":"    return abs(a % 10) * abs(b % 10)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n"
    },
    {
        "prompt":"\ndef count_upper(s):\n    \"\"\"\n    \u0168ng\u0129heo r\u0169\u0169ri s, ta\u0169ra m\u0169igana wa ndemwa cia k\u0129r\u0129\u0129ti iria ir\u0129 na ndemwa nene na ndemwa cia mwanya. Kwa ngerekano: count_upper (('aBCdEf') \u0129cokagia 1 count_upper (('abcdefg') \u0129cokagia 0 count_upper (('dBBE') \u0129cokagia 0\n    \"\"\"\n",
        "canonical_solution":"    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For Exampleclosest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "canonical_solution":"    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n"
    },
    {
        "prompt":"\ndef make_a_pile(n):\n    \"\"\"\n    \u0168ng\u0129heo namba \u0129tar\u0129 ya m\u0169igana n, \u0169g\u0169ikara \u0169g\u0129cokan\u0129r\u0129ria mathang\u0169 ma ihiga. Metha ya mbere \u0129koragwo na mahiga n. Namba ya mahiga ya k\u0129rango k\u0129r\u0129a k\u0129r\u0169m\u0129r\u0129ire n\u0129: - namba \u0129r\u0129a \u0129r\u0169m\u0129r\u0129ire ya k\u0129rathi k\u0129a mwanya ang\u0129korwo n n\u0129 ya k\u0129rathi k\u0129a mwanya. - namba \u0129r\u0129a \u0129r\u0169m\u0129r\u0129ire ya k\u0129rathi k\u0129a mwanya ang\u0129korwo n n\u0129 ya k\u0129rathi k\u0129a mwanya.\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    return [n + 2*i for i in range(n)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef words_string(s):\n    \"\"\"\n    \u0168k\u0169heo ciugo iria ik\u0169gayanio na t\u0169th\u0169ng\u0169ri kana t\u0169th\u0169ng\u0169ri. W\u0129ra waku n\u0129 k\u0169gayania ciugo icio na g\u0169cokia ciugo iria ik\u0169gayanio. Kwa ngerekano: words_string ((\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] words_string ((\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
        "canonical_solution":"    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n"
    },
    {
        "prompt":"\ndef choose_num(x, y):\n    \"\"\"G\u0129k\u0129 n\u0129 k\u0129o k\u0129o g\u0129tagwo n\u0129 k\u0129o g\u0129k\u0169riaga m\u0169igana wa namba ya m\u0169igana wa namba ya m\u0169igana wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba wa namba\n    \"\"\"\n",
        "canonical_solution":"    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n"
    },
    {
        "prompt":"\ndef rounded_avg(n, m):\n    \"\"\"\u0168heagwo namba ig\u0129r\u0129 njeru n na m, na w\u0129ra waku n\u0129 g\u0169thondeka m\u0169igana wa namba kuuma n nginya m (na n na m). \u0128r\u0169nga macokio nginya namba \u0129r\u0129a \u0129r\u0129 hakuh\u0129 na \u0169coke \u0169tue namba ya ker\u0129. Ang\u0129korwo n n\u0129 nene g\u0169k\u0129ra m, coka na -1. Ngerekano: rounded_avg{1, 5} => \"0b11\" rounded_avg{7, 5} => -1 rounded_avg{10, 20} => \"0b11\" rounded_avg{20, 33) \"0b11010\"\n    \"\"\"\n",
        "canonical_solution":"    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation\/(m - n + 1)))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n"
    },
    {
        "prompt":"\ndef unique_digits(x):\n    \"\"\"K\u0169r\u0129 na m\u0169taratara wa namba cia positive x, no \u0169cokie m\u0169taratara wa indo ciothe itar\u0129 na namba ya m\u0169igana.\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "canonical_solution":"    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef by_length(arr):\n    \"\"\"\n    \u0168ng\u0129heo m\u0169taratara wa namba, h\u0169ra namba iria ir\u0129 gatagat\u0129 ka 1 na 9, \u0169coke \u0169gar\u0169re m\u0169taratara \u0169r\u0129a \u0169kuoneka, na \u0169coke \u0169cokie hand\u0169 ha namba \u0129mwe na \u0129r\u0129a \u0129r\u0169m\u0129r\u0129ire kuuma \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\". Kwa ngerekano: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> h\u0169ra arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> h\u0169ra arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [\"Eight\", \"Five\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"] Ang\u0129kor\u0169o m\u0169taratara \u0169cio nd\u0169r\u0129 k\u0129nd\u0169, h\u0169ra m\u0169taratara: arr = [] return [] Ang\u0129kor\u0169o m\u0169taratara \u0169cio \u0169r\u0129 na namba \u0129tar\u0129 ya nd\u0169ire,\n    \"\"\"\n",
        "canonical_solution":"    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n"
    },
    {
        "prompt":"\ndef f(n):\n    \"\"\" K\u0169h\u0169th\u0129ra gaturwa f kar\u0129a kah\u0169thag\u0129ra n ta kar\u0129a ka m\u0169taratara, na kar\u0129 na m\u0169taratara wa \u0169raihu wa n, ta \u0169r\u0129a k\u0129ene k\u0129a k\u0129eny\u0169 i k\u0129r\u0129 index i n\u0129 factor ya i ang\u0129korwo i n\u0129 \u0129tar\u0129 na m\u0169taratara kana m\u0169taratara wa namba kuuma 1 nginya i ang\u0129korwo ti \u0169guo. i \u0129amb\u0129r\u0129ria kuuma 1. factor ya i n\u0129 k\u0169ing\u0129hia namba kuuma 1 nginya i (1 * 2 *... * i). Ngerekano: f (((5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "canonical_solution":"    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n"
    },
    {
        "prompt":"\ndef even_odd_palindrome(n):\n    \"\"\"\n    K\u0169r\u0129 namba ya positive n, \u0129cokia tuple \u0129r\u0129a \u0129koragwo na namba ya namba ya even na ya odd palindromes iria ikoragwo r\u0169\u0169\u0129in\u0129 rwa ((1, n), hamwe na. Ngerekano1: K\u0169ing\u0129ra: 3 K\u0169ruta: (1, 2) K\u0169taar\u0129ria: Palindromes ya integers n\u0129 1, 2, 3. \u0129mwe yacio n\u0129 even, na ig\u0129r\u0129 ciacio n\u0129 odd. Ngerekano2: K\u0169ing\u0129ra: 12 K\u0169ruta: (4, 6) K\u0169taar\u0129ria: Palindromes ya integers n\u0129 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. inya ciacio n\u0129 even, na 6 ciacio n\u0129 odd. K\u0129ririkano: 1 <= n <= 10^3 2. tuple \u0129coketie namba ya palindromes ya integers ya even na ya odd.\n    \"\"\"\n",
        "canonical_solution":"    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef count_nums(arr):\n    \"\"\"\n    And\u0129ka githomo count_nums k\u0129r\u0129a k\u0129h\u0169thag\u0129ra namba cia m\u0169igana na g\u0129gacokia namba ya ci\u0129ga iria ir\u0129 na m\u0169igana wa ci\u0129ga > 0. Ang\u0129korwo namba n\u0129 ya negative, k\u0129humo k\u0129a namba \u0129yo ya mbere g\u0129gaakorwo k\u0129r\u0129 negative: ta -123 \u0129koragwo na ci\u0129ga -1, 2, na 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef move_one_ball(arr):\n    \"\"\"T\u0169r\u0129 na m\u0169taratara wa 'arr' wa namba N ci\u0129 na m\u0169taratara wa arr[1], arr[2],..., arr[N]. Namba iria ir\u0129 m\u0169taratarain\u0129 n\u0129 ik\u0169r\u0169ngwo na nj\u0129ra ya \u0169tu\u0129ria. W\u0129ra waku n\u0129 k\u0169menya kana no \u0169hote k\u0169banga m\u0169taratara \u0169tar\u0129 na \u0169nyihanyihi na nj\u0129ra ya gw\u0129ka \u0169nd\u0169 \u0169y\u0169 \u0169r\u0169m\u0129r\u0129ire m\u0169taratara-in\u0129 \u0169r\u0129a \u0169hean\u0129two: N\u0129 w\u0129t\u0129k\u0129r\u0129\u0129two k\u0169banga \u0169nyihanyihi na mwena wa \u0169r\u0129o maita maing\u0129 o \u0169r\u0129a \u0169ng\u0129enda. \u0168nyihanyihi na mwena wa \u0169r\u0129o \u0169koragwo na \u0169nyihanyihi wa ci\u0129ga ciothe cia m\u0169taratara na iturwa imwe mwena \u0169r\u0129a wag\u0129r\u0129ire. K\u0129nd\u0169 k\u0129a m\u0169taratara k\u0129a m\u0169ico g\u0129gaatham\u0129rio na k\u0129amb\u0129r\u0129ria k\u0129a m\u0169taratara ta 0th. Ang\u0129korwo no \u0169hote k\u0169banga m\u0169taratara \u0169cio \u0169rar\u0169man\u0129te na nj\u0129ra ya gw\u0129ka\n                \n    \"\"\"\n",
        "canonical_solution":"    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n"
    },
    {
        "prompt":"\ndef exchange(lst1, lst2):\n    \"\"\"Th\u0129na \u0169y\u0169 \u0169h\u0169th\u0129r\u0129te m\u0169taratara wa k\u0169gar\u0169ra namba cia g\u0129cunj\u0129 k\u0129a r\u0169\u0169ri rwa namba na r\u0169\u0169ri rwa namba. \u0168ng\u0129gar\u0169ra namba cia g\u0129cunj\u0129 k\u0129a r\u0169\u0169ri rwa namba na r\u0169\u0169ri rwa namba, \u0169g\u0169cokia \"NO\". Kwa ngerekano: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" N\u0129 g\u0169kuonania at\u0129 indo iria irat\u0169mag\u0129rwo ti cia t\u0169h\u0169.\n    \"\"\"\n",
        "canonical_solution":"    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n"
    },
    {
        "prompt":"\ndef histogram(test):\n    \"\"\"\u0168ng\u0129heo r\u0169rigi rw\u0129na ndemwa nini iria ciatiganirio na t\u0169th\u0169ng\u0169ri, cokia kam\u0169gambo ka ndemwa \u0129r\u0129a \u0129cokag\u0129rio m\u0169no na \u0129koragwo na m\u0169igana \u0169r\u0129a wag\u0129r\u0129ire. Ang\u0129korwo ndemwa nying\u0129 n\u0129 cionekaga o ta \u0129mwe, cokia ciothe. Ngerekano: histogram ((a b c)) == {'a': 1, 'b': 1, 'c': 1} histogram ((a b b a') == {'a': 2, 'b': 2} histogram ((a b c a b') == {'a': 2, 'b': 2} histogram ((b b a b') == {'b 4}: histogram ((a b b') == {'b 4}) == {}\n\n    \"\"\"\n",
        "canonical_solution":"    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef reverse_delete(s,c):\n    \"\"\"T\u0169k\u0129heo ndemwa ig\u0129r\u0129 cia ndemwa s na c, no m\u0169haka t\u0169tharie ndemwa ciothe th\u0129in\u0129 wa s iria iringanaga na ndemwa o yothe ya c na t\u0169thuthurie kana ndemwa \u0129r\u0129a \u0129rathi\u0129 na mbere n\u0129 ya palindrome. Ndemwa \u0129tagwo palindrome ang\u0129korwo \u0129rathi\u0129 na mbere na \u0129rathi\u0129 na mbere. No m\u0169haka t\u0169cokie ndemwa ya tuple \u0129r\u0129a \u0129koragwo na ndemwa ya k\u0129o na ya ma\/mah\u0129tia n\u0129getha t\u0169thuthurie. Ngerekano ya s = \"abcde\", c = \"ae\", k\u0129heo k\u0129ag\u0129r\u0129ire g\u0169kor\u0169o k\u0129r\u0129 ('bcd',False) Kwa s = \"abcdef\", c = \"b\" k\u0129heo k\u0129ag\u0129r\u0129ire g\u0169kor\u0169o k\u0129r\u0129 ('acdef',False) Kwa s = \"abcdedcba\", c = \"ab\", k\u0129heo k\u0129ag\u0129r\u0129ire g\u0169kor\u0169o k\u0129r\u0129 ('cdedc',T\n    \"\"\"\n",
        "canonical_solution":"    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test":"def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n"
    },
    {
        "prompt":"\ndef odd_count(lst):\n    \"\"\"K\u0169r\u0129 na r\u0169renda rwa ndemwa, har\u0129a o ndemwa \u0129koragwo na namba tu, \u0129cokagia r\u0169renda. O k\u0129eny\u0169 i k\u0129a \u0169horo \u0169r\u0129a \u0169rut\u0129two k\u0129ag\u0129r\u0129irwo g\u0169kor\u0169o k\u0129r\u0129 \"m\u0169igana wa ndemwa itar\u0129 cia mwanya th\u0129in\u0129 wa ndemwa i cia \u0169horo \u0169r\u0129a \u0169rut\u0129two\". har\u0129a i ciothe cia ndemwa icio cia ndemwa cia ndemwa cia magegania cia ndemwa i cia \u0169horo \u0169r\u0129a \u0169rut\u0129two ciag\u0129r\u0129irwo k\u0169gar\u0169r\u0169o n\u0129 m\u0169igana wa ndemwa itar\u0129 cia mwanya th\u0129in\u0129 wa ndemwa ya i ya \u0169horo \u0169r\u0129a \u0169rut\u0129two.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "canonical_solution":"    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minSubArraySum(nums):\n    \"\"\"\n    K\u0169r\u0129 m\u0169taratara wa namba n, ta rora m\u0169taratara wa namba n \u0169r\u0129a \u0169tar\u0129 \u0169tar\u0129 \u0169tar\u0129 \u0169tar\u0129. Ngerekano minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6\n    \"\"\"\n",
        "canonical_solution":"    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n"
    },
    {
        "prompt":"\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    \u0168heagwo m\u0169bango wa ithima. O m\u0169bango \u0169r\u0169gam\u0129r\u0129ire g\u0129thima k\u0129mwe, na o m\u0169bango \u0169r\u0169gam\u0129r\u0129ire o g\u0129thima k\u0129mwe k\u0129a maa\u0129. O g\u0129thima k\u0129na k\u0129na ndooro \u0129r\u0129a \u0129ng\u0129t\u0169m\u0129ra k\u0169ruta maa\u0129 kuuma ho, na ndooro ciothe ir\u0129 na \u0169hoti \u0169mwe. W\u0129ra waku n\u0129 k\u0169h\u0169th\u0129ra ndooro icio g\u0169ita ithima. W\u0129ra \u0169r\u0129a \u0169rabatara k\u0169ruta n\u0129 g\u0169ta\u0169ra maita maigana. Ngerekano ya 1: K\u0169ing\u0129ra: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 W\u0129ra wa kuuma: 62: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 W\u0129ra wa kuuma: 53: [[Input: :0,0,0], [\n    \"\"\"\n",
        "canonical_solution":"    return sum([math.ceil(sum(arr)\/capacity) for arr in grid])\n",
        "test":"def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef sort_array(arr):\n    \"\"\"\n    Th\u0129in\u0129 wa k\u0129geranio g\u0129k\u0129, no m\u0169haka \u0169thuure namba itar\u0129 cia negative k\u0169ringana na m\u0169igana wa imwe th\u0129in\u0129 wa k\u0129geranio k\u0129u na nj\u0129ra ya kwambata.\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef select_words(s, n):\n    \"\"\"\u0168ng\u0129heo m\u0169taratara wa ndemwa na namba ya ma n, n\u0129 \u0169heirwo w\u0129ra wa k\u0169hingia itambaya r\u0129a ciugo ciothe kuuma ndemwa s iria ir\u0129 na t\u0169ma\u0169nd\u0169 t\u0169igana \u0169na, n\u0129guo ciugo icio cioneke th\u0129in\u0129 wa m\u0169taratara wa s. Ang\u0129kor\u0169o ndemwa s n\u0129 h\u0169u, w\u0129ra \u0169cio wag\u0129r\u0129ir\u0169o g\u0169cokia r\u0169\u0169ri r\u0169tar\u0129 k\u0129nd\u0169.\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n"
    },
    {
        "prompt":"\ndef get_closest_vowel(word):\n    \"\"\"\u0168heagwo kiugo. W\u0129ra waku n\u0129 g\u0169caria kiugo k\u0129r\u0129a k\u0129 hakuh\u0129 m\u0169no na rw\u0129mbo r\u0169r\u0129a r\u0169r\u0169gam\u0129te gatagat\u0129 ka ndemwa ig\u0129r\u0129 kuuma mwena wa \u0169r\u0129o wa kiugo (k\u0129a m\u0169hiano). Ndemwa cia k\u0129amb\u0129r\u0129ria na cia m\u0169thia itiag\u0129r\u0129ire. Coka na r\u0169rigi r\u0169tar\u0129 k\u0129nd\u0169 ang\u0129korwo nd\u0169onire kiugo o na k\u0129mwe k\u0129hing\u0129tie \u0169rit\u0169 \u0169r\u0129a \u0169r\u0129 ig\u0169r\u0169. No \u0169tue at\u0129 r\u0169rigi r\u0169u r\u0169hean\u0129two n\u0129 r\u0169koragwo na ndemwa cia G\u0129th\u0169ng\u0169 tu. Ngerekano: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\"get_closest_vowel\" (((ab\") ==> \"\"\n    \"\"\"\n",
        "canonical_solution":"    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "canonical_solution":"    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n"
    },
    {
        "prompt":"\ndef maximum(arr, k):\n    \"\"\"\n    K\u0169r\u0129 m\u0169taratara wa namba na namba k, k\u0129rore m\u0169taratara wa namba k na namba k iria ir\u0129 m\u0169taratara wa namba. Ngerekano1: K\u0169ing\u0129ra: arr = [-3, -4, 5], k = 3 K\u0169ruta: [-4, -3, 5] Ngerekano2: K\u0169ing\u0129ra: arr = [4, -4, 4], k = 2 K\u0169ruta: [4, 4] Ngerekano3: K\u0169ing\u0129ra: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 K\u0169ruta: [2] Rora: 1. \u0169raihu wa m\u0169taratara \u0169g\u0169ikara \u0169riin\u0129 wa [1, 1000]. 2. indo iria ir\u0129 m\u0169taratarain\u0129 \u0169g\u0169ikara \u0169riin\u0129 wa [-1000, 1000].\n    \"\"\"\n",
        "canonical_solution":"    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n"
    },
    {
        "prompt":"\ndef solution(lst):\n    \"\"\"\u0168ng\u0129heo m\u0169taratara wa namba itar\u0129 cia t\u0169h\u0169, \u0169cokia m\u0169igana wa namba ciothe iria itar\u0129 cia t\u0169h\u0169 ir\u0129 hand\u0169 hatar\u0129 t\u0169h\u0169.\n    \"\"\"\n",
        "canonical_solution":"    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n"
    },
    {
        "prompt":"\ndef add_elements(arr, k):\n    \"\"\"\n    K\u0169r\u0129 m\u0169taratara wa namba itar\u0129 cia t\u0169h\u0169 arr na namba k, h\u0169ra m\u0169taratara wa namba iria ir\u0129 na namba ig\u0129r\u0129 kuuma namba k cia mbere cia arr. Ngerekano: K\u0129ing\u0129r\u0129ro: arr = [111,21,3,4000,5,6,7,8,9], k = 4 K\u0129ing\u0129r\u0129ro: 24 # m\u0169taratara wa namba 21 + 3 M\u0129haka: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\n    \"\"\"\n",
        "canonical_solution":"    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef get_odd_collatz(n):\n    \"\"\"\n    K\u0169r\u0129 namba ya positive n, \u0169cokia r\u0169\u0169ri r\u0169r\u0169ng\u0129two na namba iria itar\u0129 cia g\u0129th\u0169ng\u0169 na r\u0169ng'athio rwa collatz. Collatz conjecture n\u0129 r\u0169\u0169ri r\u0169r\u0169nganaga na namba \u0129mwe ya maths r\u0169r\u0129a r\u0169ta\u0169ragwo ta \u0169\u0169: kwamb\u0129r\u0129ria na namba \u0129mwe ya positive n.\n    \"\"\"\n",
        "canonical_solution":"    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n\/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef valid_date(date):\n    \"\"\"N\u0129 \u0169kuona at\u0129 no \u0169h\u0169th\u0129re nj\u0129ra ya k\u0169gar\u0169ra mathaa na nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129ri ya nd\u0169m\u0129r\u0129\n    \"\"\"\n",
        "canonical_solution":"    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n"
    },
    {
        "prompt":"\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "canonical_solution":"    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test":"def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n"
    },
    {
        "prompt":"\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5]) \u00e2 -> False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u00e2 -> False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u00e2 -> True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u00e2 -> False\n    '''\n",
        "canonical_solution":"    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef intersection(interval1, interval2):\n    \"\"\"\u0168heagwo m\u0129ena \u0129\u0129r\u0129, o m\u0129ena \u0129\u0129r\u0129 \u0129koragwo na namba ig\u0129r\u0129. Kwa ngerekano, m\u0129ena = (mbu, m\u0169thia) = (1, 2). M\u0129ena \u0129yo \u0129heanagwo n\u0129 m\u0129hing\u0169re, \u0169guo n\u0129 kuuga at\u0129 m\u0129ena \u0129yo \u0129koragwo na k\u0129amb\u0129r\u0129ria na m\u0169thia. Kwa m\u0129ena \u0129yo \u0129heanagwo, n\u0129 g\u0169kuonwo at\u0129 k\u0129amb\u0129r\u0129ria k\u0129ayo n\u0129 k\u0129nini kana n\u0129 k\u0129iganaine na m\u0169thia wayo. W\u0129ra waku n\u0129 k\u0169menya kana \u0169raihu wa k\u0169henania kwa m\u0129ena \u0129yo \u0129\u0129r\u0129 n\u0129 namba ya mbere. Kwa ngerekano, \u0169raihu wa k\u0169henania kwa m\u0129ena \u0129yo (1, 3), (2, 4) n\u0129 (2, 3) na \u0169raihu wayo n\u0129 1, na ti namba ya mbere. Ang\u0129korwo \u0169raihu wa k\u0169henania n\u0129 namba ya mbere, cokia \"\u0128\u0128\u0128\", ang\u0129korwo ti \u0169guo, cokia \"Aca\". Ang\u0129korwo m\u0129ena \u0129yo \u0129\u0129r\u0129 nd\u0129h\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n"
    },
    {
        "prompt":"\ndef prod_signs(arr):\n    \"\"\"\n    \u0168heagwo m\u0169taratara wa namba na \u0169bataire g\u0169cokia m\u0169igana wa namba iria ciongererekete na m\u0169igana wa ci\u0129ga ciothe cia namba o namba m\u0169taratara-in\u0129, iria cionanagio na 1, -1 kana 0.\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "canonical_solution":"    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minPath(grid, k):\n    \"\"\"\n    \u0168ng\u0129ona k\u0129ruru k\u0129a r\u0169\u0169\u0129 k na m\u0129ri na irima N (N >= 2) na namba k ya positive, o k\u0129ruru k\u0129a r\u0169\u0169\u0129 k\u0129na k\u0129hoto. O k\u0129ruru k\u0129na k\u0129hoto [1, N * N] no k\u0129oneke o riita r\u0129mwe th\u0129in\u0129 wa t\u0169ruru twa k\u0129ruru. No wamb\u0129r\u0129rie kuuma k\u0129ruru o g\u0129othe, na o ikinya no \u0169thi\u0129 t\u0169ruru twothe t\u0169r\u0129a t\u0169rigan\u0129tie, na nj\u0129ra \u0129ng\u0129, no \u0169thi\u0129 t\u0169ruru t\u0169r\u0129a t\u0169koragwo na r\u0169rigi r\u0169mwe nawe. \u0168ng\u0129ona k\u0129ruru k\u0129a r\u0169\u0169\u0129 k no g\u0129kor\u0169o n\u0129 t\u0169ruru k (ti k\u0129o k\u0129hoto k\u0129na). \u0168R\u0128A k\u0169ruta k\u0129ruru k\u0129a r\u0169\u0169\u0129. K\u0129ruru A (k\u0129ruru k\u0129a k) k\u0129onanagio k\u0129r\u0129 k\u0129ruru k\u0129nini g\u0169k\u0129ra k\u0129ruru B (k\u0129ruru\n    \"\"\"\n",
        "canonical_solution":"    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n"
    },
    {
        "prompt":"\ndef tri(n):\n    \"\"\"And\u0169 aing\u0129 n\u0129 mo\u0129 \u0169horo wa Fibonacci, \u0169r\u0129a w\u0129k\u0129r\u0129two na nj\u0129ra nene n\u0129 athomi a mathabu m\u0129aka m\u0129ing\u0129 m\u0129h\u0129t\u0169ku. No r\u0129r\u0129, k\u0129r\u0129a and\u0169 matoo\u0129 n\u0129 \u0169horo wa Tribonacci. \u0168horo wa Tribonacci \u0169koragwo na \u0169cokeri: tri(1) = 3 tri(n) = 1 + n \/ 2, ang\u0129kor\u0169o n n\u0129 \u0129tar\u0129 \u0129tar\u0129 \u0129tar\u0129. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ang\u0129kor\u0169o n n\u0129 \u0129tar\u0129 \u0129tar\u0129 \u0129tar\u0129. Kwa ngerekano: tri(2) = 1 + (2 \/ 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 \u0168ng\u0129heo namba \u0129tar\u0129 \u0129tar\u0129 \u0129tar\u0129 \u0129tar\u0129 \u0129tar\u0129 \u0129tar\u0129 \u0129tar\u0129 \u0129tar\u0129 \u0129tar\u0129, \u0169coke w\u0129he m\u0169taratara wa namba n + 1 cia\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i \/ 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) \/ 2)\n    return my_tri\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n"
    },
    {
        "prompt":"\ndef digits(n):\n    \"\"\"\u0168ng\u0129heo namba \u0129tar\u0129 ya k\u0129rathi n, \u0129cokagia m\u0169igana wa namba iria itar\u0129 cia k\u0129rathi. \u0128cokagia 0 ang\u0129kor\u0169o namba ciothe n\u0129 cia k\u0129rathi. Kwa ngerekano: digits(1) == 1 digits(4) == 0 digits(235) == 15\n    \"\"\"\n",
        "canonical_solution":"    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n"
    },
    {
        "prompt":"\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u00e2 -> True\n    is_nested('[]]]]]]][[[[[]') \u00e2 -> False\n    is_nested('[][]') \u00e2 -> False\n    is_nested('[]') \u00e2 -> False\n    is_nested('[[][]]') \u00e2 -> True\n    is_nested('[[]][[') \u00e2 -> True\n    '''\n",
        "canonical_solution":"    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n"
    },
    {
        "prompt":"\n\ndef sum_squares(lst):\n    \"\"\"\u0168k\u0169heo namba. \u0168k\u0169batara g\u0169cokia m\u0169igana wa namba cia square iria ir\u0129 r\u0169rendain\u0129 r\u0169u, \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke \u0169coke\n    \n\n    \"\"\"\n",
        "canonical_solution":"    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u00e2 -> True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"\") \u00e2 -> False \n    '''\n",
        "canonical_solution":" \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef can_arrange(arr):\n    \"\"\"G\u0169thondeka m\u0169taratara \u0169cokagia k\u0129rore k\u0129a k\u0129rore k\u0129r\u0129a k\u0129nene g\u0169k\u0129ra k\u0129rore k\u0129r\u0129a k\u0129r\u0169m\u0129r\u0129ire. Ang\u0129korwo k\u0129rore k\u0129u g\u0129tir\u0129 kuo, \u0169cokagia -1.\n    \"\"\"\n",
        "canonical_solution":"    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n"
    },
    {
        "prompt":"\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "canonical_solution":"    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n"
    },
    {
        "prompt":"\ndef compare_one(a, b):\n    \"\"\"\n    G\u0169thondeka m\u0169taratara \u0169kuoya namba cia ma, floats, kana ngiri iria ir\u0169gam\u0129r\u0129ire namba cia ma, na \u0169gacoka na m\u0169taratara \u0169r\u0129a m\u0169nene wa m\u0169taratara \u0169r\u0129a \u0169hean\u0129two. G\u0169thi\u0129 na None ang\u0129korwo m\u0129taratara \u0129yo n\u0129 \u0129haanaine. K\u0129rore: Ang\u0129korwo m\u0169taratara wa ma \u0169r\u0169gam\u0129r\u0129ire ta ngiri, m\u0169taratara wa floating point no \u0169kor\u0169o \u0169haana ta. kana, compare_one{1, 2.5) \u00e2 -> 2.5 compare_one{1, \"2,3\") \u00e2 -> \"2,3\" compare_one{5,1\", \"6\") \u00e2 -> \"6\" compare_one{1\", 1) \u00e2 -> None\n    \"\"\"\n",
        "canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_equal_to_sum_even(n):\n    \"\"\"G\u0169thuthuria kana namba n no \u0129and\u0129kwo ta m\u0169igana wa namba 4 cia m\u0169igana wa namba \u0129mwe. Ngerekano n\u0129_ng\u0129igana na_m\u0169t\u0129_wa m\u0169igana wa namba \u0129mwe (a) (4) == \u0168\u0169ru n\u0129_ng\u0129igana na_m\u0169t\u0129_wa m\u0169igana wa namba \u0129mwe (a) (6) == \u0168\u0169ru n\u0129_ng\u0129igana na_m\u0169t\u0129 wa namba \u0129mwe (a) (8) == \u0168horo wa ma\n    \"\"\"\n",
        "canonical_solution":"    return n%2 == 0 and n >= 8\n",
        "test":"def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n"
    },
    {
        "prompt":"\ndef special_factorial(n):\n    \"\"\"Factoria ya Brazil \u0129taarag\u0129rio ta: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! *... * 1! har\u0129a n > 0 Kwa ngerekano:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "canonical_solution":"    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n"
    },
    {
        "prompt":"\ndef fix_spaces(text):\n    \"\"\"\n    \u0168ng\u0129heo r\u0169rigi rwa r\u0129and\u0129ko, h\u0169ra t\u0169th\u0169ng\u0169ri twothe t\u0169r\u0129a t\u0169koragwo ho na t\u0169th\u0169ng\u0169ri t\u0169r\u0129a t\u0169h\u0169th\u0129k\u0129te, na ang\u0129kor\u0169o r\u0169rigi r\u0169r\u0129 na t\u0169th\u0169ng\u0169ri mak\u0129ria ma 2 t\u0169theng'erete, h\u0169ra t\u0169th\u0169ng\u0169ri t\u0169r\u0129a t\u0169theng'erete na - fix_spaces ((\"Ngerekano\") == \"Ngerekano\" fix_spaces ((\"Ngerekano1\") == \"Ngerekano1\" fix_spaces (((\"Ngerekano2\") == \"Ngerekano_2\" fix_spaces ((\"Ngerekano 3\") == \"Ngerekano-3\"\n    \"\"\"\n",
        "canonical_solution":"    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef file_name_check(file_name):\n    \"\"\"G\u0169thondeka g\u0129thomo k\u0129r\u0129a k\u0129r\u0169gam\u0129r\u0129ire ndemwa cia mar\u0129\u0129twa ma mar\u0169a, na g\u0169cokia '\u0128\u0129' ang\u0129korwo mar\u0129\u0129twa ma mar\u0129\u0129twa macio n\u0129 ma ma, na g\u0169cokia 'Aca' ang\u0129korwo matir\u0129 ma ma. R\u0129\u0129twa r\u0129a mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\u0129\u0129twa ma mar\n    \"\"\"\n",
        "canonical_solution":"    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('\/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n"
    },
    {
        "prompt":"\n\n\ndef sum_squares(lst):\n    \"\"\"\" G\u0171thondeka g\u0171kahaana ta m\u0169taratara wa namba. Kuona indo ciothe iria ir\u0129 m\u0169taratarain\u0129, g\u0171kahaana ta m\u0169taratara wa namba \u0129rathi\u0129 na mbere k\u0169g\u0169r\u0169 k\u0169ng\u0129ra m\u0169taratara wa namba n\u0129 m\u0169taratara wa namba 3 na no \u0169kehaana ta m\u0169taratara wa namba k\u0169ng\u0129ra m\u0169taratara wa namba n\u0129 m\u0169taratara wa namba 4 na ti m\u0169taratara wa namba 3. G\u0171thondeka g\u0171kahaana ta g\u0169tigia indo iria ir\u0129 m\u0169taratara wa namba n\u0129 m\u0169taratara wa namba 3 kana 4. G\u0171thondeka g\u0171coka g\u0171kahaana ta m\u0169taratara wa indo ciothe. Ngerekano: Kwa lst = [1,2,3] m\u0169taratara wa indo n\u0129 6 Kwa lst = [] m\u0169taratara wa indo n\u0129 0 Kwa lst = [-1,-5,2,-1,-5] m\u0169taratara wa indo n\u0129 -126\n    \"\"\"\n",
        "canonical_solution":"    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef words_in_sentence(sentence):\n    \"\"\"\n    \u0168heagwo m\u0169taratara \u0169r\u0169gam\u0129r\u0129ire m\u0169hari, m\u0169taratara \u0169cio \u0169koragwo na ciugo imwe ciatigithan\u0129tio na kam\u0169huko, na \u0169coke \u0169cokie m\u0169taratara \u0169koragwo na ciugo kuuma m\u0169taratara \u0169r\u0129a wa mbere, \u0169r\u0129a \u0169raihu waguo \u0169koragwo \u0169r\u0129 namba cia mbere, m\u0169taratara wa ciugo th\u0129in\u0129 wa m\u0169taratara \u0169cio mwer\u0169 wag\u0129r\u0129ir\u0169o g\u0169kor\u0169o \u0169haanaine na \u0169r\u0129a wa mbere. Ngerekano1: K\u0169ing\u0129ra: m\u0169taratara = \"\u0168y\u0169 n\u0129 \u0169gerekanio\" Kuuma: \"n\u0129\" Ngerekano2: K\u0169ing\u0129ra: m\u0169taratara = \"n\u0129 t\u0169thi\u0129 g\u0169thamb\u0129ra\" Kuuma: \"thi\u0129 n\u0129 \u0169nd\u0169 wa\" M\u0129haka: * 1 <= len(m\u0169taratara) <= 100 * m\u0169taratara \u0169koragwo na ndemwa tu\n    \"\"\"\n",
        "canonical_solution":"    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n"
    },
    {
        "prompt":"\ndef simplify(x, n):\n    \"\"\"W\u0129ra waku n\u0129 k\u0169banga m\u0169taratara \u0169r\u0129a \u0169g\u0169teithia k\u0169h\u0169thia ciugo x * n. \u0168taratara \u0169cio \u0169g\u0169cokia \u0169horo wa ma ang\u0129kor\u0169o x * n n\u0129 namba \u0129tar\u0129 ya ma na wa ma ang\u0129kor\u0169o ti \u0169guo. X na n n\u0129 m\u0129taratara ya k\u0169r\u0169gam\u0129r\u0129ra t\u0169cunj\u0129, na ir\u0129 na m\u0169taratara \u0169y\u0169: <numerator>\/<denominator> har\u0129a namba na k\u0129menyithia n\u0129 namba ciothe njeru. No w\u0129cirie at\u0129 x na n n\u0129 t\u0169cunj\u0129 twa ma, na t\u0169tir\u0129 na namba namba 0. simplify \" 1\/5\", \"5\/1\") = True simplify \" 1\/6\", \"2\/1\") = False simplify \" 7\/10\", \"10\/2\") = False\n    \"\"\"\n",
        "canonical_solution":"    a, b = x.split(\"\/\")\n    c, d = n.split(\"\/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator\/denom == int(numerator\/denom)):\n        return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test1'\n    assert candidate(\"1\/6\", \"2\/1\") == False, 'test2'\n    assert candidate(\"5\/1\", \"3\/1\") == True, 'test3'\n    assert candidate(\"7\/10\", \"10\/2\") == False, 'test4'\n    assert candidate(\"2\/10\", \"50\/10\") == True, 'test5'\n    assert candidate(\"7\/2\", \"4\/2\") == True, 'test6'\n    assert candidate(\"11\/6\", \"6\/1\") == True, 'test7'\n    assert candidate(\"2\/3\", \"5\/2\") == False, 'test8'\n    assert candidate(\"5\/2\", \"3\/5\") == False, 'test9'\n    assert candidate(\"2\/4\", \"8\/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2\/4\", \"4\/2\") == True, 'test11'\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test12'\n    assert candidate(\"1\/5\", \"1\/5\") == False, 'test13'\n\n"
    },
    {
        "prompt":"\ndef order_by_points(nums):\n    \"\"\"\n    And\u0129ka g\u0129t\u0169mi k\u0129r\u0129a g\u0129t\u0169maga t\u0169thondeke m\u0169taratara wa namba iria ir\u0129 m\u0169taratara-in\u0129 \u0169cio k\u0169ringana na m\u0169igana wa ci\u0129ga ciacio.\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef specialFilter(nums):\n    \"\"\"And\u0129ka gaturwa kar\u0129a gacokagia namba iria ik\u0169r\u0129kanaga na ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba iria ik\u0169r\u0129kanaga na namba \u0129r\u0129a ik\u0169r\u0129kanaga\n    \"\"\"\n",
        "canonical_solution":"    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n"
    },
    {
        "prompt":"\ndef get_max_triples(n):\n    \"\"\"\n    \u0168heagwo namba \u0129tar\u0129 ya k\u0169h\u0129t\u0169ka n. \u0168k\u0169batara g\u0169thondeka m\u0169taratara wa namba a \u0169r\u0129 na \u0169raihu n. Kwa o i (1 \u00e2\u2030\u00a4 i \u00e2\u2030\u00a4 n), k\u0129ene k\u0129a a[i] = i * i - i + 1. H\u0169ra m\u0169taratara wa maita matat\u0169 (a[i], a[j], a[k]) ma a har\u0129a i < j < k, na a[i] + a[j] + a[k] n\u0129 maita matat\u0169 ma 3. Ngerekano: K\u0169ing\u0129ra: n = 5 Kuuma: 1 \u0169taar\u0129ria: a = [1, 3, 7, 13, 21] M\u0169taratara wa maita matat\u0169 \u0169r\u0129a wag\u0129r\u0129ire n\u0129 (1, 7, 13).\n    \"\"\"\n",
        "canonical_solution":"    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n"
    },
    {
        "prompt":"\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "canonical_solution":"    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n"
    },
    {
        "prompt":"\ndef sorted_list_sum(lst):\n    \"\"\"And\u0129ka g\u0129t\u0169mi k\u0129r\u0129a k\u0129ng\u0129t\u0129k\u0129ra r\u0169renda rwa ndemwa ta parameter, k\u0129eherie ndemwa iria ir\u0129 na \u0169raihu \u0169tar\u0129 wa k\u0129gendi, na k\u0129gar\u0169re r\u0169renda r\u0169u na m\u0169taratara wa k\u0169gayanio. R\u0169thiomi r\u0169u r\u0169koragwo rw\u0129 na ndemwa na r\u0169ting\u0129g\u0129a na namba, na no rw\u0129 na icunj\u0129 ing\u0129. Mbar\u0129ki ya ndemwa no \u0129korwo \u0129rathi\u0129 na mbere k\u0169iy\u0169r\u0169o n\u0129 \u0169raihu wa kiugo o g\u0129othe, na n\u0129wag\u0129r\u0129irwo g\u0169cokia ndemwa \u0129gathi\u0129 na mbere k\u0169gayanio k\u0169ringana na watho \u0169cio. Ang\u0129korwo ciugo ig\u0129r\u0129 ir\u0129 na \u0169raihu \u0169mwe, k\u0129gar\u0169re ndemwa na nj\u0129ra ya alfabeti. G\u0129t\u0169mi k\u0129ag\u0129r\u0129irwo g\u0169cokia ndemwa na m\u0169taratara wa k\u0169gayanio. No w\u0129cirie at\u0129 ciugo ciothe n\u0129 ikoragwo na \u0169raihu \u0169mwe\n    \"\"\"\n",
        "canonical_solution":"    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n"
    },
    {
        "prompt":"\ndef x_or_y(n, x, y):\n    \"\"\"Programu \u0129h\u0169th\u0169 \u0129r\u0129a \u0129g\u0169cokia k\u0129ene k\u0129ene k\u0129a x ang\u0129korwo n n\u0129 namba ya mbere na \u0129g\u0169cokia k\u0129ene k\u0129a y ang\u0129korwo ti \u0169guo. Ngerekano: x_or_y ((7, 34, 12) == 34 x_or_y ((15, 8, 5) == 5\n    \n    \"\"\"\n",
        "canonical_solution":"    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n"
    },
    {
        "prompt":"\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "canonical_solution":"    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef compare(game,guess):\n    \"\"\"Ngw\u0129ciria ithuothe n\u0129 t\u0169ririkanaga \u0169r\u0129a m\u0169nd\u0169 aiguaga r\u0129r\u0129a k\u0129humo k\u0129a \u0169nd\u0169 m\u0169na wetereirwo ihinda iraya k\u0129menyeka. Mw\u0129cir\u0129rie na meciria mar\u0129a \u0169r\u0129 namo h\u0129nd\u0129 \u0129yo n\u0129 ma bata m\u0169no k\u0169ririkana na k\u0169ringithania. W\u0129ra waku n\u0129 k\u0169menya kana m\u0169nd\u0169 n\u0129 ag\u0169cag\u0169rire na nj\u0129ra ya ma k\u0129humo k\u0129a ma\u0169nd\u0169 maigana \u0169na. \u0168heagwo mathang\u0169 mer\u0129 ma t\u0169ratathi na mathang\u0169 ma \u0169raihu wa k\u0169igana, k\u0169r\u0129a o k\u0129ruka k\u0129onanagia \u0169iguano. \u0168coke na mathang\u0169 ma \u0169raihu wa k\u0169igana kuonania har\u0129a o k\u0129ruka k\u0129ag\u0169ire. Ang\u0129kor\u0169o n\u0129 mag\u0169cag\u0169rire wega, \u0169igana n\u0129 0, na ang\u0129kor\u0169o ti \u0169guo, \u0169igana n\u0129 \u0169tiganu wa bi\u0169 gatagat\u0129 ka \u0169rag\u0169ri na \u0169igana. Ngerekano: (([1,2,3,4,5,1]\n    \"\"\"\n",
        "canonical_solution":"    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"\u0168k\u0169heo r\u0129twa r\u0129a k\u0129rathi (string) na r\u0169\u0169ri rwa ndemwa. Ndemwa icio cia k\u0169gathwo n\u0129cio ik\u0169h\u0169th\u0129rwo k\u0169ing\u0129ria ndemwa ing\u0129 k\u0129rathiin\u0129 k\u0129u. \u0168k\u0169r\u0169 wa ndemwa n\u0129 ta \u0169y\u0169: Reke CAP \u0129korwo n\u0129 namba ya ndemwa nene th\u0129in\u0129 wa r\u0169\u0169ri rwa ndemwa, na reke SM \u0129korwo n\u0129 namba ya ndemwa nini th\u0129in\u0129 wa r\u0169\u0169ri rwa ndemwa, \u0169ku\u0169 wa ndemwa \u0169heanagwo n\u0129 g\u0129cunj\u0129 k\u0129a CAP - SM. \u0168k\u0169batara g\u0169caria ndemwa \u0129r\u0129a ya hinya na g\u0169cokia ndemwa na m\u0169hian\u0129re \u0169y\u0169: ClassName.StrongestExtensionName. Ang\u0129korwo k\u0169r\u0129 ndemwa ig\u0129r\u0129 kana mak\u0129ria ir\u0129 na \u0169ku\u0169 \u0169mwe, \u0169cag\u0129r\u0129irwo n\u0129 g\u0169thuura \u0129r\u0129a \u0129koragwo mbere r\u0169renda-in\u0129. Kwa ngerekano, ang\u0129korwo \u0169heetwo \"Slices\" ta k\u0129\n    \"\"\"\n",
        "canonical_solution":"    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n"
    },
    {
        "prompt":"\ndef cycpattern_check(a , b):\n    \"\"\"\u0168heagwo ciugo ig\u0129r\u0129. \u0168bataire g\u0169cokia True ang\u0129korwo kiugo g\u0129a ker\u0129 kana o na k\u0129mwe g\u0129acio n\u0129 r\u0169\u0169ri r\u0169mwe r\u0169r\u0129 kiugoin\u0129 k\u0129a mbere cycpattern_check (((\"abcd\",\"abd\") => False cycpattern_check (((\"hello\",\"ell\") => True cycpattern_check (((\"whassup\",\"psus\") => False cycpattern_check (((\"abab\",\"baa\") => True cycpattern_check (((\"efef\",\"eeff\") => False cycpattern_check (((hims\",\"simen\") => True\n\n    \"\"\"\n",
        "canonical_solution":"    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n"
    },
    {
        "prompt":"\ndef even_odd_count(num):\n    \"\"\"G\u0129k\u0129 k\u0129he namba \u0129tar\u0129 ya m\u0169igana. g\u0169cokia namba \u0129tar\u0129 ya m\u0169igana na ya m\u0169igana. Ngerekano: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
        "canonical_solution":"    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef int_to_mini_roman(number):\n    \"\"\"\n    \u0168ng\u0129heo namba \u0129tar\u0129 ya positive, h\u0169ra namba \u0129yo na ndemwa cia Roman na \u0169m\u0129cokie na ndemwa nini.\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "canonical_solution":"    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number \/\/ num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "canonical_solution":"    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n"
    },
    {
        "prompt":"\ndef find_max(words):\n    \"\"\"And\u0129ka gaturwa kar\u0129a kam\u0169kag\u0129ra r\u0169\u0169ri rwa ndemwa. R\u0169\u0169ri r\u0169u rw\u0129 na ciugo itigan\u0129te. Cokia kiugo k\u0129r\u0129a k\u0129r\u0129 na namba nene ya ndemwa cia mwanya. Ang\u0129korwo ndemwa nying\u0129 n\u0129 ikoragwo na namba nene ya ndemwa cia mwanya, cokia \u0129r\u0129a \u0129koragwo mbere k\u0169ringana na m\u0169taratara wa ciugo.\n    \"\"\"\n",
        "canonical_solution":"    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n"
    },
    {
        "prompt":"\ndef eat(number, need, remaining):\n    \"\"\"\n    \u0168r\u0129 m\u0169ng'ang'i \u0169r\u0129 na ng'aragu, na n\u0129 \u0169r\u0129 war\u0129aga m\u0169igana m\u0169na wa it\u0169ng\u0169r\u0169, no r\u0129u n\u0129 \u0169rabatara k\u0169r\u0129a ing\u0129 nying\u0129 n\u0129guo \u0169hingie irio cia m\u0169thenya \u0169cio. n\u0129 wag\u0129r\u0129ir\u0169o g\u0169cokia m\u0169taratara wa [ m\u0169igana wa it\u0169ng\u0169r\u0169 iria ir\u0129aga thutha wa k\u0169r\u0129a, m\u0169igana wa it\u0169ng\u0169r\u0169 iria ciatig\u0129two thutha wa k\u0169r\u0129a ] ang\u0129korwo g\u0169tir\u0129 it\u0169ng\u0169r\u0169 cia k\u0169igana, no \u0169kar\u0129a it\u0169ng\u0169r\u0169 iria ciatigar\u0129te, no no \u0169gaakor\u0169o na ng'aragu. Ngerekano: * k\u0169r\u0129a ((5, 6, 10) -> [11, 4] * k\u0169r\u0129a ((4, 8, 9) -> [12, 1] * k\u0169r\u0129a ((1, 10, 10) -> [11, 0] * k\u0169r\u0129a ((2, 11, 5) -> [7, 0] M\u0129themba: @number: m\u0169igana wa it\u0169ng\u0169r\u0169 iria \u0169r\u0129r\u0129te. @need: m\u0169igana wa it\u0169ng\u0169r\u0169 iria\n    \"\"\"\n",
        "canonical_solution":"    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef do_algebra(operator, operand):\n    \"\"\"\n    G\u0129k\u0129 n\u0129 k\u0129o k\u0129h\u0169ng\u0129ro k\u0129a m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169taratara wa m\u0169\n\n    \"\"\"\n",
        "canonical_solution":"    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['\/\/', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(s):\n    \"\"\"\u0168heagwo m\u0169rango wa ndemwa s. ang\u0129korwo s[i] n\u0129 ndemwa, \u0169gar\u0169re m\u0169hiano wa ndemwa kuuma rungu nginya ig\u0169r\u0169 kana vice versa, ang\u0129korwo ti \u0169guo-r\u0129, \u0169tig\u0129re ta \u0169r\u0129a \u0169r\u0129. Ang\u0129korwo ndemwa nd\u0129na ndemwa, \u0169gar\u0169re m\u0169rango. W\u0129ra \u0169cio wag\u0129r\u0129ir\u0169o g\u0169cokia ndemwa \u0129r\u0129a \u0129rut\u0129two. Ngerekano solve{\\displaystyle \\{\\text{{{1234}}}} = \"4321\"{\\displaystyle \\{\\text{4321}}\"} solve{\\text{ab}}\") = \"AB\" solve{\\text{{{A}}}\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
        "canonical_solution":"    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef string_to_md5(text):\n    \"\"\"\n    \u0168ng\u0129heo r\u0169rigi 'text', cokia r\u0169rigi r\u0169u rwa md5 rwa hash. Ang\u0129kor\u0169o 'text' n\u0129 r\u0169rigi r\u0169tar\u0129 k\u0129nd\u0169, cokia None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "canonical_solution":"    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef generate_integers(a, b):\n    \"\"\"\n    K\u0169r\u0129 namba ig\u0129r\u0129 cia positive a na b, cokia namba iria ir\u0129 gatagat\u0129 ka a na b, na nj\u0129ra ya kwambata. Kwa ngerekano: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => []\n    \"\"\"\n",
        "canonical_solution":"    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    }
]