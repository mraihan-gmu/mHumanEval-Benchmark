task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,vie_Latn,php,"<?php
////Kiểm tra nếu trong mảng số đã cho, có bất kỳ hai số gần nhau hơn // >>> has_close_elements(array(1.0, 2.0, 3.0), 0.5)
// false
// >>> has_close_elements(array(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)
// true
function has_close_elements($numbers, $threshold) {
","function has_close_elements($numbers, $threshold) {
    $count = count($numbers);
    for ($i = 0; $i < $count; $i++) {
        for ($j = $i + 1; $j < $count; $j++) {
            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {
                return true;
            }
        }
    }
    return false;
}","function candidate(...$args) {
    return has_close_elements(...$args);
}

function test(): void {
    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.3) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.05) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0), 0.95) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0), 0.8) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0), 0.1) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1), 1.0) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1), 0.5) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_1,vie_Latn,php,"<?php
//Bỏ qua bất kỳ khoảng trống nào trong chuỗi đầu vào.//Các nhóm riêng biệt được cân bằng (mỗi miếng đệm mở được đóng đúng cách) và không lồng nhau trong nhau.//tách nhóm đó thành các chuỗi riêng biệt và trả về mảng của những người đó.//Lượng đầu vào của hàm này là một chuỗi chứa nhiều nhóm các dấu ngoặc vị. Mục tiêu của bạn là để // >>> separate_paren_groups(""( ) (( )) (( )( ))"")
// array(""()"", ""(())"", ""(()())"")
function separate_paren_groups($paren_string) {
","function separate_paren_groups($paren_string) {
    $paren_string = str_replace(' ', '', $paren_string);
    $groups = [];
    $balance = 0;
    $currentGroup = '';

    for ($i = 0; $i < strlen($paren_string); $i++) {
        $char = $paren_string[$i];
        $currentGroup .= $char;

        if ($char === '(') {
            $balance++;
        } elseif ($char === ')') {
            $balance--;
        }

        if ($balance === 0 && $currentGroup !== '') {
            $groups[] = $currentGroup;
            $currentGroup = '';
        }
    }

    return $groups;
}","function candidate(...$args) {
    return separate_paren_groups(...$args);
}

function test(): void {
    if (candidate(""(()()) ((())) () ((())()())"") !== array(""(()())"", ""((()))"", ""()"", ""((())()())"")) { throw new Exception(""Test failed!""); }
    if (candidate(""() (()) ((())) (((())))"") !== array(""()"", ""(())"", ""((()))"", ""(((())))"")) { throw new Exception(""Test failed!""); }
    if (candidate(""(()(())((())))"") !== array(""(()(())((())))"")) { throw new Exception(""Test failed!""); }
    if (candidate(""( ) (( )) (( )( ))"") !== array(""()"", ""(())"", ""(()())"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_2,vie_Latn,php,"<?php
//Trả về phần thập phân của số.//(phần còn lại luôn luôn nhỏ hơn 1).//và phần số nguyên (số nguyên lớn nhất nhỏ hơn số đã cho) và thập phân //Với một số điểm nổi dương, nó có thể được phân hủy thành // >>> truncate_number(3.5)
// 0.5
function truncate_number($number) {
","function truncate_number($number) {
    $integerPart = floor($number);  // Get the integer part using floor
    return $number - $integerPart;  // Subtract the integer part from the original number to get the decimal part
}","function candidate(...$args) {
    return truncate_number(...$args);
}

function test(): void {
    if (candidate(3.5) !== 0.5) { throw new Exception(""Test failed!""); }
    if (candidate(1.25) !== 0.25) { throw new Exception(""Test failed!""); }
    if (candidate(123.0) !== 0.0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_3,vie_Latn,php,"<?php
//tại điểm đó hàm phải trả về true. Nếu không nó sẽ trả về false.//n số dư bằng không. n nhiệm vụ của bạn là phát hiện nếu tại bất kỳ thời điểm nào số dư tài khoản giảm xuống dưới số không, và n số dư của bạn là n số dư của tài khoản của bạn.//Bạn được cung cấp một loạt các khoản tiền gửi và rút tiền trên tài khoản ngân hàng bắt đầu với// >>> below_zero(array(1, 2, 3))
// false
// >>> below_zero(array(1, 2, -4, 5))
// true
function below_zero($operations) {
","function below_zero($operations) {
    $balance = 0;
    foreach ($operations as $operation) {
        $balance += $operation;
        if ($balance < 0) {
            return true;
        }
    }
    return false;
}","function candidate(...$args) {
    return below_zero(...$args);
}

function test(): void {
    if (candidate(array()) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, -3, 1, 2, -3)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, -4, 5, 6)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -1, 2, -2, 5, -5, 4, -4)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -1, 2, -2, 5, -5, 4, -5)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -2, 2, -2, 5, -5, 4, -4)) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_4,vie_Latn,php,"<?php
//MAD = trung bình. x - x_mean. //phần tử và một điểm trung tâm (trong trường hợp này là trung bình): //Phân tích trung bình là sự khác biệt trung bình giữa mỗi//khoảng trung bình của bộ dữ liệu này. //Đối với một mảng số đầu vào được cho, tính toán độ lệch tuyệt đối trung bình // >>> mean_absolute_deviation(array(1.0, 2.0, 3.0, 4.0))
// 1.0
function mean_absolute_deviation($numbers) {
","function mean_absolute_deviation($numbers) {
    $n = count($numbers);
    if ($n == 0) return 0;
    
    $mean = array_sum($numbers) / $n;
    $absoluteDifferences = array_map(function($x) use ($mean) {
        return abs($x - $mean);
    }, $numbers);
    
    return array_sum($absoluteDifferences) / $n;
}","function candidate(...$args) {
    return mean_absolute_deviation(...$args);
}

function test(): void {
    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_5,vie_Latn,php,"<?php
//Chèn một số ""định giới"" giữa mỗi hai phần tử liên tiếp của mảng đầu vào `numbers' // >>> intersperse(array(), 4)
// array()
// >>> intersperse(array(1, 2, 3), 4)
// array(1, 4, 2, 4, 3)
function intersperse($numbers, $delimeter) {
","function intersperse($numbers, $delimeter) {
    if (empty($numbers)) {
        return $numbers;
    }
    $result = array();
    $count = count($numbers);
    for ($i = 0; $i < $count; $i++) {
        $result[] = $numbers[$i];
        if ($i < $count - 1) {
            $result[] = $delimeter;
        }
    }
    return $result;
}","function candidate(...$args) {
    return intersperse(...$args);
}

function test(): void {
    if (candidate(array(), 7) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_6,vie_Latn,php,"<?php
//Ví dụ: (() (()) có tối đa hai cấp độ làm tổ trong khi ((())) có ba. //Đối với mỗi nhóm, xuất ra mức độ sâu nhất của tổ của dấu ngoặc kép. //Đầu vào của hàm này là một chuỗi đại diện cho nhiều nhóm cho các dấu ngoặc vị được chia cách bởi các khoảng trống.// >>> parse_nested_parens(""(()()) ((())) () ((())()())"")
// array(2, 3, 1, 3)
function parse_nested_parens($paren_string) {
","function parse_nested_parens($paren_string) {
    $groups = explode(' ', $paren_string);
    $results = [];

    foreach ($groups as $group) {
        $max_depth = 0;
        $current_depth = 0;

        for ($i = 0; $i < strlen($group); $i++) {
            if ($group[$i] === '(') {
                $current_depth++;
                if ($current_depth > $max_depth) {
                    $max_depth = $current_depth;
                }
            } elseif ($group[$i] === ')') {
                $current_depth--;
            }
        }

        $results[] = $max_depth;
    }

    return $results;
}","function candidate(...$args) {
    return parse_nested_parens(...$args);
}

function test(): void {
    if (candidate(""(()()) ((())) () ((())()())"") !== array(2, 3, 1, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(""() (()) ((())) (((())))"") !== array(1, 2, 3, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(""(()(())((())))"") !== array(4)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_7,vie_Latn,php,"<?php
//Chỉ lọc mảng đầu vào của chuỗi cho những chuỗi có chứa chuỗi con đã cho // >>> filter_by_substring(array(), ""a"")
// array()
// >>> filter_by_substring(array(""abc"", ""bacd"", ""cde"", ""array""), ""a"")
// array(""abc"", ""bacd"", ""array"")
function filter_by_substring($strings, $substring) {
","function filter_by_substring($strings, $substring) {
    $filtered = array();
    foreach ($strings as $string) {
        if (strpos($string, $substring) !== false) {
            $filtered[] = $string;
        }
    }
    return $filtered;
}","function candidate(...$args) {
    return filter_by_substring(...$args);
}

function test(): void {
    if (candidate(array(), ""john"") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""), ""xxx"") !== array(""xxx"", ""xxxAAA"", ""xxx"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""), ""xx"") !== array(""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""grunt"", ""trumpet"", ""prune"", ""gruesome""), ""run"") !== array(""grunt"", ""prune"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_8,vie_Latn,php,"<?php
//Số rỗng nên bằng 0 và sản phẩm rỗng nên bằng 1.//Đối với một mảng số nguyên nhất định, trả về một mảng bao gồm tổng và sản phẩm của tất cả các số nguyên trong mảng. // >>> sum_product(array())
// array(0, 1)
// >>> sum_product(array(1, 2, 3, 4))
// array(10, 24)
function sum_product($numbers) {
","function sum_product($numbers) {
    $sum = 0;
    $product = 1;
    
    foreach ($numbers as $number) {
        $sum += $number;
        $product *= $number;
    }
    
    return array($sum, $product);
}","function candidate(...$args) {
    return sum_product(...$args);
}

function test(): void {
    if (candidate(array()) !== array(0, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(100, 0)) !== array(100, 0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 5, 7)) !== array(15, 105)) { throw new Exception(""Test failed!""); }
    if (candidate(array(10)) !== array(10, 10)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_9,vie_Latn,php,"<?php
//trong trình tự.//Từ một mảng số nguyên đã cho, tạo ra một mảng các phần tử tối đa lăn tìm thấy cho đến thời điểm cho // >>> rolling_max(array(1, 2, 3, 2, 3, 4, 2))
// array(1, 2, 3, 3, 3, 4, 4)
function rolling_max($numbers) {
","function rolling_max($numbers) {
    $result = [];
    $current_max = null;

    foreach ($numbers as $number) {
        if ($current_max === null || $number > $current_max) {
            $current_max = $number;
        }
        $result[] = $current_max;
    }

    return $result;
}","function candidate(...$args) {
    return rolling_max(...$args);
}

function test(): void {
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_10,vie_Latn,php,"<?php
//- Thêm vào cuối chuỗi ngược của một tiền tố chuỗi xuất hiện trước hậu tố palindromic.//- Tìm postfix dài nhất của chuỗi cung cấp là một palindrome. //Ý tưởng thuật toán rất đơn giản://Tìm palindrome ngắn nhất bắt đầu với một chuỗi được cung cấp. // >>> make_palindrome("""")
// """"
// >>> make_palindrome(""cat"")
// ""catac""
// >>> make_palindrome(""cata"")
// ""catac""
function make_palindrome($string) {
","function make_palindrome($string) {
    $n = strlen($string);
    if ($n == 0) {
        return """";
    }
    
    // Check for the longest palindrome suffix
    for ($i = $n; $i >= 0; $i--) {
        if (is_palindrome(substr($string, $i))) {
            break;
        }
    }
    
    // Get the prefix before the palindromic suffix
    $prefix = substr($string, 0, $i);
    
    // Append the reverse of prefix to the end of the original string
    return $string . strrev($prefix);
}

// Helper function to check if a string is a palindrome
function is_palindrome($s) {
    return $s === strrev($s);
}","function candidate(...$args) {
    return make_palindrome(...$args);
}

function test(): void {
    if (candidate("""") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""x"") !== ""x"") { throw new Exception(""Test failed!""); }
    if (candidate(""xyz"") !== ""xyzyx"") { throw new Exception(""Test failed!""); }
    if (candidate(""xyx"") !== ""xyx"") { throw new Exception(""Test failed!""); }
    if (candidate(""jerry"") !== ""jerryrrej"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_11,vie_Latn,php,"<?php
//Thực hiện XOR nhị phân trên các đầu vào này và trả về kết quả cũng như một chuỗi. //Input là hai chuỗi a và b chỉ bao gồm 1 và 0.// >>> string_xor(""010"", ""110"")
// ""100""
function string_xor($a, $b) {
","function string_xor($a, $b) {
    $result = '';
    for ($i = 0; $i < strlen($a); $i++) {
        $result .= ($a[$i] === $b[$i]) ? '0' : '1';
    }
    return $result;
}","function candidate(...$args) {
    return string_xor(...$args);
}

function test(): void {
    if (candidate(""111000"", ""101010"") !== ""010010"") { throw new Exception(""Test failed!""); }
    if (candidate(""1"", ""1"") !== ""0"") { throw new Exception(""Test failed!""); }
    if (candidate(""0101"", ""0000"") !== ""0101"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_12,vie_Latn,php,"<?php
//trả về null trong trường hợp mảng đầu vào trống.//Trong mảng chuỗi, trả về chuỗi dài nhất. trả về chuỗi đầu tiên trong trường hợp có nhiều chuỗi.// >>> longest(array())
// null
// >>> longest(array(""a"", ""b"", ""c""))
// ""a""
// >>> longest(array(""a"", ""bb"", ""ccc""))
// ""ccc""
function longest($strings) {
","function longest($strings) {
    if (empty($strings)) {
        return null;
    }

    $longestString = $strings[0];
    foreach ($strings as $string) {
        if (strlen($string) > strlen($longestString)) {
            $longestString = $string;
        }
    }

    return $longestString;
}","function candidate(...$args) {
    return longest(...$args);
}

function test(): void {
    if (candidate(array()) !== null) { throw new Exception(""Test failed!""); }
    if (candidate(array(""x"", ""y"", ""z"")) !== ""x"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc"")) !== ""zzzz"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_13,vie_Latn,php,"<?php
//Trả về đại chia chung lớn nhất của hai số nguyên a và b // >>> greatest_common_divisor(3, 5)
// 1
// >>> greatest_common_divisor(25, 15)
// 5
function greatest_common_divisor($a, $b) {
","function greatest_common_divisor($a, $b) {
    while ($b != 0) {
        $t = $b;
        $b = $a % $b;
        $a = $t;
    }
    return $a;
}","function candidate(...$args) {
    return greatest_common_divisor(...$args);
}

function test(): void {
    if (candidate(3, 7) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(10, 15) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(49, 14) !== 7) { throw new Exception(""Test failed!""); }
    if (candidate(144, 60) !== 12) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_14,vie_Latn,php,"<?php
//Trả về mảng tất cả các tiền tố từ ngắn nhất đến dài nhất của chuỗi đầu vào // >>> all_prefixes(""abc"")
// array(""a"", ""ab"", ""abc"")
function all_prefixes($string) {
","function all_prefixes($string) {
    $prefixes = array();
    $length = strlen($string);
    for ($i = 1; $i <= $length; $i++) {
        $prefixes[] = substr($string, 0, $i);
    }
    return $prefixes;
}","function candidate(...$args) {
    return all_prefixes(...$args);
}

function test(): void {
    if (candidate("""") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""asdfgh"") !== array(""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh"")) { throw new Exception(""Test failed!""); }
    if (candidate(""WWW"") !== array(""W"", ""WW"", ""WWW"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_15,vie_Latn,php,"<?php
//Trả về một chuỗi chứa các số giới hạn không gian bắt đầu từ 0 đến n.// >>> string_sequence(0)
// ""0""
// >>> string_sequence(5)
// ""0 1 2 3 4 5""
function string_sequence($n) {
","function string_sequence($n) {
    $sequence = range(0, $n);
    return implode(' ', $sequence);
}","function candidate(...$args) {
    return string_sequence(...$args);
}

function test(): void {
    if (candidate(0) !== ""0"") { throw new Exception(""Test failed!""); }
    if (candidate(3) !== ""0 1 2 3"") { throw new Exception(""Test failed!""); }
    if (candidate(10) !== ""0 1 2 3 4 5 6 7 8 9 10"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_16,vie_Latn,php,"<?php
//Cho một chuỗi, tìm ra bao nhiêu ký tự riêng biệt (cho dù trường hợp) nó bao gồm // >>> count_distinct_characters(""xyzXYZ"")
// 3
// >>> count_distinct_characters(""Jerry"")
// 4
function count_distinct_characters($string) {
","function count_distinct_characters($string) {
    $string = strtolower($string);
    $distinctChars = array_count_values(str_split($string));
    return count($distinctChars);
}","function candidate(...$args) {
    return count_distinct_characters(...$args);
}

function test(): void {
    if (candidate("""") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""abcde"") !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdecadeCADE"") !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(""aaaaAAAAaaaa"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""Jerry jERRY JeRRRY"") !== 5) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_17,vie_Latn,php,"<?php
//""Hơi"" - một nốt bốn, kéo dài một nhịp.//'o sa' - nửa nốt, kéo dài hai nhịp.//'O' - toàn bộ nốt, kéo dài bốn nhịp //Đây là một truyền thuyết://Không phải cuối cùng.//Nhiệm vụ của bạn là phân tích chuỗi này và trả về mảng các số nguyên tương ứng với bao nhiêu nhịp mỗi lần //Đầu vào của hàm này là một chuỗi đại diện cho các nốt nhạc trong định dạng ASCII đặc biệt.// >>> parse_music(""o o| .| o| o| .| .| .| .| o o"")
// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)
function parse_music($music_string) {
","function parse_music($music_string) {
    $notes = explode("" "", trim($music_string));
    $beats = [];

    foreach ($notes as $note) {
        switch ($note) {
            case 'o':
                $beats[] = 4;
                break;
            case 'o|':
                $beats[] = 2;
                break;
            case '.|':
                $beats[] = 1;
                break;
        }
    }

    return $beats;
}","function candidate(...$args) {
    return parse_music(...$args);
}

function test(): void {
    if (candidate("""") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""o o o o"") !== array(4, 4, 4, 4)) { throw new Exception(""Test failed!""); }
    if (candidate("".| .| .| .|"") !== array(1, 1, 1, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(""o| o| .| .| o o o o"") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(""o| .| o| .| o o| o o|"") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_18,vie_Latn,php,"<?php
//Tìm ra số lần một chuỗi con nhất định có thể được tìm thấy trong chuỗi gốc. Đếm các trường hợp chồng chéo. // >>> how_many_times("""", ""a"")
// 0
// >>> how_many_times(""aaa"", ""a"")
// 3
// >>> how_many_times(""aaaa"", ""aa"")
// 3
function how_many_times($string, $substring) {
","function how_many_times($string, $substring) {
    if ($substring === """") {
        return 0;
    }
    
    $count = 0;
    $position = 0;
    $subLen = strlen($substring);
    
    while (($position = strpos($string, $substring, $position)) !== false) {
        $count++;
        $position += 1;
    }
    
    return $count;
}","function candidate(...$args) {
    return how_many_times(...$args);
}

function test(): void {
    if (candidate("""", ""x"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""xyxyxyx"", ""x"") !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(""cacacacac"", ""cac"") !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(""john doe"", ""john"") !== 1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_19,vie_Latn,php,"<?php
//Trả về chuỗi với các số được sắp xếp từ nhỏ nhất đến lớn nhất //Các lựa chọn hợp lệ là ""không"", ""một"", ""hai"", ""ba"", ""bốn"", ""năm"", ""sáu"", ""bảy"", ""tám"" và ""chín"". //Lượng đầu vào là một chuỗi số giới hạn không gian từ 'không' đến 'chín'.// >>> sort_numbers(""three one five"")
// ""one three five""
function sort_numbers($numbers) {
","function sort_numbers($numbers) {
    // Define an array to map string numerals to their respective integer values
    $numeral_to_value = [
        'zero' => 0,
        'one' => 1,
        'two' => 2,
        'three' => 3,
        'four' => 4,
        'five' => 5,
        'six' => 6,
        'seven' => 7,
        'eight' => 8,
        'nine' => 9
    ];

    // Split the input string into an array of words
    $number_words = explode("" "", $numbers);

    // Sort the array using the integer values from numeral_to_value
    usort($number_words, function($a, $b) use ($numeral_to_value) {
        return $numeral_to_value[$a] - $numeral_to_value[$b];
    });

    // Join the sorted array back into a string and return it
    return implode("" "", $number_words);
}","function candidate(...$args) {
    return sort_numbers(...$args);
}

function test(): void {
    if (candidate("""") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""three"") !== ""three"") { throw new Exception(""Test failed!""); }
    if (candidate(""three five nine"") !== ""three five nine"") { throw new Exception(""Test failed!""); }
    if (candidate(""five zero four seven nine eight"") !== ""zero four five seven eight nine"") { throw new Exception(""Test failed!""); }
    if (candidate(""six five four three two one zero"") !== ""zero one two three four five six"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_20,vie_Latn,php,"<?php
//khác và trả chúng theo thứ tự (số ít hơn, số lớn hơn).//Từ mảng số được cung cấp (có chiều dài ít nhất là hai) chọn và trả về hai số gần nhất với mỗi số // >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))
// array(2.0, 2.2)
// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))
// array(2.0, 2.0)
function find_closest_elements($numbers) {
","function find_closest_elements($numbers) {
    sort($numbers);
    $minDiff = PHP_FLOAT_MAX;
    $closestPair = array();

    for ($i = 0; $i < count($numbers) - 1; $i++) {
        $diff = abs($numbers[$i + 1] - $numbers[$i]);
        if ($diff < $minDiff) {
            $minDiff = $diff;
            $closestPair = array($numbers[$i], $numbers[$i + 1]);
        }
    }

    return $closestPair;
}","function candidate(...$args) {
    return find_closest_elements(...$args);
}

function test(): void {
    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_21,vie_Latn,php,"<?php
//Như vậy số nhỏ nhất sẽ trở thành 0 và số lớn nhất sẽ trở thành 1 //Với mảng số (ít nhất là hai phần tử), áp dụng một biến đổi tuyến tính cho mảng đó, // >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))
// array(0.0, 0.25, 0.5, 0.75, 1.0)
function rescale_to_unit($numbers) {
","function rescale_to_unit($numbers) {
    $min = min($numbers);
    $max = max($numbers);
    if ($max == $min) {
        return array_fill(0, count($numbers), 0.0);
    }
    
    $result = array_map(function($num) use ($min, $max) {
        return ($num - $min) / ($max - $min);
    }, $numbers);
    
    return $result;
}","function candidate(...$args) {
    return rescale_to_unit(...$args);
}

function test(): void {
    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(""Test failed!""); }
    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_22,vie_Latn,php,"<?php
//Bộ lọc mảng giá trị phpthon cho chỉ số nguyên// >>> filter_integers(array(""a"", 3.14, 5))
// array(5)
// >>> filter_integers(array(1, 2, 3, ""abc"", array(), array()))
// array(1, 2, 3)
function filter_integers($values) {
","function filter_integers($values) {
    return array_values(array_filter($values, 'is_int'));
}","function candidate(...$args) {
    return filter_integers(...$args);
}

function test(): void {
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, array(), array(), 23.2, 9, ""adasd"")) !== array(4, 9)) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, ""c"", 3, 3, ""a"", ""b"")) !== array(3, 3, 3)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_23,vie_Latn,php,"<?php
//Trải về chiều dài của chuỗi được cho // >>> strlen("""")
// 0
// >>> strlen(""abc"")
// 3
function strlen($string) {
","function strlen($string) {
    $length = 0;
    while (isset($string[$length])) {
        $length++;
    }
    return $length;
}","function candidate(...$args) {
    return strlen(...$args);
}

function test(): void {
    if (candidate("""") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""x"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""asdasnakj"") !== 9) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_24,vie_Latn,php,"<?php
//Đối với một số n, tìm số lớn nhất chia n đều, nhỏ hơn n // >>> largest_divisor(15)
// 5
function largest_divisor($n) {
","function largest_divisor($n) {
    for ($i = $n - 1; $i > 0; $i--) {
        if ($n % $i === 0) {
            return $i;
        }
    }
    return null; // In case no divisor is found, though for n > 1 there will always be one.
}","function candidate(...$args) {
    return largest_divisor(...$args);
}

function test(): void {
    if (candidate(3) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(7) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(100) !== 50) { throw new Exception(""Test failed!""); }
    if (candidate(49) !== 7) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_25,vie_Latn,php,"<?php
//Số đầu vào phải bằng với sản phẩm của tất cả các yếu tố.//Mỗi nhân phải được sắp xếp theo số lần tương ứng với số lần xuất hiện trong phân giải.//Trả về mảng các nhân số nguyên tố của số nguyên được cho theo thứ tự từ nhỏ nhất đến lớn nhất.// >>> factorize(8)
// array(2, 2, 2)
// >>> factorize(25)
// array(5, 5)
// >>> factorize(70)
// array(2, 5, 7)
function factorize($n) {
","function factorize($n) {
    $factors = array();
    // Check for number of twos
    while ($n % 2 == 0) {
        $factors[] = 2;
        $n = $n / 2;
    }
    // Check for odd numbers
    for ($i = 3; $i <= sqrt($n); $i += 2) {
        while ($n % $i == 0) {
            $factors[] = $i;
            $n = $n / $i;
        }
    }
    // If n becomes a prime number greater than 2
    if ($n > 2) {
        $factors[] = $n;
    }
    return $factors;
}","function candidate(...$args) {
    return factorize(...$args);
}

function test(): void {
    if (candidate(2) !== array(2)) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== array(2, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(57) !== array(3, 19)) { throw new Exception(""Test failed!""); }
    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(""Test failed!""); }
    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(""Test failed!""); }
    if (candidate(20577) !== array(3, 19, 19, 19)) { throw new Exception(""Test failed!""); }
    if (candidate(18) !== array(2, 3, 3)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_26,vie_Latn,php,"<?php
//Giữ thứ tự của các yếu tố trái giống như trong đầu vào.//Từ một mảng các số nguyên, loại bỏ tất cả các phần tử xuất hiện nhiều hơn một lần.// >>> remove_duplicates(array(1, 2, 3, 2, 4))
// array(1, 3, 4)
function remove_duplicates($numbers) {
","function remove_duplicates($numbers) {
    $counts = array_count_values($numbers);
    return array_values(array_filter($numbers, function($num) use ($counts) {
        return $counts[$num] === 1;
    }));
}","function candidate(...$args) {
    return remove_duplicates(...$args);
}

function test(): void {
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_27,vie_Latn,php,"<?php
//Đối với một chuỗi được cho, xoay các ký tự chữ cái nhỏ thành chữ cái lớn và chữ cái lớn thành chữ cái nhỏ. // >>> flip_case(""Hello"")
// ""hELLO""
function flip_case($string) {
","function flip_case($string) {
    $flippedString = '';
    for ($i = 0; $i < strlen($string); $i++) {
        $char = $string[$i];
        if (ctype_lower($char)) {
            $flippedString .= strtoupper($char);
        } else if (ctype_upper($char)) {
            $flippedString .= strtolower($char);
        } else {
            $flippedString .= $char;
        }
    }
    return $flippedString;
}","function candidate(...$args) {
    return flip_case(...$args);
}

function test(): void {
    if (candidate("""") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""Hello!"") !== ""hELLO!"") { throw new Exception(""Test failed!""); }
    if (candidate(""These violent delights have violent ends"") !== ""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_28,vie_Latn,php,"<?php
//Kết hợp các chuỗi thành một chuỗi duy nhất.// >>> concatenate(array())
// """"
// >>> concatenate(array(""a"", ""b"", ""c""))
// ""abc""
function concatenate($strings) {
","function concatenate($strings) {
    return implode('', $strings);
}","function candidate(...$args) {
    return concatenate(...$args);
}

function test(): void {
    if (candidate(array()) !== """") { throw new Exception(""Test failed!""); }
    if (candidate(array(""x"", ""y"", ""z"")) !== ""xyz"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""x"", ""y"", ""z"", ""w"", ""k"")) !== ""xyzwk"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_29,vie_Latn,php,"<?php
//Bộ lọc mảng đầu vào của các chuỗi chỉ cho những người bắt đầu với một tiền tố nhất định. // >>> filter_by_prefix(array(), ""a"")
// array()
// >>> filter_by_prefix(array(""abc"", ""bcd"", ""cde"", ""array""), ""a"")
// array(""abc"", ""array"")
function filter_by_prefix($strings, $prefix) {
","function filter_by_prefix($strings, $prefix) {
    $result = array_filter($strings, function($string) use ($prefix) {
        return strpos($string, $prefix) === 0;
    });
    return array_values($result);
}","function candidate(...$args) {
    return filter_by_prefix(...$args);
}

function test(): void {
    if (candidate(array(), ""john"") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""), ""xxx"") !== array(""xxx"", ""xxxAAA"", ""xxx"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_30,vie_Latn,php,"<?php
//Trả về chỉ số dương trong mảng.// >>> get_positive(array(-1, 2, -4, 5, 6))
// array(2, 5, 6)
// >>> get_positive(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))
// array(5, 3, 2, 3, 9, 123, 1)
function get_positive($l) {
","function get_positive($l) {
    return array_filter($l, function($num) {
        return $num > 0;
    });
}","function candidate(...$args) {
    return get_positive(...$args);
}

function test(): void {
    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -2)) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_31,vie_Latn,php,"<?php
//Trả về true nếu một số nhất định là số nguyên tố, và false nếu không.// >>> is_prime(6)
// false
// >>> is_prime(101)
// true
// >>> is_prime(11)
// true
// >>> is_prime(13441)
// true
// >>> is_prime(61)
// true
// >>> is_prime(4)
// false
// >>> is_prime(1)
// false
function is_prime($n) {
","function is_prime($n) {
    if ($n <= 1) return false;
    if ($n <= 3) return true;
    if ($n % 2 == 0 || $n % 3 == 0) return false;

    for ($i = 5; $i * $i <= $n; $i += 6) {
        if ($n % $i == 0 || $n % ($i + 2) == 0) return false;
    }
    return true;
}","function candidate(...$args) {
    return is_prime(...$args);
}

function test(): void {
    if (candidate(6) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(101) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(11) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(13441) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(61) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(11) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(17) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(85) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(77) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(255379) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_33,vie_Latn,php,"<?php
//cho các giá trị của các chỉ số tương ứng của l, nhưng được sắp xếp.//l' giống hệt với l trong các chỉ số không thể chia cho ba, trong khi giá trị của nó ở các chỉ số có thể chia cho ba là bằng nhau //Hàm này lấy mảng l và trả về mảng l' như vậy mà // >>> sort_third(array(1, 2, 3))
// array(1, 2, 3)
// >>> sort_third(array(5, 6, 3, 4, 8, 9, 2))
// array(2, 6, 3, 4, 8, 9, 5)
function sort_third($l) {
","function sort_third($l) {
    $length = count($l);
    $div_by_three_values = [];

    // Collect values at indices divisible by three
    for ($i = 0; $i < $length; $i++) {
        if ($i % 3 == 0) {
            $div_by_three_values[] = $l[$i];
        }
    }

    // Sort the collected values
    sort($div_by_three_values);

    // Replace original values with sorted ones at indices divisible by three
    $index = 0;
    for ($i = 0; $i < $length; $i++) {
        if ($i % 3 == 0) {
            $l[$i] = $div_by_three_values[$index];
            $index++;
        }
    }

    return $l;
}","function candidate(...$args) {
    return sort_third(...$args);
}

function test(): void {
    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_34,vie_Latn,php,"<?php
//Trả về các phần tử duy nhất được sắp xếp trong mảng// >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))
// array(0, 2, 3, 5, 9, 123)
function unique($l) {
","function unique($l) {
    // Use array_unique to remove duplicates
    $uniqueArray = array_unique($l);
    // Sort the result array
    sort($uniqueArray);
    return $uniqueArray;
}

// Example usage
$result = unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123));
print_r($result);","function candidate(...$args) {
    return unique(...$args);
}

function test(): void {
    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_35,vie_Latn,php,"<?php
//Trả về phần tử tối đa trong mảng.// >>> max_element(array(1, 2, 3))
// 3
// >>> max_element(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))
// 123
function max_element($l) {
","function max_element($l) {
    if (empty($l)) {
        return null; // Return null if the array is empty
    }
    $max = $l[0];
    foreach ($l as $value) {
        if ($value > $max) {
            $max = $value;
        }
    }
    return $max;
}","function candidate(...$args) {
    return max_element(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3)) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10)) !== 124) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_36,vie_Latn,php,"<?php
//Trả về số lần chữ số 7 xuất hiện trong số nguyên nhỏ hơn n mà có thể chia cho 11 hoặc 13. // >>> fizz_buzz(50)
// 0
// >>> fizz_buzz(78)
// 2
// >>> fizz_buzz(79)
// 3
function fizz_buzz($n) {
","function fizz_buzz($n) {
    $count = 0;
    for ($i = 1; $i < $n; $i++) {
        if ($i % 11 == 0 || $i % 13 == 0) {
            $digits = str_split((string)$i);
            foreach ($digits as $digit) {
                if ($digit == '7') {
                    $count++;
                }
            }
        }
    }
    return $count;
}","function candidate(...$args) {
    return fizz_buzz(...$args);
}

function test(): void {
    if (candidate(50) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(78) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(79) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(100) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(200) !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(4000) !== 192) { throw new Exception(""Test failed!""); }
    if (candidate(10000) !== 639) { throw new Exception(""Test failed!""); }
    if (candidate(100000) !== 8026) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_37,vie_Latn,php,"<?php
//đến các giá trị của các chỉ số chẵn của l, nhưng được sắp xếp.//l' giống hệt với l trong các chỉ số lẻ, trong khi giá trị của nó ở các chỉ số chẵn là bằng nhau //Hàm này lấy mảng l và trả về mảng l' như vậy mà // >>> sort_even(array(1, 2, 3))
// array(1, 2, 3)
// >>> sort_even(array(5, 6, 3, 4))
// array(3, 6, 5, 4)
function sort_even($l) {
","function sort_even($l) {
    $even_indices = [];

    // Extract values at even indices
    for ($i = 0; $i < count($l); $i += 2) {
        $even_indices[] = $l[$i];
    }

    // Sort the extracted even-indexed values
    sort($even_indices);

    // Rebuild the original array with sorted even-indexed values
    $evenIndex = 0;
    for ($i = 0; $i < count($l); $i++) {
        if ($i % 2 == 0) {
            $l[$i] = $even_indices[$evenIndex];
            $evenIndex++;
        }
    }

    return $l;
}","function candidate(...$args) {
    return sort_even(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_39,vie_Latn,php,"<?php
//prime_fib trả về số n là một số Fibonacci và nó cũng là số nguyên tố. // >>> prime_fib(1)
// 2
// >>> prime_fib(2)
// 3
// >>> prime_fib(3)
// 5
// >>> prime_fib(4)
// 13
// >>> prime_fib(5)
// 89
function prime_fib($n) {
","function is_prime($num) {
    if ($num <= 1) return false;
    if ($num <= 3) return true;
    if ($num % 2 == 0 || $num % 3 == 0) return false;
    for ($i = 5; $i * $i <= $num; $i += 6) {
        if ($num % $i == 0 || $num % ($i + 2) == 0) return false;
    }
    return true;
}

function prime_fib($n) {
    $fib1 = 1;
    $fib2 = 1;
    $fib_index = 2;
    $prime_fib_count = 0;
    
    while (true) {
        $fib_index++;
        $fib = $fib1 + $fib2;
        $fib1 = $fib2;
        $fib2 = $fib;
        
        if (is_prime($fib)) {
            $prime_fib_count++;
            if ($prime_fib_count == $n) {
                return $fib;
            }
        }
    }
}","function candidate(...$args) {
    return prime_fib(...$args);
}

function test(): void {
    if (candidate(1) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(2) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(3) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== 13) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== 89) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== 233) { throw new Exception(""Test failed!""); }
    if (candidate(7) !== 1597) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== 28657) { throw new Exception(""Test failed!""); }
    if (candidate(9) !== 514229) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== 433494437) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_40,vie_Latn,php,"<?php
//tổng bằng không, và sai nếu không.//nó trả về true nếu có ba phần tử khác nhau trong mảng mà //triples_sum_to_zero lấy mảng các số nguyên làm đầu vào.// >>> triples_sum_to_zero(array(1, 3, 5, 0))
// false
// >>> triples_sum_to_zero(array(1, 3, -2, 1))
// true
// >>> triples_sum_to_zero(array(1, 2, 3, 7))
// false
// >>> triples_sum_to_zero(array(2, 4, -5, 3, 9, 7))
// true
// >>> triples_sum_to_zero(array(1))
// false
function triples_sum_to_zero($l) {
","function triples_sum_to_zero($l) {
    $n = count($l);
    if ($n < 3) return false;
    sort($l);
    for ($i = 0; $i < $n - 2; $i++) {
        $left = $i + 1;
        $right = $n - 1;
        while ($left < $right) {
            $sum = $l[$i] + $l[$left] + $l[$right];
            if ($sum === 0) {
                return true;
            } elseif ($sum < 0) {
                $left++;
            } else {
                $right--;
            }
        }
    }
    return false;
}","function candidate(...$args) {
    return triples_sum_to_zero(...$args);
}

function test(): void {
    if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, 5, -1)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, -2, 1)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 7)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 5, 7)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, -5, 3, 9, 7)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, 5, -100)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(100, 3, 5, -100)) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_41,vie_Latn,php,"<?php
//Hàm này đưa ra số lượng va chạm như vậy.//trên đường đi của chúng như thể chúng không va chạm.//Tuy nhiên, những chiếc xe này rất mạnh mẽ và bền vững, kết quả là chúng vẫn tiếp tục di chuyển.//khi một chiếc xe đang di chuyển từ trái sang phải đâm vào một chiếc xe đang di chuyển từ phải sang trái.//Tất cả xe di chuyển với cùng tốc độ. Hai xe được cho là va chạm.//Hai cặp xe bắt đầu từ rất xa//n xe đang lái xe từ trái sang phải; đồng thời, một bộ khác nhau của n xe //Hãy tưởng tượng một con đường là một đường thẳng vô cùng dài.function car_race_collision($n) {
","function car_race_collision($n) {
    // Each left-to-right moving car will collide with exactly one right-to-left moving car.
    // Therefore, the number of collisions is simply equal to the number of cars in one direction, i.e., n.
    return $n;
}","function candidate(...$args) {
    return car_race_collision(...$args);
}

function test(): void {
    if (candidate(2) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(3) !== 9) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== 16) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== 64) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== 100) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_42,vie_Latn,php,"<?php
//Trả về mảng với các yếu tố tăng lên 1.// >>> incr_list(array(1, 2, 3))
// array(2, 3, 4)
// >>> incr_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123))
// array(6, 4, 6, 3, 4, 4, 10, 1, 124)
function incr_list($l) {
","function incr_list($l) {
    return array_map(function($item) {
        return $item + 1;
    }, $l);
}","function candidate(...$args) {
    return incr_list(...$args);
}

function test(): void {
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_43,vie_Latn,php,"<?php
//tổng bằng không, và sai nếu không.//nó trả về true nếu có hai phần tử khác nhau trong mảng mà //pairs_sum_to_zero lấy mảng các số nguyên làm đầu vào. // >>> pairs_sum_to_zero(array(1, 3, 5, 0))
// false
// >>> pairs_sum_to_zero(array(1, 3, -2, 1))
// false
// >>> pairs_sum_to_zero(array(1, 2, 3, 7))
// false
// >>> pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7))
// true
// >>> pairs_sum_to_zero(array(1))
// false
function pairs_sum_to_zero($l) {
","function pairs_sum_to_zero($l) {
    $seen = [];
    foreach ($l as $num) {
        if (isset($seen[-$num])) {
            return true;
        }
        $seen[$num] = true;
    }
    return false;
}","function candidate(...$args) {
    return pairs_sum_to_zero(...$args);
}

function test(): void {
    if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 7)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, -5, 3, 5, 7)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(-3, 9, -1, 4, 2, 31)) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_44,vie_Latn,php,"<?php
//số cơ sở nhỏ hơn 10.//trả về biểu diễn chuỗi sau khi chuyển đổi.//Thay đổi cơ sở số của số đầu vào x thành cơ sở.// >>> change_base(8, 3)
// ""22""
// >>> change_base(8, 2)
// ""1000""
// >>> change_base(7, 2)
// ""111""
function change_base($x, $base) {
","function change_base($x, $base) {
    if ($base < 2 || $base > 9) {
        return false; // base must be between 2 and 9
    }
    
    $result = '';
    do {
        $remainder = $x % $base;
        $result = $remainder . $result;
        $x = intdiv($x, $base);
    } while ($x > 0);
    
    return $result;
}","function candidate(...$args) {
    return change_base(...$args);
}

function test(): void {
    if (candidate(8, 3) !== ""22"") { throw new Exception(""Test failed!""); }
    if (candidate(9, 3) !== ""100"") { throw new Exception(""Test failed!""); }
    if (candidate(234, 2) !== ""11101010"") { throw new Exception(""Test failed!""); }
    if (candidate(16, 2) !== ""10000"") { throw new Exception(""Test failed!""); }
    if (candidate(8, 2) !== ""1000"") { throw new Exception(""Test failed!""); }
    if (candidate(7, 2) !== ""111"") { throw new Exception(""Test failed!""); }
    if (candidate(2, 3) !== ""2"") { throw new Exception(""Test failed!""); }
    if (candidate(3, 4) !== ""3"") { throw new Exception(""Test failed!""); }
    if (candidate(4, 5) !== ""4"") { throw new Exception(""Test failed!""); }
    if (candidate(5, 6) !== ""5"") { throw new Exception(""Test failed!""); }
    if (candidate(6, 7) !== ""6"") { throw new Exception(""Test failed!""); }
    if (candidate(7, 8) !== ""7"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_45,vie_Latn,php,"<?php
//Với chiều dài của một bên và cao trở lại khu vực cho một tam giác.// >>> triangle_area(5, 3)
// 7.5
function triangle_area($a, $h) {
","function triangle_area($a, $h) {
    return 0.5 * $a * $h;
}","function candidate(...$args) {
    return triangle_area(...$args);
}

function test(): void {
    if (candidate(5, 3) !== 7.5) { throw new Exception(""Test failed!""); }
    if (candidate(2, 2) !== 2.0) { throw new Exception(""Test failed!""); }
    if (candidate(10, 8) !== 40.0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_46,vie_Latn,php,"<?php
//Vui lòng viết một hàm để tính toán hiệu quả phần tử n-th của chuỗi số fib4. Không sử dụng quy trình. //fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).//fib4(3) -> 0 //fib4(2) -> 2 //fib4(1) -> 0 //fib4(0) -> 0 //Dòng số Fib4 là một chuỗi tương tự như chuỗi Fibbonacci được định nghĩa như sau: // >>> fib4(5)
// 4
// >>> fib4(6)
// 8
// >>> fib4(7)
// 14
function fib4($n) {
","function fib4($n) {
    if ($n == 0 || $n == 1 || $n == 3) return 0;
    if ($n == 2) return 2;

    $fib4 = [0, 0, 2, 0];
    
    for ($i = 4; $i <= $n; $i++) {
        $fib4[$i % 4] = $fib4[0] + $fib4[1] + $fib4[2] + $fib4[3];
    }

    return $fib4[$n % 4];
}","function candidate(...$args) {
    return fib4(...$args);
}

function test(): void {
    if (candidate(5) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== 28) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== 104) { throw new Exception(""Test failed!""); }
    if (candidate(12) !== 386) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_47,vie_Latn,php,"<?php
//Trở về trung bình của các phần tử trong mảng l. // >>> median(array(3, 1, 2, 4, 5))
// 3
// >>> median(array(-10, 4, 6, 1000, 10, 20))
// 15.0
function median($l) {
","function median($l) {
    sort($l); // Sort the array
    $count = count($l); // Get the count of the array's elements
    
    if ($count % 2 == 0) { // If even number of elements
        $middle1 = $l[$count / 2 - 1];
        $middle2 = $l[$count / 2];
        return ($middle1 + $middle2) / 2;
    } else { // If odd number of elements
        return $l[floor($count / 2)];
    }
}","function candidate(...$args) {
    return median(...$args);
}

function test(): void {
    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(""Test failed!""); }
    if (candidate(array(5)) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(""Test failed!""); }
    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_48,vie_Latn,php,"<?php
//Kiểm tra xem chuỗi được cho là palindrome // >>> is_palindrome("""")
// true
// >>> is_palindrome(""aba"")
// true
// >>> is_palindrome(""aaaaa"")
// true
// >>> is_palindrome(""zbcd"")
// false
function is_palindrome($text) {
","function is_palindrome($text) {
    // Remove any white space and convert to lowercase
    $text = strtolower(str_replace(' ', '', $text));
    
    // Get the reversed version of the text
    $reversedText = strrev($text);
    
    // Check if the text is the same as the reversed version
    return $text === $reversedText;
}","function candidate(...$args) {
    return is_palindrome(...$args);
}

function test(): void {
    if (candidate("""") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""aba"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""aaaaa"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""zbcd"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""xywyx"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""xywyz"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""xywzx"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_49,vie_Latn,php,"<?php
//Trả về 2^n mô-đun p (lưu ý về số liệu).// >>> modp(3, 5)
// 3
// >>> modp(1101, 101)
// 2
// >>> modp(0, 101)
// 1
// >>> modp(3, 11)
// 8
// >>> modp(100, 101)
// 1
function modp($n, $p) {
","function modp($n, $p) {
    return pow(2, $n) % $p;
}","function candidate(...$args) {
    return modp(...$args);
}

function test(): void {
    if (candidate(3, 5) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(1101, 101) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(0, 101) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(3, 11) !== 8) { throw new Exception(""Test failed!""); }
    if (candidate(100, 101) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(30, 5) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(31, 5) !== 3) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_51,vie_Latn,php,"<?php
//remove_vowels là một hàm lấy chuỗi và trả về chuỗi không có nguyên âm. // >>> remove_vowels("""")
// """"
// >>> remove_vowels(""abcdef"")
// ""bcdf""
// >>> remove_vowels(""aaaaa"")
// """"
// >>> remove_vowels(""aaBAA"")
// ""B""
// >>> remove_vowels(""zbcd"")
// ""zbcd""
function remove_vowels($text) {
","function remove_vowels($text) {
    return preg_replace('/[aeiouAEIOU]/', '', $text);
}","function candidate(...$args) {
    return remove_vowels(...$args);
}

function test(): void {
    if (candidate("""") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""abcdef\nghijklm"") !== ""bcdf\nghjklm"") { throw new Exception(""Test failed!""); }
    if (candidate(""fedcba"") !== ""fdcb"") { throw new Exception(""Test failed!""); }
    if (candidate(""eeeee"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""acBAA"") !== ""cB"") { throw new Exception(""Test failed!""); }
    if (candidate(""EcBOO"") !== ""cB"") { throw new Exception(""Test failed!""); }
    if (candidate(""ybcd"") !== ""ybcd"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_52,vie_Latn,php,"<?php
//Trả về true nếu tất cả các số trong mảng l dưới ngưỡng t. // >>> below_threshold(array(1, 2, 4, 10), 100)
// true
// >>> below_threshold(array(1, 20, 4, 10), 5)
// false
function below_threshold($l, $t) {
","function below_threshold($l, $t) {
    foreach ($l as $number) {
        if ($number >= $t) {
            return false;
        }
    }
    return true;
}","function candidate(...$args) {
    return below_threshold(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 4, 10), 100) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 20, 4, 10), 5) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 20, 4, 10), 21) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 20, 4, 10), 22) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 8, 4, 10), 11) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 8, 4, 10), 10) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_53,vie_Latn,php,"<?php
//Thêm hai số x và y // >>> add(2, 3)
// 5
// >>> add(5, 7)
// 12
function add($x, $y) {
","return $x + $y;
}","function candidate(...$args) {
    return add(...$args);
}

function test(): void {
    if (candidate(0, 1) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(1, 0) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(2, 3) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(5, 7) !== 12) { throw new Exception(""Test failed!""); }
    if (candidate(7, 5) !== 12) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_54,vie_Latn,php,"<?php
//Kiểm tra xem hai từ có cùng ký tự không.// >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
// true
// >>> same_chars(""abcd"", ""dddddddabc"")
// true
// >>> same_chars(""dddddddabc"", ""abcd"")
// true
// >>> same_chars(""eabcd"", ""dddddddabc"")
// false
// >>> same_chars(""abcd"", ""dddddddabce"")
// false
// >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
// false
function same_chars($s0, $s1) {
","function same_chars($s0, $s1) {
    $countChars = function($str) {
        $charCount = [];
        for ($i = 0; $i < strlen($str); $i++) {
            $char = $str[$i];
            if (!isset($charCount[$char])) {
                $charCount[$char] = 0;
            }
            $charCount[$char]++;
        }
        return $charCount;
    };

    $countS0 = $countChars($s0);
    $countS1 = $countChars($s1);

    foreach ($countS0 as $char => $count) {
        if (!isset($countS1[$char])) {
            return false;
        }
    }

    foreach ($countS1 as $char => $count) {
        if (!isset($countS0[$char])) {
            return false;
        }
    }

    return true;
}","function candidate(...$args) {
    return same_chars(...$args);
}

function test(): void {
    if (candidate(""eabcdzzzz"", ""dddzzzzzzzddeddabc"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""abcd"", ""dddddddabc"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""dddddddabc"", ""abcd"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""eabcd"", ""dddddddabc"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""abcd"", ""dddddddabcf"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""eabcdzzzz"", ""dddzzzzzzzddddabc"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""aabb"", ""aaccc"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_55,vie_Latn,php,"<?php
//Trả về số Fibonacci n-th. // >>> fib(10)
// 55
// >>> fib(1)
// 1
// >>> fib(8)
// 21
function fib($n) {
","function fib($n) {
    if ($n <= 0) {
        return 0;
    } elseif ($n === 1) {
        return 1;
    }
    
    $a = 0;
    $b = 1;
    
    for ($i = 2; $i <= $n; $i++) {
        $temp = $a + $b;
        $a = $b;
        $b = $temp;
    }
    
    return $b;
}","function candidate(...$args) {
    return fib(...$args);
}

function test(): void {
    if (candidate(10) !== 55) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== 21) { throw new Exception(""Test failed!""); }
    if (candidate(11) !== 89) { throw new Exception(""Test failed!""); }
    if (candidate(12) !== 144) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_56,vie_Latn,php,"<?php
//return true nếu mỗi bracket mở có một bracket đóng tương ứng. //brackets là một chuỗi của ""<"" và "">"". // >>> correct_bracketing(""<"")
// false
// >>> correct_bracketing(""<>"")
// true
// >>> correct_bracketing(""<<><>>"")
// true
// >>> correct_bracketing(""><<>"")
// false
function correct_bracketing($brackets) {
","function correct_bracketing($brackets) {
    $balance = 0;
    $length = strlen($brackets);

    for ($i = 0; $i < $length; $i++) {
        if ($brackets[$i] === '<') {
            $balance++;
        } else if ($brackets[$i] === '>') {
            $balance--;
        }

        // If at any point the balance is negative, there are more closing than opening brackets
        if ($balance < 0) {
            return false;
        }
    }

    // If balance is zero, all opening brackets have been closed properly
    return $balance === 0;
}","function candidate(...$args) {
    return correct_bracketing(...$args);
}

function test(): void {
    if (candidate(""<>"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""<<><>>"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""<><><<><>><>"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""<><><<<><><>><>><<><><<>>>"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""<<<><>>>>"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""><<>"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""<"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""<<<<"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate("">"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""<<>"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""<><><<><>><>><<>"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""<><><<><>><>>><>"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_57,vie_Latn,php,"<?php
//Trả về true là các phần tử mảng đang tăng hoặc giảm một cách đơn điệu.// >>> monotonic(array(1, 2, 4, 20))
// true
// >>> monotonic(array(1, 20, 4, 10))
// false
// >>> monotonic(array(4, 1, 0, -10))
// true
function monotonic($l) {
","function monotonic($l) {
    if (count($l) <= 1) {
        return true;
    }

    $isIncreasing = true;
    $isDecreasing = true;

    for ($i = 1; $i < count($l); $i++) {
        if ($l[$i] > $l[$i - 1]) {
            $isDecreasing = false;
        }
        if ($l[$i] < $l[$i - 1]) {
            $isIncreasing = false;
        }
        if (!$isIncreasing && !$isDecreasing) {
            return false;
        }
    }

    return true;
}","function candidate(...$args) {
    return monotonic(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 4, 10)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 4, 20)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 20, 4, 10)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 1, 0, -10)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 1, 1, 0)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 2, 5, 60)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5, 60)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(9, 9, 9, 9)) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_58,vie_Latn,php,"<?php
//Trả về các phần tử chung duy nhất được sắp xếp cho hai mảng. // >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))
// array(1, 5, 653)
// >>> common(array(5, 3, 2, 8), array(3, 2))
// array(2, 3)
function common($l1, $l2) {
","function common($l1, $l2) {
    $intersection = array_intersect($l1, $l2);
    $unique = array_unique($intersection);
    sort($unique);
    return $unique;
}","function candidate(...$args) {
    return common(...$args);
}

function test(): void {
    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_59,vie_Latn,php,"<?php
//Trả về nhân số nguyên tố lớn nhất của n. Giả sử n > 1 và không phải là số nguyên tố. // >>> largest_prime_factor(13195)
// 29
// >>> largest_prime_factor(2048)
// 2
function largest_prime_factor($n) {
","function largest_prime_factor($n) {
    $largestPrime = -1;

    // Divide $n by 2 until it's odd
    while ($n % 2 === 0) {
        $largestPrime = 2;
        $n /= 2;
    }

    // Check for odd factors from 3 to sqrt(n)
    for ($i = 3; $i * $i <= $n; $i += 2) {
        while ($n % $i === 0) {
            $largestPrime = $i;
            $n /= $i;
        }
    }

    // If $n is a prime number greater than 2
    if ($n > 2) {
        $largestPrime = $n;
    }

    return $largestPrime;
}","function candidate(...$args) {
    return largest_prime_factor(...$args);
}

function test(): void {
    if (candidate(15) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(27) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(63) !== 7) { throw new Exception(""Test failed!""); }
    if (candidate(330) !== 11) { throw new Exception(""Test failed!""); }
    if (candidate(13195) !== 29) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_60,vie_Latn,php,"<?php
//sum_to_n là một hàm tổng số từ 1 đến n. // >>> sum_to_n(30)
// 465
// >>> sum_to_n(100)
// 5050
// >>> sum_to_n(5)
// 15
// >>> sum_to_n(10)
// 55
// >>> sum_to_n(1)
// 1
function sum_to_n($n) {
","function sum_to_n($n) {
    return ($n * ($n + 1)) / 2;
}","function candidate(...$args) {
    return sum_to_n(...$args);
}

function test(): void {
    if (candidate(1) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== 21) { throw new Exception(""Test failed!""); }
    if (candidate(11) !== 66) { throw new Exception(""Test failed!""); }
    if (candidate(30) !== 465) { throw new Exception(""Test failed!""); }
    if (candidate(100) !== 5050) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_61,vie_Latn,php,"<?php
//return true nếu mỗi bracket mở có một bracket đóng tương ứng. //brackets là một chuỗi của ""("" và "")"". // >>> correct_bracketing(""("")
// false
// >>> correct_bracketing(""()"")
// true
// >>> correct_bracketing(""(()())"")
// true
// >>> correct_bracketing("")(()"")
// false
function correct_bracketing($brackets) {
","function correct_bracketing($brackets) {
    $balance = 0;
    $n = strlen($brackets);
    
    for ($i = 0; $i < $n; $i++) {
        if ($brackets[$i] === '(') {
            $balance++;
        } elseif ($brackets[$i] === ')') {
            $balance--;
        }
        
        if ($balance < 0) {
            return false;
        }
    }
    
    return $balance === 0;
}","function candidate(...$args) {
    return correct_bracketing(...$args);
}

function test(): void {
    if (candidate(""()"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""(()())"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""()()(()())()"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""()()((()()())())(()()(()))"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""((()())))"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate("")(()"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""("") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""(((("") !== false) { throw new Exception(""Test failed!""); }
    if (candidate("")"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""(()"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""()()(()())())(()"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""()()(()())()))()"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_62,vie_Latn,php,"<?php
//Trả về dẫn xuất của đa thức này trong cùng một hình thức.//xs[0] + xs[1] * x + xs[2] * x^2 + .... //xs đại diện cho hệ số của một đa thức.// >>> derivative(array(3, 1, 2, 4, 5))
// array(1, 4, 12, 20)
// >>> derivative(array(1, 2, 3))
// array(2, 6)
function derivative($xs) {
","function derivative($xs) {
    $derivative = [];
    for ($i = 1; $i < count($xs); $i++) {
        $derivative[] = $xs[$i] * $i;
    }
    return $derivative;
}","function candidate(...$args) {
    return derivative(...$args);
}

function test(): void {
    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_63,vie_Latn,php,"<?php
//Vui lòng viết một hàm để tính toán hiệu quả phần tử thứ n của chuỗi số fibfib. //fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3). //fibfib(2) == 1 //fibfib(1) == 0 //fibfib(0) == 0 //Dòng số FibFib là một chuỗi tương tự như chuỗi Fibbonacci được định nghĩa như sau: // >>> fibfib(1)
// 0
// >>> fibfib(5)
// 4
// >>> fibfib(8)
// 24
function fibfib($n) {
","function fibfib($n) {
    if ($n === 0) return 0;
    if ($n === 1) return 0;
    if ($n === 2) return 1;

    $fibfib_values = [0, 0, 1];

    for ($i = 3; $i <= $n; $i++) {
        $fibfib_values[$i] = $fibfib_values[$i - 1] + $fibfib_values[$i - 2] + $fibfib_values[$i - 3];
    }

    return $fibfib_values[$n];
}","function candidate(...$args) {
    return fibfib(...$args);
}

function test(): void {
    if (candidate(2) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== 24) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== 81) { throw new Exception(""Test failed!""); }
    if (candidate(12) !== 274) { throw new Exception(""Test failed!""); }
    if (candidate(14) !== 927) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_64,vie_Latn,php,"<?php
//Ví dụ: //nguyên âm, nhưng chỉ khi nó ở cuối từ được đưa ra.//Các nguyên âm trong trường hợp này là ""a"", ""e"", ""i"", ""o"", ""u"". Ở đây, ""y"" cũng là a //một từ như đầu vào và trả về số lượng các nguyên âm trong chuỗi. //Viết hàm vowels_count dùng chuỗi đại diện cho // >>> vowels_count(""abcde"")
// 2
// >>> vowels_count(""ACEDY"")
// 3
function vowels_count($s) {
","function vowels_count($s) {
    $vowels = ['a', 'e', 'i', 'o', 'u'];
    $count = 0;
    $length = strlen($s);
    
    for ($i = 0; $i < $length; $i++) {
        $char = strtolower($s[$i]);
        if (in_array($char, $vowels)) {
            $count++;
        }
        if ($char === 'y' && $i === $length - 1) {
            $count++;
        }
    }
    
    return $count;
}","function candidate(...$args) {
    return vowels_count(...$args);
}

function test(): void {
    if (candidate(""abcde"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""Alone"") !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(""key"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""bye"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""keY"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""bYe"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""ACEDY"") !== 3) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_65,vie_Latn,php,"<?php
//Nếu shift > số chữ số, số chữ số trở lại đảo ngược.//và trả về kết quả như một chuỗi. //Chuyển động tròn các chữ số của số nguyên x, di chuyển các chữ số bên phải bằng cách di chuyển // >>> circular_shift(12, 1)
// ""21""
// >>> circular_shift(12, 2)
// ""12""
function circular_shift($x, $shift) {
","function circular_shift($x, $shift) {
    $digits = strval($x);
    $num_digits = strlen($digits);

    if ($shift > $num_digits) {
        return strrev($digits);
    }

    $shift = $shift % $num_digits;
    if ($shift == 0) {
        return $digits;
    }

    $right_part = substr($digits, -$shift);
    $left_part = substr($digits, 0, $num_digits - $shift);

    return $right_part . $left_part;
}","function candidate(...$args) {
    return circular_shift(...$args);
}

function test(): void {
    if (candidate(100, 2) !== ""001"") { throw new Exception(""Test failed!""); }
    if (candidate(12, 2) !== ""12"") { throw new Exception(""Test failed!""); }
    if (candidate(97, 8) !== ""79"") { throw new Exception(""Test failed!""); }
    if (candidate(12, 1) !== ""21"") { throw new Exception(""Test failed!""); }
    if (candidate(11, 101) !== ""11"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_66,vie_Latn,php,"<?php
//Ví dụ: //Mã ASCII.//Viết một hàm lấy một chuỗi như đầu vào và chỉ trả về tổng các ký tự trên cùng' //Nhiệm vụ // >>> digitSum("""")
// 0
// >>> digitSum(""abAB"")
// 131
// >>> digitSum(""abcCd"")
// 67
// >>> digitSum(""helloE"")
// 69
// >>> digitSum(""woArBld"")
// 131
// >>> digitSum(""aAaaaXa"")
// 153
function digitSum($s) {
","function digitSum($s) {
    $sum = 0;
    for ($i = 0; $i < strlen($s); $i++) {
        if (ctype_upper($s[$i])) {
            $sum += ord($s[$i]);
        }
    }
    return $sum;
}","function candidate(...$args) {
    return digitSum(...$args);
}

function test(): void {
    if (candidate("""") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""abAB"") !== 131) { throw new Exception(""Test failed!""); }
    if (candidate(""abcCd"") !== 67) { throw new Exception(""Test failed!""); }
    if (candidate(""helloE"") !== 69) { throw new Exception(""Test failed!""); }
    if (candidate(""woArBld"") !== 131) { throw new Exception(""Test failed!""); }
    if (candidate(""aAaaaXa"") !== 153) { throw new Exception(""Test failed!""); }
    if (candidate("" How are yOu?"") !== 151) { throw new Exception(""Test failed!""); }
    if (candidate(""You arE Very Smart"") !== 327) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_67,vie_Latn,php,"<?php
//cho examble: //trong giỏ trả về số lượng trái xoài trong giỏ. //cam và táo và một số nguyên đại diện cho tổng số trái cây //táo, cam, và trái cây xoài. cho chuỗi đại diện cho tổng số //được phân phối trong một giỏ trái cây giỏ này chứa //Trong nhiệm vụ này, bạn sẽ được cung cấp một chuỗi đại diện cho một số táo và cam.// >>> fruit_distribution(""5 apples and 6 oranges"", 19)
// 8
// >>> fruit_distribution(""0 apples and 1 oranges"", 3)
// 2
// >>> fruit_distribution(""2 apples and 3 oranges"", 100)
// 95
// >>> fruit_distribution(""100 apples and 1 oranges"", 120)
// 19
function fruit_distribution($s, $n) {
","function fruit_distribution($s, $n) {
    // Extract numbers from the string using regular expression
    preg_match_all('!\d+!', $s, $matches);
    
    // Find out number of apples and oranges from the matches
    $apples = $matches[0][0];
    $oranges = $matches[0][1];
    
    // Calculate total mangoes
    $total_apples_and_oranges = $apples + $oranges;
    $mangoes = $n - $total_apples_and_oranges;
    
    return $mangoes;
}

// Example usage:
echo fruit_distribution(""5 apples and 6 oranges"", 19); // Output: 8","function candidate(...$args) {
    return fruit_distribution(...$args);
}

function test(): void {
    if (candidate(""5 apples and 6 oranges"", 19) !== 8) { throw new Exception(""Test failed!""); }
    if (candidate(""5 apples and 6 oranges"", 21) !== 10) { throw new Exception(""Test failed!""); }
    if (candidate(""0 apples and 1 oranges"", 3) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""1 apples and 0 oranges"", 3) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""2 apples and 3 oranges"", 100) !== 95) { throw new Exception(""Test failed!""); }
    if (candidate(""2 apples and 3 oranges"", 5) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""1 apples and 100 oranges"", 120) !== 19) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_68,vie_Latn,php,"<?php
//Ví dụ 1: //Nếu không có giá trị chẵn hoặc mảng được đưa ra là trống, trả về []. //Các nút nhặt nên được trả về trong một mảng, [smallest_value, chỉ số của nó ], //Nếu tìm thấy nhiều nút có cùng giá trị thậm chí nhỏ nhất, trả về nút có chỉ số nhỏ nhất. //Góp được nhặt nên là nút có giá trị chẵn nhỏ nhất.//nhiệm vụ của bạn là để nhổ một trong những nút và trả lại nó.//""Được cho một mảng đại diện cho một nhánh của một cây có các nút nguyên không âm // >>> pluck(array(4, 2, 3))
// array(2, 1)
// Explanation: 2 has the smallest even value, and 2 has the smallest index.
// Example 2:
// >>> pluck(array(1, 2, 3))
// array(2, 1)
// Explanation: 2 has the smallest even value, and 2 has the smallest index.
// Example 3:
// >>> pluck(array())
// array()
// Example 4:
// >>> pluck(array(5, 0, 3, 0, 4, 2))
// array(0, 1)
// Explanation: 0 is the smallest value, but  there are two zeros,
// so we will choose the first zero, which has the smallest index.
// Constraints:
// * 1 <= nodes.length <= 10000
// * 0 <= node.value
function pluck($arr) {
","function pluck($arr) {
    $smallestEven = null;
    $smallestIndex = null;

    foreach ($arr as $index => $value) {
        if ($value % 2 == 0) {
            if ($smallestEven === null || $value < $smallestEven) {
                $smallestEven = $value;
                $smallestIndex = $index;
            }
        }
    }

    return $smallestEven === null ? [] : [$smallestEven, $smallestIndex];
}","function candidate(...$args) {
    return pluck(...$args);
}

function test(): void {
    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(7, 6, 7, 1)) !== array(6, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(7, 9, 7, 1)) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_69,vie_Latn,php,"<?php
//Ví dụ: //Nếu không có giá trị như vậy tồn tại, trả về -1.//Tần suất của một số nguyên là số lần nó xuất hiện trong mảng.//không, và có tần số lớn hơn hoặc bằng giá trị của chính số nguyên. //Bạn được cung cấp một mảng không rỗng của số nguyên dương. Trả về số nguyên lớn nhất lớn hơn // >>> search(array(4, 1, 2, 2, 3, 1))
// 2
// >>> search(array(1, 2, 2, 3, 3, 3, 4, 4, 4))
// 3
// >>> search(array(5, 5, 4, 4, 4))
// -1
function search($lst) {
","function search($lst) {
    // Create an associative array to store the frequencies of each integer
    $frequency = array_count_values($lst);

    // Initialize the result to -1 (to be returned if no valid integer is found)
    $result = -1;

    // Iterate over the frequency array
    foreach ($frequency as $number => $count) {
        // Check if the integer meets the criteria
        if ($number <= $count && $number > $result) {
            $result = $number;
        }
    }

    return $result;
}","function candidate(...$args) {
    return search(...$args);
}

function test(): void {
    if (candidate(array(5, 5, 5, 5, 1)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 1, 4, 1, 4, 4)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 3)) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(array(8, 8, 8, 8, 8, 8, 8, 8)) !== 8) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 3, 3, 2, 2)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 8, 2)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(8, 8, 3, 6, 5, 6, 4)) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(array(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 9, 10, 1, 3)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(array(10)) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(array(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 10, 10, 9, 2)) !== -1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_70,vie_Latn,php,"<?php
//Ví dụ: //sau đó là tối đa của các số nguyên còn lại, sau đó là tối thiểu và vân vân.//Lập loại kỳ lạ, là khi bạn bắt đầu với giá trị tối thiểu, //Cho mảng số nguyên, trả về mảng theo thứ tự kỳ lạ.// >>> strange_sort_list(array(1, 2, 3, 4))
// array(1, 4, 2, 3)
// >>> strange_sort_list(array(5, 5, 5, 5))
// array(5, 5, 5, 5)
// >>> strange_sort_list(array())
// array()
function strange_sort_list($lst) {
","function strange_sort_list($lst) {
    $result = array();
    sort($lst); // Sort the array in ascending order
    
    while (!empty($lst)) {
        // Take the first (minimum) element
        $result[] = array_shift($lst);
        
        // If there are still elements left, take the last (maximum) element
        if (!empty($lst)) {
            $result[] = array_pop($lst);
        }
    }
    
    return $result;
}","function candidate(...$args) {
    return strange_sort_list(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(111111)) !== array(111111)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_71,vie_Latn,php,"<?php
//Ví dụ: //hơn là bên thứ ba.//Ba bên tạo thành một tam giác hợp lệ khi tổng của bất kỳ hai bên nào lớn hơn.//Nếu không trả về -1 //tam giác tròn đến 2 điểm thập phân nếu ba mặt tạo thành một tam giác hợp lệ. //Với chiều dài của ba cạnh của một tam giác. trả về diện tích của // >>> triangle_area(3, 4, 5)
// 6.0
// >>> triangle_area(1, 2, 10)
// -1
function triangle_area($a, $b, $c) {
","function triangle_area($a, $b, $c) {
    // Check if the sides form a valid triangle
    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {
        // Calculate semi-perimeter
        $s = ($a + $b + $c) / 2;
        // Calculate the area using Heron's formula
        $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));
        // Return the area rounded to 2 decimal places
        return round($area, 2);
    } else {
        return -1; // Not a valid triangle
    }
}","function candidate(...$args) {
    return triangle_area(...$args);
}

function test(): void {
    if (candidate(3, 4, 5) !== 6.0) { throw new Exception(""Test failed!""); }
    if (candidate(1, 2, 10) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(4, 8, 5) !== 8.18) { throw new Exception(""Test failed!""); }
    if (candidate(2, 2, 2) !== 1.73) { throw new Exception(""Test failed!""); }
    if (candidate(1, 2, 3) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(10, 5, 7) !== 16.25) { throw new Exception(""Test failed!""); }
    if (candidate(2, 6, 3) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(1, 1, 1) !== 0.43) { throw new Exception(""Test failed!""); }
    if (candidate(2, 2, 10) !== -1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_72,vie_Latn,php,"<?php
//Ví dụ: //Đối tượng q sẽ bay nếu nó cân bằng (nó là một mảng palindromic) và tổng các yếu tố của nó nhỏ hơn hoặc bằng trọng lượng tối đa có thể w.//Viết một hàm trả về true nếu đối tượng q sẽ bay, và false nếu không. // >>> will_it_fly(array(1, 2), 5)
// false
// # 1+2 is less than the maximum possible weight, but it's unbalanced.
// >>> will_it_fly(array(3, 2, 3), 1)
// false
// # it's balanced, but 3+2+3 is more than the maximum possible weight.
// >>> will_it_fly(array(3, 2, 3), 9)
// true
// # 3+2+3 is less than the maximum possible weight, and it's balanced.
// >>> will_it_fly(array(3), 5)
// true
// # 3 is less than the maximum possible weight, and it's balanced.
function will_it_fly($q, $w) {
","function will_it_fly($q, $w) {
    // Check if the array is palindromic
    if ($q !== array_reverse($q)) {
        return false;
    }
    
    // Calculate the sum of elements in the array
    $sum = array_sum($q);
    
    // Check if the sum is less than or equal to the maximum possible weight
    return $sum <= $w;
}","function candidate(...$args) {
    return will_it_fly(...$args);
}

function test(): void {
    if (candidate(array(3, 2, 3), 9) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2), 5) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(3), 5) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 3), 1) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3), 6) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(5), 5) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_73,vie_Latn,php,"<?php
//Ví dụ: //là đọc giống nhau từ trước sang sau. Trong một thay đổi, bạn có thể thay đổi một yếu tố cho bất kỳ yếu tố khác.//cần phải được thay đổi để làm cho mảng palindromic. Một mảng palindromic là một mảng mà //Cho một mảng arr của số nguyên, tìm số lượng tối thiểu của các yếu tố mà // >>> smallest_change(array(1, 2, 3, 5, 4, 7, 9, 6))
// 4
// >>> smallest_change(array(1, 2, 3, 4, 3, 2, 2))
// 1
// >>> smallest_change(array(1, 2, 3, 2, 1))
// 0
function smallest_change($arr) {
","function smallest_change($arr) {
    $n = count($arr);
    $changes = 0;

    for ($i = 0; $i < $n / 2; $i++) {
        if ($arr[$i] !== $arr[$n - $i - 1]) {
            $changes++;
        }
    }

    return $changes;
}","function candidate(...$args) {
    return smallest_change(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3, 5, 4, 7, 9, 6)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 3, 2, 2)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 4, 2)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 4, 4, 2)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 2, 1)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 1, 1, 3)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 1)) !== 1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_74,vie_Latn,php,"<?php
//Ví dụ //nếu hai mảng có cùng số ký tự, trả về mảng đầu tiên.//tổng số ký tự trong tất cả các chuỗi của mảng ít hơn mảng khác.//Viết một hàm chấp nhận hai mảng chuỗi và trả về mảng có // >>> total_match(array(), array())
// array()
// >>> total_match(array(""hi"", ""admin""), array(""hI"", ""Hi""))
// array(""hI"", ""Hi"")
// >>> total_match(array(""hi"", ""admin""), array(""hi"", ""hi"", ""admin"", ""project""))
// array(""hi"", ""admin"")
// >>> total_match(array(""hi"", ""admin""), array(""hI"", ""hi"", ""hi""))
// array(""hI"", ""hi"", ""hi"")
// >>> total_match(array(""4""), array(""1"", ""2"", ""3"", ""4"", ""5""))
// array(""4"")
function total_match($lst1, $lst2) {
","function total_match($lst1, $lst2) {
    $countChars = function($arr) {
        $totalChars = 0;
        foreach ($arr as $str) {
            $totalChars += strlen($str);
        }
        return $totalChars;
    };

    $chars1 = $countChars($lst1);
    $chars2 = $countChars($lst2);

    if ($chars1 < $chars2) {
        return $lst1;
    } else {
        return $lst2;
    }
}","function candidate(...$args) {
    return total_match(...$args);
}

function test(): void {
    if (candidate(array(), array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(""hi"", ""admin""), array(""hi"", ""hi"")) !== array(""hi"", ""hi"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""hi"", ""admin""), array(""hi"", ""hi"", ""admin"", ""project"")) !== array(""hi"", ""admin"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""4""), array(""1"", ""2"", ""3"", ""4"", ""5"")) !== array(""4"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""hi"", ""admin""), array(""hI"", ""Hi"")) !== array(""hI"", ""Hi"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""hi"", ""admin""), array(""hI"", ""hi"", ""hi"")) !== array(""hI"", ""hi"", ""hi"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""hi"", ""admin""), array(""hI"", ""hi"", ""hii"")) !== array(""hi"", ""admin"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(), array(""this"")) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(""this""), array()) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_75,vie_Latn,php,"<?php
//Ví dụ: //Biết rằng (a) nhỏ hơn 100.//và sai nếu không.//Viết một hàm trả về true nếu số được đưa ra là phép nhân của 3 số nguyên tố // >>> is_multiply_prime(30)
// true
// 30 = 2 * 3 * 5
function is_multiply_prime($a) {
","function is_prime($num) {
    if ($num <= 1) return false;
    if ($num <= 3) return true;
    if ($num % 2 == 0 || $num % 3 == 0) return false;
    for ($i = 5; $i * $i <= $num; $i += 6) {
        if ($num % $i == 0 || $num % ($i + 2) == 0) return false;
    }
    return true;
}

function is_multiply_prime($a) {
    if ($a < 2) return false;
    $primes = [];
    for ($i = 2; $i < 100; $i++) {
        if (is_prime($i)) {
            $primes[] = $i;
        }
    }
    $count = count($primes);
    for ($i = 0; $i < $count; $i++) {
        for ($j = $i; $j < $count; $j++) {
            for ($k = $j; $k < $count; $k++) {
                if ($primes[$i] * $primes[$j] * $primes[$k] == $a) {
                    return true;
                }
            }
        }
    }
    return false;
}","function candidate(...$args) {
    return is_multiply_prime(...$args);
}

function test(): void {
    if (candidate(5) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(30) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(125) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(105) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(126) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(729) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(891) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(1001) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_76,vie_Latn,php,"<?php
//Ví dụ: //x là một bậc đơn của n nếu n**int=x //sức mạnh của n và false trong các trường hợp khác.//Nhiệm vụ của bạn là viết một hàm trả về true nếu một số x là một đơn giản // >>> is_simple_power(1, 4)
// true
// >>> is_simple_power(2, 2)
// true
// >>> is_simple_power(8, 2)
// true
// >>> is_simple_power(3, 2)
// false
// >>> is_simple_power(3, 1)
// false
// >>> is_simple_power(5, 3)
// false
function is_simple_power($x, $n) {
","function is_simple_power($x, $n) {
    if ($x < 1 || $n < 1) {
        return false;
    }

    $power = 1;
    while ($power < $x) {
        $power *= $n;
    }

    return $power === $x;
}","function candidate(...$args) {
    return is_simple_power(...$args);
}

function test(): void {
    if (candidate(16, 2) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(143214, 16) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(4, 2) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(9, 3) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(16, 4) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(24, 2) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(128, 4) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(12, 6) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(1, 1) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(1, 12) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_77,vie_Latn,php,"<?php
//Ví dụ: //Lưu ý: bạn có thể giả định đầu vào luôn luôn hợp lệ.//nếu số này là một khối của một số nguyên.//Viết một hàm lấy một số nguyên a và trả về true// >>> iscube(1)
// true
// >>> iscube(2)
// false
// >>> iscube(-1)
// true
// >>> iscube(64)
// true
// >>> iscube(0)
// true
// >>> iscube(180)
// false
function iscube($a) {
","function iscube($a) {
    $cubeRoot = round(pow(abs($a), 1/3));
    return $cubeRoot * $cubeRoot * $cubeRoot === abs($a);
}","function candidate(...$args) {
    return iscube(...$args);
}

function test(): void {
    if (candidate(1) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(2) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(-1) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(64) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(180) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(1000) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(0) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(1729) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_78,vie_Latn,php,"<?php
//Ví dụ: //và ký hiệu A, B, C, D, E, F luôn luôn là chữ cái lớn.//Lưu ý: bạn có thể giả định đầu vào luôn luôn là đúng hoặc chuỗi trống, //B (= thập phân 11), D (= thập phân 13). //Vì vậy, bạn phải xác định một số các chữ số sau đây: 2, 3, 5, 7, //Các số nguyên tố là 2, 3, 5, 7, 11, 13, 17,...//Các chữ số thập niên lục là 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.//lớn hơn 1 mà không phải là một sản phẩm của hai số tự nhiên nhỏ hơn).//số nguyên tố (số nguyên tố, hoặc một số nguyên tố, là một số tự nhiên //một số thập niên sáu như một chuỗi và đếm số lượng của thập niên sáu //Bạn đã được giao nhiệm vụ viết một hàm nhận .// >>> hex_key(""AB"")
// 1
// >>> hex_key(""1077E"")
// 2
// >>> hex_key(""ABED1A33"")
// 4
// >>> hex_key(""123456789ABCDEF0"")
// 6
// >>> hex_key(""2020"")
// 2
function hex_key($num) {
","function hex_key($num) {
    // Map of hexadecimal digits to their respective prime number interpretation
    $primeDigits = ['2', '3', '5', '7', 'B', 'D'];
    
    // Initialize count for prime numbers
    $primeCount = 0;

    // Iterate through each character in the hexadecimal string
    for ($i = 0; $i < strlen($num); $i++) {
        // Get the current character
        $char = $num[$i];

        // Check if the character is a prime hexadecimal digit
        if (in_array($char, $primeDigits)) {
            $primeCount++;
        }
    }

    // Return the count of prime hexadecimal digits
    return $primeCount;
}","function candidate(...$args) {
    return hex_key(...$args);
}

function test(): void {
    if (candidate(""AB"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""1077E"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""ABED1A33"") !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(""2020"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""123456789ABCDEF0"") !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(""112233445566778899AABBCCDDEEFF00"") !== 12) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_79,vie_Latn,php,"<?php
//Ví dụ: //Các ký tự bổ sung có ở đó để giúp với định dạng.//Sẽ có thêm một vài ký tự 'db' ở đầu và cuối chuỗi.//Mỗi ký tự trong chuỗi sẽ là ""0"" hoặc ""1"".//định dạng nhị phân. Chức năng sẽ trả về một chuỗi, với mỗi ký tự đại diện cho một nhị phân //Bạn sẽ được đưa ra một số dưới dạng thập phân và nhiệm vụ của bạn là chuyển đổi nó thành // >>> decimal_to_binary(15)
// ""db1111db""
// >>> decimal_to_binary(32)
// ""db100000db""
function decimal_to_binary($decimal) {
","function decimal_to_binary($decimal) {
    // Convert the decimal number to binary string
    $binary = decbin($decimal);
    
    // Add 'db' at the start and end of the binary string
    return 'db' . $binary . 'db';
}","function candidate(...$args) {
    return decimal_to_binary(...$args);
}

function test(): void {
    if (candidate(0) !== ""db0db"") { throw new Exception(""Test failed!""); }
    if (candidate(32) !== ""db100000db"") { throw new Exception(""Test failed!""); }
    if (candidate(103) !== ""db1100111db"") { throw new Exception(""Test failed!""); }
    if (candidate(15) !== ""db1111db"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_80,vie_Latn,php,"<?php
//Ví dụ: //Một chuỗi là happhp nếu chiều dài của nó ít nhất là 3 và mỗi 3 chữ cái liên tiếp là khác nhau //Nhiệm vụ của bạn là kiểm tra xem chuỗi có happhp hay không.//Bạn được cho một chuỗi s.// >>> is_happy(""a"")
// false
// >>> is_happy(""aa"")
// false
// >>> is_happy(""abcd"")
// true
// >>> is_happy(""aabb"")
// false
// >>> is_happy(""adb"")
// true
// >>> is_happy(""xyy"")
// false
function is_happy($s) {
","function is_happy($s) {
    $length = strlen($s);
    if ($length < 3) {
        return false;
    }

    for ($i = 0; $i <= $length - 3; $i++) {
        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {
            return false;
        }
    }

    return true;
}","function candidate(...$args) {
    return is_happy(...$args);
}

function test(): void {
    if (candidate(""a"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""aa"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""abcd"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""aabb"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""adb"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""xyy"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""iopaxpoi"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""iopaxioi"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_81,vie_Latn,php,"<?php
//Ví dụ: //0.0 E //> 0.0 D- //> 0,7 D //> 1,0 D+ //> 1.3 C- //> 1,7 C //> 2.0 C+ //> 2.3 B- //> 2,7 B //> 3.0 B+ //> 3.3 A- //> 3.7 A //4.0 A+ //GPA. Điểm chữ.//một hàm có thể xuất một mảng các cấp chữ cái bằng cách sử dụng bảng sau: //Cô ấy cho anh một loạt điểm trung bình cho một số học sinh và anh phải viết.//Vấn đề duy nhất là, cô ấy đã mất mã mà cô ấy sử dụng để đánh giá.//Giáo viên đã tạo ra thuật toán riêng của mình để đánh giá.//Đây là tuần cuối của học kỳ và giáo viên phải đưa ra điểm số.// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))
// array(""A+"", ""B"", ""C-"", ""C"", ""A-"")
function numerical_letter_grade($grades) {
","function numerical_letter_grade($grades) {
    $letterGrades = array();

    foreach ($grades as $gpa) {
        if ($gpa >= 4.0) {
            $letterGrades[] = ""A+"";
        } elseif ($gpa > 3.7) {
            $letterGrades[] = ""A"";
        } elseif ($gpa > 3.3) {
            $letterGrades[] = ""A-"";
        } elseif ($gpa > 3.0) {
            $letterGrades[] = ""B+"";
        } elseif ($gpa > 2.7) {
            $letterGrades[] = ""B"";
        } elseif ($gpa > 2.3) {
            $letterGrades[] = ""B-"";
        } elseif ($gpa > 2.0) {
            $letterGrades[] = ""C+"";
        } elseif ($gpa > 1.7) {
            $letterGrades[] = ""C"";
        } elseif ($gpa > 1.3) {
            $letterGrades[] = ""C-"";
        } elseif ($gpa > 1.0) {
            $letterGrades[] = ""D+"";
        } elseif ($gpa > 0.7) {
            $letterGrades[] = ""D"";
        } elseif ($gpa > 0.0) {
            $letterGrades[] = ""D-"";
        } else {
            $letterGrades[] = ""E"";
        }
    }

    return $letterGrades;
}","function candidate(...$args) {
    return numerical_letter_grade(...$args);
}

function test(): void {
    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(""A+"", ""B"", ""C-"", ""C"", ""A-"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.2)) !== array(""D+"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(0.5)) !== array(""D-"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(0.0)) !== array(""E"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 0.3, 1.5, 2.8, 3.3)) !== array(""D"", ""D-"", ""C-"", ""B"", ""B+"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(0.0, 0.7)) !== array(""E"", ""D-"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_82,vie_Latn,php,"<?php
//Ví dụ //length là một số nguyên tố hoặc sai nếu không //Viết một hàm lấy một chuỗi và trả về true nếu chuỗi // >>> prime_length(""Hello"")
// true
// >>> prime_length(""abcdcba"")
// true
// >>> prime_length(""kittens"")
// true
// >>> prime_length(""orange"")
// false
function prime_length($string) {
","function prime_length($string) {
    $length = strlen($string);

    if ($length < 2) {
        return false;
    }

    for ($i = 2; $i <= sqrt($length); $i++) {
        if ($length % $i === 0) {
            return false;
        }
    }

    return true;
}","function candidate(...$args) {
    return prime_length(...$args);
}

function test(): void {
    if (candidate(""Hello"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdcba"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""kittens"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""orange"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""wow"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""world"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""MadaM"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""Wow"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""HI"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""go"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""gogo"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""aaaaaaaaaaaaaaa"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""Madam"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""M"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""0"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_83,vie_Latn,php,"<?php
//Các số nguyên dương bắt đầu hoặc kết thúc bằng 1.//Cho một số nguyên dương n, trả về số lượng các số n chữ số function starts_one_ends($n) {
","function starts_one_ends($n) {
    if ($n <= 0) return 0;
    if ($n == 1) return 1;

    $total_count = 9 * pow(10, $n - 1); // Total count of n-digit numbers
    $non_one_start_count = 8 * pow(10, $n - 2); // n-digit numbers where the second digit is not zero
    
    // All numbers that start with 1:
    $start_with_one_count = pow(10, $n - 1);

    // All numbers that end with 1:
    $end_with_one_count = pow(10, $n - 1);

    // Numbers that both start and end with 1 are counted twice in the above summation
    // so we subtract those:
    $start_and_end_with_one_count = 1 * pow(10, $n - 2);
    
    $result = $start_with_one_count + $end_with_one_count - $start_and_end_with_one_count;    
    return $result;
}","function candidate(...$args) {
    return starts_one_ends(...$args);
}

function test(): void {
    if (candidate(1) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(2) !== 18) { throw new Exception(""Test failed!""); }
    if (candidate(3) !== 180) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== 1800) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== 18000) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_84,vie_Latn,php,"<?php
//Ví dụ //Cho một số nguyên dương N, trả về tổng số các chữ số của nó bằng nhị phân. // >>> solve(1000)
// ""1""
// >>> solve(150)
// ""110""
// >>> solve(147)
// ""1100""
// Variables:
// @N integer
// Constraints: 0 ≤ N ≤ 10000.
// Output:
// a string of binary number
function solve($N) {
","function solve($N) {
    $sum = array_sum(str_split($N));
    return decbin($sum);
}","function candidate(...$args) {
    return solve(...$args);
}

function test(): void {
    if (candidate(1000) !== ""1"") { throw new Exception(""Test failed!""); }
    if (candidate(150) !== ""110"") { throw new Exception(""Test failed!""); }
    if (candidate(147) !== ""1100"") { throw new Exception(""Test failed!""); }
    if (candidate(333) !== ""1001"") { throw new Exception(""Test failed!""); }
    if (candidate(963) !== ""10010"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_85,vie_Latn,php,"<?php
//Ví dụ: //Cho một mảng không trống của số nguyên lst. thêm các yếu tố thậm chí mà là ở chỉ số lẻ .. // >>> add(array(4, 2, 6, 7))
// 2
function add($lst) {
","function add($lst) {
    $sum = 0;
    for ($i = 1; $i < count($lst); $i += 2) {
        if ($lst[$i] % 2 == 0) {
            $sum += $lst[$i];
        }
    }
    return $sum;
}","function candidate(...$args) {
    return add(...$args);
}

function test(): void {
    if (candidate(array(4, 88)) !== 88) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 5, 6, 7, 2, 122)) !== 122) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 0, 6, 7)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 4, 6, 8)) !== 12) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_86,vie_Latn,php,"<?php
//Ví dụ: //Lưu ý: Bạn nên giữ trật tự của từ và khoảng trống trong câu.//thứ tự tăng dựa trên giá trị ascii.//được thay thế bằng một từ mới trong đó tất cả các ký tự được sắp xếp trong //Phiên bản được sắp xếp của chuỗi, là một chuỗi trong đó tất cả các từ (được tách bằng không gian) //Viết một hàm lấy một chuỗi và trả về một phiên bản được sắp xếp của nó. // >>> anti_shuffle(""Hi"")
// ""Hi""
// >>> anti_shuffle(""hello"")
// ""ehllo""
// >>> anti_shuffle(""Hello World!!!"")
// ""Hello !!!Wdlor""
function anti_shuffle($s) {
","function anti_shuffle($s) {
    // Split the string by space to preserve words and spaces
    $words = preg_split('/(\s+)/', $s, -1, PREG_SPLIT_DELIM_CAPTURE);

    // Array to hold ordered words
    $ordered_words = [];

    // Iterate through each word or space in the array
    foreach ($words as $word) {
        // If it's a word (not only spaces)
        if (trim($word) !== '') {
            // Convert the word into an array of characters, sort it, and rejoin
            $chars = str_split($word);
            sort($chars);
            $ordered_words[] = implode('', $chars);
        } else {
            // If it's a space or multiple spaces, preserve them as they are
            $ordered_words[] = $word;
        }
    }

    // Join the array back into a string and return
    return implode('', $ordered_words);
}","function candidate(...$args) {
    return anti_shuffle(...$args);
}

function test(): void {
    if (candidate(""Hi"") !== ""Hi"") { throw new Exception(""Test failed!""); }
    if (candidate(""hello"") !== ""ehllo"") { throw new Exception(""Test failed!""); }
    if (candidate(""number"") !== ""bemnru"") { throw new Exception(""Test failed!""); }
    if (candidate(""abcd"") !== ""abcd"") { throw new Exception(""Test failed!""); }
    if (candidate(""Hello World!!!"") !== ""Hello !!!Wdlor"") { throw new Exception(""Test failed!""); }
    if (candidate("""") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""Hi. My name is Mister Robot. How are you?"") !== "".Hi My aemn is Meirst .Rboot How aer ?ouy"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_87,vie_Latn,php,"<?php
//Ví dụ: //Ngoài ra, sắp xếp tọa độ của hàng theo cột theo thứ tự giảm dần.//Xếp các tọa độ ban đầu theo hàng theo thứ tự tăng dần.//mỗi mảng là một tọa độ - (dòng, cột), bắt đầu với 0. //và trả về mảng của mảng, [(x1, y1), (x2, y2) ...] như vậy mà //Cho lst, và số nguyên x, tìm số nguyên x trong mảng, //mỗi hàng có thể chứa một số lượng cột khác nhau.//mà là tương tự như ma trận, tuy nhiên, không giống như ma trận, //Bạn được cung cấp một dữ liệu 2 chiều, như một mảng lồng, // >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)
// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))
// >>> get_row(array(), 1)
// array()
// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)
// array(array(2, 2))
function get_row($lst, $x) {
","function get_row($lst, $x) {
    $coordinates = array();
    // Iterate over each row with its index.
    foreach ($lst as $row_idx => $row) {
        $row_coordinates = array();
        // Iterate over each element in the row with its index.
        foreach ($row as $col_idx => $value) {
            if ($value === $x) {
                // Add the coordinate as a pair (row index, column index).
                $row_coordinates[] = array($row_idx, $col_idx);
            }
        }
        // Sort the coordinates of this row by columns in descending order.
        usort($row_coordinates, function($a, $b) {
            return $b[1] - $a[1];
        });
        // Merge sorted row coordinates into the main coordinates list.
        $coordinates = array_merge($coordinates, $row_coordinates);
    }
    // Return the sorted coordinates.
    return $coordinates;
}","function candidate(...$args) {
    return get_row(...$args);
}

function test(): void {
    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(""Test failed!""); }
    if (candidate(array(), 1) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_88,vie_Latn,php,"<?php
//Ví dụ: //* không thay đổi mảng đã cho. //Lưu ý://hoặc sắp xếp theo thứ tự giảm dần nếu tổng số ((giá trị chỉ số đầu tiên, giá trị chỉ số cuối cùng) là chẵn. //bạn sẽ sắp xếp mảng được đưa ra theo thứ tự tăng dần nếu tổng số ((giá trị chỉ số đầu tiên, giá trị chỉ số cuối cùng) là lẻ, //Cho một mảng các số nguyên không âm, trả về một cophp của mảng được cho sau khi sắp xếp, // >>> sort_array(array())
// array()
// >>> sort_array(array(5))
// array(5)
// >>> sort_array(array(2, 4, 3, 0, 1, 5))
// array(0, 1, 2, 3, 4, 5)
// >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))
// array(6, 5, 4, 3, 2, 1, 0)
function sort_array($array) {
","function sort_array($array) {
    if (empty($array)) {
        return $array;
    }

    $firstIndexValue = $array[0];
    $lastIndexValue = $array[count($array) - 1];
    $sum = $firstIndexValue + $lastIndexValue;

    $sortedArray = $array;
    if ($sum % 2 === 0) {
        // Sort in descending order
        rsort($sortedArray);
    } else {
        // Sort in ascending order
        sort($sortedArray);
    }

    return $sortedArray;
}","function candidate(...$args) {
    return sort_array(...$args);
}

function test(): void {
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(5)) !== array(5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 1)) !== array(1, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(15, 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(""Test failed!""); }
    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_89,vie_Latn,php,"<?php
//Ví dụ: //chuyển xuống bằng hai nhân với hai vị trí.//Bảng chữ cái nên được xoay theo cách mà các chữ cái //trả về một chuỗi được mã hóa với chữ cái được xoay.//Tạo một hàm mã hóa dùng chuỗi như một đối số và // >>> encrypt(""hi"")
// ""lm""
// >>> encrypt(""asdfghjkl"")
// ""ewhjklnop""
// >>> encrypt(""gf"")
// ""kj""
// >>> encrypt(""et"")
// ""ix""
function encrypt($s) {
","function encrypt($s) {
    $result = '';
    $shift = 4; // 2 multiplied by 2
    
    for ($i = 0; $i < strlen($s); $i++) {
        $char = $s[$i];
        
        if (ctype_alpha($char)) {
            $ordStart = ctype_lower($char) ? ord('a') : ord('A');
            $char = chr($ordStart + (ord($char) - $ordStart + $shift) % 26);
        }
        
        $result .= $char;
    }
    
    return $result;
}","function candidate(...$args) {
    return encrypt(...$args);
}

function test(): void {
    if (candidate(""hi"") !== ""lm"") { throw new Exception(""Test failed!""); }
    if (candidate(""asdfghjkl"") !== ""ewhjklnop"") { throw new Exception(""Test failed!""); }
    if (candidate(""gf"") !== ""kj"") { throw new Exception(""Test failed!""); }
    if (candidate(""et"") !== ""ix"") { throw new Exception(""Test failed!""); }
    if (candidate(""faewfawefaewg"") !== ""jeiajeaijeiak"") { throw new Exception(""Test failed!""); }
    if (candidate(""hellomyfriend"") !== ""lippsqcjvmirh"") { throw new Exception(""Test failed!""); }
    if (candidate(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"") !== ""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"") { throw new Exception(""Test failed!""); }
    if (candidate(""a"") !== ""e"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_90,vie_Latn,php,"<?php
//Trả về null nếu không có yếu tố như vậy. //Viết hàm next_smallest (thì là) trả về phần tử nhỏ thứ 2 của mảng. //Bạn được cung cấp một mảng các số nguyên.// >>> next_smallest(array(1, 2, 3, 4, 5))
// 2
// >>> next_smallest(array(5, 1, 4, 3, 2))
// 2
// >>> next_smallest(array())
// null
// >>> next_smallest(array(1, 1))
// null
function next_smallest($lst) {
","function next_smallest($lst) {
    // Remove duplicate elements
    $unique_lst = array_unique($lst);

    // Sort the array
    sort($unique_lst);

    // Check if there are at least two elements in the sorted array
    if (count($unique_lst) < 2) {
        return null;
    }

    // Return the second smallest element
    return $unique_lst[1];
}","function candidate(...$args) {
    return next_smallest(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3, 4, 5)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 1, 4, 3, 2)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== null) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1)) !== null) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1, 1, 1, 0)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1)) !== null) { throw new Exception(""Test failed!""); }
    if (candidate(array(-35, 34, 12, -45)) !== -35) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_91,vie_Latn,php,"<?php
//Ví dụ: //Các câu được phân chia bởi """", ""?"" hoặc ""! "".//Một câu chán là một câu bắt đầu bằng từ ""I"".//Bạn sẽ được cho một chuỗi từ, và nhiệm vụ của bạn là đếm số.// >>> is_bored(""Hello world"")
// 0
// >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
// 1
function is_bored($S) {
","function is_bored($S) {
    // Split the string into sentences using regex
    $sentences = preg_split('/[.!?]\s*/', trim($S));

    $boredom_count = 0;
    foreach ($sentences as $sentence) {
        // Check if the trimmed sentence starts with ""I""
        if (trim($sentence) !== '' && strpos(trim($sentence), 'I') === 0) {
            $boredom_count++;
        }
    }

    return $boredom_count;
}","function candidate(...$args) {
    return is_bored(...$args);
}

function test(): void {
    if (candidate(""Hello world"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""Is the sky blue?"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""I love It !"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""bIt"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""I feel good today. I will be productive. will kill It"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""You and I are going for a walk"") !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_92,vie_Latn,php,"<?php
//Ví dụ //Trả về false trong mọi trường hợp khác.//Trả về true nếu một trong các số bằng tổng của hai số khác, và tất cả các số là số nguyên.//Tạo một hàm có 3 số.// >>> any_int(5, 2, 7)
// true
// >>> any_int(3, 2, 2)
// false
// >>> any_int(3, -2, 1)
// true
// >>> any_int(3.6, -2.2, 2)
// false
function any_int($x, $y, $z) {
","function any_int($x, $y, $z) {
    if (is_int($x) && is_int($y) && is_int($z)) {
        return ($x === $y + $z) || ($y === $x + $z) || ($z === $x + $y);
    }
    return false;
}","function candidate(...$args) {
    return any_int(...$args);
}

function test(): void {
    if (candidate(2, 3, 1) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(2.5, 2, 3) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(2, 6, 2) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(4, 2, 2) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(-4, 6, 2) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(2, 1, 1) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(3, 4, 7) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(3.0, 4, 7) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_93,vie_Latn,php,"<?php
//Ví dụ: //Chỉ giả định chữ cái.//Một nguyên âm trong bảng chữ cái tiếng Anh.//thông điệp với chữ cái xuất hiện 2 vị trí trước đó //cách mà nó swaps trường hợp của tất cả các chữ cái, thay thế tất cả các nguyên âm trong //Viết một hàm mà có một thông điệp, và mã hóa trong một như vậy // >>> encode(""test"")
// ""TGST""
// >>> encode(""This is a message"")
// ""tHKS KS C MGSSCGG""
function encode($message) {
","function encode($message) {
    $encodedMessage = '';
    $vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
    $replacement = ['c', 'g', 'k', 'q', 'w', 'C', 'G', 'K', 'Q', 'W'];

    for ($i = 0; $i < strlen($message); $i++) {
        $char = $message[$i];
        if (in_array($char, $vowels)) {
            // Find the index of the vowel and replace it
            $index = array_search($char, $vowels);
            $encodedMessage .= $replacement[$index];
        } else {
            // Swap case for consonants
            $encodedMessage .= ctype_upper($char) ? strtolower($char) : strtoupper($char);
        }
    }

    return $encodedMessage;
}","function candidate(...$args) {
    return encode(...$args);
}

function test(): void {
    if (candidate(""TEST"") !== ""tgst"") { throw new Exception(""Test failed!""); }
    if (candidate(""Mudasir"") !== ""mWDCSKR"") { throw new Exception(""Test failed!""); }
    if (candidate(""YES"") !== ""ygs"") { throw new Exception(""Test failed!""); }
    if (candidate(""This is a message"") !== ""tHKS KS C MGSSCGG"") { throw new Exception(""Test failed!""); }
    if (candidate(""I DoNt KnOw WhAt tO WrItE"") !== ""k dQnT kNqW wHcT Tq wRkTg"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_94,vie_Latn,php,"<?php
//Ví dụ: //Bạn cần tìm giá trị nguyên tố lớn nhất và trả về tổng số chữ số của nó.//Bạn được cung cấp một mảng các số nguyên.// >>> skjkasdkd(array(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))
// 10
// >>> skjkasdkd(array(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))
// 25
// >>> skjkasdkd(array(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))
// 13
// >>> skjkasdkd(array(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))
// 11
// >>> skjkasdkd(array(0, 81, 12, 3, 1, 21))
// 3
// >>> skjkasdkd(array(0, 8, 1, 2, 1, 7))
// 7
function skjkasdkd($lst) {
","function skjkasdkd($lst) {
    // Helper function to check prime status
    function is_prime($num) {
        if ($num <= 1) return false;
        if ($num <= 3) return true;
        if ($num % 2 == 0 || $num % 3 == 0) return false;
        for ($i = 5; $i * $i <= $num; $i += 6) {
            if ($num % $i == 0 || $num % ($i + 2) == 0) return false;
        }
        return true;
    }
    
    $largest_prime = -1;
    
    // Find the largest prime in the list
    foreach ($lst as $num) {
        if (is_prime($num) && $num > $largest_prime) {
            $largest_prime = $num;
        }
    }
    
    if ($largest_prime == -1) return 0;
    
    // Sum the digits of the largest prime
    $sum_of_digits = 0;
    while ($largest_prime > 0) {
        $sum_of_digits += $largest_prime % 10;
        $largest_prime = intdiv($largest_prime, 10);
    }
    
    return $sum_of_digits;
}","function candidate(...$args) {
    return skjkasdkd(...$args);
}

function test(): void {
    if (candidate(array(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) !== 10) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) !== 25) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) !== 13) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) !== 11) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 81, 12, 3, 1, 21)) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 8, 1, 2, 1, 7)) !== 7) { throw new Exception(""Test failed!""); }
    if (candidate(array(8191)) !== 19) { throw new Exception(""Test failed!""); }
    if (candidate(array(8191, 123456, 127, 7)) !== 19) { throw new Exception(""Test failed!""); }
    if (candidate(array(127, 97, 8192)) !== 10) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_95,vie_Latn,php,"<?php
//Ví dụ: //Hàm sẽ trả về false nếu mảng được đưa ra là trống. //case hoặc tất cả các khóa là chuỗi trong chữ cái lớn, nếu không trả về false. //Cho một mảng, trả về đúng nếu tất cả các phím là chuỗi trong lower // >>> check_dict_case(array(""a"" => ""apple"", ""b"" => ""banana""))
// true
// >>> check_dict_case(array(""a"" => ""apple"", ""A"" => ""banana"", ""B"" => ""banana""))
// false
// >>> check_dict_case(array(""a"" => ""apple"", 8 => ""banana"", ""a"" => ""apple""))
// false
// >>> check_dict_case(array(""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""))
// false
// >>> check_dict_case(array(""STATE"" => ""NC"", ""ZIP"" => ""12345""))
// true
function check_dict_case($dict) {
","function check_dict_case($dict) {
    if (empty($dict)) {
        return false;
    }

    $allLowerCase = true;
    $allUpperCase = true;

    foreach ($dict as $key => $value) {
        if (!is_string($key)) {
            return false;
        }

        if (ctype_lower($key)) {
            $allUpperCase = false;
        } else if (ctype_upper($key)) {
            $allLowerCase = false;
        } else {
            return false;
        }
    }

    return $allLowerCase || $allUpperCase;
}","function candidate(...$args) {
    return check_dict_case(...$args);
}

function test(): void {
    if (candidate(array(""p"" => ""pineapple"", ""b"" => ""banana"")) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(""p"" => ""pineapple"", ""A"" => ""banana"", ""B"" => ""banana"")) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(""p"" => ""pineapple"", ""5"" => ""banana"", ""a"" => ""apple"")) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston"")) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(""STATE"" => ""NC"", ""ZIP"" => ""12345"")) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(""fruit"" => ""Orange"", ""taste"" => ""Sweet"")) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_96,vie_Latn,php,"<?php
//Ví dụ: //là số nguyên và nhỏ hơn n.//Thực hiện một hàm lấy một số nguyên không âm và trả về mảng của n đầu tiên // >>> count_up_to(5)
// array(2, 3)
// >>> count_up_to(11)
// array(2, 3, 5, 7)
// >>> count_up_to(0)
// array()
// >>> count_up_to(20)
// array(2, 3, 5, 7, 11, 13, 17, 19)
// >>> count_up_to(1)
// array()
// >>> count_up_to(18)
// array(2, 3, 5, 7, 11, 13, 17)
function count_up_to($n) {
","function count_up_to($n) {
    if ($n <= 2) {
        return array();
    }

    $primes = array();
    for ($i = 2; $i < $n; $i++) {
        if (is_prime($i)) {
            $primes[] = $i;
        }
    }

    return $primes;
}

function is_prime($num) {
    if ($num <= 1) {
        return false;
    }
    if ($num <= 3) {
        return true;
    }
    if ($num % 2 == 0 || $num % 3 == 0) {
        return false;
    }
    for ($i = 5; $i * $i <= $num; $i += 6) {
        if ($num % $i == 0 || $num % ($i + 2) == 0) {
            return false;
        }
    }
    return true;
}","function candidate(...$args) {
    return count_up_to(...$args);
}

function test(): void {
    if (candidate(5) !== array(2, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(""Test failed!""); }
    if (candidate(0) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(""Test failed!""); }
    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(""Test failed!""); }
    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_97,vie_Latn,php,"<?php
//Ví dụ: //Giả sử đầu vào luôn luôn hợp lệ.//là sản phẩm của các chữ số đơn vị của chúng.//Hoàn thành hàm lấy hai số nguyên và trả về // >>> multiply(148, 412)
// 16
// >>> multiply(19, 28)
// 72
// >>> multiply(2020, 1851)
// 0
// >>> multiply(14, -15)
// 20
function multiply($a, $b) {
","function multiply($a, $b) {
    $unitDigitA = abs($a) % 10;
    $unitDigitB = abs($b) % 10;
    return $unitDigitA * $unitDigitB;
}","function candidate(...$args) {
    return multiply(...$args);
}

function test(): void {
    if (candidate(148, 412) !== 16) { throw new Exception(""Test failed!""); }
    if (candidate(19, 28) !== 72) { throw new Exception(""Test failed!""); }
    if (candidate(2020, 1851) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(14, -15) !== 20) { throw new Exception(""Test failed!""); }
    if (candidate(76, 67) !== 42) { throw new Exception(""Test failed!""); }
    if (candidate(17, 27) !== 49) { throw new Exception(""Test failed!""); }
    if (candidate(0, 1) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(0, 0) !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_98,vie_Latn,php,"<?php
//Ví dụ: //Với một chuỗi s, đếm số nguyên âm lớn trong chỉ số chẵn.// >>> count_upper(""aBCdEf"")
// 1
// >>> count_upper(""abcdefg"")
// 0
// >>> count_upper(""dBBE"")
// 0
function count_upper($s) {
","function count_upper($s) {
    $count = 0;
    $vowels = ['A', 'E', 'I', 'O', 'U'];

    for ($i = 0; $i < strlen($s); $i += 2) {
        if (in_array($s[$i], $vowels)) {
            $count++;
        }
    }

    return $count;
}","function candidate(...$args) {
    return count_upper(...$args);
}

function test(): void {
    if (candidate(""aBCdEf"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdefg"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""dBBE"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""B"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""U"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""EEEE"") !== 2) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_99,vie_Latn,php,"<?php
//Ví dụ //từ hai số nguyên, làm tròn nó đi từ không.//và trả về số nguyên gần nhất với nó. Nếu số là bằng nhau//Tạo hàm lấy giá trị (string) đại diện cho một số // >>> closest_integer(""10"")
// 10
// >>> closest_integer(""15.3"")
// 15
// Note:
// Rounding away from zero means that if the given number is equidistant
// from two integers, the one you should return is the one that is the
// farthest from zero. For example closest_integer(""14.5"") should
// return 15 and closest_integer(""-14.5"") should return -15.
function closest_integer($value) {
","function closest_integer($value) {
    $number = floatval($value);
    if ($number > 0) {
        return floor($number + 0.5);
    } else {
        return ceil($number - 0.5);
    }
}","function candidate(...$args) {
    return closest_integer(...$args);
}

function test(): void {
    if (candidate(""10"") !== 10) { throw new Exception(""Test failed!""); }
    if (candidate(""14.5"") !== 15) { throw new Exception(""Test failed!""); }
    if (candidate(""-15.5"") !== -16) { throw new Exception(""Test failed!""); }
    if (candidate(""15.3"") !== 15) { throw new Exception(""Test failed!""); }
    if (candidate(""0"") !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_100,vie_Latn,php,"<?php
//Ví dụ: //i là số lượng đá trong cấp độ (i + 1).//Trả về số lượng đá trong mỗi cấp trong mảng, trong đó phần tử tại chỉ mục //- số chẵn tiếp theo nếu n là số chẵn.//- số lẻ tiếp theo nếu n là số lẻ. //Số lượng đá ở tầng tiếp theo là://Cấp đầu tiên có n viên đá.//Cho một số nguyên dương n, bạn phải làm một đống n cấp đá.// >>> make_a_pile(3)
// array(3, 5, 7)
function make_a_pile($n) {
","function make_a_pile($n) {
    $pile = [];
    $currentStones = $n;
    
    for ($i = 0; $i < $n; $i++) {
        $pile[] = $currentStones;
        if ($n % 2 == 0) {
            $currentStones += 2;
        } else {
            $currentStones += 2;
        }
    }
    
    return $pile;
}","function candidate(...$args) {
    return make_a_pile(...$args);
}

function test(): void {
    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_101,vie_Latn,php,"<?php
//Ví dụ: //để chia chuỗi thành các từ và trả về một mảng từ.//Bạn sẽ được cung cấp một chuỗi từ được tách ra bởi dấu phẩy hoặc khoảng trống.// >>> words_string(""Hi, my name is John"")
// array(""Hi"", ""my"", ""name"", ""is"", ""John"")
// >>> words_string(""One, two, three, four, five, six"")
// array(""One"", ""two"", ""three"", ""four"", ""five"", ""six"")
function words_string($s) {
","function words_string($s) {
    // Remove any commas and split by spaces
    return preg_split('/[\s,]+/', $s, -1, PREG_SPLIT_NO_EMPTY);
}","function candidate(...$args) {
    return words_string(...$args);
}

function test(): void {
    if (candidate(""Hi, my name is John"") !== array(""Hi"", ""my"", ""name"", ""is"", ""John"")) { throw new Exception(""Test failed!""); }
    if (candidate(""One, two, three, four, five, six"") !== array(""One"", ""two"", ""three"", ""four"", ""five"", ""six"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Hi, my name"") !== array(""Hi"", ""my"", ""name"")) { throw new Exception(""Test failed!""); }
    if (candidate(""One,, two, three, four, five, six,"") !== array(""One"", ""two"", ""three"", ""four"", ""five"", ""six"")) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""ahmed     , gamal"") !== array(""ahmed"", ""gamal"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_102,vie_Latn,php,"<?php
//Ví dụ: //không có số như vậy, sau đó các chức năng nên trả về -1.//số nguyên chẵn lớn nhất nằm trong phạm vi [x, y] bao gồm. Nếu //Hàm này lấy hai số dương x và y và trả về // >>> choose_num(12, 15)
// 14
// >>> choose_num(13, 12)
// -1
function choose_num($x, $y) {
","function choose_num($x, $y) {
    if ($x > $y) {
        return -1;
    }
    
    // Start from the larger number
    $maxNumber = max($x, $y);

    // Check for the largest even number
    if ($maxNumber % 2 == 1) {
        $maxNumber--;
    }

    // Ensure it's within the range
    if ($maxNumber >= min($x, $y)) {
        return $maxNumber;
    }

    return -1;
}","function candidate(...$args) {
    return choose_num(...$args);
}

function test(): void {
    if (candidate(12, 15) !== 14) { throw new Exception(""Test failed!""); }
    if (candidate(13, 12) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(33, 12354) !== 12354) { throw new Exception(""Test failed!""); }
    if (candidate(5234, 5233) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(6, 29) !== 28) { throw new Exception(""Test failed!""); }
    if (candidate(27, 10) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(7, 7) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(546, 546) !== 546) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_103,vie_Latn,php,"<?php
//Ví dụ: //Nếu n lớn hơn m, trả về -1.//Xấp tròn câu trả lời đến số nguyên gần nhất và chuyển đổi nó thành số nhị phân.//trung bình của các số nguyên từ n đến m (bao gồm n và m).//Bạn được cho hai số nguyên dương n và m, và nhiệm vụ của bạn là tính toán // >>> rounded_avg(1, 5)
// ""0b11""
// >>> rounded_avg(7, 5)
// -1
// >>> rounded_avg(10, 20)
// ""0b1111""
// >>> rounded_avg(20, 33)
// ""0b11010""
function rounded_avg($n, $m) {
","function rounded_avg($n, $m) {
    if ($n > $m) {
        return -1;
    }
    
    $total_sum = 0;
    $count = 0;
    
    for ($i = $n; $i <= $m; $i++) {
        $total_sum += $i;
        $count++;
    }
    
    $average = $total_sum / $count;
    $rounded_average = round($average);
    
    return ""0b"" . decbin($rounded_average);
}","function candidate(...$args) {
    return rounded_avg(...$args);
}

function test(): void {
    if (candidate(1, 5) !== ""0b11"") { throw new Exception(""Test failed!""); }
    if (candidate(7, 13) !== ""0b1010"") { throw new Exception(""Test failed!""); }
    if (candidate(964, 977) !== ""0b1111001010"") { throw new Exception(""Test failed!""); }
    if (candidate(996, 997) !== ""0b1111100100"") { throw new Exception(""Test failed!""); }
    if (candidate(560, 851) !== ""0b1011000010"") { throw new Exception(""Test failed!""); }
    if (candidate(185, 546) !== ""0b101101110"") { throw new Exception(""Test failed!""); }
    if (candidate(362, 496) !== ""0b110101101"") { throw new Exception(""Test failed!""); }
    if (candidate(350, 902) !== ""0b1001110010"") { throw new Exception(""Test failed!""); }
    if (candidate(197, 233) !== ""0b11010111"") { throw new Exception(""Test failed!""); }
    if (candidate(7, 5) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(5, 1) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(5, 5) !== ""0b101"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_104,vie_Latn,php,"<?php
//Ví dụ: //Lưu ý: Mảng trả về nên được sắp xếp theo thứ tự tăng dần.//các phần tử không có bất kỳ chữ số chẵn nào.//Cho một mảng các số nguyên dương x. trả về một mảng được sắp xếp của tất cả // >>> unique_digits(array(15, 33, 1422, 1))
// array(1, 15, 33)
// >>> unique_digits(array(152, 323, 1422, 10))
// array()
function unique_digits($x) {
","function unique_digits($x) {
    $result = array();

    foreach ($x as $number) {
        $digits = str_split($number);
        $hasEvenDigit = false;

        foreach ($digits as $digit) {
            if ((int)$digit % 2 == 0) {
                $hasEvenDigit = true;
                break;
            }
        }

        if (!$hasEvenDigit) {
            $result[] = $number;
        }
    }

    sort($result);
    return $result;
}","function candidate(...$args) {
    return unique_digits(...$args);
}

function test(): void {
    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(""Test failed!""); }
    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new Exception(""Test failed!""); }
    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_105,vie_Latn,php,"<?php
//Ví dụ: //Một, hai, ba, bốn, năm, sáu, bảy, tám, chín.//đảo ngược mảng kết quả, và sau đó thay thế mỗi chữ số bằng tên tương ứng của nó từ //Cho một mảng của số nguyên, sắp xếp các số nguyên là giữa 1 và 9 bao gồm, // >>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))
// array(""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One"")
// If the array is empty, return an empty array:
// >>> by_length(array())
// array()
// If the array has any strange number ignore it:
// >>> by_length(array(1, -1, 55))
// array(""One"")
function by_length($arr) {
","function by_length($arr) {
    // Filter the array to include only numbers between 1 and 9
    $filtered = array_filter($arr, function($num) {
        return $num >= 1 && $num <= 9;
    });

    // Sort the filtered array
    sort($filtered);

    // Reverse the sorted array
    $reversed = array_reverse($filtered);

    // Mapping numbers to their corresponding names
    $numberNames = [
        1 => ""One"",
        2 => ""Two"",
        3 => ""Three"",
        4 => ""Four"",
        5 => ""Five"",
        6 => ""Six"",
        7 => ""Seven"",
        8 => ""Eight"",
        9 => ""Nine""
    ];

    // Replace numbers with their corresponding names
    return array_map(function($num) use ($numberNames) {
        return $numberNames[$num];
    }, $reversed);
}","function candidate(...$args) {
    return by_length(...$args);
}

function test(): void {
    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One"")) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -1, 55)) !== array(""One"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -1, 3, 2)) !== array(""Three"", ""Two"", ""One"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(9, 4, 8)) !== array(""Nine"", ""Eight"", ""Four"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_106,vie_Latn,php,"<?php
//Ví dụ: //hàm số của i là nhân các số từ 1 đến i (1 * 2 * ... * i).//i bắt đầu từ 1.//hoặc tổng các số từ 1 đến i. //và trả về một mảng có kích thước n, như vậy giá trị của phần tử tại chỉ số i là hàm số của i nếu i là thậm chí //Thực hiện hàm f mà có n là một tham số, // >>> f(5)
// array(1, 2, 6, 24, 15)
function f($n) {
","function f($n) {
    $result = [];
    for ($i = 1; $i <= $n; $i++) {
        if ($i % 2 == 0) {
            $result[] = factorial($i);
        } else {
            $result[] = sum($i);
        }
    }
    return $result;
}

function factorial($num) {
    if ($num == 0) {
        return 1;
    }
    $fact = 1;
    for ($j = 1; $j <= $num; $j++) {
        $fact *= $j;
    }
    return $fact;
}

function sum($num) {
    return ($num * ($num + 1)) / 2;
}","function candidate(...$args) {
    return f(...$args);
}

function test(): void {
    if (candidate(5) !== array(1, 2, 6, 24, 15)) { throw new Exception(""Test failed!""); }
    if (candidate(7) !== array(1, 2, 6, 24, 15, 720, 28)) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== array(1)) { throw new Exception(""Test failed!""); }
    if (candidate(3) !== array(1, 2, 6)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_107,vie_Latn,php,"<?php
//Ví dụ 1: //palindrom số nguyên nằm trong phạm vi ((1, n), bao gồm. //Cho một số nguyên dương n, trả về một mảng có số chẵn và lẻ // >>> even_odd_palindrome(3)
// array(1, 2)
// Explanation:
// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
// Example 2:
// >>> even_odd_palindrome(12)
// array(4, 6)
// Explanation:
// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
// Note:
// 1. 1 <= n <= 10^3
// 2. returned array has the number of even and odd integer palindromes respectively.
function even_odd_palindrome($n) {
","function even_odd_palindrome($n) {
    $even_count = 0;
    $odd_count = 0;
    
    for ($i = 1; $i <= $n; $i++) {
        if (strval($i) === strrev(strval($i))) {
            if ($i % 2 === 0) {
                $even_count++;
            } else {
                $odd_count++;
            }
        }
    }
    
    return array($even_count, $odd_count);
}","function candidate(...$args) {
    return even_odd_palindrome(...$args);
}

function test(): void {
    if (candidate(123) !== array(8, 13)) { throw new Exception(""Test failed!""); }
    if (candidate(12) !== array(4, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(3) !== array(1, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(63) !== array(6, 8)) { throw new Exception(""Test failed!""); }
    if (candidate(25) !== array(5, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(19) !== array(4, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(9) !== array(4, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== array(0, 1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_108,vie_Latn,php,"<?php
//Ví dụ: -123 có ký số -1, 2 và 3.//Nếu một số là âm, thì chữ số đầu tiên được ký của nó sẽ là âm: //số các phần tử có tổng số chữ số > 0. //Viết hàm count_nums mà lấy mảng các số nguyên và trả về // >>> count_nums(array())
// 0
// >>> count_nums(array(-1, 11, -11))
// 1
// >>> count_nums(array(1, 1, 2))
// 3
function count_nums($arr) {
","function count_nums($arr) {
    $count = 0;
    foreach ($arr as $num) {
        $digits = str_split($num);
        $sum = array_sum(array_map('intval', $digits));
        if ($sum > 0) {
            $count++;
        }
    }
    return $count;
}","function candidate(...$args) {
    return count_nums(...$args);
}

function test(): void {
    if (candidate(array()) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 1)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== 1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_109,vie_Latn,php,"<?php
//Ví dụ: //Lưu ý: Mảng được đưa ra được đảm bảo có các yếu tố duy nhất.//Nếu mảng được đưa ra là trống thì trả về true. //then return true hoặc return false.//Nếu có thể lấy mảng được sắp xếp bằng cách thực hiện các hoạt động trên //vị trí bắt đầu trong mảng, tức là chỉ số số 0.//Vị trí trong đúng hướng. Các yếu tố cuối cùng của mảng sẽ được di chuyển đến //Một thao tác di chuyển sang phải có nghĩa là di chuyển tất cả các phần tử của mảng bằng một.//Bạn được phép thực hiện chuyển đổi bên phải bất kỳ số lần nào.//hoạt động sau đây trên mảng được đưa ra: //có thể sắp xếp mảng theo thứ tự không giảm bằng cách thực hiện //số trong mảng sẽ được sắp xếp ngẫu nhiên. nhiệm vụ của bạn là để xác định nếu //Chúng ta có một mảng 'arr' của N số nguyên arr[1], arr[2], ..., arr[N].// >>> move_one_ball(array(3, 4, 5, 1, 2))
// true
// Explanation: By performin 2 right shift operations, non-decreasing order can
// be achieved for the given array.
// >>> move_one_ball(array(3, 5, 4, 1, 2))
// false
// Explanation:It is not possible to get non-decreasing order for the given
// array by performing any number of right shift operations.
function move_one_ball($arr) {
","function move_one_ball($arr) {
    $n = count($arr);
    if ($n <= 1) return true;

    $shiftCount = 0;

    // Count breaks in the sorted order
    for ($i = 0; $i < $n; $i++) {
        if ($arr[$i] > $arr[($i + 1) % $n]) {
            $shiftCount++;
            if ($shiftCount > 1) {
                return false;
            }
        }
    }

    // If no more than one break, the array can be rotated to sorted order
    return true;
}","function candidate(...$args) {
    return move_one_ball(...$args);
}

function test(): void {
    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 3, 1, 2)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 5, 4, 1, 2)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_110,vie_Latn,php,"<?php
//Ví dụ: //Nếu không, trả về ""Không"".//tất cả các phần tử của lst1 là thậm chí, trả về ""YES"". //Nếu có thể trao đổi các yếu tố giữa lst1 và lst2 để tạo ra //Không có giới hạn về số lượng các yếu tố được trao đổi giữa lst1 và lst2.//giữa chúng để làm lst1 một mảng chỉ có số chẵn.//và xác định liệu có thể thực hiện một sự trao đổi các yếu tố //Trong vấn đề này, bạn sẽ thực hiện một hàm mà có hai mảng số, // >>> exchange(array(1, 2, 3, 4), array(1, 2, 3, 4))
// ""YES""
// >>> exchange(array(1, 2, 3, 4), array(1, 5, 3, 4))
// ""NO""
// It is assumed that the input arrays will be non-empty.
function exchange($lst1, $lst2) {
","function exchange($lst1, $lst2) {
    // Check if lst2 contains at least one even number
    $hasEvenInLst2 = false;
    foreach ($lst2 as $num) {
        if ($num % 2 == 0) {
            $hasEvenInLst2 = true;
            break;
        }
    }

    // Check if all lst1 numbers are even already, if so return ""YES""
    $allEvenInLst1 = true;
    foreach ($lst1 as $num) {
        if ($num % 2 != 0) {
            $allEvenInLst1 = false;
            break;
        }
    }
    
    // If all numbers in lst1 are even or lst2 has at least one even number, return ""YES""
    if ($allEvenInLst1 || $hasEvenInLst2) {
        return ""YES"";
    }
    
    // Otherwise, return ""NO""
    return ""NO"";
}","function candidate(...$args) {
    return exchange(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3, 4), array(1, 2, 3, 4)) !== ""YES"") { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4), array(1, 5, 3, 4)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4), array(2, 1, 4, 3)) !== ""YES"") { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 7, 3), array(2, 6, 4)) !== ""YES"") { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 7, 3), array(2, 6, 3)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 6, 1, 8, 9), array(3, 5, 5, 1, 1, 1)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(100, 200), array(200, 200)) !== ""YES"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_111,vie_Latn,php,"<?php
//Ví dụ: //Nếu một số chữ cái có cùng một sự xuất hiện, hãy trả lại tất cả chúng.//của chữ cái với nhiều lần lặp lại nhất và chứa số tương ứng. //Cho một chuỗi đại diện cho một chữ cái nhỏ tách biệt không gian, trả về một mảng // >>> histogram(""a b c"")
// array(""a"" => 1, ""b"" => 1, ""c"" => 1)
// >>> histogram(""a b b a"")
// array(""a"" => 2, ""b"" => 2)
// >>> histogram(""a b c a b"")
// array(""a"" => 2, ""b"" => 2)
// >>> histogram(""b b b b a"")
// array(""b"" => 4)
// >>> histogram("""")
// array()
function histogram($test) {
","function histogram($test) {
    // Split the input string into an array of letters
    $letters = explode(' ', $test);

    // Create an associative array to count occurrences of each letter
    $counts = array();

    foreach ($letters as $letter) {
        if ($letter !== '') {
            if (array_key_exists($letter, $counts)) {
                $counts[$letter]++;
            } else {
                $counts[$letter] = 1;
            }
        }
    }

    // Find the maximum occurrence count
    $maxCount = 0;
    foreach ($counts as $count) {
        if ($count > $maxCount) {
            $maxCount = $count;
        }
    }

    // Gather all letters with the maximum occurrence count
    $result = array();
    foreach ($counts as $letter => $count) {
        if ($count == $maxCount) {
            $result[$letter] = $count;
        }
    }

    return $result;
}","function candidate(...$args) {
    return histogram(...$args);
}

function test(): void {
    if (candidate(""a b b a"") !== array(""a"" => 2, ""b"" => 2)) { throw new Exception(""Test failed!""); }
    if (candidate(""a b c a b"") !== array(""a"" => 2, ""b"" => 2)) { throw new Exception(""Test failed!""); }
    if (candidate(""a b c d g"") !== array(""a"" => 1, ""b"" => 1, ""c"" => 1, ""d"" => 1, ""g"" => 1)) { throw new Exception(""Test failed!""); }
    if (candidate(""r t g"") !== array(""r"" => 1, ""t"" => 1, ""g"" => 1)) { throw new Exception(""Test failed!""); }
    if (candidate(""b b b b a"") !== array(""b"" => 4)) { throw new Exception(""Test failed!""); }
    if (candidate(""r t g"") !== array(""r"" => 1, ""t"" => 1, ""g"" => 1)) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""a"") !== array(""a"" => 1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_112,vie_Latn,php,"<?php
//Ví dụ //Bạn nên trả về một mảng chứa chuỗi kết quả và true/false cho kiểm tra.//Một chuỗi được gọi là palindrome nếu nó đọc ngược cùng với phía trước.//sau đó kiểm tra xem chuỗi kết quả có phải là palindrome hay không.//Chúng ta được cung cấp hai chuỗi s và c, bạn phải xóa tất cả các ký tự trong s bằng bất kỳ ký tự trong c //Nhiệm vụ // >>> reverse_delete(""abcde"", ""ae"")
// array(""bcd"", false)
// >>> reverse_delete(""abcdef"", ""b"")
// array(""acdef"", false)
// >>> reverse_delete(""abcdedcba"", ""ab"")
// array(""cdedc"", true)
function reverse_delete($s, $c) {
","function reverse_delete($s, $c) {
    // Remove all characters in $s that are present in $c
    $result = str_replace(str_split($c), '', $s);
    
    // Check if the result string is a palindrome
    $is_palindrome = ($result === strrev($result));
    
    // Return the result string and whether it is a palindrome
    return array($result, $is_palindrome);
}","function candidate(...$args) {
    return reverse_delete(...$args);
}

function test(): void {
    if (candidate(""abcde"", ""ae"") !== array(""bcd"", false)) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdef"", ""b"") !== array(""acdef"", false)) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdedcba"", ""ab"") !== array(""cdedc"", true)) { throw new Exception(""Test failed!""); }
    if (candidate(""dwik"", ""w"") !== array(""dik"", false)) { throw new Exception(""Test failed!""); }
    if (candidate(""a"", ""a"") !== array("""", true)) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdedcba"", """") !== array(""abcdedcba"", true)) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdedcba"", ""v"") !== array(""abcdedcba"", true)) { throw new Exception(""Test failed!""); }
    if (candidate(""vabba"", ""v"") !== array(""abba"", true)) { throw new Exception(""Test failed!""); }
    if (candidate(""mamma"", ""mia"") !== array("""", true)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_113,vie_Latn,php,"<?php
//của các chữ số lẻ trong chuỗi i'th của đầu vào. //string i của đầu vào. "" nơi tất cả các i nên được thay thế bằng số //Mỗi phần tử i của đầu ra phải là số phần tử lẻ trong //Với một mảng các chuỗi, trong đó mỗi chuỗi chỉ bao gồm các chữ số, trả về một mảng.// >>> odd_count(array(""1234567""))
// array(""the number of odd elements 4n the str4ng 4 of the 4nput."")
// >>> odd_count(array(""3"", ""11111111""))
// array(""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput."")
function odd_count($lst) {
","function odd_count($lst) {
    $result = array();
    foreach ($lst as $string) {
        $oddCount = 0;
        
        // Count odd digits in the string
        for ($i = 0; $i < strlen($string); $i++) {
            if ((int)$string[$i] % 2 !== 0) {
                $oddCount++;
            }
        }
        
        // Create the formatted string
        $result[] = ""the number of odd elements "" . $oddCount . ""n the str"" . $oddCount . ""ng "" . $oddCount . "" of the "" . $oddCount . ""nput."";
    }
    return $result;
}","function candidate(...$args) {
    return odd_count(...$args);
}

function test(): void {
    if (candidate(array(""1234567"")) !== array(""the number of odd elements 4n the str4ng 4 of the 4nput."")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""3"", ""11111111"")) !== array(""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput."")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""271"", ""137"", ""314"")) !== array(""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput."")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_114,vie_Latn,php,"<?php
//Ví dụ //của nums. //Cho một mảng các số nguyên n, tìm tổng tối thiểu của bất kỳ tiểu mảng không rỗng nào // >>> minSubArraySum(array(2, 3, 4, 1, 2, 4))
// 1
// >>> minSubArraySum(array(-1, -2, -3))
// -6
function minSubArraySum($nums) {
","function minSubArraySum($nums) {
    $currentSum = $nums[0];
    $minSum = $nums[0];

    for ($i = 1; $i < count($nums); $i++) {
        $currentSum = min($nums[$i], $currentSum + $nums[$i]);
        $minSum = min($minSum, $currentSum);
    }

    return $minSum;
}","function candidate(...$args) {
    return minSubArraySum(...$args);
}

function test(): void {
    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw new Exception(""Test failed!""); }
    if (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(""Test failed!""); }
    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(""Test failed!""); }
    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) { throw new Exception(""Test failed!""); }
    if (candidate(array(-10)) !== -10) { throw new Exception(""Test failed!""); }
    if (candidate(array(7)) !== 7) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -1)) !== -1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_115,vie_Latn,php,"<?php
//Ví dụ 1: //Xuất số lần bạn cần để hạ các thùng.//Nhiệm vụ của các bạn là sử dụng các thùng để làm trống giếng.//và tất cả các thùng có cùng dung lượng.//Mỗi giếng có một cái xô tương ứng có thể được sử dụng để lấy nước từ nó,//và mỗi 1 trong một hàng đại diện cho một đơn vị nước.//Bạn được đưa ra một lưới hình chữ nhật của giếng. Mỗi hàng đại diện cho một giếng duy nhất, // >>> max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1)
// 6
// Example 2:
// >>> max_fill(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2)
// 5
// Example 3:
// >>> max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5)
// 0
// Constraints:
// * all wells have the same length
// * 1 <= grid.length <= 10^2
// * 1 <= grid[:,1].length <= 10^2
// * grid[i][j] -> 0 | 1
// * 1 <= capacity <= 10
function max_fill($grid, $capacity) {
","function max_fill($grid, $capacity) {
    $totalTimes = 0;
    
    foreach ($grid as $well) {
        $waterUnits = array_sum($well);
        $times = ceil($waterUnits / $capacity);
        $totalTimes += $times;
    }
    
    return $totalTimes;
}","function candidate(...$args) {
    return max_fill(...$args);
}

function test(): void {
    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_116,vie_Latn,php,"<?php
//Nó phải được thực hiện như sau://Đối với số lượng tương tự của số một, sắp xếp dựa trên giá trị thập phân.//số lượng một trong đại diện nhị phân của họ theo thứ tự tăng dần.//Trong Kata này, bạn phải sắp xếp một mảng của số nguyên không âm theo // >>> sort_array(array(1, 5, 2, 3, 4))
// array(1, 2, 3, 4, 5)
// >>> sort_array(array(-2, -3, -4, -5, -6))
// array(-6, -5, -4, -3, -2)
// >>> sort_array(array(1, 0, 2, 3, 4))
// array(0, 1, 2, 3, 4)
function sort_array($arr) {
","function sort_array($arr) {
    usort($arr, function($a, $b) {
        $countA = substr_count(decbin($a), '1');
        $countB = substr_count(decbin($b), '1');
        if ($countA !== $countB) {
            return $countA - $countB;
        } else {
            return $a - $b;
        }
    });
    return $arr;
}","function candidate(...$args) {
    return sort_array(...$args);
}

function test(): void {
    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_117,vie_Latn,php,"<?php
//Ví dụ: //Lưu ý: bạn có thể giả định chuỗi đầu vào chỉ chứa các chữ cái và khoảng trống.//Nếu chuỗi s là trống thì hàm sẽ trả về mảng trống. //n phụ âm, theo thứ tự những từ này xuất hiện trong chuỗi s. //một hàm trả về mảng tất cả các từ từ chuỗi s chứa chính xác //Với một chuỗi s và một số tự nhiên n, bạn đã được giao nhiệm vụ thực hiện // >>> select_words(""Mary had a little lamb"", 4)
// array(""little"")
// >>> select_words(""Mary had a little lamb"", 3)
// array(""Mary"", ""lamb"")
// >>> select_words(""simple white space"", 2)
// array()
// >>> select_words(""Hello world"", 4)
// array(""world"")
// >>> select_words(""Uncle sam"", 3)
// array(""Uncle"")
function select_words($s, $n) {
","function select_words($s, $n) {
    $words = explode(' ', $s); // Split the string into words
    $result = [];
    $vowels = ['a', 'e', 'i', 'o', 'u'];

    foreach ($words as $word) {
        $count = 0;
        $lowercaseWord = strtolower($word);
        
        // Count consonants in the word
        for ($i = 0; $i < strlen($lowercaseWord); $i++) {
            if (ctype_alpha($lowercaseWord[$i]) && !in_array($lowercaseWord[$i], $vowels)) {
                $count++;
            }
        }

        // Add word to result if it has exactly n consonants
        if ($count === $n) {
            $result[] = $word;
        }
    }

    return $result;
}","function candidate(...$args) {
    return select_words(...$args);
}

function test(): void {
    if (candidate(""Mary had a little lamb"", 4) !== array(""little"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Mary had a little lamb"", 3) !== array(""Mary"", ""lamb"")) { throw new Exception(""Test failed!""); }
    if (candidate(""simple white space"", 2) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""Hello world"", 4) !== array(""world"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Uncle sam"", 3) !== array(""Uncle"")) { throw new Exception(""Test failed!""); }
    if (candidate("""", 4) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""a b c d e f"", 1) !== array(""b"", ""c"", ""d"", ""f"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_118,vie_Latn,php,"<?php
//Ví dụ: //Bạn có thể giả định rằng chuỗi được đưa ra chỉ chứa chữ cái tiếng Anh.//tìm bất kỳ nguyên âm nào đáp ứng điều kiện trên.//Các nguyên âm ở đầu và cuối không được tính. Trả về chuỗi trống nếu bạn không có.//hai phụ âm từ bên phải của từ (có tính nhạy cảm).//Bạn được cho một từ. Nhiệm vụ của bạn là tìm ra nguyên âm gần nhất nằm giữa // >>> get_closest_vowel(""yogurt"")
// ""u""
// >>> get_closest_vowel(""FULL"")
// ""U""
// >>> get_closest_vowel(""quick"")
// """"
// >>> get_closest_vowel(""ab"")
// """"
function get_closest_vowel($word) {
","function get_closest_vowel($word) {
    $vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
    $length = strlen($word);

    // Iterate from the end of the word towards the beginning
    for ($i = $length - 2; $i > 0; $i--) {
        if (in_array($word[$i], $vowels)) {
            // Check if adjacent characters are consonants
            if (!in_array($word[$i - 1], $vowels) && !in_array($word[$i + 1], $vowels)) {
                return $word[$i];
            }
        }
    }

    // Return empty string if no suitable vowel was found
    return '';
}","function candidate(...$args) {
    return get_closest_vowel(...$args);
}

function test(): void {
    if (candidate(""yogurt"") !== ""u"") { throw new Exception(""Test failed!""); }
    if (candidate(""full"") !== ""u"") { throw new Exception(""Test failed!""); }
    if (candidate(""easy"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""eAsy"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""ali"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""bad"") !== ""a"") { throw new Exception(""Test failed!""); }
    if (candidate(""most"") !== ""o"") { throw new Exception(""Test failed!""); }
    if (candidate(""ab"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""ba"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""quick"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""anime"") !== ""i"") { throw new Exception(""Test failed!""); }
    if (candidate(""Asia"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""Above"") !== ""o"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_119,vie_Latn,php,"<?php
//Ví dụ: //Trả về 'Vâng' nếu có một cách để tạo một chuỗi tốt, và trả về 'Không' nếu không.//""()) "" không phải là.//được cân bằng. Ví dụ: chuỗi '(())))' là tốt, trong khi chuỗi //Một chuỗi S được coi là tốt nếu và chỉ khi tất cả các dấu ngoặc trong S //một số thứ tự, rằng chuỗi kết quả sẽ là tốt.//Công việc của bạn là kiểm tra xem có thể kết nối hai chuỗi vào trong không.//chỉ có dấu ngoặc ' ((' hoặc dấu ngoặc gần ') './/Bạn được cung cấp một mảng hai chuỗi, cả hai chuỗi bao gồm mở // >>> match_parens(array(""()("", "")""))
// ""Yes""
// >>> match_parens(array("")"", "")""))
// ""No""
function match_parens($lst) {
","function match_parens($lst) {
    $str1 = $lst[0];
    $str2 = $lst[1];

    // Function to determine if parentheses are balanced
    function is_balanced($s) {
        $balance = 0;
        for ($i = 0; $i < strlen($s); $i++) {
            if ($s[$i] === '(') {
                $balance++;
            } else {
                $balance--;
            }
            // If balance is negative, parentheses are not balanced
            if ($balance < 0) {
                return false;
            }
        }
        // Check that balance is zero
        return $balance === 0;
    }

    // Check all concatenation combinations
    $concat1 = $str1 . $str2;
    $concat2 = $str2 . $str1;

    if (is_balanced($concat1) || is_balanced($concat2)) {
        return ""Yes"";
    } else {
        return ""No"";
    }
}","function candidate(...$args) {
    return match_parens(...$args);
}

function test(): void {
    if (candidate(array(""()("", "")"")) !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(array("")"", "")"")) !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""(()(())"", ""())())"")) !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(array("")())"", ""(()()("")) !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""(())))"", ""(()())(("")) !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""()"", ""())"")) !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""(()("", ""()))()"")) !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""(((("", ""((())"")) !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(array("")(()"", ""(()("")) !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(array("")("", "")("")) !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""("", "")"")) !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(array("")"", ""("")) !== ""Yes"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_120,vie_Latn,php,"<?php
//Ví dụ 1: //của chiều dài k với số k tối đa trong arr. //Cho một mảng arr của số nguyên và một số nguyên dương k, trả về một mảng được sắp xếp // >>> maximum(array(-3, -4, 5), 3)
// array(-4, -3, 5)
// Example 2:
// >>> maximum(array(4, -4, 4), 2)
// array(4, 4)
// Example 3:
// >>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)
// array(2)
// Note:
// 1. The length of the array will be in the range of [1, 1000].
// 2. The elements in the array will be in the range of [-1000, 1000].
// 3. 0 <= k <= len(arr)
function maximum($arr, $k) {
","function maximum($arr, $k) {
    rsort($arr);
    return array_slice($arr, 0, $k);
}","function candidate(...$args) {
    return maximum(...$args);
}

function test(): void {
    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_121,vie_Latn,php,"<?php
//Ví dụ //Cho một mảng không trống của số nguyên, trả về tổng của tất cả các yếu tố lẻ mà là ở vị trí chẵn. // >>> solution(array(5, 8, 7, 1))
// 12
// >>> solution(array(3, 3, 3, 3, 3))
// 9
// >>> solution(array(30, 13, 24, 321))
// 0
function solution($lst) {
","function solution($lst) {
    $sum = 0;
    for ($i = 0; $i < count($lst); $i += 2) {
        if ($lst[$i] % 2 != 0) {
            $sum += $lst[$i];
        }
    }
    return $sum;
}","function candidate(...$args) {
    return solution(...$args);
}

function test(): void {
    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new Exception(""Test failed!""); }
    if (candidate(array(30, 13, 24, 321)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 9)) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 8)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(30, 13, 23, 32)) !== 23) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 13, 2, 9)) !== 3) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_122,vie_Latn,php,"<?php
//Ví dụ: //tổng các phần tử có tối đa hai chữ số từ k phần tử đầu tiên của arr. //Cho một mảng không rỗng của số nguyên arr và một số nguyên k, trả về // >>> add_elements(array(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)
// 24
// Constraints:
// 1. 1 <= len(arr) <= 100
// 2. 1 <= k <= len(arr)
function add_elements($arr, $k) {
","function add_elements($arr, $k) {
    $sum = 0;
    for ($i = 0; $i < $k; $i++) {
        if ($arr[$i] >= -99 && $arr[$i] <= 99) {
            $sum += $arr[$i];
        }
    }
    return $sum;
}","function candidate(...$args) {
    return add_elements(...$args);
}

function test(): void {
    if (candidate(array(1, -2, -3, 41, 57, 76, 87, 88, 99), 3) !== -4) { throw new Exception(""Test failed!""); }
    if (candidate(array(111, 121, 3, 4000, 5, 6), 2) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(11, 21, 3, 90, 5, 6, 7, 8, 9), 4) !== 125) { throw new Exception(""Test failed!""); }
    if (candidate(array(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) !== 24) { throw new Exception(""Test failed!""); }
    if (candidate(array(1), 1) !== 1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_123,vie_Latn,php,"<?php
//get_odd_collatz(5) trả về [1, 5] # Dòng collatz cho 5 là [5, 16, 8, 4, 2, 1], vì vậy các số lẻ chỉ là 1, và 5. //Ví dụ: //2. array trả về được sắp xếp theo thứ tự tăng dần.//1. Collatz(1) là [1]. //Lưu ý://thuật ngữ cộng với 1. Giả thuyết là bất kể giá trị của n là gì, chuỗi sẽ luôn đạt đến 1. //Nếu thuật ngữ trước là lẻ, thuật ngữ tiếp theo là 3 lần trước //thuật ngữ trước như sau: nếu thuật ngữ trước là chẵn, thuật ngữ tiếp theo là một nửa của //như sau: bắt đầu với bất kỳ số nguyên dương n. Sau đó mỗi thuật ngữ được lấy từ //Giả thuyết Collatz là một giả thuyết trong toán học liên quan đến một chuỗi được xác định.//Với một số nguyên dương n, trả về một mảng được sắp xếp có các số lẻ trong trình tự collatz. // >>> get_odd_collatz(5)
// array(1, 5)
function get_odd_collatz($n) {
","function get_odd_collatz($n) {
    $collatz = [];
    while ($n != 1) {
        if ($n % 2 != 0) {
            $collatz[] = $n;
        }
        if ($n % 2 == 0) {
            $n = $n / 2;
        } else {
            $n = 3 * $n + 1;
        }
    }
    $collatz[] = 1; // Adding 1 as it's always the last part of any Collatz sequence
    sort($collatz);
    return $collatz;
}","function candidate(...$args) {
    return get_odd_collatz(...$args);
}

function test(): void {
    if (candidate(14) !== array(1, 5, 7, 11, 13, 17)) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== array(1, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(12) !== array(1, 3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== array(1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_124,vie_Latn,php,"<?php
//Ngày nên được trong định dạng: mm-dd-yyyy //3. Số tháng không nên ít hơn 1 hoặc cao hơn 12.//Số ngày không ít hơn 1 hoặc cao hơn 31 ngày cho tháng 1,3,5,7,8,10,12. Và số ngày không ít hơn 1 hoặc cao hơn 30 ngày cho tháng 4,6,9,11. Và, số ngày không ít hơn 1 hoặc cao hơn 29 cho tháng 2.//1. Dãy ngày không trống.//Ngày này có giá trị nếu tất cả các quy tắc sau đây được đáp ứng: //trả về true nếu ngày là hợp lệ nếu không thì false. //Bạn phải viết một hàm xác nhận một chuỗi ngày đã cho và // >>> valid_date(""03-11-2000"")
// true
// >>> valid_date(""15-01-2012"")
// false
// >>> valid_date(""04-0-2040"")
// false
// >>> valid_date(""06-04-2020"")
// true
// >>> valid_date(""06/04/2020"")
// false
function valid_date($date) {
","function valid_date($date) {
    // Check if the date is in the correct format mm-dd-yyyy
    if (!preg_match('/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\d{4}$/', $date)) {
        return false;
    }

    // Split the date to get month, day, and year
    list($month, $day, $year) = explode('-', $date);

    // Check if the month and day values are valid
    if ($month < 1 || $month > 12 || $day < 1) {
        return false;
    }

    // Check the number of days in each month
    $daysInMonth = array(
        1 => 31, // January
        2 => 29, // February (handle separately for leap year)
        3 => 31, // March
        4 => 30, // April
        5 => 31, // May
        6 => 30, // June
        7 => 31, // July
        8 => 31, // August
        9 => 30, // September
        10 => 31, // October
        11 => 30, // November
        12 => 31  // December
    );

    // Check for the correct number of days against the given month
    if ($day > $daysInMonth[(int)$month]) {
        return false;
    }

    // If February is given, further check for leap year validity
    if ($month == 2) {
        // Leap year condition
        if (($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0)) {
            // Leap year, February can have up to 29 days
            if ($day > 29) {
                return false;
            }
        } else {
            // Not a leap year, February can have only up to 28 days
            if ($day > 28) {
                return false;
            }
        }
    }

    return true;
}","function candidate(...$args) {
    return valid_date(...$args);
}

function test(): void {
    if (candidate(""03-11-2000"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""15-01-2012"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""04-0-2040"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""06-04-2020"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""01-01-2007"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""03-32-2011"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""04-31-3000"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""06-06-2005"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""21-31-2000"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""04-12-2003"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""04122003"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""20030412"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""2003-04"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""2003-04-12"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""04-2003"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_125,vie_Latn,php,"<?php
//Ví dụ //chữ cái, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 //nên chia trên dấu phẩy ',' nếu không có dấu phẩy tồn tại bạn nên trả về số lượng các chữ cái nhỏ với thứ tự lẻ trong //Cho một chuỗi từ, trả về một mảng từ chia trên khoảng trắng, nếu không có khoảng trắng tồn tại trong văn bản bạn // >>> split_words(""Hello world!"")
// array(""Hello"", ""world!"")
// >>> split_words(""Hello,world!"")
// array(""Hello"", ""world!"")
// >>> split_words(""abcdef"")
// 3
function split_words($txt) {
","function split_words($txt) {
    if (preg_match('/\s/', $txt)) {
        return preg_split('/\s+/', trim($txt));
    } else if (strpos($txt, ',') !== false) {
        return explode(',', $txt);
    } else {
        $count = 0;
        for ($i = 0; $i < strlen($txt); $i++) {
            $ch = $txt[$i];
            if (ctype_lower($ch)) {
                $pos = ord($ch) - ord('a');
                if ($pos % 2 == 0) {
                    $count++;
                }
            }
        }
        return $count;
    }
}","function candidate(...$args) {
    return split_words(...$args);
}

function test(): void {
    if (candidate(""Hello world!"") !== array(""Hello"", ""world!"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Hello,world!"") !== array(""Hello"", ""world!"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Hello world,!"") !== array(""Hello"", ""world,!"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Hello,Hello,world !"") !== array(""Hello,Hello,world"", ""!"")) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdef"") !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(""aaabb"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""aaaBb"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_126,vie_Latn,php,"<?php
//Ví dụ //số, trả về false. Giả sử không có số âm và chỉ số nguyên.//Nếu mảng có nhiều hơn 1 bản sao của cùng một//Cho một mảng các số, trả về cho dù chúng được sắp xếp hay không.// >>> is_sorted(array(5))
// true
// >>> is_sorted(array(1, 2, 3, 4, 5))
// true
// >>> is_sorted(array(1, 3, 2, 4, 5))
// false
// >>> is_sorted(array(1, 2, 3, 4, 5, 6))
// true
// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))
// true
// >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))
// false
// >>> is_sorted(array(1, 2, 2, 3, 3, 4))
// true
// >>> is_sorted(array(1, 2, 2, 2, 3, 4))
// false
function is_sorted($lst) {
","function is_sorted($lst) {
    $length = count($lst);
    if ($length <= 1) {
        return true;
    }

    $previous = $lst[0];
    $count = array();

    foreach ($lst as $number) {
        if (isset($count[$number])) {
            $count[$number]++;
        } else {
            $count[$number] = 1;
        }

        if ($count[$number] > 2) {
            return false;
        }

        if ($number < $previous) {
            return false;
        }

        $previous = $number;
    }

    return true;
}","function candidate(...$args) {
    return is_sorted(...$args);
}

function test(): void {
    if (candidate(array(5)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5, 6)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_127,vie_Latn,php,"<?php
//[input/output] mẫu: //Nếu hai khoảng không giao nhau, trả về ""NO"".//Nếu không, trả về ""NO"".//Nếu chiều dài của giao điểm là một số nguyên tố, trả về ""YES"", //mà chiều dài của nó là 1, mà không phải là một số nguyên tố.//Ví dụ, điểm cắt của các khoảng (1, 3), (2, 4) là (2, 3) //khoảng là một số nguyên tố.//Nhiệm vụ của bạn là xác định xem chiều dài của giao điểm của hai //Đối với mỗi khoảng thời gian nhất định, giả định rằng khởi đầu của nó nhỏ hơn hoặc bằng cuối của nó.//bao gồm cả bắt đầu và kết thúc.//Các khoảng thời gian được đưa ra là đóng, có nghĩa là khoảng thời gian (bắt đầu, kết thúc) //trong đó mỗi khoảng là một cặp số nguyên. Ví dụ, khoảng = (bắt đầu, kết thúc) = (1, 2).//Bạn được cho hai khoảng thời gian, // >>> intersection(array(1, 2), array(2, 3))
// ""NO""
// >>> intersection(array(-1, 1), array(0, 4))
// ""NO""
// >>> intersection(array(-3, -1), array(-5, 5))
// ""YES""
function intersection($interval1, $interval2) {
","function intersection($interval1, $interval2) {
    // Find intersection
    $start = max($interval1[0], $interval2[0]);
    $end = min($interval1[1], $interval2[1]);

    // Determine the length of the intersection
    $length = $end - $start;

    // If the intervals don't intersect
    if ($length < 0) {
        return ""NO"";
    }

    // Check if the length is a prime number
    if ($length <= 1) {
        return ""NO"";
    }

    for ($i = 2; $i * $i <= $length; $i++) {
        if ($length % $i == 0) {
            return ""NO"";
        }
    }

    return ""YES"";
}","function candidate(...$args) {
    return intersection(...$args);
}

function test(): void {
    if (candidate(array(1, 2), array(2, 3)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, 1), array(0, 4)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(-3, -1), array(-5, 5)) !== ""YES"") { throw new Exception(""Test failed!""); }
    if (candidate(array(-2, 2), array(-4, 0)) !== ""YES"") { throw new Exception(""Test failed!""); }
    if (candidate(array(-11, 2), array(-1, -1)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2), array(3, 5)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2), array(1, 2)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(-2, -2), array(-3, -2)) !== ""NO"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_128,vie_Latn,php,"<?php
//Ví dụ: //Lưu ý: trả về null cho arr trống. //của mỗi số trong mảng, được biểu diễn bởi 1, -1 hoặc 0. //Tổng số lượng của các số nguyên nhân nhân với sản phẩm của tất cả các dấu hiệu //Bạn được cung cấp một mảng arr của số nguyên và bạn cần phải trở lại // >>> prod_signs(array(1, 2, 2, -4))
// 9
// >>> prod_signs(array(0, 1))
// 0
// >>> prod_signs(array())
// null
function prod_signs($arr) {
","function prod_signs($arr) {
    if (empty($arr)) {
        return null;
    }
    
    $sum_of_magnitudes = 0;
    $product_of_signs = 1;
    
    foreach ($arr as $num) {
        $sum_of_magnitudes += abs($num);
        if ($num == 0) {
            $product_of_signs = 0;
            break;
        } else {
            $product_of_signs *= ($num > 0) ? 1 : -1;
        }
    }
    
    return $sum_of_magnitudes * $product_of_signs;
}","function candidate(...$args) {
    return prod_signs(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 1)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== null) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_129,vie_Latn,php,"<?php
//Ví dụ: //Trả về một mảng được sắp xếp các giá trị trên các ô mà đường dẫn tối thiểu đi qua. //Nó được đảm bảo rằng câu trả lời là duy nhất.//lst_A[j] = lst_B[j].//như lst_A[i] < lst_B[i] và cho bất kỳ j (1 <= j < i) chúng ta có //hơn lst_B, nói cách khác, có tồn tại một chỉ số số nguyên i (1 <= i <= k) //thông qua (chúng ta hãy gọi chúng là lst_A và lst_B), lst_A là ít hơn về mặt từ điển //sau khi tạo mảng trật tự các giá trị trên các ô mà A và B đi //Một đường A (dài k) được coi là nhỏ hơn đường B (dài k) nếu //Bạn không thể đi ra khỏi mạng lưới.//nhất thiết phải khác nhau).//Xin lưu ý rằng một đường dẫn có chiều dài k có nghĩa là truy cập chính xác k ô (không phải ////Nói cách khác, bạn có thể đi đến các tế bào mà chia sẻ một cạnh với bạn hiện tại //từ bất kỳ tế bào, và trong mỗi bước bạn có thể di chuyển đến bất kỳ của các tế bào hàng xóm, //Bạn phải tìm đường đi tối thiểu của chiều dài k trong lưới. Bạn có thể bắt đầu.//inclusive xuất hiện chính xác một lần trên các ô của lưới. //mỗi ô của lưới chứa một giá trị. Mỗi số nguyên trong phạm vi [1, N * N] //Với một lưới với N hàng và N cột (N >= 2) và một số nguyên dương k, // >>> minPath(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9)), 3)
// array(1, 2, 1)
// >>> minPath(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1)
// array(1)
function minPath($grid, $k) {
","function minPath($grid, $k) {
    $n = count($grid);
    $m = $n * $n;
    
    // Allows movement in four directions: right, down, left, up
    $directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];
    
    $result = array_fill(0, $k, $m + 1);
    
    function backtrack($x, $y, $path, $grid, $k, $directions, $n, &$result) {
        if (count($path) === $k) {
            if ($path < $result) {
                $result = $path;
            }
            return;
        }
        
        foreach ($directions as $direction) {
            $dx = $x + $direction[0];
            $dy = $y + $direction[1];
            
            if ($dx >= 0 && $dx < $n && $dy >= 0 && $dy < $n) {
                $newPath = $path;
                $newPath[] = $grid[$dx][$dy];
                backtrack($dx, $dy, $newPath, $grid, $k, $directions, $n, $result);
            }
        }
    }
    
    // Try starting from each cell in the grid
    for ($i = 0; $i < $n; $i++) {
        for ($j = 0; $j < $n; $j++) {
            backtrack($i, $j, [$grid[$i][$j]], $grid, $k, $directions, $n, $result);
        }
    }
    
    return $result;
}","function candidate(...$args) {
    return minPath(...$args);
}

function test(): void {
    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9)), 3) !== array(1, 2, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1) !== array(1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 2, 3, 4), array(5, 6, 7, 8), array(9, 10, 11, 12), array(13, 14, 15, 16)), 4) !== array(1, 2, 1, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(6, 4, 13, 10), array(5, 7, 12, 1), array(3, 16, 11, 15), array(8, 14, 9, 2)), 7) !== array(1, 10, 1, 10, 1, 10, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(8, 14, 9, 2), array(6, 4, 13, 15), array(5, 7, 1, 12), array(3, 10, 11, 16)), 5) !== array(1, 7, 1, 7, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(11, 8, 7, 2), array(5, 16, 14, 4), array(9, 3, 15, 6), array(12, 13, 10, 1)), 9) !== array(1, 6, 1, 6, 1, 6, 1, 6, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(12, 13, 10, 1), array(9, 3, 15, 6), array(5, 16, 14, 4), array(11, 8, 7, 2)), 12) !== array(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(2, 7, 4), array(3, 1, 5), array(6, 8, 9)), 8) !== array(1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(6, 1, 5), array(3, 8, 9), array(2, 7, 4)), 8) !== array(1, 5, 1, 5, 1, 5, 1, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 2), array(3, 4)), 10) !== array(1, 2, 1, 2, 1, 2, 1, 2, 1, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 3), array(3, 2)), 10) !== array(1, 3, 1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_130,vie_Latn,php,"<?php
//Ví dụ: //n + 1 số đầu tiên của chuỗi Tribonacci. //Bạn được cho một số nguyên không âm n, bạn phải trả về một mảng của //= 2 + 3 + 3 = 8 //tri(3) = tri(2) + tri(1) + tri(4) //tri(4) = 3 //tri(2) = 1 + (2 / 2) = 2 //Ví dụ: //tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), nếu n là lẻ. //tri (n) = 1 + n / 2, nếu n là chẵn. //tri(1) = 3 //Dòng dõi Tribonacci được xác định bởi sự tái phát: //Tuy nhiên, những gì mọi người không biết là trình tự Tribonacci.//Mọi người đều biết chuỗi Fibonacci, nó đã được nghiên cứu sâu sắc bởi các nhà toán học trong // >>> tri(3)
// array(1, 3, 2, 8)
function tri($n) {
","function tri($n) {
    $tribonacci = array();
    
    for ($i = 0; $i <= $n; $i++) {
        if ($i == 0) {
            $tribonacci[$i] = 1; // tri(0) should be initialized to 1 or any base case value you want
        } elseif ($i == 1) {
            $tribonacci[$i] = 3; // tri(1)
        } elseif ($i == 2) {
            $tribonacci[$i] = 1 + ($i / 2); // tri(2)
        } elseif ($i % 2 == 0) {
            $tribonacci[$i] = 1 + ($i / 2); // tri(n), if n is even
        } else {
            $tribonacci[$i] = $tribonacci[$i - 1] + $tribonacci[$i - 2] + (isset($tribonacci[$i + 1]) ? $tribonacci[$i + 1] : 3);
            // tri(n), if n is odd, tri(n + 1) is assumed to be 3 if not already calculable
        }
    }
    
    return $tribonacci;
}","function candidate(...$args) {
    return tri(...$args);
}

function test(): void {
    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(""Test failed!""); }
    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(""Test failed!""); }
    if (candidate(0) !== array(1)) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== array(1, 3)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_131,vie_Latn,php,"<?php
//Ví dụ: //Trả về 0 nếu tất cả các chữ số là chẵn. //Cho một số nguyên dương n, trả về sản phẩm của các chữ số lẻ. // >>> digits(1)
// 1
// >>> digits(4)
// 0
// >>> digits(235)
// 15
function digits($n) {
","function digits($n) {
    $product = 1;
    $hasOdd = false;

    while ($n > 0) {
        $digit = $n % 10;
        if ($digit % 2 != 0) {
            $product *= $digit;
            $hasOdd = true;
        }
        $n = intdiv($n, 10);
    }

    return $hasOdd ? $product : 0;
}","function candidate(...$args) {
    return digits(...$args);
}

function test(): void {
    if (candidate(5) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(54) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(120) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(5014) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(98765) !== 315) { throw new Exception(""Test failed!""); }
    if (candidate(5576543) !== 2625) { throw new Exception(""Test failed!""); }
    if (candidate(2468) !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_132,vie_Latn,php,"<?php
//trong đó ít nhất một bracket trong chuỗi con được lồng.//Hàm sẽ trả về true nếu và chỉ khi có một chuỗi phụ hợp lệ của các dấu ngoặc //Tạo một hàm lấy một chuỗi như đầu vào chỉ chứa các dấu ngoặc vuông. // >>> is_nested(""[[]]"")
// true
// >>> is_nested(""[]]]]]]][[[[[]"")
// false
// >>> is_nested(""[][]"")
// false
// >>> is_nested(""[]"")
// false
// >>> is_nested(""[[][]]"")
// true
// >>> is_nested(""[[]][["")
// true
function is_nested($string) {
","function is_nested($string) {
    $stack = [];
    $hasNested = false;
    
    for ($i = 0; $i < strlen($string); $i++) {
        $char = $string[$i];
        if ($char === '[') {
            array_push($stack, '[');
        } elseif ($char === ']') {
            if (!empty($stack)) {
                array_pop($stack);
                if ($i > 0 && $string[$i - 1] === '[') {
                    $hasNested = true;
                }
            } else {
                return false;
            }
        }
    }
    
    return $hasNested;
}","function candidate(...$args) {
    return is_nested(...$args);
}

function test(): void {
    if (candidate(""[[]]"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""[]]]]]]][[[[[]"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[][]"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[]"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[[[[]]]]"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""[]]]]]]]]]]"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[][][[]]"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""[[]"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[]]"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[[]][["") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""[[][]]"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[[[[[[[["") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""]]]]]]]]"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_133,vie_Latn,php,"<?php
//Ví dụ: //tròn mỗi phần tử trong mảng đến int trên ((Tên) đầu tiên. //Bạn cần phải trả về tổng số bình phương trong mảng đã cho, //Bạn được cung cấp một mảng các số.// >>> lst(array(1.0, 2.0, 3.0))
// 14
// >>> lst(array(1.0, 4.0, 9.0))
// 98
// >>> lst(array(1.0, 3.0, 5.0, 7.0))
// 84
// >>> lst(array(1.4, 4.2, 0.0))
// 29
// >>> lst(array(-2.4, 1.0, 1.0))
// 6
function sum_squares($lst) {
","function sum_squares($lst) {
    $sum = 0;
    foreach ($lst as $number) {
        $ceiledNumber = ceil($number);
        $sum += $ceiledNumber * $ceiledNumber;
    }
    return $sum;
}","function candidate(...$args) {
    return sum_squares(...$args);
}

function test(): void {
    if (candidate(array(1.0, 2.0, 3.0)) !== 14) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0)) !== 14) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 3.0, 5.0, 7.0)) !== 84) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.4, 4.2, 0.0)) !== 29) { throw new Exception(""Test failed!""); }
    if (candidate(array(-2.4, 1.0, 1.0)) !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(array(100.0, 1.0, 15.0, 2.0)) !== 10230) { throw new Exception(""Test failed!""); }
    if (candidate(array(10000.0, 10000.0)) !== 200000000) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1.4, 4.6, 6.3)) !== 75) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1.4, 17.9, 18.9, 19.9)) !== 1086) { throw new Exception(""Test failed!""); }
    if (candidate(array(0.0)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1.0)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1.0, 1.0, 0.0)) !== 2) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_134,vie_Latn,php,"<?php
//Ví dụ: //Lưu ý: ""word"" là một nhóm các ký tự được tách ra bởi không gian.//một phần của một từ, và sai nếu không.//của một chuỗi được cho là một ký tự bảng chữ cái và không phải là //Tạo hàm trả về true nếu ký tự cuối cùng là // >>> check_if_last_char_is_a_letter(""apple pie"")
// false
// >>> check_if_last_char_is_a_letter(""apple pi e"")
// true
// >>> check_if_last_char_is_a_letter(""apple pi e "")
// false
// >>> check_if_last_char_is_a_letter("""")
// false
function check_if_last_char_is_a_letter($txt) {
","function check_if_last_char_is_a_letter($txt) {
    // Trim any trailing spaces from the input string
    $trimmedTxt = rtrim($txt);

    // Return false if the trimmed string is empty
    if (empty($trimmedTxt)) {
        return false;
    }

    // Get the last character of the trimmed string
    $lastChar = substr($trimmedTxt, -1);

    // Check if the last character is an alphabetical letter
    if (ctype_alpha($lastChar)) {
        // Split the trimmed string into words
        $words = explode("" "", $trimmedTxt);
        
        // Get the last word
        $lastWord = end($words);
        
        // Check if the last word is a single character and return true or false
        return (strlen($lastWord) === 1);
    }

    return false;
}","function candidate(...$args) {
    return check_if_last_char_is_a_letter(...$args);
}

function test(): void {
    if (candidate(""apple"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""apple pi e"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""eeeee"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""A"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""Pumpkin pie "") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""Pumpkin pie 1"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""eeeee e "") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""apple pie"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""apple pi e "") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_135,vie_Latn,php,"<?php
//Ví dụ: //giá trị trùng lặp.//không có yếu tố như vậy tồn tại thì trả về -1. Mảng được đưa ra sẽ không chứa //không lớn hơn hoặc bằng phần tử ngay trước nó. Nếu //Tạo một hàm trả về chỉ số lớn nhất của một phần tử mà // >>> can_arrange(array(1, 2, 4, 3, 5))
// 3
// >>> can_arrange(array(1, 2, 3))
// -1
function can_arrange($arr) {
","function can_arrange($arr) {
    for ($i = count($arr) - 1; $i > 0; $i--) {
        if ($arr[$i] < $arr[$i - 1]) {
            return $i;
        }
    }
    return -1;
}","function candidate(...$args) {
    return can_arrange(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== -1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_136,vie_Latn,php,"<?php
//Ví dụ: //Nếu không có số nguyên âm hoặc dương, trả về chúng là null.//của các số nguyên dương trong mảng.//lớn nhất của số nguyên âm, và 'b' là nhỏ nhất //Tạo một hàm trả về mảng (a, b), trong đó 'a' là // >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))
// array(null, 1)
// >>> largest_smallest_integers(array())
// array(null, null)
// >>> largest_smallest_integers(array(0))
// array(null, null)
function largest_smallest_integers($lst) {
","function largest_smallest_integers($lst) {
    $largest_negative = null;
    $smallest_positive = null;

    foreach ($lst as $num) {
        if ($num < 0 && ($largest_negative === null || $num > $largest_negative)) {
            $largest_negative = $num;
        }
        if ($num > 0 && ($smallest_positive === null || $num < $smallest_positive)) {
            $smallest_positive = $num;
        }
    }

    return array($largest_negative, $smallest_positive);
}","function candidate(...$args) {
    return largest_smallest_integers(...$args);
}

function test(): void {
    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array(null, null)) { throw new Exception(""Test failed!""); }
    if (candidate(array(0)) !== array(null, null)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_137,vie_Latn,php,"<?php
//Lưu ý: Nếu một số thực được biểu diễn dưới dạng một chuỗi, dấu chấm nổi có thể là . hoặc , //Trả về null nếu các giá trị là bằng nhau. //số thực, và trả về biến lớn hơn trong loại biến đã cho.//Tạo một hàm mà có số nguyên, floats, hoặc chuỗi đại diện cho // >>> compare_one(1, 2.5)
// 2.5
// >>> compare_one(1, ""2,3"")
// ""2,3""
// >>> compare_one(""5,1"", ""6"")
// ""6""
// >>> compare_one(""1"", 1)
// null
function compare_one($a, $b) {
","function compare_one($a, $b) {
    // Function to convert string number with comma to float
    $convertToFloat = function($value) {
        if (is_string($value) && strpos($value, ',') !== false) {
            return floatval(str_replace(',', '.', $value));
        }
        return floatval($value);
    };

    // Convert to float for comparison, keep original for the result type
    $floatA = is_string($a) ? $convertToFloat($a) : floatval($a);
    $floatB = is_string($b) ? $convertToFloat($b) : floatval($b);

    // Compare converted float values
    if ($floatA > $floatB) {
        return $a;
    } elseif ($floatB > $floatA) {
        return $b;
    } else {
        return null;
    }
}","function candidate(...$args) {
    return compare_one(...$args);
}

function test(): void {
    if (candidate(1, 2) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(1, 2.5) !== 2.5) { throw new Exception(""Test failed!""); }
    if (candidate(2, 3) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(5, 6) !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(1, ""2,3"") !== ""2,3"") { throw new Exception(""Test failed!""); }
    if (candidate(""5,1"", ""6"") !== ""6"") { throw new Exception(""Test failed!""); }
    if (candidate(""1"", ""2"") !== ""2"") { throw new Exception(""Test failed!""); }
    if (candidate(""1"", 1) !== null) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_138,vie_Latn,php,"<?php
//Ví dụ //Đánh giá xem số n có thể được viết như là tổng của chính xác 4 số dương chẵn hay không.// >>> is_equal_to_sum_even(4)
// false
// >>> is_equal_to_sum_even(6)
// false
// >>> is_equal_to_sum_even(8)
// true
function is_equal_to_sum_even($n) {
","function is_equal_to_sum_even($n) {
    // Check if n is smaller than the smallest sum of 4 even numbers (2+2+2+2 = 8)
    if ($n < 8) {
        return false;
    }

    // Check if n is even, as the sum of even numbers is always even.
    if ($n % 2 != 0) {
        return false;
    }

    // Since we already checked for n < 8, any even number >= 8 can be formed as the sum of four even numbers.
    return true;
}

// Testing the function
var_dump(is_equal_to_sum_even(4)); // false
var_dump(is_equal_to_sum_even(6)); // false
var_dump(is_equal_to_sum_even(8)); // true","function candidate(...$args) {
    return is_equal_to_sum_even(...$args);
}

function test(): void {
    if (candidate(4) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(11) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(12) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(13) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(16) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_139,vie_Latn,php,"<?php
//Ví dụ: //trong đó n > 0 //brazilian_factorial (n) = n! * (n-1)! * (n-2)! * ... * 1! //Các hệ số Brazil được định nghĩa là: // >>> special_factorial(4)
// 288
// The function will receive an integer as input and should return the special
// factorial of this integer.
function special_factorial($n) {
","function special_factorial($n) {
    if ($n <= 0) {
        return 1;
    }

    $result = 1;
    for ($i = 1; $i <= $n; $i++) {
        $result *= factorial($i);
    }
    
    return $result;
}

function factorial($num) {
    if ($num == 0 || $num == 1) {
        return 1;
    }
    $fact = 1;
    for ($i = 2; $i <= $num; $i++) {
        $fact *= $i;
    }
    return $fact;
}","function candidate(...$args) {
    return special_factorial(...$args);
}

function test(): void {
    if (candidate(4) !== 288) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== 34560) { throw new Exception(""Test failed!""); }
    if (candidate(7) !== 125411328000) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== 1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_140,vie_Latn,php,"<?php
//sau đó thay thế tất cả các dấu cách liên tiếp bằng - //và nếu một chuỗi có nhiều hơn 2 khoảng trống liên tiếp, //Với một chuỗi văn bản, thay thế tất cả các khoảng trống trong đó bằng dấu gạch dưới, // >>> fix_spaces("" Example"")
// ""Example""
// >>> fix_spaces("" Example 1"")
// ""Example_1""
// >>> fix_spaces("" Example 2"")
// ""_Example_2""
// >>> fix_spaces("" Example 3"")
// ""_Example-3""
function fix_spaces($text) {
","function fix_spaces($text) {
    // Trim leading and trailing spaces
    $text = trim($text);
    
    // Replace 3 or more spaces with a single '-'
    $text = preg_replace('/ {3,}/', '-', $text);

    // Replace remaining spaces with underscores
    $text = str_replace(' ', '_', $text);
    
    return $text;
}","function candidate(...$args) {
    return fix_spaces(...$args);
}

function test(): void {
    if (candidate(""Example"") !== ""Example"") { throw new Exception(""Test failed!""); }
    if (candidate(""Mudasir Hanif "") !== ""Mudasir_Hanif_"") { throw new Exception(""Test failed!""); }
    if (candidate(""Yellow Yellow  Dirty  Fellow"") !== ""Yellow_Yellow__Dirty__Fellow"") { throw new Exception(""Test failed!""); }
    if (candidate(""Exa   mple"") !== ""Exa-mple"") { throw new Exception(""Test failed!""); }
    if (candidate(""   Exa 1 2 2 mple"") !== ""-Exa_1_2_2_mple"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_141,vie_Latn,php,"<?php
//Ví dụ: //- Dòng phụ sau dấu chấm phải là một trong những thứ này: ['txt', 'exe', 'dll'] //chữ cái Latinh ('a'-'z' và 'A'-'Z'). //- Các chuỗi con trước khi chấm không nên trống, và nó bắt đầu với một chữ cái từ //- Tên tập tin có chính xác một dấu chấm '.'//- Tên tập tin không được nhiều hơn ba chữ số ('0'-'9'). //được đáp ứng: //Tên của tập tin được coi là hợp lệ nếu và chỉ khi tất cả các điều kiện sau đây được đáp ứng.//'Vâng' nếu tên của tệp là hợp lệ, và trả về 'Không' nếu không.//Tạo một hàm lấy một chuỗi đại diện cho tên của tệp và trả về // >>> file_name_check(""example.txt"")
// ""Yes""
// >>> file_name_check(""1example.dll"")
// ""No""
function file_name_check($file_name) {
","function file_name_check($file_name) {
    // Check if there's exactly one dot
    if (substr_count($file_name, '.') !== 1) {
        return 'No';
    }

    // Split the filename into name and extension
    list($name, $extension) = explode('.', $file_name, 2);

    // Check if the name part is not empty and starts with a letter
    if (empty($name) || !ctype_alpha($name[0])) {
        return 'No';
    }

    // Check if the extension is one of the valid options
    $valid_extensions = ['txt', 'exe', 'dll'];
    if (!in_array($extension, $valid_extensions)) {
        return 'No';
    }

    // Count digits in the name
    $digit_count = preg_match_all('/[0-9]/', $name);
    if ($digit_count > 3) {
        return 'No';
    }
    
    return 'Yes';
}","function candidate(...$args) {
    return file_name_check(...$args);
}

function test(): void {
    if (candidate(""example.txt"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""1example.dll"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""s1sdf3.asd"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""K.dll"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""MY16FILE3.exe"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""His12FILE94.exe"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""_Y.txt"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""?aREYA.exe"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""/this_is_valid.dll"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""this_is_valid.wow"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""this_is_valid.txt"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""this_is_valid.txtexe"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""#this2_i4s_5valid.ten"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""@this1_is6_valid.exe"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""this_is_12valid.6exe4.txt"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""all.exe.txt"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""I563_No.exe"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""Is3youfault.txt"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""no_one#knows.dll"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""1I563_Yes3.exe"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""I563_Yes3.txtt"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""final..txt"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""final132"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""_f4indsartal132."") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate("".txt"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""s."") !== ""No"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_142,vie_Latn,php,"<?php
//Ví dụ: //thay đổi các mục trong mảng có chỉ mục không phải là bội số của 3 hoặc 4. hàm sau đó sẽ trả về tổng của tất cả các mục. //nhiều của 3 và sẽ lập phương cho mục nguyên nếu chỉ số của nó là nhiều của 4 và không phải là nhiều của 3.//Hàm này sẽ lấy một mảng các số nguyên. Đối với tất cả các mục trong mảng, hàm sẽ bình phương các mục số nguyên nếu chỉ số của nó là một //"" // >>> lst
// array(1, 2, 3)
// >>> lst
// array()
// >>> lst
// array(-1, -5, 2, -1, -5)
function sum_squares($lst) {
","function sum_squares($lst) {
    $n = count($lst);
    $sum = 0;

    for ($i = 0; $i < $n; $i++) {
        if ($i % 3 == 0) {
            $sum += $lst[$i] ** 2;
        } elseif ($i % 4 == 0) {
            $sum += $lst[$i] ** 3;
        } else {
            $sum += $lst[$i];
        }
    }

    return $sum;
}","function candidate(...$args) {
    return sum_squares(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(""Test failed!""); }
    if (candidate(array(0)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(""Test failed!""); }
    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_143,vie_Latn,php,"<?php
//Ví dụ 1: //thứ tự của các từ trong chuỗi mới phải giống như chuỗi ban đầu.//có chiều dài là số nguyên tố, //và bạn phải trả về một chuỗi chứa các từ từ câu ban đầu, //câu có chứa một số từ được tách ra bằng một khoảng trống, //Bạn được cho một chuỗi đại diện cho một câu, // >>> words_in_sentence(""This is a test"")
// ""is""
// Example 2:
// >>> words_in_sentence(""lets go for swimming"")
// ""go for""
// Constraints:
// * 1 <= len(sentence) <= 100
// * sentence contains only letters
function words_in_sentence($sentence) {
","function is_prime($num) {
    if ($num < 2) return false;
    for ($i = 2; $i <= sqrt($num); $i++) {
        if ($num % $i == 0) return false;
    }
    return true;
}

function words_in_sentence($sentence) {
    $words = explode(' ', $sentence);
    $result = [];

    foreach ($words as $word) {
        if (is_prime(strlen($word))) {
            $result[] = $word;
        }
    }
    
    return implode(' ', $result);
}","function candidate(...$args) {
    return words_in_sentence(...$args);
}

function test(): void {
    if (candidate(""This is a test"") !== ""is"") { throw new Exception(""Test failed!""); }
    if (candidate(""lets go for swimming"") !== ""go for"") { throw new Exception(""Test failed!""); }
    if (candidate(""there is no place available here"") !== ""there is no place"") { throw new Exception(""Test failed!""); }
    if (candidate(""Hi I am Hussein"") !== ""Hi am Hussein"") { throw new Exception(""Test failed!""); }
    if (candidate(""go for it"") !== ""go for it"") { throw new Exception(""Test failed!""); }
    if (candidate(""here"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""here is"") !== ""is"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_144,vie_Latn,php,"<?php
//Bạn có thể giả định rằng x, và n là phân số hợp lệ, và không có số 0 làm số gọi.//< số>/< mệnh số> trong đó cả số và mệnh số đều là số nguyên dương.//cả x và n, là biểu diễn chuỗi của một phân số, và có định dạng sau, //x * n. Hàm trả về true nếu x * n được định giá là một số nguyên và false //Nhiệm vụ của bạn là thực hiện một hàm sẽ đơn giản hóa biểu thức // >>> simplify(""1/5"", ""5/1"")
// true
// >>> simplify(""1/6"", ""2/1"")
// false
// >>> simplify(""7/10"", ""10/2"")
// false
function simplify($x, $n) {
","function simplify($x, $n) {
    list($xNum, $xDen) = explode('/', $x);
    list($nNum, $nDen) = explode('/', $n);

    // Multiply and simplify the expression x * n
    $resultNum = $xNum * $nNum;
    $resultDen = $xDen * $nDen;

    // Check if result is a whole number
    return ($resultNum % $resultDen === 0);
}","function candidate(...$args) {
    return simplify(...$args);
}

function test(): void {
    if (candidate(""1/5"", ""5/1"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""1/6"", ""2/1"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""5/1"", ""3/1"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""7/10"", ""10/2"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""2/10"", ""50/10"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""7/2"", ""4/2"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""11/6"", ""6/1"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""2/3"", ""5/2"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""5/2"", ""3/5"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""2/4"", ""8/4"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""2/4"", ""4/2"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""1/5"", ""5/1"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""1/5"", ""1/5"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_145,vie_Latn,php,"<?php
//Ví dụ: //sắp xếp chúng dựa trên chỉ mục của chúng trong mảng ban đầu.//Lưu ý: nếu có một số mục có tổng số chữ số tương tự, //theo thứ tự tăng dần theo tổng số chữ số của chúng.//Viết một hàm sắp xếp mảng số nguyên // >>> order_by_points(array(1, 11, -1, -11, -12))
// array(-1, -11, 1, -12, 11)
// >>> order_by_points(array())
// array()
function order_by_points($nums) {
","function order_by_points($nums) {
    usort($nums, function($a, $b) use ($nums) {
        $sumOfDigits = function($n) {
            $n = abs($n); // Use absolute value to ignore negative sign
            $sum = 0;
            while ($n > 0) {
                $sum += $n % 10;
                $n = intdiv($n, 10);
            }
            return $sum;
        };
        
        $sumA = $sumOfDigits($a);
        $sumB = $sumOfDigits($b);
        
        if ($sumA === $sumB) {
            // Maintain original order if sums are equal
            return array_search($a, $nums) <=> array_search($b, $nums);
        }
        
        return $sumA <=> $sumB;
    });
    
    return $nums;
}","function candidate(...$args) {
    return order_by_points(...$args);
}

function test(): void {
    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1, -11, 1, -12, 11)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !== array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_146,vie_Latn,php,"<?php
//Ví dụ: //chữ số đầu tiên và cuối cùng của một số là lẻ (1, 3, 5, 7, 9).//số lượng các phần tử trong mảng lớn hơn 10 và cả hai //Viết một hàm lấy mảng số làm đầu vào và trả về // >>> specialFilter(array(15, -73, 14, -15))
// 1
// >>> specialFilter(array(33, -2, -3, 45, 21, 109))
// 2
function specialFilter($nums) {
","function specialFilter($nums) {
    $count = 0;

    foreach ($nums as $num) {
        if ($num > 10) {
            $absNum = abs($num);
            $firstDigit = intval(substr((string)$absNum, 0, 1));
            $lastDigit = $absNum % 10;

            if (in_array($firstDigit, array(1, 3, 5, 7, 9)) && in_array($lastDigit, array(1, 3, 5, 7, 9))) {
                $count++;
            }
        }
    }

    return $count;
}","function candidate(...$args) {
    return specialFilter(...$args);
}

function test(): void {
    if (candidate(array(5, -2, 1, -5)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(15, -73, 14, -15)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(33, -2, -3, 45, 21, 109)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(43, -12, 93, 125, 121, 109)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(71, -2, -33, 75, 21, 19)) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_147,vie_Latn,php,"<?php
//Ví dụ://và a[i] + a[j] + a[k] là bội số của 3. //Trả về số lượng ba (a[i], a[j], a[k]) của a trong đó i < j < k, //Đối với mỗi i (1 ≤ i ≤ n), giá trị của a[i] = i * i - i + 1. //Bạn được cho một số nguyên dương n. Bạn phải tạo một mảng số nguyên a có chiều dài n. // >>> get_max_triples(5)
// 1
// Explanation: 
// a = [1, 3, 7, 13, 21]
// The only valid triple is (1, 7, 13).
function get_max_triples($n) {
","function get_max_triples($n) {
    $a = array();
    for ($i = 1; $i <= $n; $i++) {
        $a[$i - 1] = $i * $i - $i + 1;
    }

    $count = 0;
    
    for ($i = 0; $i < $n; $i++) {
        for ($j = $i + 1; $j < $n; $j++) {
            for ($k = $j + 1; $k < $n; $k++) {
                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {
                    $count++;
                }
            }
        }
    }
    
    return $count;
}","function candidate(...$args) {
    return get_max_triples(...$args);
}

function test(): void {
    if (candidate(5) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== 36) { throw new Exception(""Test failed!""); }
    if (candidate(100) !== 53361) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_148,vie_Latn,php,"<?php
//Ví dụ //không phải là tên đúng của hành tinh.//Hàm sẽ trả về mảng trống nếu planet1 hoặc planet2 //gần mặt trời.//nằm giữa quỹ đạo của hành tinh 1 và quỹ đạo của hành tinh 2, được sắp xếp theo //Hàm sẽ trả về một mảng chứa tất cả các hành tinh có quỹ đạo là //Viết một hàm mà có hai tên hành tinh như chuỗi planet1 và planet2. //Sao Thiên Vương, Sao Hải Vương.//là sao Thủy, tiếp theo là sao Kim, sau đó là Trái đất, sao Hỏa, sao Mộc, sao Thổ,//Có tám hành tinh trong hệ mặt trời của chúng ta: gần Mặt trời nhất.// >>> bf(""Jupiter"", ""Neptune"")
// array(""Saturn"", ""Uranus"")
// >>> bf(""Earth"", ""Mercury"")
// ""Venus""
// >>> bf(""Mercury"", ""Uranus"")
// array(""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
function bf($planet1, $planet2) {
","function bf($planet1, $planet2) {
    $planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""];

    $index1 = array_search($planet1, $planets);
    $index2 = array_search($planet2, $planets);

    if ($index1 === false || $index2 === false) {
        return [];
    }

    if ($index1 > $index2) {
        $temp = $index1;
        $index1 = $index2;
        $index2 = $temp;
    }

    return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);
}","function candidate(...$args) {
    return bf(...$args);
}

function test(): void {
    if (candidate(""Jupiter"", ""Neptune"") !== array(""Saturn"", ""Uranus"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Earth"", ""Mercury"") !== array(""Venus"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Mercury"", ""Uranus"") !== array(""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Neptune"", ""Venus"") !== array(""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Earth"", ""Earth"") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""Mars"", ""Earth"") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""Jupiter"", ""Makemake"") !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_149,vie_Latn,php,"<?php
//Ví dụ: //Bạn có thể giả định rằng tất cả các từ sẽ có cùng chiều dài.//Hàm sẽ trả về một mảng chuỗi trong thứ tự được sắp xếp.//Nếu hai từ có cùng chiều dài, sắp xếp mảng theo thứ tự bảng chữ cái.//sẽ trả về mảng được sắp xếp theo quy tắc đó.//Trật tự của mảng nên được tăng theo chiều dài của mỗi từ, và bạn //và nó có thể chứa các bản sao.//Mảng luôn luôn là một mảng của chuỗi và không bao giờ là một mảng của số, //và trả về mảng kết quả với thứ tự được sắp xếp, //xóa các chuỗi có chiều dài lẻ từ nó, //Viết một hàm chấp nhận một mảng các chuỗi như một tham số, // >>> list_sort(array(""aa"", ""a"", ""aaa""))
// array(""aa"")
// >>> list_sort(array(""ab"", ""a"", ""aaa"", ""cd""))
// array(""ab"", ""cd"")
function sorted_list_sum($lst) {
","function sorted_list_sum($lst) {
    // Filter out strings with odd lengths
    $filtered = array_filter($lst, function($str) {
        return strlen($str) % 2 == 0;
    });
    
    // Sort the filtered array by length and then alphabetically
    usort($filtered, function($a, $b) {
        $lengthComparison = strlen($a) - strlen($b);
        if ($lengthComparison == 0) {
            return strcmp($a, $b);
        }
        return $lengthComparison;
    });

    return $filtered;
}","function candidate(...$args) {
    return sorted_list_sum(...$args);
}

function test(): void {
    if (candidate(array(""aa"", ""a"", ""aaa"")) !== array(""aa"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""school"", ""AI"", ""asdf"", ""b"")) !== array(""AI"", ""asdf"", ""school"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""d"", ""b"", ""c"", ""a"")) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(""d"", ""dcba"", ""abcd"", ""a"")) !== array(""abcd"", ""dcba"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""AI"", ""ai"", ""au"")) !== array(""AI"", ""ai"", ""au"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""a"", ""b"", ""b"", ""c"", ""c"", ""a"")) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(""aaaa"", ""bbbb"", ""dd"", ""cc"")) !== array(""cc"", ""dd"", ""aaaa"", ""bbbb"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_150,vie_Latn,php,"<?php
//Ví dụ: //một số nguyên tố và sẽ trả về giá trị của y nếu không.//Một chương trình đơn giản sẽ trả về giá trị của x nếu n là // >>> x_or_y(7, 34, 12)
// 34
// >>> x_or_y(15, 8, 5)
// 5
function x_or_y($n, $x, $y) {
","function x_or_y($n, $x, $y) {
    if (is_prime($n)) {
        return $x;
    } else {
        return $y;
    }
}

function is_prime($num) {
    if ($num <= 1) {
        return false;
    }
    if ($num <= 3) {
        return true;
    }
    if ($num % 2 == 0 || $num % 3 == 0) {
        return false;
    }
    for ($i = 5; $i * $i <= $num; $i += 6) {
        if ($num % $i == 0 || $num % ($i + 2) == 0) {
            return false;
        }
    }
    return true;
}","function candidate(...$args) {
    return x_or_y(...$args);
}

function test(): void {
    if (candidate(7, 34, 12) !== 34) { throw new Exception(""Test failed!""); }
    if (candidate(15, 8, 5) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(3, 33, 5212) !== 33) { throw new Exception(""Test failed!""); }
    if (candidate(1259, 3, 52) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(7919, -1, 12) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(3609, 1245, 583) !== 583) { throw new Exception(""Test failed!""); }
    if (candidate(91, 56, 129) !== 129) { throw new Exception(""Test failed!""); }
    if (candidate(6, 34, 1234) !== 1234) { throw new Exception(""Test failed!""); }
    if (candidate(1, 2, 0) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(2, 2, 0) !== 2) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_151,vie_Latn,php,"<?php
//bỏ qua những số âm hoặc không phải là số nguyên.//Cho một mảng các số, trả về tổng số vuông của các số // >>> double_the_difference(array(1, 3, 2, 0))
// 10
// >>> double_the_difference(array(-1, -2, 0))
// 0
// >>> double_the_difference(array(9, -2))
// 81
// >>> double_the_difference(array(0))
// 0
// If the input array is empty, return 0.
function double_the_difference($lst) {
","function double_the_difference($lst) {
    $sum = 0;
    foreach ($lst as $num) {
        if (is_int($num) && $num > 0 && $num % 2 !== 0) {
            $sum += $num * $num;
        }
    }
    return $sum;
}

// Example usage:
// echo double_the_difference(array(1, 3, 2, 0)); // 10
// echo double_the_difference(array(-1, -2, 0)); // 0
// echo double_the_difference(array(9, -2)); // 81
// echo double_the_difference(array(0)); // 0","function candidate(...$args) {
    return double_the_difference(...$args);
}

function test(): void {
    if (candidate(array()) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(5.0, 4.0)) !== 25) { throw new Exception(""Test failed!""); }
    if (candidate(array(0.1, 0.2, 0.3)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-10.0, -20.0, -30.0)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1.0, -2.0, 8.0)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(0.2, 3.0, 5.0)) !== 34) { throw new Exception(""Test failed!""); }
    if (candidate(array(-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0)) !== 165) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_152,vie_Latn,php,"<?php
//ví dụ: //giá trị là 0, và nếu không, giá trị là sự khác biệt tuyệt đối giữa phỏng đoán và điểm số. //Trả về một mảng cùng chiều dài biểu thị cách xa của mỗi phỏng đoán. Nếu họ đã đoán đúng, //Bạn được cung cấp hai mảng điểm số và đoán có chiều dài bằng nhau, trong đó mỗi chỉ số cho thấy một trận đấu.//Nhiệm vụ của bạn là xác định xem một người đã đoán đúng kết quả của một số trận đấu.//Chắc chắn đáng để ghi lại và so sánh.//Những cảm xúc và suy nghĩ của bạn vào thời điểm đó là những gì bạn đang nghĩ.//Tôi nghĩ tất cả chúng ta đều nhớ cảm giác đó khi kết quả của một số điều được chờ đợi từ lâu// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))
// array(0, 0, 0, 0, 3, 3)
// >>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))
// array(4, 4, 1, 0, 0, 6)
function compare($game, $guess) {
","function compare($game, $guess) {
    $result = array();
    for ($i = 0; $i < count($game); $i++) {
        $result[] = abs($game[$i] - $guess[$i]);
    }
    return $result;
}","function candidate(...$args) {
    return compare(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_153,vie_Latn,php,"<?php
//Ví dụ: //(cường độ của nó là -1).//trả về ""Slices.SErviNGSliCes"" vì ""SErviNGSliCes"" là phần mở rộng mạnh nhất //extension: ['SErviNGSliCes', 'Cheese', 'StuFfed'] thì bạn nên //Ví dụ, nếu bạn được cho ""Slices"" như là lớp và một mảng của //chọn cái xuất hiện đầu tiên trong mảng.//Nếu có hai hoặc nhiều phần mở rộng với cùng một sức mạnh, bạn nên//format: ClassName.StrongestExtensionName. //Bạn nên tìm phần mở rộng mạnh nhất và trả về một chuỗi trong này.//trong tên của phần mở rộng, cường độ được đưa ra bằng phân số CAP - SM. //chữ cái trong tên của phần mở rộng, và hãy để SM là số chữ cái nhỏ //sức mạnh của phần mở rộng như sau: Hãy để CAP là số của chữ cái lớn //Các phần mở rộng được sử dụng để tải các lớp bổ sung cho lớp.//Bạn sẽ được cung cấp tên của một lớp (một chuỗi) và một mảng các phần mở rộng.// >>> Strongest_Extension(""my_class"", array(""AA"", ""Be"", ""CC""))
// ""my_class.AA""
function Strongest_Extension($class_name, $extensions) {
","function Strongest_Extension($class_name, $extensions) {
    $strongestExtension = '';
    $maxStrength = null;

    foreach ($extensions as $extension) {
        $cap = preg_match_all('/[A-Z]/', $extension);
        $sm = preg_match_all('/[a-z]/', $extension);
        $strength = $cap - $sm;

        if ($maxStrength === null || $strength > $maxStrength) {
            $maxStrength = $strength;
            $strongestExtension = $extension;
        }
    }

    return $class_name . '.' . $strongestExtension;
}","function candidate(...$args) {
    return Strongest_Extension(...$args);
}

function test(): void {
    if (candidate(""Watashi"", array(""tEN"", ""niNE"", ""eIGHt8OKe"")) !== ""Watashi.eIGHt8OKe"") { throw new Exception(""Test failed!""); }
    if (candidate(""Boku123"", array(""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg"")) !== ""Boku123.YEs.WeCaNe"") { throw new Exception(""Test failed!""); }
    if (candidate(""__YESIMHERE"", array(""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321"")) !== ""__YESIMHERE.NuLl__"") { throw new Exception(""Test failed!""); }
    if (candidate(""K"", array(""Ta"", ""TAR"", ""t234An"", ""cosSo"")) !== ""K.TAR"") { throw new Exception(""Test failed!""); }
    if (candidate(""__HAHA"", array(""Tab"", ""123"", ""781345"", ""-_-"")) !== ""__HAHA.123"") { throw new Exception(""Test failed!""); }
    if (candidate(""YameRore"", array(""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-"")) !== ""YameRore.okIWILL123"") { throw new Exception(""Test failed!""); }
    if (candidate(""finNNalLLly"", array(""Die"", ""NowW"", ""Wow"", ""WoW"")) !== ""finNNalLLly.WoW"") { throw new Exception(""Test failed!""); }
    if (candidate(""_"", array(""Bb"", ""91245"")) !== ""_.Bb"") { throw new Exception(""Test failed!""); }
    if (candidate(""Sp"", array(""671235"", ""Bb"")) !== ""Sp.671235"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_154,vie_Latn,php,"<?php
//Bạn được cung cấp 2 từ. Bạn cần phải trả về đúng nếu từ thứ hai hoặc bất kỳ vòng quay của nó là một chuỗi con trong từ đầu tiên.// >>> cycpattern_check(""abcd"", ""abd"")
// false
// >>> cycpattern_check(""hello"", ""ell"")
// true
// >>> cycpattern_check(""whassup"", ""psus"")
// false
// >>> cycpattern_check(""abab"", ""baa"")
// true
// >>> cycpattern_check(""efef"", ""eeff"")
// false
// >>> cycpattern_check(""himenss"", ""simen"")
// true
function cycpattern_check($a, $b) {
","function cycpattern_check($a, $b) {
    $lenB = strlen($b);
    // Generate all rotations of the second word
    for ($i = 0; $i < $lenB; $i++) {
        $rotation = substr($b, $i) . substr($b, 0, $i);
        if (strpos($a, $rotation) !== false) {
            return true;
        }
    }
    return false;
}","function candidate(...$args) {
    return cycpattern_check(...$args);
}

function test(): void {
    if (candidate(""xyzw"", ""xyw"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""yello"", ""ell"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""whattup"", ""ptut"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""efef"", ""fee"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""abab"", ""aabb"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""winemtt"", ""tinem"") !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_155,vie_Latn,php,"<?php
//Ví dụ: //Cho một số nguyên. trả về một mảng có số chữ số chẵn và lẻ tương ứng. // >>> even_odd_count(-12)
// array(1, 1)
// >>> even_odd_count(123)
// array(1, 2)
function even_odd_count($num) {
","function even_odd_count($num) {
    $num = abs($num);
    $evenCount = 0;
    $oddCount = 0;

    while ($num > 0) {
        $digit = $num % 10;
        if ($digit % 2 == 0) {
            $evenCount++;
        } else {
            $oddCount++;
        }
        $num = intval($num / 10);
    }

    return array($evenCount, $oddCount);
}","function candidate(...$args) {
    return even_odd_count(...$args);
}

function test(): void {
    if (candidate(7) !== array(0, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(-78) !== array(1, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(3452) !== array(2, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(346211) !== array(3, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(-345821) !== array(3, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(-2) !== array(1, 0)) { throw new Exception(""Test failed!""); }
    if (candidate(-45347) !== array(2, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(0) !== array(1, 0)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_156,vie_Latn,php,"<?php
//Ví dụ: //Hạn chế: 1 <= số <= 1000 //và trả về nó bằng chữ cái nhỏ.//Cho một số nguyên dương, lấy số La Mã tương đương của nó như một chuỗi, // >>> int_to_mini_roman(19)
// ""xix""
// >>> int_to_mini_roman(152)
// ""clii""
// >>> int_to_mini_roman(426)
// ""cdxxvi""
function int_to_mini_roman($number) {
","function int_to_mini_roman($number) {
    $map = [
        1000 => 'm',
        900 => 'cm',
        500 => 'd',
        400 => 'cd',
        100 => 'c',
        90 => 'xc',
        50 => 'l',
        40 => 'xl',
        10 => 'x',
        9 => 'ix',
        5 => 'v',
        4 => 'iv',
        1 => 'i'
    ];

    $roman = '';
    while ($number > 0) {
        foreach ($map as $val => $symbol) {
            if ($number >= $val) {
                $roman .= $symbol;
                $number -= $val;
                break;
            }
        }
    }

    return $roman;
}","function candidate(...$args) {
    return int_to_mini_roman(...$args);
}

function test(): void {
    if (candidate(19) !== ""xix"") { throw new Exception(""Test failed!""); }
    if (candidate(152) !== ""clii"") { throw new Exception(""Test failed!""); }
    if (candidate(251) !== ""ccli"") { throw new Exception(""Test failed!""); }
    if (candidate(426) !== ""cdxxvi"") { throw new Exception(""Test failed!""); }
    if (candidate(500) !== ""d"") { throw new Exception(""Test failed!""); }
    if (candidate(1) !== ""i"") { throw new Exception(""Test failed!""); }
    if (candidate(4) !== ""iv"") { throw new Exception(""Test failed!""); }
    if (candidate(43) !== ""xliii"") { throw new Exception(""Test failed!""); }
    if (candidate(90) !== ""xc"") { throw new Exception(""Test failed!""); }
    if (candidate(94) !== ""xciv"") { throw new Exception(""Test failed!""); }
    if (candidate(532) !== ""dxxxii"") { throw new Exception(""Test failed!""); }
    if (candidate(900) !== ""cm"") { throw new Exception(""Test failed!""); }
    if (candidate(994) !== ""cmxciv"") { throw new Exception(""Test failed!""); }
    if (candidate(1000) !== ""m"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_157,vie_Latn,php,"<?php
//Ví dụ: //90 độ.//Một tam giác góc phải là một tam giác trong đó một góc là góc phải hoặc //các bên tạo thành một tam giác góc phải, sai nếu không.//Cho các chiều dài của ba bên của một tam giác. trả về đúng nếu ba // >>> right_angle_triangle(3, 4, 5)
// true
// >>> right_angle_triangle(1, 2, 3)
// false
function right_angle_triangle($a, $b, $c) {
","function right_angle_triangle($a, $b, $c) {
    // Sort the sides to make it easier to apply the Pythagorean theorem
    $sides = [$a, $b, $c];
    sort($sides);
    
    // Apply the Pythagorean theorem to check for a right-angled triangle
    return $sides[0] ** 2 + $sides[1] ** 2 === $sides[2] ** 2;
}","function candidate(...$args) {
    return right_angle_triangle(...$args);
}

function test(): void {
    if (candidate(3, 4, 5) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(1, 2, 3) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(10, 6, 8) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(2, 2, 2) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(7, 24, 25) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(10, 5, 7) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(5, 12, 13) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(15, 8, 17) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(48, 55, 73) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(1, 1, 1) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(2, 2, 10) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_158,vie_Latn,php,"<?php
//ký tự, trả về một trong những thứ tự xuất hiện đầu tiên trong bảng từ vựng. //của các ký tự duy nhất. Nếu nhiều chuỗi có số lượng tối đa của các độc đáo //Mảng chứa các từ khác nhau. Trả về từ với số lượng tối đa //Viết một hàm chấp nhận một mảng các chuỗi. // >>> find_max(array(""name"", ""of"", ""string""))
// ""string""
// >>> find_max(array(""name"", ""enam"", ""game""))
// ""enam""
// >>> find_max(array(""aaaaaaa"", ""bb"", ""cc""))
// ""aaaaaaa""
function find_max($words) {
","function find_max($words) {
    $maxUniqueChars = 0;
    $result = '';
    
    foreach ($words as $word) {
        // Get unique characters count
        $uniqueCharsCount = count(array_unique(str_split($word)));
        
        // Determine if this word has more unique characters or comes first lexicographically
        if ($uniqueCharsCount > $maxUniqueChars || ($uniqueCharsCount === $maxUniqueChars && ($result === '' || strcmp($word, $result) < 0))) {
            $maxUniqueChars = $uniqueCharsCount;
            $result = $word;
        }
    }
    
    return $result;
}","function candidate(...$args) {
    return find_max(...$args);
}

function test(): void {
    if (candidate(array(""name"", ""of"", ""string"")) !== ""string"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""name"", ""enam"", ""game"")) !== ""enam"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""aaaaaaa"", ""bb"", ""cc"")) !== ""aaaaaaa"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""abc"", ""cba"")) !== ""abc"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""play"", ""this"", ""game"", ""of"", ""footbott"")) !== ""footbott"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""we"", ""are"", ""gonna"", ""rock"")) !== ""gonna"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""we"", ""are"", ""a"", ""mad"", ""nation"")) !== ""nation"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""this"", ""is"", ""a"", ""prrk"")) !== ""this"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""b"")) !== ""b"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""play"", ""play"", ""play"")) !== ""play"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_159,vie_Latn,php,"<?php
//Ví dụ: //nếu không có đủ cà rốt còn lại, bạn sẽ ăn tất cả cà rốt còn lại, nhưng vẫn sẽ đói.//số cà rốt còn lại sau bữa ăn của bạn ] //bạn nên trả lại một mảng [tổng số cà rốt ăn sau bữa ăn của bạn, //Nhưng bây giờ bạn cần ăn nhiều cà rốt hơn để hoàn thành bữa ăn trong ngày.//Anh là một con thỏ đói, và anh đã ăn một số cà rốt nhất định,// >>> eat(5, 6, 10)
// array(11, 4)
// >>> eat(4, 8, 9)
// array(12, 1)
// >>> eat(1, 10, 10)
// array(11, 0)
// >>> eat(2, 11, 5)
// array(7, 0)
// Variables:
// @number : integer
// the number of carrots that you have eaten.
// @need : integer
// the number of carrots that you need to eat.
// @remaining : integer
// the number of remaining carrots thet exist in stock
// Constrain:
// * 0 <= number <= 1000
// * 0 <= need <= 1000
// * 0 <= remaining <= 1000
// Have fun :)
function eat($number, $need, $remaining) {
","function eat($number, $need, $remaining) {
    $totalEaten = $number + min($need, $remaining);
    $carrotsLeft = max(0, $remaining - $need);
    return array($totalEaten, $carrotsLeft);
}","function candidate(...$args) {
    return eat(...$args);
}

function test(): void {
    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(""Test failed!""); }
    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(""Test failed!""); }
    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_160,vie_Latn,php,"<?php
//Mảng toán tử có ít nhất một toán tử và mảng operand có ít nhất hai operand.//Ứng số là mảng của các số nguyên không âm.//Chiều dài của mảng toán tử bằng chiều dài của mảng operand trừ một.//Lưu ý://=> kết quả = 9 //kết quả = 2 + 3 * 4 - 5 //mảng = [2, 3, 4, 5] //nhà điều hành['+', '*', '-'] //Ví dụ: //Tăng gấp đôi (**) //Phân chia tầng ( //) //Nhân (*) //Bước trừ ( - ) //Thêm (+) //Các phép toán đại số cơ bản://biểu thức và trả về đánh giá của biểu thức này.//mảng thứ hai là mảng của các số nguyên. Sử dụng hai mảng được đưa ra để xây dựng các đại số //Với hai toán tử mảng, và hàm số. mảng đầu tiên có các hoạt động đại số cơ bản, và function do_algebra($operator, $operand) {
","function do_algebra($operator, $operand) {
    $expression = $operand[0]; // Start with the first operand
    for ($i = 0; $i < count($operator); $i++) {
        $currentOperator = $operator[$i];
        $currentOperand = $operand[$i + 1];
        
        switch ($currentOperator) {
            case '+':
                $expression .= "" + $currentOperand"";
                break;
            case '-':
                $expression .= "" - $currentOperand"";
                break;
            case '*':
                $expression .= "" * $currentOperand"";
                break;
            case '//':
                $expression .= "" // $currentOperand"";
                break;
            case '**':
                $expression .= "" ** $currentOperand"";
                break;
        }
    }

    // Use eval to evaluate the constructed expression
    eval(""\$result = {$expression};"");

    // Return the result
    return $result;
}","function candidate(...$args) {
    return do_algebra(...$args);
}

function test(): void {
    if (candidate(array(""**"", ""*"", ""+""), array(2, 3, 4, 5)) !== 37) { throw new Exception(""Test failed!""); }
    if (candidate(array(""+"", ""*"", ""-""), array(2, 3, 4, 5)) !== 9) { throw new Exception(""Test failed!""); }
    if (candidate(array(""//"", ""*""), array(7, 3, 4)) !== 8) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_161,vie_Latn,php,"<?php
//Ví dụ //Hàm sẽ trả về chuỗi kết quả.//Nếu chuỗi không có chữ cái, hãy đảo ngược chuỗi.//Nếu không thì cứ giữ nguyên.//nếu s[i] là một chữ cái, hãy đảo ngược trường hợp của nó từ dưới lên trên hoặc ngược lại, //Bạn được cho một chuỗi s.// >>> solve(""1234"")
// ""4321""
// >>> solve(""ab"")
// ""AB""
// >>> solve(""#a@C"")
// ""#A@c""
function solve($s) {
","function solve($s) {
    // Check if the string contains any letter
    if (preg_match('/[a-zA-Z]/', $s)) {
        // Change the case for each character in the string
        $result = '';
        for ($i = 0; $i < strlen($s); $i++) {
            $char = $s[$i];
            if (ctype_alpha($char)) {
                // If the character is a letter, reverse its case
                if (ctype_lower($char)) {
                    $result .= strtoupper($char);
                } else {
                    $result .= strtolower($char);
                }
            } else {
                // Otherwise, keep it as it is
                $result .= $char;
            }
        }
        return $result;
    } else {
        // If the string contains no letters, reverse the string
        return strrev($s);
    }
}","function candidate(...$args) {
    return solve(...$args);
}

function test(): void {
    if (candidate(""AsDf"") !== ""aSdF"") { throw new Exception(""Test failed!""); }
    if (candidate(""1234"") !== ""4321"") { throw new Exception(""Test failed!""); }
    if (candidate(""ab"") !== ""AB"") { throw new Exception(""Test failed!""); }
    if (candidate(""#a@C"") !== ""#A@c"") { throw new Exception(""Test failed!""); }
    if (candidate(""#AsdfW^45"") !== ""#aSDFw^45"") { throw new Exception(""Test failed!""); }
    if (candidate(""#6@2"") !== ""2@6#"") { throw new Exception(""Test failed!""); }
    if (candidate(""#$a^D"") !== ""#$A^d"") { throw new Exception(""Test failed!""); }
    if (candidate(""#ccc"") !== ""#CCC"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_162,vie_Latn,php,"<?php
//Nếu 'text' là một chuỗi trống, trả về null. //Với một chuỗi 'text', trả về chuỗi tương đương md5 hash của nó. // >>> string_to_md5(""Hello world"")
// ""3e25960a79dbc69b674cd4ec67a72c62""
function string_to_md5($text) {
","function string_to_md5($text) {
    if ($text === '') {
        return null;
    }
    return md5($text);
}","function candidate(...$args) {
    return string_to_md5(...$args);
}

function test(): void {
    if (candidate(""Hello world"") !== ""3e25960a79dbc69b674cd4ec67a72c62"") { throw new Exception(""Test failed!""); }
    if (candidate("""") !== null) { throw new Exception(""Test failed!""); }
    if (candidate(""A B C"") !== ""0ef78513b0cb8cef12743f5aeb35f888"") { throw new Exception(""Test failed!""); }
    if (candidate(""password"") !== ""5f4dcc3b5aa765d61d8327deb882cf99"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_163,vie_Latn,php,"<?php
//Ví dụ: //và b, theo thứ tự tăng dần.//Cho hai số nguyên dương a và b, trả về các chữ số chẵn giữa a // >>> generate_integers(2, 8)
// array(2, 4, 6, 8)
// >>> generate_integers(8, 2)
// array(2, 4, 6, 8)
// >>> generate_integers(10, 14)
// array()
function generate_integers($a, $b) {
","function generate_integers($a, $b) {
    $evenNumbers = [];
    $start = min($a, $b);
    $end = max($a, $b);
    for ($i = $start; $i <= $end; $i++) {
        if ($i % 2 == 0) {
            $evenNumbers[] = $i;
        }
    }
    return $evenNumbers;
}","function candidate(...$args) {
    return generate_integers(...$args);
}

function test(): void {
    if (candidate(2, 10) !== array(2, 4, 6, 8)) { throw new Exception(""Test failed!""); }
    if (candidate(10, 2) !== array(2, 4, 6, 8)) { throw new Exception(""Test failed!""); }
    if (candidate(132, 2) !== array(2, 4, 6, 8)) { throw new Exception(""Test failed!""); }
    if (candidate(17, 89) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
