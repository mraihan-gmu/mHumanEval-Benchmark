task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,run_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Raba nimba mu rutonde rw'imibare, hari imibare ibiri yegeranye kurusha urugero rwatanzwe. Akarorero: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,run_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Ibigwi vy'abantu bitandukanije biringanirana (buri gikingi cuguruye gifunze neza) kandi ntibigwize hagati yavyo. Ignore any spaces in the input string. Example: >>> separate_paren_groups' ((( ) (() (( ) ) ) ) ' ['() ', '(()) ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,run_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Duhawe igitigiri c'igitigiri c'igitigiri, gishobora gutandukanywa n'igice c'igitigiri cose (igitigiri kinini c'igitigiri cose kiri munsi y'igitigiri cahawe) n'ibice vy'ibiharuro (igice gisigaye cama kiri munsi y'igiharuro 1).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,run_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Uronka urutonde rw'ibikorwa vyo kubitsa no kubikuza kuri konti ya banki itangurira ku mahera y'ubusa. Igikorwa cawe ni ukumenya nimba umwanya uwo ari wo wose amafranga y'ikonte agera munsi y'ubusa, kandi kuri uwo mwanya igikorwa gikwiye kugaruka Kuri. Ahandi ho gikwiye kugaruka Ikinyoma. Akarorero: >>> below_zero([1, 2, 3]) Ikinyoma >>> below_zero([1, 2, -4, 5]) Ukuri """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,run_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Mu rutonde rw'ibiharuro vy'ibiharuro, duharure igabanywa ry'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro""""""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,run_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Shira igitigiri ""delimeter"" hagati y'ibintu bibiri bikurikirana vy'urutonde rw'ibiri mu mwinjizo `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,run_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Mu vyo winjiza muri iyi fone, ni urukurikirane rw'imirwi myinshi y'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira vy'ibisigarira""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,run_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Gucungera urutonde rw'imiterere y'amajambo gusa ku biyirimwo >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,run_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Ku rutonde rw'intango, dusubire tuple igizwe n'igiteranyo hamwe n'igiteranyo c'intango zose ziri ku rutonde. Igiteranyo kitagira ikintu gikwiye kungana na 0 n'igiteranyo kitagira ikintu gikwiye kungana na 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,run_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Kuva ku rutonde rw'ibiharuro, tanga urutonde rw'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro""""""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,run_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Kuronka palindrome ngufi itangurwa n'umurongo wahawe. Igitekerezo ca algorithme kiroroshe: - Kuronka postfix ndende ya murongo wahawe ari palindrome. - Kwongera ku mpera y'umurongo utera imbere y'umurongo w'umurongo utera imbere imbere y'inyongera ya palindrome. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Gerageza urabe ko urukurikirane rw'indome ari urukurikirane rw'indome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,run_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Input ni imirongo ibiri a na b igizwe n'1 na 0 gusa. Kora XOR ya binary kuri izi nyishu maze ugaruke n'umusoro. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,run_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Mu rutonde rw'imivugo, subira inyuma irya mbere. Subira inyuma irya mbere mu gihe hari imivugo myinshi y'uburebure bumwe. Subira inyuma Nta na kimwe mu gihe urutonde rw'ibiri mu mwinjizo ata kintu kirimwo. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,run_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Subira muri karangura ya kabiri y'inyongera y'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro.""""""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,run_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Urutonde rw'indangamuntu zose kuva ku ndende ugashitsa ku ngufi z'urutonde rw'indangamuntu >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,run_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Hagaruka umurongo urimwo ibiharuro vy'ibibanza bifise aho biherereye kuva kuri 0 gushika kuri n. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,run_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Mu nkoranyajwi, raba ingene ingero zitandukanye (utarinze kuraba ingene zikurikirana) zigizwe n'indome >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,run_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Mu vyo ukora, ni ukurondora urutonde rw'imirongo y'intoke y'intoke z'intoke zingana n'ibicurarangisho vyinshi. Ng'iyi ingereka: 'o' note, lasts beats 'oImana' - half note, lasts two beats 'Imana' - quater note, lasts one beat >>> parse_music. 'oImana . oImana . oImana
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,run_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Raba incuro zingahe umwirondoro muto ushobora kuboneka mu murongo w'umwimerere. Huza incuro zirimwo. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,run_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input ni urukurikirane rw'ibiharuro bifise akarere kuva kuri 'zero' gushika kuri 'icenda'. Amahitamwo yemewe ni 'zero', 'imwe', 'biri', 'itatu', 'ine', 'bitanu', 'bitandatu', 'indwi', 'umunani' na 'icenda'. Hagaruka urukurikirane rw'ibiharuro bitondetse kuva ku gito ugashika ku kinini >>> sort_numbers (('three one five') 'one three five' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,run_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Mu rutonde rw'imibare (muri make ni ibiri) hitamwo zibiri ziri hafi cane z'iyindi, hanyuma uzisubize ukurikije urutonde (umubare muto, uwuruta). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,run_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Urutonde rw'imibare (rw'ibintu bibiri n'imiburiburi), nukoreshe uguhindura kw'umurongo kuri urwo rutonde, ku buryo igitigiri gitoya cane kizoba 0 hanyuma kinini kizoba 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,run_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,run_Latn,python,"

def strlen(string: str) -> int:
    """"""Gusubiza uburebure bw'umurongo >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,run_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Kubw'igitigiri n, shaka igitigiri kinini kigabura n kimwe, gitoya kuruta n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,run_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Urutonde rw'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vyatanzwe mu ntonde kuva ku gito gushika ku kinini. Buri kimwe mu biharuro gikwiye kwandikwa incuro zingana n'incuro zigaragara mu gutandukanya. Igitigiri c'ibiri mu kwinjiza gikwiye kungana n'igiharuro c'ibiharuro vyose >>> gutandukanya ibintu (factorise) ((8) [2, 2, 2] >>> gutandukanya ibintu (factorise) ((25) [5, 5] >>> gutandukanya ibintu (factorise) ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,run_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Mu rutonde rw'ibiharuro, kura ibintu vyose biboneka incuro zirenze imwe. Kura urutonde rw'ibintu bibandanya nk'uko biri mu vyo wandika. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,run_Latn,python,"

def flip_case(string: str) -> str:
    """"""Ku murongo utegekanijwe, hindura indome ntoya mu ndome nkuru n'indome nkuru mu ndome ntoya. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,run_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Urutonde rw'imigozi y'ubwoko bumwe >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,run_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Gucungera urutonde rw'imvugo z'amajambo gusa ku zisanzwe zitangurwa n'indongorazina. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,run_Latn,python,"

def get_positive(l: list):
    """"""Hagaruka gusa ibiharuro vy'inyongera biri ku rutonde. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,run_Latn,python,"

def is_prime(n):
    """"""Hagaruka ukuri nimba igitigiri catanzwe ari prime, n'ikinyoma ahandi. >>> is_prime(6) Ikinyoma >>> is_prime(101) Ukuri >>> is_prime(11) Ukuri >>> is_prime(13441) Ukuri >>> is_prime(61) Ukuri >>> is_prime(4) Ikinyoma >>> is_prime(1) Ikinyoma """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,run_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs ni coefficients z'impolynome. find_zero find x such that poly(x) = 0. find_zero return only only zero point, even if there are many. Vyongeye, find_zero ifata gusa urutonde xs rufise igitigiri c'ibiharuro na coefficient nini itari zero kuko iratanga inyishu. >>> round ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Igereranya igiharuro gifise igiharuro xs mu kibanza x. igaruka xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,run_Latn,python,"

def sort_third(l: list):
    """"""Iyi nteguro ifata urutonde l ikagaruka urutonde l' ku buryo l' ihwanye na l mu bitigiri bidashobora kugabanywa na bitatu, mu gihe ibiciro vyayo ku bitigiri bishobora kugabanywa na bitatu bingana n'ibiciro vy'ibiharuro bingana vya l, ariko bitondetse. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,run_Latn,python,"

def unique(l: list):
    """"""Hagaruka ibintu bitandukanijwe mu rutonde >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,run_Latn,python,"

def max_element(l: list):
    """"""Hagaruka igiharuro kinini mu rutonde. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,run_Latn,python,"

def fizz_buzz(n: int):
    """"""Hindura incuro igitigiri 7 kibonekera mu biharuro bitarenze n bishobora kugabanywa na 11 canke 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,run_Latn,python,"

def sort_even(l: list):
    """"""Iyi function ifata urutonde l ikagaruka urutonde l' kuburyo l' ihwanye na l mu ma indices y'impari, mu gihe ibiciro vyayo ku ma indices y'impari bingana n'ibiciro vy'ama indices y'impari ya l, ariko bitondetse. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,run_Latn,python,"

def encode_cyclic(s: str):
    """"""ifata nk'urutonde rw'amajambo y'ibanga rwashizwe muri encode_cyclic function. Igaruka umurongo w'amajambo washizwe muri decoded. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""igarukana umurongo w'amajambo uharirijwe mu migwi y'indome zitatu. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,run_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib igarukana igitigiri ca n- arico gitigiri ca Fibonacci kandi naco nyene ni prime. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,run_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero ifata urutonde rw'ibiharuro vy'intango nk'inyishu. ihindura ukuri mu gihe hari ibintu bitatu bitandukanye mu rutonde biharura kuri zeru, n'ikinyoma mu bindi. >>> triples_sum_to_zero (([1, 3, 5, 0]) Ikinyoma >>> triples_sum_to_zero (([1, 3, -2, 1]) Ukuri >>> triples_sum_to_zero (([1, 2, 3, 7]) Ikinyoma >>> triples_sum_to_zero (([2, 4, -5, 3, 9, 7]) Ukuri >>> triples_sum_to_zero [1]) Ikinyoma """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,run_Latn,python,"

def car_race_collision(n: int):
    """"""Iyumvire ibarabara ry'umurongo muremure cane. Imiduga n iriko iragenda ibumoso igana iburyo; icyarimwe, urundi rutonde rw'imiduga n iriko iragenda iburyo igana ibubamfu. Imiduga ibiri itangura iri kure cane. Imiduga yose igenda mu muvuduko umwe. Imiduga ibiri ivuga ko ishitse igihe imodoka igenda ibumoso igana iburyo ishitse ku modoka igenda iburyo igana ibubamfu. Ariko, imiduga ni ikomeye cane; bivuye kuri ivyo, iguma igenda mu nzira yayo nk'aho itashitse. Iki gisata kirerekana igitigiri c'ayo masanganya.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,run_Latn,python,"

def incr_list(l: list):
    """"""Urutonde rugaruka hamwe n'ibintu vyongerejwe 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,run_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero ifata urutonde rw'intango nk'inyishu. ihindura True nimba hari ibintu bibiri bitandukanye muri urwo rutonde bifise igiteranyo c'ubusa, na False ahandi. >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero (([1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,run_Latn,python,"

def change_base(x: int, base: int):
    """"""Guhindura ishingiro ry'igitigiri c'igitigiri x mu gishingiro. kugarukana akarongo k'inyuguti inyuma y'uguhinduranya. ibitigiri vy'ibishingiro biri munsi ya 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,run_Latn,python,"

def triangle_area(a, h):
    """"""Dufatiye ku burebure bw'uruhande n'ubwaguke bw'ibibanza bihindukira vy'igiti c'inkingi. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,run_Latn,python,"

def fib4(n: int):
    """"""Urukurikirane rw'ibiharuro Fib4 ni urukurikirane rusa n'urukurikirane rwa Fibbonacci ruvugwa uku gukurikira: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Andika igikorwa kugira ngo uharure neza igiharuro ca n- ca urukurikirane rw'ibiharuro fib4. Ntukoreshe iterambere. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,run_Latn,python,"

def median(l: list):
    """"""Igihimba c'inyuma c'ibintu biri ku rutonde l. >>> ihimba ry'imbere ry'ibintu ([3, 1, 2, 4, 5]) 3 >>> ihimba ry'imbere ry'ibintu ([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,run_Latn,python,"

def is_palindrome(text: str):
    """"""Iraba ko urukurikirane rwatanzwe ari urukurikirane rw'amajambo >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,run_Latn,python,"

def modp(n: int, p: int):
    """"""Subira 2^n modulo p (menya ibiharuro). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,run_Latn,python,"

def encode_shift(s: str):
    """"""ifata nk'urutonde rw'amajambo y'inyongera yandikishijwe na encode_shift function. Igaruka umurongo w'amajambo yandikishijwe. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""bitanga umurongo w'amajambo uharirijwe mu guhinduranya indome zose mu ndome z'indome n'indome. """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,run_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels ni igikorwa gifata string hanyuma kigarukana string itarimwo amajwi. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') ' ' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,run_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,run_Latn,python,"

def add(x: int, y: int):
    """"""Ongeranya ibiharuro bibiri x na y >>> wongera ((2, 3) 5 >>> wongera ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,run_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Raba ko amajambo abiri afise indome zingana. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddddddddddd') Vero >>> same_chars (('abcd', 'dddddddddddddd') Vero >>> same_chars (('ddddddddddddddd', 'abcd') Vero >>> same_chars (('eabcd', 'ddddddddddddddddd') Vyanse >>> same_chars ((('abcd', 'ddddddddddddddddddd') Vyanse >>> same_chars (((abcdzzzz', 'dddzzzzzzddddddddddddddddd') Vyanse """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,run_Latn,python,"

def fib(n: int):
    """"""Subira inyuma n-th Fibonacci number. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,run_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ni urukurikirane rw'amajambo ""<"" na "">"". return True if each opening bracket has a corresponding closing bracket. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,run_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,run_Latn,python,"

def common(l1: list, l2: list):
    """"""Ni ugusubiza ibintu bimwe vyatondetswe mu rutonde rw'ibintu bibiri. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,run_Latn,python,"

def largest_prime_factor(n: int):
    """"""Subira umwimbu wa mbere munini wa n. Dufate ko n > 1 kandi atari umwimbu. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,run_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n ni igikorwa giharura ibiharuro kuva kuri 1 gushika kuri n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,run_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ni urukurikirane rw'amajambo ""("" na "")"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""())) True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,run_Latn,python,"

def derivative(xs: list):
    """"""xs yerekana ibiharuro vy'umurongo. xs[0] + xs[1] * x + xs[2] * x^2 + .... Gusubiza icatsi c'uwo murongo mu buryo bumwe. >>> icatsi (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> icatsi (([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,run_Latn,python,"

def fibfib(n: int):
    """"""Urukurikirane rw'ibiharuro FibFib ni urukurikirane rusa n'urukurikirane rwa Fibbonacci ruvugwa uku gukurikira: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Andika igikorwa kugira ngo uharure neza igiharuro ca n- c'urukurikirane rw'ibiharuro fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,run_Latn,python,"
FIX = """"""Andika igikorwa vowels_count gifata umurongo uhagarariye ijambo nk'ibanga ryo kwinjiza maze kigatanga igitigiri c'amajwi ari muri urwo ruririmbo. Amajwi muri iki gihe ni 'a', 'e', 'i', 'o', 'u'. Aha, 'y' na yo ni umurongo, ariko igihe gusa iri ku mpera y'ijambo ryatanzwe. Akarorero: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Ongera ushiremwo utundi turorero tw'ingene twovyifatamwo. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,run_Latn,python,"
def circular_shift(x, shift):
    """"""Gushira mu kuzimu ibiharuro vy'igitigiri x, gushira ibiharuro iburyo n'iburyo hanyuma ugarukane umusaruro nk'umurongo. Niba shift > igitigiri c'ibiharuro, gusiga ibiharuro bisubiranyemwo. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,run_Latn,python,"
def digitSum(s):
    """"""Igikorwa Kwandika igikorwa gifata umurongo nk'inyishu maze kigatanga igiteranyo c'indome zo hejuru gusa' ASCII codes. Ingero: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,run_Latn,python,"
def fruit_distribution(s,n):
    """"""Muri iki gikorwa, uzohabwa umurongo uhagarariye igitigiri c'ama aporo n'ama orange bica mu gisimbo c'ivyamwa iki gisandugu kirimwo amaporo, amaporo, n'ivyamwa vya mango. Dufatiye ku murongo uhagarariye igitigiri c'ama aporo n'ama aporo hamwe n'igitigiri cose kigereranya igitigiri c'ivyamwa biri mu gisimbo, dusubire igitigiri c'ivyamwa vya mango biri mu gisimbo. nk'akarorero: fruit_distribution""5(ama aporo na 6 vy'ama aporo"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 amaporo na 1 vy'ama aporo"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 aporo na 3 vy'ama aporo"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 amaporo na 1 vy'ama aporo"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,run_Latn,python,"
def pluck(arr):
    """"""""Bivuye ku rutonde rugereranya ishami ry'igiti ririmwo ibitigiri bitagira igiharuro, igikorwa cawe ni uguca mu bihimba hanyuma ukagaruka. Igisata cafashwe gikwiye kuba igiharuro gifise agaciro gato cane. Niba hari imigabane myinshi ifise agaciro gato cane, hagarutse igiharuro gifise igiharuro gito cane. Igisata cafashwe gikwiye kugaruka mu rutonde, [smallest_value, its index] , Niba ata gaciro gato cane canke urutonde rutanga ata kintu kirimwo, hagarutse []. Akarorero1: Input: [4,2,3] Output: [2, 1] Ibisobanuro: 2 ifise igiharuro gito cane, na 2 ifise igiharuro gito cane. Akarorero2: Input: [1,2,3] Output: [2, 1] Ibisobanuro: 2 ifise igiharuro gito cane, na 2 ifise igiharuro gito cane. Akarorero3: Input: [] Output: [4:] Input: [5, 3, 4, 2] [0, 0 Output: 1] Ibisobanuro: 1 ifise igiharuro gito cane, ariko igiharuro gito cane ni 0 * 1 * Uburebure: Uburebure bw'ibiri burya mbere, ariko igiharuro gito cane ni 0 * Akarorero: * Uburebure bw'ibiri burebure: * Uburebure bw'iburyo burya kabiri ni ubusa.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,run_Latn,python,"
def search(lst):
    '''Uhabwa urutonde rw'imibare itari igiharuro. Hindura igiharuro kinini kiruta ubusa, kandi gifise igiharuro kiruta canke kingana n'agaciro k'umubare ubwawo. Igiharuro c'umubare ni incuro zigaragara mu rutonde. Niba ata gaciro nk'ako gahari, subira -1. Ingero: search (([4, 1, 2, 2, 3, 1]) == 2 search ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,run_Latn,python,"
def strange_sort_list(lst):
    '''Urutonde rw'ibiharuro, rugaruka urutonde mu buryo budasanzwe. Gutondekanya bidasanzwe, ni igihe utanguye n'agaciro gatoya, hanyuma ubunini bw'ibiharuro bisigaye, hanyuma bitoyi. Ingero: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,run_Latn,python,"
def triangle_area(a, b, c):
    '''Dufatiye ku burebure bw'impande zitatu z'igiti c'inkoranya mirongwitatu. Hindura ubuso bw'igiti c'inkoranya mirongwitatu bw'impande zibiri z'ibinyacumi nimba impande zitatu zigize igiti c'inkoranya mirongwitatu. Ahandi ho, subira -1 Impande zitatu zigize igiti c'inkoranya mirongwitatu igihe ingano y'impande zibiri ziriho iruta uruhande rwa gatatu. Akarorero: triangle_area(3, 4, 5) == 6.00 triangle_area(1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,run_Latn,python,"
def will_it_fly(q,w):
    '''Andika igikorwa gisubiza True nimba ikintu q kizoguruka, na False ahandi. Ikintu q kizoguruka nimba kiringanijwe (ni urutonde rwa palindrome) kandi igiteranyo c'ibiranga vyaco kiri munsi canke kingana n'uburemere bushoboka bw'ibishobora kuba vyose w. Akarorero: will_it_fly (([1, 2], 5) â -> False # 1+2 ni munsi y'uburemere bushoboka bw'ibishobora kuba vyose, ariko ntibiringanijwe. will_it_fly (([3, 2, 3], 1) â -> False # iringanijwe, ariko 3+2+3 iraruta uburemere bushoboka bw'ibishobora kuba vyose. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 ni munsi y'uburemere bushoboka bw'ibishobora kuba vyose, kandi biringanijwe. will_it_fly ((([3], â 5) -> True # 3 ni munsi y'uburemere bushoboka bw'ibishobora kuba vyose, kandi biringanijwe.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,run_Latn,python,"
def smallest_change(arr):
    """"""Mu rutonde rw'intango, raba igitigiri gito c'ibintu bikenewe guhindurwa kugira ngo urutonde rube urw'intango. Urutonde rw'intango ni urutonde rusomwa kimwe imbere n'inyuma. Mu mpinduka imwe, urashobora guhindura ikintu kimwe ukagihindura ikindi kintu. Nk'akarorero: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,run_Latn,python,"
def total_match(lst1, lst2):
    '''Andika igikorwa cemera urutonde rw'imirongo ibiri hanyuma kigarukana urutonde rufise igitigiri c'indome mu murongo wose w'urutonde rutari rumwe n'urundi rutonde. nimba urutonde rw'imirongo ibiri rufise igitigiri c'indome kingana, hagarukana urutonde rwa mbere. Akarorero total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4', ['1', '2', '3', '4', '5', '4]) -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,run_Latn,python,"
def is_multiply_prime(a):
    """"""Andika igikorwa kigarukana ukuri nimba igitigiri catanzwe ari ugukwirakwiza ibiharuro 3 vy'ibanze n'ibinyoma ahandi. Kumenya ko (a) ari munsi y'100. Akarorero: is_multiply_prime(30) == Ukuri 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,run_Latn,python,"
def is_simple_power(x, n):
    """"""Igikorwa cawe ni ukwandika igikorwa kigarukana ukuri nimba igitigiri x ari igiharuro c'ukuri c'igitigiri n n'ikinyoma mu bindi bihe. x ni igiharuro c'ukuri c'igitigiri n nimba n**int=x Nk'akarorero: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,run_Latn,python,"
def iscube(a):
    '''Andika igikorwa gifata igiharuro a maze kigasubira inyuma True nimba iki ingeger ari cube y'igitigiri c'intango. Wibuke: ushobora gufata ko ivyo winjije vyama ari vyo. Akarorero: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> True iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,run_Latn,python,"
def hex_key(num):
    """"""Washinzwe kwandika igikorwa gifata igitigiri c'igitigiri ca hexadecimal nk'umurongo kandi kiharura igitigiri c'igitigiri ca hexadecimal ari primes (igitigiri prime, canke prime, ni igiharuro c'imiterere kiruta 1 kitari igiteranyo c'imibare ibiri mitomito). Ibiharuro vya hexadecimal ni 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Ibiharuro vya prime ni 2, 3, 5, 7, 11, 13, 17,... Ugomba rero kumenya igitigiri c'ibiharuro bikurikira: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13). Icegeranyo: ushobora gufata ko inyishu yama ari nziza canke igicapo, kandi ibimenyetso A,B,C,D,E,F, vyama ari inini. Akarorero: Ku ""num"" = AB, inyishu ikwiye kuba 1. Ku ""num"" = 1077E, inyishu ikwiye kuba 2. Ku ""num"" = 331ABED, inyishu ikwiye kuba 4. ""ABC"" = 6.0891234567D, inyishu ikwiye kuba 2. ""2020""""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,run_Latn,python,"
def decimal_to_binary(decimal):
    """"""Uzohabwa igitigiri mu buryo bw'igice kandi igikorwa cawe ni ukugihindura mu buryo bw'ibiri. Igikorwa gikwiye kugarura umurongo, aho buri karanga kigereranya igiharuro c'ibiri. Buri karanga mu murongo buzoba ari '0' canke '1'. Hazoba hari izindi ndome zibiri 'db' mu ntango no mu mpera z'umurongo. Izo ndome z'inyongera ziriho kugira zifashe mu buryo. Akarorero: decimal_to_binary(15) # igarukana ""db1111db"" decimal_to_binary32) # igarukana ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,run_Latn,python,"
def is_happy(s):
    """"""Uhabwa umurongo s. Igikorwa cawe ni ukuraba ko umurongo ari mwiza canke atari mwiza. Umurongo ni mwiza mu gihe uburebure bwawo ari 3 kandi buri ndome 3 zikurikirana zitandukanye. Akarorero: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,run_Latn,python,"
def numerical_letter_grade(grades):
    """"""Ni indwi ya nyuma y'igice c'umwaka w'ishure, umwigisha ategerezwa gutanga amanota ku banyeshure. Umwigisha yarakoze algorithme yiwe bwite yo gutanga amanota. Ikibazo conyene ni uko yatakaje kode yakoresha mu gutanga amanota. Yaguhe urutonde rw'amanota y'abanyeshure bamwe bamwe, utegerezwa kwandika igikorwa gishobora gutanga urutonde rw'amanota y'inyuguti ukoresheje uru rutonde rukurikira:""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,run_Latn,python,"
def prime_length(string):
    """"""Andika igikorwa gifata umurongo w'amajambo maze kigasubira inyuma Ukuri nimba uburebure bw'umurongo w'amajambo ari igiharuro ca mbere canke Ikinyoma ahandi ho Ingero prime_length (('Hello') == Ukuri prime_length (('abcdcba') == Ukuri prime_length (('kittens') == Ukuri prime_length (('orange') == Ikinyoma """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,run_Latn,python,"
def starts_one_ends(n):
    """"""Duhawe igitigiri c'inyongera n, dusubire igitigiri c'igitigiri c'inyongera c'igitigiri n gitangurira canke gisozera kuri 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,run_Latn,python,"
def solve(N):
    """"""Gutanga igitigiri N, ugarukana igiteranyo c'ibiri muri binary. Akarorero Kuri N = 1000, igiteranyo c'ibiri kizoba 1 igisohoka kiba ""1"". Kuri N = 150, igiteranyo c'ibiri kizoba 6 igisohoka kiba ""110"". Kuri N = 147, igiteranyo c'ibiri kizoba 12 igisohoka kiba ""1100"". Ibiharuro: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. Igisohoka: urukurikirane rw'umubare wa binary """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,run_Latn,python,"
def add(lst):
    """"""Dufise urutonde rw'intara zitari uruta izindi, twongere uturemajambo tw'impari turi ku ntonde zitari iz'impari.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,run_Latn,python,"
def anti_shuffle(s):
    """"""Andika igikorwa gifata umurongo hanyuma kigasubira inyandiko y'urutonde. Urutonde rw'urutonde, ni umurongo aho amajambo yose (atandukanywa n'ikirere) asubirizwa n'ijambo rishasha aho indome zose zitondetse mu buryo buzamuka bushingiye ku gaciro ka ascii. Icogufasha: Ukwiye kugumana urutonde rw'amajambo n'ibibanza bitagira ico vyanditse mu nteruro. Nk'akarorero: anti_shuffle ((('Hi') isubira 'Hi' anti_shuffle ((('hello') isubira 'ehllo' anti_shuffle (('Hello World!!!') isubira 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,run_Latn,python,"
def get_row(lst, x):
    """"""Uhabwa amakuru yo muburyo bubiri, nk'urutonde rw'ibisigi, bisa n'umurongo, ariko, bitandukanye n'imirongo, buri murongo ushobora kuba urimwo igitigiri c'inkingi zitandukanye. Dufatiye kuri lst, na integero x, shaka integero x murutonde, hanyuma ugaruke urutonde rw'ibisigi, [(x1, y1), (x2, y2) ...] kuburyo buri tuple ari coordonate - (umurongo, inkingi), itangurira kuri 0. Gena ibiharuro vy'inkingi mu buryo bw'inyongera. Ikindi, dutondeke ibiharuro vy'umurongo mu nkingi mu buryo bw'inyongera. Ingero: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 0, 1, 4], 0 (2, 5), (2, 0, 0] get_(1), [] == [[umurongo 1, 2, 3]], == 2, 2]] ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,run_Latn,python,"
def sort_array(array):
    """"""Mu gihe urwego rw'ibiharuro vy'intango atari ivy'amajwi, hama ugasubira kuri urwo rutonde umaze gutondekanya, uzoca utondekanya urwo rutonde mu buryo bw'inyongera nimba inganya (agaciro k'inyongera y'intango, agaciro k'inyongera y'iherezo) ari impari, canke uzorutondekanya mu buryo bw'inyongera nimba inganya (agaciro k'inyongera y'intango, agaciro k'inyongera y'iherezo) ari impari.""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,run_Latn,python,"
def encrypt(s):
    """"""Hindura inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti z'inyuguti""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,run_Latn,python,"
def next_smallest(lst):
    """"""Uhabwa urutonde rw'ibiharuro. Andika igikorwa next_smallest (() kigarukana agace ka 2 k'urutonde. Ntigaruke None nimba ata gace nk'ako gahari. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,run_Latn,python,"
def is_bored(S):
    """"""Uzohabwa urutonde rw'amajambo, igikorwa cawe ni guharura igitigiri c'amajambo arambiwe. Ibirambiwe ni imvugo itangurwa n'ijambo ""I"". Imvugo zishingwa n'indome '.', '?' canke '!'. Nk'akarorero: >>> arambiwe. (Hello world) 0 >>> arambiwe. (The sky is blue. The sun is shining. I love this weather) 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,run_Latn,python,"
def any_int(x, y, z):
    '''Gushiraho igikorwa gifata ibitigiri 3. Gusubiza ukuri nimba kimwe mu bitigiri kingana n'igiteranyo c'ibindi bibiri, kandi ibitigiri vyose ari ibiharuro. Gusubiza ikinyoma mu bindi bihe. Akarorero any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,run_Latn,python,"
def encode(message):
    """"""Andika igikorwa gifata ubutumwa, hanyuma gihindura uburyo bw'ukwandika mu buryo buhindura inyuguti zose, gisubiriza indome zose ziri muri ubwo butumwa n'inyuguti iboneka ahantu 2 imbere y'iyo ndome mu ndome z'ikirundi. Fata gusa indome. Akarorero: >>> encode('test') 'TGST' >>> encode('Iki ni ubutumwa') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,run_Latn,python,"

def skjkasdkd(lst):
    """"""Urakeneye kurondera igiciro ca mbere kinini hanyuma ugatanga igiteranyo c'ibiri muri co. Akarorero: Kuri lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3], igiciro gikwiye kuba 10 Kuri lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1], igiciro gikwiye kuba 25 Kuri lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3], igiciro gikwiye kuba 13 Kuri lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6], igiciro gikwiye kuba 11 Kuri lst = [0,81,12,31,21], igiciro gikwiye kuba 3 Kuri lst = [0,1,8,1,2,1,7], igiciro gikwiye kuba 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,run_Latn,python,"
def check_dict_case(dict):
    """"""Mu gisomwa, nigaruke Kuri niba imfunguzo zose ari imirongo mu nyuguti ntoya canke imfunguzo zose ari imirongo mu nyuguti nkuru, ahandi nigaruke Kubi. Igikorwa gikwiye kugaruka Kubi ni igisomwa catanzwe ari igaragara. Ingero: check_dict_case{""a"":""apple"", ""b"":""banana""}) gikwiye kugaruka Kuri. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) gikwiye kugaruka Kubi. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) gikwiye kugaruka Kubi. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) gikwiye kugaruka Kubi. check_dict_case{""NC"":""STATE"", ""Z"":""IP""} gikwiye kugaruka Kubi.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,run_Latn,python,"
def count_up_to(n):
    """"""Gushira mu ngiro igikorwa gifata igiharuro c'intango kitari ikiy'ubusa maze kigasubira mu rutonde rw'ibiharuro n vya mbere arivyo bitigiri vya mbere kandi biri munsi ya n. Nk'akarorero: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,run_Latn,python,"
def multiply(a, b):
    """"""Niwuzuze igikorwa gifata ibitigiri bibiri vy'intango maze kigatanga igiteranyo c'ibiharuro vyavyo. Niwibaze ko ivyo winjije vyama ari vyo. Akarorero: gukwiza 148, 412) bikwiye kugarura 16. gukwiza 19 bikwiye kugarura 72. gukwiza 2020 bikwiye kugarura 0. gukwiza 14-15 bikwiye kugarura 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,run_Latn,python,"
def count_upper(s):
    """"""Dufise urutonde s, duharure igitigiri c'indome nkuru mu bisomwa vy'indome z'igiharuro. Nk'akarorero: count_upper (('aBCdEf') igarukana 1 count_upper (('abcdefg') igarukana 0 count_upper (('dBBE') igarukana 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,run_Latn,python,"
def closest_integer(value):
    '''Kurema igikorwa gifata igiciro (umugozi) kigereranya igitigiri maze kigasubira inyuma igiharuro c'intica ntikize kiyikikije. Niba igitigiri kiri kure y'ibiharuro bibiri, giterera kure ya zeru. Akarorero >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Ikitonderwa: Guterera kure ya zeru bisobanura ko nimba igitigiri catanzwe kiri kure y'ibiharuro bibiri, ico ukwiye kugaruka ari ico kiri kure ya zeru. Urugero: closest_integer "" ((14.5"") ikwiye kugaruka 15 na closest_integer "" ((-14.5"") ikwiye kugaruka -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,run_Latn,python,"
def make_a_pile(n):
    """"""Duhawe igitigiri n, utegerezwa gukora ikirundo c'amabuye y'ibice n. Ikibanza ca mbere gifise amabuye n. Igitigiri c'amabuye mu gice gikurikira ni: - igitigiri c'ibisobanya gikurikira nimba n ari igitigiri c'ibisobanya. - igitigiri c'ibisobanya gikurikira nimba n ari igitigiri c'ibisobanya. Hindura igitigiri c'amabuye muri buri gice mw'urutonde, aho intango ku index i yerekana igitigiri c'amabuye mu gice (i+1).""""""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,run_Latn,python,"
def words_string(s):
    """"""Uzohabwa urutonde rw'amajambo atandukanywa n'udusozo canke ibibanza. Igikorwa cawe ni ugucagura urwo rutonde mu majambo hanyuma ugasubira inyuma urutonde rw'amajambo. Nk'akarorero: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,run_Latn,python,"
def choose_num(x, y):
    """"""Iyi function ifata imibare ibiri y'inyongera x na y maze igatanga umubare munini w'umubare wose uri mu kigero [x, y] ushizemwo. Niba ata mubare nk'uwo uriho, noneho iyi function ikwiye kugarura -1. Nk'akarorero: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,run_Latn,python,"
def rounded_avg(n, m):
    """"""Uhawe ibitigiri vy'intango bibiri n na m, igikorwa cawe ni uguharura igiharuro c'ibitigiri vy'intango kuva kuri n gushika kuri m (harimwo n na m). Zunguriza inyishu ku gitigiri c'intango kiri hafi hanyuma uyihindure mu binary. Niba n iruta m, subira inyuma -1. Akarorero: rounded_avg(1, 5) => ""0b11"" rounded_avg(7, 5) => -1 rounded_avg(10, 20) => ""0b1111"" rounded_avg(20, => 33) ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,run_Latn,python,"
def unique_digits(x):
    """"""Gutanga urutonde rw'imibare y'inyongera x. kugarura urutonde rw'ibintu vyose bidafise n'imibare y'imibare.""""""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,run_Latn,python,"
def by_length(arr):
    """"""Dufise urutonde rw'ibiharuro vy'intango, dutondeke ibiharuro biri hagati ya 1 na 9 harimwo, duhindure urutonde ruvuye, hanyuma dusubirize buri gitigiri izina ryaco rihuye kuva kuri ""Umwe"", ""Biri"", ""Bitatu"", ""Bine"", ""Batanu"", ""Itandatu"", ""Indwi"", ""Nine"". Nk'akarorero: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> gutondeka arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> gutondeka arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Eight"", ""Five"", ""Three"", ""Two"", ""Two"", ""One"", ""One""] Nimba urutonde ari urutaguye, dutore urutonde: arr = [] return [] Nimba urutonde rufise igitigiri kitari ic'ukuri, nturwige: arr = [1, -1 , 55] -> arr -> [1, 1], 55 -> arr -> [55, - return = 'One' ].""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,run_Latn,python,"
def f(n):
    """"""Gushira mu ngiro igikorwa f gifata n nk'ikiringo, maze kigasubira urutonde rw'ubunini n, ku buryo agaciro k'ikintu ku ntonde i ari ingero ya i mu gihe i ari ingero y'umubare umwe canke ingero z'imibare kuva kuri 1 gushika kuri i mu gihe atari uko. i itangurira kuri 1. ingero ya i ni ugukwirakwiza imibare kuva kuri 1 gushika kuri i (1 * 2 * ... * i). Akarorero: f(5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,run_Latn,python,"
def even_odd_palindrome(n):
    """"""Duhawe igitigiri n, duhe igiteranyo kirimwo igitigiri c'ibishobora kuba mu kigereranyo c'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro vy'ibiharuro""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,run_Latn,python,"
def count_nums(arr):
    """"""Andika igikorwa count_nums gifata urutonde rw'ibiharuro vy'intango maze kigatanga igitigiri c'ibiriho bifise igiharuro c'ibiharuro > 0. Nimba igitigiri ari kibi, igitigiri ca mbere gifise ikimenyetso kizoba kibi: nk'akarorero -123 gifise ikimenyetso c'ibiharuro -1, 2, na 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,run_Latn,python,"
def move_one_ball(arr):
    """"""Dufise urutonde 'arr' rw'imibare N arr[1], arr[2], ..., arr[N].Ibiharuro biri muri urwo rutonde bizotondekwa mu buryo butunganijwe. Igikorwa cawe ni ukumenya nimba bishoboka gutondekanya urutonde mu buryo budahinduka mu gukora igikorwa gikurikira ku rutonde rwategekanijwe: Urafise uburenganzira bwo gukora igikorwa co kwimurira iburyo incuro nyinshi. Igikorwa kimwe co kwimurira iburyo bisobanura kwimurira ibintu vyose biri mu rutonde mu kibanza kimwe mu nzira ibereye. Ikintu ca nyuma c'urutonde kizoshirwa mu kibanza c'intango mu rutonde, ni ukuvuga 0th index. Niba bishoboka gutondekanya urutonde mu gukora igikorwa kiri hejuru, hanyuma ugaruke Ukuri, ubundi ugaruke Ukuri. Niba urutonde rwategekanijwe rwuzuye, utegerezwa kugaruka Ukuri.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,run_Latn,python,"
def exchange(lst1, lst2):
    """"""Muri iki kibazo, uzoshira mu ngiro igikorwa gifata urutonde rw'imibare ibiri, maze kigatunganya nimba bishoboka guhanahana ibintu hagati yabo kugira ngo lst1 ibe urutonde rw'imibare ibiri gusa. Nta gahengwe ku gitigiri c'ibintu bihanahanwa hagati ya lst1 na lst2. Niba bishoboka guhanahana ibintu hagati ya lst1 na lst2 kugira ngo ibintu vyose vya lst1 bibe bibiri, subira ""YES"". Ahandi ho, subira ""NO"". Nk'akarorero: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Bivugwa ko urutonde rw'ibanze rutazoba rwuzuye. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,run_Latn,python,"
def histogram(test):
    """"""Mu gihe hari urutonde rw'indome zitandukanywa n'ibibanza, ni ugusubiza inyuguti z'inyuguti zisubirwamwo kenshi kandi zifise igitigiri kijanye. Mu gihe hari indome nyinshi zifise igitigiri kimwe, ni ugusubiza zose. Akarorero: histogram ((a b c) == {'a': 1, 'b': 1, 'c': 1} histogram ((a b b a') == {'a': 2, 'b': 2} histogram ((a b c a b') == {'a': 2, 'b': 2} histogram ((b b a') == {'b 4}: histogram ((a b') == {'b 4} } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }                                                                                                                                                     """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,run_Latn,python,"
def reverse_delete(s,c):
    """"""Twaronse imirongo ibiri s na c, utegerezwa gukuraho indome zose ziri muri s zingana n'indome iyo ari yo yose iri muri c hanyuma uheze urabe ko umurongo w'ivyavuye ari palindrome. Umurongo witwa palindrome mu gihe usomye kimwe imbere no inyuma. Utegerezwa kugarura tuple irimwo umurongo w'ivyavuye n'ukuri/ikinyoma kugira ugenzure. Akarorero Kuri s = ""abcde"", c = ""ae"", ivyavuye bikwiye kuba ('bcd',ikinyoma) Kuri s = ""abcdef"", c = ""b"" ivyavuye bikwiye kuba ('acdef',ikinyoma) Kuri s = ""abcdedcba"", c = ""ab"", ivyavuye bikwiye kuba ('cdedc',ukuri)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,run_Latn,python,"
def odd_count(lst):
    """"""Iyo uhawe urutonde rw'imigozi, aho buri ngero igizwe n'imibare gusa, ugarukana urutonde. Ikintu cose i c'ivyavuye mu mwobo gikwiye kuba ""igitigiri c'ibinyabuzima bitagira ingano mu ngero i y'ivyinjizwa. "" aho i zose zikwiye gusubirizwa n'igitigiri c'ibinyabuzima bitagira ingano mu ngero i' y'ivyinjizwa. >>> odd_count['1234567']) [""igitigiri c'ibinyabuzima bitagira ingano 4n str4ng 4 y'ivyinjizwa 4n.""] >>> odd_count['3',""111111""]) [""igitigiri c'ibinyabuzima bitagira ingano 1n str1ng 1 y'ivyinjizwa 1n."", ""igitigiri c'ibinyabuzima bitagira ingano 8n str8ng 8 y'ivyinjizwa 8n.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,run_Latn,python,"
def minSubArraySum(nums):
    """"""Dufise urutonde rw'intango n, shaka igiteranyo gito c'urutonde rw'intango rutari uruta rumwe. Akarorero minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,run_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Uhabwa uruzitiro rw'ibisima. Urutonde rumwe rumwe rugereranya icobo kimwe, kandi 1 muri urwo rutonde rumwe rugereranya igipimo kimwe c'amazi. Buri cobo gifise igikono gihuye gishobora gukoreshwa mu kuvoma amazi muri co, kandi ibikono vyose bifise ubushobozi bumwe. Igikorwa cawe ni ugukoresha ibikono mu gupfukura ibigega. Vuga incuro ukeneye kugabanya ibigega. Akarorero1: Input: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Output: 6 Akarorero2: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 Output: 5 Akarorero3: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 5 Output
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,run_Latn,python,"
def sort_array(arr):
    """"""Muri iki Kata, utegerezwa gutondekanya urutonde rw'imibare itari iy'amazina y'amazina y'abantu ukurikije igitigiri c'abantu mu buryo bw'ibiri muri yo mu buryo bw'amazina y'abantu. Ku gitigiri c'abantu bameze gutyo, gutondekanya bishingiye ku gaciro k'ibiharuro.""""""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,run_Latn,python,"
def select_words(s, n):
    """"""Dufise urutonde rw'indome s n'igitigiri c'ukuri n, twahawe igikorwa co gushira mu ngiro igikorwa kigarukana urutonde rw'amajambo yose yo mu rutonde s arimwo indome n, kugira ayo majambo aboneke mu rutonde s. Mu gihe umurongo s ari umwanda, ico gikorwa gikwiye kugarukana urutonde rutagira ico ruvuze. Wibuke: ushobora kwiyumvira ko urukurikirane rw'amajambo ruriho indome n'ibibanza gusa. Ingero: select_words (((""Mary had a little lamb"", 4) ==> [""little""] select_words (((""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words"" (((simple white space"", 2) ==> [] select_words (((""Hello world"", 4) ==> [""world""] select_words (((""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,run_Latn,python,"
def get_closest_vowel(word):
    """"""Uhawe ijambo. Igikorwa cawe ni ukuronka indome yegereye cane iri hagati y'indome zibiri ziri ku ruhande rw'iburyo rw'ijambo (igiteramo). Indome ziri mu ntango n'iherezo ntiziharurwa. Hindura umurongo w'ubusa nimba utabonye indome igishigikiye ivyo bisabwa. Urashobora kwiyumvira ko umurongo uhawe urimwo indome z'ikirundi gusa. Akarorero: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,run_Latn,python,"
def match_parens(lst):
    '''Urutonde rw'imirongo ibiri, iyo mirongo yose igizwe n'ibisate vyuguruye '(' canke ibisate vyuguruye ') '. Igikorwa cawe ni kuraba nimba bishoboka guhuza imirongo ibiri mu buryo bumwe, ko umurongo uvuyeho uzoba mwiza. Umurongo S ufatwa ko ari mwiza mu gihe gusa imivugire yose iri muri S iringanijwe. Nk'akarorero: umurongo '((()) ' ni mwiza, mu gihe umurongo '()) ' atari wo. Hagaruka 'Yego' mu gihe hari uburyo bwo gukora umurongo mwiza, hanyuma ugaruke 'Oya' mu gihe atari vyo. Ingero: match_parens[('(() ', ') ']) == 'Yego' match_parens[(') ', ') ']) == 'Oya' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,run_Latn,python,"
def maximum(arr, k):
    """"""Urutonde rw'intango arr y'ibiharuro n'igitigiri k k, dusubire urutonde rw'uburebure k hamwe n'imibare k y'ibiri muri arr. Akarorero1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Akarorero2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Akarorero3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Note: 1. Uburebure bw'urutonde buzoba buri hagati ya [1, 1000]. 2. Ibigize muri urwo rutonde bizoba biri hagati ya [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,run_Latn,python,"
def solution(lst):
    """"""Dufise urutonde rw'intango zitari umwanda, dusubire hamwe n'ibiri mu bintu vyose bitagira ingano biri mu bibanza vy'impande zose.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,run_Latn,python,"
def add_elements(arr, k):
    """"""Dufise urutonde rw'intango rutarimwo ubusa arr n'igitigiri k, dusubire dusange igiteranyo c'ibiri mu bihimba vy'intango k za arr. Akarorero: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,run_Latn,python,"
def get_odd_collatz(n):
    """"""Mu gihe uhawe igitigiri n, utegerezwa gusubiza urutonde rw'imibare itari imwe mu buryo bw'urukurikirane. Igitekerezo ca Collatz ni igitekerezo mu biharuro cerekeye urukurikirane rusobanurwa uku gukurikira: tangura n'igitigiri cose c'inyongera n. Hanyuma buri kimwe kiva mu gihe c'imbere nk'uku gukurikira: niba igihano c'imbere ari igipimo, igihano gikurikira ni kimwe mu bice bibiri vy'igihano c'imbere. Niba igihano c'imbere ari igipimo, igipimo gikurikira ni 3 incuro igipimo c'imbere hamwe na 1. Igitekerezo ni uko ataco bitwaye n, urukurikirane ruzokwama rugera kuri 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,run_Latn,python,"
def valid_date(date):
    """"""Ugomba kwandika igikorwa kizoha agaciro akarongo k'amatariki kandi kigasubira kuri True nimba itariki ari iyemewe ahandi ho ni False. Itariki ni iyemewe mu gihe amategeko yose akurikira yubahirijwe: 1. Akarongo k'amatariki si ubusa. 2. Igitigiri c'imisi ntikirengeje 1 canke kirenze imisi 31 mu mezi 1,3,5,7,8,10,12. Kandi igitigiri c'imisi ntikirengeje 1 canke kirenze imisi 30 mu mezi 4,6,9,11. Kandi, igitigiri c'imisi ntikirengeje 1 canke kirenze imisi 29 mu kwezi 2. 3. Itariki ntikwiye kuba munsi ya 1 canke irenze 12. 4. Itariki ikwiye kuba iri mu buryo: mm-dd-yyyy nk'akarorero: valid_date (('03-11-2000') => True_date (('15-01-2012') => False valid_date (('04-040-20') => False_date (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,run_Latn,python,"
def split_words(txt):
    '''Duhawe urutonde rw'amajambo, dusubire urutonde rw'amajambo agabanijwe ku bibanza vy'ubusa, mu gihe ata bibanza vy'ubusa bihari mu gisomwa ukwiye kugabana ku ntonde ',' mu gihe ata ntonde zibaho ukwiye kugarura igitigiri c'indome ntoyi ziri mu ntera itari imwe mu ndome, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 Ingero split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,run_Latn,python,"
def is_sorted(lst):
    '''Mu gihe uhawe urutonde rw'imibare, ugarukana nimba zisanzwe canke zitagisanzwe mu buryo bw'inyongera. Mu gihe urutonde rufise ibisubirwamwo birenga 1 vy'umubare umwe, ugarukana Ikinyoma. Niwibaze ko ata mibare itari myiza kandi ko ari ibiharuro gusa.'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,run_Latn,python,"
def intersection(interval1, interval2):
    """"""Uhabwa intera zibiri, aho intera imwe yose ari igizwe n'imibare. Nk'akarorero, intera = (intangiro, iherezo) = (1, 2). Intera zitangwa zirafunze, bivuze ko intera (intangiro, iherezo) irimwo intango n'iherezo. Kuri buri intera, bifatwa ko intango yayo ari nto canke ingana n'iherezo ryayo. Igikorwa cawe ni ukumenya nimba uburebure bw'imfuruka z'izo intera zibiri ari igiharuro ca mbere. Nk'akarorero, intera z'imfuruka (1, 3), (2, 4) ni (2, 3) uburebure bwazo ni 1, atari igiharuro ca mbere. Niba uburebure bw'imfuruka ari igiharuro ca mbere, subira ""YEGO"", ahandi na ho, subira ""OYA"".""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,run_Latn,python,"
def prod_signs(arr):
    """"""Uhabwa urutonde rw'ibiharuro vy'intango, ukeneye gusubiza ingano y'ibiharuro vy'intango vyongerewe n'igiharuro c'ibimenyetso vyose vy'ibiharuro vyose biri muri urwo rutonde, bigereranywa na 1, -1 canke 0.""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,run_Latn,python,"
def minPath(grid, k):
    """"""Urashobora gutangura kuva ku kaburungu ako ari ko kose, kandi mu ntambwe yose ushobora kwimukira ku kaburungu ako ari ko kose kari hafi yawe, mu yandi majambo, urashobora kuja ku kaburungu ako ari ko kose gafise uruhande rumwe n'akaburungu kawe. Urabona ko inzira y'uburebure k isigura kugendera neza na neza k kaburungu (atari ngombwa ko ari gatandukanye). NTAWOKWISHOBORA kuva ku kaburungu. Inzira A (uburebure k) ifatwa ko ari ntoya kuruta inzira B (uburebure k) mu gihe umaze gukora urutonde rw'ibintu biri ku kaburungu A na B (reka tuvyite l_A na l_A), l_A ni ntoya cane mu buryo bw'amajambo kurusha l_A, mu yandi majambo, indanga itagira agahaze i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a], i[a[a], i[a], i[a[a], i[a[a], i[a], i[a[a], i[a[a], i[a[a], i[a[b][a[a[a], i[a[a[a], i[a[a], i[a[a[b][a[a[a], i[a[b[a[a], i[a[a], i[a[a[b][a[a[a[b[i[i[i[i[i[i[i[i[i[i[i][i[i[i[i[i[i]""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,run_Latn,python,"
def tri(n):
    """"""Abantu bose barazi urutonde rwa Fibonacci, rwari rwaratohojwe cane n'abahinga mu biharuro mu binjana bibiri vya nyuma. Ariko rero, ico abantu batazi ni urutonde rwa Tribonacci. Urukurikirane rwa Tribonacci rusobanurwa n'ukugaruka: tri(1) = 3 tri(n) = 1 + n / 2, nimba n ari n'umwe. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), nimba n ari impar. Nk'akarorero: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Uhawe igitigiri c'intango kitari negative n, utegerezwa gusubiza urutonde rw'imibare ya mbere n + 1 y'urukurikirane rwa Tribonacci. Akarorero: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,run_Latn,python,"
def digits(n):
    """"""Duhawe igitigiri n, duhe igiteranyo c'ibinyabuzima bitagira igiharuro. Duhe 0 nimba ibinyabuzima vyose ari bibiri. Nk'akarorero: ibinyabuzima ((1) == 1 ibinyabuzima ((4) == 0 ibinyabuzima ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,run_Latn,python,"
def is_nested(string):
    '''Gushiraho igikorwa gifata umurongo nk'inyuma y'inyuma, kirimwo gusa ibifunga vy'imfuruka. Ico gikorwa gikwiye kugaruka Kuri nimba kandi gusa nimba hariho urukurikirane rw'ibifunga rufise n'imiburiburi igifunga kimwe mu rukurikirane rw'ibifunga. is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]]') â -> True is_nested '[[]]]]]]]] â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,run_Latn,python,"

def sum_squares(lst):
    """"""Uhabwa urutonde rw'imibare. Urakeneye gusubiza igiteranyo c'imibare igabanije mu kibeya ku rutonde rwatanzwe, ugaca uzunguruka buri kintu kiri ku rutonde gushika ku int{} hejuru. Ingero: Ku lst = [1,2,3], umusaruro ukwiye kuba 14 Ku lst = [1,4,9] umusaruro ukwiye kuba 98 Ku lst = [1,3,5,7] umusaruro ukwiye kuba 84 Ku lst = [1.4,4.2,0] umusaruro ukwiye kuba 29 Ku lst = [-2.4,1,1] umusaruro ukwiye kuba 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,run_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Gushiraho igikorwa kigarukana ukuri nimba ikiranga ca nyuma c'umurongo w'inyuguti ari ikiranga c'inyuguti kandi atari igice c'ijambo, n'ikinyoma ahandi. Icatsi: ""ijambo"" ni umurwi w'indome zitandukanywa n'ikibanza. Akarorero: check_if_last_char_is_a_letter"" ""apple pie"") â -> False check_if_last_char_is_a_letter"" ""apple pi e"") â -> True check_if_last_char_is_a_letter"" ""apple pi e"") â -> False check_if_last_char_is_a_letter"" ""'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,run_Latn,python,"
def can_arrange(arr):
    """"""Gushiraho igikorwa kigarukana index nini y'ikintu kitari kinini canke kingana n'ikintu kiza imbere yaco. Niba ata kintu nk'ico gihari hama ugasubira -1. Urutonde rutanga ntiruzogira ibiciro bisubirwamwo. Ingero: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,run_Latn,python,"
def largest_smallest_integers(lst):
    '''Gushiraho igikorwa kigarukana tuple (a, b), aho 'a' ari yo nini mu ma integers mabi, na 'b' akaba ari yo ntoya mu ma integers meza mu rutonde. Niba ata ma integers mabi canke meza ahari, azisubize nka None. Ingero: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,run_Latn,python,"
def compare_one(a, b):
    """"""Gushiraho igikorwa gifata integers, floats, canke strings zigereranya ibitigiri nyavyo, maze kigasubira ku gitigiri kinini mu bwoko bwaco bw'igitigiri. Gusubiza None nimba ibiciro bingana. Wibuke: Niba igitigiri nyaco kigereranywa nk'urutonde, agace gatembagazwa gashobora kuba . canke , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,run_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Gereranya nimba igitigiri n gishobora kwandikwa nk'igiteranyo c'imibare ine y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera y'inyongera yindi.""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,run_Latn,python,"
def special_factorial(n):
    """"""Umuce w'inyubako w'igihugu ca Brezil usobanurwa nk'uku: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! aho n > 0 Nk'akarorero: >>> special_factorial ((4) 288 Ako gakorwa kazokwakira integero nk'inyubako y'inyubako kandi kagomba gusubiza umuce w'inyubako udasanzwe w'iyo integero. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,run_Latn,python,"
def fix_spaces(text):
    """"""_ Akarorero-3umurongo w'amajambo, subira ibibanza vyose biwurimwo mu ndome z'amajambo, kandi mu gihe umurongo ufise ibibanza birenga 2 bikurikirana, subira ibibanza vyose bikurikirana mu - fix_spaces ((""Ikarorero"") == ""Ikarorero"" fix_spaces ((""Ikarorero1"") == ""Ikarorero1"" fix_spaces (((""Ikarorero2"") == ""_Ikarorero2"" fix_spaces ((""Ikarorero 3"") == ""_Ikarorero-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,run_Latn,python,"
def file_name_check(file_name):
    """"""Gushiraho igikorwa gifata umurongo uhagarariye izina ry'idosiye, maze kigasubira 'Yego' mu gihe izina ry'idosiye ari iry'ukuri, kandi kigasubira 'Oya' mu gihe atari iry'ukuri. Izina ry'idosiye ribonwa ko ari iry'ukuri mu gihe kandi gusa mu gihe ibi bintu bikurikira vyose birangutse: - Izina ry'idosiye ritagomba kurenza ibiharuro bitatu ('0'-'9') mu izina ry'idosiye. - Izina ry'idosiye ririmwo agace kamwe gusa '.' - Umugozi w'imbere y'agace ntikwiye kuba ubusa, kandi gitangurwa n'indome yo mu nyuguti z'ikirundi ('a'-'z' na 'A'-Z'). - Umugozi w'inyuma y'agace gakwiye kuba kamwe muri izi: ['txt', 'exe', 'lld'] Akarorero: file_name_check""{example.txt. #"") => 'Yego' file_name_check""{example.dll1} => 'Oya' (izina ry'idosiye ritegerezwa gutangurwa n'indome yo mu nyuguti z'ikirundi)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,run_Latn,python,"


def sum_squares(lst):
    """""""" Iki gikorwa kizotora urutonde rw'imibare yose. Ku bibanza vyose biri muri urwo rutonde, iki gikorwa kizoshira mu murima igiharuro cose kirimwo nimba indangazina yaco ari igiharuro ca 3 kandi kizoshira mu kiharuro cose kirimwo nimba indangazina yaco ari igiharuro ca 4 atari igiharuro ca 3. Iki gikorwa ntikizohindura ibiharuro biri mu rutonde bifise indangazina atari igiharuro ca 3 canke 4. Iki gikorwa kizoca gishikana igiteranyo c'ibiharuro vyose. Akarorero: Ku lst = [1,2,3] ibiharuro bikwiye kuba 6 Ku lst = [] ibiharuro bikwiye kuba 0 Ku lst = [-1,-5,2,-1,-5] ibiharuro bikwiye kuba -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,run_Latn,python,"
def words_in_sentence(sentence):
    """"""Uhabwa umurongo uhagarariye iryungane, iryungane ririmwo amajambo atandukanywa n'akarongo, kandi utegerezwa kugarukana umurongo urimwo amajambo yo mu iryungane ry'umwimerere, uburebure bwayo ari ibiharuro vya mbere, urutonde rw'amajambo mu murongo mushasha rukwiye kuba rumwe n'urw'umwimerere. Akarorero1: Input: iryungane = ""Iki ni ikizamini"" Output: ""ni"" Akarorero2: Input: iryungane = ""reka tugende kwoga"" Output: ""genda"" Imigozi: * 1 <= len(iryungane) <= 100 * iryungane ririmwo indome gusa """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,run_Latn,python,"
def simplify(x, n):
    """"""Igikorwa cawe ni ugushira mu ngiro igikorwa kizorushirizaho kworosha imvugo x * n. Ico gikorwa kizogaruka kuri True nimba x * n ihindura igitigiri cose, ahandi ho kigaruka kuri False. Zombi x na n, ni imvugo y'umurongo w'igice, kandi zifise uburyo bukurikira, <numerator>/<denominator> aho igiharuro na denominator ari ibiharuro vyose vy'inyongera. Urashobora gufata ko x, na n ari ibiharuro vyemewe, kandi ntibigire zero nk'igiteranyo. kworosha "" 1/5"", ""5/1"") = True kworosha "" 1/6"", ""2/1"") = False kworosha "" 7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,run_Latn,python,"
def order_by_points(nums):
    """"""Andika igikorwa gitondekanya urutonde rw'ibiharuro vyatanzwe mu buryo bw'inyongera hakurikijwe igiteranyo c'ibiharuro vyavyo.""""""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,run_Latn,python,"
def specialFilter(nums):
    """"""Andika igikorwa gifata urutonde rw'imibare nk'ibisata vy'ubuhinga maze kigarukana igitigiri c'ibiri muri urwo rutonde birenze 10 kandi ibiharuro vy'igitigiri ca mbere n'icanyuma bikaba ari ibitari bimwe (1, 3, 5, 7, 9). Nk'akarorero: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,run_Latn,python,"
def get_max_triples(n):
    """"""Uhabwa igiharuro c'inyongera n. Utegerezwa gukora igiharuro c'inyongera a c'uburebure n. Kuri buri i (1 â‰¤ i â‰¤ n), agaciro ka a[i] = i * i - i + 1. Hindura igitigiri c'ibisatu (a[i], a[j], a[k]) vya a aho i < j < k, na a[i] + a[j] + a[k] ni igiharuro ca 3. Akarorero: Input: n = 5 Output: 1 Ibisobanuro: a = [1, 3, 7, 13, 21] Igisatu conyene gifise agaciro ni (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,run_Latn,python,"
def bf(planet1, planet2):
    '''Hariho ibinyenyeri umunani mu kirere cacu: ibinyenyeri biri hafi y'izuba ni Mercure, ibinyenyeri biri hafi y'izuba ni Vénus, hanyuma isi, Mars, Jupiter, Saturne, Uranus, Neptune. Andika igikorwa gifata amazina abiri y'ibinyenyeri nk'imigozi planète1 na planète2. Ico gikorwa gikwiye kugarukana tuple irimwo ibinyenyeri vyose biri hagati y'inzira y'umubumbe1 n'inzira y'umubumbe2, bitondetse bivanye n'ukuntu biri hafi y'izuba. Ico gikorwa gikwiye kugarukana tuple itarimwo ikintu mu gihe planète1 canke planète2 atari amazina y'ibinyenyeri.'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,run_Latn,python,"
def sorted_list_sum(lst):
    """"""Andika igikorwa cemera urutonde rw'imivugo nk'ingingo, ikuraho imivugo ifise uburebure budasa, hanyuma igarukana urutonde rukurikira rufise urutonde rutondetse, Urutonde ni urutonde rw'imivugo kandi ntirwigera ruba urutonde rw'imibare, kandi rushobora kuba rwuzuyemwo ibisubirwamwo. Urutonde rw'urutonde rukwiye kuba rugenda rwiyongera ukurikije uburebure bw'ijambo ryose, kandi ukwiye kugarukana urutonde rutondetse ukurikije iryo tegeko. Niba amajambo abiri afise uburebure bumwe, urutonde rutegerezwa gutondekwa hakurikijwe indome. Igikorwa gikwiye kugarukana urutonde rw'imivugo rutondetse. Ushobora gufata ko amajambo yose azogira uburebure bumwe. Nk'akarorero: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,run_Latn,python,"
def x_or_y(n, x, y):
    """"""Porogaramu yoroshe ikwiye gusubiza agaciro ka x nimba n ari igitigiri ca mbere kandi ikwiye gusubiza agaciro ka y ahandi. Akarorero: kuri x_or_y(7, 34, 12) == 34 kuri x_or_y(15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,run_Latn,python,"
def double_the_difference(lst):
    '''Mu rutonde rw'imibare, subira hamwe ingero z'ibice vy'imibare iri ku rutonde. Niwirengagize imibare itari iy'ibarura. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Niba urutonde rw'ibanze ari ubusa, subira 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,run_Latn,python,"
def compare(game,guess):
    """"""Nibaza ko twese twibuka uko twiyumva igihe amaherezo y'ikintu kanaka twamaze igihe turindiriye kizwi. Ivyiyumviro n'ivyiyumviro ufise muri ico gihe birakwiye ko ubifata mu mugongo kandi ukabigereranya. Igikorwa cawe ni ukumenya nimba umuntu yaratahuye neza ivyavuye mu nkino zitari nke. Uronka urutonde rw'amanota n'ivyiyumvirwa vy'uburebure bungana, aho buri cigwa cerekana ko hari aho bihuye. Hagaruka urutonde rw'uburebure bungana rwerekana ukuntu buri cigwa cari kure. Niba baravye neza, agaciro ni 0, kandi nimba atari ko biri, agaciro ni itandukaniro ridasanzwe hagati y'ivyiyumvirwa n'amanota. Akarorero: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3] compare (([0,5,0,0,4],[4,1,0,-2]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,run_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Uzohabwa izina ry'ikibanza (umugozi) hamwe n'urutonde rw'inyongera. Inyongera zikoreshwa mu kwinjiza izindi nteguro mw'ikibanza. Ububasha bw'inyongera ni uku gukurikira: Reka CAP ibe igitigiri c'indome nkuru mu izina ry'inyongera, hanyuma reka SM ibe igitigiri c'indome ntoyi mu izina ry'inyongera, ububasha buhabwa n'agace CAP - SM. Ukwiye kurondera inyongera ikomeye hanyuma ugasubira umurongo muri iyi fomati: ClassName.StrongestExtensionName. Niba hariho inyongera zibiri canke zirenga zifise ububasha bumwe, ukwiye guhitamwo iyambere ku rutonde. Nk'akarorero, niba uhawe ""Ibice"" nk'ikibanza hamwe n'urutonde rw'inyongera: ['SEviviviNGliSCes', 'Cheese', 'StuFfed'] utegerezwa kugarura 'SviviNGliS.SEviCes' kubera ko inyongera ya 'SviviNGliS' ari 'myviviNGliS' (Inyongera ikomeye: 'AA_Class'), urugero: 'Beast_Class' ni ububasha bukomeye.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,run_Latn,python,"
def cycpattern_check(a , b):
    """"""Uhabwa amajambo 2. Ugomba gusubiza True nimba ijambo rya kabiri canke irindi ryose mu guhinduranya ari umuce w'ijambo rya mbere cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => True cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => True cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,run_Latn,python,"
def even_odd_count(num):
    """"""Gutanga igitigiri cose. kugarura tuple ifise igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri c'igitigiri.""""""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,run_Latn,python,"
def int_to_mini_roman(number):
    """"""Duhawe igitigiri ciza, dufate igiteranyo c'indome z'ikiromani, maze tugaruke mu ndome nto. Ingero: 1 <= num <= 1000 Ingero: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,run_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Gutanga uburebure bw'impande zitatu z'igiti c'inkingi. Gusubiza ukuri nimba impande zitatu zigize igiti c'inkingi igororotse, Ikinyoma ahandi. Igiti c'inkingi igororotse ni igipande c'inkingi imwe ifise inkingi igororotse canke 90°. Akarorero: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == Ikinyoma '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,run_Latn,python,"
def find_max(words):
    """"""Andika igikorwa cemera urutonde rw'imirongo. Urutonde rurimwo amajambo atandukanye. Hagaruka ijambo rifise igitigiri kinini c'indome zidasanzwe. Niba imirongo myinshi ifise igitigiri kinini c'indome zidasanzwe, hagaruka iyambere mu ntonde z'amajambo.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,run_Latn,python,"
def eat(number, need, remaining):
    """"""Uri imbeba ifise inzara, kandi umaze kurya karoti nyinshi, ariko ubu ukeneye kurya karoti nyinshi kugira ngo uheze imfungurwa z'uwo musi. ukwiye kugarura urukurikirane [ igitigiri c'akaroti kose umaze kurya, igitigiri c'akaroti gisigaye inyuma y'imfungurwa zawe ] nimba ata karoti zisigaye zihagije, uzorya karoti zose zisigaye, ariko uzoba ukiri inzara. Akarorero: * kurya(5, 6, 10) -> [11, 4] * kurya(4, 8, 9) -> [12, 1] * kurya(1, 10, 10) -> [11, 0] * kurya(2, 11, 5) -> [7, 0] Variables: @number: integer the number of carrots that you have eaten. @need: integer the number of carrots that you need to eat. @remaining: integer the number of remaining carrots that exist in stock Constrain: *= 0 <= 0 *= 1000 <= 0 * = 1000 <= 0 remaining have fun = 1000 = 1000 :)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,run_Latn,python,"
def do_algebra(operator, operand):
    """"""Urutonde rwa mbere rufise ibikorwa vy'ibanze vya aljebra, urwa kabiri na rwo ni urutonde rw'ibiharuro vy'intango. Koresha urutonde rw'ibiharuro bibiri kugira ngo wubake imvugo ya aljebra hanyuma ugarure igiciro c'iyi mvugo. Ibikorwa vy'ibanze vya aljebra: Kwongera (+) Gukura ( - ) Gwiza ( *) Kugabana kw'igorofa ( //) Kwerekana ( ** Akarorero): operator['+', '*', '-'] array = [2, 3, 4, 5] ingaruka = 2 + 3 * 4 - 5 => ingaruka = 9 Icogira ni uko uburebure bw'urutonde rw'ibiharuro bungana n'uburebure bw'urutonde rw'ibiharuro vy'intango bisubiwemwo kimwe. Ibiharuro vy'intango ni urutonde rw'ibiharuro vy'intango bitagira igiharuro. Ibiharuro vy'ibiharuro vy'intango bifise n'imiburiburi ikiharuro kimwe, ibiharuro vy'ibiharuro na vyo hejuru bifise n'imiburiburiburi ibiharuro bibiri. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,run_Latn,python,"
def solve(s):
    """"""Uhabwa umurongo s. nimba s[i] ari inyuguti, hindura inyuguti zayo kuva hasi gushika hejuru canke vice versa, ahandi ugumane uko biri. Niba umurongo utagira inyuguti, hindura umurongo. Igikorwa gikwiye kugarura umurongo w'ivyavuyemwo. Akarorero solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,run_Latn,python,"
def string_to_md5(text):
    """"""Iyo uhawe umurongo 'text', ugarukana umurongo wa md5 hash ihwanye. Iyo 'text' ari umurongo utagira ico uvuze, ugarukana None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,run_Latn,python,"
def generate_integers(a, b):
    """"""Dufise ibiharuro bibiri vy'inyongera a na b, dusubire duhe ibiharuro vy'imibare hagati ya a na b, mu buryo bw'inyongera. Nk'akarorero: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
