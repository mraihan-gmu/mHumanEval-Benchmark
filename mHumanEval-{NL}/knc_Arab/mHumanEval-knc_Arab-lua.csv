task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,knc_Arab,lua,"- عَتَبَةٌ مَعْطُوَةٌ- تَفَقَّدْ إنْ كَانَ في جدولِ الأرقامِ، أيّ رقمين أقربَ مِنْ بعضِهما أكثر مِنْ -- >>> has_close_elements({1.0, 2.0, 3.0}, 0.5)
-- false
-- >>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)
-- true
local function has_close_elements(numbers, threshold)
","local function has_close_elements(numbers, threshold)
    for i = 1, #numbers do
        for j = i + 1, #numbers do
            if math.abs(numbers[i] - numbers[j]) < threshold then
                return true
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = has_close_elements
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_1,knc_Arab,lua,"- تَجَاهَلْ أَيّ فُرُوج فِي سِلْسِلَةِ الإِدْخَال.- المَجموعاتُ المُفَرَّدَةُ مُتَوازنَةٌ (كُلُّ مُقَلَّدٍ مَفْتُوحٍ مُغْلَقٌ بِحَقٍّ) وَلاَ تَتَعَشَّشُ بَعْضُهَا فِي بَعْضٍ- يُفَرِّقُ هَؤُلاءِ المَجموعاتَ إلى سِلَالَاتٍ مُفَرَّقَةٍ وَيَرُدُّ الجدولَ مِنْ هَؤُلاءِ.- دَخَلَتْ هَذِهِ الوَظِيفَةُ سِلْسِلَةٌ مَوْجُودَةٌ بِجَمَاعَاتٍ مِنْ قُرُونٍ مُتَعَدِّدَةٍ.-- >>> separate_paren_groups('( ) (( )) (( )( ))')
-- {'()', '(())', '(()())'}
local function separate_paren_groups(paren_string)
","local function separate_paren_groups(paren_string)
    local result = {}
    local balance = 0
    local current_group = {}

    for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        
        if char == '(' then
            balance = balance + 1
        elseif char == ')' then
            balance = balance - 1
        end

        if char ~= ' ' then
            table.insert(current_group, char)
        end
        
        if balance == 0 and #current_group > 0 then
            table.insert(result, table.concat(current_group))
            current_group = {}
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = separate_paren_groups
    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
    lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
    lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_2,knc_Arab,lua,"- ارْجِعْ بِالْعُشْرِيَّةِ مِنْ الْعَدَدِ(بَاقِيَةُ الْجُزْءِ دَائِمًا أَصْغَرُ مِنْ 1).- وَجُزْءُ عَدَدٍ سَمِيْرٍ (أَكْبَرُ عَدَدٍ سَمِيْرٍ أَصْغَرُ مِنْ عَدَدٍ مَعْطُوْدٍ)- مُعْطَى عَدَدَ مُوجِبٍ مُتَعَدِّدٍ، يُمْكِنُ تَحْلِيلُهُ إلى -- >>> truncate_number(3.5)
-- 0.5
local function truncate_number(number)
","local function truncate_number(number)
    local integer_part = math.floor(number)
    local decimal_part = number - integer_part
    return decimal_part
end","lu = require('luaunit')

function test_humaneval()
local candidate = truncate_number
    lu.assertEquals(candidate(3.5), 0.5)
    lu.assertEquals(candidate(1.25), 0.25)
    lu.assertEquals(candidate(123.0), 0.0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_3,knc_Arab,lua,"- فِي تِلْكَ النَّقطَةِ تَجِبُ أَنْ تَرُدَّ الصَّحِيحَ. وَإِلاَّ فَتَرُدُّ الصَّحِيحَ.مَهْمَا تَكُونُ مَوَازِينُكَ فَهِيَ أَنْ تَكْشِفَ إِذَا انْخَفَضَتْ رَصِيدُ الحِسَابِ إِلَى دُونِ الصِفَةِ، وَ- تُعْطَى لَكَ جَدَلَةُ إيداعِ وَ سَحْبِ العملياتِ في حسابِ بنكي يَبْدأُ بِ-- >>> below_zero({1, 2, 3})
-- false
-- >>> below_zero({1, 2, -4, 5})
-- true
local function below_zero(operations)
","local function below_zero(operations)
    local balance = 0
    for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = below_zero
    lu.assertEquals(candidate({}), false)
    lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
    lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
    lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_4,knc_Arab,lua,"- مَدْ = مَدَدْ. x - x_مَدَدْ. - عنصر وَنُقطة مركزية (مَعْنَى فِي هَذِهِ الحَالِ):- يَعْنِي الإِبْتِعَادَةَ المُطْلَقَةَ فِي الْمُتَعَدِّدِينَ- حَوْلَ مَعْنَى هَذِهِ المَوْضُوعَةِ.لِجَدَلِ مَعْطُوْدِ أَرْقَامِ الدَّخْلِ، حَسْبُوا الْمُتَعَدِّدَ الْمُطْلَقَ-- >>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})
-- 1.0
local function mean_absolute_deviation(numbers)
","local function mean_absolute_deviation(numbers)
    local sum = 0
    local count = #numbers
    
    -- Calculate the mean
    for _, number in ipairs(numbers) do
        sum = sum + number
    end
    local mean = sum / count
    
    -- Calculate the mean absolute deviation
    local total_deviation = 0
    for _, number in ipairs(numbers) do
        total_deviation = total_deviation + math.abs(number - mean)
    end
    
    return total_deviation / count
end

-- Example usage
-- print(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})) -- Output: 1.0","lu = require('luaunit')

function test_humaneval()
local candidate = mean_absolute_deviation
    lu.assertEquals(candidate({1.0, 2.0}), 0.5)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_5,knc_Arab,lua,"- أَدْخِلْ عَدَدَ ""مُبَاعِدٍ"" بَيْنَ كُلِّ عَنْصَرَيْنِ مُتَتَابِعَيْنِ مِنْ جَدَلِ الإِدْخَالِ ∀أَعْدَادَ"" -- >>> intersperse({}, 4)
-- {}
-- >>> intersperse({1, 2, 3}, 4)
-- {1, 4, 2, 4, 3}
local function intersperse(numbers, delimeter)
","local function intersperse(numbers, delimeter)
    local result = {}
    for i = 1, #numbers do
        table.insert(result, numbers[i])
        if i < #numbers then
            table.insert(result, delimeter)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = intersperse
    lu.assertEquals(candidate({}, 7), {})
    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
end

os.exit(lu.LuaUnit.run())"
HumanEval_6,knc_Arab,lua,"- مِثْلَ (() (()) لَهُ كَثِيرُهُمَا مَرَاتِبُ التَّعَشُّشِ وَلِ ((())) ثَلَاثٌ.- لِكُلِّ مِنْ المَجموعَةِ، أَخْرِجْ أَعْمَقَ مَستوى عُشْبِ الأقواسِ.- دَخَلَتْ هَذِهِ الوَظِيفَةُ سِلْسِلَةٌ تَمْثِلُ جَمَاعَاتٍ لِقُفُودٍ مُتَوَسِّطَةٍ مُفَرَّقَةٍ بِسَفَرٍ.-- >>> parse_nested_parens('(()()) ((())) () ((())()())')
-- {2, 3, 1, 3}
local function parse_nested_parens(paren_string)
","local function parse_nested_parens(paren_string)
    local results = {}
    for group in paren_string:gmatch(""%S+"") do
        local max_depth = 0
        local current_depth = 0
        for char in group:gmatch(""."") do
            if char == '(' then
                current_depth = current_depth + 1
                if current_depth > max_depth then
                    max_depth = current_depth
                end
            elseif char == ')' then
                current_depth = current_depth - 1
            end
        end
        table.insert(results, max_depth)
    end
    return results
end","lu = require('luaunit')

function test_humaneval()
local candidate = parse_nested_parens
    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})
    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})
    lu.assertEquals(candidate('(()(())((())))'), {4})
end

os.exit(lu.LuaUnit.run())"
HumanEval_7,knc_Arab,lua,"- تَفْلِتْرُ جَدَلَ إِدْخَالِ سَلاَسِلِ مَا يَتَضَمَّنُ سُلْطَةً مَعْطُوفَةً-- >>> filter_by_substring({}, 'a')
-- {}
-- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
-- {'abc', 'bacd', 'array'}
local function filter_by_substring(strings, substring)
","local function filter_by_substring(strings, substring)
    local result = {}
    for _, str in ipairs(strings) do
        if string.find(str, substring) then
            table.insert(result, str)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_by_substring
    lu.assertEquals(candidate({}, 'john'), {})
    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_8,knc_Arab,lua,"- المُجْمَلُ الفارِغُ يَجِبُ أَنْ يَكُونَ 0 وَالمُنتَجُ الفارِغُ يَجِبُ أَنْ يَكُونَ 1.- لِجَدَلِ مَعْطُوفٍ مِنْ الأَصْحَابِ، ارْجِعْ جَدَلًا مِنْ جُمْلَةٍ وَجَزِيرَةٍ لِجَمِيعِ الأَصْحَابِ فِي جَدَلٍ.-- >>> sum_product({})
-- {0, 1}
-- >>> sum_product({1, 2, 3, 4})
-- {10, 24}
local function sum_product(numbers)
","local function sum_product(numbers)
    local sum = 0
    local product = 1

    for _, number in ipairs(numbers) do
        sum = sum + number
        product = product * number
    end

    return {sum, product}
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_product
    lu.assertEquals(candidate({}), {0, 1})
    lu.assertEquals(candidate({1, 1, 1}), {3, 1})
    lu.assertEquals(candidate({100, 0}), {100, 0})
    lu.assertEquals(candidate({3, 5, 7}), {15, 105})
    lu.assertEquals(candidate({10}), {10, 10})
end

os.exit(lu.LuaUnit.run())"
HumanEval_9,knc_Arab,lua,"- فِي التَّتَابُعِ.مِنْ جَدَلِ أَعْدَادٍ مُعَيَّنَةٍ، جَلِّدْ جَدَلَ أَكْثَرِ عَنْصَرَةٍ مُتَدَحْرِجَةٍ تُوجَدُ إِلَى حَالٍ مُعَيَّنَةٍ.-- >>> rolling_max({1, 2, 3, 2, 3, 4, 2})
-- {1, 2, 3, 3, 3, 4, 4}
local function rolling_max(numbers)
","local function rolling_max(numbers)
    local result = {}
    local max_so_far = numbers[1]
    
    for i = 1, #numbers do
        if numbers[i] > max_so_far then
            max_so_far = numbers[i]
        end
        table.insert(result, max_so_far)
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = rolling_max
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})
    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})
    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})
end

os.exit(lu.LuaUnit.run())"
HumanEval_10,knc_Arab,lua,"- - أَضِفْ لِنهَايَةِ السِّلْسِلَةِ عَكْسَ سِلْسِلَةٍ مُقَدَّمَةٍ تَأْتِي قَبْلَ النَّصْبِ الْمُتَقَابِلِ.- - أَعْثِرْ أَطْوَلَ بَعْدَ الْمُسْتَوْعِبِ مِنْ السِّلْسِلَةِ الْمُقَدَّمَةِ الَّتِي هِيَ مُتَعَلِّقَةٌ.- فكرةَ الخُوارِجُمَةَ بسيطة:- أَعْثِرْ أَقْصَرَ كَلَامٍ يَبْدَأُ بِخَطِّ مَوْضُوعٍ.-- >>> make_palindrome('')
-- ''
-- >>> make_palindrome('cat')
-- 'catac'
-- >>> make_palindrome('cata')
-- 'catac'
local function make_palindrome(string)
","local function make_palindrome(s)
    -- Function to check if a given string is a palindrome
    local function is_palindrome(str)
        local len = #str
        for i = 1, len // 2 do
            if str:sub(i, i) ~= str:sub(len - i + 1, len - i + 1) then
                return false
            end
        end
        return true
    end

    local len = #s
    -- Find the longest postfix of the string that is a palindrome
    for i = len, 1, -1 do
        if is_palindrome(s:sub(i)) then
            local prefix = s:sub(1, i - 1)
            -- Reverse the prefix and append to the original string
            return s .. prefix:reverse()
        end
    end

    -- If the string is empty or no palindrome is found (shouldn't happen as 
    -- an empty or single character string is a palindrome), return the string itself
    return s
end","lu = require('luaunit')

function test_humaneval()
local candidate = make_palindrome
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('x'), 'x')
    lu.assertEquals(candidate('xyz'), 'xyzyx')
    lu.assertEquals(candidate('xyx'), 'xyx')
    lu.assertEquals(candidate('jerry'), 'jerryrrej')
end

os.exit(lu.LuaUnit.run())"
HumanEval_11,knc_Arab,lua,"- أَجْرِي ثنِيَّةَ XOR عَلَى هَذِهِ الإِدْخَالَاتِ وَارْجِعِ النَّتِيجَةَ كَسِلْطَةٍ.- دَخَلَتْ سِلْسِلَتَانِ a و b مَعْ 1 و 0-- >>> string_xor('010', '110')
-- '100'
local function string_xor(a, b)
","local function string_xor(a, b)
    local result = {}
    for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
            table.insert(result, '0')
        else
            table.insert(result, '1')
        end
    end
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_xor
    lu.assertEquals(candidate('111000', '101010'), '010010')
    lu.assertEquals(candidate('1', '1'), '0')
    lu.assertEquals(candidate('0101', '0000'), '0101')
end

os.exit(lu.LuaUnit.run())"
HumanEval_12,knc_Arab,lua,"- سِلَالَاتِ مِثْلِ الطُّولِ. ارْجِعْ نِيلْ فِي حَالِ أنَّ الجدولَ الإدخالي فَارِغٌ.مِنْ جَدَلِ السَّلاَسِلِ، ارْجِعْ أَطْوَلَهَا. ارْجِعِ الْأَوَّلَ فِي حَالِ الْمُتَعَدِّدِ.-- >>> longest({})
-- None
-- >>> longest({'a', 'b', 'c'})
-- 'a'
-- >>> longest({'a', 'bb', 'ccc'})
-- 'ccc'
local function longest(strings)
","local function longest(strings)
    if #strings == 0 then
        return nil
    end

    local max_len = 0
    local longest_str = nil

    for _, str in ipairs(strings) do
        if #str > max_len then
            max_len = #str
            longest_str = str
        end
    end

    return longest_str
end","lu = require('luaunit')

function test_humaneval()
local candidate = longest
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')
    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')
end

os.exit(lu.LuaUnit.run())"
HumanEval_13,knc_Arab,lua,"- رُدْ أَكْبَرَ مُشَارِكِ مُقَسِّمٍ لِعَدَدَيْنِ مِنْ أَصْلَيْنِ-- >>> greatest_common_divisor(3, 5)
-- 1
-- >>> greatest_common_divisor(25, 15)
-- 5
local function greatest_common_divisor(a, b)
","local function greatest_common_divisor(a, b)
    while b ~= 0 do
        local temp = b
        b = a % b
        a = temp
    end
    return a
end","lu = require('luaunit')

function test_humaneval()
local candidate = greatest_common_divisor
    lu.assertEquals(candidate(3, 7), 1)
    lu.assertEquals(candidate(10, 15), 5)
    lu.assertEquals(candidate(49, 14), 7)
    lu.assertEquals(candidate(144, 60), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_14,knc_Arab,lua,"- تَبْلِيْلُ كُلِّ مَوَاضِعِ مِنْ أَقْصَرِ أَطْوَلِ سِلْسِلَةِ الإِدْخَالِ-- >>> all_prefixes('abc')
-- {'a', 'ab', 'abc'}
local function all_prefixes(string)
","local function all_prefixes(string)
    local prefixes = {}
    for i = 1, #string do
        table.insert(prefixes, string:sub(1, i))
    end
    return prefixes
end","lu = require('luaunit')

function test_humaneval()
local candidate = all_prefixes
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_15,knc_Arab,lua,"يَرْجِعُ سِلْسِلَةً مَعْدُودَةً بِأَرْضِ أَرْقَامٍ مُبْتَدِئَةً مِنْ 0 إِلَى n مَعْدُودَةً.-- >>> string_sequence(0)
-- '0'
-- >>> string_sequence(5)
-- '0 1 2 3 4 5'
local function string_sequence(n)
","local function string_sequence(n)
    local result = {}
    for i = 0, n do
        table.insert(result, tostring(i))
    end
    return table.concat(result, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_sequence
    lu.assertEquals(candidate(0), '0')
    lu.assertEquals(candidate(3), '0 1 2 3')
    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')
end

os.exit(lu.LuaUnit.run())"
HumanEval_16,knc_Arab,lua,"- مَنْطُوقٌ، وَجِدْ كَمْ حَرْفٍ مُتَمَيِّزٍ (سَوَاءٌ مِنْ حَالٍ) يَتَأَلَّفُ مِنْهُ-- >>> count_distinct_characters('xyzXYZ')
-- 3
-- >>> count_distinct_characters('Jerry')
-- 4
local function count_distinct_characters(string)
","local function count_distinct_characters(string)
    local char_set = {}
    local lower_string = string:lower()
    for i = 1, #lower_string do
        local char = lower_string:sub(i, i)
        char_set[char] = true
    end
    local count = 0
    for _ in pairs(char_set) do
        count = count + 1
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_distinct_characters
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('abcde'), 5)
    lu.assertEquals(candidate('abcdecadeCADE'), 5)
    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)
    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)
end

os.exit(lu.LuaUnit.run())"
HumanEval_17,knc_Arab,lua,"- "". ""شَيْءٌ"" - رَبْعُ نُوتَة، يَدُومُ ضَرْبَة - 'o ""شَيْء"" - نِصْف نُوتَة، يَدُومُ ضَرْبَيْنِ - 'o' - نُوتَةٌ كُلُّها، تَدُومُ أربعَةَ ضرباتٍ - هَا هُنَا أَسَاطِيرُ:- لَيسَ آخِرَ- مَهمَتُكَ تَحْلِيلُ هَذِهِ السلسلةِ وَإرجاعُ جدولِ الأعدادِ الصحيحةِ المُتَوافِقِينَ لِكَمْ مِنْ ضرباتٍ يَعْمَلُ كُلُّ واحدٍ- دَخَلَتْ هَذِهِ الوَظِيفَةُ سِلْسِلَةً تَمْثِلُ النُّوتَاتَ المُوسِيقِيَّةَ بِصُورَةٍ مُمَيِّزَةٍ بِالأَسْكِي.-- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
local function parse_music(music_string)
","local function parse_music(music_string)
    local beats = {}
    for note in music_string:gmatch(""%S+"") do
        if note == 'o' then
            table.insert(beats, 4)
        elseif note == 'o|' then
            table.insert(beats, 2)
        elseif note == '.|' then
            table.insert(beats, 1)
        end
    end
    return beats
end","lu = require('luaunit')

function test_humaneval()
local candidate = parse_music
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
end

os.exit(lu.LuaUnit.run())"
HumanEval_18,knc_Arab,lua,"- عُدْ كَمْ مَرَّةٍ يُوجَدُ سُلْطَانٌ مُعَيَّنٌ فِي السُّلْطَانِ الأَصْلِيِّ. عُدْ الْمَوَاقِعَ الْمُتَتَعَاوِنَةَ.-- >>> how_many_times('', 'a')
-- 0
-- >>> how_many_times('aaa', 'a')
-- 3
-- >>> how_many_times('aaaa', 'aa')
-- 3
local function how_many_times(string, substring)
","local function how_many_times(string, substring)
    if substring == '' then return 0 end
    local count = 0
    local start = 1

    while true do
        local found = string:find(substring, start, true)
        if not found then
            break
        end
        count = count + 1
        start = found + 1
    end

    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = how_many_times
    lu.assertEquals(candidate('', 'x'), 0)
    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
    lu.assertEquals(candidate('cacacacac', 'cac'), 4)
    lu.assertEquals(candidate('john doe', 'john'), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_19,knc_Arab,lua,"يَرْجِعُ السلسلةَ بِالأرقامِ مُنَظَّمَةً مِنْ أصْغَرِهَا إلَى أكْبَرِهَا- الْخِيَارَاتُ الصَّحِيحَةُ: ""صَفْرٌ"" وَ ""وَاحِدٌ"" وَ ""اثْنَانِ"" وَ ""ثَلَاثَةٌ"" وَ ""أَرْبَعَةٌ"" وَ ""خَمْسَةٌ"" وَ ""سِتَّةٌ"" وَ ""سَبْعَةٌ"" وَ ""ثَمَانٍ"" وَ ""تِسْعَةٌ"" - إدخالَةٌ سِلْسِلَةٌ مُحَدَّدَةٌ بِالفَضاءِ مِنْ أرقامٍ مِنْ ""صِفْرٍ"" إلى ""تِسْعٍ""-- >>> sort_numbers('three one five')
-- 'one three five'
local function sort_numbers(numbers)
","local function sort_numbers(numbers)
    local number_map = {
        zero = 0,
        one = 1,
        two = 2,
        three = 3,
        four = 4,
        five = 5,
        six = 6,
        seven = 7,
        eight = 8,
        nine = 9
    }

    local number_names = {
        [0] = 'zero',
        [1] = 'one',
        [2] = 'two',
        [3] = 'three',
        [4] = 'four',
        [5] = 'five',
        [6] = 'six',
        [7] = 'seven',
        [8] = 'eight',
        [9] = 'nine'
    }

    local words = {}
    for word in numbers:gmatch(""%S+"") do
        table.insert(words, word)
    end

    table.sort(words, function(a, b)
        return number_map[a] < number_map[b]
    end)

    local sorted_numbers = {}
    for _, word in ipairs(words) do
        table.insert(sorted_numbers, number_names[number_map[word]])
    end

    return table.concat(sorted_numbers, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_numbers
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('three'), 'three')
    lu.assertEquals(candidate('three five nine'), 'three five nine')
    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
end

os.exit(lu.LuaUnit.run())"
HumanEval_20,knc_Arab,lua,"- غَيْرَهُمْ وَارْجِعْ بِالتَّرْتِيبِ (أَقَلَّ عَدَدًا أَكْثَرَ عَدَدًا).مِنْ جَدَلِ أَرْبَعَةِ أَرْبَعَةٍ (مِنْ طُولِ أَقَلِّ اثْنَيْنِ) اخْتَارْ وَارْجِعْ اثْنَيْنِ أَقْرَبَ مِنْ كُلِّ وَاحِدٍ-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})
-- {2.0, 2.2}
-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})
-- {2.0, 2.0}
local function find_closest_elements(numbers)
","local function find_closest_elements(numbers)
    table.sort(numbers)
    local min_diff = math.huge
    local result = {}

    for i = 1, #numbers - 1 do
        local diff = numbers[i + 1] - numbers[i]
        if diff < min_diff then
            min_diff = diff
            result = {numbers[i], numbers[i + 1]}
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = find_closest_elements
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_21,knc_Arab,lua,"- كَيْ يَصِيرَ أصْغَرَ عَدَدٍ 0 وَأكْبَرَ عَدَدٍ 1 - مَوْضُوعٌ لِلْأَرْقَامِ (مِنْ عَنْدَهُ عَنْدَهُ عَنْدَهُ عَنْدَهُ عَنْدَهُ) ، تَعَدُّدٌ لِينِيَارِيٌّ لِلْمَوْضُوعِ-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
-- {0.0, 0.25, 0.5, 0.75, 1.0}
local function rescale_to_unit(numbers)
","local function rescale_to_unit(numbers)
    local min_val = math.huge
    local max_val = -math.huge

    -- Find the min and max values in the table
    for _, num in ipairs(numbers) do
        if num < min_val then
            min_val = num
        end
        if num > max_val then
            max_val = num
        end
    end

    local scale = max_val - min_val

    -- Apply the transformation
    local transformed = {}
    for i, num in ipairs(numbers) do
        transformed[i] = (num - min_val) / scale
    end

    return transformed
end","lu = require('luaunit')

function test_humaneval()
local candidate = rescale_to_unit
    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
end

os.exit(lu.LuaUnit.run())"
HumanEval_22,knc_Arab,lua,"- مِفْلِتْرْ مَوْهُوبْ مِنْ أَيّ قِيَمْ ثَنَايَا لِلْكُلّيَاتْ-- >>> filter_integers({'a', 3.14, 5})
-- {5}
-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
-- {1, 2, 3}
local function filter_integers(values)
","local function filter_integers(values)
    local result = {}
    for _, value in ipairs(values) do
        if type(value) == ""number"" and math.type(value) == ""integer"" then
            table.insert(result, value)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_integers
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_23,knc_Arab,lua,"- عُودْ طُولَ السِلْطَةِ المَوْهُوبَةِ-- >>> strlen('')
-- 0
-- >>> strlen('abc')
-- 3
local function strlen(string)
","local function strlen(string)
    return #string
end","lu = require('luaunit')

function test_humaneval()
local candidate = strlen
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('x'), 1)
    lu.assertEquals(candidate('asdasnakj'), 9)
end

os.exit(lu.LuaUnit.run())"
HumanEval_24,knc_Arab,lua,"- لِعَدَدٍ مَعْطُوْدٍ n، أَجِدْ أَكْبَرَ عَدَدٍ يَقْسِمُ n بِنَظِيْمٍ، أَصْغَرَ مِنْ n -- >>> largest_divisor(15)
-- 5
local function largest_divisor(n)
","local function largest_divisor(n)
    for i = n - 1, 1, -1 do
        if n % i == 0 then
            return i
        end
    end
    return nil -- In case no divisor is found, though this will not happen for n > 1
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_divisor
    lu.assertEquals(candidate(3), 1)
    lu.assertEquals(candidate(7), 1)
    lu.assertEquals(candidate(10), 5)
    lu.assertEquals(candidate(100), 50)
    lu.assertEquals(candidate(49), 7)
end

os.exit(lu.LuaUnit.run())"
HumanEval_25,knc_Arab,lua,"- عَدَدُ الإِدْخَالِ يَجِبُ أَنْ يَكُونَ مِثْلَ حَصِيلِ كُلِّ العواملِ- كُلُّ مِنْ العواملِ يَجِبُ أَنْ تُجْزَى عَدَدَ مَرَّاتٍ تُوافِقُ عَدَدَ مَرَّاتِ ظُهُورِهَا فِي العَدَدِ.- جَدْلُ عَوَادِي العُوَادِرِ الأُولَى لِعَدَدٍ مُعَيَّنٍ بِالتَّرْتِيبِ مِنْ أَصْغَرِهِ إِلَى أَكْبَرِهِ-- >>> factorize(8)
-- {2, 2, 2}
-- >>> factorize(25)
-- {5, 5}
-- >>> factorize(70)
-- {2, 5, 7}
local function factorize(n)
","local function factorize(n)
    local factors = {}
    local divisor = 2
    while n > 1 do
        while n % divisor == 0 do
            table.insert(factors, divisor)
            n = n / divisor
        end
        divisor = divisor + 1
    end
    return factors
end","lu = require('luaunit')

function test_humaneval()
local candidate = factorize
    lu.assertEquals(candidate(2), {2})
    lu.assertEquals(candidate(4), {2, 2})
    lu.assertEquals(candidate(8), {2, 2, 2})
    lu.assertEquals(candidate(57), {3, 19})
    lu.assertEquals(candidate(3249), {3, 3, 19, 19})
    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})
    lu.assertEquals(candidate(20577), {3, 19, 19, 19})
    lu.assertEquals(candidate(18), {2, 3, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_26,knc_Arab,lua,"- أَبْقِيَ لِلْعَنَاصِرِ أَمْرَ الْمَدْخُولِمِنْ جَدَلِ الأَصْحَابِ، أَزِلْ كُلَّ العِنَادِ الْمُتَوَقِّعِ أَكْثَرَ مِنْ مَرَّةٍ.-- >>> remove_duplicates({1, 2, 3, 2, 4})
-- {1, 3, 4}
local function remove_duplicates(numbers)
","local function remove_duplicates(numbers)
    local counts = {}
    -- Count occurrences of each element
    for _, num in ipairs(numbers) do
        counts[num] = (counts[num] or 0) + 1
    end
    -- Collect elements that occur exactly once
    local result = {}
    for _, num in ipairs(numbers) do
        if counts[num] == 1 then
            table.insert(result, num)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = remove_duplicates
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})
    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}), {1, 4, 5})
end

os.exit(lu.LuaUnit.run())"
HumanEval_27,knc_Arab,lua,"- لِسِلْسِلَةٍ مَعْطُوفَةٍ، أَلْفِ حُرُوفَ حَرْفٍ صَغِيرٍ إِلَى حَرْفٍ كَبِيرٍ وَحَرْفٍ كَبِيرٍ إِلَى حَرْفٍ صَغِيرٍ.-- >>> flip_case('Hello')
-- 'hELLO'
local function flip_case(string)
","local function flip_case(str)
    return (str:gsub(""%a"", function(c)
        if c:lower() == c then
            return c:upper()
        else
            return c:lower()
        end
    end))
end","lu = require('luaunit')

function test_humaneval()
local candidate = flip_case
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('Hello!'), 'hELLO!')
    lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
end

os.exit(lu.LuaUnit.run())"
HumanEval_28,knc_Arab,lua,"- تَجْمِيعُ خَطّاتِ السّلسلةِ في خَطّةٍ وَاحِدَةٍ-- >>> concatenate({})
-- ''
-- >>> concatenate({'a', 'b', 'c'})
-- 'abc'
local function concatenate(strings)
","local function concatenate(strings)
    return table.concat(strings, """")
end","lu = require('luaunit')

function test_humaneval()
local candidate = concatenate
    lu.assertEquals(candidate({}), '')
    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')
    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}), 'xyzwk')
end

os.exit(lu.LuaUnit.run())"
HumanEval_29,knc_Arab,lua,"- تَفْتِيلُ جَدَلَ إِدْخَالِ السُّلُولِ لِلَّذِينَ يَبْدَؤُونَ بِمُقْتَضَى مَوْضُوعٍ.-- >>> filter_by_prefix({}, 'a')
-- {}
-- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
-- {'abc', 'array'}
local function filter_by_prefix(strings, prefix)
","local function filter_by_prefix(strings, prefix)
    local result = {}
    for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
            table.insert(result, str)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_by_prefix
    lu.assertEquals(candidate({}, 'john'), {})
    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_30,knc_Arab,lua,"- رُدَّ فِي الْجَدَلِ أَرْكَانَ إيجَابِيَّةً.-- >>> get_positive({-1, 2, -4, 5, 6})
-- {2, 5, 6}
-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
-- {5, 3, 2, 3, 9, 123, 1}
local function get_positive(l)
","local function get_positive(l)
    local positives = {}
    for _, v in ipairs(l) do
        if v > 0 then
            table.insert(positives, v)
        end
    end
    return positives
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_positive
    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
    lu.assertEquals(candidate({-1, -2}), {})
    lu.assertEquals(candidate({}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_31,knc_Arab,lua,"رُدَّ صَحِيحًا إِنْ كَانَ عَدَدٌ مُعَيَّنٌ أَوَّلًا، وَكَذِبًا إِلَّا.-- >>> is_prime(6)
-- false
-- >>> is_prime(101)
-- true
-- >>> is_prime(11)
-- true
-- >>> is_prime(13441)
-- true
-- >>> is_prime(61)
-- true
-- >>> is_prime(4)
-- false
-- >>> is_prime(1)
-- false
local function is_prime(n)
","local function is_prime(n)
    if n <= 1 then
        return false
    end
    if n <= 3 then
        return true
    end
    if n % 2 == 0 or n % 3 == 0 then
        return false
    end
    local i = 5
    while i * i <= n do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_prime
    lu.assertEquals(candidate(6), false)
    lu.assertEquals(candidate(101), true)
    lu.assertEquals(candidate(11), true)
    lu.assertEquals(candidate(13441), true)
    lu.assertEquals(candidate(61), true)
    lu.assertEquals(candidate(4), false)
    lu.assertEquals(candidate(1), false)
    lu.assertEquals(candidate(5), true)
    lu.assertEquals(candidate(11), true)
    lu.assertEquals(candidate(17), true)
    lu.assertEquals(candidate(85), false)
    lu.assertEquals(candidate(77), false)
    lu.assertEquals(candidate(255379), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_33,knc_Arab,lua,"- لِقِيَمِ مَا يَتَوافَقُ مِنْ مَعَايِنِ لَكِنْ مُنْتَقَمَةً- l' هُوَ مُتَشَابِهٌ لِ l فِي الْمَعَايِيرِ الَّتِي لَا تَقْسَمُ بِثَلَاثَةٍ، وَقِيَمُهُ فِي الْمَعَايِيرِ الَّتِي تَقْسَمُ بِثَلَاثَةٍ مِثْلُهَا - هَذِهِ الوَظِيفَة تَأْخُذُ جَدَدَ l وَتَرُدُّ جَدَدَ l' كَذَا-- >>> sort_third({1, 2, 3})
-- {1, 2, 3}
-- >>> sort_third({5, 6, 3, 4, 8, 9, 2})
-- {2, 6, 3, 4, 8, 9, 5}
local function sort_third(l)
","local function sort_third(l)
    local divisible_by_three = {}
    
    -- Collect elements at indices divisible by three
    for i = 3, #l, 3 do
        table.insert(divisible_by_three, l[i])
    end

    -- Sort collected elements
    table.sort(divisible_by_three)
    
    -- Create a copy of the original table
    local l_prime = {}
    for i = 1, #l do
        l_prime[i] = l[i]
    end

    -- Replace elements at indices divisible by three with sorted elements
    local sorted_index = 1
    for i = 3, #l, 3 do
        l_prime[i] = divisible_by_three[sorted_index]
        sorted_index = sorted_index + 1
    end

    return l_prime
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_third
    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2}), {2, 6, 3, 4, 8, 9, 5})
    lu.assertEquals(candidate({5, 8, 3, 4, 6, 9, 2}), {2, 8, 3, 4, 6, 9, 5})
    lu.assertEquals(candidate({5, 6, 9, 4, 8, 3, 2}), {2, 6, 9, 4, 8, 3, 5})
    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2, 1}), {2, 6, 3, 4, 8, 9, 5, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_34,knc_Arab,lua,"- يَرُدُّ مُنْتَدَبَ العَنَاصِرِ الفَرْدَةِ في الجدولِ-- >>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})
-- {0, 2, 3, 5, 9, 123}
local function unique(l)
","local function unique(l)
    local seen = {}
    local result = {}
    
    for _, value in ipairs(l) do
        if not seen[value] then
            table.insert(result, value)
            seen[value] = true
        end
    end
    
    table.sort(result)
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = unique
    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})
end

os.exit(lu.LuaUnit.run())"
HumanEval_35,knc_Arab,lua,"- رُدَّ الحَدَّ الأَكْبَرَ مِنْ العَنَاقِدِ-- >>> max_element({1, 2, 3})
-- 3
-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
-- 123
local function max_element(l)
","local function max_element(l)
    local max = l[1]
    for i = 2, #l do
        if l[i] > max then
            max = l[i]
        end
    end
    return max
end","lu = require('luaunit')

function test_humaneval()
local candidate = max_element
    lu.assertEquals(candidate({1, 2, 3}), 3)
    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
end

os.exit(lu.LuaUnit.run())"
HumanEval_36,knc_Arab,lua,"يَعُودُ عَدَدَ مَرَّاتِ يَظْهَرُ الرَّقْمُ 7 فِي أَعْدَادٍ سَوَاءٍ أَقَلَّ مِنْ n تَقْسِمُ بِ 11 أَوْ 13.-- >>> fizz_buzz(50)
-- 0
-- >>> fizz_buzz(78)
-- 2
-- >>> fizz_buzz(79)
-- 3
local function fizz_buzz(n)
","local function fizz_buzz(n)
    local count = 0
    for i = 1, n - 1 do
        if i % 11 == 0 or i % 13 == 0 then
            local str_i = tostring(i)
            if str_i:find(""7"") then
                count = count + 1
            end
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = fizz_buzz
    lu.assertEquals(candidate(50), 0)
    lu.assertEquals(candidate(78), 2)
    lu.assertEquals(candidate(79), 3)
    lu.assertEquals(candidate(100), 3)
    lu.assertEquals(candidate(200), 6)
    lu.assertEquals(candidate(4000), 192)
    lu.assertEquals(candidate(10000), 639)
    lu.assertEquals(candidate(100000), 8026)
end

os.exit(lu.LuaUnit.run())"
HumanEval_37,knc_Arab,lua,"- لِقِيمَةِ مَعَايِنِ l، لَكِنْ مُنْتَقَطَةً.- l' هُوَ مُتَشَابِه لـ l فِي الْمُعَايِن الْعَدِيدَة، وَقِيَمُه فِي الْمُعَايِن الزَّوَاجِيَّة مُسَاوِيَة - هَذِهِ الوَظِيفَة تَأْخُذُ جَدَدَ l وَتَرُدُّ جَدَدَ l' كَذَا-- >>> sort_even({1, 2, 3})
-- {1, 2, 3}
-- >>> sort_even({5, 6, 3, 4})
-- {3, 6, 5, 4}
local function sort_even(l)
","local function sort_even(l)
    -- Extract the even indexed elements
    local even_elements = {}
    for i = 2, #l, 2 do
        table.insert(even_elements, l[i])
    end

    -- Sort the extracted even elements
    table.sort(even_elements)

    -- Create a new table for the result and fill it with the appropriate elements
    local result = {}
    local even_index = 1
    for i = 1, #l do
        if i % 2 == 0 then
            result[i] = even_elements[even_index]
            even_index = even_index + 1
        else
            result[i] = l[i]
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_even
    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})
    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})
    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})
end

os.exit(lu.LuaUnit.run())"
HumanEval_39,knc_Arab,lua,"- prime_fib يَرُدُّ عَدَدَ n-th هُوَ عَدَدُ فِبُونَاتْكِي وَهُوَ أَيْضًا عَدَدٌ أَوَّلٌ. -- >>> prime_fib(1)
-- 2
-- >>> prime_fib(2)
-- 3
-- >>> prime_fib(3)
-- 5
-- >>> prime_fib(4)
-- 13
-- >>> prime_fib(5)
-- 89
local function prime_fib(n)
","local function is_prime(num)
    if num <= 1 then return false end
    if num <= 3 then return true end
    if num % 2 == 0 or num % 3 == 0 then return false end
    local i = 5
    while i * i <= num do
        if num % i == 0 or num % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end

local function fibonacci()
    local a, b = 0, 1
    return function()
        local temp = a
        a, b = b, a + b
        return temp
    end
end

local function prime_fib(n)
    local count = 0
    local fib_gen = fibonacci()
    while true do
        local fib_num = fib_gen()
        if is_prime(fib_num) then
            count = count + 1
            if count == n then
                return fib_num
            end
        end
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = prime_fib
    lu.assertEquals(candidate(1), 2)
    lu.assertEquals(candidate(2), 3)
    lu.assertEquals(candidate(3), 5)
    lu.assertEquals(candidate(4), 13)
    lu.assertEquals(candidate(5), 89)
    lu.assertEquals(candidate(6), 233)
    lu.assertEquals(candidate(7), 1597)
    lu.assertEquals(candidate(8), 28657)
    lu.assertEquals(candidate(9), 514229)
    lu.assertEquals(candidate(10), 433494437)
end

os.exit(lu.LuaUnit.run())"
HumanEval_40,knc_Arab,lua,"- جَمْعُ لِلْصِفْرِ، وَكَذِبٌ غَيْرُهُ.يَعُودُ صَحِيحًا إِنْ كَانَ ثَلَاثَةُ عَنَاصِرٍ مُتَمَيِّزَةٍ فِي الْجَدَلِ- triples_sum_to_zero يَأْخُذُ جَدَلَ أَعْدَادٍ كَدَخْلٍ.-- >>> triples_sum_to_zero({1, 3, 5, 0})
-- false
-- >>> triples_sum_to_zero({1, 3, -2, 1})
-- true
-- >>> triples_sum_to_zero({1, 2, 3, 7})
-- false
-- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
-- true
-- >>> triples_sum_to_zero({1})
-- false
local function triples_sum_to_zero(l)
","local function triples_sum_to_zero(l)
    table.sort(l)
    for i = 1, #l - 2 do
        local a = l[i]
        local left = i + 1
        local right = #l
        while left < right do
            local b = l[left]
            local c = l[right]
            local sum = a + b + c
            if sum == 0 then
                return true
            elseif sum < 0 then
                left = left + 1
            else
                right = right - 1
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = triples_sum_to_zero
    lu.assertEquals(candidate({1, 3, 5, 0}), false)
    lu.assertEquals(candidate({1, 3, 5, -1}), false)
    lu.assertEquals(candidate({1, 3, -2, 1}), true)
    lu.assertEquals(candidate({1, 2, 3, 7}), false)
    lu.assertEquals(candidate({1, 2, 5, 7}), false)
    lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
    lu.assertEquals(candidate({1}), false)
    lu.assertEquals(candidate({1, 3, 5, -100}), false)
    lu.assertEquals(candidate({100, 3, 5, -100}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_41,knc_Arab,lua,"- هَذِهِ الوَظِيفَة تَخْرُجُ عَدَدَ هَذِهِ الاصطداماتِ.- في مسارِهِمْ كَأَنَّهُمْ لَمْ يَصطَدِمُوا.- وَلَكِنَّ السَّيَّارَاتَ قَوِيَّةٌ وَقَوِيَّةٌ بِلاَ حَدٍّ وَبِذَلِكَ تَسْتَمِرُّ-عِنْدَمَا تَصْطَدِمُ مَرَّةٌ مَرَّةً مَرَّةً مَرَّةً مَرَّةً مَرَّةً مَرَّةًكُلّ السّيّارات تَسِيرُ بِنَفس السّرعةِ. قيلَ إنّ سيّارتَين تَصطَادِمَانِ.يَسِيرُونَ مِنْ الْيَمِينِ إِلَى الْيَسَارِ.- نَ السّيّاراتِ تَسِيرُ يَسَارَ لَمَنَ الَيْمَنَ؛ فَفِي الَتِيكِ، مَجموعةٌ مُختَلِفَةٌ مِن نَ السّيّاراتِ -تَخَيَّلْ سَبِيلَ هُوَ حَدٌّ مُسْتَقِيمٌ بِلاَ حَدٍّ طَوِيلٌ.local function car_race_collision(n)
","local function car_race_collision(n)
    -- Since each car from the left to right collides with each car from the right to left,
    -- the number of collisions will be n*n.
    return n * n
end","lu = require('luaunit')

function test_humaneval()
local candidate = car_race_collision
    lu.assertEquals(candidate(2), 4)
    lu.assertEquals(candidate(3), 9)
    lu.assertEquals(candidate(4), 16)
    lu.assertEquals(candidate(8), 64)
    lu.assertEquals(candidate(10), 100)
end

os.exit(lu.LuaUnit.run())"
HumanEval_42,knc_Arab,lua,"- جَدَلُ الرَّجْعَةِ بِالعَنَاصِرِ المُزَادَةِ بِ1.-- >>> incr_list({1, 2, 3})
-- {2, 3, 4}
-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
-- {6, 4, 6, 3, 4, 4, 10, 1, 124}
local function incr_list(l)
","local function incr_list(l)
    local result = {}
    for i = 1, #l do
        result[i] = l[i] + 1
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = incr_list
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
end

os.exit(lu.LuaUnit.run())"
HumanEval_43,knc_Arab,lua,"- جَمْعُ لِلْصِفْرِ، وَكَذِبٌ غَيْرُهُ.يَعُودُ صَحِيحًا إِنْ كَانَ فِي الجَدَلِ عَنْصَفَانِ مُتَمَيِّزَانِ- pairs_sum_to_zero يَأْخُذُ جَدَلَ أَعْدَادٍ كَدَخْلٍ.-- >>> pairs_sum_to_zero({1, 3, 5, 0})
-- false
-- >>> pairs_sum_to_zero({1, 3, -2, 1})
-- false
-- >>> pairs_sum_to_zero({1, 2, 3, 7})
-- false
-- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
-- true
-- >>> pairs_sum_to_zero({1})
-- false
local function pairs_sum_to_zero(l)
","local function pairs_sum_to_zero(l)
    local seen = {}
    for _, value in ipairs(l) do
        if seen[-value] then
            return true
        end
        seen[value] = true
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = pairs_sum_to_zero
    lu.assertEquals(candidate({1, 3, 5, 0}), false)
    lu.assertEquals(candidate({1, 3, -2, 1}), false)
    lu.assertEquals(candidate({1, 2, 3, 7}), false)
    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
    lu.assertEquals(candidate({1}), false)
    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_44,knc_Arab,lua,"- أَسَاسَاتُ أَقَلَّ مِنْ 10- عَادَةُ التَّمْثِيلِ السَّلَسَةِ بَعْدَ التَّحْوِيلِ.- تَغَيَّرْ قَاعِدَةَ العَدَدِ لِعَدَدِ x-- >>> change_base(8, 3)
-- '22'
-- >>> change_base(8, 2)
-- '1000'
-- >>> change_base(7, 2)
-- '111'
local function change_base(x, base)
","local function change_base(x, base)
    if base < 2 or base > 9 then
        error(""Base must be between 2 and 9"")
    end

    if x == 0 then
        return ""0""
    end

    local result = """"
    while x > 0 do
        local remainder = x % base
        result = tostring(remainder) .. result
        x = math.floor(x / base)
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = change_base
    lu.assertEquals(candidate(8, 3), '22')
    lu.assertEquals(candidate(9, 3), '100')
    lu.assertEquals(candidate(234, 2), '11101010')
    lu.assertEquals(candidate(16, 2), '10000')
    lu.assertEquals(candidate(8, 2), '1000')
    lu.assertEquals(candidate(7, 2), '111')
    lu.assertEquals(candidate(2, 3), '2')
    lu.assertEquals(candidate(3, 4), '3')
    lu.assertEquals(candidate(4, 5), '4')
    lu.assertEquals(candidate(5, 6), '5')
    lu.assertEquals(candidate(6, 7), '6')
    lu.assertEquals(candidate(7, 8), '7')
end

os.exit(lu.LuaUnit.run())"
HumanEval_45,knc_Arab,lua,"- مُعَطَى طُولِ جَانِبٍ وَمَسْطَحِ عَوْدٍ عَلَى ثَلَاثِيٍّ.-- >>> triangle_area(5, 3)
-- 7.5
local function triangle_area(a, h)
","local function triangle_area(a, h)
    return 0.5 * a * h
end","lu = require('luaunit')

function test_humaneval()
local candidate = triangle_area
    lu.assertEquals(candidate(5, 3), 7.5)
    lu.assertEquals(candidate(2, 2), 2.0)
    lu.assertEquals(candidate(10, 8), 40.0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_46,knc_Arab,lua,"- رَجَاءً اَكْتُبْ دَلِيْلًا لِيَحْسَبَ بِكَفَاءَةٍ العَنْصَرَةَ n مِنْ تَسلُوْلِ الأَرقَامِ في 4 . لاَ تَستَخدِمْ التَّكْرَارَ.- فَيْبَنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْن- فِبْرِيْدِيْنْ) -> 0 - فِبْرِيْدِيْنْ (2) -> 2 - فِبْرِيَا) -> 0 - فِبْرِيْنْتِيْنْ)- تَسلسلْ أرقامْ فِبْوَرْدِيْ تَسلسلْ مِثْلَ تَسلسلْ فِبْوَنْكِيْ يُعرَفْ كَمَا يَليْ:-- >>> fib4(5)
-- 4
-- >>> fib4(6)
-- 8
-- >>> fib4(7)
-- 14
local function fib4(n)
","local function fib4(n)
    if n == 0 then return 0 end
    if n == 1 then return 0 end
    if n == 2 then return 2 end
    if n == 3 then return 0 end

    local a, b, c, d = 0, 0, 2, 0

    for i = 4, n do
        local temp = a + b + c + d
        a, b, c, d = b, c, d, temp
    end

    return d
end","lu = require('luaunit')

function test_humaneval()
local candidate = fib4
    lu.assertEquals(candidate(5), 4)
    lu.assertEquals(candidate(8), 28)
    lu.assertEquals(candidate(10), 104)
    lu.assertEquals(candidate(12), 386)
end

os.exit(lu.LuaUnit.run())"
HumanEval_47,knc_Arab,lua,"- عُودُوْا مَوْسِطَ العَنَاصِرِ في الجدولِ-- >>> median({3, 1, 2, 4, 5})
-- 3
-- >>> median({-10, 4, 6, 1000, 10, 20})
-- 15.0
local function median(l)
","local function median(l)
    table.sort(l)
    local n = #l
    if n % 2 == 1 then
        return l[(n + 1) / 2]
    else
        local mid1 = n / 2
        local mid2 = mid1 + 1
        return (l[mid1] + l[mid2]) / 2
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = median
    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)
    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)
    lu.assertEquals(candidate({5}), 5)
    lu.assertEquals(candidate({6, 5}), 5.5)
    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)
end

os.exit(lu.LuaUnit.run())"
HumanEval_48,knc_Arab,lua,"يَتَفَقَّدُ إنْ كَانَتْ سِلْسِلَةٌ مُعَطَّاةٌ عَلَى حَرْفٍ.-- >>> is_palindrome('')
-- true
-- >>> is_palindrome('aba')
-- true
-- >>> is_palindrome('aaaaa')
-- true
-- >>> is_palindrome('zbcd')
-- false
local function is_palindrome(text)
","local function is_palindrome(text)
    return text == string.reverse(text)
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_palindrome
    lu.assertEquals(candidate(''), true)
    lu.assertEquals(candidate('aba'), true)
    lu.assertEquals(candidate('aaaaa'), true)
    lu.assertEquals(candidate('zbcd'), false)
    lu.assertEquals(candidate('xywyx'), true)
    lu.assertEquals(candidate('xywyz'), false)
    lu.assertEquals(candidate('xywzx'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_49,knc_Arab,lua,"- عُودْ 2^n مودِلُو p (تَعَرَّفْ بِالأَرْقَامِ).-- >>> modp(3, 5)
-- 3
-- >>> modp(1101, 101)
-- 2
-- >>> modp(0, 101)
-- 1
-- >>> modp(3, 11)
-- 8
-- >>> modp(100, 101)
-- 1
local function modp(n, p)
","local function modp(n, p)
    return (2^n) % p
end","lu = require('luaunit')

function test_humaneval()
local candidate = modp
    lu.assertEquals(candidate(3, 5), 3)
    lu.assertEquals(candidate(1101, 101), 2)
    lu.assertEquals(candidate(0, 101), 1)
    lu.assertEquals(candidate(3, 11), 8)
    lu.assertEquals(candidate(100, 101), 1)
    lu.assertEquals(candidate(30, 5), 4)
    lu.assertEquals(candidate(31, 5), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_51,knc_Arab,lua,"- remove_vowels عَمَلٌ يَأْخُذُ السِّلْطَ وَيَرُدُّ السِّلْطَ بِغَيْرِ حُرُوفٍ.-- >>> remove_vowels('')
-- ''
-- >>> remove_vowels('abcdef')
-- 'bcdf'
-- >>> remove_vowels('aaaaa')
-- ''
-- >>> remove_vowels('aaBAA')
-- 'B'
-- >>> remove_vowels('zbcd')
-- 'zbcd'
local function remove_vowels(text)
","local function remove_vowels(text)
    return text:gsub(""[aeiouAEIOU]"", """")
end","lu = require('luaunit')

function test_humaneval()
local candidate = remove_vowels
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
    lu.assertEquals(candidate('fedcba'), 'fdcb')
    lu.assertEquals(candidate('eeeee'), '')
    lu.assertEquals(candidate('acBAA'), 'cB')
    lu.assertEquals(candidate('EcBOO'), 'cB')
    lu.assertEquals(candidate('ybcd'), 'ybcd')
end

os.exit(lu.LuaUnit.run())"
HumanEval_52,knc_Arab,lua,"يَرُدُّ الصَّحِيحَ إِنْ كَانَ كُلُّ الأَرْقَامِ فِي الجَدَلِ l دُونَ الْعَتَبِ t.-- >>> below_threshold({1, 2, 4, 10}, 100)
-- true
-- >>> below_threshold({1, 20, 4, 10}, 5)
-- false
local function below_threshold(l, t)
","local function below_threshold(l, t)
    for _, number in ipairs(l) do
        if number >= t then
            return false
        end
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = below_threshold
    lu.assertEquals(candidate({1, 2, 4, 10}, 100), true)
    lu.assertEquals(candidate({1, 20, 4, 10}, 5), false)
    lu.assertEquals(candidate({1, 20, 4, 10}, 21), true)
    lu.assertEquals(candidate({1, 20, 4, 10}, 22), true)
    lu.assertEquals(candidate({1, 8, 4, 10}, 11), true)
    lu.assertEquals(candidate({1, 8, 4, 10}, 10), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_53,knc_Arab,lua,"- ضِمْ عدَدَيْنِ x و y -- >>> add(2, 3)
-- 5
-- >>> add(5, 7)
-- 12
local function add(x, y)
","local function add(x, y)
    return x + y
end","lu = require('luaunit')

function test_humaneval()
local candidate = add
    lu.assertEquals(candidate(0, 1), 1)
    lu.assertEquals(candidate(1, 0), 1)
    lu.assertEquals(candidate(2, 3), 5)
    lu.assertEquals(candidate(5, 7), 12)
    lu.assertEquals(candidate(7, 5), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_54,knc_Arab,lua,"- تَفَقَّدْ إنْ كَانَ لِكَلِمَتَيْنِ حَرْفٌ مُتَشَابِهٌ.-- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
-- true
-- >>> same_chars('abcd', 'dddddddabc')
-- true
-- >>> same_chars('dddddddabc', 'abcd')
-- true
-- >>> same_chars('eabcd', 'dddddddabc')
-- false
-- >>> same_chars('abcd', 'dddddddabce')
-- false
-- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
-- false
local function same_chars(s0, s1)
","local function same_chars(s0, s1)
    local function char_set(str)
        local set = {}
        for c in str:gmatch(""."") do
            set[c] = true
        end
        return set
    end

    local set0 = char_set(s0)
    local set1 = char_set(s1)

    for c in pairs(set0) do
        if not set1[c] then
            return false
        end
    end

    for c in pairs(set1) do
        if not set0[c] then
            return false
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = same_chars
    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)
    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)
    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)
    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)
    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)
    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)
    lu.assertEquals(candidate('aabb', 'aaccc'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_55,knc_Arab,lua,"- ارْجِعْ عَدَدَ فِبُونَاتْيَسْ-- >>> fib(10)
-- 55
-- >>> fib(1)
-- 1
-- >>> fib(8)
-- 21
local function fib(n)
","local function fib(n)
    if n <= 0 then
        return 0
    elseif n == 1 then
        return 1
    else
        local a, b = 0, 1
        for i = 2, n do
            a, b = b, a + b
        end
        return b
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = fib
    lu.assertEquals(candidate(10), 55)
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(8), 21)
    lu.assertEquals(candidate(11), 89)
    lu.assertEquals(candidate(12), 144)
end

os.exit(lu.LuaUnit.run())"
HumanEval_56,knc_Arab,lua,"- يَرْجِعُ حَقًّا إِذَا كَانَ لِكُلِّ قُفَّةِ فَتْحٍ قُفَّةٌ مُطَابِقَةٌ.- قُرَنْتَسْ هِيَ سِلْسِلَةٌ مِنْ ""<"" و "">"".-- >>> correct_bracketing('<')
-- false
-- >>> correct_bracketing('<>')
-- true
-- >>> correct_bracketing('<<><>>')
-- true
-- >>> correct_bracketing('><<>')
-- false
local function correct_bracketing(brackets)
","local function correct_bracketing(brackets)
    local balance = 0
    
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == '<' then
            balance = balance + 1
        elseif char == '>' then
            balance = balance - 1
        end
        
        if balance < 0 then
            return false
        end
    end
    
    return balance == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = correct_bracketing
    lu.assertEquals(candidate('<>'), true)
    lu.assertEquals(candidate('<<><>>'), true)
    lu.assertEquals(candidate('<><><<><>><>'), true)
    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
    lu.assertEquals(candidate('<<<><>>>>'), false)
    lu.assertEquals(candidate('><<>'), false)
    lu.assertEquals(candidate('<'), false)
    lu.assertEquals(candidate('<<<<'), false)
    lu.assertEquals(candidate('>'), false)
    lu.assertEquals(candidate('<<>'), false)
    lu.assertEquals(candidate('<><><<><>><>><<>'), false)
    lu.assertEquals(candidate('<><><<><>><>>><>'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_57,knc_Arab,lua,"- عُودْ صحيحْ هو أَنْ عناصر الجدولْ تَزِيدْ أو تَنْقَصْ بشكلٍ مُتَواصِلْ-- >>> monotonic({1, 2, 4, 20})
-- true
-- >>> monotonic({1, 20, 4, 10})
-- false
-- >>> monotonic({4, 1, 0, -10})
-- true
local function monotonic(l)
","local function monotonic(l)
    if #l < 2 then
        return true
    end

    local increasing = true
    local decreasing = true

    for i = 2, #l do
        if l[i] > l[i - 1] then
            decreasing = false
        elseif l[i] < l[i - 1] then
            increasing = false
        end
    end

    return increasing or decreasing
end","lu = require('luaunit')

function test_humaneval()
local candidate = monotonic
    lu.assertEquals(candidate({1, 2, 4, 10}), true)
    lu.assertEquals(candidate({1, 2, 4, 20}), true)
    lu.assertEquals(candidate({1, 20, 4, 10}), false)
    lu.assertEquals(candidate({4, 1, 0, -10}), true)
    lu.assertEquals(candidate({4, 1, 1, 0}), true)
    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)
    lu.assertEquals(candidate({9, 9, 9, 9}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_58,knc_Arab,lua,"- يَعُودُ مُصَنَّفَةً فَرْدَةً مَوْجُودَةً لِجَدَدَيْنِ.-- >>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})
-- {1, 5, 653}
-- >>> common({5, 3, 2, 8}, {3, 2})
-- {2, 3}
local function common(l1, l2)
","local function common(l1, l2)
    local set1 = {}
    local set2 = {}
    local result = {}

    -- Create a set for the first list
    for _, value in ipairs(l1) do
        set1[value] = true
    end

    -- Create a set for the second list, noting only common elements
    for _, value in ipairs(l2) do
        if set1[value] then
            set2[value] = true
        end
    end

    -- Collect the keys from the set into a results table
    for key in pairs(set2) do
        table.insert(result, key)
    end

    -- Sort the results table
    table.sort(result)

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = common
    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})
    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})
    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})
    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_59,knc_Arab,lua,"- رُدُّوا أَكْبَرَ عَدَدِ أَوَّلِ نَ. فَلْنَتَوَقَّعْ أَنَّ ن > 1 وَلَيْسَ بِأَوَّلِ.-- >>> largest_prime_factor(13195)
-- 29
-- >>> largest_prime_factor(2048)
-- 2
local function largest_prime_factor(n)
","local function largest_prime_factor(n)
    local factor = 2
    while n > 1 do
        if n % factor == 0 then
            n = n / factor
        else
            factor = factor + 1
        end
    end
    return factor
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_prime_factor
    lu.assertEquals(candidate(15), 5)
    lu.assertEquals(candidate(27), 3)
    lu.assertEquals(candidate(63), 7)
    lu.assertEquals(candidate(330), 11)
    lu.assertEquals(candidate(13195), 29)
end

os.exit(lu.LuaUnit.run())"
HumanEval_60,knc_Arab,lua,"- sum_to_n دَلِيلٌ يُجَمِّعُ الأَرقامَ مِنْ 1 إلى n.-- >>> sum_to_n(30)
-- 465
-- >>> sum_to_n(100)
-- 5050
-- >>> sum_to_n(5)
-- 15
-- >>> sum_to_n(10)
-- 55
-- >>> sum_to_n(1)
-- 1
local function sum_to_n(n)
","local function sum_to_n(n)
    return n * (n + 1) // 2
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_to_n
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(6), 21)
    lu.assertEquals(candidate(11), 66)
    lu.assertEquals(candidate(30), 465)
    lu.assertEquals(candidate(100), 5050)
end

os.exit(lu.LuaUnit.run())"
HumanEval_61,knc_Arab,lua,"- يَرْجِعُ حَقًّا إِذَا كَانَ لِكُلِّ قُفَّةِ فَتْحٍ قُفَّةٌ مُطَابِقَةٌ.- قُرَنْتَةٌ خَطّ مِنْ ""("" و "")"".-- >>> correct_bracketing('(')
-- false
-- >>> correct_bracketing('()')
-- true
-- >>> correct_bracketing('(()())')
-- true
-- >>> correct_bracketing(')(()')
-- false
local function correct_bracketing(brackets)
","local function correct_bracketing(brackets)
    local balance = 0
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == ""("" then
            balance = balance + 1
        elseif char == "")"" then
            balance = balance - 1
        end
        if balance < 0 then
            return false
        end
    end
    return balance == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = correct_bracketing
    lu.assertEquals(candidate('()'), true)
    lu.assertEquals(candidate('(()())'), true)
    lu.assertEquals(candidate('()()(()())()'), true)
    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
    lu.assertEquals(candidate('((()())))'), false)
    lu.assertEquals(candidate(')(()'), false)
    lu.assertEquals(candidate('('), false)
    lu.assertEquals(candidate('(((('), false)
    lu.assertEquals(candidate(')'), false)
    lu.assertEquals(candidate('(()'), false)
    lu.assertEquals(candidate('()()(()())())(()'), false)
    lu.assertEquals(candidate('()()(()())()))()'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_62,knc_Arab,lua,"- رُدُّ مُشتَقَةَ هَذَا الكَثْرَيْ شَكْلِي- xs[0] + xs[1] * x + xs[2] * x^2 + ....  لَا تَنْظُرْ إِلَى الْمَوْضِعِ الْمُتَقَدِّمِ- xs تَمْثِلُ قَوَاعِدَ كَثْرَةٍ.-- >>> derivative({3, 1, 2, 4, 5})
-- {1, 4, 12, 20}
-- >>> derivative({1, 2, 3})
-- {2, 6}
local function derivative(xs)
","local function derivative(xs)
    local result = {}
    for i = 2, #xs do
        result[i - 1] = xs[i] * (i - 1)
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = derivative
    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})
    lu.assertEquals(candidate({1, 2, 3}), {2, 6})
    lu.assertEquals(candidate({3, 2, 1}), {2, 2})
    lu.assertEquals(candidate({3, 2, 1, 0, 4}), {2, 2, 0, 16})
    lu.assertEquals(candidate({1}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_63,knc_Arab,lua,"- رَجَاءً اَكْتُبْ دَلِيلَاً لِيَحْسَبَ بِكَفَاءَةٍ العَنْصَرَةَ n مِنْ تَتَابُعِ الأَرْبَعِيْنَ- فَيْبِيْبِيْنْ) == فَيْبِيْبِيْنْ-1) + فَيْبِيْبِيْنْ-2) + فَيْبِيْبِيْنْ-3).- فَيْفَيْفَيْفَيْفَيْ- فَيْفَيْفَيْتَ)- فَيْفَيْفَيْفَيْ- تَسلسلْ أرقامْ فِبْبِبْ تَسلسلْ مُشْبِه لِتَسلسلْ فِبْبُونَكْي يُعرَفْ كَمَا يَليْ:-- >>> fibfib(1)
-- 0
-- >>> fibfib(5)
-- 4
-- >>> fibfib(8)
-- 24
local function fibfib(n)
","local function fibfib(n)
    if n == 0 then
        return 0
    elseif n == 1 then
        return 0
    elseif n == 2 then
        return 1
    else
        local a, b, c = 0, 0, 1
        for i = 3, n do
            local next_fibfib = a + b + c
            a, b, c = b, c, next_fibfib
        end
        return c
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = fibfib
    lu.assertEquals(candidate(2), 1)
    lu.assertEquals(candidate(1), 0)
    lu.assertEquals(candidate(5), 4)
    lu.assertEquals(candidate(8), 24)
    lu.assertEquals(candidate(10), 81)
    lu.assertEquals(candidate(12), 274)
    lu.assertEquals(candidate(14), 927)
end

os.exit(lu.LuaUnit.run())"
HumanEval_64,knc_Arab,lua,"-مِثَال:- حَرْفٌ، وَلَكِنْ فِي آخِرِ كَلِمَةٍ مَعْطُوفَةٍ.- فَوَاكِلُ هَذِهِ الحَالَةِ هِيَ ""أ"" و ""ي"" و ""ي"" و ""أو"" و ""و"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""ي"" و ""و"" و ""و"" و ""و"" و ""و"" و ""و"" و ""و"" و ""و"" و ""و"" و ""و"" و"" و ""و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و"" و""- كَلِمَة كَدَخْل وَيَرُدّ عَدَدَ الحُرُوفِ في السلسلة.- اُكْتُبْ دَالِيَةَ vowels_count الَّتِي تَتَّخِذُ سِلْسِلَةً تَمْثِلُ -- >>> vowels_count('abcde')
-- 2
-- >>> vowels_count('ACEDY')
-- 3
local function vowels_count(s)
","local function vowels_count(s)
    local count = 0
    local vowels = {a = true, e = true, i = true, o = true, u = true, 
                    A = true, E = true, I = true, O = true, U = true}
                    
    for i = 1, #s do
        local char = s:sub(i, i)
        if vowels[char] or (char == 'y' or char == 'Y') and i == #s then
            count = count + 1
        end
    end
    
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = vowels_count
    lu.assertEquals(candidate('abcde'), 2)
    lu.assertEquals(candidate('Alone'), 3)
    lu.assertEquals(candidate('key'), 2)
    lu.assertEquals(candidate('bye'), 1)
    lu.assertEquals(candidate('keY'), 2)
    lu.assertEquals(candidate('bYe'), 1)
    lu.assertEquals(candidate('ACEDY'), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_65,knc_Arab,lua,"- إذا تَحَوَّلَ > عَدَدَ أَلْفَاظٍ، عُدْ أَلْفَاظَ عَكْسَهَا.- وَيَرْجِعُ النَّتِيجَةَ كَسلسلةٍ.- حَوَالِيَ تَحَوُّل أَلْبَابِ العَدَدِ الصَّحِيحِ x، تَحَوُّل الأَلْبَابِ يَمِينًا بِالتَّحَوُّل -- >>> circular_shift(12, 1)
-- '21'
-- >>> circular_shift(12, 2)
-- '12'
local function circular_shift(x, shift)
","local function circular_shift(x, shift)
    local num_str = tostring(x)
    local num_digits = #num_str
    if shift > num_digits then
        return num_str:reverse()
    else
        local shift_pos = num_digits - (shift % num_digits)
        return num_str:sub(shift_pos + 1) .. num_str:sub(1, shift_pos)
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = circular_shift
    lu.assertEquals(candidate(100, 2), '001')
    lu.assertEquals(candidate(12, 2), '12')
    lu.assertEquals(candidate(97, 8), '79')
    lu.assertEquals(candidate(12, 1), '21')
    lu.assertEquals(candidate(11, 101), '11')
end

os.exit(lu.LuaUnit.run())"
HumanEval_66,knc_Arab,lua,"-مِثَالَات:- كُودَاتْ ASCII.- اِكْتُبْ دَلِيْلَةً تَتَّخِذُ سِلْطَةً كَدَخْلٍ وَتَرُدُّ جَمْعَ الْحُرُوْفِ الْعُلَى فَقَطْ' - مَهمَة -- >>> digitSum('')
-- 0
-- >>> digitSum('abAB')
-- 131
-- >>> digitSum('abcCd')
-- 67
-- >>> digitSum('helloE')
-- 69
-- >>> digitSum('woArBld')
-- 131
-- >>> digitSum('aAaaaXa')
-- 153
local function digitSum(s)
","local function digitSum(s)
    local sum = 0
    for i = 1, #s do
        local char = s:sub(i, i)
        if char:match(""%u"") then
            sum = sum + string.byte(char)
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = digitSum
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('abAB'), 131)
    lu.assertEquals(candidate('abcCd'), 67)
    lu.assertEquals(candidate('helloE'), 69)
    lu.assertEquals(candidate('woArBld'), 131)
    lu.assertEquals(candidate('aAaaaXa'), 153)
    lu.assertEquals(candidate(' How are yOu?'), 151)
    lu.assertEquals(candidate('You arE Very Smart'), 327)
end

os.exit(lu.LuaUnit.run())"
HumanEval_67,knc_Arab,lua,"- لِلْمُتَكَلِّمِ:- في السلة يَعُودُ عَدَدَ ثِمَارِ الْمَنْجُوسِ في السلة.- البُرتُونِيَّة و التَّفَّاح وَ عَدَد كُلّي يَمْثُلُ العَدَدَ الكَامِلَ مِنْ الثَّمَرَاتِ- التفاح، البرتقال، و فاكهة المانجو. وَمُعْطَى السلسلةِ التي تَمُدُّ العددَ الكليَّ لـ- تُوزَعُ في سَلَّةٍ مِنْ فَاكِهَةٍ تَحتَوِي السَّلَّةَ- فِي هَذِهِ المَسْأَلَةِ، سَتُعْطَى سِلْسِلَةً تَمْثُلُ عَدَدَ تُفَّاحٍ وَتَمْرَجَاتٍ-- >>> fruit_distribution('5 apples and 6 oranges', 19)
-- 8
-- >>> fruit_distribution('0 apples and 1 oranges', 3)
-- 2
-- >>> fruit_distribution('2 apples and 3 oranges', 100)
-- 95
-- >>> fruit_distribution('100 apples and 1 oranges', 120)
-- 19
local function fruit_distribution(s, n)
","local function fruit_distribution(s, n)
    local apples, oranges = s:match(""(%d+)%s*apples%s*and%s*(%d+)%s*oranges"")
    apples = tonumber(apples)
    oranges = tonumber(oranges)
    local mangoes = n - (apples + oranges)
    return mangoes
end","lu = require('luaunit')

function test_humaneval()
local candidate = fruit_distribution
    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)
    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)
    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)
    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)
    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)
    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)
    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)
end

os.exit(lu.LuaUnit.run())"
HumanEval_68,knc_Arab,lua,"- مِثَالُ 1:- إِنْ لَمْ يَكُنْ فِيهِ قِيَمٌ زَوَائِجِيَّةٌ أَوْ لَوْ كَانَ الجدولُ فَارِغًا، ارْجِعْ [].- عُقدةُ المُنتَقَمَةِ تُرَدُّ فِي جَدَلٍ، [smallest_value، index]، - إِنْ وُجِدَ عَقَدَاتٌ عَدَدَةٌ بِأَصْغَرِ قِيمَةٍ زَوَائِدَةٍ رُدَّ عَقَدَةَ أَصْغَرِ فَهْمٍ.- عُقدةُ المُسْتَقْطَعَةِ يَجِبُ أَنْ تَكُونَ عُقدةَ أصْغَرِ قِيمَةٍ زَوْجِيَّةٍ.-مُهِمَّتُكَ أنْ تَنْزِعَ إحدى العُقدِ وتَرُدَّهُ.""مُعْطَى جَدَلٍ يَمْثُلُ فَرْعَ شَجَرَةٍ لَهَا عُقُودُ سَمِيَّةٍ غَيْرُ سِيَّمِيَّةٍ-- >>> pluck({4, 2, 3})
-- {2, 1}
-- Explanation: 2 has the smallest even value, and 2 has the smallest index.
-- Example 2:
-- >>> pluck({1, 2, 3})
-- {2, 1}
-- Explanation: 2 has the smallest even value, and 2 has the smallest index.
-- Example 3:
-- >>> pluck({})
-- {}
-- Example 4:
-- >>> pluck({5, 0, 3, 0, 4, 2})
-- {0, 1}
-- Explanation: 0 is the smallest value, but  there are two zeros,
--              so we will choose the first zero, which has the smallest index.
-- Constraints:
--     * 1 <= nodes.length <= 10000
--     * 0 <= node.value
local function pluck(arr)
","local function pluck(arr)
    local smallest_even_value = nil
    local smallest_index = nil

    for index, value in ipairs(arr) do
        if value % 2 == 0 then
            if smallest_even_value == nil or value < smallest_even_value then
                smallest_even_value = value
                smallest_index = index
            end
        end
    end

    if smallest_even_value == nil then
        return {}
    else
        return {smallest_even_value, smallest_index}
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = pluck
    lu.assertEquals(candidate({4, 2, 3}), {2, 1})
    lu.assertEquals(candidate({1, 2, 3}), {2, 1})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})
    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0, 3})
    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})
    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})
    lu.assertEquals(candidate({7, 9, 7, 1}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_69,knc_Arab,lua,"-مِثَالَات:- إنْ لَمْ تَكُنْ هَذِهِ القِيمَة موجودةً، ارْجِعْ -1.- تَوَاتُرُ عَدَدِ عَدَدِ عَدَدِ عَدَدِ عَدَدِ عَدَدِ عَدَدِ عَدَدِ عَدَدِ عَدَدِ- الصَفْرُ، وَلَهُ تَكْثِيرُ أَوْ مُسَاوِي قِيمَةِ العَدَدِ الكَامِلِ نَفْسِهِ.تَعْطَى لَكَ جَدَلَ مِنْ أَنْ لَيْسَ فَارِغَاً مِنْ أَنْصَارٍ إِيجَابِيَّةٍ. ارْجِعْ أَكْبَرَ عَدَدٍ أَكْبَرَ مِنْ -- >>> search({4, 1, 2, 2, 3, 1})
-- 2
-- >>> search({1, 2, 2, 3, 3, 3, 4, 4, 4})
-- 3
-- >>> search({5, 5, 4, 4, 4})
-- -1
local function search(lst)
","local function search(lst)
    local frequency = {}
    
    -- Calculate the frequency of each number in the list
    for _, num in ipairs(lst) do
        frequency[num] = (frequency[num] or 0) + 1
    end

    local result = -1
    
    -- Determine the maximum valid integer with the criteria
    for num, freq in pairs(frequency) do
        if num > 0 and freq >= num and num > result then
            result = num
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = search
    lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)
    lu.assertEquals(candidate({4, 1, 4, 1, 4, 4}), 4)
    lu.assertEquals(candidate({3, 3}), -1)
    lu.assertEquals(candidate({8, 8, 8, 8, 8, 8, 8, 8}), 8)
    lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)
    lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), 1)
    lu.assertEquals(candidate({3, 2, 8, 2}), 2)
    lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)
    lu.assertEquals(candidate({8, 8, 3, 6, 5, 6, 4}), -1)
    lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)
    lu.assertEquals(candidate({1, 9, 10, 1, 3}), 1)
    lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)
    lu.assertEquals(candidate({1}), 1)
    lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)
    lu.assertEquals(candidate({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)
    lu.assertEquals(candidate({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)
    lu.assertEquals(candidate({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), 4)
    lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)
    lu.assertEquals(candidate({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)
    lu.assertEquals(candidate({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)
    lu.assertEquals(candidate({10}), -1)
    lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), 2)
    lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)
    lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), 1)
    lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_70,knc_Arab,lua,"-مِثَالَات:- ثُمَّ أَكْثَرُ الْأَصْحَابِ الْبَاقِينَ ثُمَّ أَقَلُّهُمْ وَهَكَذَا.-مُنْتَقَطَةٌ غَرِيبَةٌ، هِيَ إِذَا بَدَأْتَ بِأَقَلِّ القِيمَةِ،- مَوْضُوعُ الجَدَدِ مِنْ الأَصْحَابِ، يَرْجِعُ الجَدَدُ بِمَوْضُوعٍ غَرِيبٍ.-- >>> strange_sort_list({1, 2, 3, 4})
-- {1, 4, 2, 3}
-- >>> strange_sort_list({5, 5, 5, 5})
-- {5, 5, 5, 5}
-- >>> strange_sort_list({})
-- {}
local function strange_sort_list(lst)
","local function strange_sort_list(lst)
    table.sort(lst) -- Sort the list
    local result = {}
    local i, j = 1, #lst
    
    while i <= j do
        table.insert(result, lst[i])
        if i ~= j then
            table.insert(result, lst[j])
        end
        i = i + 1
        j = j - 1
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = strange_sort_list
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})
    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})
    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})
    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})
    lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})
    lu.assertEquals(candidate({111111}), {111111})
end

os.exit(lu.LuaUnit.run())"
HumanEval_71,knc_Arab,lua,"-مِثَال:- مِنْ الجَانِبِ الثَّالِثِ.ثَلاثَةَ جَانِبَاتٍ تَجْعَلُ ثَلاثَةَ أَطْرَافٍ مُسْتَقِيمَةً إِذَا كَانَتْ جُمْلَةُ أَيِّ جَانِبَيْنِ أَكْبَرَ- وَإِلاَّ رُدّ -1 - تَمْثِيلُ الثَّلَاثَةِ مُقَدَّمٌ إِلَى عَشْرَيْنِ إِذَا كَانَتْ جُنُوبُهُمَا ثَلَاثَةً.مُعْطَى أَطْوَالِ جَانِبَيْ ثَلَاثَةِ مُثُلَثَةٍ، أَعِدْ مَوْضِعَ-- >>> triangle_area(3, 4, 5)
-- 6.0
-- >>> triangle_area(1, 2, 10)
-- -1
local function triangle_area(a, b, c)
","local function triangle_area(a, b, c)
    -- Check if the sides form a valid triangle
    if a + b > c and a + c > b and b + c > a then
        -- Calculate the semi-perimeter
        local s = (a + b + c) / 2
        -- Calculate the area using Heron's formula
        local area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        -- Return the area rounded to 2 decimal points
        return math.floor(area * 100 + 0.5) / 100
    else
        -- Return -1 if not a valid triangle
        return -1
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = triangle_area
    lu.assertEquals(candidate(3, 4, 5), 6.0)
    lu.assertEquals(candidate(1, 2, 10), -1)
    lu.assertEquals(candidate(4, 8, 5), 8.18)
    lu.assertEquals(candidate(2, 2, 2), 1.73)
    lu.assertEquals(candidate(1, 2, 3), -1)
    lu.assertEquals(candidate(10, 5, 7), 16.25)
    lu.assertEquals(candidate(2, 6, 3), -1)
    lu.assertEquals(candidate(1, 1, 1), 0.43)
    lu.assertEquals(candidate(2, 2, 10), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_72,knc_Arab,lua,"-مِثَال:- كَيْفَ يَطِيرُ الْكَيْفَةُ q إِنْ كَانَ مُتَوَازِنًا (إِنَّهُ جَدَلٌ مُتَوَازِنٌ) وَكَمُلُ أَلْفَ عَنْصَرِهِ أَقَلُّ مِنْ أَوْ يُسَاوِي الْأَكْبَرَ الْمُمْكِنَ وَزْنًا w.- اُكْتُبْ دَلِيْلَةً تَرْجِعُ حَقِيْقاً إِنْ طَارَ الجَسَدُ q، وَخَاطِئَةً إِلاَّ-- >>> will_it_fly({1, 2}, 5)
-- false
-- # 1+2 is less than the maximum possible weight, but it's unbalanced.
-- >>> will_it_fly({3, 2, 3}, 1)
-- false
-- # it's balanced, but 3+2+3 is more than the maximum possible weight.
-- >>> will_it_fly({3, 2, 3}, 9)
-- true
-- # 3+2+3 is less than the maximum possible weight, and it's balanced.
-- >>> will_it_fly({3}, 5)
-- true
-- # 3 is less than the maximum possible weight, and it's balanced.
local function will_it_fly(q, w)
","local function will_it_fly(q, w)
    local function is_palindrome(tbl)
        local len = #tbl
        for i = 1, math.floor(len / 2) do
            if tbl[i] ~= tbl[len - i + 1] then
                return false
            end
        end
        return true
    end

    local function sum_elements(tbl)
        local sum = 0
        for _, value in ipairs(tbl) do
            sum = sum + value
        end
        return sum
    end

    if not is_palindrome(q) then
        return false
    end

    local total_weight = sum_elements(q)
    return total_weight <= w
end","lu = require('luaunit')

function test_humaneval()
local candidate = will_it_fly
    lu.assertEquals(candidate({3, 2, 3}, 9), true)
    lu.assertEquals(candidate({1, 2}, 5), false)
    lu.assertEquals(candidate({3}, 5), true)
    lu.assertEquals(candidate({3, 2, 3}, 1), false)
    lu.assertEquals(candidate({1, 2, 3}, 6), false)
    lu.assertEquals(candidate({5}, 5), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_73,knc_Arab,lua,"- مَثَلاً:- يَقْرَأُ بِنَفْسِهِ مِنْ خَلْفٍ وَمِنْ قُدُومٍ. فِي تَغْيِيرٍ وَاحِدٍ، تَغْيِيرُ عَنْصَرٍ بِعَنْصَرٍ آخَرَ.- يَجِبُ أَنْ يُغَيَّرَ لِيُصْنَعَ الْجَدَلُ مُتَقَابِلًا.- مُعْطَى جَدَلِ arr مِنْ الأَصْحَابِ، أَجِدْ أَقَلَّ عَدَدِ العَنَاصِرِ-- >>> smallest_change({1, 2, 3, 5, 4, 7, 9, 6})
-- 4
-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})
-- 1
-- >>> smallest_change({1, 2, 3, 2, 1})
-- 0
local function smallest_change(arr)
","local function smallest_change(arr)
    local n = #arr
    local changes = 0
    
    for i = 1, math.floor(n / 2) do
        if arr[i] ~= arr[n - i + 1] then
            changes = changes + 1
        end
    end
    
    return changes
end","lu = require('luaunit')

function test_humaneval()
local candidate = smallest_change
    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)
    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)
    lu.assertEquals(candidate({1, 4, 2}), 1)
    lu.assertEquals(candidate({1, 4, 4, 2}), 1)
    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)
    lu.assertEquals(candidate({3, 1, 1, 3}), 0)
    lu.assertEquals(candidate({1}), 0)
    lu.assertEquals(candidate({0, 1}), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_74,knc_Arab,lua,"-مِثَالَاتْ- إذا كانَ لِلْجَدْلَيْنِ عَدَدُ حَرْفٍ مُتَسَاوِي، ارْجِعْ الجَدْلَ الأوَّلَ.- العَدَدُ الكَامِلُ مِنْ الْكَوَاكِبِ فِي كُلِّ سَلَسَلِ الجَدَدِ أَقَلَّ مِنَ الجَدَدِ الآخَرِ.- اِكْتُبْ دَلِيْلَةً تَقْبَلُ جَدَدَيْ سَلاَسِلٍ وَتَرُدُّ الجَدَدَ الَّذِي لَهُ -- >>> total_match({}, {})
-- {}
-- >>> total_match({'hi', 'admin'}, {'hI', 'Hi'})
-- {'hI', 'Hi'}
-- >>> total_match({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'})
-- {'hi', 'admin'}
-- >>> total_match({'hi', 'admin'}, {'hI', 'hi', 'hi'})
-- {'hI', 'hi', 'hi'}
-- >>> total_match({'4'}, {'1', '2', '3', '4', '5'})
-- {'4'}
local function total_match(lst1, lst2)
","local function total_match(lst1, lst2)
    local function total_chars(lst)
        local count = 0
        for _, str in ipairs(lst) do
            count = count + #str
        end
        return count
    end

    local chars_lst1 = total_chars(lst1)
    local chars_lst2 = total_chars(lst2)

    if chars_lst1 < chars_lst2 then
        return lst1
    elseif chars_lst2 < chars_lst1 then
        return lst2
    else
        return lst1
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = total_match
    lu.assertEquals(candidate({}, {}), {})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})
    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4', '5'}), {'4'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}), {'hI', 'Hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})
    lu.assertEquals(candidate({}, {'this'}), {})
    lu.assertEquals(candidate({'this'}, {}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_75,knc_Arab,lua,"-مِثَال:- عَالِمٌ بِأَنَّ (أ) أَقَلُّ مِنْ 100.-وَكَذِبَ إِلاَّ.- اُكْتُبْ دَلِيْلَ يَرُدُّ صَحِيْحًا إِنْ كَانَ العَدَدُ المَوْصُوْفُ ضِرْبَةَ 3 أَعْدَادٍ أَوَّلِيَّة -- >>> is_multiply_prime(30)
-- true
-- 30 = 2 * 3 * 5
local function is_multiply_prime(a)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    local i = 5
    while (i * i) <= n do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end

local function generate_primes(limit)
    local primes = {}
    for i = 2, limit do
        if is_prime(i) then
            table.insert(primes, i)
        end
    end
    return primes
end

local function is_multiply_prime(a)
    local primes = generate_primes(100)
    local count = #primes
    for i = 1, count do
        for j = i + 1, count do
            for k = j + 1, count do
                if primes[i] * primes[j] * primes[k] == a then
                    return true
                end
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_multiply_prime
    lu.assertEquals(candidate(5), false)
    lu.assertEquals(candidate(30), true)
    lu.assertEquals(candidate(8), true)
    lu.assertEquals(candidate(10), false)
    lu.assertEquals(candidate(125), true)
    lu.assertEquals(candidate(105), true)
    lu.assertEquals(candidate(126), false)
    lu.assertEquals(candidate(729), false)
    lu.assertEquals(candidate(891), false)
    lu.assertEquals(candidate(1001), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_76,knc_Arab,lua,"- مَثَلاً:- x عَدَدُ عَدَدٍ مِنْ n إِنْ كَانَ n**int=x - قوة ن و كاذبة في الحالات الأخرى. - مَهْمَلُكَ أَنْ تَكْتُبَ دَلِيْلَةً تَرُدُّ صَحِيحَةً إِنْ كَانَ عَدَدٌ x عَدَدٌ بَسِيْرٌ-- >>> is_simple_power(1, 4)
-- true
-- >>> is_simple_power(2, 2)
-- true
-- >>> is_simple_power(8, 2)
-- true
-- >>> is_simple_power(3, 2)
-- false
-- >>> is_simple_power(3, 1)
-- false
-- >>> is_simple_power(5, 3)
-- false
local function is_simple_power(x, n)
","local function is_simple_power(x, n)
    if x == 1 then
        return true
    end
    if n <= 0 or x <= 0 then
        return false
    end
    local current_power = 1
    while current_power < x do
        current_power = current_power * n
    end
    return current_power == x
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_simple_power
    lu.assertEquals(candidate(16, 2), true)
    lu.assertEquals(candidate(143214, 16), false)
    lu.assertEquals(candidate(4, 2), true)
    lu.assertEquals(candidate(9, 3), true)
    lu.assertEquals(candidate(16, 4), true)
    lu.assertEquals(candidate(24, 2), false)
    lu.assertEquals(candidate(128, 4), false)
    lu.assertEquals(candidate(12, 6), false)
    lu.assertEquals(candidate(1, 1), true)
    lu.assertEquals(candidate(1, 12), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_77,knc_Arab,lua,"-مِثَالَات:- تَعَلَّمْ: تَجِبُ أَنْ تَتَأَمَّلَ أَنَّ الْمَدْخُولَ سَائِلٌ.- إنْ كَانَ هذا الإِنْجِرُ مكعبَ عددٍ صحيحٍ.كَتِبْ دَلِيلَ يَأْخُذُ a كُلَّ عَدَدٍ وَيَرُدُّ true-- >>> iscube(1)
-- true
-- >>> iscube(2)
-- false
-- >>> iscube(-1)
-- true
-- >>> iscube(64)
-- true
-- >>> iscube(0)
-- true
-- >>> iscube(180)
-- false
local function iscube(a)
","local function iscube(a)
    if a < 0 then
        a = -a
    end
    local cbrt = math.floor(a ^ (1/3) + 0.5)
    return cbrt * cbrt * cbrt == a
end","lu = require('luaunit')

function test_humaneval()
local candidate = iscube
    lu.assertEquals(candidate(1), true)
    lu.assertEquals(candidate(2), false)
    lu.assertEquals(candidate(-1), true)
    lu.assertEquals(candidate(64), true)
    lu.assertEquals(candidate(180), false)
    lu.assertEquals(candidate(1000), true)
    lu.assertEquals(candidate(0), true)
    lu.assertEquals(candidate(1729), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_78,knc_Arab,lua,"-مِثَالَات:وَالأَلْوَاحُ أَيْ بَيْ سَيْ دَيْ يَفْ كَبِيرَةٌ- تَعَلَّمْ: تَجِبُ أَنْ تَتَأَمَّلَ أَنَّ الدَّخْلَ دَائِمًا صَحِيحٌ أَوْ خَالِيَةٌ- ب (= عَشْرِيَّةِ 11) ، د (= عَشْرِيَّةِ 13) -لِذَلِكَ يَجِبُ أَنْ تَحْدُدَ عَدَدَ الأَرْبَاعِ التَّالِيَةِ: 2، 3، 5، 7، - أَعْدَدُ الأَوَّلِينَ هُمْ: 2، 3، 5، 7، 11، 13، 17، ...- أَلْبَابُ السَّادِسُونَ مِنْ الْعَشَرَةِ هُوَ: 0، 1، 2، 3، 4، 5، 6، 7، 8، 9، أَيْ: أَيْ: بِ، سَ، د، ي، ف.- اكبر مِنْ 1 لَيْسَ بِضَرْبِ اثْنَيْنِ أصْغَرَيْنِ)- أَرْبَعَةُ أَعْدَادٍ أَوْ أَوْلَى عَدَدٌ عَدَدٌ حَيٌّ- عَدَدُ سِتَّةِ عَشَرَاتِ كَسِلْسِلَةٍ وَيَعُدُّ عَدَدَ الْعَشَرَاتِ- تَكُونُ مُكَلَّفَةً بِكَتْبِ دَالِي تَلَقَّى -- >>> hex_key('AB')
-- 1
-- >>> hex_key('1077E')
-- 2
-- >>> hex_key('ABED1A33')
-- 4
-- >>> hex_key('123456789ABCDEF0')
-- 6
-- >>> hex_key('2020')
-- 2
local function hex_key(num)
","local function hex_key(num)
    local prime_digits = {['2'] = true, ['3'] = true, ['5'] = true, ['7'] = true, ['B'] = true, ['D'] = true}
    local count = 0
    for digit in num:gmatch('.') do
        if prime_digits[digit] then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = hex_key
    lu.assertEquals(candidate('AB'), 1)
    lu.assertEquals(candidate('1077E'), 2)
    lu.assertEquals(candidate('ABED1A33'), 4)
    lu.assertEquals(candidate('2020'), 2)
    lu.assertEquals(candidate('123456789ABCDEF0'), 6)
    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_79,knc_Arab,lua,"-مِثَالَات:- الحروفُ الإضافيةُ هُنَاكَ للمُسَاعَدَةِ في التَنْسِيقِ.سَيَكُونُ بَعْضُ حُرُوفِ ""db"" إضافِيَّةٍ فِي بَدْءِ السِّلْسِلَةِ وَفِي آخِرِهَا.كُلُّ حَرْفٍ فِي السِّلْسِلَةِ سَيَكُونُ ""0"" أَو ""1"".- شَكْلُ ثَنِيٍّ. تَرُدُّ الوَظِيفَةُ سِلْسِلَةً، وَكُلُّ حَرْفٍ يَمْثُلُ ثَنِيًّا سَتُعْطَى عَدَدَةٌ بِشَكْلِ عَشَرِيٍّ وَمُهِمَّتُكَ تَحْوِيلُهَا إلَى-- >>> decimal_to_binary(15)
-- 'db1111db'
-- >>> decimal_to_binary(32)
-- 'db100000db'
local function decimal_to_binary(decimal)
","local function decimal_to_binary(decimal)
    -- Convert the decimal number to binary and remove the '0b' prefix using string.sub
    local binary = string.sub(string.format(""%b"", decimal), 0)
    -- Concatenate 'db' at the start and end of the binary string
    return 'db' .. binary .. 'db'
end","lu = require('luaunit')

function test_humaneval()
local candidate = decimal_to_binary
    lu.assertEquals(candidate(0), 'db0db')
    lu.assertEquals(candidate(32), 'db100000db')
    lu.assertEquals(candidate(103), 'db1100111db')
    lu.assertEquals(candidate(15), 'db1111db')
end

os.exit(lu.LuaUnit.run())"
HumanEval_80,knc_Arab,lua,"- مَثَلاً:- سِلْسِلَةٌ هَابْلُوَةٌ إِنْ كَانَ طُولُهَا 3 وَ كُلُّ 3 حُرُوفٍ مُتَتَابِعَةٍ مُمَيِّزَةٌ- مَهمَتُكَ تَتحقق مِنْ إنْ كانَتْ السلسلةَ مُتَسَابِحَةً أم لا.- تَعْطَى سِلْسِلَةَ سَلْسِلَةٍ-- >>> is_happy('a')
-- false
-- >>> is_happy('aa')
-- false
-- >>> is_happy('abcd')
-- true
-- >>> is_happy('aabb')
-- false
-- >>> is_happy('adb')
-- true
-- >>> is_happy('xyy')
-- false
local function is_happy(s)
","local function is_happy(s)
    -- Check if the string length is less than 3
    if #s < 3 then
        return false
    end

    -- Iterate through the string and check every 3 consecutive characters
    for i = 1, #s - 2 do
        local a, b, c = s:sub(i, i), s:sub(i + 1, i + 1), s:sub(i + 2, i + 2)
        if a == b or b == c or a == c then
            return false
        end
    end

    -- If no 3 consecutive characters are the same, return true
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_happy
    lu.assertEquals(candidate('a'), false)
    lu.assertEquals(candidate('aa'), false)
    lu.assertEquals(candidate('abcd'), true)
    lu.assertEquals(candidate('aabb'), false)
    lu.assertEquals(candidate('adb'), true)
    lu.assertEquals(candidate('xyy'), false)
    lu.assertEquals(candidate('iopaxpoi'), true)
    lu.assertEquals(candidate('iopaxioi'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_81,knc_Arab,lua,"-مِثَال:- 0.0 إِي - > 0.0 دَ- > 0.7 دَ- > 1.0 د+  أَوْ- > 1.3 سِنْدِيَا- > 1.7 سَ- > 2.0 سِنْدِيْسِيْنْ+ - > 2.3 بِ- > 2.7 بَ - > 3.0 ب+ - > 3.3 أَ- > 3.7 أَ- 4.0 أَي+ - مُعدلَ المُؤخَرَةِ.- دَلِيلٌ يَسْتَطِيعُ أَنْ يُخْرِجَ جَدَلَ دَرَجَاتِ الحُرُوفِ بِالْجَدَلِ التَّالِي:- قَدْ أَعْطَاكَ جَدَلَ مَعَايِنِ بَعْضِ الطّلابِ وَعَلَيكَ أَنْ تَكْتُبَ - المَشَكَّةُ الوحِيدَةُ، أَنَّهَا فَقَدَتْ الشِّفَارَةَ الَّتِي أَخْدَمَتْهَا لِلتَّصْفِيَةِ.مُعَلِّمٌ كَانَ يَصْنَعُ خُطَّتَهُ لِلتَّعْمِيرِ.- هُوَ الأَسبوعُ الأخِرُ مِنْ الفِصلِ وَالمُعلِمُ يَجِبُ أَنْ يُعْطِيَ الدرجاتَ -- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})
-- {'A+', 'B', 'C-', 'C', 'A-'}
local function numerical_letter_grade(grades)
","local function numerical_letter_grade(grades)
    local letter_grades = {}
    for _, gpa in ipairs(grades) do
        local letter
        if gpa == 4.0 then
            letter = ""A+""
        elseif gpa > 3.7 then
            letter = ""A""
        elseif gpa > 3.3 then
            letter = ""A-""
        elseif gpa > 3.0 then
            letter = ""B+""
        elseif gpa > 2.7 then
            letter = ""B""
        elseif gpa > 2.3 then
            letter = ""B-""
        elseif gpa > 2.0 then
            letter = ""C+""
        elseif gpa > 1.7 then
            letter = ""C""
        elseif gpa > 1.3 then
            letter = ""C-""
        elseif gpa > 1.0 then
            letter = ""D+""
        elseif gpa > 0.7 then
            letter = ""D""
        elseif gpa > 0.0 then
            letter = ""D-""
        else
            letter = ""E""
        end
        table.insert(letter_grades, letter)
    end
    return letter_grades
end","lu = require('luaunit')

function test_humaneval()
local candidate = numerical_letter_grade
    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})
    lu.assertEquals(candidate({1.2}), {'D+'})
    lu.assertEquals(candidate({0.5}), {'D-'})
    lu.assertEquals(candidate({0.0}), {'E'})
    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})
    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_82,knc_Arab,lua,"-مِثَالَاتْ- طُولُ عَدَدٌ أَوْ كَذِبٌ إِلاّ- اِكْتُبْ دَلِيْلَةً تَأْخُذُ سِلْسِلَةً وَتَرُدُّ صَحِيْحًا إِنْ كَانَتْ السِلْسِلَةُ-- >>> prime_length('Hello')
-- true
-- >>> prime_length('abcdcba')
-- true
-- >>> prime_length('kittens')
-- true
-- >>> prime_length('orange')
-- false
local function prime_length(string)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    local i = 5
    while i * i <= n do
        if n % i == 0 or n % (i + 2) == 0 then return false end
        i = i + 6
    end
    return true
end

local function prime_length(str)
    local length = #str
    return is_prime(length)
end","lu = require('luaunit')

function test_humaneval()
local candidate = prime_length
    lu.assertEquals(candidate('Hello'), true)
    lu.assertEquals(candidate('abcdcba'), true)
    lu.assertEquals(candidate('kittens'), true)
    lu.assertEquals(candidate('orange'), false)
    lu.assertEquals(candidate('wow'), true)
    lu.assertEquals(candidate('world'), true)
    lu.assertEquals(candidate('MadaM'), true)
    lu.assertEquals(candidate('Wow'), true)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('HI'), true)
    lu.assertEquals(candidate('go'), true)
    lu.assertEquals(candidate('gogo'), false)
    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)
    lu.assertEquals(candidate('Madam'), true)
    lu.assertEquals(candidate('M'), false)
    lu.assertEquals(candidate('0'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_83,knc_Arab,lua,"- أَصْلَحَاءُ يَبْدَأُونَ أَوْ يَنْتَهُونَ بِ1.- مُعْطَى عَدَدَ كُلٍّ مُوجِبَ n، رُدَّ عَدَدَ أَرْكَانِ nlocal function starts_one_ends(n)
","local function starts_one_ends(n)
    if n == 1 then
        return 1 -- The single-digit numbers starting or ending with 1 is just 1 itself.
    end
    -- Calculate the count of n-digit numbers starting with 1 and ending with 1.
    local count_start_with_1 = 10 ^ (n - 1) -- All numbers from 100... to 199...
    local count_end_with_1 = 9 * (10 ^ (n - 1)) -- All numbers from 1, 11, 21,... excluding those starting with 1.
    
    -- A number starting and ending with 1 like 101 has been counted twice, correct for that.
    return count_start_with_1 + count_end_with_1 - 10 ^ (n - 2)
end","lu = require('luaunit')

function test_humaneval()
local candidate = starts_one_ends
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(2), 18)
    lu.assertEquals(candidate(3), 180)
    lu.assertEquals(candidate(4), 1800)
    lu.assertEquals(candidate(5), 18000)
end

os.exit(lu.LuaUnit.run())"
HumanEval_84,knc_Arab,lua,"- مَثَلْ- مَعْطِيَةٌ عَدَدٌ كُلٌّ مُوجِبٌ نَ، رُدَّ جُمْلَةَ أَشْرَافِهَا بِالنَّصْبِ الثَّنِيِّ.-- >>> solve(1000)
-- '1'
-- >>> solve(150)
-- '110'
-- >>> solve(147)
-- '1100'
-- Variables:
--     @N integer
--          Constraints: 0 ≤ N ≤ 10000.
-- Output:
--      a string of binary number
local function solve(N)
","local function solve(N)
    local sum = 0
    while N > 0 do
        sum = sum + (N % 10)
        N = math.floor(N / 10)
    end
    return string.format(""%b"", sum)
end","lu = require('luaunit')

function test_humaneval()
local candidate = solve
    lu.assertEquals(candidate(1000), '1')
    lu.assertEquals(candidate(150), '110')
    lu.assertEquals(candidate(147), '1100')
    lu.assertEquals(candidate(333), '1001')
    lu.assertEquals(candidate(963), '10010')
end

os.exit(lu.LuaUnit.run())"
HumanEval_85,knc_Arab,lua,"-مِثَالَات:- مُعْطَى جَدَلِ أَعْدَادٍ لَيْسَتْ فَارِغَةً أَوَّلُ مَا يُجْمَعُ عَلَى أَنْوَاعٍ زَوَائِدَةٍ-- >>> add({4, 2, 6, 7})
-- 2
local function add(lst)
","local function add(lst)
    local sum = 0
    for i = 2, #lst, 2 do
        if lst[i] % 2 == 0 then
            sum = sum + lst[i]
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = add
    lu.assertEquals(candidate({4, 88}), 88)
    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)
    lu.assertEquals(candidate({4, 0, 6, 7}), 0)
    lu.assertEquals(candidate({4, 4, 6, 8}), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_86,knc_Arab,lua,"- مَثَلاً:- تَعْلِيقَة: يَجِبُ أَنْ تَحْفَظَ تَرْتِيبَ الكَلِمَاتِ وَالفُرُوجِ فِي الجُمْلَةِ.- تَرْتِيبٌ صَاعِدٌ بِنَاءً عَلَى قِيمَةِ ascii.- تُسَوَّى بِكَلِمَةٍ جَدِيدَةٍ تَتَرَتَّبُ فِيهَا كُلُّ الْحُرُوفِ- نسخة مُنْتَظَمَة من سِلْسِلَة، هي سِلْسِلَة حيث كُلّ الكلمات (مُفَرَّقَة بالفراغ)- اُكْتُبْ دَلِيْلَةً تَأْخُذُ سِلْسِلَةً وَتَرُدُّ نُسْخَةً مُتَّصِلَةً مِنْهَا-- >>> anti_shuffle('Hi')
-- 'Hi'
-- >>> anti_shuffle('hello')
-- 'ehllo'
-- >>> anti_shuffle('Hello World!!!')
-- 'Hello !!!Wdlor'
local function anti_shuffle(s)
","local function anti_shuffle(s)
    local function sort_word(word)
        local chars = {}
        for char in word:gmatch(""."") do
            table.insert(chars, char)
        end
        table.sort(chars)
        return table.concat(chars)
    end

    return (s:gsub(""%S+"", sort_word))
end","lu = require('luaunit')

function test_humaneval()
local candidate = anti_shuffle
    lu.assertEquals(candidate('Hi'), 'Hi')
    lu.assertEquals(candidate('hello'), 'ehllo')
    lu.assertEquals(candidate('number'), 'bemnru')
    lu.assertEquals(candidate('abcd'), 'abcd')
    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
end

os.exit(lu.LuaUnit.run())"
HumanEval_87,knc_Arab,lua,"-مِثَالَات:-وَأَيْضًا، أَنْزِلْ إِحْدَادَاتَ الصَّفِّ بِالْعُمُودِ بِالتَّنَازُلِ.- تَنْظِمُ الإِسْتِعْدَادَاتَ مُبْتَدَأً بِالصُّفُوفِ فِي التَّرْتِيبِ الْمُصْعَدِ- كُلّ جَدْلِ هُوَ إحداثيَةٌ - (صَفّ، أعْمَدَة) ، يَبْدَأُ بِ 0.- وَيَرْجِعُ جَدَلَ الجَدَلَاتِ، [(x1, y1), (x2, y2) ...] كَذَلِكَ - مُعْطَى لَوْ، وَكُلُّ عَدَدِ x، يَجِدُ أَكْلَافَ x فِي الجَدَلِ، - كُلُّ صَفٍّ يَجُوزُ أَنْ يَكُونَ لَهُ عَدَدٌ مُخْتَلِفٌ مِنَ الْعُمُودِ.- وَهُوَ مِثْلُ المَتْرَسِ، وَلَكِنْ بِخِلَافِ المَتْرَسِ،- تُعْطَى بِدَاتِ ثَنِيَةِ الأَبْعَدِ، كَمَوَاضِعِ مُتَعَدِّدَةٍ،-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)
-- {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}
-- >>> get_row({}, 1)
-- {}
-- >>> get_row({{}, {1}, {1, 2, 3}}, 3)
-- {{2, 2}}
local function get_row(lst, x)
","local function get_row(lst, x)
    local coordinates = {}
    for row_index, row in ipairs(lst) do
        for col_index = #row, 1, -1 do
            if row[col_index] == x then
                table.insert(coordinates, {row_index - 1, col_index - 1})
            end
        end
    end
    table.sort(coordinates, function(a, b)
        if a[1] == b[1] then
            return a[2] > b[2]
        else
            return a[1] < b[1]
        end
    end)
    return coordinates
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_row
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})
    lu.assertEquals(candidate({}, 1), {})
    lu.assertEquals(candidate({{1}}, 2), {})
    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})
end

os.exit(lu.LuaUnit.run())"
HumanEval_88,knc_Arab,lua,"-مِثَالَات:- * لا تَغْيِرْ الجَدَلَ المَوْهُوبَ. - تَعَالَى:- أَوْ يُصَنِّفُهُ بِتَنْزِيلِ الْمَنْزِلِ إِنْ كَانَتْ مَجْمُوعَةً ((قِيمَةُ الْمُؤَنَّثِ الْأَوَّلِ، قِيمَةُ الْمُؤَنَّثِ الْآخِرِ) زَوْجَةٌ.- سَتُصَنِّفُ الجدولَ المُعَطَى بِالتَّرْتِيبِ الصَّاعِدِ إنْ كَانَ الجُمْلَةُ ((قِيمَةُ المُؤَوَّلِ، قِيمَةُ المُؤَوَّلِ الأخِرَةُ) فُرَادِيَّةً، - مُعْطَيَةٌ جَدَلٌ مِنْ أَعْدَادٍ سَمِيَّةٍ غَيْرِ سِيَّمَةٍ، ارْجِعْ بِكُلَيْهِمْ مِنْ جَدَلٍ مُعْطَيَةٍ بَعْدَ التَّصْنِيفِ،-- >>> sort_array({})
-- {}
-- >>> sort_array({5})
-- {5}
-- >>> sort_array({2, 4, 3, 0, 1, 5})
-- {0, 1, 2, 3, 4, 5}
-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})
-- {6, 5, 4, 3, 2, 1, 0}
local function sort_array(array)
","local function sort_array(array)
    -- Create a copy of the given table
    local sorted_array = {}
    for i = 1, #array do
        sorted_array[i] = array[i]
    end

    -- If the table is not empty
    if #sorted_array > 0 then
        local first = sorted_array[1]
        local last = sorted_array[#sorted_array]
        local sum = first + last
        
        -- Sort in ascending or descending order based on the sum
        if sum % 2 == 0 then
            table.sort(sorted_array, function(a, b) return a > b end)
        else
            table.sort(sorted_array, function(a, b) return a < b end)
        end
    end

    return sorted_array
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_array
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({5}), {5})
    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})
    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})
    lu.assertEquals(candidate({2, 1}), {1, 2})
    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})
    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14, 11})
end

os.exit(lu.LuaUnit.run())"
HumanEval_89,knc_Arab,lua,"- مَثَلاً:- تَنْزِلُ إِلَى أسْفَلِ مَرَّةً مَرَّتَيْنِ- الْأَلِفُ يَجِبُ أَنْ يُدَوَّرَ بِطَرِيقَةٍ حَتَّى تَكُونَ الحُرُوفُيَعُودُ سِلْسِلَةً مُشَفَّرَةً بِالْأَلِفِ تُدَارِجُ.- خَلَقْتِ دَلِيْلَةً تَشْفِيْرُ الْخَطّ كَدَلِيْلَةٍ وَ -- >>> encrypt('hi')
-- 'lm'
-- >>> encrypt('asdfghjkl')
-- 'ewhjklnop'
-- >>> encrypt('gf')
-- 'kj'
-- >>> encrypt('et')
-- 'ix'
local function encrypt(s)
","local function encrypt(s)
    local result = {}
    local shift = 2 * 2
    for i = 1, #s do
        local char = s:sub(i,i)
        if char:match(""%a"") then
            local ascii_offset = char:match(""%l"") and string.byte('a') or string.byte('A')
            local new_char = string.char(((string.byte(char) - ascii_offset + shift) % 26) + ascii_offset)
            table.insert(result, new_char)
        else
            table.insert(result, char)
        end
    end
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = encrypt
    lu.assertEquals(candidate('hi'), 'lm')
    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')
    lu.assertEquals(candidate('gf'), 'kj')
    lu.assertEquals(candidate('et'), 'ix')
    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')
    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')
    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'), 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')
    lu.assertEquals(candidate('a'), 'e')
end

os.exit(lu.LuaUnit.run())"
HumanEval_90,knc_Arab,lua,"- عُودْ نِيلْ إنْ لَمْ يَكُنْ هَذَا العَنَاقِدْتَكْتُبُ دَلِيلَ next_smallest{\displaystyle next_smallest} يَرُدُّ ثَانِيَ أَصْغَرَ عَنْصَرَةٍ مِنَ الْجَدَلِ.- تُعْطَى لَكَ جَدَلَ أَعْدَادٍ.-- >>> next_smallest({1, 2, 3, 4, 5})
-- 2
-- >>> next_smallest({5, 1, 4, 3, 2})
-- 2
-- >>> next_smallest({})
-- None
-- >>> next_smallest({1, 1})
-- None
local function next_smallest(lst)
","local function next_smallest(lst)
    if #lst < 2 then
        return nil
    end

    table.sort(lst)

    local first = lst[1]
    for i = 2, #lst do
        if lst[i] > first then
            return lst[i]
        end
    end

    return nil
end","lu = require('luaunit')

function test_humaneval()
local candidate = next_smallest
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)
    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({1, 1}), None)
    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)
    lu.assertEquals(candidate({1, 1}), None)
    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)
end

os.exit(lu.LuaUnit.run())"
HumanEval_91,knc_Arab,lua,"- مَثَلاً:- جُمُوعُ تَتَحَيَّرُ بِ "" ""، ""؟ "" أَوْ ""! ""-مِنْ المُملَةِ. المُملَةُ جُمْلَةٌ تَبْدَأُ بِكَلِمَةِ ""أَنَا"".- سَتُعْطَى سِلْسِلَةَ كَلِمَاتٍ، وَمُهِمَّتُكَ تَعُدُّ العَدَدَ.-- >>> is_bored('Hello world')
-- 0
-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')
-- 1
local function is_bored(S)
","local function is_bored(S)
    local count = 0
    -- Split the string into sentences using patterns
    for sentence in S:gmatch(""[^%.!?]+"") do
        -- Trim leading whitespace from the sentence
        sentence = sentence:gsub(""^%s+"", """")
        -- Check if the sentence starts with ""I""
        if sentence:sub(1, 1) == ""I"" then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_bored
    lu.assertEquals(candidate('Hello world'), 0)
    lu.assertEquals(candidate('Is the sky blue?'), 0)
    lu.assertEquals(candidate('I love It !'), 1)
    lu.assertEquals(candidate('bIt'), 0)
    lu.assertEquals(candidate('I feel good today. I will be productive. will kill It'), 2)
    lu.assertEquals(candidate('You and I are going for a walk'), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_92,knc_Arab,lua,"-مِثَالَاتْيَرُدُّ كَذِبَ فِي كُلِّ حَالٍ آخَرَيَرُدُّ صَحِيحًا إِنْ كَانَ أَحَدُ الأَرْقَامِ مِثْلَ جُمْلَةِ الأَرْقَامِ الأُخْرَى، وَكُلُّ الأَرْقَامِ عَدَدٌ كَامِلٌ.-أَخْلِقْ دَلِيلَ يَأْخُذُ 3 أَرقَام.-- >>> any_int(5, 2, 7)
-- true
-- >>> any_int(3, 2, 2)
-- false
-- >>> any_int(3, -2, 1)
-- true
-- >>> any_int(3.6, -2.2, 2)
-- false
local function any_int(x, y, z)
","local function any_int(x, y, z)
    if math.floor(x) == x and math.floor(y) == y and math.floor(z) == z then
        if x == y + z or y == x + z or z == x + y then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = any_int
    lu.assertEquals(candidate(2, 3, 1), true)
    lu.assertEquals(candidate(2.5, 2, 3), false)
    lu.assertEquals(candidate(1.5, 5, 3.5), false)
    lu.assertEquals(candidate(2, 6, 2), false)
    lu.assertEquals(candidate(4, 2, 2), true)
    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
    lu.assertEquals(candidate(-4, 6, 2), true)
    lu.assertEquals(candidate(2, 1, 1), true)
    lu.assertEquals(candidate(3, 4, 7), true)
    lu.assertEquals(candidate(3.0, 4, 7), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_93,knc_Arab,lua,"-مِثَالَات:- تَأَمَّلْ حُرُوفَاً فَقَطْ.- حَرْفٌ فِي حَرْفِ الإنجليزي- الرسالة بِالحرفِ الّذي يَظْهَرُ مَوْضُوعَيْنِ قَبْلَ ذلك- طَرِيقَةَ تَبْدِيلِ حَالِ كُلِّ حُرُوفٍ، تَبْدِيلِ كُلِّ حُرُوفٍ فِي - اُكْتُبْ دَلِيْلَةً تَأْخُذُ رِسَالَةً، وَتُشَفِّرُ فِيْهَا -- >>> encode('test')
-- 'TGST'
-- >>> encode('This is a message')
-- 'tHKS KS C MGSSCGG'
local function encode(message)
","local function encode(message)
    local vowels = { a = 'c', e = 'g', i = 'k', o = 'q', u = 'w', A = 'C', E = 'G', I = 'K', O = 'Q', U = 'W' }
    local encodedMessage = {}
    
    for i = 1, #message do
        local char = message:sub(i, i)
        
        -- Swap case
        if char:match('%l') then
            char = char:upper()
        else
            char = char:lower()
        end
        
        -- Replace vowels
        if vowels[char] then
            char = vowels[char]
        end
        
        table.insert(encodedMessage, char)
    end
    
    return table.concat(encodedMessage)
end","lu = require('luaunit')

function test_humaneval()
local candidate = encode
    lu.assertEquals(candidate('TEST'), 'tgst')
    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')
    lu.assertEquals(candidate('YES'), 'ygs')
    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')
    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')
end

os.exit(lu.LuaUnit.run())"
HumanEval_94,knc_Arab,lua,"-مِثَالَات:تَحْتَاجُ لِتَجِدَ أَكْبَرَ قِيمَةٍ أَوَّلِيَّةٍ وَتَرُدَّ جُمْلَةَ أَعْدَادِهَا- تُعْطَى لَكَ جَدَلَ أَعْدَادٍ.-- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
-- 10
-- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
-- 25
-- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
-- 13
-- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
-- 11
-- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
-- 3
-- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
-- 7
local function skjkasdkd(lst)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    for i = 5, math.sqrt(n), 6 do
        if n % i == 0 or n % (i + 2) == 0 then return false end
    end
    return true
end

local function sum_of_digits(n)
    local sum = 0
    while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
    end
    return sum
end

local function skjkasdkd(lst)
    local largest_prime = -1
    for _, v in ipairs(lst) do
        if is_prime(v) and v > largest_prime then
            largest_prime = v
        end
    end
    if largest_prime == -1 then return 0 end
    return sum_of_digits(largest_prime)
end","lu = require('luaunit')

function test_humaneval()
local candidate = skjkasdkd
    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
    lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
    lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
    lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
    lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
    lu.assertEquals(candidate({8191}), 19)
    lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
    lu.assertEquals(candidate({127, 97, 8192}), 10)
end

os.exit(lu.LuaUnit.run())"
HumanEval_95,knc_Arab,lua,"-مِثَالَات:- تَجِبُ أَنْ تَرُدَّ false إِذَا كَانَ الجَدَلُ فَارِغًا.- كَيْسْ أَو كُلّ المَفَاتِيح سِلْسِلَةٌ بِكَيْسْ كَيْسْ، وإلاّ رَدّتْ false.- مَعْطُوفٌ بِجَدَلٍ، يَرُدُّ صَحِيحًا إِنْ كَانَ كُلُّ المَفَاتِيحِ سَلَسَلَاتٍ في أَسْفَلِ -- >>> check_dict_case({['a'] = 'apple', ['b'] = 'banana'})
-- true
-- >>> check_dict_case({['a'] = 'apple', ['A'] = 'banana', ['B'] = 'banana'})
-- false
-- >>> check_dict_case({['a'] = 'apple', [8] = 'banana', ['a'] = 'apple'})
-- false
-- >>> check_dict_case({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'})
-- false
-- >>> check_dict_case({['STATE'] = 'NC', ['ZIP'] = '12345'})
-- true
local function check_dict_case(dict)
","local function is_lowercase(s)
    return s:lower() == s
end

local function is_uppercase(s)
    return s:upper() == s
end

local function check_dict_case(dict)
    if next(dict) == nil then
        return false
    end

    local lower_case = nil
    for key, _ in pairs(dict) do
        if type(key) ~= 'string' then
            return false
        end
        
        if lower_case == nil then
            lower_case = is_lowercase(key)
        elseif lower_case ~= is_lowercase(key) then
            return false
        end
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = check_dict_case
    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)
    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)
    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)
    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)
    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)
    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)
    lu.assertEquals(candidate({}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_96,knc_Arab,lua,"- مِثَالًا:- أَعْدَدُ أَعْدَادٍ أَوَّلِيَّةٍ وَأَقَلُّ مِنْ ن- تَنْفِذُ دَالَةً تَأْخُذُ كُلَّ عَدَدٍ غَيْرَ سَلبِيٍّ وَتَرُدُّ جَدَدَ أَوَّلِ n -- >>> count_up_to(5)
-- {2, 3}
-- >>> count_up_to(11)
-- {2, 3, 5, 7}
-- >>> count_up_to(0)
-- {}
-- >>> count_up_to(20)
-- {2, 3, 5, 7, 11, 13, 17, 19}
-- >>> count_up_to(1)
-- {}
-- >>> count_up_to(18)
-- {2, 3, 5, 7, 11, 13, 17}
local function count_up_to(n)
","local function is_prime(num)
    if num <= 1 then return false end
    if num <= 3 then return true end
    if num % 2 == 0 or num % 3 == 0 then return false end
    local i = 5
    while i * i <= num do
        if num % i == 0 or num % (i + 2) == 0 then return false end
        i = i + 6
    end
    return true
end

local function count_up_to(n)
    local primes = {}
    for i = 2, n - 1 do
        if is_prime(i) then
            table.insert(primes, i)
        end
    end
    return primes
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_up_to
    lu.assertEquals(candidate(5), {2, 3})
    lu.assertEquals(candidate(6), {2, 3, 5})
    lu.assertEquals(candidate(7), {2, 3, 5})
    lu.assertEquals(candidate(10), {2, 3, 5, 7})
    lu.assertEquals(candidate(0), {})
    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})
    lu.assertEquals(candidate(1), {})
    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})
    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})
    lu.assertEquals(candidate(101), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97})
end

os.exit(lu.LuaUnit.run())"
HumanEval_97,knc_Arab,lua,"-مِثَالَات:- يَتَوَهَّمُ الدَّخْلُ دَائِمًا صَحِيحٌ.- بِضَرْبِ أَرْبَعَةِ أَلْفَاتِهِمْ.تَمْلِي الوَظِيفَةَ الَّتِي تَأْخُذُ كُلَّيْنِ وَتَعُودُ-- >>> multiply(148, 412)
-- 16
-- >>> multiply(19, 28)
-- 72
-- >>> multiply(2020, 1851)
-- 0
-- >>> multiply(14, -15)
-- 20
local function multiply(a, b)
","local function multiply(a, b)
    local unitDigitA = math.abs(a) % 10
    local unitDigitB = math.abs(b) % 10
    return unitDigitA * unitDigitB
end","lu = require('luaunit')

function test_humaneval()
local candidate = multiply
    lu.assertEquals(candidate(148, 412), 16)
    lu.assertEquals(candidate(19, 28), 72)
    lu.assertEquals(candidate(2020, 1851), 0)
    lu.assertEquals(candidate(14, -15), 20)
    lu.assertEquals(candidate(76, 67), 42)
    lu.assertEquals(candidate(17, 27), 49)
    lu.assertEquals(candidate(0, 1), 0)
    lu.assertEquals(candidate(0, 0), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_98,knc_Arab,lua,"- مَثَلاً:- مُعْطَى سِلْسِلَة s، عُدْ عَدَدَ الحُرُوفِ الكبيرةِ في مُؤَوَّلَاتِ الزَّوَاجِ.-- >>> count_upper('aBCdEf')
-- 1
-- >>> count_upper('abcdefg')
-- 0
-- >>> count_upper('dBBE')
-- 0
local function count_upper(s)
","local function count_upper(s)
    local count = 0
    local vowels = { A = true, E = true, I = true, O = true, U = true }
    for i = 1, #s, 2 do
        local char = s:sub(i, i)
        if vowels[char] then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_upper
    lu.assertEquals(candidate('aBCdEf'), 1)
    lu.assertEquals(candidate('abcdefg'), 0)
    lu.assertEquals(candidate('dBBE'), 0)
    lu.assertEquals(candidate('B'), 0)
    lu.assertEquals(candidate('U'), 1)
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('EEEE'), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_99,knc_Arab,lua,"-مِثَالَاتْ- مِنْ اثْنَيْنِ أَعْدَدَيْنِ، يُقْرِضُهُ عَنِ الصِّفَرِ.وَيَرُدُّ أَقْرَبَ عَدَدٍ كَامِلٍ إِنْ كَانَ الرَّقْمُ مُتَسَاوِيًا- خَلَقْتِ دَلِيلَ يَأْخُذُ قِيمَةً (خَطّ) تَمْثِيلُ عَدَدًا -- >>> closest_integer('10')
-- 10
-- >>> closest_integer('15.3')
-- 15
-- Note:
-- Rounding away from zero means that if the given number is equidistant
-- from two integers, the one you should return is the one that is the
-- farthest from zero. For example closest_integer(""14.5"") should
-- return 15 and closest_integer(""-14.5"") should return -15.
local function closest_integer(value)
","local function closest_integer(value)
    local number = tonumber(value)
    if not number then
        error(""Invalid number"")
    end
    if number > 0 then
        return math.floor(number + 0.5)
    else
        return math.ceil(number - 0.5)
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = closest_integer
    lu.assertEquals(candidate('10'), 10)
    lu.assertEquals(candidate('14.5'), 15)
    lu.assertEquals(candidate('-15.5'), -16)
    lu.assertEquals(candidate('15.3'), 15)
    lu.assertEquals(candidate('0'), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_100,knc_Arab,lua,"-مِثَالَات:- أَمْثَلُ عَدَدَ الحِجَارَةِ فِي الْمَسَافَةِ (أَوْ)- يَعُودُ عَدَدَ الحِجَارَةِ فِي كُلِّ دَرَجَةٍ فِي الجَدَلِ، حَيْثُ العَنَاءُ في المُؤَنَّثِ - - الرَّقْمُ الْجَوْرِيُّ الْأَوَّلُ إِنْ كَانَ n جَوْرِيًّا.- - الرَّقْمُ الْعَدْلُ الْمُتَابِعُ إِنْ كَانَ n عَدْلًا.- عَدَدُ الحَجَرِ في المستوى التَالِي هُوَ:-الْمَسَافَةُ الأُولَى لَهَا حِجَارَةٌ- مُعْطَى عَدَدَ كُلٍّ مُوجِبَ n، لَكَ أَنْ تَجْعَلَ كُومَةً مِنْ نَوَاعِدِ حِجَارَةٍ.-- >>> make_a_pile(3)
-- {3, 5, 7}
local function make_a_pile(n)
","local function make_a_pile(n)
    local pile = {}
    local current_stones = n
    for i = 1, n do
        table.insert(pile, current_stones)
        if n % 2 == 0 then
            current_stones = current_stones + 2
        else
            current_stones = current_stones + 2
        end
    end
    return pile
end","lu = require('luaunit')

function test_humaneval()
local candidate = make_a_pile
    lu.assertEquals(candidate(3), {3, 5, 7})
    lu.assertEquals(candidate(4), {4, 6, 8, 10})
    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})
    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})
    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})
end

os.exit(lu.LuaUnit.run())"
HumanEval_101,knc_Arab,lua,"- مَثَلاً:- لِيَقْسِمَ السِّلْطَةَ كَلِمَاتٍ وَيَرُدَّ جَدَلَ الكَلِمَاتِ.سَتُعْطَى سِلْسِلَةَ كَلِمَاتٍ مُفَرَّقَةٍ بِالْفُصُولِ أَوِ الْبَيَانِ.-- >>> words_string('Hi, my name is John')
-- {'Hi', 'my', 'name', 'is', 'John'}
-- >>> words_string('One, two, three, four, five, six')
-- {'One', 'two', 'three', 'four', 'five', 'six'}
local function words_string(s)
","local function words_string(s)
    local words = {}
    for word in s:gmatch(""[^,%s]+"") do
        table.insert(words, word)
    end
    return words
end","lu = require('luaunit')

function test_humaneval()
local candidate = words_string
    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
    lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_102,knc_Arab,lua,"- مَثَلاً:- لَيْسَ هَكَذَا، فَتَرُدُّ -1.- كَبِيرُ عَدَدِ كُلٍّ زَوَائِدِيٍّ فِي مَوْضِعِ [x، y] مَشْمُولٍ.- تَأْخُذُ هَذِهِ الدَّلِيلَةُ عَدَدَيْنِ مُوجِبَيْنِ x و y وَتَرُدُّ -- >>> choose_num(12, 15)
-- 14
-- >>> choose_num(13, 12)
-- -1
local function choose_num(x, y)
","local function choose_num(x, y)
    -- Ensure x is the smaller and y is the larger
    if x > y then
        x, y = y, x
    end
    
    -- Start from y and work backwards
    for i = y, x, -1 do
        if i % 2 == 0 then
            return i
        end
    end
    
    -- If no even number is found
    return -1
end","lu = require('luaunit')

function test_humaneval()
local candidate = choose_num
    lu.assertEquals(candidate(12, 15), 14)
    lu.assertEquals(candidate(13, 12), -1)
    lu.assertEquals(candidate(33, 12354), 12354)
    lu.assertEquals(candidate(5234, 5233), -1)
    lu.assertEquals(candidate(6, 29), 28)
    lu.assertEquals(candidate(27, 10), -1)
    lu.assertEquals(candidate(7, 7), -1)
    lu.assertEquals(candidate(546, 546), 546)
end

os.exit(lu.LuaUnit.run())"
HumanEval_103,knc_Arab,lua,"-مِثَال:- إِنْ كَانَ n أَكْبَرَ مِنْ m، رُدّ -1.- قُرْبَةُ الجَوَابِ إلى الأقْرَبِ كُلِّي وَحَوِّلْهُ إلى ثنِيّ.- متوسط الأعداد الصحيحة مِنْ n مِنْ خلال m (بِمَعْنَاهَا n و m).- تُعْطَى اثْنَتَيْنِ مِنْ الأَصْحَابِ الْمُوجِبَيْنِ n و m، وَمُهِمَّتُكَ حِسَابُ -- >>> rounded_avg(1, 5)
-- '0b11'
-- >>> rounded_avg(7, 5)
-- -1
-- >>> rounded_avg(10, 20)
-- '0b1111'
-- >>> rounded_avg(20, 33)
-- '0b11010'
local function rounded_avg(n, m)
","local function rounded_avg(n, m)
    if n > m then
        return -1
    end
    
    local sum = 0
    local count = 0

    for i = n, m do
        sum = sum + i
        count = count + 1
    end

    local average = sum / count
    local rounded_avg = math.floor(average + 0.5)

    return string.format(""0b%d"", tonumber(string.format(""%o"", rounded_avg), 8))
end","lu = require('luaunit')

function test_humaneval()
local candidate = rounded_avg
    lu.assertEquals(candidate(1, 5), '0b11')
    lu.assertEquals(candidate(7, 13), '0b1010')
    lu.assertEquals(candidate(964, 977), '0b1111001010')
    lu.assertEquals(candidate(996, 997), '0b1111100100')
    lu.assertEquals(candidate(560, 851), '0b1011000010')
    lu.assertEquals(candidate(185, 546), '0b101101110')
    lu.assertEquals(candidate(362, 496), '0b110101101')
    lu.assertEquals(candidate(350, 902), '0b1001110010')
    lu.assertEquals(candidate(197, 233), '0b11010111')
    lu.assertEquals(candidate(7, 5), -1)
    lu.assertEquals(candidate(5, 1), -1)
    lu.assertEquals(candidate(5, 5), '0b101')
end

os.exit(lu.LuaUnit.run())"
HumanEval_104,knc_Arab,lua,"- مَثَلاً:- تَعْلِيق: جَدَل رَدّيَ يَجِبُ أَنْ يُصَنَّفَ فِي تَرْتِيبِ الْمَزِيد.- العِنَادَاتِ الَّتِي لَيْسَ لَهَا أَيَّةُ أَلْفَاظٍ.- مُعْطَى جَدَلِ مِنْ الأَصْحَابِ الْمُوجِبِينَ x. رُدَّ جَدَلًا مُنَظَّمًا لِكُلِّ -- >>> unique_digits({15, 33, 1422, 1})
-- {1, 15, 33}
-- >>> unique_digits({152, 323, 1422, 10})
-- {}
local function unique_digits(x)
","local function has_even_digit(num)
    while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
            return true
        end
        num = math.floor(num / 10)
    end
    return false
end

local function unique_digits(x)
    local result = {}
    for _, num in ipairs(x) do
        if not has_even_digit(num) then
            table.insert(result, num)
        end
    end
    table.sort(result)
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = unique_digits
    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})
    lu.assertEquals(candidate({152, 323, 1422, 10}), {})
    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})
    lu.assertEquals(candidate({135, 103, 31}), {31, 135})
end

os.exit(lu.LuaUnit.run())"
HumanEval_105,knc_Arab,lua,"- مَثَلاً:- ""واحدَ، اثنانَ، ثلاثةَ، أربعةَ، خمسةَ، ستَةَ، سبعةَ، ثمانَةَ، تسعةَ""- عَكِّسْ الجدولَ النَّاتِجَ، ثُمَّ حَلِّلْ كُلَّ دَرَجَةٍ بِاسْمِهَا المُنَاسِبِ مِنْ - مُعْطَيَةُ جَدَلِ أَعْدَادٍ سَمِيَّةٍ، أَنْزِلُ الأَعْدَادَ الَّتِي بَيْنَ 1 و 9 مَشْمُولَةً،-- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
--   If the table is empty, return an empty table:
-- >>> by_length({})
-- {}
--   If the table has any strange number ignore it:
-- >>> by_length({1, -1, 55})
-- {'One'}
local function by_length(arr)
","local function by_length(arr)
    local digits_names = {
        [1] = ""One"", [2] = ""Two"", [3] = ""Three"", [4] = ""Four"", [5] = ""Five"",
        [6] = ""Six"", [7] = ""Seven"", [8] = ""Eight"", [9] = ""Nine""
    }

    local filtered = {}
    for _, num in ipairs(arr) do
        if num >= 1 and num <= 9 then
            table.insert(filtered, num)
        end
    end

    table.sort(filtered, function(a, b) return a > b end)

    for i, num in ipairs(filtered) do
        filtered[i] = digits_names[num]
    end

    return filtered
end","lu = require('luaunit')

function test_humaneval()
local candidate = by_length
    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, -1, 55}), {'One'})
    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_106,knc_Arab,lua,"-مِثَال:- فَاكْتَارِيَةُ i ضِعْفُ الأَرْقَامِ مِنْ 1 إلى i (1 * 2 * ... * i).- أَبْدَأُ مِنْ 1.- أَوْ جَمْعَ الأَرْقَامِ مِنْ 1 إلى i إِلاَّ هُوَ.وَيَرُدُّ جَدَلَ مِنْ حَجْمِ n، كَمَا أَنَّ قِيمَةَ العَنْوَةِ فِي مُؤَنَّثِي i هِيَ فَاكْتَارِيَّةُ i إِذَا كَانَ i زَوِيًّا - تَنْفِذُ الوِظَافَةَ f تَتَّخِذُ n كَالْمُعَايَنَةِ، -- >>> f(5)
-- {1, 2, 6, 24, 15}
local function f(n)
","local function factorial(x)
    if x == 0 then
        return 1
    else
        local result = 1
        for i = 2, x do
            result = result * i
        end
        return result
    end
end

local function sum_to_i(x)
    return (x * (x + 1)) // 2
end

local function f(n)
    local result = {}
    for i = 1, n do
        if i % 2 == 0 then
            result[i] = factorial(i)
        else
            result[i] = sum_to_i(i)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = f
    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})
    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})
    lu.assertEquals(candidate(1), {1})
    lu.assertEquals(candidate(3), {1, 2, 6})
end

os.exit(lu.LuaUnit.run())"
HumanEval_107,knc_Arab,lua,"- مِثَالُ 1:- كَمْ مِنْ أَعْدَادٍ سَامِيَةٍ تَقَعُ فِي مَوْضِعِ ((1، n) مَعَهُمْ.- مُعْطَى عَدَدَ كُلٍّ إيجَابِيَّ n، رُدَّ جَدَلًا لَهُ عَدَدُ الزَّوَاجِرِ وَالْفُرَاتِ -- >>> even_odd_palindrome(3)
-- {1, 2}
--     Explanation:
--     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
-- Example 2:
-- >>> even_odd_palindrome(12)
-- {4, 6}
--     Explanation:
--     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
-- Note:
--     1. 1 <= n <= 10^3
--     2. returned table has the number of even and odd integer palindromes respectively.
local function even_odd_palindrome(n)
","local function is_palindrome(num)
    local str = tostring(num)
    return str == string.reverse(str)
end

local function even_odd_palindrome(n)
    local even_count = 0
    local odd_count = 0

    for i = 1, n do
        if is_palindrome(i) then
            if i % 2 == 0 then
                even_count = even_count + 1
            else
                odd_count = odd_count + 1
            end
        end
    end

    return {even_count, odd_count}
end","lu = require('luaunit')

function test_humaneval()
local candidate = even_odd_palindrome
    lu.assertEquals(candidate(123), {8, 13})
    lu.assertEquals(candidate(12), {4, 6})
    lu.assertEquals(candidate(3), {1, 2})
    lu.assertEquals(candidate(63), {6, 8})
    lu.assertEquals(candidate(25), {5, 6})
    lu.assertEquals(candidate(19), {4, 6})
    lu.assertEquals(candidate(9), {4, 5})
    lu.assertEquals(candidate(1), {0, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_108,knc_Arab,lua,"-مِثْلَ -123 لَهُ أَشْرَافُ -1,2,و3.-إِنْ كَانَ عَدَدٌ سَلبيّاً، فَأَوَّلُ دَرَجَةٍ مُوقَعَةٍ سَتَكُونُ سَلبيّةً:- عَدَدَ العَنَوَاتِ الَّذِي مَجْمُوعُهَا أَعْلَى مِنْ 0- اُكْتُبْ دَلِيْلَ count_nums يَأْخُذُ جَدَلَ أَعْدَادٍ وَيَرُدُّ -- >>> count_nums({})
-- 0
-- >>> count_nums({-1, 11, -11})
-- 1
-- >>> count_nums({1, 1, 2})
-- 3
local function count_nums(arr)
","local function count_nums(arr)
    local function sum_of_digits(num)
        local sum = 0
        local is_negative = num < 0
        num = math.abs(num)
        while num > 0 do
            sum = sum + (num % 10)
            num = math.floor(num / 10)
        end
        if is_negative then
            sum = sum - 2 * (math.floor(math.abs(arr[index]) / 10 ^ (math.floor(math.log10(math.abs(arr[index]))))))
        end
        return sum
    end

    local count = 0
    for _, num in ipairs(arr) do
        local digit_sum = sum_of_digits(num)
        if digit_sum > 0 then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_nums
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({-1, -2, 0}), 0)
    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)
    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)
    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)
    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)
    lu.assertEquals(candidate({0, 1}), 1)
    lu.assertEquals(candidate({1}), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_109,knc_Arab,lua,"- مَثَلاً:- تَعْلِيقَة: يُضَمَّنُ أَنْ يَكُونَ لِلْجَدَلِ مَفْرُوضٌ.- إنْ كَانَ الجدولُ المُعْطَى فَارِغًا فَارْجِعْ حَقًّا.- ثُمَّ ارْجِعْ حَقًّا أَوْ ارْجِعْ كَذِبًا.إنْ كانَ مُمْكِنَاً أنْ نَحْصُلَ على الجدولِ المُنَظَّمِ بِأداءِ العمليةِ المذكورةِ أعلاه- المَوْضِعُ الأَوَّلُ فِي الجدولِ، أيّ المؤشرُ 0- موقف في الاتجاه الصحيح. العنصر الأخير من الجدول سَيَنْتَقِلُ إلى - حَرْفُ الْيَمِينِ يَعْنِي تَحْرِيفَ كُلِّ عُنُقِ الْجَدَلِ بِوَاحِدٍيُمْكِنُك أَنْ تَجْرِي حَرْفَةَ التَّحَوُّلِ الْيَمِينِ أَيَّ مَرَّةٍ.- العملية التالية على الجدولِ المُعَطَى: - يُمْكِنُ أَنْ تَحْصُلَ جَدَلٌ مُنْتَقِمٌ بِغَيْرِ تَنْقِصَةٍ بِأَدَاءِأَنْتَ مَسْئُولٌ عَنْ تَحْدِيدِ أَنْ تَكُونَ- لَنَا جَدَلٌ 'arr' مِنْ نَوْمِيَّاتٍ كُلِّيَّاتٍ arr[1], arr[2], ..., arr[N].-- >>> move_one_ball({3, 4, 5, 1, 2})
-- true
-- Explanation: By performin 2 right shift operations, non-decreasing order can
--              be achieved for the given table.
-- >>> move_one_ball({3, 5, 4, 1, 2})
-- false
-- Explanation:It is not possible to get non-decreasing order for the given
--             table by performing any number of right shift operations.
local function move_one_ball(arr)
","local function move_one_ball(arr)
    local n = #arr
    if n == 0 then
        return true
    end

    local count_descending_pairs = 0

    for i = 1, n do
        if arr[i] > arr[(i % n) + 1] then
            count_descending_pairs = count_descending_pairs + 1
        end
        if count_descending_pairs > 1 then
            return false
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = move_one_ball
    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)
    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)
    lu.assertEquals(candidate({4, 3, 1, 2}), false)
    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)
    lu.assertEquals(candidate({}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_110,knc_Arab,lua,"- مَثَلاً:-إلاّ، رُدّ ""لاَ"".- كُلّ العَنَوَاتِ مِنْ lst1 لِتَكُونَ زَوَائِجَ، رُدّ ""نَعَمْ"".- إنْ كانَ مُمْكِنَاً تَبَادُلُ العِنَادَاتِ بَيْنَ lst1 و lst2 لِتَجْعَلَلَيْسَ لَهُ حَدٌّ عَلَى عَدَدِ الْعَوَانِي الْمُتَبَادِلَةِ بَيْنَ lst1 و lst2.- بَيْنَهُمْ لِيَجْعَلَ lst1 جَدَلَ أَعْدَادٍ مُجَرَّدَةٍ.وَيَقِيسُ إِنْ كَانَ مُمْكِنًا أَنْ يُجْرَى مُبَادَلَةُ العِنَادِ- فِي هَذِهِ المَسْأَلَةِ، سَتُنَفِّذُ دَلِيلًا يَأْخُذُ جَدَلَيْ أَرْقَامٍ، -- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})
-- 'YES'
-- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})
-- 'NO'
-- It is assumed that the input tables will be non-empty.
local function exchange(lst1, lst2)
","local function exchange(lst1, lst2)
    local is_all_even = true
    local odd_count_lst1 = 0
    local even_count_lst2 = 0

    -- Check lst1 for odd numbers
    for _, num in ipairs(lst1) do
        if num % 2 ~= 0 then
            odd_count_lst1 = odd_count_lst1 + 1
        end
    end

    -- Check lst2 for even numbers
    for _, num in ipairs(lst2) do
        if num % 2 == 0 then
            even_count_lst2 = even_count_lst2 + 1
        end
    end

    -- It is possible to make lst1 all even if the number of odd elements
    -- in lst1 can be swapped with the number of even elements in lst2
    if odd_count_lst1 <= even_count_lst2 then
        return ""YES""
    else
        return ""NO""
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = exchange
    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')
    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')
    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')
    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')
    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')
    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')
    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')
end

os.exit(lu.LuaUnit.run())"
HumanEval_111,knc_Arab,lua,"-مِثَال:-إذا كانَتْ عِدَّةُ حُرُوفٍ تَتَشابَهُ، فَارْجِعْ كُلَّها.- لِلْحَرْفِ بِأَكْثَرِ تَكْرَارٍ وَمَعَهُ الْعَدَدُ الْمُتَعَادِي.- مُعْطَى سِلْسِلَة مُمَثِّلَة حُرُوف صَغِيرَة مُفَارَقَة بِفَسْحَة، ارْجِعْ جَدَد -- >>> histogram('a b c')
-- {['a'] = 1, ['b'] = 1, ['c'] = 1}
-- >>> histogram('a b b a')
-- {['a'] = 2, ['b'] = 2}
-- >>> histogram('a b c a b')
-- {['a'] = 2, ['b'] = 2}
-- >>> histogram('b b b b a')
-- {['b'] = 4}
-- >>> histogram('')
-- {}
local function histogram(test)
","local function histogram(test)
    if test == """" then return {} end
    
    local words = {}
    for word in test:gmatch(""%S"") do
        words[word] = (words[word] or 0) + 1
    end
    
    local max_count = 0
    local result = {}
    for letter, count in pairs(words) do
        if count > max_count then
            max_count = count
            result = {[letter] = count}
        elseif count == max_count then
            result[letter] = count
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = histogram
    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})
    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})
    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})
    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})
    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})
    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('a'), {['a'] = 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_112,knc_Arab,lua,"- مَثَلْ- يَجِبُ أَنْ تَرُدَّ جَدَلًا يَتَضَمَّنُ سِلْسِلَةَ النَّتِيجَةِ وَالصَّحِيحَ/الْكَذِبَ لِلْمُتَحَقِّقِ.- سِلْسِلَةٌ تُدْعَى بِالْمُتَوَسِّطِ إِنْ قُرِئَتْ مُتَوَسِّطَةً كَمُتَوَسِّطَةٍ.- ثُمَّ تَفَقَّدْ إنْ كَانَتْ السِّلْطَةُ النَّاتِجَةُ بَالِندْرَامِيَّةً.- نَحْنُ مَوْهُوبَانِ سَلَسْلَتَانِ s و c، لَكَ أَنْ تَحْذِفَ كُلَّ الْحُرُوفِ فِي s الَّتِي تَسْتَوِي إِلَى أَيِّ حُرُوفٍ فِي c - مَهمَة -- >>> reverse_delete('abcde', 'ae')
-- {'bcd', false}
-- >>> reverse_delete('abcdef', 'b')
-- {'acdef', false}
-- >>> reverse_delete('abcdedcba', 'ab')
-- {'cdedc', true}
local function reverse_delete(s, c)
","local function reverse_delete(s, c)
    -- Create a set for characters to delete
    local delete_set = {}
    for i = 1, #c do
        delete_set[c:sub(i, i)] = true
    end
    
    -- Create the result string by filtering out characters in delete_set
    local result = {}
    for i = 1, #s do
        local char = s:sub(i, i)
        if not delete_set[char] then
            table.insert(result, char)
        end
    end
    
    -- Convert result table to string
    local result_str = table.concat(result)
    
    -- Check if the result string is a palindrome
    local is_palindrome = true
    local len = #result_str
    for i = 1, math.floor(len / 2) do
        if result_str:sub(i, i) ~= result_str:sub(len - i + 1, len - i + 1) then
            is_palindrome = false
            break
        end
    end
    
    -- Return the result string and palindrome check as a table
    return {result_str, is_palindrome}
end","lu = require('luaunit')

function test_humaneval()
local candidate = reverse_delete
    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
    lu.assertEquals(candidate('a', 'a'), {'', true})
    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
    lu.assertEquals(candidate('mamma', 'mia'), {'', true})
end

os.exit(lu.LuaUnit.run())"
HumanEval_113,knc_Arab,lua,"- مِنْ أَشْكَالِ الْعَدَدِ فِي الْخَطِّ الْمُدْخَلِ- سِلْطَةِ i مِنْ الإِدْخَالِ. "" حَيْثُ كُلّ الْi يَجِبُ أَنْ يُسْتَبْدَلَ بِالرَّقْمِ - كُلّ عَنْصَر i مِنْ النَّتِجَة يَجِبُ أَنْ يَكُونَ عَدَدَ العَنْصَرِيّينَ في- مُعْطَى جَدَلِ سَلاَلَاتٍ، حَيْثُ كُلُّ سَلاَلَةٍ تَتَأَلَّفُ مِنْ أَرْبَعَةِ أَعْدَادٍ، ارْجِعْ جَدَلًا.-- >>> odd_count({'1234567'})
-- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}
-- >>> odd_count({'3', '11111111'})
-- {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'}
local function odd_count(lst)
","local function odd_count(lst)
    local result = {}
    for _, str in ipairs(lst) do
        local odd_count = 0
        for i = 1, #str do
            local digit = tonumber(str:sub(i, i))
            if digit % 2 == 1 then
                odd_count = odd_count + 1
            end
        end
        local element = string.format(""the number of odd elements %dn the str%1dng %d of the %d"", odd_count, odd_count, odd_count, odd_count)
        result[#result + 1] = element
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = odd_count
    lu.assertEquals(candidate({'1234567'}), {'the number of odd elements 4n the str4ng 4 of the 4nput.'})
    lu.assertEquals(candidate({'3', '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'})
    lu.assertEquals(candidate({'271', '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_114,knc_Arab,lua,"- مَثَلْ- مِنْ أَنْوَارِ- مُعْطَيَة جَدَلِ أَعْدَادِ سَمْعٍ، أَعْرِفْ أَقَلَّ مَجْمُوعِ أَيِّ جَدَلٍ دُونَ الْخَالِي-- >>> minSubArraySum({2, 3, 4, 1, 2, 4})
-- 1
-- >>> minSubArraySum({-1, -2, -3})
-- -6
local function minSubArraySum(nums)
","local function minSubArraySum(nums)
    local min_sum = nums[1]
    local current_sum = nums[1]

    for i = 2, #nums do
        current_sum = math.min(nums[i], current_sum + nums[i])
        min_sum = math.min(min_sum, current_sum)
    end

    return min_sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = minSubArraySum
    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)
    lu.assertEquals(candidate({-1, -2, -3}), -6)
    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)
    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)
    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)
    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)
    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)
    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)
    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)
    lu.assertEquals(candidate({-10}), -10)
    lu.assertEquals(candidate({7}), 7)
    lu.assertEquals(candidate({1, -1}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_115,knc_Arab,lua,"- مِثَالُ 1:- أَخْرِجْ عَدَدَ المَرَّاتِ الَّتِي تَحْتَاجُ لِتَنْزِيلِ الدِّيَارِ-مُهِمَّتُكَ تَستَخدِمُ الدِّلاءَ لِتَفْرِغَ البِئَارَ.وَكُلُّ الْمَاءِ مَعَهُ سَعَةٌ مِثْلُهُكُلّ بِئْر لَهَا دَلْو مُتَوافِق يُمْكِنُ أَنْ يُستَخدَمَ لِإِخْراجِ المَاء مِنْهَاوَكُلُّ وَاحِدَةٍ فِي الصَّفِّ تَمْثِلُ وَاحِدَةً مِنَ الْمَاءِ.تَتَعَطَّى لَكَ شَبَكَة مُقَوَّمَة مِنْ البِئَار كُلّ صَفّ يَمْثُلُ بِئَارَ وَاحِدَة-- >>> max_fill({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1)
-- 6
-- Example 2:
-- >>> max_fill({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2)
-- 5
-- Example 3:
-- >>> max_fill({{0, 0, 0}, {0, 0, 0}}, 5)
-- 0
-- Constraints:
--     * all wells have the same length
--     * 1 <= grid.length <= 10^2
--     * 1 <= grid[:,1].length <= 10^2
--     * grid[i][j] -> 0 | 1
--     * 1 <= capacity <= 10
local function max_fill(grid, capacity)
","local function max_fill(grid, capacity)
    local total_units = 0

    -- Traverse each well in the grid
    for i = 1, #grid do
        for j = 1, #grid[i] do
            total_units = total_units + grid[i][j]
        end
    end

    -- Calculate the number of times the bucket needs to be lowered
    local num_lowerings = math.ceil(total_units / capacity)

    return num_lowerings
end","lu = require('luaunit')

function test_humaneval()
local candidate = max_fill
    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)
    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)
    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}}, 5), 0)
    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)
    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_116,knc_Arab,lua,"يَجِبُ أَنْ يُنفَذَ كَمَا يَلي:لِمِثْلِ عَدَدِ الْوَاحِدَاتِ، تَصْنِيف بِنَاء عَشْرِيّة.- عَدَدَ الأَوَاحِدِ فِي تَمْثِيلِهَا الثنِيِّ فِي تَرْتِيبٍ مُصْعَدٍ.- فِي هَذَا الكَاتَا، لَكَ أنْ تُنَظِّمَ جَدَلَ أَعْدَادٍ سَمِيَّةٍ غير سَلبيَّةٍ بِحَسَبِ-- >>> sort_array({1, 5, 2, 3, 4})
-- {1, 2, 3, 4, 5}
-- >>> sort_array({-2, -3, -4, -5, -6})
-- {-6, -5, -4, -3, -2}
-- >>> sort_array({1, 0, 2, 3, 4})
-- {0, 1, 2, 3, 4}
local function sort_array(arr)
","local function count_ones(n)
    local count = 0
    while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
    end
    return count
end

local function sort_array(arr)
    table.sort(arr, function(a, b)
        local ones_a = count_ones(math.abs(a))
        local ones_b = count_ones(math.abs(b))
        if ones_a == ones_b then
            return a < b
        else
            return ones_a < ones_b
        end
    end)
    return arr
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_array
    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
    lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
    lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
end

os.exit(lu.LuaUnit.run())"
HumanEval_117,knc_Arab,lua,"-مِثَالَات:- تَعْلِيْم: يُمْكِنُ أَنْ تَتَّخِذَ السِّلْسِلَةَ الْمُدْخَلَةَ تَتَضَمَّنُ حُرُوفًا وَفُسُوفًا.- إِنْ كَانَتْ السِّلْطَةُ s فَارِغَةً فَتَجِبُ أَنْ تَرُدَّ جَدَلًا فَارِغًا.- نَحْوَ الْمُضَارِعِ، لِتَظْهَرَ هَذِهِ الكَلِمَاتُ فِي السِّلْسِلَةِ.- a function يَعُودُ بِجَدَلِ كُلِّ كَلِمَاتٍ مِنْ سِلْسِلَةِ s يَتَضَمَّنُ بِالتَّفْصِيلِ - مُعْطَى سِلْسِلَة s وَعَدَدِيَّة n، قَدْ كُلِّفَتْكَ تَنْفِيذُ -- >>> select_words('Mary had a little lamb', 4)
-- {'little'}
-- >>> select_words('Mary had a little lamb', 3)
-- {'Mary', 'lamb'}
-- >>> select_words('simple white space', 2)
-- {}
-- >>> select_words('Hello world', 4)
-- {'world'}
-- >>> select_words('Uncle sam', 3)
-- {'Uncle'}
local function select_words(s, n)
","local function select_words(s, n)
    local vowels = { a = true, e = true, i = true, o = true, u = true,
                     A = true, E = true, I = true, O = true, U = true }
    local result = {}
    
    for word in s:gmatch(""%S+"") do
        local consonant_count = 0
        for char in word:gmatch(""%a"") do
            if not vowels[char] then
                consonant_count = consonant_count + 1
            end
        end
        if consonant_count == n then
            table.insert(result, word)
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = select_words
    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})
    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})
    lu.assertEquals(candidate('simple white space', 2), {})
    lu.assertEquals(candidate('Hello world', 4), {'world'})
    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})
    lu.assertEquals(candidate('', 4), {})
    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_118,knc_Arab,lua,"-مِثَال:- تَجِبُ أَنْ تَتَأَمَّلَ أَنَّ السِّلْسِلَةَ الْمَوْصُوفَةَ تَحْتَجُّ بِحَرْفٍ إِنْجِيلِيٍّ.- تَجِدْ أَيَّ حَرْفٍ تَمَسَّكَ بِالشَّرْطِ السَّابِقِ- حُرُوفُ في البِدَايَةِ وَالنهَايَةِ لاَ تُحْصَى. رُدَّ سِلْسِلَةً فَارِغَةً إنْ لَمْ تَكُنْ.- وَاوَيْنِ مِنْ جَانِبِ الْكَلِمَةِ الْأَيْمَنِ (حَسَبَ الْكَبِيرِ).- تُعْطَى كَلِمَةٌ. مَهْمَلُكَ أَنْ تَجِدَ أَقْرَبَ وَاوٍ تَقِفُ بَيْنَ-- >>> get_closest_vowel('yogurt')
-- 'u'
-- >>> get_closest_vowel('FULL')
-- 'U'
-- >>> get_closest_vowel('quick')
-- ''
-- >>> get_closest_vowel('ab')
-- ''
local function get_closest_vowel(word)
","local function get_closest_vowel(word)
    local vowels = ""AEIOUaeiou""
    local found_vowel = false
    local last_consonant = false

    for i = #word - 1, 2, -1 do
        local char = word:sub(i, i)
        if vowels:find(char) then
            if last_consonant then
                return char
            end
            found_vowel = true
        else
            if found_vowel then
                return ''
            end
            last_consonant = true
        end
    end

    return ''
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_closest_vowel
    lu.assertEquals(candidate('yogurt'), 'u')
    lu.assertEquals(candidate('full'), 'u')
    lu.assertEquals(candidate('easy'), '')
    lu.assertEquals(candidate('eAsy'), '')
    lu.assertEquals(candidate('ali'), '')
    lu.assertEquals(candidate('bad'), 'a')
    lu.assertEquals(candidate('most'), 'o')
    lu.assertEquals(candidate('ab'), '')
    lu.assertEquals(candidate('ba'), '')
    lu.assertEquals(candidate('quick'), '')
    lu.assertEquals(candidate('anime'), 'i')
    lu.assertEquals(candidate('Asia'), '')
    lu.assertEquals(candidate('Above'), 'o')
end

os.exit(lu.LuaUnit.run())"
HumanEval_119,knc_Arab,lua,"-مِثَالَات:- رُدُّ ""نَعَمْ"" إِنْ كَانَ ثَمَّةَ طَرِيقٌ لِصُنْعِ سِلْسِلَةٍ جَيِّدَةٍ، وَرُدُّ ""لَا"" إِلَّا.- ""()) "" لَيْسَ.مَثَلًا: السِّلْطُ '(((() ' جَيِّدٌ، وَالسِّلْطُ - سِلْسِلَة S تُعْتَبَرُ جَيِّدَةً إِنْ وَإِنْسَانًا إِنْ كُلُّ قُرْبَانِ S - بَعْضَ النَّظَرِ، أنَّ السَّلَسَةَ النَّاتِجَةَ سَتَكُونُ جَيِّدَةً.- مَهْمَلُكَ هُوَ أنْ تَتَفَقَّدَ إنْ كانَ مُمْكِنًا أنْ تُقَرِّنَ السَّلَسَتَيْنِ في- قُرَائِنَ "" (("" أَو قُرَائِنَ مُقَابِلَةً "")) "" فَقَطْ.- تُعْطَى لَكَ مَائِدَةٌ مِنْ سَلْسَلَتَيْنِ، كِلاَ السَّلْسَلَتَيْنِ مَفْتُوحَةٌ-- >>> match_parens({'()(', ')'})
-- 'Yes'
-- >>> match_parens({')', ')'})
-- 'No'
local function match_parens(lst)
","local function match_parens(lst)
    local function is_balanced(s)
        local balance = 0
        for i = 1, #s do
            if s:sub(i,i) == '(' then
                balance = balance + 1
            else
                balance = balance - 1
            end

            if balance < 0 then
                return false
            end
        end
        return balance == 0
    end

    local s1, s2 = lst[1], lst[2]
    return (is_balanced(s1 .. s2) or is_balanced(s2 .. s1)) and 'Yes' or 'No'
end","lu = require('luaunit')

function test_humaneval()
local candidate = match_parens
    lu.assertEquals(candidate({'()(', ')'}), 'Yes')
    lu.assertEquals(candidate({')', ')'}), 'No')
    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
    lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
    lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
    lu.assertEquals(candidate({'()', '())'}), 'No')
    lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
    lu.assertEquals(candidate({'((((', '((())'}), 'No')
    lu.assertEquals(candidate({')(()', '(()('}), 'No')
    lu.assertEquals(candidate({')(', ')('}), 'No')
    lu.assertEquals(candidate({'(', ')'}), 'Yes')
    lu.assertEquals(candidate({')', '('}), 'Yes')
end

os.exit(lu.LuaUnit.run())"
HumanEval_120,knc_Arab,lua,"- مِثَالُ 1:- مِنْ طُولِ k بِأَكْثَرِ k أَرْبَعَةِ أَرْبَعَةِ أَرْبَعَةِ- مُعْطَى جَدَلِ arr مِنْ الأَصْحَابِ وَكُلِّيَّةٌ إِيجَابِيَّةٌ k، رُدَّ جَدَلًا مُنَظَّمًا -- >>> maximum({-3, -4, 5}, 3)
-- {-4, -3, 5}
-- Example 2:
-- >>> maximum({4, -4, 4}, 2)
-- {4, 4}
-- Example 3:
-- >>> maximum({-3, 2, 1, 2, -1, -2, 1}, 1)
-- {2}
-- Note:
--     1. The length of the table will be in the range of [1, 1000].
--     2. The elements in the table will be in the range of [-1000, 1000].
--     3. 0 <= k <= len(arr)
local function maximum(arr, k)
","local function maximum(arr, k)
    table.sort(arr, function(a, b) return a > b end)
    local result = {}
    for i = 1, k do
        table.insert(result, arr[i])
    end
    table.sort(result)
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = maximum
    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})
    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})
    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})
    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})
    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})
    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})
    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})
    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})
    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})
    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})
    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_121,knc_Arab,lua,"-مِثَالَاتْ- مُعْطَيَةُ جَدَلِ أَعْدَادٍ سَوَاءٍ، تَرُدُّ جَمِيعَ العَنَاصِرِ الغَرِيبَةِ الْمُتَوَاضِعَةِ.-- >>> solution({5, 8, 7, 1})
-- 12
-- >>> solution({3, 3, 3, 3, 3})
-- 9
-- >>> solution({30, 13, 24, 321})
-- 0
local function solution(lst)
","local function solution(lst)
    local sum = 0
    for i = 2, #lst, 2 do
        if lst[i] % 2 == 1 then
            sum = sum + lst[i]
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = solution
    lu.assertEquals(candidate({5, 8, 7, 1}), 12)
    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)
    lu.assertEquals(candidate({30, 13, 24, 321}), 0)
    lu.assertEquals(candidate({5, 9}), 5)
    lu.assertEquals(candidate({2, 4, 8}), 0)
    lu.assertEquals(candidate({30, 13, 23, 32}), 23)
    lu.assertEquals(candidate({3, 13, 2, 9}), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_122,knc_Arab,lua,"-مِثَال:- جَمْعَ العَوَانِدِ بِكُلِّ عَدَدَيْنِ مِنْ أَوَّلِ كَوَانِدِ arr.- مُعْطَى جَدَلْ غَيْرِ فَارِغِ مِنْ أَعْدَادِ كُلِّيَّة arr وَأَعْدَادِ كُلِّيَّة k، عُودُ -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
-- 24
-- Constraints:
--     1. 1 <= len(arr) <= 100
--     2. 1 <= k <= len(arr)
local function add_elements(arr, k)
","local function add_elements(arr, k)
    local sum = 0
    for i = 1, k do
        local element = arr[i]
        if element >= -99 and element <= 99 then
            sum = sum + element
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = add_elements
    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
    lu.assertEquals(candidate({1}, 1), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_123,knc_Arab,lua,"- get_odd_collatz(5) يَرُدُّ [1, 5] # تَتَابُعَةَ collatz لِ 5 هِيَ [5, 16, 8, 4, 2, 1]، فَالأَرْقَامُ الغَرِيبَةُ هِيَ 1 و 5 فقط. - مَثَلاً:- 2. رَجَعَ الجَدَلُ مُنَقَّطٌ بِالتَّرْتِيبِ الْمُتَزَايِدِ.- 1. كُولَاتزَ ((1) هُوَ [1].- تَعَالَى:- مَرْضِيَةٌ مَزِيدَةٌ بِأَنَّهُ لَا يَهُمُّ أَيُّ قِيمَةٍ لِـ n، سَيَصِلُ التَّتَابُعُ إِلَى 1- العِدَادَ السَّابِقَ. إذا كان العِدَادُ السَّابِقُ فَرِيداً، العِدَادُ التَّالِي 3 أَضْعَافُ السَّابِقِ.- العِدَّةُ السابقةُ كَمَا يَلِي: إنْ كَانَ العِدَّةُ السابقةُ زَوِيَّةً، فَالعِدَّةُ التَّالِيَةُ نِصْفُ- كَمَا يَلِي: ابْدَأْ بِكُلِّ عَدَدٍ سَمِيٍّ نَافِعٍ. ثُمَّ تُحْصَلُ كُلُّ عَطْفٍ مِنْ - تَخْيِيلُ كُولاتزِ تَخْيِيلٌ فِي الْمَعْدِنِ يَتَعَلَّقُ بِتَتَابُعٍ مُعَرَّفٍ- مُعْطَى عَدَدَ كُلٍّ إيجَابِيَّ ن، رُدَّ جَدَلًا مُنَظَّمًا لَهُ الأَعْدَادُ الْعَدِيدَةُ فِي تَتَابُعِ كُلَاتَز.-- >>> get_odd_collatz(5)
-- {1, 5}
local function get_odd_collatz(n)
","local function get_odd_collatz(n)
    local collatz_sequence = {}
    while n ~= 1 do
        if n % 2 == 1 then
            table.insert(collatz_sequence, n)
        end
        if n % 2 == 0 then
            n = n / 2
        else
            n = 3 * n + 1
        end
    end
    table.insert(collatz_sequence, 1)  -- Always add 1 as the sequence ends with 1
    
    -- Remove duplicates and sort the table
    local unique_odds = {}
    for _, num in ipairs(collatz_sequence) do
        unique_odds[num] = true
    end

    local sorted_odds = {}
    for num, _ in pairs(unique_odds) do
        table.insert(sorted_odds, num)
    end
    table.sort(sorted_odds)

    return sorted_odds
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_odd_collatz
    lu.assertEquals(candidate(14), {1, 5, 7, 11, 13, 17})
    lu.assertEquals(candidate(5), {1, 5})
    lu.assertEquals(candidate(12), {1, 3, 5})
    lu.assertEquals(candidate(1), {1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_124,knc_Arab,lua,"يَجِبُ أَنْ يَكُونَ التَّوْمُ فِي صُورَةِ: مَمْ-دَ-مَمْ - 3. الشُّهُورُ لاَ تَكُونُ أَقَلَّ مِنْ 1 وَلاَ أَكْثَرَ مِنْ 12.وَلَا يَكُونُ عَدَدُ الْأَيَّامِ أَقَلَّ مِنْ 1 أَوْ أَكْثَرَ مِنْ 31 يَوْمًا لِشُهُورِ 1,3,5,7,8,10,12. وَلَا يَكُونُ عَدَدُ الْأَيَّامِ أَقَلَّ مِنْ 1 أَوْ أَكْثَرَ مِنْ 30 يَوْمًا لِشُهُورِ 4,6,9,11. وَلَا يَكُونُ عَدَدُ الْأَيَّامِ أَقَلَّ مِنْ 1 أَوْ أَكْثَرَ مِنْ 29 لِشَهْرِ 2.- 1. سِلْسِلَةُ التَّوْمِ لَيْسَتْ فَارِغَةً.- التَّوْمُ صَحِيحٌ إِذَا تَمَّتْ كُلُّ القَوَاعِدِ التَّالِيَةِ:- يَرُدُّ صَحِيحًا إِنْ كَانَ التَّوْمُ صَحِيحًا وَإِلَّا فَكَاذِبًا.- لَكَ أنْ تَكْتُبَ دَلِيْلاً يُصَدِّقُ سِلْسِلَةَ تاريخٍ مَعْطُوْدَةٍ وَ-- >>> valid_date('03-11-2000')
-- true
-- >>> valid_date('15-01-2012')
-- false
-- >>> valid_date('04-0-2040')
-- false
-- >>> valid_date('06-04-2020')
-- true
-- >>> valid_date('06/04/2020')
-- false
local function valid_date(date)
","local function valid_date(date)
    if date == """" then
        return false
    end
    
    local month, day, year = date:match(""^(%d%d)%-(%d%d)%-(%d%d%d%d)$"")
    
    if not month or not day or not year then
        return false
    end
    
    month = tonumber(month)
    day = tonumber(day)
    year = tonumber(year)
    
    if month < 1 or month > 12 then
        return false
    end
    
    local days_in_month = {
        [1] = 31,
        [2] = 29, -- Leap year check not required for this problem
        [3] = 31,
        [4] = 30,
        [5] = 31,
        [6] = 30,
        [7] = 31,
        [8] = 31,
        [9] = 30,
        [10] = 31,
        [11] = 30,
        [12] = 31
    }
    
    if day < 1 or day > days_in_month[month] then
        return false
    end
    
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = valid_date
    lu.assertEquals(candidate('03-11-2000'), true)
    lu.assertEquals(candidate('15-01-2012'), false)
    lu.assertEquals(candidate('04-0-2040'), false)
    lu.assertEquals(candidate('06-04-2020'), true)
    lu.assertEquals(candidate('01-01-2007'), true)
    lu.assertEquals(candidate('03-32-2011'), false)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('04-31-3000'), false)
    lu.assertEquals(candidate('06-06-2005'), true)
    lu.assertEquals(candidate('21-31-2000'), false)
    lu.assertEquals(candidate('04-12-2003'), true)
    lu.assertEquals(candidate('04122003'), false)
    lu.assertEquals(candidate('20030412'), false)
    lu.assertEquals(candidate('2003-04'), false)
    lu.assertEquals(candidate('2003-04-12'), false)
    lu.assertEquals(candidate('04-2003'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_125,knc_Arab,lua,"-مِثَالَاتْ- حروفَ الأبجدية، ord{""a"") = 0، ord{""b"") = 1، ... ord{""z"") = 25 - يَجِبُ أَنْ يَنْقَسِمَ عَلَى الْفُتُوحِ '، إِنْ لَمْ تَكُنْ فُتُوحٌ فَيَجِبُ أَنْ تَرُدَّ عَدَدَ حُرُوفِ الْحُرُوفِ الصَّغِيرَةِ بِالتَّرْتِيبِ الْعَدَدِيِّ فِي - مُعْطَيَةَ سِلْسِلَةِ كَلِمَاتٍ، رُدَّ جَدَلَ كَلِمَاتٍ مُنْقَسِمَةٍ عَلَى فُرُوجٍ، إِنْ لَمْ تَكُنْ فُرُوجٌ فِي النَّصِّ الَّذِي تَرَى-- >>> split_words('Hello world!')
-- {'Hello', 'world!'}
-- >>> split_words('Hello,world!')
-- {'Hello', 'world!'}
-- >>> split_words('abcdef')
-- 3
local function split_words(txt)
","local function split_words(txt)
    -- Check if there is any whitespace to split on
    if txt:find(""%s"") then
        local words = {}
        for word in txt:gmatch(""%S+"") do
            table.insert(words, word)
        end
        return words
    end

    -- Check if there are commas to split on
    if txt:find("","") then
        local words = {}
        for word in txt:gmatch(""([^,]+)"") do
            table.insert(words, word)
        end
        return words
    end

    -- Otherwise, count the number of lowercase letters with odd order
    local count = 0
    for i = 1, #txt do
        local char = txt:sub(i, i)
        local ord = char:byte() - string.byte('a')
        if ord >= 0 and ord <= 25 and ord % 2 == 1 then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = split_words
    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
    lu.assertEquals(candidate('abcdef'), 3)
    lu.assertEquals(candidate('aaabb'), 2)
    lu.assertEquals(candidate('aaaBb'), 1)
    lu.assertEquals(candidate(''), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_126,knc_Arab,lua,"-مِثَالَاتْ- عَدَد، يَرُدّ كَذِبَ. يَتَأَمَّلُونَ لاَ أَعْدَادَ سَلبيَّة وَفَقَطَ أَعْدَادَ كَامِلَة.- في الترتيب الصاعد. إذا كان الجدولَ عِنْدَهُ أكثر مِنْ مُثَنَّى واحدٍ مِنْ نفسِهِ.- مُعْطَى جَدَلِ أَرقَامٍ، يَرْجِعُ أَوْ لا يَنْتَقِمُونَ-- >>> is_sorted({5})
-- true
-- >>> is_sorted({1, 2, 3, 4, 5})
-- true
-- >>> is_sorted({1, 3, 2, 4, 5})
-- false
-- >>> is_sorted({1, 2, 3, 4, 5, 6})
-- true
-- >>> is_sorted({1, 2, 3, 4, 5, 6, 7})
-- true
-- >>> is_sorted({1, 3, 2, 4, 5, 6, 7})
-- false
-- >>> is_sorted({1, 2, 2, 3, 3, 4})
-- true
-- >>> is_sorted({1, 2, 2, 2, 3, 4})
-- false
local function is_sorted(lst)
","local function is_sorted(lst)
    local seen = {}
    for i = 1, #lst - 1 do
        if lst[i] > lst[i + 1] then
            return false
        end
    end

    for _, num in ipairs(lst) do
        if seen[num] then
            seen[num] = seen[num] + 1
            if seen[num] > 2 then
                return false
            end
        else
            seen[num] = 1
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_sorted
    lu.assertEquals(candidate({5}), true)
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)
    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)
    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)
    lu.assertEquals(candidate({}), true)
    lu.assertEquals(candidate({1}), true)
    lu.assertEquals(candidate({3, 2, 1}), false)
    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)
    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)
    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)
    lu.assertEquals(candidate({1, 2, 3, 4}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_127,knc_Arab,lua,"- [دَخَلَ/خَرَجَ] عَيْنَات: - إنْ لَمْ تَتَقاطَعْ الفُصْلَتَانِ، ارْجِعْ ""لا"".- وَإِلاَّ، رُدّ ""لاَ"".- إِنْ كَانَ طُولُ التَّشْتِمَةِ عَدَدًا أَوَّلًا، رُدُّ ""نَعَمْ""- وَطُولُهُ 1 وَلَيْسَ بِعَدَدٍ أَوَّلٍ.-مِثَال، تَقاطِع الْمَسَافاتِ (1, 3), (2, 4) هُوَ (2, 3)- فَسَافَاتُ عَدَدٌ أَوَّلٌ.مَهْمَا تَكُونُ مَسْأَلَتُكَ هِيَ أَنْ تَحْدُثَ مَا بَيْنَ طُولِ تَقاطعِ هذَيْنِ- لِكُلِّ فَصْلٍ مَعْطُوفٍ، يُفترضُ أنّ بدايتهَا أَصْغَرُ أَوْ تَسْتَوِي لنهايتهَا.- يَشْمَلُ بِدَايَتَهُ وَنِهَايَتَهُ.- فَسَاتِينُ مَوْضُوعَة مُغْلَقَة مَعْنَاهَا فَسَاتِينُ (بَدْء، نهاية)حَيْثُ كُلُّ فَاصِلٍ جَوْرٌ مِنَ الأَصْحَابِ.- تُعْطَى فَتْرَتَيْنِ، -- >>> intersection({1, 2}, {2, 3})
-- 'NO'
-- >>> intersection({-1, 1}, {0, 4})
-- 'NO'
-- >>> intersection({-3, -1}, {-5, 5})
-- 'YES'
local function intersection(interval1, interval2)
","local function is_prime(num)
    if num <= 1 then
        return false
    end
    if num <= 3 then
        return true
    end
    if num % 2 == 0 or num % 3 == 0 then
        return false
    end
    for i = 5, math.sqrt(num), 6 do
        if num % i == 0 or num % (i + 2) == 0 then
            return false
        end
    end
    return true
end

local function intersection(interval1, interval2)
    local start1, end1 = interval1[1], interval1[2]
    local start2, end2 = interval2[1], interval2[2]
    
    local intersection_start = math.max(start1, start2)
    local intersection_end = math.min(end1, end2)
    
    if intersection_start > intersection_end then
        return 'NO'
    end
    
    local intersection_length = intersection_end - intersection_start + 1
    
    if is_prime(intersection_length) then
        return 'YES'
    else
        return 'NO'
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = intersection
    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')
    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')
    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')
    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')
    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')
    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')
    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')
    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')
end

os.exit(lu.LuaUnit.run())"
HumanEval_128,knc_Arab,lua,"-مِثَال:- تَعَالَى: عَادَ نِيل لِلْمَسَائِلِ الفارِغَة- كُلّ عَدَد فِي الجَدَل، مُمَثّل بِ 1، -1 أو 0.- جَمْعُ كَبَرَاتِ الأَصْحَابِ المُكَاثِرَة بِجُمْلَةِ العَلاماتِ- تُعْطَى لَكَ جَدَلَةٌ مِنْ أَعْدَادٍ وَيَجِبُ أَنْ تَرْجِعَ-- >>> prod_signs({1, 2, 2, -4})
-- 9
-- >>> prod_signs({0, 1})
-- 0
-- >>> prod_signs({})
-- None
local function prod_signs(arr)
","local function prod_signs(arr)
    if #arr == 0 then
        return nil
    end

    local sum_magnitudes = 0
    local product_signs = 1

    for _, num in ipairs(arr) do
        sum_magnitudes = sum_magnitudes + math.abs(num)
        if num > 0 then
            product_signs = product_signs * 1
        elseif num < 0 then
            product_signs = product_signs * -1
        else
            product_signs = 0
            break
        end
    end

    return sum_magnitudes * product_signs
end","lu = require('luaunit')

function test_humaneval()
local candidate = prod_signs
    lu.assertEquals(candidate({1, 2, 2, -4}), -9)
    lu.assertEquals(candidate({0, 1}), 0)
    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
    lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_129,knc_Arab,lua,"-مِثَالَات:- يَرُدُّ جَدَلَ مُنْتَظَمَ القِيَمِ على الخلايا التي يَمُرُّ بِها الحد الأدنى مِنْ المسارِ.- يُضْمَنُ أَنَّ الجَوَابَ فَرْدٌ.- أَسْتَوْجِبُ = أَسْتَوْجِبُ- كَذَلِكَ lst_A[i] < lst_B[i] وَلِكُلِّ j (1 <= j < i) لَنَا - مِنْ lst_B، بِأَيْنَمَا، هُنَاكَ مُؤَنَّثُ عَدَدٍ سَامٍ i (1 <= i <= k) - بِ (لِنَدْعُهُمَا lst_A و lst_B) ، lst_A أَقَلُّ مِنْ الْمَجَازِيَّةِ- بَعْدَ تَصْوِيرِ الجَدَائِلِ المُنَظَّمَةِ للقِيمَاتِ على الخلايا A و B- مَسِيرَةٌ أَ (مِنْ طُولِ ك) تُعْتَبَرُ أَقَلَّ مِنْ مَسِيرَةٍ ب (مِنْ طُولِ ك) إِذَا-لَا تَسْتَطِيعُ أَنْ تَخْرُجَ مِنَ الشَّبَكَةِ.- مُتَمَيِّزَةٌ بالضرورة).- رُدّي عَلَى أَنّ طَريقَ طُولِ k يَعْنِي زِيَارَةَ k خَلاياً بالضبط (لاَ- خَلَلْ- بِكَلِمَاتٍ أُخَرَ، تَجِدُ خَلاَئِجَ تَشْتَرِكُ حَدَاً مَعَكَ- مِنْ كُلِّ خَلِيَّة، وَفِي كُلِّ خُطْوَة تَتَحَرَّكُ إِلَى كُلِّ خَلِيَّة جَارَة، لَكَ أَنْ تَجِدَ الحَدَّ الأَقَلَ مِنْ طُولِ k فِي الشَّبَكَةِ.- شَمْسَةٌ تَظْهَرُ مَرَّةً فِي خَلاَئِجِ الشَّبَكَةِ.كُلُّ خَلْوَةٍ مِنْ الْكُرْسِيِّ تَحْتَهَا قِيمَةٌ كُلُّ عَدَدٍ كُلُّهُ فِي مَوْضِعِ [1, N * N]- مُعْطَى شُبْكَة بِنُوْرِ الصُفُوفِ و نُوْرِ الْعُمُودِ (ن >= 2) و كُلّيَة إيجَابِيَّة ك،-- >>> minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3)
-- {1, 2, 1}
-- >>> minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1)
-- {1}
local function minPath(grid, k)
","local function minPath(grid, k)
    local N = #grid
    local directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}

    -- Check if a position is within the grid boundaries
    local function inBounds(x, y)
        return x >= 1 and x <= N and y >= 1 and y <= N
    end

    -- DFS to find the minimum path of length k
    local function dfs(x, y, path, visited, result)
        -- Append current cell's value to path
        table.insert(path, grid[x][y])

        if #path == k then
            -- Check if we have a new minimum lexicographical path
            if not result.min or table.concat(path) < table.concat(result.min) then
                result.min = {table.unpack(path)}
            end
        else
            for _, dir in ipairs(directions) do
                local nx, ny = x + dir[1], y + dir[2]
                if inBounds(nx, ny) then
                    dfs(nx, ny, path, visited, result)
                end
            end
        end

        -- Backtrack
        table.remove(path)
    end

    local result = {min = nil}

    -- Start DFS from each cell
    for i = 1, N do
        for j = 1, N do
            dfs(i, j, {}, {}, result)
        end
    end

    return result.min
end","lu = require('luaunit')

function test_humaneval()
local candidate = minPath
    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), {1, 2, 1})
    lu.assertEquals(candidate({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1), {1})
    lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4), {1, 2, 1, 2})
    lu.assertEquals(candidate({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7), {1, 10, 1, 10, 1, 10, 1})
    lu.assertEquals(candidate({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5), {1, 7, 1, 7, 1})
    lu.assertEquals(candidate({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9), {1, 6, 1, 6, 1, 6, 1, 6, 1})
    lu.assertEquals(candidate({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12), {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6})
    lu.assertEquals(candidate({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8), {1, 3, 1, 3, 1, 3, 1, 3})
    lu.assertEquals(candidate({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8), {1, 5, 1, 5, 1, 5, 1, 5})
    lu.assertEquals(candidate({{1, 2}, {3, 4}}, 10), {1, 2, 1, 2, 1, 2, 1, 2, 1, 2})
    lu.assertEquals(candidate({{1, 3}, {3, 2}}, 10), {1, 3, 1, 3, 1, 3, 1, 3, 1, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_130,knc_Arab,lua,"-مِثَالَات:- أَوَّلَ أَنْ + 1 أَرْقَامِ تَتْبِعَةِ تَرْبُونَكْيتَعْطَى عَدَدَ كُلٍّ غَيْرِ سَالبِيٍّ ن، لَكَ أَنْ تَرُدَّ جَدَلَ مِنْ- = 2 + 3 + 3 = 8  تَنْبِيهُ- تِرِيَيْنْ (3) = تِرِيَيْنْ (2) + تِرِيَيْنْ (1) + تِرِيَيْنْ (4) - تِرِيْتِيْنْ 4) = 3 - تِرِيَاَتَيَاَ = 1 + (2 / 2) = 2 - مَثَلاً:- تِرْنَ = تِرْنَ - 1) + تِرْنَ - 2) + تِرْنَ + 1) ، إذا كان n فَرْدَا.- تِرْيَانْ نَ = 1 + ن / 2، إذا ن مَزِيدْ.- تِرِيَيَنَ (1) = 3 تَسلسلَ تَربوناكي يَتَعَرَّف بِتَكرارِ:وَلَكِنْ مَا لا يَعْرِفُهُ النَّاسُ هُوَ تَتْبِيعُ تَرْبُونَكْي- كُلّ وَاحِد يَعْرِفُ تَسلُم فِبُونَاتْشي، تَدَرَّسَ بعَمِيقة مِن قِبلَ علماءَ الرياضيات في -- >>> tri(3)
-- {1, 3, 2, 8}
local function tri(n)
","local function tri(n)
    local sequence = {}
    
    -- Handle the first element separately
    sequence[1] = 3

    for i = 2, n + 1 do
        if i % 2 == 0 then
            sequence[i] = 1 + i / 2
        else
            sequence[i] = (i - 1 <= 0 and 0 or sequence[i - 1]) +
                          (i - 2 <= 0 and 0 or sequence[i - 2]) +
                          (i + 1 > n + 1 and 0 or sequence[i + 1])
        end
    end
    
    return sequence
end","lu = require('luaunit')

function test_humaneval()
local candidate = tri
    lu.assertEquals(candidate(3), {1, 3, 2, 8})
    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})
    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})
    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})
    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})
    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3, 15, 4, 24, 5})
    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35})
    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})
    lu.assertEquals(candidate(0), {1})
    lu.assertEquals(candidate(1), {1, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_131,knc_Arab,lua,"- مَثَلاً:- عُودْ 0 إذا كُلّ الأرقامَ زَوَائِجْ.- مُعْطَى عَدَدَ كُلٍّ مُوجِبَ n، ارْجِعْ بِضَرْبِ الأَرْجُلِ الغَرِيبَةِ.-- >>> digits(1)
-- 1
-- >>> digits(4)
-- 0
-- >>> digits(235)
-- 15
local function digits(n)
","local function digits(n)
    local product = 1
    local hasOdd = false
    
    while n > 0 do
        local digit = n % 10
        if digit % 2 == 1 then
            product = product * digit
            hasOdd = true
        end
        n = math.floor(n / 10)
    end
    
    return hasOdd and product or 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = digits
    lu.assertEquals(candidate(5), 5)
    lu.assertEquals(candidate(54), 5)
    lu.assertEquals(candidate(120), 1)
    lu.assertEquals(candidate(5014), 5)
    lu.assertEquals(candidate(98765), 315)
    lu.assertEquals(candidate(5576543), 2625)
    lu.assertEquals(candidate(2468), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_132,knc_Arab,lua,"- حَيْثُ كَانَ قِسْمٌ وَاحِدٌ مِنَ الْمُتَعَدِّدِ مُتَعَدِّدٌ.- تَجِبُ الوَظِيفَةُ تَرُدُّ صَحِيحًا إِنْ وَإِنْسَانًا إِنْ كَانَ ثَابِتًا تَتْبِعَةُ قُفَّيْنِ - تَخْلُقُ دَلِيلَةً تَتَّخِذُ سِلْسِلَةً كَدَخْلٍ تَتَضَمَّنُ قُرَائِنَ مُرَبَّعَةٍ.-- >>> is_nested('[[]]')
-- true
-- >>> is_nested('[]]]]]]][[[[[]')
-- false
-- >>> is_nested('[][]')
-- false
-- >>> is_nested('[]')
-- false
-- >>> is_nested('[[][]]')
-- true
-- >>> is_nested('[[]][[')
-- true
local function is_nested(string)
","local function is_nested(brackets)
    local stack = {}
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == '[' then
            table.insert(stack, char)
        elseif char == ']' then
            if #stack > 0 and stack[#stack] == '[' then
                table.remove(stack)
                if #stack > 0 then
                    -- Found at least one nested bracket
                    return true
                end
            else
                -- Mismatched bracket
                return false
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_nested
    lu.assertEquals(candidate('[[]]'), true)
    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)
    lu.assertEquals(candidate('[][]'), false)
    lu.assertEquals(candidate('[]'), false)
    lu.assertEquals(candidate('[[[[]]]]'), true)
    lu.assertEquals(candidate('[]]]]]]]]]]'), false)
    lu.assertEquals(candidate('[][][[]]'), true)
    lu.assertEquals(candidate('[[]'), false)
    lu.assertEquals(candidate('[]]'), false)
    lu.assertEquals(candidate('[[]][['), true)
    lu.assertEquals(candidate('[[][]]'), true)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('[[[[[[[['), false)
    lu.assertEquals(candidate(']]]]]]]]'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_133,knc_Arab,lua,"-مِثَالَات:- يَقْرُبُ كُلُّ عَنْصَرٍ مِنَ الجدولِ إِلَى العُلُوِّ الأَعْلَىتَحْتَاجُ أَنْ تَرُدَّ جُمْلَةَ الرُّتَبِ الرَّابِعَةِ فِي الْجَدْلِ الْمَوْضُوعِ،- تُعْطَى لَكَ جَدَلَ أَرقَامٍ.-- >>> lst({1.0, 2.0, 3.0})
-- 14
-- >>> lst({1.0, 4.0, 9.0})
-- 98
-- >>> lst({1.0, 3.0, 5.0, 7.0})
-- 84
-- >>> lst({1.4, 4.2, 0.0})
-- 29
-- >>> lst({-2.4, 1.0, 1.0})
-- 6
local function sum_squares(lst)
","local function sum_squares(lst)
    local sum = 0
    for _, num in ipairs(lst) do
        local ceil_num = math.ceil(num)
        sum = sum + (ceil_num * ceil_num)
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_squares
    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)
    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)
    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)
    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)
    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)
    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)
    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)
    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)
    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)
    lu.assertEquals(candidate({0.0}), 0)
    lu.assertEquals(candidate({-1.0}), 1)
    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_134,knc_Arab,lua,"-مِثَالَات:- تَعْلِيقَة: ""كَلِمَة"" عَنْ جَمْعِ حُرُوفٍ مُفَارَقَة بِفَرْضٍ.- جُزْءُ كَلِمَةٍ، وَكَذِبٌ إِلَّا.- مِنْ سِلْسِلَةٍ مَعْطُوفَةٍ حَرْفٌ أَلْفَاظِيٌّ وَلَيْسَ - خَلِقْ دَلِيلَ يَرُدُّ صَحِيحَاً إِنْ كَانَ آخِرُ حَرْفٍ -- >>> check_if_last_char_is_a_letter('apple pie')
-- false
-- >>> check_if_last_char_is_a_letter('apple pi e')
-- true
-- >>> check_if_last_char_is_a_letter('apple pi e ')
-- false
-- >>> check_if_last_char_is_a_letter('')
-- false
local function check_if_last_char_is_a_letter(txt)
","local function check_if_last_char_is_a_letter(txt)
    -- Remove trailing spaces
    txt = txt:match(""^(.-)%s*$"")
    -- Check if the string is empty after trimming spaces
    if #txt == 0 then
        return false
    end
    -- Get the last character of the string
    local lastChar = txt:sub(-1)
    -- Check if the last character is an alphabet and not part of a word
    return lastChar:match(""%a"") and not txt:match(""%s%a*$"")
end","lu = require('luaunit')

function test_humaneval()
local candidate = check_if_last_char_is_a_letter
    lu.assertEquals(candidate('apple'), false)
    lu.assertEquals(candidate('apple pi e'), true)
    lu.assertEquals(candidate('eeeee'), false)
    lu.assertEquals(candidate('A'), true)
    lu.assertEquals(candidate('Pumpkin pie '), false)
    lu.assertEquals(candidate('Pumpkin pie 1'), false)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('eeeee e '), false)
    lu.assertEquals(candidate('apple pie'), false)
    lu.assertEquals(candidate('apple pi e '), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_135,knc_Arab,lua,"-مِثَالَات:- أَقْيَاسٌ مُتَوَاثِرَةٌ- لاَ يَكُونُ هَذَا العَنْصَرُ فَيَرْجِعُ -1.- لَيْسَ أَكْبَرَ مِنْ أَوْ يَسْتَوِي لِلْعَنْصُورِ الْمُتَقَدِّمِ- تَخْلُقُ دَلِيلَةً تَرُدُّ أَكْبَرَ فَهْمِ عَنْصَرٍ-- >>> can_arrange({1, 2, 4, 3, 5})
-- 3
-- >>> can_arrange({1, 2, 3})
-- -1
local function can_arrange(arr)
","local function can_arrange(arr)
    for i = #arr, 2, -1 do
        if arr[i] < arr[i - 1] then
            return i
        end
    end
    return -1
end","lu = require('luaunit')

function test_humaneval()
local candidate = can_arrange
    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)
    lu.assertEquals(candidate({1, 2, 4, 5}), -1)
    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}), 2)
    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)
    lu.assertEquals(candidate({}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_136,knc_Arab,lua,"-مِثَالَات:- إِنْ لَمْ يَكُنْ سِوَى أَوْ إِضَافِيَةٌ، رُدُّوهَا نِيلَةً.- مِنْ أَصْحَابِ الْجَمِيلِ الْمُوجِبِينَ- أَكْبَرُ مِنْ أَسْبَابِ الْكُلِّيَّاتِ، وَ ""ب"" أَصْغَرُ - تَخْلُقُ دَالَةً تَرُدُّ جَدَدَ (أ، ب) ، حَيْثُ "" أ "" هُوَ-- >>> largest_smallest_integers({2, 4, 1, 3, 5, 7})
-- {None, 1}
-- >>> largest_smallest_integers({})
-- {None, None}
-- >>> largest_smallest_integers({0})
-- {None, None}
local function largest_smallest_integers(lst)
","local function largest_smallest_integers(lst)
    local max_negative = nil
    local min_positive = nil

    for _, num in ipairs(lst) do
        if num < 0 then
            if max_negative == nil or num > max_negative then
                max_negative = num
            end
        elseif num > 0 then
            if min_positive == nil or num < min_positive then
                min_positive = num
            end
        end
    end

    return {max_negative, min_positive}
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_smallest_integers
    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})
    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7, 0}), {None, 1})
    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, -2}), {-2, 1})
    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7, 2})
    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})
    lu.assertEquals(candidate({}), {None, None})
    lu.assertEquals(candidate({0}), {None, None})
    lu.assertEquals(candidate({-1, -3, -5, -6}), {-1, None})
    lu.assertEquals(candidate({-1, -3, -5, -6, 0}), {-1, None})
    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})
    lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_137,knc_Arab,lua,"- تَعْلِيق: إِنْ رُمِّيَ عَدَدٌ فَعَلَى حَرْفِ، فَالْعَطْفُ الْمُتَغَيِّرُ يَكُونُ . أَو , - ارْجِعْ نِيلْ إِنْ كَانَتْ القِيمَاتْ مِثْلَ- أَحْدَثَ أَحْدَثَ أَحْدَثَ أَحْدَثَ أَحْدَثَ أَحْدَثَ أَحْدَثَ أَحْدَثَ- تَخْلُقُ دَلِيلَةً تَتَّخِذُ أَعْدَادَ كُلٍّ، أَوْ أَسْلَاسَ تَمْثِيلَةً لِـ-- >>> compare_one(1, 2.5)
-- 2.5
-- >>> compare_one(1, '2,3')
-- '2,3'
-- >>> compare_one('5,1', '6')
-- '6'
-- >>> compare_one('1', 1)
-- None
local function compare_one(a, b)
","local function to_real_number(val)
    if type(val) == ""string"" then
        val = val:gsub("","", ""."")
        return tonumber(val)
    end
    return val
end

local function compare_one(a, b)
    local a_type = type(a)
    local b_type = type(b)
    
    if a_type == b_type then
        if a == b then
            return nil
        end
        return a > b and a or b
    else
        local a_real = to_real_number(a)
        local b_real = to_real_number(b)
        
        if a_real == b_real then
            return nil
        end
        return a_real > b_real and a or b
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = compare_one
    lu.assertEquals(candidate(1, 2), 2)
    lu.assertEquals(candidate(1, 2.5), 2.5)
    lu.assertEquals(candidate(2, 3), 3)
    lu.assertEquals(candidate(5, 6), 6)
    lu.assertEquals(candidate(1, '2,3'), '2,3')
    lu.assertEquals(candidate('5,1', '6'), '6')
    lu.assertEquals(candidate('1', '2'), '2')
    lu.assertEquals(candidate('1', 1), None)
end

os.exit(lu.LuaUnit.run())"
HumanEval_138,knc_Arab,lua,"- مَثَلْ- تَقَوَّمْ هَلْ يُمْكِنُ أَنْ يُكْتَبَ الرَّقْمُ n جُمْلَةَ 4 أَصْوَاتٍ مُوجِبَةٍ مُجَرَّدَةٍ-- >>> is_equal_to_sum_even(4)
-- false
-- >>> is_equal_to_sum_even(6)
-- false
-- >>> is_equal_to_sum_even(8)
-- true
local function is_equal_to_sum_even(n)
","local function is_equal_to_sum_even(n)
    -- Check if n can be expressed as the sum of 4 positive even numbers
    -- which means n should at least be 8 (2 + 2 + 2 + 2) and n should be even.
    if n >= 8 and n % 2 == 0 then
        return true
    else
        return false
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_equal_to_sum_even
    lu.assertEquals(candidate(4), false)
    lu.assertEquals(candidate(6), false)
    lu.assertEquals(candidate(8), true)
    lu.assertEquals(candidate(10), true)
    lu.assertEquals(candidate(11), false)
    lu.assertEquals(candidate(12), true)
    lu.assertEquals(candidate(13), false)
    lu.assertEquals(candidate(16), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_139,knc_Arab,lua,"- مَثَلاً:- حَيْثُ n > 0 - برازيلي_فاكتوريالي ((ن) = ن! * (ن-1)! * (ن-2)! * ... * 1! - العامل البرازيلي مُعَرَّفٌ كَمَا يَلِي:-- >>> special_factorial(4)
-- 288
-- The function will receive an integer as input and should return the special
-- factorial of this integer.
local function special_factorial(n)
","local function factorial(m)
    if m == 0 then
        return 1
    else
        return m * factorial(m - 1)
    end
end

local function special_factorial(n)
    local result = 1
    for i = 1, n do
        result = result * factorial(i)
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = special_factorial
    lu.assertEquals(candidate(4), 288)
    lu.assertEquals(candidate(5), 34560)
    lu.assertEquals(candidate(7), 125411328000)
    lu.assertEquals(candidate(1), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_140,knc_Arab,lua,"- ثُمَّ أَبْدِلْ كُلَّ الْمَسَافِرِ التَّتَابِعَةِ بِـ - - وَإِنْ كَانَتْ سِلْسِلَةٌ لَهَا أَكْثَرُ مِنْ بَيَانَيْنِ مُتَتَابِعَيْنِ،- مَنْطُوقٌ مِنْ النَّصِّ، فَاحْلُلْ كُلَّ الْفُرُوجِ بِالْخَفِيفَاتِ،-- >>> fix_spaces(' Example')
-- 'Example'
-- >>> fix_spaces(' Example 1')
-- 'Example_1'
-- >>> fix_spaces(' Example 2')
-- '_Example_2'
-- >>> fix_spaces(' Example 3')
-- '_Example-3'
local function fix_spaces(text)
","local function fix_spaces(text)
    -- Trim leading and trailing spaces
    text = text:match(""^%s*(.-)%s*$"")
    
    -- Replace more than 2 consecutive spaces with '-'
    text = text:gsub(""%s%s%s+"", ""-"")
    
    -- Replace single spaces and double spaces with underscores
    text = text:gsub(""%s"", ""_"")
    
    return text
end","lu = require('luaunit')

function test_humaneval()
local candidate = fix_spaces
    lu.assertEquals(candidate('Example'), 'Example')
    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')
    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')
    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')
    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')
end

os.exit(lu.LuaUnit.run())"
HumanEval_141,knc_Arab,lua,"-مِثَالَات:- - سَبْتَرْنْدْ بَعْدْ النُّقْطَة يَجِبْ أَنْ يَكُونْ وَاحِدْ مِنْ هَذِهِ: ['تَكْتُبْ', 'إكْيِسْ', 'دَلْ'] - حَرْفُ اللَّاتِينِيَّةِ (أ-ز و أ-ز) ].- - سُلْطَةُ الْمُتَقَدِّمَةُ قَبْلَ النُّقْطَةِ لاَ تَجِبُ أَنْ تَكُونَ فَارِغَةً، وَتَبْدَأُ بِحَرْفِ - - مَسْمُ المَلف يَحتوي بالضبط a نقطة واحدة '.'- - لاَ يَجِبُ أَكْثَرُ مِنْ ثَلاثَةِ أَرْكَانٍ ('0'-'9') فِي اسْمِ الملف.- تُلبَى:- يُعْتَبَرُ اسْمُ مَسْجِلٍ صَحِيحًا إِنْ وَإِنْ سَمَّى كُلَّ الشُّرُوطِ التَّالِيَةِ - ""نَعَمْ"" إنْ كَانَ اسْمُ الملف صحيحاً، وَيَرُدُّ ""لا"" إنْ كَانَ غير ذلك.- تَخْلُقُ دَلِيْلَةً تَأْخُذُ سِلْسِلَةً تَمْثُلُ اسْمَ مَسْجِدٍ، وَتَرُدُّ -- >>> file_name_check('example.txt')
-- 'Yes'
-- >>> file_name_check('1example.dll')
-- 'No'
local function file_name_check(file_name)
","local function file_name_check(file_name)
    -- Check exactly one dot in the file name
    local dot_pos = file_name:find(""%."")
    if not dot_pos or dot_pos ~= file_name:find(""%."", dot_pos + 1) then
        return 'No'
    end
    
    -- Split the name into prefix and suffix
    local prefix = file_name:sub(1, dot_pos - 1)
    local suffix = file_name:sub(dot_pos + 1)

    -- Check if suffix is valid
    local valid_suffixes = { txt = true, exe = true, dll = true }
    if not valid_suffixes[suffix] then
        return 'No'
    end

    -- Check prefix is not empty and starts with a letter
    if #prefix == 0 or not prefix:match(""^[a-zA-Z]"") then
        return 'No'
    end

    -- Check that prefix has no more than 3 digits
    local digit_count = 0
    for i = 1, #prefix do
        if prefix:sub(i, i):match(""%d"") then
            digit_count = digit_count + 1
            if digit_count > 3 then
                return 'No'
            end
        end
    end

    return 'Yes'
end","lu = require('luaunit')

function test_humaneval()
local candidate = file_name_check
    lu.assertEquals(candidate('example.txt'), 'Yes')
    lu.assertEquals(candidate('1example.dll'), 'No')
    lu.assertEquals(candidate('s1sdf3.asd'), 'No')
    lu.assertEquals(candidate('K.dll'), 'Yes')
    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')
    lu.assertEquals(candidate('His12FILE94.exe'), 'No')
    lu.assertEquals(candidate('_Y.txt'), 'No')
    lu.assertEquals(candidate('?aREYA.exe'), 'No')
    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')
    lu.assertEquals(candidate('this_is_valid.wow'), 'No')
    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')
    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')
    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')
    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')
    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')
    lu.assertEquals(candidate('all.exe.txt'), 'No')
    lu.assertEquals(candidate('I563_No.exe'), 'Yes')
    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')
    lu.assertEquals(candidate('no_one#knows.dll'), 'Yes')
    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')
    lu.assertEquals(candidate('I563_Yes3.txtt'), 'No')
    lu.assertEquals(candidate('final..txt'), 'No')
    lu.assertEquals(candidate('final132'), 'No')
    lu.assertEquals(candidate('_f4indsartal132.'), 'No')
    lu.assertEquals(candidate('.txt'), 'No')
    lu.assertEquals(candidate('s.'), 'No')
end

os.exit(lu.LuaUnit.run())"
HumanEval_142,knc_Arab,lua,"-مِثَالَات:- تَغْيِيرُ الإِدْخَالَاتِ فِي الجَدَلِ الَّتِي مَعَدَدُهَا لَيْسَ بِكَثِيرٍ مِنْ 3 أَوْ 4. تَرُدُّ الدَّالُ جُمْلَةَ كُلِّ الإِدْخَالَاتِ.- كَثِيرُ مِنْ 3 وَسَيَكُونُ كَثِيرَ الْمُدْخَلِ الصَّحِيحِ إِذَا كَانَ مُؤَوَّلُهُ كَثِيرًا مِنْ 4 وَلَيْسَ كَثِيرًا مِنْ 3.- هَذِهِ الْمَدِينَةُ تَأْخُذُ جَدَلَ أَعْدَادٍ. لِكُلِّ إِدْخَالٍ فِي الْجَدَلِ، تَرْتَبِعُ الْمَدِينَةُ إِدْخَالَ الْعَدَدِ الْكَامِلِ إِذَا كَانَ مُؤَلَّفُهَا عَلَى - "" -- >>> lst
-- {1, 2, 3}
-- >>> lst
-- {}
-- >>> lst
-- {-1, -5, 2, -1, -5}
local function sum_squares(lst)
","local function sum_squares(lst)
    local sum = 0
    for i, v in ipairs(lst) do
        if i % 3 == 0 then
            sum = sum + v^2
        elseif i % 4 == 0 then
            sum = sum + v^3
        else
            sum = sum + v
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_squares
    lu.assertEquals(candidate({1, 2, 3}), 6)
    lu.assertEquals(candidate({1, 4, 9}), 14)
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({1, 1, 1, 1, 1, 1, 1, 1, 1}), 9)
    lu.assertEquals(candidate({-1, -1, -1, -1, -1, -1, -1, -1, -1}), -3)
    lu.assertEquals(candidate({0}), 0)
    lu.assertEquals(candidate({-1, -5, 2, -1, -5}), -126)
    lu.assertEquals(candidate({-56, -99, 1, 0, -2}), 3030)
    lu.assertEquals(candidate({-1, 0, 0, 0, 0, 0, 0, 0, -1}), 0)
    lu.assertEquals(candidate({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), -14196)
    lu.assertEquals(candidate({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), -1448)
end

os.exit(lu.LuaUnit.run())"
HumanEval_143,knc_Arab,lua,"- مِثَالُ 1:- يَجِبُ أَنْ يَكُونَ تَرْتِيبُ الكَلِمَاتِ فِي السِّلْسِلَةِ الجديدةِ كَالأُولَى.- مَنْ طُولُهُ أَعْدَادٌ أَوَّلُونَ،وَعَلَيْكَ أَنْ تَرُدَّ سِلْسِلَةً تَتَضَمَّنُ كَلِمَاتِ الجُمْلَةِ الأُولَى،- الجُمْلَةُ تَتَضَمَّنُ كَلِمَاتٍ مُفَرَّقَةً بِبَيَانٍ، - تُعْطَى سِلْسِلَةٌ تَمْثِلُ جُمْلَةً، -- >>> words_in_sentence('This is a test')
-- 'is'
-- Example 2:
-- >>> words_in_sentence('lets go for swimming')
-- 'go for'
-- Constraints:
--     * 1 <= len(sentence) <= 100
--     * sentence contains only letters
local function words_in_sentence(sentence)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    for i = 5, math.floor(math.sqrt(n)), 6 do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
    end
    return true
end

local function words_in_sentence(sentence)
    local words = {}
    for word in sentence:gmatch(""%S+"") do
        table.insert(words, word)
    end
    
    local result = {}
    for _, word in ipairs(words) do
        if is_prime(#word) then
            table.insert(result, word)
        end
    end
    
    return table.concat(result, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = words_in_sentence
    lu.assertEquals(candidate('This is a test'), 'is')
    lu.assertEquals(candidate('lets go for swimming'), 'go for')
    lu.assertEquals(candidate('there is no place available here'), 'there is no place')
    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
    lu.assertEquals(candidate('go for it'), 'go for it')
    lu.assertEquals(candidate('here'), '')
    lu.assertEquals(candidate('here is'), 'is')
end

os.exit(lu.LuaUnit.run())"
HumanEval_144,knc_Arab,lua,"- تَجُوزُ أَنْ تَتَأَمَّلَ أَنَّ x و n كَسَرَاتٌ صَحِيحَةٌ، وَلَيْسَ لَهُمَا الصِّفَرُ كَالمُسَمِّي.- <مُجَدِّد>/<مُسَمَّى> حَيْثُ كِلاَ الْمُجَدِّدُ وَالْمُسَمَّى عَدَدَانِ كُلَّاهُمَا إيجَابِيَّانِ.كِلاَ x و n، وَهُمَا تَمْثِيلَاتُ كَسْرٍ، وَلَهُمَا التَّصْوِيرُ التَّالِي،- x * n. تَرُدُّ الصَّدَقَةَ إِذَا تَقَدَّمَتْ x * n إِلَى عَدَدٍ كَامِلٍ وَكَذِبَةٍ - مَهمَتُكَ تَنفيذُ دَالةٍ تُبَسِّطُ التَعبيرَ -- >>> simplify('1/5', '5/1')
-- true
-- >>> simplify('1/6', '2/1')
-- false
-- >>> simplify('7/10', '10/2')
-- false
local function simplify(x, n)
","local function simplify(x, n)
    local function parseFraction(frac)
        local num, denom = frac:match(""(%d+)/(%d+)"")
        return tonumber(num), tonumber(denom)
    end

    local xn, xd = parseFraction(x)
    local nn, nd = parseFraction(n)

    local resultNumerator = xn * nn
    local resultDenominator = xd * nd

    return resultNumerator % resultDenominator == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = simplify
    lu.assertEquals(candidate('1/5', '5/1'), true)
    lu.assertEquals(candidate('1/6', '2/1'), false)
    lu.assertEquals(candidate('5/1', '3/1'), true)
    lu.assertEquals(candidate('7/10', '10/2'), false)
    lu.assertEquals(candidate('2/10', '50/10'), true)
    lu.assertEquals(candidate('7/2', '4/2'), true)
    lu.assertEquals(candidate('11/6', '6/1'), true)
    lu.assertEquals(candidate('2/3', '5/2'), false)
    lu.assertEquals(candidate('5/2', '3/5'), false)
    lu.assertEquals(candidate('2/4', '8/4'), true)
    lu.assertEquals(candidate('2/4', '4/2'), true)
    lu.assertEquals(candidate('1/5', '5/1'), true)
    lu.assertEquals(candidate('1/5', '1/5'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_145,knc_Arab,lua,"- مَثَلاً:- يُنَظِّمُهُمْ بِنَاءً عَلَى فَصْلِهِمْ فِي الصَّفِّ الْأَصْلِيِّ.- تَعَلَّقَ: إنْ كَانَتْ بِكَثِيرَةٍ مِنْ أَنْوَاعٍ مِثْلِيَّةٍ،- فِي تَرْتِيبِ صَاعِدٍ بِحَسَبِ جُمْلَةِ أَرْبَابِهِمْ.- اُكْتُبْ دَلِيْلَ يُنَظِّمُ جَدَلَ الأَصْحَابِ-- >>> order_by_points({1, 11, -1, -11, -12})
-- {-1, -11, 1, -12, 11}
-- >>> order_by_points({})
-- {}
local function order_by_points(nums)
","local function order_by_points(nums)
    local function digit_sum(num)
        local sum = 0
        num = math.abs(num)
        while num > 0 do
            sum = sum + (num % 10)
            num = math.floor(num / 10)
        end
        return sum
    end

    table.sort(nums, function(a, b)
        local sum_a = digit_sum(a)
        local sum_b = digit_sum(b)
        if sum_a == sum_b then
            -- Preserve original order if digit sums are equal
            return false
        else
            return sum_a < sum_b
        end
    end)

    return nums
end","lu = require('luaunit')

function test_humaneval()
local candidate = order_by_points
    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
end

os.exit(lu.LuaUnit.run())"
HumanEval_146,knc_Arab,lua,"- مَثَلاً:- أَوَّلُ وَآخِرُ أَلْفَاظِ عَدَدٍ فُرَادِيَّةٌ (1, 3, 5, 7, 9).- عَدَدَ العَنَوَاتِ في الجَدَلِ الَّتي هِيَ اكْثَرُ مِنْ 10 وَكِلاهُمَا - اِكْتُبْ دَلِيْلَة تَأْخُذُ جَدَلَ أَرقَامٍ كَدَخَلٍ وَتَعُودُ-- >>> specialFilter({15, -73, 14, -15})
-- 1
-- >>> specialFilter({33, -2, -3, 45, 21, 109})
-- 2
local function specialFilter(nums)
","local function isOddDigit(num)
    local digit = num % 10
    return digit % 2 == 1
end

local function specialFilter(nums)
    local count = 0
    for _, num in ipairs(nums) do
        local absNum = math.abs(num)
        if absNum > 10 then
            local firstDigit = tonumber(tostring(absNum):sub(1, 1))
            local lastDigit = absNum % 10
            if isOddDigit(firstDigit) and isOddDigit(lastDigit) then
                count = count + 1
            end
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = specialFilter
    lu.assertEquals(candidate({5, -2, 1, -5}), 0)
    lu.assertEquals(candidate({15, -73, 14, -15}), 1)
    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)
    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)
    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)
    lu.assertEquals(candidate({1}), 0)
    lu.assertEquals(candidate({}), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_147,knc_Arab,lua,"- مَثَلٌ:- وَأَيْ + جَ + كَ ضِعْفُ ثَلَاثٍ.- يَرُدُّ عَدَدَ الثَّلاثَاتِ (a[i], a[j], a[k]) مِنْ a حَيْثُ i < j < k, لِكُلِّ i (1 ≤ i ≤ n) ، قِيمَةَ a[i] = i * i - i + 1.تَعْطَى عَدَدَاً كَامِلاً مُوجِبَاً ن. لَكَ أن تَصْنَعَ جَدَلَ عَدَدٍ كَامِلاً أ مِنْ طُولِ ن.--     >>> get_max_triples(5)
--     1
-- Explanation: 
-- a = [1, 3, 7, 13, 21]
-- The only valid triple is (1, 7, 13).
local function get_max_triples(n)
","local function get_max_triples(n)
    local a = {}
    for i = 1, n do
        a[i] = i * i - i + 1
    end

    local count = 0
    for i = 1, n - 2 do
        for j = i + 1, n - 1 do
            for k = j + 1, n do
                if (a[i] + a[j] + a[k]) % 3 == 0 then
                    count = count + 1
                end
            end
        end
    end

    return count
end

-- Example Usage:
-- print(get_max_triples(5)) -- Output: 1","lu = require('luaunit')

function test_humaneval()
local candidate = get_max_triples
    lu.assertEquals(candidate(5), 1)
    lu.assertEquals(candidate(6), 4)
    lu.assertEquals(candidate(10), 36)
    lu.assertEquals(candidate(100), 53361)
end

os.exit(lu.LuaUnit.run())"
HumanEval_148,knc_Arab,lua,"-مِثَالَاتْ-لَيْسَتْ أسْمَاءَ كَواكب صحيحة.- تَجِبُ الوَظِيفَةُ تَرُدُّ جَدَلًا فَارِغًا إِنْ كَانَ كَوْكَبًا1 أَو كَوْكَبًا2- قُرْبَةَ الشَّمْسِ.- يَكُونُ بَيْنَ مَدارِ كَوكَبِي وَمَدارِ كَوكَبِي، مُنْتَقَطٌ بِ- تَجِبُ الوَظِيفَةُ أَنْ تَرُدَّ جَدَلًا يَتَضَمَّنُ كُلَّ الكَوَاكِبِ الَّتِي مَدارَاتُهَا- اُكْتُبْ دَلِيْلَةً تَتَأَخَّذُ اسْمَيْ كَوْكَبَيْنِ كَسِلَالَيْ كَوْكَبِ1 وَكَوْكَبِ2.- أُورَانُسُ، نَبْطُونُ.- هُوَ زَهْرُوبُ، وَالْآخَرُ هُوَ الْفِنُوسُ، ثُمَّ الْأَرْضُ، مَارِسُ، جُوبِيْتُرُ، زَوْرَبُ،- هُنَاكَ ثَمَانُ كَواكبٍ في نظامِنا الشمسي: الأقربُ إلى الشمسِ-- >>> bf('Jupiter', 'Neptune')
-- {'Saturn', 'Uranus'}
-- >>> bf('Earth', 'Mercury')
-- 'Venus'
-- >>> bf('Mercury', 'Uranus')
-- {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'}
local function bf(planet1, planet2)
","local function bf(planet1, planet2)
    local planets = {
        ""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""
    }
    
    local planet_index = {}
    for i, planet in ipairs(planets) do
        planet_index[planet] = i
    end
    
    local index1 = planet_index[planet1]
    local index2 = planet_index[planet2]
    
    if not index1 or not index2 then
        return {}
    end
    
    local start_index = math.min(index1, index2) + 1
    local end_index = math.max(index1, index2) - 1
    
    local result = {}
    for i = start_index, end_index do
        table.insert(result, planets[i])
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = bf
    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})
    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})
    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})
    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})
    lu.assertEquals(candidate('Earth', 'Earth'), {})
    lu.assertEquals(candidate('Mars', 'Earth'), {})
    lu.assertEquals(candidate('Jupiter', 'Makemake'), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_149,knc_Arab,lua,"- مَثَلاً:- تَجِبُ أَنْ تَتَوَهَّمَ أَنَّ كُلَّ كَلِمَاتٍ سَتَكُونُ بِمِثْلِ الطُّولِ.- تَجِبُ أَنْ تَرُدَّ الْمُدَّةَ جَدَلَ سُلُوبٍ مُنَظَّمَةً.-إِنْ كَانَ لِكَلِمَتَيْنِ طُولُهُمَا مُتَسَاوِي، فَأَلْفِفِي الْجَدَلَ.- يَجِبُ أَنْ يَرْجِعَ الجدولَ مُنْتَقِمًا بِهَذِهِ القاعدة.-مَنْزِلَةُ الجَدَلِ تَكُونُ مُتَصَاعِدَةً بِطُولِ كُلِّ كَلِمَةٍ، وَأَنْتَوَقَدْ يَتَضَمَّنُ مُسَاوِيَاتٍ.- الطَّابِقُ دَائِمًا طَابِقُ أَوْتَارٍ وَلَا طَابِقُ أَرْقَامٍ،وَيَرُدُّ الجَدَلَ النَّاتِجَ بِتَرْتِيبٍ مُنْتَقَبٍ،يَحْذِفُ السِّلَالَ الَّتِي لَهَا أَطْوَالٌ فُرَادِيَّةٌ مِنْهُ،- اُكْتُبْ دَلِيْلَةً تَقْبَلُ جَدَلَ سِلَالٍ كَمُعَايَنَةٍ، -- >>> list_sort({'aa', 'a', 'aaa'})
-- {'aa'}
-- >>> list_sort({'ab', 'a', 'aaa', 'cd'})
-- {'ab', 'cd'}
local function sorted_list_sum(lst)
","local function list_sort(tbl)
    local function is_even_length(s)
        return #s % 2 == 0
    end

    local function compare_strings(a, b)
        if #a == #b then
            return a < b
        else
            return #a < #b
        end
    end

    local result = {}
    for _, v in ipairs(tbl) do
        if is_even_length(v) then
            table.insert(result, v)
        end
    end

    table.sort(result, compare_strings)

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = sorted_list_sum
    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})
    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})
    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})
    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})
    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})
    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})
    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_150,knc_Arab,lua,"-مِثَالَات:- عَدَدٌ أَوَّلُ وَيَرُدُّ قِيمَةَ y إِلَّا هُوَ.- برنامجٌ بسيطٌ يَرُدُ قيمةَ x إذا كانَ n -- >>> x_or_y(7, 34, 12)
-- 34
-- >>> x_or_y(15, 8, 5)
-- 5
local function x_or_y(n, x, y)
","local function is_prime(num)
    if num <= 1 then
        return false
    end
    for i = 2, math.sqrt(num) do
        if num % i == 0 then
            return false
        end
    end
    return true
end

local function x_or_y(n, x, y)
    if is_prime(n) then
        return x
    else
        return y
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = x_or_y
    lu.assertEquals(candidate(7, 34, 12), 34)
    lu.assertEquals(candidate(15, 8, 5), 5)
    lu.assertEquals(candidate(3, 33, 5212), 33)
    lu.assertEquals(candidate(1259, 3, 52), 3)
    lu.assertEquals(candidate(7919, -1, 12), -1)
    lu.assertEquals(candidate(3609, 1245, 583), 583)
    lu.assertEquals(candidate(91, 56, 129), 129)
    lu.assertEquals(candidate(6, 34, 1234), 1234)
    lu.assertEquals(candidate(1, 2, 0), 0)
    lu.assertEquals(candidate(2, 2, 0), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_151,knc_Arab,lua,"تَجَاهَلْ الأَرْقَامَ الَّتِي هِيَ سَبِيْبَةٌ أَوْ غَيْرُ سَمِيْرَةٍ- مُعْطَيَة جَدَل مِنْ أَرْقَام، تَرُدُّ جَمْع مَرَابِع الأَرْقَام -- >>> double_the_difference({1, 3, 2, 0})
-- 10
-- >>> double_the_difference({-1, -2, 0})
-- 0
-- >>> double_the_difference({9, -2})
-- 81
-- >>> double_the_difference({0})
-- 0
-- If the input table is empty, return 0.
local function double_the_difference(lst)
","local function double_the_difference(lst)
    local sum = 0
    for _, num in ipairs(lst) do
        if type(num) == ""number"" and num >= 0 and num % 1 == 0 and num % 2 == 1 then
            sum = sum + num * num
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = double_the_difference
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({5.0, 4.0}), 25)
    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
end

os.exit(lu.LuaUnit.run())"
HumanEval_152,knc_Arab,lua,"- مَثَل:- القِيمَةُ 0، وَإِنْ لَمْ تَكُنْ، فَالقِيمَةُ هِيَ الْفَرْقُ المُطلق بين التخمين والنتيجة.رُدُّوا جَدَلَ مِنْ طُولِهِ يَدُلُّ عَلَى مَا بَعُدَ مِنْ كُلِّ خَبَرٍ.- تُعْطَى لَكَ لَوْحَتَيْنِ مِنْ الْحُصُولِ وَالتَّخَيُّرِ مِنْ طُولٍ مُسَاوٍ، حَيْثُ كُلُّ فَصْلٍ يُبَيِّنُ مُطَابَقَةً.- مَهْمَلُكَ هُوَ تَحْدِيدُ إِنْ كَانَ شَخْصٌ حَدَّثَ بِحَقٍّ بِنَتَائِجِ عِدَّةِ أَلْبَابِ.-بَلْ يَجِبُ أَنْ نَتَحَذَّرَ وَنُقَارِنَحَدثٌ مَعْرُوفٌ أخِيراً.- أَظُنُّ أَنَّنَا كُلّنَا نَتَذَكَّرُ ذلك الشَّعْرِ عندما نَتِجَةُ بَعْض الطَّوِيل مَنْتَظِرِ-- >>> compare({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2})
-- {0, 0, 0, 0, 3, 3}
-- >>> compare({0, 5, 0, 0, 0, 4}, {4, 1, 1, 0, 0, -2})
-- {4, 4, 1, 0, 0, 6}
local function compare(game, guess)
","local function compare(game, guess)
    local differences = {}
    for i = 1, #game do
        if game[i] == guess[i] then
            differences[i] = 0
        else
            differences[i] = math.abs(game[i] - guess[i])
        end
    end
    return differences
end","lu = require('luaunit')

function test_humaneval()
local candidate = compare
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2}), {0, 0, 0, 0, 3, 3})
    lu.assertEquals(candidate({0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}), {0, 0, 0, 0, 0, 0})
    lu.assertEquals(candidate({1, 2, 3}, {-1, -2, -3}), {2, 4, 6})
    lu.assertEquals(candidate({1, 2, 3, 5}, {-1, 2, 3, 4}), {2, 0, 0, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_153,knc_Arab,lua,"-مِثَال:- (قُوَّتُهُ -1).- يَعُودُ ""Slices.SERVINGSliCes"" مِنْ أَنَّ ""SERVINGSliCes"" هُوَ أَقْوَى التَّمْدِيدِ - التَمْدِيدَات: ['SERVINGSliCes'، 'Cheese'، 'StuFfed'] فَيَجِبُ أَنْ تَقُولَ- مَثَلاً، إنْ أُعْطِيتَ ""شِطَرَات"" كَالصِّنَفِ وَجَدَلِ الْمَكَانِ- اخْتَارْ الَّذِي يَأْتِي أَوَّلَ فِي الْمَائِدَةِ.- إنْ كَانَ ثَنِيَةٌ أَوْ أَكْثَرَ مِنْهَا بِقُوَّةٍ مُتَسَاوِيَةٍ، فَيَجِبُ أَنْ تَتَجَمَّلَ- شَكْل: ClassName.StrongestExtensionName. - يَجِبُ أَنْ تَجِدَ أَقْوَى إِضَافَةٍ وَتَرُدَّ سِلْسِلَةً فِي هَذَا- فِي اسْمِ التَّمْدِيدِ، تُعْطَى القُوَّةُ بِكَسْرِ CAP - SM.حُرُوفُ فِي اسْمِ التَمْدِيدِ، وَلْتَكُنْ SM عَدَدَ حُرُوفِ الصَّغِيرَةِ - قوة التمديد هي كَمَا يَلِي: لِيَكُنْ CAP الرَّقْمَ مِنْ حَرْفِ الْكَبِيرِ - التَمَدُّدَاتْ تُستَخدَمْ لِتحمِلْ فِئَاتْ إضافِيَة لِلفِئَةْ.- سَتُعْطَى اسْمَ فِئَةٍ (سِلْسِلَةٍ) وَجَدَلَ مَوَاسِطٍ.-- >>> Strongest_Extension('my_class', {'AA', 'Be', 'CC'})
-- 'my_class.AA'
local function Strongest_Extension(class_name, extensions)
","local function Strongest_Extension(class_name, extensions)
    local strongest_extension = nil
    local max_strength = nil

    for _, extension in ipairs(extensions) do
        local cap = 0
        local sm = 0
        for i = 1, #extension do
            local char = extension:sub(i, i)
            if char:match(""%u"") then
                cap = cap + 1
            elseif char:match(""%l"") then
                sm = sm + 1
            end
        end
        local strength = cap - sm
        if max_strength == nil or strength > max_strength then
            max_strength = strength
            strongest_extension = extension
        end
    end

    return class_name .. ""."" .. strongest_extension
end","lu = require('luaunit')

function test_humaneval()
local candidate = Strongest_Extension
    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')
    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')
    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')
    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')
    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')
    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')
    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')
    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')
    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}), 'Sp.671235')
end

os.exit(lu.LuaUnit.run())"
HumanEval_154,knc_Arab,lua,"تَعْطَيْتَ كَلِمَتَيْنِ. تَحْتَاجُ إِلَى إِرْجَاعِ صَحِيحٍ إِنْ كَانَتِ الكَلِمَةُ الثَّانِيَةُ أَوْ أَيُّ تَدَارُكَاتِهَا سُكُونَةً في الكَلِمَةِ الأُولَى.-- >>> cycpattern_check('abcd', 'abd')
-- false
-- >>> cycpattern_check('hello', 'ell')
-- true
-- >>> cycpattern_check('whassup', 'psus')
-- false
-- >>> cycpattern_check('abab', 'baa')
-- true
-- >>> cycpattern_check('efef', 'eeff')
-- false
-- >>> cycpattern_check('himenss', 'simen')
-- true
local function cycpattern_check(a, b)
","local function is_rotation(s1, s2)
    return #s1 == #s2 and (s1 .. s1):find(s2) ~= nil
end

local function generate_rotations(s)
    local rotations = {}
    for i = 1, #s do
        local rotation = s:sub(i) .. s:sub(1, i-1)
        table.insert(rotations, rotation)
    end
    return rotations
end

local function cycpattern_check(a, b)
    local rotations = generate_rotations(b)
    for _, rotation in ipairs(rotations) do
        if a:find(rotation) then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = cycpattern_check
    lu.assertEquals(candidate('xyzw', 'xyw'), false)
    lu.assertEquals(candidate('yello', 'ell'), true)
    lu.assertEquals(candidate('whattup', 'ptut'), false)
    lu.assertEquals(candidate('efef', 'fee'), true)
    lu.assertEquals(candidate('abab', 'aabb'), false)
    lu.assertEquals(candidate('winemtt', 'tinem'), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_155,knc_Arab,lua,"-مِثَال:- مُعْطَى عَدَدَ كُلٍّ. رُدَّ جَدَلًا فِيهِ عَدَدُ أَعْدَادِ الْجَوَارِي وَالْفُرَاتِ.--     >>> even_odd_count(-12)
--     {1, 1}
--     >>> even_odd_count(123)
--     {1, 2}
local function even_odd_count(num)
","local function even_odd_count(num)
    local even_count, odd_count = 0, 0
    num = math.abs(num)  -- remove the sign of the number
    while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
            even_count = even_count + 1
        else
            odd_count = odd_count + 1
        end
        num = math.floor(num / 10)
    end
    return {even_count, odd_count}
end","lu = require('luaunit')

function test_humaneval()
local candidate = even_odd_count
    lu.assertEquals(candidate(7), {0, 1})
    lu.assertEquals(candidate(-78), {1, 1})
    lu.assertEquals(candidate(3452), {2, 2})
    lu.assertEquals(candidate(346211), {3, 3})
    lu.assertEquals(candidate(-345821), {3, 3})
    lu.assertEquals(candidate(-2), {1, 0})
    lu.assertEquals(candidate(-45347), {2, 3})
    lu.assertEquals(candidate(0), {1, 0})
end

os.exit(lu.LuaUnit.run())"
HumanEval_156,knc_Arab,lua,"-مِثَالَات:- قَيَدَات: 1 <= num <= 1000-وَأَرْجِعْهُ بِحُرُوفٍ صَغِيرَةٍ.- مُعْطَى عَدَدَ كُلٍّ إيجَابِي، أَحْصِلْ مُقَابِلَهُ الرَّومِيَّ كَسِلْسِلَةٍ، -- >>> int_to_mini_roman(19)
-- 'xix'
-- >>> int_to_mini_roman(152)
-- 'clii'
-- >>> int_to_mini_roman(426)
-- 'cdxxvi'
local function int_to_mini_roman(number)
","local function int_to_mini_roman(number)
    local roman_numerals = {
        {1000, ""m""},
        {900, ""cm""},
        {500, ""d""},
        {400, ""cd""},
        {100, ""c""},
        {90, ""xc""},
        {50, ""l""},
        {40, ""xl""},
        {10, ""x""},
        {9, ""ix""},
        {5, ""v""},
        {4, ""iv""},
        {1, ""i""}
    }
    
    local result = {}
    for _, value_pair in ipairs(roman_numerals) do
        local value, symbol = unpack(value_pair)
        while number >= value do
            number = number - value
            table.insert(result, symbol)
        end
    end
    
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = int_to_mini_roman
    lu.assertEquals(candidate(19), 'xix')
    lu.assertEquals(candidate(152), 'clii')
    lu.assertEquals(candidate(251), 'ccli')
    lu.assertEquals(candidate(426), 'cdxxvi')
    lu.assertEquals(candidate(500), 'd')
    lu.assertEquals(candidate(1), 'i')
    lu.assertEquals(candidate(4), 'iv')
    lu.assertEquals(candidate(43), 'xliii')
    lu.assertEquals(candidate(90), 'xc')
    lu.assertEquals(candidate(94), 'xciv')
    lu.assertEquals(candidate(532), 'dxxxii')
    lu.assertEquals(candidate(900), 'cm')
    lu.assertEquals(candidate(994), 'cmxciv')
    lu.assertEquals(candidate(1000), 'm')
end

os.exit(lu.LuaUnit.run())"
HumanEval_157,knc_Arab,lua,"-مِثَال:- 90 دِرْجِيْسْ.- مُثَلَّثٌ مُسْتَقِيمٌ مُثَلَّثٌ فِيهِ زَاوِيَةٌ مُسْتَقِيمَةٌ أَوْ- أَطْرَافُ تَشْكُلُ ثَلَاثَةً مُسْتَقِيمَةً، غَيْرَهَا.مُعْطَى أَطْوَالِ الْجَانِبَيْنِ الثَّلَاثَةِ مِنْ مُثَلَّثٍ.-- >>> right_angle_triangle(3, 4, 5)
-- true
-- >>> right_angle_triangle(1, 2, 3)
-- false
local function right_angle_triangle(a, b, c)
","local function right_angle_triangle(a, b, c)
    -- Sort the sides to make sure we always compare the largest with the sum of squares of the other two
    local sides = {a, b, c}
    table.sort(sides)

    -- Check the Pythagorean theorem
    return sides[1]^2 + sides[2]^2 == sides[3]^2
end","lu = require('luaunit')

function test_humaneval()
local candidate = right_angle_triangle
    lu.assertEquals(candidate(3, 4, 5), true)
    lu.assertEquals(candidate(1, 2, 3), false)
    lu.assertEquals(candidate(10, 6, 8), true)
    lu.assertEquals(candidate(2, 2, 2), false)
    lu.assertEquals(candidate(7, 24, 25), true)
    lu.assertEquals(candidate(10, 5, 7), false)
    lu.assertEquals(candidate(5, 12, 13), true)
    lu.assertEquals(candidate(15, 8, 17), true)
    lu.assertEquals(candidate(48, 55, 73), true)
    lu.assertEquals(candidate(1, 1, 1), false)
    lu.assertEquals(candidate(2, 2, 10), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_158,knc_Arab,lua,"- حُرُوفٌ، ارْجِعْ بِهَا الَّتِي تَأْتِي أَوَّلَ مَنْ تَأْتِي بِهَا.- مِنْ حُرُوفِ فَرَدِيّةٍ. إنْ كَانَ لِلْخُطَاتِ عِدَّةٌ فَالْأَكْبَرُ مِنْهَا فَرَدِيّةٌ.- الجدول يَحتوي كلماتَ مختلفةَ أعِدْ الكلمةَ بِأَكْثَرِ عَدَدٍ- اُكْتُبْ دَلِيْلَةً تَقْبَلُ جَدَلَةَ سَلاَسِلٍ.-- >>> find_max({'name', 'of', 'string'})
-- 'string'
-- >>> find_max({'name', 'enam', 'game'})
-- 'enam'
-- >>> find_max({'aaaaaaa', 'bb', 'cc'})
-- 'aaaaaaa'
local function find_max(words)
","local function find_max(words)
    local function unique_characters_count(word)
        local char_set = {}
        for char in word:gmatch('.') do
            char_set[char] = true
        end
        local count = 0
        for _ in pairs(char_set) do
            count = count + 1
        end
        return count
    end

    local max_word = ''
    local max_unique_count = 0

    for _, word in ipairs(words) do
        local unique_count = unique_characters_count(word)
        if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_word) then
            max_word = word
            max_unique_count = unique_count
        end
    end

    return max_word
end","lu = require('luaunit')

function test_humaneval()
local candidate = find_max
    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
    lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
    lu.assertEquals(candidate({'b'}), 'b')
    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
end

os.exit(lu.LuaUnit.run())"
HumanEval_159,knc_Arab,lua,"-مِثَال:- إذا لمْ يَكُنْ بَاقِيَ بَعْضُ الجُزرِ، فَسَتَأْكُلُ كُلَّ الجُزرِ، لكنَّكَ سَتَظْلُ جائِعًا.- عَدَدَ الجَوْزِ بَاقٍ بَعْدَ وَجْعِكَ] - تَرْجِعُ بِجَدَلِ [مُجَمَّعِ الْجُزَازِ الْمَأْكُولِ بَعْدَ وَلَائِكَ،-لكنْ الآنَ تَحتاجُ أَنْ تَأْكلَ المزيد مِنْ الجَزرِ لِكَمْلِ وَجباتِ اليومِ.- أنتَ أرنبٌ جائعٌ، وَكَلْتَ مُعَيَّنَ عَدَدٍ مِنْ الجَوَازِ،-- >>> eat(5, 6, 10)
-- {11, 4}
-- >>> eat(4, 8, 9)
-- {12, 1}
-- >>> eat(1, 10, 10)
-- {11, 0}
-- >>> eat(2, 11, 5)
-- {7, 0}
-- Variables:
-- @number : integer
--     the number of carrots that you have eaten.
-- @need : integer
--     the number of carrots that you need to eat.
-- @remaining : integer
--     the number of remaining carrots thet exist in stock
-- Constrain:
-- * 0 <= number <= 1000
-- * 0 <= need <= 1000
-- * 0 <= remaining <= 1000
-- Have fun :)
local function eat(number, need, remaining)
","local function eat(number, need, remaining)
    local totalEaten
    local leftOver
    
    if remaining >= need then
        totalEaten = number + need
        leftOver = remaining - need
    else
        totalEaten = number + remaining
        leftOver = 0
    end
    
    return {totalEaten, leftOver}
end","lu = require('luaunit')

function test_humaneval()
local candidate = eat
    lu.assertEquals(candidate(5, 6, 10), {11, 4})
    lu.assertEquals(candidate(4, 8, 9), {12, 1})
    lu.assertEquals(candidate(1, 10, 10), {11, 0})
    lu.assertEquals(candidate(2, 11, 5), {7, 0})
    lu.assertEquals(candidate(4, 5, 7), {9, 2})
    lu.assertEquals(candidate(4, 5, 1), {5, 0})
end

os.exit(lu.LuaUnit.run())"
HumanEval_160,knc_Arab,lua,"- جَدْلُ المُشَارِكِ لَهُ مُشَارِكٌ وَاحِدٌ، وَجَدْلُ المُشَارِكِ لَهُ مُشَارِكَانِ.- أُوبِرَانْدْ هُوَ جَدْلْ مِنْ مِنْ أَعْدَادْ سَمْوَةْ غَيرْ سُبْطِيَّةْ- طُولُ جَدْلِ الْمُشَارِكِ سَوَاءٌ بِطُولِ جَدْلِ الْعَامِلِ دُونَ وَاحِدٍ.- تَعَالَى:- => نَتِيجَة = 9 - النتيجة = 2 + 3 * 4 - 5  تَرَكْتُهُ- جَدَلْ = [2, 3, 4, 5] - مُشَغِلْ ['+'، '*'، '-'] -مِثَال:- تَعَدُّدُ (**) - تَقسيمَ الطَبَقَةِ- ضربَةٌ (*) - خَلْعُ ( - ) - إضافة (+) - العمليات الجبرية الأساسية:  كَمْ مِنْ مَعْنَى؟- عِبَارَةَ وَارْجِعْ تَقْدِيرَ هَذِهِ العِبَارَةِ.- الجدول الثاني جَدُولٌ من الأعدادِ الصحيحةِ. إستخدمْ الجدولين المُعطَيَين لِبِنَاءِ الجِبْرِيْكْ مَنْ أَعْطَى جَدْلَيْنِ مُشَغِّلَةً وَمُشَغِّلَةً، فَالْجَدْلُ الأَوَّلُ مَشْغُولَةٌ بِالْجِبْرِ الأَوَّلِ، وَlocal function do_algebra(operator, operand)
","local function do_algebra(operator, operand)
    local expression = tostring(operand[1])
    
    for i = 1, #operator do
        expression = expression .. "" "" .. operator[i] .. "" "" .. operand[i+1]
    end
    
    return load(""return "" .. expression)()
end

-- Example usage:
-- local operator = {'+', '*', '-'}
-- local operand = {2, 3, 4, 5}
-- local result = do_algebra(operator, operand)
-- print(result) -- Output: 9","lu = require('luaunit')

function test_humaneval()
local candidate = do_algebra
    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)
    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)
    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)
end

os.exit(lu.LuaUnit.run())"
HumanEval_161,knc_Arab,lua,"-مِثَالَاتْ- تَجِبُ أَنْ تَرُدَّ الوَظِيفَةَ السِّلْسِلَةَ النَّاتِجَةَ.-إِنْ لَمْ تَكُنْ فِي السِّلْسِلَةِ حُرُوفٌ، فَعَكِّسِ السِّلْسِلَةَ.-إلاّ فَإبقِيهَا كَمَا هِيَ.- إِنْ كَانَتْ حَرْفَةً، فَعَكِّسْهَا مِنْ أَسْفَلِهَا إِلَى أَعْلَى أَوْ عَكْسُهَا،- تَعْطَى سِلْسِلَةَ سَلْسِلَةٍ-- >>> solve('1234')
-- '4321'
-- >>> solve('ab')
-- 'AB'
-- >>> solve('#a@C')
-- '#A@c'
local function solve(s)
","local function solve(s)
  local has_letters = false
  local result = {}
  
  for i = 1, #s do
    local char = s:sub(i, i)
    if char:match(""%a"") then
      has_letters = true
      if char:lower() == char then
        table.insert(result, char:upper())
      else
        table.insert(result, char:lower())
      end
    else
      table.insert(result, char)
    end
  end
  
  if has_letters then
    return table.concat(result)
  else
    return s:reverse()
  end
end","lu = require('luaunit')

function test_humaneval()
local candidate = solve
    lu.assertEquals(candidate('AsDf'), 'aSdF')
    lu.assertEquals(candidate('1234'), '4321')
    lu.assertEquals(candidate('ab'), 'AB')
    lu.assertEquals(candidate('#a@C'), '#A@c')
    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')
    lu.assertEquals(candidate('#6@2'), '2@6#')
    lu.assertEquals(candidate('#$a^D'), '#$A^d')
    lu.assertEquals(candidate('#ccc'), '#CCC')
end

os.exit(lu.LuaUnit.run())"
HumanEval_162,knc_Arab,lua,"- إِنْ كَانَ 'text' سِلْطَةً فارغةً، ارْجِعْ nil.- مُعْطَى سِلْطَة 'text', رُدَّ سِلْطَتَهَا مُسَاوِيَةَ الْمَخْتَلَطِ md5.-- >>> string_to_md5('Hello world')
-- '3e25960a79dbc69b674cd4ec67a72c62'
local function string_to_md5(text)
","local md5 = require(""md5"")

local function string_to_md5(text)
    if text == """" then
        return nil
    end
    return md5.sumhexa(text)
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_to_md5
    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')
    lu.assertEquals(candidate(''), None)
    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')
    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')
end

os.exit(lu.LuaUnit.run())"
HumanEval_163,knc_Arab,lua,"- مَثَلاً:- وَب، بِالتَّرْتِيبِ الصَّاعِدِ.- مُعْطَيَانِ كُلَيْنِ إيجَابِيَيْنِ a و b، ارْجِعْ أَرْجُلَيْنِ مُجَرَّدَيْنِ a -- >>> generate_integers(2, 8)
-- {2, 4, 6, 8}
-- >>> generate_integers(8, 2)
-- {2, 4, 6, 8}
-- >>> generate_integers(10, 14)
-- {}
local function generate_integers(a, b)
","local function generate_integers(a, b)
    local evens = {}
    local start, finish = math.min(a, b), math.max(a, b)
    
    for i = start, finish do
        if i % 2 == 0 then
            table.insert(evens, i)
        end
    end
    
    return evens
end","lu = require('luaunit')

function test_humaneval()
local candidate = generate_integers
    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})
    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})
    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})
    lu.assertEquals(candidate(17, 89), {})
end

os.exit(lu.LuaUnit.run())"
