task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,aka_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Sε w'ahwehwε sε, w'ahwehwεmu no mu no, yεn mmienu biara bɛn ho sen nea w'ahwehwε no. Sε nhwɛso: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,aka_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Saa dwumadie yi mu no, nea ehia ne sɛ wobɛtwe saa akuo no mu mmienu no mu biara mu no, na wode no ato hɔ. Akuo no mu biara mu no, wɔama no kwan ma ɔde no ato hɔ.""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,aka_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Sɛ wode adikanfo a wɔn ano yɛ den a, wobetumi atwitwa mu akɔ a ɔfã a ɛyɛ ɔpepe (ɔfã a ɛkorɔn sen ɔfã a wɔde ama no) ne ɔpepe (ɔfã a aka no yɛ ketewa sen 1) mu.""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,aka_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Wo nsa bɛka bank account a wo de sika hyɛ mu na wo yi firi mu a, wo nsa bɛka no no. Wo adwuma ne sɛ wobɛhu sɛ, sɛ wo account no bɛtɔ ase a, na saa bere no, ɛsɛ sɛ function no san true.""""""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,aka_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Sɛ wode input numbers a' wɔama no to hɔ a, yɛ Mean Absolute Deviation a' ɛfa saa dataset yi ho. Mean Absolute Deviation no yɛ nsonsonoe a' wɔda no adi wɔ mfitiaseɛ biara ne ne mfinimfini (mfinimfini wɔ saa asɛm yi mu): MAD = average. x - x_mean. Example: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,aka_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Insert a number 'delimeter' between every two consecutive elements of input list `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,aka_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Saa dwumadie yi mu no, yɛ de ntweasoɔ a ɛgyina hɔ ma akuo bebree a wɔakyekyɛ mu wɔ ntweasoɔ mu. Sɛ nhwɛso no, wɔ akuo biara mu no, yɛ de ntweasoɔ a ɛkyɛn so a wɔakyekyɛ mu wɔ ntweasoɔ mu no ma no. Ɛho nhwɛsoɔ ne sɛ, (() (()) wɔ ntweasoɔ mmienu a ɛkyɛn so, na ((())) wɔ ntweasoɔ mmiɛnsa.""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,aka_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filter input list of strings only for ones that contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,aka_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Sɛ wode integers a ɛwɔ list bi mu ma a, fa tuple a ɛne ne nyinaa a ɛwɔ list no mu no ka bom na yɛ no product. Empty sum bɛsɛ 0 na empty product bɛsɛ 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,aka_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Fi integers no mu no, yɛ no rolling maximum element no a wohui no kosii sɛ wohui no wɔ sequence no mu no. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,aka_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Hwehwɛ palindrome a ɛtwa toɔ a ɛwɔ ɔfã a wɔde ma no mu. Algorithm no yɛ tiawa: - Hwehwɛ ɔfã a ɛtwa toɔ a ɛwɔ ɔfã a wɔde ma no mu a ɛyɛ palindrome. - Fa ɔfã a ɛtwa toɔ a ɛwɔ ɔfã a wɔde ma no mu a ɛtwa palindromic suffix no ho ka ɔfã a ɛtwa toɔ no ho.""""""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Sε w'ama kwan sε ahwehwɛde a w'ama no yε palindrome a, sɔ hwɛ """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,aka_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Input yɛ string mmienu a a na b yɛ 1s ne 0s nko ara. Yɛ binary XOR wɔ input yi so na yɛ de aba no nso yɛ string.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,aka_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Fi ahoma a woahyehyɛ no mu, san de nea ɛware no ma. San de nea edi kan ma sɛ ahoma bebree a wɔ tenten yɛ pɛ no wɔ hɔ. San de None ma sɛ input list no yɛ hwee. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,aka_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""San fa akontabuo a edi kan a ɛwɔ anohyetoɔ a wɔabobɔ so wɔ ɔfã a edi kan no so ma no.""""""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,aka_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Return list of all prefixes from shortest to longest of the input string >>> all_prefixes('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,aka_Latn,python,"

def string_sequence(n: int) -> str:
    """"""San fa akontabuo a ɛwɔ nsesaeɛ a wɔde gyinabea hyɛ ho a efi 0 kosi n ka ho.""""""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,aka_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Sɛ wode string bi ma a, hwehwɛ sɛ wobehu nkyerɛwde ahorow a ɛwɔ mu (a ɛmfa ho case) no dodow.""""""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,aka_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""W'adwuma ne sɛ wobɛteɛteɛ ntentan a ɛgyina hɔ ma nnwom nnyigyei wɔ ASCII kwan so. Wo adwuma ne sɛ wobɛteɛteɛ ntentan a ɛgyina hɔ ma integers a ɛne beat bebree hyia no. N'asɛmti ne sɛ: 'o' note, lasts beats 'oImana' - half note, lasts two beats 'oImana' - quater note, lasts one beat >>> parse_music. 'oImana . oImana . oImana
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,aka_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Hwehwɛ mpɛn dodow a wobetumi ahu ɔfã bi wɔ mfitiaseɛ no mu. Hwε nsɛm a ɛkata so. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,aka_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest >>> sort_numbers (('miɛnsa baako anum') 'miɛnsa anum' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,aka_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Wode a, fa no sɛ wo wɔ no bi a, na fa no sɛ wo wɔ no bi a, na fa no sɛ wo wɔ no bi a, na fa no sɛ wo wɔ no bi a, na fa no sɛ wo wɔ no bi a.""""""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,aka_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Sɛ wo de nnumeroɔ a (ɛtɔ so mmienu) bi ama a, fa linear transform di dwuma wɔ saa list no so, sɛdeɛ ɛbɛyɛ a, nnumeroɔ a ɛsõ paa no bɛyɛ 0 na deɛ ɛsõ paa no bɛyɛ 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,aka_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter a wɔde ama list a Python values biara wɔ mu ma integers nko ara >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,aka_Latn,python,"

def strlen(string: str) -> int:
    """"""Deɛ wɔde asie no tenten yɛ: strlen{""} 0 >>> strlen{""} abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,aka_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Sɛ wode a, hwehwɛ a, na nya a ɛboro so a ɛkyekyɛ n pɛpɛɛpɛ, a ɛboro n so >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,aka_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Ma no nsεm a εkyerεkyerε a εfiri εkεseε kosi εsoosoɔ. Ɛsɛ sε wכkyerɛ mpɛn dodow a nsεm no biara yε wכn a wכde adi dwuma wɔ ntεmfua mu no. Ɛsɛ sε wכkyerɛ mpɛn dodow a nsεm no nyinaa yε wכn a wכde adi dwuma wɔ ntεmfua mu no.""""""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,aka_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Fi integers no mu yi nnoɔma a ɛboro baako so no nyinaa. Ma nnoɔma no nni kan sɛnea wɔhyɛɛ no. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,aka_Latn,python,"

def flip_case(string: str) -> str:
    """"""Sɛ wo de string bi a, yɛ lowercase no kɔ uppercase na uppercase kɔ lowercase. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,aka_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate list of strings into a single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,aka_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filter input list of strings only for ones that start with a given prefix. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,aka_Latn,python,"

def get_positive(l: list):
    """"""San fa adwenfa a w'anya wɔ krataa no mu no so. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,aka_Latn,python,"

def is_prime(n):
    """"""San fa true ma no sɛ ne nyinaa yɛ prime, na false ma no sɛ ne nyinaa yɛ prime. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,aka_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs yɛ coefficients a ɛwɔ polynomial. find_zero hwehwɛ x a poly ((x) = 0. find_zero de zero point nko ara na ɛsan ba, mpo sɛ pii wɔ hɔ. Afei nso, find_zero gye list xs a ɛwɔ even number of coefficients na ɛsan wɔ largest non-zero coefficient na ɛbɔ anohoba. >>> round (((find_zero[1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Hwehwɛ polynomial a ne coefficients yɛ xs wɔ bea a x. san ma no xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,aka_Latn,python,"

def sort_third(l: list):
    """"""Saa adwuma yi fa krataa a ɛne l yɛ pɛ na ɛde krataa a ɛne l yɛ pɛ ma no wɔ nkyeresoɔ a ɛntumi nkyeresoɔ wɔ mmiɛnsa mu, na ne gyinapɛn wɔ nkyeresoɔ a wotumi nkyeresoɔ wɔ mmiɛnsa mu no yɛ pɛ sɛ gyinapɛn a ɛne l yɛ pɛ, nanso wɔasiesie no. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,aka_Latn,python,"

def unique(l: list):
    """"""San kɔfa nneɛma a wɔasiesie no wɔ din no mu no ma no yɛ soronko wɔ din no mu >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,aka_Latn,python,"

def max_element(l: list):
    """"""San fa ade a ɛboro so wɔ atwerɛsɛm no mu ma no. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,aka_Latn,python,"

def fizz_buzz(n: int):
    """"""San ma mpɛn dodow a ɔfrae 7 no pue wɔ integers a wɔn ka n a wɔkyekyɛmu yɛ 11 anaa 13 mu no.""""""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,aka_Latn,python,"

def sort_even(l: list):
    """"""Saa adwuma yi fa krataa a ne din de l na ɛde krataa a ne din de l' ma, a ne din no yɛ pɛ wɔ nkontabuo a ne din no yɛ mpo mu, nanso wɔ atoto mu. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,aka_Latn,python,"

def encode_cyclic(s: str):
    """"""gye sɛ input string a wɔde encode_cyclic adwuma no akyerɛ. De decoded string ma.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""san de asεmfua a w'ahyehyɛ no ma no, na w'asan de asεmfua a w'ahyehyɛ no ma no, na w'asan de asεmfua a w'ahyehyɛ no ama no.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,aka_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib de nɔma a ɛtɔ so n a ɛyɛ Fibonacci nɔma na ɛyɛ prime nso ma. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,aka_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero fa integers ho sɛ input. Ɛsan de True ma sɛ nneɛma mmiɛnsa a ɛsono mu wɔ list no mu a wɔn nyinaa ka bom yɛ zero, na False nso ma no yɛ zero. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,aka_Latn,python,"

def car_race_collision(n: int):
    """"""Susuw ɔkwan bi a ɛyɛ tee a enni awiei. Kar n na ɛrekɔ benkum kɔ nifa; bere koro no ara, kar n foforo nso rekɔ nifa kɔ benkum. Kar abien no fi ase wɔ akyirikyiri. Kar no nyinaa nam pɛ. Wɔka sɛ kar abien bi hyia bere a kar a ɛrekɔ benkum kɔ nifa ne kar a ɛrekɔ nifa kɔ benkum rehyia. Nanso, kar no yɛ den na ɛyɛ den; nea efi mu ba ne sɛ, wɔkɔ so twa wɔn kwan te sɛ nea wɔantoto. Saa adwuma yi de akwanhyia a ɛtete saa dodow no na ɛba.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,aka_Latn,python,"

def incr_list(l: list):
    """"""San kɔfa nneɛma a wɔakyekyɛ no 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]""""""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,aka_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero fa integers ho sɛ input. Ɛsan de True ma sɛ nneɛma mmienu a ɛsono mu wɔ list no mu a wɔn nyinaa ka bom yɛ zero, na False nso ma no yɛ zero. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,aka_Latn,python,"

def change_base(x: int, base: int):
    """"""Sesa adwenfa a wɔde ba no. san fa no kɔ. san fa no kɔ. adwenfa a ɛwɔ ase no yɛ ka 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,aka_Latn,python,"

def triangle_area(a, h):
    """"""Ɛdenam n'afã tenten ne ne nsunsuansoɔ a ɛkorɔn ho no, wɔama no. >>> triangle_area""""""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,aka_Latn,python,"

def fib4(n: int):
    """"""Fib4 numeral sequence yɛ biribi a ɛte sɛ Fibbonacci sequence a ɛkyerɛ sɛ: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Yɛsrɛ sɛ yɛtwerɛ dwumadie bi a ɛbɛma yɛate n-th element a ɛwɔ fib4 numeral sequence no mu.""""""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,aka_Latn,python,"

def median(l: list):
    """"""Median a w'asan de aba wɔ list no mu no yɛ: l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,aka_Latn,python,"

def is_palindrome(text: str):
    """"""Hwehwɛ sɛ ahwehwɛde a wɔde ama no yɛ nsεmfua a εwͻ nsεmfua mu >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,aka_Latn,python,"

def modp(n: int, p: int):
    """"""San fa 2^n modulo p (ma no nsεm no nnhu). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,aka_Latn,python,"

def encode_shift(s: str):
    """"""gye sɛ input string a wɔde encode_shift yɛ adwuma. De decoded string na ɛsan ma.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""de nkyerɛwde biara a ɛwɔ nkyerɛwde no mu no di dwuma de kyerɛ sɛ ɛyɛ nkyerɛwde a wɔde 5 asesa no.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,aka_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels yɛ adwuma a ɛgye akontaahyɛde na ɛde akontaahyɛde a ɛnni ɛnne nkyerɛwde ba. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,aka_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Sɛ n'ahyehyɛde no mu nnum biara wɔ ase a, ma no so sɛ true.""""""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,aka_Latn,python,"

def add(x: int, y: int):
    """"""Ka nsεm abien x ne y bom, ka 2 bom, ka 3 bom, ka 5 bom, ka 5 bom, ka 7 bom, ka 12 bom.""""""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,aka_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Hwehwɛ sɛ nsɛmfua mmienu wɔ nkyerɛwde koro anaa. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars (('abcd', 'dddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddddabc') False >>> same_chars ((('abcd', 'dddddddabddce') False >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') False """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,aka_Latn,python,"

def fib(n: int):
    """"""San fa Fibonacci nɔma a ɛtɔ so n no ma. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,aka_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets yɛ ""<"" ne "">"" a ɛwɔ ɔfese no mu. return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,aka_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,aka_Latn,python,"

def common(l1: list, l2: list):
    """"""San fa nneɛma a wɔaka abom a wɔasiesie no ma no ma no. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,aka_Latn,python,"

def largest_prime_factor(n: int):
    """"""San fa nea ne kɛse yɛ a, yɛ n. Fa no sɛ n > 1 na ɛnyɛ nea ne kɛse yɛ. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,aka_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n yɛ adwuma a ɛka nnum bi fi 1 kosi n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,aka_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets yɛ string a ""("" ne "")"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() "") True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,aka_Latn,python,"

def derivative(xs: list):
    """"""xs gyina hɔ ma coefficients a ɛwɔ polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Fa saa polynomial yi so wɔ ɔkwan koro no ara so. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,aka_Latn,python,"

def fibfib(n: int):
    """"""FibFib no yɛ nsɛsoɔ a ɛte sɛ Fibbonacci no a ɛkyerɛ sɛ: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).""""""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,aka_Latn,python,"
FIX = """"""Kyerɛw adwuma bi vowels_count a fa asɛmfua a ɛkyerɛ sɛ ɛyɛ input na ɛde vowels a ɛwɔ saa asɛmfua no mu ba. Vowels wɔ ha yɛ 'a', 'e', 'i', 'o', 'u'. Ha, 'y' nso yɛ ɛnne nkyerɛwde, nanso sɛ ɛwɔ asɛmfua no awiei nkutoo a.""""""

def vowels_count(s):
    """"""Fa nhwehwɛmu ho nsɛm afoforo ka ho.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,aka_Latn,python,"
def circular_shift(x, shift):
    """"""Sɛ shift > digits, return digits reversed. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,aka_Latn,python,"
def digitSum(s):
    """"""Adwuma Twerɛ adwuma a fa akontaahyɛde sɛ input na ɛde ne nyinaa ka ASCII code. Sekai: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,aka_Latn,python,"
def fruit_distribution(s,n):
    """"""Wɔ saa adwuma yi mu no, wɔbɛma wo akwaa bi a ɛkyerɛ aduaba ne abereɛ a wɔkyekyɛ wɔ nnuaba dwetɛ mu a aduaba yi wɔ abereɛ, abereɛ, ne mango aba. Sɛ wɔde akwaa a ɛkyerɛ abereɛ ne abereɛ nyinaa ne akwaa bi a ɛkyerɛ aduaba nyinaa a ɛwɔ dwetɛ mu no ma no ma no nya mango aba a ɛwɔ dwetɛ mu no dodow. Sɛ nhwɛso no: fruit_distribution""5(abereɛ ne abereɛ 6"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 apples ne 1 oranges"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 apples ne 3 oranges"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 apples ne 1 oranges"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,aka_Latn,python,"
def pluck(arr):
    """"""""Sɛ wode ɔkasamu a ɛkyerɛ dua bi a ɛwɔ nkɔnsɔnkɔnsɔn a ɛnnyɛ negative wɔ ne nyinaa mu no ma a, w'adwuma ne sɛ wobɛyi nkɔnsɔnkɔnsɔn no mu baako na wode no asan. Sɛ wohu nkɔnsɔnkɔnsɔn a ɛkura akontaahyɛde a ɛnnyɛ ketewa koraa a, fa nea ɛkura akontaahyɛde a ɛnnyɛ ketewa koraa no san. Sɛ nkɔnsɔnkɔnsɔn a wɔayi no asan wɔ ɔkasamu a ɛnnyɛ ketewa koraa a, fa nea ɛwɔ akontaahyɛde a ɛnnyɛ ketewa koraa no san. Sɛ akontaahyɛde a ɛnnyɛ ketewa biara wɔ ɔkasamu no mu a, fa nea ɛwɔ akontaahyɛde a ɛnnyɛ ketewa koraa no san.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,aka_Latn,python,"
def search(lst):
    '''Woma wo positive integers a ɛnnyɛ hwee. Ma integers a ɛboro zero, na ɛtaa yɛ kɛse anaa ɛtesɛ integer no ankasa no. Integer bi taa yɛ mpɛn dodow a ɛtaa pue wɔ list no mu. Sɛ biribi a ɛte saa nni hɔ a, ma no so -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,aka_Latn,python,"
def strange_sort_list(lst):
    '''Sɛ wode anansesɛm a enni ano bi ma a, wobɛsan de no adi wɔ ɔkwan a enni ano so. Anansesɛm a enni ano no, ɛyɛ bere a wofi ase wɔ nea enni ano no, na afei nea ɛboro so wɔ anansesɛm a aka no mu, na afei nea enni ano na ɛkɔ so saa ara.'''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,aka_Latn,python,"
def triangle_area(a, b, c):
    '''Sɛ n'afanan nyinaa yɛ ɔpepepem a, ɔpepepem no fa a wɔatwa no ho ahyia no yɛ ɔpepepem a wɔatwa no ho ahyia a wɔatwa no ho ahyia a, ɛne ɔpepepem no fa a wɔatwa no ho ahyia no yɛ ɔpepepem a wɔatwa no ho ahyia a wɔatwa no ho ahyia no.'''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,aka_Latn,python,"
def will_it_fly(q,w):
    '''Kyerɛw adwuma bi a sɛ ade a q bɛ tu, na sɛ ɛnte saa a, ɛyɛ atoro. Ade a q bɛ tu, sɛ ne nyinaa yɛ pɛ (ɛno yɛ palindromic list) na emu nnoɔma no dodow yɛ ketewa anaa ɛtesɛ nea ɛboro so a ebetumi asisi w. Sekai: will_it_fly (([1, 2], 5) â -> False # 1+2 yɛ ketewa sen nea ɛboro so a ebetumi asisi, nanso ɛnyɛ pɛ. will_it_fly (([3, 2, 3], 1) â -> False # ɛkari pɛ, nanso 3+2+3 yɛ kɛse sen nea ɛboro so a ebetumi asisi. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 yɛ ketewa sen nea ɛboro so a ebetumi asisi, na ɛkari pɛ. will_it_fly ((([3], â 5) -> True # 3 yɛ ketewa sen nea ɛboro so a ebetumi asisi, na ɛkari pɛ.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,aka_Latn,python,"
def smallest_change(arr):
    """"""Sɛ wode ananseɛ a wɔaka no bi ma a, hwehwɛ nnoɔma a ɛsɛ sɛ wɔsesa no kakra na ama ananseɛ no ayɛ palindromic. Ananseɛ a wɔaka no yɛ ananseɛ a wɔkenkan no korɔ wɔ anim ne akyi. Wɔ nsakrae biako mu no, wobɛtumi asesa nnoɔma no bi akɔ nea aka biara mu. Sekai: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,aka_Latn,python,"
def total_match(lst1, lst2):
    '''Kyerɛw dwumadie bi a egye ahoma mmienu na ɛde ahoma a ɛwɔ ahoma no nyinaa mu no nyinaa ka ho a ɛboro nea ɛwɔ ɔfoforɔ no mu no ma. Sɛ ahoma no nyinaa ka ho a, fa ahoma a ɛdi kan no ma. Sekai total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,aka_Latn,python,"
def is_multiply_prime(a):
    """"""Kyerɛw dwumadi bi a sɛ wɔde a, ɛyɛ 3 a wɔadi kan a wɔsan de a, ɛyɛ nokware. Sɛ wonim sɛ a) yɛ ketewa sen 100.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,aka_Latn,python,"
def is_simple_power(x, n):
    """"""Wo dwumadie ne sɛ wobɛkyerɛ dwumadie bi a sɛ ɛmu no yɛ n tumi a, ɛyɛ nokware na sɛ ɛyɛ n tumi a, ɛyɛ atoro. x yɛ tumi a ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den a, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, ɛyɛ den sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ, sɛ,""""""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,aka_Latn,python,"
def iscube(a):
    '''Kyerɛw adwuma bi a fa akontabuo a a na ɛsan True ma no sɛ saa ingeger yi yɛ akontabuo bi a wɔaka ho asɛm. Hyɛ no nso sɛ, wo bɛtumi afa mu sɛ input no yɛ papa bere nyinaa. Sekai: iscube (a) ==> True (b) ==> False (c) ==-1) ==> True (d) ==> True (e) ==> True (f) ==> True (d) ==> True (e) ==> True (d) ==> False (d) ==> False (e) '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,aka_Latn,python,"
def hex_key(num):
    """"""Woama wo dwumadi sɛ kyerɛw dwumadie bi a w'agye hexadecimal nɔma sɛ ɔhyeɛ na w'akan hexadecimal nɔma a ɛyɛ numeral a wɔ wɔ kan (prime number, anaa prime, yɛ nipa nɔma a ɛboro 1 a ɛnyɛ nnidisoɔ a wɔ wɔ wɔ kan). Hexadecimal nɔma yɛ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime nɔma yɛ 2, 3, 5, 7, 11, 13, 17,... Enti ɛsɛ sɛ wuhu nɔma a edidi so yi mu biara: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Hyɛ no nsow: wobɛtumi aka sɛ input no yɛ pɛpɛɛpɛ anaa ɛnnyɛ hwee, na ahyehyε A,B,C,D,E,F no nyinaa yɛ kɛse. Sε nhwɛsoɔ: ma num = ""AB"" a, output no yɛ num = 1. ma num = 1077E ma output no yɛ 2. ma num = ""AB33"" ma num = 4. ma num = ""ABC"" ma num = 6.08933673345 ma output no yɛ num = 2. ma num = ""AEFD"" ma output no yɛ 6.02020.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,aka_Latn,python,"
def decimal_to_binary(decimal):
    """"""Wobɛ ma wo nɔma wɔ ɔpepe mu na w'adwuma ne sɛ wobɛ sesa no akɔ ɔpepe mu. Ɔdeɛ ɛsɛ sɛ ɛyɛ no yɛ string, a nkyerɛwde biara gyina hɔ ma ɔpepe mu. Ɔdeɛ biara wɔ string no mu bɛyɛ '0' anaa '1'. Ɔdeɛ a aka no yɛ 'db' wɔ mfitiaseɛ ne awieɛ no. Ɔdeɛ aka no wɔ hɔ de boa wɔ format no mu.""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,aka_Latn,python,"
def is_happy(s):
    """"""Woama wo string s. Wo adwuma ne sɛ wobɛhwɛ sɛ string no yɛ happy anaa. A string yɛ happy sɛ ne tenten yɛ 3 ne 3 biara yɛ soronko. Sekai: is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (c) => False is_happy (d) => False is_happy (adb) => True is_happy (ad) => True is_happy (x) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,aka_Latn,python,"
def numerical_letter_grade(grades):
    """"""Ԑyɛ bosome no nnawɔtwe a etwa to na ͻkyerɛkyerɛfo no de adesua no ho nkrataa ma sukuufo no. ͻkyerɛkyerɛfo no ayɛ ne ankasa algorithm ama adesua no. ͻhaw no ara ne sɛ, ͻhweree ͻkyerɛw no a ͻde maa adesua no. ͻama wo sukuufo no mu binom GPA ho nkrataa na ɛsɛ sɛ wͻkyerɛw dwumadie bi a ͻtumi de krataa nkrataa a ͻde ma no ma no a ͻfa krataa a edidi so yi so: GPA ͻkyerɛw no 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation ([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,aka_Latn,python,"
def prime_length(string):
    """"""Kyerɛw adwuma a fa ahoma na ɛde True ma sɛ ahoma no tenten yɛ ɔboɔ a, na false ma nea ɛnte saa Examples prime_length{""Hello"") == True prime_length{""abcdcba"") == True prime_length{""kittens"") == True prime_length{""orange"") == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,aka_Latn,python,"
def starts_one_ends(n):
    """"""Sɛ yɛde ɔfã a ɛyɛ pa a wɔaka ho asɛm no ma a, ma no nkyerɛ ɔfã a ɛyɛ pa a ɛwɔ n-nkyekyɛm a efi ase wɔ 1 anaa ɛwie wɔ 1 no dodow.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,aka_Latn,python,"
def solve(N):
    """"""Sɛ wode ɔfã bi a ɛyɛ ɔfã biara a ɛyɛ N ma a, fa ne nyinaa ka no wɔ ɔfã a ɛyɛ binary mu. Sɛnkyerɛnne no ma N = 1000, a ɔfã no ka bɛyɛ 1 a ɛsɛ sɛ ɛyɛ ""1"". Sɛ N = 150, a ɔfã no ka bɛyɛ 6 a ɛsɛ sɛ ɛyɛ ""110"". Sɛ N = 147, a ɔfã no ka yɛ 12 a ɛsɛ sɛ ɛyɛ ""1100"". Nkyereso: @N integer Constraints: 0 â‰¤ N â‰¤ 10000.""""""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,aka_Latn,python,"
def add(lst):
    """"""Sɛ wode anansesɛm a ɛnnyɛ hwee a, fa emu nsunsuansoɔ a ɛnnyɛ pɛ no ka ho.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,aka_Latn,python,"
def anti_shuffle(s):
    """"""Kyerɛw dwumadie bi a fa ahoma na ɛde ahoma a wɔahyehyɛ no ma. Ahoma a wɔahyehyɛ no yɛ ahoma a wɔde nsɛmfua foforo a wɔakyekyɛ no ntam no asi ananmu, a nkyerɛwde no nyinaa wɔ ascii so. Hyɛ no nsow: Ɛsɛ sɛ wode nsɛmfua ne nsasodeɛ a ɛwɔ ɔkasamu no mu di dwuma. Sɛnkyerɛnne: anti_shuffle ((('Hi') de 'Hi' anti_shuffle ((('hello') ma 'ehllo' anti_shuffle (('Hello World!!!') de 'Hello !!!Wdlor' ma """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,aka_Latn,python,"
def get_row(lst, x):
    """"""Sɛ wo de 2 dimensional data, sɛ nested lists, a ɛte sɛ matrix, nanso, ɛnte sɛ matrix, ɔfã biara betumi anya columns ahorow. Sɛ wode lst, ne integer x, hwehwɛ integers x wɔ ɔfã no mu, na fa tuples list, [(x1, y1), (x2, y2) ...] ma no sɛ tuple biara yɛ coordinate - (row, columns), a efi ase fi 0. Sort coordinates initially by rows in ascending order. Afei nso, sort coordinates of the row by columns in descending order. Example: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), 0 (2, 5), (2, 0) get_(1), [] == [row], [1, 2, 3], [2, 2] ==""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,aka_Latn,python,"
def sort_array(array):
    """"""Sɛ wode anekoreɛ a ɛnnyɛ negative adi dwuma a, fa nea wɔde adi dwuma no bi ma no. Sɛ ne nyinaa yɛ anekoreɛ a, wobɛdi dwuma no wɔ soro mu, na sɛ ne nyinaa yɛ anekoreɛ a, wobɛdi dwuma no wɔ soro mu.""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,aka_Latn,python,"
def encrypt(s):
    """"""Yɛ adwuma bi a ɛfa ahyɛnsodeɛ bi sɛ argument na ɛde ahyɛnsodeɛ bi a wɔde nkyerɛwde no asesa aba. Ɛsɛ sɛ wɔsesa nkyerɛwde no wɔ ɔkwan bi so a, nkrataa no bɛtwe ase akɔ fam mmienu na wɔakyɛ mu mmienu. Sɛnsε: encrypt (('hi') de 'lm' encrypt (('asdfghjkl') de 'ewhjklnop' encrypt (('gf') de 'kj' encrypt (('et') de 'ix' ba.""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,aka_Latn,python,"
def next_smallest(lst):
    """"""Wode wo ho ato integers ho. Twerɛ next_smallest () a ɛde no bɛsan akɔma no sɛ no yɛ no mu no mu no mu no mu no mu no mu no mu no mu no mu no mu no mu no mu no mu no mu no mu no.""""""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,aka_Latn,python,"
def is_bored(S):
    """"""Wo de nsɛmfua a w'aka no bɛma wo, na w'adwuma ne sɛ wobɛkan nsɛmfua a w'abrɛ no. Sɛ w'abrɛ no yɛ asɛmfua a efi ase ""me"". Nkyekyɛm ahorow no gyina '.', '?' anaa '! so. Sɛnsε: >>> is_bored(""Hello world"") 0 >>> is_bored(""Ɔsoro no mu yɛ bruu. Owia no rehyerε. M'ani gye saa ewim yi ho"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,aka_Latn,python,"
def any_int(x, y, z):
    '''Yɛ adwuma bi a ɛgye nɔma 3. Ɛsan true sɛ nɔma no baako yɛ mmienu a aka no nyinaa ka, na nɔma no nyinaa yɛ integers. Ɛsan false wɔ nsɛm foforo biara mu. Sekai no any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,aka_Latn,python,"
def encode(message):
    """"""Kyerɛw adwuma bi a ebegye nkrataa, na ɛde akyerɛw kwan a ɛbɛma asensεn a ɛwɔ nkrataa no mu nyinaa asesa, de nkyerɛwde a ɛwɔ nkrataa no mu no nyinaa asi ananmu a ɛwɔ nkrataa no mu no ananmu.""""""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,aka_Latn,python,"

def skjkasdkd(lst):
    """"""Sɛ w'akyerɛ mu wɔ ɔkan a, wo nsa bɛka ɔkan a wɔaka ho asɛm wɔ ɔfã a edi kan no mu. Sɛ w'akyerɛ mu wɔ ɔfã a ɛtɔ so abien no mu a, wo nsa bɛka ɔfã a ɛtɔ so mmiɛnsa no. Sɛ w'akyerɛ mu wɔ ɔfã a ɛtɔ so mmiɛnsa no mu a, wo nsa bɛka ɔfã a ɛtɔ so mmiɛnsa no.""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,aka_Latn,python,"
def check_dict_case(dict):
    """"""Sɛ wɔde nsɛm asekyerɛ nhoma bi ama a, fa True ma sɛ nsɛmfua nyinaa yɛ nsɛmfua a wɔtwerɛ no tiawa anaa nsɛmfua nyinaa yɛ nsɛmfua a wɔtwerɛ no tiawa, anyɛ saa a fa False. Ɛsɛ sɛ adwuma no de False ma sɛ nsɛmfua a wɔde ama no yɛ hwee.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,aka_Latn,python,"
def count_up_to(n):
    """"""Yɛ adwuma a ɛgye akontabuo a ɛnnyɛ negative na ɛsan de akontabuo a ɛdi kan a ɛyɛ anansesɛm a wɔn dodoɔ boro n no ma. Sekai: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17]""""""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,aka_Latn,python,"
def multiply(a, b):
    """"""Fa mfoni a ɛfa integers mmienu ho na fa wɔn unity digits no product no ma. Fa no sɛ input no yɛ papa bere nyinaa.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,aka_Latn,python,"
def count_upper(s):
    """"""Sɛ wɔde string s ma a, ka ɛnne akɛseɛ a ɛwɔ ntwerɛeɛ a emu yɛ anonom no. SƐ NHWƐSO: count_upper (('aBCdEf') de 1 count_upper (('abcdefg') de 0 count_upper (('dBBE') de 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,aka_Latn,python,"
def closest_integer(value):
    '''Sε wכfa a εkyerε sε εyε akontaahyɛde a εkyerε asεm bi a εbεsan de asεm a εbεbɛn no ama no. Sε asεm no ne nsεm a εbεyε ntεm a, yεnfa no mfi 0 ho. Sε nhwɛso >>> closest_integer (((""10"") 10 >>> closest_integer (((""15.3"") 15 Hwεn: Sε yεnfa no mfi 0 ho a, εkyerε sε sε asεm a εkyerε no ne nsεm a εbεyε ntεm a ɛbɛn no, nea εwכ no na εbεsan de no aba no ne nea εbεyε ntεm a εbεyε ntεm a εbεyε ntεm koraa afi 0 ho. Sε nhwɛso no, closest_integer (((""14.5"") yε 15 na closest_integer ((-14.5"") yε no -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,aka_Latn,python,"
def make_a_pile(n):
    """"""Sɛ wode adansedie a ɛyɛ a, ɛsɛ sɛ woyɛ aboɔ a ɛwɔ mpuntuo n mu. Aboɔ a ɛwɔ mpuntuo a edi kan no mu no yɛ: - a edi hɔ no yɛ anohyetoɔ a ɛnni mpuntuo. - a edi hɔ no yɛ anohyetoɔ a ɛnni mpuntuo a n yɛ anohyetoɔ. Ma aboɔ a ɛwɔ mpuntuo biara mu no dodow mmra wɔ ɔfã biara mu, a emu no, nea ɛwɔ index i no gyina hɔ ma aboɔ a ɛwɔ mpuntuo no mu no dodow (i+1).""""""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,aka_Latn,python,"
def words_string(s):
    """"""Wo nsa bɛka nsɛmfua a wɔde nkontabuo anaa ntentan atetew. Wo adwuma ne sɛ wobɛkyekyɛ nsɛmfua no mu na woasan de nsɛmfua no bi aba. Sɛnkyerɛnne no bi ne: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,aka_Latn,python,"
def choose_num(x, y):
    """"""Saa adwuma yi fa akontabuo a ɛyɛ papa x ne y na ɛde akontabuo a ɛboro so a ɛmu yɛ pɛ a ɛwɔ [x, y] mu no ma. Sɛ akontabuo a ɛte saa nni hɔ a, ɛnde ɛsɛ sɛ adwuma no de -1. SƐ nhwɛso: choose_num (a) 12, 15) = 14 choose_num (a) 13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,aka_Latn,python,"
def rounded_avg(n, m):
    """"""Woma wo akontaahyɛde a ne kɛse yɛ n ne m, na w'adwuma ne sɛ wobɛte akontaahyɛde a ne kɛse yɛ n ne m (a n ne m ka ho) no mu biara nkyekyɛmu. Sɛ n yɛ kɛse a, fa -1.""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,aka_Latn,python,"
def unique_digits(x):
    """"""Sɛ wɔde anodisɛm a wɔato din ""numeral"" a, nea ɛwɔ mu no yɛ a wɔhwɛ sɛ ɛrenya nkyerɛwee biara a ɛkyerɛ sɛ ɛyɛ anodisɛm no.""""""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,aka_Latn,python,"
def by_length(arr):
    """"""Sɛ wode anansesɛm bi a, fa anansesɛm no mu nsɛm a ɛwɔ 1 ne 9 ntam no toto ho, na fa nea efi mu ba no sesa, na fa nkyerɛwde biara hyɛ din a ɛne no hyia no ananmu. Sɛ nhwɛso no: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sortie arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""] Sɛ anansesɛm no nni hwee a, fa bi ma: arr = [] return [] Sɛ anansesɛm no wɔ akontaahyɛde biara a, mfa no nyɛ hwee: arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [55,1] return ['One' 1,] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,aka_Latn,python,"
def f(n):
    """"""Fa f yɛ adwuma a fa n yɛ parameter, na ɛde list a ne kɛse yɛ n, a enti sɛ index i yɛ factor of i a, ne nyinaa yɛ pɛ, anaa sɛ ɛnyɛ saa a, ɛyɛ 1 kɔsi i nyinaa. i fi 1. factor of i yɛ 1 kɔsi i nyinaa mmɔho.""""""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,aka_Latn,python,"
def even_odd_palindrome(n):
    """"""Sɛ wode ɔfã bi a ɛyɛ ɔfã a, ma no nsesae a emu biara wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho.""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,aka_Latn,python,"
def count_nums(arr):
    """"""Kyerɛw adwuma a wɔfrɛ no count_nums a fa akontabuo a emu biara wɔ nkyekyɛmu a ɛboro 0 so na ɛde nkontabuo a emu biara wɔ nkyekyɛmu a ɛboro 0 ba. Sɛ nkyekyɛmu no yɛ negative a, ɛnneɛ ne nkyekyɛmu a edi kan a ɛwɔ nkontabuo no mu no bɛyɛ negative: sɛ nhwɛso no, -123 wɔ nkontabuo a ɛboro -1, 2, ne 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,aka_Latn,python,"
def move_one_ball(arr):
    """"""Sɛ w'anya 'arr' a ɛwo N integers arr[1], arr[2], ..., arr[N] a, w'ahyehyɛ no mu no, wɔbɛhyehyɛ no so. Wo adwuma ne sɛ wobɛhu sɛ ɛyɛ yie sɛ wobɛhyehyɛ no so a ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛreyɛ sɛ ɛreyɛ sɛ ɛreyɛ sɛ ɛreyɛ sɛ ɛreyɛ sɛ ɛreyɛ sɛ ɛreyɛ sɛ ɛreyɛ sɛ ɛreyɛ""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,aka_Latn,python,"
def exchange(lst1, lst2):
    """"""W'ɛwɔ nsunsuansoɔ yi mu no, wobɛdi dwuma a ɛgye nnumeroɔ mmienu, na ɛbɛkyerɛ sɛ ɛyɛ yie sɛ wobɛsesa emu nnoɔma no mu ama emu biara ayɛ nnumeroɔ a ɛmu yɛ pɛ. Nkyɛnsoɔ a wɔsesa no wɔ nnumeroɔ a ɛwɔ lst1 ne lst2 ntam no. Sɛ ɛyɛ yie sɛ wobɛsesa emu biara mu nnoɔma no mu ama emu biara ayɛ pɛ a, san fa ""YES"" ma. Sɛ ɛnte saa a, san fa ""NO"" ma. Sɛn ne: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Ɛwɔ sɛ input lists no bɛyɛ non-empty. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,aka_Latn,python,"
def histogram(test):
    """"""Sɛ wɔde ɔkasamu a ɛkyerɛ nsensanee a wɔtetew mu nsɛmfua a, fa nkyerɛwde a ɛtaa si so dua no kyerɛ no. Sɛ nkrataa bebree wɔ hɔ a, fa wɔn nyinaa kyerɛ no.""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,aka_Latn,python,"
def reverse_delete(s,c):
    """"""Asԑmmisa a ԑwɔ hɔ ma yԑn ne s ne c, ԑsԑ sԑ yԑyi nkrataa a ԑte sԑ nkrataa biara a ԑwɔ c no mu no nyinaa, afei yԑhwԑ sԑ nea ԑbefi mu aba no yԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑm a ԑyԑ nsԑm a ԑyԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm no yԑ nsԑm a ԑyԑ nsԑm a ԑyԑm no yԑ nsԑm a ԑyԑ nsԑm no yԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm a ԑyԑ nsԑm no yԑm no yԑ nsԑ nsԑm a ԑyԑ nsԑm no yԑ nsԑm no yԑ nsԑm a ԑyԑ nsԑ nsԑm a ԑyԑ nsԑ nsԑm no yԑm no yԑ nsԑm no yԑ nsԑm no yԑm no yԑ nsԑ nsԑm.""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,aka_Latn,python,"
def odd_count(lst):
    """"""Sɛ wo de string a, digit biara na ɛwɔ mu a, ma no nkyerɛwde. Emu biara a ɛwɔ output no mu no yɛ ""odd elements a ɛwɔ input no string no mu"". a, ɛsɛ sɛ wɔde i no nyinaa hyɛ odd digit a ɛwɔ input no string no mu no ananmu. >>> odd_count['1234567']) [""odd elements 4n the str4ng 4 of the 4nput.""] >>> odd_count['3',""111111""]) [""odd elements 1n the str1ng 1 of the 1nput."", ""odd elements 8n the str8ng 8 of the 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,aka_Latn,python,"
def minSubArraySum(nums):
    """"""Sɛ wode anansesɛm a wɔaka no di dwuma a, hwehwɛ sɛ wo bɛhunu sɛ nea ɛwɔ anansesɛm no mu no nyinaa yɛ nsesae.""""""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,aka_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Wode abura a ne tenten yɛ ɔpepepem baako na ɛgyina hɔ ma abura no. Abura biara gyina hɔ ma abura baako, na 1 biara a ɛwɔ ɔfasuo no mu gyina hɔ ma nsuo baako. Abura biara wɔ bokiti a ɛne no hyia a wotumi de twe nsuo fi mu, na bokiti no nyinaa wɔ ahoɔden korɔ. Wo adwuma ne sɛ wode bokiti no bɛpra abura no. Fa mpɛn dodow a ehia sɛ wode ma abura no.""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,aka_Latn,python,"
def sort_array(arr):
    """"""Wɔ saa Kata yi mu no, ɛsɛ sɛ wo toto nnipakan a ɛnnyɛ negative wɔ wɔn binary nkyerɛmu no mu wɔ asensɛn mu. Sɛ wo wɔ bebree a, fa wɔ ɔpepepem so. Ɛwɔ sɛ woyɛ no saa: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,aka_Latn,python,"
def select_words(s, n):
    """"""Sɛ wo de string s ne natural number n ama wo a, wɔama wo dwumadi sɛ yɛ adwuma bi a ɛbɛsan de nsɛmfua a ɛwɔ string s mu a ɛnne nkyerɛwde n pɛ no nyinaa atwerɛ, na nsɛmfua yi ada wɔ string s mu. Sɛ string s yɛ hwee a, ɛnde na ɛsɛ sɛ yɛ de list hunu bi na etwerɛ. SƐ nhwɛsoɔ: select_words ""Mary had a little lamb"", 4) ==> [""little""] select_words ""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words ""simple white space"", 2) ==> [] select_words ""Hello world"", 4) ==> [""world""] select_words ""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,aka_Latn,python,"
def get_closest_vowel(word):
    """"""Woama wo asɛm. Wo adwuma ne sɛ wobɛhu ɛnne a ɛbɛn no paa a ɛda ntweaseɛ mmienu ntam wɔ asɛm no nifa so (ɔkasamu). ɛnne a ɛwɔ mfitiaseɛ ne awieɛ no nka ho. Fa ɛnne a ɛnni hɔ no san bra. Wubetumi agye atom sɛ ɛnne a wɔde ama no no fa Borɔfo nkyerɛwde nko ara.""""""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,aka_Latn,python,"
def match_parens(lst):
    '''Wode ahama mmienu a emu biara yɛ ntweasoɔ a abue '(' anaa ntweasoɔ a ɛtwa ') ' na ɛwɔ hɔ. Wo adwuma ne sɛ wobɛhwɛ sɛ wubetumi de ahama mmienu no abɔ ho ama no ayɛ yie. Sɛ ntweasoɔ S yɛ yie a, ɛnneɛ sɛ ntweasoɔ S nyinaa yɛ yie a, ɛno ara na ɛbɛtumi ayɛ yie. Sɛ nhwɛsoɔ: sɛ ɛtumi yɛ ntweasoɔ pa a, fa 'Yɛɛ' na sɛ ɛtumi yɛ ntweasoɔ pa a, fa 'Dabi' na sɛ ɛtumi yɛ ntweasoɔ pa a, fa 'Dabi'.'''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,aka_Latn,python,"
def maximum(arr, k):
    """"""Sɛ wode anidie a ɛyɛ k a ɛboro k wɔ anidie a ɛyɛ k mu no ma a, ma no nya ntentan a wɔasiesie a ne tenten yɛ k a ne dodow yɛ k wɔ anidie a ɛwɔ arr mu no. Sɛnsεm1: Akwan a wofa so: arr = [-3, -4, 5], k = 3 Akwan a wofa so: [-4, -3, 5] Sɛnsεm2: Akwan a wofa so: arr = [4, -4, 4], k = 2 Akwan a wofa so: [4, 4] Sɛnsεm3: Akwan a wofa so: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Akwan a wofa so: [2] Hwε sε: 1.""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,aka_Latn,python,"
def solution(lst):
    """"""Sɛ wode integers a ɛnnyɛ hwee no bɛhyɛ hɔ a, ma no nsunsuanso a ɛwɔ ne nyinaa mu a ɛwɔ ne nyinaa mu no.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,aka_Latn,python,"
def add_elements(arr, k):
    """"""Sɛ wode anansesɛm a ɛnyɛ korɔn bi a ɛne anansesɛm a enni korɔn bi a, ma nneɛma a ɛwɔ anansesɛm no mu no dodow a ɛboro nkrataa a wɔadi kan a wɔadi kan no mu abien.""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,aka_Latn,python,"
def get_odd_collatz(n):
    """"""Sɛ wode adansedie a ɛyɛ a, ma no nya ahyehyεe a ne nyinaa yɛ anane ne nea ԑwɔ collatz. Collatz nsusueε no yε nsusueε a wɔkyerεkyerε no saa kwan yi so: fa adansedie biara a εwɔ n ho. Afei, yε nya nsusueε biara a εwɔ kan nsusueε no mu εne nea edi so no. Sɛ nsusueε a edi so no yɛ anane a, nsusueε a edi so no yɛ nea edi so no fã. Sɛ nsusueε a edi so no yɛ anane a, nsusueε a edi so no yɛ nea edi so no mprɛnsa a ɛne nea edi so no ka ho 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,aka_Latn,python,"
def valid_date(date):
    """"""Wo de, ɛsɛ sɛ w'akyerɛw adwuma bi a ɛhwehwɛ da pɔtee bi mu na ɛde True san ba sɛ da no yɛ papa anaa False. Da no yɛ papa sɛ nea edidi so yi nyinaa yɛ papa: 1. Da pɔtee no nyɛ hunu. 2. Nna dodow no nyɛ kaakyire 1 anaa ɛboro nna 31 wɔ bosome 1,3,5,7,8,10,12. Na nna dodow no nyɛ kaakyire 1 anaa ɛboro nna 30 wɔ bosome 4,6,9,11. Na nna dodow no nyɛ kaakyire 1 anaa ɛboro nna 29 wɔ bosome 2. 3. Ɛnsɛ sɛ bosome no yɛ kaakyire 1 anaa ɛboro nna 12. 4. Ɛnsɛ sɛ da no yɛ wɔ ɔkwan yi so: mm-dd-yyyy sɛ nhwɛso: valid_date (wɔ mu)""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,aka_Latn,python,"
def split_words(txt):
    '''Sɛ w'anya nsɛmfua a, fa nsɛmfua a wɔakyekyɛ wɔ baabi a ɛnni hɔ no ma, sɛ baabi a ɛnni hɔ wɔ nsɛmfua no mu a, ɛsɛ sɛ wo de kyekyɛ wɔ ntweaseɛ so, sɛ ntweaseɛ nni hɔ a, ɛsɛ sɛ wode nkrataa nketewa a ɛnni hɔ no ma wɔ nkyerɛwde no mu, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 Mfatoho ahorow split_words (hello world) â -> [""hello world!""] split_words (hello,world!"") â -> [""hello world!""] split_words (abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,aka_Latn,python,"
def is_sorted(lst):
    '''Sɛ wo wɔ nnumero a, fa di dwuma sɛ wɔ wɔ di dwuma wɔ ɔsorosoro mu anaa sɛ wɔ nni dwuma wɔ ɔsorosoro mu. Sɛ wo wɔ nnumero koro no ara a ɛboro baako a, fa di dwuma sɛ False. Mfa no sɛ adansekurum biara nni hɔ na integers nko ara.'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,aka_Latn,python,"
def intersection(interval1, interval2):
    """"""Sɛ nhwɛso no, wɔama wo ntwammuo mmienu, a ntwammuo biara yɛ anansesɛm mmienu. Sɛ nhwɛso no, ntwammuo = (fiase, awieɛ) = (1, 2). Ntwammuo a wɔde ama no yɛ akyereɛ a ɛkyerɛ sɛ ntwammuo no (fiase, awieɛ) fa mfitiaseɛ ne awieɛ nyinaa ho. Wɔ bere biara mu no, wɔgye di sɛ ne mfiaseɛ yɛ ketewa anaa ɛtesɛ ne awieɛ. Wo adwuma ne sɛ wobɛhu sɛ ntwammuo mmienu yi ntwammuo no ntwammuo tenten yɛ ɔkan a ɛdi kan anaa. Sɛnkyerɛnne no, ntwammuo (1, 3), (2, 4) ntwammuo no ntwammuo a ne tenten yɛ 1, a ɛnnyɛ ɔkan a ɛdi kan. Sɛ ntwammuo no ntwammuo tenten yɛ ɔkan a, dan ""YES"", anyɛ saa a dan ""NO"". Sɛ ntwammuo mmienu no ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwammuo ntwam""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,aka_Latn,python,"
def prod_signs(arr):
    """"""Woma wo anohyԑsoɔ a ԑfa anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑsoɔ a ԑwɔ anohyԑ.""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,aka_Latn,python,"
def minPath(grid, k):
    """"""Sɛ w'anya grid a ɛwɔ ahyɛnsodeɛ N ne N ne nsoroma (N >= 2) ne positive integer k a, ɔdan biara wɔ hɔ a ɛkura deɛ ɛhia. N'abodin biara a ɛwɔ [1, N * N] a w'aka ho no pue wɔ grid no nkyea no mu pɛnkoro pɛ. Wobɛtumi afi ase wɔ ɔdan biara mu, na wɔ ɔdan biara mu no, wobɛtumi akɔ nkyea a ɛbɛn no biara mu, kyerɛ sɛ, wobɛtumi akɔ nkyea a ɛbɛn wo a ne nkyɛnmu ne wo deɛ no. Hyɛ no nsow sɛ ɔkwan a ɛbɛn k no kyerɛ sɛ wobɛkɔ nkyea k (a ɛnnyɛ sɛ emu biara yɛ soronko). WUNTUMI kwan no mu. Kwan a A (ɔwɔ tenten k) no yɛ ketewa sen kwan a B (wɔ tenten k) wɔ mu, sɛ yɛkyerɛ ɔdan no mu nneɛma a ɛhia wɔ nkyea a A ne B (ma yɛfrɛ no lA_st ne lA_st), a wɔ kasa mu no, ɛyɛ ketewa sen lA_st, a ɛkyerɛ sɛ, wɔ akwan foforɔ no mu no, ɔdan biara wɔ hɔ a ɛbɛn k. Wubɛn biara mu no mu no, wobɛtumi afi ase wɔ hɔ, enti wobɛtumi kɔ mu: [A = 1, j, k = 1, j = 1, j = 4, k = j = j = j, k = j = j = j = j = j, k = j = j = j = j = j = j, k = j = j = j = j = j = j, k = j = j = j = j = j = j, k = j = j = j = j = j, k = j = j = j = j = j, k = j = j = j = j = j, k = j = j = j = j, k = j = j = j = j = j, k = l = l = l = l = l = l = l = l = l = l = l = l = l = l = l = l, l = l = l = l = l = l = l = l = l = l = l = l, l = l = l = l = l = l = l = l = l = l = l, l = l = l = l = l""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,aka_Latn,python,"
def tri(n):
    """"""Obiara nim Fibonacci a w'asua no yiye wɔ nkron a atwam no mu. Nanso nea nnipa nnim ne Tribonacci a w'asusu ho no. Tribonacci a w'asusu ho no gyina nsunsuanso yi so: tri(1) = 3 tri(n) = 1 + n / 2, sɛ n yɛ mpo a. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), sɛ n yɛ anikan. Sekai: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Wɔama wo akontaahyɛde a ɛnnyɛ negative, na ɛsɛ sɛ wosan n kan n + 1 a ɛwɔ Tribonacci a w'asusu ho no. Sekai: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,aka_Latn,python,"
def digits(n):
    """"""Sɛ wode ɔfã a ɛyɛ ɔfã pa bi a, fa n ma no. Sɛ n'afã no nyinaa yɛ mpo a, fa 0 ma no. Sɛ nhwɛso no: n'afã 1 == n'afã 1 == n'afã 4 == n'afã 0 == n'afã 235 == n'afã 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,aka_Latn,python,"
def is_nested(string):
    '''Yɛ adwuma bi a gye akontaahyɛde a ɛkura ntini a ɛtwe ntini anan mu nko ara. Ɛsɛ sɛ adwuma no san True sɛ na brackets a ɛwɔ mu no mu biako anaa nea ɛboro saa wɔ mu a. is_nested (('[[]]') â -> True is_nested (('[]]]]]]]]] [[[[[[[]') â -> False is_nested (('[][]') â -> False is_nested (('[]') â -> False is_nested (('[[]]') â -> True is_nested ([[]]') â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,aka_Latn,python,"

def sum_squares(lst):
    """"""Yԑde nkrataa a' yԑama wo no. Ehia sԑ wo de nkrataa a' yԑama wo no mu nsԑm a' ԑwɔ kar mu no ka ho, na wo de nkrataa no mu nsԑm biara to nea ԑwɔ soro no ho.""""""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,aka_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Yɛ adwuma bi a sɛ nea etwa to wɔ nkyerɛwde a ɛwɔ ahoma bi mu yɛ nkyerɛwde a ɛwɔ nkyerɛwde no mu na ɛnnyɛ asɛmfua bi fã a, ɛyɛ True na sɛ ɛnte saa a ɛyɛ False. SƐ WƆDE HO AHWƐ HWƐ A: ""asɛmfua"" yɛ nkyerɛwde a wɔde mpaemu apaapae.'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,aka_Latn,python,"
def can_arrange(arr):
    """"""Yɛ adwuma bi a ɛde nneɛma a ɛkyɛn so a ɛnnyɛ kɛse anaa ɛtesɛ nea edi kan no ho index ma. Sɛ saa nneɛma no bi nni hɔ a, yɛ de -1.""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,aka_Latn,python,"
def largest_smallest_integers(lst):
    '''Yɛ adwuma bi a ɛde tuple (a, b) ba, a 'a' yɛ negative integers no mu kɛse, na 'b' yɛ positive integers no mu ketewa. Sɛ negative anaa positive integers biara nni hɔ a, fa None ma no. Sekai: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None)'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,aka_Latn,python,"
def compare_one(a, b):
    """"""Yɛ adwuma a ɛgye akontabuo, floats, anaa ahoma a ɛgyina hɔ ma adane a ɛwɔ hɔ, na ɛde nea ɛkyɛn so no ma wɔ ne su no mu. Sɛ ne su no yɛ pɛ a, ɛde None ma. Hyɛ no nso: Sɛ wɔde adane a ɛwɔ hɔ no yɛ sɛ ahoma a, nea ɛkyɛn so no betumi ayɛ . anaa , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,aka_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Susuw sɛ ebia wɔtumi kyerɛw ɔpepe a wɔde ama no sɛ nnipa nnan a wɔn ano yɛ den a wɔbom yɛ pɛ no ano a wɔbom yɛ pɛ no.""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,aka_Latn,python,"
def special_factorial(n):
    """"""Brazilfo no kyerɛ sɛ: brazilian_factorial{n} = n! * (n-1)! * (n-2)! * ... * 1! baabi a n > 0 Sɛ nhwɛso no: >>> special_factorial{n}4) 288 Adwuma no bɛgye akontaahyɛde a edi mu sɛ input na ɛsɛ sɛ ɛde saa akontaahyɛde yi special factorial no ma.""""""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,aka_Latn,python,"
def fix_spaces(text):
    """"""_Sample-3ing a, fa nsesaeɛ a ɛwɔ mu no nyinaa hyɛ ase, na sɛ string no wɔ nsesaeɛ a ɛboro 2 a ɛtoa so a, fa nsesaeɛ a ɛtoa so no nyinaa hyɛ - fix_spaces ((""Example"") == ""Example"" fix_spaces ((""Example1"") == ""Example_1"" fix_spaces (((""Example2"") == ""_Example_2"" fix_spaces ((""Example 3"") == ""_Example-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,aka_Latn,python,"
def file_name_check(file_name):
    """"""Yɛ adwuma bi a fa ɔfã a ɛkyerɛ ɔfã din, na sɛ ɔfã din no yɛ papa a, ɛde 'Yiw' ma, na sɛ ɛnte saa a, ɛde 'Dabi' ma. Wɔbu ɔfã din sɛ ɛyɛ papa sɛ nea edidi so yi nyinaa yɛ papa: - Ɛnsɛ sɛ ɛboro nkontaahyɛde mmiɛnsa ('0'-'9') wɔ ɔfã din no mu. - Ɔfã din no wɔ dot baako pɛ '.' - Ɛnsɛ sɛ substring a ɛwɔ dot no anim yɛ hwee, na ɛsɛ sɛ efi ase wɔ Latin alphabet nkyerɛwde bi so ('a'-'z' ne 'A'-Z'). - Substring a ɛwɔ dot no akyi no ɛsɛ sɛ ɛyɛ nea edidi so yi mu baako: ['txt', 'exe', 'lld'] Examples: file_name_check""{example.txt.} # => 'Yiw' => 'filename_check""{example.dll1} # => 'Dabi' (ɛwɔ sɛ ne din no fi ase wɔ Latin alphabet nkyerɛwde bi so)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,aka_Latn,python,"


def sum_squares(lst):
    """""""" Dwumadi yi bɛfa integers. Sɛ entries nyinaa wɔ list no mu a, function no bɛtwe integer entry no square sɛ ne index no yɛ 3 bebree na ɛbɛ cube integer entry no sɛ ne index no yɛ 4 bebree na ɛnyɛ 3 bebree. Dwumadi no renyɛ entries a ɛwɔ list no mu a ne index no nyɛ 3 anaa 4 bebree no. Afei function no bɛsan de entries nyinaa aka ho. Example: For lst = [1,2,3] the output should be 6 For lst = [] the output should be 0 For lst = [-1,-5,2,-1,-5] the output should be -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,aka_Latn,python,"
def words_in_sentence(sentence):
    """"""Woama wo string a ɛkyerɛ asɛm bi, nsɛmfua bi wɔ saa sentensi no mu a wɔde mpaemu atete mu, na ɛsɛ sɛ wo san de string a ɛkyerɛ nsɛmfua a ɛwɔ mfitiaseɛ no mu, a ne tenten yɛ akontaahyɛde, nsɛmfua a ɛwɔ new string no mu no nhyehyɛeɛ no yɛ pɛ te sɛ mfitiaseɛ no. Example1: Input: sentence = ""This is a test"" Output: ""is"" Example2: Input: sentence = ""let go for swimming"" Output: ""go for"" Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,aka_Latn,python,"
def simplify(x, n):
    """"""Wo dwumadie ne sɛ wobɛte dwuma bi ase a ɛbɛteɛ nsεmfua x * n. Saa adwuma no de True ma sε x * n yɛ akontaahyɛde a εyε no nyinaa na False nso. Nkyerεkyerεmu a edidi so yi na ɛwɔ hɔ, <numerator>/<denominator>, a εyε no nyinaa ne akontaahyɛde ne dinominer no nyinaa yε akontaahyɛde a εyε no nyinaa. Wobɛtumi asusu sε x, ne n yε akontaahyɛde a εfata, na εnfa hwee nka ho sε dinominer. simplify ""1/5"", ""5/1"") = True simplify ""1/6"", ""2/1"") = False simplify ""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,aka_Latn,python,"
def order_by_points(nums):
    """"""Kyerɛw adwuma bi a ebegu anohyeto a wɔde ama no wɔ anohyeto a ɛrekɔ soro mu a ɛne wɔn nkontabuo no hyia. SƐ nkontabuo a ɛrekɔ soro no yɛ bebree a, fa wɔn nkontabuo no di dwuma wɔ mfitiase no ara mu. SƐ nhwɛso no: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,aka_Latn,python,"
def specialFilter(nums):
    """"""Kyerɛw adwuma bi a fa akontabuo mu nnumde yɛ input na ɛde nneɛma a ɛwɔ akontabuo no mu a ɛboro 10 na emu kan ne nea etwa to yɛ anohyeto (1, 3, 5, 7, 9). Sekai: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,aka_Latn,python,"
def get_max_triples(n):
    """"""Woama wo akontabuo a ɛyɛ papa. Wowɔ sɛ woyɛ akontabuo a ne tenten yɛ n. Ma obiara a ɔwɔ akontabuo a ne tenten yɛ n. a[i] = i * i - i + 1. Ma no nkyerɛ ne nkontabuo a ɛyɛ mprɛnsa (a[i], a[j], a[k]) a a[i] < j < k, na a[i] + a[j] + a[k] yɛ mprɛnsa no mu baako.""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,aka_Latn,python,"
def bf(planet1, planet2):
    '''Nsoromma awotwe na ɛwɔ yɛn owia a ɛwɔ yɛn amansan yi mu: nea ɛbɛn owia paa no yɛ Mercury, nea edi hɔ no yɛ Venus, afei Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Kyerɛw dwumadi bi a fa nsoromma din mmienu sɛ ahoma planet1 ne planet2. Ɛsɛ sɛ dwumadi no de nsoromma a wɔn akwan nyinaa wɔ planet1 ne planet2 akwan ntam no ba. Ɛsɛ sɛ dwumadi no de nsoromma a enni mu ba sɛ planet1 anaa planet2 nyɛ nsoromma din a ɛfata.'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,aka_Latn,python,"
def sorted_list_sum(lst):
    """"""Kyerɛw adwuma bi a gye ahoma a wɔaka ho asɛm sɛ parameter, na yi ahoma a wɔn tenten yɛ soronko no fi mu, na ɛde nea efi mu ba no ma wɔadi ne kan. Nkyerεkyerεmu no yɛ ahoma a wɔaka ho asɛm bere nyinaa na ɛnyɛ nnwoma a wɔaka ho asɛm, na ebetumi aka nea ɛboro so. Nhyehyɛeɛ no mu no, ɛsɛ sɛ wɔtwe ahoma no mu biara tenten, na ɛsɛ sɛ wode saa mmara no di dwuma. Sɛ nsɛmfua mmienu a ɛwɔ tenten koro no ara na ɛreyi ahoma no adi a, fa alphabet no di dwuma. Adwuma no de ahoma no nyinaa bɛhyɛ da adi wɔ ɔkwan a wɔahyehyɛ so. Wobɛtumi aka sɛ nsɛmfua no nyinaa tenten bɛyɛ pɛ. SƐ nhwɛso: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,aka_Latn,python,"
def x_or_y(n, x, y):
    """"""Nhyehyεeε a ne tiawa ne sε yεn a yεn nimdeε yε nsεm no, yεn a yεn nimdeε yε nsεm no.""""""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,aka_Latn,python,"
def double_the_difference(lst):
    '''Sɛ wo de nnumeroɔ bi a, ma no nsɛsoɔ a ɛwɔ nnumeroɔ a ɛwɔ list no mu no. Ma no nsɛsoɔ a ɛnni negative anaa ɛnnyɛ integers no.'''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,aka_Latn,python,"
def compare(game,guess):
    """"""Me dwen sε yεn nyinaa kae saa atenεm no bere a w'ate biribi a w'atwɛn no akyɛ no ho nsunsuanso no. Nkate ne nsusuiε a w'adwen ho saa bere no yε nea ɛho hia paa sε wo twerεtohɔ ne ntotoho. Wo adwuma ne sε wubehu sε obi ahu nsunsuanso a efi nsεm pii a ɛne no hyiae no. Woma wo nkataho ne nsunsuanso a εne no hyiae no mu mmienu a ne tenten yɛ pɛ, a nkataho biara da nsunsuanso a ɛne no hyiae no adi. Fa nkataho a ne tenten yɛ pɛ a ɛkyerɛ sɛnea akyirikyiri biara no na εne no hyiae no san ba. Sε w'adi ho dwuma yiye a, ne bo yε 0, na sε ɛnte saa a, ne bo yε nsonsonoe a enni mu biara a ɛda nsunsuanso no ne nkataho no ntam. Sε nhwɛso: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,aka_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Wobɛ ma wo class din (a string) ne extensions din. extensions no bɛ fa de akɔhyɛ classes foforo mu. Extension no ahoɔden yɛ nea edidi so yi: Ma CAP nyɛ nkyerɛwde akɛse din no mu, na ma SM nyɛ nkyerɛwde nketewa din no mu, ahoɔden no nam kasamu CAP - SM no so. Ɛsɛ sɛ wo hwehwɛ a ɛkyɛn so na wosan de string no kɔma wɔ saa kwan yi so: ClassName.StrongestExtensionName. Sɛ w'anya extensions mmienu anaa bebree a ahoɔden yɛ pɛ a, ɛsɛ sɛ wo paw nea edi kan wɔ list no mu. SƐ mfatoho no, sɛ wɔde ""Slices"" ama wo sɛ class ne extensions din no: ['SEviviRNGSliCes', 'Cheese', 'StuFfed'] a, ɛsɛ sɛ wosan 'Slices.SEviRNGCes' 'mySviRNGCes' - (mySviRNGCes' is the strongest extension: 'AA', ['Beast_class_Strongest'], 'AA' for example.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,aka_Latn,python,"
def cycpattern_check(a , b):
    """"""Wode nsɛmfua 2 ma wo. Wopɛ sɛ wosan True sɛ asɛmfua a ɛtɔ so mmienu no anaa ne nsesae biara yɛ substring wɔ asɛmfua a edi kan no mu cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,aka_Latn,python,"
def even_odd_count(num):
    """"""Sɛ wode ɔfra a, ma no nsensan a ɛmu nsensan ne nsensan a ɛmu nsensan.""""""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,aka_Latn,python,"
def int_to_mini_roman(number):
    """"""Sɛ wode ɔfã bi a ɛyɛ pa ma a, fa ne Roman numerals sɛ string, na fa no ma no sɛ lowercase.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,aka_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Sɛ n'afanan nyinaa yɛ mporɔn-mu-ni-mienu a, de no ma sɛ n'afanan nyinaa yɛ mporɔn-mu-ni-mienu, na sɛ ɛnte saa a, de no ma sɛ ɛyɛ atoro.'''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,aka_Latn,python,"
def find_max(words):
    """"""Kyerɛw dwumadie bi a gye ahoma a wɔaka ho asɛm. Ahoma no mu nsɛmfua ahorow. Ma asɛmfua a ɛwɔ nkyerɛwde soronko dodow no. Sɛ ahoma bebree wɔ nkyerɛwde soronko dodow a, ma nea edi kan wɔ nkyerɛwde a wɔaka ho asɛm no mu no mmra.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,aka_Latn,python,"
def eat(number, need, remaining):
    """"""Wo yɛ akokɔ a ɔkɔm de no, na woadi atokoɔ bebree dada, nanso seesei ɛsɛ sɛ wo di atokoɔ bebree de wie da no aduan. ɛsɛ sɛ wosan kyerɛ ɔfã bi a ɛne [total number of eaten carrots after your meals, the number of carrots left after your meals] sɛ atokoɔ a aka no nnɔɔso a, wobɛdi atokoɔ a aka no nyinaa, nanso ɛkɔm de wo. Sɛnkyerɛnne: *di ((5, 6, 10) -> [11, 4] *di ((4, 8, 9) -> [12, 1] *di ((1, 10, 10) -> [11, 0] *di ((2, 11, 5) -> [7, 0] Nsakrae: @number: integer the number of carrots that you have eaten. @need:: integer the number of carrots that you need to eat. @remaining:: remaining integer the number of remaining carrots in stock Constrain: *0= <= 0 *0= <= 1000 *0= <= 1000 remaining needs <= 1000 Have fun = 1000:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,aka_Latn,python,"
def do_algebra(operator, operand):
    """"""Sɛ wode operand mmienu a, nea edi kan no yɛ algebra mu nsɛntitiriw, na nea ɛtɔ so mmienu no yɛ integers. Fa list mmienu a wɔde ama no yɛ algebra mu nsɛntitiriw na fa kyerɛsɛ no ho nsɛntitiriw. Basic algebra operation: Addition ( +) Subtraction ( - ) Multiplication ( *) Floor division ( //) Exponentiation ( ** Example): operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 Note: The length of list of operator is equal to the length of operand list minus one. Operand is a list of non-negative integers. Operator list has at least one operator, and operand list has at least two operands. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,aka_Latn,python,"
def solve(s):
    """"""Wo de string s. s[i] yɛ letter, na wob[sesa n'asɛm no firi ase kɔ soro anaa vice versa, anaa wob]sesa no saa ara. Sɛ string no nni letters biara a, wob[sesa string no. Ɛsɛ sɛ adwuma no san de string a w]anya no. Example solve{""1234"") = ""4321""{""ab"") = ""AB""{""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,aka_Latn,python,"
def string_to_md5(text):
    """"""Sɛ wɔde 'text' ma a, fa ne md5 hash a ɛne no yɛ pɛ no ma no. Sɛ 'text' yɛ a, fa None ma no. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,aka_Latn,python,"
def generate_integers(a, b):
    """"""Sɛ wode anokwafo a wɔn ho yɛ anokwafo a a, na wo de anokwafo a wɔn ho yɛ anokwafo a, na wo de anokwafo a wɔn ho yɛ anokwafo a, na wo de anokwafo a wɔn ho yɛ anokwafo a, na wo de anokwafo a wɔn ho yɛ anokwafo a, na wo de anokwafo a wɔn ho yɛ anokwafo a, na wo de anokwafo a wɔn ho yɛ anokwafo a, na wo de anokwafo a wɔn ho yɛ anokwafo a, na wo de anokwafo a wɔn ho yɛ anokwafo a, na wo de anokwafo a wɔn ho yɛ anokwafo a, na wo de anokwafo a wɔn ho yɛ anokwafo a, na wo de anokwafo a wɔn ho yɛ anokwafo a, wɔ wɔ a, wɔ a, wɔ a, wɔ a, wɔ a, wɔ a, wɔ a, wɔ a, wɔ a, wɔ a, wɔ a, wɔ a, wɔ a, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ, wɔ,""""""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
