task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,uig_Arab,php,"<?php
//.بىر چەكلىمە//ئىككى نومۇرنىڭ بىرىنىڭ بىرىگە يېقىنراق ياكى يېقىنراق ئىكەنلىكىنى سىناپ بېقىڭ، ياكى بىرەر نومۇرغا يېقىنراق ياكى يېقىنراق ئىكەنلىكىنى سىناپ بېقىڭ.// >>> has_close_elements(array(1.0, 2.0, 3.0), 0.5)
// false
// >>> has_close_elements(array(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)
// true
function has_close_elements($numbers, $threshold) {
","function has_close_elements($numbers, $threshold) {
    $count = count($numbers);
    for ($i = 0; $i < $count; $i++) {
        for ($j = $i + 1; $j < $count; $j++) {
            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {
                return true;
            }
        }
    }
    return false;
}","function candidate(...$args) {
    return has_close_elements(...$args);
}

function test(): void {
    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.3) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.05) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0), 0.95) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0), 0.8) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0), 0.1) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1), 1.0) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1), 0.5) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_1,uig_Arab,php,"<?php
//كىرگۈزگۈچ سىتونىدىكى بوشلۇقلارنى چۇشۇرمەڭ.//ھەربىر گۇرۇپپا تەڭپۇڭ (ھەربىر ئوچۇق گۇرۇپپا مۇۋاپىق ھالدا يېپىلىدۇ) ، ئۇلار بىر-بىرىگە قوشۇلۇپ كەتمەيدۇ .//بۇلارنى ئايرىم سەترىگە ئايلاندۇرۇپ سەترىنىڭ تىزىملىكىنى قايتۇرىدۇ.//بۇ فۇنكسىيەگە كىرگۈزگەن سىتون بولسا بىر قانچە گۇرۇپپا يۇشۇرۇنغان بوغۇملارنى ئۆز ئىچىگە ئالىدۇ. سىزنىڭ مەقسىتىڭىز// >>> separate_paren_groups(""( ) (( )) (( )( ))"")
// array(""()"", ""(())"", ""(()())"")
function separate_paren_groups($paren_string) {
","function separate_paren_groups($paren_string) {
    $paren_string = str_replace(' ', '', $paren_string);
    $groups = [];
    $balance = 0;
    $currentGroup = '';

    for ($i = 0; $i < strlen($paren_string); $i++) {
        $char = $paren_string[$i];
        $currentGroup .= $char;

        if ($char === '(') {
            $balance++;
        } elseif ($char === ')') {
            $balance--;
        }

        if ($balance === 0 && $currentGroup !== '') {
            $groups[] = $currentGroup;
            $currentGroup = '';
        }
    }

    return $groups;
}","function candidate(...$args) {
    return separate_paren_groups(...$args);
}

function test(): void {
    if (candidate(""(()()) ((())) () ((())()())"") !== array(""(()())"", ""((()))"", ""()"", ""((())()())"")) { throw new Exception(""Test failed!""); }
    if (candidate(""() (()) ((())) (((())))"") !== array(""()"", ""(())"", ""((()))"", ""(((())))"")) { throw new Exception(""Test failed!""); }
    if (candidate(""(()(())((())))"") !== array(""(()(())((())))"")) { throw new Exception(""Test failed!""); }
    if (candidate(""( ) (( )) (( )( ))"") !== array(""()"", ""(())"", ""(()())"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_2,uig_Arab,php,"<?php
//ساننىڭ ئوندىن بىرىنى قايتۇرىمىز.//(ئادەمنىڭ قالغان قىسمى 1 دىن كىچىك)//ۋە پۈتۈن سان قىسمى (بەلگىلەنگەن ساندىن كىچىك بولغان ئەڭ چوڭ پۈتۈن سان) ۋە ئوندىن كېيىن كەلگەن سانلار//.ئەگەر بىز بىر قېتىملىق جازانى ئېلىپ باقساق بۇ ئەرزىمەس ھېسابقا ئايلىنىدۇ// >>> truncate_number(3.5)
// 0.5
function truncate_number($number) {
","function truncate_number($number) {
    $integerPart = floor($number);  // Get the integer part using floor
    return $number - $integerPart;  // Subtract the integer part from the original number to get the decimal part
}","function candidate(...$args) {
    return truncate_number(...$args);
}

function test(): void {
    if (candidate(3.5) !== 0.5) { throw new Exception(""Test failed!""); }
    if (candidate(1.25) !== 0.25) { throw new Exception(""Test failed!""); }
    if (candidate(123.0) !== 0.0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_3,uig_Arab,php,"<?php
//بۇ ۋاقىتتا فۇنكسىيە true نى قايتۇرۇشى كېرەك، بولمىسا false نى قايتۇرۇشى كېرەك.//.سىز ئەڭ مۇھىم نۇقتا ھېسابات سالاھىيىتىڭىزنىڭ بارلىقىنى بايقىشىڭىز كېرەك .ھازىر سىز ئەڭ مۇھىم نۇقتا ھېسابات سالاھىيىتىڭىزنىڭ بارلىقىنى بايقىشىڭىز كېرەك .//.ئەر كىشىگە بىرخىل بانكا ھېساباتى ۋە پۇل - مال تاپشۇرۇش ئادرىسى بېرىلىدۇ .بۇ ئادرېسنىڭ بېشى:// >>> below_zero(array(1, 2, 3))
// false
// >>> below_zero(array(1, 2, -4, 5))
// true
function below_zero($operations) {
","function below_zero($operations) {
    $balance = 0;
    foreach ($operations as $operation) {
        $balance += $operation;
        if ($balance < 0) {
            return true;
        }
    }
    return false;
}","function candidate(...$args) {
    return below_zero(...$args);
}

function test(): void {
    if (candidate(array()) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, -3, 1, 2, -3)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, -4, 5, 6)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -1, 2, -2, 5, -5, 4, -4)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -1, 2, -2, 5, -5, 4, -5)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -2, 2, -2, 5, -5, 4, -4)) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_4,uig_Arab,php,"<?php
//.ئەرتۈرلۈك قىممەتلەر بىلەن تەڭ، توغرا، ئەمەلىي قىممەت//بىر گەۋدە ۋە بىر مەركىزىي نۇقتا (بۇ يەردە ئوتتۇرىچە)://ھەر بىرىنىڭ ئوتتۇرىچە ھەرپىنىڭ ھەرپىدىن ئايرىلىش مىقدارى//بۇ سانلىق مەلۇماتلار//بىر تال كىرگۈزگۈچ سانى ئۈچۈن، ئوتتۇرىچە ئېنىق ئېچىۋېتىشنى ھېسابلايمىز.// >>> mean_absolute_deviation(array(1.0, 2.0, 3.0, 4.0))
// 1.0
function mean_absolute_deviation($numbers) {
","function mean_absolute_deviation($numbers) {
    $n = count($numbers);
    if ($n == 0) return 0;
    
    $mean = array_sum($numbers) / $n;
    $absoluteDifferences = array_map(function($x) use ($mean) {
        return abs($x - $mean);
    }, $numbers);
    
    return array_sum($absoluteDifferences) / $n;
}","function candidate(...$args) {
    return mean_absolute_deviation(...$args);
}

function test(): void {
    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_5,uig_Arab,php,"<?php
//كىرگۈزگۈچ تىزىملىكىدىكى ھەر ئىككى ئارقا-ئارقىدىن كەلگەن ئېلمىنتنىڭ ئارىسىغا بىر ""مەزكۇر بەلگە"" كىرگۈزۈڭ.// >>> intersperse(array(), 4)
// array()
// >>> intersperse(array(1, 2, 3), 4)
// array(1, 4, 2, 4, 3)
function intersperse($numbers, $delimeter) {
","function intersperse($numbers, $delimeter) {
    if (empty($numbers)) {
        return $numbers;
    }
    $result = array();
    $count = count($numbers);
    for ($i = 0; $i < $count; $i++) {
        $result[] = $numbers[$i];
        if ($i < $count - 1) {
            $result[] = $delimeter;
        }
    }
    return $result;
}","function candidate(...$args) {
    return intersperse(...$args);
}

function test(): void {
    if (candidate(array(), 7) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_6,uig_Arab,php,"<?php
//مەسىلەن: (() (()) نىڭ ئەڭ كۆپ بولغاندا ئىككى دەرىجە يۇرۇش ئورنى بار، ((())) نىڭ بولسا ئۈچ دەرىجە يۇرۇش ئورنى بار.//ھەر بىر گۇرۇپپا ئۈچۈن ئەڭ چوڭقۇر قاتلامدىكى قوساقلارنى چىقىرىپ بېرىڭ.//بۇ فۇنكسىيەنىڭ كىرگۈزگۈچ سانى بىر تال قىسقۇچ بولۇپ، ئۇ بىر قانچە گۇرۇپپاغا بۆلۈنگەن.// >>> parse_nested_parens(""(()()) ((())) () ((())()())"")
// array(2, 3, 1, 3)
function parse_nested_parens($paren_string) {
","function parse_nested_parens($paren_string) {
    $groups = explode(' ', $paren_string);
    $results = [];

    foreach ($groups as $group) {
        $max_depth = 0;
        $current_depth = 0;

        for ($i = 0; $i < strlen($group); $i++) {
            if ($group[$i] === '(') {
                $current_depth++;
                if ($current_depth > $max_depth) {
                    $max_depth = $current_depth;
                }
            } elseif ($group[$i] === ')') {
                $current_depth--;
            }
        }

        $results[] = $max_depth;
    }

    return $results;
}","function candidate(...$args) {
    return parse_nested_parens(...$args);
}

function test(): void {
    if (candidate(""(()()) ((())) () ((())()())"") !== array(2, 3, 1, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(""() (()) ((())) (((())))"") !== array(1, 2, 3, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(""(()(())((())))"") !== array(4)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_7,uig_Arab,php,"<?php
//پەقەت مەلۇم تارماق تىزىملىكىگە مۇناسىۋەتلىك تارماق تىزىملىكىنى سۈزۈپ چىقىرىدۇ .// >>> filter_by_substring(array(), ""a"")
// array()
// >>> filter_by_substring(array(""abc"", ""bacd"", ""cde"", ""array""), ""a"")
// array(""abc"", ""bacd"", ""array"")
function filter_by_substring($strings, $substring) {
","function filter_by_substring($strings, $substring) {
    $filtered = array();
    foreach ($strings as $string) {
        if (strpos($string, $substring) !== false) {
            $filtered[] = $string;
        }
    }
    return $filtered;
}","function candidate(...$args) {
    return filter_by_substring(...$args);
}

function test(): void {
    if (candidate(array(), ""john"") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""), ""xxx"") !== array(""xxx"", ""xxxAAA"", ""xxx"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""), ""xx"") !== array(""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""grunt"", ""trumpet"", ""prune"", ""gruesome""), ""run"") !== array(""grunt"", ""prune"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_8,uig_Arab,php,"<?php
//بۇ يەردە 0 بىلەن قۇرۇق بولغان جۈملىنىڭ قىممىتى 1 گە باراۋەر.//بىر پۈتۈن سانلار تىزىملىكىگە، بىر پۈتۈن سانلارنىڭ جۈملىسى ۋە ماتېرىيالدىن تەركىب تاپقان بىر پۈتۈن سان تىزىملىكىنى قايتۇرىمىز.// >>> sum_product(array())
// array(0, 1)
// >>> sum_product(array(1, 2, 3, 4))
// array(10, 24)
function sum_product($numbers) {
","function sum_product($numbers) {
    $sum = 0;
    $product = 1;
    
    foreach ($numbers as $number) {
        $sum += $number;
        $product *= $number;
    }
    
    return array($sum, $product);
}","function candidate(...$args) {
    return sum_product(...$args);
}

function test(): void {
    if (candidate(array()) !== array(0, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(100, 0)) !== array(100, 0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 5, 7)) !== array(15, 105)) { throw new Exception(""Test failed!""); }
    if (candidate(array(10)) !== array(10, 10)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_9,uig_Arab,php,"<?php
//.ئادەمنىڭ ئىشەنگۈسى كەلمەيدۇ//بىر تال تولا سانلارنى ئېلىپ، شۇ ۋاقىتقىچە تېپىلغان ئەڭ چوڭ ھەرپ سانىنى چىقىرىپ چىقىرىدۇ.// >>> rolling_max(array(1, 2, 3, 2, 3, 4, 2))
// array(1, 2, 3, 3, 3, 4, 4)
function rolling_max($numbers) {
","function rolling_max($numbers) {
    $result = [];
    $current_max = null;

    foreach ($numbers as $number) {
        if ($current_max === null || $number > $current_max) {
            $current_max = $number;
        }
        $result[] = $current_max;
    }

    return $result;
}","function candidate(...$args) {
    return rolling_max(...$args);
}

function test(): void {
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_10,uig_Arab,php,"<?php
//.ئىلگىرىكىگە ئوخشاش ئاستىدىن ئىككى تەرەپكە بۆلۈپ قويۇلغان .قاتارلىق قۇرلارنىڭ ئاخىرقى قىسمىغا ئىپادىلەيدىغان بىر قىسىم قۇرلارنى كىرگۈزۈپ//- تەمىنلەنگەن ھەرپنىڭ ئەڭ ئۇزۇن ئارقا قىسمىنى تېپىپ چىقىڭ.//ئالگورىتمىنىڭ پىكرى ئاددىي: //بىر تاردىن باشلانغان ئەڭ قىسقا پاليندرومنى تېپىڭ.// >>> make_palindrome("""")
// """"
// >>> make_palindrome(""cat"")
// ""catac""
// >>> make_palindrome(""cata"")
// ""catac""
function make_palindrome($string) {
","function make_palindrome($string) {
    $n = strlen($string);
    if ($n == 0) {
        return """";
    }
    
    // Check for the longest palindrome suffix
    for ($i = $n; $i >= 0; $i--) {
        if (is_palindrome(substr($string, $i))) {
            break;
        }
    }
    
    // Get the prefix before the palindromic suffix
    $prefix = substr($string, 0, $i);
    
    // Append the reverse of prefix to the end of the original string
    return $string . strrev($prefix);
}

// Helper function to check if a string is a palindrome
function is_palindrome($s) {
    return $s === strrev($s);
}","function candidate(...$args) {
    return make_palindrome(...$args);
}

function test(): void {
    if (candidate("""") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""x"") !== ""x"") { throw new Exception(""Test failed!""); }
    if (candidate(""xyz"") !== ""xyzyx"") { throw new Exception(""Test failed!""); }
    if (candidate(""xyx"") !== ""xyx"") { throw new Exception(""Test failed!""); }
    if (candidate(""jerry"") !== ""jerryrrej"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_11,uig_Arab,php,"<?php
//بۇ كىرگۈزگۈچلەرگە ئىككىلىك XOR ئىجرا قىلىپ، نەتىجىنى بىر ھەرپ رېتىمىغا ئايلاندۇرۇپ قايتۇرىدۇ.//بۇ يەردىكى سەتەلگە پەقەت 1،0 بار// >>> string_xor(""010"", ""110"")
// ""100""
function string_xor($a, $b) {
","function string_xor($a, $b) {
    $result = '';
    for ($i = 0; $i < strlen($a); $i++) {
        $result .= ($a[$i] === $b[$i]) ? '0' : '1';
    }
    return $result;
}","function candidate(...$args) {
    return string_xor(...$args);
}

function test(): void {
    if (candidate(""111000"", ""101010"") !== ""010010"") { throw new Exception(""Test failed!""); }
    if (candidate(""1"", ""1"") !== ""0"") { throw new Exception(""Test failed!""); }
    if (candidate(""0101"", ""0000"") !== ""0101"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_12,uig_Arab,php,"<?php
//ئوخشاش ئۇزۇنلۇقتىكى تارلارنى قوشۇپ، كىرگۈزگۈچ تىزىملىكى بوش بولسا null نى قايتۇرۇپ بېرىدۇ.//.تارماق تىزىملىكىدىن ئەڭ ئۇزۇن تارماقنى تېپىپ بىرىمىز .ئەگەر تىپى كۆپ بولسا بىرىنجى تارماقنى تېپىپ بىرىمىز// >>> longest(array())
// null
// >>> longest(array(""a"", ""b"", ""c""))
// ""a""
// >>> longest(array(""a"", ""bb"", ""ccc""))
// ""ccc""
function longest($strings) {
","function longest($strings) {
    if (empty($strings)) {
        return null;
    }

    $longestString = $strings[0];
    foreach ($strings as $string) {
        if (strlen($string) > strlen($longestString)) {
            $longestString = $string;
        }
    }

    return $longestString;
}","function candidate(...$args) {
    return longest(...$args);
}

function test(): void {
    if (candidate(array()) !== null) { throw new Exception(""Test failed!""); }
    if (candidate(array(""x"", ""y"", ""z"")) !== ""x"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc"")) !== ""zzzz"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_13,uig_Arab,php,"<?php
//a ۋە bدىن ئىبارەت ئىككى پۈتۈن ساننىڭ ئەڭ چوڭ ئورتاق بۆلگۈچنى قايتۇرىمىز .// >>> greatest_common_divisor(3, 5)
// 1
// >>> greatest_common_divisor(25, 15)
// 5
function greatest_common_divisor($a, $b) {
","function greatest_common_divisor($a, $b) {
    while ($b != 0) {
        $t = $b;
        $b = $a % $b;
        $a = $t;
    }
    return $a;
}","function candidate(...$args) {
    return greatest_common_divisor(...$args);
}

function test(): void {
    if (candidate(3, 7) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(10, 15) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(49, 14) !== 7) { throw new Exception(""Test failed!""); }
    if (candidate(144, 60) !== 12) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_14,uig_Arab,php,"<?php
//كىرگۈزگۈچ سىتونىنىڭ ئەڭ قىسقا سىتونىدىن ئەڭ ئۇزۇن سىتونىغىچە بولغان بارلىق ئالدىن قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە قوشۇمچە// >>> all_prefixes(""abc"")
// array(""a"", ""ab"", ""abc"")
function all_prefixes($string) {
","function all_prefixes($string) {
    $prefixes = array();
    $length = strlen($string);
    for ($i = 1; $i <= $length; $i++) {
        $prefixes[] = substr($string, 0, $i);
    }
    return $prefixes;
}","function candidate(...$args) {
    return all_prefixes(...$args);
}

function test(): void {
    if (candidate("""") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""asdfgh"") !== array(""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh"")) { throw new Exception(""Test failed!""); }
    if (candidate(""WWW"") !== array(""W"", ""WW"", ""WWW"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_15,uig_Arab,php,"<?php
//0 دىن n گىچە بولغان ئارىلىقتىكى بوشلۇق بىلەن چەكلەنگەن سانلارنى ئۆز ئىچىگە ئالغان بىر تار تارماق قايتۇرۇلىدۇ.// >>> string_sequence(0)
// ""0""
// >>> string_sequence(5)
// ""0 1 2 3 4 5""
function string_sequence($n) {
","function string_sequence($n) {
    $sequence = range(0, $n);
    return implode(' ', $sequence);
}","function candidate(...$args) {
    return string_sequence(...$args);
}

function test(): void {
    if (candidate(0) !== ""0"") { throw new Exception(""Test failed!""); }
    if (candidate(3) !== ""0 1 2 3"") { throw new Exception(""Test failed!""); }
    if (candidate(10) !== ""0 1 2 3 4 5 6 7 8 9 10"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_16,uig_Arab,php,"<?php
//ھەرپلەر تىزىملىكىدىن ھەرپلەرنىڭ قانچە دانىسىدىن تەركىب تاپقانلىقىنى تېپىپ چىقىڭ.// >>> count_distinct_characters(""xyzXYZ"")
// 3
// >>> count_distinct_characters(""Jerry"")
// 4
function count_distinct_characters($string) {
","function count_distinct_characters($string) {
    $string = strtolower($string);
    $distinctChars = array_count_values(str_split($string));
    return count($distinctChars);
}","function candidate(...$args) {
    return count_distinct_characters(...$args);
}

function test(): void {
    if (candidate("""") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""abcde"") !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdecadeCADE"") !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(""aaaaAAAAaaaa"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""Jerry jERRY JeRRRY"") !== 5) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_17,uig_Arab,php,"<?php
//"".شۇنداقمۇ؟"" بۇ تۆت خانىلىق مۇزىكا، بىر تال داۋاملىشىدۇ//""ئەركىنلىك"" يېرىم نوتتا ئىككى قېتىم چالىدى//.ئۇمۇرتقىسىز،تۆت قېتىملىق،يۇقۇملىنىشچان//بۇ بىر رىۋايەت://ھېچقاچان ئۇنداق بولمايدۇ.//بۇ سىتوننى پارسلاپ، ھەر بىرىنىڭ قانچىلىك قېتىم چۆككەنلىكىگە ماس كېلىدىغان پۈتۈن سانلارنى تېپىپ چىقىڭ.//بۇ فۇنكسىيەگە ئالاھىدە بىر خىل ASCII شەكلىدە نوتلارنى ئىپادىلەيدىغان بىر قىسىم سىتونلارنى كىرگۈزىمىز.// >>> parse_music(""o o| .| o| o| .| .| .| .| o o"")
// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)
function parse_music($music_string) {
","function parse_music($music_string) {
    $notes = explode("" "", trim($music_string));
    $beats = [];

    foreach ($notes as $note) {
        switch ($note) {
            case 'o':
                $beats[] = 4;
                break;
            case 'o|':
                $beats[] = 2;
                break;
            case '.|':
                $beats[] = 1;
                break;
        }
    }

    return $beats;
}","function candidate(...$args) {
    return parse_music(...$args);
}

function test(): void {
    if (candidate("""") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""o o o o"") !== array(4, 4, 4, 4)) { throw new Exception(""Test failed!""); }
    if (candidate("".| .| .| .|"") !== array(1, 1, 1, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(""o| o| .| .| o o o o"") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(""o| .| o| .| o o| o o|"") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_18,uig_Arab,php,"<?php
//مەلۇم بىر تارماقنىڭ ئەسلى تارماقتىن قانچە قېتىم تېپىلىدىغانلىقىنى تېپىپ چىقىڭ. ئۇمۇملىشىپ كەتكەن ئەھۋاللارنى ساناڭ.// >>> how_many_times("""", ""a"")
// 0
// >>> how_many_times(""aaa"", ""a"")
// 3
// >>> how_many_times(""aaaa"", ""aa"")
// 3
function how_many_times($string, $substring) {
","function how_many_times($string, $substring) {
    if ($substring === """") {
        return 0;
    }
    
    $count = 0;
    $position = 0;
    $subLen = strlen($substring);
    
    while (($position = strpos($string, $substring, $position)) !== false) {
        $count++;
        $position += 1;
    }
    
    return $count;
}","function candidate(...$args) {
    return how_many_times(...$args);
}

function test(): void {
    if (candidate("""", ""x"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""xyxyxyx"", ""x"") !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(""cacacacac"", ""cac"") !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(""john doe"", ""john"") !== 1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_19,uig_Arab,php,"<?php
//ئەڭ كىچىك ساندىن ئەڭ چوڭ سانغا رەتلەنگەن تارنى قايتۇر .//توغرا تاللاشلار: '0'، '1'، '2'، '3'، '4'، '5'، '6'، '7'، '8' ۋە '9'.//""نۆل"" دىن ""توققۇز"" گە قەدەر بولغان بىر قاتار نومۇرغا ۋەكىللىك قىلىدۇ.// >>> sort_numbers(""three one five"")
// ""one three five""
function sort_numbers($numbers) {
","function sort_numbers($numbers) {
    // Define an array to map string numerals to their respective integer values
    $numeral_to_value = [
        'zero' => 0,
        'one' => 1,
        'two' => 2,
        'three' => 3,
        'four' => 4,
        'five' => 5,
        'six' => 6,
        'seven' => 7,
        'eight' => 8,
        'nine' => 9
    ];

    // Split the input string into an array of words
    $number_words = explode("" "", $numbers);

    // Sort the array using the integer values from numeral_to_value
    usort($number_words, function($a, $b) use ($numeral_to_value) {
        return $numeral_to_value[$a] - $numeral_to_value[$b];
    });

    // Join the sorted array back into a string and return it
    return implode("" "", $number_words);
}","function candidate(...$args) {
    return sort_numbers(...$args);
}

function test(): void {
    if (candidate("""") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""three"") !== ""three"") { throw new Exception(""Test failed!""); }
    if (candidate(""three five nine"") !== ""three five nine"") { throw new Exception(""Test failed!""); }
    if (candidate(""five zero four seven nine eight"") !== ""zero four five seven eight nine"") { throw new Exception(""Test failed!""); }
    if (candidate(""six five four three two one zero"") !== ""zero one two three four five six"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_20,uig_Arab,php,"<?php
//(ئورنىڭىزدىكىدەكلا ئىشلەپچىقىرىڭ)//بىر تاللانغان سانلار تىزىملىكىدىن (ئادەتتە ئۇزۇنلۇقى ئىككىدىن ئاز ئەمەس) ھەر بىر سانغا ئەڭ يېقىن بولغان ئىككى ساننى تاللاپ قايتۇرۇپ بېرىڭ .// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))
// array(2.0, 2.2)
// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))
// array(2.0, 2.0)
function find_closest_elements($numbers) {
","function find_closest_elements($numbers) {
    sort($numbers);
    $minDiff = PHP_FLOAT_MAX;
    $closestPair = array();

    for ($i = 0; $i < count($numbers) - 1; $i++) {
        $diff = abs($numbers[$i + 1] - $numbers[$i]);
        if ($diff < $minDiff) {
            $minDiff = $diff;
            $closestPair = array($numbers[$i], $numbers[$i + 1]);
        }
    }

    return $closestPair;
}","function candidate(...$args) {
    return find_closest_elements(...$args);
}

function test(): void {
    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_21,uig_Arab,php,"<?php
//كىچىك سانى 0 .ئەڭ چوڭ سانى 1 .بولىدۇ//بىر تال سان (ئاز دېگەندە ئىككى تال) نى باھالاپ، بۇ سانغا سىزىقلىق ئۆزگەرتىشنى ئىشلىتىمىز،// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))
// array(0.0, 0.25, 0.5, 0.75, 1.0)
function rescale_to_unit($numbers) {
","function rescale_to_unit($numbers) {
    $min = min($numbers);
    $max = max($numbers);
    if ($max == $min) {
        return array_fill(0, count($numbers), 0.0);
    }
    
    $result = array_map(function($num) use ($min, $max) {
        return ($num - $min) / ($max - $min);
    }, $numbers);
    
    return $result;
}","function candidate(...$args) {
    return rescale_to_unit(...$args);
}

function test(): void {
    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(""Test failed!""); }
    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_22,uig_Arab,php,"<?php
//پەقەت پۈتۈن سانلار ئۈچۈنلا، ھەر قانداق phpthon قىممىتىنىڭ بېرىلگەن تىزىملىكىنى سۈزۈۋېلىڭ .// >>> filter_integers(array(""a"", 3.14, 5))
// array(5)
// >>> filter_integers(array(1, 2, 3, ""abc"", array(), array()))
// array(1, 2, 3)
function filter_integers($values) {
","function filter_integers($values) {
    return array_values(array_filter($values, 'is_int'));
}","function candidate(...$args) {
    return filter_integers(...$args);
}

function test(): void {
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, array(), array(), 23.2, 9, ""adasd"")) !== array(4, 9)) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, ""c"", 3, 3, ""a"", ""b"")) !== array(3, 3, 3)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_23,uig_Arab,php,"<?php
//بېرىلگەن سىتوننىڭ قايتىش ئۇزۇنلۇقى // >>> strlen("""")
// 0
// >>> strlen(""abc"")
// 3
function strlen($string) {
","function strlen($string) {
    $length = 0;
    while (isset($string[$length])) {
        $length++;
    }
    return $length;
}","function candidate(...$args) {
    return strlen(...$args);
}

function test(): void {
    if (candidate("""") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""x"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""asdasnakj"") !== 9) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_24,uig_Arab,php,"<?php
//بىر قانچە جۈملە ن، n دىن كىچىك، n نى تەڭ بۆلىدىغان .چوڭ تىپتىكى ساننى تېپىپ چىقىڭ// >>> largest_divisor(15)
// 5
function largest_divisor($n) {
","function largest_divisor($n) {
    for ($i = $n - 1; $i > 0; $i--) {
        if ($n % $i === 0) {
            return $i;
        }
    }
    return null; // In case no divisor is found, though for n > 1 there will always be one.
}","function candidate(...$args) {
    return largest_divisor(...$args);
}

function test(): void {
    if (candidate(3) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(7) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(100) !== 50) { throw new Exception(""Test failed!""); }
    if (candidate(49) !== 7) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_25,uig_Arab,php,"<?php
//.ئۇلىنىشنى چەكلەشنىڭ بۇ خىل ئۇسۇللىرى بولسا، ئىستېمالچىغا نىسبەتەن ئېيتقاندا،//ھەربىر جۈملىگە فاكتورنى ئايرىغاندا ئۇ پەيدا بولغان قېتىم سانى بويىچە بىر قاتارغا تىزىمىز.//كىچىكدىن چوڭغىچە بولغان تەرتىپ بويىچە بېرىلگەن پۈتۈن ساننىڭ نۇپۇزلۇق ئامىللار تىزىملىكىنى قايتۇرىدۇ.// >>> factorize(8)
// array(2, 2, 2)
// >>> factorize(25)
// array(5, 5)
// >>> factorize(70)
// array(2, 5, 7)
function factorize($n) {
","function factorize($n) {
    $factors = array();
    // Check for number of twos
    while ($n % 2 == 0) {
        $factors[] = 2;
        $n = $n / 2;
    }
    // Check for odd numbers
    for ($i = 3; $i <= sqrt($n); $i += 2) {
        while ($n % $i == 0) {
            $factors[] = $i;
            $n = $n / $i;
        }
    }
    // If n becomes a prime number greater than 2
    if ($n > 2) {
        $factors[] = $n;
    }
    return $factors;
}","function candidate(...$args) {
    return factorize(...$args);
}

function test(): void {
    if (candidate(2) !== array(2)) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== array(2, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(57) !== array(3, 19)) { throw new Exception(""Test failed!""); }
    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(""Test failed!""); }
    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(""Test failed!""); }
    if (candidate(20577) !== array(3, 19, 19, 19)) { throw new Exception(""Test failed!""); }
    if (candidate(18) !== array(2, 3, 3)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_26,uig_Arab,php,"<?php
//سول تەرەپتىكى تۈرنىڭ رەت-تەرتىپى كىرگۈزگۈچتىكىدەك ساقلىنىدۇ.//بىر قېتىمدىن كۆپرەك ئۇچرايدىغان پۈتۈن سانلارنى چىقىرىپ تاشلايمىز.// >>> remove_duplicates(array(1, 2, 3, 2, 4))
// array(1, 3, 4)
function remove_duplicates($numbers) {
","function remove_duplicates($numbers) {
    $counts = array_count_values($numbers);
    return array_values(array_filter($numbers, function($num) use ($counts) {
        return $counts[$num] === 1;
    }));
}","function candidate(...$args) {
    return remove_duplicates(...$args);
}

function test(): void {
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_27,uig_Arab,php,"<?php
//.ھەر بىر بوغۇمغا كىچىك ھەرپلەرنى چوڭ ھەرپكە .ۋە چوڭ ھەرپلەرنى كىچىك ھەرپكە ئايلاندۇرۇڭ// >>> flip_case(""Hello"")
// ""hELLO""
function flip_case($string) {
","function flip_case($string) {
    $flippedString = '';
    for ($i = 0; $i < strlen($string); $i++) {
        $char = $string[$i];
        if (ctype_lower($char)) {
            $flippedString .= strtoupper($char);
        } else if (ctype_upper($char)) {
            $flippedString .= strtolower($char);
        } else {
            $flippedString .= $char;
        }
    }
    return $flippedString;
}","function candidate(...$args) {
    return flip_case(...$args);
}

function test(): void {
    if (candidate("""") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""Hello!"") !== ""hELLO!"") { throw new Exception(""Test failed!""); }
    if (candidate(""These violent delights have violent ends"") !== ""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_28,uig_Arab,php,"<?php
//بىر تارغا بىرلەشتۈرۈلگەن تارلار تىزمىسى// >>> concatenate(array())
// """"
// >>> concatenate(array(""a"", ""b"", ""c""))
// ""abc""
function concatenate($strings) {
","function concatenate($strings) {
    return implode('', $strings);
}","function candidate(...$args) {
    return concatenate(...$args);
}

function test(): void {
    if (candidate(array()) !== """") { throw new Exception(""Test failed!""); }
    if (candidate(array(""x"", ""y"", ""z"")) !== ""xyz"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""x"", ""y"", ""z"", ""w"", ""k"")) !== ""xyzwk"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_29,uig_Arab,php,"<?php
//پەقەت مەلۇم بىرىكمە بەلگىسى بىلەن باشلانغان قۇرلارنىلا كىرگۈزگۈچ تىزىملىكىگە سۈزۈپ قويىمىز.// >>> filter_by_prefix(array(), ""a"")
// array()
// >>> filter_by_prefix(array(""abc"", ""bcd"", ""cde"", ""array""), ""a"")
// array(""abc"", ""array"")
function filter_by_prefix($strings, $prefix) {
","function filter_by_prefix($strings, $prefix) {
    $result = array_filter($strings, function($string) use ($prefix) {
        return strpos($string, $prefix) === 0;
    });
    return array_values($result);
}","function candidate(...$args) {
    return filter_by_prefix(...$args);
}

function test(): void {
    if (candidate(array(), ""john"") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""), ""xxx"") !== array(""xxx"", ""xxxAAA"", ""xxx"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_30,uig_Arab,php,"<?php
//پەقەت ماتېرىيالدىكى ئىجابىي سانلارنىلا قايتۇرىدۇ.// >>> get_positive(array(-1, 2, -4, 5, 6))
// array(2, 5, 6)
// >>> get_positive(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))
// array(5, 3, 2, 3, 9, 123, 1)
function get_positive($l) {
","function get_positive($l) {
    return array_filter($l, function($num) {
        return $num > 0;
    });
}","function candidate(...$args) {
    return get_positive(...$args);
}

function test(): void {
    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -2)) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_31,uig_Arab,php,"<?php
//ئەگەر بىر دانە نۇمۇرى بار بولسا true نى قايتۇرۇپ بىرىمىز، بولمىسا false نى قايتۇرۇپ بىرىمىز.// >>> is_prime(6)
// false
// >>> is_prime(101)
// true
// >>> is_prime(11)
// true
// >>> is_prime(13441)
// true
// >>> is_prime(61)
// true
// >>> is_prime(4)
// false
// >>> is_prime(1)
// false
function is_prime($n) {
","function is_prime($n) {
    if ($n <= 1) return false;
    if ($n <= 3) return true;
    if ($n % 2 == 0 || $n % 3 == 0) return false;

    for ($i = 5; $i * $i <= $n; $i += 6) {
        if ($n % $i == 0 || $n % ($i + 2) == 0) return false;
    }
    return true;
}","function candidate(...$args) {
    return is_prime(...$args);
}

function test(): void {
    if (candidate(6) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(101) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(11) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(13441) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(61) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(11) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(17) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(85) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(77) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(255379) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_33,uig_Arab,php,"<?php
//بۇ سانلىق مەلۇماتلار بىلەن مۇناسىۋەتلىك قىممەتلەرنى ئايرىپ چىقتى.//l' بولسا l بىلەن ئوخشاش، ئۈچكە بۆلۈنمەيدىغان كۆرسەتكۈچلەردىكى قىممەت، ئۈچكە بۆلۈنگەن كۆرسەتكۈچلەردىكى قىممەت ئوخشاش.//بۇ فۇنكسىيە بىر جەدۋەل l نى قوبۇل قىلىدۇ ۋە بىر جەدۋەل l نى قايتۇرۇپ بېرىدۇ ، يەنى// >>> sort_third(array(1, 2, 3))
// array(1, 2, 3)
// >>> sort_third(array(5, 6, 3, 4, 8, 9, 2))
// array(2, 6, 3, 4, 8, 9, 5)
function sort_third($l) {
","function sort_third($l) {
    $length = count($l);
    $div_by_three_values = [];

    // Collect values at indices divisible by three
    for ($i = 0; $i < $length; $i++) {
        if ($i % 3 == 0) {
            $div_by_three_values[] = $l[$i];
        }
    }

    // Sort the collected values
    sort($div_by_three_values);

    // Replace original values with sorted ones at indices divisible by three
    $index = 0;
    for ($i = 0; $i < $length; $i++) {
        if ($i % 3 == 0) {
            $l[$i] = $div_by_three_values[$index];
            $index++;
        }
    }

    return $l;
}","function candidate(...$args) {
    return sort_third(...$args);
}

function test(): void {
    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_34,uig_Arab,php,"<?php
//بىر جەدۋەلدىكى رەتلەنگەن ئۆزگىچە تۈرلەرنى قايتۇرۇپ بېرىدۇ// >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))
// array(0, 2, 3, 5, 9, 123)
function unique($l) {
","function unique($l) {
    // Use array_unique to remove duplicates
    $uniqueArray = array_unique($l);
    // Sort the result array
    sort($uniqueArray);
    return $uniqueArray;
}

// Example usage
$result = unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123));
print_r($result);","function candidate(...$args) {
    return unique(...$args);
}

function test(): void {
    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_35,uig_Arab,php,"<?php
//ئەڭ چوڭ تۈرنى قايتۇرىدۇ.// >>> max_element(array(1, 2, 3))
// 3
// >>> max_element(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))
// 123
function max_element($l) {
","function max_element($l) {
    if (empty($l)) {
        return null; // Return null if the array is empty
    }
    $max = $l[0];
    foreach ($l as $value) {
        if ($value > $max) {
            $max = $value;
        }
    }
    return $max;
}","function candidate(...$args) {
    return max_element(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3)) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10)) !== 124) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_36,uig_Arab,php,"<?php
//11 ياكى 13 غا بۆلۈنىدىغان ن دىن كىچىك پۈتۈن سانلاردا 7 نىڭ پەيدا بولۇش قېتىم سانىنى قايتۇرۇپ بىرىمىز.// >>> fizz_buzz(50)
// 0
// >>> fizz_buzz(78)
// 2
// >>> fizz_buzz(79)
// 3
function fizz_buzz($n) {
","function fizz_buzz($n) {
    $count = 0;
    for ($i = 1; $i < $n; $i++) {
        if ($i % 11 == 0 || $i % 13 == 0) {
            $digits = str_split((string)$i);
            foreach ($digits as $digit) {
                if ($digit == '7') {
                    $count++;
                }
            }
        }
    }
    return $count;
}","function candidate(...$args) {
    return fizz_buzz(...$args);
}

function test(): void {
    if (candidate(50) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(78) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(79) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(100) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(200) !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(4000) !== 192) { throw new Exception(""Test failed!""); }
    if (candidate(10000) !== 639) { throw new Exception(""Test failed!""); }
    if (candidate(100000) !== 8026) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_37,uig_Arab,php,"<?php
//.لېكىن ئۇلار ئوخشىمايدۇ//l' نى قوش سانلىق مەلۇماتتا l بىلەن ئوخشاش دەپ قارىساق، ئوخشاش سانلىق مەلۇماتتا l بىلەن ئوخشاش دەپ قارىساق،//بۇ فۇنكسىيە بىر جەدۋەل l نى قوبۇل قىلىدۇ ۋە بىر جەدۋەل l نى قايتۇرۇپ بېرىدۇ ، يەنى// >>> sort_even(array(1, 2, 3))
// array(1, 2, 3)
// >>> sort_even(array(5, 6, 3, 4))
// array(3, 6, 5, 4)
function sort_even($l) {
","function sort_even($l) {
    $even_indices = [];

    // Extract values at even indices
    for ($i = 0; $i < count($l); $i += 2) {
        $even_indices[] = $l[$i];
    }

    // Sort the extracted even-indexed values
    sort($even_indices);

    // Rebuild the original array with sorted even-indexed values
    $evenIndex = 0;
    for ($i = 0; $i < count($l); $i++) {
        if ($i % 2 == 0) {
            $l[$i] = $even_indices[$evenIndex];
            $evenIndex++;
        }
    }

    return $l;
}","function candidate(...$args) {
    return sort_even(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_39,uig_Arab,php,"<?php
//prime_fib بولسا فىپوناتچى نومۇرى بولغان ن-نۇمۇرنى قايتۇرۇپ بېرىدۇ.// >>> prime_fib(1)
// 2
// >>> prime_fib(2)
// 3
// >>> prime_fib(3)
// 5
// >>> prime_fib(4)
// 13
// >>> prime_fib(5)
// 89
function prime_fib($n) {
","function is_prime($num) {
    if ($num <= 1) return false;
    if ($num <= 3) return true;
    if ($num % 2 == 0 || $num % 3 == 0) return false;
    for ($i = 5; $i * $i <= $num; $i += 6) {
        if ($num % $i == 0 || $num % ($i + 2) == 0) return false;
    }
    return true;
}

function prime_fib($n) {
    $fib1 = 1;
    $fib2 = 1;
    $fib_index = 2;
    $prime_fib_count = 0;
    
    while (true) {
        $fib_index++;
        $fib = $fib1 + $fib2;
        $fib1 = $fib2;
        $fib2 = $fib;
        
        if (is_prime($fib)) {
            $prime_fib_count++;
            if ($prime_fib_count == $n) {
                return $fib;
            }
        }
    }
}","function candidate(...$args) {
    return prime_fib(...$args);
}

function test(): void {
    if (candidate(1) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(2) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(3) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== 13) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== 89) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== 233) { throw new Exception(""Test failed!""); }
    if (candidate(7) !== 1597) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== 28657) { throw new Exception(""Test failed!""); }
    if (candidate(9) !== 514229) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== 433494437) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_40,uig_Arab,php,"<?php
//بۇ سۆزلەر باشقا سۆزلەردە يالغان//ئەگەر جەدۋەلدە ئۈچ خىل ئوخشىمايدىغان ئېلمىنت بولسا true دەپ قايتۇرۇلىدۇ//triple_sum_to_zero بولسا بىر پۈتۈن سانلار تىزىملىكىدىن ئىبارەت.// >>> triples_sum_to_zero(array(1, 3, 5, 0))
// false
// >>> triples_sum_to_zero(array(1, 3, -2, 1))
// true
// >>> triples_sum_to_zero(array(1, 2, 3, 7))
// false
// >>> triples_sum_to_zero(array(2, 4, -5, 3, 9, 7))
// true
// >>> triples_sum_to_zero(array(1))
// false
function triples_sum_to_zero($l) {
","function triples_sum_to_zero($l) {
    $n = count($l);
    if ($n < 3) return false;
    sort($l);
    for ($i = 0; $i < $n - 2; $i++) {
        $left = $i + 1;
        $right = $n - 1;
        while ($left < $right) {
            $sum = $l[$i] + $l[$left] + $l[$right];
            if ($sum === 0) {
                return true;
            } elseif ($sum < 0) {
                $left++;
            } else {
                $right--;
            }
        }
    }
    return false;
}","function candidate(...$args) {
    return triples_sum_to_zero(...$args);
}

function test(): void {
    if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, 5, -1)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, -2, 1)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 7)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 5, 7)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, -5, 3, 9, 7)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, 5, -100)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(100, 3, 5, -100)) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_41,uig_Arab,php,"<?php
//بۇ فۇنكسىيەگە ئاساسەن، بۇ خىل تاسادىپىي ھادىسىلەرنىڭ سانىنى چىقىرىپ بېرىدۇ.//ئۇ ئىككىسى يەنى بىرلىكتە يۇلتۇزلارنى تېپىشقا تاس قالىدۇ، يۇلتۇزلار بىر - بىرىگە چېتىلىپ قالىدۇ//ھالبۇكى، بۇ ماشىنا ئادەملەرنىڭ ئىشەنچلىكلىكى ۋە يىتىشچانلىقى يۇقىرى بولۇپ، ئۇلار داۋاملىق يۈرۈشكە قاراپ ماڭىدۇ.//بۇ ۋاقىتتا، بۇ ۋاقىتتا، بۇ ۋاقىتتا ئوڭ تەرەپكە يۆتكىلىۋاتقان ماشىنا ئوڭ تەرەپكە يۆتكىلىۋاتقان ماشىنا بىلەن سوقۇلۇپ كېتىدۇ.//ھەر ئىككى ئاپتوموبىل ئوخشاش سۈرئەتتە ھەرىكەت قىلىدۇ. ئىككى ئاپتوموبىل سوقۇلۇپ كېتىدۇ.//بۇ ئىككى ماشىنا ئادەم يۆتكىلىش يولى بەك چوڭ، شۇڭا بىر تېيىزسۇدىن يەنە بىر تېيىزسۇ چىقىدۇ//بۇ يەردە سىز باشتىن-ئوڭغا قاراپ مېڭىۋاتىسىز، ئوخشىمىغان ۋاقىتتا، ئوخشىمىغان ۋاقىتتا//سىز بۇنى تولۇق تۈز سىزىققا ئايلاندۇرۇپ چىقالايسىز شۇنداقلا بۇ سىزىقنىمۇ ئايلاندۇرۇپ چىقالايسىزfunction car_race_collision($n) {
","function car_race_collision($n) {
    // Each left-to-right moving car will collide with exactly one right-to-left moving car.
    // Therefore, the number of collisions is simply equal to the number of cars in one direction, i.e., n.
    return $n;
}","function candidate(...$args) {
    return car_race_collision(...$args);
}

function test(): void {
    if (candidate(2) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(3) !== 9) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== 16) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== 64) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== 100) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_42,uig_Arab,php,"<?php
//تۈرلىرى 1گە ئاشقان تىزىملىك قايتۇرۇلىدۇ.// >>> incr_list(array(1, 2, 3))
// array(2, 3, 4)
// >>> incr_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123))
// array(6, 4, 6, 3, 4, 4, 10, 1, 124)
function incr_list($l) {
","function incr_list($l) {
    return array_map(function($item) {
        return $item + 1;
    }, $l);
}","function candidate(...$args) {
    return incr_list(...$args);
}

function test(): void {
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_43,uig_Arab,php,"<?php
//بۇ سۆزلەر باشقا سۆزلەردە يالغان//ئەگەر جەدۋەلدە ئىككى خىل تۈر بار بولسا true نى قايتۇرۇپ بېرىدۇ//pairs_sum_to_zero بولسا بىر قاتار پۈتۈن سانلارنى كىرگۈزگۈچ سۈپىتىدە ئالىدۇ.// >>> pairs_sum_to_zero(array(1, 3, 5, 0))
// false
// >>> pairs_sum_to_zero(array(1, 3, -2, 1))
// false
// >>> pairs_sum_to_zero(array(1, 2, 3, 7))
// false
// >>> pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7))
// true
// >>> pairs_sum_to_zero(array(1))
// false
function pairs_sum_to_zero($l) {
","function pairs_sum_to_zero($l) {
    $seen = [];
    foreach ($l as $num) {
        if (isset($seen[-$num])) {
            return true;
        }
        $seen[$num] = true;
    }
    return false;
}","function candidate(...$args) {
    return pairs_sum_to_zero(...$args);
}

function test(): void {
    if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 7)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, -5, 3, 5, 7)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(-3, 9, -1, 4, 2, 31)) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_44,uig_Arab,php,"<?php
//.ئاساسلىق سانى 10 دىن تۆۋەن//.ئۇلىنىشنى ئۆزگەرتكەندىن كېيىن قايتا كۆرسىتىلگەن سىتونغا قايتىدۇ//كىرگۈزگۈچ سانى x نىڭ نۇمۇرلۇق ئاساسىنى نۇمۇرلۇق ئاساسقا ئۆزگەرتىڭ.// >>> change_base(8, 3)
// ""22""
// >>> change_base(8, 2)
// ""1000""
// >>> change_base(7, 2)
// ""111""
function change_base($x, $base) {
","function change_base($x, $base) {
    if ($base < 2 || $base > 9) {
        return false; // base must be between 2 and 9
    }
    
    $result = '';
    do {
        $remainder = $x % $base;
        $result = $remainder . $result;
        $x = intdiv($x, $base);
    } while ($x > 0);
    
    return $result;
}","function candidate(...$args) {
    return change_base(...$args);
}

function test(): void {
    if (candidate(8, 3) !== ""22"") { throw new Exception(""Test failed!""); }
    if (candidate(9, 3) !== ""100"") { throw new Exception(""Test failed!""); }
    if (candidate(234, 2) !== ""11101010"") { throw new Exception(""Test failed!""); }
    if (candidate(16, 2) !== ""10000"") { throw new Exception(""Test failed!""); }
    if (candidate(8, 2) !== ""1000"") { throw new Exception(""Test failed!""); }
    if (candidate(7, 2) !== ""111"") { throw new Exception(""Test failed!""); }
    if (candidate(2, 3) !== ""2"") { throw new Exception(""Test failed!""); }
    if (candidate(3, 4) !== ""3"") { throw new Exception(""Test failed!""); }
    if (candidate(4, 5) !== ""4"") { throw new Exception(""Test failed!""); }
    if (candidate(5, 6) !== ""5"") { throw new Exception(""Test failed!""); }
    if (candidate(6, 7) !== ""6"") { throw new Exception(""Test failed!""); }
    if (candidate(7, 8) !== ""7"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_45,uig_Arab,php,"<?php
//.ئەگەر بىزدە بىر ئۈچ بۇلۇڭلۇقنىڭ ئۇزۇنلۇقى ۋە كەڭلىكى كۆرۈلسە// >>> triangle_area(5, 3)
// 7.5
function triangle_area($a, $h) {
","function triangle_area($a, $h) {
    return 0.5 * $a * $h;
}","function candidate(...$args) {
    return triangle_area(...$args);
}

function test(): void {
    if (candidate(5, 3) !== 7.5) { throw new Exception(""Test failed!""); }
    if (candidate(2, 2) !== 2.0) { throw new Exception(""Test failed!""); }
    if (candidate(10, 8) !== 40.0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_46,uig_Arab,php,"<?php
//بىر فۇنكسىيە يېزىپ fib4 سانلار تىزىملىكىنىڭ n-چىراغىنى ئۈنۈملۈك ھېسابلىۋېلىڭ. تەكرارلاشنى ئىشلەتمەڭ.//fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).//-- 0 (ئۈچىنچى)//-- 2 .//-- 0 .//fib4(0) -> 0 //فىپبوناچى نومۇرىنىڭ تەرتىپى فىپبوناچى نومۇرىغا ئوخشايدۇ، ئۇ تۆۋەندىكىدەك ئېنىقلىنىدۇ:// >>> fib4(5)
// 4
// >>> fib4(6)
// 8
// >>> fib4(7)
// 14
function fib4($n) {
","function fib4($n) {
    if ($n == 0 || $n == 1 || $n == 3) return 0;
    if ($n == 2) return 2;

    $fib4 = [0, 0, 2, 0];
    
    for ($i = 4; $i <= $n; $i++) {
        $fib4[$i % 4] = $fib4[0] + $fib4[1] + $fib4[2] + $fib4[3];
    }

    return $fib4[$n % 4];
}","function candidate(...$args) {
    return fib4(...$args);
}

function test(): void {
    if (candidate(5) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== 28) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== 104) { throw new Exception(""Test failed!""); }
    if (candidate(12) !== 386) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_47,uig_Arab,php,"<?php
//ئارتىسلىقتىكى تۈرلەرنىڭ ئوتتۇرا قىسمىنى قايتۇرۇپ بىرىڭ l. // >>> median(array(3, 1, 2, 4, 5))
// 3
// >>> median(array(-10, 4, 6, 1000, 10, 20))
// 15.0
function median($l) {
","function median($l) {
    sort($l); // Sort the array
    $count = count($l); // Get the count of the array's elements
    
    if ($count % 2 == 0) { // If even number of elements
        $middle1 = $l[$count / 2 - 1];
        $middle2 = $l[$count / 2];
        return ($middle1 + $middle2) / 2;
    } else { // If odd number of elements
        return $l[floor($count / 2)];
    }
}","function candidate(...$args) {
    return median(...$args);
}

function test(): void {
    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(""Test failed!""); }
    if (candidate(array(5)) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(""Test failed!""); }
    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_48,uig_Arab,php,"<?php
//بېرىلگەن سىتوننىڭ پالىندروم ئىكەنلىكىنى تەكشۈرىدۇ .// >>> is_palindrome("""")
// true
// >>> is_palindrome(""aba"")
// true
// >>> is_palindrome(""aaaaa"")
// true
// >>> is_palindrome(""zbcd"")
// false
function is_palindrome($text) {
","function is_palindrome($text) {
    // Remove any white space and convert to lowercase
    $text = strtolower(str_replace(' ', '', $text));
    
    // Get the reversed version of the text
    $reversedText = strrev($text);
    
    // Check if the text is the same as the reversed version
    return $text === $reversedText;
}","function candidate(...$args) {
    return is_palindrome(...$args);
}

function test(): void {
    if (candidate("""") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""aba"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""aaaaa"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""zbcd"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""xywyx"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""xywyz"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""xywzx"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_49,uig_Arab,php,"<?php
//.2n نى قايتۇرىمىز (ئەسلى سانلىق قىممەتنى بىلىۋېلىڭ)// >>> modp(3, 5)
// 3
// >>> modp(1101, 101)
// 2
// >>> modp(0, 101)
// 1
// >>> modp(3, 11)
// 8
// >>> modp(100, 101)
// 1
function modp($n, $p) {
","function modp($n, $p) {
    return pow(2, $n) % $p;
}","function candidate(...$args) {
    return modp(...$args);
}

function test(): void {
    if (candidate(3, 5) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(1101, 101) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(0, 101) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(3, 11) !== 8) { throw new Exception(""Test failed!""); }
    if (candidate(100, 101) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(30, 5) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(31, 5) !== 3) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_51,uig_Arab,php,"<?php
//remove_vowels بولسا بىر خىل فۇنكسىيە بولۇپ، ئۇ string نى ئېلىپ، string نى ۋاكالسىز قايتۇرۇپ بېرىدۇ.// >>> remove_vowels("""")
// """"
// >>> remove_vowels(""abcdef"")
// ""bcdf""
// >>> remove_vowels(""aaaaa"")
// """"
// >>> remove_vowels(""aaBAA"")
// ""B""
// >>> remove_vowels(""zbcd"")
// ""zbcd""
function remove_vowels($text) {
","function remove_vowels($text) {
    return preg_replace('/[aeiouAEIOU]/', '', $text);
}","function candidate(...$args) {
    return remove_vowels(...$args);
}

function test(): void {
    if (candidate("""") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""abcdef\nghijklm"") !== ""bcdf\nghjklm"") { throw new Exception(""Test failed!""); }
    if (candidate(""fedcba"") !== ""fdcb"") { throw new Exception(""Test failed!""); }
    if (candidate(""eeeee"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""acBAA"") !== ""cB"") { throw new Exception(""Test failed!""); }
    if (candidate(""EcBOO"") !== ""cB"") { throw new Exception(""Test failed!""); }
    if (candidate(""ybcd"") !== ""ybcd"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_52,uig_Arab,php,"<?php
//ئەگەر matrix l نىڭ ھەر قايسى سانلىرى t نىڭ چەكلىمىسىگە يەتمىسە true نى قايتۇرۇپ بېرىدۇ.// >>> below_threshold(array(1, 2, 4, 10), 100)
// true
// >>> below_threshold(array(1, 20, 4, 10), 5)
// false
function below_threshold($l, $t) {
","function below_threshold($l, $t) {
    foreach ($l as $number) {
        if ($number >= $t) {
            return false;
        }
    }
    return true;
}","function candidate(...$args) {
    return below_threshold(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 4, 10), 100) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 20, 4, 10), 5) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 20, 4, 10), 21) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 20, 4, 10), 22) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 8, 4, 10), 11) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 8, 4, 10), 10) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_53,uig_Arab,php,"<?php
//ئىككى ساننى قوشىمىز: x ۋە y// >>> add(2, 3)
// 5
// >>> add(5, 7)
// 12
function add($x, $y) {
","return $x + $y;
}","function candidate(...$args) {
    return add(...$args);
}

function test(): void {
    if (candidate(0, 1) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(1, 0) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(2, 3) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(5, 7) !== 12) { throw new Exception(""Test failed!""); }
    if (candidate(7, 5) !== 12) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_54,uig_Arab,php,"<?php
//ئىككى سۆزنىڭ ھەرپى ئوخشاشمۇ؟// >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
// true
// >>> same_chars(""abcd"", ""dddddddabc"")
// true
// >>> same_chars(""dddddddabc"", ""abcd"")
// true
// >>> same_chars(""eabcd"", ""dddddddabc"")
// false
// >>> same_chars(""abcd"", ""dddddddabce"")
// false
// >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
// false
function same_chars($s0, $s1) {
","function same_chars($s0, $s1) {
    $countChars = function($str) {
        $charCount = [];
        for ($i = 0; $i < strlen($str); $i++) {
            $char = $str[$i];
            if (!isset($charCount[$char])) {
                $charCount[$char] = 0;
            }
            $charCount[$char]++;
        }
        return $charCount;
    };

    $countS0 = $countChars($s0);
    $countS1 = $countChars($s1);

    foreach ($countS0 as $char => $count) {
        if (!isset($countS1[$char])) {
            return false;
        }
    }

    foreach ($countS1 as $char => $count) {
        if (!isset($countS0[$char])) {
            return false;
        }
    }

    return true;
}","function candidate(...$args) {
    return same_chars(...$args);
}

function test(): void {
    if (candidate(""eabcdzzzz"", ""dddzzzzzzzddeddabc"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""abcd"", ""dddddddabc"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""dddddddabc"", ""abcd"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""eabcd"", ""dddddddabc"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""abcd"", ""dddddddabcf"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""eabcdzzzz"", ""dddzzzzzzzddddabc"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""aabb"", ""aaccc"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_55,uig_Arab,php,"<?php
//n-چىسلا فىبوناتچى سانىنى قايتۇرىمىز.// >>> fib(10)
// 55
// >>> fib(1)
// 1
// >>> fib(8)
// 21
function fib($n) {
","function fib($n) {
    if ($n <= 0) {
        return 0;
    } elseif ($n === 1) {
        return 1;
    }
    
    $a = 0;
    $b = 1;
    
    for ($i = 2; $i <= $n; $i++) {
        $temp = $a + $b;
        $a = $b;
        $b = $temp;
    }
    
    return $b;
}","function candidate(...$args) {
    return fib(...$args);
}

function test(): void {
    if (candidate(10) !== 55) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== 21) { throw new Exception(""Test failed!""); }
    if (candidate(11) !== 89) { throw new Exception(""Test failed!""); }
    if (candidate(12) !== 144) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_56,uig_Arab,php,"<?php
//ئەگەر ھەر بىر ئېچىلىش قىسمىدا بىر تاقاش قىسمى بولسا true نى قايتۇرۇپ بېرىڭ.//""<"" ۋە "">"" نىڭ ھەرپ بىرىكمىسىدىن ئىبارەت.// >>> correct_bracketing(""<"")
// false
// >>> correct_bracketing(""<>"")
// true
// >>> correct_bracketing(""<<><>>"")
// true
// >>> correct_bracketing(""><<>"")
// false
function correct_bracketing($brackets) {
","function correct_bracketing($brackets) {
    $balance = 0;
    $length = strlen($brackets);

    for ($i = 0; $i < $length; $i++) {
        if ($brackets[$i] === '<') {
            $balance++;
        } else if ($brackets[$i] === '>') {
            $balance--;
        }

        // If at any point the balance is negative, there are more closing than opening brackets
        if ($balance < 0) {
            return false;
        }
    }

    // If balance is zero, all opening brackets have been closed properly
    return $balance === 0;
}","function candidate(...$args) {
    return correct_bracketing(...$args);
}

function test(): void {
    if (candidate(""<>"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""<<><>>"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""<><><<><>><>"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""<><><<<><><>><>><<><><<>>>"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""<<<><>>>>"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""><<>"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""<"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""<<<<"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate("">"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""<<>"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""<><><<><>><>><<>"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""<><><<><>><>>><>"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_57,uig_Arab,php,"<?php
//true نى قايتۇرۇپ بىرىمىز، بۇ بولسا تىزىملىكنىڭ بىر خىل كۈچىيىش ياكى كېتىش ھەرىكىتى.// >>> monotonic(array(1, 2, 4, 20))
// true
// >>> monotonic(array(1, 20, 4, 10))
// false
// >>> monotonic(array(4, 1, 0, -10))
// true
function monotonic($l) {
","function monotonic($l) {
    if (count($l) <= 1) {
        return true;
    }

    $isIncreasing = true;
    $isDecreasing = true;

    for ($i = 1; $i < count($l); $i++) {
        if ($l[$i] > $l[$i - 1]) {
            $isDecreasing = false;
        }
        if ($l[$i] < $l[$i - 1]) {
            $isIncreasing = false;
        }
        if (!$isIncreasing && !$isDecreasing) {
            return false;
        }
    }

    return true;
}","function candidate(...$args) {
    return monotonic(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 4, 10)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 4, 20)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 20, 4, 10)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 1, 0, -10)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 1, 1, 0)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 2, 5, 60)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5, 60)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(9, 9, 9, 9)) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_58,uig_Arab,php,"<?php
//ئىككى تىزىملىكنىڭ رەتلەنگەن ئورتاق ئالاھىدە ئېلمىنتلىرىنى قايتۇرىدۇ.// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))
// array(1, 5, 653)
// >>> common(array(5, 3, 2, 8), array(3, 2))
// array(2, 3)
function common($l1, $l2) {
","function common($l1, $l2) {
    $intersection = array_intersect($l1, $l2);
    $unique = array_unique($intersection);
    sort($unique);
    return $unique;
}","function candidate(...$args) {
    return common(...$args);
}

function test(): void {
    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_59,uig_Arab,php,"<?php
//n نىڭ ئەڭ چوڭ نۇپۇس ئامىلىنى قايتۇرۇپ بىرىمىز. n > 1 نى نۇپۇس ئامىلى ئەمەس دەپ ئالساق. // >>> largest_prime_factor(13195)
// 29
// >>> largest_prime_factor(2048)
// 2
function largest_prime_factor($n) {
","function largest_prime_factor($n) {
    $largestPrime = -1;

    // Divide $n by 2 until it's odd
    while ($n % 2 === 0) {
        $largestPrime = 2;
        $n /= 2;
    }

    // Check for odd factors from 3 to sqrt(n)
    for ($i = 3; $i * $i <= $n; $i += 2) {
        while ($n % $i === 0) {
            $largestPrime = $i;
            $n /= $i;
        }
    }

    // If $n is a prime number greater than 2
    if ($n > 2) {
        $largestPrime = $n;
    }

    return $largestPrime;
}","function candidate(...$args) {
    return largest_prime_factor(...$args);
}

function test(): void {
    if (candidate(15) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(27) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(63) !== 7) { throw new Exception(""Test failed!""); }
    if (candidate(330) !== 11) { throw new Exception(""Test failed!""); }
    if (candidate(13195) !== 29) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_60,uig_Arab,php,"<?php
//sum_to_n بولسا 1 دىن n گىچە بولغان سانلارنى قوشۇپ چىقىدىغان فۇنكسىيە .// >>> sum_to_n(30)
// 465
// >>> sum_to_n(100)
// 5050
// >>> sum_to_n(5)
// 15
// >>> sum_to_n(10)
// 55
// >>> sum_to_n(1)
// 1
function sum_to_n($n) {
","function sum_to_n($n) {
    return ($n * ($n + 1)) / 2;
}","function candidate(...$args) {
    return sum_to_n(...$args);
}

function test(): void {
    if (candidate(1) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== 21) { throw new Exception(""Test failed!""); }
    if (candidate(11) !== 66) { throw new Exception(""Test failed!""); }
    if (candidate(30) !== 465) { throw new Exception(""Test failed!""); }
    if (candidate(100) !== 5050) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_61,uig_Arab,php,"<?php
//ئەگەر ھەر بىر ئېچىلىش قىسمىدا بىر تاقاش قىسمى بولسا true نى قايتۇرۇپ بېرىڭ.//""{"" بىلەن ""}"" نىڭ ھەرپ بىرىكمىسىدىن ئىبارەت.// >>> correct_bracketing(""("")
// false
// >>> correct_bracketing(""()"")
// true
// >>> correct_bracketing(""(()())"")
// true
// >>> correct_bracketing("")(()"")
// false
function correct_bracketing($brackets) {
","function correct_bracketing($brackets) {
    $balance = 0;
    $n = strlen($brackets);
    
    for ($i = 0; $i < $n; $i++) {
        if ($brackets[$i] === '(') {
            $balance++;
        } elseif ($brackets[$i] === ')') {
            $balance--;
        }
        
        if ($balance < 0) {
            return false;
        }
    }
    
    return $balance === 0;
}","function candidate(...$args) {
    return correct_bracketing(...$args);
}

function test(): void {
    if (candidate(""()"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""(()())"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""()()(()())()"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""()()((()()())())(()()(()))"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""((()())))"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate("")(()"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""("") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""(((("") !== false) { throw new Exception(""Test failed!""); }
    if (candidate("")"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""(()"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""()()(()())())(()"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""()()(()())()))()"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_62,uig_Arab,php,"<?php
//بۇ كۆپبەلگەنىڭ ئوخشاش شەكىلدىكى تىپىنى قايتۇرىمىز.//xs[0] + xs[1] * x + xs[2] * x^2 + .... //x بىر كۆپ خىل ئاتالغۇنىڭ قوشۇمچە قىممىتىگە ۋەكىللىك قىلىدۇ.// >>> derivative(array(3, 1, 2, 4, 5))
// array(1, 4, 12, 20)
// >>> derivative(array(1, 2, 3))
// array(2, 6)
function derivative($xs) {
","function derivative($xs) {
    $derivative = [];
    for ($i = 1; $i < count($xs); $i++) {
        $derivative[] = $xs[$i] * $i;
    }
    return $derivative;
}","function candidate(...$args) {
    return derivative(...$args);
}

function test(): void {
    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_63,uig_Arab,php,"<?php
//بىر جۈملە فىپفىن نۇمۇر تىزىملىكىنىڭ ن ن ئېلمىنتىنى ئۈنۈملۈك ھىسابلاش فۇنكسىيەسىنى يىزىپ بېرىڭ.//fibfib (n) == fibfib (n-1) + fibfib (n-2) + fibfib (n-3)//(ئۈچىنچى) == 1 //f ({}) f ({}) f ({) f ({)//fib fib ({0) == 0 //فايبوبىنكىلىق فايبوبىنكىلىق تىزىملىك بولسا فايبوبىنكىلىق تىزىملىككە ئوخشايدىغان تىزىملىك بولۇپ، تۆۋەندىكىدەك ئېنىقلىنىدۇ:// >>> fibfib(1)
// 0
// >>> fibfib(5)
// 4
// >>> fibfib(8)
// 24
function fibfib($n) {
","function fibfib($n) {
    if ($n === 0) return 0;
    if ($n === 1) return 0;
    if ($n === 2) return 1;

    $fibfib_values = [0, 0, 1];

    for ($i = 3; $i <= $n; $i++) {
        $fibfib_values[$i] = $fibfib_values[$i - 1] + $fibfib_values[$i - 2] + $fibfib_values[$i - 3];
    }

    return $fibfib_values[$n];
}","function candidate(...$args) {
    return fibfib(...$args);
}

function test(): void {
    if (candidate(2) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== 24) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== 81) { throw new Exception(""Test failed!""); }
    if (candidate(12) !== 274) { throw new Exception(""Test failed!""); }
    if (candidate(14) !== 927) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_64,uig_Arab,php,"<?php
//مىسال://پەقەتلا سۆزنىڭ ئاخىرىدا يېزىلغاندا.//بۇ يەردە سۆزلەرنىڭ ھەرپلىرى a، e، i، o، u. بۇ يەردە yمۇ a//ۋە سۆز بىرىكمىسىدىكى ھەرپلەرنى قايتۇرۇپ بېرىدۇ.//بىر فونكىسىيە يېزىڭ vowels_count بۇ فۇنكىسىيەگە بىر تارنى قوشۇپ // >>> vowels_count(""abcde"")
// 2
// >>> vowels_count(""ACEDY"")
// 3
function vowels_count($s) {
","function vowels_count($s) {
    $vowels = ['a', 'e', 'i', 'o', 'u'];
    $count = 0;
    $length = strlen($s);
    
    for ($i = 0; $i < $length; $i++) {
        $char = strtolower($s[$i]);
        if (in_array($char, $vowels)) {
            $count++;
        }
        if ($char === 'y' && $i === $length - 1) {
            $count++;
        }
    }
    
    return $count;
}","function candidate(...$args) {
    return vowels_count(...$args);
}

function test(): void {
    if (candidate(""abcde"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""Alone"") !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(""key"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""bye"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""keY"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""bYe"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""ACEDY"") !== 3) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_65,uig_Arab,php,"<?php
//ئەگەر shift > سانلىق بەلگە بولسا، قايتۇرغان سانلىق بەلگىلىرى ئەكسىچە بولىدۇ.//ۋە نەتىجىنى بىر تار شەكلىدە قايتۇرۇپ بېرىدۇ.//سىنبەلگە ئارقىلىق، بىز بىراۋنىڭ ھەر بىر خانىسىنى يۆتكەپ، ئوڭغا يۆتكەپ، x غا يۆتكەپ يۈرىمىز.// >>> circular_shift(12, 1)
// ""21""
// >>> circular_shift(12, 2)
// ""12""
function circular_shift($x, $shift) {
","function circular_shift($x, $shift) {
    $digits = strval($x);
    $num_digits = strlen($digits);

    if ($shift > $num_digits) {
        return strrev($digits);
    }

    $shift = $shift % $num_digits;
    if ($shift == 0) {
        return $digits;
    }

    $right_part = substr($digits, -$shift);
    $left_part = substr($digits, 0, $num_digits - $shift);

    return $right_part . $left_part;
}","function candidate(...$args) {
    return circular_shift(...$args);
}

function test(): void {
    if (candidate(100, 2) !== ""001"") { throw new Exception(""Test failed!""); }
    if (candidate(12, 2) !== ""12"") { throw new Exception(""Test failed!""); }
    if (candidate(97, 8) !== ""79"") { throw new Exception(""Test failed!""); }
    if (candidate(12, 1) !== ""21"") { throw new Exception(""Test failed!""); }
    if (candidate(11, 101) !== ""11"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_66,uig_Arab,php,"<?php
//مىساللار://ASCII كودى//"".ئەرەبچىگە ئوخشاش سۆز بىرىكمىسىدىن بىرنى ئېلىپ، پەقەت چوڭ ھەرپلەرنىڭ جۈملىسىنىلا يازىمىز""//ۋەزىپە // >>> digitSum("""")
// 0
// >>> digitSum(""abAB"")
// 131
// >>> digitSum(""abcCd"")
// 67
// >>> digitSum(""helloE"")
// 69
// >>> digitSum(""woArBld"")
// 131
// >>> digitSum(""aAaaaXa"")
// 153
function digitSum($s) {
","function digitSum($s) {
    $sum = 0;
    for ($i = 0; $i < strlen($s); $i++) {
        if (ctype_upper($s[$i])) {
            $sum += ord($s[$i]);
        }
    }
    return $sum;
}","function candidate(...$args) {
    return digitSum(...$args);
}

function test(): void {
    if (candidate("""") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""abAB"") !== 131) { throw new Exception(""Test failed!""); }
    if (candidate(""abcCd"") !== 67) { throw new Exception(""Test failed!""); }
    if (candidate(""helloE"") !== 69) { throw new Exception(""Test failed!""); }
    if (candidate(""woArBld"") !== 131) { throw new Exception(""Test failed!""); }
    if (candidate(""aAaaaXa"") !== 153) { throw new Exception(""Test failed!""); }
    if (candidate("" How are yOu?"") !== 151) { throw new Exception(""Test failed!""); }
    if (candidate(""You arE Very Smart"") !== 327) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_67,uig_Arab,php,"<?php
//(ئالقىش ئۈچۈن)://.ئۇچۇرغا سانلىق مەلۇماتلارنى كىرگۈزۈپ، سانلىق مەلۇماتلارنى كىرگۈزۈپ،//-- بۇ بولسا سىياھبېلىق ، ئالما ۋە جەمىستىڭ ئومۇمىي سانىنى بىلدۈرىدىغان پۈتۈن سان//سۇلغۇنلۇقتا، ئاپلىسىن ۋە مانجو قاتارلىقلارنى .جەمئىي ساننى كۆرسىتىپ بېرىدىغان سىتونى كۆرسىتىپ بىرىمىز//ئۇلار (ئالتۇننى باغلاپ) ھېلىقى باغنىڭ مېۋىسىنى كۆيدۈرىدۇ//بۇ مەشىق ئارقىلىق، بىر قىسىم ئالمىلارنى ۋە نارنجىنى سۈرىمىز.// >>> fruit_distribution(""5 apples and 6 oranges"", 19)
// 8
// >>> fruit_distribution(""0 apples and 1 oranges"", 3)
// 2
// >>> fruit_distribution(""2 apples and 3 oranges"", 100)
// 95
// >>> fruit_distribution(""100 apples and 1 oranges"", 120)
// 19
function fruit_distribution($s, $n) {
","function fruit_distribution($s, $n) {
    // Extract numbers from the string using regular expression
    preg_match_all('!\d+!', $s, $matches);
    
    // Find out number of apples and oranges from the matches
    $apples = $matches[0][0];
    $oranges = $matches[0][1];
    
    // Calculate total mangoes
    $total_apples_and_oranges = $apples + $oranges;
    $mangoes = $n - $total_apples_and_oranges;
    
    return $mangoes;
}

// Example usage:
echo fruit_distribution(""5 apples and 6 oranges"", 19); // Output: 8","function candidate(...$args) {
    return fruit_distribution(...$args);
}

function test(): void {
    if (candidate(""5 apples and 6 oranges"", 19) !== 8) { throw new Exception(""Test failed!""); }
    if (candidate(""5 apples and 6 oranges"", 21) !== 10) { throw new Exception(""Test failed!""); }
    if (candidate(""0 apples and 1 oranges"", 3) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""1 apples and 0 oranges"", 3) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""2 apples and 3 oranges"", 100) !== 95) { throw new Exception(""Test failed!""); }
    if (candidate(""2 apples and 3 oranges"", 5) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""1 apples and 100 oranges"", 120) !== 19) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_68,uig_Arab,php,"<?php
//مىسال 1://ئەگەر جۈپ قىممەتلەر بولمىسا ياكى بېرىلگەن تىزىملىك بوش بولسا، [] نى قايتۇرۇڭ.//تاللانغان گىدالنى بىر ماتېرىيالدا قايتۇرۇپ بىرىمىز، [smallest_value، ئۇنىڭ كۆرسەتكۈچى]، //ئەگەر ئوخشاش كىچىك بىر جۈپ قىممەتتىكى بىر قانچە گىد بار بولسا، ئەڭ كىچىك كۆرسەتكۈچكە ئىگە گىدنى قايتۇرۇپ بىرىمىز.//بۇ نوپۇس ئەڭ كىچىك، ئەڭ كىچىك ھەتتا ئەڭ چوڭ نۇسخا بولسا كېرەك.//.سىز شۇ يېرىدىن بىرنى ئالسىڭىز، ئاندىن يەنە بىرنى ئالسىڭىز بولىدۇ//""نەقنىي سانسىز پۈتۈن گەۋدىلەر بار دەرەخنىڭ شاخىنى ئىپادىلەيدىغان تىزىمغا// >>> pluck(array(4, 2, 3))
// array(2, 1)
// Explanation: 2 has the smallest even value, and 2 has the smallest index.
// Example 2:
// >>> pluck(array(1, 2, 3))
// array(2, 1)
// Explanation: 2 has the smallest even value, and 2 has the smallest index.
// Example 3:
// >>> pluck(array())
// array()
// Example 4:
// >>> pluck(array(5, 0, 3, 0, 4, 2))
// array(0, 1)
// Explanation: 0 is the smallest value, but  there are two zeros,
// so we will choose the first zero, which has the smallest index.
// Constraints:
// * 1 <= nodes.length <= 10000
// * 0 <= node.value
function pluck($arr) {
","function pluck($arr) {
    $smallestEven = null;
    $smallestIndex = null;

    foreach ($arr as $index => $value) {
        if ($value % 2 == 0) {
            if ($smallestEven === null || $value < $smallestEven) {
                $smallestEven = $value;
                $smallestIndex = $index;
            }
        }
    }

    return $smallestEven === null ? [] : [$smallestEven, $smallestIndex];
}","function candidate(...$args) {
    return pluck(...$args);
}

function test(): void {
    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(7, 6, 7, 1)) !== array(6, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(7, 9, 7, 1)) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_69,uig_Arab,php,"<?php
//مىساللار://ئەگەر بۇنداق قىممەت مەۋجۇت بولمىسا، -1 نى قايتۇر.//بىر پۈتۈن ساننىڭ تەكرارلانما سانى، ئۇ جەدۋەلدىكى ھەر قېتىملىق پەيدا بولۇش سانى.//بۇ ساننىڭ جەدۋىلى 0 بولۇپ، ئۇ نۆلدىن چوڭ ياكى نۆلدىن كىچىك، ئۇ نۆلدىن چوڭ ياكى نۆلدىن كىچىك، ئۇ نۆلدىن كىچىك، ئۇ نۆلدىن كىچىك، ئۇ نۆلدىن كىچىك، ئۇ نۆلدىن كىچىك، ئۇ نۆلدىن كىچىك، ئۇ نۆلدىن كىچىك، ئۇ نۆلدىن كىچىك.//سىز بىر جەدۋەللىك نۇسخىدىكى خەنزۇچىدىكى ئەڭ چوڭ سىنبەلگەنى قايتۇرىسىز.// >>> search(array(4, 1, 2, 2, 3, 1))
// 2
// >>> search(array(1, 2, 2, 3, 3, 3, 4, 4, 4))
// 3
// >>> search(array(5, 5, 4, 4, 4))
// -1
function search($lst) {
","function search($lst) {
    // Create an associative array to store the frequencies of each integer
    $frequency = array_count_values($lst);

    // Initialize the result to -1 (to be returned if no valid integer is found)
    $result = -1;

    // Iterate over the frequency array
    foreach ($frequency as $number => $count) {
        // Check if the integer meets the criteria
        if ($number <= $count && $number > $result) {
            $result = $number;
        }
    }

    return $result;
}","function candidate(...$args) {
    return search(...$args);
}

function test(): void {
    if (candidate(array(5, 5, 5, 5, 1)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 1, 4, 1, 4, 4)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 3)) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(array(8, 8, 8, 8, 8, 8, 8, 8)) !== 8) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 3, 3, 2, 2)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 8, 2)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(8, 8, 3, 6, 5, 6, 4)) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(array(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 9, 10, 1, 3)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(array(10)) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(array(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 10, 10, 9, 2)) !== -1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_70,uig_Arab,php,"<?php
//مىساللار://ئەڭ چوڭ نۇمۇرى، ئەڭ كىچىك نۇمۇرى ۋە شۇنىڭغا ئوخشاش نەرسىلەر بىلەن تولدۇرۇلغان.//،ئەڭ كىچىك سان بىلەن باشلاش،ئەڭ چوڭ ساننى چىقىرىش//بىر پۈتۈن سان جەدۋىلىگە، بىر پۈتۈن سان جەدۋىلىگە ئوخشاش، بىر پۈتۈن سان جەدۋىلىگە ئوخشاش، بىر پۈتۈن سان جەدۋىلىگە ئوخشاش، بىر پۈتۈن سان جەدۋىلىگە ئوخشاش// >>> strange_sort_list(array(1, 2, 3, 4))
// array(1, 4, 2, 3)
// >>> strange_sort_list(array(5, 5, 5, 5))
// array(5, 5, 5, 5)
// >>> strange_sort_list(array())
// array()
function strange_sort_list($lst) {
","function strange_sort_list($lst) {
    $result = array();
    sort($lst); // Sort the array in ascending order
    
    while (!empty($lst)) {
        // Take the first (minimum) element
        $result[] = array_shift($lst);
        
        // If there are still elements left, take the last (maximum) element
        if (!empty($lst)) {
            $result[] = array_pop($lst);
        }
    }
    
    return $result;
}","function candidate(...$args) {
    return strange_sort_list(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(111111)) !== array(111111)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_71,uig_Arab,php,"<?php
//مىسال://.دېمىسىمۇ ئۇ يەنىلا ئۈچىنچى پىرسەنت//ئەگەر ھەر ئىككى تەرەپنىڭ سوممىسى چوڭ بولسا ئۈچ تەرەپ بىر ئۈچ بۇلۇڭنى ھاسىل قىلىدۇ .//بولمىسا -1 نى قايتۇر .//ئۈچ تەرەپ بىر ئۈچ بۇلۇڭنى تۈزسە ئۈچ بۇلۇڭنىڭ ئۇچىدا ئوندىن ئىككى بار//.ئۈچ بۈلۈمنىڭ ئۈچ تەرىپىنىڭ ئۇزۇنلۇقىنى بىرلىككە كەلتۈرۈپ، بىز  نىڭ يۈزىنى قايتۇرىمىز// >>> triangle_area(3, 4, 5)
// 6.0
// >>> triangle_area(1, 2, 10)
// -1
function triangle_area($a, $b, $c) {
","function triangle_area($a, $b, $c) {
    // Check if the sides form a valid triangle
    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {
        // Calculate semi-perimeter
        $s = ($a + $b + $c) / 2;
        // Calculate the area using Heron's formula
        $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));
        // Return the area rounded to 2 decimal places
        return round($area, 2);
    } else {
        return -1; // Not a valid triangle
    }
}","function candidate(...$args) {
    return triangle_area(...$args);
}

function test(): void {
    if (candidate(3, 4, 5) !== 6.0) { throw new Exception(""Test failed!""); }
    if (candidate(1, 2, 10) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(4, 8, 5) !== 8.18) { throw new Exception(""Test failed!""); }
    if (candidate(2, 2, 2) !== 1.73) { throw new Exception(""Test failed!""); }
    if (candidate(1, 2, 3) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(10, 5, 7) !== 16.25) { throw new Exception(""Test failed!""); }
    if (candidate(2, 6, 3) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(1, 1, 1) !== 0.43) { throw new Exception(""Test failed!""); }
    if (candidate(2, 2, 10) !== -1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_72,uig_Arab,php,"<?php
//مىسال://ئەگەر جىسىم توازنلىق بولسا (خۇددى پىلىندروم تىپىدىكى بىر جىسىمغا ئوخشاش) ۋە جىسىمنىڭ بىرىكمىسى ئەڭ چوڭ تىپتىكى ئېغىرلىق بىلەن باراۋەر بولسا جىسىم ئۇچۇپ كېتىدۇ.//ئەگەر q جىسىم ئۇچۇپ كەتسە true، ئەگەر ئۇچمىسا false دەپ قايتۇرغان فۇنكسىيەنى يازىمىز.// >>> will_it_fly(array(1, 2), 5)
// false
// # 1+2 is less than the maximum possible weight, but it's unbalanced.
// >>> will_it_fly(array(3, 2, 3), 1)
// false
// # it's balanced, but 3+2+3 is more than the maximum possible weight.
// >>> will_it_fly(array(3, 2, 3), 9)
// true
// # 3+2+3 is less than the maximum possible weight, and it's balanced.
// >>> will_it_fly(array(3), 5)
// true
// # 3 is less than the maximum possible weight, and it's balanced.
function will_it_fly($q, $w) {
","function will_it_fly($q, $w) {
    // Check if the array is palindromic
    if ($q !== array_reverse($q)) {
        return false;
    }
    
    // Calculate the sum of elements in the array
    $sum = array_sum($q);
    
    // Check if the sum is less than or equal to the maximum possible weight
    return $sum <= $w;
}","function candidate(...$args) {
    return will_it_fly(...$args);
}

function test(): void {
    if (candidate(array(3, 2, 3), 9) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2), 5) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(3), 5) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 3), 1) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3), 6) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(5), 5) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_73,uig_Arab,php,"<?php
//مەسىلەن: //بۇ يەردىكى گەپلەرنىڭ ھەممىسى دەل مۇشۇ يەردە، يەنى بىر تەرەپتىن، يەنە بىر تەرەپتىن، سىز بىر تەرەپنى ئۆزگەرتەلەيسىز، يەنە بىر تەرەپنى ئۆزگەرتەلەيسىز.//بۇ يەردىكى ھەرپلەرنى ئۆزگەرتىشكە توغرا كېلىدۇ.//بىر جۈملىگە arr نى قوشۇپ، ئەڭ ئاز ساندىكى جۈملىلەرنى تېپىپ چىقىڭ// >>> smallest_change(array(1, 2, 3, 5, 4, 7, 9, 6))
// 4
// >>> smallest_change(array(1, 2, 3, 4, 3, 2, 2))
// 1
// >>> smallest_change(array(1, 2, 3, 2, 1))
// 0
function smallest_change($arr) {
","function smallest_change($arr) {
    $n = count($arr);
    $changes = 0;

    for ($i = 0; $i < $n / 2; $i++) {
        if ($arr[$i] !== $arr[$n - $i - 1]) {
            $changes++;
        }
    }

    return $changes;
}","function candidate(...$args) {
    return smallest_change(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3, 5, 4, 7, 9, 6)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 3, 2, 2)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 4, 2)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 4, 4, 2)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 2, 1)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 1, 1, 3)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 1)) !== 1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_74,uig_Arab,php,"<?php
//مىساللار//ئەگەر ئىككىلا تىزىملىكنىڭ ھەرپ سانى ئوخشاش بولسا، بىرىنچى تىزىملىكنى قايتۇرىمىز.//matrix نىڭ ھەر بىر تارىدىكى تېكىستلەرنىڭ سانى matrix نىڭ ھەر بىر تارىدىكى تېكىستلەرنىڭ سانى بىلەن ئوخشاش .//ئىككى تال تار تىزمىنى قوبۇل قىلىپ ،  نىڭ بار تىزمىنى قايتۇرغان فۇنكسىيەنى يازىمىز .// >>> total_match(array(), array())
// array()
// >>> total_match(array(""hi"", ""admin""), array(""hI"", ""Hi""))
// array(""hI"", ""Hi"")
// >>> total_match(array(""hi"", ""admin""), array(""hi"", ""hi"", ""admin"", ""project""))
// array(""hi"", ""admin"")
// >>> total_match(array(""hi"", ""admin""), array(""hI"", ""hi"", ""hi""))
// array(""hI"", ""hi"", ""hi"")
// >>> total_match(array(""4""), array(""1"", ""2"", ""3"", ""4"", ""5""))
// array(""4"")
function total_match($lst1, $lst2) {
","function total_match($lst1, $lst2) {
    $countChars = function($arr) {
        $totalChars = 0;
        foreach ($arr as $str) {
            $totalChars += strlen($str);
        }
        return $totalChars;
    };

    $chars1 = $countChars($lst1);
    $chars2 = $countChars($lst2);

    if ($chars1 < $chars2) {
        return $lst1;
    } else {
        return $lst2;
    }
}","function candidate(...$args) {
    return total_match(...$args);
}

function test(): void {
    if (candidate(array(), array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(""hi"", ""admin""), array(""hi"", ""hi"")) !== array(""hi"", ""hi"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""hi"", ""admin""), array(""hi"", ""hi"", ""admin"", ""project"")) !== array(""hi"", ""admin"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""4""), array(""1"", ""2"", ""3"", ""4"", ""5"")) !== array(""4"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""hi"", ""admin""), array(""hI"", ""Hi"")) !== array(""hI"", ""Hi"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""hi"", ""admin""), array(""hI"", ""hi"", ""hi"")) !== array(""hI"", ""hi"", ""hi"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""hi"", ""admin""), array(""hI"", ""hi"", ""hii"")) !== array(""hi"", ""admin"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(), array(""this"")) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(""this""), array()) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_75,uig_Arab,php,"<?php
//مىسال://a نىڭ 100 دىن كىچىك ئىكەنلىكىنى بىلىش.//ئۇنداق ئەمەس (يەنى بۇ كاپىر ئىنسان تەكەببۇرلۇقىدىن يانسۇن)//ئەگەر بېرىلگەن سان 3 نۇپۇسنىڭ ھەسسىلەپ بىرىكىمى بولسا true دەپ قايتۇرغان فۇنكسىيەنى يازىمىز .// >>> is_multiply_prime(30)
// true
// 30 = 2 * 3 * 5
function is_multiply_prime($a) {
","function is_prime($num) {
    if ($num <= 1) return false;
    if ($num <= 3) return true;
    if ($num % 2 == 0 || $num % 3 == 0) return false;
    for ($i = 5; $i * $i <= $num; $i += 6) {
        if ($num % $i == 0 || $num % ($i + 2) == 0) return false;
    }
    return true;
}

function is_multiply_prime($a) {
    if ($a < 2) return false;
    $primes = [];
    for ($i = 2; $i < 100; $i++) {
        if (is_prime($i)) {
            $primes[] = $i;
        }
    }
    $count = count($primes);
    for ($i = 0; $i < $count; $i++) {
        for ($j = $i; $j < $count; $j++) {
            for ($k = $j; $k < $count; $k++) {
                if ($primes[$i] * $primes[$j] * $primes[$k] == $a) {
                    return true;
                }
            }
        }
    }
    return false;
}","function candidate(...$args) {
    return is_multiply_prime(...$args);
}

function test(): void {
    if (candidate(5) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(30) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(125) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(105) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(126) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(729) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(891) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(1001) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_76,uig_Arab,php,"<?php
//مەسىلەن: //x بولسا n نىڭ بىر دەرىجىسى، ئەگەر n**int=x بولسا//ۋە باشقا ئەھۋاللاردا false.//ئەگەر x بىر ئاددى سان بولسا، true نى قايتۇرغان فۇنكسىيەنى يېزىش.// >>> is_simple_power(1, 4)
// true
// >>> is_simple_power(2, 2)
// true
// >>> is_simple_power(8, 2)
// true
// >>> is_simple_power(3, 2)
// false
// >>> is_simple_power(3, 1)
// false
// >>> is_simple_power(5, 3)
// false
function is_simple_power($x, $n) {
","function is_simple_power($x, $n) {
    if ($x < 1 || $n < 1) {
        return false;
    }

    $power = 1;
    while ($power < $x) {
        $power *= $n;
    }

    return $power === $x;
}","function candidate(...$args) {
    return is_simple_power(...$args);
}

function test(): void {
    if (candidate(16, 2) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(143214, 16) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(4, 2) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(9, 3) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(16, 4) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(24, 2) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(128, 4) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(12, 6) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(1, 1) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(1, 12) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_77,uig_Arab,php,"<?php
//مىساللار://ئەسكەرتىش: سىز كىرگۈزگەن ئۇچۇرلارنى دائىم كۈچكە ئىگە دەپ پەرەز قىلسىڭىز بولىدۇ.//بۇ بىر پۈتۈن ساننىڭ بىر قوشۇمچىسى، يەنى بىر پۈتۈن ساننىڭ بىر مۇكاپاتى//بىر پۈتۈن سان a نى ئېلىپ true نى قايتۇرغان فۇنكسىيەنى يازىمىز .// >>> iscube(1)
// true
// >>> iscube(2)
// false
// >>> iscube(-1)
// true
// >>> iscube(64)
// true
// >>> iscube(0)
// true
// >>> iscube(180)
// false
function iscube($a) {
","function iscube($a) {
    $cubeRoot = round(pow(abs($a), 1/3));
    return $cubeRoot * $cubeRoot * $cubeRoot === abs($a);
}","function candidate(...$args) {
    return iscube(...$args);
}

function test(): void {
    if (candidate(1) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(2) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(-1) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(64) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(180) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(1000) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(0) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(1729) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_78,uig_Arab,php,"<?php
//مىساللار://.ئەرەبچىدىكى ھەرپلەر دائىم چوڭ ھەرپلەر//دىققەت: سىز ھەرۋاقىت كىرگۈزگەن ئۇچۇرنى توغرا ياكى قۇرۇق دەپ پەرەز قىلسىڭىز بولىدۇ.//B (= ئوندىن بىرى 11), D (= ئوندىن بىرى 13)//شۇڭلاشقا، بىز تۆۋەندىكى ھەرپلەرنىڭ بىرىنى تېپىپ چىقىشىمىز كېرەك: 2,3,5,7,//بىرىنچى سانلار: 2,3,5,7,11,13,17,...//ئون ئالتە خانىلىق سانلار بولسا: 0،1،2،3،4،5،6،7،8،9، A،B،C،D،E،F//بۇ بىر دانە چوڭ بولغان ئىككى كىچىك تەبىئىي ساننىڭ بىرىنىڭ قوشۇمچىسى ئەمەس)//(بۇرۇنقى نۇمۇرلار بولسا بىرخىل نۇمۇرلار)//بىر دانە ئون ئالتە يۈزلۈك ساننى . بىر دانە ئون ئالتە يۈزلۈك سانغا ئايلاندۇرۇپ .//سىز قوبۇل قىلغۇچى فۇنكسىيە يېزىشنى تاپشۇرۇۋالدىڭىز .// >>> hex_key(""AB"")
// 1
// >>> hex_key(""1077E"")
// 2
// >>> hex_key(""ABED1A33"")
// 4
// >>> hex_key(""123456789ABCDEF0"")
// 6
// >>> hex_key(""2020"")
// 2
function hex_key($num) {
","function hex_key($num) {
    // Map of hexadecimal digits to their respective prime number interpretation
    $primeDigits = ['2', '3', '5', '7', 'B', 'D'];
    
    // Initialize count for prime numbers
    $primeCount = 0;

    // Iterate through each character in the hexadecimal string
    for ($i = 0; $i < strlen($num); $i++) {
        // Get the current character
        $char = $num[$i];

        // Check if the character is a prime hexadecimal digit
        if (in_array($char, $primeDigits)) {
            $primeCount++;
        }
    }

    // Return the count of prime hexadecimal digits
    return $primeCount;
}","function candidate(...$args) {
    return hex_key(...$args);
}

function test(): void {
    if (candidate(""AB"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""1077E"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""ABED1A33"") !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(""2020"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""123456789ABCDEF0"") !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(""112233445566778899AABBCCDDEEFF00"") !== 12) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_79,uig_Arab,php,"<?php
//مىساللار://.كۆپچىلىككە ئايلانغىنىدەك، بۇ سان-سىناقلار ئارقىلىقمۇ ئېنىقراق بولغان .//.سىز بىر قانچە ھەرپلەرنى باشتا ۋە ئاخىرىدا قوشۇپ يېزىپ بىر تەرەپ قىلالايسىز//ھەربىر بەلگە ""0"" ياكى ""1"" غا تەڭ.//بۇ فۇنكسىيە بىر ھەرپ بىلەن بىر باينار فۇنكسىيەگە ۋەكىللىك قىلىپ بىر ھەرپ تارىنى قايتۇرىدۇ.//،سىزگە بىر ئونلۇق شەكىلدىكى سان بېرىلىدۇ .سىزنىڭ ۋەزىپىڭىز ئۇنى .ئەسلى ھەرپكە ئايلاندۇرۇش// >>> decimal_to_binary(15)
// ""db1111db""
// >>> decimal_to_binary(32)
// ""db100000db""
function decimal_to_binary($decimal) {
","function decimal_to_binary($decimal) {
    // Convert the decimal number to binary string
    $binary = decbin($decimal);
    
    // Add 'db' at the start and end of the binary string
    return 'db' . $binary . 'db';
}","function candidate(...$args) {
    return decimal_to_binary(...$args);
}

function test(): void {
    if (candidate(0) !== ""db0db"") { throw new Exception(""Test failed!""); }
    if (candidate(32) !== ""db100000db"") { throw new Exception(""Test failed!""); }
    if (candidate(103) !== ""db1100111db"") { throw new Exception(""Test failed!""); }
    if (candidate(15) !== ""db1111db"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_80,uig_Arab,php,"<?php
//مەسىلەن: //ھەربىر ھەرپنىڭ ئۇزۇنلۇقى 3 دىن ئاز بولمىسا ۋە ئارقا-ئارقىدىن كەلگەن ھەرپلەرنىڭ ھەممىسى ئوخشىمىسا، ھەرپنىڭ تىپى ""ھاپپ"" بولىدۇ.//سىزنىڭ ۋەزىپىڭىز بولسا: بۇ سىتوننىڭ توغرا ياكى خاتا ئىكەنلىكىنى تەكشۈرۈش.//.سىز شۇ كودنى قايتا قوزغاتسىڭىز بولىدۇ// >>> is_happy(""a"")
// false
// >>> is_happy(""aa"")
// false
// >>> is_happy(""abcd"")
// true
// >>> is_happy(""aabb"")
// false
// >>> is_happy(""adb"")
// true
// >>> is_happy(""xyy"")
// false
function is_happy($s) {
","function is_happy($s) {
    $length = strlen($s);
    if ($length < 3) {
        return false;
    }

    for ($i = 0; $i <= $length - 3; $i++) {
        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {
            return false;
        }
    }

    return true;
}","function candidate(...$args) {
    return is_happy(...$args);
}

function test(): void {
    if (candidate(""a"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""aa"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""abcd"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""aabb"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""adb"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""xyy"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""iopaxpoi"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""iopaxioi"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_81,uig_Arab,php,"<?php
//مىسال://.0 E //D- //> 0.7 D //> 1.0 D+ //> 1.3 C- //> 1.7 سېنتېگىراد//C+ //> 2.3 B- //> 2.7 B //> 3.0 B+ //> 3.3 A- //> 3.7 A //4.0 A+ //.ئادەتتىكى بالىلار، دەل مۇشۇنداق//تۆۋەندىكى جەدۋەلنى ئىشلىتىپ ھەرپ دەرىجىسى تىزىملىكىنى چىقىرىدىغان فۇنكسىيە: //ئۇ سىزگە بىر قىسىم ئوقۇغۇچىلارنىڭ ئوتتۇرىچە نەتىجىسىنى بەردى .سىز چوقۇم يېزىپ بېرىشىڭىز كېرەك .//مەسىلە شۇكى، ئۇ باھالاش ئۈچۈن ئىشلىگەن كودنى يوقىتىپ قويغان.//ئوقۇتقۇچى ئۆزىنىڭ ئۆلچەملىك ئەلىرگورىتىنى ياسىدى//بۇ مەۋسۈمنىڭ ئاخىرقى ھەپتىسى بولۇپ ، ئوقۇتقۇچى نومۇر بېرىشكە توغرا كېلىدۇ .// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))
// array(""A+"", ""B"", ""C-"", ""C"", ""A-"")
function numerical_letter_grade($grades) {
","function numerical_letter_grade($grades) {
    $letterGrades = array();

    foreach ($grades as $gpa) {
        if ($gpa >= 4.0) {
            $letterGrades[] = ""A+"";
        } elseif ($gpa > 3.7) {
            $letterGrades[] = ""A"";
        } elseif ($gpa > 3.3) {
            $letterGrades[] = ""A-"";
        } elseif ($gpa > 3.0) {
            $letterGrades[] = ""B+"";
        } elseif ($gpa > 2.7) {
            $letterGrades[] = ""B"";
        } elseif ($gpa > 2.3) {
            $letterGrades[] = ""B-"";
        } elseif ($gpa > 2.0) {
            $letterGrades[] = ""C+"";
        } elseif ($gpa > 1.7) {
            $letterGrades[] = ""C"";
        } elseif ($gpa > 1.3) {
            $letterGrades[] = ""C-"";
        } elseif ($gpa > 1.0) {
            $letterGrades[] = ""D+"";
        } elseif ($gpa > 0.7) {
            $letterGrades[] = ""D"";
        } elseif ($gpa > 0.0) {
            $letterGrades[] = ""D-"";
        } else {
            $letterGrades[] = ""E"";
        }
    }

    return $letterGrades;
}","function candidate(...$args) {
    return numerical_letter_grade(...$args);
}

function test(): void {
    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(""A+"", ""B"", ""C-"", ""C"", ""A-"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.2)) !== array(""D+"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(0.5)) !== array(""D-"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(0.0)) !== array(""E"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 0.3, 1.5, 2.8, 3.3)) !== array(""D"", ""D-"", ""C-"", ""B"", ""B+"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(0.0, 0.7)) !== array(""E"", ""D-"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_82,uig_Arab,php,"<?php
//مىساللار//length بولسا بىر باشتا سان ياكى خاتا بولسا باشقا سان//ئەگەر string نىڭ مەزمۇنى true بولسا true دەپ قايتۇرغان فۇنكسىيەنى يازىمىز .// >>> prime_length(""Hello"")
// true
// >>> prime_length(""abcdcba"")
// true
// >>> prime_length(""kittens"")
// true
// >>> prime_length(""orange"")
// false
function prime_length($string) {
","function prime_length($string) {
    $length = strlen($string);

    if ($length < 2) {
        return false;
    }

    for ($i = 2; $i <= sqrt($length); $i++) {
        if ($length % $i === 0) {
            return false;
        }
    }

    return true;
}","function candidate(...$args) {
    return prime_length(...$args);
}

function test(): void {
    if (candidate(""Hello"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdcba"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""kittens"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""orange"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""wow"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""world"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""MadaM"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""Wow"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""HI"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""go"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""gogo"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""aaaaaaaaaaaaaaa"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""Madam"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""M"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""0"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_83,uig_Arab,php,"<?php
//.ئۇ 1 دىن باشلىنىدۇ ياكى 1 بىلەن ئاخىرلىشىدۇ//بىر قوشۇمچە پۈتۈن سان n غا، ن-نۇمۇرلۇق سانلارنى قايتۇرىمىز.function starts_one_ends($n) {
","function starts_one_ends($n) {
    if ($n <= 0) return 0;
    if ($n == 1) return 1;

    $total_count = 9 * pow(10, $n - 1); // Total count of n-digit numbers
    $non_one_start_count = 8 * pow(10, $n - 2); // n-digit numbers where the second digit is not zero
    
    // All numbers that start with 1:
    $start_with_one_count = pow(10, $n - 1);

    // All numbers that end with 1:
    $end_with_one_count = pow(10, $n - 1);

    // Numbers that both start and end with 1 are counted twice in the above summation
    // so we subtract those:
    $start_and_end_with_one_count = 1 * pow(10, $n - 2);
    
    $result = $start_with_one_count + $end_with_one_count - $start_and_end_with_one_count;    
    return $result;
}","function candidate(...$args) {
    return starts_one_ends(...$args);
}

function test(): void {
    if (candidate(1) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(2) !== 18) { throw new Exception(""Test failed!""); }
    if (candidate(3) !== 180) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== 1800) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== 18000) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_84,uig_Arab,php,"<?php
//مىسال//بىر قوشۇمچە پۈتۈن سان N بولسا، ئۇنىڭ قوشۇمچە ھەرپلىرى بىلەن قوشۇمچە ھەرپلەرنى قايتۇرۇپ بېرىڭ.// >>> solve(1000)
// ""1""
// >>> solve(150)
// ""110""
// >>> solve(147)
// ""1100""
// Variables:
// @N integer
// Constraints: 0 ≤ N ≤ 10000.
// Output:
// a string of binary number
function solve($N) {
","function solve($N) {
    $sum = array_sum(str_split($N));
    return decbin($sum);
}","function candidate(...$args) {
    return solve(...$args);
}

function test(): void {
    if (candidate(1000) !== ""1"") { throw new Exception(""Test failed!""); }
    if (candidate(150) !== ""110"") { throw new Exception(""Test failed!""); }
    if (candidate(147) !== ""1100"") { throw new Exception(""Test failed!""); }
    if (candidate(333) !== ""1001"") { throw new Exception(""Test failed!""); }
    if (candidate(963) !== ""10010"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_85,uig_Arab,php,"<?php
//مىساللار://بۇ بىر جۈپ نۇسخىلارنى بىرلىكتە بىر تەرەپ قىلىش ئۇسۇلى.// >>> add(array(4, 2, 6, 7))
// 2
function add($lst) {
","function add($lst) {
    $sum = 0;
    for ($i = 1; $i < count($lst); $i += 2) {
        if ($lst[$i] % 2 == 0) {
            $sum += $lst[$i];
        }
    }
    return $sum;
}","function candidate(...$args) {
    return add(...$args);
}

function test(): void {
    if (candidate(array(4, 88)) !== 88) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 5, 6, 7, 2, 122)) !== 122) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 0, 6, 7)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 4, 6, 8)) !== 12) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_86,uig_Arab,php,"<?php
//مەسىلەن: //ئەسكەرتىش: سۆز تەرتىپى ۋە جۈملىدىكى بوشلۇقلارنى ساقلاش كېرەك.//.ئەسلى قىممەتتىكى قىممەتنى ئۆلچەپ،//يېڭى سۆزگە ئالماشتۇرۇلىدۇ .//بۇ بىرخىل خەت نۇسخىسى، ئۇ يەردە ھەربىر سۆز (ئەرەبچىگە ئايرىلىپ)//فۇنكسىيە يېزىپ بىر تار تارماقنى ئېلىپ ئۇنىڭ تەرتىپلىك نۇسخىسىنى قايتۇرىدۇ.// >>> anti_shuffle(""Hi"")
// ""Hi""
// >>> anti_shuffle(""hello"")
// ""ehllo""
// >>> anti_shuffle(""Hello World!!!"")
// ""Hello !!!Wdlor""
function anti_shuffle($s) {
","function anti_shuffle($s) {
    // Split the string by space to preserve words and spaces
    $words = preg_split('/(\s+)/', $s, -1, PREG_SPLIT_DELIM_CAPTURE);

    // Array to hold ordered words
    $ordered_words = [];

    // Iterate through each word or space in the array
    foreach ($words as $word) {
        // If it's a word (not only spaces)
        if (trim($word) !== '') {
            // Convert the word into an array of characters, sort it, and rejoin
            $chars = str_split($word);
            sort($chars);
            $ordered_words[] = implode('', $chars);
        } else {
            // If it's a space or multiple spaces, preserve them as they are
            $ordered_words[] = $word;
        }
    }

    // Join the array back into a string and return
    return implode('', $ordered_words);
}","function candidate(...$args) {
    return anti_shuffle(...$args);
}

function test(): void {
    if (candidate(""Hi"") !== ""Hi"") { throw new Exception(""Test failed!""); }
    if (candidate(""hello"") !== ""ehllo"") { throw new Exception(""Test failed!""); }
    if (candidate(""number"") !== ""bemnru"") { throw new Exception(""Test failed!""); }
    if (candidate(""abcd"") !== ""abcd"") { throw new Exception(""Test failed!""); }
    if (candidate(""Hello World!!!"") !== ""Hello !!!Wdlor"") { throw new Exception(""Test failed!""); }
    if (candidate("""") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""Hi. My name is Mister Robot. How are you?"") !== "".Hi My aemn is Meirst .Rboot How aer ?ouy"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_87,uig_Arab,php,"<?php
//مىساللار://.شۇنداقلا بۇ قۇرنىڭ كودېنتلىرىنى ئاستىغا قاراپ رەتلىسەك بولىدۇ//،بەلگىلىككە قاراپ ،كۆكارتاتمىلارنى تىزىپ چىقىڭ .//ھەربىر جەدۋەل بىر كوزىنتازا (سامان، قۇر) ، يەنى 0 دىن باشلىنىدۇ.//ۋە تۈرلەرنىڭ جەدۋىلىنى قايتۇرۇپ بىرىمىز، [(x1, y1), (x2, y2) ...]//،ھازىرقى lst، ۋە پۈتۈن سان x نى باھالاپ، ھەرپلەر تىزىملىكىدىن پۈتۈن سان x نى تېپىپ چىقىڭ،//ھەر بىر قۇردا ئوخشاش بولمىغان ساندا ئىستون بولۇشى مۇمكىن.//.مائارتىسقا ئوخشاش لېكىن ماتېرىسقا ئوخشىمايدۇ//بىز ئىككى تەرەپكە بۆلۈنۈپ كەتكەن نۇسخىلارنى -- بىرىنى ئىككىنچى تەرەپكە يۆتكەپ، يەنە بىرىنى نۇسخىلارغا بۆلۈپ يۆتكەپ -- سىز بۇنى خۇددى بىر قىسىم مۇندەرىجە ساۋاقچىلىرىڭىز دەپ پەرەز قىلغاندەك ئىشلەيسىز.// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)
// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))
// >>> get_row(array(), 1)
// array()
// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)
// array(array(2, 2))
function get_row($lst, $x) {
","function get_row($lst, $x) {
    $coordinates = array();
    // Iterate over each row with its index.
    foreach ($lst as $row_idx => $row) {
        $row_coordinates = array();
        // Iterate over each element in the row with its index.
        foreach ($row as $col_idx => $value) {
            if ($value === $x) {
                // Add the coordinate as a pair (row index, column index).
                $row_coordinates[] = array($row_idx, $col_idx);
            }
        }
        // Sort the coordinates of this row by columns in descending order.
        usort($row_coordinates, function($a, $b) {
            return $b[1] - $a[1];
        });
        // Merge sorted row coordinates into the main coordinates list.
        $coordinates = array_merge($coordinates, $row_coordinates);
    }
    // Return the sorted coordinates.
    return $coordinates;
}","function candidate(...$args) {
    return get_row(...$args);
}

function test(): void {
    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(""Test failed!""); }
    if (candidate(array(), 1) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_88,uig_Arab,php,"<?php
//مىساللار://* بەلگىلەنگەن تىزىملىكنى ئۆزگەرتمەڭ.//دىققەت://ياكى بۇ ساننى تۆۋەنلەش تەرتىپى بويىچە رەتلىسەك، بۇ ساننىڭ سوممىسى ((ئالدىقى كۆرسەتكۈچ قىممىتى، ئاخىرقى كۆرسەتكۈچ قىممىتى) جۈپ بولسا.//ئەگەر سىز بىرىنجى قېتىملىق كۆرسەتكۈچ قىممىتى ۋە ئاخىرقى قېتىملىق كۆرسەتكۈچ قىممىتىنى ئايرىسىڭىز، سىز تارقاتقان تىزىملىكنىڭ تەرتىپى ئۆسۈپ كېتىدۇ.//بىر جۈملىدىكى نۆلگە تولمىغان پۈتۈن سانلارنى تۈرگە ئايرىغاندىن كېيىن، جۈملىدىكى cophp نى قايتۇرۇپ بىرىمىز.// >>> sort_array(array())
// array()
// >>> sort_array(array(5))
// array(5)
// >>> sort_array(array(2, 4, 3, 0, 1, 5))
// array(0, 1, 2, 3, 4, 5)
// >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))
// array(6, 5, 4, 3, 2, 1, 0)
function sort_array($array) {
","function sort_array($array) {
    if (empty($array)) {
        return $array;
    }

    $firstIndexValue = $array[0];
    $lastIndexValue = $array[count($array) - 1];
    $sum = $firstIndexValue + $lastIndexValue;

    $sortedArray = $array;
    if ($sum % 2 === 0) {
        // Sort in descending order
        rsort($sortedArray);
    } else {
        // Sort in ascending order
        sort($sortedArray);
    }

    return $sortedArray;
}","function candidate(...$args) {
    return sort_array(...$args);
}

function test(): void {
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(5)) !== array(5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 1)) !== array(1, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(15, 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(""Test failed!""); }
    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_89,uig_Arab,php,"<?php
//مەسىلەن: //سىلكىيمىز، قاتلايمىز ئىككى قاتلاپ ئىككى تەرەپكە//ھەرپلەر ئايلاندۇرۇلۇشى كېرەك .//ھەرپنىڭ نۆۋىتى بىلەن كىرگۈزۈلگەن سەتخىنى قايتۇرىدۇ.//بىر ھەرپنىڭ ئارگومېنتىنى بىر تەرەپ قىلىدىغان فۇنكسىيە كودى ياساپ ۋە // >>> encrypt(""hi"")
// ""lm""
// >>> encrypt(""asdfghjkl"")
// ""ewhjklnop""
// >>> encrypt(""gf"")
// ""kj""
// >>> encrypt(""et"")
// ""ix""
function encrypt($s) {
","function encrypt($s) {
    $result = '';
    $shift = 4; // 2 multiplied by 2
    
    for ($i = 0; $i < strlen($s); $i++) {
        $char = $s[$i];
        
        if (ctype_alpha($char)) {
            $ordStart = ctype_lower($char) ? ord('a') : ord('A');
            $char = chr($ordStart + (ord($char) - $ordStart + $shift) % 26);
        }
        
        $result .= $char;
    }
    
    return $result;
}","function candidate(...$args) {
    return encrypt(...$args);
}

function test(): void {
    if (candidate(""hi"") !== ""lm"") { throw new Exception(""Test failed!""); }
    if (candidate(""asdfghjkl"") !== ""ewhjklnop"") { throw new Exception(""Test failed!""); }
    if (candidate(""gf"") !== ""kj"") { throw new Exception(""Test failed!""); }
    if (candidate(""et"") !== ""ix"") { throw new Exception(""Test failed!""); }
    if (candidate(""faewfawefaewg"") !== ""jeiajeaijeiak"") { throw new Exception(""Test failed!""); }
    if (candidate(""hellomyfriend"") !== ""lippsqcjvmirh"") { throw new Exception(""Test failed!""); }
    if (candidate(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"") !== ""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"") { throw new Exception(""Test failed!""); }
    if (candidate(""a"") !== ""e"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_90,uig_Arab,php,"<?php
//ئەگەر بۇنداق ئېلمىنت بولمىسا null نى قايتۇر.//next_smallest () فۇنكسىيەسىنى يېزىپ، ئەڭ كىچىك تۈرنىڭ ئىككىنچى فۇنكسىيەسىنى قايتۇرىدۇ.//.سىزگە بىر پۈتۈن گۇرۇپپا بېرىلدۇ// >>> next_smallest(array(1, 2, 3, 4, 5))
// 2
// >>> next_smallest(array(5, 1, 4, 3, 2))
// 2
// >>> next_smallest(array())
// null
// >>> next_smallest(array(1, 1))
// null
function next_smallest($lst) {
","function next_smallest($lst) {
    // Remove duplicate elements
    $unique_lst = array_unique($lst);

    // Sort the array
    sort($unique_lst);

    // Check if there are at least two elements in the sorted array
    if (count($unique_lst) < 2) {
        return null;
    }

    // Return the second smallest element
    return $unique_lst[1];
}","function candidate(...$args) {
    return next_smallest(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3, 4, 5)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 1, 4, 3, 2)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== null) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1)) !== null) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1, 1, 1, 0)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1)) !== null) { throw new Exception(""Test failed!""); }
    if (candidate(array(-35, 34, 12, -45)) !== -35) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_91,uig_Arab,php,"<?php
//مەسىلەن: //جۈملىلەر ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، "" قاتارلىقلار بىلەن چەكلىنىدۇ.//""I"" ھەرپى بىلەن باشلانغان جۈملە ""I"" بىلەن باشلىنىدۇ//.سىزگە بىر قانچە پارچە سۆز بېرىلىدۇ، ۋە شۇ سۆزلەرنىڭ سانىنى سانىشىڭىز كېرەك// >>> is_bored(""Hello world"")
// 0
// >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
// 1
function is_bored($S) {
","function is_bored($S) {
    // Split the string into sentences using regex
    $sentences = preg_split('/[.!?]\s*/', trim($S));

    $boredom_count = 0;
    foreach ($sentences as $sentence) {
        // Check if the trimmed sentence starts with ""I""
        if (trim($sentence) !== '' && strpos(trim($sentence), 'I') === 0) {
            $boredom_count++;
        }
    }

    return $boredom_count;
}","function candidate(...$args) {
    return is_bored(...$args);
}

function test(): void {
    if (candidate(""Hello world"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""Is the sky blue?"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""I love It !"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""bIt"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""I feel good today. I will be productive. will kill It"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""You and I are going for a walk"") !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_92,uig_Arab,php,"<?php
//مىساللار//باشقا ئەھۋاللاردا false نى قايتۇرۇپ بېرىدۇ.//ئەگەر ھەر ئىككى نومۇرنىڭ بىرى ئىككىنچى نومۇرنىڭ جەدۋىلىگە باراۋەر بولسا، ھەمدە ئۇلار توغرا كەلسە بۇ ئۇچۇر راست دەپ قايتۇرۇلىدۇ.//.ئۈچ خىل نومۇرنى ئىگىلىگەن فۇنكسىيە تۈزۈڭ// >>> any_int(5, 2, 7)
// true
// >>> any_int(3, 2, 2)
// false
// >>> any_int(3, -2, 1)
// true
// >>> any_int(3.6, -2.2, 2)
// false
function any_int($x, $y, $z) {
","function any_int($x, $y, $z) {
    if (is_int($x) && is_int($y) && is_int($z)) {
        return ($x === $y + $z) || ($y === $x + $z) || ($z === $x + $y);
    }
    return false;
}","function candidate(...$args) {
    return any_int(...$args);
}

function test(): void {
    if (candidate(2, 3, 1) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(2.5, 2, 3) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(2, 6, 2) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(4, 2, 2) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(-4, 6, 2) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(2, 1, 1) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(3, 4, 7) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(3.0, 4, 7) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_93,uig_Arab,php,"<?php
//مىساللار://پەقەت خەتنىلا چۈشىنىۋالىمىز.//ئىنگلىزچىدىكى ھەرپنىڭ ۋاكالىتەن ھەرپى//ئۇنىڭ ئالدىدا ئىككى ئورۇندا تۇرىدىغان ھەرپ بار .//ھەرپى ئۆزگەرگەن. ھەرپى ئۆزگەرگەندىن كېيىن ھەرپى ئۆزگىرىپ، ھەرپى ئۆزگىرىپ، ھەرپى ئۆزگىرىپ تۇرىدۇ.//ئۇچۇرغا بىر جەدۋەل يېزىپ بىرىڭ، ۋە شۇنداقلا بۇ ئۇچۇرغا بىر جەدۋەل يېزىپ بىرىڭ.// >>> encode(""test"")
// ""TGST""
// >>> encode(""This is a message"")
// ""tHKS KS C MGSSCGG""
function encode($message) {
","function encode($message) {
    $encodedMessage = '';
    $vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
    $replacement = ['c', 'g', 'k', 'q', 'w', 'C', 'G', 'K', 'Q', 'W'];

    for ($i = 0; $i < strlen($message); $i++) {
        $char = $message[$i];
        if (in_array($char, $vowels)) {
            // Find the index of the vowel and replace it
            $index = array_search($char, $vowels);
            $encodedMessage .= $replacement[$index];
        } else {
            // Swap case for consonants
            $encodedMessage .= ctype_upper($char) ? strtolower($char) : strtoupper($char);
        }
    }

    return $encodedMessage;
}","function candidate(...$args) {
    return encode(...$args);
}

function test(): void {
    if (candidate(""TEST"") !== ""tgst"") { throw new Exception(""Test failed!""); }
    if (candidate(""Mudasir"") !== ""mWDCSKR"") { throw new Exception(""Test failed!""); }
    if (candidate(""YES"") !== ""ygs"") { throw new Exception(""Test failed!""); }
    if (candidate(""This is a message"") !== ""tHKS KS C MGSSCGG"") { throw new Exception(""Test failed!""); }
    if (candidate(""I DoNt KnOw WhAt tO WrItE"") !== ""k dQnT kNqW wHcT Tq wRkTg"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_94,uig_Arab,php,"<?php
//مىساللار://ئەڭ چوڭ باشتا قىممەتنى تېپىپ ئۇنىڭ ھەرپىنى قايتۇرۇپ باقايلى.//.سىزگە بىر پۈتۈن گۇرۇپپا بېرىلدۇ// >>> skjkasdkd(array(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))
// 10
// >>> skjkasdkd(array(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))
// 25
// >>> skjkasdkd(array(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))
// 13
// >>> skjkasdkd(array(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))
// 11
// >>> skjkasdkd(array(0, 81, 12, 3, 1, 21))
// 3
// >>> skjkasdkd(array(0, 8, 1, 2, 1, 7))
// 7
function skjkasdkd($lst) {
","function skjkasdkd($lst) {
    // Helper function to check prime status
    function is_prime($num) {
        if ($num <= 1) return false;
        if ($num <= 3) return true;
        if ($num % 2 == 0 || $num % 3 == 0) return false;
        for ($i = 5; $i * $i <= $num; $i += 6) {
            if ($num % $i == 0 || $num % ($i + 2) == 0) return false;
        }
        return true;
    }
    
    $largest_prime = -1;
    
    // Find the largest prime in the list
    foreach ($lst as $num) {
        if (is_prime($num) && $num > $largest_prime) {
            $largest_prime = $num;
        }
    }
    
    if ($largest_prime == -1) return 0;
    
    // Sum the digits of the largest prime
    $sum_of_digits = 0;
    while ($largest_prime > 0) {
        $sum_of_digits += $largest_prime % 10;
        $largest_prime = intdiv($largest_prime, 10);
    }
    
    return $sum_of_digits;
}","function candidate(...$args) {
    return skjkasdkd(...$args);
}

function test(): void {
    if (candidate(array(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) !== 10) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) !== 25) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) !== 13) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) !== 11) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 81, 12, 3, 1, 21)) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 8, 1, 2, 1, 7)) !== 7) { throw new Exception(""Test failed!""); }
    if (candidate(array(8191)) !== 19) { throw new Exception(""Test failed!""); }
    if (candidate(array(8191, 123456, 127, 7)) !== 19) { throw new Exception(""Test failed!""); }
    if (candidate(array(127, 97, 8192)) !== 10) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_95,uig_Arab,php,"<?php
//مىساللار://ئەگەر بۇ فۇنكسىيە false نى قايتۇرسا، بۇ فۇنكسىيەنىڭ فۇنكسىيەسى false بولسا، بۇ فۇنكسىيەنىڭ فۇنكسىيەسى false بولىدۇ.//ھەرپلەرنىڭ ھەممىسى چوڭ ھەرپلەر بولسا، ئۇنداق بولمىغاندا false نى قايتۇرۇپ بېرىدۇ.//ئەگەر ھەر بىر تاللاش سىتونى <i>بەلگىسى</i> غا توغرا كەلسە بۇ سىتون true غا قايتىدۇ// >>> check_dict_case(array(""a"" => ""apple"", ""b"" => ""banana""))
// true
// >>> check_dict_case(array(""a"" => ""apple"", ""A"" => ""banana"", ""B"" => ""banana""))
// false
// >>> check_dict_case(array(""a"" => ""apple"", 8 => ""banana"", ""a"" => ""apple""))
// false
// >>> check_dict_case(array(""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""))
// false
// >>> check_dict_case(array(""STATE"" => ""NC"", ""ZIP"" => ""12345""))
// true
function check_dict_case($dict) {
","function check_dict_case($dict) {
    if (empty($dict)) {
        return false;
    }

    $allLowerCase = true;
    $allUpperCase = true;

    foreach ($dict as $key => $value) {
        if (!is_string($key)) {
            return false;
        }

        if (ctype_lower($key)) {
            $allUpperCase = false;
        } else if (ctype_upper($key)) {
            $allLowerCase = false;
        } else {
            return false;
        }
    }

    return $allLowerCase || $allUpperCase;
}","function candidate(...$args) {
    return check_dict_case(...$args);
}

function test(): void {
    if (candidate(array(""p"" => ""pineapple"", ""b"" => ""banana"")) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(""p"" => ""pineapple"", ""A"" => ""banana"", ""B"" => ""banana"")) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(""p"" => ""pineapple"", ""5"" => ""banana"", ""a"" => ""apple"")) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston"")) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(""STATE"" => ""NC"", ""ZIP"" => ""12345"")) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(""fruit"" => ""Orange"", ""taste"" => ""Sweet"")) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_96,uig_Arab,php,"<?php
//مەسىلەن: //بۇ بىر پۈتۈن سان، ئۇمۇ نۆلدىن كىچىك.//بىر خىل نۆلگە تولمىغان پۈتۈن ساننى قوبۇل قىلىپ ، بىرىنچى نۇملۇقنىڭ بىر تىزمىنى قايتۇرۇش فۇنكسىيەسىنى ئىجرا قىلىڭ .// >>> count_up_to(5)
// array(2, 3)
// >>> count_up_to(11)
// array(2, 3, 5, 7)
// >>> count_up_to(0)
// array()
// >>> count_up_to(20)
// array(2, 3, 5, 7, 11, 13, 17, 19)
// >>> count_up_to(1)
// array()
// >>> count_up_to(18)
// array(2, 3, 5, 7, 11, 13, 17)
function count_up_to($n) {
","function count_up_to($n) {
    if ($n <= 2) {
        return array();
    }

    $primes = array();
    for ($i = 2; $i < $n; $i++) {
        if (is_prime($i)) {
            $primes[] = $i;
        }
    }

    return $primes;
}

function is_prime($num) {
    if ($num <= 1) {
        return false;
    }
    if ($num <= 3) {
        return true;
    }
    if ($num % 2 == 0 || $num % 3 == 0) {
        return false;
    }
    for ($i = 5; $i * $i <= $num; $i += 6) {
        if ($num % $i == 0 || $num % ($i + 2) == 0) {
            return false;
        }
    }
    return true;
}","function candidate(...$args) {
    return count_up_to(...$args);
}

function test(): void {
    if (candidate(5) !== array(2, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(""Test failed!""); }
    if (candidate(0) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(""Test failed!""); }
    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(""Test failed!""); }
    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_97,uig_Arab,php,"<?php
//مىساللار://.مەلۇمكى، كىرگۈزگەن ئۇچۇرلار ھەمىشە كۈچكە ئىگە//.ئۈچ بىرلىك ساننىڭ بىرىنىڭ بىرىگە قوشۇلغاندىن كېيىن،//ئىككى پۈتۈن ساننى ئالغان فۇنكسىيەنى تاماملاپ،  نى قايتۇرىدۇ.// >>> multiply(148, 412)
// 16
// >>> multiply(19, 28)
// 72
// >>> multiply(2020, 1851)
// 0
// >>> multiply(14, -15)
// 20
function multiply($a, $b) {
","function multiply($a, $b) {
    $unitDigitA = abs($a) % 10;
    $unitDigitB = abs($b) % 10;
    return $unitDigitA * $unitDigitB;
}","function candidate(...$args) {
    return multiply(...$args);
}

function test(): void {
    if (candidate(148, 412) !== 16) { throw new Exception(""Test failed!""); }
    if (candidate(19, 28) !== 72) { throw new Exception(""Test failed!""); }
    if (candidate(2020, 1851) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(14, -15) !== 20) { throw new Exception(""Test failed!""); }
    if (candidate(76, 67) !== 42) { throw new Exception(""Test failed!""); }
    if (candidate(17, 27) !== 49) { throw new Exception(""Test failed!""); }
    if (candidate(0, 1) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(0, 0) !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_98,uig_Arab,php,"<?php
//مەسىلەن: //بىر ھەرپ s غا توغرا كەلسە، كاتتا بوغۇملارنىڭ جۈپ بولغان سانىنى سانىۋېلىڭ.// >>> count_upper(""aBCdEf"")
// 1
// >>> count_upper(""abcdefg"")
// 0
// >>> count_upper(""dBBE"")
// 0
function count_upper($s) {
","function count_upper($s) {
    $count = 0;
    $vowels = ['A', 'E', 'I', 'O', 'U'];

    for ($i = 0; $i < strlen($s); $i += 2) {
        if (in_array($s[$i], $vowels)) {
            $count++;
        }
    }

    return $count;
}","function candidate(...$args) {
    return count_upper(...$args);
}

function test(): void {
    if (candidate(""aBCdEf"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdefg"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""dBBE"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""B"") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""U"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(""EEEE"") !== 2) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_99,uig_Arab,php,"<?php
//مىساللار//ئىككى چەكسىز ئېكىسكۇرسىيە ئارقىلىق، ئۇنى بىر چەتكە ئايرىپ، سىرىتقا ئايلاندۇرىدۇ.//بۇ تەرەپتىن، بىز بىۋاسىتە يۈزلىنىمىز.//بىر ساننى ئىپادىلەيدىغان قىممەت (سىناق) قوبۇل قىلىدىغان فۇنكسىيە قۇرۇڭ .// >>> closest_integer(""10"")
// 10
// >>> closest_integer(""15.3"")
// 15
// Note:
// Rounding away from zero means that if the given number is equidistant
// from two integers, the one you should return is the one that is the
// farthest from zero. For example closest_integer(""14.5"") should
// return 15 and closest_integer(""-14.5"") should return -15.
function closest_integer($value) {
","function closest_integer($value) {
    $number = floatval($value);
    if ($number > 0) {
        return floor($number + 0.5);
    } else {
        return ceil($number - 0.5);
    }
}","function candidate(...$args) {
    return closest_integer(...$args);
}

function test(): void {
    if (candidate(""10"") !== 10) { throw new Exception(""Test failed!""); }
    if (candidate(""14.5"") !== 15) { throw new Exception(""Test failed!""); }
    if (candidate(""-15.5"") !== -16) { throw new Exception(""Test failed!""); }
    if (candidate(""15.3"") !== 15) { throw new Exception(""Test failed!""); }
    if (candidate(""0"") !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_100,uig_Arab,php,"<?php
//مىساللار://i بولسا قاتلامدىكى تاش سانى (i+1).//ھەر بىر دەرىجىدىكى تاشلارنىڭ سانىنى بىر تىزىملىكتە قايتۇرۇپ بېرىدۇ، بۇ يەردە ئېلېمېنتنى كۆرسەتكۈچكە قوشۇپ //.ئەگەر n جۈپ بولسا، كېيىنكى جۈپ ساننى چىقىرىپ باقايلى//.ئەگەر n تار بولسا بۇ كېيىنكى تار سانغا تەڭ//كېيىنكى دەرىجىدىكى تاش سانى: //بىرىنچى قەۋەتتە n تاش بار.//بىر جۈملە نۆلگە توغرا كەلسە، بىر جۈملە نۆلدىن كۆپ پارچە تاشنى ياساپ چىقىمىز.// >>> make_a_pile(3)
// array(3, 5, 7)
function make_a_pile($n) {
","function make_a_pile($n) {
    $pile = [];
    $currentStones = $n;
    
    for ($i = 0; $i < $n; $i++) {
        $pile[] = $currentStones;
        if ($n % 2 == 0) {
            $currentStones += 2;
        } else {
            $currentStones += 2;
        }
    }
    
    return $pile;
}","function candidate(...$args) {
    return make_a_pile(...$args);
}

function test(): void {
    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_101,uig_Arab,php,"<?php
//مەسىلەن: //سۆز بىرىكمىسى ۋە سۆز بىرىكمىسىغا بۆلۈپ بىر جەدۋەل قايتۇرىدۇ.//سىز بىر قۇر سۆزلەرنى تاللاپ، ئۇلارنى بۆلۈپ قويسىڭىز، سىزنىڭ ۋەزىپىڭىز:// >>> words_string(""Hi, my name is John"")
// array(""Hi"", ""my"", ""name"", ""is"", ""John"")
// >>> words_string(""One, two, three, four, five, six"")
// array(""One"", ""two"", ""three"", ""four"", ""five"", ""six"")
function words_string($s) {
","function words_string($s) {
    // Remove any commas and split by spaces
    return preg_split('/[\s,]+/', $s, -1, PREG_SPLIT_NO_EMPTY);
}","function candidate(...$args) {
    return words_string(...$args);
}

function test(): void {
    if (candidate(""Hi, my name is John"") !== array(""Hi"", ""my"", ""name"", ""is"", ""John"")) { throw new Exception(""Test failed!""); }
    if (candidate(""One, two, three, four, five, six"") !== array(""One"", ""two"", ""three"", ""four"", ""five"", ""six"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Hi, my name"") !== array(""Hi"", ""my"", ""name"")) { throw new Exception(""Test failed!""); }
    if (candidate(""One,, two, three, four, five, six,"") !== array(""One"", ""two"", ""three"", ""four"", ""five"", ""six"")) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""ahmed     , gamal"") !== array(""ahmed"", ""gamal"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_102,uig_Arab,php,"<?php
//مەسىلەن: //ئەگەردە n {\\displaystyle n}//.ئەگەر سىز X،Y ئارىلىقىدىكى ئەڭ چوڭ جۈپ تولۇق ساننى ئالسىڭىز،//بۇ فۇنكسىيە ئىككى ئىجابىي ساننى x ۋە y غا ئايرىپ،  نى قايتۇرىدۇ.// >>> choose_num(12, 15)
// 14
// >>> choose_num(13, 12)
// -1
function choose_num($x, $y) {
","function choose_num($x, $y) {
    if ($x > $y) {
        return -1;
    }
    
    // Start from the larger number
    $maxNumber = max($x, $y);

    // Check for the largest even number
    if ($maxNumber % 2 == 1) {
        $maxNumber--;
    }

    // Ensure it's within the range
    if ($maxNumber >= min($x, $y)) {
        return $maxNumber;
    }

    return -1;
}","function candidate(...$args) {
    return choose_num(...$args);
}

function test(): void {
    if (candidate(12, 15) !== 14) { throw new Exception(""Test failed!""); }
    if (candidate(13, 12) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(33, 12354) !== 12354) { throw new Exception(""Test failed!""); }
    if (candidate(5234, 5233) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(6, 29) !== 28) { throw new Exception(""Test failed!""); }
    if (candidate(27, 10) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(7, 7) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(546, 546) !== 546) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_103,uig_Arab,php,"<?php
//مىسال://ئەگەر n نىڭ چوڭلۇقى m دىن چوڭ بولسا، -1 نى قايتۇرىمىز.//بۇ جاۋابنى يىقىنقى پۈتۈن سانغا ئايلاندۇرۇپ، ئىككىلىك سانغا ئايلاندۇرۇڭ.//بۇ ن دىن m گىچە بولغان پۈتۈن سانلارنىڭ ئوتتۇرىچە سانى.//بىز ئىككى ئەرزىي تامامنەمۇ بىرنى ئېلىپ بايمىز n ۋە m، ھىسابلاش ئۈچۈن// >>> rounded_avg(1, 5)
// ""0b11""
// >>> rounded_avg(7, 5)
// -1
// >>> rounded_avg(10, 20)
// ""0b1111""
// >>> rounded_avg(20, 33)
// ""0b11010""
function rounded_avg($n, $m) {
","function rounded_avg($n, $m) {
    if ($n > $m) {
        return -1;
    }
    
    $total_sum = 0;
    $count = 0;
    
    for ($i = $n; $i <= $m; $i++) {
        $total_sum += $i;
        $count++;
    }
    
    $average = $total_sum / $count;
    $rounded_average = round($average);
    
    return ""0b"" . decbin($rounded_average);
}","function candidate(...$args) {
    return rounded_avg(...$args);
}

function test(): void {
    if (candidate(1, 5) !== ""0b11"") { throw new Exception(""Test failed!""); }
    if (candidate(7, 13) !== ""0b1010"") { throw new Exception(""Test failed!""); }
    if (candidate(964, 977) !== ""0b1111001010"") { throw new Exception(""Test failed!""); }
    if (candidate(996, 997) !== ""0b1111100100"") { throw new Exception(""Test failed!""); }
    if (candidate(560, 851) !== ""0b1011000010"") { throw new Exception(""Test failed!""); }
    if (candidate(185, 546) !== ""0b101101110"") { throw new Exception(""Test failed!""); }
    if (candidate(362, 496) !== ""0b110101101"") { throw new Exception(""Test failed!""); }
    if (candidate(350, 902) !== ""0b1001110010"") { throw new Exception(""Test failed!""); }
    if (candidate(197, 233) !== ""0b11010111"") { throw new Exception(""Test failed!""); }
    if (candidate(7, 5) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(5, 1) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(5, 5) !== ""0b101"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_104,uig_Arab,php,"<?php
//مەسىلەن: //ئەسكەرتىش: قايتۇرۇلغان تىزىملىكنىڭ رەت تەرتىپى ئۆسىدۇ.//.بۇ يەردە ھېچبىر جۈپ بوغقۇچ يوق//بىر جۈملىگە ئىجابىي پۈتۈن سانلارنى قوشۇپ x نى بېسىپ، بىر جۈملىگە  نىڭ ھەممىسىنى رەتلەپ قايتۇرىمىز.// >>> unique_digits(array(15, 33, 1422, 1))
// array(1, 15, 33)
// >>> unique_digits(array(152, 323, 1422, 10))
// array()
function unique_digits($x) {
","function unique_digits($x) {
    $result = array();

    foreach ($x as $number) {
        $digits = str_split($number);
        $hasEvenDigit = false;

        foreach ($digits as $digit) {
            if ((int)$digit % 2 == 0) {
                $hasEvenDigit = true;
                break;
            }
        }

        if (!$hasEvenDigit) {
            $result[] = $number;
        }
    }

    sort($result);
    return $result;
}","function candidate(...$args) {
    return unique_digits(...$args);
}

function test(): void {
    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(""Test failed!""); }
    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new Exception(""Test failed!""); }
    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_105,uig_Arab,php,"<?php
//مەسىلەن: //""بىر، ئىككى، ئۈچ، تۆت، بەش، ئالتە، يەتتە، سەككىز، توققۇز"" .//ھەربىر خانىنى ئۆز نامى بىلەن ئالماشتۇرۇپ //بىر پۈتۈن ساننى باھالاپ، 1-دىن 9-قىچە بولغان پۈتۈن سانلارنى تۈرگە ئايرىپ باھالاپ چىقىمىز،// >>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))
// array(""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One"")
// If the array is empty, return an empty array:
// >>> by_length(array())
// array()
// If the array has any strange number ignore it:
// >>> by_length(array(1, -1, 55))
// array(""One"")
function by_length($arr) {
","function by_length($arr) {
    // Filter the array to include only numbers between 1 and 9
    $filtered = array_filter($arr, function($num) {
        return $num >= 1 && $num <= 9;
    });

    // Sort the filtered array
    sort($filtered);

    // Reverse the sorted array
    $reversed = array_reverse($filtered);

    // Mapping numbers to their corresponding names
    $numberNames = [
        1 => ""One"",
        2 => ""Two"",
        3 => ""Three"",
        4 => ""Four"",
        5 => ""Five"",
        6 => ""Six"",
        7 => ""Seven"",
        8 => ""Eight"",
        9 => ""Nine""
    ];

    // Replace numbers with their corresponding names
    return array_map(function($num) use ($numberNames) {
        return $numberNames[$num];
    }, $reversed);
}","function candidate(...$args) {
    return by_length(...$args);
}

function test(): void {
    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One"")) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -1, 55)) !== array(""One"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -1, 3, 2)) !== array(""Three"", ""Two"", ""One"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(9, 4, 8)) !== array(""Nine"", ""Eight"", ""Four"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_106,uig_Arab,php,"<?php
//مىسال://i نىڭ فاكتورىيالى 1 دىن i گە بولغان سانلارنىڭ ھەسسىلەش مىقدارى (1 * 2 * ... * i)//.مەن بىرتىنچىدىن باشلايمەن//ياكى 1 دىن i گىچە بولغان ھەربىر نومۇرنىڭ جۈملىسى .//ۋە n چوڭلۇقتىكى بىر جەۋھەرنى قايتۇرىدۇ، يەنى، ئەگەر i جەۋھەر بولسا، i نىڭ قىممىتى i نىڭ فاكتورى بولىدۇ.//f نىڭ پارامېتىرىنى چىقىرىپ،// >>> f(5)
// array(1, 2, 6, 24, 15)
function f($n) {
","function f($n) {
    $result = [];
    for ($i = 1; $i <= $n; $i++) {
        if ($i % 2 == 0) {
            $result[] = factorial($i);
        } else {
            $result[] = sum($i);
        }
    }
    return $result;
}

function factorial($num) {
    if ($num == 0) {
        return 1;
    }
    $fact = 1;
    for ($j = 1; $j <= $num; $j++) {
        $fact *= $j;
    }
    return $fact;
}

function sum($num) {
    return ($num * ($num + 1)) / 2;
}","function candidate(...$args) {
    return f(...$args);
}

function test(): void {
    if (candidate(5) !== array(1, 2, 6, 24, 15)) { throw new Exception(""Test failed!""); }
    if (candidate(7) !== array(1, 2, 6, 24, 15, 720, 28)) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== array(1)) { throw new Exception(""Test failed!""); }
    if (candidate(3) !== array(1, 2, 6)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_107,uig_Arab,php,"<?php
//مىسال 1://پۈتۈن سانلىق palindromes (ئۈچ قاتلام) نىڭ ئىچىدە ({1,n})//بىر پۈتۈن ساننى قوشۇپ، بىر جۈپ ۋە بىر جۈپسىز سانلارنى قوشۇپ بىر جۈپ جۈپ ۋە بىر جۈپسىز سانلارنى قوشۇپ بىر جۈپ تىزىملىك قايتۇرۇپ بىرىڭ.// >>> even_odd_palindrome(3)
// array(1, 2)
// Explanation:
// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
// Example 2:
// >>> even_odd_palindrome(12)
// array(4, 6)
// Explanation:
// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
// Note:
// 1. 1 <= n <= 10^3
// 2. returned array has the number of even and odd integer palindromes respectively.
function even_odd_palindrome($n) {
","function even_odd_palindrome($n) {
    $even_count = 0;
    $odd_count = 0;
    
    for ($i = 1; $i <= $n; $i++) {
        if (strval($i) === strrev(strval($i))) {
            if ($i % 2 === 0) {
                $even_count++;
            } else {
                $odd_count++;
            }
        }
    }
    
    return array($even_count, $odd_count);
}","function candidate(...$args) {
    return even_odd_palindrome(...$args);
}

function test(): void {
    if (candidate(123) !== array(8, 13)) { throw new Exception(""Test failed!""); }
    if (candidate(12) !== array(4, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(3) !== array(1, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(63) !== array(6, 8)) { throw new Exception(""Test failed!""); }
    if (candidate(25) !== array(5, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(19) !== array(4, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(9) !== array(4, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== array(0, 1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_108,uig_Arab,php,"<?php
//مەسىلەن: 123 نىڭ ھەرپىگە 1، 2، 3 قاتارلىق سىنبەلگىلەر قوشۇلغان.//ئەگەر بىر سان سالىھ بولسا، ئۇنىڭ بىرىنچى خانىسىمۇ سالىھ بولىدۇ://سانلىق قىممىتى 0 دىن يۇقىرى بولغان ئېلېمېنت سانى.//بىر فۇنكسىيە count_nums نى يېزىپ بىر پۈتۈن سانلار تىزىملىكىگە كىرگۈزۈپ قايتۇرۇپ بىرىڭ .// >>> count_nums(array())
// 0
// >>> count_nums(array(-1, 11, -11))
// 1
// >>> count_nums(array(1, 1, 2))
// 3
function count_nums($arr) {
","function count_nums($arr) {
    $count = 0;
    foreach ($arr as $num) {
        $digits = str_split($num);
        $sum = array_sum(array_map('intval', $digits));
        if ($sum > 0) {
            $count++;
        }
    }
    return $count;
}","function candidate(...$args) {
    return count_nums(...$args);
}

function test(): void {
    if (candidate(array()) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 1)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== 1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_109,uig_Arab,php,"<?php
//مەسىلەن: //ئەسكەرتىش: بۇ ماتېرىيالدا پەقەت ئۆزگىچە بولغان ئېلېمېنتلار بار.//ئەگەر بېرىلگەن تىزىملىك بوش بولسا true نى قايتۇرۇپ بىرىمىز.//ئاندىن true نى قايتۇرۇڭ ياكى false نى قايتۇرۇڭ.//يۇقارقى مەشغۇلاتنى ئىشلىتىپ رەتلەنگەن تىزىملىكنى تېپىش مۇمكىن بولسا//بۇ يەردىكى ئورۇننى بېكىتىمىز.//.ئۆتكەنكى تۈرنىڭ ئورنىنى ئالماشتۇرۇپ، ئۇنى .تۈزۈلۈش، ئورۇنلاشتۇرۇش//بىر قېتىم ئوڭغا يۆتكەش ھەرىكىتى، ھەر بىر تۈرنىڭ تۈرلىرىنى بىر قېتىم يۆتكەيدۇ.//سىز ئوڭ تەرەپكە يۆتكىلىش ھەرىكىتىنى خالىغانچە كۆپ قېتىم قىلالايسىز.//تۆۋەندىكى مەشغۇلاتنى بەلگىلەنگەن تىزىملىكتە قىلدۇ: //بىر تىزىملىكنىڭ تىزىملىكى تۆۋەنلەپ كەتمەسلىك تەرتىپى بويىچە تىزىملىنىدۇ.//.سىز شۇ كودنى كۆرسىتىپ بېرىدىغان ئەرزىمەس ئورۇندا قويىسىز .سىز شۇ كودنى كۆرسىتىپ بېرىدىغان ئەرزىمەس ئورۇندا قويىسىز//بىزدە بىر قاتار 'arr' N پۈتۈن ساندىن ئىبارەت arr[1], arr[2], ..., arr[N] .// >>> move_one_ball(array(3, 4, 5, 1, 2))
// true
// Explanation: By performin 2 right shift operations, non-decreasing order can
// be achieved for the given array.
// >>> move_one_ball(array(3, 5, 4, 1, 2))
// false
// Explanation:It is not possible to get non-decreasing order for the given
// array by performing any number of right shift operations.
function move_one_ball($arr) {
","function move_one_ball($arr) {
    $n = count($arr);
    if ($n <= 1) return true;

    $shiftCount = 0;

    // Count breaks in the sorted order
    for ($i = 0; $i < $n; $i++) {
        if ($arr[$i] > $arr[($i + 1) % $n]) {
            $shiftCount++;
            if ($shiftCount > 1) {
                return false;
            }
        }
    }

    // If no more than one break, the array can be rotated to sorted order
    return true;
}","function candidate(...$args) {
    return move_one_ball(...$args);
}

function test(): void {
    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 3, 1, 2)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 5, 4, 1, 2)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_110,uig_Arab,php,"<?php
//مەسىلەن: //ئۇنداق بولمىسا، ""NO"" نى قايتۇرۇڭ.//lst1 نىڭ ھەر قايسى تۈرلىرى جۈپ بولسا ""YES"" نى قايتۇرۇڭ.//ئەگەر سىز LST1 ۋە LST2 نىڭ ئارىسىدىكى ھەرخىل تۈرلەرنى ئالماشتۇرسىڭىزلا، سىز چوقۇم LST1 ۋە LST2 نىڭ ھەرخىل تۈرلىرىنى ئالماشتۇرالايسىز.//.1 ۋە lst2 نىڭ ئارىلىقىدا ئالماشتۇرۇلۇش سانى چەكلىمە ئەمەس//.بۇ يەردىكى L1 ، تىپلىق سانلارنى كۆرسىتىپ بېرىدۇ//.شۇنداقلا بۇ يەردىكى تۈرلەرنى ئالماشتۇرۇش مۇمكىنچىلىكىگە ھۆكۈم قىلىدۇ//بۇ مەزموندا، سىز بىر ھەرپنى ئىشلەتمەكچى بولسىڭىز .ئۈچىنچى ھەرپنىڭ ئىچىدىكى ھەرپلەرنى چىقىرىپ چىقىشىڭىز كېرەك// >>> exchange(array(1, 2, 3, 4), array(1, 2, 3, 4))
// ""YES""
// >>> exchange(array(1, 2, 3, 4), array(1, 5, 3, 4))
// ""NO""
// It is assumed that the input arrays will be non-empty.
function exchange($lst1, $lst2) {
","function exchange($lst1, $lst2) {
    // Check if lst2 contains at least one even number
    $hasEvenInLst2 = false;
    foreach ($lst2 as $num) {
        if ($num % 2 == 0) {
            $hasEvenInLst2 = true;
            break;
        }
    }

    // Check if all lst1 numbers are even already, if so return ""YES""
    $allEvenInLst1 = true;
    foreach ($lst1 as $num) {
        if ($num % 2 != 0) {
            $allEvenInLst1 = false;
            break;
        }
    }
    
    // If all numbers in lst1 are even or lst2 has at least one even number, return ""YES""
    if ($allEvenInLst1 || $hasEvenInLst2) {
        return ""YES"";
    }
    
    // Otherwise, return ""NO""
    return ""NO"";
}","function candidate(...$args) {
    return exchange(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3, 4), array(1, 2, 3, 4)) !== ""YES"") { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4), array(1, 5, 3, 4)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4), array(2, 1, 4, 3)) !== ""YES"") { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 7, 3), array(2, 6, 4)) !== ""YES"") { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 7, 3), array(2, 6, 3)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 6, 1, 8, 9), array(3, 5, 5, 1, 1, 1)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(100, 200), array(200, 200)) !== ""YES"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_111,uig_Arab,php,"<?php
//مىسال://ئەگەر ھەرپلەرنىڭ ھەممىسى ئوخشاش بولسا، ھەممىسى قايتۇرۇلىدۇ.//.ئەڭ كۆپ قېتىم تەكرارلانغان ۋە شۇ ساننى ئۆز ئىچىگە ئالغان ھەرپنىڭ ئىپادىسى//بىر ھەرپنىڭ ئورنىغا بىر ھەرپنىڭ ئورنىغا بىر ھەرپنىڭ ئورنىنى بېكىتىمىز.// >>> histogram(""a b c"")
// array(""a"" => 1, ""b"" => 1, ""c"" => 1)
// >>> histogram(""a b b a"")
// array(""a"" => 2, ""b"" => 2)
// >>> histogram(""a b c a b"")
// array(""a"" => 2, ""b"" => 2)
// >>> histogram(""b b b b a"")
// array(""b"" => 4)
// >>> histogram("""")
// array()
function histogram($test) {
","function histogram($test) {
    // Split the input string into an array of letters
    $letters = explode(' ', $test);

    // Create an associative array to count occurrences of each letter
    $counts = array();

    foreach ($letters as $letter) {
        if ($letter !== '') {
            if (array_key_exists($letter, $counts)) {
                $counts[$letter]++;
            } else {
                $counts[$letter] = 1;
            }
        }
    }

    // Find the maximum occurrence count
    $maxCount = 0;
    foreach ($counts as $count) {
        if ($count > $maxCount) {
            $maxCount = $count;
        }
    }

    // Gather all letters with the maximum occurrence count
    $result = array();
    foreach ($counts as $letter => $count) {
        if ($count == $maxCount) {
            $result[$letter] = $count;
        }
    }

    return $result;
}","function candidate(...$args) {
    return histogram(...$args);
}

function test(): void {
    if (candidate(""a b b a"") !== array(""a"" => 2, ""b"" => 2)) { throw new Exception(""Test failed!""); }
    if (candidate(""a b c a b"") !== array(""a"" => 2, ""b"" => 2)) { throw new Exception(""Test failed!""); }
    if (candidate(""a b c d g"") !== array(""a"" => 1, ""b"" => 1, ""c"" => 1, ""d"" => 1, ""g"" => 1)) { throw new Exception(""Test failed!""); }
    if (candidate(""r t g"") !== array(""r"" => 1, ""t"" => 1, ""g"" => 1)) { throw new Exception(""Test failed!""); }
    if (candidate(""b b b b a"") !== array(""b"" => 4)) { throw new Exception(""Test failed!""); }
    if (candidate(""r t g"") !== array(""r"" => 1, ""t"" => 1, ""g"" => 1)) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""a"") !== array(""a"" => 1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_112,uig_Arab,php,"<?php
//مىسال//نەتىجە سىتونى ۋە true/false نى ئۆز ئىچىگە ئالغان بىر ماتېرىيالنى قايتۇرىسىز.//بىر ھەرپنىڭ كەينى-كەينىدىن ئوقۇلۇشى ئوخشاش بولسا، ئۇ پالىندروم دەپ ئاتىلىدۇ.//ئاندىن نەتىجە سىتونىنىڭ پاليندروم ئىكەنلىكىنى تەكشۈرۈڭ.//بىز ئىككى ھەرپ s ۋە c نى ئىپادىلەپ بەرگەن. سىز s نىڭ ھەربىر بۆلۈمىدىكى ھەرپلەرنى چىقىرىپ تاشلاپ، يەنە c نىڭ ھەرپىگە ئوخشايدىغان بىر قىسىم ھەرپلەرنى چىقىرىپ تاشلايسىز.//ۋەزىپە // >>> reverse_delete(""abcde"", ""ae"")
// array(""bcd"", false)
// >>> reverse_delete(""abcdef"", ""b"")
// array(""acdef"", false)
// >>> reverse_delete(""abcdedcba"", ""ab"")
// array(""cdedc"", true)
function reverse_delete($s, $c) {
","function reverse_delete($s, $c) {
    // Remove all characters in $s that are present in $c
    $result = str_replace(str_split($c), '', $s);
    
    // Check if the result string is a palindrome
    $is_palindrome = ($result === strrev($result));
    
    // Return the result string and whether it is a palindrome
    return array($result, $is_palindrome);
}","function candidate(...$args) {
    return reverse_delete(...$args);
}

function test(): void {
    if (candidate(""abcde"", ""ae"") !== array(""bcd"", false)) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdef"", ""b"") !== array(""acdef"", false)) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdedcba"", ""ab"") !== array(""cdedc"", true)) { throw new Exception(""Test failed!""); }
    if (candidate(""dwik"", ""w"") !== array(""dik"", false)) { throw new Exception(""Test failed!""); }
    if (candidate(""a"", ""a"") !== array("""", true)) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdedcba"", """") !== array(""abcdedcba"", true)) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdedcba"", ""v"") !== array(""abcdedcba"", true)) { throw new Exception(""Test failed!""); }
    if (candidate(""vabba"", ""v"") !== array(""abba"", true)) { throw new Exception(""Test failed!""); }
    if (candidate(""mamma"", ""mia"") !== array("""", true)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_113,uig_Arab,php,"<?php
//.نۇرغۇن نومۇرلار كىرگەن بىر قاتاردا، يەنى//بۇ يەردە ھەربىر i نىڭ ئورنىغا  دېگەن سانغا ئالماشتۇرۇڭ.//ھەربىر تۈر i نىڭ نەتىجىسى ""تۈرلۈك تۈرلەرنىڭ سانى"" غا تەڭ بولۇشى كېرەك.//ھەر بىر تار پەقەت سانلىق بەلگىلەردىن تەركىب تاپقان بىر قاتار تارلارنى بېسىپ، بىر قاتار تار قايتۇرۇلىدۇ.// >>> odd_count(array(""1234567""))
// array(""the number of odd elements 4n the str4ng 4 of the 4nput."")
// >>> odd_count(array(""3"", ""11111111""))
// array(""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput."")
function odd_count($lst) {
","function odd_count($lst) {
    $result = array();
    foreach ($lst as $string) {
        $oddCount = 0;
        
        // Count odd digits in the string
        for ($i = 0; $i < strlen($string); $i++) {
            if ((int)$string[$i] % 2 !== 0) {
                $oddCount++;
            }
        }
        
        // Create the formatted string
        $result[] = ""the number of odd elements "" . $oddCount . ""n the str"" . $oddCount . ""ng "" . $oddCount . "" of the "" . $oddCount . ""nput."";
    }
    return $result;
}","function candidate(...$args) {
    return odd_count(...$args);
}

function test(): void {
    if (candidate(array(""1234567"")) !== array(""the number of odd elements 4n the str4ng 4 of the 4nput."")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""3"", ""11111111"")) !== array(""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput."")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""271"", ""137"", ""314"")) !== array(""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput."")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_114,uig_Arab,php,"<?php
//مىسال//.نۇرغۇن//بىر جۈملىدىكى نۇمۇرلارنى باھالاپ، ھەر قانداق بوش بولمىغان جۈملىنىڭ ئەڭ كىچىك سوممىسىنى بايقايمىز.// >>> minSubArraySum(array(2, 3, 4, 1, 2, 4))
// 1
// >>> minSubArraySum(array(-1, -2, -3))
// -6
function minSubArraySum($nums) {
","function minSubArraySum($nums) {
    $currentSum = $nums[0];
    $minSum = $nums[0];

    for ($i = 1; $i < count($nums); $i++) {
        $currentSum = min($nums[$i], $currentSum + $nums[$i]);
        $minSum = min($minSum, $currentSum);
    }

    return $minSum;
}","function candidate(...$args) {
    return minSubArraySum(...$args);
}

function test(): void {
    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw new Exception(""Test failed!""); }
    if (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(""Test failed!""); }
    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(""Test failed!""); }
    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) { throw new Exception(""Test failed!""); }
    if (candidate(array(-10)) !== -10) { throw new Exception(""Test failed!""); }
    if (candidate(array(7)) !== 7) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -1)) !== -1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_115,uig_Arab,php,"<?php
//مىسال 1://سىز بالداقلارنى قانچە قېتىم چۈشۈرىسىز.//بۇ خالتىلارنى قۇدۇققا بوشىتىش سىزنىڭ ۋەزىپىڭىز.//.ھەممىمىز ئوخشاش مىقداردا قىممەت باھادا سېتىۋالالايمىز//ھەر بىر بۇلاقنىڭ يېنىدا بىر دانە سۇ بار بۇلاقتىن بۇ سۇنى ئېلىش ئۈچۈن .ئۇ سوۋغا قىلىشقا ئىشلىتىلىدۇ//ھەربىر جەدۋەلدىكى 1 بولسا بىر دانە سۇ//بىز ھەربىر رېتىمنىڭ يەككە بۆلىكىنى مىسالغا ئالىمىز.// >>> max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1)
// 6
// Example 2:
// >>> max_fill(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2)
// 5
// Example 3:
// >>> max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5)
// 0
// Constraints:
// * all wells have the same length
// * 1 <= grid.length <= 10^2
// * 1 <= grid[:,1].length <= 10^2
// * grid[i][j] -> 0 | 1
// * 1 <= capacity <= 10
function max_fill($grid, $capacity) {
","function max_fill($grid, $capacity) {
    $totalTimes = 0;
    
    foreach ($grid as $well) {
        $waterUnits = array_sum($well);
        $times = ceil($waterUnits / $capacity);
        $totalTimes += $times;
    }
    
    return $totalTimes;
}","function candidate(...$args) {
    return max_fill(...$args);
}

function test(): void {
    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_116,uig_Arab,php,"<?php
//ئۇنىڭغا مۇنداق بىر مىسالنى كەلتۈرەيلى://ئوخشاش ساندىكى بىرلىك ئۈچۈن، ئونلۇق قىممەتنى ئاساس قىلىپ رەتلەيمىز.//.ئىككى نومۇرلۇق تەڭپۇڭلۇقتىكى بىرلىكلەر تىزىملىكىدىكى نومۇرلار//بۇ سىستېمىدا سىز بىر جەدۋەلگە نۆلدىن ئايرىم ساننى قوشسىڭىز بولىدۇ// >>> sort_array(array(1, 5, 2, 3, 4))
// array(1, 2, 3, 4, 5)
// >>> sort_array(array(-2, -3, -4, -5, -6))
// array(-6, -5, -4, -3, -2)
// >>> sort_array(array(1, 0, 2, 3, 4))
// array(0, 1, 2, 3, 4)
function sort_array($arr) {
","function sort_array($arr) {
    usort($arr, function($a, $b) {
        $countA = substr_count(decbin($a), '1');
        $countB = substr_count(decbin($b), '1');
        if ($countA !== $countB) {
            return $countA - $countB;
        } else {
            return $a - $b;
        }
    });
    return $arr;
}","function candidate(...$args) {
    return sort_array(...$args);
}

function test(): void {
    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_117,uig_Arab,php,"<?php
//مىساللار://ئەسكەرتىش: سىز كىرگۈزگەن خەتنىڭ پەقەت ھەرپ ۋە بوشلۇقلا بار دەپ پەرەز قىلىشىڭىز مۇمكىن.//ئەگەر string s بوش بولسا، بۇ فۇنكسىيە بوش بىر ماتېرىيال قايتۇرۇپ كېلىدۇ.//.n ھەرپلەر تىزىملىكىدىكى سۆزلەرنىڭ تىزىملىكىدىن ئىبارەتتۇر//بىر فۇنكسىيە بولۇپ ، ئۇ دەل  نىڭ مەزمۇنىدىكى string s دىن بارلىق سۆزلەرنى بىر قاتارغا ئايلاندۇرۇپ بېرىدۇ .//S غا توغرا كېلىدۇ ۋە N بولسا بىرخىل نۇسخا، يەنى// >>> select_words(""Mary had a little lamb"", 4)
// array(""little"")
// >>> select_words(""Mary had a little lamb"", 3)
// array(""Mary"", ""lamb"")
// >>> select_words(""simple white space"", 2)
// array()
// >>> select_words(""Hello world"", 4)
// array(""world"")
// >>> select_words(""Uncle sam"", 3)
// array(""Uncle"")
function select_words($s, $n) {
","function select_words($s, $n) {
    $words = explode(' ', $s); // Split the string into words
    $result = [];
    $vowels = ['a', 'e', 'i', 'o', 'u'];

    foreach ($words as $word) {
        $count = 0;
        $lowercaseWord = strtolower($word);
        
        // Count consonants in the word
        for ($i = 0; $i < strlen($lowercaseWord); $i++) {
            if (ctype_alpha($lowercaseWord[$i]) && !in_array($lowercaseWord[$i], $vowels)) {
                $count++;
            }
        }

        // Add word to result if it has exactly n consonants
        if ($count === $n) {
            $result[] = $word;
        }
    }

    return $result;
}","function candidate(...$args) {
    return select_words(...$args);
}

function test(): void {
    if (candidate(""Mary had a little lamb"", 4) !== array(""little"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Mary had a little lamb"", 3) !== array(""Mary"", ""lamb"")) { throw new Exception(""Test failed!""); }
    if (candidate(""simple white space"", 2) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""Hello world"", 4) !== array(""world"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Uncle sam"", 3) !== array(""Uncle"")) { throw new Exception(""Test failed!""); }
    if (candidate("""", 4) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""a b c d e f"", 1) !== array(""b"", ""c"", ""d"", ""f"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_118,uig_Arab,php,"<?php
//مىسال://سىز پەقەت ئىنگلىزچىدىكى ھەرپلەرنىلا ئۆز ئىچىگە ئالغان .//يۇقارقى شەرتكە ئۇيغۇن كەلگەن ھەر قانداق تاۋۇشنى تېپىپ چىقىڭ.//باش ۋە ئاخىرقى تاۋۇشلار سانىمايدۇ. ئەگەر قۇرۇق بولسا قۇرۇق string نى قايتۇرۇڭ.//ئىككى تاۋۇشلۇق سۆزنىڭ ئوڭ تەرىپىگە يانىدۇ (ئەسلى ھەرپىنى چۈشىنىش).//.سىز بىر سۆزنى ئىپادىلىمەكچى بولسىڭىز، ئۇنىڭغا يېقىن بىر بوغۇمنى تېپىپ چىقىڭ// >>> get_closest_vowel(""yogurt"")
// ""u""
// >>> get_closest_vowel(""FULL"")
// ""U""
// >>> get_closest_vowel(""quick"")
// """"
// >>> get_closest_vowel(""ab"")
// """"
function get_closest_vowel($word) {
","function get_closest_vowel($word) {
    $vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
    $length = strlen($word);

    // Iterate from the end of the word towards the beginning
    for ($i = $length - 2; $i > 0; $i--) {
        if (in_array($word[$i], $vowels)) {
            // Check if adjacent characters are consonants
            if (!in_array($word[$i - 1], $vowels) && !in_array($word[$i + 1], $vowels)) {
                return $word[$i];
            }
        }
    }

    // Return empty string if no suitable vowel was found
    return '';
}","function candidate(...$args) {
    return get_closest_vowel(...$args);
}

function test(): void {
    if (candidate(""yogurt"") !== ""u"") { throw new Exception(""Test failed!""); }
    if (candidate(""full"") !== ""u"") { throw new Exception(""Test failed!""); }
    if (candidate(""easy"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""eAsy"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""ali"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""bad"") !== ""a"") { throw new Exception(""Test failed!""); }
    if (candidate(""most"") !== ""o"") { throw new Exception(""Test failed!""); }
    if (candidate(""ab"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""ba"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""quick"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""anime"") !== ""i"") { throw new Exception(""Test failed!""); }
    if (candidate(""Asia"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""Above"") !== ""o"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_119,uig_Arab,php,"<?php
//مىساللار://ئەگەر راستتىنلا بىر تېكىستنى ئۆزگەرتەلەيدىغان بولسىڭىز، ""يا"" نى قوشۇپ يېزىپ بېقىڭ، ئەگەر راستتىنلا بىر تېكىستنى ئۆزگەرتەلەيدىغان بولسىڭىز، ""كاللا"" نى قوشۇپ يېزىپ بېقىڭ//(ئەرەبچىدە ""ئەرەبچىدە"")//.مەسىلەن: string '(()) (() ياخشى، string  بولسا//بىر تار S نىڭ ئىچىدىكى بارلىق قوساقلار S  بولسا ئاندىن ئاندىن ئۇنىڭ ياخشىلىقى باھالىلىدۇ.//بۇ يەردىكى مۇناسىۋەت تورى ياخشى بولغان .//سىزنىڭ خىزمىتىڭىز بولسا، ئىككى تارنى بىللە ئېلىپ چىقىش. .بۇنى تەكشۈرۈش//پەقەت "" (_) "" ياكى "" (_) "" دېگەن سانلارنىلا قوشۇپ يېزىلىدۇ.//بۇ يەردىكى ئىككى تار ، يەنى ئەركىن تار ئىككى بار// >>> match_parens(array(""()("", "")""))
// ""Yes""
// >>> match_parens(array("")"", "")""))
// ""No""
function match_parens($lst) {
","function match_parens($lst) {
    $str1 = $lst[0];
    $str2 = $lst[1];

    // Function to determine if parentheses are balanced
    function is_balanced($s) {
        $balance = 0;
        for ($i = 0; $i < strlen($s); $i++) {
            if ($s[$i] === '(') {
                $balance++;
            } else {
                $balance--;
            }
            // If balance is negative, parentheses are not balanced
            if ($balance < 0) {
                return false;
            }
        }
        // Check that balance is zero
        return $balance === 0;
    }

    // Check all concatenation combinations
    $concat1 = $str1 . $str2;
    $concat2 = $str2 . $str1;

    if (is_balanced($concat1) || is_balanced($concat2)) {
        return ""Yes"";
    } else {
        return ""No"";
    }
}","function candidate(...$args) {
    return match_parens(...$args);
}

function test(): void {
    if (candidate(array(""()("", "")"")) !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(array("")"", "")"")) !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""(()(())"", ""())())"")) !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(array("")())"", ""(()()("")) !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""(())))"", ""(()())(("")) !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""()"", ""())"")) !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""(()("", ""()))()"")) !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""(((("", ""((())"")) !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(array("")(()"", ""(()("")) !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(array("")("", "")("")) !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""("", "")"")) !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(array("")"", ""("")) !== ""Yes"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_120,uig_Arab,php,"<?php
//مىسال 1://.ئارقا كۆرۈنۈش ئارقىلىق .k لىك ھەرپلەرنى كۆرسىتىپ بېرەلىسەك//بىر جۈملىگە arr نى قوشۇپ بىر جۈملىگە k نى قوشۇپ بىر جۈملىگە  نى قوشۇپ بىر جۈملىگە  نى قوشۇپ بىر جۈملىگە  نى قوشۇپ بىر جۈملىگە  نى قوشۇپ بىر جۈملىگە  نى قوشۇپ بىر جۈملىگە  نى قوشۇپ بىر جۈملىگە  نى قوشۇپ بىر جۈملىگە// >>> maximum(array(-3, -4, 5), 3)
// array(-4, -3, 5)
// Example 2:
// >>> maximum(array(4, -4, 4), 2)
// array(4, 4)
// Example 3:
// >>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)
// array(2)
// Note:
// 1. The length of the array will be in the range of [1, 1000].
// 2. The elements in the array will be in the range of [-1000, 1000].
// 3. 0 <= k <= len(arr)
function maximum($arr, $k) {
","function maximum($arr, $k) {
    rsort($arr);
    return array_slice($arr, 0, $k);
}","function candidate(...$args) {
    return maximum(...$args);
}

function test(): void {
    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_121,uig_Arab,php,"<?php
//مىساللار//بۇ بىر پۈتۈن سانلارنى ئۆز ئىچىگە ئالغان جۈملىگە ۋەكىللىك قىلىدۇ، بىز جۈملىگە ئوخشاش ئورۇنغا ئورۇنلاشقان ھەر بىر جۈملىنىڭ جۈملىسىنى قايتۇرىمىز.// >>> solution(array(5, 8, 7, 1))
// 12
// >>> solution(array(3, 3, 3, 3, 3))
// 9
// >>> solution(array(30, 13, 24, 321))
// 0
function solution($lst) {
","function solution($lst) {
    $sum = 0;
    for ($i = 0; $i < count($lst); $i += 2) {
        if ($lst[$i] % 2 != 0) {
            $sum += $lst[$i];
        }
    }
    return $sum;
}","function candidate(...$args) {
    return solution(...$args);
}

function test(): void {
    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new Exception(""Test failed!""); }
    if (candidate(array(30, 13, 24, 321)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(5, 9)) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 8)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(30, 13, 23, 32)) !== 23) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 13, 2, 9)) !== 3) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_122,uig_Arab,php,"<?php
//مىسال://بۇ تۈرنىڭ ئەڭ چوڭ سانى arr نىڭ بىرىنچى k تۈرلىرىدىن ئىككى ساندىن ئېشىپ كەتمەيدۇ.//بىر پۈتۈن سان ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار// >>> add_elements(array(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)
// 24
// Constraints:
// 1. 1 <= len(arr) <= 100
// 2. 1 <= k <= len(arr)
function add_elements($arr, $k) {
","function add_elements($arr, $k) {
    $sum = 0;
    for ($i = 0; $i < $k; $i++) {
        if ($arr[$i] >= -99 && $arr[$i] <= 99) {
            $sum += $arr[$i];
        }
    }
    return $sum;
}","function candidate(...$args) {
    return add_elements(...$args);
}

function test(): void {
    if (candidate(array(1, -2, -3, 41, 57, 76, 87, 88, 99), 3) !== -4) { throw new Exception(""Test failed!""); }
    if (candidate(array(111, 121, 3, 4000, 5, 6), 2) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(11, 21, 3, 90, 5, 6, 7, 8, 9), 4) !== 125) { throw new Exception(""Test failed!""); }
    if (candidate(array(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) !== 24) { throw new Exception(""Test failed!""); }
    if (candidate(array(1), 1) !== 1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_123,uig_Arab,php,"<?php
//[1, 5] نى قايتۇرۇپ بېرىدۇ. # 5 نىڭ تۈرى [5, 16, 8, 4, 2, 1] ، شۇڭا، پەقەت 1 ۋە 5 نىلا تار سانلىقلار دەپ ئاتىۋالىمىز.//مەسىلەن: //2.يەنە بىر قېتىم رەتلەش//.1 .ئالدىغا سىلىڭ//دىققەت://.ھازىرنىڭ ھىكايىسى شۇكى، n نىڭ ھەر قانداق قىممىتىدىن قەتئىينەزەر، بۇ خىل ھالەتتىكى جەدۋەللەر ھەمىشە 1 غا تارقالىدۇ//.ئەگەر ئالدىنقى قېتىمقى سىنبەلگە غەلىتە بولسا، كېيىنكى قېتىمقى سىنبەلگە 3 قېتىم قاتلىنىدۇ//ئالدىنقى جۈملە: ئەگەر ئالدىنقى جۈملە جۈپ بولسا، كېيىنكى جۈملە  نىڭ يېرىمىغا تەڭ//تۆۋەندىكىدەك: ھەر قانداق بىر قوشۇمچە پۈتۈن ساندىن باشلايمىز. ئاندىن ھەر بىر تۈرنى  دىن چىقىرىمىز.//كولاتز پەرەزى ماتېماتىكىدا بىر پەرەز بولۇپ ، ئېنىقلانغان تەرتىپنى كۆزدە تۇتىدۇ .//بىر قوشۇمچە پۈتۈن سان n نى بەرسەك، بىر رەتلەنگەن جەدۋەل قايتۇرىمىز، بۇ جەدۋەلنىڭ تەرتىپى بىر-بىرلەپ بىر-بىرلەپ بىر-بىرلەپ رەتلەنگەن جەدۋەل.// >>> get_odd_collatz(5)
// array(1, 5)
function get_odd_collatz($n) {
","function get_odd_collatz($n) {
    $collatz = [];
    while ($n != 1) {
        if ($n % 2 != 0) {
            $collatz[] = $n;
        }
        if ($n % 2 == 0) {
            $n = $n / 2;
        } else {
            $n = 3 * $n + 1;
        }
    }
    $collatz[] = 1; // Adding 1 as it's always the last part of any Collatz sequence
    sort($collatz);
    return $collatz;
}","function candidate(...$args) {
    return get_odd_collatz(...$args);
}

function test(): void {
    if (candidate(14) !== array(1, 5, 7, 11, 13, 17)) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== array(1, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(12) !== array(1, 3, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== array(1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_124,uig_Arab,php,"<?php
//4.تۈنۈگۈننى: م-د-ي-ي-ي شەكىلدە يازسىڭىز بولىدۇ.//.ئايلارنىڭ سانى 1 دىن كىچىك ياكى 12 دىن چوڭ بولۇشى كېرەك//ئايلارنىڭ سانى 1 دىن ئاز ياكى 31 كۈندىن كۆپ ئەمەس ئايلارنىڭ سانى 1 دىن ئاز ياكى 30 كۈندىن كۆپ ئەمەس ئايلارنىڭ سانى 4،6،9،11 ئايلارنىڭ سانى 1 دىن ئاز ياكى 29 كۈندىن كۆپ ئەمەس ئايلارنىڭ سانى 2//1.تۈنۈگۈن سۈرىتى بوش ئەمەس.//تۆۋەندىكى قائىدىلەرنىڭ ھەممىسى ئىجرا قىلىنسا ، شۇ ۋاقىت كۈچكە ئىگە بولىدۇ: //ئەگەر ۋاقتىڭىز توغرا بولسا true نى قايتۇرۇپ بېرىدۇ، بولمىسا false نى قايتۇرۇپ بېرىدۇ.//.سىز شۇ ۋاقىتتىكى بىر ھەرپنى ئىپادىلەيدىغان فۇنكسىيەنى يېزىپ چىقىسىز// >>> valid_date(""03-11-2000"")
// true
// >>> valid_date(""15-01-2012"")
// false
// >>> valid_date(""04-0-2040"")
// false
// >>> valid_date(""06-04-2020"")
// true
// >>> valid_date(""06/04/2020"")
// false
function valid_date($date) {
","function valid_date($date) {
    // Check if the date is in the correct format mm-dd-yyyy
    if (!preg_match('/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\d{4}$/', $date)) {
        return false;
    }

    // Split the date to get month, day, and year
    list($month, $day, $year) = explode('-', $date);

    // Check if the month and day values are valid
    if ($month < 1 || $month > 12 || $day < 1) {
        return false;
    }

    // Check the number of days in each month
    $daysInMonth = array(
        1 => 31, // January
        2 => 29, // February (handle separately for leap year)
        3 => 31, // March
        4 => 30, // April
        5 => 31, // May
        6 => 30, // June
        7 => 31, // July
        8 => 31, // August
        9 => 30, // September
        10 => 31, // October
        11 => 30, // November
        12 => 31  // December
    );

    // Check for the correct number of days against the given month
    if ($day > $daysInMonth[(int)$month]) {
        return false;
    }

    // If February is given, further check for leap year validity
    if ($month == 2) {
        // Leap year condition
        if (($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0)) {
            // Leap year, February can have up to 29 days
            if ($day > 29) {
                return false;
            }
        } else {
            // Not a leap year, February can have only up to 28 days
            if ($day > 28) {
                return false;
            }
        }
    }

    return true;
}","function candidate(...$args) {
    return valid_date(...$args);
}

function test(): void {
    if (candidate(""03-11-2000"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""15-01-2012"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""04-0-2040"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""06-04-2020"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""01-01-2007"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""03-32-2011"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""04-31-3000"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""06-06-2005"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""21-31-2000"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""04-12-2003"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""04122003"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""20030412"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""2003-04"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""2003-04-12"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""04-2003"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_125,uig_Arab,php,"<?php
//مىساللار//ھەرپ، (a) =0، (b) =1، (z) =25//،ئەگەر سىزدە خەت يوق بولسا،سىزگە كىچىك ھەرپلەرنىڭ سانى قوشۇلۇپ كېلىدۇ//سۆز بىرىكمىسىگە، ئەگەر سىز تاللىغان تېكىستتە بوشلۇق بولمىسا، بىر قۇر سۆز بىرىكمىسىگە بۆلۈپ، بىر قۇر سۆز بىرىكمىسى قايتۇرىسىز.// >>> split_words(""Hello world!"")
// array(""Hello"", ""world!"")
// >>> split_words(""Hello,world!"")
// array(""Hello"", ""world!"")
// >>> split_words(""abcdef"")
// 3
function split_words($txt) {
","function split_words($txt) {
    if (preg_match('/\s/', $txt)) {
        return preg_split('/\s+/', trim($txt));
    } else if (strpos($txt, ',') !== false) {
        return explode(',', $txt);
    } else {
        $count = 0;
        for ($i = 0; $i < strlen($txt); $i++) {
            $ch = $txt[$i];
            if (ctype_lower($ch)) {
                $pos = ord($ch) - ord('a');
                if ($pos % 2 == 0) {
                    $count++;
                }
            }
        }
        return $count;
    }
}","function candidate(...$args) {
    return split_words(...$args);
}

function test(): void {
    if (candidate(""Hello world!"") !== array(""Hello"", ""world!"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Hello,world!"") !== array(""Hello"", ""world!"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Hello world,!"") !== array(""Hello"", ""world,!"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Hello,Hello,world !"") !== array(""Hello,Hello,world"", ""!"")) { throw new Exception(""Test failed!""); }
    if (candidate(""abcdef"") !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(""aaabb"") !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(""aaaBb"") !== 1) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_126,uig_Arab,php,"<?php
//مىساللار//negative سانلارنى ئەمەس پەقەت پۈتۈن سانلارنى تاللايمىز.//ئەگەر تۈرنىڭ بىرلا تۈرنىڭ كۆپىنچىسى بار بولسا//بىر جەدۋەلگە سانلارنى قوشۇپ، رەتلىگىنى ياكى رەتلىمىگەنلىكىنى قايتۇرىدۇ.// >>> is_sorted(array(5))
// true
// >>> is_sorted(array(1, 2, 3, 4, 5))
// true
// >>> is_sorted(array(1, 3, 2, 4, 5))
// false
// >>> is_sorted(array(1, 2, 3, 4, 5, 6))
// true
// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))
// true
// >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))
// false
// >>> is_sorted(array(1, 2, 2, 3, 3, 4))
// true
// >>> is_sorted(array(1, 2, 2, 2, 3, 4))
// false
function is_sorted($lst) {
","function is_sorted($lst) {
    $length = count($lst);
    if ($length <= 1) {
        return true;
    }

    $previous = $lst[0];
    $count = array();

    foreach ($lst as $number) {
        if (isset($count[$number])) {
            $count[$number]++;
        } else {
            $count[$number] = 1;
        }

        if ($count[$number] > 2) {
            return false;
        }

        if ($number < $previous) {
            return false;
        }

        $previous = $number;
    }

    return true;
}","function candidate(...$args) {
    return is_sorted(...$args);
}

function test(): void {
    if (candidate(array(5)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5, 6)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_127,uig_Arab,php,"<?php
//[ئۈچۈش/چىقىش] ئۈلگە: //ئەگەر ئىككىلا قېتىملىق سىنارامى ئوخشاش بولمىسا ""NO"" نى قايتۇرۇپ بېرىڭ.//ئۇنداق بولمىسا، ""NO"" نى قايتۇرۇڭ.//ئەگەر كېسىشمە يەرنىڭ ئۇزۇنلۇقى نۇپۇزلۇق سان بولسا، ""YES"" نى قايتۇرۇڭ،//،ئۇ ئۇزۇنلۇقى بىر،بۇرۇنلۇق سان ئەمەس//مەسىلەن: (1,3) ، (2,4) ، (2,3) نىڭ كېسىش نۇقتىسى//بىر جۈملە نۆلدىن بىرنى ئېلىپ باقساق، بۇ بىر جۈملە نۆلدىن بىرنى ئېلىپ باقساق بولىدۇ.//سىزنىڭ نۆۋىتىڭىز: سىز بۇ ئىككىسىنىڭ گىرۋەكتىكى ئۇزۇنلۇقىنى ھېسابلىسىڭىز بولىدۇ//ھەربىر ۋاقىتنىڭ بېشىدا ئۇنىڭ ئاخىرقى ۋاقىتقا باراۋەر ياكى ئۇنىڭدىن كىچىك دەپ قارىلىدۇ.//.ئۇ باشلىنىش ۋە ئاخىرلىشىش ئىككىلىسىنى ئۆز ئىچىگە ئالىدۇ//بۇ ئارىلىقلار يېپىق، يەنى ئارىلىق (باشلىنىش، ئاخىرلاش)//ھەر بىر ئارىلىق بىر جۈپ پۈتۈن سان. مەسىلەن: ئارىلىق = (باشلىنىش، ئاخىرلاش) = (1,2).//سىلەر (ئاياللارنىڭ بەچىدانىغا) تۆكۈلگەن مەنىنىي دەپ بېقىڭلار// >>> intersection(array(1, 2), array(2, 3))
// ""NO""
// >>> intersection(array(-1, 1), array(0, 4))
// ""NO""
// >>> intersection(array(-3, -1), array(-5, 5))
// ""YES""
function intersection($interval1, $interval2) {
","function intersection($interval1, $interval2) {
    // Find intersection
    $start = max($interval1[0], $interval2[0]);
    $end = min($interval1[1], $interval2[1]);

    // Determine the length of the intersection
    $length = $end - $start;

    // If the intervals don't intersect
    if ($length < 0) {
        return ""NO"";
    }

    // Check if the length is a prime number
    if ($length <= 1) {
        return ""NO"";
    }

    for ($i = 2; $i * $i <= $length; $i++) {
        if ($length % $i == 0) {
            return ""NO"";
        }
    }

    return ""YES"";
}","function candidate(...$args) {
    return intersection(...$args);
}

function test(): void {
    if (candidate(array(1, 2), array(2, 3)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, 1), array(0, 4)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(-3, -1), array(-5, 5)) !== ""YES"") { throw new Exception(""Test failed!""); }
    if (candidate(array(-2, 2), array(-4, 0)) !== ""YES"") { throw new Exception(""Test failed!""); }
    if (candidate(array(-11, 2), array(-1, -1)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2), array(3, 5)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2), array(1, 2)) !== ""NO"") { throw new Exception(""Test failed!""); }
    if (candidate(array(-2, -2), array(-3, -2)) !== ""NO"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_128,uig_Arab,php,"<?php
//مىسال://ئەسكەرتىش: قۇرۇق ئار ئار ئۈچۈن null نى قايتۇر.//ھەربىر جەدۋەلدىكى بىر دانە نومۇر 1، -1، ياكى 0 .//پۈتۈن سانلارنىڭ چوڭلۇقىنىڭ جۈملىسى بىلەن ھەرپلەرنىڭ ھەسسىلەپ بىرىلىشى//بىز بىر جۈملىگە تارقىتىمىز، ئاندىن بىز بىر جۈملىگە يۆتكەپ بۇ تەرەپكە قايتىمىز.// >>> prod_signs(array(1, 2, 2, -4))
// 9
// >>> prod_signs(array(0, 1))
// 0
// >>> prod_signs(array())
// null
function prod_signs($arr) {
","function prod_signs($arr) {
    if (empty($arr)) {
        return null;
    }
    
    $sum_of_magnitudes = 0;
    $product_of_signs = 1;
    
    foreach ($arr as $num) {
        $sum_of_magnitudes += abs($num);
        if ($num == 0) {
            $product_of_signs = 0;
            break;
        } else {
            $product_of_signs *= ($num > 0) ? 1 : -1;
        }
    }
    
    return $sum_of_magnitudes * $product_of_signs;
}","function candidate(...$args) {
    return prod_signs(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 1)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== null) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_129,uig_Arab,php,"<?php
//مىساللار://ئەڭ كىچىك يولنى تاللىغان ھۈجەيرە قىممىتىنىڭ تەرتىپلىك تىزىملىكىنى قايتۇرىدۇ.//بۇ سوئالنىڭ جاۋابى چوقۇم ""ياۋروپا"" دىن كېلىدۇ.//lst_A[j] = lst_B[j] .//شۇنداق بولغاندا lst_A[i] < lst_B[i] ھەر قانداق j (1 <= j < i) نىڭ بىزدە //يەنى، lst_B دىن بىر پۈتۈن سانلىق كۆرسەتكۈچ بار i (1 <= i <= k)//بىز بۇنى ""ياۋروپا"" دەپ ئاتىشىمىز مۇمكىن، بۇ ""ياۋروپا"" نىڭ ئىنگلىز تىلىدىكى مەنىسى//بىز A ۋە B ھەرپلەرنى تۈرگە ئايرىغاندىن كېيىن . بىز A ۋە B ھەرپلەرنى تۈرگە ئايرىيمىز .//A (k ئۇزۇنلۇقتىكى) يول B (k ئۇزۇنلۇقتىكى) يولدىن كىچىك دەپ قارىلىدۇ ئەگەر //سىز توردىن چىقالمايسىز.//ئەلۋەتتە ئوخشىمايدۇ)//دىققەت قىلىڭ ، ئۇزۇنلۇقى k بولغان يول دەل k خانە (خانا ئەمەس) نى زىيارەت قىلىشنى كۆرسىتىدۇ .//.ئۈندىدار//دېمەكچىمەنكى، سىز ھازىر يەنە داۋاملىق يانفونغا كىرىشكە ئالدىرايسىز شۇنداقلا يەنە داۋاملىق يانفونغا كىرىشكە ئالدىرايسىز//ھەربىر باسقۇچتا سىز خالىغان بىر يۆنىلىشنى تاللىيالايسىز.//سىز ئەڭ كىچىك تىپتىكى ئۇزۇنلۇقتىكى يولنى تېپىپ چىقىشىڭىز كېرەك. سىز بۇنى باشلىيالايسىز.//.inclusive بولسا، بىر قېتىملا كۆرۈنىدۇ//ھەربىر خانىدا بىر قىممەت بار. ھەربىر نۇمۇرى [1, N * N] دائىرىسىدىكى ھەربىر پۈتۈن سان.//بىر تورنىڭ N قاتار ۋە N تۈۋرۈكى (N >=2) ۋە بىر قوش تولا سان k بولسا، // >>> minPath(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9)), 3)
// array(1, 2, 1)
// >>> minPath(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1)
// array(1)
function minPath($grid, $k) {
","function minPath($grid, $k) {
    $n = count($grid);
    $m = $n * $n;
    
    // Allows movement in four directions: right, down, left, up
    $directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];
    
    $result = array_fill(0, $k, $m + 1);
    
    function backtrack($x, $y, $path, $grid, $k, $directions, $n, &$result) {
        if (count($path) === $k) {
            if ($path < $result) {
                $result = $path;
            }
            return;
        }
        
        foreach ($directions as $direction) {
            $dx = $x + $direction[0];
            $dy = $y + $direction[1];
            
            if ($dx >= 0 && $dx < $n && $dy >= 0 && $dy < $n) {
                $newPath = $path;
                $newPath[] = $grid[$dx][$dy];
                backtrack($dx, $dy, $newPath, $grid, $k, $directions, $n, $result);
            }
        }
    }
    
    // Try starting from each cell in the grid
    for ($i = 0; $i < $n; $i++) {
        for ($j = 0; $j < $n; $j++) {
            backtrack($i, $j, [$grid[$i][$j]], $grid, $k, $directions, $n, $result);
        }
    }
    
    return $result;
}","function candidate(...$args) {
    return minPath(...$args);
}

function test(): void {
    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9)), 3) !== array(1, 2, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1) !== array(1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 2, 3, 4), array(5, 6, 7, 8), array(9, 10, 11, 12), array(13, 14, 15, 16)), 4) !== array(1, 2, 1, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(6, 4, 13, 10), array(5, 7, 12, 1), array(3, 16, 11, 15), array(8, 14, 9, 2)), 7) !== array(1, 10, 1, 10, 1, 10, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(8, 14, 9, 2), array(6, 4, 13, 15), array(5, 7, 1, 12), array(3, 10, 11, 16)), 5) !== array(1, 7, 1, 7, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(11, 8, 7, 2), array(5, 16, 14, 4), array(9, 3, 15, 6), array(12, 13, 10, 1)), 9) !== array(1, 6, 1, 6, 1, 6, 1, 6, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(12, 13, 10, 1), array(9, 3, 15, 6), array(5, 16, 14, 4), array(11, 8, 7, 2)), 12) !== array(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(2, 7, 4), array(3, 1, 5), array(6, 8, 9)), 8) !== array(1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(6, 1, 5), array(3, 8, 9), array(2, 7, 4)), 8) !== array(1, 5, 1, 5, 1, 5, 1, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 2), array(3, 4)), 10) !== array(1, 2, 1, 2, 1, 2, 1, 2, 1, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(array(1, 3), array(3, 2)), 10) !== array(1, 3, 1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_130,uig_Arab,php,"<?php
//مىساللار://تريبوناتچى تەرتىپىنىڭ بىرىنچى n+1 نۇمۇرلىرى.//سىز بىر تەرەپ قىلماقچى بولغان نەرسىمىز تىپى n غا توغرا كېلىدۇ. سىز بىر تەرەپ قىلماقچى بولغان نەرسىمىز تىپى a غا توغرا كېلىدۇ.//= 2 + 3 + 3 = 8 .//ئۈچ (ئۈچ) = ئۈچ (ئۈچ) + ئۈچ (ئۈچ) + ئۈچ (ئۈچ) (4)//ئۈچ (ئۈچ) = ئۈچ//tri(2) = 1 + (2 / 2) = 2 //مەسىلەن: //ئەگەر n بىرجۈپ بولسا، n+1 = n+1 + n+1//ئەگەر n جۈپ بولسا، tri (n) = 1 + n / 2//ئۈچ (ئۈچ) = ئۈچ//تىربوناچى تەرتىپى تۆۋەندىكىدەك قايتىلىشى بىلەن ئىپادىلىنىدۇ: //بىراق بىز بۇنى بىلمەيمىز. بىز بۇنى بىلمىدۇق، لېكىن بىز بۇنى ئېنىق بىلمەيمىز.//فىپوناتچى سىستېمىسىنى ھەممىمىز بىلىمىز، ماتېماتىكا ئالىملىرى ئۇنى چوڭقۇر تەتقىق قىلدى.// >>> tri(3)
// array(1, 3, 2, 8)
function tri($n) {
","function tri($n) {
    $tribonacci = array();
    
    for ($i = 0; $i <= $n; $i++) {
        if ($i == 0) {
            $tribonacci[$i] = 1; // tri(0) should be initialized to 1 or any base case value you want
        } elseif ($i == 1) {
            $tribonacci[$i] = 3; // tri(1)
        } elseif ($i == 2) {
            $tribonacci[$i] = 1 + ($i / 2); // tri(2)
        } elseif ($i % 2 == 0) {
            $tribonacci[$i] = 1 + ($i / 2); // tri(n), if n is even
        } else {
            $tribonacci[$i] = $tribonacci[$i - 1] + $tribonacci[$i - 2] + (isset($tribonacci[$i + 1]) ? $tribonacci[$i + 1] : 3);
            // tri(n), if n is odd, tri(n + 1) is assumed to be 3 if not already calculable
        }
    }
    
    return $tribonacci;
}","function candidate(...$args) {
    return tri(...$args);
}

function test(): void {
    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(""Test failed!""); }
    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(""Test failed!""); }
    if (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(""Test failed!""); }
    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(""Test failed!""); }
    if (candidate(0) !== array(1)) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== array(1, 3)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_131,uig_Arab,php,"<?php
//مەسىلەن: //ئەگەر ھەممە خانىلار جۈپ بولسا 0 نى قايتۇرۇپ بېرىدۇ.//بىر قوشۇمچە پۈتۈن سان n بولسا، بىر قانچە ھەرپنىڭ قوشۇمچە ھاسىلاتىنى قايتۇرىمىز.// >>> digits(1)
// 1
// >>> digits(4)
// 0
// >>> digits(235)
// 15
function digits($n) {
","function digits($n) {
    $product = 1;
    $hasOdd = false;

    while ($n > 0) {
        $digit = $n % 10;
        if ($digit % 2 != 0) {
            $product *= $digit;
            $hasOdd = true;
        }
        $n = intdiv($n, 10);
    }

    return $hasOdd ? $product : 0;
}","function candidate(...$args) {
    return digits(...$args);
}

function test(): void {
    if (candidate(5) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(54) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(120) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(5014) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(98765) !== 315) { throw new Exception(""Test failed!""); }
    if (candidate(5576543) !== 2625) { throw new Exception(""Test failed!""); }
    if (candidate(2468) !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_132,uig_Arab,php,"<?php
//بۇ يەردىكى ئەڭ ئاز دېگەندە بىر دانە ھالقىلىق سۆز بىرىككەن.//ئەگەر ۋە پەقەت بىرلا قېتىمدا توغرا بولغان بىر قاتار قوساقلار بار بولسا، فۇنكسىيە true نى قايتۇرۇشى كېرەك.//پەقەتلا كاتەكچىگە ئىگە بولغان ھەرپلەرنى كىرگۈزگۈچ قىلىپ ئىشلەتكۈچى فۇنكسىيە قۇرۇڭ.// >>> is_nested(""[[]]"")
// true
// >>> is_nested(""[]]]]]]][[[[[]"")
// false
// >>> is_nested(""[][]"")
// false
// >>> is_nested(""[]"")
// false
// >>> is_nested(""[[][]]"")
// true
// >>> is_nested(""[[]][["")
// true
function is_nested($string) {
","function is_nested($string) {
    $stack = [];
    $hasNested = false;
    
    for ($i = 0; $i < strlen($string); $i++) {
        $char = $string[$i];
        if ($char === '[') {
            array_push($stack, '[');
        } elseif ($char === ']') {
            if (!empty($stack)) {
                array_pop($stack);
                if ($i > 0 && $string[$i - 1] === '[') {
                    $hasNested = true;
                }
            } else {
                return false;
            }
        }
    }
    
    return $hasNested;
}","function candidate(...$args) {
    return is_nested(...$args);
}

function test(): void {
    if (candidate(""[[]]"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""[]]]]]]][[[[[]"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[][]"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[]"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[[[[]]]]"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""[]]]]]]]]]]"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[][][[]]"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""[[]"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[]]"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[[]][["") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""[[][]]"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""[[[[[[[["") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""]]]]]]]]"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_133,uig_Arab,php,"<?php
//مىساللار://ھەربىر تۈرنى ئەڭ يۇقىرىقى (ئۈچىنچى) ئورۇنغا تەڭشىگەيسىز.//سىز باياتىن ماتېرىيالدا باياتىن نومۇرنىڭ جەدۋىلىنى قايتۇرىسىز،//.سىز شۇ كودنى يەنە بىر قېتىم ئىشلەتسىڭىز،// >>> lst(array(1.0, 2.0, 3.0))
// 14
// >>> lst(array(1.0, 4.0, 9.0))
// 98
// >>> lst(array(1.0, 3.0, 5.0, 7.0))
// 84
// >>> lst(array(1.4, 4.2, 0.0))
// 29
// >>> lst(array(-2.4, 1.0, 1.0))
// 6
function sum_squares($lst) {
","function sum_squares($lst) {
    $sum = 0;
    foreach ($lst as $number) {
        $ceiledNumber = ceil($number);
        $sum += $ceiledNumber * $ceiledNumber;
    }
    return $sum;
}","function candidate(...$args) {
    return sum_squares(...$args);
}

function test(): void {
    if (candidate(array(1.0, 2.0, 3.0)) !== 14) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 2.0, 3.0)) !== 14) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.0, 3.0, 5.0, 7.0)) !== 84) { throw new Exception(""Test failed!""); }
    if (candidate(array(1.4, 4.2, 0.0)) !== 29) { throw new Exception(""Test failed!""); }
    if (candidate(array(-2.4, 1.0, 1.0)) !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(array(100.0, 1.0, 15.0, 2.0)) !== 10230) { throw new Exception(""Test failed!""); }
    if (candidate(array(10000.0, 10000.0)) !== 200000000) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1.4, 4.6, 6.3)) !== 75) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1.4, 17.9, 18.9, 19.9)) !== 1086) { throw new Exception(""Test failed!""); }
    if (candidate(array(0.0)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1.0)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1.0, 1.0, 0.0)) !== 2) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_134,uig_Arab,php,"<?php
//مىساللار://ئەسكەرتىش: ""word"" بولسا بىر تۈركۈم بوشلۇق بىلەن ئايرىلىپ تۇرىدىغان ھەرپلەر.//بىر سۆزنىڭ قىسمى، ۋە ياكى باشقا سۆزلەرنىڭ ھەممىسى يالغان//بۇ ئەرەبچىدىكى ھەرپلەر تىزىملىكى .بۇ ئەرەبچىدىكى ھەرپلەر تىزىملىكى ئەمەس .//ئەگەر ئاخىرقى ھەرپ  بولسا true دەپ قايتۇرغان فۇنكسىيە قۇرۇڭ .// >>> check_if_last_char_is_a_letter(""apple pie"")
// false
// >>> check_if_last_char_is_a_letter(""apple pi e"")
// true
// >>> check_if_last_char_is_a_letter(""apple pi e "")
// false
// >>> check_if_last_char_is_a_letter("""")
// false
function check_if_last_char_is_a_letter($txt) {
","function check_if_last_char_is_a_letter($txt) {
    // Trim any trailing spaces from the input string
    $trimmedTxt = rtrim($txt);

    // Return false if the trimmed string is empty
    if (empty($trimmedTxt)) {
        return false;
    }

    // Get the last character of the trimmed string
    $lastChar = substr($trimmedTxt, -1);

    // Check if the last character is an alphabetical letter
    if (ctype_alpha($lastChar)) {
        // Split the trimmed string into words
        $words = explode("" "", $trimmedTxt);
        
        // Get the last word
        $lastWord = end($words);
        
        // Check if the last word is a single character and return true or false
        return (strlen($lastWord) === 1);
    }

    return false;
}","function candidate(...$args) {
    return check_if_last_char_is_a_letter(...$args);
}

function test(): void {
    if (candidate(""apple"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""apple pi e"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""eeeee"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""A"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""Pumpkin pie "") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""Pumpkin pie 1"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate("""") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""eeeee e "") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""apple pie"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""apple pi e "") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_135,uig_Arab,php,"<?php
//مىساللار://.ئۈچ خىل قىممەت//بۇنداق ئېلېمېنت يوق بولسا، -1 نى قايتۇر.//ئەگەر  بولسا، بۇ ئېلېمېنتنىڭ چوڭلۇقى ئۇ ئېلېمېنتنىڭ چوڭلۇقىدىن كىچىك ياكى ئوخشاش//بىر تۈرنىڭ ئەڭ چوڭ كۆرسەتكۈچىگە قايتىدىغان فۇنكسىيە قۇرۇپ بىرىمىز// >>> can_arrange(array(1, 2, 4, 3, 5))
// 3
// >>> can_arrange(array(1, 2, 3))
// -1
function can_arrange($arr) {
","function can_arrange($arr) {
    for ($i = count($arr) - 1; $i > 0; $i--) {
        if ($arr[$i] < $arr[$i - 1]) {
            return $i;
        }
    }
    return -1;
}","function candidate(...$args) {
    return can_arrange(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== -1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_136,uig_Arab,php,"<?php
//مىساللار://ئەگەر تولۇق نۆل ياكى تولۇق سەلبىي نۆل بولمىسا، ئۇلارنى نۆل دەپ قايتۇرۇپ بېرىڭ.//.ئۇ بىر جەدۋەل ئىچىدىكى قىستۇرما//ئەڭ چوڭ نۆلگە توغرا كېلىدۇ. b ئەڭ كىچىك نۆلگە توغرا كېلىدۇ.//بىر فۇنكسىيە قۇرۇپ بىر ماتېرىيال (a, b) نى قايتۇرۇپ بىرىمىز، بۇنىڭدا 'a' بولسا // >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))
// array(null, 1)
// >>> largest_smallest_integers(array())
// array(null, null)
// >>> largest_smallest_integers(array(0))
// array(null, null)
function largest_smallest_integers($lst) {
","function largest_smallest_integers($lst) {
    $largest_negative = null;
    $smallest_positive = null;

    foreach ($lst as $num) {
        if ($num < 0 && ($largest_negative === null || $num > $largest_negative)) {
            $largest_negative = $num;
        }
        if ($num > 0 && ($smallest_positive === null || $num < $smallest_positive)) {
            $smallest_positive = $num;
        }
    }

    return array($largest_negative, $smallest_positive);
}","function candidate(...$args) {
    return largest_smallest_integers(...$args);
}

function test(): void {
    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array(null, null)) { throw new Exception(""Test failed!""); }
    if (candidate(array(0)) !== array(null, null)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_137,uig_Arab,php,"<?php
//ئەسكەرتىش: ئەگەر بىر رېئال سان بىر تار شەكلىدە ئىپادىلەنسە، ئۈزۈلۈپ تۇرىدىغان نۇقتا . ياكى ,  بولۇشى مۇمكىن.//قىممەتلەر ئوخشاش بولسا null نى قايتۇر.//.ئۇ چوڭ ئۆزگەرگۈچىنى قايتۇرۇپ بېرىدۇ//ئۇ سىز نى كۆرسىتىپ بېرىدىغان ھەرپلەرنى ئۆز ئىچىگە ئالىدۇ.// >>> compare_one(1, 2.5)
// 2.5
// >>> compare_one(1, ""2,3"")
// ""2,3""
// >>> compare_one(""5,1"", ""6"")
// ""6""
// >>> compare_one(""1"", 1)
// null
function compare_one($a, $b) {
","function compare_one($a, $b) {
    // Function to convert string number with comma to float
    $convertToFloat = function($value) {
        if (is_string($value) && strpos($value, ',') !== false) {
            return floatval(str_replace(',', '.', $value));
        }
        return floatval($value);
    };

    // Convert to float for comparison, keep original for the result type
    $floatA = is_string($a) ? $convertToFloat($a) : floatval($a);
    $floatB = is_string($b) ? $convertToFloat($b) : floatval($b);

    // Compare converted float values
    if ($floatA > $floatB) {
        return $a;
    } elseif ($floatB > $floatA) {
        return $b;
    } else {
        return null;
    }
}","function candidate(...$args) {
    return compare_one(...$args);
}

function test(): void {
    if (candidate(1, 2) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(1, 2.5) !== 2.5) { throw new Exception(""Test failed!""); }
    if (candidate(2, 3) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(5, 6) !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(1, ""2,3"") !== ""2,3"") { throw new Exception(""Test failed!""); }
    if (candidate(""5,1"", ""6"") !== ""6"") { throw new Exception(""Test failed!""); }
    if (candidate(""1"", ""2"") !== ""2"") { throw new Exception(""Test failed!""); }
    if (candidate(""1"", 1) !== null) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_138,uig_Arab,php,"<?php
//مىسال//بۇ ساننى توغرا 4 دانە قوش قوش ساننىڭ قوشۇمچىسى قىلىپ يازغىلى بولىدىغانلىقىنى باھالاپ چىقىڭ .// >>> is_equal_to_sum_even(4)
// false
// >>> is_equal_to_sum_even(6)
// false
// >>> is_equal_to_sum_even(8)
// true
function is_equal_to_sum_even($n) {
","function is_equal_to_sum_even($n) {
    // Check if n is smaller than the smallest sum of 4 even numbers (2+2+2+2 = 8)
    if ($n < 8) {
        return false;
    }

    // Check if n is even, as the sum of even numbers is always even.
    if ($n % 2 != 0) {
        return false;
    }

    // Since we already checked for n < 8, any even number >= 8 can be formed as the sum of four even numbers.
    return true;
}

// Testing the function
var_dump(is_equal_to_sum_even(4)); // false
var_dump(is_equal_to_sum_even(6)); // false
var_dump(is_equal_to_sum_even(8)); // true","function candidate(...$args) {
    return is_equal_to_sum_even(...$args);
}

function test(): void {
    if (candidate(4) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(8) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(11) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(12) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(13) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(16) !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_139,uig_Arab,php,"<?php
//مەسىلەن: //بۇ يەردە n > 0//brazilian_factorial (n) = n! * (n-1)! * (n-2)! * ... * 1! //بىرازىلىيە فاكتورى مۇنداق ئېنىقلىنىدۇ:// >>> special_factorial(4)
// 288
// The function will receive an integer as input and should return the special
// factorial of this integer.
function special_factorial($n) {
","function special_factorial($n) {
    if ($n <= 0) {
        return 1;
    }

    $result = 1;
    for ($i = 1; $i <= $n; $i++) {
        $result *= factorial($i);
    }
    
    return $result;
}

function factorial($num) {
    if ($num == 0 || $num == 1) {
        return 1;
    }
    $fact = 1;
    for ($i = 2; $i <= $num; $i++) {
        $fact *= $i;
    }
    return $fact;
}","function candidate(...$args) {
    return special_factorial(...$args);
}

function test(): void {
    if (candidate(4) !== 288) { throw new Exception(""Test failed!""); }
    if (candidate(5) !== 34560) { throw new Exception(""Test failed!""); }
    if (candidate(7) !== 125411328000) { throw new Exception(""Test failed!""); }
    if (candidate(1) !== 1) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_140,uig_Arab,php,"<?php
//ئاندىن ئارقا-ئارقىدىن كەلگەن بوشلۇقلارنى -  بىلەن ئالماشتۇرۇڭ .//ئەگەر ھەربىر جەدۋەلدە ئىككىدىن ئارتۇق ئارىلىققا ئورۇن قويۇلسا،//بىر تېكىست سىتونى بەرگەندە، ئۇنىڭدىكى ھەربىر بوشلۇقنى ئاستىغا سىزىپ ئۆزگەرتىڭ،// >>> fix_spaces("" Example"")
// ""Example""
// >>> fix_spaces("" Example 1"")
// ""Example_1""
// >>> fix_spaces("" Example 2"")
// ""_Example_2""
// >>> fix_spaces("" Example 3"")
// ""_Example-3""
function fix_spaces($text) {
","function fix_spaces($text) {
    // Trim leading and trailing spaces
    $text = trim($text);
    
    // Replace 3 or more spaces with a single '-'
    $text = preg_replace('/ {3,}/', '-', $text);

    // Replace remaining spaces with underscores
    $text = str_replace(' ', '_', $text);
    
    return $text;
}","function candidate(...$args) {
    return fix_spaces(...$args);
}

function test(): void {
    if (candidate(""Example"") !== ""Example"") { throw new Exception(""Test failed!""); }
    if (candidate(""Mudasir Hanif "") !== ""Mudasir_Hanif_"") { throw new Exception(""Test failed!""); }
    if (candidate(""Yellow Yellow  Dirty  Fellow"") !== ""Yellow_Yellow__Dirty__Fellow"") { throw new Exception(""Test failed!""); }
    if (candidate(""Exa   mple"") !== ""Exa-mple"") { throw new Exception(""Test failed!""); }
    if (candidate(""   Exa 1 2 2 mple"") !== ""-Exa_1_2_2_mple"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_141,uig_Arab,php,"<?php
//مىساللار://.ئۈچىنچى تەرەپتە مۇشۇلارنىڭ بىرى: txt، exe، dll//لاتىن ھەرپلىرى (a-z ۋە A-Z)//.بۇنىڭدىن ئىلگىرىكى ھەرپلەرنىڭ ھەممىسى بىخەتەر، بۇ ھەرپلەرنىڭ ھەممىسى بىخەتەر//- ھۆججەتنىڭ ئاتىدا پەقەت بىرلا نوقتا بار.//- ھۆججەت نامىدا ئۈچتىن ئارتۇق سان ('0'-'9') بولۇشى كېرەك.//چوقۇم ئەمەلگە ئاشىدۇ://ھۆججەتنىڭ ئاتى تۆۋەندىكى شەرتلەرنىڭ ھەممىسى ئىجرا قىلىنغاندىلا ئاندىن ئىجرا بولىدۇ.//ئەگەر ھۆججەتنىڭ ئاتى توغرا بولسا ""شۇنداق"" دەپ قايتۇرۇپ بېرىدۇ، ئەگەر راست بولمىسا ""ياق"" دەپ قايتۇرۇپ بېرىدۇ.//بىر ھۆججەتنىڭ نامىنى ئىپادىلەيدىغان بىر ھەرپنى ئېلىپ،  دېگەن فۇنكسىيەنى قايتۇرىمىز.// >>> file_name_check(""example.txt"")
// ""Yes""
// >>> file_name_check(""1example.dll"")
// ""No""
function file_name_check($file_name) {
","function file_name_check($file_name) {
    // Check if there's exactly one dot
    if (substr_count($file_name, '.') !== 1) {
        return 'No';
    }

    // Split the filename into name and extension
    list($name, $extension) = explode('.', $file_name, 2);

    // Check if the name part is not empty and starts with a letter
    if (empty($name) || !ctype_alpha($name[0])) {
        return 'No';
    }

    // Check if the extension is one of the valid options
    $valid_extensions = ['txt', 'exe', 'dll'];
    if (!in_array($extension, $valid_extensions)) {
        return 'No';
    }

    // Count digits in the name
    $digit_count = preg_match_all('/[0-9]/', $name);
    if ($digit_count > 3) {
        return 'No';
    }
    
    return 'Yes';
}","function candidate(...$args) {
    return file_name_check(...$args);
}

function test(): void {
    if (candidate(""example.txt"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""1example.dll"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""s1sdf3.asd"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""K.dll"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""MY16FILE3.exe"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""His12FILE94.exe"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""_Y.txt"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""?aREYA.exe"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""/this_is_valid.dll"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""this_is_valid.wow"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""this_is_valid.txt"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""this_is_valid.txtexe"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""#this2_i4s_5valid.ten"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""@this1_is6_valid.exe"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""this_is_12valid.6exe4.txt"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""all.exe.txt"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""I563_No.exe"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""Is3youfault.txt"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""no_one#knows.dll"") !== ""Yes"") { throw new Exception(""Test failed!""); }
    if (candidate(""1I563_Yes3.exe"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""I563_Yes3.txtt"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""final..txt"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""final132"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""_f4indsartal132."") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate("".txt"") !== ""No"") { throw new Exception(""Test failed!""); }
    if (candidate(""s."") !== ""No"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_142,uig_Arab,php,"<?php
//مىساللار://فۇنكسىيە 3 ياكى 4 نىڭ كۆپ سانىغا توغرا كەلمەيدىغان ماتېرىياللارنىڭ سانىنى ئۆزگەرتىدۇ.//ئەگەر ئۇنىڭ كۆرسەتكۈچى 4 نىڭ كۆپىيمىسى بولسا، 3 نىڭ كۆپىيمىسى ئەمەس بولسا، بۇ فۇنكسىيە ئۇنى كۇپلىتىدۇ.//بۇ فۇنكسىيە بىر پۈتۈن سانلار تىزىملىكىدىن چىقىدۇ. ئەگەر ئۇنىڭ كۆرسەتكۈچى a بولسا، فۇنكسىيە تىزىملىكتىكى بارلىق سانلارنى قوشۇپ، تولۇق سانلارنى قوشىدۇ.//""  دېدىم .// >>> lst
// array(1, 2, 3)
// >>> lst
// array()
// >>> lst
// array(-1, -5, 2, -1, -5)
function sum_squares($lst) {
","function sum_squares($lst) {
    $n = count($lst);
    $sum = 0;

    for ($i = 0; $i < $n; $i++) {
        if ($i % 3 == 0) {
            $sum += $lst[$i] ** 2;
        } elseif ($i % 4 == 0) {
            $sum += $lst[$i] ** 3;
        } else {
            $sum += $lst[$i];
        }
    }

    return $sum;
}","function candidate(...$args) {
    return sum_squares(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(""Test failed!""); }
    if (candidate(array(0)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(""Test failed!""); }
    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_143,uig_Arab,php,"<?php
//مىسال 1://بۇ سۆزلەرنىڭ تەرتىپى ئەسلىدىكىگە ئوخشىشى كېرەك.//،ئۇزۇنلۇقى بىر قانچە گىرادۇسلۇق//ھەمدە سىز ئەسلىدىكى سۆزلۈكنى ئۆز ئىچىگە ئالغان بىر قىسىم سۆزلەرنى قايتۇرسىڭىز بولىدۇ، //جۈملىدە بىر قىسىم سۆزلەر بار، ئارىدا بوشلۇق بار،//.سىز شۇ كودنى يەنە بىر قېتىم ئىشلەتسىڭىز،// >>> words_in_sentence(""This is a test"")
// ""is""
// Example 2:
// >>> words_in_sentence(""lets go for swimming"")
// ""go for""
// Constraints:
// * 1 <= len(sentence) <= 100
// * sentence contains only letters
function words_in_sentence($sentence) {
","function is_prime($num) {
    if ($num < 2) return false;
    for ($i = 2; $i <= sqrt($num); $i++) {
        if ($num % $i == 0) return false;
    }
    return true;
}

function words_in_sentence($sentence) {
    $words = explode(' ', $sentence);
    $result = [];

    foreach ($words as $word) {
        if (is_prime(strlen($word))) {
            $result[] = $word;
        }
    }
    
    return implode(' ', $result);
}","function candidate(...$args) {
    return words_in_sentence(...$args);
}

function test(): void {
    if (candidate(""This is a test"") !== ""is"") { throw new Exception(""Test failed!""); }
    if (candidate(""lets go for swimming"") !== ""go for"") { throw new Exception(""Test failed!""); }
    if (candidate(""there is no place available here"") !== ""there is no place"") { throw new Exception(""Test failed!""); }
    if (candidate(""Hi I am Hussein"") !== ""Hi am Hussein"") { throw new Exception(""Test failed!""); }
    if (candidate(""go for it"") !== ""go for it"") { throw new Exception(""Test failed!""); }
    if (candidate(""here"") !== """") { throw new Exception(""Test failed!""); }
    if (candidate(""here is"") !== ""is"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_144,uig_Arab,php,"<?php
//سىز x،n نى توغرا بۆلەك دەپ پەرەز قىلالايسىز، ئۇلارغا نىسبەتەن 0 نى قوشۇپ چىقالايسىز.//بۇ يەردە، ھەر ئىككى تەرەپمۇ قوشۇمچە پۈتۈن سانغا توغرا كېلىدۇ.//x ۋە n ھەر ئىككىلىسى جۈملىنىڭ تار نۇسخىسى، تۆۋەندىكى شەكىلدە://x * n. ئەگەر x * n بىر پۈتۈن سانغا تەڭشەلسە ۋە false بولسا، فۇنكسىيە true دەپ قايتۇرۇلىدۇ.//سىزنىڭ ۋەزىپىڭىز بولسا ئىپادىنى ئاددىيلاشتۇرۇش ئۈچۈن بىر فۇنكسىيە ئىشلىتىش .// >>> simplify(""1/5"", ""5/1"")
// true
// >>> simplify(""1/6"", ""2/1"")
// false
// >>> simplify(""7/10"", ""10/2"")
// false
function simplify($x, $n) {
","function simplify($x, $n) {
    list($xNum, $xDen) = explode('/', $x);
    list($nNum, $nDen) = explode('/', $n);

    // Multiply and simplify the expression x * n
    $resultNum = $xNum * $nNum;
    $resultDen = $xDen * $nDen;

    // Check if result is a whole number
    return ($resultNum % $resultDen === 0);
}","function candidate(...$args) {
    return simplify(...$args);
}

function test(): void {
    if (candidate(""1/5"", ""5/1"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""1/6"", ""2/1"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""5/1"", ""3/1"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""7/10"", ""10/2"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""2/10"", ""50/10"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""7/2"", ""4/2"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""11/6"", ""6/1"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""2/3"", ""5/2"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""5/2"", ""3/5"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""2/4"", ""8/4"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""2/4"", ""4/2"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""1/5"", ""5/1"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""1/5"", ""1/5"") !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_145,uig_Arab,php,"<?php
//مەسىلەن: //ئۇلارنى ئەسلىدىكى تىزىملىكتىكى كۆرسەتكۈچ بويىچە رەتلىسەك بولىدۇ.//ئەسكەرتىش: ئەگەر ئوخشاش سانلىق قىممىتى بار تۈرلەر بولسا،//.ئۈچ قاتلانغىنىنىڭ بىرىنىڭ ئۈستىگە بىرىنى قوشۇپ، باراۋەر ھالدا .ئۈچ قاتلانغىنىنىڭ بىرىنىڭ ئۈستىگە بىرىنى قوشۇپ، باراۋەر ھالدا//بىر خىل فۇنكسىيە يېزىپ بىرىڭ ، بۇ فۇنكسىيە بىلەن پۈتۈن سانلار تىزىملىكىنىڭ تەرتىپىنى بېكىتىمىز .// >>> order_by_points(array(1, 11, -1, -11, -12))
// array(-1, -11, 1, -12, 11)
// >>> order_by_points(array())
// array()
function order_by_points($nums) {
","function order_by_points($nums) {
    usort($nums, function($a, $b) use ($nums) {
        $sumOfDigits = function($n) {
            $n = abs($n); // Use absolute value to ignore negative sign
            $sum = 0;
            while ($n > 0) {
                $sum += $n % 10;
                $n = intdiv($n, 10);
            }
            return $sum;
        };
        
        $sumA = $sumOfDigits($a);
        $sumB = $sumOfDigits($b);
        
        if ($sumA === $sumB) {
            // Maintain original order if sums are equal
            return array_search($a, $nums) <=> array_search($b, $nums);
        }
        
        return $sumA <=> $sumB;
    });
    
    return $nums;
}","function candidate(...$args) {
    return order_by_points(...$args);
}

function test(): void {
    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1, -11, 1, -12, 11)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !== array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_146,uig_Arab,php,"<?php
//مەسىلەن: //بىر ساننىڭ بىرىنچى ۋە ئاخىرقى خانىسى جىپسى (1, 3, 5, 7, 9).//ئۇنۋېرسال ئۇچۇر ماتېرىياللىرى توپلىمىدىكى نۆلدىن كۆپ بولغان ھەر ئىككى تۈرنىڭ سانى//بىر ھەرپ يازىمىز ، ئۇ بىر قاتار سانلارنى كىرگۈزۈپ قايتۇرىدۇ .// >>> specialFilter(array(15, -73, 14, -15))
// 1
// >>> specialFilter(array(33, -2, -3, 45, 21, 109))
// 2
function specialFilter($nums) {
","function specialFilter($nums) {
    $count = 0;

    foreach ($nums as $num) {
        if ($num > 10) {
            $absNum = abs($num);
            $firstDigit = intval(substr((string)$absNum, 0, 1));
            $lastDigit = $absNum % 10;

            if (in_array($firstDigit, array(1, 3, 5, 7, 9)) && in_array($lastDigit, array(1, 3, 5, 7, 9))) {
                $count++;
            }
        }
    }

    return $count;
}","function candidate(...$args) {
    return specialFilter(...$args);
}

function test(): void {
    if (candidate(array(5, -2, 1, -5)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(15, -73, 14, -15)) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(array(33, -2, -3, 45, 21, 109)) !== 2) { throw new Exception(""Test failed!""); }
    if (candidate(array(43, -12, 93, 125, 121, 109)) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(array(71, -2, -33, 75, 21, 19)) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(array(1)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array()) !== 0) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_147,uig_Arab,php,"<?php
//مىسال://a[i] + a[j] + a[k] بولسا 3نىڭ ھەسسىلەپ بىرى//a نىڭ ئۈچ قېتىملىق (a[i], a[j], a[k]) سانىنى قايتۇرۇپ بىرىمىز.//ھەربىر i (1 ≤ i ≤ n) نىڭ قىممىتى a[i] = i * i - i + 1 .//سىز بىر قوشۇمچە پۈتۈن سان n نى ئالسىڭىز، سىز بىر پۈتۈن سان جەدۋىلىنى تۈزۈپ چىقىسىز.// >>> get_max_triples(5)
// 1
// Explanation: 
// a = [1, 3, 7, 13, 21]
// The only valid triple is (1, 7, 13).
function get_max_triples($n) {
","function get_max_triples($n) {
    $a = array();
    for ($i = 1; $i <= $n; $i++) {
        $a[$i - 1] = $i * $i - $i + 1;
    }

    $count = 0;
    
    for ($i = 0; $i < $n; $i++) {
        for ($j = $i + 1; $j < $n; $j++) {
            for ($k = $j + 1; $k < $n; $k++) {
                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {
                    $count++;
                }
            }
        }
    }
    
    return $count;
}","function candidate(...$args) {
    return get_max_triples(...$args);
}

function test(): void {
    if (candidate(5) !== 1) { throw new Exception(""Test failed!""); }
    if (candidate(6) !== 4) { throw new Exception(""Test failed!""); }
    if (candidate(10) !== 36) { throw new Exception(""Test failed!""); }
    if (candidate(100) !== 53361) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_148,uig_Arab,php,"<?php
//مىساللار//بۇ يەر شارى خاراكتېرلىك نام ئەمەس.//ئەگەر planet1 ياكى planet2 بولسا فۇنكسىيە بوش بىر ماتېرىيال قايتۇرۇشى كېرەك .//كۈن بىلەن قەسەمكى،//ئۇلار بولسا 1-مەزكۇر يۇلتۇز ۋە 2-مەزكۇر يۇلتۇزنىڭ ئوربىتى ئارىسىدىكى ئوربىتىتلار، ئۇلار تۈر بويىچە رەتلىنىدۇ//بۇ فۇنكسىيە بىر تىزىملىك قايتۇرۇپ بېرىدۇ .//بىر فونكىسىيە يېزىپ بىرىڭ، ئۇ ئىككى پىلانىتنىڭ نامىنى بىرىپ بىرىپ planet1 ۋە planet2 دەپ يېزىپ بىرىڭ.//ئۇران، نېپۇتۇن//بۇ بولسا مېركۇرىي، كېيىنكىسى ۋېنۇس، ئاندىن يەر شارى، مارىس، جۇپېتىر، ساتۇرن...//.بىزنىڭ قۇياش سىستېمىمىزدا سەككىز چوڭ پىلانېتا بار ، يەنى قۇياشقا ئەڭ يېقىن پىلانېتا// >>> bf(""Jupiter"", ""Neptune"")
// array(""Saturn"", ""Uranus"")
// >>> bf(""Earth"", ""Mercury"")
// ""Venus""
// >>> bf(""Mercury"", ""Uranus"")
// array(""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
function bf($planet1, $planet2) {
","function bf($planet1, $planet2) {
    $planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""];

    $index1 = array_search($planet1, $planets);
    $index2 = array_search($planet2, $planets);

    if ($index1 === false || $index2 === false) {
        return [];
    }

    if ($index1 > $index2) {
        $temp = $index1;
        $index1 = $index2;
        $index2 = $temp;
    }

    return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);
}","function candidate(...$args) {
    return bf(...$args);
}

function test(): void {
    if (candidate(""Jupiter"", ""Neptune"") !== array(""Saturn"", ""Uranus"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Earth"", ""Mercury"") !== array(""Venus"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Mercury"", ""Uranus"") !== array(""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Neptune"", ""Venus"") !== array(""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"")) { throw new Exception(""Test failed!""); }
    if (candidate(""Earth"", ""Earth"") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""Mars"", ""Earth"") !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(""Jupiter"", ""Makemake"") !== array()) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_149,uig_Arab,php,"<?php
//مەسىلەن: //سىز ھەممە سۆزلەرنىڭ ئۇزۇنلۇقى ئوخشاش دەپ پەرەز قىلىشىڭىز مۇمكىن//بۇ فۇنكسىيە بىر قاتار تىزىملىكلەرنى رەتلەش تەرتىپى بويىچە قايتۇرىدۇ.//ئەگەر ئىككىلا سۆز ئوخشاش ئۇزۇنلۇقتا بولسا، ھەرپ بويىچە رەتلىسىڭىز بولىدۇ.//بۇ قائىدە بويىچە رەتلەنگەن ماتېرىيالنى قايتۇرۇپ بېرىشى كېرەك.//ھەربىر سۆزنىڭ ئۇزۇنلۇقىغا قاراپ تەرتىپنى يۇقىرىغا سىلىمىز.//ئۇنىڭدا كۆپ خىل ھۆججەتلەر بولۇشى مۇمكىن.//matrix ھەرۋاقىت بىر خىل ھەرپلەر تىزمىسى بولۇپ ھەرۋاقىت بىر خىل سان تىزمىسى بولمايدۇ//ۋە رەتلەنگەن تەرتىپ بىلەن نەتىجە تىزىملىكىنى قايتۇرىدۇ، //ئۇ شۇ ئارقىلىق تار دائىرىسىنى ئۆلچەيدۇ//فۇنكسىيە يېزىش، فۇنكسىيەگە بىر قاتار سىتېرېنگنى پارامېتىر قىلىپ قوشۇش،// >>> list_sort(array(""aa"", ""a"", ""aaa""))
// array(""aa"")
// >>> list_sort(array(""ab"", ""a"", ""aaa"", ""cd""))
// array(""ab"", ""cd"")
function sorted_list_sum($lst) {
","function sorted_list_sum($lst) {
    // Filter out strings with odd lengths
    $filtered = array_filter($lst, function($str) {
        return strlen($str) % 2 == 0;
    });
    
    // Sort the filtered array by length and then alphabetically
    usort($filtered, function($a, $b) {
        $lengthComparison = strlen($a) - strlen($b);
        if ($lengthComparison == 0) {
            return strcmp($a, $b);
        }
        return $lengthComparison;
    });

    return $filtered;
}","function candidate(...$args) {
    return sorted_list_sum(...$args);
}

function test(): void {
    if (candidate(array(""aa"", ""a"", ""aaa"")) !== array(""aa"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""school"", ""AI"", ""asdf"", ""b"")) !== array(""AI"", ""asdf"", ""school"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""d"", ""b"", ""c"", ""a"")) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(""d"", ""dcba"", ""abcd"", ""a"")) !== array(""abcd"", ""dcba"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""AI"", ""ai"", ""au"")) !== array(""AI"", ""ai"", ""au"")) { throw new Exception(""Test failed!""); }
    if (candidate(array(""a"", ""b"", ""b"", ""c"", ""c"", ""a"")) !== array()) { throw new Exception(""Test failed!""); }
    if (candidate(array(""aaaa"", ""bbbb"", ""dd"", ""cc"")) !== array(""cc"", ""dd"", ""aaaa"", ""bbbb"")) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_150,uig_Arab,php,"<?php
//مىساللار://بۇ بىر جۈملىدىن بىرنى ئېلىپ، يەنە بىر جۈملىدىن y نى چىقىرىپ بېرىدۇ.//ئەگەر n بولسا x نىڭ قىممىتىنى قايتۇرۇش كېرەك بولغان ئاددىي پروگرامما// >>> x_or_y(7, 34, 12)
// 34
// >>> x_or_y(15, 8, 5)
// 5
function x_or_y($n, $x, $y) {
","function x_or_y($n, $x, $y) {
    if (is_prime($n)) {
        return $x;
    } else {
        return $y;
    }
}

function is_prime($num) {
    if ($num <= 1) {
        return false;
    }
    if ($num <= 3) {
        return true;
    }
    if ($num % 2 == 0 || $num % 3 == 0) {
        return false;
    }
    for ($i = 5; $i * $i <= $num; $i += 6) {
        if ($num % $i == 0 || $num % ($i + 2) == 0) {
            return false;
        }
    }
    return true;
}","function candidate(...$args) {
    return x_or_y(...$args);
}

function test(): void {
    if (candidate(7, 34, 12) !== 34) { throw new Exception(""Test failed!""); }
    if (candidate(15, 8, 5) !== 5) { throw new Exception(""Test failed!""); }
    if (candidate(3, 33, 5212) !== 33) { throw new Exception(""Test failed!""); }
    if (candidate(1259, 3, 52) !== 3) { throw new Exception(""Test failed!""); }
    if (candidate(7919, -1, 12) !== -1) { throw new Exception(""Test failed!""); }
    if (candidate(3609, 1245, 583) !== 583) { throw new Exception(""Test failed!""); }
    if (candidate(91, 56, 129) !== 129) { throw new Exception(""Test failed!""); }
    if (candidate(6, 34, 1234) !== 1234) { throw new Exception(""Test failed!""); }
    if (candidate(1, 2, 0) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(2, 2, 0) !== 2) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_151,uig_Arab,php,"<?php
//سىلىمنى چەكلىمەيمىز. سىلىمنى چەكلىمەيمىز. سىلكىيمىز، قاتلايمىز.//بىر تۈرگە ئايرىم سانلارنى قوشۇپ، ئۇلارغا ھەر بىر قېتىمدا قوشۇلغان تولۇقلىما جەدۋەللەرنى قايتۇرىمىز.// >>> double_the_difference(array(1, 3, 2, 0))
// 10
// >>> double_the_difference(array(-1, -2, 0))
// 0
// >>> double_the_difference(array(9, -2))
// 81
// >>> double_the_difference(array(0))
// 0
// If the input array is empty, return 0.
function double_the_difference($lst) {
","function double_the_difference($lst) {
    $sum = 0;
    foreach ($lst as $num) {
        if (is_int($num) && $num > 0 && $num % 2 !== 0) {
            $sum += $num * $num;
        }
    }
    return $sum;
}

// Example usage:
// echo double_the_difference(array(1, 3, 2, 0)); // 10
// echo double_the_difference(array(-1, -2, 0)); // 0
// echo double_the_difference(array(9, -2)); // 81
// echo double_the_difference(array(0)); // 0","function candidate(...$args) {
    return double_the_difference(...$args);
}

function test(): void {
    if (candidate(array()) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(5.0, 4.0)) !== 25) { throw new Exception(""Test failed!""); }
    if (candidate(array(0.1, 0.2, 0.3)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-10.0, -20.0, -30.0)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(-1.0, -2.0, 8.0)) !== 0) { throw new Exception(""Test failed!""); }
    if (candidate(array(0.2, 3.0, 5.0)) !== 34) { throw new Exception(""Test failed!""); }
    if (candidate(array(-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0)) !== 165) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_152,uig_Arab,php,"<?php
//مەسىلەن://بۇ قىممەت 0، ئەگەر بۇ قىممەت بولمىسا، بۇ قىممەت بولسا پەرەز بىلەن نەتىجىنىڭ ئوتتۇرىسىدىكى ئېنىق پەرق بولىدۇ.//ھەربىر ئويۇننىڭ قانچىلىك يىراقلىقتا ئىكەنلىكىنى بىلدۈرىدىغان ئوخشاش ئۇزۇنلۇقتىكى بىر ماتېرىيالنى قايتۇرۇپ بېرىدۇ. ئەگەر ئۇلار توغرا ئويلاپ قالسا،//.سىزگە ئىككى پارچە قىممەتلىك خەت بېرىلىدۇ، ھەربىرىگە بىردىن نومۇر ۋە ئىمتاھان نومۇرى بېرىلىدۇ//سىزنىڭ ۋەزىپىڭىز بىر ئادەمنىڭ بىر قانچە قېتىملىق مۇسابىقىنىڭ نەتىجىسىنى توغرا تاپالىغان- تاپالمىغانلىقىنى پەرەز قىلىش.//ئەلۋەتتە ئۇنى بىر قانچە باسقۇچقا بۆلۈپ چىقساق بولىدۇ//.سىز شۇ ۋاقىتتا نېمىنى ئويلاۋاتقانلىقىڭىزنى بىلەلەيسىز//بىز ھەممىمىز بۇ خىل ھېسسىياتنى دائىم ھېس قىلىمىز .// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))
// array(0, 0, 0, 0, 3, 3)
// >>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))
// array(4, 4, 1, 0, 0, 6)
function compare($game, $guess) {
","function compare($game, $guess) {
    $result = array();
    for ($i = 0; $i < count($game); $i++) {
        $result[] = abs($game[$i] - $guess[$i]);
    }
    return $result;
}","function candidate(...$args) {
    return compare(...$args);
}

function test(): void {
    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(""Test failed!""); }
    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_153,uig_Arab,php,"<?php
//مىسال://(ئۇنىڭ كۈچى -1)//""Slices.SERVINGSliCes"" نى قايتۇرۇڭ، چۈنكى ""SERVINGSliCes"" ئەڭ كۈچلۈك كېڭەيتىلگەن سۆز//.ئۇنداق بولسا، بۇ يەردىكى .ئەر كىشىگە .ئەر كىشىگە مۇناسىۋەتلىك .ئىشلارغا ئېھتىياجلىق بولغان//مەسىلەن: ئەگەر سىز بىر ھەرپنىڭ بىر تۈركۈمى ۋە بىر جۈملىدىن بىر ھەرپنى ئىشلەتمەكچى بولسىڭىز .بۇ چاغدا، بىز باشتا ئىشلەتكەن بىر ھەرپنى ئېلىپ باقايلى//ئەڭ ئاۋۋال تىزىمغا ئالىدىغان تۈرنى تاللايمىز.//.ئەگەر سىزدە بىر خىل كۈچكە ئىگە ئىككى ياكى ئۇنىڭدىن ئارتۇق قىسقۇچ بولسا، سىز چوقۇم .//شەكلى: ClassName.StrongestExtensionName. //ئەڭ كۈچلۈك بولغان قىسقۇچنى تېپىپ بۇ قىسقۇچقا سىتون قايتۇرۇڭ .//.ئەركىكىشىنىڭ ئىسمىدا، كۈچ CAP-SM ئارقىلىق ئىپادىلىنىدۇ//.ئەرەبچە ئاتنى چىقىرىپ، كىچىك ھەرپلەرنى SM قىلىپ يېزىپ بېرەلىسەك،//بۇ سۆزنىڭ مەزمۇنى تۆۋەندىكىچە: CAP نى چوڭ ھەرپ سانى دەپ بېكىتىمىز .//.ئۇزۇنلاشتۇرۇش دېتالى ئارقىلىق، سىز بىر قىسىم دەرسلەرنى بىر قىسىم دەرسلەرگە قوشۇپ قاچىلايسىز//سىز بىر ھەرپنىڭ (ئەرپ سىتونى) ۋە بىر يۈرۈش ئىستوننىڭ نامىنى بايقايسىز.// >>> Strongest_Extension(""my_class"", array(""AA"", ""Be"", ""CC""))
// ""my_class.AA""
function Strongest_Extension($class_name, $extensions) {
","function Strongest_Extension($class_name, $extensions) {
    $strongestExtension = '';
    $maxStrength = null;

    foreach ($extensions as $extension) {
        $cap = preg_match_all('/[A-Z]/', $extension);
        $sm = preg_match_all('/[a-z]/', $extension);
        $strength = $cap - $sm;

        if ($maxStrength === null || $strength > $maxStrength) {
            $maxStrength = $strength;
            $strongestExtension = $extension;
        }
    }

    return $class_name . '.' . $strongestExtension;
}","function candidate(...$args) {
    return Strongest_Extension(...$args);
}

function test(): void {
    if (candidate(""Watashi"", array(""tEN"", ""niNE"", ""eIGHt8OKe"")) !== ""Watashi.eIGHt8OKe"") { throw new Exception(""Test failed!""); }
    if (candidate(""Boku123"", array(""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg"")) !== ""Boku123.YEs.WeCaNe"") { throw new Exception(""Test failed!""); }
    if (candidate(""__YESIMHERE"", array(""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321"")) !== ""__YESIMHERE.NuLl__"") { throw new Exception(""Test failed!""); }
    if (candidate(""K"", array(""Ta"", ""TAR"", ""t234An"", ""cosSo"")) !== ""K.TAR"") { throw new Exception(""Test failed!""); }
    if (candidate(""__HAHA"", array(""Tab"", ""123"", ""781345"", ""-_-"")) !== ""__HAHA.123"") { throw new Exception(""Test failed!""); }
    if (candidate(""YameRore"", array(""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-"")) !== ""YameRore.okIWILL123"") { throw new Exception(""Test failed!""); }
    if (candidate(""finNNalLLly"", array(""Die"", ""NowW"", ""Wow"", ""WoW"")) !== ""finNNalLLly.WoW"") { throw new Exception(""Test failed!""); }
    if (candidate(""_"", array(""Bb"", ""91245"")) !== ""_.Bb"") { throw new Exception(""Test failed!""); }
    if (candidate(""Sp"", array(""671235"", ""Bb"")) !== ""Sp.671235"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_154,uig_Arab,php,"<?php
//.سىزگە ئىككى سۆز بېرىلىدۇ، ئەگەر ئىككىنچى سۆز ياكى ھەر بىر ئايلاندۇرۇش بىرىنچى سۆزدىكى تارماق سۆز بولسا بۇ سۆزنى true غا ئۆزگەرتىڭ// >>> cycpattern_check(""abcd"", ""abd"")
// false
// >>> cycpattern_check(""hello"", ""ell"")
// true
// >>> cycpattern_check(""whassup"", ""psus"")
// false
// >>> cycpattern_check(""abab"", ""baa"")
// true
// >>> cycpattern_check(""efef"", ""eeff"")
// false
// >>> cycpattern_check(""himenss"", ""simen"")
// true
function cycpattern_check($a, $b) {
","function cycpattern_check($a, $b) {
    $lenB = strlen($b);
    // Generate all rotations of the second word
    for ($i = 0; $i < $lenB; $i++) {
        $rotation = substr($b, $i) . substr($b, 0, $i);
        if (strpos($a, $rotation) !== false) {
            return true;
        }
    }
    return false;
}","function candidate(...$args) {
    return cycpattern_check(...$args);
}

function test(): void {
    if (candidate(""xyzw"", ""xyw"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""yello"", ""ell"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""whattup"", ""ptut"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""efef"", ""fee"") !== true) { throw new Exception(""Test failed!""); }
    if (candidate(""abab"", ""aabb"") !== false) { throw new Exception(""Test failed!""); }
    if (candidate(""winemtt"", ""tinem"") !== true) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_155,uig_Arab,php,"<?php
//مىسال://بىر پۈتۈن سانغا توغرا كەلگەندە، بىر جۈپ سانلىق قىممەت ۋە بىر جۈپ سانلىق قىممەت بار بىر تىزىملىكنى قايتۇرۇپ بېرىدۇ.// >>> even_odd_count(-12)
// array(1, 1)
// >>> even_odd_count(123)
// array(1, 2)
function even_odd_count($num) {
","function even_odd_count($num) {
    $num = abs($num);
    $evenCount = 0;
    $oddCount = 0;

    while ($num > 0) {
        $digit = $num % 10;
        if ($digit % 2 == 0) {
            $evenCount++;
        } else {
            $oddCount++;
        }
        $num = intval($num / 10);
    }

    return array($evenCount, $oddCount);
}","function candidate(...$args) {
    return even_odd_count(...$args);
}

function test(): void {
    if (candidate(7) !== array(0, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(-78) !== array(1, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(3452) !== array(2, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(346211) !== array(3, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(-345821) !== array(3, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(-2) !== array(1, 0)) { throw new Exception(""Test failed!""); }
    if (candidate(-45347) !== array(2, 3)) { throw new Exception(""Test failed!""); }
    if (candidate(0) !== array(1, 0)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_156,uig_Arab,php,"<?php
//مىساللار://چەكلىمە: 1 <= num <= 1000//.ئۇنى كىچىك خەت قىلىپ يېزىپ قويۇڭ//بىر قوشۇمچە پۈتۈن ساننى بېسىپ، ئۇنىڭ رىم سانلىق قىممىتىنى تار شەكلىدە تېپىپ چىقىڭ، // >>> int_to_mini_roman(19)
// ""xix""
// >>> int_to_mini_roman(152)
// ""clii""
// >>> int_to_mini_roman(426)
// ""cdxxvi""
function int_to_mini_roman($number) {
","function int_to_mini_roman($number) {
    $map = [
        1000 => 'm',
        900 => 'cm',
        500 => 'd',
        400 => 'cd',
        100 => 'c',
        90 => 'xc',
        50 => 'l',
        40 => 'xl',
        10 => 'x',
        9 => 'ix',
        5 => 'v',
        4 => 'iv',
        1 => 'i'
    ];

    $roman = '';
    while ($number > 0) {
        foreach ($map as $val => $symbol) {
            if ($number >= $val) {
                $roman .= $symbol;
                $number -= $val;
                break;
            }
        }
    }

    return $roman;
}","function candidate(...$args) {
    return int_to_mini_roman(...$args);
}

function test(): void {
    if (candidate(19) !== ""xix"") { throw new Exception(""Test failed!""); }
    if (candidate(152) !== ""clii"") { throw new Exception(""Test failed!""); }
    if (candidate(251) !== ""ccli"") { throw new Exception(""Test failed!""); }
    if (candidate(426) !== ""cdxxvi"") { throw new Exception(""Test failed!""); }
    if (candidate(500) !== ""d"") { throw new Exception(""Test failed!""); }
    if (candidate(1) !== ""i"") { throw new Exception(""Test failed!""); }
    if (candidate(4) !== ""iv"") { throw new Exception(""Test failed!""); }
    if (candidate(43) !== ""xliii"") { throw new Exception(""Test failed!""); }
    if (candidate(90) !== ""xc"") { throw new Exception(""Test failed!""); }
    if (candidate(94) !== ""xciv"") { throw new Exception(""Test failed!""); }
    if (candidate(532) !== ""dxxxii"") { throw new Exception(""Test failed!""); }
    if (candidate(900) !== ""cm"") { throw new Exception(""Test failed!""); }
    if (candidate(994) !== ""cmxciv"") { throw new Exception(""Test failed!""); }
    if (candidate(1000) !== ""m"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_157,uig_Arab,php,"<?php
//مىسال://90 گىرادۇس//توغرا بۇلۇڭلۇق ئۈچ بۇلۇڭ بىر بۇلۇڭ توغرا بۇلۇڭلۇق ئۈچ بۇلۇڭ ياكى//بۇ ئىككى تەرەپ توغرا بۇلۇڭلۇق ئۈچ بۇلۇڭلۇق شەكىللىنىدۇ، ئۇنداق بولمىغاندا بۇ خاتا//.ئۈچ قاتلانغىنىغا توغرا كەلسە true نى قايتۇرۇپ بېرىدۇ// >>> right_angle_triangle(3, 4, 5)
// true
// >>> right_angle_triangle(1, 2, 3)
// false
function right_angle_triangle($a, $b, $c) {
","function right_angle_triangle($a, $b, $c) {
    // Sort the sides to make it easier to apply the Pythagorean theorem
    $sides = [$a, $b, $c];
    sort($sides);
    
    // Apply the Pythagorean theorem to check for a right-angled triangle
    return $sides[0] ** 2 + $sides[1] ** 2 === $sides[2] ** 2;
}","function candidate(...$args) {
    return right_angle_triangle(...$args);
}

function test(): void {
    if (candidate(3, 4, 5) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(1, 2, 3) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(10, 6, 8) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(2, 2, 2) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(7, 24, 25) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(10, 5, 7) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(5, 12, 13) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(15, 8, 17) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(48, 55, 73) !== true) { throw new Exception(""Test failed!""); }
    if (candidate(1, 1, 1) !== false) { throw new Exception(""Test failed!""); }
    if (candidate(2, 2, 10) !== false) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_158,uig_Arab,php,"<?php
//ھەرپلەر، سۆزلۈك تەرتىپى بويىچە بىرىنچى بولۇپ كەلگەن ھەرپنى قايتۇر.//.ئەگەر سىز بىر قانچە ھەرپلەرنى تاللىسىڭىز .بۇ ئۇسۇلدا قىلالايدىغان ئەڭ چوڭ ئىش//تىزىملىكتە ھەرخىل سۆزلەر بار. ئەڭ كۆپ سۆزنى قايتۇرۇپ بىرىڭ.//بىر ھەرپ تىزىملىكىنى قوبۇل قىلىدىغان فۇنكسىيەنى يازىمىز.// >>> find_max(array(""name"", ""of"", ""string""))
// ""string""
// >>> find_max(array(""name"", ""enam"", ""game""))
// ""enam""
// >>> find_max(array(""aaaaaaa"", ""bb"", ""cc""))
// ""aaaaaaa""
function find_max($words) {
","function find_max($words) {
    $maxUniqueChars = 0;
    $result = '';
    
    foreach ($words as $word) {
        // Get unique characters count
        $uniqueCharsCount = count(array_unique(str_split($word)));
        
        // Determine if this word has more unique characters or comes first lexicographically
        if ($uniqueCharsCount > $maxUniqueChars || ($uniqueCharsCount === $maxUniqueChars && ($result === '' || strcmp($word, $result) < 0))) {
            $maxUniqueChars = $uniqueCharsCount;
            $result = $word;
        }
    }
    
    return $result;
}","function candidate(...$args) {
    return find_max(...$args);
}

function test(): void {
    if (candidate(array(""name"", ""of"", ""string"")) !== ""string"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""name"", ""enam"", ""game"")) !== ""enam"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""aaaaaaa"", ""bb"", ""cc"")) !== ""aaaaaaa"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""abc"", ""cba"")) !== ""abc"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""play"", ""this"", ""game"", ""of"", ""footbott"")) !== ""footbott"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""we"", ""are"", ""gonna"", ""rock"")) !== ""gonna"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""we"", ""are"", ""a"", ""mad"", ""nation"")) !== ""nation"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""this"", ""is"", ""a"", ""prrk"")) !== ""this"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""b"")) !== ""b"") { throw new Exception(""Test failed!""); }
    if (candidate(array(""play"", ""play"", ""play"")) !== ""play"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_159,uig_Arab,php,"<?php
//مىسال://ئەگەر يېتەرلىك گۆش قالمىغان بولسا، قالغان گۆشنى يېيىۋېلىپ، ئاچ قالىسىز.//تاماقتىن كېيىن قالغان گاجىلارنىمۇ يېيىش كېرەك ] //بىر تال [تاماقتىن كېيىن يېگەن گۇرۇھ سانى] نى قايتۇرۇپ بېرىش كېرەك.//لېكىن ھازىر، بىر كۈنلۈك تاماقنى تولۇقلاش ئۈچۈن، تېخىمۇ كۆپ گاجىۋا يېيىش كېرەك.//سىز ئاچ خەنجەر، سىز مەلۇم ساندىكى گازىرنى يېگەن،// >>> eat(5, 6, 10)
// array(11, 4)
// >>> eat(4, 8, 9)
// array(12, 1)
// >>> eat(1, 10, 10)
// array(11, 0)
// >>> eat(2, 11, 5)
// array(7, 0)
// Variables:
// @number : integer
// the number of carrots that you have eaten.
// @need : integer
// the number of carrots that you need to eat.
// @remaining : integer
// the number of remaining carrots thet exist in stock
// Constrain:
// * 0 <= number <= 1000
// * 0 <= need <= 1000
// * 0 <= remaining <= 1000
// Have fun :)
function eat($number, $need, $remaining) {
","function eat($number, $need, $remaining) {
    $totalEaten = $number + min($need, $remaining);
    $carrotsLeft = max(0, $remaining - $need);
    return array($totalEaten, $carrotsLeft);
}","function candidate(...$args) {
    return eat(...$args);
}

function test(): void {
    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(""Test failed!""); }
    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(""Test failed!""); }
    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(""Test failed!""); }
    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(""Test failed!""); }
    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(""Test failed!""); }
    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_160,uig_Arab,php,"<?php
//مەشغۇلاتچى جەدۋىلىدە ئاز دېگەندە بىر مەشغۇلاتچى بار، مەشغۇلاتچى جەدۋىلىدە ئاز دېگەندە ئىككى مەشغۇلاتچى بار.//ئۇمۇملاشتۇرغۇچى بولسا سىڭدۈرگۈسىز پۈتۈن سانلار تىزىملىكى//ھەرپلەر تىزىملىكىنىڭ ئۇزۇنلۇقى ھەرپلەر تىزىملىكىنىڭ ئۇزۇنلۇقىدىن بىرنى چىقىرىۋەتسە بولىدۇ.//دىققەت://=> نەتىجە = 9//نەتىجە = 2 + 3 * 4 - 5 .//.تارتىپ جەدۋىلى://مەشغۇلاتچى['+'، '*'، '-']//مىسال://(ئۈچ قاتلامدا)//يەر بۆلۈمى (//)//كۆپەيتىش (*)//تارتىش (- )//قوشۇش (+)//ئاساسلىق ئالگېبرا مەشغۇلاتلىرى: //ۋە بۇ ئىپادىنىڭ قىممىتىنى قايتۇرۇپ بېرىدۇ.//ئىككىنچى گۇرۇپپا بولسا سىلىق نۇسخىلار گۇرۇپپىسى، Algebra گۇرۇپپىسىغا بۆلۈنگەن نۇسخىلارنى ئىشلىتىمىز.//ئىككى خىل ماتېرىيال ئوبېراتۇرى ۋە بىرىنجى ماتېرىيالدا جەبرىلىك ھەركەتلەر بارfunction do_algebra($operator, $operand) {
","function do_algebra($operator, $operand) {
    $expression = $operand[0]; // Start with the first operand
    for ($i = 0; $i < count($operator); $i++) {
        $currentOperator = $operator[$i];
        $currentOperand = $operand[$i + 1];
        
        switch ($currentOperator) {
            case '+':
                $expression .= "" + $currentOperand"";
                break;
            case '-':
                $expression .= "" - $currentOperand"";
                break;
            case '*':
                $expression .= "" * $currentOperand"";
                break;
            case '//':
                $expression .= "" // $currentOperand"";
                break;
            case '**':
                $expression .= "" ** $currentOperand"";
                break;
        }
    }

    // Use eval to evaluate the constructed expression
    eval(""\$result = {$expression};"");

    // Return the result
    return $result;
}","function candidate(...$args) {
    return do_algebra(...$args);
}

function test(): void {
    if (candidate(array(""**"", ""*"", ""+""), array(2, 3, 4, 5)) !== 37) { throw new Exception(""Test failed!""); }
    if (candidate(array(""+"", ""*"", ""-""), array(2, 3, 4, 5)) !== 9) { throw new Exception(""Test failed!""); }
    if (candidate(array(""//"", ""*""), array(7, 3, 4)) !== 8) { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_161,uig_Arab,php,"<?php
//مىساللار//بۇ فۇنكسىيە نەتىجە سىتونىنى قايتۇرۇشى كېرەك.//.ئەگەر تۈردە ھەرپلەر بولمىسا، تۈرنى ئۆزگەرتىمىز//ئۇنداقتا، بۇ ئىشنى داۋاملاشتۇرۇڭ.//ئەگەر s[i] ھەرپى بولسا، ئاستىدىكىدىن ئۈستۈنلۈككە ياكى ئايلانمىسىنى ئاستىدىكىدىن ئۈستۈنلۈككە ئايلاندۇرۇڭ،//.سىز شۇ كودنى قايتا قوزغاتسىڭىز بولىدۇ// >>> solve(""1234"")
// ""4321""
// >>> solve(""ab"")
// ""AB""
// >>> solve(""#a@C"")
// ""#A@c""
function solve($s) {
","function solve($s) {
    // Check if the string contains any letter
    if (preg_match('/[a-zA-Z]/', $s)) {
        // Change the case for each character in the string
        $result = '';
        for ($i = 0; $i < strlen($s); $i++) {
            $char = $s[$i];
            if (ctype_alpha($char)) {
                // If the character is a letter, reverse its case
                if (ctype_lower($char)) {
                    $result .= strtoupper($char);
                } else {
                    $result .= strtolower($char);
                }
            } else {
                // Otherwise, keep it as it is
                $result .= $char;
            }
        }
        return $result;
    } else {
        // If the string contains no letters, reverse the string
        return strrev($s);
    }
}","function candidate(...$args) {
    return solve(...$args);
}

function test(): void {
    if (candidate(""AsDf"") !== ""aSdF"") { throw new Exception(""Test failed!""); }
    if (candidate(""1234"") !== ""4321"") { throw new Exception(""Test failed!""); }
    if (candidate(""ab"") !== ""AB"") { throw new Exception(""Test failed!""); }
    if (candidate(""#a@C"") !== ""#A@c"") { throw new Exception(""Test failed!""); }
    if (candidate(""#AsdfW^45"") !== ""#aSDFw^45"") { throw new Exception(""Test failed!""); }
    if (candidate(""#6@2"") !== ""2@6#"") { throw new Exception(""Test failed!""); }
    if (candidate(""#$a^D"") !== ""#$A^d"") { throw new Exception(""Test failed!""); }
    if (candidate(""#ccc"") !== ""#CCC"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_162,uig_Arab,php,"<?php
//ئەگەر 'text' بوش تار بولسا، null نى قايتۇر.//بىر تار 'text' نى بېسىپ، ئۇنىڭ md5 خىش تەڭپۇڭ تارىنى قايتۇرۇڭ.// >>> string_to_md5(""Hello world"")
// ""3e25960a79dbc69b674cd4ec67a72c62""
function string_to_md5($text) {
","function string_to_md5($text) {
    if ($text === '') {
        return null;
    }
    return md5($text);
}","function candidate(...$args) {
    return string_to_md5(...$args);
}

function test(): void {
    if (candidate(""Hello world"") !== ""3e25960a79dbc69b674cd4ec67a72c62"") { throw new Exception(""Test failed!""); }
    if (candidate("""") !== null) { throw new Exception(""Test failed!""); }
    if (candidate(""A B C"") !== ""0ef78513b0cb8cef12743f5aeb35f888"") { throw new Exception(""Test failed!""); }
    if (candidate(""password"") !== ""5f4dcc3b5aa765d61d8327deb882cf99"") { throw new Exception(""Test failed!""); }
}

test();"
HumanEval_163,uig_Arab,php,"<?php
//مەسىلەن: //ۋە b، ئۆرلەش تەرتىپى بويىچە.//a ۋە bدىن ئىبارەت ئىككى خىل قوش تولا نۇمۇرى بار، a بىلەن bنىڭ ئارىسىدىكى ھەر ئىككى خانىنى قايتۇرۇپ بېرىڭ.// >>> generate_integers(2, 8)
// array(2, 4, 6, 8)
// >>> generate_integers(8, 2)
// array(2, 4, 6, 8)
// >>> generate_integers(10, 14)
// array()
function generate_integers($a, $b) {
","function generate_integers($a, $b) {
    $evenNumbers = [];
    $start = min($a, $b);
    $end = max($a, $b);
    for ($i = $start; $i <= $end; $i++) {
        if ($i % 2 == 0) {
            $evenNumbers[] = $i;
        }
    }
    return $evenNumbers;
}","function candidate(...$args) {
    return generate_integers(...$args);
}

function test(): void {
    if (candidate(2, 10) !== array(2, 4, 6, 8)) { throw new Exception(""Test failed!""); }
    if (candidate(10, 2) !== array(2, 4, 6, 8)) { throw new Exception(""Test failed!""); }
    if (candidate(132, 2) !== array(2, 4, 6, 8)) { throw new Exception(""Test failed!""); }
    if (candidate(17, 89) !== array()) { throw new Exception(""Test failed!""); }
}

test();"
