task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,sag_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Bâ wala na yâ ti molongo ti wungo so a mû, ambeni wungo use ayeke nduru na mba ahon ndo so a mû ni.""""""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,sag_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Fango na kua so ayeke mbeni molongo so ayeke na agroupe mingi ti a-parenthèse so a zia ni na popo ti ala. Ye so mo ye ayeke ti kangbi popo ti agroupe so na yâ ti a-parenthèse so ayeke nde na ti kiri na molongo ti ala. A kangbi agroupe ni na yâ ti mba pëpe.""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,sag_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Na mungo mbeni nzoni wungo ti ndo so ayeke tambela na ndo ti li ni, a lingbi ti kangbi yâ ni na yâ ti ambage ti wungo ni kue (kota wungo ni kue ayeke kete ahon wungo so a mû) nga na ambage ti wungo ni kue (mbage so angbâ ayeke kete ahon lakue 1). Kiri na mbage ti wungo ni kue so ayeke na popo ti ambage ti wungo ni kue.""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,sag_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""A yeke fa na mo molongo ti aye so a yeke sara ti zia na nginza na ti zi na nginza na yâ ti mbeni compte ti banque so akomanse na mbeni solde so ayeke zéro. Kua ti mo ayeke ti bâ wala na mbeni ngoi, solde ti compte ni ayeke tï na gbe ti zero, na a yeke nzoni na ngoi ni so a kiri na tënë True. Tongana a kiri na ni pëpe, a lingbi a kiri na tënë Fake.""""""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,sag_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Ti wara molongo ti adesizion so a zia na yâ ni, bâ so a yeke tâ kota ye ti tene mo bâ kota ti aye ni nde nde.""""""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,sag_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Zia mbeni numero so ayeke na popo ti ambage use ti liste ti aye so a zia na yâ ni `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,sag_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Na yâ ti kua so, a yeke wara molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,sag_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filter mbeni liste ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo""""""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,sag_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Ti wara molongo ti a-intègres, kiri na mbeni molongo so a wara na lege ti wungo nga na molongo ti a-intègres kue so ayeke na yâ molongo ni. wungo so ayeke senge alingbi na 0 na molongo so ayeke senge alingbi na 1. >>> wungo_ti molongo ni ([]) (0, 1) >>> wungo_ti molongo ni ([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,sag_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Na lege ti molongo ti a-intègres so a mû ni, zia a fa molongo ti akota ye so a wara ni juska na mbeni ngoi so a mû ni na yâ molongo ni. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,sag_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Gi ti wara kete palindrome so ato nda ni na mbeni molongo so a mû na mo. Algorithme ni ayeke ngangu pëpe: - Gi ti wara kota postfix ti molongo so a mû na mo so ayeke palindrome. - Yôro na nda ti molongo ni peko ti mbeni préfixe ti molongo so aga kozo na suffixe ti palindrome. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('catac') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Tara ti bâ wala molongo ti atënë so a mû ni ayeke mbeni palindrome.""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,sag_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""A yeke wara a-string use a na b so ayeke gi 1 na 0. A yeke wara nga a-string so ayeke tongana string.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,sag_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Na yâ ti molongo ti molongo ti molongo, kiri na molongo so aninga ahon atanga ni kue. Kiri na molongo so aninga ahon atanga ni kue tongana molongo ti molongo ni ayeke oko. Kiri na molongo so aninga ahon atanga ni kue tongana molongo ti molongo ni ayeke senge. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,sag_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Kiringo na mbeni kota mingi so akangbi na popo ti a-entier use a na b >>> kota mingi so akangbi na popo ti a-entier use a ((3, 5) 1 >>> kota mingi so akangbi na popo ti a-entier use a ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,sag_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""A kiri na molongo ti a-préfixe kue ti londo na a-préfixe so ayo ahon atanga ni kue ti si na a-préfixe so ayo ahon atanga ni kue ti yâ ti molongo ti atënë ti yâ ni >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,sag_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Kiringo na mbeni molongo so na yâ ni a yeke wara wungo so a zia nda ni na ndo ti wungo ni na a komanse na 0 juska na n kue. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,sag_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Na peko ti so a mû mbeni molongo ti atênë, gi ti hinga wungo ti agere-mbeti so ayeke nde nde (atênë ni ayeke nde nde) so ayeke na yâ ni >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,sag_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Na yâ ti kode so, a yeke wara mbeni molongo ti acorde so ayeke fa peko ti atënë ti mozoko na mbeni kode ti ASCII. Kua ti mo ayeke ti diko molongo ti acorde so ayeke na alê ti yâ ni so alingbi na alê ti yâ ni mingi. A yeke wara na gbe ni molongo ti atënë so: 'o' - note, lasts beats 'o,so ayeke na yâ ni osio' - half note, lasts two beats' - quater note, lasts one beat >>> parse_music. 'o o.so ayeke na yâ ni o,so ayeke na yâ ni o,so ayeke na yâ ni o .so ayeke na yâ ni o .so ayeke na yâ ni o .so ayeke na yâ ni o.'""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,sag_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Gi ti hinga fani oke a lingbi ti wara mbeni kete molongo ti atënë na yâ ti molongo ti atënë ni so a zia ni na gbe ni.""""""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,sag_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input ayeke mbeni molongo ti adimension so a zia nda ti ndo na popo ni na a yeke na popo ti 'zéro' ti si na 'gumbaya'. Akode so a lingbi ti soro ni ayeke 'zéro', 'oko', 'mbeni', 'ota', 'ozo', 'ngbonga oku', 'ngbonga oku', 'ngbonga omene', 'ngbonga mbasambala', 'ngbonga miombe' na 'ngbonga gumbaya'. A kiri na molongo ni na adimension so a zia ndoni ni na popo ni na ndoni ni >>> sort_numbers (('mbeni ota ota oku') 'mbeni ota oku' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,sag_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Na yâ ti molongo ti wungo so a mû na mo (so ayo ahon use), soro na kiri na ni use so ayeke nduru mingi na mba na kiri na ni na molongo ni (kete wungo, kota wungo). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,sag_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Na peko ti so a mû na mo molongo ti wungo ti aye (so ayeke na alê ti ye use tongaso), sara kua na kode ti sarango na aye ti ga tongana ti so a fa na yâ ti molongo ni, tongaso si kete wungo ti aye ni aga 0 na kota ni aga 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,sag_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,sag_Latn,python,"

def strlen(string: str) -> int:
    """"""Kete ti stren so a mû ni >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,sag_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Ti mbeni wungo so a mû ni, wara kota wungo so akangbi n na lege ti yongo, so ayeke kete ahon n >>> kota_ngbingo ni ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,sag_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Facteur ni oko oko ayeke tongana molongo ti factorize ni kue >>> factorise ni ((8) [2, 2, 2] >>> factorise ni ((25) [5, 5] >>> factorise ni ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,sag_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Na yâ molongo ti a-intègres, zi aye kue so asi fani mingi. Zia molongo ti aye ni angbâ gi tongana ti so a zia na yâ ti mbeti ni. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,sag_Latn,python,"

def flip_case(string: str) -> str:
    """"""Ti mbeni molongo ti atënë, kiri na akete kete mbeti na kota mbeti nga na kota mbeti na kete mbeti. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,sag_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Listi ti a-cord so a zia ni na yâ ti molongo oko >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,sag_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filter mbeni liste ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo""""""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,sag_Latn,python,"

def get_positive(l: list):
    """"""Kiri gi na anzoni wungo na yâ ti molongo ni. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,sag_Latn,python,"

def is_prime(n):
    """"""Kiri na tâ tënë tongana mbeni wungo so a mû ni ayeke kota, na mvene tongana a yeke tongaso pëpe. >>> is_prime(6) Mvene >>> is_prime(101) Tâ >>> is_prime(11) Tâ >>> is_prime(13441) Tâ >>> is_prime(61) Tâ >>> is_prime(4) Mvene >>> is_prime(1) Mvene """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,sag_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs ayeke coefficient ti mbeni polynôme. find_zero wara x tongaso si poly(x) = 0. find_zero akiri gi gi point zéro, même tongana a yeke mingi. Na ndo ni, find_zero amû gi molongo ti xs so ayeke na même wungo ti coefficient nga na coefficient so ayeke zéro pëpe, teti a yeke mû lege na zo ti wara mbeni yorö. >>> round ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""A yeke bâ polynôme so ayeke na coefficient xs na point x. a yeke kiri na xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,sag_Latn,python,"

def sort_third(l: list):
    """"""Fango ye so ayeke mû molongo ti aye so ayeke na yâ ni na a yeke kiri na molongo ti aye so ayeke na yâ ni na lege so a yeke bâ so a lingbi na ni na yâ ti aye so a lingbi ti kangbi yâ ni na ota pëpe, na ngoi so alengo ti aye so a lingbi ti kangbi yâ ni na ota ayeke legeoko na alengo ti aye so alingbi na ni na yâ ti aye so a lingbi ti kangbi yâ ni na ota pëpe, me a leke ni. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,sag_Latn,python,"

def unique(l: list):
    """"""Kiringo na a-élément so a diko ni na molongo na yâ molongo >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,sag_Latn,python,"

def max_element(l: list):
    """"""Kiri na kota ye so ayeke na yâ ti liste ni. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,sag_Latn,python,"

def fizz_buzz(n: int):
    """"""Kiringo na wungo ti fani so chiffre 7 asigigi na yâ ti a-intègres so ayeke na kete ni ahon n so alingbi ti kangbi yâ ni na 11 wala 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,sag_Latn,python,"

def sort_even(l: list):
    """"""Fango ye so ayeke mû molongo ti aye so ayeke na yâ ni na a kiri na molongo ti aye so ayeke na yâ ni na lege so a lingbi na a-indice so ayeke nde nde, na ngoi so alengo ti aye so ayeke na yâ ni ayeke legeoko na alengo ti aye so ayeke na yâ ni, me a leke ni. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,sag_Latn,python,"

def encode_cyclic(s: str):
    """"""ayeke mû tongana encode ti encode na encode_cyclic function. Lo kiri na encode ti encode ni. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""kiri na encoded string na lege ti cycling groups ti acaracteau ota. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,sag_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib akiri n-ème wungo so ayeke mbeni wungo ti Fibonacci na a yeke nga mbeni kozo wungo. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,sag_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triple_sum_to_zero ayeke wara molongo ti a-intègres tongana mbeni ye ti yôro. Lo kiri na Tâ tënë tongana a yeke na alengo ota so ayeke nde nde na yâ molongo so wungo ni ayeke zero, na Ti wataka tongana a yeke tongaso pëpe. >>> triple_sum_to_zero (([1, 3, 5, 0]) Ti wataka >>> triple_sum_to_zero (([1, 3, -2, 1]) Tâ tënë >>> triple_sum_to_zero (([1, 2, 3, 7]) Ti wataka >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) Tâ tënë >>> triple_sum_to_zero [1]) Ti wataka """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,sag_Latn,python,"

def car_race_collision(n: int):
    """"""Tara ti bâ mbeni lege so ayeke mbilimbili na lege ni, so ayo na mbeni lege so ayeke na nda ni pëpe. a-oto n ayeke kpe na mbage ti wali ti gue na mbage ti koli; na oko ngoi ni, ambeni oto nde so ayeke na ni ayeke kpe na mbage ti koli ti gue na mbage ti wali. a-oto ni use so ayeke na yongoro ndo mingi na popo ti ala. a-oto ni kue ayeke tambela na oko vitesse. a tene so a-oto use ayeke tingbi tongana mbeni oto so ayeke gue na mbage ti wali ti gue na mbage ti koli atingbi na mbeni oto so ayeke gue na mbage ti koli ti gue na mbage ti wali. me, a-oto ni ayeke ngangu mingi; tongaso, ala yeke ngbâ ti tambela na lege ti ala tongana ti so ala tingbi pëpe.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,sag_Latn,python,"

def incr_list(l: list):
    """"""Lisoro so a kiri na ni na aye so a kiri na ni na 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,sag_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero ayeke wara molongo ti a-intègres tongana mbeni ye ti yôro. A kiri na Tâ tënë tongana a yeke na alengo use so ayeke nde nde na yâ molongo so wungo ni ayeke zero, na Ti wataka tongana a yeke tongaso pëpe. >>> pairs_sum_to_zero([1, 3, 5, 0]) Ti wataka >>> pairs_sum_to_zero[(1, 3, -2, 1]) Ti wataka >>> pairs_sum_to_zero([1, 2, 3, 7]) Ti wataka >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) Tâ tënë >>> pairs_sum_to_zero[1]) Ti wataka """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,sag_Latn,python,"

def change_base(x: int, base: int):
    """"""Gbian base ti wungo ti x ti ga base. kiri na peko ti so a changé ni awe. wungo ti base ayeke na gbe ti 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,sag_Latn,python,"

def triangle_area(a, h):
    """"""A mû yongo ti mbeni mbage na kota ndo ti kiri ti mbeni triangle. >>> triangle_area{5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,sag_Latn,python,"

def fib4(n: int):
    """"""Fib4 ayeke molongo ti wungo ti azo so ayeke na oko lege na molongo ti Fibbonacci so a fa ni na lege ti: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Soro mbeni kua ti diko na lege ni n-nduru ye ti molongo ti wungo ti azo ti fib4. Sara kua pepe na lege ti kiringo na peko ti ye. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,sag_Latn,python,"

def median(l: list):
    """"""Me ti kiri na ndo ti ye so ayeke na yâ ti molongo ni, a yeke kiri na ndo ti ye so ayeke na yâ ti molongo ni.""""""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,sag_Latn,python,"

def is_palindrome(text: str):
    """"""A yeke bâ wala molongo so a mû ayeke palindrome >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,sag_Latn,python,"

def modp(n: int, p: int):
    """"""Kiri na 2^n modulo p (gi ti hinga wungo ti aye ni). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,sag_Latn,python,"

def encode_shift(s: str):
    """"""ayeke mû tongana encode ti encode_shift tongana encode ti lï na ni. A kiri na encode ti encode ni. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""kiri na encoded string na lege ti yongo ti agere ti mbeti oko oko na 5 na yâ ti agere ti mbeti ti yanga ti Hébreu. """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,sag_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels ayeke mbeni kua so ayeke mû molongo ti atene na ayeke kiri na molongo ti atene so ayeke na atene ni pëpe. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,sag_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Ti kiri na tâ tënë tongana wungo ti azo kue na yâ ti molongo ni ayeke na gbe ti kota ndo ti kua ni. >>> kota ndo ti kua ni ayeke na gbe ti kota ndo ti kua ni (([1, 2, 4, 10], 100) Tâ tënë >>> kota ndo ti kua ni ayeke na gbe ti kota ndo ti kua ni ayeke na gbe ti kota ndo ti kua ni (([1, 20, 4, 10], 5) Ti wataka """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,sag_Latn,python,"

def add(x: int, y: int):
    """"""Kangbi ni Kangbi ni""""""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,sag_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Bâ wala atënë use ayeke na oko agere-mbeti ni. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Tâ tënë >>> same_chars (('abcd', 'dddddddddabc') Tâ tënë >>> same_chars (('dddddddabc', 'abcd') Tâ tënë >>> same_chars (('eabcd', 'dddddddddabc') Ti wataka >>> same_chars ((('abcd', 'dddddddabddce') Ti wataka >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Ti wataka """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,sag_Latn,python,"

def fib(n: int):
    """"""Kiri na n-nduru wungo ti Fibonacci. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,sag_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ayeke mbeni molongo ti ""<"" na "">"". return True tongana bracket oko oko so azi ayeke na bracket so ahunzi. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,sag_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,sag_Latn,python,"

def common(l1: list, l2: list):
    """"""Kiri na mara ti aye so ayeke na yâ ti molongo use so a leke ni. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,sag_Latn,python,"

def largest_prime_factor(n: int):
    """"""Kiri na kota mingi ti akota zo ti n. Zia e tene n > 1 na a yeke kota mingi pëpe. >>> kota mingi_kota ye ti n.""""""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,sag_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n ayeke mbeni kua so ayeke diko wungo ti wungo ti aye ti londo na 1 ti si na n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,sag_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ayeke mbeni molongo ti ""("" na "")"". return True tongana bracket oko oko so azi ayeke na bracket so ahunzi. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing(""""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,sag_Latn,python,"

def derivative(xs: list):
    """"""xs ayeke fä ti coefficient ti mbeni polynôme. xs[0] + xs[1] * x + xs[2] * x^2 + .... Kiri na peko ti dérivé ti polynôme so na oko lege ni. >>> dérivé (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> dérivé ([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,sag_Latn,python,"

def fibfib(n: int):
    """"""Molongo ti wungo ti fib fib ayeke molongo so akpa molongo ti Fibbonacci so a fa ni tongana ti so ge: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).""""""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,sag_Latn,python,"
FIX = """"""Sara kua na mbeni tënë so iri ni ayeke vowels_count ti kiri na wungo ti a-vowel so ayeke na yâ ti mbeni tënë. A-vowel so ayeke na yâ ti tënë so ayeke 'a', 'e', 'i', 'o', 'u'. Ge, 'y' ayeke nga mbeni vowel, me gi tongana a yeke na hunzingo ti tënë ni.""""""

def vowels_count(s):
    """"""Zia ambeni ye nde na yâ ti a-étude ni. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,sag_Latn,python,"
def circular_shift(x, shift):
    """"""Na lege ti cercle, zia a zia na place ni agere ti x, zia na place ni agere ti x na mbage ti koli na lege ti gango na ni na kiri na ye so a wara tongana mbeni molongo ti agere. Tongana a zia na place ni agere ti x na peko ti agere ti x, kiri na agere ti x na peko ti ala. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,sag_Latn,python,"
def digitSum(s):
    """"""Kua Ti sû mbeni kua so ayeke mû mbeni molongo ti atondo tongana ye ti yôro na a kiri na wungo ti akota mbeti ni gï na yâ ti kode ti ASCII. Atapande: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,sag_Latn,python,"
def fruit_distribution(s,n):
    """"""Na yâ ti kua so, a yeke mû na mo mbeni molongo so afa wungo ti alê ti keke na ti aporo so a kangbi ni na yâ ti sakpa ti alê ti keke so sakpa ni ayeke na alê ti keke, aporo nga na alê ti mango. Tongana a mû molongo so afa wungo ti alê ti keke na ti aporo nga na mbeni wungo so afa wungo ti alê ti keke na yâ ti sakpa ni, kiri na wungo ti alê ti keke ti mango na yâ ti sakpa ni.""""""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,sag_Latn,python,"
def pluck(arr):
    """"""Na yâ ti molongo ti molongo so ayeke na ambage ti keke so ayeke na alê ti wungo ti alê ti wungo so ayeke na gbe ni pëpe, kua ti mo ayeke ti soro mbeni oko ti ambage ni na ti kiri na ni. A lingbi ti soro mbeni oko so ayeke na alê ti wungo so ayeke na kete wungo. Tongana a wara ambage ti molongo so ayeke na alê ti wungo so ayeke na kete wungo, kiri na mbeni oko so ayeke na alê ti wungo so ayeke na kete wungo. A lingbi ti kiri na ambage ti molongo so a soro ni na yâ ti molongo, [smallest_value, index] , Tongana alê ti wungo so ayeke na kete wungo pëpe wala molongo so a mû ni ayeke senge, kiri na [].""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,sag_Latn,python,"
def search(lst):
    '''A mu na mo molongo ti a-entier positif so ayeke senge pepe. Kiri na kota ndata ni so ayeke kota ahon zero, na so ayeke na fani mingi ahon wala alingbi na ngele ti ndata ni mveni. Fani mingi ti mbeni ndata ni ayeke wungo ti angoi so a si na yâ molongo ni. Tongana mara ti ngele tongaso ayeke pepe, kiri na -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,sag_Latn,python,"
def strange_sort_list(lst):
    '''Na peko ti so a mû na mo molongo ti a-intègres, mo yeke kiri na molongo ni na lege ti molongo so ayeke nde. A yeke nzoni ti zia molongo ni nde tongana mo to nda ni na kete wungo ni, na pekoni a zia na ndo ni kota wungo ti a-intègres so angbâ, na pekoni a zia ni na ndo ni kete wungo ni.'''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,sag_Latn,python,"
def triangle_area(a, b, c):
    '''Na peko ti so a fa alongo ti ambage ota ti triangle, a kiri na ndo ti triangle ni na a leke ni na ndo ti akete kete ndo use tongana ambage ni ayeke mbeni triangle so ayeke na lege ni. Tongana a yeke tongaso pëpe, a kiri na -1 ambage ota ayeke mbeni triangle so ayeke na lege ni tongana wungo ti ambage use ayeke kota ahon ota ni.'''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,sag_Latn,python,"
def will_it_fly(q,w):
    '''Kiri na True tongana ye ni q ayeke huru, na False tongana a yeke tongaso pëpe. Ye ni q ayeke huru tongana a lingbi na ni (a yeke molongo ti palindrome) na wungo ti aye ni ayeke kete wala alingbi na kota nengo ti ye so a lingbi ti wara w. Tapande: will_it_fly([1, 2], 5) â -> False # 1+2 ayeke kete ahon kota nengo ti ye so a lingbi ti wara, me a lingbi na ni pëpe. will_it_fly([3, 2, 3], 1) â -> False # a lingbi na ni pëpe, me 3+2+3 ayeke kota ahon kota nengo ti ye so a lingbi ti wara. will_it_fly[3, 2, 3], 9) â -> True # 3+23 ayeke kete ahon kota nengo ti ye so a lingbi ti wara, na a lingbi na ni pëpe. will_it_fly([3], â 5) -> True # 3 ayeke kete ahon kota nengo ti ye so a lingbi ti wara, na a lingbi na ni pëpe.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,sag_Latn,python,"
def smallest_change(arr):
    """"""Na peko ti so mo wara mbeni molongo ti a-intéros, gi ti wara wungo ti aye so a lingbi a changé ni si molongo ni aga palindrome. A yeke mbeni molongo so a diko ni gi oko na peko nga na peko. Na yâ ti changement oko, mo lingbi ti changé mbeni ye na mbeni ye nde.""""""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,sag_Latn,python,"
def total_match(lst1, lst2):
    '''Sara mbeni kua so ayeke yeda na molongo ti molongo use na ayeke kiri na molongo so wungo ti agere ti mbeti kue na yâ ni ayeke mingi ahon ti mbeni molongo ni. Tongana molongo use so ayeke na wungo ti agere ti mbeti oko, kiri na kozo molongo ni. Atapande total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4'', '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,sag_Latn,python,"
def is_multiply_prime(a):
    """"""Fa mbeni kua so ayeke kiri na tâ tënë tongana a mû na e wungo ti azo so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota so ayeke na popo ti azo ota.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,sag_Latn,python,"
def is_simple_power(x, n):
    """"""Kua ti mo ayeke ti sû mbeni kua so ayeke kiri na tâ tënë tongana mbeni wungo ti x ayeke mbeni ngangu ti n na ti wataka na ambeni ye nde. x ayeke mbeni ngangu ti n tongana n**int=x Na tapande: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,sag_Latn,python,"
def iscube(a):
    '''Sara mbeni kua so ayeke mû mbeni wungo ti a na ayeke kiri na tâ ni tongana a yeke mbeni wungo ti a. Bâ so mo lingbi ti tene so ye so mo zia na yâ ni ayeke lakue tâ.'''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,sag_Latn,python,"
def hex_key(num):
    """"""A hunda na mo ti sû mbeni kua so ayeke wara na yâ ti molongo ti a-hexadecimal mbeni wungo so ayeke na yâ ti molongo ti a-hexadecimal ni nga a yeke diko wungo ti a-hexadecimal ni so ayeke a-prime (a-prime ayeke mbeni wungo so ayeke kota ahon 1 me so a wara ni na lege ti akete wungo use so ayeke na popo ni pëpe). A-hexadecimal ni ayeke 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. A-prime ni ayeke 2, 3, 5, 7, 11, 13, 17,... Tongaso, a lingbi mo hinga wungo ti a-digit so: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13). Bâ so mo lingbi ti tene so a yeke yôro ni lakue na yâ ti molongo ti a-hexadecimal ni wala a yeke senge, na a yeke zia A, B, C, D, E, F na kota mbeti. Atapande: Ti tene num ""AB"" a lingbi a sigigi na num = 1.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,sag_Latn,python,"
def decimal_to_binary(decimal):
    """"""A yeke fa na mo mbeni wungo na lege ti decimal na kua ti mo ayeke ti kiri na ni na lege ti binary. A lingbi kua ni akiri na mbeni molongo ti agere, na agere oko oko so ayeke fa na mo mbeni wungo ti binary. A yeke kiri na agere oko oko na yâ ti molongo ni '0' wala '1'. A yeke wara ambeni agere use 'db' na tongo nda ni nga na nda ni ti molongo ni. A yeke wara ambeni agere ni so ti mû maboko na mo na yâ ti kode ni. Atapande: decimal_to_binary ((15) # akiri na ""db1111db"" decimal_to_binary32) # akiri na ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,sag_Latn,python,"
def is_happy(s):
    """"""A mu na mo mbeni molongo ti atondo s. Kua ti mo ayeke ti ba wala molongo ni ayeke na ngia wala pepe. Mbeni molongo ti atondo ayeke na ngia tongana yongo ni ayeke 3 na a wara atondo 3 oko oko kue so ayeke nde Nde: is_happy(a) => False is_happy(aa) => False is_happy(abcd) => True is_happy(aabb) => False is_happy(adb) => True is_happy(xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,sag_Latn,python,"
def numerical_letter_grade(grades):
    """"""A yeke ndangba yenga ti semestre ni na wafango mbeti ni ayeke na kua ti mû agere na a-élève. Wafango mbeti ni ayeke leke algorithme ti lo wani ti mû agere na a-élève. Kota kpale ni ayeke so lo girisa kode so lo yeke sara na kua ti mû agere na a-élève ni. Lo mû na mo molongo ti GPA ti ambeni élève na a lingbi mo sû mbeni kua so alingbi ti sigigi na molongo ti agere ti lettre na lege ti tableau so: GPA.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,sag_Latn,python,"
def prime_length(string):
    """"""Sara mbeni kua so ayeke mû mbeni molongo ti atênë na ayeke kiri na tâ tënë tongana yongo ti molongo ni ayeke mbeni kozo wungo wala mvene tongana a yeke tongaso pëpe Atapande prime_length{""Hello"") == True prime_length{""abcdcba"") == True prime_length{""kittens"") == True prime_length{""orange"") == Mvene """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,sag_Latn,python,"
def starts_one_ends(n):
    """"""Na peko ti so a mû na e mbeni nzoni wungo ti azo, kiri na wungo ti azo so ayeke na alê ti lege ni so ayeke na alê ti lege ni so ato nda ni na 1 wala ahunzi na ni.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,sag_Latn,python,"
def solve(N):
    """"""Na peko ti so a mû na mo mbeni nzoni wungo ti N, kiri na wungo ti agere ti mbeti ni na lege ti kode ti bango yâ ti aye use.""""""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,sag_Latn,python,"
def add(lst):
    """"""Na peko ti so a mû na e molongo ti a-intègres so ayeke senge pëpe, zia e zia na ndo ni a-intègres so ayeke na indice so ayeke nde.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,sag_Latn,python,"
def anti_shuffle(s):
    """"""Sara mbeni kua so ayeke mû mbeni molongo ti atënë na a kiri na ni na lege ti mbeni kode so a zia na place ni. A kiri na peko ti atënë ni na lege ti mbeni kode so a zia na place ni mbeni kode so a zia na place ni ambeni tënë na lege ti kode so a zia na place ni na lege ti kode so a zia na place ni.""""""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,sag_Latn,python,"
def get_row(lst, x):
    """"""A yeke mû na mo mbeni data ti dimension use, tongana mbeni liste so a zia ni na ndo ti tere, so akpa matrice, me nde na matrice, molongo oko oko alingbi ti duti na molongo nde nde ti a-colonne. Na mungo lst, na integer x, gi a-integer x na yâ ti molongo ni, na kiri na molongo ti tuples, [(x1, y1), (x2, y2) ...] tongaso si molongo oko oko ayeke coordinate - (molongo, a-colonne), so ato nda ni na 0.""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,sag_Latn,python,"
def sort_array(array):
    """"""Na peko ti so mo wara mbeni molongo ti a-intègres so ayeke na lege ni pëpe, kiri na mbeni copie ti molongo ni so na peko ti so mo leke ni, mo yeke leke molongo ni na lege ti guengo na nduzu tongana wungo ti ala ayeke nde nde, wala mo yeke leke ni na lege ti guengo na li ni tongana wungo ti ala ayeke même.""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,sag_Latn,python,"
def encrypt(s):
    """"""A lingbi a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo ti mbeni ye so a zia na ndo nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde nde""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,sag_Latn,python,"
def next_smallest(lst):
    """"""A mu na mo molongo ti a-intérieur. Mo lingbi ti sû mbeni kua so ayeke next_smallest (() so ayeke kiri na use molongo ti akete kete ye na yâ molongo ni.""""""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,sag_Latn,python,"
def is_bored(S):
    """"""A yeke fa na mo molongo ti atënë, na kua ti mo ayeke ti diko wungo ti atënë so a sara na mo ti tene mo sara na bê ti mo kue. Tënë so a sara na bê ti mo kue ayeke mbeni tënë so ato nda ni na tënë ""I"". A zia mbeni '.', '?' wala '!' na popo ti atënë ni.""""""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,sag_Latn,python,"
def any_int(x, y, z):
    '''Sara mbeni kua so ayeke mû na zo wungo ti aye ota. Lo yeke kiri na tâ tënë tongana mbeni oko ti wungo ni ayeke wungo ti ambeni use ni, na wungo ni kue ayeke wungo ti aye kue. Lo yeke kiri na mvene na ambeni ye nde. Atapande any_int{5, 2, 7} â -> True any_int{3, 2, 2} â -> False any_int{3, -2, 1) â -> True any_int{3.6, -2.2, 2) â -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,sag_Latn,python,"
def encode(message):
    """"""Sara mbeni kua so ayeke mû mbeni tokua, na ayeke sû kode ni na mbeni lege so ayeke changé agere ti mbeti ni kue, nga ayeke zia agere ti mbeti so ayeke na gbe ti go ti mbeti ni na place ti agere ti mbeti so ayeke na kozo ndo use na peko ti go ti mbeti ni so na yâ ti a-alphabet ti yanga ti Anglais.""""""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,sag_Latn,python,"

def skjkasdkd(lst):
    """"""A mû na mo molongo ti a-intègres. A lingbi mo wara kota kota kota valeur ni na mo kiri na wungo ti alê ti ndo ni. Atapande: Teti lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] a lingbi ti wara 10 Teti lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] a lingbi ti wara 25 Teti lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] a lingbi ti wara 13 Teti lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] a lingbi ti wara 11 Teti lst = [0,81,12,31,21] a lingbi ti wara 3 Teti lst = [0,1,8,1,2,7] a lingbi ti wara 7 Teti lst = [1,1,8,1,2,7] a lingbi ti wara 7 Teti lst = [1,1,8,1,2,7] a lingbi ti wara 7 Teti lst = [1,1,2,2,2,1] a lingbi ti wara 7 Teti lst = [1,8,2,2,1] a lingbi ti wara 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,sag_Latn,python,"
def check_dict_case(dict):
    """"""Na ndo ti mbeni bakari, kiri na Tâ tënë tongana a-toile ni kue ayeke acircle na akete lettre wala acircle ni kue ayeke acircle na akota lettre, me kiri na Ti wataka. A lingbi kua ni akiri na Ti wataka tongana bakari ni ayeke senge. Atapande: check_dict_case{""a"":""apple"", ""b"":""banana""}) alingbi ti kiri na Tâ tënë. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) alingbi ti kiri na Ti wataka. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) alingbi ti kiri na Ti wataka. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) A lingbi ti kiri na Tâ tënë.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,sag_Latn,python,"
def count_up_to(n):
    """"""Sara kua na mbeni kua so ayeke mû mbeni wungo ti aye so ayeke na gbe ni pëpe na ayeke kiri na mbeni molongo ti akozo wungo ti aye so ayeke akota wungo so ayeke kete na n. Na tapande: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,sag_Latn,python,"
def multiply(a, b):
    """"""Sara kua na mbeni kode so ayeke mû alê ti wungo use ti kiri na ni na lege ti wungo ti alê ti wungo ti ala so ayeke na yâ ti mbeni ye.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,sag_Latn,python,"
def count_upper(s):
    """"""Na tapande: count_upper (('aBCdEf') akiri 1 count_upper (('abcdefg') akiri 0 count_upper (('dBBE') akiri 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,sag_Latn,python,"
def closest_integer(value):
    '''Sara mbeni kua so ayeke mû mbeni valeur (tënë ti yâ ni) so ayeke fä ti mbeni wungo na ayeke kiri na mbeni wungo so ayeke nduru na ni. Tongana wungo ni ayeke nduru na wungo use, kiri na ni na zero. Atapande >>> ndulu na wungo ni (((""10"") 10 >>> ndulu na wungo ni (((""15.3"") 15 Bâ: Ti kiri na ni na zero aye ti tene so tongana wungo ni ayeke nduru na wungo ni, a lingbi mo kiri na ni na wungo so ayeke yongoro na wungo ni.'''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,sag_Latn,python,"
def make_a_pile(n):
    """"""Na peko ti so a mu na mo mbeni nzoni wungo ti aye so ayeke n, a lingbi mo leke mbeni li ti tênë so wungo ni ayeke n. Kozo li ti tênë ni ayeke n. Wungo ti tênë so ayeke na yâ ti li ti tênë so aga na pekoni ayeke: - na peko ti wungo ti tênë so ayeke nde tongana n ayeke nde. - na peko ti wungo ti tênë so ayeke même tongana n ayeke même. Kiri na wungo ti tênë so ayeke na yâ ti li ti tênë oko oko na yâ ti molongo, na ndo so ye so ayeke na ndoni i ayeke fä ti wungo ti tênë so ayeke na yâ ti li ti tênë ni (i+1).""""""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,sag_Latn,python,"
def words_string(s):
    """"""A yeke mu na mo mbeni molongo ti atënë so akangbi na lege ti comma wala a-espaces. Kua ti mo ayeke ti kangbi molongo ni na yâ ti atënë na ti kiri na molongo ti atënë ni.""""""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,sag_Latn,python,"
def choose_num(x, y):
    """"""Fango ye so ayeke mû na lo wungo ti azo use so ayeke nzoni x na y na lo yeke kiri na kota wungo ti azo so ayeke même na yâ ti ndo [x, y] kue. Tongana mara ti wungo tongaso ayeke dä pëpe, a lingbi a kiri na -1.""""""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,sag_Latn,python,"
def rounded_avg(n, m):
    """"""A mu na mo a-intérieur ti nzoni use n na m, na kua ti mo ayeke ti diko katikati ti a-intérieur ti londo na n ti si na m (so andu n na m).""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,sag_Latn,python,"
def unique_digits(x):
    """"""Na peko ti so a mû na mo molongo ti a-entier so ayeke nzoni x, kiri na molongo ti aye kue so ayeke na même chiffre oko pëpe. Bâ: A lingbi a kiri na molongo ni na molongo so ayeke gue na li ni.""""""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,sag_Latn,python,"
def by_length(arr):
    """"""Na tapande: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sortie arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> sortie arr -> [8, 5, 4, 3, 2, 2, 1, 1] retourne [""Octo"", ""Quatre"", ""Trois"", ""Deux"", ""Deux"", ""Un""] Tongana tableau ni ayeke senge, kiri na mbeni numéro so ayeke senge: arr = [] retourne [] Si tableau ni ayeke na mbeni wungo ti agene, zia ni: arr = [1, 1 , 1 - 55] -> sortie arr -> [1, 1 - 55] -> sortie arr -> [1, 1 - 1], arr -> [1, 1 - 55] -> reverse arr -> [5 - 1], retourne ['One' 1] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,sag_Latn,python,"
def f(n):
    """"""E yeke wara na yâ ti article so mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na pekoni na mbeni tënë so a kiri na mbeni tënë so a kiri na mbeni tënë so a kiri na mbeni tënë so a kiri na mbeni tënë so a kiri na mbeni tënë so a kiri na mbeni tënë so a kiri na mbeni tënë so a kiri na mbeni tënë so a kiri na mbeni tënë so a kiri na mbeni tënë so a kiri na mbeni tënë so a kiri na mbeni tënë na mbeni tënë so a kiri na mbeni tënë na mbeni tënë so a kiri na mbeni tënë na mbeni tënë so a kiri na mbeni ye so a kiri na mbeni ye so a kiri na mbeni ye so a kiri na mbeni ye so a kiri na mbeni ye so a kiri na mbeni ye so a kiri na mbeni so a kiri na mbeni so a kiri na mbeni so a kiri na mbeni so a kiri na mbeni so a kiri na mbeni so a kiri na mbeni so a kiri na so a kiri na so a kiri na so a kiri na so a kiri na so a kiri na so a so a so a so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so so""""""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,sag_Latn,python,"
def even_odd_palindrome(n):
    """"""Na peko ti so a mû na mo mbeni nzoni wungo ti azo n, kiri na mbeni molongo so ayeke na wungo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti azo so ayeke na yâ ti molongo ti azo so ayeke na yâ ti azo so ayeke na yâ ti molongo ti azo so.""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,sag_Latn,python,"
def count_nums(arr):
    """"""Soro mbeni kua so iri ni ayeke count_nums so ayeke mû mbeni molongo ti a-intègres na ayeke kiri na wungo ti aye so wungo ti agere ni ayeke na ndo ni ayeke 0. Tongana mbeni wungo ayeke sioni, kozo agere ni ayeke duti sioni: na tapande, -123 ayeke na agere ni ayeke -1, 2 na 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,sag_Latn,python,"
def move_one_ball(arr):
    """"""E yeke na mbeni molongo ti 'arr' ti N integers arr[1], arr[2], ..., arr[N].A yeke fa na lege ti ndâtënë ni. Kua ti mo ayeke ti bâ wala a yeke ngangu ti wara molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti mol""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,sag_Latn,python,"
def exchange(lst1, lst2):
    """"""Na yâ ti kpale so, mo yeke sara mbeni kua so ayeke mû molongo ti wungo use, na a yeke bâ wala a yeke ngangu ti changé molongo ti aye na popo ti ala ti tene molongo ti wungo ni aduti gi molongo ti wungo so ayeke na lege ni. A yeke na mbeni katikati pëpe na ndo wungo ti aye so a lingbi ti changé na popo ti molongo ti wungo 1 na ti molongo ti wungo 2. Tongana a yeke ngangu ti changé molongo ti aye na popo ti molongo ti wungo 1 na ti molongo ti wungo 2 ti tene molongo ti wungo 1 kue aduti na lege ni, kiri na ""ÊN. Tongana a yeke ngangu pëpe, kiri na ""ÊNÊ"". Na tapande: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""ÊNÊ"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""ÊNÊ"" A bâ so molongo ti aye so a zia na yâ ni ayeke duti ande senge pëpe. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,sag_Latn,python,"
def histogram(test):
    """"""Na peko ti so a mû na mo mbeni molongo ti agere ti mbeti so a kangbi yâ ni na akete kete mbeti, kiri na mbeni bakari ti agere ti mbeti so a kiri na ni fani mingi na so a diko wungo ti agere ni so alingbi na ni. Tongana agere ti mbeti ni ayeke gi oko, kiri na ala kue.""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,sag_Latn,python,"
def reverse_delete(s,c):
    """"""A mu na e molongo ti molongo use s na c, a lingbi mo zi a-caractère kue na yâ ti s so alingbi na mbeni molongo ti molongo na c na pekoni mo bâ wala molongo ti molongo ni so aga na peko ayeke palindrome. A iri molongo ni palindrome tongana a diko ni na peko legeoko tongana a diko ni na gbele. A lingbi mo kiri na molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti molongo ti mol""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,sag_Latn,python,"
def odd_count(lst):
    """"""Na peko ti so a mû na mo molongo ti a-string, so molongo oko oko ayeke gi na adigi, kiri na mbeni molongo. A lingbi elemene oko oko i ti ye so a sigigi na ni aduti ""nombre ti adigi so ayeke nde na yâ ti molongo i ti ye so a yôro ni na yâ ni"". na ndo so a lingbi a zia adigi i kue na place ti adigi so ayeke nde na yâ ti i'th ti ye so a yôro ni na yâ ni. >>> odd_count['1234567']) [""nombre ti adigi so ayeke nde na 4n na str4ng 4 ti 4nput.""] >>> odd_count['3',""111111""]) [""nombre ti adigi so ayeke nde na 1n na str1ng 1 ti 1nput."", ""nombre ti adigi so ayeke nde na 8n na str8ng 8 ti 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,sag_Latn,python,"
def minSubArraySum(nums):
    """"""Na peko ti so a mû na mo molongo ti a-intègres n, wara kete wungo ti molongo ti a-intègres so ayeke senge pëpe.""""""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,sag_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""A mû na mo mbeni grille ti adû ti ngu so ayeke na forme ti rectangle. Ligne oko oko aye ti sara tënë ti mbeni dungu oko, na 1 oko oko na yâ ti molongo ni aye ti sara tënë ti mbeni ye oko ti ngu. Dungu oko oko ayeke na mbeni dû so alingbi na ni so a lingbi ti sara kua na ni ti gboto ngu na yâ ni, na adû ni kue ayeke na ngangu ti kpengo na ngu oko. Kua ti mo ayeke ti sara kua na dû ni ti zi yâ ti adû ni. Fa wungo ti angoi so mo yeke na bezoin ti zi yâ ti adû ni.""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,sag_Latn,python,"
def sort_array(arr):
    """"""Na yâ ti Kata so, a lingbi mo soro molongo ti a-intègres so ayeke na lege ni pëpe na lege ti wungo ti ala na yâ ti molongo ti ala so ayeke gue na li ni.""""""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,sag_Latn,python,"
def select_words(s, n):
    """"""Na peko ti so mo wara mbeni molongo ti atambela na mbeni wungo ti aye so ayeke na lege ni n, a hunda na mo ti sara mbeni kua so ayeke kiri na molongo ti atënë kue ti molongo ti atambela so na yâ ni a yeke wara gi a-consonant n, tongaso si atënë so asigigi na yâ ti molongo ti atambela ni s. Tongana molongo ti atambela ni s ayeke senge, a lingbi kua ni akiri na molongo so ayeke senge. Bâ: mo lingbi ti tene so molongo ti atambela ni ayeke na agere-mbeti nga na andia so ayeke na popo ni. Atapande: select_words (""Marie ayeke na kete ngasangbaga"", 4) ==> [""kete""] select_words (""Marie ayeke na kete ngasangbaga"", 3) ==> [""Marie"", ""ngasangbaga""] select_words"" (ndali ti kete ndo so ayeke senge senge), 2) ==> [] select_words (""Bonjo"", 4) ==> [""dunie""] select_words (""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,sag_Latn,python,"
def get_closest_vowel(word):
    """"""A mû na mo mbeni tënë. Kua ti mo ayeke ti wara oko oko ti agere-mbeti so ayeke nduru na popo ti agere-mbeti use so ayeke na mbage ti koli ti tënë ni (so a zia ni na kota mbeti). A diko agere-mbeti so ayeke na tongo nda ni nga na nda ni pëpe. Tongana mo wara mbeni agere-mbeti so alingbi na aye so a fa na nduzu ge pëpe, kiri na mbeni ye so ayeke senge. Mo lingbi ti tene so agere-mbeti so a mû na mo ayeke gi agere-mbeti ti Anglais.""""""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,sag_Latn,python,"
def match_parens(lst):
    '''A mu na mo molongo ti molongo use, molongo use so ayeke na a-parenthèse so azi na a-parenthèse so akanga. Kua ti mo ayeke ti bâ wala a lingbi ti bungbi molongo use so na yâ ti mbeni molongo, si molongo so aga na pekoni ayeke duti nzoni. A bâ mbeni molongo S tongana nzoni gi tongana a-parenthèse kue na yâ ti S ayeke na yâ ti nzoni lege. Na tapande: molongo '((()) ' ayeke nzoni, me molongo '()) ' ayeke nzoni pëpe. Kiri na 'En' tongana lege ayeke dä ti sara mbeni nzoni molongo, na kiri na 'Ên-ën' tongana lege ni ayeke dä pëpe. Atapande: match_parens[('() ', ') ']) == 'En' match_parens[(') ', ') ']) == 'Ên-ën' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,sag_Latn,python,"
def maximum(arr, k):
    """"""Na peko ti so a mû na mo mbeni molongo ti a-intègres arr na mbeni nzoni ndata k, kiri na mbeni molongo so a leke ni na yâ ni na ayo k na wungo ti azo so ahon na yâ ti molongo ni.""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,sag_Latn,python,"
def solution(lst):
    """"""Na peko ti so a mû na mo molongo ti a-intègres so ayeke senge pëpe, kiri na wungo ti a-élément so ayeke na place oko.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,sag_Latn,python,"
def add_elements(arr, k):
    """"""Na peko ti so a mû na mo mbeni molongo ti a-intéros so ayeke senge pëpe arr na mbeni intérot k, kiri na wungo ti a-élément so ayeke na adigier use na popo ti a-élément k ti arr.""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,sag_Latn,python,"
def get_odd_collatz(n):
    """"""Na peko ti so a mu na mo mbeni nzoni wungo ti azo, kiri na mbeni molongo so a soro ni na lege ti molongo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo. Collatz conjecture ayeke mbeni molongo ti azo so a soro ala na lege ti molongo ti azo so a soro ala na lege ti molongo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na wungo ti azo so ayeke na popo ti azo so ayeke na popo ti azo so ayeke na popo ti azo so ayeke na wungo ti azo so ayeke na popo ti azo so ayeke na popo ti azo so ayeke na popo ti azo so ayeke na popo ti azo so ayeke na popo ti ala.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,sag_Latn,python,"
def valid_date(date):
    """"""Mo lingbi ti sû mbeni kua so ayeke sara si mbeni lango so a mû na zo aga tâ tënë tongana lango ni ayeke tâ tënë, me tongana a yeke tâ tënë pëpe, a yeke kiri na tënë ti mvene. A yeke kiri na tënë ti tâ tënë tongana aye so ge ayeke na lege ni: 1. Lâ ni ayeke senge pëpe. 2. Lango ni ayeke na yâ ti nze 1,3,5,7,8,10,12 pëpe wala ahon 31 pëpe. Nga lango ni ayeke na yâ ti nze 4,6,9,11 pëpe wala ahon 30 pëpe. Nga lango ni ayeke na yâ ti nze 2 pëpe wala ahon 29.""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,sag_Latn,python,"
def split_words(txt):
    '''Na peko ti so a mû na mo molongo ti atënë, kiri na molongo ti atënë so a kangbi yâ ni na ndo ti akete kete ndo, tongana akete kete ndo ayeke dä pëpe na yâ ti tënë ni, a lingbi mo kangbi yâ ni na ndo ti akete kete ndo ',' tongana akete kete ndo ayeke dä pëpe, a lingbi mo kiri na wungo ti akete kete mbeti so a kangbi yâ ni na yâ ti molongo ti akete kete ndo na yâ ti a-alphabet, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 Atapande ti kangbi yâ ti atënë (a) â -> [""Bonjour"", ""globe!""] kangbi yâ ti atënë (a) â -> [""Bonjour"", ""globe!""] kangbi yâ ti atënë (a) â -> [""Bonjour"", ""globe!""] kangbi yâ ti atënë (a) â_ (abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,sag_Latn,python,"
def is_sorted(lst):
    '''Na peko ti so a mû na mo molongo ti a-nombre, kiri na ni atâa a leke ni na molongo so ayeke gue na li ni wala pëpe. Tongana molongo ni ayeke na a-nombre so ayeke oko fani use, kiri na ni na Zo ti wataka. Zia e bâ so a yeke wara pëpe awango ti sioni na a yeke gi awango ti mbilimbili.'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,sag_Latn,python,"
def intersection(interval1, interval2):
    """"""A mu na mo intervalle use, na ndo so intervalle oko oko ayeke mbeni use ti a-intègres. Na tapande, intervalle = (tongo nda ni, nda ni) = (1, 2). Intervalle so a mu ayeke na yanga ni so aye ti tene intervalle (tongo nda ni, nda ni) andu tongo nda ni nga na nda ni. Teti intervalle oko oko so a mu, a tene so tongo nda ni ayeke kete wala alingbi na nda ni. Kusala ti mo ayeke ti hinga wala yongo ti intervalle use so ayeke mbeni kota wungo.""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,sag_Latn,python,"
def prod_signs(arr):
    """"""A mu na mo molongo ti a-intérieur na a lingbi mo kiri na wungo ti akota wungo ti a-intérieur so a pika ni na lege ti molongo ti a-signe ti wungo oko oko kue na yâ molongo ni, so a fa ni na lege ti 1, -1 wala 0.""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,sag_Latn,python,"
def minPath(grid, k):
    """"""Na yâ ti mbeni grille so a yeke wara na yâ ni molongo N na a-colonne N (N >= 2) na mbeni kota wungo ti alê ti kobe k, a yeke wara na yâ ti cellule oko oko ti grille ni mbeni ngele. A yeke nzoni ti wara kete wungo ti alê ti kobe k na yâ ti grille ni. Mo lingbi ti to nda ni na yâ ti cellule oko oko, na na yâ ti ye oko oko so mo yeke sara, mo lingbi ti gue na yâ ti cellule so ayeke na tere ti mo, wala mo lingbi ti gue na yâ ti cellule so ayeke na tere ti mo. Bâ so mbeni lege so ayo k aye ti tene mo gue na yâ ti cellule k (so ayeke nde nde pëpe). Mo lingbi ti sigigi na yâ ti grille ni pëpe. A lingbi ti bâ mbeni lege A (so ayo k) tongana mbeni lege so ayo k ahon mbeni lege B (so ayo k) pëpe tongana na peko ti so e sara molongo ti alê ti kobe so a-ordiné ni na yâ ti cellule so A na B ayeke hon na yâ ni (e iri ni lA_nd_nd_nd_nd_nd na lA_nd_nd), lege so alê ti kobe ni ayeke na lege ti dikongo ni ayeke kete ahon ti lA_nd_nd_nd_nd_nd, na lege so ayeke kete ahon ti lA_nd_nd_nd_nd_nd_nd, na lege so ayeke kete ahon ti lA = l_nd_nd_nd_nd_nd_nd_nd_nd, na lege so ayeke kete ahon ti yô, na lege so ayeke kete na yâ ti alê ti cel ni, na lege ni, na mbeni indice ti alê ti alê ti kobe ni ayeke na yâ ti kobe ni ayeke k, na yâ ti mo, na yâ ti alê ti alê ti kobe ni ayeke na yâ ti alê ti kobe ni, na yâ ti mo, na yâ ti mo, mo yeke mo yeke mo yeke mo yeke mo yeke mo yeke mo yeke wara ni, mo lingbi ti gue na mo yeke mo yeke mo yeke wara ni, mo yeke mo yeke wara ni mo yeke mo yeke wara ni mo yeke wara ti gue na mo yeke mo yeke mo yeke mo yeke mo yeke mo yeke mo yeke mo yeke mo yeke kiri na mo yeke mo yeke mo yeke kiri na mo yeke mo yeke kiri na mo yeke mo""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,sag_Latn,python,"
def tri(n):
    """"""Azo kue ahinga molongo ti Fibonacci, a manda ni nzoni mingi na lege ti awandara ti mathématique na yâ ti angu ngbangbo use so ahon. Ye oko, ye so azo ahinga ni pëpe ayeke molongo ti Tribonacci. A fa molongo ti Tribonacci na lege ti kiringo na peko ti molongo ni: tri(1) = 3 tri(n) = 1 + n / 2, tongana n ayeke même. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), tongana n ayeke nde.""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,sag_Latn,python,"
def digits(n):
    """"""Na peko ti so a mu na mo mbeni nzoni wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti""""""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,sag_Latn,python,"
def is_nested(string):
    '''Créer une fonction qui prend une chaîne comme entrée qui ne contient que des crochets carrés. A lingbi kua ni akiri na Tâ tënë gi tongana a yeke na mbeni molongo ti akete kete kete tënë so ayeke na yâ ni. is_nested'[[]]') â -> True is_nested'[[]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,sag_Latn,python,"

def sum_squares(lst):
    """"""A mu na mo molongo ti a-nombre. Mo lingbi ti kiri na wungo ti a-nombre so a zia na place ni na yâ molongo so a mu na mo, ti leke yâ ti ye oko oko na yâ molongo ni na ndo ti kota ndoni ndoni ni. Atapande: Ti lst = [1,2,3] a lingbi ti sigigi na 14 Ti lst = [1,4,9] a lingbi ti sigigi na 98 Ti lst = [1,3,5,7] a lingbi ti sigigi na 84 Ti lst = [1.4,4.2,0] a lingbi ti sigigi na 29 Ti lst = [-2.4,1,1] a lingbi ti sigigi na 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,sag_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Sara mbeni kua so ayeke kiri na tâ tënë tongana ndangba tënë ti yâ ti mbeni molongo ti atênë ayeke mbeni tënë ti yanga ti kodoro, na a yeke pëpe mbeni mbage ti mbeni tënë, na a yeke kiri na mvene tongana a yeke tongaso pëpe. Bâ: ""tênë"" ayeke mbeni bungbi ti atënë so a kangbi yâ ni na lege ti mbeni ndo. Atapande: check_if_last_char_is_a_letter""{""apple pie"") â -> False check_if_last_char_is_a_letter""{""apple pi e"") â -> True check_if_last_char_is_a_letter""{""apple pi e"") â -> False check_if_last_char_is_a_letter""{""apple pi e"") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,sag_Latn,python,"
def can_arrange(arr):
    """"""Sara mbeni kua so ayeke kiri na kota ndoni ti mbeni ye so ayeke kota ahon wala alingbi na ye so ayeke na kozo ni. Tongana mara ti ye tongaso ayeke dä pëpe, kiri na -1.""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,sag_Latn,python,"
def largest_smallest_integers(lst):
    '''Leke mbeni kua so akiri na mbeni molongo ti a-integer (a, b), na ndo so 'a' ayeke kota ahon na popo ti a-integer so ayeke na lege ni pëpe, na 'b' ayeke kete ahon na popo ti a-integer so ayeke na lege ni na yâ ti mbeni molongo. Tongana a-integer so ayeke na lege ni pëpe wala so ayeke na lege ni pëpe ayeke dä pëpe, kiri na ala tongana Mbeni oko pëpe. Atapande: akota_akete_ainteger[2, 4, 1, 3, 5, 7]) == (Kete, 1) akota_akete_ainteger[]) == (Kete, Oko pëpe) akota_akete_ainteger[0]) == (Kete, Oko pëpe) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,sag_Latn,python,"
def compare_one(a, b):
    """"""Sara mbeni kua so ayeke mû alê ti wungo ti aye, wala alê ti ye so ayeke na yâ ti molongo ti aye so ayeke tâ wungo ti aye, na so ayeke kiri na kota molongo ti aye ni na yâ ti molongo ti aye ni so a mû na lo. Tongana alê ni ayeke oko, a yeke kiri na oko pëpe.""""""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,sag_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Bâ wala wungo so a mû ni alingbi ti duti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti wungo ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti ye ti""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,sag_Latn,python,"
def special_factorial(n):
    """"""A fa factoriel ti Brésil tongana: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! na ndo so n > 0 Na tapande: >>> special_factorial ((4) 288 Fango ye ni ayeke wara ande mbeni ndoni wungo tongana ye ti yongo ni na a lingbi a kiri na ndoni wungo ti ndoni wungo so. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,sag_Latn,python,"
def fix_spaces(text):
    """"""_Tënë ti tapande-3 mû mbeni molongo ti atënë, zia agere kue na place ni na lege ti agere so a zia na gbe ni, nga tongana mbeni molongo ti atënë ayeke na alê ti gere use na peko ti tere, zia agere ni na place ni na lege ti - fix_spaces ((""Exemple"") == ""Exemple"" fix_spaces ((""Exemple1"") == ""Exemple_1"" fix_spaces ((""Exemple2"") == ""_Example_2"" fix_spaces ((""Exemple 3"") == ""_Example-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,sag_Latn,python,"
def file_name_check(file_name):
    """"""- A lingbi a wara gi agere ota ('0'-'9') na yâ ti iri ti fiche ni. - Iri ti fiche ni ayeke na gi point oko '.' - A lingbi a zia mbeni kete kamba na gbe ti gere ti mbeti ni, na a komanse na mbeni lettre ti yanga ti Latin ('a'-'z' na 'A'-Z'). - A lingbi kete kamba na gbe ti mbeti ni ato nda ni na mbeni oko ti agere ti mbeti ti yanga ti Latin: ['txt', 'exe', 'lld'] Atapande: file_name_check""{example.txt.} # => 'Yes'name_file_check""{example.lld.} # => 'No' (iri ni ato nda ni na mbeni kete mbeti ti yanga ti Latin)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,sag_Latn,python,"


def sum_squares(lst):
    """""""" Fango ye so ayeke wara ande molongo ti a-intégra. Teti aye kue so ayeke na yâ ti molongo ni, a yeke zia na place ni molongo ti a-intégra so ayeke na yâ ni tongana a-index ni ayeke mingi ti 3 na a yeke zia na place ti a-intégra so ayeke na yâ ni tongana a-index ni ayeke mingi ti 4 me pëpe ti 3. Fango ye ni ayeke gbian pëpe aye so ayeke na yâ ti molongo ni so a-index ni ayeke mingi ti 3 wala 4. Fango ye ni ayeke kiri na wungo ti aye kue so ayeke na yâ ni. Atapande: Teti lst = [1,2,3] a lingbi ti sigigi na 6 Teti lst = [] a lingbi ti sigigi na 0 Teti lst = [-1,-5,2,-1,-5] a lingbi ti sigigi na -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,sag_Latn,python,"
def words_in_sentence(sentence):
    """"""A mû na mo mbeni molongo so ayeke fä ti mbeni tënë, na yâ ti tënë ni a yeke wara ambeni tënë so mbeni ndo ayeke na popo ni, na a lingbi mo kiri na mbeni molongo so a yeke wara na yâ ni atënë ti tënë ti kozo tënë ni, so ayo ni ayeke alê ti lege ti dikongo ni, a lingbi molongo ti atënë ni na yâ ti fini molongo ni aduti legeoko na ti kozo tënë ni.""""""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,sag_Latn,python,"
def simplify(x, n):
    """"""Kua ti mo ayeke ti sala mbeni kua so ayeke sara si tënë x * n aga kete. Kusala ni ayeke kiri na tâ tënë tongana x * n ayeke mbeni wungo ti aye kue na a yeke kiri na mvene tongana a yeke mbeni wungo ti aye kue. x na n ayeke a-string so a zia na yâ ti mbeni fraction, na a yeke na kode so ge, <numerateur>/<nominateur> so na yâ ni a yeke wara na popo ti a-numérateur na a-nominateur a-nombre kue so ayeke nzoni. Mo lingbi ti tene so x na n ayeke a-fraction so ayeke tâ tënë, na a yeke wara zero pëpe tongana nimérateur. simplify{""1/5"", ""5/1"") = True simplify{""1/6"", ""2/1"") = False simplify{""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,sag_Latn,python,"
def order_by_points(nums):
    """"""Sara kua na mbeni kode so ayeke sara si molongo ti a-intègres so a mû ni na mo ti bâ ni ayeke gue na li ni na lege ti wungo ti acouleur ti ala.""""""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,sag_Latn,python,"
def specialFilter(nums):
    """"""Sara kua na mbeni kode so ayeke mû adiskur so ayeke na yâ ti mbeni molongo ti wungo ti azo ti sara na kua ni na a yeke kiri na adiskur so wungo ti ala ahon 10 nga so kozo na ndangba ndo ti mbeni wungo ti azo ni ayeke nde nde (1, 3, 5, 7, 9).""""""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,sag_Latn,python,"
def get_max_triples(n):
    """"""A mû na mo mbeni nzoni wungo ti azo n. A lingbi mo leke mbeni molongo ti azo a na yongo ti azo n. Teti i oko oko kue (1 ‰¤ i ‰¤ n), ngele ti a[i] = i * i - i + 1. Kiri na wungo ti azo ota (a[i], a[j], a[k]) ti a na ndo so i < j < k, na a[i] + a[j] + a[k] ayeke mbeni mingi ti 3.""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,sag_Latn,python,"
def bf(planet1, planet2):
    '''A yeke wara atongoro miombe na yâ ti bungbi ti atongoro ti e: oko so ayeke ndulu mingi na lâ ayeke Mercure, mbeni ayeke na peko ti lo ayeke Vénus, na pekoni Sese, Mars, Jupiter, Saturne, Uranus, Neptune. A lingbi a sû mbeni kua so amû airi ti atongoro use tongana molongo ti atongoro 1 na atongoro 2. A lingbi kua ni akiri na mbeni molongo so ayeke na atongoro kue so angoro ni ayeke na popo ti angoro ti atongoro 1 na atongoro 2 so a kangbi ni na lege ti dutingo ndulu na lâ. A lingbi kua ni akiri na mbeni molongo so ayeke senge tongana atongoro 1 wala atongoro 2 ayeke angoro ti atongoro so ayeke na lege ni pëpe. Atapande bf ""(Jupiter"", ""Neptune"") ==> (""Saturne"", ""Uranus"") bf ((""Sese"", ""Mercure"") ==> (""Vénus"") bf ((""Mercure"", ""Uranus"") ==> (""Vénus"", ""Sese"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,sag_Latn,python,"
def sorted_list_sum(lst):
    """"""Sara mbeni kua so ayeke yeda na molongo ti molongo ti atambela tongana mbeni paramètre, a yeke zi atambela so ayo ayo na lege ti ndoni pepe na yâ ni, na a yeke kiri na molongo so a wara na lege ti molongo so a leke ni. Lisoro ni ayeke lakue molongo ti atambela me a yeke mbeni molongo ti wungo lâ oko pepe, na a lingbi ti wara ambeni molongo so a leke ni na lege ti molongo ni so. A lingbi molongo ti molongo ni ague na nduzu na lege ti yongo ti tënë oko oko, na a lingbi mo kiri na molongo so a leke ni na lege ti ndia so. Tongana atënë use ayeke na yongo oko, zia molongo ni na lege ti alphabétique. A lingbi kua ni akiri na molongo ti atambela na lege ti molongo so a leke ni. Mo lingbi ti tene so atënë kue ayeke na yongo oko.""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,sag_Latn,python,"
def x_or_y(n, x, y):
    """"""Mbeni kode so ayeke ngangu pëpe, so a lingbi a kiri na ngele ti x tongana n ayeke mbeni kota wungo, na a lingbi a kiri na ngele ti y tongana a yeke tongaso pëpe. Atapande: teti x_wala_y{7, 34, 12) == 34 teti x_wala_y{15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,sag_Latn,python,"
def double_the_difference(lst):
    '''Na peko ti so a mû na mo molongo ti wungo, kiri na wungo ti a-quadrat ti wungo so ayeke na yâ molongo ni so ayeke nde. Zia lege na wungo so ayeke sioni wala so ayeke na yâ ni pëpe. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Tongana molongo ti mungo na ni ayeke senge, kiri na 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,sag_Latn,python,"
def compare(game,guess):
    """"""Mbi pensé e kue e dabe ti e na ye so e yeke wara tongana e hinga nda ni ti mbeni ye so e ku ni aninga awe. Aye so e yeke pensé na ni na ngoi ni so ayeke biani nzoni ti tene e hinga ni na e haka ni. Kua ti e ayeke ti hinga wala mbeni zo ahinga nda ni ti aye so ague oko na aye so lo wara. A mû na e aye ti pika na aye ti pika na aye so lo hinga so ayo alingbi na aye so lo wara. A fa na e aye so ague oko na aye so lo hinga so ayo. Tongana zo ahinga nda ni nzoni, ye so lo wara ayeke 0, na tongana lo hinga ni nzoni pëpe, ye so lo wara ayeke kota kangbi so ayeke na popo ti ye so lo hinga na ye so lo wara.""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,sag_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""A yeke fa na mo iri ti mbeni classe (mbeni molongo) nga na molongo ti a-extension. A yeke sara kua na a-extension ti zia ambeni klase na yâ ti klase ni. Ngangu ti a-extension ni ayeke tongana ti so ge: Zia si CAP aduti wungo ti akota lettre na yâ ti iri ti extension ni, na zia SM aduti wungo ti akete lettre na yâ ti iri ti extension ni, a yeke fa ngangu ni na lege ti kete mbage ti CAP - SM. A lingbi mo wara a-extension so ayeke ngangu ahon na mo kiri na mbeni molongo ti a-extension na yâ ti kode so: ClassName.StrongestExtensionName. Tongana a yeke wara a-extension use wala ahon so ayeke na oko ngangu, a lingbi mo soro oko so ayeke na kozo ndo na yâ ti molongo ni. Na tapande, tongana a mû na mo ""Slices"" tongana klase nga na molongo ti a-extension ni: ['SEviviNGliSCes', 'Cheese', 'StufedF'] na pekoni a lingbi mo kiri na 'Slices.SEviNGliSliCes' ndali ti so a-extension ni ayeke ngangu ahon kue.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,sag_Latn,python,"
def cycpattern_check(a , b):
    """"""A mu na mo atene use. Mo lingbi ti kiri na Tâ tene tongana use tene ni wala oko ti agbiango ni ayeke mbeni kete kamba na yâ kozo tene cycpattern_check(""abcd"",""abd"") => Faux cycpattern_check(""hello"",""ell"") => Tâ cycpattern_check(""whassup"",""psus"") => Faux cycpattern_check""abab"",""baa"") => Tâ cycpattern_check(""efef"",""eeff"") => Faux cycpattern_check""(hims"",""simen"") => Tâ tene """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,sag_Latn,python,"
def even_odd_count(num):
    """"""Na peko ti so a mû na lo mbeni wungo ti alê ti mbeti, lo kiri na mbeni molongo so ayeke na wungo ti alê ti mbeti so ayeke même na so ayeke nde nde.""""""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,sag_Latn,python,"
def int_to_mini_roman(number):
    """"""Na peko ti so a mû na mo mbeni nzoni wungo ti aye, wara wungo ti aye so ayeke tongana molongo ti atênë, na kiri na ni na kete gere ti mbeti.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,sag_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Na peko ti so a fa alongo ti ambage ota ti triangle. Tongana ambage ni ayeke triangle ti droit, a kiri na ni na tâ tënë, me tongana a yeke triangle ti droit pëpe.'''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,sag_Latn,python,"
def find_max(words):
    """"""Kiri na peko ti tënë so ayeke na wungo ti agere ti mbeti so ayeke nde nde. Tongana agere ti mbeti ni ayeke mingi, kiri na peko ti tënë so ayeke kozo na molongo ti agere ti mbeti ni.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,sag_Latn,python,"
def eat(number, need, remaining):
    """"""Mo yeke mbeni kete kete kete nyama so nzara asara lo mingi, na mo te awe gbâ ti agarote, me fadeso a lingbi mo te ambeni mingi ti hunzi na kobe ti lango ni. a lingbi mo kiri na mbeni molongo ti [ wungo ti agarote so mo te na peko ti kobe ti mo, wungo ti agarote so angbâ na peko ti kobe ti mo ] tongana agarote so angbâ ayeke mingi pëpe, mo yeke te agarote so angbâ kue, me nzara ayeke ngbâ ti sara mo.""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,sag_Latn,python,"
def do_algebra(operator, operand):
    """"""Na peko ti so a mû na mo molongo use ti a-opérateur, na a-opérand. Kozo molongo ni ayeke na akota kusala ti algebra, na use molongo ni ayeke molongo ti a-intègres. Sara kua na molongo use so a mû ti leke tënë ti algebra nga ti kiri na peko ti tënë so. Akpengba kusala ti algebra: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** Exemple ): opérateur['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 Bâ so yongo ti molongo ti a-opérateur ayeke legeoko na yongo ti molongo ti a-opérand minus oko. A-opérand ayeke molongo ti a-intègres so ayeke na lege ni pëpe.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,sag_Latn,python,"
def solve(s):
    """"""A mu na mo mbeni molongo ti atene s. tongana s[i] ayeke mbeni lettre, kiri na li ti lo na nduzu wala na gbe ni, wala zia ni tongana ti so ayeke. Tongana molongo ni ayeke na atene oko pepe, kiri na molongo ni na peko.""""""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,sag_Latn,python,"
def string_to_md5(text):
    """"""Na peko ti so a mu na mo mbeni molongo ti atene 'text', kiri na molongo ti atene ti md5 so alingbi na ni. Tongana 'text' ayeke mbeni molongo ti atene so ayeke senge, kiri na oko pepe. >>> string_to_md5('Bonjour monde') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,sag_Latn,python,"
def generate_integers(a, b):
    """"""Na peko ti so a mû na mo a-intègres use so ayeke nzoni a na b, kiri na a-intègres so ayeke même na popo ti a na b, na molongo so ayeke gue na li ni.""""""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
