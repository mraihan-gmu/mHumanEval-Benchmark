task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,twi_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Hwɛ sɛ wɔ din a wɔde ama no mu no, sɛ ebi wɔ hɔ a, ɛbɛn no sen sɛ ɛbɛn no.""""""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,twi_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Saa adwuma yi mu no, nea ehia ne sɛ wobɛkyekyɛ saa kuw no mu ayɛ no akuw a wɔn mu biara wɔ ne ho no, na woayi wɔn mu biara afi mu.""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,twi_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Sɛ wɔde adansedie a ɛretutu fam wɔ hɔ a, wobetumi atutu mu akɔ mu na wɔama no akwaa a ɛmu yɛ duru (akwaa a ɛmu yɛ duru sen nea wɔde ama no) ne ɔpepe (nea aka no yɛ ketewa sen 1). Fa ɔpepe no mu.""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,twi_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Wo nsa ka bank account a wo de sika gu mu na wo yi bi fi ase no ho. Wo adwuma ne sɛ wobɛhu sɛ bere bi mu no account no balance no so atew ase a, na saa bere no ɛsɛ sɛ function no de True san ba. Sɛ ɛnte saa a ɛsɛ sɛ ɛde False san ba. Example: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,twi_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Sɛ wode input numbers a ɛwɔ din no bi to gua a, yɛ Mean Absolute Deviation a ɛbɛn saa data set no mu no. Mean Absolute Deviation no yɛ nsonsonoe a ɛda nsunsuanso biara ne ne mfinimfini (mfinimfini wɔ saa asɛm yi mu): MAD = average ⋅ x - x_mean ⋅ Example: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,twi_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Fa 'delimeter' ka biribi ho wɔ nsɛm a edi hɔ no mu `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,twi_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Sɛ yɛrekyerɛw saa adwuma yi a, yɛ de ntweaa a ɛgyina hɔ ma akuw bebree a wɔakyekyɛ mu wɔ ntweaa mu no. Sɛ nhwɛso no, nea ɛwɔ ntweaa mu no mu biara wɔ ntweaa a ɛgyina hɔ ma ntweaa a ɛkyɛn so. Sɛ nhwɛso no, nea ɛwɔ ntweaa mu no mu biara wɔ ntweaa a ɛkyɛn so.""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,twi_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filter input list of strings only for ones that contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,twi_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Sɛ wode integers a ɛwɔ list bi mu rebɔ din a, fa sum ne integers a ɛwɔ list no mu no nyinaa a wɔboaboa ano no ma no. Nkonya a enni sum no yɛ 0 na nea enni product no yɛ 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,twi_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Sɛ wohwɛ integers a ɛwɔ list no mu a, yɛ list a ɛkyerɛ rolling maximum element a wohui kosi bere bi wɔ sequence no mu. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,twi_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Hwehwɛ palindrome a ɛware paa a ɛfi ase wɔ ahoma a wɔde ama no mu. Algorithm no yɛ tiawa: - Hwehwɛ ahoma a wɔde ama no mu nea ɛware paa a ɛyɛ palindrome. - Fa ahoma a ɛsiane ahoma no ho a ɛsiane ahoma no ho kɔ.""""""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Sɔ hwɛ sɛ nea wɔde ama no yɛ palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,twi_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Awɔde yɛ ahoma a a ne b yɛ 1s ne 0s. Yɛ binary XOR wɔ ahoma yi so na yɛsan ba sɛ ahoma. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,twi_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Sɛ wo wɔ ntweaa pii a wɔn tenten yɛ pɛ a, fa nea ɛware no. Sɛ wo wɔ ntweaa pii a wɔn tenten yɛ pɛ a, fa nea edi kan no. Sɛ wo wɔ ntweaa a wɔn tenten yɛ pɛ a, fa None. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,twi_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""San de a ɔtɔsoɔ a ɛsen biara a ɛwɔ anohyetoɔ a wɔadi wɔ a ne b mu no ma a wɔato din >>> ɔtɔsoɔ a ɛsen biara a ɛtɔsoɔ wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi wɔ a wɔadi""""""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,twi_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Return list of all prefixes from shortest to longest of the input string >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,twi_Latn,python,"

def string_sequence(n: int) -> str:
    """"""San kɔma string a ɛwɔ space-delimited numbers fi 0 kɔsi n. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,twi_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Sɛ wɔde ahama bi ma a, hwehwɛ ahyɛnsode ahorow a ɛwɔ mu (a ɛnfa ho sɛ ɛyɛ asɛmti no) no dodow.""""""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,twi_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Wo botae ne sɛ wobɛte ntini a ɛgyina hɔ ma integers a ɛne beat pii hyia no ase. N'asɛmti ne: 'o' - note, lasts beats 'o' - no. lasts four beats 'o' - no. lasts two beats ' - quater no. lasts one beat >>> parse_music. 'o
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,twi_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Hwehwɛ mpɛn dodow a wobetumi ahu substring bi wɔ mfitiaseɛ no mu. Hyɛ nsɛm a ɛboro so no. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,twi_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Ntotoho a ɛwɔ hɔ no yɛ 'zero' kɔsi 'nine'. Ntotoho a ɛwɔ hɔ no yɛ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' ne 'nine'. Fa akontaahyɛde a wɔatwa no mu fi ketewa kɔsi kɛse so ma no nsane mmra >>> sort_numbers (('three one five') 'one three five' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,twi_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Wode a, wubehu sɛ, sɛ wohwɛ mu a, ɛmmoro so mmienu na ɛbɛn mu, na afei wubehu sɛ, ɛbɛn mu no, ɛbɛn mu.""""""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,twi_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Sɛ wo de nnumero bi a (sɛ anyɛ yiye koraa no emu mmienu) ka ho a, fa linear transform yɛ saa nnumero no, na nea ɛtra so no abɛyɛ 0 na nea ɛtra so no abɛyɛ 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,twi_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter a wɔde ama no no yɛ Python values a wɔde ma integers nko ara >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,twi_Latn,python,"

def strlen(string: str) -> int:
    """"""Ɔsan kɔ kɔma nea wɔde ama no no tenten >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,twi_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Sɛ wode a, hwehwɛ a, na wubehu sɛ ne kɛse kyɛn n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,twi_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Factor no biara wɔ ne mpɛn dodow a ɛhyia wɔ factor mu. Nkyerεkyerεmu no dodow yɛ pɛ sɛ nea wɔde ma no yɛ nea wɔde ma no nyinaa.""""""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,twi_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Fi integers list mu yi element biara a ɛboro baako no. Ma element no nni ne din mu. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,twi_Latn,python,"

def flip_case(string: str) -> str:
    """"""Sɛ wode ahama bi a wɔde nkyerɛwde nketenkete akyerɛw no, dan no kɛse na dan no ketewa. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,twi_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate list of strings into a single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,twi_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filter input list of strings only for ones that start with a given prefix. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,twi_Latn,python,"

def get_positive(l: list):
    """"""Fa nnumpa a ɛwɔ din no mu nkutoo na fa. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,twi_Latn,python,"

def is_prime(n):
    """"""Sɛ a, fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa false ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa false ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa false ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa false ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa true ma no. Fa false ma no. Fa false ma no. Fa true ma no. Fa false ma no. Fa false ma no. Fa false ma no. Fa false ma no. Fa true ma no. Fa false ma no. Fa false""""""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,twi_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs yɛ coefficients a ɛwɔ polynomial. find_zero hwehwɛ x a poly ((x) = 0. find_zero de zero point pɛ na ɛba, sɛ ebi dɔɔso mpo a. Afei nso, find_zero gye list xs a ɛwɔ even number of coefficients ne nea ɛboro zero coefficient na ɛma yenya ano aduru. >>> round ((find_zero[(1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Ɛkyerɛ ɛmu dodoɔ a ɛwɔ xs wɔ baabi a x. ma no nsane xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,twi_Latn,python,"

def sort_third(l: list):
    """"""Eyi yɛ adwuma a, yɛfa list l na yɛsan de list l' ma no sɛ l' yɛ pɛ wɔ indices a wonnya mu nkyekyɛmu mmiɛnsa mu, na ne bo wɔ indices a wonnya mu nkyekyɛmu mmiɛnsa mu yɛ pɛ sɛ nea ɛne l yɛ pɛ, nanso wɔasiesie no. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,twi_Latn,python,"

def unique(l: list):
    """"""San kɔfa nneɛma a wɔasiesie no a ɛnnyɛ biara wɔ ɔfã bi mu kɔma >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,twi_Latn,python,"

def max_element(l: list):
    """"""San kɔfa nea ɛboro so wɔ atwerɛsɛm no mu. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,twi_Latn,python,"

def fizz_buzz(n: int):
    """"""Ma mpɛn dodow a ɔfrae 7 no pue wɔ integers a wɔnnso n a wɔkyekyɛmu yɛ 11 anaa 13 mu no. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,twi_Latn,python,"

def sort_even(l: list):
    """"""Eyi yɛ adwuma a, yɛfa list l na yɛsan de list l' ma no sɛ l' yɛ pɛ sɛ l wɔ odd index mu, bere a ne bo wɔ even index mu yɛ pɛ sɛ l wɔ even index mu, nanso wɔasiesie no. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,twi_Latn,python,"

def encode_cyclic(s: str):
    """"""gye sɛ input string a wɔde encode_cyclic adwuma no akyerɛw no. Ɛsan de decoded string. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""de ahyɛnsode a wɔde asetew so no ma wɔ ahyɛnsode ahorow a wɔatwa no ho a ɛyɛ ahyɛnsode ahorow a ɛwɔ ahyɛnsode ahorow abiɛsa mu. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,twi_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib de n-nkyekyɛmu a ɛyɛ Fibonacci nɔma na ɛyɛ prime nso ma. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,twi_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero fa integers ho sɛ input. Ɛsan ma True sɛ ebiara yɛ zero, na False sɛ ebiara yɛ zero. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,twi_Latn,python,"

def car_race_collision(n: int):
    """"""Fa no sɛ ɔkwan a ɛyɛ tee koraa a ɛnkyɛe koraa. kar n na ɛrekɔ benkum kɔ nifa; bere koro no ara, kar n foforo nso rekɔ nifa kɔ benkum. Kar abien no fi ase wɔ akyirikyiri. Kar biara nam pɛ. Wɔka sɛ kar abien hyia bere a kar a ɛrekɔ benkum kɔ nifa ne kar a ɛrekɔ nifa kɔ benkum hyia. Nanso, kar no yɛ den na ɛyɛ den; nea efi mu ba ne sɛ, wɔkɔ so twa wɔn kwan te sɛ nea wɔnhyiae. Saa adwuma yi ma hu akwanhyia a ɛtete saa no dodow.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,twi_Latn,python,"

def incr_list(l: list):
    """"""Fa nneɛma a wɔde 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]""""""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,twi_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero fa integers ho sɛ input. Ɛsan ma True sɛ nneɛma abien a ɛsono mu wɔ list no mu a wɔn nyinaa yɛ zero, na False sɛ ɛnte saa. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,twi_Latn,python,"

def change_base(x: int, base: int):
    """"""Sesa adwenfa a ɛwɔ input number x ho kɔ base. return string representation after the conversion. base numbers are less than 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,twi_Latn,python,"

def triangle_area(a, h):
    """"""Ɛfa ɔfã a ɛware ne ɔfã a ɛsan ba kɛse wɔ ahinasa ho. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,twi_Latn,python,"

def fib4(n: int):
    """"""Fib4 nkyekyɛmu a ɛtoa so yɛ nkyekyɛmu a ɛtoa so te sɛ Fibbonacci nkyekyɛmu a ɛkyerɛ sɛ: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Yɛsrɛ sɛ kyerɛw dwumadi bi a ɛbɛma woatumi abue nkyekyɛmu a ɛtɔ so n wɔ fib4 nkyekyɛmu a ɛtoa so no mu. Mfa recursion nyɛ adwuma. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,twi_Latn,python,"

def median(l: list):
    """"""Ɛsan kyerɛ nneɛma a ɛwɔ din no mu no mu.""""""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,twi_Latn,python,"

def is_palindrome(text: str):
    """"""Hwehwɛ sɛ nea wɔde ama no yɛ nsɛdi a ɛkorɔn anaa ɛtra hɔ >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,twi_Latn,python,"

def modp(n: int, p: int):
    """"""San kɔ 2^n modulo p (nhu ne nkyerɛwde). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,twi_Latn,python,"

def encode_shift(s: str):
    """"""gye sɛ input string a wɔde encode_shift yɛ adwuma. Ɛsan de decoded string. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""de nkyerɛwde a wɔde ahyɛnsode ahyɛ no mu no ma denam nkyerɛwde biara a wɔde 5 asesa no so.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,twi_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels yɛ adwuma a ɛgye akontaahyɛde na ɛde akontaahyɛde a ɛnni ɛnne nkyerɛwde ma. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,twi_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,twi_Latn,python,"

def add(x: int, y: int):
    """"""Fa nnumero x ne y ka bom >>> ka bom ((2, 3) 5 >>> ka bom ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,twi_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Hwɛ sɛ nsɛmfua abien no wɔ nkyerɛwde koro anaa. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Nokware >>> same_chars (('abcd', 'dddddddabc') Nokware >>> same_chars (('dddddddabc', 'abcd') Nokware >>> same_chars (('eabcd', 'dddddddabc') Atoro >>> same_chars ((('abcd', 'dddddddabddce') Atoro >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Atoro """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,twi_Latn,python,"

def fib(n: int):
    """"""San de Fibonacci nɔma a ɛtɔ so n.""""""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,twi_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets yɛ ""<"" ne "">"". return True sɛ bracket biara a ɛbue no wɔ bracket a ɛtwa to a ɛne no hyia. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,twi_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,twi_Latn,python,"

def common(l1: list, l2: list):
    """"""San kɔfa nneɛma a wɔaka abom a wɔaka abom no ma no. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,twi_Latn,python,"

def largest_prime_factor(n: int):
    """"""San kɔfa nea ne kɛse yɛ nnidiso nnidiso wɔ n. Fa no sɛ n > 1 na ɛnnyɛ nnidiso. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,twi_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n yɛ adwuma a ɛka nnumero fi 1 kosi n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,twi_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets yɛ ""("" ne """") string. return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() "") True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,twi_Latn,python,"

def derivative(xs: list):
    """"""xs gyina hɔ ma coefficients a ɛwɔ polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Fa saa polynomial yi derivative no di dwuma wɔ ɔkwan koro no ara so. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,twi_Latn,python,"

def fibfib(n: int):
    """"""FibFib no yɛ biribi a ɛte sɛ Fibbonacci no. Yɛkyerɛ sɛ: fibfib ((0) == 0 fibfib ((1) == 0 fibfib ((2) == 1 fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3). Yɛsrɛ wo kyerɛw biribi a ɛbɛboa ma yɛahyehyɛ no yiye.""""""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,twi_Latn,python,"
FIX = """"""Kyerɛw adwuma a wɔfrɛ no vowels_count a ɛfa asɛmfua bi a ɛgyina hɔ ma no sɛ input na ɛde vowels a ɛwɔ mu no dodow ba. Vowels wɔ saa asɛm yi mu ne 'a', 'e', 'i', 'o', 'u'. Ɛha, 'y' nso yɛ vowel, nanso sɛ ɛwɔ asɛmfua no awiei nkutoo.""""""

def vowels_count(s):
    """"""Fa sɔhwɛ ahorow bi ka ho. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,twi_Latn,python,"
def circular_shift(x, shift):
    """"""Sɛ shift > digits dodow a, ma digits no nsesa. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,twi_Latn,python,"
def digitSum(s):
    """"""Adwuma Kyerɛw adwuma a fa ahyɛnsode a ɛwɔ soro no sɛ input na ɛde ASCII nkyerɛwde a ɛwɔ soro no nko ara a wɔaka abom no ba.""""""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,twi_Latn,python,"
def fruit_distribution(s,n):
    """"""Wɔ saa adwuma yi mu no, wɔbɛma wo akwaa bi a ɛkyerɛ nsã ne aburoni dodow a wɔkyekyɛ wɔ nnuaba kotoku mu a kotoku yi wɔ nsã, aburoni, ne mango aba. Sɛ wɔde akwaa a ɛkyerɛ nsã ne aburoni dodow no ne akwaa a ɛkyerɛ nnuaba dodow no nyinaa wɔ kotoku no mu no ma ho aba wɔ kotoku no mu. sɛ nhwɛso: fruit_distribution""5(nsã ne aburoni 6"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 nsã ne aburoni 1"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 nsã ne aburoni 3"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 nsã ne aburoni 120) "",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,twi_Latn,python,"
def pluck(arr):
    """"""""Sɛ wode ɔfã bi a ɛkyerɛ dua bi a ɛwɔ ntini a ɛnnyɛ negative wɔ hɔ a, wo adwuma ne sɛ wobɛyi ntini no baako na woayi no. Sɛ wohu ntini a ɛboro so a ɛkura akatua ketewaa bi a, fa nea ɛkura akatua ketewaa bi no ma no. Sɛ wohu ntini a ɛkura akatua ketewaa bi a, fa nea ɛkura akatua ketewaa bi no ma no. Sɛ akatua ketewaa bi nni hɔ anaa nea wɔde ama no yɛ hwee a, fa nea ɛwɔ akatua ketewaa bi mu no ma no. Mfatoho 1: Akwankyerɛ: [4,2,3] Akwankyerɛ: [2, 1] Nkyerɛkyerɛmu: 2 yɛ akatua ketewaa bi, na 2 yɛ akatua ketewaa bi. Mfatoho 2: Akwankyerɛ: [1,2,3] Akwankyerɛ: [2, 1] Nkyerɛkyerɛmu: 2 yɛ akatua ketewaa bi, na 2 yɛ akatua ketewaa bi. Mfatoho 3: Akwankyerɛ: [] Akwankyerɛ: [4:] Akwankyerɛ: [5, 3, 4, 2] Akwankyerɛ: 1 Akwankyerɛ: 0 Akwankyerɛ: 1 yɛ akatua ketewaa bi, nanso akatua ketewaa bi nni hɔ. * Akwankyerɛ: 1 yɛ akatua ketewaa bi, nanso akatua ketewaa bi wɔ hɔ. * Akwankyerɛ: Akwankyerɛ: 1 yɛ akatua ketewaa bi, nanso akatua ketewaa bi wɔ hɔ na ɛwo ketewaa bi na ɛboro so.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,twi_Latn,python,"
def search(lst):
    '''Wode wo ho ato positive integers ho a ɛnyɛ hunu. Fa integers a ɛboro zero na ɛtaa yɛ kɛse anaa ɛtaa yɛ pɛ no ma. Sɛ integer bi taa yɛ kɛse anaa ɛtaa yɛ pɛ wɔ list no mu a, fa -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,twi_Latn,python,"
def strange_sort_list(lst):
    '''Sɛ wode anansesɛm a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm bi a ɛyɛ anansesɛm'''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,twi_Latn,python,"
def triangle_area(a, b, c):
    '''Sɛ n'afanu no nyinaa yɛ mfitiase a, fa mfitiase no yɛ mfitiase a, nea edi kan no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no, nea edi hɔ no yɛ mfitiase a, nea edi hɔ no, nea edi hɔ no, nea edi hɔ no, nea edi hɔ no'''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,twi_Latn,python,"
def will_it_fly(q,w):
    '''Kyerɛw adwuma bi a sɛ ade a q bɛtu no no yɛ True na sɛ ɛnte saa a ɛyɛ False. Ade a q bɛtu no no yɛ Balanced (ɛyɛ palindromic list) na ne nnyinaso no dodow yɛ kɛse anaa ɛboro so w. Sekai: will_it_fly([1, 2], 5) â -> False # 1+2 yɛ ketewa sen kɛse a ɛtumi yɛ, nanso ɛntɔ sin. will_it_fly([3, 2, 3], 1) â -> False # ɛtumi yɛ balanced, nanso 3+2+3 yɛ kɛse sen kɛse a ɛtumi yɛ. will_it_fly[3, 2, 3], 9) â -> True # 3+23 yɛ ketewa sen kɛse a ɛtumi yɛ, na ɛtumi yɛ balanced. will_it_fly([3], â 5) -> True # 3 yɛ ketewa sen kɛse a ɛtumi yɛ, na ɛtumi yɛ balanced.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,twi_Latn,python,"
def smallest_change(arr):
    """"""Sɛ wode anohyetoɔ bi a ɛyɛ anohyetoɔ no di dwuma a, hwehwɛ sɛ wo bɛtumi asesa nneɛma a ɛwɔ mu no. Anohyetoɔ no yɛ biribi a wɔkenkan no pɛpɛɛpɛ. Wubetumi asesa nneɛma no mu baako ama nea ɛwɔ hɔ.""""""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,twi_Latn,python,"
def total_match(lst1, lst2):
    '''Kyerɛw adwuma a wogye ahoma a ɛwɔ din din din mu no mu abien na ɛde nea ɛwowɔ din din mu no ba. Sɛ ahoma no nyinaa wɔ din din mu a, fa nea edi kan no ba. Sekai total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi]) â -> ['I', 'hi'], 'hi'] total_match ((['4'], ['1'', ['2'', '3'', '4'], ['5']) â -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,twi_Latn,python,"
def is_multiply_prime(a):
    """"""Kyerɛw adwuma a sɛ wɔde a, ɛyɛ nokware. Sɛ wɔde a, ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a ɛyɛ a""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,twi_Latn,python,"
def is_simple_power(x, n):
    """"""Wo adwuma ne sɛ wobɛkyerɛ adwuma bi a sɛ ɛmu no yɛ n tumi a ɛyɛ tiawa a, ɛde true ba na sɛ n**int=x a, ɛde false ba. Sɛ nhwɛso: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,twi_Latn,python,"
def iscube(a):
    '''Kyerɛw adwuma a ɛfa integer a na ɛde True ba sɛ saa ingeger yi yɛ integer a ɛboro so bi a. Hyɛ no nsow: wobɛtumi aka sɛ input no yɛ adwuma bere nyinaa.'''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,twi_Latn,python,"
def hex_key(num):
    """"""Woama wo dwumadi sɛ kyerɛw adwuma bi a ɛgye hexadecimal dodow sɛ ɔtweaseɛ na ɛkan hexadecimal nkrataabu a ɛyɛ prɔmma (prɔmma, anaa prɔmma yɛ nipa a ɛboro 1 a ɛnyɛ nneɛma nketewa mmienu a ɛyɛ pɛ). Hexadecimal nkrataabu yɛ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prɔmmu dodow yɛ 2, 3, 5, 7, 11, 13, 17,... Enti ɛsɛ sɛ wuhu nkrataabu a edidi so yi mu dodow: 2, 3, 5, 7, B (= ɔtweaseɛ 11), D (= ɔtweaseɛ 13). Hyɛ no nsow: wubetumi aka sɛ nea wɔde aba no yɛ nea ɛteɛ anaa nea ɛnhyɛ da, na ahyɛnsode A,B,C,D,E,F yɛ nkrataabu a wɔde nkyerɛwde akɛse akyerɛw.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,twi_Latn,python,"
def decimal_to_binary(decimal):
    """"""Wobɛ ma wo nɔma wɔ ɔpepepem kwan so na wo adwuma ne sɛ wobɛsesa no akɔ ɔpepepem kwan so. Ɔyɛ a ɛsɛ sɛ yɛ san de string, a nkyerɛwde biara gyina hɔ ma ɔpepepem kwan so. Ɔkyerɛwde biara wɔ string no mu bɛyɛ '0' anaa '1'. Ɔbɛma akyerɛwde bi a aka 'db' wɔ mfitiaseɛ ne awieɛ no. Nkyerɛwde a aka no wɔ hɔ de boa wɔ format no mu.""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,twi_Latn,python,"
def is_happy(s):
    """"""Woama wo string s. Wo adwuma ne sɛ wobɛhwɛ sɛ string no yɛ happy anaa. A string yɛ happy sɛ ne tenten yɛ 3 na nkyerɛwde 3 biara a ɛtoa so yɛ soronko. Sɛ nhwɛso: is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (a) => False is_happy (b) => False is_happy (adb) => True is_happy (x) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,twi_Latn,python,"
def numerical_letter_grade(grades):
    """"""Ɔkyerɛkyerɛfo no ayɛ ne ankasa algorithm de rehyɛ sukuufo no mu den. Ɔhaw no ara ne sɛ, ne werɛ afi ne code a ɔde yɛ grade no. Ɔmaa wo sukuufo no mu bi GPA ho din na ɛsɛ sɛ w'akyerɛw adwuma bi a ebetumi ama wo akyerɛw letter grades ho din wɔ ɔfã a edi so yi: GPA  Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation ([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,twi_Latn,python,"
def prime_length(string):
    """"""Kyerɛw adwuma a ɛfa string na ɛde True ba sɛ string no tenten yɛ prime number anaa False anyɛ saa a Examples prime_length('Hello') == True prime_length('abcdcba') == True prime_length('kittens') == True prime_length('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,twi_Latn,python,"
def starts_one_ends(n):
    """"""Sɛ wɔde positive integer n ma a, ma no nkyerɛ n-digit positive integer dodow a efi ase anaa ewie wɔ 1 no.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,twi_Latn,python,"
def solve(N):
    """"""Sɛ wode ɔfã bi a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɛyɛ ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã a ɔfã""""""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,twi_Latn,python,"
def add(lst):
    """"""Sɛ wode anohyetoɔ a ɛnnyɛ hwee a ɛwɔ anohyetoɔ a ɛnnyɛ hwee no a, fa nneɛma a ɛnnyɛ pɛ no ka ho.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,twi_Latn,python,"
def anti_shuffle(s):
    """"""Kyerɛw adwuma a ɛfa string na ɛde ne nkyerɛase a wɔahyehyɛ no ma. Nkyerɛase a wɔahyehyɛ no yɛ string a wɔde asɛmfua foforo a wɔde nkyerɛwde no nyinaa ahyehyɛ no wɔ ne mu.""""""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,twi_Latn,python,"
def get_row(lst, x):
    """"""Wode 2 dimensional data, sɛ nested lists, a ɛte sɛ matrix, nanso, ɛnte sɛ matrix, ɔfã biara betumi anya columns ahorow. Sɛ wode lst, ne integer x, hwehwɛ integers x wɔ list no mu, na fa tuples list, [(x1, y1), (x2, y2) ...] ma no sɛ tuple biara yɛ coordinate - (row, columns), a efi ase fi 0. Sort coordinates initially by rows in ascending order. Afei nso, sort coordinates of the row by columns in descending order. Example: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), (2, 5), (2, 0), get_(1), [] == [row], [1, 2, 3, 2], [] == 2, 2] """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,twi_Latn,python,"
def sort_array(array):
    """"""Sɛ wode anammɔn a ɛnnyɛ negative pii bi a, fa nea wode ato hɔ no bi ma no. Sɛ wohwɛ mu a, sɛ nea wɔaka no nyinaa yɛ pɛ a, wobɛhwɛ mu sɛ nea wɔaka no nyinaa yɛ pɛ a, wobɛhwɛ mu sɛ nea wɔaka no nyinaa yɛ pɛ a, wobɛhwɛ mu sɛ nea wɔaka no nyinaa yɛ pɛ a.""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,twi_Latn,python,"
def encrypt(s):
    """"""Yɛ adwuma bi a yɛfrɛ no encrypt a ɛgye string sɛ argument na ɛde string a wɔde alphabet no asesa no ma. Ɛsɛ sɛ yɛsakra no ma no yɛ saa na nkyerɛwde no asesa akɔ fam mmienu so akɔ mmeae mmienu. Sɛ nhwɛso: encrypt (('hi') de 'lm' encrypt (('asdfghjkl') de 'ewhjklnop' encrypt (('gf') de 'kj' encrypt (('et') de 'ix' ma """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,twi_Latn,python,"
def next_smallest(lst):
    """"""Wode akontaahyɛde a ɛwɔ din no mu ama wo. Kyerɛw adwuma next_smallest (() a ɛde nea ɛtɔ so abien a ɛyɛ ketewa koraa wɔ din no mu ba. Sɛ saa ade no nni hɔ a, fa None ma. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,twi_Latn,python,"
def is_bored(S):
    """"""Wobɛma wo nsɛmfua, na w'adwuma ne sɛ wobɛkan nsɛmfua a ɛyɛ bored no. Bored yɛ asɛmfua a efi ase wɔ asɛmfua ""I"". Nsɛmfua no gyina hɔ ma '.', '?' anaa '!'. Sɛ nhwɛso: >>> is_bored ((""Hello world"") 0 >>> is_bored ((""Ɔsoro yɛ bruu. Owia hyerɛn. M'ani gye saa wim tebea yi ho"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,twi_Latn,python,"
def any_int(x, y, z):
    '''Yɛ adwuma a ɛgye 3 din. Ɛsan true sɛ din no baako yɛ pɛ a, ɛne mmienu a aka no ka bom, na din no nyinaa yɛ integers. Ɛsan false wɔ nsɛm afoforo biara mu.'''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,twi_Latn,python,"
def encode(message):
    """"""Kyerɛw adwuma bi a ɛgye asɛm bi, na ɛbɔ no ho ban wɔ ɔkwan a ɛbɛma ɛsakra nkyerɛwde no nyinaa, na ɛbɔ no mu nsonoe nyinaa ananmu na ɛbɔ no mu nsonoe a ɛwɔ nsonoe no anim no ho ban. Sekai: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,twi_Latn,python,"

def skjkasdkd(lst):
    """"""Wode akontaahyɛde a ɛwɔ hɔ no nyinaa ka ho. Wode akontaahyɛde a ɛwɔ hɔ no nyinaa ka ho. Wode akontaahyɛde a ɛwɔ hɔ no nyinaa ka ho. Sɛ w'akyerɛ mu sɛ: Sɛ w'akyerɛ mu sɛ: [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] a, nea ɛbɛba ne 10 Sɛ w'akyerɛ mu sɛ: [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] a, nea ɛbɛba ne 25 Sɛ w'akyerɛ mu sɛ: [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] a, nea ɛbɛba ne 13 Sɛ w'akyerɛ mu sɛ: [0,724,32,71,99,32,60,5,91,83,0,5,6] a, nea ɛbɛba ne 11 Sɛ w'akyerɛ mu sɛ: [0,81,12,31,21] a, nea ɛbɛba ne 3 Sɛ w'akyerɛ mu sɛ: [0,1,8,1,2,1,7] a, nea ɛbɛba ne 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,twi_Latn,python,"
def check_dict_case(dict):
    """"""Sɛ wɔde nsɛm asekyerɛ nhoma bi ama a, sɛ nsɛm asekyerɛ nhoma no mu nsɛm no nyinaa yɛ nsɛmfua a wɔde nkyerɛwde nketewa akyerɛw a, fa True ma. Sɛ saa a, fa False. Sɛ nsɛm asekyerɛ nhoma no yɛ hwee a, ɛsɛ sɛ adwuma no de False ma.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,twi_Latn,python,"
def count_up_to(n):
    """"""Yɛ adwuma a ɛgye akontabuo a ɛnnyɛ negative na ɛsan de akontabuo a edi kan a ɛyɛ n a ɛyɛ kan a wɔn dodow no yɛ kakraa bi na wɔn dodow no yɛ kakraa bi. Sɛ nhwɛso: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,twi_Latn,python,"
def multiply(a, b):
    """"""Sɛ wofa a, nea ɛsɛsɛ woyɛ ne sɛ wobɛfa no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no sɛ nea ɛwowɔ no yɛ no yɛ no sɛ nea ɛwowɔ no yɛ no""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,twi_Latn,python,"
def count_upper(s):
    """"""Sɛ wɔde string s ma a, ka ɛnne akɛseɛ a ɛwɔ ntwerɛeɛ a emu yɛ pɛ mu. Sɛ nhwɛso: count_upper (('aBCdEf') de 1 count_upper (('abcdefg') de 0 count_upper (('dBBE') de 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,twi_Latn,python,"
def closest_integer(value):
    '''Yɛ adwuma bi a ɛgye ɛmu (string) a ɛkyerɛ sɛ ɛyɛ nɔma na ɛde ɔkra a ɛbɛn no ma. Sɛ nɔma no yɛ ɔkra a ɛbɛn mmienu a, yɛ no kɔ akyiri firi zero. Sekai >>> ɔkra a ɛbɛn paa (closest_integer) "" 10 "" 10 >>> ɔkra a ɛbɛn paa (closest_integer) "" 15.3 "" 15 Twerɛtohɔ: Sɛ wo de nɔma no kɔ akyiri firi zero a, ɛkyerɛ sɛ sɛ nɔma no yɛ ɔkra a ɛbɛn paa (closest_integer) "" 14.5 "" a, ɛsɛ sɛ ɛsan yɛ 15 na ɔkra a ɛbɛn paa (closest_integer) "" 14.5 "" no nso yɛ -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,twi_Latn,python,"
def make_a_pile(n):
    """"""Sɛ wode adansedie a ɛyɛ pɛ n ama a, ɛsɛ sɛ woyɛ aboɔ a ɛwɔ aboɔ a ɛboro n so. Aboɔ a ɛwɔ aboɔ a ɛboro n so wɔ aboɔ a ɛboro n so mu. Aboɔ a ɛwɔ aboɔ a ɛboro n so wɔ aboɔ a ɛboro n so mu no dodow yɛ: - a ɛboro n so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so. Fa aboɔ a ɛwɔ aboɔ biara so wɔ ɔfã biara mu no ma wɔ din mu, a nea ɛwɔ index i no gyina hɔ ma aboɔ a ɛwɔ aboɔ a ɛboro so a ɛboro so (i+1).""""""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,twi_Latn,python,"
def words_string(s):
    """"""Wobɛ ma wo nsɛmfua a wɔde nkontabuo anaa ntweree apaapae. Wo adwuma ne sɛ wobɛkyekyɛ nsɛmfua no mu na woane nsɛmfua no mu. Sɛ nhwɛso: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,twi_Latn,python,"
def choose_num(x, y):
    """"""Saa adwuma yi fa akontabuo a ɛyɛ papa x ne y na ɛde akontabuo a ɛkorɔn paa a ɛgyina hɔ ma [x, y] no ba. Sɛ akontabuo a ɛte saa nni hɔ a, ɛnde ɛsɛ sɛ adwuma no de -1. Sɛ nhwɛso: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,twi_Latn,python,"
def rounded_avg(n, m):
    """"""Wode akontaahyɛde a ɛwɔ ho nyinaa a ne kɛse yɛ m na wode ma wo, na w'adwuma ne sɛ wobɛte akontaahyɛde a ɛwɔ ho nyinaa a ne kɛse yɛ m no mu biara mu biara mu no mu biara mu no mu biara mu no mu. Sɛ n yɛ kɛse sen m a, dan -1.""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,twi_Latn,python,"
def unique_digits(x):
    """"""Sɛ wɔde anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a wɔ anohyeto a wɔ anohyeto a wɔ anohyeto a wɔ anohyeto a wɔ anohyeto a wɔ anohyeto a wɔ anohyeto a wɔ anohyeto a wɔ anohyeto a wɔ anohyeto wɔ anohyeto wɔ anohyeto wɔ anohyeto wɔ anohyeto wɔ anhyemo""""""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,twi_Latn,python,"
def by_length(arr):
    """"""Sɛ wode anokwafo a wɔaka no ahyɛ mu a, fa anokwafo a wɔaka no hyɛ mu, na fa nea ɛrebɛba no hyɛ mu, na fa din a ɛne no hyia no si ananmu. Sɛ nhwɛso: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sorta arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""] Sɛ anokwafo no yɛ hwee a, fa nea ɛrebɛba no hyɛ mu: arr = [] return [] Sɛ anokwafo no wɔ anokwafo biara a, mfa no nyɛ hwee: arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [55,1] return ['One' 1,] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,twi_Latn,python,"
def f(n):
    """"""Yɛ adwuma a ɛne f a ɛfa n sɛ parameter, na ɛde list a ne kɛse yɛ n, ma no, sɛ index i mu no, ne bo yɛ factor of i sɛ i yɛ mpo anaa sɛ ɛnyɛ saa a, ɛyɛ 1 kɔsi i mu. i fi 1. factor of i yɛ 1 kɔsi i mu akontaahyɛde (1 * 2 * ... * i).""""""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,twi_Latn,python,"
def even_odd_palindrome(n):
    """"""Sɛ wode adansedie a ɛyɛ pɛ n ma a, fa nsunsuanso a ɛwɔ mu no ma no. Nhwɛso1: Akwan a wɔfa so de adansedie a ɛyɛ pɛ ne nea ɛyɛ anane a ɛwɔ mu no. Nhwɛso1: Akwan a wɔfa so de adansedie a ɛyɛ anane a ɛwɔ mu no yɛ 1, 2, 3. emu baako yɛ anane, na emu mmienu yɛ anane. Nhwɛso2: Akwan a wɔfa so de adansedie a ɛyɛ anane a ɛwɔ mu no yɛ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. emu nnan yɛ anane, na emu nsia yɛ anane. Hyɛ no nsow: 1. 1 <= n <= 10^3 2. adansedie a wɔfa so de adansedie a ɛyɛ anane ne nea ɛyɛ anane no na wɔde aba. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,twi_Latn,python,"
def count_nums(arr):
    """"""Kyerɛw adwuma count_nums a ɛfa integers na ɛde element dodow a ɛgyina hɔ ma digit sum > 0 ba. Sɛ number yɛ negative a, ɛnneɛ ne signed digit a edi kan bɛyɛ negative: e.g. -123 wɔ signed digit -1, 2, ne 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,twi_Latn,python,"
def move_one_ball(arr):
    """"""Sɛ w'anya 'arr' a ɛkura integers N arr[1], arr[2], ..., arr[N] a, wɔbɛhyehyɛ no so. Wo adwuma ne sɛ wobɛhu sɛ ɛyɛ yie sɛ wobɛhyehyɛ no so a ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ sɛ ɛrenyɛ""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,twi_Latn,python,"
def exchange(lst1, lst2):
    """"""W'asɔ no mu no, wobɛfa adwuma bi a ɛfa nnumeroɔ mmienu a ɛwɔ din din mu, na ɛbɛkyerɛ sɛ ɛyɛ a wobɛtumi asesa emu nnoɔma ama emu biara ayɛ nnumeroɔ a ɛbom. Ɛnsɛ sɛ wɔhyɛ nnumeroɔ a wɔsesa no mu biara so. Sɛ ɛyɛ a wobɛtumi asesa emu biara mu nnoɔma ama emu biara mu ayɛ pɛ a, fa ""YES"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO"" na ɛsan fa ""NO""""""""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,twi_Latn,python,"
def histogram(test):
    """"""Sɛ wɔde nkyerɛwde a ɛwɔ hɔ no bi a ɛkyerɛ sɛ ɛyɛ nkrataa a wɔatwa no ntam a, yɛ nkyerɛwde a ɛwɔ hɔ no mu nea ɛtaa yɛ mpɛn pii no. Sɛ nkrataa bebree wɔ hɔ a, yɛ ne nyinaa.""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,twi_Latn,python,"
def reverse_delete(s,c):
    """"""Yɛ de nsɛmfua mmienu s ne c ama yɛn, ɛsɛ sɛ yɛ yi nsɛmfua a ɛwɔ s mu a ɛne nsɛmfua biara a ɛwɔ c yɛ pɛ no nyinaa, na afei yɛ hwɛ sɛ nea efi mu ba no yɛ palindrome anaa. Sɛ ɛkenkan no yɛ pɛ a, yɛfrɛ no palindrome. Ɛsɛ sɛ yɛ san de tuple a nea efi mu ba ne True/False ma yɛ hwɛ. S = ""abcde"", c = ""ae"" a, nea efi mu ba ne ('bcd',False) S = ""abcdef"", c = ""b"" a, nea efi mu ba ne ('acdef',False) S = ""abcdedcba"", c = ""ab"", nea efi mu ba ne ('cdedc',True)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,twi_Latn,python,"
def odd_count(lst):
    """"""Sɛ wɔde ahoma a ahoma biara yɛ nkontabuo a, fa ahoma no bi ma no. Ɛsɛ sɛ nea ɛwɔ mu biara yɛ ""nkontabuo a ɛnnyɛ pɛ a ɛwɔ ahoma a wɔde aba no mu"". a ɛsɛ sɛ wɔde nkontabuo a ɛnnyɛ pɛ a ɛwɔ ahoma a wɔde aba no mu no di ananmu. >>> odd_count['1234567']) [""nkontabuo a ɛnnyɛ pɛ a ɛwɔ 4n mu a 4n yɛ 4n.""] >>> odd_count['3',""111111""]) [""nkontabuo a ɛnnyɛ pɛ a ɛwɔ 1n mu a 1n yɛ 1n."", ""nkontabuo a ɛnnyɛ pɛ a ɛwɔ 8n mu a 8n yɛ 8n.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,twi_Latn,python,"
def minSubArraySum(nums):
    """"""Sɛ wode anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a enni hwee no mu no yɛ adwuma a, hwehwɛ nea ɛboro saa.""""""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,twi_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Woama wo abura ahorow a ɛyɛ ntenten ntenten. Nkyekyɛmu biara gyina hɔ ma abura biako, na 1 biara a ɛwɔ ɔfã bi mu gyina hɔ ma nsu biako. Abura biara wɔ bokiti a ɛne no hyia a wobetumi de atwe nsu afi mu, na bokiti no nyinaa wɔ ahoɔden koro. Wo adwuma ne sɛ wode bokiti no bɛpra abura no. Fa mpɛn dodow a ehia sɛ wode bu nkuku no gu fam no.""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,twi_Latn,python,"
def sort_array(arr):
    """"""Wɔ saa Kata yi mu no, ɛsɛ sɛ wo siesie nnipakan a ɛnnyɛ negative integers no sɛnea wɔn binary nkyerɛwde no mu nnipa dodow te, wɔ asorɔdin a ɛrekɔ soro mu. Sɛ nnipa dodow te saa ara a, siesie wɔ ɔpepepem so. Ɛsɛ sɛ wɔde di dwuma saa: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,twi_Latn,python,"
def select_words(s, n):
    """"""Sɛ wɔde string s ne natural number n ama wo a, wɔama wo dwumadi sɛ yɛ adwuma bi a ɛde nsɛmfua a ɛwɔ string s mu nyinaa a ɛwɔ nsonsonoe pɛpɛɛpɛ a n wɔ mu no bɛsan aba, na nsɛmfua yi ada wɔ string s mu. Sɛ string s yɛ hwee a, ɛnde ɛsɛ sɛ adwuma no de krataa hunu bi na ɛba. Hyɛ no nsow: wubetumi aka sɛ input string no mu nsɛmfua ne ntweree nko ara na ɛwɔ mu.""""""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,twi_Latn,python,"
def get_closest_vowel(word):
    """"""Woama wo asɛmfua. Wo adwuma ne sɛ wobɛhu ɛnne a ɛbɛn no paa a ɛda ɛnne nkyerɛwde abien ntam wɔ asɛmfua no nifa so (ɔkyerɛw bere a ɛtrɛw). ɛnne nkyerɛwde a ɛwɔ mfiase ne awiei no nka ho. Sɛ woannya ɛnne nkyerɛwde biara a ɛfata wɔ asɛmfua no atifi hɔ no mu a, dan ahoma a ɛnni hwee. Wubetumi aka sɛ ɛnne nkyerɛwde a wɔde ama no mu no yɛ Borɔfo nkyerɛwde nko ara.""""""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,twi_Latn,python,"
def match_parens(lst):
    '''Wode ahoma mmienu bi a, ahoma mmienu no nyinaa yɛ ntweasoɔ a abue '(' anaa ntweasoɔ a abue ') ' nko ara. Wo adwuma ne sɛ wobɛhwɛ sɛ ɛyɛ yie sɛ wobɛfa ahoma mmienu no abɔ ho, na nea ɛbɛba no ayɛ ɔhyeɛ pa. Sɛ ɔhyeɛ S yɛ yie a, na sɛ ɔhyeɛ no nyinaa yɛ pɛ a. Sɛ nhwɛsoɔ: ɔhyeɛ '((())' yɛ yie, na ɔhyeɛ '())' nyɛ yie. Sɛ ɔhyeɛ pa bi wɔ hɔ a, fa 'Yiw' na fa 'Dabi' na fa 'Dabi' na fa.'''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,twi_Latn,python,"
def maximum(arr, k):
    """"""Sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ, sɛ wode anohyetoɔ a ɛne sɛ wode anohyetoɔ a ɛne sɛ wode anohyetoɔ a ɛne sɛ wode anohyetoɔ a ɛne sɛ wode anohyetoɔ a ɛne sɛ wode anohyetoɔ a ɛne sɛ wode anohyetoɔ a ɛne sɛ wode anohyetoɔ a ɛne sɛ wode anohyetoɔ a ɛne sɛ wode a ɛne sɛ wode anohyetoɔ a ɛne sɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ ɛ""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,twi_Latn,python,"
def solution(lst):
    """"""Sɛ wode integers a ɛnnyɛ hwee bɛkyerɛ a, fa nneɛma a ɛnnyɛ pɛ a ɛwɔ ntentan mu no nyinaa ka ho.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,twi_Latn,python,"
def add_elements(arr, k):
    """"""Sɛ wɔde anohyetoɔ a ɛnyɛ hunu a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a ɛne anohyetoɔ a""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,twi_Latn,python,"
def get_odd_collatz(n):
    """"""Sɛ wode adansedeɛ a ɛyɛ papa n ma a, fa ahosiesie a wɔayi mu a emu biara wɔ ne nsunsuanso a ɛyɛ anansesɛm no ma. Collatz nsunsuanso no yɛ anansesɛm a ɛwɔ akontaabu mu a ɛfa nsunsuanso a wɔayi mu sɛ: fi ase wɔ adansedeɛ a ɛyɛ anansesɛm biara n so. Afei wɔfa nsunsuanso biara a ɛwɔ kan nsunsuanso no mu sɛ: sɛ nea edi kan no yɛ anansesɛm a, nea edi hɔ no yɛ nea edi kan no fã. Sɛ nea edi kan no yɛ anansesɛm a, nea edi hɔ no yɛ nea edi kan no mmɔho 3 ka ho 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,twi_Latn,python,"
def valid_date(date):
    """"""Ɛsɛ sɛ w'akyerɛw adwuma bi a ɛbɔ da a wɔde ama no ho dawuru na ɛde True ma sɛ da no yɛ nokware anaa False. Da no yɛ nokware sɛ nea edidi so yi nyinaa yɛ nokware: 1. Da no yɛ nokware. 2. Nna dodow no nyɛ nea ɛboro nnafua 31 wɔ asram 1,3,5,7,8,10,12 mu. Na nna dodow no nyɛ nea ɛboro nnafua 30 wɔ asram 4,6,9,11 mu. Na nna dodow no nyɛ nea ɛboro nnafua 1 anaa nea ɛboro nnafua 29 wɔ ɔsram no mu. 2. 3. Ɔsram no nyɛ nea ɛboro nnafua 1 anaa nea ɛboro nnafua 12. 4. Da no yɛ nea edi so yi: mm-dd-yyyy-mm: valid_date (ɔda a wɔde hyɛ da) => '03-11-2000') => True_valid_date (ɔda a wɔde hyɛ da) => False_valid_date (ɔda a wɔde hyɛ da) => '04-01-2040') => False_valid_date (ɔda a wɔde hyɛ da) => True_valid_date (ɔda a wɔde hyɛ da) => 06/04/2020 => False""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,twi_Latn,python,"
def split_words(txt):
    '''Sɛ wɔde nsɛmfua bi a ɛwɔ hɔ ma a, fa nsɛmfua a wɔakyekyɛ wɔ baabi a ɛhɔ yɛ fitaa so, sɛ baabi a ɛhɔ yɛ fitaa biara nni hɔ a ɛsɛ sɛ wokyekyɛ wɔ ntweaseɛ so ',' sɛ ntweaseɛ biara nni hɔ a ɛsɛ sɛ wokyekyɛ ntweaseɛ a ɛwɔ hɔ no so wɔ nkyerɛwde no mu, ord ((('a') = 0, ord (b') = 1, ... ord (z') = 25 Mfatoho ahorow split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words"")'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,twi_Latn,python,"
def is_sorted(lst):
    '''Sɛ wɔama wo din a, fa di dwuma sɛ nea ɛreyɛ adwuma no yɛ adwuma anaa ɛnnyɛ adwuma. Sɛ wo wɔ din a ɛreyɛ adwuma no, fa di dwuma sɛ nea ɛreyɛ adwuma no yɛ adwuma anaa ɛnnyɛ adwuma. Sɛ wo wɔ din a ɛreyɛ adwuma no, fa di dwuma sɛ nea ɛreyɛ adwuma no yɛ adwuma anaa ɛnnyɛ adwuma.'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,twi_Latn,python,"
def intersection(interval1, interval2):
    """"""Sɛ nhwɛso no, wɔama wo ntem abien, a ntem biara yɛ integers abien. Sɛ nhwɛso no, ntem = (fiase, awiei) = (1, 2). Ntem a wɔde ama no yɛ akyere a ɛkyerɛ sɛ ntem no (fiase, awiei) fa mfiase ne awiei nyinaa. Wɔ bere biara a wɔde ama no mu no, wogye di sɛ ne mfiase yɛ ketewa anaa ɛtesɛ ne awiei. Wo adwuma ne sɛ wobɛhu sɛ ntem abien yi ntem no ntem no tenten yɛ prime number. Sɛ nhwɛso no, ntem no ntem (1, 3), (2, 4) yɛ (2, 3) a ne tenten yɛ 1, a ɛnnyɛ prime number. Sɛ ntem no tenten yɛ prime number a, dan ""YES"", anyɛ saa a dan ""NO"". Sɛ ntem abien no ntem a, dan ""NO"". [input/output] samples: intersection (((1, 2), (2, 3) ==> ""intersection ("",), ""NO"", ""intersection ("",), ""NO"", ""intersection ("", ""), ""intersection ("", ""), ""intersection ("", ""), ""intersection ("", ""), ""intersection ("", ""), ""intersection ("", ""), ""intersection ("", ""), ""intersection ("", ""interse"", ""), ""intersection ("", ""interse"", ""), ""interse"", ""interse"", ""interse"", ""), ""interse"", ""interse"", "" ("", ""interse"", ""), ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", """", ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", ""interse"", ""inter"", ""interse"", ""interse"", ""inter"", ""inter"", ""interse"", ""inter"", ""inter"", ""interse"", ""interse"", ""inter"", ""inter)""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,twi_Latn,python,"
def prod_signs(arr):
    """"""Wode akontaahyɛde a ɛboro so a ɛboro so a ɛboro so a wɔde adi dwuma wɔ ɔfã biara mu no ka ho.""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,twi_Latn,python,"
def minPath(grid, k):
    """"""Sɛ wohwɛ grid a ɛwɔ ahorɔw N ne mpanin N (N >= 2) na ɛwowɔ akontaahyɛde k a, nea ɛwɔ grid no mu biara wɔ ne ne ne ne ne. Enti, nea ɛwɔ range [1, N * N] a ɛwowɔ akontaahyɛde biara mu no yɛ pɛ. Wobehu ɔkwan a ɛware k wɔ grid no mu. Wubetumi afi ase wɔ cell biara mu, na wɔ ɔkwan biara mu no, wubetumi akɔ nkontaahyɛn a ɛbɛn wo no mu biara mu, kyerɛ sɛ, wubetumi akɔ nkontaahyɛn a ɛwowɔ akontaahyɛn a ɛwɔ hɔ no mu. Hyɛ no nsow sɛ ɔkwan a ɛware k no kyerɛ sɛ wobɛkɔ nkontaahyɛn k (a ɛnnyɛ sɛ emu biara yɛ soronko). WUNTUMI nkɔ grid no mu. Wubetumi abu kwan A (a ne tenten yɛ k) sɛ akontaahyɛde a ɛware sen kwan B (a ne tenten yɛ k) sɛ yɛhyehyɛ akontaahyɛde a wɔahyehyɛ no mu wɔ nkontaahyɛn a ɛwɔ A ne B (ma yɛfrɛ no lA_st ne lA_st), na akontaahyɛde a ɛware k no yɛ kasa mu no yɛ pɛ, na ɛware kyɛn nea ɛwɔ akontaahyɛde k wɔ grid no mu. Wubetumi afi ase wɔ grid no mu. Wubetumi afi ase wɔ cell biara mu, na woatumi akɔ nkontaahyɛn k mu, kyerɛ sɛ, na akontaahyɛn no mu no mu biara mu. Wubɛn no mu no yɛ pɛ. Wubɛn akontaahyɛn a ɛwɔ akontaahyɛn k. Wubɛn no yɛ k. Wubɛn no yɛ k. Wubɛn a ɛwɔ grid no mu no mu no yɛ pɛ. Wubɛn so no yɛ k. Wubɛn so no yɛ k. Wubɛn so no yɛ k. Wubɛn so no yɛ k = 1, k, na wohwɛ nea ɛwɔ grid no yɛ k.""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,twi_Latn,python,"
def tri(n):
    """"""Obiara nim Fibonacci a w'akyerɛ ase wɔ mfitiaseɛ no mu no. Nanso nea nnipa nnim ne Tribonacci a w'akyerɛ ase wɔ mfitiaseɛ no mu no. Tribonacci a w'akyerɛ ase wɔ mfitiaseɛ no mu no yɛ: tri(1) = 3 tri(n) = 1 + n / 2, sɛ n yɛ mpo a. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), sɛ n yɛ anohyeto. Sɛ nhwɛso no: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Wɔama wo akontaahyɛde a ɛnnyɛ negative, a ɛsɛ sɛ wosan de n + 1 a edi kan no nyinaa ma no.""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,twi_Latn,python,"
def digits(n):
    """"""Sɛ wode adansedie a ɛyɛ pɛ n ama a, fa nnidisoɔ a ɛyɛ anohyetoɔ no. Fa 0 ma sɛ nnidisoɔ no nyinaa yɛ pɛ. Sɛ nhwɛso: nnidisoɔ (n) == 1 nnidisoɔ (n) == 0 nnidisoɔ (n) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,twi_Latn,python,"
def is_nested(string):
    '''Yɛ adwuma a yɛfa ntweaa a ntweaa a ɛkura ntweaa a ɛtweaa mu no bi. Sɛ na ntweaa a ɛtweaa mu no bi wɔ hɔ a, ɛsɛ sɛ yɛsan de True ma. is_nested'[[]]') â -> True is_nested'[[]]]]]]][[[[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,twi_Latn,python,"

def sum_squares(lst):
    """"""Wode wo ho ato nkontabuo so. Wode wo ho ato nkontabuo no so a, ɛsɛ sɛ wosan de nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no mu nkontabuo no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no no""""""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,twi_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Yɛ adwuma bi a sɛ nea etwa to wɔ nkyerɛwde a ɛwɔ ahoma bi mu yɛ nkyerɛwde a ɛwɔ nkyerɛwde no mu na ɛnnyɛ asɛmfua bi a, ɛyɛ True na sɛ ɛnyɛ saa a ɛyɛ False. Hyɛ no nsow: ""asɛmfua"" yɛ nkyerɛwde a wɔde mpaawa atetew mu.'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,twi_Latn,python,"
def can_arrange(arr):
    """"""Yɛ adwuma a ɛde kyerɛwde a ɛboro so ma no. Sɛ saa nkyerɛwde no nni hɔ a, yɛ de kyerɛwde a ɛboro so no.""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,twi_Latn,python,"
def largest_smallest_integers(lst):
    '''Yɛ adwuma bi a ɛde tuple (a, b) ba, baabi a 'a' yɛ negative integers no mu kɛse, na 'b' yɛ positive integers no mu ketewaa wɔ list no mu. Sɛ negative anaa positive integers biara nni hɔ a, fa None ma no. Sekai: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None)'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,twi_Latn,python,"
def compare_one(a, b):
    """"""Yɛ adwuma a ɛgye integers, floats, anaa strings a ɛgyina hɔ ma real numbers, na ɛde no kɛse no ma wɔ ne variable type no mu. Sɛ ne values yɛ pɛ a, ɛde None ma. Hyɛ no nso: Sɛ wɔde real number yɛ string a, floating point no betumi ayɛ . anaa , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,twi_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Hwehwɛ sɛ ebia wɔtumi kyerɛw ɔpepepem a wɔde ama no sɛ nnipa nnan a wɔn dodow yɛ pɛ a wɔn dodow yɛ pɛ a wɔn dodow yɛ pɛ no ano.""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,twi_Latn,python,"
def special_factorial(n):
    """"""Brazilfo de no yɛ: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! baabi a n > 0 Sɛ nhwɛso: >>> special_factorial(4) 288 Adwuma no bɛgye akontaahyɛde sɛ input na ɛsɛ sɛ ɛde saa akontaahyɛde yi special factorial no ma. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,twi_Latn,python,"
def fix_spaces(text):
    """"""_Nhwɛso-3ing a, fa nsesa nyinaa hyɛ ase, na sɛ string no wɔ nsesa a ɛboro 2 a edi hɔ a, fa nsesa a edi hɔ no nyinaa hyɛ - fix_spaces ((""Example"") == ""Example"" fix_spaces ((""Example1"") == ""Example_1"" fix_spaces ((""Example2"") == ""_Example_2"" fix_spaces ((""Example 3"") == ""_Example-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,twi_Latn,python,"
def file_name_check(file_name):
    """"""Yɛ adwuma bi a fa ɔtweaseɛ a egyina hɔ ma file din, na sɛ ɔtweaseɛ no din yɛ papa a, ɛde 'Yiw' ma, na sɛ ɛnte saa a ɛde 'Dabi' ma. Sɛ nea edidi so yi nyinaa ba a, ɛno nkutoo na wobegye file din sɛ ɛyɛ papa: - Ɛnsɛ sɛ ɛboro ntwerɛfua mmiɛnsa ('0'-'9') wɔ file no din mu. - File no din no mu no, ɛkura dot baako pɛ '.' - Substring a ɛwɔ dot no anim no, ɛnsɛ sɛ ɛyɛ hunu, na ɛsɛ sɛ efi ase wɔ Latin nkyerɛwde alphapet ('a'-'z' ne 'A'-Z'). - Substring a ɛwɔ dot no akyi no, ɛsɛ sɛ ɛyɛ nea edidi so yi mu baako: ['txt', 'exe', 'lld'] Examples: file_name_check""{example.txt.t"") # => 'Yiw' => 'file_name_check""{example.dll1"") # => 'Dabi' (name no, ɛsɛ sɛ efi ase wɔ Latin nkyerɛwde alphapet)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,twi_Latn,python,"


def sum_squares(lst):
    """""""" Eyi bɛfa integers. Sɛ entries nyinaa wɔ list no mu a, function no bɛtwe integer entry no square sɛ ne index yɛ 3 bebree na sɛ ne index yɛ 4 bebree na ɛnyɛ 3 bebree a, function no bɛ cube integer entry no.""""""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,twi_Latn,python,"
def words_in_sentence(sentence):
    """"""Woama wo string a ɛkyerɛ asɛm bi, asɛm no mu nsɛm bi a wɔde mpaawa atetew mu, na ɛsɛ sɛ wosan de string a ɛkyerɛ nsɛmfua a ɛwɔ mfitiaseɛ no mu, a ne tenten yɛ nsɛntitiriw, nsɛmfua a ɛwɔ mfitiaseɛ no mu no yɛ pɛ. Example1: Input: sentence = ""This is a test"" Output: ""is"" Example2: Input: sentence = ""let go for swimming"" Output: ""go for"" Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,twi_Latn,python,"
def simplify(x, n):
    """"""Wo adwuma ne sɛ wobɛte dwuma bi ase a ɛbɛma asɛmfua x * n ayɛ tiawa. Saa adwuma no de True ma sɛ x * n yɛ ɔkra a, na False ma no. Sɛ x * n yɛ ɔkra a, na ɛwɔ ɔkra a, na ɛwɔ ɔkra a, na ɛwɔ ɔkra a, na ɛwɔ ɔkra a, na ɛwɔ ɔkra a, na ɛwɔ ɔkra a, na ɛwɔ ɔkra a, ɛwɔ ɔkra a, na ɛwɔ ɔkra a, ɛwɔ ɔkra a. Wubetumi agye atom sɛ x, ne n yɛ ɔkra a, na wɔnni hwee sɛ ɔkra a. simplify ""1/5"", ""5/1"") = True simplify ""1/6"", ""2/1"") = False simplify ""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,twi_Latn,python,"
def order_by_points(nums):
    """"""Kyerɛw adwuma bi a ɛhwɛ sɛ wode anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea nea""""""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,twi_Latn,python,"
def specialFilter(nums):
    """"""Kyerɛw adwuma a ɛfa akontaahyɛde sɛ input na ɛde nneɛma a ɛwɔ akontaahyɛde no mu a ɛboro 10 na emu akontaahyɛde a edi kan ne nea etwa to nyinaa yɛ anohyeto (1, 3, 5, 7, 9). Sɛ nhwɛso: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,twi_Latn,python,"
def get_max_triples(n):
    """"""Wama wo akontaahyɛde a ɛyɛ papa n. Ɛsɛ sɛ woyɛ akontaahyɛde a ɛware n. A[i] = i * i - i + 1 biara a, a[i] = i * i + 1 no. Ma a[i] a [i] < j < k, a[i] + a[j] + a[k] a ɛyɛ 3 no mmɔho no dodow.""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,twi_Latn,python,"
def bf(planet1, planet2):
    '''Emu wɔ okyinnsoromma awotwe wɔ yɛn owia nhyehyɛe mu: nea ɛbɛn owia no ne Mercury, nea edi hɔ ne Venus, afei Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Kyerɛw adwuma a fa okyinnsoromma din mmienu sɛ ahoma planet1 ne planet2. Adwuma no bɛsan de tuple a okyinnsoromma nyinaa a wɔn akwan wɔ planet1 ne planet2 ntem mu no aba, a wɔakyekyere no sɛnea ɛbɛn owia. Adwuma no bɛsan de tuple hunu aba sɛ okyinnsoromma 1 anaa planet2 nyɛ okyinnsoromma din a ɛteɛ.'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,twi_Latn,python,"
def sorted_list_sum(lst):
    """"""Kyerɛw adwuma a wogye ahoma a ɛwɔ din din mu sɛ parameter, na eyi ahoma a wɔn tenten yɛ anohyetoɔ no, na ɛde nea ɛpue no ma wɔ ne din mu. Nkyerɛwee no yɛ ahoma a ɛwɔ din mu bere nyinaa na ɛnyɛ nnidisoɔ, na ebetumi aka nsɛm a ɛboro so. Sɛ nsɛmfua no mu biara tenten yɛ a, ɛsɛ sɛ ɛpue kɔ soro, na ɛsɛ sɛ wode saa mmara no yɛ adwuma. Sɛ nsɛmfua no mu mmienu tenten yɛ pɛ a, fa alphabet no yɛ adwuma. Adwuma no de ahoma a ɛwɔ din mu no yɛ adwuma wɔ ne din mu. Wubetumi aka sɛ nsɛmfua no nyinaa tenten yɛ pɛ. Sɛ nhwɛso: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,twi_Latn,python,"
def x_or_y(n, x, y):
    """"""Nhwɛso: sɛ x_or_y{7, 34, 12) == 34 sɛ x_or_y{15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,twi_Latn,python,"
def double_the_difference(lst):
    '''Sɛ wɔama wo akontaahyɛde a, fa nea ɛwɔ akontaahyɛde no mu a ɛnnyɛ pɛ no mprenu nkyekyɛmu ka ho. Nkan a ɛnnyɛ mmaako mmaako no.'''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,twi_Latn,python,"
def compare(game,guess):
    """"""Sɛ w'adwene yɛ wo sɛ biribi a woatwɛn akyɛ no aba a, ɛyɛ a wote nka sɛ woadi ho dwuma. W'adwene ne wo nkate a wowɔ saa bere no yɛ nea ɛsɛ sɛ wode toto ho. Wo botae ne sɛ wobɛhu sɛ obi adi mfomso wɔ nsunsuanso a ɛbaa nsonoe ahorow mu no ho. Wɔama wo nsunsuanso ne nsunsuanso a ɛbaa nsonoe ahorow mu no mu abien a ne tenten yɛ pɛ, na kyerɛwsɛm biara kyerɛ sɛ ɛbaa nsonoe. Fa nsunsuanso a ne tenten yɛ pɛ bi a ɛkyerɛ sɛ nsunsuanso biara fi akyiri anaa ɛbɛn no. Sɛ wɔadi ho dwuma yiye a, ne bo yɛ 0, na sɛ ɛnte saa a, ne bo yɛ nsonsonoe a ɛda nsunsuanso no ne nsunsuanso no ntam.""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,twi_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Wobɛhu class (a string) din ne extensions. Sɛ wɔde extensions no bɛhyɛ class no mu a, wobɛhu sɛ: ma CAP nyɛ nkyerɛwde akɛseɛ a ɛwɔ extension no din mu, na ma SM nyɛ nkyerɛwde nketewa a ɛwɔ extension no din mu, na ɛno na ɛkyerɛ sɛnea asɛmfua CAP - SM yɛ den. Ɛsɛ sɛ wuhu className.StrongestExtensionName. Sɛ wowɔ extensions mmienu anaa nea ɛboro saa a, ɛsɛ sɛ wofa nea edi kan wɔ list no mu. Sɛ nhwɛso, sɛ wɔde ""Slices"" ama wo sɛ class ne extensions no din: ['SEviviRNGCliES', 'Cheese', 'StuFfed'] a, ɛsɛ sɛ wofa 'Slices.SEviRNGCliES' na wo san de 'SliRNGCliES' na ɛba, efisɛ 'SliRNGCliES' ne ne strongest extension. (Extension: 'AA_Class' - StrongestExtension: 'AA_Class'), (Example: 'AA_Beats' StrongestExtension'), 'AA_Class' - StrongestExtension.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,twi_Latn,python,"
def cycpattern_check(a , b):
    """"""Wode nsɛmfua 2 ma wo. Ɛho hia sɛ wosan True sɛ asɛmfua a ɛtɔ so mmienu anaa ne nsunsuanso biara yɛ substring wɔ asɛmfua a edi kan no mu cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,twi_Latn,python,"
def even_odd_count(num):
    """"""Sɛ wɔde integer bi ma a, yɛ tuple a ɛwɔ numeral a ɛboro so ne nea ɛboro so.""""""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,twi_Latn,python,"
def int_to_mini_roman(number):
    """"""Sɛ wode ɔkra a ɛyɛ pa ma a, fa Roman numerals a ɛne no yɛ pɛ sɛ string, na fa no to hɔ ma no. Nhwɛso: 1 <= num <= 1000""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,twi_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Sɛ n'afanu no nyinaa yɛ ntweaa a, nea ɛkyerɛ ne sɛ, ntweaa no mu biara yɛ ntweaa a ne nan yɛ sɛntenten anaa ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa a ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛtweaa ɛ ɛ ɛtweaa'''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,twi_Latn,python,"
def find_max(words):
    """"""Kyerɛw adwuma a ɛgye ntweaa a ɛwɔ din din mu. Nkyerεkyerεmu no kura nsɛmfua ahorow. Fa asɛmfua no a ne nkyerɛwde dodow no ara yɛ soronko no san. Sɛ ntweaa bebree wɔ nkyerɛwde dodow a ɛsen biara a, fa nea edi kan wɔ nkyerɛwde mu no san.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,twi_Latn,python,"
def eat(number, need, remaining):
    """"""Woyɛ ɔsebɔ a ɔkɔm de no, na woadi nkwan kakra dedaw, nanso seesei ɛsɛ sɛ wunya nkwan pii na ama woadi da no mu aduan no awie. ɛsɛ sɛ wosan de nea edi so yi ma [nkwan dodow a wodii wɔ w'aduan akyi, nkwan dodow a ɛkaa wɔ w'aduan akyi ] sɛ nkwan nnɔɔso a, wobɛdi nkwan a aka no nyinaa, nanso ɔkɔm de wo. Sɛnkyerɛnne: *di ((5, 6, 10) -> [11, 4] *di ((4, 8, 9) -> [12, 1] *di ((1, 10, 10) -> [11, 0] *di ((2, 11, 5) -> [7, 0] Nsesae: @number: integer the number of carrots that you have eaten. @need: integer the number of carrots that you need to eat. @remaining: integer the number of remaining carrots that exist in stock Constrain: *0= <= 0 *0= <= 1000 *0= <= 1000 remaining needs <= 1000 Have fun = 1000:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,twi_Latn,python,"
def do_algebra(operator, operand):
    """"""Sɛ wode operand ne operator ka ho a, nea edi kan no yɛ algebra mu adwuma, na nea ɛtɔ so no yɛ integers. Fa list abien no yɛ algebra mu adwuma na fa kyerɛ sɛ nea ɛkyerɛ no yɛ no. Basic algebra operation: Addition (+) Subtraction ( - ) Multiplication ( *) Floor division ( //) Exponentiation ( ** Example): operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 Hyɛ no nsow: Operand no tenten yɛ pɛ sɛ operand no tenten a wɔatwa no so. Operand no yɛ integers a ɛnyɛ negative. Operator no tenten yɛ pɛ sɛ operator baako, na list no tenten yɛ pɛ sɛ operand mmienu.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,twi_Latn,python,"
def solve(s):
    """"""Wo de string s. sɛ s[i] yɛ letter a, dan ne case no firi lower kɔ upper anaa vice versa, anyɛ saa a ma no saa ara. sɛ string no nni letters biara a, dan string no. ɛsɛ sɛ function no san de string no a ɛde ba no. Examples solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,twi_Latn,python,"
def string_to_md5(text):
    """"""Sɛ wɔde 'text' ahoma ama a, fa n'ahoma a ɛne md5 hash yɛ pɛ no ma no. Sɛ 'text' yɛ ahoma a ɛnni hwee a, fa None ma no. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,twi_Latn,python,"
def generate_integers(a, b):
    """"""Sɛ wode anokwafo a wɔn ho yɛ anika a, fa a wɔabobɔ no kɔ a, na fa a wɔabobɔ no kɔ no kɔ.""""""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
