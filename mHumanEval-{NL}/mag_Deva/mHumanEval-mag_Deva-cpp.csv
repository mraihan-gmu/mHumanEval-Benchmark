task_id,nl,pl,prompt,canonical_solutions,test
HumanEval/0,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// अगर कोनो संख्या के दिशानिर्देश देल गेल हई, त जांच करई कि की कोनो दूगो संख्या दिशानिर्देश देल गेल सीमा से एक दूसर के करीब हई। >>> has_close_elements{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}{}{}{}{}}{}{}}{}{}}{}{}}{}{}}{}}{}{}}{}}{}{}}{}}{}}{}{}}{}}{}}{}}{}{}}{}{}{}}}{}{}}}{}{}}{}}{}{}}}{}}{}}}}{}{}{}}}{}}{}}{}}{}}}{}}}{}}{}{}}{}{}}}}}{}}{}}}{}{}}}}{}{}}}}}{}}}}{}{}}}}}{}}}{}{}{}}{}}}}}{}{}}}}{}}{}}{}}}}}{}{}}}}{}{}}}{}{}}}}{}}{}}}}{}}}{}}}}}{}{}}{}}}{}}{}}{}}}{}}}}}
bool has_close_elements(std::vector<float> numbers, float threshold) {
","bool has_close_elements(std::vector<float> numbers, float threshold) {
    std::sort(numbers.begin(), numbers.end());  // Sort the numbers in ascending order
    for (size_t i = 1; i < numbers.size(); i++) {
        if (std::abs(numbers[i] - numbers[i - 1]) < threshold) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = has_close_elements;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));
}
"
HumanEval/1,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इनपुट में एगो स्ट्रिंग होव हई जेकरा में नेस्टेड कोष्ठक के कैगो समूह होव हई। एकर उद्देश्य ऊ समूह के अलग-अलग स्ट्रिंग में अलग करनाई हई अउर ओकर वेक्टर के वापस करनाई हई। अलग-अलग समूह संतुलित हई (प्रत्येक खुलल ब्रैकेट ठीक से बंद हई) अउर एक दूसर के भीतर नेस्टेड ना होई हई। इनपुट स्ट्रिंग में कोनो रिक्त स्थान के अनदेखा कर दी। >>> separate_paren_groups (((""( ) (() (()))))))) (std::vector<std::string>({(std::string) "")"", (((stdstring)::""(())"", (std::string) ""((()))))
std::vector<std::string> separate_paren_groups(std::string paren_string) {
","std::vector<std::string> separate_paren_groups(std::string paren_string) {
    std::vector<std::string> groups;
    std::string current_group;
    int balance = 0;

    for (char ch : paren_string) {
        if (ch == ' ') continue;  // Ignore spaces

        current_group += ch;
        if (ch == '(') {
            balance++;
        } else if (ch == ')') {
            balance--;
            if (balance == 0) {  // Found a balanced group
                groups.push_back(current_group);
                current_group.clear();
            }
        }
    }

    return groups;
}","}
int main() {
    auto candidate = separate_paren_groups;
    assert(candidate((""(()()) ((())) () ((())()())"")) == (std::vector<std::string>({(std::string)""(()())"", (std::string)""((()))"", (std::string)""()"", (std::string)""((())()())""})));
    assert(candidate((""() (()) ((())) (((())))"")) == (std::vector<std::string>({(std::string)""()"", (std::string)""(())"", (std::string)""((()))"", (std::string)""(((())))""})));
    assert(candidate((""(()(())((())))"")) == (std::vector<std::string>({(std::string)""(()(())((())))""})));
    assert(candidate((""( ) (( )) (( )( ))"")) == (std::vector<std::string>({(std::string)""()"", (std::string)""(())"", (std::string)""(()())""})));
}
"
HumanEval/2,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो सकारात्मक फ्लोटिंग पॉइंट संख्या देल गेल हई, एकरा पूर्णांक भाग (देल गेल संख्या से छोट सबसे बड़का पूर्णांक) आउर दशमलव (बाकी भाग हमेशा 1 से छोट) में विभाजित कैल जा सकई हई। संख्या के दशमलव भाग लौटाई। >>> truncate_number((3.5f)) (0.5f)
float truncate_number(float number) {
","float truncate_number(float number) {
    return number - std::floor(number);
}","}
int main() {
    auto candidate = truncate_number;
    assert(candidate((3.5f)) == (0.5f));
    assert(candidate((1.25f)) == (0.25f));
    assert(candidate((123.0f)) == (0.0f));
}
"
HumanEval/3,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके पास एक बैंक खाता पर जमा और निकासी संचालन का एक वेक्टर दिया जाता है जो शून्य शेष से शुरू होता है। आपका कार्य यह पता लगाना है कि क्या किसी बिंदु पर खाता शेष शून्य से नीचे गिर जाता है, और उस बिंदु पर फ़ंक्शन को true लौटना चाहिए। अन्यथा यह false लौटना चाहिए। >>> below_zero((std::vector<long>({long) 1, (long) 2, (long) 3}))) (false) >>> below_zero((std::vector<long>({long) 1, (long) 2, (long) -4, (long) 5}))) (true)
bool below_zero(std::vector<long> operations) {
","bool below_zero(std::vector<long> operations) {
    long balance = 0;
    for (long op : operations) {
        balance += op;
        if (balance < 0) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = below_zero;
    assert(candidate((std::vector<long>())) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-4, (long)5, (long)6}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));
}
"
HumanEval/4,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इनपुट संख्याओं के एक दिए गए वेक्टर के लिए, इस डेटासेट के माध्य के आसपास औसत पूर्ण विचलन की गणना करें। औसत पूर्ण विचलन प्रत्येक तत्व और एक केंद्र बिंदु (इस मामले में माध्य) के बीच औसत पूर्ण अंतर हैः एमएडी = ∆x - x_mean । >>> mean_absolute_deviation (((std::vector<float>({(float) 1.0f, (float) 2.0f, (float) 3.0f, (float) 4.0f}))) (1.0f)
float mean_absolute_deviation(std::vector<float> numbers) {
","float mean_absolute_deviation(std::vector<float> numbers) {
    float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f) / numbers.size();
    float mad = std::accumulate(numbers.begin(), numbers.end(), 0.0f, 
                                [mean](float sum, float x) { return sum + std::abs(x - mean); }) 
                / numbers.size();
    return mad;
}","}
int main() {
    auto candidate = mean_absolute_deviation;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f}))) == (0.5f));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));
}
"
HumanEval/5,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इनपुट वेक्टर के हर दो लगातार तत्वों के बीच एक संख्या 'डिलीमीटर' डालें। ∀numbers' >>> intersperse((std::vector<long>()), (4)) (std::vector<long>()) >>> intersperse((std::vector<long>({long) 1, (long) 2, (long) 3})), (4)) (std::vector<long>({long) 1, (long) 4, (long) 2, (long) 4, (long) 3}))
std::vector<long> intersperse(std::vector<long> numbers, long delimeter) {
","std::vector<long> intersperse(std::vector<long> numbers, long delimeter) {
    if (numbers.empty()) return numbers;

    std::vector<long> result;
    for (size_t i = 0; i < numbers.size(); i++) {
        result.push_back(numbers[i]);
        if (i < numbers.size() - 1) {
            result.push_back(delimeter);
        }
    }
    return result;
}","}
int main() {
    auto candidate = intersperse;
    assert(candidate((std::vector<long>()), (7)) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6, (long)8, (long)3, (long)8, (long)2})));
    assert(candidate((std::vector<long>({(long)2, (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2, (long)2})));
}
"
HumanEval/6,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ई फलन के इनपुट एगो स्ट्रिंग हई जे नेस्टेड कोष्ठक के लेल अंतराल से अलग कैगो समूह के प्रतिनिधित्व करई हई। प्रत्येक समूह के लेल, कोष्ठक के नेस्टिंग के सबसे गहरा स्तर आउटपुट करई हई। उदाहरण के लेल (())) में अधिकतम दू स्तर के नेस्टिंग होई हई जबकि ((())) में तीन हई। >>> parse_nested_parens (((""((()) ((())) () ((()))))))) (std::vector<long>({(long) 2, (long) 3, (long) 1, (long) 3}))
std::vector<long> parse_nested_parens(std::string paren_string) {
","std::vector<long> parse_nested_parens(std::string paren_string) {
    std::vector<long> depths;
    long current_depth = 0, max_depth = 0;

    for (char ch : paren_string) {
        if (ch == ' ') {
            if (max_depth > 0) {
                depths.push_back(max_depth);
                max_depth = 0;
            }
            current_depth = 0;
        } else if (ch == '(') {
            current_depth++;
            max_depth = std::max(max_depth, current_depth);
        } else if (ch == ')') {
            current_depth--;
        }
    }

    if (max_depth > 0) {
        depths.push_back(max_depth);
    }

    return depths;
}","}
int main() {
    auto candidate = parse_nested_parens;
    assert(candidate((""(()()) ((())) () ((())()())"")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));
    assert(candidate((""() (()) ((())) (((())))"")) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((""(()(())((())))"")) == (std::vector<long>({(long)4})));
}
"
HumanEval/7,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// स्ट्रिंग के एगो इनपुट वेक्टर के फ़िल्टर केवल ओई के लेल कैल जाई हई जे देल गेल सबस्ट्रिंग >>> filter_by_substring(((std::vector<std::string>()), (""a"")) (std::vector<std::string>()) >>> filter_by_substring((((std::vector<std::string>({(std::string) ""abc"", (std::string) ""bacd"", (std::string) ""cde"", (std::string) ""array""})), (""a"") (std::vector<std::string>(({(std::string) abc"", (std::string) ""bacd"", (std::string) ""array""}))
std::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {
","std::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {
    std::vector<std::string> result;
    for (const auto& str : strings) {
        if (str.find(substring) != std::string::npos) {
            result.push_back(str);
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_by_substring;
    assert(candidate((std::vector<std::string>()), (""john"")) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""xxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xxx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""xxxAAA"", (std::string)""xxx""})));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""aaaxxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""aaaxxy"", (std::string)""xxxAAA"", (std::string)""xxx""})));
    assert(candidate((std::vector<std::string>({(std::string)""grunt"", (std::string)""trumpet"", (std::string)""prune"", (std::string)""gruesome""})), (""run"")) == (std::vector<std::string>({(std::string)""grunt"", (std::string)""prune""})));
}
"
HumanEval/8,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एगो देल गेल वेक्टर लागी, एगो योग आउर एगो वेक्टर में सभे पूर्णांक के उत्पाद से बनल एगो ट्यूपल लौटाई. खाली योग 0 के बराबर होवे के चाहि आउर खाली उत्पाद 1 के बराबर होवे के चाहि। >>> sum_product{}{}std::vector<long>{}} (std::make_tuple{0, 1)) >>> sum_product{}std::vector<long>{{}long) 1, (long) 2, (long) 3, (long) 4}))) (std::make_tuple{10, 24))
std::tuple<long, long> sum_product(std::vector<long> numbers) {
","std::tuple<long, long> sum_product(std::vector<long> numbers) {
    long sum = std::accumulate(numbers.begin(), numbers.end(), 0L);
    long product = std::accumulate(numbers.begin(), numbers.end(), 1L, std::multiplies<long>());
    return std::make_tuple(sum, product);
}","}
int main() {
    auto candidate = sum_product;
    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3, 1)));
    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100, 0)));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7}))) == (std::make_tuple(15, 105)));
    assert(candidate((std::vector<long>({(long)10}))) == (std::make_tuple(10, 10)));
}
"
HumanEval/9,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एगो देल गेल वेक्टर से, अनुक्रम में देल गेल क्षण तक पाएल गेल अधिकतम रोलिंग तत्व के एगो वेक्टर उत्पन्न करअई। >>> रोलिंग_मैक्स (rolling_max)
std::vector<long> rolling_max(std::vector<long> numbers) {
","std::vector<long> rolling_max(std::vector<long> numbers) {
    std::vector<long> result;
    long max_so_far = LONG_MIN;

    for (long num : numbers) {
        max_so_far = std::max(max_so_far, num);
        result.push_back(max_so_far);
    }

    return result;
}","}
int main() {
    auto candidate = rolling_max;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));
}
"
HumanEval/10,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो देल गेल स्ट्रिंग से शुरू होए वाला सबसे छोट पैलिंड्रोम खोजो. एल्गोरिथ्म विचार सरल हई: - देल गेल स्ट्रिंग के सबसे लंबा पोस्टफिक्स खोजो जे एगो पैलिंड्रोम हई। - पैलिंड्रोमिक प्रत्यय से पहिले आवे वाला स्ट्रिंग उपसर्ग के स्ट्रिंग रिवर्स के स्ट्रिंग रिवर्स के अंत में लगावो। >>> make_palindrome ((("""")) ("""") >>> make_palindrome (((""cat"")) (""catac"") >>> make_palindrome (((""cata"")) (""catac"")
std::string make_palindrome(std::string string) {
","std::string make_palindrome(std::string string) {
    auto is_palindrome = [](const std::string &s) {
        return std::equal(s.begin(), s.begin() + s.size() / 2, s.rbegin());
    };

    for (size_t i = 0; i < string.size(); ++i) {
        if (is_palindrome(string.substr(i))) {
            std::string prefix = string.substr(0, i);
            std::reverse(prefix.begin(), prefix.end());
            return string + prefix;
        }
    }

    return string;
}","}
int main() {
    auto candidate = make_palindrome;
    assert(candidate(("""")) == (""""));
    assert(candidate((""x"")) == (""x""));
    assert(candidate((""xyz"")) == (""xyzyx""));
    assert(candidate((""xyx"")) == (""xyx""));
    assert(candidate((""jerry"")) == (""jerryrrej""));
}
"
HumanEval/11,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इनपुट दूगो स्ट्रिंग हई a आउर b जे केवल 1 आउर 0 से बनल हई। येई इनपुट पर बाइनरी XOR निष्पादित करई हई अउर परिणाम के एगो स्ट्रिंग के रूप में वापस करई हई। >>> string_xor((""010""), (""110"")) (""100"")
std::string string_xor(std::string a, std::string b) {
","std::string string_xor(std::string a, std::string b) {
    std::string result;
    for (size_t i = 0; i < a.size(); ++i) {
        result += (a[i] == b[i]) ? '0' : '1';
    }
    return result;
}","}
int main() {
    auto candidate = string_xor;
    assert(candidate((""111000""), (""101010"")) == (""010010""));
    assert(candidate((""1""), (""1"")) == (""0""));
    assert(candidate((""0101""), (""0000"")) == (""0101""));
}
"
HumanEval/12,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// स्ट्रिंग्स के वेक्टर में से सबसे लंबा लौटा दे. एक ही लंबाई के कई स्ट्रिंग्स के मामले में पहला लौटा दे. इनपुट वेक्टर खाली होवे के स्थिति में कोई नहीं लौटा दे. >>> longest(((std::vector<std::string>())) std::nullopt >>> longest(((std::vector<std::string>{(std::string) ""a"", (std::string) ""b"", (std::string) ""c""}))) ""a"" >>> longest(((std::vector<std::string>({(std::string) ""a"", (std::string) ""bb"", (stdstring) ""ccc""}))) ""ccc""
std::optional<std::string> longest(std::vector<std::string> strings) {
","std::optional<std::string> longest(std::vector<std::string> strings) {
    if (strings.empty()) return std::nullopt;

    return *std::max_element(strings.begin(), strings.end(), 
                             [](const std::string& a, const std::string& b) {
                                 return a.size() < b.size();
                             });
}","}
int main() {
    auto candidate = longest;
    assert(candidate((std::vector<std::string>())) == std::nullopt);
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z""}))) == ""x"");
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""yyy"", (std::string)""zzzz"", (std::string)""www"", (std::string)""kkkk"", (std::string)""abc""}))) == ""zzzz"");
}
"
HumanEval/13,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// दूगो पूर्णांक a आउर b के सबसे बड़का सामान्य भाजक के वापसी >>> सबसे बड़का_सामान्य_विभाजक (((3), (5)) (1) >>> सबसे बड़का_सामान्य_विभाजक (((25), (15)) (5)
long greatest_common_divisor(long a, long b) {
","long greatest_common_divisor(long a, long b) {
    return std::gcd(a, b);
}","}
int main() {
    auto candidate = greatest_common_divisor;
    assert(candidate((3), (7)) == (1));
    assert(candidate((10), (15)) == (5));
    assert(candidate((49), (14)) == (7));
    assert(candidate((144), (60)) == (12));
}
"
HumanEval/14,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इनपुट स्ट्रिंग के सबसे छोट से सबसे लंबा तक के सभे उपसर्ग के वापसी वेक्टर >>> all_prefixes (((""abc"")) (std::vector<std::string>({(std::string) ""a"", (std::string) ""ab"", (std::string) ""abc""}))
std::vector<std::string> all_prefixes(std::string string) {
","std::vector<std::string> all_prefixes(std::string string) {
    std::vector<std::string> prefixes;
    for (size_t i = 1; i <= string.size(); ++i) {
        prefixes.push_back(string.substr(0, i));
    }
    return prefixes;
}","}
int main() {
    auto candidate = all_prefixes;
    assert(candidate(("""")) == (std::vector<std::string>()));
    assert(candidate((""asdfgh"")) == (std::vector<std::string>({(std::string)""a"", (std::string)""as"", (std::string)""asd"", (std::string)""asdf"", (std::string)""asdfg"", (std::string)""asdfgh""})));
    assert(candidate((""WWW"")) == (std::vector<std::string>({(std::string)""W"", (std::string)""WW"", (std::string)""WWW""})));
}
"
HumanEval/15,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो स्ट्रिंग लौटाई जे 0 से लेकर n तक के अंतरिक्ष-सीमित संख्या से शुरू होई हई। >>> string_sequence((0)) (""0"") >>> string_sequence((5)) (""0 1 2 3 4 5"")
std::string string_sequence(long n) {
","std::string string_sequence(long n) {
    std::ostringstream oss;
    for (long i = 0; i <= n; ++i) {
        if (i > 0) oss << "" "";
        oss << i;
    }
    return oss.str();
}","}
int main() {
    auto candidate = string_sequence;
    assert(candidate((0)) == (""0""));
    assert(candidate((3)) == (""0 1 2 3""));
    assert(candidate((10)) == (""0 1 2 3 4 5 6 7 8 9 10""));
}
"
HumanEval/16,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो स्ट्रिंग देल गेल हई, ई पता लगाउ कि केतना अलग-अलग वर्ण (केस के बावजूद) में ई >>> count_distinct_characters (((""xyzXYZ"")) (3) >>> count_distinct_characters ((((""Jerry"")) (4) शामिल हई
long count_distinct_characters(std::string string) {
","long count_distinct_characters(std::string string) {
    std::unordered_set<char> distinct_chars;
    for (char ch : string) {
        distinct_chars.insert(std::tolower(ch));
    }
    return distinct_chars.size();
}","}
int main() {
    auto candidate = count_distinct_characters;
    assert(candidate(("""")) == (0));
    assert(candidate((""abcde"")) == (5));
    assert(candidate((""abcdecadeCADE"")) == (5));
    assert(candidate((""aaaaAAAAaaaa"")) == (1));
    assert(candidate((""Jerry jERRY JeRRRY"")) == (5));
}
"
HumanEval/17,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ई फलन में इनपुट एगो स्ट्रिंग हइ जे ASCII प्रारूप में संगीत के नोट के प्रतिनिधित्व कर हइ । अपने के कई बीट के अनुरूप पूर्णांक के स्ट्रिंग वेक्टर के पार्स करे के हइ । ईहे एगो कथा हइ: 'o' नोट, अंतिम चार बीट 'o 112' - अंतिम आधा नोट, अंतिम दो बीट '1111' - अंतिम एक >>> parse_music. ""o o
std::vector<long> parse_music(std::string music_string) {
","std::vector<long> parse_music(std::string music_string) {
    std::vector<long> beats;
    std::istringstream iss(music_string);
    std::string note;
    
    while (iss >> note) {
        if (note == ""o"") beats.push_back(4);
        else if (note == ""o|"") beats.push_back(2);
        else if (note == "".|"") beats.push_back(1);
    }

    return beats;
}","}
int main() {
    auto candidate = parse_music;
    assert(candidate(("""")) == (std::vector<long>()));
    assert(candidate((""o o o o"")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));
    assert(candidate(("".| .| .| .|"")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1})));
    assert(candidate((""o| o| .| .| o o o o"")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));
    assert(candidate((""o| .| o| .| o o| o o|"")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));
}
"
HumanEval/18,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पता लगाउ कि मूल स्ट्रिंग में केतना बार एगो देल गेल सबस्ट्रिंग पावल जा सकई हई। ओवरलैपिंग केस के गिनती करहो। >>> how_many_times((""""), (""a"")) (0) >>> how_many_times((""aaa""), (""a"")) (3) >>> how_many_times(""aaaa""), (""aa"") (3)
long how_many_times(std::string string, std::string substring) {
","long how_many_times(std::string string, std::string substring) {
    if (substring.empty()) return 0;
    
    long count = 0;
    size_t pos = 0;
    
    while ((pos = string.find(substring, pos)) != std::string::npos) {
        count++;
        pos++;  // Move one position forward to count overlapping occurrences
    }
    
    return count;
}","}
int main() {
    auto candidate = how_many_times;
    assert(candidate((""""), (""x"")) == (0));
    assert(candidate((""xyxyxyx""), (""x"")) == (4));
    assert(candidate((""cacacacac""), (""cac"")) == (4));
    assert(candidate((""john doe""), (""john"")) == (1));
}
"
HumanEval/19,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इनपुट 'शून्य' से 'नौ' तक संख्याओं के अंतरिक्ष-सीमित स्ट्रिंग हई। वैध विकल्प 'शून्य', 'एक', 'दो', 'तीन', 'चार', 'पांच', 'छह', 'सात', 'आठ' अउर 'नौ' हई। सबसे छोट से सबसे बड़ तक क्रमबद्ध संख्या के साथ स्ट्रिंग लौटाई >>> sort_numbers((""तीन एक पांच"")) (""एक तीन पांच"")
std::string sort_numbers(std::string numbers) {
","std::string sort_numbers(std::string numbers) {
    std::unordered_map<std::string, int> num_map = {
        {""zero"", 0}, {""one"", 1}, {""two"", 2}, {""three"", 3}, {""four"", 4},
        {""five"", 5}, {""six"", 6}, {""seven"", 7}, {""eight"", 8}, {""nine"", 9}
    };

    std::unordered_map<int, std::string> rev_map = {
        {0, ""zero""}, {1, ""one""}, {2, ""two""}, {3, ""three""}, {4, ""four""},
        {5, ""five""}, {6, ""six""}, {7, ""seven""}, {8, ""eight""}, {9, ""nine""}
    };

    std::istringstream iss(numbers);
    std::vector<int> num_list;
    std::string word;

    while (iss >> word) {
        num_list.push_back(num_map[word]);
    }

    std::sort(num_list.begin(), num_list.end());

    std::ostringstream oss;
    for (size_t i = 0; i < num_list.size(); ++i) {
        if (i > 0) oss << "" "";
        oss << rev_map[num_list[i]];
    }

    return oss.str();
}","}
int main() {
    auto candidate = sort_numbers;
    assert(candidate(("""")) == (""""));
    assert(candidate((""three"")) == (""three""));
    assert(candidate((""three five nine"")) == (""three five nine""));
    assert(candidate((""five zero four seven nine eight"")) == (""zero four five seven eight nine""));
    assert(candidate((""six five four three two one zero"")) == (""zero one two three four five six""));
}
"
HumanEval/20,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// संख्याओं के एक आपूर्ति कैल गेल वेक्टर (कम से कम दो लंबाई के) से दो के चयन और वापसी करो जे एक दूसरे के सबसे करीब हय और ओकरा क्रम में वापस करो (छोटी संख्या, बड़ी संख्या) । >>> find_closest_elements (((std::vector<float>({(float) 1.0f, (float) 2.0f, (float) 3.0f, (float) 4.0f, (float) 5.0f, (float) 2.2f}))) (std::make_tuple{2.0f, 2.2f)) >>> find_closest_elements (((std::vector<float>({(float) 1.0f, (float) 2.0f, (float) 3.0f, (float) 4.0f, (float) 5.0f, (float) 2.0f)) (std::make_tuple{2.0f, 2.0f))
std::tuple<float, float> find_closest_elements(std::vector<float> numbers) {
","std::tuple<float, float> find_closest_elements(std::vector<float> numbers) {
    std::sort(numbers.begin(), numbers.end());
    float min_diff = std::numeric_limits<float>::max();
    float num1 = 0, num2 = 0;

    for (size_t i = 1; i < numbers.size(); ++i) {
        float diff = numbers[i] - numbers[i - 1];
        if (diff < min_diff) {
            min_diff = diff;
            num1 = numbers[i - 1];
            num2 = numbers[i];
        }
    }

    return std::make_tuple(num1, num2);
}","}
int main() {
    auto candidate = find_closest_elements;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(3.9f, 4.0f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))) == (std::make_tuple(5.0f, 5.9f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(2.0f, 2.2f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))) == (std::make_tuple(2.0f, 2.0f)));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))) == (std::make_tuple(2.2f, 3.1f)));
}
"
HumanEval/21,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// संख्याओं के एक वेक्टर (कम से कम दो तत्वों के) के लेल, ओई वेक्टर पर एगो रैखिक परिवर्तन लागू कर, जेईसे सबसे छोट संख्या 0 बन जाई हई अउर सबसे बड़ 1 बन जाई छई।
std::vector<float> rescale_to_unit(std::vector<float> numbers) {
","std::vector<float> rescale_to_unit(std::vector<float> numbers) {
    float min_val = *std::min_element(numbers.begin(), numbers.end());
    float max_val = *std::max_element(numbers.begin(), numbers.end());

    if (min_val == max_val) {
        std::fill(numbers.begin(), numbers.end(), 0.0f);
        return numbers;
    }

    for (float &num : numbers) {
        num = (num - min_val) / (max_val - min_val);
    }

    return numbers;
}","}
int main() {
    auto candidate = rescale_to_unit;
    assert(candidate((std::vector<float>({(float)2.0f, (float)49.9f}))) == (std::vector<float>({(float)0.0f, (float)1.0f})));
    assert(candidate((std::vector<float>({(float)100.0f, (float)49.9f}))) == (std::vector<float>({(float)1.0f, (float)0.0f})));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f})));
    assert(candidate((std::vector<float>({(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));
    assert(candidate((std::vector<float>({(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));
}
"
HumanEval/22,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// फिल्टर कोनो cppthon मान के देल गेल वेक्टर केवल पूर्णांक के लेल >>> filter_integers((std::vector<std::any>({(std::string) ""a"", (std::string) 3.14f, (std::string) 5}))) (std::vector<long>({(long) 5})) >>> filter_integers((std::vector<std::any>({1, 2, 3, ""abc"", std::<long,map>), std::vector<long>()))) (std::vector<long>({(long) 1, (long) 2, (long) 3}))
std::vector<long> filter_integers(std::vector<std::any> values) {
","std::vector<long> filter_integers(std::vector<std::any> values) {
    std::vector<long> result;
    for (const auto& val : values) {
        if (val.type() == typeid(long)) {
            result.push_back(std::any_cast<long>(val));
        } else if (val.type() == typeid(int)) {
            result.push_back(std::any_cast<int>(val));
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_integers;
    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));
    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2f, 9, ""adasd""}))) == (std::vector<long>({(long)4, (long)9})));
    assert(candidate((std::vector<std::any>({3, ""c"", 3, 3, ""a"", ""b""}))) == (std::vector<long>({(long)3, (long)3, (long)3})));
}
"
HumanEval/23,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// देल गेल स्ट्रिंग के लंबाई लौटाई >>> string_length ((("""")) (0) >>> string_length (((""abc"")) (3)
long string_length(std::string string) {
","long string_length(std::string string) {
    return string.length();
}","}
int main() {
    auto candidate = string_length;
    assert(candidate(("""")) == (0));
    assert(candidate((""x"")) == (1));
    assert(candidate((""asdasnakj"")) == (9));
}
"
HumanEval/24,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो देल गेल संख्या n के लेल, सबसे बड़ संख्या के खोजई जे n के समान रूप से विभाजित करई हई, n से छोट >>> सबसे बड़_डिवाइडर ({}) ({15)) (5)
long largest_divisor(long n) {
","long largest_divisor(long n) {
    for (long i = n / 2; i > 0; --i) {
        if (n % i == 0) {
            return i;
        }
    }
    return 1;
}","}
int main() {
    auto candidate = largest_divisor;
    assert(candidate((3)) == (1));
    assert(candidate((7)) == (1));
    assert(candidate((10)) == (5));
    assert(candidate((100)) == (50));
    assert(candidate((49)) == (7));
}
"
HumanEval/25,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो देल गेल पूर्णांक के अभाज्य गुणनखंड के लघु से बड़का क्रम में लौटाई. प्रत्येक गुणनखंड के गुणनखंडित कैल जाए के चाहि, जेकर गुणनखंडित संख्या ओई संख्या के बराबर होई हई जे ओई गुणनखंड में केतना बार प्रकट होई हई। इनपुट संख्या सभे गुणनखंड के गुणनखंड के बराबर होई छई >>> factorise((8)) (std::vector<long>({(long) 2, (long) 2, (long) 2})) >>> factorise((25) (std::vector<long>({(long) 5, (long) 5})) >>> factorise((70)) (std::vector<long>({(long) 2, (long) 5, (long) 7}))
std::vector<long> factorize(long n) {
","std::vector<long> factorize(long n) {
    std::vector<long> factors;
    for (long i = 2; i * i <= n; ++i) {
        while (n % i == 0) {
            factors.push_back(i);
            n /= i;
        }
    }
    if (n > 1) {
        factors.push_back(n);
    }
    return factors;
}","}
int main() {
    auto candidate = factorize;
    assert(candidate((2)) == (std::vector<long>({(long)2})));
    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));
    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));
    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));
    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));
    assert(candidate((185193)) == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));
    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));
    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)3})));
}
"
HumanEval/26,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एगो सदिश से, ओई सभे तत्व के हटा देई जे एक से अधिक बार होई हई। इनपुट में समान तत्व के क्रम में छोड़ देल जाई छलई। >>> remove_duplicates(((std::vector<long>({(long) 1, (long) 2, (long) 3, (long) 2, (long) 4}))) (std::vector<long>({(long) 1, (long) 3, (long) 4}))
std::vector<long> remove_duplicates(std::vector<long> numbers) {
","std::vector<long> remove_duplicates(std::vector<long> numbers) {
    std::unordered_map<long, int> freq;
    for (long num : numbers) {
        freq[num]++;
    }

    std::vector<long> result;
    for (long num : numbers) {
        if (freq[num] == 1) {
            result.push_back(num);
        }
    }

    return result;
}","}
int main() {
    auto candidate = remove_duplicates;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));
}
"
HumanEval/27,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो देल गेल स्ट्रिंग लागी, लघु अक्षर के बड़ अक्षर में आउर बड़ अक्षर के लघु अक्षर में घुमाइ. >>> flip_case (((""Hello"")) (""HELLO"")
std::string flip_case(std::string string) {
","std::string flip_case(std::string string) {
    for (char &ch : string) {
        if (std::islower(ch)) {
            ch = std::toupper(ch);
        } else if (std::isupper(ch)) {
            ch = std::tolower(ch);
        }
    }
    return string;
}","}
int main() {
    auto candidate = flip_case;
    assert(candidate(("""")) == (""""));
    assert(candidate((""Hello!"")) == (""hELLO!""));
    assert(candidate((""These violent delights have violent ends"")) == (""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS""));
}
"
HumanEval/28,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// स्ट्रिंग के एक एकल स्ट्रिंग में संयोजित करना >>> संयोजित करना ((((std:: vector<std::string>())) ("""") >>> संयोजित करना ((((std:: vector<std::string>({(std::string) ""a"", (std::string) ""b"", (std::string) ""c""}))) (""abc"")
std::string concatenate(std::vector<std::string> strings) {
","std::string concatenate(std::vector<std::string> strings) {
    std::string result;
    for (const auto& str : strings) {
        result += str;
    }
    return result;
}","}
int main() {
    auto candidate = concatenate;
    assert(candidate((std::vector<std::string>())) == (""""));
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z""}))) == (""xyz""));
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z"", (std::string)""w"", (std::string)""k""}))) == (""xyzwk""));
}
"
HumanEval/29,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो इनपुट वेक्टर के केवल एगो पूर्वसर्ग के लेल स्ट्रिंग के फ़िल्टर कर। >>> filter_by_prefix((std::vector<std::string>()), (""a"")) (std::vector<std::string>()) >>> filter_by_prefix(((std::vector<std::string>({(std::string) ""abc"", (std::string) ""bcd"", (std::string)::""cde"", (stdstring) ""array""})), (""a"") (std::vector<std::string>(({(std::string) ""abc"", (std::string) ""array""}))
std::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {
","std::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {
    std::vector<std::string> result;
    for (const auto& str : strings) {
        if (str.rfind(prefix, 0) == 0) {  // Check if 'str' starts with 'prefix'
            result.push_back(str);
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_by_prefix;
    assert(candidate((std::vector<std::string>()), (""john"")) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""xxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xxx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""xxxAAA"", (std::string)""xxx""})));
}
"
HumanEval/30,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// >>> get_positive(((std::vector<long>({long)-1, (long) 2, (long)-4, (long) 5, (long) 6}))) (std::vector<long>({long) 2, (long) 5, (long) 6})) >>> get_positive(((std::vector<long>({(long) 5, (long) 3, (long)-5, (long) 2, (long)-3, (long) 3, (long) 9, (std::vector<long>5, (long) 3, (long) 2, (long) 3, (long) 10, (long) 10}))) (std::vector<long>{(long) 5, (long) 3, (long) 2, (long) 3, (long) 9, (long) 123, (long) 1}))
std::vector<long> get_positive(std::vector<long> l) {
","std::vector<long> get_positive(std::vector<long> l) {
    std::vector<long> result;
    for (long num : l) {
        if (num > 0) {
            result.push_back(num);
        }
    }
    return result;
}","}
int main() {
    auto candidate = get_positive;
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));
    assert(candidate((std::vector<long>({(long)-1, (long)-2}))) == (std::vector<long>()));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
}
"
HumanEval/31,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// अगर कोनो देल गेल संख्या अभाज्य हई, त सही लौटाई, आउर अन्यथा गलत। >>> is_prime((6)) (false) >>> is_prime((101)) (true) >>> is_prime((11) (true) >>> is_prime((13441)) (true) >>> is_prime(61)) (true) >>> is_prime(4)) (false) >>> is_prime(1)) (false)
bool is_prime(long n) {
","bool is_prime(long n) {
    if (n < 2) return false;
    if (n < 4) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (long i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}","}
int main() {
    auto candidate = is_prime;
    assert(candidate((6)) == (false));
    assert(candidate((101)) == (true));
    assert(candidate((11)) == (true));
    assert(candidate((13441)) == (true));
    assert(candidate((61)) == (true));
    assert(candidate((4)) == (false));
    assert(candidate((1)) == (false));
    assert(candidate((5)) == (true));
    assert(candidate((11)) == (true));
    assert(candidate((17)) == (true));
    assert(candidate((85)) == (false));
    assert(candidate((77)) == (false));
    assert(candidate((255379)) == (false));
}
"
HumanEval/33,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ई फलन एगो वेक्टर l लेई हई अउर एगो वेक्टर l' के वापस करई हई, जे ऐसन हई कि l' ऐसन होएल हई जे तीन से विभाजित ना होई हई, जबकि तीन से विभाजित सूचकांक में एकर मान l के संबंधित सूचकांक के मान के बराबर होई हई, लेकिन सॉर्ट कैल गेल हई। >>> sort_third(((std::vector<long>{(long) 1, (long) 2, (long) 3}))) (std::vector<long>{(long) 1, (long) 2, (long) 3})) >>> sort_third((std::vector<long>{(long>{(long) 5, (long) 6, (long) 3, (long) 4, (long) 8, (long) 9, (long) 2}))) (std::vector<(long>{(long>{(long>2, (long) 6, (long) 3, (long) 4, (long) 8, (long) 9, (long) 5}))
std::vector<long> sort_third(std::vector<long> l) {
","std::vector<long> sort_third(std::vector<long> l) {
    std::vector<long> third_indices;
    for (size_t i = 0; i < l.size(); i += 3) {
        third_indices.push_back(l[i]);
    }
    std::sort(third_indices.begin(), third_indices.end());
    
    size_t idx = 0;
    for (size_t i = 0; i < l.size(); i += 3) {
        l[i] = third_indices[idx++];
    }
    
    return l;
}","}
int main() {
    auto candidate = sort_third;
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)3, (long)4, (long)6, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)8, (long)3, (long)4, (long)6, (long)9, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)9, (long)4, (long)8, (long)3, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)9, (long)4, (long)8, (long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5, (long)1})));
}
"
HumanEval/34,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो वेक्टर में क्रमबद्ध अद्वितीय तत्व के लौटाबई >>> unique(((std::vector<long>({(long) 5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>{(long) 0, (long) 2, (long) 3, (long) 5, (long) 9, (long) 123}))
std::vector<long> unique(std::vector<long> l) {
","std::vector<long> unique(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    l.erase(std::unique(l.begin(), l.end()), l.end());
    return l;
}","}
int main() {
    auto candidate = unique;
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));
}
"
HumanEval/35,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// वेक्टर में अधिकतम तत्व लौटाओ. >>> max_element((std::vector<long>({long) 1, (long) 2, (long) 3}))) (3) >>> max_element((std::vector<long>({long) 5, (long) 3, (long) -5, (long) 2, (long) -3, (long) 3, (long) 9, (long) 0, (long) 123, (long) 1, (long) -10}))) (123)
long max_element(std::vector<long> l) {
","long max_element(std::vector<long> l) {
    return *std::max_element(l.begin(), l.end());
}","}
int main() {
    auto candidate = max_element;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));
}
"
HumanEval/36,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// संख्या 7 के पूर्णांक में प्रकट होवे के संख्या के लौटाबई जे 11 या 13 से विभाजित हई। >>> fizz_buzz((50)) (0) >>> fizz_buzz((78)) (2) >>> fizz_buzz((79) (3)
long fizz_buzz(long n) {
","long fizz_buzz(long n) {
    long count = 0;
    for (long i = 0; i < n; i++) {
        if (i % 11 == 0 || i % 13 == 0) {
            long temp = i;
            while (temp > 0) {
                if (temp % 10 == 7) count++;
                temp /= 10;
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = fizz_buzz;
    assert(candidate((50)) == (0));
    assert(candidate((78)) == (2));
    assert(candidate((79)) == (3));
    assert(candidate((100)) == (3));
    assert(candidate((200)) == (6));
    assert(candidate((4000)) == (192));
    assert(candidate((10000)) == (639));
    assert(candidate((100000)) == (8026));
}
"
HumanEval/37,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ई फलन एगो वेक्टर l लेई हई अउर एगो वेक्टर l' के वापस करई हई, जे अइसन हई कि l' विषम सूचकांक में l के समान हई, जबकि एकर मान सम सूचकांक में l के सम सूचकांक के मान के बराबर हई, लेकिन सॉर्ट कैल गेल हई। >>> sort_even: vector<long>{(long) 1, (long) 2, (long) 3}))) (std: vector<long>{(long) 1, (long) 2, (long) 3})) >>> sort_even: vector<long>{(long) 5, (long) 6, (long) 3, (long) 4}))) (std: vector<(long>{(long) 3, (long) 6, (long) 5, (long) 4}))
std::vector<long> sort_even(std::vector<long> l) {
","std::vector<long> sort_even(std::vector<long> l) {
    std::vector<long> even_indices;
    for (size_t i = 0; i < l.size(); i += 2) {
        even_indices.push_back(l[i]);
    }
    std::sort(even_indices.begin(), even_indices.end());
    
    size_t idx = 0;
    for (size_t i = 0; i < l.size(); i += 2) {
        l[i] = even_indices[idx++];
    }
    
    return l;
}","}
int main() {
    auto candidate = sort_even;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)-10, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)5, (long)0, (long)9, (long)1, (long)123})));
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)-12, (long)4, (long)23, (long)2, (long)3, (long)11, (long)12, (long)-10}))) == (std::vector<long>({(long)-12, (long)8, (long)3, (long)4, (long)5, (long)2, (long)12, (long)11, (long)23, (long)-10})));
}
"
HumanEval/39,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// prime_fib एगो फाइबोनैचि संख्या हई अउर ई भी अभाज्य हई। >>> prime_fib((1)) (2) >>> prime_fib((2)) (3) >>> prime_fib(3)) (5) >>> prime_fib((4)) (13) >>> prime_fib(5)) (89)
long prime_fib(long n) {
","bool is_prime(long num) {
    if (num < 2) return false;
    if (num < 4) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (long i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

long prime_fib(long n) {
    std::vector<long> prime_fibs;
    long a = 1, b = 1;
    while (prime_fibs.size() < n) {
        long next = a + b;
        a = b;
        b = next;
        if (is_prime(next)) {
            prime_fibs.push_back(next);
        }
    }
    return prime_fibs[n - 1];
}","}
int main() {
    auto candidate = prime_fib;
    assert(candidate((1)) == (2));
    assert(candidate((2)) == (3));
    assert(candidate((3)) == (5));
    assert(candidate((4)) == (13));
    assert(candidate((5)) == (89));
    assert(candidate((6)) == (233));
    assert(candidate((7)) == (1597));
    assert(candidate((8)) == (28657));
    assert(candidate((9)) == (514229));
    assert(candidate((10)) == (433494437));
}
"
HumanEval/40,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// triple_sum_to_zero इनपुट के रूप में पूर्णांक के एगो वैक्टर लेई हई। ई सही लौटाई हई अगर वैक्टर में तीन अलग-अलग तत्व हई जे शून्य के बराबर हई, अउर अन्यथा गलत हई। >>> triple_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long) 5, (long) 0}))) (false) >>> triple_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long)-2, (long) 1} >>> (true) triple_sum_to_zero(std::vector<long>(long) 1, (long) 2, (long) 3, (long) 7}))) (se) >>> triple_sum_to_zero_{(long>{(long>{(long>{long}2, (long) 4, (long) 5, (long) 3, (long) 9, (long)) (true)) triple_sum_to_zero))) (long_long) >>> (false) triple_sum_to_zero_{(long>{long}} (long_long)) >>> triple_long_vector) >>> (false)
bool triples_sum_to_zero(std::vector<long> l) {
","bool triples_sum_to_zero(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    size_t n = l.size();
    
    for (size_t i = 0; i < n - 2; i++) {
        size_t left = i + 1, right = n - 1;
        while (left < right) {
            long sum = l[i] + l[left] + l[right];
            if (sum == 0) return true;
            else if (sum < 0) left++;
            else right--;
        }
    }
    
    return false;
}","}
int main() {
    auto candidate = triples_sum_to_zero;
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-100}))) == (false));
    assert(candidate((std::vector<long>({(long)100, (long)3, (long)5, (long)-100}))) == (false));
}
"
HumanEval/41,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो सड़क के कल्पना कर लेली जे एगो बिलकुल सीधा अनंत लंबाई के रेखा हई। n कार बाएं से दाएं ड्राइव कर रहल हई; एक साथ, n कार के एगो अलग सेट दाएं से बाएं ड्राइव कर रहल हई। कार के दु सेट एक-दूसरे से बहुत दूर होवे से शुरू होई हई। सभे कार एके गति में चलई हई। दू कार के टकराए के लेल कहल जाई हई जब बाएं से दाएं चले वाला कार दाएं से बाएं चले वाला कार के टकराई हई। हालांकि, कार अनंत रूप से मजबूत अउर मजबूत हई; नतीजतन, ऊ अपन प्रक्षेपवक्र में आगे बढ़ई हई जैसे कि ऊ टकराएल न होतई। ई फलन ऐसन टक्कर के संख्या आउटपुट करई हई।
long car_race_collision(long n) {
","long car_race_collision(long n) {
    return n * n;
}","}
int main() {
    auto candidate = car_race_collision;
    assert(candidate((2)) == (4));
    assert(candidate((3)) == (9));
    assert(candidate((4)) == (16));
    assert(candidate((8)) == (64));
    assert(candidate((10)) == (100));
}
"
HumanEval/42,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// 1 द्वारा बढ़ाएल गेल तत्व के जौरे वेक्टर लौटाई >>> incr_list((std::vector<long>({long) 1, (long) 2, (long) 3}))) (std::vector<long>{(long) 2, (long) 3, (long) 4})) >>> incr_list((std::vector<long>{long) 5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>{(long) 6, (long) 4, (long) 6, (long) 3, (long) 4, (long) 4, (long) 10, (long) 1, (long) 124}))
std::vector<long> incr_list(std::vector<long> l) {
","std::vector<long> incr_list(std::vector<long> l) {
    for (long &num : l) {
        num++;
    }
    return l;
}","}
int main() {
    auto candidate = incr_list;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));
    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));
}
"
HumanEval/43,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// जोड़े_सारा_टू_शून्य एगो पूर्णांक के वेक्टर के इनपुट के रूप में लेई हई। ई सही लौटाई हई अगर वेक्टर में दू अलग-अलग तत्व हई जे शून्य के बराबर होई हई, अउर अन्यथा गलत हई। >>> जोड़े_सारा_टू_शून्य (सारा_शून्य) >>> जोड़े_सारा_टू_शून्य (सारा_शून्य) >>> जोड़े_सारा_टू_शून्य (सारा_शून्य) >>> जोड़े_सारा_टू_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_शून्य (सारा_शून्य) >>> जोड़े_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_सारा_
bool pairs_sum_to_zero(std::vector<long> l) {
","bool pairs_sum_to_zero(std::vector<long> l) {
    std::unordered_set<long> seen;
    for (long num : l) {
        if (seen.count(-num)) {
            return true;
        }
        seen.insert(num);
    }
    return false;
}","}
int main() {
    auto candidate = pairs_sum_to_zero;
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));
}
"
HumanEval/44,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इनपुट नंबर x के संख्यात्मक आधार के आधार में बदलना. रूपांतरण के बाद स्ट्रिंग प्रतिनिधित्व लौटाओ. आधार संख्या 10 से कम हई। >>> change_base((8), (3)) (""22"") >>> change_base(8), (2)) (""1000"") >>> change_base(7), (2)) (""111"")
std::string change_base(long x, long base) {
","std::string change_base(long x, long base) {
    if (x == 0) return ""0"";
    
    std::string result;
    while (x > 0) {
        result += std::to_string(x % base);
        x /= base;
    }
    
    std::reverse(result.begin(), result.end());
    return result;
}","}
int main() {
    auto candidate = change_base;
    assert(candidate((8), (3)) == (""22""));
    assert(candidate((9), (3)) == (""100""));
    assert(candidate((234), (2)) == (""11101010""));
    assert(candidate((16), (2)) == (""10000""));
    assert(candidate((8), (2)) == (""1000""));
    assert(candidate((7), (2)) == (""111""));
    assert(candidate((2), (3)) == (""2""));
    assert(candidate((3), (4)) == (""3""));
    assert(candidate((4), (5)) == (""4""));
    assert(candidate((5), (6)) == (""5""));
    assert(candidate((6), (7)) == (""6""));
    assert(candidate((7), (8)) == (""7""));
}
"
HumanEval/45,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो त्रिकोण लागी एगो पक्षवा के लंबाई और उच्च वापसी क्षेत्रवा के देवल गेल हो। >>> triangle_area((5), (3)) (7.5f)
float triangle_area(long a, long h) {
","float triangle_area(long a, long h) {
    return 0.5f * a * h;
}","}
int main() {
    auto candidate = triangle_area;
    assert(candidate((5), (3)) == (7.5f));
    assert(candidate((2), (2)) == (2.0f));
    assert(candidate((10), (8)) == (40.0f));
}
"
HumanEval/46,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Fib4 संख्या क्रम एगो क्रम हई जे फिबोनैचि अनुक्रम के समान हई जे निम्नलिखित रूप में परिभाषित कैल गेल हई: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). कृपया fib4 संख्या क्रम के n-वें तत्व के कुशलता से गणना करे के लेल एगो फ़ंक्शन लिखें। पुनरावृत्ति के उपयोग न करें। >>> fib4((5)) (4) >>> fib4((6)) (8) >>> fib4(7)) (14)
long fib4(long n) {
","long fib4(long n) {
    if (n == 0 || n == 1 || n == 3) return 0;
    if (n == 2) return 2;

    std::vector<long> dp(n + 1, 0);
    dp[2] = 2;

    for (long i = 4; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];
    }

    return dp[n];
}","}
int main() {
    auto candidate = fib4;
    assert(candidate((5)) == (4));
    assert(candidate((8)) == (28));
    assert(candidate((10)) == (104));
    assert(candidate((12)) == (386));
}
"
HumanEval/47,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// वेक्टर l में तत्वों के मध्यस्थता लौटाएं। >>> मध्यस्थता (long) 1, (long) 2, (long) 4, (long) 5))) (फ्लोट (long)) >>> मध्यस्थता (long) 10, (long) 4, (long) 6, (long) 1000, (long) 10, (long) 20)) (15.0f)
float median(std::vector<long> l) {
","float median(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    size_t n = l.size();
    
    if (n % 2 == 1) {
        return static_cast<float>(l[n / 2]);
    } else {
        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;
    }
}","}
int main() {
    auto candidate = median;
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (float(3)));
    assert(candidate((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0f));
    assert(candidate((std::vector<long>({(long)5}))) == (float(5)));
    assert(candidate((std::vector<long>({(long)6, (long)5}))) == (5.5f));
    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3, (long)9, (long)9, (long)2, (long)7}))) == (float(7)));
}
"
HumanEval/48,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// जांच हई कि कि देल गेल स्ट्रिंग एगो पालिंड्रोम हई >>> is_palindrome ((("""")) (सच्चा) >>> is_palindrome (((""aba"")) (सच्चा) >>> is_palindrome (((""aaaaa"")) (सच्चा) >>> is_palindrome (((""zbcd"")) (गलत)
bool is_palindrome(std::string text) {
","bool is_palindrome(std::string text) {
    return std::equal(text.begin(), text.begin() + text.size() / 2, text.rbegin());
}","}
int main() {
    auto candidate = is_palindrome;
    assert(candidate(("""")) == (true));
    assert(candidate((""aba"")) == (true));
    assert(candidate((""aaaaa"")) == (true));
    assert(candidate((""zbcd"")) == (false));
    assert(candidate((""xywyx"")) == (true));
    assert(candidate((""xywyz"")) == (false));
    assert(candidate((""xywzx"")) == (false));
}
"
HumanEval/49,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// वापसी 2 ^ n मॉडुलो p (संख्या के बारे में जागरूक होवे के चाही) । >>> modp((3), (5)) (3) >>> modp((1101), (101)) (2) >>> modp((0), (101)) (1) >>> modp((3), (11)) (8) >>> modp((100), (101) (1)
long modp(long n, long p) {
","long modp(long n, long p) {
    return std::pow(2, n) % p;
}","}
int main() {
    auto candidate = modp;
    assert(candidate((3), (5)) == (3));
    assert(candidate((1101), (101)) == (2));
    assert(candidate((0), (101)) == (1));
    assert(candidate((3), (11)) == (8));
    assert(candidate((100), (101)) == (1));
    assert(candidate((30), (5)) == (4));
    assert(candidate((31), (5)) == (3));
}
"
HumanEval/51,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// remove_vowels एगो फलन हई जे स्ट्रिंग के लेलई अउर बिना स्वर के स्ट्रिंग लौटाई। >>> remove_vowels(("""")) ("""") >>> remove_vowels((""abcdef"")) (""bcdf"") >>> remove_vowels((""aaaaa"")) ("""") >>> remove_vowels(""aaBAA"")) (""B"") >>> remove_vowels((""zbcd"")) (""zbcd"")
std::string remove_vowels(std::string text) {
","std::string remove_vowels(std::string text) {
    std::string result;
    std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
    
    for (char ch : text) {
        if (vowels.find(ch) == vowels.end()) {
            result += ch;
        }
    }
    
    return result;
}","}
int main() {
    auto candidate = remove_vowels;
    assert(candidate(("""")) == (""""));
    assert(candidate((""abcdef\nghijklm"")) == (""bcdf\nghjklm""));
    assert(candidate((""fedcba"")) == (""fdcb""));
    assert(candidate((""eeeee"")) == (""""));
    assert(candidate((""acBAA"")) == (""cB""));
    assert(candidate((""EcBOO"")) == (""cB""));
    assert(candidate((""ybcd"")) == (""ybcd""));
}
"
HumanEval/52,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// अगर वेक्टर l में सभे संख्या सीमा t से नीचे हई त सही लौटाई। >>> below_threshold((std::vector<long>({(long) 1, (long) 2, (long) 4, (long) 10})), (100)) (true) >>> below_threshold((std::vector<long>({(long) 1, (long) 20, (long) 4, (long) 10})), (5)) (false)
bool below_threshold(std::vector<long> l, long t) {
","bool below_threshold(std::vector<long> l, long t) {
    return std::all_of(l.begin(), l.end(), [t](long num) { return num < t; });
}","}
int main() {
    auto candidate = below_threshold;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5)) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (21)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (22)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (11)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (10)) == (false));
}
"
HumanEval/53,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// दो संख्या x और y जोड़ो >>> जोड़ो (((2), (3)) (5) >>> जोड़ो (((5), (7)) (12)
long add(long x, long y) {
","long add(long x, long y) {
    return x + y;
}","}
int main() {
    auto candidate = add;
    assert(candidate((0), (1)) == (1));
    assert(candidate((1), (0)) == (1));
    assert(candidate((2), (3)) == (5));
    assert(candidate((5), (7)) == (12));
    assert(candidate((7), (5)) == (12));
}
"
HumanEval/54,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// अगर दू शब्द में एके तरह के वर्ण हइ त जाँच करहो. >>> same_chars((""eabcdzzzz""), (""dddzzzzzzzddeddabc"")) (सच्चा) >>> same_chars((""abcd""), (""dddddddabc"")) (सच्चा) >>> same_chars(""dddddddabc""), (""abcd"") (सच्चा) >>> same_chars((""eabcd""), (""dddddddabc"")) (गलत) >>> same_chars >>>""((abcd""), (""dddddddabce"") (गलत) >>> same_chars((""eabcd""), (""ddddzzzzzdzzdddabc"") (गलत)
bool same_chars(std::string s0, std::string s1) {
","bool same_chars(std::string s0, std::string s1) {
    std::unordered_set<char> set0(s0.begin(), s0.end());
    std::unordered_set<char> set1(s1.begin(), s1.end());
    return set0 == set1;
}","}
int main() {
    auto candidate = same_chars;
    assert(candidate((""eabcdzzzz""), (""dddzzzzzzzddeddabc"")) == (true));
    assert(candidate((""abcd""), (""dddddddabc"")) == (true));
    assert(candidate((""dddddddabc""), (""abcd"")) == (true));
    assert(candidate((""eabcd""), (""dddddddabc"")) == (false));
    assert(candidate((""abcd""), (""dddddddabcf"")) == (false));
    assert(candidate((""eabcdzzzz""), (""dddzzzzzzzddddabc"")) == (false));
    assert(candidate((""aabb""), (""aaccc"")) == (false));
}
"
HumanEval/55,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// फिबोनाकी के n-वें संख्या के लौटाबई। >>> fib((10)) (55) >>> fib((1)) (1) >>> fib((8)) (21)
long fib(long n) {
","long fib(long n) {
    if (n <= 1) return n;
    
    long a = 0, b = 1, c;
    for (long i = 2; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;
    }
    
    return b;
}","}
int main() {
    auto candidate = fib;
    assert(candidate((10)) == (55));
    assert(candidate((1)) == (1));
    assert(candidate((8)) == (21));
    assert(candidate((11)) == (89));
    assert(candidate((12)) == (144));
}
"
HumanEval/56,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// brackets ""<"" और "">"" के एगो स्ट्रिंग हई। अगर हर ओपनिंग ब्रैकेट में एगो संबंधित क्लोजिंग ब्रैकेट होई हई त सही लौटाई। >>> correct_bracketing((""<"")) (false) >>> correct_bracketing(""<>"")) (true) >>> correct_bracketing(""<><>"")) (true) >>> correct_bracketing(""<><>"") (true) >>> correct_bracketing("">(<>"") (false)
bool correct_bracketing(std::string brackets) {
","bool correct_bracketing(std::string brackets) {
    int balance = 0;
    for (char ch : brackets) {
        if (ch == '<') balance++;
        else if (ch == '>') balance--;
        if (balance < 0) return false;
    }
    return balance == 0;
}","}
int main() {
    auto candidate = correct_bracketing;
    assert(candidate((""<>"")) == (true));
    assert(candidate((""<<><>>"")) == (true));
    assert(candidate((""<><><<><>><>"")) == (true));
    assert(candidate((""<><><<<><><>><>><<><><<>>>"")) == (true));
    assert(candidate((""<<<><>>>>"")) == (false));
    assert(candidate((""><<>"")) == (false));
    assert(candidate((""<"")) == (false));
    assert(candidate((""<<<<"")) == (false));
    assert(candidate(("">"")) == (false));
    assert(candidate((""<<>"")) == (false));
    assert(candidate((""<><><<><>><>><<>"")) == (false));
    assert(candidate((""<><><<><>><>>><>"")) == (false));
}
"
HumanEval/57,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// return true is vector elements are monotonically increasing or decreasing. >>> monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotonic: monotone: monotone: monotone: monotone: monotone: monotone:
bool monotonic(std::vector<long> l) {
","bool monotonic(std::vector<long> l) {
    bool increasing = true, decreasing = true;
    
    for (size_t i = 1; i < l.size(); i++) {
        if (l[i] > l[i - 1]) decreasing = false;
        if (l[i] < l[i - 1]) increasing = false;
    }
    
    return increasing || decreasing;
}","}
int main() {
    auto candidate = monotonic;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)20}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10}))) == (false));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))) == (true));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)1, (long)0}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));
    assert(candidate((std::vector<long>({(long)9, (long)9, (long)9, (long)9}))) == (true));
}
"
HumanEval/58,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// दो वैक्टर के लिए क्रमबद्ध अद्वितीय सामान्य तत्व लौटाएं। >>> common((std::vector<long>({long) 1, (long) 4, (long) 3, (long) 34, (long) 653, (long) 2, (long) 5), (std::vector<long>({long) 5, (long) 7, (long) 1, (long) 5, (long) 9, (long) 653, (long) 121}))) (std::vector<long>({long) 1, (long) 5, (long) 653})) >>> common(std::vector<long>{(long) 5, (long) 3, (long) 2, (long) 8}), (std::vector<long>{(long) 3, (long) 2))) (std::vector<long>{(long) 2, (long) 3))
std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {
","std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {
    std::unordered_set<long> set1(l1.begin(), l1.end());
    std::unordered_set<long> result_set;
    
    for (long num : l2) {
        if (set1.count(num)) {
            result_set.insert(num);
        }
    }
    
    std::vector<long> result(result_set.begin(), result_set.end());
    std::sort(result.begin(), result.end());
    return result;
}","}
int main() {
    auto candidate = common;
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));
}
"
HumanEval/59,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// n के सबसे बड़ अभाज्य गुणनखंडवा लौटा के. मान ले कि n > 1 और एगो अभाज्य संख्यावा न हो। >>> largest_prime_factor (((13195)) (29) >>> largest_prime_factor (((2048)) (2)
long largest_prime_factor(long n) {
","long largest_prime_factor(long n) {
    long largest = -1;
    
    while (n % 2 == 0) {
        largest = 2;
        n /= 2;
    }
    
    for (long i = 3; i * i <= n; i += 2) {
        while (n % i == 0) {
            largest = i;
            n /= i;
        }
    }
    
    if (n > 1) largest = n;
    
    return largest;
}","}
int main() {
    auto candidate = largest_prime_factor;
    assert(candidate((15)) == (5));
    assert(candidate((27)) == (3));
    assert(candidate((63)) == (7));
    assert(candidate((330)) == (11));
    assert(candidate((13195)) == (29));
}
"
HumanEval/60,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// sum_to_n एगो फलन हई जे 1 से n तक के संख्या के योग हई। >>> sum_to_n((30)) (465) >>> sum_to_n(100)) (5050) >>> sum_to_n((5)) (15) >>> sum_to_n(10)) (55) >>> sum_to_n(1) (1)
long sum_to_n(long n) {
","long sum_to_n(long n) {
    return n * (n + 1) / 2;
}","}
int main() {
    auto candidate = sum_to_n;
    assert(candidate((1)) == (1));
    assert(candidate((6)) == (21));
    assert(candidate((11)) == (66));
    assert(candidate((30)) == (465));
    assert(candidate((100)) == (5050));
}
"
HumanEval/61,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// brackets एगो स्ट्रिंग हई ""("" और "")"". अगर हर ओपनिंग ब्रैकेट में एगो संबंधित क्लोजिंग ब्रैकेट होई हई त सही लौटाई। >>> correct_bracketing((""("")) (false) >>> correct_bracketing(""() "")) (true) >>> correct_bracketing(""(())))) (true) >>> correct_bracketing(("") (false)
bool correct_bracketing(std::string brackets) {
","bool correct_bracketing(std::string brackets) {
    int balance = 0;
    for (char ch : brackets) {
        if (ch == '(') balance++;
        else if (ch == ')') balance--;
        if (balance < 0) return false;
    }
    return balance == 0;
}","}
int main() {
    auto candidate = correct_bracketing;
    assert(candidate((""()"")) == (true));
    assert(candidate((""(()())"")) == (true));
    assert(candidate((""()()(()())()"")) == (true));
    assert(candidate((""()()((()()())())(()()(()))"")) == (true));
    assert(candidate((""((()())))"")) == (false));
    assert(candidate(("")(()"")) == (false));
    assert(candidate((""("")) == (false));
    assert(candidate((""(((("")) == (false));
    assert(candidate(("")"")) == (false));
    assert(candidate((""(()"")) == (false));
    assert(candidate((""()()(()())())(()"")) == (false));
    assert(candidate((""()()(()())()))()"")) == (false));
}
"
HumanEval/62,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// xs एगो बहुपद के गुणांक के प्रतिनिधित्व कर हई। xs[0] + xs[1] * x + xs[2] * x^2 + .... इ बहुपद के व्युत्पन्न के ओही रूप में लौटाई। >>> व्युत्पन्न:{((std::vector<long>({(long) 3, (long) 1, (long) 2, (long) 4, (long) 5}))) (std::vector<long>{(long) 1, (long) 4, (long) 12, (long) 20})) >>> व्युत्पन्न:{(std::vector<long>({long) 1, (long) 2, (long) 3}))) (std::vector<(long>{(long) 2, (long) 6}))
std::vector<long> derivative(std::vector<long> xs) {
","std::vector<long> derivative(std::vector<long> xs) {
    std::vector<long> result;
    for (size_t i = 1; i < xs.size(); i++) {
        result.push_back(xs[i] * i);
    }
    return result;
}","}
int main() {
    auto candidate = derivative;
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)0, (long)16})));
    assert(candidate((std::vector<long>({(long)1}))) == (std::vector<long>()));
}
"
HumanEval/63,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// FibFib संख्या क्रम Fibbonacci sequence के समान एक क्रम है, जिसे निम्न प्रकार से परिभाषित किया जाता हैः fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3। कृपया fibfib संख्या क्रम के n-वें तत्व की कुशलता से गणना करने के लिए एक फ़ंक्शन लिखें। >>> fibfib((1)) (0) >>> fib((5)) (4) >>> fib(8)) (24)
long fibfib(long n) {
","long fibfib(long n) {
    if (n == 0 || n == 1) return 0;
    if (n == 2) return 1;

    std::vector<long> dp(n + 1, 0);
    dp[2] = 1;

    for (long i = 3; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
    }

    return dp[n];
}","}
int main() {
    auto candidate = fibfib;
    assert(candidate((2)) == (1));
    assert(candidate((1)) == (0));
    assert(candidate((5)) == (4));
    assert(candidate((8)) == (24));
    assert(candidate((10)) == (81));
    assert(candidate((12)) == (274));
    assert(candidate((14)) == (927));
}
"
HumanEval/64,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लिखो जे एगो शब्द के प्रतिनिधित्व करे वाला एगो स्ट्रिंग के इनपुट के रूप में लेई हई अउर स्ट्रिंग में स्वर के संख्या लौटाई हई। येई मामला में स्वर 'ए', 'ई', 'आई', 'ओ', 'यू' हई। ईहां, 'वाई' भी स्वर हई, लेकिन केवल जब ई देल गेल शब्द के अंत में होई हई। उदाहरण: >>> स्वर_गणना (((""अब्सीडी"")) (2) >>> स्वर_गणना ((""एसीडीवाई"") (3)
long vowels_count(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long vowels_count(std::string s) {
  long count = 0;
  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
  for (char c : s) {
    if (vowels.count(c)) {
      count++;
    }
  }
  if (!s.empty() && (s.back() == 'y' || s.back() == 'Y')) {
    count++;
  }
  return count;
}","}
int main() {
    auto candidate = vowels_count;
    assert(candidate((""abcde"")) == (2));
    assert(candidate((""Alone"")) == (3));
    assert(candidate((""key"")) == (2));
    assert(candidate((""bye"")) == (1));
    assert(candidate((""keY"")) == (2));
    assert(candidate((""bYe"")) == (1));
    assert(candidate((""ACEDY"")) == (3));
}
"
HumanEval/65,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// परिपत्र संख्या x के अंक के स्थानांतरित कर के, अंक के स्थानांतरण द्वारा दाहिने स्थानांतरित कर के परिणाम के स्ट्रिंग के रूप में लौटाई. यदि स्थानांतरण > अंक के संख्या, अंक के उलटा लौटाई. >>> circular_shift((12), (1)) (""21"") >>> circular_shift((12), (2)) (""12"")
std::string circular_shift(long x, long shift) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string circular_shift(long x, long shift) {
  std::string s = std::to_string(x);
  long n = s.length();
  if (n == 0) {
    return """";
  }
  shift %= n;
  if (shift < 0) {
    shift += n;
  }
  if (shift == 0) {
    return s;
  }
  if (shift > n) {
    std::reverse(s.begin(), s.end());
    return s;
  }
  std::string shifted_s = s.substr(n - shift) + s.substr(0, n - shift);
  return shifted_s;
}","}
int main() {
    auto candidate = circular_shift;
    assert(candidate((100), (2)) == (""001""));
    assert(candidate((12), (2)) == (""12""));
    assert(candidate((97), (8)) == (""79""));
    assert(candidate((12), (1)) == (""21""));
    assert(candidate((11), (101)) == (""11""));
}
"
HumanEval/66,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// कार्य एगो फ़ंक्शन लिखई जे इनपुट के रूप में एगो स्ट्रिंग लेई हई अउर केवल ऊपरी वर्ण के योग के वापस करई हई' ASCII कोड। उदाहरण: >>> digitSum(("""")) (0) >>> digitSum((""abAB"")) (131) >>> digitSum((""abcCd"")) (67) >>> digitSum((""helloE"")) (69) >>> digitSum((""woArBld"")) (131) >>> digitSum((""aAXaaaa"") (153)
long digitSum(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long digitSum(std::string s) {
  long sum = 0;
  for (char c : s) {
    if (isupper(c)) {
      sum += static_cast<long>(c);
    }
  }
  return sum;
}","}
int main() {
    auto candidate = digitSum;
    assert(candidate(("""")) == (0));
    assert(candidate((""abAB"")) == (131));
    assert(candidate((""abcCd"")) == (67));
    assert(candidate((""helloE"")) == (69));
    assert(candidate((""woArBld"")) == (131));
    assert(candidate((""aAaaaXa"")) == (153));
    assert(candidate(("" How are yOu?"")) == (151));
    assert(candidate((""You arE Very Smart"")) == (327));
}
"
HumanEval/67,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इ कार्य में, आप के एगो स्ट्रिंग देल जयतई जे एगो संख्या के प्रतिनिधित्व कर हई सेब और संतरे जे फल के टोकरी में वितरित कैल गेल हई ई टोकरी में सेब, संतरे और आम के फल शामिल हई। स्ट्रिंग के देला पर जे संतरे और सेब के कुल संख्या के प्रतिनिधित्व करई हई आउर टोकरी में फल के कुल संख्या के प्रतिनिधित्व करे वाला एगो पूर्णांक टोकरी में आम के फल के संख्या लौटाई। उदाहरण के लेल: >>> फल_वितरण (((("" 5 सेब और 6 संतरे""), (19)) (8) >>> फल_वितरण ((((""0 सेब और 1 संतरे""), (3)) (2) >>> फल_वितरण ((((""2 सेब और 3 संतरे""), (100)) (95) >>> फल_वितरण (((""100 सेब और 1 संतरे""), (120)) (19)
long fruit_distribution(std::string s, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long fruit_distribution(std::string s, long n) {
  long apples = 0;
  long oranges = 0;
  size_t apples_pos = s.find(""apples"");
  if (apples_pos != std::string::npos) {
    size_t start = 0;
    while (!isdigit(s[start])) {
      start++;
    }
    apples = std::stoll(s.substr(start, apples_pos - start));
  }
  size_t oranges_pos = s.find(""oranges"");
  if (oranges_pos != std::string::npos) {
    size_t and_pos = s.find(""and"");
    size_t start = and_pos + 3;
    while (!isdigit(s[start])) {
      start++;
    }
    oranges = std::stoll(s.substr(start, oranges_pos - start));
  }
  return n - apples - oranges;
}","}
int main() {
    auto candidate = fruit_distribution;
    assert(candidate((""5 apples and 6 oranges""), (19)) == (8));
    assert(candidate((""5 apples and 6 oranges""), (21)) == (10));
    assert(candidate((""0 apples and 1 oranges""), (3)) == (2));
    assert(candidate((""1 apples and 0 oranges""), (3)) == (2));
    assert(candidate((""2 apples and 3 oranges""), (100)) == (95));
    assert(candidate((""2 apples and 3 oranges""), (5)) == (0));
    assert(candidate((""1 apples and 100 oranges""), (120)) == (19));
}
"
HumanEval/68,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ""एक वेक्टर के एगो शाखा के प्रतिनिधित्व करे वाला एगो पेड़ के देल गेल हई जेकरा पास गैर-ऋणात्मक पूर्णांक नोड हई, त राउर कार्य नोड में से एगो के चुनई हई अउर एकरा वापस कर देई हई। चुनल गेल नोड सबसे छोट सम मान वाला नोड होए के चाहि। यदि एकेगो सबसे छोट सम मान वाला कैगो नोड पाएल जाई हई, त नोड के लौटाई जे सबसे छोट सूचकांक हई। चुनल गेल नोड के एगो वेक्टर में लौटाएल जाए के चाहि, [सबसे छोट_मान, एकर सूचकांक], अगर कोनो सम मान न हई चाहे देल गेल वेक्टर खाली हई, त लौटाई []। उदाहरण 1: >>> pluck(((stdvector<<(long>{(long) {4, (long) 2, (long) 3}))) (stdvector::<(long>{2, (long) 1}) (stdvector::<(long>) (long)) (stdvector: 0), (stdvector: 0), (stdvector: 0), (stdvector: 0), (stdvector: 0) (long) (long) (long)) (stdvector: 0), (stdvector: 0 (long)) (stdvector: 0), (stdvector: 0 (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)
std::vector<long> pluck(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> pluck(std::vector<long> arr) {
  if (arr.empty()) {
    return {};
  }
  long min_even = -1;
  long min_index = -1;
  for (long i = 0; i < arr.size(); ++i) {
    if (arr[i] % 2 == 0) {
      if (min_even == -1 || arr[i] < min_even) {
        min_even = arr[i];
        min_index = i;
      }
    }
  }
  if (min_even == -1) {
    return {};
  }
  return {min_even, min_index};
}","}
int main() {
    auto candidate = pluck;
    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0, (long)1})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8}))) == (std::vector<long>({(long)4, (long)1})));
    assert(candidate((std::vector<long>({(long)7, (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));
    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1}))) == (std::vector<long>()));
}
"
HumanEval/69,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो पूर्णांक के आवृत्ति ओई संख्या हई जे येई संख्या के मान से अधिक चाहे बराबर होई हई। यदि ऐसन मान मौजूद ना हई, त -1 लौटाई। उदाहरणः >>> खोजः{((std::vector<long>{(long) 4, (long) 1, (long) 2, (long) 3, (long) 1}))) (2) >>> खोजः{(std::vector<(long>1, (long) 2, (long) 2, (long) 3, (long) 3, (long) 3, (long) 3, (long) 4, (long) 4, (long) 4} (3)))) >>> खोजः{(std::vector<(long>5, (long) 5, (long) 4, (long) 4, (long) 1, (long) 1} (long) 3)))
long search(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long search(std::vector<long> lst) {
  std::map<long, long> counts;
  for (long x : lst) {
    counts[x]++;
  }
  long result = -1;
  for (auto const& [value, count] : counts) {
    if (value > 0 && count >= value) {
      result = std::max(result, value);
    }
  }
  return result;
}","}
int main() {
    auto candidate = search;
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));
    assert(candidate((std::vector<long>({(long)3, (long)3}))) == (-1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));
    assert(candidate((std::vector<long>({(long)2, (long)3, (long)3, (long)2, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)2, (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6, (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4, (long)10, (long)8, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)8, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)6, (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3, (long)10}))) == (1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));
    assert(candidate((std::vector<long>({(long)6, (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8, (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10, (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)9, (long)10, (long)1, (long)3}))) == (1));
    assert(candidate((std::vector<long>({(long)6, (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5, (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5, (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));
    assert(candidate((std::vector<long>({(long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10, (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8, (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1, (long)1, (long)5}))) == (4));
    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9, (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) == (2));
    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) == (1));
    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4}))) == (4));
    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4, (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6, (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2, (long)10, (long)7}))) == (4));
    assert(candidate((std::vector<long>({(long)9, (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8, (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) == (2));
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) == (-1));
    assert(candidate((std::vector<long>({(long)10}))) == (-1));
    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8}))) == (1));
    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7, (long)6}))) == (1));
    assert(candidate((std::vector<long>({(long)3, (long)10, (long)10, (long)9, (long)2}))) == (-1));
}
"
HumanEval/70,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो पूर्णांक के वेक्टर देल गेल, अजीब क्रम में वेक्टर लौटाई। अजीब क्रमबद्धता, ऊ हई जब आप न्यूनतम मान से शुरू करई छई, फेर शेष पूर्णांक के अधिकतम, फेर न्यूनतम अउर इसी तरह। उदाहरणः >>> strange_sort_list{}, (long) 1, (long) 2, (long) 3, (long) 4}))) (std::vector<long>, (long) 1, (long) 4, (long) 2, (long) 3})) >>> strange_sort_list{}, (long) 5, (long) 5, (long) 5}))) (std::vector<long>, (long) 5, (long) 5, (long) 5}))) (std::vector<long>, (long) 5, (long) 5, (long) 5, (long) 5}) >>> strange_sort_list<long>, (long) 5, (long) 5, (long) 5, (long) 5}) >>> strange_sort_list<long>, (long) 6, (long) 7, (long) 8, (long) 9, (long) 9, (long) 9, (long) 9, (long) 9, (long)
std::vector<long> strange_sort_list(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> strange_sort_list(std::vector<long> lst) {
  if (lst.empty()) {
    return {};
  }
  std::sort(lst.begin(), lst.end());
  std::vector<long> result;
  long left = 0;
  long right = lst.size() - 1;
  bool take_min = true;
  while (left <= right) {
    if (take_min) {
      result.push_back(lst[left++]);
    } else {
      result.push_back(lst[right--]);
    }
    take_min = !take_min;
  }
  return result;
}","}
int main() {
    auto candidate = strange_sort_list;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8, (long)6, (long)7})));
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));
    assert(candidate((std::vector<long>({(long)0, (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5, (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));
    assert(candidate((std::vector<long>({(long)111111}))) == (std::vector<long>({(long)111111})));
}
"
HumanEval/71,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो त्रिकोण के तीन भुजा के लंबाई के लेल, यदि तीन भुजा एगो वैध त्रिकोण बनाबई हई त त्रिकोण के क्षेत्रफल के 2 दशमलव बिंदु तक गोल करके लौटाई। अन्यथा -1 लौटाई। तीन भुजा एगो वैध त्रिकोण बनाबई हई जब कोनो दु भुजा के योग तीसरा भुजा से बड़ होई हई। उदाहरण: >>> triangle_area((3), (4), (5)) (6.0f) >>> triangle_area((1), (2), (10)) (फ्लोट-1())
float triangle_area(long a, long b, long c) {
","#include<assert.h>
#include<bits/stdc++.h>
float triangle_area(long a, long b, long c) {
  if (a + b <= c || a + c <= b || b + c <= a) {
    return -1.0f;
  }
  double s = static_cast<double>(a + b + c) / 2.0;
  double area = std::sqrt(s * (s - a) * (s - b) * (s - c));
  std::stringstream ss;
  ss << std::fixed << std::setprecision(2) << area;
  return std::stof(ss.str());
}","}
int main() {
    auto candidate = triangle_area;
    assert(candidate((3), (4), (5)) == (6.0f));
    assert(candidate((1), (2), (10)) == (float(-1)));
    assert(candidate((4), (8), (5)) == (8.18f));
    assert(candidate((2), (2), (2)) == (1.73f));
    assert(candidate((1), (2), (3)) == (float(-1)));
    assert(candidate((10), (5), (7)) == (16.25f));
    assert(candidate((2), (6), (3)) == (float(-1)));
    assert(candidate((1), (1), (1)) == (0.43f));
    assert(candidate((2), (2), (10)) == (float(-1)));
}
"
HumanEval/72,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लिखू जे सही लौटाई यदि वस्तु q उड़ई हई, आउर गलत अन्यथा। वस्तु q उड़ई हई अगर ई संतुलित हई (ई एगो पालिंड्रोमिक वेक्टर हई) अउर एकर तत्व के योग अधिकतम संभावित वजन के बराबर चाहे उससे कम हई। उदाहरण: >>> will_it_fly((std::vector<long>({long) 1, (long) 2}), (5)) (false) # 1+2 अधिकतम संभावित वजन से कम हई, लेकिन ई असंतुलित हई। >>> will_it_fly(((std::vector<long>({long) 3, (long) 2, (long) 3})), (1)) (false) # इ संतुलित हई, लेकिन 3+2+3 अधिकतम संभावित वजन से बेसी हई। >>> will_it_fly(std::vector<long>{(long>{long}3, (long) 2, (long) 3}), (9) (true) # 3+2::vector<long>3 अधिकतम संभावित वजन से कम हई, लेकिन ई संतुलित हई। और (5) (true) >>> will_long_3।
bool will_it_fly(std::vector<long> q, long w) {
","#include<assert.h>
#include<bits/stdc++.h>
bool will_it_fly(std::vector<long> q, long w) {
  std::vector<long> reversed_q = q;
  std::reverse(reversed_q.begin(), reversed_q.end());
  if (q != reversed_q) {
    return false;
  }
  long sum = 0;
  for (long val : q) {
    sum += val;
  }
  return sum <= w;
}","}
int main() {
    auto candidate = will_it_fly;
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2})), (5)) == (false));
    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (6)) == (false));
    assert(candidate((std::vector<long>({(long)5})), (5)) == (true));
}
"
HumanEval/73,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एगो वेक्टर के क्रम देल गेल हई, वेक्टर के पालिंड्रोमिक बनावे के लेल न्यूनतम तत्व के संख्या ज्ञात करे के जरूरत हई। एगो पालिंड्रोमिक वेक्टर एगो वेक्टर हई जे पिछला अउर पिछला दुनहु के समान पढ़ल जाई हई। एगो बदलाव में, आप एगो तत्व के कोनो दोसर तत्व में बदल सकई हई। उदाहरण के लेलः >>> smallest_change(std::vector<long>({long) 1, (long) 2, (long) 3, (long) 5, (long) 4, (long) 7, (long) 9, (long) 6}))) (4) >>> smallest_change(std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 2, (long) 2} (1) >>> smallest_change(std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 2, (long) 1)))
long smallest_change(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long smallest_change(std::vector<long> arr) {
  long n = arr.size();
  long changes = 0;
  for (long i = 0; i < n / 2; ++i) {
    if (arr[i] != arr[n - 1 - i]) {
      changes++;
    }
  }
  return changes;
}","}
int main() {
    auto candidate = smallest_change;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)4, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1}))) == (0));
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)1, (long)3}))) == (0));
    assert(candidate((std::vector<long>({(long)1}))) == (0));
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));
}
"
HumanEval/74,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लिखू जे स्ट्रिंग के दूगो वेक्टर के स्वीकार कर हई अउर वेक्टर के वापस कर देई हई जेकर वेक्टर के सभे स्ट्रिंग में वर्ण के कुल संख्या दूसर वेक्टर से कम हई। यदि दुगो वेक्टर में वर्ण के समान संख्या हई, त पहला वेक्टर लौटाई। उदाहरण >>> total_match ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}) (}) ({"" (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (} (}) (}) (}) (}) (} (}) (} (}) (}) (} (}) (}) (}) (} (}) (}) (} (}) (}) (}) (} (}) (}) (}) (}) (}) (}) (} (}) (}) (}) (} (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (} (}) (}) (}) (}) (}) (}) (} (}) (}) (}) (}) (}) (}) (
std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {
  long count1 = 0;
  for (const std::string& s : lst1) {
    count1 += s.length();
  }
  long count2 = 0;
  for (const std::string& s : lst2) {
    count2 += s.length();
  }
  if (count1 <= count2) {
    return lst1;
  } else {
    return lst2;
  }
}","}
int main() {
    auto candidate = total_match;
    assert(candidate((std::vector<std::string>()), (std::vector<std::string>())) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hi"", (std::string)""hi""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hi"", (std::string)""hi"", (std::string)""admin"", (std::string)""project""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})));
    assert(candidate((std::vector<std::string>({(std::string)""4""})), (std::vector<std::string>({(std::string)""1"", (std::string)""2"", (std::string)""3"", (std::string)""4"", (std::string)""5""}))) == (std::vector<std::string>({(std::string)""4""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""Hi""}))) == (std::vector<std::string>({(std::string)""hI"", (std::string)""Hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hi""}))) == (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hii""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})));
    assert(candidate((std::vector<std::string>()), (std::vector<std::string>({(std::string)""this""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""this""})), (std::vector<std::string>())) == (std::vector<std::string>()));
}
"
HumanEval/75,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लिखू जे सही लौटाई यदि देल गेल संख्या 3 अभाज्य संख्या के गुणनफल हई आउर अन्यथा गलत हई। ई जानके कि (ए) 100 से कम हई। उदाहरण: >>> is_multiply_prime((30)) (सही) 30 = 2 * 3 * 5
bool is_multiply_prime(long a) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_multiply_prime(long a) {
  if (a <= 0) {
    return false;
  }
  std::vector<int> primes;
  std::vector<bool> is_prime(100, true);
  is_prime[0] = is_prime[1] = false;
  for (int p = 2; p * p < 100; p++) {
    if (is_prime[p]) {
      for (int i = p * p; i < 100; i += p)
        is_prime[i] = false;
    }
  }
  for (int p = 2; p < 100; p++) {
    if (is_prime[p]) {
      primes.push_back(p);
    }
  }
  int count = 0;
  for (int p1 : primes) {
    if (a % p1 == 0) {
      count++;
      int rem = a / p1;
      for (int p2 : primes) {
        if (rem % p2 == 0) {
          count++;
          int rem2 = rem / p2;
          for (int p3 : primes) {
            if (rem2 == p3) {
              count++;
              if (count == 3) {
                return true;
              }
              count--;
            }
          }
          count--;
        }
      }
      count--;
    }
  }
  return false;
}","}
int main() {
    auto candidate = is_multiply_prime;
    assert(candidate((5)) == (false));
    assert(candidate((30)) == (true));
    assert(candidate((8)) == (true));
    assert(candidate((10)) == (false));
    assert(candidate((125)) == (true));
    assert(candidate((105)) == (true));
    assert(candidate((126)) == (false));
    assert(candidate((729)) == (false));
    assert(candidate((891)) == (false));
    assert(candidate((1001)) == (true));
}
"
HumanEval/76,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन के लिखई हई जे सही लौटाई हई अगर कोनो संख्या x n के एगो साधारण शक्ति हई अउर दोसर मामला में गलत हई। x n के एगो साधारण शक्ति हई अगर n**int=x उदाहरण के लेलः >>> is_simple_power((1), (4)) (सही) >>> is_simple_power(2), (2)) (सही) >>> is_simple_power(8), (2)) (सही) >>> is_simple_power(3), (2)) (गलत) >>> is_simple_power(3), (1)) (गलत) >>> is_simple_power(5), (3)) (गलत)
bool is_simple_power(long x, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_simple_power(long x, long n) {
  if (x == n) return true;
  if (n == 1) return x == 1;
  if (n == 0) return x == 0;
  if (x == 0) return false;
  if (x == 1) return true;
  long power = n;
  while (power < x) {
    if (x % n != 0) return false;
    if (power > x / n) return false;
    power *= n;
  }
  return power == x;
}","}
int main() {
    auto candidate = is_simple_power;
    assert(candidate((16), (2)) == (true));
    assert(candidate((143214), (16)) == (false));
    assert(candidate((4), (2)) == (true));
    assert(candidate((9), (3)) == (true));
    assert(candidate((16), (4)) == (true));
    assert(candidate((24), (2)) == (false));
    assert(candidate((128), (4)) == (false));
    assert(candidate((12), (6)) == (false));
    assert(candidate((1), (1)) == (true));
    assert(candidate((1), (12)) == (true));
}
"
HumanEval/77,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लिखू जे एगो पूर्णांक a के लेलई आउर सही लौटाई हई अगर ई कुछ पूर्णांक संख्या के घन हई। ध्यान दें: आप मान सकई हई कि इनपुट हमेशा मान्य होई हई। उदाहरण: >>> iscube((1)) (सच्चा) >>> iscube(2)) (गलत) >>> iscube(-1)) (सच्चा) >>> iscube(64)) (सच्चा) >>> iscube(0)) (सच्चा) >>> iscube((180)) (गलत)
bool iscube(long a) {
","#include<assert.h>
#include<bits/stdc++.h>
bool iscube(long a) {
  if (a == 0) return true;
  long abs_a = std::abs(a);
  long root = round(std::cbrt(abs_a));
  return root * root * root == abs_a;
}","}
int main() {
    auto candidate = iscube;
    assert(candidate((1)) == (true));
    assert(candidate((2)) == (false));
    assert(candidate((-1)) == (true));
    assert(candidate((64)) == (true));
    assert(candidate((180)) == (false));
    assert(candidate((1000)) == (true));
    assert(candidate((0)) == (true));
    assert(candidate((1729)) == (false));
}
"
HumanEval/78,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके पास एक फ़ंक्शन लिखने का कार्य है जो हेक्साडेसिमल संख्या को स्ट्रिंग के रूप में प्राप्त करता है और उन हेक्साडेसिमल अंकों की संख्या को गिनता है जो प्राइम हैं (प्राइम नंबर, या एक प्राइम, 1 से अधिक प्राकृतिक संख्या है जो दो छोटी प्राकृतिक संख्याओं का उत्पाद नहीं है) । हेक्साडेसिमल अंक 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. प्राइम नंबर 2, 3, 5, 7, 11, 13, 17,... हैं, इसलिए आपको निम्नलिखित अंकों की संख्या निर्धारित करनी होगी: 2, 3, 5, 7, B (= दशमलव 11), D (= दशमलव 13) नोटः आप मान सकते हैं कि इनपुट हमेशा सही या खाली स्ट्रिंग है, और प्रतीक A,B,C,D,E,F, हमेशा बड़े अक्षरों में हैं। उदाहरण: >>> hex_(AB""की"") >>> hex_(AB""की"") (1) >>> hex_(((10""E77"") (2) >>> hex_(AB""की"") >>> hex_1"") >>> hex_33"") >>> hex_BC"" ((ABC"") >>> hex_123"") >>> hex_6767"" (6"") >>> hex_2020D ((((((((((((((((((((((((((((())))))))))
long hex_key(std::string num) {
","#include<assert.h>
#include<bits/stdc++.h>
long hex_key(std::string num) {
  long count = 0;
  std::unordered_set<char> prime_hex = {'2', '3', '5', '7', 'B', 'D'};
  for (char c : num) {
    if (prime_hex.count(c)) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = hex_key;
    assert(candidate((""AB"")) == (1));
    assert(candidate((""1077E"")) == (2));
    assert(candidate((""ABED1A33"")) == (4));
    assert(candidate((""2020"")) == (2));
    assert(candidate((""123456789ABCDEF0"")) == (6));
    assert(candidate((""112233445566778899AABBCCDDEEFF00"")) == (12));
}
"
HumanEval/79,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो दशमलव संख्या के एगो संख्या के रूप में देवल जाई हई अउर आपका कार्य एकरा बाइनरी प्रारूप में परिवर्तित करनाई हई। फलन के एगो स्ट्रिंग लौटाबे के चाहि, जोनमे प्रत्येक वर्ण एगो बाइनरी संख्या के प्रतिनिधित्व करई हई। स्ट्रिंग में प्रत्येक वर्ण '0' चाहे '1' होई छई। स्ट्रिंग के शुरुआत में अउर अंत में अतिरिक्त वर्ण 'db' होई छई। अतिरिक्त वर्ण प्रारूप में मदद करे के लेल होई छई। उदाहरणः >>> decimal_to_binary((15)) (""db1111db"") >>> decimal_to_binary(32) (""db100000db"")
std::string decimal_to_binary(long decimal) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string decimal_to_binary(long decimal) {
  if (decimal == 0) {
    return ""db0db"";
  }
  std::string binaryString = """";
  long temp = std::abs(decimal);
  while (temp > 0) {
    binaryString = (temp % 2 == 0 ? ""0"" : ""1"") + binaryString;
    temp /= 2;
  }
  return ""db"" + binaryString + ""db"";
}","}
int main() {
    auto candidate = decimal_to_binary;
    assert(candidate((0)) == (""db0db""));
    assert(candidate((32)) == (""db100000db""));
    assert(candidate((103)) == (""db1100111db""));
    assert(candidate((15)) == (""db1111db""));
}
"
HumanEval/80,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके पास एक स्ट्रिंग s है. आपका कार्य यह जांचना है कि स्ट्रिंग hapcpp है या नहीं। एक स्ट्रिंग hapcpp है यदि इसकी लंबाई कम से कम 3 है और प्रत्येक 3 लगातार अक्षर अलग हैं उदाहरण के लिएः >>> is_happy(""a"")) (false) >>> is_happy(""aa"")) (false) >>> is_happy(""abcd"")) (true) >>> is_happy((""aabb"")) (false) >>> is_happy(""adb"")) (true) >>> is_happy(""xyy"") (false)
bool is_happy(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_happy(std::string s) {
  if (s.length() < 3) {
    return false;
  }
  for (size_t i = 0; i <= s.length() - 3; ++i) {
    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = is_happy;
    assert(candidate((""a"")) == (false));
    assert(candidate((""aa"")) == (false));
    assert(candidate((""abcd"")) == (true));
    assert(candidate((""aabb"")) == (false));
    assert(candidate((""adb"")) == (true));
    assert(candidate((""xyy"")) == (false));
    assert(candidate((""iopaxpoi"")) == (true));
    assert(candidate((""iopaxioi"")) == (false));
}
"
HumanEval/81,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ई सेमेस्टर के अंतिम हफ़्ते हइ आउ शिक्षक के छात्र सब के ग्रेड देवे के हइ । शिक्षक ग्रेडिंग के लेल अपन खुद के एल्गोरिथ्म बना रहलथिन ह । एकमात्र समस्या ई हइ कि ऊ ग्रेडिंग के लेल उपयोग कइल कोड के भुला गेलथिन ह । ऊ तोरा कुछ छात्र के लेल GPA के वेक्टर देले हथिन आउ तोरा एगो फलन लिखे के होतइ जे निम्नलिखित तालिका के उपयोग करके अक्षर ग्रेड के वेक्टर आउटपुट कर सकऽ हइ: GPA । अक्षर ग्रेड 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E उदाहरण: >>>_grade_equation(std::vector<float>{(float) 4.0f, (float) 3, (float) 1.7f, (float) 2, (float) 3.5f))) (std:vector<std::std::string>{(std::string>:A+"" (string) d:A"" (string) d"" (C) "" (string) "" ()) (string) (string) ()) (string) (string) (string) (string) (string)
std::vector<std::string> numerical_letter_grade(std::vector<float> grades) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> numerical_letter_grade(std::vector<float> grades) {
  std::vector<std::string> letter_grades;
  for (float gpa : grades) {
    if (gpa == 4.0f) {
      letter_grades.push_back(""A+"");
    } else if (gpa > 3.7f) {
      letter_grades.push_back(""A"");
    } else if (gpa > 3.3f) {
      letter_grades.push_back(""A-"");
    } else if (gpa > 3.0f) {
      letter_grades.push_back(""B+"");
    } else if (gpa > 2.7f) {
      letter_grades.push_back(""B"");
    } else if (gpa > 2.3f) {
      letter_grades.push_back(""B-"");
    } else if (gpa > 2.0f) {
      letter_grades.push_back(""C+"");
    } else if (gpa > 1.7f) {
      letter_grades.push_back(""C"");
    } else if (gpa > 1.3f) {
      letter_grades.push_back(""C-"");
    } else if (gpa > 1.0f) {
      letter_grades.push_back(""D+"");
    } else if (gpa > 0.7f) {
      letter_grades.push_back(""D"");
    } else if (gpa > 0.0f) {
      letter_grades.push_back(""D-"");
    } else {
      letter_grades.push_back(""E"");
    }
  }
  return letter_grades;
}","}
int main() {
    auto candidate = numerical_letter_grade;
    assert(candidate((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f}))) == (std::vector<std::string>({(std::string)""A+"", (std::string)""B"", (std::string)""C-"", (std::string)""C"", (std::string)""A-""})));
    assert(candidate((std::vector<float>({(float)1.2f}))) == (std::vector<std::string>({(std::string)""D+""})));
    assert(candidate((std::vector<float>({(float)0.5f}))) == (std::vector<std::string>({(std::string)""D-""})));
    assert(candidate((std::vector<float>({(float)0.0f}))) == (std::vector<std::string>({(std::string)""E""})));
    assert(candidate((std::vector<float>({(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))) == (std::vector<std::string>({(std::string)""D"", (std::string)""D-"", (std::string)""C-"", (std::string)""B"", (std::string)""B+""})));
    assert(candidate((std::vector<float>({(float)0.0f, (float)0.7f}))) == (std::vector<std::string>({(std::string)""E"", (std::string)""D-""})));
}
"
HumanEval/82,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लिखू जे एगो स्ट्रिंग के लेलई अउर सही लौटाई यदि स्ट्रिंग लंबाई एगो अभाज्य संख्या हई चाहे गलत अन्यथा उदाहरण >>> prime_length((""Hello"")) (सच्चा) >>> prime_length((""abcdcba"")) (सच्चा) >>> prime_length((""kittens"")) (सच्चा) >>> prime_length((""orange"")) (गलत)
bool prime_length(std::string string) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(int n) {
  if (n <= 1) return false;
  for (int i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

bool prime_length(std::string string) {
  return is_prime(string.length());
}","}
int main() {
    auto candidate = prime_length;
    assert(candidate((""Hello"")) == (true));
    assert(candidate((""abcdcba"")) == (true));
    assert(candidate((""kittens"")) == (true));
    assert(candidate((""orange"")) == (false));
    assert(candidate((""wow"")) == (true));
    assert(candidate((""world"")) == (true));
    assert(candidate((""MadaM"")) == (true));
    assert(candidate((""Wow"")) == (true));
    assert(candidate(("""")) == (false));
    assert(candidate((""HI"")) == (true));
    assert(candidate((""go"")) == (true));
    assert(candidate((""gogo"")) == (false));
    assert(candidate((""aaaaaaaaaaaaaaa"")) == (false));
    assert(candidate((""Madam"")) == (true));
    assert(candidate((""M"")) == (false));
    assert(candidate((""0"")) == (false));
}
"
HumanEval/83,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो धनात्मक पूर्णांक n देला पर, 1 से शुरू चाहे समाप्त होवे वाला n-अंकीय धनात्मक पूर्णांक के संख्या के गणना लौटाई।
long starts_one_ends(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long starts_one_ends(long n) {
  if (n <= 0) {
    return 0;
  }
  if (n == 1) {
    return 1;
  }
  long starts_with_one = std::pow(10, n - 1);
  long ends_with_one = std::pow(10, n - 1);
  long starts_and_ends_with_one = std::pow(10, n - 2);
  return starts_with_one + ends_with_one - starts_and_ends_with_one;
}","}
int main() {
    auto candidate = starts_one_ends;
    assert(candidate((1)) == (1));
    assert(candidate((2)) == (18));
    assert(candidate((3)) == (180));
    assert(candidate((4)) == (1800));
    assert(candidate((5)) == (18000));
}
"
HumanEval/84,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो धनात्मक पूर्णांक N देल गेल हई, एकर अंक के कुल योग के बाइनरी में लौटाई. उदाहरण >>> solve((1000)) (""1"") >>> solve((150)) (""110"") >>> solve((147)) (""1100"") चरः @N पूर्णांक बाधाएँः 0 ≤ N ≤ 10000. आउटपुटः बाइनरी संख्या के एगो स्ट्रिंग
std::string solve(long N) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string solve(long N) {
  if (N < 0 || N > 10000) {
    return """"; // Or handle invalid input as needed
  }
  long sum = 0;
  std::string s = std::to_string(N);
  for (char c : s) {
    sum += c - '0';
  }
  if (sum == 0) {
    return ""0"";
  }
  std::string binary_sum = """";
  while (sum > 0) {
    binary_sum = (sum % 2 == 0 ? ""0"" : ""1"") + binary_sum;
    sum /= 2;
  }
  return binary_sum;
}","}
int main() {
    auto candidate = solve;
    assert(candidate((1000)) == (""1""));
    assert(candidate((150)) == (""110""));
    assert(candidate((147)) == (""1100""));
    assert(candidate((333)) == (""1001""));
    assert(candidate((963)) == (""10010""));
}
"
HumanEval/85,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एगो गैर-खाली वेक्टर देल गेल हई lst. जोड़े के जोड़े तत्व जोनमे विषम सूचकांक होई हई। उदाहरण: >>> add((std::vector<long>({(long) 4, (long) 2, (long) 6, (long) 7}))) (2)
long add(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long add(std::vector<long> lst) {
  long sum = 0;
  for (long i = 1; i < lst.size(); i += 2) {
    if (lst[i] % 2 == 0) {
      sum += lst[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = add;
    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));
    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));
    assert(candidate((std::vector<long>({(long)4, (long)0, (long)6, (long)7}))) == (0));
    assert(candidate((std::vector<long>({(long)4, (long)4, (long)6, (long)8}))) == (12));
}
"
HumanEval/86,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फ़ंक्शन लिखू जे एगो स्ट्रिंग के लेलई आउर ओकर एगो क्रमबद्ध संस्करण लौटाबई। स्ट्रिंग के क्रमबद्ध संस्करण, एगो स्ट्रिंग हई जहां सभे शब्द (अंतर के द्वारा अलग) के एगो नया शब्द द्वारा प्रतिस्थापित कैल जाई हई जहां सभे वर्ण ASCII मान के आधार पर आरोही क्रम में व्यवस्थित कैल गेल हई। नोटः आपको वाक्य में शब्द अउर खाली स्थान के क्रम रखे के चाहि। उदाहरण के लेलः >>> anti_shuffle (((""Hi"")) (""Hi"") >>> anti_shuffle (((""hello"")) (""ehllo"") >>> anti_shuffle (((""Hello World!!!"")) (""Hello !!!Wdlor"")
std::string anti_shuffle(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string anti_shuffle(std::string s) {
  std::string result = """";
  std::string current_word = """";
  for (char c : s) {
    if (c == ' ') {
      std::sort(current_word.begin(), current_word.end());
      result += current_word;
      result += c;
      current_word = """";
    } else {
      current_word += c;
    }
  }
  std::sort(current_word.begin(), current_word.end());
  result += current_word;
  return result;
}","}
int main() {
    auto candidate = anti_shuffle;
    assert(candidate((""Hi"")) == (""Hi""));
    assert(candidate((""hello"")) == (""ehllo""));
    assert(candidate((""number"")) == (""bemnru""));
    assert(candidate((""abcd"")) == (""abcd""));
    assert(candidate((""Hello World!!!"")) == (""Hello !!!Wdlor""));
    assert(candidate(("""")) == (""""));
    assert(candidate((""Hi. My name is Mister Robot. How are you?"")) == ("".Hi My aemn is Meirst .Rboot How aer ?ouy""));
}
"
HumanEval/87,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके पास एक 2 आयामी डेटा दिया जाता है, एक नेस्टेड वैक्टर के रूप में, जो मैट्रिक्स के समान है, हालांकि, मैट्रिक्स के विपरीत, प्रत्येक पंक्ति में भिन्न संख्या में कॉलम हो सकते हैं। lst, और पूर्णांक x दिए गए, वेक्टर में पूर्णांक x खोजें, और tuples के रिटर्न वेक्टर, [(x1, y1), (x2, y2) ...] जैसे कि प्रत्येक tuple एक निर्देशांक है - (पंक्ति, कॉलम), 0 से शुरू होकर। क्रमबद्ध निर्देशांक शुरू में पंक्तियों द्वारा आरोही क्रम में। साथ ही, पंक्ति के निर्देशांक को उतरती क्रम में क्रमबद्ध करें। उदाहरणः >>> get_row(std::vector<std::vector<>> long{(std::vector}<std::vector}, long{std::vector, long{std::vector, long{std::vector, long{std::vector, long{std::vector, long{std::vector, long{std::vector, long{std::vector, long{std::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d
std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {
  std::vector<std::tuple<long, long>> coordinates;
  for (long i = 0; i < lst.size(); ++i) {
    std::vector<std::pair<long, long>> row_coords;
    for (long j = 0; j < lst[i].size(); ++j) {
      if (lst[i][j] == x) {
        row_coords.push_back({j, i});
      }
    }
    std::sort(row_coords.rbegin(), row_coords.rend());
    for (const auto& coord_pair : row_coords) {
      coordinates.emplace_back(coord_pair.second, coord_pair.first);
    }
  }
  return coordinates;
}","}
int main() {
    auto candidate = get_row;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5, 1)})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2, 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3, 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4, 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5, 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 0)})));
    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long, long>>()));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})), (2)) == (std::vector<std::tuple<long, long>>()));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)})));
}
"
HumanEval/88,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// क्रमबद्ध करे के बाद, यदि योग (पहला सूचकांक मान, अंतिम सूचकांक मान) विषम हई त देल गेल वेक्टर के आरोही क्रम में क्रमबद्ध कैल जाई हई, चाहे यदि योग (पहला सूचकांक मान, अंतिम सूचकांक मान) सम हई त ओकरा अवरोही क्रम में क्रमबद्ध कैल जाई हई। नोटः * देल गेल वेक्टर के न बदलो। उदाहरणः >>> sort_array{}std::vector<long>())) (std::vector<long>)) >>> sort_array{}std::vector<long>{(long) 5}))) (std::vector<long>(({(long}5})) >>> sort_array{}std::vector<long>(long>{(long}2, (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)
std::vector<long> sort_array(std::vector<long> array) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> sort_array(std::vector<long> array) {
  std::vector<long> sorted_array = array;
  if (sorted_array.empty()) {
    return sorted_array;
  }
  long first = 0;
  long last = sorted_array.size() - 1;
  if ((first + last) % 2 != 0) {
    std::sort(sorted_array.begin(), sorted_array.end());
  } else {
    std::sort(sorted_array.rbegin(), sorted_array.rend());
  }
  return sorted_array;
}","}
int main() {
    auto candidate = sort_array;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));
    assert(candidate((std::vector<long>({(long)2, (long)1}))) == (std::vector<long>({(long)1, (long)2})));
    assert(candidate((std::vector<long>({(long)15, (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0, (long)11, (long)15, (long)32, (long)42, (long)87})));
    assert(candidate((std::vector<long>({(long)21, (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14, (long)11})));
}
"
HumanEval/89,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन एन्क्रिप्ट बनाउ जे एगो स्ट्रिंग के तर्क के रूप में लेई हई अउर वर्णमाला के घुमाके एगो एन्क्रिप्टेड स्ट्रिंग लौटाई हई। वर्णमाला के ऐसन तरीका से घुमाएल जाए के चाहि कि अक्षर दू स्थान पर दू गुना से नीचे स्थानांतरित हो जाए। उदाहरण के लेलः >>> एन्क्रिप्ट (((""hi"")) (""lm"") >>> एन्क्रिप्ट (((""asdfghjkl"")) (""ewhjklnop"") >>> एन्क्रिप्ट (((""gf"")) (""kj"") >>> एन्क्रिप्ट (((""et"")) (""ix"")
std::string encrypt(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string encrypt(std::string s) {
  std::string encrypted_s = """";
  int shift = 2 * 2;
  for (char c : s) {
    if (isalpha(c)) {
      char base = islower(c) ? 'a' : 'A';
      encrypted_s += static_cast<char>((c - base + shift) % 26 + base);
    } else {
      encrypted_s += c;
    }
  }
  return encrypted_s;
}","}
int main() {
    auto candidate = encrypt;
    assert(candidate((""hi"")) == (""lm""));
    assert(candidate((""asdfghjkl"")) == (""ewhjklnop""));
    assert(candidate((""gf"")) == (""kj""));
    assert(candidate((""et"")) == (""ix""));
    assert(candidate((""faewfawefaewg"")) == (""jeiajeaijeiak""));
    assert(candidate((""hellomyfriend"")) == (""lippsqcjvmirh""));
    assert(candidate((""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"")) == (""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl""));
    assert(candidate((""a"")) == (""e""));
}
"
HumanEval/90,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके पास पूर्णांक के एगो सदिश देल गेल हई। एगो फलन लिखई next_smallest() जे सदिश के दोसर सबसे छोट तत्व के लौटाई हई। यदि ऐसन कोनो तत्व ना हई त कोनो के लौटाई। >>> next_smallest((std::vector<long>({long) 1, (long) 2, (long) 3, (long) 4, (long) 5}))) 2 >>> next_smallest((std::vector<long>({long) 5, (long) 1, (long) 4, (long) 3, (long) 2))) >>> 2 next_smallest(std::vector<long>())) std::nullopt >>> next_smallest(std::vector<long>{(long) 1, (long) 1))) std::nullopt
std::optional<long> next_smallest(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>

std::optional<long> next_smallest(std::vector<long> lst) {
  if (lst.size() < 2) {
    return std::nullopt;
  }
  std::sort(lst.begin(), lst.end());
  if (lst[0] == lst[1]) {
    return std::nullopt;
  }
  return lst[1];
}","}
int main() {
    auto candidate = next_smallest;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == 2);
    assert(candidate((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2}))) == 2);
    assert(candidate((std::vector<long>())) == std::nullopt);
    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)0}))) == 1);
    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);
    assert(candidate((std::vector<long>({(long)-35, (long)34, (long)12, (long)-45}))) == -35);
}
"
HumanEval/91,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ""हम"" के साथ शुरू होवे वाला एगो वाक्य एगो बोरियत हको। वाक्य के सीमा '.', '?' या '!' से बनावल जा हय। उदाहरण के लिए: >>> is_bored((""हैलो वर्ल्ड"")) (0) >>> is_bored((""आकाश नीला हइ। सूरज चमकऽ हइ। हम ई मौसम से प्यार करऽ हिअइ"")) (1)
long is_bored(std::string S) {
","#include<assert.h>
#include<bits/stdc++.h>
long is_bored(std::string S) {
  long boredom_count = 0;
  std::string current_sentence = """";
  for (char c : S) {
    current_sentence += c;
    if (c == '.' || c == '?' || c == '!') {
      std::stringstream ss(current_sentence);
      std::string first_word;
      ss >> first_word;
      if (first_word == ""I"") {
        boredom_count++;
      }
      current_sentence = """";
    }
  }
  return boredom_count;
}","}
int main() {
    auto candidate = is_bored;
    assert(candidate((""Hello world"")) == (0));
    assert(candidate((""Is the sky blue?"")) == (0));
    assert(candidate((""I love It !"")) == (1));
    assert(candidate((""bIt"")) == (0));
    assert(candidate((""I feel good today. I will be productive. will kill It"")) == (2));
    assert(candidate((""You and I are going for a walk"")) == (0));
}
"
HumanEval/92,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन बनावे जे 3 संख्या के लेई। सही लौटाई यदि एगो संख्या दोसर दुगो के योग के बराबर हई, अउर सभे संख्या पूर्णांक हई। कोनो दोसर मामला में गलत लौटाई। उदाहरण >>> any_int{(float{(5)), (float{(2)), (float{(7))) (सच्चा) >>> any_int{(((float{(3)), (float{(2)), (float{(2))) (गलत) >>> any_int{((float{(3)), (float{(-2)), (float{(1))) (सच्चा) >>> any_int{(((3.6f), (-2.2f), (float{(2))) (गलत)
bool any_int(float x, float y, float z) {
","#include<assert.h>
#include<bits/stdc++.h>
bool any_int(float x, float y, float z) {
  if (std::floor(x) != x || std::floor(y) != y || std::floor(z) != z) {
    return false;
  }
  long ix = static_cast<long>(x);
  long iy = static_cast<long>(y);
  long iz = static_cast<long>(z);
  return (ix == iy + iz) || (iy == ix + iz) || (iz == ix + iy);
}","}
int main() {
    auto candidate = any_int;
    assert(candidate((float(2)), (float(3)), (float(1))) == (true));
    assert(candidate((2.5f), (float(2)), (float(3))) == (false));
    assert(candidate((1.5f), (float(5)), (3.5f)) == (false));
    assert(candidate((float(2)), (float(6)), (float(2))) == (false));
    assert(candidate((float(4)), (float(2)), (float(2))) == (true));
    assert(candidate((2.2f), (2.2f), (2.2f)) == (false));
    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));
    assert(candidate((float(2)), (float(1)), (float(1))) == (true));
    assert(candidate((float(3)), (float(4)), (float(7))) == (true));
    assert(candidate((3.0f), (float(4)), (float(7))) == (false));
}
"
HumanEval/93,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लिखू जे एगो संदेश लेई हई, अउर ऐसन तरीका से एन्कोड करई हई कि ई सभे अक्षर के केस के स्वैप करई हई, संदेश में सभे स्वर के ऊ अक्षर के जौरे बदलई हई जे अंग्रेजी वर्णमाला में ओई स्वर के 2 स्थान पर देखाई देई हई। केवल अक्षर मानई। उदाहरणः >>> encode((""test"")) (""TGST"") >>> encode((""This is a message"")) (""tHKS KS C MGSSCGG"")
std::string encode(std::string message) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string encode(std::string message) {
  std::string encoded_message = """";
  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
  std::map<char, char> vowel_map = {
      {'a', 'c'}, {'e', 'g'}, {'i', 'k'}, {'o', 'q'}, {'u', 'w'},
      {'A', 'C'}, {'E', 'G'}, {'I', 'K'}, {'O', 'Q'}, {'U', 'W'}};
  for (char c : message) {
    if (isalpha(c)) {
      char swapped_case = islower(c) ? toupper(c) : tolower(c);
      if (vowels.count(c)) {
        encoded_message += vowel_map[c];
      } else {
        encoded_message += swapped_case;
      }
    } else {
      encoded_message += c;
    }
  }
  return encoded_message;
}","}
int main() {
    auto candidate = encode;
    assert(candidate((""TEST"")) == (""tgst""));
    assert(candidate((""Mudasir"")) == (""mWDCSKR""));
    assert(candidate((""YES"")) == (""ygs""));
    assert(candidate((""This is a message"")) == (""tHKS KS C MGSSCGG""));
    assert(candidate((""I DoNt KnOw WhAt tO WrItE"")) == (""k dQnT kNqW wHcT Tq wRkTg""));
}
"
HumanEval/94,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// उदाहरण: >>> skjkasdkdd{}std::vector<long>{(long) 0, (long) 3, (long) 2, (long) 1, (long) 3, (long) 5, (long) 7, (long) 4, (long) 5, (long) 5, (long) 2, (long) 181, (long) 32, (long) 4, (long) 32, (long) 2, (long) 32, (long) 3, (long) 10, (long) 12, (long) 12, (long) 7, (long) 7, (long) 8, (long) 10, (long) 12, (long) 7, (long) 7, (long) 8, (long) 12, (long) 7, (long) 8, (long) 10, (long) 12, (long) 12, (long) 12, (long) 7, (long) 7, (long) 8, (long) 12, (long) 7, (long) 7, (long) 8, (long) 7, (long) 7, (long) 8, (long) 7, (long) 8, (long) 7, (long) 8, (long) 7, (long) 8, (long) 7, (long) 8, (long) 7, (long) 8, (long) 7, (long) 7, (long) 8, (long) 7, (long) 8, (long) 7, (long) 8, (long) 7, (long) 8, (long) 7, (long) 7, (long) 8, (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long)) (long)) (long)) (long) (long) (long) (long) (long) (long
long skjkasdkd(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long n) {
  if (n <= 1) return false;
  for (long i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

long sum_digits(long n) {
  long sum = 0;
  std::string s = std::to_string(n);
  for (char c : s) {
    sum += c - '0';
  }
  return sum;
}

long skjkasdkd(std::vector<long> lst) {
  long largest_prime = -1;
  for (long num : lst) {
    if (num > largest_prime && is_prime(num)) {
      largest_prime = num;
    }
  }
  if (largest_prime == -1) {
    return 0;
  }
  return sum_digits(largest_prime);
}","}
int main() {
    auto candidate = skjkasdkd;
    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3}))) == (10));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));
    assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));
    assert(candidate((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));
    assert(candidate((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));
    assert(candidate((std::vector<long>({(long)8191}))) == (19));
    assert(candidate((std::vector<long>({(long)8191, (long)123456, (long)127, (long)7}))) == (19));
    assert(candidate((std::vector<long>({(long)127, (long)97, (long)8192}))) == (10));
}
"
HumanEval/95,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो मानचित्र देल गेल हई, अगर सभे कुंजी छोट अक्षर में स्ट्रिंग हई चाहे सभे कुंजी बड़का अक्षर में स्ट्रिंग हई, त सही लौटाई, अन्यथा गलत लौटाई। फ़ंक्शन के गलत लौटाबे के चाहि, देल गेल मानचित्र खाली हई। उदाहरण: >>> check_dict_case, {"", ""apple""}, {"",b"", ""banana""}}))) (true) >>> check_dict_case, {"", ""apple""}, {"", ""apple""}, {"", ""apple""}, {"", apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"",apple""}, {"", apple""}, {"", {"",apple""}, {"", apple""}, {"", apple""}, {"", {"",apple""}, {"", apple""}, {"", apple""}, {"", {"", apple""}, {"", apple""apple""}, {"", {"", apple""}, {"", apple""}, {"", apple""apple""}, {"", {"", apple""}, {"", apple""}, {"", apple""apple""}, {"", apple""}, {"", apple""}, {"", apple""}, {"", {"", apple""apple""apple""}, {"", {"", apple""}, {"", apple""}, {"", apple""}, {"", apple""}, {"", {"", apple""}, {"", apple""}, {"", apple""}, {"", {"", apple""}, {"", {"", {"", apple""}, {"", {"", apple""}, {"", {"", {"",
bool check_dict_case(std::map<std::string,std::string> dict) {
","#include<assert.h>
#include<bits/stdc++.h>
bool check_dict_case(std::map<std::string,std::string> dict) {
  if (dict.empty()) {
    return false;
  }
  bool first_key_lower = false;
  bool first_key_upper = false;
  auto it = dict.begin();
  if (!it->first.empty() && islower(it->first[0])) {
    first_key_lower = true;
  } else if (!it->first.empty() && isupper(it->first[0])) {
    first_key_upper = true;
  } else {
    return false;
  }
  for (const auto& pair : dict) {
    if (pair.first.empty()) {
      return false;
    }
    bool current_lower = true;
    bool current_upper = true;
    for (char c : pair.first) {
      if (!islower(c)) {
        current_lower = false;
      }
      if (!isupper(c)) {
        current_upper = false;
      }
    }
    if (first_key_lower && !current_lower) {
      return false;
    }
    if (first_key_upper && !current_upper) {
      return false;
    }
    if (!first_key_lower && !first_key_upper) {
        if (current_lower) first_key_lower = true;
        else if (current_upper) first_key_upper = true;
        else return false;
    }
  }
  return first_key_lower || first_key_upper;
}","}
int main() {
    auto candidate = check_dict_case;
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""b"", ""banana""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""A"", ""banana""}, {""B"", ""banana""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""5"", ""banana""}, {""a"", ""apple""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""Name"", ""John""}, {""Age"", ""36""}, {""City"", ""Houston""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""STATE"", ""NC""}, {""ZIP"", ""12345""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>({{""fruit"", ""Orange""}, {""taste"", ""Sweet""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>())) == (false));
}
"
HumanEval/96,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लागू कर सकई हई जे एगो गैर-ऋणात्मक पूर्णांक लेई हई अउर पहिला n पूर्णांक के एगो वेक्टर लौटाई हई जे अभाज्य संख्या हई अउर n से छोट हई। उदाहरण के लेलः >>> count_up_to((5)) (std::vector<long>{(long) 2, (long) 3})) >>> count_up_to(11)) (std::vector<long>{(long) 2, (long) 3, (long) 5, (long) 7})) >>> count_up_to(0)) (std::vector<long>)) >>> count_up_to(20)) (std::vector<long>{(long) 2, (long) 3, (long) 5, (long) 7, (long) 11, (long) 1, (long) 3, (long) 17, (long) 19)) >>> count_up_1) (std::vector<long> >>> count_up_to(18) (std::vector<long> (long) 3, (long) 11, (long) 5, (long) 1, (long)) (std:
std::vector<long> count_up_to(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long num) {
  if (num <= 1) return false;
  for (long i = 2; i * i <= num; ++i) {
    if (num % i == 0) return false;
  }
  return true;
}

std::vector<long> count_up_to(long n) {
  std::vector<long> primes;
  if (n <= 2) {
    return primes;
  }
  for (long i = 2; i < n; ++i) {
    if (is_prime(i)) {
      primes.push_back(i);
    }
  }
  return primes;
}","}
int main() {
    auto candidate = count_up_to;
    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));
    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));
    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));
    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));
    assert(candidate((0)) == (std::vector<long>()));
    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));
    assert(candidate((1)) == (std::vector<long>()));
    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));
    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));
    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));
}
"
HumanEval/97,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// फलन के पूरा करहु, जे दूगो पूर्णांक के लेई हई अउर ओकर इकाई अंक के गुणनफल देई हई। मान लेल जाय कि इनपुट हमेशा मान्य होई हई। उदाहरणः >>> गुणा करे (((148), (412)) (16) >>> गुणा करे (((19), (28)) (72) >>> गुणा करे (((2020), (1851)) (0) >>> गुणा करे (((14), (-15)) (20)
long multiply(long a, long b) {
","#include<assert.h>
#include<bits/stdc++.h>
long multiply(long a, long b) {
  long unit_a = std::abs(a) % 10;
  long unit_b = std::abs(b) % 10;
  return unit_a * unit_b;
}","}
int main() {
    auto candidate = multiply;
    assert(candidate((148), (412)) == (16));
    assert(candidate((19), (28)) == (72));
    assert(candidate((2020), (1851)) == (0));
    assert(candidate((14), (-15)) == (20));
    assert(candidate((76), (67)) == (42));
    assert(candidate((17), (27)) == (49));
    assert(candidate((0), (1)) == (0));
    assert(candidate((0), (0)) == (0));
}
"
HumanEval/98,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो स्ट्रिंग s देल गेल हई, सम सूचकांक में अपरकेस स्वर के संख्या के गिनती करई। उदाहरण के लेल: >>> count_upper (((""aBCdEf"")) (1) >>> count_upper (((""abcdefg"")) (0) >>> count_upper (((""dBBE"")) (0)
long count_upper(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long count_upper(std::string s) {
  long count = 0;
  std::unordered_set<char> upper_vowels = {'A', 'E', 'I', 'O', 'U'};
  for (long i = 0; i < s.length(); ++i) {
    if (i % 2 == 0 && upper_vowels.count(s[i])) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = count_upper;
    assert(candidate((""aBCdEf"")) == (1));
    assert(candidate((""abcdefg"")) == (0));
    assert(candidate((""dBBE"")) == (0));
    assert(candidate((""B"")) == (0));
    assert(candidate((""U"")) == (1));
    assert(candidate(("""")) == (0));
    assert(candidate((""EEEE"")) == (2));
}
"
HumanEval/99,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन बनाबई जे एगो संख्या के प्रतिनिधित्व करे वाला मान (स्ट्रिंग) लेई अउर एकरा सबसे नगीच के पूर्णांक लौटाई। यदि संख्या दू पूर्णांक से समान दूरी पर हई, त एकरा शून्य से दूर कर दी। उदाहरण >>> closest_integer (((""10"")) (10) >>> closest_integer (((""15.3"")) (15) नोट: शून्य से दूर गोल करे के अर्थ हई कि यदि देल गेल संख्या दू पूर्णांक से समान दूरी पर हई, त जे आपके लौटावे के चाहि ऊ हई जे शून्य से सबसे दूर हई। उदाहरण के लेल closest_integer (((""14.5"") लौटावे के चाहि 15 अउर closest_integer ((-14.5"") लौटावे के चाहि -15.
long closest_integer(std::string value) {
","#include<assert.h>
#include<bits/stdc++.h>
long closest_integer(std::string value) {
  double num = std::stod(value);
  if (num >= 0) {
    if (num - std::floor(num) <= 0.5) {
      return static_cast<long>(std::floor(num));
    } else {
      return static_cast<long>(std::ceil(num));
    }
  } else {
    if (std::ceil(num) - num <= 0.5) {
      return static_cast<long>(std::ceil(num));
    } else {
      return static_cast<long>(std::floor(num));
    }
  }
}","}
int main() {
    auto candidate = closest_integer;
    assert(candidate((""10"")) == (10));
    assert(candidate((""14.5"")) == (15));
    assert(candidate((""-15.5"")) == (-16));
    assert(candidate((""15.3"")) == (15));
    assert(candidate((""0"")) == (0));
}
"
HumanEval/100,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो धनात्मक पूर्णांक n के लेल, अपने के n स्तर के पत्थर के ढेर बनावे के हई। पहिला स्तर में n पत्थर होई हई। अगला स्तर में पत्थर के संख्या हई: - अगला विषम संख्या अगर n विषम हई। - अगला सम संख्या अगर n सम हई। प्रत्येक स्तर में पत्थर के संख्या के वेक्टर में लौटाई, जहां सूचकांक i में तत्व स्तर (i+1) में पत्थर के संख्या के प्रतिनिधित्व करई हई। उदाहरण: >>> make_a_pile(3) (std::vector<long>{long) 3, (long) 5, (long) 7}))
std::vector<long> make_a_pile(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> make_a_pile(long n) {
  std::vector<long> pile;
  long current_stones = n;
  for (int i = 0; i < n; ++i) {
    pile.push_back(current_stones);
    if (current_stones % 2 != 0) {
      current_stones += 2;
    } else {
      current_stones += 2;
    }
  }
  return pile;
}","}
int main() {
    auto candidate = make_a_pile;
    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));
    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));
    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));
    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10, (long)12, (long)14, (long)16})));
    assert(candidate((8)) == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));
}
"
HumanEval/101,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ""सिंग"" शब्द के एगो क्रम हई, जेकरा एगो शब्द के एगो क्रम से अलग कैल जाई हई। आपके पास शब्द के एगो क्रम होई हई जेकरा कॉमा चाहे स्पेस द्वारा अलग कैल जाई हई। आपके काम शब्द में स्ट्रिंग के विभाजित करनाई अउर शब्द के एगो वैक्टर के वापस करनाई हई। उदाहरण के लेल: >>> words_string (((""हाय, मेरा नाम जॉन है"")) (std::vector<std::string>({(std::string) ""हाय"", (std::string) ""मेरा"", (std::string) ""नाम"", (std::string) ""है"", (std::string) ""जॉन""})) >>> words_string (((""एक, दो, तीन, चार, पांच, छह"")) (std::vector<std::string>{(stdstring) ""एक"", (std::string) ""दो"", (std::string) ""तीन"", (std::string) ""चार"", (std::string) ""पांच"", (std::string) ""छह""}))
std::vector<std::string> words_string(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> words_string(std::string s) {
  std::vector<std::string> words;
  std::string current_word;
  for (char c : s) {
    if (c == ',' || c == ' ') {
      if (!current_word.empty()) {
        words.push_back(current_word);
        current_word = """";
      }
    } else {
      current_word += c;
    }
  }
  if (!current_word.empty()) {
    words.push_back(current_word);
  }
  return words;
}","}
int main() {
    auto candidate = words_string;
    assert(candidate((""Hi, my name is John"")) == (std::vector<std::string>({(std::string)""Hi"", (std::string)""my"", (std::string)""name"", (std::string)""is"", (std::string)""John""})));
    assert(candidate((""One, two, three, four, five, six"")) == (std::vector<std::string>({(std::string)""One"", (std::string)""two"", (std::string)""three"", (std::string)""four"", (std::string)""five"", (std::string)""six""})));
    assert(candidate((""Hi, my name"")) == (std::vector<std::string>({(std::string)""Hi"", (std::string)""my"", (std::string)""name""})));
    assert(candidate((""One,, two, three, four, five, six,"")) == (std::vector<std::string>({(std::string)""One"", (std::string)""two"", (std::string)""three"", (std::string)""four"", (std::string)""five"", (std::string)""six""})));
    assert(candidate(("""")) == (std::vector<std::string>()));
    assert(candidate((""ahmed     , gamal"")) == (std::vector<std::string>({(std::string)""ahmed"", (std::string)""gamal""})));
}
"
HumanEval/102,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ई फलन दूगो धनात्मक संख्या x आउर y लेई हई अउर सबसे बड़ सम पूर्णांक के लौटाई हई जे [x, y] समावेशी श्रेणी में हई। अगर ऐसन कोनो संख्या ना हई, त फलन के -1 लौटाबे के चाहि। उदाहरण के लेल: >>> choose_num (((12), (15)) (14) >>> choose_num (((13), (12)) (-1)
long choose_num(long x, long y) {
","#include<assert.h>
#include<bits/stdc++.h>
long choose_num(long x, long y) {
  if (x > y) {
    return -1;
  }
  long end = y;
  if (end % 2 != 0) {
    end--;
  }
  if (end < x) {
    return -1;
  }
  return end;
}","}
int main() {
    auto candidate = choose_num;
    assert(candidate((12), (15)) == (14));
    assert(candidate((13), (12)) == (-1));
    assert(candidate((33), (12354)) == (12354));
    assert(candidate((5234), (5233)) == (-1));
    assert(candidate((6), (29)) == (28));
    assert(candidate((27), (10)) == (-1));
    assert(candidate((7), (7)) == (-1));
    assert(candidate((546), (546)) == (546));
}
"
HumanEval/103,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_std_string_long{
    std::string f0;
    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}
    Union_std_string_long(long _f1) : f1(_f1) {}
    ~Union_std_string_long() {}
    bool operator==(std::string f) {
        return f0 == f ;
    }    bool operator==(long f) {
        return f1 == f ;
    }
};
// अगर n m से बड़ हई, त -1 लौटाई। उदाहरण: >>> rounded_avg (((1), (5)) ""0b11"" >>> rounded_avg (((7), (5)) -1 >>> rounded_avg (((10), (20)) ""0b1111"" >>> rounded_avg (((20), (33) ""0b11010""
Union_std_string_long rounded_avg(long n, long m) {
","#include<assert.h>
#include<bits/stdc++.h>
union Union_std_string_long{
    std::string f0;
    long f1;
    Union_std_string_long(std::string _f0) : f0(_f0) {}
    Union_std_string_long(long _f1) : f1(_f1) {}
    ~Union_std_string_long() {}
    bool operator==(std::string f) {
        return f0 == f ;
    }
    bool operator==(long f) {
        return f1 == f ;
    }
};
Union_std_string_long rounded_avg(long n, long m) {
  if (n > m) {
    return Union_std_string_long(-1);
  }
  double sum = 0;
  for (long i = n; i <= m; ++i) {
    sum += i;
  }
  double avg = sum / (m - n + 1);
  long rounded_avg_long = std::round(avg);
  if (rounded_avg_long == 0) {
    return Union_std_string_long(""0b0"");
  }
  std::string binary_string = """";
  long temp = std::abs(rounded_avg_long);
  while (temp > 0) {
    binary_string = (temp % 2 == 0 ? ""0"" : ""1"") + binary_string;
    temp /= 2;
  }
  return Union_std_string_long(""0b"" + binary_string);
}","}
int main() {
    auto candidate = rounded_avg;
    assert(candidate((1), (5)) == ""0b11"");
    assert(candidate((7), (13)) == ""0b1010"");
    assert(candidate((964), (977)) == ""0b1111001010"");
    assert(candidate((996), (997)) == ""0b1111100100"");
    assert(candidate((560), (851)) == ""0b1011000010"");
    assert(candidate((185), (546)) == ""0b101101110"");
    assert(candidate((362), (496)) == ""0b110101101"");
    assert(candidate((350), (902)) == ""0b1001110010"");
    assert(candidate((197), (233)) == ""0b11010111"");
    assert(candidate((7), (5)) == -1);
    assert(candidate((5), (1)) == -1);
    assert(candidate((5), (5)) == ""0b101"");
}
"
HumanEval/104,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// सकारात्मक पूर्णांक x के एगो वैक्टर देल गेल हई, सभे तत्व के एगो क्रमबद्ध वैक्टर लौटाई जेकरा में कोनो सम अंक न हई। नोटः लौटाएल गेल वैक्टर के क्रम में बढ़े के चाहि। उदाहरण के लेल: >>> unique_digits((std::vector<long>({long) 15, (long) 33, (long) 1422, (long) 1}))) (std::vector<long>{(long) 1, (long) 15, (long) 33})) >>> unique_digits(std::vector<long>{(long) 152, (long) 323, (long) 1422, (long) 10}))) (std::vector<long>(long))
std::vector<long> unique_digits(std::vector<long> x) {
","#include<assert.h>
#include<bits/stdc++.h>
bool has_even_digit(long n) {
  std::string s = std::to_string(n);
  for (char c : s) {
    if ((c - '0') % 2 == 0) {
      return true;
    }
  }
  return false;
}

std::vector<long> unique_digits(std::vector<long> x) {
  std::vector<long> result;
  for (long val : x) {
    if (!has_even_digit(val)) {
      result.push_back(val);
    }
  }
  std::sort(result.begin(), result.end());
  return result;
}","}
int main() {
    auto candidate = unique_digits;
    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));
    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));
    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));
}
"
HumanEval/105,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एगो वैक्टर देल गेल हई, 1 अउर 9 के बीच के पूर्णांक के सॉर्ट करई हई, परिणामी वैक्टर के उलट करई हई, अउर फिर प्रत्येक अंक के ओकर संबंधित नाम से बदलई हई ""एक"", ""दो"", ""तीन"", ""चार"", ""पांच"", ""छह"", ""सात"", ""आठ"", ""नौ"" से। उदाहरण के लेलः >>> by_length:{string:{long}2, (long) 1, (long) 1, (long) 4, (long) 5, (long) 8, (long) 2, (long) 3}))) (std::vector<string:{(string:{""आठ"", (stdstring:{""पांच"", (stdstring:{""चार"", (stdstring:{""तीन"", (dstring:{""दू"", (stdstring:{""तीन"", (stdstring:{""दू"", (stdstring:{""दू"", (stdstring:{""दू"", (stdstring:{""one"", (stdstring:{""third)))) अगर कोनो वैक्टर खाली हई, त वैक्टर के अनदेही लौटा जाई छई: ""{""} (long_long_long_long_long_long_string:{""}, (third:{""}}}}) वैक्टर के अनजान संख्या होई छई) >>> (long_long_long_long)
std::vector<std::string> by_length(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> by_length(std::vector<long> arr) {
  std::vector<long> valid_numbers;
  std::vector<std::string> result;
  std::map<long, std::string> number_names = {
      {1, ""One""}, {2, ""Two""}, {3, ""Three""}, {4, ""Four""}, {5, ""Five""},
      {6, ""Six""}, {7, ""Seven""}, {8, ""Eight""}, {9, ""Nine""}};
  for (long num : arr) {
    if (num >= 1 && num <= 9) {
      valid_numbers.push_back(num);
    }
  }
  std::sort(valid_numbers.begin(), valid_numbers.end());
  std::reverse(valid_numbers.begin(), valid_numbers.end());
  for (long num : valid_numbers) {
    result.push_back(number_names[num]);
  }
  return result;
}","}
int main() {
    auto candidate = by_length;
    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)""Eight"", (std::string)""Five"", (std::string)""Four"", (std::string)""Three"", (std::string)""Two"", (std::string)""Two"", (std::string)""One"", (std::string)""One""})));
    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)""One""})));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3, (long)2}))) == (std::vector<std::string>({(std::string)""Three"", (std::string)""Two"", (std::string)""One""})));
    assert(candidate((std::vector<long>({(long)9, (long)4, (long)8}))) == (std::vector<std::string>({(std::string)""Nine"", (std::string)""Eight"", (std::string)""Four""})));
}
"
HumanEval/106,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// फलन f के लागू कर हई जे n के पैरामीटर के रूप में ले हई, अउर आकार n के एगो वेक्टर लौटाबई हई, येई तरह से कि यदि i सम हई त इंडेक्स i पर तत्व के मान i के कारक हई चाहे 1 से i तक के संख्या के योग हई। i 1 से शुरू होई हई। i के कारक 1 से i तक के संख्या के गुणनफल हई (1 * 2 * ... * i) उदाहरणः >>> f (((5)) (std::vector<long>{(long) 1, (long) 2, (long) 6, (long) 24, (long) 15}))
std::vector<long> f(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> f(long n) {
  std::vector<long> result;
  for (long i = 1; i <= n; ++i) {
    if (i % 2 == 0) {
      long factorial = 1;
      for (long j = 1; j <= i; ++j) {
        factorial *= j;
      }
      result.push_back(factorial);
    } else {
      long sum = 0;
      for (long j = 1; j <= i; ++j) {
        sum += j;
      }
      result.push_back(sum);
    }
  }
  return result;
}","}
int main() {
    auto candidate = f;
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15})));
    assert(candidate((7)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15, (long)720, (long)28})));
    assert(candidate((1)) == (std::vector<long>({(long)1})));
    assert(candidate((3)) == (std::vector<long>({(long)1, (long)2, (long)6})));
}
"
HumanEval/107,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो धनात्मक पूर्णांक n देला पर, एगो ट्यूपल लौटाई जेकरा में सम आउर विषम पूर्णांक पालिंड्रोम के संख्या होई हई जे श्रेणी में होई हई। उदाहरण 1: >>> even_odd_palindrome (((3)) (std::make_tuple ((1, 2)) स्पष्टीकरण: पूर्णांक पालिंड्रोम 1, 2, 3 हई, जेकरा में से एगो सम हई, आउर ओकरा में से दू विषम हई। उदाहरण 2: >>> even_odd_palindrome (((12)) (std::make_tuple ((4, 6)) स्पष्टीकरण: पूर्णांक पालिंड्रोम 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 हई, जेकरा में से चार सम हई, आउर ओकरा में से 6 विषम हई। नोटः 1. 1 <= n = 10 ^ 3 2. लौटाएल ट्यूपल में क्रमशः सम आउर विषम पूर्णांक पालिंड्रोम के संख्या होई हई।
std::tuple<long, long> even_odd_palindrome(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_palindrome(long num) {
  std::string s = std::to_string(num);
  std::string reversed_s = s;
  std::reverse(reversed_s.begin(), reversed_s.end());
  return s == reversed_s;
}

std::tuple<long, long> even_odd_palindrome(long n) {
  long even_count = 0;
  long odd_count = 0;
  for (long i = 1; i <= n; ++i) {
    if (is_palindrome(i)) {
      if (i % 2 == 0) {
        even_count++;
      } else {
        odd_count++;
      }
    }
  }
  return std::make_tuple(even_count, odd_count);
}","}
int main() {
    auto candidate = even_odd_palindrome;
    assert(candidate((123)) == (std::make_tuple(8, 13)));
    assert(candidate((12)) == (std::make_tuple(4, 6)));
    assert(candidate((3)) == (std::make_tuple(1, 2)));
    assert(candidate((63)) == (std::make_tuple(6, 8)));
    assert(candidate((25)) == (std::make_tuple(5, 6)));
    assert(candidate((19)) == (std::make_tuple(4, 6)));
    assert(candidate((9)) == (std::make_tuple(4, 5)));
    assert(candidate((1)) == (std::make_tuple(0, 1)));
}
"
HumanEval/108,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लिखो count_nums जे पूर्णांक के एगो वेक्टर लेई हई अउर तत्व के संख्या लौटाई हई जेकर अंक के योग > 0 हई। यदि एगो संख्या ऋणात्मक हई, त ओकर पहिला हस्ताक्षरित अंक ऋणात्मक होतई: उदाहरण के लेल -123 के अंक -1, 2, अउर 3 हई। >>> count_nums{((std::vector<long>())) (0) >>> count_nums{(std::vector<long>{(long) -1, (long) -11, (long) -11}))) (1) >>> count_nums{(std::vector<long>{(long) -1, (long) -1, (long) -2} (3))))
long count_nums(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long sum_digits_signed(long n) {
  std::string s = std::to_string(n);
  long sum = 0;
  for (long i = 0; i < s.length(); ++i) {
    if (i == 0 && s[i] == '-') {
      if (s.length() > 1) {
        sum -= (s[i + 1] - '0');
        i++;
      }
    } else {
      sum += (s[i] - '0');
    }
  }
  return sum;
}

long count_nums(std::vector<long> arr) {
  long count = 0;
  for (long num : arr) {
    if (sum_digits_signed(num) > 0) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = count_nums;
    assert(candidate((std::vector<long>())) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));
    assert(candidate((std::vector<long>({(long)1, (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));
    assert(candidate((std::vector<long>({(long)1, (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));
    assert(candidate((std::vector<long>({(long)12, (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)1}))) == (1));
}
"
HumanEval/109,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// हमनक N पूर्णांक arr[1], arr[2], ..., arr[N] के एगो वेक्टर 'arr' हई। वेक्टर में संख्या के यादृच्छिक रूप से क्रमबद्ध कैल जाई हई। आपके कार्य ई निर्धारित करनाई हई कि का एगो वेक्टर के गैर-अधूरे क्रम में क्रमबद्ध करनाई संभव हई। दिवालिया वेक्टर पर निम्नलिखित ऑपरेशन करके: आपके दाईं ओर स्थानांतरण ऑपरेशन करे के अनुमति हई। एक दाईं ओर स्थानांतरण ऑपरेशन के अर्थ हई कि वेक्टर के सभे तत्व के दाईं ओर एक स्थिति से स्थानांतरित करनाई। वेक्टर के अंतिम तत्व के वेक्टर में प्रारंभिक स्थिति में स्थानांतरित कैल जाई हई अर्थात 0 वां सूचकांक। यदि ऊपर के ऑपरेशन करके क्रमबद्ध वेक्टर प्राप्त करनाई संभव हई त फेर से सही वापसी गलत। यदि देल गेल वेक्टर खाली हई त फेर से सही वापसी होई छई। नोटः देल गेल वेक्टर में अद्वितीय तत्व होए के गारंटी हई। उदाहरण के लेल: >>> move_one_ball_{(st_vector::{(((((((((((( (4, (4, (4,) (5, (), (), ()) (long_ (), (long_ (), (long_ ()) (), (long_ (_) (_) (_) (_ (_) (_) (_ (_) (_) (_) (_ (_) (_) (_ (_) (_) (_ (_) (_) (_ (_) (_) (_) (_) (_ (_) (_) (_ (_) (_) (_) (_) (_) (_ (_) (_) (_ (_) (_) (_) (_ (_) (_) (_ (_) (_) (_) (_) (_) (_ (_) (_) (_ (_) (_) (_) (_) (_ (_) (_) (_) (_) (_ (_) (_) (_) (_) (_ (_) (_ (_) (_) (_) (_ (_) (_) (_ (_) (_) (_ (_) (_) (_) (_ (_) (_) (_) (_
bool move_one_ball(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
bool move_one_ball(std::vector<long> arr) {
  if (arr.empty()) {
    return true;
  }
  int n = arr.size();
  std::vector<long> sorted_arr = arr;
  std::sort(sorted_arr.begin(), sorted_arr.end());
  for (int shift = 0; shift < n; ++shift) {
    std::vector<long> shifted_arr(n);
    for (int i = 0; i < n; ++i) {
      shifted_arr[i] = arr[(i - shift + n) % n];
    }
    if (shifted_arr == sorted_arr) {
      return true;
    }
  }
  return false;
}","}
int main() {
    auto candidate = move_one_ball;
    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2}))) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)10, (long)1, (long)2}))) == (true));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)1, (long)2}))) == (false));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2}))) == (false));
    assert(candidate((std::vector<long>())) == (true));
}
"
HumanEval/110,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ई समस्या में, आप एगो फलन लागू करबई जे संख्या के दुगो वेक्टर लेई हई, अउर ई निर्धारित करई हई कि का ऊ उनके बीच तत्व के आदान-प्रदान करनाई संभव हई ताकि केवल सम संख्या के एगो वेक्टर बन जाए। lst1 अउर lst2 के बीच आदान-प्रदान कैल गेल तत्व के संख्या पर कोई सीमा ना हई। अगर lst1 अउर lst2 के बीच तत्व के आदान-प्रदान करनाई संभव हई ताकि lst1 के सभे तत्व सम हो जाए, त ""YES"" लौटाई। अन्यथा, ""NO"" लौटाई। उदाहरण के लेल: >>> exchange((std::vector<>(long) {1, (long) 2, (long) 3, (long) 4})), (std::vector<>(long) {1, (long) 2, (long) 3, (long) 4}) (""YES"") >>> exchange::{std::vector<>{1, (long) 2, (long) 3, (long) 4}, (std::vector<>(long) NO: {1, (long) 5, (long)) (long) 4}) इ मानई जाई हई कि इनपुट गैर-रिक्त होई।
std::string exchange(std::vector<long> lst1, std::vector<long> lst2) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string exchange(std::vector<long> lst1, std::vector<long> lst2) {
  long odd_count_lst1 = 0;
  for (long num : lst1) {
    if (num % 2 != 0) {
      odd_count_lst1++;
    }
  }
  long even_count_lst2 = 0;
  for (long num : lst2) {
    if (num % 2 == 0) {
      even_count_lst2++;
    }
  }
  if (even_count_lst2 >= odd_count_lst1) {
    return ""YES"";
  } else {
    return ""NO"";
  }
}","}
int main() {
    auto candidate = exchange;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)2, (long)1, (long)4, (long)3}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)4}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)3}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)6, (long)1, (long)8, (long)9})), (std::vector<long>({(long)3, (long)5, (long)5, (long)1, (long)1, (long)1}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)100, (long)200})), (std::vector<long>({(long)200, (long)200}))) == (""YES""));
}
"
HumanEval/111,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो स्ट्रिंग के लेल, सबसे बेसी दोहराएल जाए वाला अक्षर के एगो मानचित्र लौटाई, जेकरा में संबंधित संख्या शामिल होई हई। यदि कैगो अक्षर के समान घटना होई हई, त ओकरा सभे के लौटाई। उदाहरण: >>> हिस्टोग्राम ({""a"", 1}, {""b"", 1}, {""c"", 1}}) (std::map<std::string,long> ({""a"", 1}, {""b"", 1}, {""c"", 1}})) >>> हिस्टोग्राम ({""a"", 2}, {""b"", 2}})) >>> हिस्टोग्राम ({""a, b, c, b"") (std::map<std::string,long> ({{""a"", 2}, {""b"", 2}})) >>> हिस्टोग्राम ({""a, b, b"", 2}, {""b"", 2}}"") >>> हिस्टोग्राम ({""b, b"", 4}}"" ({{""b, b"", 4}}) >>> हिस्टोग्राम ({""b, b"", 6"") ({{""b, b"", 6"") >>> ({{""b, b, d"", 6"") >>> ({{""b, b, d"", 6"")
std::map<std::string,long> histogram(std::string test) {
","#include<assert.h>
#include<bits/stdc++.h>
std::map<std::string,long> histogram(std::string test) {
  std::map<std::string, long> counts;
  std::string current_word;
  std::stringstream ss(test);
  while (ss >> current_word) {
    counts[current_word]++;
  }
  if (counts.empty()) {
    return {};
  }
  long max_count = 0;
  for (const auto& pair : counts) {
    if (pair.second > max_count) {
      max_count = pair.second;
    }
  }
  std::map<std::string, long> result;
  for (const auto& pair : counts) {
    if (pair.second == max_count) {
      result[pair.first] = pair.second;
    }
  }
  return result;
}","}
int main() {
    auto candidate = histogram;
    assert(candidate((""a b b a"")) == (std::map<std::string,long>({{""a"", 2}, {""b"", 2}})));
    assert(candidate((""a b c a b"")) == (std::map<std::string,long>({{""a"", 2}, {""b"", 2}})));
    assert(candidate((""a b c d g"")) == (std::map<std::string,long>({{""a"", 1}, {""b"", 1}, {""c"", 1}, {""d"", 1}, {""g"", 1}})));
    assert(candidate((""r t g"")) == (std::map<std::string,long>({{""r"", 1}, {""t"", 1}, {""g"", 1}})));
    assert(candidate((""b b b b a"")) == (std::map<std::string,long>({{""b"", 4}})));
    assert(candidate((""r t g"")) == (std::map<std::string,long>({{""r"", 1}, {""t"", 1}, {""g"", 1}})));
    assert(candidate(("""")) == (std::map<std::string,long>()));
    assert(candidate((""a"")) == (std::map<std::string,long>({{""a"", 1}})));
}
"
HumanEval/112,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// कार्य हमे दूगो स्ट्रिंग s और c देल गेल हई, तोरा s में सभे वर्ण के हटावे के हई जे c में कोनो वर्ण के बराबर हई तब जाँच करे के हई कि का परिणाम स्ट्रिंग पालिंड्रोम हई। एगो स्ट्रिंग के पालिंड्रोम कहल जाई हई अगर ई पिछला के समान पढ़ई हई। चेक के लेल तोरा एगो ट्यूपल लौटावे के चाहि जेकरा में परिणाम स्ट्रिंग अउर सही/गलत होई हई। उदाहरण >>> reverse_delete((""abcde""), (""ae"")) (std::make_tuple(""bcd"", false)) >>> reverse_delete(""abcdef""), (""b"") (std::make_tuple(""acdef"",)) >>> reverse_delete(""abcded"", (""baba"") (std::make_tuple"", true))
std::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {
","#include<assert.h>
#include<bits/stdc++.h>
std::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {
  std::string result = """";
  std::unordered_set<char> chars_to_delete(c.begin(), c.end());
  for (char ch : s) {
    if (chars_to_delete.find(ch) == chars_to_delete.end()) {
      result += ch;
    }
  }
  std::string reversed_result = result;
  std::reverse(reversed_result.begin(), reversed_result.end());
  return std::make_tuple(result, result == reversed_result);
}","}
int main() {
    auto candidate = reverse_delete;
    assert(candidate((""abcde""), (""ae"")) == (std::make_tuple(""bcd"", false)));
    assert(candidate((""abcdef""), (""b"")) == (std::make_tuple(""acdef"", false)));
    assert(candidate((""abcdedcba""), (""ab"")) == (std::make_tuple(""cdedc"", true)));
    assert(candidate((""dwik""), (""w"")) == (std::make_tuple(""dik"", false)));
    assert(candidate((""a""), (""a"")) == (std::make_tuple("""", true)));
    assert(candidate((""abcdedcba""), ("""")) == (std::make_tuple(""abcdedcba"", true)));
    assert(candidate((""abcdedcba""), (""v"")) == (std::make_tuple(""abcdedcba"", true)));
    assert(candidate((""vabba""), (""v"")) == (std::make_tuple(""abba"", true)));
    assert(candidate((""mamma""), (""mia"")) == (std::make_tuple("""", true)));
}
"
HumanEval/113,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो स्ट्रिंग के वेक्टर देल गेल हई, जहां प्रत्येक स्ट्रिंग में केवल अंक होई हई, एगो वेक्टर लौटाई। आउटपुट के प्रत्येक तत्व आई ""इनपुट के स्ट्रिंग आई में विषम तत्व के संख्या"" होए के चाहि। जहां सभे आई के इनपुट के i वीं स्ट्रिंग में विषम अंक के संख्या से बदल देल जाए के चाहि। >>> odd_count((std::vector<std::string>(({std::string) ""1234567""}))) (std::vector<std::string>({stdstring) "" 4n के स्ट्रिंग 4 के विषम तत्व के संख्या 4n 4n 4n 4n. "")) >>> odd_count(stdvector<stdstring>::{(stdstring) "", ""3"": (stdstring
std::vector<std::string> odd_count(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> odd_count(std::vector<std::string> lst) {
  std::vector<std::string> result;
  for (const std::string& s : lst) {
    int count = 0;
    for (char c : s) {
      if ((c - '0') % 2 != 0) {
        count++;
      }
    }
    std::string count_str = std::to_string(count);
    std::string modified_s = s;
    for (char& c : modified_s) {
      if (isdigit(c) && (c - '0') % 2 != 0) {
        c = count_str[0];
      }
    }
    result.push_back(""the number of odd elements "" + count_str + ""n the str"" + modified_s + ""ng "" + modified_s + "" of the "" + modified_s + ""nput."");
  }
  return result;
}","}
int main() {
    auto candidate = odd_count;
    assert(candidate((std::vector<std::string>({(std::string)""1234567""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 4n the str4ng 4 of the 4nput.""})));
    assert(candidate((std::vector<std::string>({(std::string)""3"", (std::string)""11111111""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 1n the str1ng 1 of the 1nput."", (std::string)""the number of odd elements 8n the str8ng 8 of the 8nput.""})));
    assert(candidate((std::vector<std::string>({(std::string)""271"", (std::string)""137"", (std::string)""314""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 2n the str2ng 2 of the 2nput."", (std::string)""the number of odd elements 3n the str3ng 3 of the 3nput."", (std::string)""the number of odd elements 2n the str2ng 2 of the 2nput.""})));
}
"
HumanEval/114,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक n के एगो वेक्टर देल गेल हई, n के कोनो गैर-खाली उप-वेक्टर के न्यूनतम योग खोजो। उदाहरण >>> minSubArraySum(((std::vector<long>({long) 2, (long) 3, (long) 4, (long) 1, (long) 2, (long) 4}))) (1) >>> minSubArraySum(std::vector<long>{(long) -1, (long) -2, (long) -3)))) (-6)
long minSubArraySum(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>
long minSubArraySum(std::vector<long> nums) {
  if (nums.empty()) {
    throw std::invalid_argument(""Input vector cannot be empty."");
  }
  long min_so_far = nums[0];
  long current_min = nums[0];
  for (size_t i = 1; i < nums.size(); ++i) {
    current_min = std::min(nums[i], current_min + nums[i]);
    min_so_far = std::min(min_so_far, current_min);
  }
  return min_so_far;
}","}
int main() {
    auto candidate = minSubArraySum;
    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (-6));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));
    assert(candidate((std::vector<long>({(long)-9999999999999999}))) == (-9999999999999999));
    assert(candidate((std::vector<long>({(long)0, (long)10, (long)20, (long)1000000}))) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));
    assert(candidate((std::vector<long>({(long)100, (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));
    assert(candidate((std::vector<long>({(long)10, (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));
    assert(candidate((std::vector<long>({(long)100, (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));
    assert(candidate((std::vector<long>({(long)-10}))) == (-10));
    assert(candidate((std::vector<long>({(long)7}))) == (7));
    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));
}
"
HumanEval/115,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके पास कुओं के एक आयताकार ग्रिड दिहल गेल हई। प्रत्येक पंक्ति एक कुएं के प्रतिनिधित्व करई हई, अउर प्रत्येक पंक्ति में 1 पानी के एक इकाई के प्रतिनिधित्व करई हई। प्रत्येक कुएं में एक संबंधित बाल्टी होई हई जेकर उपयोग एकरा से पानी निकाले के लेल कैल जा सकई हई, अउर सभे बाल्टी के समान क्षमता होई हई। आपके काम कुओं के खाली करे के लेल बाल्टी के उपयोग करनाई हई। आउटपुट आपके द्वारा बाल्टी के कम करे के आवश्यकता के संख्या हई। उदाहरण 1: >>> max_fill((long_long:st:0,st:0,st:0,st:0,st:0,st:0,st:0,st:0,st:0,st:0,st:0,st:0,st:0,st:0,st:0,st:1,st:0,st:0,st:0,st:1,st:0,st:0,st:0,st:0,st:0,st:1,st:0,st:0,st:0,st:1,st:0,st:0,st:1,st:0,st:0,st:1,st:0,st:1,st:0,st:0,st:1,st:0,st:1,st:0,st:1,st:0,st:1,st: (long) उदाहरण 3: (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (
long max_fill(std::vector<std::vector<long>> grid, long capacity) {
","#include<assert.h>
#include<bits/stdc++.h>
long max_fill(std::vector<std::vector<long>> grid, long capacity) {
  long bucket_lowering_count = 0;
  for (const auto& row : grid) {
    long water_in_well = 0;
    for (long unit : row) {
      water_in_well += unit;
    }
    bucket_lowering_count += (water_in_well + capacity - 1) / capacity;
  }
  return bucket_lowering_count;
}","}
int main() {
    auto candidate = max_fill;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1)) == (6));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2)) == (5));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5)) == (0));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (2)) == (4));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (9)) == (2));
}
"
HumanEval/116,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ई क्रमवा में, तोरा एगो गैर-ऋणात्मक पूर्णांक के एगो वैक्टरवा के क्रमवा में क्रमवा के क्रमवा में क्रमवा के क्रमवा में क्रमवा के क्रमवा में क्रमवा के क्रमवा में क्रमवा करे के चाही। समान संख्या के संख्या लगि, दशमलव मानवा के आधारवा पर क्रमवा करे के चाही। एकरा ई तरह से लागू करल जाय चाहिः >>> sort_array((std::vector<long>{(long) 1, (long) 5, (long) 2, (long) 3, (long) 4}))) (std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 4, (long) 5})) >>> sort_array(std::vector<long>{(long>{(long}-2, (long) 3, (long) 4, (long) 5, (long) 6}))) (std::vector<(long>{(long>{-6, (long) 5, (long) 4, (long) 3, (long) 2} >>> array_array:std::vector<(long>{(long>1, (long) 3, (long)) (long) 0, (long)) (long) 3, (long) 4, (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long (long) (long) (long) (long) (long) (long) (long) (long) (long (long) (long) (long) (long) (long) (long) (long) (long) (long) (long (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long))
std::vector<long> sort_array(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
int count_set_bits(long n) {
  int count = 0;
  if (n < 0) {
    n = std::abs(n);
  }
  while (n > 0) {
    n &= (n - 1);
    count++;
  }
  return count;
}

bool compare(long a, long b) {
  int bits_a = count_set_bits(a);
  int bits_b = count_set_bits(b);
  if (bits_a != bits_b) {
    return bits_a < bits_b;
  }
  return a < b;
}

std::vector<long> sort_array(std::vector<long> arr) {
  std::sort(arr.begin(), arr.end(), compare);
  return arr;
}","}
int main() {
    auto candidate = sort_array;
    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5, (long)-3})));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4, (long)3})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));
    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5, (long)6, (long)12, (long)44})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));
}
"
HumanEval/117,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो स्ट्रिंग s अउर एगो प्राकृतिक संख्या n के लेल, आपके एगो फ़ंक्शन लागू करे के लेल काम देल गेल हई जे स्ट्रिंग s से सभे शब्द के एगो वेक्टर के वापस करई हई जोनमे ठीक n व्यंजन होई हई, ताकि ई शब्द स्ट्रिंग s में प्रकट हो। यदि स्ट्रिंग s खाली हई त फ़ंक्शन के खाली वेक्टर लौटाबे के चाहि। नोटः आप मान सकई हई कि इनपुट स्ट्रिंग में केवल अक्षर अउर रिक्त स्थान होई हई। उदाहरणः >>> select_words{""मरी के एगो छोट मेमना हलई""), (4)) (std::vector<std::string>""{""मरी के एगो छोट मेमना हलई""}) >>> select_words""{""मरी"", (std::string) ""} >>> select_words""{""मरी"", (std::string) ""} >>> select_words""{""मरी"", (std::string) ""} >>> select_words""{""मरी"", (std::string) ""} >>> select_words""{""मरी"", (std::string) ""} >>> select_words""{""मरी"", (std::string) ""} >>> select_word""{""} >>> select_word""{""}
std::vector<std::string> select_words(std::string s, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_consonant(char c) {
  c = tolower(c);
  return (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');
}

std::vector<std::string> select_words(std::string s, long n) {
  std::vector<std::string> result;
  std::string current_word;
  for (char c : s) {
    if (c == ' ') {
      long consonant_count = 0;
      for (char word_char : current_word) {
        if (is_consonant(word_char)) {
          consonant_count++;
        }
      }
      if (consonant_count == n) {
        result.push_back(current_word);
      }
      current_word = """";
    } else {
      current_word += c;
    }
  }
  long consonant_count = 0;
  for (char word_char : current_word) {
    if (is_consonant(word_char)) {
      consonant_count++;
    }
  }
  if (consonant_count == n) {
    result.push_back(current_word);
  }
  return result;
}","}
int main() {
    auto candidate = select_words;
    assert(candidate((""Mary had a little lamb""), (4)) == (std::vector<std::string>({(std::string)""little""})));
    assert(candidate((""Mary had a little lamb""), (3)) == (std::vector<std::string>({(std::string)""Mary"", (std::string)""lamb""})));
    assert(candidate((""simple white space""), (2)) == (std::vector<std::string>()));
    assert(candidate((""Hello world""), (4)) == (std::vector<std::string>({(std::string)""world""})));
    assert(candidate((""Uncle sam""), (3)) == (std::vector<std::string>({(std::string)""Uncle""})));
    assert(candidate((""""), (4)) == (std::vector<std::string>()));
    assert(candidate((""a b c d e f""), (1)) == (std::vector<std::string>({(std::string)""b"", (std::string)""c"", (std::string)""d"", (std::string)""f""})));
}
"
HumanEval/118,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो शब्द के साथ, एगो शब्द के अंत में दूगो व्यंजन के बीच सबसे निकट स्वर के खोज करे के लेल एगो विशेष संकेतक के आवश्यकता होई हई। अगर कोनो स्वर के ऊपर के शर्त के पूरा ना कैल गेल हई, त खाली स्ट्रिंग लौटा दिही। उदाहरण के लेलः >>> get_closest_vowel (((""yogurt"")) (""u"") >>> get_closest_vowel (((""FULL"")) (""U"") >>> get_closest_vowel (((""quick"")) ("""") >>> get_closest_vowel (((ab"") ("""")
std::string get_closest_vowel(std::string word) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_vowel(char c) {
  c = tolower(c);
  return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');
}

bool is_consonant(char c) {
  return isalpha(c) && !is_vowel(c);
}

std::string get_closest_vowel(std::string word) {
  if (word.length() < 3) {
    return """";
  }
  for (int i = word.length() - 2; i >= 1; --i) {
    if (is_vowel(word[i]) && is_consonant(word[i - 1]) && is_consonant(word[i + 1])) {
      return std::string(1, word[i]);
    }
  }
  return """";
}","}
int main() {
    auto candidate = get_closest_vowel;
    assert(candidate((""yogurt"")) == (""u""));
    assert(candidate((""full"")) == (""u""));
    assert(candidate((""easy"")) == (""""));
    assert(candidate((""eAsy"")) == (""""));
    assert(candidate((""ali"")) == (""""));
    assert(candidate((""bad"")) == (""a""));
    assert(candidate((""most"")) == (""o""));
    assert(candidate((""ab"")) == (""""));
    assert(candidate((""ba"")) == (""""));
    assert(candidate((""quick"")) == (""""));
    assert(candidate((""anime"")) == (""i""));
    assert(candidate((""Asia"")) == (""""));
    assert(candidate((""Above"")) == (""o""));
}
"
HumanEval/119,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// अगर एगो स्ट्रिंग S अच्छा हई त ओकरा तब अउर केवल तब अच्छा मानल जाई हई जब S में सभे कोष्ठक संतुलित होई हई। उदाहरण के लेल, स्ट्रिंग '(()) ' अच्छा हई, जबकि स्ट्रिंग '()) ' ना हई। अगर अच्छा स्ट्रिंग बनावे के कोनो तरीका हई त 'हाँ' लौटाई, अउर अन्यथा 'नहि' लौटाई। उदाहरण: >>> match_parens((std::vector<std::string>{((stdstring) "") "", (((std::string) "")) (""हाँ"") >>> match_parens<std::vector<stdstring>{(stdstring>"")) (""नहि""))))
std::string match_parens(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_good(const std::string& s) {
  int balance = 0;
  for (char c : s) {
    if (c == '(') {
      balance++;
    } else if (c == ')') {
      balance--;
    }
    if (balance < 0) {
      return false;
    }
  }
  return balance == 0;
}

std::string match_parens(std::vector<std::string> lst) {
  std::string s1 = lst[0];
  std::string s2 = lst[1];
  if (is_good(s1 + s2) || is_good(s2 + s1)) {
    return ""Yes"";
  } else {
    return ""No"";
  }
}","}
int main() {
    auto candidate = match_parens;
    assert(candidate((std::vector<std::string>({(std::string)""()("", (std::string)"")""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)"")"", (std::string)"")""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""(()(())"", (std::string)""())())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")())"", (std::string)""(()()(""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""(())))"", (std::string)""(()())((""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""()"", (std::string)""())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""(()("", (std::string)""()))()""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""(((("", (std::string)""((())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")(()"", (std::string)""(()(""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")("", (std::string)"")(""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""("", (std::string)"")""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)"")"", (std::string)""(""}))) == (""Yes""));
}
"
HumanEval/120,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एगो वेक्टर arr आउर सकारात्मक पूर्णांक k देल गेल हई, arr में अधिकतम k संख्या के जौरे लंबाई k के एगो क्रमबद्ध वेक्टर लौटाई। उदाहरण 1: >>> अधिकतम((std::vector<long>({long) -3, (long) -4, (long) -5,)), (3)) (std::vector<long>({long) -4, (long) -3, (long) 5}) उदाहरण 2: >>> अधिकतम((std::vector<long>({long) -4, (long) -4, (long) 4})), (2)) (std::vector<long>{long} -4, (long) 4}) उदाहरण 3: >>> अधिकतम(std::vector<long>{(long) -3, (long) -2, (long) -1, (long) -2, (long) -1, (long) -2, (long) -1, (long) -1, (long) (1)) (1) (std::vector<long>) -2: 1. लंबाई के वेक्टर के तत्व 1000 के सीमा में होई छई। नोटः len= 1 के 1000 के सीमा में होई छई।
std::vector<long> maximum(std::vector<long> arr, long k) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> maximum(std::vector<long> arr, long k) {
  std::sort(arr.rbegin(), arr.rend());
  std::vector<long> result;
  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {
    result.push_back(arr[i]);
  }
  std::sort(result.begin(), result.end());
  return result;
}","}
int main() {
    auto candidate = maximum;
    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));
    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));
    assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));
    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20, (long)123})));
    assert(candidate((std::vector<long>({(long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1, (long)2, (long)20})));
    assert(candidate((std::vector<long>({(long)5, (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13, (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));
    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5, (long)-7})), (1)) == (std::vector<long>({(long)5})));
    assert(candidate((std::vector<long>({(long)4, (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));
    assert(candidate((std::vector<long>({(long)-10, (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));
}
"
HumanEval/121,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एगो गैर-खाली वेक्टर देल गेल हई, सम पद पर रहल सभे विषम तत्व के योग लौटाई। उदाहरण >>> हल ((((std::vector<long>({(long) 5, (long) 8, (long) 7, (long) 1}))) (12) >>> हल ((((std::vector<long>({(long) 3, (long) 3, (long) 3, (long) 3}))) (9) >>> हल ((((std::vector<>({(long) 30, (long) 13, (long) 24, (long) 321}))) (0)
long solution(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long solution(std::vector<long> lst) {
  long sum = 0;
  for (long i = 0; i < lst.size(); i += 2) {
    if (lst[i] % 2 != 0) {
      sum += lst[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = solution;
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7, (long)1}))) == (12));
    assert(candidate((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3}))) == (9));
    assert(candidate((std::vector<long>({(long)30, (long)13, (long)24, (long)321}))) == (0));
    assert(candidate((std::vector<long>({(long)5, (long)9}))) == (5));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8}))) == (0));
    assert(candidate((std::vector<long>({(long)30, (long)13, (long)23, (long)32}))) == (23));
    assert(candidate((std::vector<long>({(long)3, (long)13, (long)2, (long)9}))) == (3));
}
"
HumanEval/122,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक arr के एगो गैर-खाली वेक्टर अउर पूर्णांक k देल गेल हई, arr के पहिला k तत्व से अधिकतम दू अंक वाला तत्व के योग लौटाई। उदाहरणः >>> add_elements{}std::vector<long>{(long) 111, (long) 21, (long) 3, (long) 4000, (long) 5, (long) 6, (long) 7, (long) 8, (long) 9})), (4)) (24) प्रतिबंधः 1. 1 <= len(arr) <= 100 2. 1 <= k <= lenarr)
long add_elements(std::vector<long> arr, long k) {
","#include<assert.h>
#include<bits/stdc++.h>
long add_elements(std::vector<long> arr, long k) {
  long sum = 0;
  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {
    if (arr[i] >= -99 && arr[i] <= 99) {
      sum += arr[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = add_elements;
    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));
    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));
    assert(candidate((std::vector<long>({(long)11, (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (125));
    assert(candidate((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (24));
    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));
}
"
HumanEval/123,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो सकारात्मक पूर्णांक n के लेल, एगो क्रमबद्ध वेक्टर लौटाई जेकरा में कोलाट्ज़ अनुक्रम में विषम संख्या हई। कोलाट्ज़ अनुमान गणित में एगो अनुमान हई जे निम्नलिखित रूप में परिभाषित एगो अनुक्रम से संबंधित हई: कोनो सकारात्मक पूर्णांक n से शुरू होई छई। फेर प्रत्येक पद के पिछला पद से निम्नानुसार प्राप्त कैल जाई हई: यदि पिछला पद सम हई, त अगला पद पिछला पद के आधा हई। यदि पिछला पद विषम हई, त अगला पद पिछला पद के 3 गुना हई अउर 1. अनुमान ई हई कि n के कोनो भी मान के बावजूद, अनुक्रम हमेशा 1 तक पहुंचई छई। नोटः 1. कोलाट्ज़ (((1) [1] 2. लौटाएल गेल वेक्टर बढ़ैत क्रम में क्रमबद्ध हई। उदाहरण के लेलः get_odd_collatz5) ।
std::vector<long> get_odd_collatz(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> get_odd_collatz(long n) {
  std::vector<long> odd_numbers;
  std::unordered_set<long> seen;
  long current = n;
  while (seen.find(current) == seen.end()) {
    seen.insert(current);
    if (current % 2 != 0) {
      odd_numbers.push_back(current);
    }
    if (current == 1) {
      break;
    }
    if (current % 2 == 0) {
      current /= 2;
    } else {
      current = 3 * current + 1;
    }
  }
  std::sort(odd_numbers.begin(), odd_numbers.end());
  return odd_numbers;
}","}
int main() {
    auto candidate = get_odd_collatz;
    assert(candidate((14)) == (std::vector<long>({(long)1, (long)5, (long)7, (long)11, (long)13, (long)17})));
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)5})));
    assert(candidate((12)) == (std::vector<long>({(long)1, (long)3, (long)5})));
    assert(candidate((1)) == (std::vector<long>({(long)1})));
}
"
HumanEval/124,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लिखल जाय जे देल गेल तिथि के स्ट्रिंग के मान्य कर हो, अगर ऊ मान्य हो, त सही फेर गलत के सही कर देई। तारिख तब मान्य होई हई जब निम्नलिखित नियम सब पूरा हो: 1. तिथि के स्ट्रिंग खाली न हो। 2. महीना 1,3,5,7,8,10,12 के लेल दिन के संख्या 1 से कम चाहे 31 दिन से बेसी न हो। अउर महीना 4,6,9,11 के लेल दिन के संख्या 1 से कम चाहे 30 दिन से बेसी न हो। अउर महीना 2 के लेल दिन के संख्या 1 से कम चाहे 29 से बेसी न हो। 3. महीना 1 से कम चाहे 12 से बेसी न हो। 4. तिथि के प्रारूप होना चाहिः mm-dd-yyyy >>> valid_date(((01-15-2000"")) (सच्चा >>> valid_date((01-15-2012"") (गलत) >>> valid_date (((04-2040"") (गलत) >>> valid_date (((06-2020) (सच्चा >>> valid_date (((06-04/2020) (गलत)
bool valid_date(std::string date) {
","#include<assert.h>
#include<bits/stdc++.h>
bool valid_date(std::string date) {
  if (date.empty()) {
    return false;
  }
  if (date.length() != 10 || date[2] != '-' || date[5] != '-') {
    return false;
  }
  int month, day, year;
  try {
    month = std::stoi(date.substr(0, 2));
    day = std::stoi(date.substr(3, 2));
    year = std::stoi(date.substr(6, 4));
  } catch (const std::invalid_argument& e) {
    return false;
  } catch (const std::out_of_range& e) {
    return false;
  }
  if (month < 1 || month > 12) {
    return false;
  }
  if (day < 1) {
    return false;
  }
  if (month == 2) {
    if (day > 29) {
      return false;
    }
  } else if (month == 4 || month == 6 || month == 9 || month == 11) {
    if (day > 30) {
      return false;
    }
  } else {
    if (day > 31) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = valid_date;
    assert(candidate((""03-11-2000"")) == (true));
    assert(candidate((""15-01-2012"")) == (false));
    assert(candidate((""04-0-2040"")) == (false));
    assert(candidate((""06-04-2020"")) == (true));
    assert(candidate((""01-01-2007"")) == (true));
    assert(candidate((""03-32-2011"")) == (false));
    assert(candidate(("""")) == (false));
    assert(candidate((""04-31-3000"")) == (false));
    assert(candidate((""06-06-2005"")) == (true));
    assert(candidate((""21-31-2000"")) == (false));
    assert(candidate((""04-12-2003"")) == (true));
    assert(candidate((""04122003"")) == (false));
    assert(candidate((""20030412"")) == (false));
    assert(candidate((""2003-04"")) == (false));
    assert(candidate((""2003-04-12"")) == (false));
    assert(candidate((""04-2003"")) == (false));
}
"
HumanEval/125,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_std_vector_std_string__long{
    std::vector<std::string> f0;
    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}
    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}
    ~Union_std_vector_std_string__long() {}
    bool operator==(std::vector<std::string> f) {
        return f0 == f ;
    }    bool operator==(long f) {
        return f1 == f ;
    }
};
// शब्द के एगो स्ट्रिंग देल गेल हई, रिक्त स्थान पर विभाजित शब्द के एगो वेक्टर लौटाई, यदि पाठ में कोनो रिक्त स्थान ना हई त आप के अल्पविराम पर विभाजित करे के चाहि,' यदि कोई अल्पविराम ना हई त आप के वर्णमाला में विषम क्रम के साथ लोअर-केस अक्षर के संख्या लौटावे के चाहि, ऑर्ड 'ए') = 0, ऑर्ड 'बी') = 1, . . . ऑर्ड 'जे') = 25 उदाहरण >>> split_words >>> ""हैलो वर्ल्ड! "") std::vector<std::string>(({(std::string) ""हैलो"", (std::string) ""वर्ल्ड!
Union_std_vector_std_string__long split_words(std::string txt) {
","#include<assert.h>
#include<bits/stdc++.h>
union Union_std_vector_std_string__long{
    std::vector<std::string> f0;
    long f1;
    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}
    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}
    ~Union_std_vector_std_string__long() {}
    bool operator==(std::vector<std::string> f) {
        return f0 == f ;
    }
    bool operator==(long f) {
        return f1 == f ;
    }
};
Union_std_vector_std_string__long split_words(std::string txt) {
  if (txt.find(' ') != std::string::npos) {
    std::vector<std::string> words;
    std::stringstream ss(txt);
    std::string word;
    while (ss >> word) {
      words.push_back(word);
    }
    return Union_std_vector_std_string__long(words);
  } else if (txt.find(',') != std::string::npos) {
    std::vector<std::string> words;
    std::string current_word;
    for (char c : txt) {
      if (c == ',') {
        words.push_back(current_word);
        current_word = """";
      } else {
        current_word += c;
      }
    }
    words.push_back(current_word);
    return Union_std_vector_std_string__long(words);
  } else {
    long odd_order_count = 0;
    for (char c : txt) {
      if (islower(c)) {
        if ((c - 'a') % 2 != 0) {
          odd_order_count++;
        }
      }
    }
    return Union_std_vector_std_string__long(odd_order_count);
  }
}","}
int main() {
    auto candidate = split_words;
    assert(candidate((""Hello world!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world!""}));
    assert(candidate((""Hello,world!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world!""}));
    assert(candidate((""Hello world,!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world,!""}));
    assert(candidate((""Hello,Hello,world !"")) == std::vector<std::string>({(std::string)""Hello,Hello,world"", (std::string)""!""}));
    assert(candidate((""abcdef"")) == 3);
    assert(candidate((""aaabb"")) == 2);
    assert(candidate((""aaaBb"")) == 1);
    assert(candidate(("""")) == 0);
}
"
HumanEval/126,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// अगर एगो संख्या के वेक्टर देल जाई हई, त वापस कर देई चाहे ऊ आरोही क्रम में छलो। यदि वेक्टर में एके संख्या के 1 से अधिक डुप्लिकेट हई, त वापस कर देई। कोनो नकारात्मक संख्या अउर केवल पूर्णांक मानो। उदाहरण >>> is_sorted (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long_long) (long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long_long) (long_long_long_long) (long_long_long_long_long) (long_long_long_long_long_long) (long_long_long_long_long_long_long_long_long_long) (long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_
bool is_sorted(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_sorted(std::vector<long> lst) {
  if (lst.size() <= 1) {
    return true;
  }
  std::map<long, int> counts;
  for (long x : lst) {
    counts[x]++;
  }
  for (auto const& [key, val] : counts) {
    if (val > 2) {
      return false;
    }
  }
  for (size_t i = 0; i < lst.size() - 1; ++i) {
    if (lst[i] > lst[i + 1]) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = is_sorted;
    assert(candidate((std::vector<long>({(long)5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));
    assert(candidate((std::vector<long>())) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));
}
"
HumanEval/127,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो संख्या के अंतराल के एगो जोड़ा के रूप में लिखल जाई हई। उदाहरण के लेल, अंतराल = (शुरू, अंत) = (1, 2)। देल गेल अंतराल बंद हई जेकर अर्थ हई कि अंतराल (शुरू, अंत) में प्रारंभ अउर अंत दुनु शामिल हई। प्रत्येक देल गेल अंतराल के लेल, ई मानल जाई हई कि एकर शुरुआत एकर अंत के बराबर चाहे कम हई। आपके कार्य ई निर्धारित करनाई हई कि काई दू अंतराल के प्रतिच्छेदन के लंबाई एगो अभाज्य संख्या हई। उदाहरण के लेल, अंतराल के प्रतिच्छेदन (1, 3), (2, 4) (2, 3) हई, जेकर लंबाई 1 हई, जे एगो अभाज्य संख्या ना हई। यदि प्रतिच्छेदन के लंबाई एगो अभाज्य संख्या हई, त ""हाँ"" लौटाई, अन्यथा, ""नहीं"" लौटाई। यदि दू अंतराल न पार होई छई, त ""नहीं"" लौटाई। [इनपुट/आउटपुट] नमूनाः >>>
std::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long n) {
  if (n <= 1) return false;
  for (long i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

std::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {
  long start1 = std::get(interval1);
  long end1 = std::get(interval1);
  long start2 = std::get(interval2);
  long end2 = std::get(interval2);
  long intersection_start = std::max(start1, start2);
  long intersection_end = std::min(end1, end2);
  long intersection_length = intersection_end - intersection_start + 1;
  if (intersection_length <= 0) {
    return ""NO"";
  }
  if (is_prime(intersection_length)) {
    return ""YES"";
  } else {
    return ""NO"";
  }
}","}
int main() {
    auto candidate = intersection;
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(2, 3))) == (""NO""));
    assert(candidate((std::make_tuple(-1, 1)), (std::make_tuple(0, 4))) == (""NO""));
    assert(candidate((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5))) == (""YES""));
    assert(candidate((std::make_tuple(-2, 2)), (std::make_tuple(-4, 0))) == (""YES""));
    assert(candidate((std::make_tuple(-11, 2)), (std::make_tuple(-1, -1))) == (""NO""));
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(3, 5))) == (""NO""));
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(1, 2))) == (""NO""));
    assert(candidate((std::make_tuple(-2, -2)), (std::make_tuple(-3, -2))) == (""NO""));
}
"
HumanEval/128,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके पास पूर्णांक के एगो वेक्टर arr देल गेल हई आउर आपको वेक्टर में प्रत्येक संख्या के सभे संकेत के उत्पाद द्वारा गुणा कैल गेल पूर्णांक के परिमाण के योग के वापस करे के आवश्यकता हई, जेकर प्रतिनिधित्व 1, -1 चाहे 0 से कैल जाई हई। नोटः खाली arr के लेल कोई ना लौटाई। उदाहरण: >>> prod_signs(((std::vector<long>{(long) 1, (long) 2, (long) 2, (long) -4}))) 9 >>> prod_signs(std::vector<long>({(long) 0, (long) 1}))) 0 >>> prod_signs((std::vector<long>(())) std::nopt
std::optional<long> prod_signs(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>

std::optional<long> prod_signs(std::vector<long> arr) {
  if (arr.empty()) {
    return std::nullopt;
  }
  long sum_magnitudes = 0;
  long product_of_signs = 1;
  for (long num : arr) {
    sum_magnitudes += std::abs(num);
    if (num > 0) {
      product_of_signs *= 1;
    } else if (num < 0) {
      product_of_signs *= -1;
    } else {
      product_of_signs *= 0;
    }
  }
  return sum_magnitudes * product_of_signs;
}","}
int main() {
    auto candidate = prod_signs;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);
    assert(candidate((std::vector<long>())) == std::nullopt);
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);
}
"
HumanEval/129,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// N पंक्ति और N स्तंभ (N >= 2) और एक सकारात्मक पूर्णांक k वाला ग्रिड के प्रत्येक सेल में एक मान होवो हय। [1, N * N] समावेशी के प्रत्येक पूर्णांक ग्रिड के कोशिका पर ठीक एक बार प्रकट होवो हय। आपको ग्रिड में लंबाई k के न्यूनतम पथ के खोजे के चाहि। आप किसी भी सेल से शुरू कर सको हय, और प्रत्येक चरण में आप पड़ोसी कोशिकाओं में से किसी भी पर जा सको हय, दूसरे शब्दों में, आप उन कोशिकाओं में जा सको हय जे आपके वर्तमान सेल के साथ एक किनारा साझा करो हय। कृपया ध्यान दें कि लंबाई के पथ के अर्थ है कि ठीक k कोशिकाओं (अनिवार्य रूप से अलग) के दौरा करना। आप ग्रिड से बाहर ना जा सको हय। एक पथ A (लंबाई k) को पथ B (लंबाई k) से छोटा माना जा हय यदि सेल A और B पर मान के क्रमबद्ध वैक्टर के बनावे के बाद (हम ओकरा lA_st और lA_st कहें), lA_st भौगोलिक रूप से lA_st से छोटा हय, दूसरे शब्दों में, एक पूर्णांक जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे जे
std::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {
","#include <assert.h>
#include <bits/stdc++.h>

std::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {
  int n = grid.size();
  std::vector<long> min_path;

  std::function<void(int, int, std::vector<long>)> dfs = 
    [&](int row, int col, std::vector<long> current_path) {
    if (current_path.size() == k) {
      if (min_path.empty() || current_path < min_path) {
        min_path = current_path;
      }
      return;
    }

    current_path.push_back(grid[row][col]);

    int dr= {-1, 1, 0, 0};
    int dc= {0, 0, -1, 1};

    for (int i = 0; i < 4; ++i) {
      int next_row = row + dr[i];
      int next_col = col + dc[i];
      if (next_row >= 0 && next_row < n && next_col >= 0 && next_col < n) {
        dfs(next_row, next_col, current_path);
      }
    }
  };

  for (int start_row = 0; start_row < n; ++start_row) {
    for (int start_col = 0; start_col < n; ++start_col) {
      dfs(start_row, start_col, {});
    }
  }

  return min_path;
}","}
int main() {
    auto candidate = minPath;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) == (std::vector<long>({(long)1, (long)2, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) == (std::vector<long>({(long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15, (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16, (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1, (long)10, (long)1, (long)10, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10, (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1, (long)7, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) == (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1, (long)5})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));
}
"
HumanEval/130,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// उदाहरण के लिए, tri (n) = tri (n-1) + tri (n-2) + tri (n-1) + tri (n-1) + tri (n-1) + tri (n-1) + tri (n-1) = tri (n-2) = tri (n-1) = tri (n-1) = tri (n-2) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-2) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = tri (n-1) = n-1) = n-1 (n-1) = n-1 (n-1) (n-1) (n-1) (n-1) (n-1) (n-1) (n-1) (n-1) (n-1) (n-1) (n-1) (n-1) (n-1) (n-1) (n-1) (n-1) (n-1) (n-1) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n
std::vector<long> tri(long n) {
","#include <assert.h>
#include <bits/stdc++.h>

std::vector<long> tri(long n) {
  std::vector<long> result;
  if (n >= 0) {
    result.push_back(1);
  }
  if (n >= 1) {
    result.push_back(3);
  }
  for (long i = 2; i <= n; ++i) {
    if (i % 2 == 0) {
      result.push_back(1 + i / 2);
    } else {
      if (i - 1 >= 0 && i - 2 >= 0 && i + 1 <= n)
      {
          result.push_back(result[i-1] + result[i-2] + result[i]);
      }
      else if (i - 1 >= 0 && i - 2 >= 0)
      {
          result.push_back(result[i-1] + result[i-2]);
      }
      else if (i - 1 >= 0)
      {
          result.push_back(result[i-1]);
      }
      else
      {
          result.push_back(0);
      }
    }
  }
  return result;
}","}
int main() {
    auto candidate = tri;
    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));
    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15})));
    assert(candidate((6)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));
    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));
    assert(candidate((8)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));
    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));
    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));
    assert(candidate((0)) == (std::vector<long>({(long)1})));
    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));
}
"
HumanEval/131,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो धनात्मक पूर्णांक n देल गेल हई, तब विषम अंक के गुणनफल लौटाई। 0 लौटाई अगर सभे अंक सम हई। उदाहरण लागी: >>> अंक (((1)) (1) >>> अंक (((4)) (0) >>> अंक (((235)) (15)
long digits(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long digits(long n) {
  long product = 1;
  std::string s = std::to_string(n);
  bool has_odd = false;
  for (char c : s) {
    long digit = c - '0';
    if (digit % 2 != 0) {
      product *= digit;
      has_odd = true;
    }
  }
  if (!has_odd) {
    return 0;
  }
  return product;
}","}
int main() {
    auto candidate = digits;
    assert(candidate((5)) == (5));
    assert(candidate((54)) == (5));
    assert(candidate((120)) == (1));
    assert(candidate((5014)) == (5));
    assert(candidate((98765)) == (315));
    assert(candidate((5576543)) == (2625));
    assert(candidate((2468)) == (0));
}
"
HumanEval/132,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन बनावई जे इनपुट के रूप में एगो स्ट्रिंग लेई जे केवल वर्ग कोष्ठक के शामिल करई हई। फलन के तब आउर केवल तभी सही लौटाबे के चाहि जब कोष्ठक के एगो वैध उप-क्रम होई जहां उप-क्रम में कम से कम एगो कोष्ठक नेस्टेड होई हई। >>> is_nested((""[[]]"")) (सच्चा) >>> is_nested((""[]]]]]]]]]][[[[[]"")) (गलत) >>> is_nested((""[][]"")) (गलत) >>> is_nested((""[]"")) (गलत) >>> is_nested((""[[]]"")) (सच्चा) >>> is_nested(""[[]]"") (सच्चा)
bool is_nested(std::string string) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_nested(std::string string) {
  int balance = 0;
  bool nested = false;
  for (char c : string) {
    if (c == '[') {
      balance++;
    } else if (c == ']') {
      if (balance > 1) {
        nested = true;
      }
      balance--;
      if (balance < 0) {
        return false;
      }
    }
  }
  return balance == 0 && nested;
}","}
int main() {
    auto candidate = is_nested;
    assert(candidate((""[[]]"")) == (true));
    assert(candidate((""[]]]]]]][[[[[]"")) == (false));
    assert(candidate((""[][]"")) == (false));
    assert(candidate((""[]"")) == (false));
    assert(candidate((""[[[[]]]]"")) == (true));
    assert(candidate((""[]]]]]]]]]]"")) == (false));
    assert(candidate((""[][][[]]"")) == (true));
    assert(candidate((""[[]"")) == (false));
    assert(candidate((""[]]"")) == (false));
    assert(candidate((""[[]][["")) == (true));
    assert(candidate((""[[][]]"")) == (true));
    assert(candidate(("""")) == (false));
    assert(candidate((""[[[[[[[["")) == (false));
    assert(candidate((""]]]]]]]]"")) == (false));
}
"
HumanEval/133,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके पास संख्याओं का एक वेक्टर दिया जाता है। आपको दिए गए वेक्टर में वर्ग संख्याओं के योग को वापस करने की आवश्यकता है, पहले वेक्टर में प्रत्येक तत्व को ऊपरी int{(सीलिंग) पर गोल करें। उदाहरण: >>> lst{((std::vector<float>{(float) 1.0f, (float) 2.0f, (float) 3.0f}))) (14) >>> lst{((std::vector<float>{(float) 1.0f, (float) 4.0f, (float) 9.0f}))) >>> (98) lst{(std::vector<float>{(float) 1.0f, (float) 3.0f, (float) 5.0f, (float) 7.0f} (84) >>> lst{(std::vector<float>{(f1.4f, (float) 2.0f, (float) 3.0f} (14) >>> lst{((std::vector<float>{(float>1.0f, (float) 4.0f, (float) 2.0f)) (6) >>> (float) 2.0f, (float) (6) >>> (1.4f)
long sum_squares(std::vector<float> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long sum_squares(std::vector<float> lst) {
  long sum = 0;
  for (float num : lst) {
    long rounded_up = std::ceil(num);
    sum += rounded_up * rounded_up;
  }
  return sum;
}","}
int main() {
    auto candidate = sum_squares;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));
    assert(candidate((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84));
    assert(candidate((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f}))) == (29));
    assert(candidate((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6));
    assert(candidate((std::vector<float>({(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230));
    assert(candidate((std::vector<float>({(float)10000.0f, (float)10000.0f}))) == (200000000));
    assert(candidate((std::vector<float>({(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75));
    assert(candidate((std::vector<float>({(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086));
    assert(candidate((std::vector<float>({(float)0.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)-1.0f}))) == (1));
    assert(candidate((std::vector<float>({(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2));
}
"
HumanEval/134,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन बनावे जे सही लौटाई अगर देल गेल स्ट्रिंग के अंतिम वर्ण वर्णमाला वर्ण हई आउर कोनो शब्द के हिस्सा ना हई, आउर अन्यथा गलत हई। ध्यान दें: ""शब्द"" वर्ण के एगो समूह हई जे स्थान द्वारा अलग कैल गेल हई। उदाहरण: >>> check_if_last_char_is_a_letter((""apple pie"")) (false) >>> check_if_last_char_is_a_letter(""apple pi e"")) (सच्चा) >>> check_if_last_char_is_a_letter "")) (गलत) >>> check_if_last_char_is_a_letter "")) (गलत)
bool check_if_last_char_is_a_letter(std::string txt) {
","#include<assert.h>
#include<bits/stdc++.h>
bool check_if_last_char_is_a_letter(std::string txt) {
  if (txt.empty()) {
    return false;
  }
  if (!isalpha(txt.back())) {
    return false;
  }
  if (txt.length() > 1 && txt[txt.length() - 2] != ' ') {
    return false;
  }
  return true;
}","}
int main() {
    auto candidate = check_if_last_char_is_a_letter;
    assert(candidate((""apple"")) == (false));
    assert(candidate((""apple pi e"")) == (true));
    assert(candidate((""eeeee"")) == (false));
    assert(candidate((""A"")) == (true));
    assert(candidate((""Pumpkin pie "")) == (false));
    assert(candidate((""Pumpkin pie 1"")) == (false));
    assert(candidate(("""")) == (false));
    assert(candidate((""eeeee e "")) == (false));
    assert(candidate((""apple pie"")) == (false));
    assert(candidate((""apple pi e "")) == (false));
}
"
HumanEval/135,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो ऐसन फलन बनाबई जे कोनो तत्व के सबसे बड़ सूचकांक के लौटाबई जे ओकरा से तुरंत पहिले के तत्व के बराबर चाहे उससे बड़ न हो। अगर ऐसन कोनो तत्व मौजूद न हई त -1 लौटाबई। देल गेल वेक्टर में डुप्लिकेट मान न होई छई। उदाहरण: >>> can_arrange((std::vector<long>({long) 1, (long) 2, (long) 4, (long) 3, (long) 5}))) (3) >>> can_arrange((std::vector<long>{(long) 1, (long) 2, (long) 3}))) (-1)
long can_arrange(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long can_arrange(std::vector<long> arr) {
  for (long i = 1; i < arr.size(); ++i) {
    if (arr[i] < arr[i - 1]) {
      return i;
    }
  }
  return -1;
}","}
int main() {
    auto candidate = can_arrange;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5}))) == (3));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5}))) == (-1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));
    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7, (long)3}))) == (4));
    assert(candidate((std::vector<long>())) == (-1));
}
"
HumanEval/136,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन बनावे जे एगो ट्यूपल (ए, बी) लौटाई, जहां 'ए' एगो वैक्टर में ऋणात्मक पूर्णांक में सबसे बड़ हई, अउर 'बी' सकारात्मक पूर्णांक में सबसे छोट हई। यदि कोई ऋणात्मक चाहे सकारात्मक पूर्णांक ना हई, त ओकरा कोनो के रूप में लौटाई। उदाहरणः >>> largest_smallest_integers(((std::vector<long>{long) 2, (long) 4, (long) 1, (long) 3, (long) 5, (long) 7}))) std::make_tuplestd::optional<long>{long>), std::optional<long> (long) 1) >>> largest_smallest_integers(((std::vector<long> (long)) std::vector<long> (long) (long) (long))
std::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>
#include<tuple>
#include<vector>

std::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {
    std::optional<long> largest_negative = std::nullopt;
    std::optional<long> smallest_positive = std::nullopt;
    for (long num : lst) {
        if (num < 0) {
            if (!largest_negative.has_value() || num > largest_negative.value()) {
                largest_negative = num;
            }
        } else if (num > 0) {
            if (!smallest_positive.has_value() || num < smallest_positive.value()) {
                smallest_positive = num;
            }
        }
    }
    return std::make_tuple(largest_negative, smallest_positive);
}","}
int main() {
    auto candidate = largest_smallest_integers;
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));
    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2, (long)7, (long)-7}))) == std::make_tuple(-7, 2));
    assert(candidate((std::vector<long>({(long)7, (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9, 2));
    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6, (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)1}))) == std::make_tuple(-3, 1));
    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));
}
"
HumanEval/137,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_long_float_std_string{
    long f0;
    float f1;
    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}
    Union_long_float_std_string(float _f1) : f1(_f1) {}
    Union_long_float_std_string(std::string _f2) : f2(_f2) {}
    ~Union_long_float_std_string() {}
    bool operator==(long f) {
        return f0 == f ;
    }    bool operator==(float f) {
        return f1 == f ;
    }    bool operator==(std::string f) {
        return f2 == f ;
    }
};
union Union_long_float_std_string_std_nullopt{
    long f0;
    float f1;
    std::string f2;
    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}
    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}
    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}
    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}
    ~Union_long_float_std_string_std_nullopt() {}
    bool operator==(long f) {
        return f0 == f ;
    }    bool operator==(float f) {
        return f1 == f ;
    }    bool operator==(std::string f) {
        return f2 == f ;
    }    bool operator==(std::nullopt f) {
        return f3 == f ;
    }
};
// एगो फलन बनावे जे पूर्णांक, फ्लोट, चाहे वास्तविक संख्या के प्रतिनिधित्व करे वाला स्ट्रिंग के लेई हई, अउर अपन देल गेल चर प्रकार में बड़ चर के लौटाई हई। यदि मान समान हई त कोनो के वापस न लौटाई। नोटः यदि एगो वास्तविक संख्या के एगो स्ट्रिंग के रूप में दर्शाएल जाई हई, त फ्लोटिंग पॉइंट हो सकई हई . या , >>> compare_one(1, 2.5f) 2.5f >>> compare_one(1, ""2,3"") ""2,3"" >>> compare_one(""5,1"", ""6"") ""6"" >>> compare_one(""1"", 1) std::nullopt
Union_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>
#include<string>

union Union_long_float_std_string{
    long f0;
    float f1;
    std::string f2;
    Union_long_float_std_string(long _f0) : f0(_f0) {}
    Union_long_float_std_string(float _f1) : f1(_f1) {}
    Union_long_float_std_string(std::string _f2) : f2(_f2) {}
    ~Union_long_float_std_string() {}
    bool operator==(long f) {
        return f0 == f ;
    }
    bool operator==(float f) {
        return f1 == f ;
    }
    bool operator==(std::string f) {
        return f2 == f ;
    }
};
union Union_long_float_std_string_std_nullopt{
    long f0;
    float f1;
    std::string f2;
    std::nullopt f3;
    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}
    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}
    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}
    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}
    ~Union_long_float_std_string_std_nullopt() {}
    bool operator==(long f) {
        return f0 == f ;
    }
    bool operator==(float f) {
        return f1 == f ;
    }
    bool operator==(std::string f) {
        return f2 == f ;
    }
    bool operator==(std::nullopt f) {
        return f3 == f ;
    }
};

double parse_real(const std::string& s) {
    std::string temp = s;
    std::replace(temp.begin(), temp.end(), ',', '.');
    try {
        return std::stod(temp);
    } catch (const std::invalid_argument& e) {
        return std::numeric_limits<double>::quiet_NaN();
    } catch (const std::out_of_range& e) {
        return std::numeric_limits<double>::quiet_NaN();
    }
}

Union_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {
    if (a.f2.empty() && b.f2.empty()) {
        if (typeid(a.f0) == typeid(long) && typeid(b.f0) == typeid(long)) {
            if (a.f0 > b.f0) return Union_long_float_std_string_std_nullopt(a.f0);
            if (b.f0 > a.f0) return Union_long_float_std_string_std_nullopt(b.f0);
        } else if (typeid(a.f1) == typeid(float) && typeid(b.f1) == typeid(float)) {
            if (a.f1 > b.f1) return Union_long_float_std_string_std_nullopt(a.f1);
            if (b.f1 > a.f1) return Union_long_float_std_string_std_nullopt(b.f1);
        } else if (typeid(a.f0) == typeid(long) && typeid(b.f1) == typeid(float)) {
            if (static_cast<float>(a.f0) > b.f1) return Union_long_float_std_string_std_nullopt(a.f0);
            if (b.f1 > static_cast<float>(a.f0)) return Union_long_float_std_string_std_nullopt(b.f1);
        } else if (typeid(a.f1) == typeid(float) && typeid(b.f0) == typeid(long)) {
            if (a.f1 > static_cast<float>(b.f0)) return Union_long_float_std_string_std_nullopt(a.f1);
            if (static_cast<float>(b.f0) > a.f1) return Union_long_float_std_string_std_nullopt(b.f0);
        }
    } else {
        double val_a, val_b;
        if (!a.f2.empty()) val_a = parse_real(a.f2);
        else if (typeid(a.f0) == typeid(long)) val_a = static_cast<double>(a.f0);
        else val_a = static_cast<double>(a.f1);

        if (!b.f2.empty()) val_b = parse_real(b.f2);
        else if (typeid(b.f0) == typeid(long)) val_b = static_cast<double>(b.f0);
        else val_b = static_cast<double>(b.f1);

        if (!std::isnan(val_a) && !std::isnan(val_b)) {
            if (val_a > val_b) return Union_long_float_std_string_std_nullopt(a);
            if (val_b > val_a) return Union_long_float_std_string_std_nullopt(b);
        }
    }
    return Union_long_float_std_string_std_nullopt(std::nullopt{});
}","}
int main() {
    auto candidate = compare_one;
    assert(candidate(1, 2) == 2);
    assert(candidate(1, 2.5f) == 2.5f);
    assert(candidate(2, 3) == 3);
    assert(candidate(5, 6) == 6);
    assert(candidate(1, ""2,3"") == ""2,3"");
    assert(candidate(""5,1"", ""6"") == ""6"");
    assert(candidate(""1"", ""2"") == ""2"");
    assert(candidate(""1"", 1) == std::nullopt);
}
"
HumanEval/138,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ई मूल्यांकन कर कि की देल गेल संख्या n के ठीक 4 धनात्मक सम संख्या के योग के रूप में लिखल जा सकई हई उदाहरण >>> is_equal_to_sum_even ({} 4)) (false) >>> is_equal_to_sum_even ({} 6)) (false) >>> is_equal_to_sum_even ({} 8) (सच्चा)
bool is_equal_to_sum_even(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_equal_to_sum_even(long n) {
    if (n <= 6 || n % 2 != 0) {
        return false;
    }
    return true;
}","}
int main() {
    auto candidate = is_equal_to_sum_even;
    assert(candidate((4)) == (false));
    assert(candidate((6)) == (false));
    assert(candidate((8)) == (true));
    assert(candidate((10)) == (true));
    assert(candidate((11)) == (false));
    assert(candidate((12)) == (true));
    assert(candidate((13)) == (false));
    assert(candidate((16)) == (true));
}
"
HumanEval/139,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ब्राजीलियन फैक्टोरियल के रूप में परिभाषित कैल गेल हई: ब्राजीलियन_फैक्टोरियल ((n) = n! * (n-1)! * (n-2)! * ... * 1! जहां n > 0 उदाहरण के लेल: >>> विशेष_फैक्टोरियल (((4)) (288) फलन के इनपुट के रूप में एगो पूर्णांक प्राप्त होई हई अउर येई पूर्णांक के विशेष फैक्टोरियल लौटाबे के चाहि।
long special_factorial(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

long factorial(long k) {
    long res = 1;
    for (long i = 2; i <= k; ++i) {
        res *= i;
    }
    return res;
}

long special_factorial(long n) {
    if (n <= 0) {
        return 1;
    }
    long result = 1;
    for (long i = 1; i <= n; ++i) {
        result *= factorial(i);
    }
    return result;
}","}
int main() {
    auto candidate = special_factorial;
    assert(candidate((4)) == (288));
    assert(candidate((5)) == (34560));
    assert(candidate((7)) == (125411328000));
    assert(candidate((1)) == (1));
}
"
HumanEval/140,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो स्ट्रिंग टेक्स्ट देल गेल हई, एकरा में सभे स्पेस के अंडरस्कोर से बदल देई हई, अउर यदि कोनो स्ट्रिंग में 2 से अधिक लगातार स्पेस हई, त फेर सभे लगातार स्पेस के - >>> fix_spaces ((("" उदाहरण "") से बदल देई हई) (""उदाहरण"") >>> fix_spaces ((("" उदाहरण 1"")) (""उदाहरण_1"") >>> fix_spaces ((("" उदाहरण 2"")) (""_उदाहरण_2"") >>> fix_spaces ((("" उदाहरण 3"")) (""_उदाहरण-3"")
std::string fix_spaces(std::string text) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string fix_spaces(std::string text) {
    std::string result = """";
    int space_count = 0;
    for (char c : text) {
        if (c == ' ') {
            space_count++;
        } else {
            if (space_count == 1) {
                result += '_';
            } else if (space_count > 1) {
                result += '-';
            }
            result += c;
            space_count = 0;
        }
    }
    if (space_count == 1 && !result.empty() && result.back() != '_') {
        result += '_';
    } else if (space_count > 1 && !result.empty() && result.back() != '-') {
        result += '-';
    } else if (space_count > 0 && result.empty()) {
        if (space_count > 2) result += '-';
        else if (space_count == 1) result += '_';
    } else if (space_count == 1 && result.empty()) {
        result += '_';
    }

    std::string trimmed_result = """";
    bool non_space_found = false;
    for (char c : result) {
        if (c != ' ') {
            non_space_found = true;
            trimmed_result += c;
        } else if (non_space_found) {
            trimmed_result += c;
        }
    }

    while (!trimmed_result.empty() && trimmed_result.front() == '_') {
        trimmed_result.erase(trimmed_result.begin());
    }
    while (!trimmed_result.empty() && trimmed_result.back() == '_') {
        trimmed_result.pop_back();
    }
     while (!trimmed_result.empty() && trimmed_result.front() == '-') {
        trimmed_result.erase(trimmed_result.begin());
    }
    while (!trimmed_result.empty() && trimmed_result.back() == '-') {
        trimmed_result.pop_back();
    }

    std::string final_result = """";
    space_count = 0;
    for (char c : trimmed_result) {
        if (c == '_') {
            space_count++;
        } else {
            if (space_count == 1) {
                final_result += '_';
            } else if (space_count > 1) {
                final_result += '-';
            }
            final_result += c;
            space_count = 0;
        }
    }
    if (space_count == 1) {
        final_result += '_';
    } else if (space_count > 1) {
        final_result += '-';
    }

    return final_result;
}","}
int main() {
    auto candidate = fix_spaces;
    assert(candidate((""Example"")) == (""Example""));
    assert(candidate((""Mudasir Hanif "")) == (""Mudasir_Hanif_""));
    assert(candidate((""Yellow Yellow  Dirty  Fellow"")) == (""Yellow_Yellow__Dirty__Fellow""));
    assert(candidate((""Exa   mple"")) == (""Exa-mple""));
    assert(candidate((""   Exa 1 2 2 mple"")) == (""-Exa_1_2_2_mple""));
}
"
HumanEval/141,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फ़ंक्शन बनाउ जे एगो फ़ाइल के नाम के प्रतिनिधित्व करे वाला स्ट्रिंग लेई हई, अउर अगर फ़ाइल के नाम मान्य हई त 'हाँ' लौटाई हई, अउर अगर अन्यथा 'नहि' लौटाई हई। एगो फ़ाइल के नाम वैध मानल जाई हई अगर अउर केवल अगर निम्नलिखित सभे शर्त पूरा कैल गेल हई: - फ़ाइल के नाम में तीन से बेसी अंक ('0'-'9') ना होए के चाहि। - फ़ाइल के नाम में ठीक एगो बिंदु '.' होई हई। - बिंदु से पहिले सबस्ट्रिंग खाली ना होए के चाहि, अउर ई लैटिन अल्फाबेट ('a'-'z' अउर 'A'-Z') से शुरू होई छई। - बिंदु के बाद सबस्ट्रिंग येइमे से एगो होए के चाहि: ['txt', 'exe', 'll'] उदाहरण: >>> file_name_check""((example.txt"") (""हाँ"") >>> file_name_check""(example.dll"" (""नहीं"")
std::string file_name_check(std::string file_name) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string file_name_check(std::string file_name) {
    int digit_count = 0;
    int dot_count = 0;
    size_t dot_pos = std::string::npos;

    for (size_t i = 0; i < file_name.length(); ++i) {
        if (isdigit(file_name[i])) {
            digit_count++;
        } else if (file_name[i] == '.') {
            dot_count++;
            dot_pos = i;
        }
    }

    if (digit_count > 3 || dot_count != 1) {
        return ""No"";
    }

    if (dot_pos == 0 || dot_pos == file_name.length() - 1) {
        return ""No"";
    }

    std::string name_part = file_name.substr(0, dot_pos);
    std::string ext_part = file_name.substr(dot_pos + 1);

    if (name_part.empty() || !isalpha(name_part[0])) {
        return ""No"";
    }

    if (ext_part == ""txt"" || ext_part == ""exe"" || ext_part == ""dll"") {
        return ""Yes"";
    } else {
        return ""No"";
    }
}","}
int main() {
    auto candidate = file_name_check;
    assert(candidate((""example.txt"")) == (""Yes""));
    assert(candidate((""1example.dll"")) == (""No""));
    assert(candidate((""s1sdf3.asd"")) == (""No""));
    assert(candidate((""K.dll"")) == (""Yes""));
    assert(candidate((""MY16FILE3.exe"")) == (""Yes""));
    assert(candidate((""His12FILE94.exe"")) == (""No""));
    assert(candidate((""_Y.txt"")) == (""No""));
    assert(candidate((""?aREYA.exe"")) == (""No""));
    assert(candidate((""/this_is_valid.dll"")) == (""No""));
    assert(candidate((""this_is_valid.wow"")) == (""No""));
    assert(candidate((""this_is_valid.txt"")) == (""Yes""));
    assert(candidate((""this_is_valid.txtexe"")) == (""No""));
    assert(candidate((""#this2_i4s_5valid.ten"")) == (""No""));
    assert(candidate((""@this1_is6_valid.exe"")) == (""No""));
    assert(candidate((""this_is_12valid.6exe4.txt"")) == (""No""));
    assert(candidate((""all.exe.txt"")) == (""No""));
    assert(candidate((""I563_No.exe"")) == (""Yes""));
    assert(candidate((""Is3youfault.txt"")) == (""Yes""));
    assert(candidate((""no_one#knows.dll"")) == (""Yes""));
    assert(candidate((""1I563_Yes3.exe"")) == (""No""));
    assert(candidate((""I563_Yes3.txtt"")) == (""No""));
    assert(candidate((""final..txt"")) == (""No""));
    assert(candidate((""final132"")) == (""No""));
    assert(candidate((""_f4indsartal132."")) == (""No""));
    assert(candidate(("".txt"")) == (""No""));
    assert(candidate((""s."")) == (""No""));
}
"
HumanEval/142,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// "" ई फलन पूर्णांक के एगो सदिश लेई। सदिश में सभे प्रविष्टिय के लेल, फलन पूर्णांक प्रविष्टि के वर्ग करे हई अगर एकर सूचकांक 3 के गुणक हई अउर पूर्णांक प्रविष्टि के घन करे हई अगर एकर सूचकांक 4 के गुणक हई अउर 3 के गुणक ना। फलन सदिश में प्रविष्टिय के ना बदलतई जेकर सूचकांक 3 चाहे 4 के गुणक ना हई। फलन तब सभे प्रविष्टिय के योग लौटाई। उदाहरण: >>> lst (long({(long) 1, (long) 2, (long) 3})) >>> lst (long ((long)) >>> lst ({(long) -1, (long) -5, (long) 2, (long) -1, (long) -5}))
long sum_squares(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

long sum_squares(std::vector<long> lst) {
    long sum = 0;
    for (size_t i = 0; i < lst.size(); ++i) {
        if (i % 3 == 0) {
            sum += lst[i] * lst[i];
        } else if (i % 4 == 0) {
            sum += lst[i] * lst[i] * lst[i];
        } else {
            sum += lst[i];
        }
    }
    return sum;
}","}
int main() {
    auto candidate = sum_squares;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)9}))) == (14));
    assert(candidate((std::vector<long>())) == (0));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1}))) == (9));
    assert(candidate((std::vector<long>({(long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1}))) == (-3));
    assert(candidate((std::vector<long>({(long)0}))) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))) == (-126));
    assert(candidate((std::vector<long>({(long)-56, (long)-99, (long)1, (long)0, (long)-2}))) == (3030));
    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)-1}))) == (0));
    assert(candidate((std::vector<long>({(long)-16, (long)-9, (long)-2, (long)36, (long)36, (long)26, (long)-20, (long)25, (long)-40, (long)20, (long)-4, (long)12, (long)-26, (long)35, (long)37}))) == (-14196));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)17, (long)-1, (long)-15, (long)13, (long)-1, (long)14, (long)-14, (long)-12, (long)-5, (long)14, (long)-14, (long)6, (long)13, (long)11, (long)16, (long)16, (long)4, (long)10}))) == (-1448));
}
"
HumanEval/143,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो वाक्य के प्रतिनिधित्व करे वाला एगो स्ट्रिंग देल जाई हई, वाक्य में कुछ शब्द एगो रिक्ति से अलग होई हई, अउर आप के एगो स्ट्रिंग लौटाबे के होई हई जोनमे मूल वाक्य के शब्द होई हई, जेकर लंबाई अभाज्य संख्या हई, नया स्ट्रिंग में शब्द के क्रम मूल के समान होए के चाहि। उदाहरण 1: >>> words_in_sentence (((""This is a test"")) (""is"") उदाहरण 2: >>> words_in_sentence (((""let go for swimming"")) (""go for"") बाधाएँः * 1 <= len ((sentence) <= 100 * वाक्य में केवल अक्षर होई छई
std::string words_in_sentence(std::string sentence) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_prime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

std::string words_in_sentence(std::string sentence) {
    std::string result = """";
    std::stringstream ss(sentence);
    std::string word;
    while (ss >> word) {
        if (is_prime(word.length())) {
            if (!result.empty()) {
                result += "" "";
            }
            result += word;
        }
    }
    return result;
}","}
int main() {
    auto candidate = words_in_sentence;
    assert(candidate((""This is a test"")) == (""is""));
    assert(candidate((""lets go for swimming"")) == (""go for""));
    assert(candidate((""there is no place available here"")) == (""there is no place""));
    assert(candidate((""Hi I am Hussein"")) == (""Hi am Hussein""));
    assert(candidate((""go for it"")) == (""go for it""));
    assert(candidate((""here"")) == (""""));
    assert(candidate((""here is"")) == (""is""));
}
"
HumanEval/144,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ई फलन के सही लौटाबई हई अगर x * n के मान पूर्णांक होई हई आउर अन्यथा गलत होई हई। x अउर n दुनहु भिन्न के स्ट्रिंग प्रतिनिधित्व हई, अउर निम्नलिखित प्रारूप हई, <numerator>/<denominator> जहां भाजक अउर भाजक दुनहु धनात्मक पूर्णांक होई हई। आप मान सकई हई कि x, अउर n वैध भिन्न हई, अउर भाजक के रूप में शून्य ना होई हई। >>> simplify((""1/5""), (""5/1"")) (सच्चा) >>> simplify((""1/6""), (""2/1"") (गलत) >>> simplify((""7/10""), (""10/2"") (गलत)
bool simplify(std::string x, std::string n) {
","#include<assert.h>
#include<bits/stdc++.h>

long gcd(long a, long b) {
    while (b) {
        a %= b;
        std::swap(a, b);
    }
    return a;
}

bool simplify(std::string x, std::string n) {
    long x_num, x_den, n_num, n_den;
    size_t slash_pos = x.find('/');
    x_num = std::stol(x.substr(0, slash_pos));
    x_den = std::stol(x.substr(slash_pos + 1));

    slash_pos = n.find('/');
    n_num = std::stol(n.substr(0, slash_pos));
    n_den = std::stol(n.substr(slash_pos + 1));

    long num = x_num * n_num;
    long den = x_den * n_den;

    long common_divisor = gcd(num, den);
    den /= common_divisor;

    return den == 1;
}","}
int main() {
    auto candidate = simplify;
    assert(candidate((""1/5""), (""5/1"")) == (true));
    assert(candidate((""1/6""), (""2/1"")) == (false));
    assert(candidate((""5/1""), (""3/1"")) == (true));
    assert(candidate((""7/10""), (""10/2"")) == (false));
    assert(candidate((""2/10""), (""50/10"")) == (true));
    assert(candidate((""7/2""), (""4/2"")) == (true));
    assert(candidate((""11/6""), (""6/1"")) == (true));
    assert(candidate((""2/3""), (""5/2"")) == (false));
    assert(candidate((""5/2""), (""3/5"")) == (false));
    assert(candidate((""2/4""), (""8/4"")) == (true));
    assert(candidate((""2/4""), (""4/2"")) == (true));
    assert(candidate((""1/5""), (""5/1"")) == (true));
    assert(candidate((""1/5""), (""1/5"")) == (false));
}
"
HumanEval/145,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लिखू जे पूर्णांक के देल गेल वेक्टर के उनकर अंक के योग के अनुसार आरोही क्रम में क्रमबद्ध कर हई। ध्यान देहोः यदि उनके अंक के समान योग वाला कैगो आइटम हई, त ओकरा मूल वेक्टर में उनकर सूचकांक के आधार पर क्रमबद्ध कर देई। उदाहरण के लेल: >>> order_by_points((std::vector<long>({long) 1, (long) 11, (long) -1, (long) -1, (long) -12}))) (std::vector<long>({long) -1, (long) -11, (long) -1, (long) -12, (long) 11})) >>> order_by_points((std::vector<long>())) (std::vector<long>(long))
std::vector<long> order_by_points(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>

long sum_digits(long n) {
    long sum = 0;
    std::string s = std::to_string(std::abs(n));
    for (char c : s) {
        sum += c - '0';
    }
    return sum;
}

std::vector<long> order_by_points(std::vector<long> nums) {
    std::vector<std::pair<long, size_t>> indexed_nums;
    for (size_t i = 0; i < nums.size(); ++i) {
        indexed_nums.push_back({nums[i], i});
    }

    std::sort(indexed_nums.begin(), indexed_nums.end(), [](const std::pair<long, size_t>& a, const std::pair<long, size_t>& b) {
        long sum_a = sum_digits(a.first);
        long sum_b = sum_digits(b.first);
        if (sum_a != sum_b) {
            return sum_a < sum_b;
        }
        return a.second < b.second;
    });

    std::vector<long> result;
    for (const auto& pair : indexed_nums) {
        result.push_back(pair.first);
    }
    return result;
}","}
int main() {
    auto candidate = order_by_points;
    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11})));
    assert(candidate((std::vector<long>({(long)1234, (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234, (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) == (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2, (long)43, (long)54})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11}))) == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));
    assert(candidate((std::vector<long>({(long)0, (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76, (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));
}
"
HumanEval/146,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लिखू जे इनपुट के रूप में संख्या के एगो वैक्टर लेई हई अउर वैक्टर में तत्व के संख्या लौटाई हई जे 10 से बड़ हई अउर कोनो संख्या के पहिला अउर अंतिम अंक दुनु विषम हई (1, 3, 5, 7, 9) । उदाहरण के लेलः >>> specialFilter(((std::vector<long>({(long) 15, (long) -73, (long) -14, (long) -15}))) (1) >>> specialFilter((std::vector<long>({(long) -3, (long) -2, (long) -3, (long) -4, (long) -21, (long) -109} (2))))
long specialFilter(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_odd_digit(char c) {
    return (c == '1' || c == '3' || c == '5' || c == '7' || c == '9');
}

long specialFilter(std::vector<long> nums) {
    long count = 0;
    for (long num : nums) {
        if (std::abs(num) > 10) {
            std::string s = std::to_string(std::abs(num));
            if (!s.empty() && is_odd_digit(s.front()) && is_odd_digit(s.back())) {
                count++;
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = specialFilter;
    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5}))) == (0));
    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15}))) == (1));
    assert(candidate((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));
    assert(candidate((std::vector<long>({(long)43, (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));
    assert(candidate((std::vector<long>({(long)71, (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));
    assert(candidate((std::vector<long>({(long)1}))) == (0));
    assert(candidate((std::vector<long>())) == (0));
}
"
HumanEval/147,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो पूर्णांक के लेल, एगो पूर्णांक के एगो वैक्टर के बनावे के हई, जेकरा के मान के लेल एगो पूर्णांक के लेल एगो पूर्णांक के लेल एगो वैक्टर के बनावे के होई हई। प्रत्येक i (1 ≤ i ≤ n) के लेल, a[i] = i * i - i + 1 के मान। a के तिगुना के संख्या लौटाई जेजा i < j < k, अउर a[i] + a[j] + a[k] 3 के गुणक हई। उदाहरण: >>> get_max_triples((5)) (1) स्पष्टीकरण: a = [1, 3, 7, 13, 21] एकमात्र वैध तिगुना (1, 7, 13) हई।
long get_max_triples(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

long get_max_triples(long n) {
    if (n < 3) {
        return 0;
    }
    std::vector<long> a(n);
    for (long i = 0; i < n; ++i) {
        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;
    }

    long count = 0;
    for (long i = 0; i < n; ++i) {
        for (long j = i + 1; j < n; ++j) {
            for (long k = j + 1; k < n; ++k) {
                if ((a[i] + a[j] + a[k]) % 3 == 0) {
                    count++;
                }
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = get_max_triples;
    assert(candidate((5)) == (1));
    assert(candidate((6)) == (4));
    assert(candidate((10)) == (36));
    assert(candidate((100)) == (53361));
}
"
HumanEval/148,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// सौर मंडल में आठ ग्रह हइ: सबसे नगीच बुध हइ, अगला शुक्र हइ, फेर धरती, मंगल, बृहस्पति, शनि, यूरेनस, नेपच्यून । एगो फलन लिखहो जे दूगो ग्रह के नाम के ग्रह1 आउ ग्रह2 के स्ट्रिंग के रूप में ले हइ । फलन के एगो टपल लौटावे के चाही जेकरा में ऊ सब ग्रह शामिल हइ जेकर कक्षा ग्रह1 के कक्षा के बीच स्थित हइ आउ ग्रह2 के कक्षा के सूर्य के निकटता के अनुसार छाँटल हइ । फलन के खाली टपल लौटावे के चाही अगर ग्रह1 या ग्रह2 सही ग्रह नाम न हइ । उदाहरण >>> bf((""ज्योतिष""), (""नप्च्यून"")) (std::vector<std::string>{(std::string) ""शनि"", (std::string) ""उरांत"" (Uranus) ()) >>> bf((""पृथ्वी""), (""मर्क्युरी"") (std::vector<std::string>) (J Venus"") (std::vector:Venus) (std::std::st:Mercury) (Earth) (st:string) (Supple (string) (string) "" ("",
std::vector<std::string> bf(std::string planet1, std::string planet2) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<std::string> bf(std::string planet1, std::string planet2) {
    std::vector<std::string> planets = {""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""};
    auto it1 = std::find(planets.begin(), planets.end(), planet1);
    auto it2 = std::find(planets.begin(), planets.end(), planet2);

    if (it1 == planets.end() || it2 == planets.end()) {
        return {};
    }

    int index1 = std::distance(planets.begin(), it1);
    int index2 = std::distance(planets.begin(), it2);

    if (index1 == index2) {
        return {};
    }

    int start = std::min(index1, index2) + 1;
    int end = std::max(index1, index2);

    std::vector<std::string> result;
    for (int i = start; i < end; ++i) {
        result.push_back(planets[i]);
    }
    return result;
}","}
int main() {
    auto candidate = bf;
    assert(candidate((""Jupiter""), (""Neptune"")) == (std::vector<std::string>({(std::string)""Saturn"", (std::string)""Uranus""})));
    assert(candidate((""Earth""), (""Mercury"")) == (std::vector<std::string>({(std::string)""Venus""})));
    assert(candidate((""Mercury""), (""Uranus"")) == (std::vector<std::string>({(std::string)""Venus"", (std::string)""Earth"", (std::string)""Mars"", (std::string)""Jupiter"", (std::string)""Saturn""})));
    assert(candidate((""Neptune""), (""Venus"")) == (std::vector<std::string>({(std::string)""Earth"", (std::string)""Mars"", (std::string)""Jupiter"", (std::string)""Saturn"", (std::string)""Uranus""})));
    assert(candidate((""Earth""), (""Earth"")) == (std::vector<std::string>()));
    assert(candidate((""Mars""), (""Earth"")) == (std::vector<std::string>()));
    assert(candidate((""Jupiter""), (""Makemake"")) == (std::vector<std::string>()));
}
"
HumanEval/149,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लिखू जे स्ट्रिंग के एगो वैक्टर के पैरामीटर के रूप में स्वीकार कर हई, ओकरा से विषम लंबाई वाला स्ट्रिंग के हटा देई हई, अउर क्रमबद्ध क्रम के जौरे परिणामी वैक्टर लौटाई हई। वैक्टर हमेशा स्ट्रिंग के वैक्टर होई हई अउर कहियो संख्या के वैक्टर ना होई हई, अउर एकरा मे डुप्लिकेट हो सकई हई। वैक्टर के क्रम प्रत्येक शब्द के लंबाई के अनुसार आरोही होए के चाहि, अउर आप के वैक्टर के ओई नियम द्वारा क्रमबद्ध लौटाबे के चाहि। यदि दू शब्द के लंबाई समान होई हई, त वैक्टर के वर्णमाला क्रम में क्रमबद्ध कर दी। फलन के क्रमबद्ध क्रम में स्ट्रिंग के वैक्टर लौटाबे के चाहि। आप मान सकई हई कि सभे शब्द के लंबाई समान होई छलई। उदाहरण के लेल: >>> list_sort{""}std::stdvector<stdstring>{""}std::std::string""{""}std"" (a""}std:std:aa"" (a""}std:std:std:std::std::std::std::std::std::std::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::d::
std::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {
    std::vector<std::string> even_length_strings;
    for (const std::string& s : lst) {
        if (s.length() % 2 == 0) {
            even_length_strings.push_back(s);
        }
    }

    std::sort(even_length_strings.begin(), even_length_strings.end(), [](const std::string& a, const std::string& b) {
        if (a.length() != b.length()) {
            return a.length() < b.length();
        }
        return a < b;
    });

    return even_length_strings;
}","}
int main() {
    auto candidate = sorted_list_sum;
    assert(candidate((std::vector<std::string>({(std::string)""aa"", (std::string)""a"", (std::string)""aaa""}))) == (std::vector<std::string>({(std::string)""aa""})));
    assert(candidate((std::vector<std::string>({(std::string)""school"", (std::string)""AI"", (std::string)""asdf"", (std::string)""b""}))) == (std::vector<std::string>({(std::string)""AI"", (std::string)""asdf"", (std::string)""school""})));
    assert(candidate((std::vector<std::string>({(std::string)""d"", (std::string)""b"", (std::string)""c"", (std::string)""a""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""d"", (std::string)""dcba"", (std::string)""abcd"", (std::string)""a""}))) == (std::vector<std::string>({(std::string)""abcd"", (std::string)""dcba""})));
    assert(candidate((std::vector<std::string>({(std::string)""AI"", (std::string)""ai"", (std::string)""au""}))) == (std::vector<std::string>({(std::string)""AI"", (std::string)""ai"", (std::string)""au""})));
    assert(candidate((std::vector<std::string>({(std::string)""a"", (std::string)""b"", (std::string)""b"", (std::string)""c"", (std::string)""c"", (std::string)""a""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""aaaa"", (std::string)""bbbb"", (std::string)""dd"", (std::string)""cc""}))) == (std::vector<std::string>({(std::string)""cc"", (std::string)""dd"", (std::string)""aaaa"", (std::string)""bbbb""})));
}
"
HumanEval/150,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो साधारण प्रोग्राम जेकरा x के मान लौटावे के चाही अगर n एगो अभाज्य संख्या हई आउर y के मान लौटावे के चाही अन्यथा उदाहरण: >>> x_or_y((7), (34), (12)) (34) >>> x_or_y(15), (8), (5) (5)
long x_or_y(long n, long x, long y) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_prime(long n) {
    if (n <= 1) return false;
    for (long i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

long x_or_y(long n, long x, long y) {
    if (is_prime(n)) {
        return x;
    } else {
        return y;
    }
}","}
int main() {
    auto candidate = x_or_y;
    assert(candidate((7), (34), (12)) == (34));
    assert(candidate((15), (8), (5)) == (5));
    assert(candidate((3), (33), (5212)) == (33));
    assert(candidate((1259), (3), (52)) == (3));
    assert(candidate((7919), (-1), (12)) == (-1));
    assert(candidate((3609), (1245), (583)) == (583));
    assert(candidate((91), (56), (129)) == (129));
    assert(candidate((6), (34), (1234)) == (1234));
    assert(candidate((1), (2), (0)) == (0));
    assert(candidate((2), (2), (0)) == (2));
}
"
HumanEval/151,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// संख्या के एगो वैक्टर देल गेल हई, वैक्टर में संख्या के वर्ग के योग के वापस कर देई जे विषम हई। नकारात्मक चाहे पूर्णांक न हई संख्या के अनदेखा कर दी। >>> double_the_difference{((std::vector<float>({(long) 1, (long) 3, (long) 2, (long) 0}))) (10) >>> double_the_difference{(std::vector<float>{(long) -1, (long) -2, (long) 0}))) (0) >>> double_the_difference{(std::vector<float>{(long) -9, (long) -2}))) (81) >>> double_the_difference{(std::vector<float>{(long) -0}))) (0) अगर इनपुट वैक्टर खाली हई, त 0 लौटाई।
long double_the_difference(std::vector<float> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

long double_the_difference(std::vector<float> lst) {
    long sum_of_squares = 0;
    for (float num : lst) {
        if (num > 0 && static_cast<long>(num) == num && static_cast<long>(num) % 2 != 0) {
            sum_of_squares += static_cast<long>(num) * static_cast<long>(num);
        }
    }
    return sum_of_squares;
}","}
int main() {
    auto candidate = double_the_difference;
    assert(candidate((std::vector<float>())) == (0));
    assert(candidate((std::vector<float>({(float)5.0f, (float)4.0f}))) == (25));
    assert(candidate((std::vector<float>({(float)0.1f, (float)0.2f, (float)0.3f}))) == (0));
    assert(candidate((std::vector<float>({(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)0.2f, (float)3.0f, (float)5.0f}))) == (34));
    assert(candidate((std::vector<float>({(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165));
}
"
HumanEval/152,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// हम सब के ई भाव याद हइ, जब कोई लम्बा समय से प्रतीक्षित घटना के परिणाम आखिरकार जानल जा हइ । ऊ क्षण में तोहर भावना आउ विचार निश्चित रूप से नोट करे आउ तुलना करे लायक हइ । तोहर काम ई निर्धारित करे के हइ कि कोय व्यक्ति केतना मैच के परिणाम सही से अनुमान लगा लेलकइ हे । तोरा दूगो समान लंबाई के स्कोर आउ अनुमान के वेक्टर देल गेल ह, जहाँ हरेक सूचकांक में एक मैच देखाय दे हइ । एक समान लंबाई के वेक्टर लौटा दे जे हरेक अनुमान के केतना दूर के दर्शावे । अगर ऊ सही अनुमान लगा लेलकइ हे, त मान 0 हे, आउ अगर नयँ, त मान अनुमान आउ स्कोर के बीच के पूर्ण अंतर हे । उदाहरण: >>>((longd::vector<long>{(long) 1, (long) 2, (long) 3, (long) 4, (long) 5, (longd) 1, (longd) 4, (longd) 0, (longd) 0, (longd) 0, (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long
std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {
    std::vector<long> diff;
    for (size_t i = 0; i < game.size(); ++i) {
        diff.push_back(std::abs(game[i] - guess[i]));
    }
    return diff;
}","}
int main() {
    auto candidate = compare;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3})));
    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2, (long)4, (long)6})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));
}
"
HumanEval/153,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके एगो वर्ग (एक स्ट्रिंग) के नाम और एक्सटेंशन के एगो वेक्टर देल जाई हई। एक्सटेंशन के उपयोग वर्ग के अतिरिक्त वर्ग के लोड करे के लेल कैल जाई हई। एक्सटेंशन के ताकत निम्नानुसार हई: सीएपी के एक्सटेंशन के नाम में अपरकेस अक्षर के संख्या होवे दे, अउर एसएम के एक्सटेंशन के नाम में लोकरकेस अक्षर के संख्या होवे दे, ताकत के अंश सीएपी - एसएम द्वारा देल जाई हई। आपके सबसे मजबूत एक्सटेंशन के खोज करेके चाहि आउर येई प्रारूप में एगो स्ट्रिंग लौटावे के चाहि: क्लासनेम। सबसे मजबूत एक्सटेंशन नाम। यदि एके ताकत के जौरे दू चाहे अधिक एक्सटेंशन हई, त आप के वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से वैकल्पिक रूप से) ।
std::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {
","#include<assert.h>
#include<bits/stdc++.h>

int calculate_strength(const std::string& extension) {
    int cap_count = 0;
    int sm_count = 0;
    for (char c : extension) {
        if (isupper(c)) {
            cap_count++;
        } else if (islower(c)) {
            sm_count++;
        }
    }
    return cap_count - sm_count;
}

std::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {
    if (extensions.empty()) {
        return class_name;
    }

    std::string strongest_extension = extensions[0];
    int max_strength = calculate_strength(extensions[0]);

    for (size_t i = 1; i < extensions.size(); ++i) {
        int current_strength = calculate_strength(extensions[i]);
        if (current_strength > max_strength) {
            max_strength = current_strength;
            strongest_extension = extensions[i];
        }
    }

    return class_name + ""."" + strongest_extension;
}","}
int main() {
    auto candidate = Strongest_Extension;
    assert(candidate((""Watashi""), (std::vector<std::string>({(std::string)""tEN"", (std::string)""niNE"", (std::string)""eIGHt8OKe""}))) == (""Watashi.eIGHt8OKe""));
    assert(candidate((""Boku123""), (std::vector<std::string>({(std::string)""nani"", (std::string)""NazeDa"", (std::string)""YEs.WeCaNe"", (std::string)""32145tggg""}))) == (""Boku123.YEs.WeCaNe""));
    assert(candidate((""__YESIMHERE""), (std::vector<std::string>({(std::string)""t"", (std::string)""eMptY"", (std::string)""nothing"", (std::string)""zeR00"", (std::string)""NuLl__"", (std::string)""123NoooneB321""}))) == (""__YESIMHERE.NuLl__""));
    assert(candidate((""K""), (std::vector<std::string>({(std::string)""Ta"", (std::string)""TAR"", (std::string)""t234An"", (std::string)""cosSo""}))) == (""K.TAR""));
    assert(candidate((""__HAHA""), (std::vector<std::string>({(std::string)""Tab"", (std::string)""123"", (std::string)""781345"", (std::string)""-_-""}))) == (""__HAHA.123""));
    assert(candidate((""YameRore""), (std::vector<std::string>({(std::string)""HhAas"", (std::string)""okIWILL123"", (std::string)""WorkOut"", (std::string)""Fails"", (std::string)""-_-""}))) == (""YameRore.okIWILL123""));
    assert(candidate((""finNNalLLly""), (std::vector<std::string>({(std::string)""Die"", (std::string)""NowW"", (std::string)""Wow"", (std::string)""WoW""}))) == (""finNNalLLly.WoW""));
    assert(candidate((""_""), (std::vector<std::string>({(std::string)""Bb"", (std::string)""91245""}))) == (""_.Bb""));
    assert(candidate((""Sp""), (std::vector<std::string>({(std::string)""671235"", (std::string)""Bb""}))) == (""Sp.671235""));
}
"
HumanEval/154,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// तोरा दूगो शब्द देल गेल हे. अगर दोसर शब्द चाहे ओकर कोनो घुमाव पहिला शब्द में एगो सबस्ट्रिंग हइ, त तोरा सही लौटावे के चाही >>> cycpattern_check((""abcd""), (""abd"")) (false) >>> cycpattern_check((""hello""), (""ell"") (true) >>> cycpattern_check((""whassup""), (""psus"")) (false) >>> cycpattern_check((""abab""), (""baa"")) (true) >>> cycpattern_(check""efef""), (""eeff"") (false) >>> cycpattern_check((""himens""), (""simen"") (true)
bool cycpattern_check(std::string a, std::string b) {
","#include<assert.h>
#include<bits/stdc++.h>

bool cycpattern_check(std::string a, std::string b) {
    if (b.empty()) {
        return true;
    }
    if (a.length() < b.length()) {
        return false;
    }
    for (int i = 0; i < b.length(); ++i) {
        std::rotate(b.begin(), b.begin() + 1, b.end());
        if (a.find(b) != std::string::npos) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = cycpattern_check;
    assert(candidate((""xyzw""), (""xyw"")) == (false));
    assert(candidate((""yello""), (""ell"")) == (true));
    assert(candidate((""whattup""), (""ptut"")) == (false));
    assert(candidate((""efef""), (""fee"")) == (true));
    assert(candidate((""abab""), (""aabb"")) == (false));
    assert(candidate((""winemtt""), (""tinem"")) == (true));
}
"
HumanEval/155,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो पूर्णांक देल गेल हई, एगो ट्यूपल लौटाई जे क्रमशः सम आउर विषम अंक के संख्या हई। उदाहरण: >>> even_odd_count((-12)) (std::make_tuple(1, 1)) >>> even_odd_count((123)) (std::make_tuple(1, 2)
std::tuple<long, long> even_odd_count(long num) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<tuple>

std::tuple<long, long> even_odd_count(long num) {
    long even_count = 0;
    long odd_count = 0;
    std::string s = std::to_string(std::abs(num));
    for (char c : s) {
        int digit = c - '0';
        if (digit % 2 == 0) {
            even_count++;
        } else {
            odd_count++;
        }
    }
    return std::make_tuple(even_count, odd_count);
}","}
int main() {
    auto candidate = even_odd_count;
    assert(candidate((7)) == (std::make_tuple(0, 1)));
    assert(candidate((-78)) == (std::make_tuple(1, 1)));
    assert(candidate((3452)) == (std::make_tuple(2, 2)));
    assert(candidate((346211)) == (std::make_tuple(3, 3)));
    assert(candidate((-345821)) == (std::make_tuple(3, 3)));
    assert(candidate((-2)) == (std::make_tuple(1, 0)));
    assert(candidate((-45347)) == (std::make_tuple(2, 3)));
    assert(candidate((0)) == (std::make_tuple(1, 0)));
}
"
HumanEval/156,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो धनात्मक पूर्णांक देल गेल, एकर रोमन अंक समकक्ष एगो स्ट्रिंग के रूप में प्राप्त कर, अउर एकरा लघु अक्षर में लौटाई। प्रतिबंधः 1 <= num <= 1000 उदाहरणः >>> int_to_mini_roman((19)) (""xix"") >>> int_to_mini_roman((152)) (""clii"") >>> int_to_mini_roman(426)) (""cdxxvi"")
std::string int_to_mini_roman(long number) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string int_to_mini_roman(long number) {
    std::string roman = """";
    std::vector<std::pair<int, std::string>> roman_map = {
        {1000, ""m""}, {900, ""cm""}, {500, ""d""}, {400, ""cd""}, {100, ""c""},
        {90, ""xc""}, {50, ""l""}, {40, ""xl""}, {10, ""x""}, {9, ""ix""}, {5, ""v""},
        {4, ""iv""}, {1, ""i""}
    };

    for (const auto& pair : roman_map) {
        while (number >= pair.first) {
            roman += pair.second;
            number -= pair.first;
        }
    }
    return roman;
}","}
int main() {
    auto candidate = int_to_mini_roman;
    assert(candidate((19)) == (""xix""));
    assert(candidate((152)) == (""clii""));
    assert(candidate((251)) == (""ccli""));
    assert(candidate((426)) == (""cdxxvi""));
    assert(candidate((500)) == (""d""));
    assert(candidate((1)) == (""i""));
    assert(candidate((4)) == (""iv""));
    assert(candidate((43)) == (""xliii""));
    assert(candidate((90)) == (""xc""));
    assert(candidate((94)) == (""xciv""));
    assert(candidate((532)) == (""dxxxii""));
    assert(candidate((900)) == (""cm""));
    assert(candidate((994)) == (""cmxciv""));
    assert(candidate((1000)) == (""m""));
}
"
HumanEval/157,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो त्रिकोण के तीन भुजा के लंबाई के देखते हुए। यदि तीन भुजा एगो समकोण त्रिभुज बनाव हई त सही लौटाई, अन्यथा गलत। एगो समकोण त्रिभुज एगो त्रिभुज हई जेकरा में एगो कोण सीधा कोण चाहे 90 डिग्री हई। उदाहरण: >>> right_angle_triangle((3), (4), (5)) (सही) >>> right_angle_triangle(1), (2), (3)) (गलत)
bool right_angle_triangle(long a, long b, long c) {
","#include<assert.h>
#include<bits/stdc++.h>

bool right_angle_triangle(long a, long b, long c) {
    std::vector<long> sides = {a, b, c};
    std::sort(sides.begin(), sides.end());
    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);
}","}
int main() {
    auto candidate = right_angle_triangle;
    assert(candidate((3), (4), (5)) == (true));
    assert(candidate((1), (2), (3)) == (false));
    assert(candidate((10), (6), (8)) == (true));
    assert(candidate((2), (2), (2)) == (false));
    assert(candidate((7), (24), (25)) == (true));
    assert(candidate((10), (5), (7)) == (false));
    assert(candidate((5), (12), (13)) == (true));
    assert(candidate((15), (8), (17)) == (true));
    assert(candidate((48), (55), (73)) == (true));
    assert(candidate((1), (1), (1)) == (false));
    assert(candidate((2), (2), (10)) == (false));
}
"
HumanEval/158,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो फलन लिखू जे स्ट्रिंग के एगो वैक्टर के स्वीकार कर हई। वैक्टर में अलग-अलग शब्द होई हई। अधिकतम संख्या में अद्वितीय वर्ण वाला शब्द लौटाई। यदि कैगो स्ट्रिंग में अधिकतम संख्या में अद्वितीय वर्ण होई हई, त ऊ शब्द लौटाई जे शब्दकोश के क्रम में पहिले आवे हई। >>> find_max((std::std::string>({(std::string) ""name"", (std::string) ""of"", (std::string) ""string""}))) (""string"") >>> find_max (((std::std::string>{(std::string) ""name"", (std::string) """", (enam) ""game""} (""enam"")))) >>> find_max (((std::std::string>{((std:string) ""aaaaaa"" (""aaaaaa"""") >>> find_max (((std::std::string> (bb) "" (std::string) "" (""string""))))
std::string find_max(std::vector<std::string> words) {
","#include<assert.h>
#include<bits/stdc++.h>

int count_unique_chars(const std::string& s) {
    std::set<char> unique_chars;
    for (char c : s) {
        unique_chars.insert(c);
    }
    return unique_chars.size();
}

std::string find_max(std::vector<std::string> words) {
    if (words.empty()) {
        return """";
    }

    std::string max_unique_word = words[0];
    int max_unique_count = count_unique_chars(words[0]);

    for (size_t i = 1; i < words.size(); ++i) {
        int current_unique_count = count_unique_chars(words[i]);
        if (current_unique_count > max_unique_count) {
            max_unique_count = current_unique_count;
            max_unique_word = words[i];
        } else if (current_unique_count == max_unique_count && words[i] < max_unique_word) {
            max_unique_word = words[i];
        }
    }
    return max_unique_word;
}","}
int main() {
    auto candidate = find_max;
    assert(candidate((std::vector<std::string>({(std::string)""name"", (std::string)""of"", (std::string)""string""}))) == (""string""));
    assert(candidate((std::vector<std::string>({(std::string)""name"", (std::string)""enam"", (std::string)""game""}))) == (""enam""));
    assert(candidate((std::vector<std::string>({(std::string)""aaaaaaa"", (std::string)""bb"", (std::string)""cc""}))) == (""aaaaaaa""));
    assert(candidate((std::vector<std::string>({(std::string)""abc"", (std::string)""cba""}))) == (""abc""));
    assert(candidate((std::vector<std::string>({(std::string)""play"", (std::string)""this"", (std::string)""game"", (std::string)""of"", (std::string)""footbott""}))) == (""footbott""));
    assert(candidate((std::vector<std::string>({(std::string)""we"", (std::string)""are"", (std::string)""gonna"", (std::string)""rock""}))) == (""gonna""));
    assert(candidate((std::vector<std::string>({(std::string)""we"", (std::string)""are"", (std::string)""a"", (std::string)""mad"", (std::string)""nation""}))) == (""nation""));
    assert(candidate((std::vector<std::string>({(std::string)""this"", (std::string)""is"", (std::string)""a"", (std::string)""prrk""}))) == (""this""));
    assert(candidate((std::vector<std::string>({(std::string)""b""}))) == (""b""));
    assert(candidate((std::vector<std::string>({(std::string)""play"", (std::string)""play"", (std::string)""play""}))) == (""play""));
}
"
HumanEval/159,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// तूँ एगो भूखा खरगोश हकऽ, आउ तूँ पहिले से ही कुछ गाजर खा चुकलऽ हे, लेकिन अब दिन के भोजन पूरा करे लगी तोरा आउ गाजर खाय के चाही । तूँ एगो वेक्टर [खाय के बाद खाएल गेल गाजर के कुल संख्या, खाना के बाद बचे वाला गाजर के संख्या] के लौटावे के चाही अगर पर्याप्त शेष गाजर नञ् हइ, त तूँ बाकी के गाजर खा जइबऽ, लेकिन तूँ अभियो भूखा रह जइबऽ । उदाहरण: >>> खाईं (((5), (6), (10)) (std::vector<long>{()11, (long)4})) >>> खाईं ((4), (8), (9) (std::vector<long>{()12, ( (1})) >>> खाईं ((1), (10), (10) (std::vector<long>{() 11, (long) 0)) >>> खाईं ((2), (11), (5) (std::vector<long>{), (long) 0) @ V: integer number of carrots that you need to eat in stock: 1000 * thema = संख्या के शेष गाजर के संख्या जे तोरा खाए के जरूरत हको: 1000 * thema = संख्या के शेष गाजर के संख्या के संख्या के संख्या में थमाई = 1000
std::vector<long> eat(long number, long need, long remaining) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> eat(long number, long need, long remaining) {
    long eaten = 0;
    long left = remaining;
    long to_eat = need;

    if (left >= to_eat) {
        eaten = to_eat;
        left -= to_eat;
    } else {
        eaten = left;
        left = 0;
    }

    return {(long)number + eaten, left};
}","}
int main() {
    auto candidate = eat;
    assert(candidate((5), (6), (10)) == (std::vector<long>({(long)11, (long)4})));
    assert(candidate((4), (8), (9)) == (std::vector<long>({(long)12, (long)1})));
    assert(candidate((1), (10), (10)) == (std::vector<long>({(long)11, (long)0})));
    assert(candidate((2), (11), (5)) == (std::vector<long>({(long)7, (long)0})));
    assert(candidate((4), (5), (7)) == (std::vector<long>({(long)9, (long)2})));
    assert(candidate((4), (5), (1)) == (std::vector<long>({(long)5, (long)0})));
}
"
HumanEval/160,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// दो वेक्टर ऑपरेटर, और ऑपरेन्ड के देखते हुए. पहला वेक्टर में बुनियादी बीजगणित संचालन हई, और दूसरा वेक्टर पूर्णांक के एक वेक्टर हई। बीजगणितीय अभिव्यक्ति के निर्माण करे के लेल दू देल गेल वेक्टर के उपयोग करे आउर इ अभिव्यक्ति के मूल्यांकन लौटावे के लेल। बुनियादी बीजगणित संचालन: जोड़ (+) घटाव ( ) - गुणा ( *) मंजिल विभाजन ( // ) घातांक ( **) उदाहरण: ऑपरेटर['+', '*', '-'] वेक्टर = [2, 3, 4, 5] परिणाम = 2 + 3 * 4 - 5 => परिणाम = 9 नोट: ऑपरेटर वेक्टर के लंबाई ऑपरेंड वेक्टर के लंबाई के बराबर हई। ऑपरेंड गैर-ऋणात्मक पूर्णांक के एक वेक्टर हई। ऑपरेटर वेक्टर में कम से कम एक ऑपरेडर होई हई, अउर ऑपरेंड वेक्टर में कम से कम दू ऑपरेंड होई हई।
long do_algebra(std::vector<std::string> op, std::vector<long> operand) {
","#include<assert.h>
#include<bits/stdc++.h>

long do_algebra(std::vector<std::string> op, std::vector<long> operand) {
    std::vector<long> current_operand = operand;
    std::vector<std::string> current_operator = op;

    auto apply_op = [&](long a, long b, const std::string& o) {
        if (o == ""+"") return a + b;
        if (o == ""-"") return a - b;
        if (o == ""*"") return a * b;
        if (o == ""//"") return a / b;
        if (o == ""**"") return static_cast<long>(pow(a, b));
        return 0L; // Should not happen
    };

    std::vector<std::string> precedence1 = {""**""};
    std::vector<std::string> precedence2 = {""*"", ""//""};
    std::vector<std::string> precedence3 = {""+"", ""-""};

    auto evaluate = [&](const std::vector<std::string>& prec) {
        size_t i = 0;
        while (i < current_operator.size()) {
            bool found = false;
            for (const auto& o : prec) {
                if (current_operator[i] == o) {
                    current_operand[i] = apply_op(current_operand[i], current_operand[i + 1], current_operator[i]);
                    current_operand.erase(current_operand.begin() + i + 1);
                    current_operator.erase(current_operator.begin() + i);
                    found = true;
                    break;
                }
            }
            if (!found) {
                i++;
            }
        }
    };

    evaluate(precedence1);
    evaluate(precedence2);
    evaluate(precedence3);

    return current_operand[0];
}","}
int main() {
    auto candidate = do_algebra;
    assert(candidate((std::vector<std::string>({(std::string)""**"", (std::string)""*"", (std::string)""+""})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (37));
    assert(candidate((std::vector<std::string>({(std::string)""+"", (std::string)""*"", (std::string)""-""})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (9));
    assert(candidate((std::vector<std::string>({(std::string)""//"", (std::string)""*""})), (std::vector<long>({(long)7, (long)3, (long)4}))) == (8));
}
"
HumanEval/161,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// अगर एगो अक्षर s[i] हई, त एकर केस के निचला से ऊपर या उपरे से उलट देई, अन्यथा एकरा जइसन हई ओइसन रखई। अगर स्ट्रिंग में कोनो अक्षर ना हई, त स्ट्रिंग के उलट देई। फलन के परिणामी स्ट्रिंग लौटाबे के चाहि। उदाहरण >>> solve((""1234"")) (""4321"") >>> solve((""ab"")) (""AB"") >>> solve((""#a@C"")) (""#A@c"")
std::string solve(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string solve(std::string s) {
    bool has_letter = false;
    for (char c : s) {
        if (isalpha(c)) {
            has_letter = true;
            break;
        }
    }

    if (has_letter) {
        for (char& c : s) {
            if (islower(c)) {
                c = toupper(c);
            } else if (isupper(c)) {
                c = tolower(c);
            }
        }
    } else {
        std::reverse(s.begin(), s.end());
    }
    return s;
}","}
int main() {
    auto candidate = solve;
    assert(candidate((""AsDf"")) == (""aSdF""));
    assert(candidate((""1234"")) == (""4321""));
    assert(candidate((""ab"")) == (""AB""));
    assert(candidate((""#a@C"")) == (""#A@c""));
    assert(candidate((""#AsdfW^45"")) == (""#aSDFw^45""));
    assert(candidate((""#6@2"")) == (""2@6#""));
    assert(candidate((""#$a^D"")) == (""#$A^d""));
    assert(candidate((""#ccc"")) == (""#CCC""));
}
"
HumanEval/162,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एगो स्ट्रिंग 'text' देल गेल हई, त ओकर md5 हैश समकक्ष स्ट्रिंग लौटाई। अगर 'text' एगो खाली स्ट्रिंग हई, त लौटाई कोनो न. >>> string_to_md5((""हैलो वर्ल्ड"")) ""3e25960a79dbc69b674cd4ec67a72c62""
std::optional<std::string> string_to_md5(std::string text) {
","#include<assert.h>
#include<bits/stdc++.h>
#include <optional>

#include <openssl/md5.h>
#include <iomanip>
#include <sstream>

std::optional<std::string> string_to_md5(std::string text) {
    if (text.empty()) {
        return std::nullopt;
    }

    unsigned char digest[MD5_DIGEST_LENGTH];
    MD5((unsigned char*)text.c_str(), text.length(), digest);

    std::stringstream ss;
    for (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];
    }
    return ss.str();
}","}
int main() {
    auto candidate = string_to_md5;
    assert(candidate((""Hello world"")) == ""3e25960a79dbc69b674cd4ec67a72c62"");
    assert(candidate(("""")) == std::nullopt);
    assert(candidate((""A B C"")) == ""0ef78513b0cb8cef12743f5aeb35f888"");
    assert(candidate((""password"")) == ""5f4dcc3b5aa765d61d8327deb882cf99"");
}
"
HumanEval/163,mag_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// दूगो धनात्मक पूर्णांक a आउर b के लेल, a आउर b के बीच सम अंक के आरोही क्रम में लौटाई। उदाहरण के लेल: >>> generate_integers (((2), (8)) (std::vector<long> (((long) 2, (long) 4, (long) 6, (long) 8)) >>> generate_integers (((8), (2)) (std::vector<long> (((long) 2, (long) 4, (long) 6, (long) 8)) >>> generate_integers (((10), (14)) (std::vector<long> ((())
std::vector<long> generate_integers(long a, long b) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> generate_integers(long a, long b) {
    std::vector<long> result;
    long start = std::min(a, b);
    long end = std::max(a, b);
    for (long i = start; i <= end; ++i) {
        if (i % 2 == 0) {
            result.push_back(i);
        }
    }
    return result;
}","}
int main() {
    auto candidate = generate_integers;
    assert(candidate((2), (10)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((10), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((132), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((17), (89)) == (std::vector<long>()));
}
"
